
CUBEMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d240  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  0800d420  0800d420  0001d420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d508  0800d508  0002019c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d508  0800d508  0001d508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d510  0800d510  0002019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d510  0800d510  0001d510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d514  0800d514  0001d514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000019c  20000000  0800d518  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c04  2000019c  0800d6b4  0002019c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000da0  0800d6b4  00020da0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002560b  00000000  00000000  0002020f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004e53  00000000  00000000  0004581a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001dc8  00000000  00000000  0004a670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016de  00000000  00000000  0004c438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000255cd  00000000  00000000  0004db16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029fa5  00000000  00000000  000730e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8d2a  00000000  00000000  0009d088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008210  00000000  00000000  00185db4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0018dfc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000019c 	.word	0x2000019c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d408 	.word	0x0800d408

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001a0 	.word	0x200001a0
 800021c:	0800d408 	.word	0x0800d408

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b970 	b.w	80005c8 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9e08      	ldr	r6, [sp, #32]
 8000306:	460d      	mov	r5, r1
 8000308:	4604      	mov	r4, r0
 800030a:	460f      	mov	r7, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14a      	bne.n	80003a6 <__udivmoddi4+0xa6>
 8000310:	428a      	cmp	r2, r1
 8000312:	4694      	mov	ip, r2
 8000314:	d965      	bls.n	80003e2 <__udivmoddi4+0xe2>
 8000316:	fab2 f382 	clz	r3, r2
 800031a:	b143      	cbz	r3, 800032e <__udivmoddi4+0x2e>
 800031c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000320:	f1c3 0220 	rsb	r2, r3, #32
 8000324:	409f      	lsls	r7, r3
 8000326:	fa20 f202 	lsr.w	r2, r0, r2
 800032a:	4317      	orrs	r7, r2
 800032c:	409c      	lsls	r4, r3
 800032e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000332:	fa1f f58c 	uxth.w	r5, ip
 8000336:	fbb7 f1fe 	udiv	r1, r7, lr
 800033a:	0c22      	lsrs	r2, r4, #16
 800033c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000340:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000344:	fb01 f005 	mul.w	r0, r1, r5
 8000348:	4290      	cmp	r0, r2
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x62>
 800034c:	eb1c 0202 	adds.w	r2, ip, r2
 8000350:	f101 37ff 	add.w	r7, r1, #4294967295
 8000354:	f080 811c 	bcs.w	8000590 <__udivmoddi4+0x290>
 8000358:	4290      	cmp	r0, r2
 800035a:	f240 8119 	bls.w	8000590 <__udivmoddi4+0x290>
 800035e:	3902      	subs	r1, #2
 8000360:	4462      	add	r2, ip
 8000362:	1a12      	subs	r2, r2, r0
 8000364:	b2a4      	uxth	r4, r4
 8000366:	fbb2 f0fe 	udiv	r0, r2, lr
 800036a:	fb0e 2210 	mls	r2, lr, r0, r2
 800036e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000372:	fb00 f505 	mul.w	r5, r0, r5
 8000376:	42a5      	cmp	r5, r4
 8000378:	d90a      	bls.n	8000390 <__udivmoddi4+0x90>
 800037a:	eb1c 0404 	adds.w	r4, ip, r4
 800037e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000382:	f080 8107 	bcs.w	8000594 <__udivmoddi4+0x294>
 8000386:	42a5      	cmp	r5, r4
 8000388:	f240 8104 	bls.w	8000594 <__udivmoddi4+0x294>
 800038c:	4464      	add	r4, ip
 800038e:	3802      	subs	r0, #2
 8000390:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000394:	1b64      	subs	r4, r4, r5
 8000396:	2100      	movs	r1, #0
 8000398:	b11e      	cbz	r6, 80003a2 <__udivmoddi4+0xa2>
 800039a:	40dc      	lsrs	r4, r3
 800039c:	2300      	movs	r3, #0
 800039e:	e9c6 4300 	strd	r4, r3, [r6]
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0xbc>
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	f000 80ed 	beq.w	800058a <__udivmoddi4+0x28a>
 80003b0:	2100      	movs	r1, #0
 80003b2:	e9c6 0500 	strd	r0, r5, [r6]
 80003b6:	4608      	mov	r0, r1
 80003b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003bc:	fab3 f183 	clz	r1, r3
 80003c0:	2900      	cmp	r1, #0
 80003c2:	d149      	bne.n	8000458 <__udivmoddi4+0x158>
 80003c4:	42ab      	cmp	r3, r5
 80003c6:	d302      	bcc.n	80003ce <__udivmoddi4+0xce>
 80003c8:	4282      	cmp	r2, r0
 80003ca:	f200 80f8 	bhi.w	80005be <__udivmoddi4+0x2be>
 80003ce:	1a84      	subs	r4, r0, r2
 80003d0:	eb65 0203 	sbc.w	r2, r5, r3
 80003d4:	2001      	movs	r0, #1
 80003d6:	4617      	mov	r7, r2
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d0e2      	beq.n	80003a2 <__udivmoddi4+0xa2>
 80003dc:	e9c6 4700 	strd	r4, r7, [r6]
 80003e0:	e7df      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003e2:	b902      	cbnz	r2, 80003e6 <__udivmoddi4+0xe6>
 80003e4:	deff      	udf	#255	; 0xff
 80003e6:	fab2 f382 	clz	r3, r2
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f040 8090 	bne.w	8000510 <__udivmoddi4+0x210>
 80003f0:	1a8a      	subs	r2, r1, r2
 80003f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f6:	fa1f fe8c 	uxth.w	lr, ip
 80003fa:	2101      	movs	r1, #1
 80003fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000400:	fb07 2015 	mls	r0, r7, r5, r2
 8000404:	0c22      	lsrs	r2, r4, #16
 8000406:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800040a:	fb0e f005 	mul.w	r0, lr, r5
 800040e:	4290      	cmp	r0, r2
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x124>
 8000412:	eb1c 0202 	adds.w	r2, ip, r2
 8000416:	f105 38ff 	add.w	r8, r5, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x122>
 800041c:	4290      	cmp	r0, r2
 800041e:	f200 80cb 	bhi.w	80005b8 <__udivmoddi4+0x2b8>
 8000422:	4645      	mov	r5, r8
 8000424:	1a12      	subs	r2, r2, r0
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb2 f0f7 	udiv	r0, r2, r7
 800042c:	fb07 2210 	mls	r2, r7, r0, r2
 8000430:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000434:	fb0e fe00 	mul.w	lr, lr, r0
 8000438:	45a6      	cmp	lr, r4
 800043a:	d908      	bls.n	800044e <__udivmoddi4+0x14e>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 32ff 	add.w	r2, r0, #4294967295
 8000444:	d202      	bcs.n	800044c <__udivmoddi4+0x14c>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f200 80bb 	bhi.w	80005c2 <__udivmoddi4+0x2c2>
 800044c:	4610      	mov	r0, r2
 800044e:	eba4 040e 	sub.w	r4, r4, lr
 8000452:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000456:	e79f      	b.n	8000398 <__udivmoddi4+0x98>
 8000458:	f1c1 0720 	rsb	r7, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000462:	ea4c 0c03 	orr.w	ip, ip, r3
 8000466:	fa05 f401 	lsl.w	r4, r5, r1
 800046a:	fa20 f307 	lsr.w	r3, r0, r7
 800046e:	40fd      	lsrs	r5, r7
 8000470:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000474:	4323      	orrs	r3, r4
 8000476:	fbb5 f8f9 	udiv	r8, r5, r9
 800047a:	fa1f fe8c 	uxth.w	lr, ip
 800047e:	fb09 5518 	mls	r5, r9, r8, r5
 8000482:	0c1c      	lsrs	r4, r3, #16
 8000484:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000488:	fb08 f50e 	mul.w	r5, r8, lr
 800048c:	42a5      	cmp	r5, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	fa00 f001 	lsl.w	r0, r0, r1
 8000496:	d90b      	bls.n	80004b0 <__udivmoddi4+0x1b0>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a0:	f080 8088 	bcs.w	80005b4 <__udivmoddi4+0x2b4>
 80004a4:	42a5      	cmp	r5, r4
 80004a6:	f240 8085 	bls.w	80005b4 <__udivmoddi4+0x2b4>
 80004aa:	f1a8 0802 	sub.w	r8, r8, #2
 80004ae:	4464      	add	r4, ip
 80004b0:	1b64      	subs	r4, r4, r5
 80004b2:	b29d      	uxth	r5, r3
 80004b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b8:	fb09 4413 	mls	r4, r9, r3, r4
 80004bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004c4:	45a6      	cmp	lr, r4
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x1da>
 80004c8:	eb1c 0404 	adds.w	r4, ip, r4
 80004cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d0:	d26c      	bcs.n	80005ac <__udivmoddi4+0x2ac>
 80004d2:	45a6      	cmp	lr, r4
 80004d4:	d96a      	bls.n	80005ac <__udivmoddi4+0x2ac>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	4464      	add	r4, ip
 80004da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004de:	fba3 9502 	umull	r9, r5, r3, r2
 80004e2:	eba4 040e 	sub.w	r4, r4, lr
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	46c8      	mov	r8, r9
 80004ea:	46ae      	mov	lr, r5
 80004ec:	d356      	bcc.n	800059c <__udivmoddi4+0x29c>
 80004ee:	d053      	beq.n	8000598 <__udivmoddi4+0x298>
 80004f0:	b156      	cbz	r6, 8000508 <__udivmoddi4+0x208>
 80004f2:	ebb0 0208 	subs.w	r2, r0, r8
 80004f6:	eb64 040e 	sbc.w	r4, r4, lr
 80004fa:	fa04 f707 	lsl.w	r7, r4, r7
 80004fe:	40ca      	lsrs	r2, r1
 8000500:	40cc      	lsrs	r4, r1
 8000502:	4317      	orrs	r7, r2
 8000504:	e9c6 7400 	strd	r7, r4, [r6]
 8000508:	4618      	mov	r0, r3
 800050a:	2100      	movs	r1, #0
 800050c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000510:	f1c3 0120 	rsb	r1, r3, #32
 8000514:	fa02 fc03 	lsl.w	ip, r2, r3
 8000518:	fa20 f201 	lsr.w	r2, r0, r1
 800051c:	fa25 f101 	lsr.w	r1, r5, r1
 8000520:	409d      	lsls	r5, r3
 8000522:	432a      	orrs	r2, r5
 8000524:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000528:	fa1f fe8c 	uxth.w	lr, ip
 800052c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000530:	fb07 1510 	mls	r5, r7, r0, r1
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800053a:	fb00 f50e 	mul.w	r5, r0, lr
 800053e:	428d      	cmp	r5, r1
 8000540:	fa04 f403 	lsl.w	r4, r4, r3
 8000544:	d908      	bls.n	8000558 <__udivmoddi4+0x258>
 8000546:	eb1c 0101 	adds.w	r1, ip, r1
 800054a:	f100 38ff 	add.w	r8, r0, #4294967295
 800054e:	d22f      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000550:	428d      	cmp	r5, r1
 8000552:	d92d      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000554:	3802      	subs	r0, #2
 8000556:	4461      	add	r1, ip
 8000558:	1b49      	subs	r1, r1, r5
 800055a:	b292      	uxth	r2, r2
 800055c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000560:	fb07 1115 	mls	r1, r7, r5, r1
 8000564:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000568:	fb05 f10e 	mul.w	r1, r5, lr
 800056c:	4291      	cmp	r1, r2
 800056e:	d908      	bls.n	8000582 <__udivmoddi4+0x282>
 8000570:	eb1c 0202 	adds.w	r2, ip, r2
 8000574:	f105 38ff 	add.w	r8, r5, #4294967295
 8000578:	d216      	bcs.n	80005a8 <__udivmoddi4+0x2a8>
 800057a:	4291      	cmp	r1, r2
 800057c:	d914      	bls.n	80005a8 <__udivmoddi4+0x2a8>
 800057e:	3d02      	subs	r5, #2
 8000580:	4462      	add	r2, ip
 8000582:	1a52      	subs	r2, r2, r1
 8000584:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000588:	e738      	b.n	80003fc <__udivmoddi4+0xfc>
 800058a:	4631      	mov	r1, r6
 800058c:	4630      	mov	r0, r6
 800058e:	e708      	b.n	80003a2 <__udivmoddi4+0xa2>
 8000590:	4639      	mov	r1, r7
 8000592:	e6e6      	b.n	8000362 <__udivmoddi4+0x62>
 8000594:	4610      	mov	r0, r2
 8000596:	e6fb      	b.n	8000390 <__udivmoddi4+0x90>
 8000598:	4548      	cmp	r0, r9
 800059a:	d2a9      	bcs.n	80004f0 <__udivmoddi4+0x1f0>
 800059c:	ebb9 0802 	subs.w	r8, r9, r2
 80005a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005a4:	3b01      	subs	r3, #1
 80005a6:	e7a3      	b.n	80004f0 <__udivmoddi4+0x1f0>
 80005a8:	4645      	mov	r5, r8
 80005aa:	e7ea      	b.n	8000582 <__udivmoddi4+0x282>
 80005ac:	462b      	mov	r3, r5
 80005ae:	e794      	b.n	80004da <__udivmoddi4+0x1da>
 80005b0:	4640      	mov	r0, r8
 80005b2:	e7d1      	b.n	8000558 <__udivmoddi4+0x258>
 80005b4:	46d0      	mov	r8, sl
 80005b6:	e77b      	b.n	80004b0 <__udivmoddi4+0x1b0>
 80005b8:	3d02      	subs	r5, #2
 80005ba:	4462      	add	r2, ip
 80005bc:	e732      	b.n	8000424 <__udivmoddi4+0x124>
 80005be:	4608      	mov	r0, r1
 80005c0:	e70a      	b.n	80003d8 <__udivmoddi4+0xd8>
 80005c2:	4464      	add	r4, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e742      	b.n	800044e <__udivmoddi4+0x14e>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <Update_FIR_filter>:
//----------------------FIR-------------------
#define FIR_FILTER_LENGTH 10
static float FIR_INPULSE_RESPONSE[FIR_FILTER_LENGTH] = {0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f};
uint8_t FIR_index = 0;
float FIR_Values[FIR_FILTER_LENGTH] = {0};
float Update_FIR_filter(float input){
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	ed87 0a01 	vstr	s0, [r7, #4]
	FIR_Values[FIR_index] = input;
 80005d6:	4b1e      	ldr	r3, [pc, #120]	; (8000650 <Update_FIR_filter+0x84>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	4a1e      	ldr	r2, [pc, #120]	; (8000654 <Update_FIR_filter+0x88>)
 80005dc:	009b      	lsls	r3, r3, #2
 80005de:	4413      	add	r3, r2
 80005e0:	687a      	ldr	r2, [r7, #4]
 80005e2:	601a      	str	r2, [r3, #0]
	float temp;
	for(int i = 0; i < FIR_FILTER_LENGTH; i++){
 80005e4:	2300      	movs	r3, #0
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	e016      	b.n	8000618 <Update_FIR_filter+0x4c>
		temp += FIR_INPULSE_RESPONSE[i]*FIR_Values[i];
 80005ea:	4a1b      	ldr	r2, [pc, #108]	; (8000658 <Update_FIR_filter+0x8c>)
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	009b      	lsls	r3, r3, #2
 80005f0:	4413      	add	r3, r2
 80005f2:	ed93 7a00 	vldr	s14, [r3]
 80005f6:	4a17      	ldr	r2, [pc, #92]	; (8000654 <Update_FIR_filter+0x88>)
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	009b      	lsls	r3, r3, #2
 80005fc:	4413      	add	r3, r2
 80005fe:	edd3 7a00 	vldr	s15, [r3]
 8000602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000606:	ed97 7a03 	vldr	s14, [r7, #12]
 800060a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800060e:	edc7 7a03 	vstr	s15, [r7, #12]
	for(int i = 0; i < FIR_FILTER_LENGTH; i++){
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	3301      	adds	r3, #1
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	2b09      	cmp	r3, #9
 800061c:	dde5      	ble.n	80005ea <Update_FIR_filter+0x1e>
	}
	if(FIR_index < FIR_FILTER_LENGTH-1)FIR_index++;
 800061e:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <Update_FIR_filter+0x84>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b08      	cmp	r3, #8
 8000624:	d806      	bhi.n	8000634 <Update_FIR_filter+0x68>
 8000626:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <Update_FIR_filter+0x84>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	3301      	adds	r3, #1
 800062c:	b2da      	uxtb	r2, r3
 800062e:	4b08      	ldr	r3, [pc, #32]	; (8000650 <Update_FIR_filter+0x84>)
 8000630:	701a      	strb	r2, [r3, #0]
 8000632:	e002      	b.n	800063a <Update_FIR_filter+0x6e>
	else FIR_index = 0;
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <Update_FIR_filter+0x84>)
 8000636:	2200      	movs	r2, #0
 8000638:	701a      	strb	r2, [r3, #0]
	return temp;
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	ee07 3a90 	vmov	s15, r3
}
 8000640:	eeb0 0a67 	vmov.f32	s0, s15
 8000644:	3714      	adds	r7, #20
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	200001f4 	.word	0x200001f4
 8000654:	200001f8 	.word	0x200001f8
 8000658:	20000068 	.word	0x20000068

0800065c <Current_IRQ>:
PID_instance Current_PID = {0};
PID_instance Velocity_PID = {0};
PID_instance Angle_PID = {0};

//-------------------IRQ handlers---------------------
void Current_IRQ(Current* ptr){
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
	#ifdef RUNNING_LED_DEBUG
	HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
	HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
	#endif

    if(ptr != NULL)memcpy(&IRQ_Current, ptr, sizeof(Current));
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d008      	beq.n	800067c <Current_IRQ+0x20>
 800066a:	2210      	movs	r2, #16
 800066c:	6879      	ldr	r1, [r7, #4]
 800066e:	4805      	ldr	r0, [pc, #20]	; (8000684 <Current_IRQ+0x28>)
 8000670:	f00c fa7a 	bl	800cb68 <memcpy>
    else return;
    Current_Callback_flag = 1;
 8000674:	4b04      	ldr	r3, [pc, #16]	; (8000688 <Current_IRQ+0x2c>)
 8000676:	2201      	movs	r2, #1
 8000678:	701a      	strb	r2, [r3, #0]
 800067a:	e000      	b.n	800067e <Current_IRQ+0x22>
    else return;
 800067c:	bf00      	nop
}
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	200001c8 	.word	0x200001c8
 8000688:	200001b8 	.word	0x200001b8

0800068c <Voltage_Temp_IRQ>:
void Voltage_Temp_IRQ(Voltage_Temp* ptr){
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
	memcpy(&IRQ_Voltage_Temp, ptr, sizeof(Voltage_Temp));
 8000694:	2208      	movs	r2, #8
 8000696:	6879      	ldr	r1, [r7, #4]
 8000698:	4803      	ldr	r0, [pc, #12]	; (80006a8 <Voltage_Temp_IRQ+0x1c>)
 800069a:	f00c fa65 	bl	800cb68 <memcpy>
}
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	200001d8 	.word	0x200001d8

080006ac <Encoders_IRQ>:
void Encoders_IRQ(Encoders* ptr){
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
	memcpy(&IRQ_Encoders, ptr, sizeof(Encoders));
 80006b4:	2214      	movs	r2, #20
 80006b6:	6879      	ldr	r1, [r7, #4]
 80006b8:	4803      	ldr	r0, [pc, #12]	; (80006c8 <Encoders_IRQ+0x1c>)
 80006ba:	f00c fa55 	bl	800cb68 <memcpy>
}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	200001e0 	.word	0x200001e0

080006cc <Can_RX_Status_IRQ>:

//-------------------CAN RX------------------------
void Can_RX_Status_IRQ(CAN_Status* ptr){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
	memcpy(&IRQ_Status, ptr, sizeof(CAN_Status));
 80006d4:	220c      	movs	r2, #12
 80006d6:	6879      	ldr	r1, [r7, #4]
 80006d8:	4803      	ldr	r0, [pc, #12]	; (80006e8 <Can_RX_Status_IRQ+0x1c>)
 80006da:	f00c fa45 	bl	800cb68 <memcpy>

}
 80006de:	bf00      	nop
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000220 	.word	0x20000220

080006ec <check_value>:
	.max = 10,
	.min = 0
};

//check value OK
LIMITS_t check_value(CAN_LIMITS* ptr, float value){
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	ed87 0a00 	vstr	s0, [r7]
	if(value >= ptr->max_error || value <= ptr->min_error) return LIMIT_ERROR;			//error
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	edd3 7a05 	vldr	s15, [r3, #20]
 80006fe:	ed97 7a00 	vldr	s14, [r7]
 8000702:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800070a:	da09      	bge.n	8000720 <check_value+0x34>
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	edd3 7a02 	vldr	s15, [r3, #8]
 8000712:	ed97 7a00 	vldr	s14, [r7]
 8000716:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800071a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800071e:	d801      	bhi.n	8000724 <check_value+0x38>
 8000720:	2302      	movs	r3, #2
 8000722:	e016      	b.n	8000752 <check_value+0x66>
	if(value >= ptr->max_warning || value <= ptr->min_warning) return LIMIT_WARNING;	//warning
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	edd3 7a04 	vldr	s15, [r3, #16]
 800072a:	ed97 7a00 	vldr	s14, [r7]
 800072e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000736:	da09      	bge.n	800074c <check_value+0x60>
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	edd3 7a01 	vldr	s15, [r3, #4]
 800073e:	ed97 7a00 	vldr	s14, [r7]
 8000742:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d801      	bhi.n	8000750 <check_value+0x64>
 800074c:	2301      	movs	r3, #1
 800074e:	e000      	b.n	8000752 <check_value+0x66>
	return LIMIT_OK;																	//OK
 8000750:	2300      	movs	r3, #0
}
 8000752:	4618      	mov	r0, r3
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
	...

08000760 <BLDC_main>:
	if(value < ptr->min)return ptr->min;
	return value;
}

//------------------------MAIN-------------------------
void BLDC_main(void){
 8000760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000762:	f5ad 7d6b 	sub.w	sp, sp, #940	; 0x3ac
 8000766:	af06      	add	r7, sp, #24
	HAL_Delay(1000);
 8000768:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800076c:	f003 fb4c 	bl	8003e08 <HAL_Delay>
	//----------------PID---------
	SetSampleTime(&Current_PID, 40); //40us = 25kHz
 8000770:	2128      	movs	r1, #40	; 0x28
 8000772:	489b      	ldr	r0, [pc, #620]	; (80009e0 <BLDC_main+0x280>)
 8000774:	f001 f992 	bl	8001a9c <SetSampleTime>
	SetTunings(&Current_PID, 0.005f, 0.001f, 0.0f, 1); //alva
 8000778:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800077c:	ed9f 1a99 	vldr	s2, [pc, #612]	; 80009e4 <BLDC_main+0x284>
 8000780:	eddf 0a99 	vldr	s1, [pc, #612]	; 80009e8 <BLDC_main+0x288>
 8000784:	ed9f 0a99 	vldr	s0, [pc, #612]	; 80009ec <BLDC_main+0x28c>
 8000788:	4895      	ldr	r0, [pc, #596]	; (80009e0 <BLDC_main+0x280>)
 800078a:	f001 f8cd 	bl	8001928 <SetTunings>
//	SetTunings(&Current_PID, 0.005f, 40.0f, 0.0f, 1); //gimbal
	SetOutputLimits(&Current_PID, 0, 1499);
 800078e:	eddf 0a98 	vldr	s1, [pc, #608]	; 80009f0 <BLDC_main+0x290>
 8000792:	ed9f 0a94 	vldr	s0, [pc, #592]	; 80009e4 <BLDC_main+0x284>
 8000796:	4892      	ldr	r0, [pc, #584]	; (80009e0 <BLDC_main+0x280>)
 8000798:	f001 f9b4 	bl	8001b04 <SetOutputLimits>
	SetControllerDirection(&Current_PID, DIRECT);
 800079c:	2100      	movs	r1, #0
 800079e:	4890      	ldr	r0, [pc, #576]	; (80009e0 <BLDC_main+0x280>)
 80007a0:	f001 fa60 	bl	8001c64 <SetControllerDirection>
	SetMode(&Current_PID,  AUTOMATIC);
 80007a4:	2101      	movs	r1, #1
 80007a6:	488e      	ldr	r0, [pc, #568]	; (80009e0 <BLDC_main+0x280>)
 80007a8:	f001 fa08 	bl	8001bbc <SetMode>
	Initialize(&Current_PID);
 80007ac:	488c      	ldr	r0, [pc, #560]	; (80009e0 <BLDC_main+0x280>)
 80007ae:	f001 fa27 	bl	8001c00 <Initialize>

	SetSampleTime(&Velocity_PID, 100); //100s = 10kHz
 80007b2:	2164      	movs	r1, #100	; 0x64
 80007b4:	488f      	ldr	r0, [pc, #572]	; (80009f4 <BLDC_main+0x294>)
 80007b6:	f001 f971 	bl	8001a9c <SetSampleTime>
	SetTunings(&Velocity_PID, 0.00001f, 0.1f, 0.0f, 1);
 80007ba:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80007be:	ed9f 1a89 	vldr	s2, [pc, #548]	; 80009e4 <BLDC_main+0x284>
 80007c2:	eddf 0a8d 	vldr	s1, [pc, #564]	; 80009f8 <BLDC_main+0x298>
 80007c6:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 80009fc <BLDC_main+0x29c>
 80007ca:	488a      	ldr	r0, [pc, #552]	; (80009f4 <BLDC_main+0x294>)
 80007cc:	f001 f8ac 	bl	8001928 <SetTunings>
	SetOutputLimits(&Velocity_PID, 0, 500);
 80007d0:	eddf 0a8b 	vldr	s1, [pc, #556]	; 8000a00 <BLDC_main+0x2a0>
 80007d4:	ed9f 0a83 	vldr	s0, [pc, #524]	; 80009e4 <BLDC_main+0x284>
 80007d8:	4886      	ldr	r0, [pc, #536]	; (80009f4 <BLDC_main+0x294>)
 80007da:	f001 f993 	bl	8001b04 <SetOutputLimits>
	SetControllerDirection(&Velocity_PID, DIRECT);
 80007de:	2100      	movs	r1, #0
 80007e0:	4884      	ldr	r0, [pc, #528]	; (80009f4 <BLDC_main+0x294>)
 80007e2:	f001 fa3f 	bl	8001c64 <SetControllerDirection>
	SetMode(&Velocity_PID,  AUTOMATIC);
 80007e6:	2101      	movs	r1, #1
 80007e8:	4882      	ldr	r0, [pc, #520]	; (80009f4 <BLDC_main+0x294>)
 80007ea:	f001 f9e7 	bl	8001bbc <SetMode>
	Initialize(&Velocity_PID);
 80007ee:	4881      	ldr	r0, [pc, #516]	; (80009f4 <BLDC_main+0x294>)
 80007f0:	f001 fa06 	bl	8001c00 <Initialize>


	SetSampleTime(&Angle_PID, 100); //100s = 10kHz
 80007f4:	2164      	movs	r1, #100	; 0x64
 80007f6:	4883      	ldr	r0, [pc, #524]	; (8000a04 <BLDC_main+0x2a4>)
 80007f8:	f001 f950 	bl	8001a9c <SetSampleTime>
	SetTunings(&Angle_PID, 10.0f, 0.0f, 0.0f, 1);
 80007fc:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8000800:	ed9f 1a78 	vldr	s2, [pc, #480]	; 80009e4 <BLDC_main+0x284>
 8000804:	eddf 0a77 	vldr	s1, [pc, #476]	; 80009e4 <BLDC_main+0x284>
 8000808:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800080c:	487d      	ldr	r0, [pc, #500]	; (8000a04 <BLDC_main+0x2a4>)
 800080e:	f001 f88b 	bl	8001928 <SetTunings>
	SetOutputLimits(&Angle_PID, -4000000, 4000000);
 8000812:	eddf 0a7d 	vldr	s1, [pc, #500]	; 8000a08 <BLDC_main+0x2a8>
 8000816:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8000a0c <BLDC_main+0x2ac>
 800081a:	487a      	ldr	r0, [pc, #488]	; (8000a04 <BLDC_main+0x2a4>)
 800081c:	f001 f972 	bl	8001b04 <SetOutputLimits>
	SetControllerDirection(&Angle_PID, DIRECT);
 8000820:	2100      	movs	r1, #0
 8000822:	4878      	ldr	r0, [pc, #480]	; (8000a04 <BLDC_main+0x2a4>)
 8000824:	f001 fa1e 	bl	8001c64 <SetControllerDirection>
	SetMode(&Angle_PID,  AUTOMATIC);
 8000828:	2101      	movs	r1, #1
 800082a:	4876      	ldr	r0, [pc, #472]	; (8000a04 <BLDC_main+0x2a4>)
 800082c:	f001 f9c6 	bl	8001bbc <SetMode>
	Initialize(&Angle_PID);
 8000830:	4874      	ldr	r0, [pc, #464]	; (8000a04 <BLDC_main+0x2a4>)
 8000832:	f001 f9e5 	bl	8001c00 <Initialize>

	//setup encoder
	ORBIS_init((void*)&Encoders_IRQ);
 8000836:	4876      	ldr	r0, [pc, #472]	; (8000a10 <BLDC_main+0x2b0>)
 8000838:	f000 fe64 	bl	8001504 <ORBIS_init>

	//setup current
	current_init((void*)&Current_IRQ);
 800083c:	4875      	ldr	r0, [pc, #468]	; (8000a14 <BLDC_main+0x2b4>)
 800083e:	f001 fc45 	bl	80020cc <current_init>

	//calibrate DC current offset
	HAL_Delay(100); //let thing settle before starting
 8000842:	2064      	movs	r0, #100	; 0x64
 8000844:	f003 fae0 	bl	8003e08 <HAL_Delay>

	uint16_t current_offset_averaging = 100;
 8000848:	2364      	movs	r3, #100	; 0x64
 800084a:	f8a7 338e 	strh.w	r3, [r7, #910]	; 0x38e
	volatile int32_t current_offset = 0;
 800084e:	2300      	movs	r3, #0
 8000850:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
	while (current_offset_averaging){
 8000854:	e013      	b.n	800087e <BLDC_main+0x11e>
		while(!Current_Callback_flag);
 8000856:	bf00      	nop
 8000858:	4b6f      	ldr	r3, [pc, #444]	; (8000a18 <BLDC_main+0x2b8>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d0fb      	beq.n	8000858 <BLDC_main+0xf8>
		Current_Callback_flag = 0;
 8000860:	4b6d      	ldr	r3, [pc, #436]	; (8000a18 <BLDC_main+0x2b8>)
 8000862:	2200      	movs	r2, #0
 8000864:	701a      	strb	r2, [r3, #0]
		current_offset += IRQ_Current.Current_DC;
 8000866:	4b6d      	ldr	r3, [pc, #436]	; (8000a1c <BLDC_main+0x2bc>)
 8000868:	68da      	ldr	r2, [r3, #12]
 800086a:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 800086e:	4413      	add	r3, r2
 8000870:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
		current_offset_averaging--;
 8000874:	f8b7 338e 	ldrh.w	r3, [r7, #910]	; 0x38e
 8000878:	3b01      	subs	r3, #1
 800087a:	f8a7 338e 	strh.w	r3, [r7, #910]	; 0x38e
	while (current_offset_averaging){
 800087e:	f8b7 338e 	ldrh.w	r3, [r7, #910]	; 0x38e
 8000882:	2b00      	cmp	r3, #0
 8000884:	d1e7      	bne.n	8000856 <BLDC_main+0xf6>
	}
	current_offset = current_offset/100;
 8000886:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 800088a:	4a65      	ldr	r2, [pc, #404]	; (8000a20 <BLDC_main+0x2c0>)
 800088c:	fb82 1203 	smull	r1, r2, r2, r3
 8000890:	1152      	asrs	r2, r2, #5
 8000892:	17db      	asrs	r3, r3, #31
 8000894:	1ad3      	subs	r3, r2, r3
 8000896:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360

	//setup voltage and temperature readings
	voltage_temperature_init((void*)&Voltage_Temp_IRQ);
 800089a:	4862      	ldr	r0, [pc, #392]	; (8000a24 <BLDC_main+0x2c4>)
 800089c:	f001 fc30 	bl	8002100 <voltage_temperature_init>
	//setup temperature and voltage
	//temp_volt_init((void*)&Voltage_Temp_IRQ);

	//setup CAN
	//-----------------CAN----------------------
	FDCAN_addCallback(&hfdcan1, (CAN_STATUS_ID << 8) 		| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_Status_IRQ);
 80008a0:	4a61      	ldr	r2, [pc, #388]	; (8000a28 <BLDC_main+0x2c8>)
 80008a2:	2136      	movs	r1, #54	; 0x36
 80008a4:	4861      	ldr	r0, [pc, #388]	; (8000a2c <BLDC_main+0x2cc>)
 80008a6:	f001 fe9f 	bl	80025e8 <FDCAN_addCallback>
//	FDCAN_addCallback(&hfdcan1, (CAN_LIMITS_ID << 8) 		| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_Limits_IRQ);
//	FDCAN_addCallback(&hfdcan1, (CAN_PID_CURRENT_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_PID_Current_IRQ);
//	FDCAN_addCallback(&hfdcan1, (CAN_PID_VELOCITY_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_PID_Velocity_IRQ);
//	FDCAN_addCallback(&hfdcan1, (CAN_PID_ANGLE_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_PID_Angle_IRQ);

	FDCAN_Start(&hfdcan1);
 80008aa:	4860      	ldr	r0, [pc, #384]	; (8000a2c <BLDC_main+0x2cc>)
 80008ac:	f001 fe80 	bl	80025b0 <FDCAN_Start>

	//--------------setup PWM------------------
	CTRL_init_PWM();
 80008b0:	f000 fc56 	bl	8001160 <CTRL_init_PWM>

	HAL_Delay(100); //let thing settle before starting
 80008b4:	2064      	movs	r0, #100	; 0x64
 80008b6:	f003 faa7 	bl	8003e08 <HAL_Delay>

	Current IRQ_Current_BUFF = {0};
 80008ba:	f507 7354 	add.w	r3, r7, #848	; 0x350
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
	Voltage_Temp IRQ_Voltage_Temp_BUFF = {0};
 80008c8:	f507 7352 	add.w	r3, r7, #840	; 0x348
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
	Encoders IRQ_Encoders_BUFF = {0};
 80008d2:	f507 734d 	add.w	r3, r7, #820	; 0x334
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]
	CAN_Status  IRQ_STATUS_BUFF = {0};
 80008e2:	f507 734a 	add.w	r3, r7, #808	; 0x328
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]


	BLDC_STATUS_Feedback Status = BLDC_STOPPED_WITH_BREAK;
 80008ee:	2300      	movs	r3, #0
 80008f0:	f887 338d 	strb.w	r3, [r7, #909]	; 0x38d

	float velocity_temp[200] = {0};
 80008f4:	f507 7364 	add.w	r3, r7, #912	; 0x390
 80008f8:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 80008fc:	4618      	mov	r0, r3
 80008fe:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000902:	461a      	mov	r2, r3
 8000904:	2100      	movs	r1, #0
 8000906:	f00c f8fb 	bl	800cb00 <memset>
	uint32_t last_pos = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
	uint8_t velocity_index = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	f887 3387 	strb.w	r3, [r7, #903]	; 0x387
	float velocity = 0;
 8000916:	f04f 0300 	mov.w	r3, #0
 800091a:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380

	int32_t position_overflow = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c

	int32_t pos_set_test = 360000*10;
 8000924:	4b42      	ldr	r3, [pc, #264]	; (8000a30 <BLDC_main+0x2d0>)
 8000926:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
	while(1){
		#ifdef RUNNING_LED_DEBUG2
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
		#endif
		//check if flag has been set indicating new current measurements
		while(!Current_Callback_flag);
 800092a:	bf00      	nop
 800092c:	4b3a      	ldr	r3, [pc, #232]	; (8000a18 <BLDC_main+0x2b8>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d0fb      	beq.n	800092c <BLDC_main+0x1cc>

		Current_Callback_flag = 0;
 8000934:	4b38      	ldr	r3, [pc, #224]	; (8000a18 <BLDC_main+0x2b8>)
 8000936:	2200      	movs	r2, #0
 8000938:	701a      	strb	r2, [r3, #0]

		memcpy(&IRQ_Current_BUFF, &IRQ_Current, sizeof(Current));
 800093a:	4b38      	ldr	r3, [pc, #224]	; (8000a1c <BLDC_main+0x2bc>)
 800093c:	f507 7454 	add.w	r4, r7, #848	; 0x350
 8000940:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000942:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		memcpy(&IRQ_Voltage_Temp_BUFF, &IRQ_Voltage_Temp, sizeof(Voltage_Temp));
 8000946:	4a3b      	ldr	r2, [pc, #236]	; (8000a34 <BLDC_main+0x2d4>)
 8000948:	f507 7352 	add.w	r3, r7, #840	; 0x348
 800094c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000950:	e883 0003 	stmia.w	r3, {r0, r1}
		memcpy(&IRQ_Encoders_BUFF, &IRQ_Encoders, sizeof(Encoders));
 8000954:	4b38      	ldr	r3, [pc, #224]	; (8000a38 <BLDC_main+0x2d8>)
 8000956:	f507 744d 	add.w	r4, r7, #820	; 0x334
 800095a:	461d      	mov	r5, r3
 800095c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800095e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000960:	682b      	ldr	r3, [r5, #0]
 8000962:	6023      	str	r3, [r4, #0]
		memcpy(&IRQ_STATUS_BUFF, &IRQ_Status, sizeof(CAN_Status));
 8000964:	4a35      	ldr	r2, [pc, #212]	; (8000a3c <BLDC_main+0x2dc>)
 8000966:	f507 734a 	add.w	r3, r7, #808	; 0x328
 800096a:	ca07      	ldmia	r2, {r0, r1, r2}
 800096c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		IRQ_Current_BUFF.Current_DC -= current_offset;
 8000970:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 8000974:	f8d7 235c 	ldr.w	r2, [r7, #860]	; 0x35c
 8000978:	1ad3      	subs	r3, r2, r3
 800097a:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c

		//start calibration
		if(Status == BLDC_STOPPED_WITH_BREAK && IRQ_STATUS_BUFF.status == INPUT_CALIBRATE_ENCODER)Status = BLDC_CALIBRATING_ENCODER;
 800097e:	f897 338d 	ldrb.w	r3, [r7, #909]	; 0x38d
 8000982:	2b00      	cmp	r3, #0
 8000984:	d107      	bne.n	8000996 <BLDC_main+0x236>
 8000986:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 800098a:	2b04      	cmp	r3, #4
 800098c:	d103      	bne.n	8000996 <BLDC_main+0x236>
 800098e:	2302      	movs	r3, #2
 8000990:	f887 338d 	strb.w	r3, [r7, #909]	; 0x38d
 8000994:	e061      	b.n	8000a5a <BLDC_main+0x2fa>

		//reset errors
		else if(Status == BLDC_STOPPED_WITH_BREAK && IRQ_STATUS_BUFF.status == INPUT_RESET_ERRORS)error = 0;
 8000996:	f897 338d 	ldrb.w	r3, [r7, #909]	; 0x38d
 800099a:	2b00      	cmp	r3, #0
 800099c:	d107      	bne.n	80009ae <BLDC_main+0x24e>
 800099e:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 80009a2:	2b05      	cmp	r3, #5
 80009a4:	d103      	bne.n	80009ae <BLDC_main+0x24e>
 80009a6:	4b26      	ldr	r3, [pc, #152]	; (8000a40 <BLDC_main+0x2e0>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	e055      	b.n	8000a5a <BLDC_main+0x2fa>

		//start motor when not running
		else if(Status == BLDC_STOPPED_WITH_BREAK && IRQ_STATUS_BUFF.status == INPUT_START)Status = BLDC_RUNNING;
 80009ae:	f897 338d 	ldrb.w	r3, [r7, #909]	; 0x38d
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d107      	bne.n	80009c6 <BLDC_main+0x266>
 80009b6:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 80009ba:	2b02      	cmp	r3, #2
 80009bc:	d103      	bne.n	80009c6 <BLDC_main+0x266>
 80009be:	2303      	movs	r3, #3
 80009c0:	f887 338d 	strb.w	r3, [r7, #909]	; 0x38d
 80009c4:	e049      	b.n	8000a5a <BLDC_main+0x2fa>

		//stop motor when running
		else if(Status == BLDC_RUNNING && IRQ_STATUS_BUFF.status == INPUT_STOP_WITH_BREAK)Status = BLDC_STOPPED_WITH_BREAK;
 80009c6:	f897 338d 	ldrb.w	r3, [r7, #909]	; 0x38d
 80009ca:	2b03      	cmp	r3, #3
 80009cc:	d13a      	bne.n	8000a44 <BLDC_main+0x2e4>
 80009ce:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d136      	bne.n	8000a44 <BLDC_main+0x2e4>
 80009d6:	2300      	movs	r3, #0
 80009d8:	f887 338d 	strb.w	r3, [r7, #909]	; 0x38d
 80009dc:	e03d      	b.n	8000a5a <BLDC_main+0x2fa>
 80009de:	bf00      	nop
 80009e0:	2000026c 	.word	0x2000026c
 80009e4:	00000000 	.word	0x00000000
 80009e8:	3a83126f 	.word	0x3a83126f
 80009ec:	3ba3d70a 	.word	0x3ba3d70a
 80009f0:	44bb6000 	.word	0x44bb6000
 80009f4:	200002ac 	.word	0x200002ac
 80009f8:	3dcccccd 	.word	0x3dcccccd
 80009fc:	3727c5ac 	.word	0x3727c5ac
 8000a00:	43fa0000 	.word	0x43fa0000
 8000a04:	200002ec 	.word	0x200002ec
 8000a08:	4a742400 	.word	0x4a742400
 8000a0c:	ca742400 	.word	0xca742400
 8000a10:	080006ad 	.word	0x080006ad
 8000a14:	0800065d 	.word	0x0800065d
 8000a18:	200001b8 	.word	0x200001b8
 8000a1c:	200001c8 	.word	0x200001c8
 8000a20:	51eb851f 	.word	0x51eb851f
 8000a24:	0800068d 	.word	0x0800068d
 8000a28:	080006cd 	.word	0x080006cd
 8000a2c:	200007e4 	.word	0x200007e4
 8000a30:	0036ee80 	.word	0x0036ee80
 8000a34:	200001d8 	.word	0x200001d8
 8000a38:	200001e0 	.word	0x200001e0
 8000a3c:	20000220 	.word	0x20000220
 8000a40:	200001c4 	.word	0x200001c4
		else if(Status == BLDC_RUNNING && IRQ_STATUS_BUFF.status == INPUT_STOP_AND_SHUTDOWN)Status = BLDC_STOPPED_AND_SHUTDOWN;
 8000a44:	f897 338d 	ldrb.w	r3, [r7, #909]	; 0x38d
 8000a48:	2b03      	cmp	r3, #3
 8000a4a:	d106      	bne.n	8000a5a <BLDC_main+0x2fa>
 8000a4c:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d102      	bne.n	8000a5a <BLDC_main+0x2fa>
 8000a54:	2301      	movs	r3, #1
 8000a56:	f887 338d 	strb.w	r3, [r7, #909]	; 0x38d

		//time keepers
		timing_CAN_feedback++;
 8000a5a:	4bbb      	ldr	r3, [pc, #748]	; (8000d48 <BLDC_main+0x5e8>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	4ab9      	ldr	r2, [pc, #740]	; (8000d48 <BLDC_main+0x5e8>)
 8000a62:	6013      	str	r3, [r2, #0]
		running_LED_timing++;
 8000a64:	4bb9      	ldr	r3, [pc, #740]	; (8000d4c <BLDC_main+0x5ec>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	4ab8      	ldr	r2, [pc, #736]	; (8000d4c <BLDC_main+0x5ec>)
 8000a6c:	6013      	str	r3, [r2, #0]

		//reset warnings
		uint32_t warning = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
		#endif

		LIMITS_t Limit_callback;

		Limit_callback = check_value(&LIMIT_Current, (float)IRQ_Current_BUFF.Current_DC);
 8000a74:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8000a78:	ee07 3a90 	vmov	s15, r3
 8000a7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a80:	eeb0 0a67 	vmov.f32	s0, s15
 8000a84:	48b2      	ldr	r0, [pc, #712]	; (8000d50 <BLDC_main+0x5f0>)
 8000a86:	f7ff fe31 	bl	80006ec <check_value>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	f887 336b 	strb.w	r3, [r7, #875]	; 0x36b
		warning |= (Limit_callback&1)      << 0; //warning
 8000a90:	f897 336b 	ldrb.w	r3, [r7, #875]	; 0x36b
 8000a94:	f003 0301 	and.w	r3, r3, #1
 8000a98:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
		error   |= ((Limit_callback&2)>>1) << 0; //error
 8000aa2:	f897 336b 	ldrb.w	r3, [r7, #875]	; 0x36b
 8000aa6:	105b      	asrs	r3, r3, #1
 8000aa8:	f003 0201 	and.w	r2, r3, #1
 8000aac:	4ba9      	ldr	r3, [pc, #676]	; (8000d54 <BLDC_main+0x5f4>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	4aa8      	ldr	r2, [pc, #672]	; (8000d54 <BLDC_main+0x5f4>)
 8000ab4:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_Encoder_1, (float)IRQ_Encoders_BUFF.Encoder1_pos);
 8000ab6:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8000aba:	ee07 3a90 	vmov	s15, r3
 8000abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ac2:	eeb0 0a67 	vmov.f32	s0, s15
 8000ac6:	48a4      	ldr	r0, [pc, #656]	; (8000d58 <BLDC_main+0x5f8>)
 8000ac8:	f7ff fe10 	bl	80006ec <check_value>
 8000acc:	4603      	mov	r3, r0
 8000ace:	f887 336b 	strb.w	r3, [r7, #875]	; 0x36b
		warning |= (Limit_callback&1)      << 1; //warning
 8000ad2:	f897 336b 	ldrb.w	r3, [r7, #875]	; 0x36b
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	f003 0302 	and.w	r3, r3, #2
 8000adc:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
		error   |= ((Limit_callback&2)>>1) << 1; //error
 8000ae6:	f897 336b 	ldrb.w	r3, [r7, #875]	; 0x36b
 8000aea:	f003 0202 	and.w	r2, r3, #2
 8000aee:	4b99      	ldr	r3, [pc, #612]	; (8000d54 <BLDC_main+0x5f4>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4313      	orrs	r3, r2
 8000af4:	4a97      	ldr	r2, [pc, #604]	; (8000d54 <BLDC_main+0x5f4>)
 8000af6:	6013      	str	r3, [r2, #0]

		Limit_callback= check_value(&LIMIT_Encoder_2, (float)IRQ_Encoders_BUFF.Encoder2_pos);
 8000af8:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8000afc:	ee07 3a90 	vmov	s15, r3
 8000b00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b04:	eeb0 0a67 	vmov.f32	s0, s15
 8000b08:	4894      	ldr	r0, [pc, #592]	; (8000d5c <BLDC_main+0x5fc>)
 8000b0a:	f7ff fdef 	bl	80006ec <check_value>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	f887 336b 	strb.w	r3, [r7, #875]	; 0x36b
		warning |= (Limit_callback&1)      << 2; //warning
 8000b14:	f897 336b 	ldrb.w	r3, [r7, #875]	; 0x36b
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	f003 0304 	and.w	r3, r3, #4
 8000b1e:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8000b22:	4313      	orrs	r3, r2
 8000b24:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
		error   |= ((Limit_callback&2)>>1) << 2; //error
 8000b28:	f897 336b 	ldrb.w	r3, [r7, #875]	; 0x36b
 8000b2c:	105b      	asrs	r3, r3, #1
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	f003 0204 	and.w	r2, r3, #4
 8000b34:	4b87      	ldr	r3, [pc, #540]	; (8000d54 <BLDC_main+0x5f4>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	4a86      	ldr	r2, [pc, #536]	; (8000d54 <BLDC_main+0x5f4>)
 8000b3c:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_Velocity, (float)IRQ_Encoders_BUFF.Velocity);
 8000b3e:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 8000b42:	ee07 3a90 	vmov	s15, r3
 8000b46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b4a:	eeb0 0a67 	vmov.f32	s0, s15
 8000b4e:	4884      	ldr	r0, [pc, #528]	; (8000d60 <BLDC_main+0x600>)
 8000b50:	f7ff fdcc 	bl	80006ec <check_value>
 8000b54:	4603      	mov	r3, r0
 8000b56:	f887 336b 	strb.w	r3, [r7, #875]	; 0x36b
		warning |= (Limit_callback&1)      << 3; //warning
 8000b5a:	f897 336b 	ldrb.w	r3, [r7, #875]	; 0x36b
 8000b5e:	00db      	lsls	r3, r3, #3
 8000b60:	f003 0308 	and.w	r3, r3, #8
 8000b64:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
		error   |= ((Limit_callback&2)>>1) << 3; //error
 8000b6e:	f897 336b 	ldrb.w	r3, [r7, #875]	; 0x36b
 8000b72:	105b      	asrs	r3, r3, #1
 8000b74:	00db      	lsls	r3, r3, #3
 8000b76:	f003 0208 	and.w	r2, r3, #8
 8000b7a:	4b76      	ldr	r3, [pc, #472]	; (8000d54 <BLDC_main+0x5f4>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	4a74      	ldr	r2, [pc, #464]	; (8000d54 <BLDC_main+0x5f4>)
 8000b82:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_V_AUX, (float)IRQ_Voltage_Temp_BUFF.V_aux);
 8000b84:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8000b88:	ee07 3a90 	vmov	s15, r3
 8000b8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b90:	eeb0 0a67 	vmov.f32	s0, s15
 8000b94:	4873      	ldr	r0, [pc, #460]	; (8000d64 <BLDC_main+0x604>)
 8000b96:	f7ff fda9 	bl	80006ec <check_value>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	f887 336b 	strb.w	r3, [r7, #875]	; 0x36b
		warning |= (Limit_callback&1)      << 4; //warning
 8000ba0:	f897 336b 	ldrb.w	r3, [r7, #875]	; 0x36b
 8000ba4:	011b      	lsls	r3, r3, #4
 8000ba6:	f003 0310 	and.w	r3, r3, #16
 8000baa:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
		error   |= ((Limit_callback&2)>>1) << 4; //error
 8000bb4:	f897 336b 	ldrb.w	r3, [r7, #875]	; 0x36b
 8000bb8:	105b      	asrs	r3, r3, #1
 8000bba:	011b      	lsls	r3, r3, #4
 8000bbc:	f003 0210 	and.w	r2, r3, #16
 8000bc0:	4b64      	ldr	r3, [pc, #400]	; (8000d54 <BLDC_main+0x5f4>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	4a63      	ldr	r2, [pc, #396]	; (8000d54 <BLDC_main+0x5f4>)
 8000bc8:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_V_BAT, (float)IRQ_Voltage_Temp_BUFF.V_Bat);
 8000bca:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 8000bce:	ee07 3a90 	vmov	s15, r3
 8000bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bd6:	eeb0 0a67 	vmov.f32	s0, s15
 8000bda:	4863      	ldr	r0, [pc, #396]	; (8000d68 <BLDC_main+0x608>)
 8000bdc:	f7ff fd86 	bl	80006ec <check_value>
 8000be0:	4603      	mov	r3, r0
 8000be2:	f887 336b 	strb.w	r3, [r7, #875]	; 0x36b
		warning |= (Limit_callback&1)      << 5; //warning
 8000be6:	f897 336b 	ldrb.w	r3, [r7, #875]	; 0x36b
 8000bea:	015b      	lsls	r3, r3, #5
 8000bec:	f003 0320 	and.w	r3, r3, #32
 8000bf0:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
		error   |= ((Limit_callback&2)>>1) << 5; //error
 8000bfa:	f897 336b 	ldrb.w	r3, [r7, #875]	; 0x36b
 8000bfe:	105b      	asrs	r3, r3, #1
 8000c00:	015b      	lsls	r3, r3, #5
 8000c02:	f003 0220 	and.w	r2, r3, #32
 8000c06:	4b53      	ldr	r3, [pc, #332]	; (8000d54 <BLDC_main+0x5f4>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	4a51      	ldr	r2, [pc, #324]	; (8000d54 <BLDC_main+0x5f4>)
 8000c0e:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_temp, (float)IRQ_Voltage_Temp_BUFF.Temp_NTC1);
 8000c10:	f997 334e 	ldrsb.w	r3, [r7, #846]	; 0x34e
 8000c14:	ee07 3a90 	vmov	s15, r3
 8000c18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c1c:	eeb0 0a67 	vmov.f32	s0, s15
 8000c20:	4852      	ldr	r0, [pc, #328]	; (8000d6c <BLDC_main+0x60c>)
 8000c22:	f7ff fd63 	bl	80006ec <check_value>
 8000c26:	4603      	mov	r3, r0
 8000c28:	f887 336b 	strb.w	r3, [r7, #875]	; 0x36b
		warning |= (Limit_callback&1)      << 6; //warning
 8000c2c:	f897 336b 	ldrb.w	r3, [r7, #875]	; 0x36b
 8000c30:	019b      	lsls	r3, r3, #6
 8000c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c36:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
		error   |= ((Limit_callback&2)>>1) << 6; //error
 8000c40:	f897 336b 	ldrb.w	r3, [r7, #875]	; 0x36b
 8000c44:	105b      	asrs	r3, r3, #1
 8000c46:	019b      	lsls	r3, r3, #6
 8000c48:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8000c4c:	4b41      	ldr	r3, [pc, #260]	; (8000d54 <BLDC_main+0x5f4>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	4a40      	ldr	r2, [pc, #256]	; (8000d54 <BLDC_main+0x5f4>)
 8000c54:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_temp, (float)IRQ_Voltage_Temp_BUFF.Temp_NTC2);
 8000c56:	f997 334f 	ldrsb.w	r3, [r7, #847]	; 0x34f
 8000c5a:	ee07 3a90 	vmov	s15, r3
 8000c5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c62:	eeb0 0a67 	vmov.f32	s0, s15
 8000c66:	4841      	ldr	r0, [pc, #260]	; (8000d6c <BLDC_main+0x60c>)
 8000c68:	f7ff fd40 	bl	80006ec <check_value>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	f887 336b 	strb.w	r3, [r7, #875]	; 0x36b
		warning |= (Limit_callback&1)      << 7; //warning
 8000c72:	f897 336b 	ldrb.w	r3, [r7, #875]	; 0x36b
 8000c76:	01db      	lsls	r3, r3, #7
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
		error   |= ((Limit_callback&2)>>1) << 7; //error
 8000c84:	f897 336b 	ldrb.w	r3, [r7, #875]	; 0x36b
 8000c88:	105b      	asrs	r3, r3, #1
 8000c8a:	01db      	lsls	r3, r3, #7
 8000c8c:	b2da      	uxtb	r2, r3
 8000c8e:	4b31      	ldr	r3, [pc, #196]	; (8000d54 <BLDC_main+0x5f4>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4313      	orrs	r3, r2
 8000c94:	4a2f      	ldr	r2, [pc, #188]	; (8000d54 <BLDC_main+0x5f4>)
 8000c96:	6013      	str	r3, [r2, #0]

		//-------------------RUN FIR FILTER---------------------
		float test = Update_FIR_filter((float)(IRQ_Current_BUFF.Current_DC));
 8000c98:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8000c9c:	ee07 3a90 	vmov	s15, r3
 8000ca0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ca4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ca8:	f7ff fc90 	bl	80005cc <Update_FIR_filter>
 8000cac:	ed87 0ad9 	vstr	s0, [r7, #868]	; 0x364

		//----------------------position-----------------
		if (last_pos > 270000 && IRQ_Encoders_BUFF.Encoder1_pos < 90000)position_overflow++;
 8000cb0:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 8000cb4:	4a2e      	ldr	r2, [pc, #184]	; (8000d70 <BLDC_main+0x610>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d90a      	bls.n	8000cd0 <BLDC_main+0x570>
 8000cba:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8000cbe:	4a2d      	ldr	r2, [pc, #180]	; (8000d74 <BLDC_main+0x614>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d805      	bhi.n	8000cd0 <BLDC_main+0x570>
 8000cc4:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8000cc8:	3301      	adds	r3, #1
 8000cca:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 8000cce:	e00e      	b.n	8000cee <BLDC_main+0x58e>
		else if (last_pos < 90000 && IRQ_Encoders_BUFF.Encoder1_pos > 270000)position_overflow--;
 8000cd0:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 8000cd4:	4a27      	ldr	r2, [pc, #156]	; (8000d74 <BLDC_main+0x614>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d809      	bhi.n	8000cee <BLDC_main+0x58e>
 8000cda:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8000cde:	4a24      	ldr	r2, [pc, #144]	; (8000d70 <BLDC_main+0x610>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d904      	bls.n	8000cee <BLDC_main+0x58e>
 8000ce4:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c

		//-------------------calculate velocity------------------
		velocity_temp[velocity_index] = (IRQ_Encoders_BUFF.Encoder1_pos - last_pos);
 8000cee:	f8d7 2334 	ldr.w	r2, [r7, #820]	; 0x334
 8000cf2:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 8000cf6:	1ad2      	subs	r2, r2, r3
 8000cf8:	f897 3387 	ldrb.w	r3, [r7, #903]	; 0x387
 8000cfc:	ee07 2a90 	vmov	s15, r2
 8000d00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d04:	f507 7264 	add.w	r2, r7, #912	; 0x390
 8000d08:	f5a2 7262 	sub.w	r2, r2, #904	; 0x388
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	4413      	add	r3, r2
 8000d10:	edc3 7a00 	vstr	s15, [r3]
		last_pos = IRQ_Encoders_BUFF.Encoder1_pos;
 8000d14:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8000d18:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
		velocity_index++;
 8000d1c:	f897 3387 	ldrb.w	r3, [r7, #903]	; 0x387
 8000d20:	3301      	adds	r3, #1
 8000d22:	f887 3387 	strb.w	r3, [r7, #903]	; 0x387
		velocity_index = velocity_index % 200;
 8000d26:	f897 3387 	ldrb.w	r3, [r7, #903]	; 0x387
 8000d2a:	4a13      	ldr	r2, [pc, #76]	; (8000d78 <BLDC_main+0x618>)
 8000d2c:	fba2 1203 	umull	r1, r2, r2, r3
 8000d30:	0992      	lsrs	r2, r2, #6
 8000d32:	21c8      	movs	r1, #200	; 0xc8
 8000d34:	fb01 f202 	mul.w	r2, r1, r2
 8000d38:	1a9b      	subs	r3, r3, r2
 8000d3a:	f887 3387 	strb.w	r3, [r7, #903]	; 0x387
		for(int i = 0; i > 200; i++){
 8000d3e:	2300      	movs	r3, #0
 8000d40:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 8000d44:	e02f      	b.n	8000da6 <BLDC_main+0x646>
 8000d46:	bf00      	nop
 8000d48:	200001bc 	.word	0x200001bc
 8000d4c:	200001c0 	.word	0x200001c0
 8000d50:	20000108 	.word	0x20000108
 8000d54:	200001c4 	.word	0x200001c4
 8000d58:	20000090 	.word	0x20000090
 8000d5c:	200000a8 	.word	0x200000a8
 8000d60:	20000120 	.word	0x20000120
 8000d64:	200000d8 	.word	0x200000d8
 8000d68:	200000c0 	.word	0x200000c0
 8000d6c:	200000f0 	.word	0x200000f0
 8000d70:	00041eb0 	.word	0x00041eb0
 8000d74:	00015f8f 	.word	0x00015f8f
 8000d78:	51eb851f 	.word	0x51eb851f
			velocity += velocity_temp[i];
 8000d7c:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8000d80:	f5a3 7262 	sub.w	r2, r3, #904	; 0x388
 8000d84:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	4413      	add	r3, r2
 8000d8c:	edd3 7a00 	vldr	s15, [r3]
 8000d90:	ed97 7ae0 	vldr	s14, [r7, #896]	; 0x380
 8000d94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d98:	edc7 7ae0 	vstr	s15, [r7, #896]	; 0x380
		for(int i = 0; i > 200; i++){
 8000d9c:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8000da0:	3301      	adds	r3, #1
 8000da2:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 8000da6:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8000daa:	2bc8      	cmp	r3, #200	; 0xc8
 8000dac:	dce6      	bgt.n	8000d7c <BLDC_main+0x61c>
		#endif




		Angle_PID.Input = (float)IRQ_Encoders_BUFF.Encoder1_pos + position_overflow*360000;
 8000dae:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8000db2:	ee07 3a90 	vmov	s15, r3
 8000db6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000dba:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8000dbe:	4aab      	ldr	r2, [pc, #684]	; (800106c <BLDC_main+0x90c>)
 8000dc0:	fb02 f303 	mul.w	r3, r2, r3
 8000dc4:	ee07 3a90 	vmov	s15, r3
 8000dc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dd0:	4ba7      	ldr	r3, [pc, #668]	; (8001070 <BLDC_main+0x910>)
 8000dd2:	edc3 7a00 	vstr	s15, [r3]
		Velocity_PID.Input = (float)(abs(IRQ_Encoders_BUFF.Velocity));
 8000dd6:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	bfb8      	it	lt
 8000dde:	425b      	neglt	r3, r3
 8000de0:	ee07 3a90 	vmov	s15, r3
 8000de4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000de8:	4ba2      	ldr	r3, [pc, #648]	; (8001074 <BLDC_main+0x914>)
 8000dea:	edc3 7a00 	vstr	s15, [r3]
		Current_PID.Input = test;
 8000dee:	4aa2      	ldr	r2, [pc, #648]	; (8001078 <BLDC_main+0x918>)
 8000df0:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8000df4:	6013      	str	r3, [r2, #0]

		Angle_PID.Setpoint = pos_set_test;
 8000df6:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8000dfa:	ee07 3a90 	vmov	s15, r3
 8000dfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e02:	4b9b      	ldr	r3, [pc, #620]	; (8001070 <BLDC_main+0x910>)
 8000e04:	edc3 7a02 	vstr	s15, [r3, #8]
		pos_set_test += 20;
 8000e08:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8000e0c:	3314      	adds	r3, #20
 8000e0e:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
		Compute(&Angle_PID);
 8000e12:	4897      	ldr	r0, [pc, #604]	; (8001070 <BLDC_main+0x910>)
 8000e14:	f000 fcd6 	bl	80017c4 <Compute>

		Velocity_PID.Setpoint = (abs(Angle_PID.Output));
 8000e18:	4b95      	ldr	r3, [pc, #596]	; (8001070 <BLDC_main+0x910>)
 8000e1a:	edd3 7a01 	vldr	s15, [r3, #4]
 8000e1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e22:	ee17 3a90 	vmov	r3, s15
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	bfb8      	it	lt
 8000e2a:	425b      	neglt	r3, r3
 8000e2c:	ee07 3a90 	vmov	s15, r3
 8000e30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e34:	4b8f      	ldr	r3, [pc, #572]	; (8001074 <BLDC_main+0x914>)
 8000e36:	edc3 7a02 	vstr	s15, [r3, #8]

		Compute(&Velocity_PID);
 8000e3a:	488e      	ldr	r0, [pc, #568]	; (8001074 <BLDC_main+0x914>)
 8000e3c:	f000 fcc2 	bl	80017c4 <Compute>

		int8_t direction = -1;
 8000e40:	23ff      	movs	r3, #255	; 0xff
 8000e42:	f887 3373 	strb.w	r3, [r7, #883]	; 0x373
		#ifndef ZERO_GRAVITY
//		if(IRQ_Voltage_Temp_BUFF.V_Bat > 10000)SetMode(&Current_PID,  AUTOMATIC);//Limit(&LIMIT_Current, Velocity_PID.Output);
//		else SetMode(&Current_PID,  MANUAL);
		//SetMode(&Angle_PID,  AUTOMATIC);
		Current_PID.Setpoint = 1000;
 8000e46:	4b8c      	ldr	r3, [pc, #560]	; (8001078 <BLDC_main+0x918>)
 8000e48:	4a8c      	ldr	r2, [pc, #560]	; (800107c <BLDC_main+0x91c>)
 8000e4a:	609a      	str	r2, [r3, #8]
//		Current_PID.Setpoint = Velocity_PID.Output;

		if(Angle_PID.Output > 0) direction = 1;
 8000e4c:	4b88      	ldr	r3, [pc, #544]	; (8001070 <BLDC_main+0x910>)
 8000e4e:	edd3 7a01 	vldr	s15, [r3, #4]
 8000e52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e5a:	dd03      	ble.n	8000e64 <BLDC_main+0x704>
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	f887 3373 	strb.w	r3, [r7, #883]	; 0x373
 8000e62:	e002      	b.n	8000e6a <BLDC_main+0x70a>
		else direction = -1;
 8000e64:	23ff      	movs	r3, #255	; 0xff
 8000e66:	f887 3373 	strb.w	r3, [r7, #883]	; 0x373
		Current_PID.Setpoint = weight*(fast_sin_2((abs)((float)IRQ_Encoders_BUFF.Encoder1_pos)/1000));
		if(IRQ_Encoders_BUFF.Encoder1_pos > 180000) direction = -1;
		else direction = 1;
		#endif

		Compute(&Current_PID);
 8000e6a:	4883      	ldr	r0, [pc, #524]	; (8001078 <BLDC_main+0x918>)
 8000e6c:	f000 fcaa 	bl	80017c4 <Compute>
		#ifdef RUNNING_LED_DEBUG
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
		#endif

		if(error){
 8000e70:	4b83      	ldr	r3, [pc, #524]	; (8001080 <BLDC_main+0x920>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d005      	beq.n	8000e84 <BLDC_main+0x724>
			Status = BLDC_ERROR;
 8000e78:	2304      	movs	r3, #4
 8000e7a:	f887 338d 	strb.w	r3, [r7, #909]	; 0x38d
			shutoff();
 8000e7e:	f000 fb0d 	bl	800149c <shutoff>
 8000e82:	e05d      	b.n	8000f40 <BLDC_main+0x7e0>
		}
		else if (Status == BLDC_STOPPED_AND_SHUTDOWN){
 8000e84:	f897 338d 	ldrb.w	r3, [r7, #909]	; 0x38d
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d104      	bne.n	8000e96 <BLDC_main+0x736>
			shutoff();
 8000e8c:	f000 fb06 	bl	800149c <shutoff>
			shutdown();
 8000e90:	f000 fb16 	bl	80014c0 <shutdown>
 8000e94:	e054      	b.n	8000f40 <BLDC_main+0x7e0>
		}
		else if (Status == BLDC_STOPPED_WITH_BREAK){
 8000e96:	f897 338d 	ldrb.w	r3, [r7, #909]	; 0x38d
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d122      	bne.n	8000ee4 <BLDC_main+0x784>
			//shutoff();
			//inverter(mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, offset)+(direction*90), Current_PID.Output);
//			inverter(0, 200);
			inverter(mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, offset)+(direction*90), (uint16_t)Velocity_PID.Output);
 8000e9e:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8000ea2:	4978      	ldr	r1, [pc, #480]	; (8001084 <BLDC_main+0x924>)
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f000 f91d 	bl	80010e4 <mech_to_el_deg>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	b29a      	uxth	r2, r3
 8000eae:	f997 3373 	ldrsb.w	r3, [r7, #883]	; 0x373
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	0049      	lsls	r1, r1, #1
 8000eb8:	440b      	add	r3, r1
 8000eba:	4619      	mov	r1, r3
 8000ebc:	0109      	lsls	r1, r1, #4
 8000ebe:	1acb      	subs	r3, r1, r3
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	4413      	add	r3, r2
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	b21b      	sxth	r3, r3
 8000eca:	4a6a      	ldr	r2, [pc, #424]	; (8001074 <BLDC_main+0x914>)
 8000ecc:	edd2 7a01 	vldr	s15, [r2, #4]
 8000ed0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ed4:	ee17 2a90 	vmov	r2, s15
 8000ed8:	b292      	uxth	r2, r2
 8000eda:	4611      	mov	r1, r2
 8000edc:	4618      	mov	r0, r3
 8000ede:	f000 f98b 	bl	80011f8 <inverter>
 8000ee2:	e02d      	b.n	8000f40 <BLDC_main+0x7e0>


			//inverter(mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, offset)+(direction*90), (uint16_t)Current_PID.Output);
			//inverter(mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, offset)+(1*90), (uint16_t)Limit(&LIMIT_V_motor, Current_PID.Output));
		}
		else if (Status == BLDC_RUNNING){
 8000ee4:	f897 338d 	ldrb.w	r3, [r7, #909]	; 0x38d
 8000ee8:	2b03      	cmp	r3, #3
 8000eea:	d122      	bne.n	8000f32 <BLDC_main+0x7d2>
			inverter(mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, offset)+(direction*90), (uint16_t)Current_PID.Output);
 8000eec:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8000ef0:	4964      	ldr	r1, [pc, #400]	; (8001084 <BLDC_main+0x924>)
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f000 f8f6 	bl	80010e4 <mech_to_el_deg>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	f997 3373 	ldrsb.w	r3, [r7, #883]	; 0x373
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	4619      	mov	r1, r3
 8000f04:	0049      	lsls	r1, r1, #1
 8000f06:	440b      	add	r3, r1
 8000f08:	4619      	mov	r1, r3
 8000f0a:	0109      	lsls	r1, r1, #4
 8000f0c:	1acb      	subs	r3, r1, r3
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	b29b      	uxth	r3, r3
 8000f12:	4413      	add	r3, r2
 8000f14:	b29b      	uxth	r3, r3
 8000f16:	b21b      	sxth	r3, r3
 8000f18:	4a57      	ldr	r2, [pc, #348]	; (8001078 <BLDC_main+0x918>)
 8000f1a:	edd2 7a01 	vldr	s15, [r2, #4]
 8000f1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f22:	ee17 2a90 	vmov	r2, s15
 8000f26:	b292      	uxth	r2, r2
 8000f28:	4611      	mov	r1, r2
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 f964 	bl	80011f8 <inverter>
 8000f30:	e006      	b.n	8000f40 <BLDC_main+0x7e0>
		}
		else if (Status == BLDC_CALIBRATING_ENCODER){
 8000f32:	f897 338d 	ldrb.w	r3, [r7, #909]	; 0x38d
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d102      	bne.n	8000f40 <BLDC_main+0x7e0>
			//inverter(0, (uint16_t)Limit(&LIMIT_V_motor, Velocity_PID.Output));
			Status = BLDC_STOPPED_WITH_BREAK;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	f887 338d 	strb.w	r3, [r7, #909]	; 0x38d
		#ifdef RUNNING_LED_DEBUG
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
		#endif

		if(timing_CAN_feedback >= LOOP_FREQ_KHZ*5){ //every 5ms
 8000f40:	4b51      	ldr	r3, [pc, #324]	; (8001088 <BLDC_main+0x928>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b95      	cmp	r3, #149	; 0x95
 8000f46:	d973      	bls.n	8001030 <BLDC_main+0x8d0>
			timing_CAN_feedback = 0;
 8000f48:	4b4f      	ldr	r3, [pc, #316]	; (8001088 <BLDC_main+0x928>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
			Feedback.Status_warning = warning;
 8000f4e:	4a4f      	ldr	r2, [pc, #316]	; (800108c <BLDC_main+0x92c>)
 8000f50:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8000f54:	6053      	str	r3, [r2, #4]
			Feedback.Status_faults = error;
 8000f56:	4b4a      	ldr	r3, [pc, #296]	; (8001080 <BLDC_main+0x920>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a4c      	ldr	r2, [pc, #304]	; (800108c <BLDC_main+0x92c>)
 8000f5c:	6093      	str	r3, [r2, #8]
			Feedback.Status_setpoint = IRQ_STATUS_BUFF.setpoint;
 8000f5e:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8000f62:	4a4a      	ldr	r2, [pc, #296]	; (800108c <BLDC_main+0x92c>)
 8000f64:	60d3      	str	r3, [r2, #12]
			Feedback.Status_mode = Status;
 8000f66:	f897 338d 	ldrb.w	r3, [r7, #909]	; 0x38d
 8000f6a:	4a48      	ldr	r2, [pc, #288]	; (800108c <BLDC_main+0x92c>)
 8000f6c:	6013      	str	r3, [r2, #0]

			Feedback.Current_DC = IRQ_Current_BUFF.Current_DC;
 8000f6e:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8000f72:	461a      	mov	r2, r3
 8000f74:	4b45      	ldr	r3, [pc, #276]	; (800108c <BLDC_main+0x92c>)
 8000f76:	62da      	str	r2, [r3, #44]	; 0x2c
			Feedback.Current_M1 = IRQ_Current_BUFF.Current_M1;
 8000f78:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8000f7c:	4a43      	ldr	r2, [pc, #268]	; (800108c <BLDC_main+0x92c>)
 8000f7e:	6213      	str	r3, [r2, #32]
			Feedback.Current_M2 = IRQ_Current_BUFF.Current_M2;
 8000f80:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8000f84:	4a41      	ldr	r2, [pc, #260]	; (800108c <BLDC_main+0x92c>)
 8000f86:	6253      	str	r3, [r2, #36]	; 0x24
			Feedback.Current_M3 = IRQ_Current_BUFF.Current_M3;
 8000f88:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 8000f8c:	4a3f      	ldr	r2, [pc, #252]	; (800108c <BLDC_main+0x92c>)
 8000f8e:	6293      	str	r3, [r2, #40]	; 0x28

			Feedback.Voltage_AUX = IRQ_Voltage_Temp_BUFF.V_aux;
 8000f90:	f8b7 334c 	ldrh.w	r3, [r7, #844]	; 0x34c
 8000f94:	461a      	mov	r2, r3
 8000f96:	4b3d      	ldr	r3, [pc, #244]	; (800108c <BLDC_main+0x92c>)
 8000f98:	63da      	str	r2, [r3, #60]	; 0x3c
			Feedback.Voltage_BAT = IRQ_Voltage_Temp_BUFF.V_Bat;
 8000f9a:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 8000f9e:	4a3b      	ldr	r2, [pc, #236]	; (800108c <BLDC_main+0x92c>)
 8000fa0:	6393      	str	r3, [r2, #56]	; 0x38
			Feedback.Temp_NTC1 = IRQ_Voltage_Temp_BUFF.Temp_NTC1;
 8000fa2:	f997 334e 	ldrsb.w	r3, [r7, #846]	; 0x34e
 8000fa6:	b21a      	sxth	r2, r3
 8000fa8:	4b38      	ldr	r3, [pc, #224]	; (800108c <BLDC_main+0x92c>)
 8000faa:	861a      	strh	r2, [r3, #48]	; 0x30
			Feedback.Temp_NTC2 = IRQ_Voltage_Temp_BUFF.Temp_NTC2;
 8000fac:	f997 334f 	ldrsb.w	r3, [r7, #847]	; 0x34f
 8000fb0:	b21a      	sxth	r2, r3
 8000fb2:	4b36      	ldr	r3, [pc, #216]	; (800108c <BLDC_main+0x92c>)
 8000fb4:	865a      	strh	r2, [r3, #50]	; 0x32

			Feedback.Position_Encoder1_pos = IRQ_Encoders_BUFF.Encoder1_pos;
 8000fb6:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8000fba:	4a34      	ldr	r2, [pc, #208]	; (800108c <BLDC_main+0x92c>)
 8000fbc:	6113      	str	r3, [r2, #16]
			Feedback.Position_Encoder2_pos = IRQ_Encoders_BUFF.Encoder2_pos;
 8000fbe:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8000fc2:	4a32      	ldr	r2, [pc, #200]	; (800108c <BLDC_main+0x92c>)
 8000fc4:	6153      	str	r3, [r2, #20]
//			Feedback.Position_Calculated_pos = IRQ_Encoders_BUFF.Calculated_pos;
			Feedback.Position_Calculated_pos = mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, offset);
 8000fc6:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8000fca:	492e      	ldr	r1, [pc, #184]	; (8001084 <BLDC_main+0x924>)
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f000 f889 	bl	80010e4 <mech_to_el_deg>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4b2d      	ldr	r3, [pc, #180]	; (800108c <BLDC_main+0x92c>)
 8000fd8:	619a      	str	r2, [r3, #24]
			Feedback.Position_Velocity = IRQ_Encoders_BUFF.Velocity;
 8000fda:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 8000fde:	4a2b      	ldr	r2, [pc, #172]	; (800108c <BLDC_main+0x92c>)
 8000fe0:	61d3      	str	r3, [r2, #28]
//			Feedback.Position_Velocity = (int32_t)velocity;
			FDCAN_sendData(&hfdcan1, (CAN_FEEDBACK_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (uint8_t*)&Feedback);
 8000fe2:	4a2a      	ldr	r2, [pc, #168]	; (800108c <BLDC_main+0x92c>)
 8000fe4:	f240 4136 	movw	r1, #1078	; 0x436
 8000fe8:	4829      	ldr	r0, [pc, #164]	; (8001090 <BLDC_main+0x930>)
 8000fea:	f001 fb39 	bl	8002660 <FDCAN_sendData>
					#endif
					#ifdef Temperature_debug
					, Feedback.Temp_NTC1, Feedback.Temp_NTC2
					#endif
					#ifdef Status_debug
					, status_sting[Feedback.Status_mode], Feedback.Status_setpoint, Feedback.Status_warning, Feedback.Status_faults
 8000fee:	4b27      	ldr	r3, [pc, #156]	; (800108c <BLDC_main+0x92c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	221a      	movs	r2, #26
 8000ff4:	fb02 f303 	mul.w	r3, r2, r3
 8000ff8:	4a26      	ldr	r2, [pc, #152]	; (8001094 <BLDC_main+0x934>)
 8000ffa:	189d      	adds	r5, r3, r2
			PrintServerPrintf(
 8000ffc:	4b23      	ldr	r3, [pc, #140]	; (800108c <BLDC_main+0x92c>)
 8000ffe:	68de      	ldr	r6, [r3, #12]
 8001000:	4b22      	ldr	r3, [pc, #136]	; (800108c <BLDC_main+0x92c>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	607b      	str	r3, [r7, #4]
 8001006:	4b21      	ldr	r3, [pc, #132]	; (800108c <BLDC_main+0x92c>)
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	4a20      	ldr	r2, [pc, #128]	; (800108c <BLDC_main+0x92c>)
 800100c:	6912      	ldr	r2, [r2, #16]
 800100e:	491f      	ldr	r1, [pc, #124]	; (800108c <BLDC_main+0x92c>)
 8001010:	6949      	ldr	r1, [r1, #20]
 8001012:	481e      	ldr	r0, [pc, #120]	; (800108c <BLDC_main+0x92c>)
 8001014:	6980      	ldr	r0, [r0, #24]
 8001016:	4c1d      	ldr	r4, [pc, #116]	; (800108c <BLDC_main+0x92c>)
 8001018:	69e4      	ldr	r4, [r4, #28]
 800101a:	9404      	str	r4, [sp, #16]
 800101c:	9003      	str	r0, [sp, #12]
 800101e:	9102      	str	r1, [sp, #8]
 8001020:	9201      	str	r2, [sp, #4]
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4632      	mov	r2, r6
 8001028:	4629      	mov	r1, r5
 800102a:	481b      	ldr	r0, [pc, #108]	; (8001098 <BLDC_main+0x938>)
 800102c:	f000 fe28 	bl	8001c80 <PrintServerPrintf>
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
		#endif

		//----------------set status LEDs---------------------
		if(error)HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 1);
 8001030:	4b13      	ldr	r3, [pc, #76]	; (8001080 <BLDC_main+0x920>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d007      	beq.n	8001048 <BLDC_main+0x8e8>
 8001038:	2201      	movs	r2, #1
 800103a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800103e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001042:	f006 fe11 	bl	8007c68 <HAL_GPIO_WritePin>
 8001046:	e006      	b.n	8001056 <BLDC_main+0x8f6>
		else HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 0);
 8001048:	2200      	movs	r2, #0
 800104a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800104e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001052:	f006 fe09 	bl	8007c68 <HAL_GPIO_WritePin>
		if(warning)HAL_GPIO_WritePin(WARNING_LED_GPIO_Port, WARNING_LED_Pin, 1);
 8001056:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800105a:	2b00      	cmp	r3, #0
 800105c:	d020      	beq.n	80010a0 <BLDC_main+0x940>
 800105e:	2201      	movs	r2, #1
 8001060:	2180      	movs	r1, #128	; 0x80
 8001062:	480e      	ldr	r0, [pc, #56]	; (800109c <BLDC_main+0x93c>)
 8001064:	f006 fe00 	bl	8007c68 <HAL_GPIO_WritePin>
 8001068:	e01f      	b.n	80010aa <BLDC_main+0x94a>
 800106a:	bf00      	nop
 800106c:	00057e40 	.word	0x00057e40
 8001070:	200002ec 	.word	0x200002ec
 8001074:	200002ac 	.word	0x200002ac
 8001078:	2000026c 	.word	0x2000026c
 800107c:	447a0000 	.word	0x447a0000
 8001080:	200001c4 	.word	0x200001c4
 8001084:	0004d774 	.word	0x0004d774
 8001088:	200001bc 	.word	0x200001bc
 800108c:	2000022c 	.word	0x2000022c
 8001090:	200007e4 	.word	0x200007e4
 8001094:	20000000 	.word	0x20000000
 8001098:	0800d420 	.word	0x0800d420
 800109c:	48000800 	.word	0x48000800
		else HAL_GPIO_WritePin(WARNING_LED_GPIO_Port, WARNING_LED_Pin, 0);
 80010a0:	2200      	movs	r2, #0
 80010a2:	2180      	movs	r1, #128	; 0x80
 80010a4:	480d      	ldr	r0, [pc, #52]	; (80010dc <BLDC_main+0x97c>)
 80010a6:	f006 fddf 	bl	8007c68 <HAL_GPIO_WritePin>

		#ifndef RUNNING_LED_DEBUG
		#ifndef RUNNING_LED_DEBUG2
		if(running_LED_timing >= LOOP_FREQ_KHZ*100){
 80010aa:	4b0d      	ldr	r3, [pc, #52]	; (80010e0 <BLDC_main+0x980>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d906      	bls.n	80010c4 <BLDC_main+0x964>
			running_LED_timing = 0;
 80010b6:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <BLDC_main+0x980>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin);
 80010bc:	2140      	movs	r1, #64	; 0x40
 80010be:	4807      	ldr	r0, [pc, #28]	; (80010dc <BLDC_main+0x97c>)
 80010c0:	f006 fdea 	bl	8007c98 <HAL_GPIO_TogglePin>
		#endif

		//-----------------update dac---------------------------
		#ifdef DAC_DEBUG
//		dac_value(Current_PID.Output);
		dac_value(test);
 80010c4:	edd7 7ad9 	vldr	s15, [r7, #868]	; 0x364
 80010c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010cc:	ee17 3a90 	vmov	r3, s15
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	4618      	mov	r0, r3
 80010d4:	f001 fa4e 	bl	8002574 <dac_value>
	while(1){
 80010d8:	e427      	b.n	800092a <BLDC_main+0x1ca>
 80010da:	bf00      	nop
 80010dc:	48000800 	.word	0x48000800
 80010e0:	200001c0 	.word	0x200001c0

080010e4 <mech_to_el_deg>:
		#endif
	}
}

int16_t mech_to_el_deg(int32_t angle_deg, int32_t offset_deg){
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
	//return (int16_t)((int32_t)((int32_t)(((int32_t)((int32_t)angle_deg)-offset_deg)%deg_pr_pole))/(deg_pr_pole/360));
	return (int16_t)((abs(((angle_deg)-offset_deg+360000)%(deg_pr_pole)))/(1000/17))%360;
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	f503 23af 	add.w	r3, r3, #358400	; 0x57800
 80010f8:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 80010fc:	4a15      	ldr	r2, [pc, #84]	; (8001154 <mech_to_el_deg+0x70>)
 80010fe:	fb82 1203 	smull	r1, r2, r2, r3
 8001102:	441a      	add	r2, r3
 8001104:	1391      	asrs	r1, r2, #14
 8001106:	17da      	asrs	r2, r3, #31
 8001108:	1a8a      	subs	r2, r1, r2
 800110a:	f245 21b8 	movw	r1, #21176	; 0x52b8
 800110e:	fb01 f202 	mul.w	r2, r1, r2
 8001112:	1a9a      	subs	r2, r3, r2
 8001114:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 8001118:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 800111c:	4a0e      	ldr	r2, [pc, #56]	; (8001158 <mech_to_el_deg+0x74>)
 800111e:	fb82 1203 	smull	r1, r2, r2, r3
 8001122:	441a      	add	r2, r3
 8001124:	1152      	asrs	r2, r2, #5
 8001126:	17db      	asrs	r3, r3, #31
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	b21b      	sxth	r3, r3
 800112c:	4a0b      	ldr	r2, [pc, #44]	; (800115c <mech_to_el_deg+0x78>)
 800112e:	fb82 1203 	smull	r1, r2, r2, r3
 8001132:	441a      	add	r2, r3
 8001134:	1211      	asrs	r1, r2, #8
 8001136:	17da      	asrs	r2, r3, #31
 8001138:	1a8a      	subs	r2, r1, r2
 800113a:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800113e:	fb01 f202 	mul.w	r2, r1, r2
 8001142:	1a9b      	subs	r3, r3, r2
 8001144:	b21b      	sxth	r3, r3
//	return (int16_t)((((int32_t)((int32_t)19400)-offset_deg)%(deg_pr_pole))/(1000/17));
}
 8001146:	4618      	mov	r0, r3
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	c6119a11 	.word	0xc6119a11
 8001158:	8d3dcb09 	.word	0x8d3dcb09
 800115c:	b60b60b7 	.word	0xb60b60b7

08001160 <CTRL_init_PWM>:

//PWM setup
#define duty_max 1499
#define pi 3.1415926535

void CTRL_init_PWM(void){
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) Error_Handler(); //error
 8001164:	2100      	movs	r1, #0
 8001166:	4821      	ldr	r0, [pc, #132]	; (80011ec <CTRL_init_PWM+0x8c>)
 8001168:	f008 fd12 	bl	8009b90 <HAL_TIM_PWM_Start>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <CTRL_init_PWM+0x16>
 8001172:	f002 f843 	bl	80031fc <Error_Handler>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) Error_Handler(); //error
 8001176:	2100      	movs	r1, #0
 8001178:	481c      	ldr	r0, [pc, #112]	; (80011ec <CTRL_init_PWM+0x8c>)
 800117a:	f009 fe9d 	bl	800aeb8 <HAL_TIMEx_PWMN_Start>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <CTRL_init_PWM+0x28>
 8001184:	f002 f83a 	bl	80031fc <Error_Handler>

	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK) Error_Handler(); //error
 8001188:	2104      	movs	r1, #4
 800118a:	4818      	ldr	r0, [pc, #96]	; (80011ec <CTRL_init_PWM+0x8c>)
 800118c:	f008 fd00 	bl	8009b90 <HAL_TIM_PWM_Start>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <CTRL_init_PWM+0x3a>
 8001196:	f002 f831 	bl	80031fc <Error_Handler>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2) != HAL_OK) Error_Handler(); //error
 800119a:	2104      	movs	r1, #4
 800119c:	4813      	ldr	r0, [pc, #76]	; (80011ec <CTRL_init_PWM+0x8c>)
 800119e:	f009 fe8b 	bl	800aeb8 <HAL_TIMEx_PWMN_Start>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <CTRL_init_PWM+0x4c>
 80011a8:	f002 f828 	bl	80031fc <Error_Handler>

	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3) != HAL_OK) Error_Handler(); //error
 80011ac:	2108      	movs	r1, #8
 80011ae:	480f      	ldr	r0, [pc, #60]	; (80011ec <CTRL_init_PWM+0x8c>)
 80011b0:	f008 fcee 	bl	8009b90 <HAL_TIM_PWM_Start>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <CTRL_init_PWM+0x5e>
 80011ba:	f002 f81f 	bl	80031fc <Error_Handler>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3) != HAL_OK) Error_Handler(); //error
 80011be:	2108      	movs	r1, #8
 80011c0:	480a      	ldr	r0, [pc, #40]	; (80011ec <CTRL_init_PWM+0x8c>)
 80011c2:	f009 fe79 	bl	800aeb8 <HAL_TIMEx_PWMN_Start>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <CTRL_init_PWM+0x70>
 80011cc:	f002 f816 	bl	80031fc <Error_Handler>

	TIM1->CCR1 = 0;
 80011d0:	4b07      	ldr	r3, [pc, #28]	; (80011f0 <CTRL_init_PWM+0x90>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <CTRL_init_PWM+0x90>)
 80011d8:	2200      	movs	r2, #0
 80011da:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 80011dc:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <CTRL_init_PWM+0x90>)
 80011de:	2200      	movs	r2, #0
 80011e0:	63da      	str	r2, [r3, #60]	; 0x3c

	HAL_TIM_Base_Start_IT(&htim3);
 80011e2:	4804      	ldr	r0, [pc, #16]	; (80011f4 <CTRL_init_PWM+0x94>)
 80011e4:	f008 fc08 	bl	80099f8 <HAL_TIM_Base_Start_IT>
}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000acc 	.word	0x20000acc
 80011f0:	40012c00 	.word	0x40012c00
 80011f4:	20000b18 	.word	0x20000b18

080011f8 <inverter>:
//sin(θ◦) ≈ 4θ(180 − θ) 40500 − θ(180 − θ);
//float _sin(float deg){
//	return (4*deg*(180-deg)/(40500 - deg*(180-deg)));
//}

void inverter(int16_t angle, uint16_t voltage){
 80011f8:	b480      	push	{r7}
 80011fa:	b089      	sub	sp, #36	; 0x24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	460a      	mov	r2, r1
 8001202:	80fb      	strh	r3, [r7, #6]
 8001204:	4613      	mov	r3, r2
 8001206:	80bb      	strh	r3, [r7, #4]
	angle = (angle+360*2)%360;
 8001208:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800120c:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8001210:	4a9c      	ldr	r2, [pc, #624]	; (8001484 <inverter+0x28c>)
 8001212:	fb82 1203 	smull	r1, r2, r2, r3
 8001216:	441a      	add	r2, r3
 8001218:	1211      	asrs	r1, r2, #8
 800121a:	17da      	asrs	r2, r3, #31
 800121c:	1a8a      	subs	r2, r1, r2
 800121e:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001222:	fb01 f202 	mul.w	r2, r1, r2
 8001226:	1a9a      	subs	r2, r3, r2
 8001228:	4613      	mov	r3, r2
 800122a:	80fb      	strh	r3, [r7, #6]
	angle = (360 - angle);
 800122c:	88fb      	ldrh	r3, [r7, #6]
 800122e:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 8001232:	b29b      	uxth	r3, r3
 8001234:	80fb      	strh	r3, [r7, #6]
	angle = angle%360;
 8001236:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800123a:	4a92      	ldr	r2, [pc, #584]	; (8001484 <inverter+0x28c>)
 800123c:	fb82 1203 	smull	r1, r2, r2, r3
 8001240:	441a      	add	r2, r3
 8001242:	1211      	asrs	r1, r2, #8
 8001244:	17da      	asrs	r2, r3, #31
 8001246:	1a8a      	subs	r2, r1, r2
 8001248:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800124c:	fb01 f202 	mul.w	r2, r1, r2
 8001250:	1a9b      	subs	r3, r3, r2
 8001252:	80fb      	strh	r3, [r7, #6]
	uint32_t compare_M1 = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	61fb      	str	r3, [r7, #28]
	uint32_t compare_M2 = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	61bb      	str	r3, [r7, #24]
	uint32_t compare_M3 = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]

	float deg = (float)(angle%60);
 8001260:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001264:	4b88      	ldr	r3, [pc, #544]	; (8001488 <inverter+0x290>)
 8001266:	fb83 1302 	smull	r1, r3, r3, r2
 800126a:	4413      	add	r3, r2
 800126c:	1159      	asrs	r1, r3, #5
 800126e:	17d3      	asrs	r3, r2, #31
 8001270:	1ac9      	subs	r1, r1, r3
 8001272:	460b      	mov	r3, r1
 8001274:	011b      	lsls	r3, r3, #4
 8001276:	1a5b      	subs	r3, r3, r1
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	b21b      	sxth	r3, r3
 800127e:	ee07 3a90 	vmov	s15, r3
 8001282:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001286:	edc7 7a04 	vstr	s15, [r7, #16]
	//uint32_t T1 = (uint32_t )(duty_max*duty*((240-4*deg)*(120-deg)/(40500 - (60-deg)*(120-deg))) ); //*pi/180
	uint16_t T1 = (uint16_t)(voltage*(float)( 4*(60-deg)*(180-(60-deg))/(40500 - (60-deg)*(180-(60-deg))))); //*pi/180
 800128a:	88bb      	ldrh	r3, [r7, #4]
 800128c:	ee07 3a90 	vmov	s15, r3
 8001290:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001294:	eddf 6a7d 	vldr	s13, [pc, #500]	; 800148c <inverter+0x294>
 8001298:	edd7 7a04 	vldr	s15, [r7, #16]
 800129c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80012a0:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80012a4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80012a8:	ed9f 6a78 	vldr	s12, [pc, #480]	; 800148c <inverter+0x294>
 80012ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80012b0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80012b4:	ed9f 6a76 	vldr	s12, [pc, #472]	; 8001490 <inverter+0x298>
 80012b8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80012bc:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80012c0:	eddf 6a72 	vldr	s13, [pc, #456]	; 800148c <inverter+0x294>
 80012c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80012c8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80012cc:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800148c <inverter+0x294>
 80012d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012d4:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80012d8:	eddf 5a6d 	vldr	s11, [pc, #436]	; 8001490 <inverter+0x298>
 80012dc:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80012e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012e4:	eddf 6a6b 	vldr	s13, [pc, #428]	; 8001494 <inverter+0x29c>
 80012e8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80012ec:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80012f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012f8:	ee17 3a90 	vmov	r3, s15
 80012fc:	81fb      	strh	r3, [r7, #14]
	uint16_t T2 = (uint16_t)(voltage*(float)(4*deg*(180-deg)/(40500 - deg*(180-deg))));
 80012fe:	88bb      	ldrh	r3, [r7, #4]
 8001300:	ee07 3a90 	vmov	s15, r3
 8001304:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001308:	edd7 7a04 	vldr	s15, [r7, #16]
 800130c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001310:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001314:	ed9f 6a5e 	vldr	s12, [pc, #376]	; 8001490 <inverter+0x298>
 8001318:	edd7 7a04 	vldr	s15, [r7, #16]
 800131c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001320:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001324:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8001490 <inverter+0x298>
 8001328:	edd7 7a04 	vldr	s15, [r7, #16]
 800132c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001330:	edd7 7a04 	vldr	s15, [r7, #16]
 8001334:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001338:	eddf 6a56 	vldr	s13, [pc, #344]	; 8001494 <inverter+0x29c>
 800133c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001340:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001344:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001348:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800134c:	ee17 3a90 	vmov	r3, s15
 8001350:	81bb      	strh	r3, [r7, #12]
	uint16_t T0 = (duty_max-T1-T2)/2;
 8001352:	89fb      	ldrh	r3, [r7, #14]
 8001354:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8001358:	3303      	adds	r3, #3
 800135a:	89ba      	ldrh	r2, [r7, #12]
 800135c:	1a9b      	subs	r3, r3, r2
 800135e:	0fda      	lsrs	r2, r3, #31
 8001360:	4413      	add	r3, r2
 8001362:	105b      	asrs	r3, r3, #1
 8001364:	817b      	strh	r3, [r7, #10]

	if(angle >= 0 && angle < 60){
 8001366:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800136a:	2b00      	cmp	r3, #0
 800136c:	db10      	blt.n	8001390 <inverter+0x198>
 800136e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001372:	2b3b      	cmp	r3, #59	; 0x3b
 8001374:	dc0c      	bgt.n	8001390 <inverter+0x198>
		compare_M1 = T0;
 8001376:	897b      	ldrh	r3, [r7, #10]
 8001378:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0+T2;
 800137a:	897a      	ldrh	r2, [r7, #10]
 800137c:	89bb      	ldrh	r3, [r7, #12]
 800137e:	4413      	add	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0+T1+T2;
 8001382:	897a      	ldrh	r2, [r7, #10]
 8001384:	89fb      	ldrh	r3, [r7, #14]
 8001386:	441a      	add	r2, r3
 8001388:	89bb      	ldrh	r3, [r7, #12]
 800138a:	4413      	add	r3, r2
 800138c:	617b      	str	r3, [r7, #20]
 800138e:	e06a      	b.n	8001466 <inverter+0x26e>
		}
	else if(angle >= 60 && angle < 120){
 8001390:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001394:	2b3b      	cmp	r3, #59	; 0x3b
 8001396:	dd10      	ble.n	80013ba <inverter+0x1c2>
 8001398:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800139c:	2b77      	cmp	r3, #119	; 0x77
 800139e:	dc0c      	bgt.n	80013ba <inverter+0x1c2>
		compare_M1 = T0;
 80013a0:	897b      	ldrh	r3, [r7, #10]
 80013a2:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0+T1+T2;
 80013a4:	897a      	ldrh	r2, [r7, #10]
 80013a6:	89fb      	ldrh	r3, [r7, #14]
 80013a8:	441a      	add	r2, r3
 80013aa:	89bb      	ldrh	r3, [r7, #12]
 80013ac:	4413      	add	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0+T1;
 80013b0:	897a      	ldrh	r2, [r7, #10]
 80013b2:	89fb      	ldrh	r3, [r7, #14]
 80013b4:	4413      	add	r3, r2
 80013b6:	617b      	str	r3, [r7, #20]
 80013b8:	e055      	b.n	8001466 <inverter+0x26e>
		}
	else if(angle >= 120 && angle < 180){
 80013ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013be:	2b77      	cmp	r3, #119	; 0x77
 80013c0:	dd10      	ble.n	80013e4 <inverter+0x1ec>
 80013c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013c6:	2bb3      	cmp	r3, #179	; 0xb3
 80013c8:	dc0c      	bgt.n	80013e4 <inverter+0x1ec>
		compare_M1 = T0+T2;
 80013ca:	897a      	ldrh	r2, [r7, #10]
 80013cc:	89bb      	ldrh	r3, [r7, #12]
 80013ce:	4413      	add	r3, r2
 80013d0:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0+T1+T2;
 80013d2:	897a      	ldrh	r2, [r7, #10]
 80013d4:	89fb      	ldrh	r3, [r7, #14]
 80013d6:	441a      	add	r2, r3
 80013d8:	89bb      	ldrh	r3, [r7, #12]
 80013da:	4413      	add	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0;
 80013de:	897b      	ldrh	r3, [r7, #10]
 80013e0:	617b      	str	r3, [r7, #20]
 80013e2:	e040      	b.n	8001466 <inverter+0x26e>
		}
	else if(angle >= 180 && angle < 240){
 80013e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013e8:	2bb3      	cmp	r3, #179	; 0xb3
 80013ea:	dd10      	ble.n	800140e <inverter+0x216>
 80013ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013f0:	2bef      	cmp	r3, #239	; 0xef
 80013f2:	dc0c      	bgt.n	800140e <inverter+0x216>
		compare_M1 = T0+T1+T2;
 80013f4:	897a      	ldrh	r2, [r7, #10]
 80013f6:	89fb      	ldrh	r3, [r7, #14]
 80013f8:	441a      	add	r2, r3
 80013fa:	89bb      	ldrh	r3, [r7, #12]
 80013fc:	4413      	add	r3, r2
 80013fe:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0+T1;
 8001400:	897a      	ldrh	r2, [r7, #10]
 8001402:	89fb      	ldrh	r3, [r7, #14]
 8001404:	4413      	add	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0;
 8001408:	897b      	ldrh	r3, [r7, #10]
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	e02b      	b.n	8001466 <inverter+0x26e>
		}
	else if(angle >= 240 && angle < 300){
 800140e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001412:	2bef      	cmp	r3, #239	; 0xef
 8001414:	dd11      	ble.n	800143a <inverter+0x242>
 8001416:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800141a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800141e:	da0c      	bge.n	800143a <inverter+0x242>
		compare_M1 = T0+T1+T2;
 8001420:	897a      	ldrh	r2, [r7, #10]
 8001422:	89fb      	ldrh	r3, [r7, #14]
 8001424:	441a      	add	r2, r3
 8001426:	89bb      	ldrh	r3, [r7, #12]
 8001428:	4413      	add	r3, r2
 800142a:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0;
 800142c:	897b      	ldrh	r3, [r7, #10]
 800142e:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0+T2;
 8001430:	897a      	ldrh	r2, [r7, #10]
 8001432:	89bb      	ldrh	r3, [r7, #12]
 8001434:	4413      	add	r3, r2
 8001436:	617b      	str	r3, [r7, #20]
 8001438:	e015      	b.n	8001466 <inverter+0x26e>
		}
	else if(angle >= 300 && angle <= 360){
 800143a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800143e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001442:	db10      	blt.n	8001466 <inverter+0x26e>
 8001444:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001448:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800144c:	dc0b      	bgt.n	8001466 <inverter+0x26e>
		compare_M1 = T0+T1;
 800144e:	897a      	ldrh	r2, [r7, #10]
 8001450:	89fb      	ldrh	r3, [r7, #14]
 8001452:	4413      	add	r3, r2
 8001454:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0;
 8001456:	897b      	ldrh	r3, [r7, #10]
 8001458:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0+T1+T2;
 800145a:	897a      	ldrh	r2, [r7, #10]
 800145c:	89fb      	ldrh	r3, [r7, #14]
 800145e:	441a      	add	r2, r3
 8001460:	89bb      	ldrh	r3, [r7, #12]
 8001462:	4413      	add	r3, r2
 8001464:	617b      	str	r3, [r7, #20]
		}
//	PrintServerPrintf("OK %d %d %d %d\r\n", (uint32_t)(compare_M1), (uint32_t)(compare_M2), (uint32_t)(compare_M3), (int32_t)angle);
	TIM1->CCR1 = compare_M1;
 8001466:	4a0c      	ldr	r2, [pc, #48]	; (8001498 <inverter+0x2a0>)
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2 = compare_M2;
 800146c:	4a0a      	ldr	r2, [pc, #40]	; (8001498 <inverter+0x2a0>)
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1->CCR3 = compare_M3;
 8001472:	4a09      	ldr	r2, [pc, #36]	; (8001498 <inverter+0x2a0>)
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001478:	bf00      	nop
 800147a:	3724      	adds	r7, #36	; 0x24
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	b60b60b7 	.word	0xb60b60b7
 8001488:	88888889 	.word	0x88888889
 800148c:	42700000 	.word	0x42700000
 8001490:	43340000 	.word	0x43340000
 8001494:	471e3400 	.word	0x471e3400
 8001498:	40012c00 	.word	0x40012c00

0800149c <shutoff>:
void shutoff(void){
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
	TIM1->CCR1 = 0;
 80014a0:	4b06      	ldr	r3, [pc, #24]	; (80014bc <shutoff+0x20>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 80014a6:	4b05      	ldr	r3, [pc, #20]	; (80014bc <shutoff+0x20>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 80014ac:	4b03      	ldr	r3, [pc, #12]	; (80014bc <shutoff+0x20>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	40012c00 	.word	0x40012c00

080014c0 <shutdown>:
void shutdown(void){
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1); //error
 80014c4:	2100      	movs	r1, #0
 80014c6:	480e      	ldr	r0, [pc, #56]	; (8001500 <shutdown+0x40>)
 80014c8:	f008 fc62 	bl	8009d90 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1); //error
 80014cc:	2100      	movs	r1, #0
 80014ce:	480c      	ldr	r0, [pc, #48]	; (8001500 <shutdown+0x40>)
 80014d0:	f009 fda6 	bl	800b020 <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2); //error
 80014d4:	2104      	movs	r1, #4
 80014d6:	480a      	ldr	r0, [pc, #40]	; (8001500 <shutdown+0x40>)
 80014d8:	f008 fc5a 	bl	8009d90 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2); //error
 80014dc:	2104      	movs	r1, #4
 80014de:	4808      	ldr	r0, [pc, #32]	; (8001500 <shutdown+0x40>)
 80014e0:	f009 fd9e 	bl	800b020 <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3); //error
 80014e4:	2108      	movs	r1, #8
 80014e6:	4806      	ldr	r0, [pc, #24]	; (8001500 <shutdown+0x40>)
 80014e8:	f008 fc52 	bl	8009d90 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3); //error
 80014ec:	2108      	movs	r1, #8
 80014ee:	4804      	ldr	r0, [pc, #16]	; (8001500 <shutdown+0x40>)
 80014f0:	f009 fd96 	bl	800b020 <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_Base_Stop(&htim1);
 80014f4:	4802      	ldr	r0, [pc, #8]	; (8001500 <shutdown+0x40>)
 80014f6:	f008 fa58 	bl	80099aa <HAL_TIM_Base_Stop>
}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000acc 	.word	0x20000acc

08001504 <ORBIS_init>:
 *
 *  can transmit the command while receiving position
 *
 *  max 4MHz
 */
void ORBIS_init(Encoders_Callback __IRQ_callback){
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 1);
 800150c:	2201      	movs	r2, #1
 800150e:	2140      	movs	r1, #64	; 0x40
 8001510:	4815      	ldr	r0, [pc, #84]	; (8001568 <ORBIS_init+0x64>)
 8001512:	f006 fba9 	bl	8007c68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 1);
 8001516:	2201      	movs	r2, #1
 8001518:	2104      	movs	r1, #4
 800151a:	4814      	ldr	r0, [pc, #80]	; (800156c <ORBIS_init+0x68>)
 800151c:	f006 fba4 	bl	8007c68 <HAL_GPIO_WritePin>
	//setup callback
	Encoders_IRQ_callback = __IRQ_callback;
 8001520:	4a13      	ldr	r2, [pc, #76]	; (8001570 <ORBIS_init+0x6c>)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6013      	str	r3, [r2, #0]

	//setup DMA
	SPI1_tx_buff[0] = ORBIS_NORNAL_OPERATION;
 8001526:	4b13      	ldr	r3, [pc, #76]	; (8001574 <ORBIS_init+0x70>)
 8001528:	2274      	movs	r2, #116	; 0x74
 800152a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 0);
 800152c:	2200      	movs	r2, #0
 800152e:	2140      	movs	r1, #64	; 0x40
 8001530:	480d      	ldr	r0, [pc, #52]	; (8001568 <ORBIS_init+0x64>)
 8001532:	f006 fb99 	bl	8007c68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 0);
 8001536:	2200      	movs	r2, #0
 8001538:	2104      	movs	r1, #4
 800153a:	480c      	ldr	r0, [pc, #48]	; (800156c <ORBIS_init+0x68>)
 800153c:	f006 fb94 	bl	8007c68 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA(&hspi1, SPI1_tx_buff, SPI1_rx_buff, ORBIS_SPI_SIZE);
 8001540:	2305      	movs	r3, #5
 8001542:	4a0d      	ldr	r2, [pc, #52]	; (8001578 <ORBIS_init+0x74>)
 8001544:	490b      	ldr	r1, [pc, #44]	; (8001574 <ORBIS_init+0x70>)
 8001546:	480d      	ldr	r0, [pc, #52]	; (800157c <ORBIS_init+0x78>)
 8001548:	f007 fc86 	bl	8008e58 <HAL_SPI_TransmitReceive_DMA>
	HAL_SPI_TransmitReceive_DMA(&hspi3, SPI3_tx_buff, SPI3_rx_buff, ORBIS_SPI_SIZE);
 800154c:	2305      	movs	r3, #5
 800154e:	4a0c      	ldr	r2, [pc, #48]	; (8001580 <ORBIS_init+0x7c>)
 8001550:	490c      	ldr	r1, [pc, #48]	; (8001584 <ORBIS_init+0x80>)
 8001552:	480d      	ldr	r0, [pc, #52]	; (8001588 <ORBIS_init+0x84>)
 8001554:	f007 fc80 	bl	8008e58 <HAL_SPI_TransmitReceive_DMA>

	//setup timer
	HAL_TIM_Base_Start_IT(&htim3);
 8001558:	480c      	ldr	r0, [pc, #48]	; (800158c <ORBIS_init+0x88>)
 800155a:	f008 fa4d 	bl	80099f8 <HAL_TIM_Base_Start_IT>

}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	48000400 	.word	0x48000400
 800156c:	48000c00 	.word	0x48000c00
 8001570:	2000034c 	.word	0x2000034c
 8001574:	2000032c 	.word	0x2000032c
 8001578:	20000334 	.word	0x20000334
 800157c:	20000880 	.word	0x20000880
 8001580:	20000344 	.word	0x20000344
 8001584:	2000033c 	.word	0x2000033c
 8001588:	200008e4 	.word	0x200008e4
 800158c:	20000b18 	.word	0x20000b18

08001590 <HAL_SPI_TxRxCpltCallback>:
float velocity_temp;
int32_t last_pos = 0;
uint16_t count = 0;

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef * hspi)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) {
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4a63      	ldr	r2, [pc, #396]	; (8001728 <HAL_SPI_TxRxCpltCallback+0x198>)
 800159c:	4293      	cmp	r3, r2
 800159e:	f040 809b 	bne.w	80016d8 <HAL_SPI_TxRxCpltCallback+0x148>
		HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 1);
 80015a2:	2201      	movs	r2, #1
 80015a4:	2140      	movs	r1, #64	; 0x40
 80015a6:	4861      	ldr	r0, [pc, #388]	; (800172c <HAL_SPI_TxRxCpltCallback+0x19c>)
 80015a8:	f006 fb5e 	bl	8007c68 <HAL_GPIO_WritePin>
		data_encoders.Calculated_pos = SPI1_rx_buff[0]; //(SPI1_rx_buff[3] << 8) | (SPI1_rx_buff[2]);
 80015ac:	4b60      	ldr	r3, [pc, #384]	; (8001730 <HAL_SPI_TxRxCpltCallback+0x1a0>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	461a      	mov	r2, r3
 80015b2:	4b60      	ldr	r3, [pc, #384]	; (8001734 <HAL_SPI_TxRxCpltCallback+0x1a4>)
 80015b4:	609a      	str	r2, [r3, #8]
		data_encoders.Encoder1_pos = (uint32_t)(((uint32_t)(SPI1_rx_buff[0] << 6) | (SPI1_rx_buff[1] >> 2)) * 5625) >> 8;
 80015b6:	4b5e      	ldr	r3, [pc, #376]	; (8001730 <HAL_SPI_TxRxCpltCallback+0x1a0>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	019b      	lsls	r3, r3, #6
 80015bc:	461a      	mov	r2, r3
 80015be:	4b5c      	ldr	r3, [pc, #368]	; (8001730 <HAL_SPI_TxRxCpltCallback+0x1a0>)
 80015c0:	785b      	ldrb	r3, [r3, #1]
 80015c2:	089b      	lsrs	r3, r3, #2
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	4313      	orrs	r3, r2
 80015c8:	f241 52f9 	movw	r2, #5625	; 0x15f9
 80015cc:	fb02 f303 	mul.w	r3, r2, r3
 80015d0:	0a1b      	lsrs	r3, r3, #8
 80015d2:	4a58      	ldr	r2, [pc, #352]	; (8001734 <HAL_SPI_TxRxCpltCallback+0x1a4>)
 80015d4:	6013      	str	r3, [r2, #0]

		if(((int32_t)data_encoders.Encoder1_pos - last_pos) > 180000)velocity_temp += ((int32_t)data_encoders.Encoder1_pos-last_pos - 360000);
 80015d6:	4b57      	ldr	r3, [pc, #348]	; (8001734 <HAL_SPI_TxRxCpltCallback+0x1a4>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	461a      	mov	r2, r3
 80015dc:	4b56      	ldr	r3, [pc, #344]	; (8001738 <HAL_SPI_TxRxCpltCallback+0x1a8>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	4a56      	ldr	r2, [pc, #344]	; (800173c <HAL_SPI_TxRxCpltCallback+0x1ac>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	dd16      	ble.n	8001616 <HAL_SPI_TxRxCpltCallback+0x86>
 80015e8:	4b52      	ldr	r3, [pc, #328]	; (8001734 <HAL_SPI_TxRxCpltCallback+0x1a4>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	461a      	mov	r2, r3
 80015ee:	4b52      	ldr	r3, [pc, #328]	; (8001738 <HAL_SPI_TxRxCpltCallback+0x1a8>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	f5a3 23af 	sub.w	r3, r3, #358400	; 0x57800
 80015f8:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 80015fc:	ee07 3a90 	vmov	s15, r3
 8001600:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001604:	4b4e      	ldr	r3, [pc, #312]	; (8001740 <HAL_SPI_TxRxCpltCallback+0x1b0>)
 8001606:	edd3 7a00 	vldr	s15, [r3]
 800160a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800160e:	4b4c      	ldr	r3, [pc, #304]	; (8001740 <HAL_SPI_TxRxCpltCallback+0x1b0>)
 8001610:	edc3 7a00 	vstr	s15, [r3]
 8001614:	e031      	b.n	800167a <HAL_SPI_TxRxCpltCallback+0xea>
		else if(((int32_t)data_encoders.Encoder1_pos - last_pos) < -180000)velocity_temp += ((int32_t)data_encoders.Encoder1_pos-last_pos + 360000);
 8001616:	4b47      	ldr	r3, [pc, #284]	; (8001734 <HAL_SPI_TxRxCpltCallback+0x1a4>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	461a      	mov	r2, r3
 800161c:	4b46      	ldr	r3, [pc, #280]	; (8001738 <HAL_SPI_TxRxCpltCallback+0x1a8>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	4a48      	ldr	r2, [pc, #288]	; (8001744 <HAL_SPI_TxRxCpltCallback+0x1b4>)
 8001624:	4293      	cmp	r3, r2
 8001626:	da16      	bge.n	8001656 <HAL_SPI_TxRxCpltCallback+0xc6>
 8001628:	4b42      	ldr	r3, [pc, #264]	; (8001734 <HAL_SPI_TxRxCpltCallback+0x1a4>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	461a      	mov	r2, r3
 800162e:	4b42      	ldr	r3, [pc, #264]	; (8001738 <HAL_SPI_TxRxCpltCallback+0x1a8>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	f503 23af 	add.w	r3, r3, #358400	; 0x57800
 8001638:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800163c:	ee07 3a90 	vmov	s15, r3
 8001640:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001644:	4b3e      	ldr	r3, [pc, #248]	; (8001740 <HAL_SPI_TxRxCpltCallback+0x1b0>)
 8001646:	edd3 7a00 	vldr	s15, [r3]
 800164a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800164e:	4b3c      	ldr	r3, [pc, #240]	; (8001740 <HAL_SPI_TxRxCpltCallback+0x1b0>)
 8001650:	edc3 7a00 	vstr	s15, [r3]
 8001654:	e011      	b.n	800167a <HAL_SPI_TxRxCpltCallback+0xea>
		else velocity_temp += ((int32_t)data_encoders.Encoder1_pos-last_pos);
 8001656:	4b37      	ldr	r3, [pc, #220]	; (8001734 <HAL_SPI_TxRxCpltCallback+0x1a4>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	461a      	mov	r2, r3
 800165c:	4b36      	ldr	r3, [pc, #216]	; (8001738 <HAL_SPI_TxRxCpltCallback+0x1a8>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	ee07 3a90 	vmov	s15, r3
 8001666:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800166a:	4b35      	ldr	r3, [pc, #212]	; (8001740 <HAL_SPI_TxRxCpltCallback+0x1b0>)
 800166c:	edd3 7a00 	vldr	s15, [r3]
 8001670:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001674:	4b32      	ldr	r3, [pc, #200]	; (8001740 <HAL_SPI_TxRxCpltCallback+0x1b0>)
 8001676:	edc3 7a00 	vstr	s15, [r3]

		last_pos = (int32_t)data_encoders.Encoder1_pos;
 800167a:	4b2e      	ldr	r3, [pc, #184]	; (8001734 <HAL_SPI_TxRxCpltCallback+0x1a4>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	461a      	mov	r2, r3
 8001680:	4b2d      	ldr	r3, [pc, #180]	; (8001738 <HAL_SPI_TxRxCpltCallback+0x1a8>)
 8001682:	601a      	str	r2, [r3, #0]
		if(count  == 10){
 8001684:	4b30      	ldr	r3, [pc, #192]	; (8001748 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	2b0a      	cmp	r3, #10
 800168a:	d11f      	bne.n	80016cc <HAL_SPI_TxRxCpltCallback+0x13c>
			data_encoders.Velocity = (int32_t)(velocity_temp/360/10*10000*60);
 800168c:	4b2c      	ldr	r3, [pc, #176]	; (8001740 <HAL_SPI_TxRxCpltCallback+0x1b0>)
 800168e:	edd3 7a00 	vldr	s15, [r3]
 8001692:	eddf 6a2e 	vldr	s13, [pc, #184]	; 800174c <HAL_SPI_TxRxCpltCallback+0x1bc>
 8001696:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800169a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800169e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016a2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001750 <HAL_SPI_TxRxCpltCallback+0x1c0>
 80016a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016aa:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001754 <HAL_SPI_TxRxCpltCallback+0x1c4>
 80016ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016b6:	ee17 2a90 	vmov	r2, s15
 80016ba:	4b1e      	ldr	r3, [pc, #120]	; (8001734 <HAL_SPI_TxRxCpltCallback+0x1a4>)
 80016bc:	60da      	str	r2, [r3, #12]
			velocity_temp = 0;
 80016be:	4b20      	ldr	r3, [pc, #128]	; (8001740 <HAL_SPI_TxRxCpltCallback+0x1b0>)
 80016c0:	f04f 0200 	mov.w	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
			count = 0;
 80016c6:	4b20      	ldr	r3, [pc, #128]	; (8001748 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	801a      	strh	r2, [r3, #0]
		}
		count++;
 80016cc:	4b1e      	ldr	r3, [pc, #120]	; (8001748 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 80016ce:	881b      	ldrh	r3, [r3, #0]
 80016d0:	3301      	adds	r3, #1
 80016d2:	b29a      	uxth	r2, r3
 80016d4:	4b1c      	ldr	r3, [pc, #112]	; (8001748 <HAL_SPI_TxRxCpltCallback+0x1b8>)
 80016d6:	801a      	strh	r2, [r3, #0]
	}
	if (hspi == &hspi3) {
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4a1f      	ldr	r2, [pc, #124]	; (8001758 <HAL_SPI_TxRxCpltCallback+0x1c8>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d11a      	bne.n	8001716 <HAL_SPI_TxRxCpltCallback+0x186>
		HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 1);
 80016e0:	2201      	movs	r2, #1
 80016e2:	2104      	movs	r1, #4
 80016e4:	481d      	ldr	r0, [pc, #116]	; (800175c <HAL_SPI_TxRxCpltCallback+0x1cc>)
 80016e6:	f006 fabf 	bl	8007c68 <HAL_GPIO_WritePin>
		data_encoders.Encoder2_temp_x10 = (SPI3_rx_buff[3] << 8) | (SPI3_rx_buff[2]);
 80016ea:	4b1d      	ldr	r3, [pc, #116]	; (8001760 <HAL_SPI_TxRxCpltCallback+0x1d0>)
 80016ec:	78db      	ldrb	r3, [r3, #3]
 80016ee:	021b      	lsls	r3, r3, #8
 80016f0:	b21a      	sxth	r2, r3
 80016f2:	4b1b      	ldr	r3, [pc, #108]	; (8001760 <HAL_SPI_TxRxCpltCallback+0x1d0>)
 80016f4:	789b      	ldrb	r3, [r3, #2]
 80016f6:	b21b      	sxth	r3, r3
 80016f8:	4313      	orrs	r3, r2
 80016fa:	b21a      	sxth	r2, r3
 80016fc:	4b0d      	ldr	r3, [pc, #52]	; (8001734 <HAL_SPI_TxRxCpltCallback+0x1a4>)
 80016fe:	825a      	strh	r2, [r3, #18]
		data_encoders.Encoder2_pos = (SPI3_rx_buff[0] << 6) | (SPI3_rx_buff[1] >> 2);
 8001700:	4b17      	ldr	r3, [pc, #92]	; (8001760 <HAL_SPI_TxRxCpltCallback+0x1d0>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	019b      	lsls	r3, r3, #6
 8001706:	4a16      	ldr	r2, [pc, #88]	; (8001760 <HAL_SPI_TxRxCpltCallback+0x1d0>)
 8001708:	7852      	ldrb	r2, [r2, #1]
 800170a:	0892      	lsrs	r2, r2, #2
 800170c:	b2d2      	uxtb	r2, r2
 800170e:	4313      	orrs	r3, r2
 8001710:	461a      	mov	r2, r3
 8001712:	4b08      	ldr	r3, [pc, #32]	; (8001734 <HAL_SPI_TxRxCpltCallback+0x1a4>)
 8001714:	605a      	str	r2, [r3, #4]

	}
	//data_encoders.Calculated_pos = 10;

	Encoders_IRQ_callback(&data_encoders);
 8001716:	4b13      	ldr	r3, [pc, #76]	; (8001764 <HAL_SPI_TxRxCpltCallback+0x1d4>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4806      	ldr	r0, [pc, #24]	; (8001734 <HAL_SPI_TxRxCpltCallback+0x1a4>)
 800171c:	4798      	blx	r3
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000880 	.word	0x20000880
 800172c:	48000400 	.word	0x48000400
 8001730:	20000334 	.word	0x20000334
 8001734:	20000350 	.word	0x20000350
 8001738:	20000368 	.word	0x20000368
 800173c:	0002bf20 	.word	0x0002bf20
 8001740:	20000364 	.word	0x20000364
 8001744:	fffd40e0 	.word	0xfffd40e0
 8001748:	2000036c 	.word	0x2000036c
 800174c:	43b40000 	.word	0x43b40000
 8001750:	461c4000 	.word	0x461c4000
 8001754:	42700000 	.word	0x42700000
 8001758:	200008e4 	.word	0x200008e4
 800175c:	48000c00 	.word	0x48000c00
 8001760:	20000344 	.word	0x20000344
 8001764:	2000034c 	.word	0x2000034c

08001768 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 0);
 8001770:	2200      	movs	r2, #0
 8001772:	2140      	movs	r1, #64	; 0x40
 8001774:	480b      	ldr	r0, [pc, #44]	; (80017a4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001776:	f006 fa77 	bl	8007c68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 0);
 800177a:	2200      	movs	r2, #0
 800177c:	2104      	movs	r1, #4
 800177e:	480a      	ldr	r0, [pc, #40]	; (80017a8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001780:	f006 fa72 	bl	8007c68 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA(&hspi1, SPI1_tx_buff, SPI1_rx_buff, ORBIS_SPI_SIZE);
 8001784:	2305      	movs	r3, #5
 8001786:	4a09      	ldr	r2, [pc, #36]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001788:	4909      	ldr	r1, [pc, #36]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800178a:	480a      	ldr	r0, [pc, #40]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800178c:	f007 fb64 	bl	8008e58 <HAL_SPI_TransmitReceive_DMA>
	HAL_SPI_TransmitReceive_DMA(&hspi3, SPI3_tx_buff, SPI3_rx_buff, ORBIS_SPI_SIZE);
 8001790:	2305      	movs	r3, #5
 8001792:	4a09      	ldr	r2, [pc, #36]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001794:	4909      	ldr	r1, [pc, #36]	; (80017bc <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001796:	480a      	ldr	r0, [pc, #40]	; (80017c0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001798:	f007 fb5e 	bl	8008e58 <HAL_SPI_TransmitReceive_DMA>
}
 800179c:	bf00      	nop
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	48000400 	.word	0x48000400
 80017a8:	48000c00 	.word	0x48000c00
 80017ac:	20000334 	.word	0x20000334
 80017b0:	2000032c 	.word	0x2000032c
 80017b4:	20000880 	.word	0x20000880
 80017b8:	20000344 	.word	0x20000344
 80017bc:	2000033c 	.word	0x2000033c
 80017c0:	200008e4 	.word	0x200008e4

080017c4 <Compute>:
#include "PID.h"

#include <stdio.h>

void Compute(PID_instance *val)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
	if(!val->inAuto) return;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f000 80a2 	beq.w	800191c <Compute+0x158>
	/*Compute all the working error variables*/
	float error = val->Setpoint - val->Input;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	ed93 7a02 	vldr	s14, [r3, #8]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	edd3 7a00 	vldr	s15, [r3]
 80017e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017e8:	edc7 7a03 	vstr	s15, [r7, #12]
	float dInput = (val->Input - val->lastInput);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	ed93 7a00 	vldr	s14, [r3]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	edd3 7a04 	vldr	s15, [r3, #16]
 80017f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017fc:	edc7 7a02 	vstr	s15, [r7, #8]
	val->outputSum+= (val->ki * error);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	ed93 7a03 	vldr	s14, [r3, #12]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	edd3 6a06 	vldr	s13, [r3, #24]
 800180c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001810:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001814:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	edc3 7a03 	vstr	s15, [r3, #12]

	/*Add Proportional on Measurement, if P_ON_M is specified*/
	if(val->pOnM) val->outputSum-= val->pOnMKp * dInput;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001824:	2b00      	cmp	r3, #0
 8001826:	d00e      	beq.n	8001846 <Compute+0x82>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	ed93 7a03 	vldr	s14, [r3, #12]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8001834:	edd7 7a02 	vldr	s15, [r7, #8]
 8001838:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800183c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	edc3 7a03 	vstr	s15, [r3, #12]

	if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	ed93 7a03 	vldr	s14, [r3, #12]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001852:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800185a:	dd04      	ble.n	8001866 <Compute+0xa2>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	60da      	str	r2, [r3, #12]
 8001864:	e00e      	b.n	8001884 <Compute+0xc0>
	else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	ed93 7a03 	vldr	s14, [r3, #12]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001872:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800187a:	d503      	bpl.n	8001884 <Compute+0xc0>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a1a      	ldr	r2, [r3, #32]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	60da      	str	r2, [r3, #12]

	/*Add Proportional on Error, if P_ON_E is specified*/
	if(val->pOnE) val->Output = val->pOnEKp * error;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800188a:	2b00      	cmp	r3, #0
 800188c:	d00a      	beq.n	80018a4 <Compute+0xe0>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8001894:	edd7 7a03 	vldr	s15, [r7, #12]
 8001898:	ee67 7a27 	vmul.f32	s15, s14, s15
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	edc3 7a01 	vstr	s15, [r3, #4]
 80018a2:	e003      	b.n	80018ac <Compute+0xe8>
	else val->Output = 0;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f04f 0200 	mov.w	r2, #0
 80018aa:	605a      	str	r2, [r3, #4]

	/*Compute Rest of PID Output*/
	val->Output += val->outputSum - val->kd * dInput;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	ed93 7a01 	vldr	s14, [r3, #4]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	edd3 6a03 	vldr	s13, [r3, #12]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	ed93 6a07 	vldr	s12, [r3, #28]
 80018be:	edd7 7a02 	vldr	s15, [r7, #8]
 80018c2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80018c6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80018ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	edc3 7a01 	vstr	s15, [r3, #4]

	if(val->Output > val->outMax) val->Output = val->outMax;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	ed93 7a01 	vldr	s14, [r3, #4]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80018e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e8:	dd04      	ble.n	80018f4 <Compute+0x130>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	e00e      	b.n	8001912 <Compute+0x14e>
	else if(val->Output < val->outMin) val->Output = val->outMin;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	ed93 7a01 	vldr	s14, [r3, #4]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	edd3 7a08 	vldr	s15, [r3, #32]
 8001900:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001908:	d503      	bpl.n	8001912 <Compute+0x14e>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a1a      	ldr	r2, [r3, #32]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	605a      	str	r2, [r3, #4]

	/*Remember some variables for next time*/
	val->lastInput = val->Input;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	611a      	str	r2, [r3, #16]
 800191a:	e000      	b.n	800191e <Compute+0x15a>
	if(!val->inAuto) return;
 800191c:	bf00      	nop
}
 800191e:	3714      	adds	r7, #20
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <SetTunings>:

void SetTunings(PID_instance *val, float Kp, float Ki, float Kd, float pOn)
{
 8001928:	b480      	push	{r7}
 800192a:	b089      	sub	sp, #36	; 0x24
 800192c:	af00      	add	r7, sp, #0
 800192e:	6178      	str	r0, [r7, #20]
 8001930:	ed87 0a04 	vstr	s0, [r7, #16]
 8001934:	edc7 0a03 	vstr	s1, [r7, #12]
 8001938:	ed87 1a02 	vstr	s2, [r7, #8]
 800193c:	edc7 1a01 	vstr	s3, [r7, #4]
   if (Kp<0 || Ki<0|| Kd<0 || pOn<0 || pOn>1) return;
 8001940:	edd7 7a04 	vldr	s15, [r7, #16]
 8001944:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800194c:	f100 809b 	bmi.w	8001a86 <SetTunings+0x15e>
 8001950:	edd7 7a03 	vldr	s15, [r7, #12]
 8001954:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800195c:	f100 8093 	bmi.w	8001a86 <SetTunings+0x15e>
 8001960:	edd7 7a02 	vldr	s15, [r7, #8]
 8001964:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800196c:	f100 808b 	bmi.w	8001a86 <SetTunings+0x15e>
 8001970:	edd7 7a01 	vldr	s15, [r7, #4]
 8001974:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800197c:	f100 8083 	bmi.w	8001a86 <SetTunings+0x15e>
 8001980:	edd7 7a01 	vldr	s15, [r7, #4]
 8001984:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001988:	eef4 7ac7 	vcmpe.f32	s15, s14
 800198c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001990:	dc79      	bgt.n	8001a86 <SetTunings+0x15e>

   val->pOnE = pOn>0; //some p on error is desired;
 8001992:	edd7 7a01 	vldr	s15, [r7, #4]
 8001996:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800199a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800199e:	bfcc      	ite	gt
 80019a0:	2301      	movgt	r3, #1
 80019a2:	2300      	movle	r3, #0
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	461a      	mov	r2, r3
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
   val->pOnM = pOn<1; //some p on measurement is desired;
 80019ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80019b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80019b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019be:	bf4c      	ite	mi
 80019c0:	2301      	movmi	r3, #1
 80019c2:	2300      	movpl	r3, #0
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	461a      	mov	r2, r3
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

   float SampleTimeInSec = ((float)val->SampleTime)/1000000;
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d2:	ee07 3a90 	vmov	s15, r3
 80019d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019da:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8001a94 <SetTunings+0x16c>
 80019de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019e2:	edc7 7a07 	vstr	s15, [r7, #28]
   val->kp = Kp;
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	615a      	str	r2, [r3, #20]
   val->ki = Ki * SampleTimeInSec;
 80019ec:	ed97 7a03 	vldr	s14, [r7, #12]
 80019f0:	edd7 7a07 	vldr	s15, [r7, #28]
 80019f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	edc3 7a06 	vstr	s15, [r3, #24]
   val->kd = Kd / SampleTimeInSec;
 80019fe:	edd7 6a02 	vldr	s13, [r7, #8]
 8001a02:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	edc3 7a07 	vstr	s15, [r3, #28]

  if(val->controllerDirection ==REVERSE)
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d11d      	bne.n	8001a54 <SetTunings+0x12c>
   {
	  val->kp = (0 - val->kp);
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a1e:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001a98 <SetTunings+0x170>
 8001a22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	edc3 7a05 	vstr	s15, [r3, #20]
	  val->ki = (0 - val->ki);
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001a32:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001a98 <SetTunings+0x170>
 8001a36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	edc3 7a06 	vstr	s15, [r3, #24]
	  val->kd = (0 - val->kd);
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	edd3 7a07 	vldr	s15, [r3, #28]
 8001a46:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001a98 <SetTunings+0x170>
 8001a4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	edc3 7a07 	vstr	s15, [r3, #28]
   }

  val->pOnEKp = pOn * val->kp;
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	ed93 7a05 	vldr	s14, [r3, #20]
 8001a5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
  val->pOnMKp = (1 - pOn) * val->kp;
 8001a68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a6c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a70:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 8001a84:	e000      	b.n	8001a88 <SetTunings+0x160>
   if (Kp<0 || Ki<0|| Kd<0 || pOn<0 || pOn>1) return;
 8001a86:	bf00      	nop
}
 8001a88:	3724      	adds	r7, #36	; 0x24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	49742400 	.word	0x49742400
 8001a98:	00000000 	.word	0x00000000

08001a9c <SetSampleTime>:

void SetSampleTime(PID_instance *val, int NewSampleTime)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
   if (NewSampleTime > 0)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	dd25      	ble.n	8001af8 <SetSampleTime+0x5c>
   {
      float ratio  = (float)NewSampleTime
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	ee07 3a90 	vmov	s15, r3
 8001ab2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
                      / (float)val->SampleTime;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aba:	ee07 3a90 	vmov	s15, r3
 8001abe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
      float ratio  = (float)NewSampleTime
 8001ac2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ac6:	edc7 7a03 	vstr	s15, [r7, #12]
      val->ki *= ratio;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	ed93 7a06 	vldr	s14, [r3, #24]
 8001ad0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ad4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	edc3 7a06 	vstr	s15, [r3, #24]
      val->kd /= ratio;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	edd3 6a07 	vldr	s13, [r3, #28]
 8001ae4:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ae8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	edc3 7a07 	vstr	s15, [r3, #28]
      val->SampleTime = (unsigned long)NewSampleTime;
 8001af2:	683a      	ldr	r2, [r7, #0]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	629a      	str	r2, [r3, #40]	; 0x28
   }
}
 8001af8:	bf00      	nop
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <SetOutputLimits>:

void SetOutputLimits(PID_instance *val, float Min, float Max)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001b10:	edc7 0a01 	vstr	s1, [r7, #4]
   if(Min > Max) return;
 8001b14:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b18:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b24:	dc44      	bgt.n	8001bb0 <SetOutputLimits+0xac>
   val->outMin = Min;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	68ba      	ldr	r2, [r7, #8]
 8001b2a:	621a      	str	r2, [r3, #32]
   val->outMax = Max;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	625a      	str	r2, [r3, #36]	; 0x24

   if(val->Output > val->outMax) val->Output = val->outMax;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001b3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b46:	dd04      	ble.n	8001b52 <SetOutputLimits+0x4e>
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	605a      	str	r2, [r3, #4]
 8001b50:	e00e      	b.n	8001b70 <SetOutputLimits+0x6c>
   else if(val->Output < val->outMin) val->Output = val->outMin;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	edd3 7a08 	vldr	s15, [r3, #32]
 8001b5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b66:	d503      	bpl.n	8001b70 <SetOutputLimits+0x6c>
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6a1a      	ldr	r2, [r3, #32]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	605a      	str	r2, [r3, #4]

   if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001b7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b84:	dd04      	ble.n	8001b90 <SetOutputLimits+0x8c>
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	e010      	b.n	8001bb2 <SetOutputLimits+0xae>
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	edd3 7a08 	vldr	s15, [r3, #32]
 8001b9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba4:	d505      	bpl.n	8001bb2 <SetOutputLimits+0xae>
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	6a1a      	ldr	r2, [r3, #32]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	e000      	b.n	8001bb2 <SetOutputLimits+0xae>
   if(Min > Max) return;
 8001bb0:	bf00      	nop
}
 8001bb2:	3714      	adds	r7, #20
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <SetMode>:

void SetMode(PID_instance *val, int Mode)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
    uint8_t newAuto = (Mode == AUTOMATIC);
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	bf0c      	ite	eq
 8001bcc:	2301      	moveq	r3, #1
 8001bce:	2300      	movne	r3, #0
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	73fb      	strb	r3, [r7, #15]
    if(newAuto == !val->inAuto)
 8001bd4:	7bfb      	ldrb	r3, [r7, #15]
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8001bdc:	2a00      	cmp	r2, #0
 8001bde:	bf0c      	ite	eq
 8001be0:	2201      	moveq	r2, #1
 8001be2:	2200      	movne	r2, #0
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d102      	bne.n	8001bf0 <SetMode+0x34>
    {  /*we just went from manual to auto*/
        Initialize(val);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 f808 	bl	8001c00 <Initialize>
    }
    val->inAuto = newAuto;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	7bfa      	ldrb	r2, [r7, #15]
 8001bf4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8001bf8:	bf00      	nop
 8001bfa:	3710      	adds	r7, #16
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <Initialize>:

void Initialize(PID_instance *val)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
	val->lastInput = val->Input;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	611a      	str	r2, [r3, #16]
	val->outputSum = val->Output;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685a      	ldr	r2, [r3, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	60da      	str	r2, [r3, #12]
   if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	ed93 7a03 	vldr	s14, [r3, #12]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001c24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c2c:	dd04      	ble.n	8001c38 <Initialize+0x38>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	60da      	str	r2, [r3, #12]
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
}
 8001c36:	e00f      	b.n	8001c58 <Initialize+0x58>
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	ed93 7a03 	vldr	s14, [r3, #12]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	edd3 7a08 	vldr	s15, [r3, #32]
 8001c44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4c:	d400      	bmi.n	8001c50 <Initialize+0x50>
}
 8001c4e:	e003      	b.n	8001c58 <Initialize+0x58>
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a1a      	ldr	r2, [r3, #32]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	60da      	str	r2, [r3, #12]
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <SetControllerDirection>:

void SetControllerDirection(PID_instance *val, int Direction)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
	val->controllerDirection = Direction;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	683a      	ldr	r2, [r7, #0]
 8001c72:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <PrintServerPrintf>:
/* For convenience, define a pointer to UART handle */
UART_HandleTypeDef *uart_handle_p = &huart1;

volatile uint8_t buff[PRINT_BUFFER_SIZE];
void PrintServerPrintf(const char *fmt, ...)
{
 8001c80:	b40f      	push	{r0, r1, r2, r3}
 8001c82:	b590      	push	{r4, r7, lr}
 8001c84:	b083      	sub	sp, #12
 8001c86:	af00      	add	r7, sp, #0
/* local variable to store the final text string to be sent to UART */

/* va_list is a type to hold information about variable arguments */
va_list args;
/* va_start must be called before accessing variable argument list */
va_start(args, fmt);
 8001c88:	f107 031c 	add.w	r3, r7, #28
 8001c8c:	607b      	str	r3, [r7, #4]
*
* The vsnprintf() function converts each entry in the argument list
* according to the corresponding format specifier in format. The format has
* the same form and function as the format string for the printf()
* function. */
vsnprintf((char *)buff, PRINT_BUFFER_SIZE, fmt, args);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c96:	480b      	ldr	r0, [pc, #44]	; (8001cc4 <PrintServerPrintf+0x44>)
 8001c98:	f00a ff24 	bl	800cae4 <vsniprintf>
/* va_end should be executed before the function returns whenever
* va_start has been previously used in that function */
va_end(args);
HAL_UART_Transmit_DMA(uart_handle_p, (uint8_t *)buff, strlen((char *)buff));
 8001c9c:	4b0a      	ldr	r3, [pc, #40]	; (8001cc8 <PrintServerPrintf+0x48>)
 8001c9e:	681c      	ldr	r4, [r3, #0]
 8001ca0:	4808      	ldr	r0, [pc, #32]	; (8001cc4 <PrintServerPrintf+0x44>)
 8001ca2:	f7fe fabd 	bl	8000220 <strlen>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	461a      	mov	r2, r3
 8001cac:	4905      	ldr	r1, [pc, #20]	; (8001cc4 <PrintServerPrintf+0x44>)
 8001cae:	4620      	mov	r0, r4
 8001cb0:	f009 fbf2 	bl	800b498 <HAL_UART_Transmit_DMA>
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001cbe:	b004      	add	sp, #16
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	20000370 	.word	0x20000370
 8001cc8:	20000138 	.word	0x20000138

08001ccc <ADC_CAL_init>:
VT_Callback VT_IRQ_callback;
Voltage_Temp VT_data;

#define Vref 3000

int32_t ADC_CAL_init(ADC_HandleTypeDef *hadc){
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b094      	sub	sp, #80	; 0x50
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef HAL_status;
	ADC_HandleTypeDef *adc_handle_CAL;

	//check if pointer is NULL
	if(hadc == NULL)return -1; //null pointer error
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d102      	bne.n	8001ce0 <ADC_CAL_init+0x14>
 8001cda:	f04f 33ff 	mov.w	r3, #4294967295
 8001cde:	e1dc      	b.n	800209a <ADC_CAL_init+0x3ce>

	//copy pointer
	adc_handle_CAL = hadc;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	64bb      	str	r3, [r7, #72]	; 0x48

	//do a calibration
	HAL_status = HAL_ADCEx_Calibration_Start(adc_handle_CAL, ADC_SINGLE_ENDED);
 8001ce4:	217f      	movs	r1, #127	; 0x7f
 8001ce6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001ce8:	f003 ffd8 	bl	8005c9c <HAL_ADCEx_Calibration_Start>
 8001cec:	4603      	mov	r3, r0
 8001cee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (HAL_status != HAL_OK)return -2; //ADC calibration failed
 8001cf2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d002      	beq.n	8001d00 <ADC_CAL_init+0x34>
 8001cfa:	f06f 0301 	mvn.w	r3, #1
 8001cfe:	e1cc      	b.n	800209a <ADC_CAL_init+0x3ce>

	//start ADC
	uint16_t calibrating = number_of_calibration_points;
 8001d00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d04:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	volatile uint32_t Voltage_offset_temp[3] = {0};
 8001d08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	605a      	str	r2, [r3, #4]
 8001d12:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = {0};
 8001d14:	f107 0308 	add.w	r3, r7, #8
 8001d18:	2220      	movs	r2, #32
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f00a feef 	bl	800cb00 <memset>

	calibrating = 0;
 8001d22:	2300      	movs	r3, #0
 8001d24:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

	while(calibrating){
 8001d28:	e19c      	b.n	8002064 <ADC_CAL_init+0x398>
		sConfig.Channel = ADC_CHANNEL_0;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	60bb      	str	r3, [r7, #8]
		HAL_status = HAL_ADC_ConfigChannel(adc_handle_CAL, &sConfig); // required for code to sample both channels, why?
 8001d2e:	f107 0308 	add.w	r3, r7, #8
 8001d32:	4619      	mov	r1, r3
 8001d34:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001d36:	f003 f95d 	bl	8004ff4 <HAL_ADC_ConfigChannel>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -3; //ADC start failed
 8001d40:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d002      	beq.n	8001d4e <ADC_CAL_init+0x82>
 8001d48:	f06f 0302 	mvn.w	r3, #2
 8001d4c:	e1a5      	b.n	800209a <ADC_CAL_init+0x3ce>
		HAL_status = HAL_ADC_Start(adc_handle_CAL);
 8001d4e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001d50:	f002 fc98 	bl	8004684 <HAL_ADC_Start>
 8001d54:	4603      	mov	r3, r0
 8001d56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -3; //ADC start failed
 8001d5a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d002      	beq.n	8001d68 <ADC_CAL_init+0x9c>
 8001d62:	f06f 0302 	mvn.w	r3, #2
 8001d66:	e198      	b.n	800209a <ADC_CAL_init+0x3ce>
		//whait until the ADC has gotten the value
		HAL_status = HAL_ADC_PollForConversion(adc_handle_CAL, 1000);
 8001d68:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d6c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001d6e:	f002 fd79 	bl	8004864 <HAL_ADC_PollForConversion>
 8001d72:	4603      	mov	r3, r0
 8001d74:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status == HAL_TIMEOUT)return -4; //ADC timeout
 8001d78:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001d7c:	2b03      	cmp	r3, #3
 8001d7e:	d102      	bne.n	8001d86 <ADC_CAL_init+0xba>
 8001d80:	f06f 0303 	mvn.w	r3, #3
 8001d84:	e189      	b.n	800209a <ADC_CAL_init+0x3ce>
		if (HAL_status != HAL_OK)return -5; //ADC failed
 8001d86:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d002      	beq.n	8001d94 <ADC_CAL_init+0xc8>
 8001d8e:	f06f 0304 	mvn.w	r3, #4
 8001d92:	e182      	b.n	800209a <ADC_CAL_init+0x3ce>
		uint32_t M3_raw = HAL_ADC_GetValue(adc_handle_CAL);
 8001d94:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001d96:	f002 fef1 	bl	8004b7c <HAL_ADC_GetValue>
 8001d9a:	6438      	str	r0, [r7, #64]	; 0x40
		HAL_status = HAL_ADC_Stop(adc_handle_CAL);
 8001d9c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001d9e:	f002 fd2d 	bl	80047fc <HAL_ADC_Stop>
 8001da2:	4603      	mov	r3, r0
 8001da4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -6; //ADC start failed
 8001da8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d002      	beq.n	8001db6 <ADC_CAL_init+0xea>
 8001db0:	f06f 0305 	mvn.w	r3, #5
 8001db4:	e171      	b.n	800209a <ADC_CAL_init+0x3ce>

		sConfig.Channel = ADC_CHANNEL_1;
 8001db6:	4bbb      	ldr	r3, [pc, #748]	; (80020a4 <ADC_CAL_init+0x3d8>)
 8001db8:	60bb      	str	r3, [r7, #8]
		HAL_status = HAL_ADC_ConfigChannel(adc_handle_CAL, &sConfig); // required for code to sample both channels, why?
 8001dba:	f107 0308 	add.w	r3, r7, #8
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001dc2:	f003 f917 	bl	8004ff4 <HAL_ADC_ConfigChannel>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -3; //ADC start failed
 8001dcc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d002      	beq.n	8001dda <ADC_CAL_init+0x10e>
 8001dd4:	f06f 0302 	mvn.w	r3, #2
 8001dd8:	e15f      	b.n	800209a <ADC_CAL_init+0x3ce>
		HAL_status = HAL_ADC_Start(adc_handle_CAL);
 8001dda:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001ddc:	f002 fc52 	bl	8004684 <HAL_ADC_Start>
 8001de0:	4603      	mov	r3, r0
 8001de2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -3; //ADC start failed
 8001de6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d002      	beq.n	8001df4 <ADC_CAL_init+0x128>
 8001dee:	f06f 0302 	mvn.w	r3, #2
 8001df2:	e152      	b.n	800209a <ADC_CAL_init+0x3ce>
		//whait until the ADC has gotten the value
		HAL_status = HAL_ADC_PollForConversion(adc_handle_CAL, 1000);
 8001df4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001df8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001dfa:	f002 fd33 	bl	8004864 <HAL_ADC_PollForConversion>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status == HAL_TIMEOUT)return -4; //ADC timeout
 8001e04:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001e08:	2b03      	cmp	r3, #3
 8001e0a:	d102      	bne.n	8001e12 <ADC_CAL_init+0x146>
 8001e0c:	f06f 0303 	mvn.w	r3, #3
 8001e10:	e143      	b.n	800209a <ADC_CAL_init+0x3ce>
		if (HAL_status != HAL_OK)return -5; //ADC failed
 8001e12:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d002      	beq.n	8001e20 <ADC_CAL_init+0x154>
 8001e1a:	f06f 0304 	mvn.w	r3, #4
 8001e1e:	e13c      	b.n	800209a <ADC_CAL_init+0x3ce>
		uint32_t M2_raw = HAL_ADC_GetValue(adc_handle_CAL);
 8001e20:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001e22:	f002 feab 	bl	8004b7c <HAL_ADC_GetValue>
 8001e26:	63f8      	str	r0, [r7, #60]	; 0x3c
		HAL_status = HAL_ADC_Stop(adc_handle_CAL);
 8001e28:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001e2a:	f002 fce7 	bl	80047fc <HAL_ADC_Stop>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -6; //ADC start failed
 8001e34:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d002      	beq.n	8001e42 <ADC_CAL_init+0x176>
 8001e3c:	f06f 0305 	mvn.w	r3, #5
 8001e40:	e12b      	b.n	800209a <ADC_CAL_init+0x3ce>

		sConfig.Channel = ADC_CHANNEL_2;
 8001e42:	4b99      	ldr	r3, [pc, #612]	; (80020a8 <ADC_CAL_init+0x3dc>)
 8001e44:	60bb      	str	r3, [r7, #8]
		HAL_status = HAL_ADC_ConfigChannel(adc_handle_CAL, &sConfig); // required for code to sample both channels, why?
 8001e46:	f107 0308 	add.w	r3, r7, #8
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001e4e:	f003 f8d1 	bl	8004ff4 <HAL_ADC_ConfigChannel>
 8001e52:	4603      	mov	r3, r0
 8001e54:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -3; //ADC start failed
 8001e58:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d002      	beq.n	8001e66 <ADC_CAL_init+0x19a>
 8001e60:	f06f 0302 	mvn.w	r3, #2
 8001e64:	e119      	b.n	800209a <ADC_CAL_init+0x3ce>
		HAL_status = HAL_ADC_Start(adc_handle_CAL);
 8001e66:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001e68:	f002 fc0c 	bl	8004684 <HAL_ADC_Start>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -3; //ADC start failed
 8001e72:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d002      	beq.n	8001e80 <ADC_CAL_init+0x1b4>
 8001e7a:	f06f 0302 	mvn.w	r3, #2
 8001e7e:	e10c      	b.n	800209a <ADC_CAL_init+0x3ce>
		//whait until the ADC has gotten the value
		HAL_status = HAL_ADC_PollForConversion(adc_handle_CAL, 1000);
 8001e80:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e84:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001e86:	f002 fced 	bl	8004864 <HAL_ADC_PollForConversion>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status == HAL_TIMEOUT)return -4; //ADC timeout
 8001e90:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001e94:	2b03      	cmp	r3, #3
 8001e96:	d102      	bne.n	8001e9e <ADC_CAL_init+0x1d2>
 8001e98:	f06f 0303 	mvn.w	r3, #3
 8001e9c:	e0fd      	b.n	800209a <ADC_CAL_init+0x3ce>
		if (HAL_status != HAL_OK)return -5; //ADC failed
 8001e9e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d002      	beq.n	8001eac <ADC_CAL_init+0x1e0>
 8001ea6:	f06f 0304 	mvn.w	r3, #4
 8001eaa:	e0f6      	b.n	800209a <ADC_CAL_init+0x3ce>
		uint32_t M1_raw = HAL_ADC_GetValue(adc_handle_CAL);
 8001eac:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001eae:	f002 fe65 	bl	8004b7c <HAL_ADC_GetValue>
 8001eb2:	63b8      	str	r0, [r7, #56]	; 0x38
		HAL_status = HAL_ADC_Stop(adc_handle_CAL);
 8001eb4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001eb6:	f002 fca1 	bl	80047fc <HAL_ADC_Stop>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -6; //ADC start failed
 8001ec0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d002      	beq.n	8001ece <ADC_CAL_init+0x202>
 8001ec8:	f06f 0305 	mvn.w	r3, #5
 8001ecc:	e0e5      	b.n	800209a <ADC_CAL_init+0x3ce>

		sConfig.Channel = ADC_CHANNEL_3;
 8001ece:	4b77      	ldr	r3, [pc, #476]	; (80020ac <ADC_CAL_init+0x3e0>)
 8001ed0:	60bb      	str	r3, [r7, #8]
		HAL_status = HAL_ADC_ConfigChannel(adc_handle_CAL, &sConfig); // required for code to sample both channels, why?
 8001ed2:	f107 0308 	add.w	r3, r7, #8
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001eda:	f003 f88b 	bl	8004ff4 <HAL_ADC_ConfigChannel>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -3; //ADC start failed
 8001ee4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d002      	beq.n	8001ef2 <ADC_CAL_init+0x226>
 8001eec:	f06f 0302 	mvn.w	r3, #2
 8001ef0:	e0d3      	b.n	800209a <ADC_CAL_init+0x3ce>
		HAL_status = HAL_ADC_Start(adc_handle_CAL);
 8001ef2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001ef4:	f002 fbc6 	bl	8004684 <HAL_ADC_Start>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -3; //ADC start failed
 8001efe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d002      	beq.n	8001f0c <ADC_CAL_init+0x240>
 8001f06:	f06f 0302 	mvn.w	r3, #2
 8001f0a:	e0c6      	b.n	800209a <ADC_CAL_init+0x3ce>
		//whait until the ADC has gotten the value
		HAL_status = HAL_ADC_PollForConversion(adc_handle_CAL, 1000);
 8001f0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001f10:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001f12:	f002 fca7 	bl	8004864 <HAL_ADC_PollForConversion>
 8001f16:	4603      	mov	r3, r0
 8001f18:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status == HAL_TIMEOUT)return -4; //ADC timeout
 8001f1c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001f20:	2b03      	cmp	r3, #3
 8001f22:	d102      	bne.n	8001f2a <ADC_CAL_init+0x25e>
 8001f24:	f06f 0303 	mvn.w	r3, #3
 8001f28:	e0b7      	b.n	800209a <ADC_CAL_init+0x3ce>
		if (HAL_status != HAL_OK)return -5; //ADC failed
 8001f2a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d002      	beq.n	8001f38 <ADC_CAL_init+0x26c>
 8001f32:	f06f 0304 	mvn.w	r3, #4
 8001f36:	e0b0      	b.n	800209a <ADC_CAL_init+0x3ce>
		uint32_t vdda_raw = HAL_ADC_GetValue(adc_handle_CAL);
 8001f38:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001f3a:	f002 fe1f 	bl	8004b7c <HAL_ADC_GetValue>
 8001f3e:	6378      	str	r0, [r7, #52]	; 0x34
		HAL_status = HAL_ADC_Stop(adc_handle_CAL);
 8001f40:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001f42:	f002 fc5b 	bl	80047fc <HAL_ADC_Stop>
 8001f46:	4603      	mov	r3, r0
 8001f48:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -6; //ADC start failed
 8001f4c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d002      	beq.n	8001f5a <ADC_CAL_init+0x28e>
 8001f54:	f06f 0305 	mvn.w	r3, #5
 8001f58:	e09f      	b.n	800209a <ADC_CAL_init+0x3ce>


		//get current samples;
		VDDA = (int16_t)3000*(*vrefint)/(vdda_raw/number_of_oversample);
 8001f5a:	4b55      	ldr	r3, [pc, #340]	; (80020b0 <ADC_CAL_init+0x3e4>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	881b      	ldrh	r3, [r3, #0]
 8001f60:	461a      	mov	r2, r3
 8001f62:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001f66:	fb02 f303 	mul.w	r3, r2, r3
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f6e:	091b      	lsrs	r3, r3, #4
 8001f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f74:	b21a      	sxth	r2, r3
 8001f76:	4b4f      	ldr	r3, [pc, #316]	; (80020b4 <ADC_CAL_init+0x3e8>)
 8001f78:	801a      	strh	r2, [r3, #0]
		Voltage_offset_temp[0] += (int32_t)((M1_raw/number_of_oversample*VDDA)/4095)*153/100; //*153/100
 8001f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f7c:	091b      	lsrs	r3, r3, #4
 8001f7e:	4a4d      	ldr	r2, [pc, #308]	; (80020b4 <ADC_CAL_init+0x3e8>)
 8001f80:	8812      	ldrh	r2, [r2, #0]
 8001f82:	b212      	sxth	r2, r2
 8001f84:	fb03 f202 	mul.w	r2, r3, r2
 8001f88:	4b4b      	ldr	r3, [pc, #300]	; (80020b8 <ADC_CAL_init+0x3ec>)
 8001f8a:	fba3 1302 	umull	r1, r3, r3, r2
 8001f8e:	1ad2      	subs	r2, r2, r3
 8001f90:	0852      	lsrs	r2, r2, #1
 8001f92:	4413      	add	r3, r2
 8001f94:	0adb      	lsrs	r3, r3, #11
 8001f96:	461a      	mov	r2, r3
 8001f98:	4613      	mov	r3, r2
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	4413      	add	r3, r2
 8001f9e:	011a      	lsls	r2, r3, #4
 8001fa0:	4413      	add	r3, r2
 8001fa2:	4a46      	ldr	r2, [pc, #280]	; (80020bc <ADC_CAL_init+0x3f0>)
 8001fa4:	fb82 1203 	smull	r1, r2, r2, r3
 8001fa8:	1152      	asrs	r2, r2, #5
 8001faa:	17db      	asrs	r3, r3, #31
 8001fac:	1ad2      	subs	r2, r2, r3
 8001fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fb0:	4413      	add	r3, r2
 8001fb2:	62bb      	str	r3, [r7, #40]	; 0x28
		Voltage_offset_temp[1] += (int32_t)((M2_raw/number_of_oversample*VDDA)/4095)*153/100;
 8001fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fb6:	091b      	lsrs	r3, r3, #4
 8001fb8:	4a3e      	ldr	r2, [pc, #248]	; (80020b4 <ADC_CAL_init+0x3e8>)
 8001fba:	8812      	ldrh	r2, [r2, #0]
 8001fbc:	b212      	sxth	r2, r2
 8001fbe:	fb03 f202 	mul.w	r2, r3, r2
 8001fc2:	4b3d      	ldr	r3, [pc, #244]	; (80020b8 <ADC_CAL_init+0x3ec>)
 8001fc4:	fba3 1302 	umull	r1, r3, r3, r2
 8001fc8:	1ad2      	subs	r2, r2, r3
 8001fca:	0852      	lsrs	r2, r2, #1
 8001fcc:	4413      	add	r3, r2
 8001fce:	0adb      	lsrs	r3, r3, #11
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	4413      	add	r3, r2
 8001fd8:	011a      	lsls	r2, r3, #4
 8001fda:	4413      	add	r3, r2
 8001fdc:	4a37      	ldr	r2, [pc, #220]	; (80020bc <ADC_CAL_init+0x3f0>)
 8001fde:	fb82 1203 	smull	r1, r2, r2, r3
 8001fe2:	1152      	asrs	r2, r2, #5
 8001fe4:	17db      	asrs	r3, r3, #31
 8001fe6:	1ad2      	subs	r2, r2, r3
 8001fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fea:	4413      	add	r3, r2
 8001fec:	62fb      	str	r3, [r7, #44]	; 0x2c
		Voltage_offset_temp[2] += (int32_t)((M3_raw/number_of_oversample*VDDA)/4095)*153/100;
 8001fee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ff0:	091b      	lsrs	r3, r3, #4
 8001ff2:	4a30      	ldr	r2, [pc, #192]	; (80020b4 <ADC_CAL_init+0x3e8>)
 8001ff4:	8812      	ldrh	r2, [r2, #0]
 8001ff6:	b212      	sxth	r2, r2
 8001ff8:	fb03 f202 	mul.w	r2, r3, r2
 8001ffc:	4b2e      	ldr	r3, [pc, #184]	; (80020b8 <ADC_CAL_init+0x3ec>)
 8001ffe:	fba3 1302 	umull	r1, r3, r3, r2
 8002002:	1ad2      	subs	r2, r2, r3
 8002004:	0852      	lsrs	r2, r2, #1
 8002006:	4413      	add	r3, r2
 8002008:	0adb      	lsrs	r3, r3, #11
 800200a:	461a      	mov	r2, r3
 800200c:	4613      	mov	r3, r2
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	4413      	add	r3, r2
 8002012:	011a      	lsls	r2, r3, #4
 8002014:	4413      	add	r3, r2
 8002016:	4a29      	ldr	r2, [pc, #164]	; (80020bc <ADC_CAL_init+0x3f0>)
 8002018:	fb82 1203 	smull	r1, r2, r2, r3
 800201c:	1152      	asrs	r2, r2, #5
 800201e:	17db      	asrs	r3, r3, #31
 8002020:	1ad2      	subs	r2, r2, r3
 8002022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002024:	4413      	add	r3, r2
 8002026:	633b      	str	r3, [r7, #48]	; 0x30
		calibrating--;
 8002028:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800202c:	3b01      	subs	r3, #1
 800202e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

		if(!calibrating){
 8002032:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002036:	2b00      	cmp	r3, #0
 8002038:	d114      	bne.n	8002064 <ADC_CAL_init+0x398>
			Voltage_offset[0] = Voltage_offset_temp[0]/number_of_calibration_points;
 800203a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800203c:	4a20      	ldr	r2, [pc, #128]	; (80020c0 <ADC_CAL_init+0x3f4>)
 800203e:	fba2 2303 	umull	r2, r3, r2, r3
 8002042:	099b      	lsrs	r3, r3, #6
 8002044:	4a1f      	ldr	r2, [pc, #124]	; (80020c4 <ADC_CAL_init+0x3f8>)
 8002046:	6013      	str	r3, [r2, #0]
			Voltage_offset[1] = Voltage_offset_temp[1]/number_of_calibration_points;
 8002048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800204a:	4a1d      	ldr	r2, [pc, #116]	; (80020c0 <ADC_CAL_init+0x3f4>)
 800204c:	fba2 2303 	umull	r2, r3, r2, r3
 8002050:	099b      	lsrs	r3, r3, #6
 8002052:	4a1c      	ldr	r2, [pc, #112]	; (80020c4 <ADC_CAL_init+0x3f8>)
 8002054:	6053      	str	r3, [r2, #4]
			Voltage_offset[2] = Voltage_offset_temp[2]/number_of_calibration_points;
 8002056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002058:	4a19      	ldr	r2, [pc, #100]	; (80020c0 <ADC_CAL_init+0x3f4>)
 800205a:	fba2 2303 	umull	r2, r3, r2, r3
 800205e:	099b      	lsrs	r3, r3, #6
 8002060:	4a18      	ldr	r2, [pc, #96]	; (80020c4 <ADC_CAL_init+0x3f8>)
 8002062:	6093      	str	r3, [r2, #8]
	while(calibrating){
 8002064:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002068:	2b00      	cmp	r3, #0
 800206a:	f47f ae5e 	bne.w	8001d2a <ADC_CAL_init+0x5e>

		}
	}
	Voltage_offset[0] = 2400;
 800206e:	4b15      	ldr	r3, [pc, #84]	; (80020c4 <ADC_CAL_init+0x3f8>)
 8002070:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8002074:	601a      	str	r2, [r3, #0]
	Voltage_offset[1] = 2400;
 8002076:	4b13      	ldr	r3, [pc, #76]	; (80020c4 <ADC_CAL_init+0x3f8>)
 8002078:	f44f 6216 	mov.w	r2, #2400	; 0x960
 800207c:	605a      	str	r2, [r3, #4]
	Voltage_offset[2] = 2400;
 800207e:	4b11      	ldr	r3, [pc, #68]	; (80020c4 <ADC_CAL_init+0x3f8>)
 8002080:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8002084:	609a      	str	r2, [r3, #8]


	//---------------DAC DEBUG-------------
	HAL_DAC_Init(&hdac1);
 8002086:	4810      	ldr	r0, [pc, #64]	; (80020c8 <ADC_CAL_init+0x3fc>)
 8002088:	f004 f84f 	bl	800612a <HAL_DAC_Init>
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 800208c:	2100      	movs	r1, #0
 800208e:	480e      	ldr	r0, [pc, #56]	; (80020c8 <ADC_CAL_init+0x3fc>)
 8002090:	f004 f86d 	bl	800616e <HAL_DAC_Start>


	return VDDA; //success
 8002094:	4b07      	ldr	r3, [pc, #28]	; (80020b4 <ADC_CAL_init+0x3e8>)
 8002096:	881b      	ldrh	r3, [r3, #0]
 8002098:	b21b      	sxth	r3, r3
}
 800209a:	4618      	mov	r0, r3
 800209c:	3750      	adds	r7, #80	; 0x50
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	04300002 	.word	0x04300002
 80020a8:	08600004 	.word	0x08600004
 80020ac:	0c900008 	.word	0x0c900008
 80020b0:	2000013c 	.word	0x2000013c
 80020b4:	200005bc 	.word	0x200005bc
 80020b8:	00100101 	.word	0x00100101
 80020bc:	51eb851f 	.word	0x51eb851f
 80020c0:	10624dd3 	.word	0x10624dd3
 80020c4:	200005b0 	.word	0x200005b0
 80020c8:	200007d0 	.word	0x200007d0

080020cc <current_init>:

void current_init(Current_Callback __IRQ_callback){
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
	ADC_CAL_init(&hadc1);
 80020d4:	4807      	ldr	r0, [pc, #28]	; (80020f4 <current_init+0x28>)
 80020d6:	f7ff fdf9 	bl	8001ccc <ADC_CAL_init>

	Curent_IRQ_callback = __IRQ_callback;
 80020da:	4a07      	ldr	r2, [pc, #28]	; (80020f8 <current_init+0x2c>)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6013      	str	r3, [r2, #0]

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_result_DMA, number_of_channels*2);
 80020e0:	2208      	movs	r2, #8
 80020e2:	4906      	ldr	r1, [pc, #24]	; (80020fc <current_init+0x30>)
 80020e4:	4803      	ldr	r0, [pc, #12]	; (80020f4 <current_init+0x28>)
 80020e6:	f002 fc95 	bl	8004a14 <HAL_ADC_Start_DMA>
}
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	20000634 	.word	0x20000634
 80020f8:	200005c0 	.word	0x200005c0
 80020fc:	20000570 	.word	0x20000570

08002100 <voltage_temperature_init>:
void voltage_temperature_init(VT_Callback __IRQ_callback){
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
	VT_IRQ_callback = __IRQ_callback;
 8002108:	4a05      	ldr	r2, [pc, #20]	; (8002120 <voltage_temperature_init+0x20>)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6013      	str	r3, [r2, #0]

	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)VT_adc_result_DMA, number_of_VT_channels*2);
 800210e:	2208      	movs	r2, #8
 8002110:	4904      	ldr	r1, [pc, #16]	; (8002124 <voltage_temperature_init+0x24>)
 8002112:	4805      	ldr	r0, [pc, #20]	; (8002128 <voltage_temperature_init+0x28>)
 8002114:	f002 fc7e 	bl	8004a14 <HAL_ADC_Start_DMA>
}
 8002118:	bf00      	nop
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	200005d4 	.word	0x200005d4
 8002124:	20000590 	.word	0x20000590
 8002128:	200006a0 	.word	0x200006a0

0800212c <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1){
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a78      	ldr	r2, [pc, #480]	; (8002318 <HAL_ADC_ConvHalfCpltCallback+0x1ec>)
 8002138:	4293      	cmp	r3, r2
 800213a:	f040 8093 	bne.w	8002264 <HAL_ADC_ConvHalfCpltCallback+0x138>
		VDDA = (int16_t)3000*(*vrefint)/(adc_result_DMA[3]/number_of_oversample);
 800213e:	4b77      	ldr	r3, [pc, #476]	; (800231c <HAL_ADC_ConvHalfCpltCallback+0x1f0>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	881b      	ldrh	r3, [r3, #0]
 8002144:	461a      	mov	r2, r3
 8002146:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800214a:	fb02 f303 	mul.w	r3, r2, r3
 800214e:	461a      	mov	r2, r3
 8002150:	4b73      	ldr	r3, [pc, #460]	; (8002320 <HAL_ADC_ConvHalfCpltCallback+0x1f4>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	091b      	lsrs	r3, r3, #4
 8002156:	fbb2 f3f3 	udiv	r3, r2, r3
 800215a:	b21a      	sxth	r2, r3
 800215c:	4b71      	ldr	r3, [pc, #452]	; (8002324 <HAL_ADC_ConvHalfCpltCallback+0x1f8>)
 800215e:	801a      	strh	r2, [r3, #0]
		data.Current_M1 = -(int32_t)((((adc_result_DMA[2]/number_of_oversample*VDDA)/ADC_RES)*153/100)-Voltage_offset[0])*50;
 8002160:	4b6f      	ldr	r3, [pc, #444]	; (8002320 <HAL_ADC_ConvHalfCpltCallback+0x1f4>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	091b      	lsrs	r3, r3, #4
 8002166:	4a6f      	ldr	r2, [pc, #444]	; (8002324 <HAL_ADC_ConvHalfCpltCallback+0x1f8>)
 8002168:	8812      	ldrh	r2, [r2, #0]
 800216a:	b212      	sxth	r2, r2
 800216c:	fb03 f202 	mul.w	r2, r3, r2
 8002170:	4b6d      	ldr	r3, [pc, #436]	; (8002328 <HAL_ADC_ConvHalfCpltCallback+0x1fc>)
 8002172:	fba3 1302 	umull	r1, r3, r3, r2
 8002176:	1ad2      	subs	r2, r2, r3
 8002178:	0852      	lsrs	r2, r2, #1
 800217a:	4413      	add	r3, r2
 800217c:	0ada      	lsrs	r2, r3, #11
 800217e:	4613      	mov	r3, r2
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	4413      	add	r3, r2
 8002184:	011a      	lsls	r2, r3, #4
 8002186:	4413      	add	r3, r2
 8002188:	4a68      	ldr	r2, [pc, #416]	; (800232c <HAL_ADC_ConvHalfCpltCallback+0x200>)
 800218a:	fba2 2303 	umull	r2, r3, r2, r3
 800218e:	095a      	lsrs	r2, r3, #5
 8002190:	4b67      	ldr	r3, [pc, #412]	; (8002330 <HAL_ADC_ConvHalfCpltCallback+0x204>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	461a      	mov	r2, r3
 8002198:	f06f 0331 	mvn.w	r3, #49	; 0x31
 800219c:	fb02 f303 	mul.w	r3, r2, r3
 80021a0:	4a64      	ldr	r2, [pc, #400]	; (8002334 <HAL_ADC_ConvHalfCpltCallback+0x208>)
 80021a2:	6013      	str	r3, [r2, #0]
		data.Current_M2 = -(int32_t)((((adc_result_DMA[1]/number_of_oversample*VDDA)/ADC_RES)*153/100)-Voltage_offset[1])*50;
 80021a4:	4b5e      	ldr	r3, [pc, #376]	; (8002320 <HAL_ADC_ConvHalfCpltCallback+0x1f4>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	091b      	lsrs	r3, r3, #4
 80021aa:	4a5e      	ldr	r2, [pc, #376]	; (8002324 <HAL_ADC_ConvHalfCpltCallback+0x1f8>)
 80021ac:	8812      	ldrh	r2, [r2, #0]
 80021ae:	b212      	sxth	r2, r2
 80021b0:	fb03 f202 	mul.w	r2, r3, r2
 80021b4:	4b5c      	ldr	r3, [pc, #368]	; (8002328 <HAL_ADC_ConvHalfCpltCallback+0x1fc>)
 80021b6:	fba3 1302 	umull	r1, r3, r3, r2
 80021ba:	1ad2      	subs	r2, r2, r3
 80021bc:	0852      	lsrs	r2, r2, #1
 80021be:	4413      	add	r3, r2
 80021c0:	0ada      	lsrs	r2, r3, #11
 80021c2:	4613      	mov	r3, r2
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	4413      	add	r3, r2
 80021c8:	011a      	lsls	r2, r3, #4
 80021ca:	4413      	add	r3, r2
 80021cc:	4a57      	ldr	r2, [pc, #348]	; (800232c <HAL_ADC_ConvHalfCpltCallback+0x200>)
 80021ce:	fba2 2303 	umull	r2, r3, r2, r3
 80021d2:	095a      	lsrs	r2, r3, #5
 80021d4:	4b56      	ldr	r3, [pc, #344]	; (8002330 <HAL_ADC_ConvHalfCpltCallback+0x204>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	461a      	mov	r2, r3
 80021dc:	f06f 0331 	mvn.w	r3, #49	; 0x31
 80021e0:	fb02 f303 	mul.w	r3, r2, r3
 80021e4:	4a53      	ldr	r2, [pc, #332]	; (8002334 <HAL_ADC_ConvHalfCpltCallback+0x208>)
 80021e6:	6053      	str	r3, [r2, #4]
		data.Current_M3 = -(int32_t)((((adc_result_DMA[0]/number_of_oversample*VDDA)/ADC_RES)*153/100)-Voltage_offset[2])*50;
 80021e8:	4b4d      	ldr	r3, [pc, #308]	; (8002320 <HAL_ADC_ConvHalfCpltCallback+0x1f4>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	091b      	lsrs	r3, r3, #4
 80021ee:	4a4d      	ldr	r2, [pc, #308]	; (8002324 <HAL_ADC_ConvHalfCpltCallback+0x1f8>)
 80021f0:	8812      	ldrh	r2, [r2, #0]
 80021f2:	b212      	sxth	r2, r2
 80021f4:	fb03 f202 	mul.w	r2, r3, r2
 80021f8:	4b4b      	ldr	r3, [pc, #300]	; (8002328 <HAL_ADC_ConvHalfCpltCallback+0x1fc>)
 80021fa:	fba3 1302 	umull	r1, r3, r3, r2
 80021fe:	1ad2      	subs	r2, r2, r3
 8002200:	0852      	lsrs	r2, r2, #1
 8002202:	4413      	add	r3, r2
 8002204:	0ada      	lsrs	r2, r3, #11
 8002206:	4613      	mov	r3, r2
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	4413      	add	r3, r2
 800220c:	011a      	lsls	r2, r3, #4
 800220e:	4413      	add	r3, r2
 8002210:	4a46      	ldr	r2, [pc, #280]	; (800232c <HAL_ADC_ConvHalfCpltCallback+0x200>)
 8002212:	fba2 2303 	umull	r2, r3, r2, r3
 8002216:	095a      	lsrs	r2, r3, #5
 8002218:	4b45      	ldr	r3, [pc, #276]	; (8002330 <HAL_ADC_ConvHalfCpltCallback+0x204>)
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	461a      	mov	r2, r3
 8002220:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8002224:	fb02 f303 	mul.w	r3, r2, r3
 8002228:	4a42      	ldr	r2, [pc, #264]	; (8002334 <HAL_ADC_ConvHalfCpltCallback+0x208>)
 800222a:	6093      	str	r3, [r2, #8]
		data.Current_DC = ((abs((int)data.Current_M1)+abs((int)data.Current_M2)+abs((int)data.Current_M3))/2);
 800222c:	4b41      	ldr	r3, [pc, #260]	; (8002334 <HAL_ADC_ConvHalfCpltCallback+0x208>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002234:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002238:	4b3e      	ldr	r3, [pc, #248]	; (8002334 <HAL_ADC_ConvHalfCpltCallback+0x208>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	bfb8      	it	lt
 8002240:	425b      	neglt	r3, r3
 8002242:	441a      	add	r2, r3
 8002244:	4b3b      	ldr	r3, [pc, #236]	; (8002334 <HAL_ADC_ConvHalfCpltCallback+0x208>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	2b00      	cmp	r3, #0
 800224a:	bfb8      	it	lt
 800224c:	425b      	neglt	r3, r3
 800224e:	4413      	add	r3, r2
 8002250:	0fda      	lsrs	r2, r3, #31
 8002252:	4413      	add	r3, r2
 8002254:	105b      	asrs	r3, r3, #1
 8002256:	461a      	mov	r2, r3
 8002258:	4b36      	ldr	r3, [pc, #216]	; (8002334 <HAL_ADC_ConvHalfCpltCallback+0x208>)
 800225a:	60da      	str	r2, [r3, #12]
		Curent_IRQ_callback(&data);
 800225c:	4b36      	ldr	r3, [pc, #216]	; (8002338 <HAL_ADC_ConvHalfCpltCallback+0x20c>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4834      	ldr	r0, [pc, #208]	; (8002334 <HAL_ADC_ConvHalfCpltCallback+0x208>)
 8002262:	4798      	blx	r3
	}
	if (hadc == &hadc2){
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a35      	ldr	r2, [pc, #212]	; (800233c <HAL_ADC_ConvHalfCpltCallback+0x210>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d151      	bne.n	8002310 <HAL_ADC_ConvHalfCpltCallback+0x1e4>
		VT_data.Temp_NTC1 = (VT_adc_result_DMA[0]/number_of_VT_oversample*VDDA)/ADC_RES;
 800226c:	4b34      	ldr	r3, [pc, #208]	; (8002340 <HAL_ADC_ConvHalfCpltCallback+0x214>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	091b      	lsrs	r3, r3, #4
 8002272:	4a2c      	ldr	r2, [pc, #176]	; (8002324 <HAL_ADC_ConvHalfCpltCallback+0x1f8>)
 8002274:	8812      	ldrh	r2, [r2, #0]
 8002276:	b212      	sxth	r2, r2
 8002278:	fb03 f202 	mul.w	r2, r3, r2
 800227c:	4b2a      	ldr	r3, [pc, #168]	; (8002328 <HAL_ADC_ConvHalfCpltCallback+0x1fc>)
 800227e:	fba3 1302 	umull	r1, r3, r3, r2
 8002282:	1ad2      	subs	r2, r2, r3
 8002284:	0852      	lsrs	r2, r2, #1
 8002286:	4413      	add	r3, r2
 8002288:	0adb      	lsrs	r3, r3, #11
 800228a:	b25a      	sxtb	r2, r3
 800228c:	4b2d      	ldr	r3, [pc, #180]	; (8002344 <HAL_ADC_ConvHalfCpltCallback+0x218>)
 800228e:	719a      	strb	r2, [r3, #6]
		VT_data.Temp_NTC2 = (VT_adc_result_DMA[1]/number_of_VT_oversample*VDDA)/ADC_RES;
 8002290:	4b2b      	ldr	r3, [pc, #172]	; (8002340 <HAL_ADC_ConvHalfCpltCallback+0x214>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	091b      	lsrs	r3, r3, #4
 8002296:	4a23      	ldr	r2, [pc, #140]	; (8002324 <HAL_ADC_ConvHalfCpltCallback+0x1f8>)
 8002298:	8812      	ldrh	r2, [r2, #0]
 800229a:	b212      	sxth	r2, r2
 800229c:	fb03 f202 	mul.w	r2, r3, r2
 80022a0:	4b21      	ldr	r3, [pc, #132]	; (8002328 <HAL_ADC_ConvHalfCpltCallback+0x1fc>)
 80022a2:	fba3 1302 	umull	r1, r3, r3, r2
 80022a6:	1ad2      	subs	r2, r2, r3
 80022a8:	0852      	lsrs	r2, r2, #1
 80022aa:	4413      	add	r3, r2
 80022ac:	0adb      	lsrs	r3, r3, #11
 80022ae:	b25a      	sxtb	r2, r3
 80022b0:	4b24      	ldr	r3, [pc, #144]	; (8002344 <HAL_ADC_ConvHalfCpltCallback+0x218>)
 80022b2:	71da      	strb	r2, [r3, #7]
		VT_data.V_Bat = (VT_adc_result_DMA[2]/number_of_VT_oversample*VDDA*34)/ADC_RES;
 80022b4:	4b22      	ldr	r3, [pc, #136]	; (8002340 <HAL_ADC_ConvHalfCpltCallback+0x214>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	091b      	lsrs	r3, r3, #4
 80022ba:	4a1a      	ldr	r2, [pc, #104]	; (8002324 <HAL_ADC_ConvHalfCpltCallback+0x1f8>)
 80022bc:	8812      	ldrh	r2, [r2, #0]
 80022be:	b212      	sxth	r2, r2
 80022c0:	fb03 f202 	mul.w	r2, r3, r2
 80022c4:	4613      	mov	r3, r2
 80022c6:	011b      	lsls	r3, r3, #4
 80022c8:	4413      	add	r3, r2
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	461a      	mov	r2, r3
 80022ce:	4b16      	ldr	r3, [pc, #88]	; (8002328 <HAL_ADC_ConvHalfCpltCallback+0x1fc>)
 80022d0:	fba3 1302 	umull	r1, r3, r3, r2
 80022d4:	1ad2      	subs	r2, r2, r3
 80022d6:	0852      	lsrs	r2, r2, #1
 80022d8:	4413      	add	r3, r2
 80022da:	0adb      	lsrs	r3, r3, #11
 80022dc:	4a19      	ldr	r2, [pc, #100]	; (8002344 <HAL_ADC_ConvHalfCpltCallback+0x218>)
 80022de:	6013      	str	r3, [r2, #0]
		VT_data.V_aux = (VT_adc_result_DMA[3]/number_of_VT_oversample*VDDA*57)/ADC_RES/10;
 80022e0:	4b17      	ldr	r3, [pc, #92]	; (8002340 <HAL_ADC_ConvHalfCpltCallback+0x214>)
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	091b      	lsrs	r3, r3, #4
 80022e6:	4a0f      	ldr	r2, [pc, #60]	; (8002324 <HAL_ADC_ConvHalfCpltCallback+0x1f8>)
 80022e8:	8812      	ldrh	r2, [r2, #0]
 80022ea:	b212      	sxth	r2, r2
 80022ec:	fb03 f202 	mul.w	r2, r3, r2
 80022f0:	4613      	mov	r3, r2
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	1a9b      	subs	r3, r3, r2
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	4413      	add	r3, r2
 80022fa:	4a13      	ldr	r2, [pc, #76]	; (8002348 <HAL_ADC_ConvHalfCpltCallback+0x21c>)
 80022fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002300:	0bdb      	lsrs	r3, r3, #15
 8002302:	b29a      	uxth	r2, r3
 8002304:	4b0f      	ldr	r3, [pc, #60]	; (8002344 <HAL_ADC_ConvHalfCpltCallback+0x218>)
 8002306:	809a      	strh	r2, [r3, #4]
		VT_IRQ_callback(&VT_data);
 8002308:	4b10      	ldr	r3, [pc, #64]	; (800234c <HAL_ADC_ConvHalfCpltCallback+0x220>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	480d      	ldr	r0, [pc, #52]	; (8002344 <HAL_ADC_ConvHalfCpltCallback+0x218>)
 800230e:	4798      	blx	r3
	}
//	dac_value(data.Current_DC);
}
 8002310:	bf00      	nop
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	20000634 	.word	0x20000634
 800231c:	2000013c 	.word	0x2000013c
 8002320:	20000570 	.word	0x20000570
 8002324:	200005bc 	.word	0x200005bc
 8002328:	00100101 	.word	0x00100101
 800232c:	51eb851f 	.word	0x51eb851f
 8002330:	200005b0 	.word	0x200005b0
 8002334:	200005c4 	.word	0x200005c4
 8002338:	200005c0 	.word	0x200005c0
 800233c:	200006a0 	.word	0x200006a0
 8002340:	20000590 	.word	0x20000590
 8002344:	200005d8 	.word	0x200005d8
 8002348:	ccd99a67 	.word	0xccd99a67
 800234c:	200005d4 	.word	0x200005d4

08002350 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1){
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a78      	ldr	r2, [pc, #480]	; (800253c <HAL_ADC_ConvCpltCallback+0x1ec>)
 800235c:	4293      	cmp	r3, r2
 800235e:	f040 8093 	bne.w	8002488 <HAL_ADC_ConvCpltCallback+0x138>
		VDDA = (int16_t)3000*(*vrefint)/(adc_result_DMA[7]/number_of_oversample);
 8002362:	4b77      	ldr	r3, [pc, #476]	; (8002540 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	881b      	ldrh	r3, [r3, #0]
 8002368:	461a      	mov	r2, r3
 800236a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800236e:	fb02 f303 	mul.w	r3, r2, r3
 8002372:	461a      	mov	r2, r3
 8002374:	4b73      	ldr	r3, [pc, #460]	; (8002544 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8002376:	69db      	ldr	r3, [r3, #28]
 8002378:	091b      	lsrs	r3, r3, #4
 800237a:	fbb2 f3f3 	udiv	r3, r2, r3
 800237e:	b21a      	sxth	r2, r3
 8002380:	4b71      	ldr	r3, [pc, #452]	; (8002548 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8002382:	801a      	strh	r2, [r3, #0]
		data.Current_M1 = -(int32_t)((((adc_result_DMA[6]/number_of_oversample*VDDA)/ADC_RES)*153/100)-Voltage_offset[0])*50;
 8002384:	4b6f      	ldr	r3, [pc, #444]	; (8002544 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	091b      	lsrs	r3, r3, #4
 800238a:	4a6f      	ldr	r2, [pc, #444]	; (8002548 <HAL_ADC_ConvCpltCallback+0x1f8>)
 800238c:	8812      	ldrh	r2, [r2, #0]
 800238e:	b212      	sxth	r2, r2
 8002390:	fb03 f202 	mul.w	r2, r3, r2
 8002394:	4b6d      	ldr	r3, [pc, #436]	; (800254c <HAL_ADC_ConvCpltCallback+0x1fc>)
 8002396:	fba3 1302 	umull	r1, r3, r3, r2
 800239a:	1ad2      	subs	r2, r2, r3
 800239c:	0852      	lsrs	r2, r2, #1
 800239e:	4413      	add	r3, r2
 80023a0:	0ada      	lsrs	r2, r3, #11
 80023a2:	4613      	mov	r3, r2
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	4413      	add	r3, r2
 80023a8:	011a      	lsls	r2, r3, #4
 80023aa:	4413      	add	r3, r2
 80023ac:	4a68      	ldr	r2, [pc, #416]	; (8002550 <HAL_ADC_ConvCpltCallback+0x200>)
 80023ae:	fba2 2303 	umull	r2, r3, r2, r3
 80023b2:	095a      	lsrs	r2, r3, #5
 80023b4:	4b67      	ldr	r3, [pc, #412]	; (8002554 <HAL_ADC_ConvCpltCallback+0x204>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	461a      	mov	r2, r3
 80023bc:	f06f 0331 	mvn.w	r3, #49	; 0x31
 80023c0:	fb02 f303 	mul.w	r3, r2, r3
 80023c4:	4a64      	ldr	r2, [pc, #400]	; (8002558 <HAL_ADC_ConvCpltCallback+0x208>)
 80023c6:	6013      	str	r3, [r2, #0]
		data.Current_M2 = -(int32_t)((((adc_result_DMA[5]/number_of_oversample*VDDA)/ADC_RES)*153/100)-Voltage_offset[1])*50;
 80023c8:	4b5e      	ldr	r3, [pc, #376]	; (8002544 <HAL_ADC_ConvCpltCallback+0x1f4>)
 80023ca:	695b      	ldr	r3, [r3, #20]
 80023cc:	091b      	lsrs	r3, r3, #4
 80023ce:	4a5e      	ldr	r2, [pc, #376]	; (8002548 <HAL_ADC_ConvCpltCallback+0x1f8>)
 80023d0:	8812      	ldrh	r2, [r2, #0]
 80023d2:	b212      	sxth	r2, r2
 80023d4:	fb03 f202 	mul.w	r2, r3, r2
 80023d8:	4b5c      	ldr	r3, [pc, #368]	; (800254c <HAL_ADC_ConvCpltCallback+0x1fc>)
 80023da:	fba3 1302 	umull	r1, r3, r3, r2
 80023de:	1ad2      	subs	r2, r2, r3
 80023e0:	0852      	lsrs	r2, r2, #1
 80023e2:	4413      	add	r3, r2
 80023e4:	0ada      	lsrs	r2, r3, #11
 80023e6:	4613      	mov	r3, r2
 80023e8:	00db      	lsls	r3, r3, #3
 80023ea:	4413      	add	r3, r2
 80023ec:	011a      	lsls	r2, r3, #4
 80023ee:	4413      	add	r3, r2
 80023f0:	4a57      	ldr	r2, [pc, #348]	; (8002550 <HAL_ADC_ConvCpltCallback+0x200>)
 80023f2:	fba2 2303 	umull	r2, r3, r2, r3
 80023f6:	095a      	lsrs	r2, r3, #5
 80023f8:	4b56      	ldr	r3, [pc, #344]	; (8002554 <HAL_ADC_ConvCpltCallback+0x204>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	461a      	mov	r2, r3
 8002400:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8002404:	fb02 f303 	mul.w	r3, r2, r3
 8002408:	4a53      	ldr	r2, [pc, #332]	; (8002558 <HAL_ADC_ConvCpltCallback+0x208>)
 800240a:	6053      	str	r3, [r2, #4]
		data.Current_M3 = -(int32_t)((((adc_result_DMA[4]/number_of_oversample*VDDA)/ADC_RES)*153/100)-Voltage_offset[2])*50;
 800240c:	4b4d      	ldr	r3, [pc, #308]	; (8002544 <HAL_ADC_ConvCpltCallback+0x1f4>)
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	091b      	lsrs	r3, r3, #4
 8002412:	4a4d      	ldr	r2, [pc, #308]	; (8002548 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8002414:	8812      	ldrh	r2, [r2, #0]
 8002416:	b212      	sxth	r2, r2
 8002418:	fb03 f202 	mul.w	r2, r3, r2
 800241c:	4b4b      	ldr	r3, [pc, #300]	; (800254c <HAL_ADC_ConvCpltCallback+0x1fc>)
 800241e:	fba3 1302 	umull	r1, r3, r3, r2
 8002422:	1ad2      	subs	r2, r2, r3
 8002424:	0852      	lsrs	r2, r2, #1
 8002426:	4413      	add	r3, r2
 8002428:	0ada      	lsrs	r2, r3, #11
 800242a:	4613      	mov	r3, r2
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	4413      	add	r3, r2
 8002430:	011a      	lsls	r2, r3, #4
 8002432:	4413      	add	r3, r2
 8002434:	4a46      	ldr	r2, [pc, #280]	; (8002550 <HAL_ADC_ConvCpltCallback+0x200>)
 8002436:	fba2 2303 	umull	r2, r3, r2, r3
 800243a:	095a      	lsrs	r2, r3, #5
 800243c:	4b45      	ldr	r3, [pc, #276]	; (8002554 <HAL_ADC_ConvCpltCallback+0x204>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	461a      	mov	r2, r3
 8002444:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8002448:	fb02 f303 	mul.w	r3, r2, r3
 800244c:	4a42      	ldr	r2, [pc, #264]	; (8002558 <HAL_ADC_ConvCpltCallback+0x208>)
 800244e:	6093      	str	r3, [r2, #8]
		data.Current_DC = ((abs((int)data.Current_M1)+abs((int)data.Current_M2)+abs((int)data.Current_M3))/2);
 8002450:	4b41      	ldr	r3, [pc, #260]	; (8002558 <HAL_ADC_ConvCpltCallback+0x208>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002458:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800245c:	4b3e      	ldr	r3, [pc, #248]	; (8002558 <HAL_ADC_ConvCpltCallback+0x208>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	bfb8      	it	lt
 8002464:	425b      	neglt	r3, r3
 8002466:	441a      	add	r2, r3
 8002468:	4b3b      	ldr	r3, [pc, #236]	; (8002558 <HAL_ADC_ConvCpltCallback+0x208>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	2b00      	cmp	r3, #0
 800246e:	bfb8      	it	lt
 8002470:	425b      	neglt	r3, r3
 8002472:	4413      	add	r3, r2
 8002474:	0fda      	lsrs	r2, r3, #31
 8002476:	4413      	add	r3, r2
 8002478:	105b      	asrs	r3, r3, #1
 800247a:	461a      	mov	r2, r3
 800247c:	4b36      	ldr	r3, [pc, #216]	; (8002558 <HAL_ADC_ConvCpltCallback+0x208>)
 800247e:	60da      	str	r2, [r3, #12]
		Curent_IRQ_callback(&data);
 8002480:	4b36      	ldr	r3, [pc, #216]	; (800255c <HAL_ADC_ConvCpltCallback+0x20c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4834      	ldr	r0, [pc, #208]	; (8002558 <HAL_ADC_ConvCpltCallback+0x208>)
 8002486:	4798      	blx	r3
	}
	if (hadc == &hadc2){
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4a35      	ldr	r2, [pc, #212]	; (8002560 <HAL_ADC_ConvCpltCallback+0x210>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d151      	bne.n	8002534 <HAL_ADC_ConvCpltCallback+0x1e4>
		VT_data.Temp_NTC1 = (VT_adc_result_DMA[4]/number_of_VT_oversample*VDDA)/ADC_RES;
 8002490:	4b34      	ldr	r3, [pc, #208]	; (8002564 <HAL_ADC_ConvCpltCallback+0x214>)
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	091b      	lsrs	r3, r3, #4
 8002496:	4a2c      	ldr	r2, [pc, #176]	; (8002548 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8002498:	8812      	ldrh	r2, [r2, #0]
 800249a:	b212      	sxth	r2, r2
 800249c:	fb03 f202 	mul.w	r2, r3, r2
 80024a0:	4b2a      	ldr	r3, [pc, #168]	; (800254c <HAL_ADC_ConvCpltCallback+0x1fc>)
 80024a2:	fba3 1302 	umull	r1, r3, r3, r2
 80024a6:	1ad2      	subs	r2, r2, r3
 80024a8:	0852      	lsrs	r2, r2, #1
 80024aa:	4413      	add	r3, r2
 80024ac:	0adb      	lsrs	r3, r3, #11
 80024ae:	b25a      	sxtb	r2, r3
 80024b0:	4b2d      	ldr	r3, [pc, #180]	; (8002568 <HAL_ADC_ConvCpltCallback+0x218>)
 80024b2:	719a      	strb	r2, [r3, #6]
		VT_data.Temp_NTC2 = (VT_adc_result_DMA[5]/number_of_VT_oversample*VDDA)/ADC_RES;
 80024b4:	4b2b      	ldr	r3, [pc, #172]	; (8002564 <HAL_ADC_ConvCpltCallback+0x214>)
 80024b6:	695b      	ldr	r3, [r3, #20]
 80024b8:	091b      	lsrs	r3, r3, #4
 80024ba:	4a23      	ldr	r2, [pc, #140]	; (8002548 <HAL_ADC_ConvCpltCallback+0x1f8>)
 80024bc:	8812      	ldrh	r2, [r2, #0]
 80024be:	b212      	sxth	r2, r2
 80024c0:	fb03 f202 	mul.w	r2, r3, r2
 80024c4:	4b21      	ldr	r3, [pc, #132]	; (800254c <HAL_ADC_ConvCpltCallback+0x1fc>)
 80024c6:	fba3 1302 	umull	r1, r3, r3, r2
 80024ca:	1ad2      	subs	r2, r2, r3
 80024cc:	0852      	lsrs	r2, r2, #1
 80024ce:	4413      	add	r3, r2
 80024d0:	0adb      	lsrs	r3, r3, #11
 80024d2:	b25a      	sxtb	r2, r3
 80024d4:	4b24      	ldr	r3, [pc, #144]	; (8002568 <HAL_ADC_ConvCpltCallback+0x218>)
 80024d6:	71da      	strb	r2, [r3, #7]
		VT_data.V_Bat = (VT_adc_result_DMA[6]/number_of_VT_oversample*VDDA*34)/ADC_RES;
 80024d8:	4b22      	ldr	r3, [pc, #136]	; (8002564 <HAL_ADC_ConvCpltCallback+0x214>)
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	091b      	lsrs	r3, r3, #4
 80024de:	4a1a      	ldr	r2, [pc, #104]	; (8002548 <HAL_ADC_ConvCpltCallback+0x1f8>)
 80024e0:	8812      	ldrh	r2, [r2, #0]
 80024e2:	b212      	sxth	r2, r2
 80024e4:	fb03 f202 	mul.w	r2, r3, r2
 80024e8:	4613      	mov	r3, r2
 80024ea:	011b      	lsls	r3, r3, #4
 80024ec:	4413      	add	r3, r2
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	461a      	mov	r2, r3
 80024f2:	4b16      	ldr	r3, [pc, #88]	; (800254c <HAL_ADC_ConvCpltCallback+0x1fc>)
 80024f4:	fba3 1302 	umull	r1, r3, r3, r2
 80024f8:	1ad2      	subs	r2, r2, r3
 80024fa:	0852      	lsrs	r2, r2, #1
 80024fc:	4413      	add	r3, r2
 80024fe:	0adb      	lsrs	r3, r3, #11
 8002500:	4a19      	ldr	r2, [pc, #100]	; (8002568 <HAL_ADC_ConvCpltCallback+0x218>)
 8002502:	6013      	str	r3, [r2, #0]
		VT_data.V_aux = (VT_adc_result_DMA[7]/number_of_VT_oversample*VDDA*57)/ADC_RES/10;
 8002504:	4b17      	ldr	r3, [pc, #92]	; (8002564 <HAL_ADC_ConvCpltCallback+0x214>)
 8002506:	69db      	ldr	r3, [r3, #28]
 8002508:	091b      	lsrs	r3, r3, #4
 800250a:	4a0f      	ldr	r2, [pc, #60]	; (8002548 <HAL_ADC_ConvCpltCallback+0x1f8>)
 800250c:	8812      	ldrh	r2, [r2, #0]
 800250e:	b212      	sxth	r2, r2
 8002510:	fb03 f202 	mul.w	r2, r3, r2
 8002514:	4613      	mov	r3, r2
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	1a9b      	subs	r3, r3, r2
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	4413      	add	r3, r2
 800251e:	4a13      	ldr	r2, [pc, #76]	; (800256c <HAL_ADC_ConvCpltCallback+0x21c>)
 8002520:	fba2 2303 	umull	r2, r3, r2, r3
 8002524:	0bdb      	lsrs	r3, r3, #15
 8002526:	b29a      	uxth	r2, r3
 8002528:	4b0f      	ldr	r3, [pc, #60]	; (8002568 <HAL_ADC_ConvCpltCallback+0x218>)
 800252a:	809a      	strh	r2, [r3, #4]
		VT_IRQ_callback(&VT_data);
 800252c:	4b10      	ldr	r3, [pc, #64]	; (8002570 <HAL_ADC_ConvCpltCallback+0x220>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	480d      	ldr	r0, [pc, #52]	; (8002568 <HAL_ADC_ConvCpltCallback+0x218>)
 8002532:	4798      	blx	r3
	}
//	 dac_value(data.Current_DC);

}
 8002534:	bf00      	nop
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	20000634 	.word	0x20000634
 8002540:	2000013c 	.word	0x2000013c
 8002544:	20000570 	.word	0x20000570
 8002548:	200005bc 	.word	0x200005bc
 800254c:	00100101 	.word	0x00100101
 8002550:	51eb851f 	.word	0x51eb851f
 8002554:	200005b0 	.word	0x200005b0
 8002558:	200005c4 	.word	0x200005c4
 800255c:	200005c0 	.word	0x200005c0
 8002560:	200006a0 	.word	0x200006a0
 8002564:	20000590 	.word	0x20000590
 8002568:	200005d8 	.word	0x200005d8
 800256c:	ccd99a67 	.word	0xccd99a67
 8002570:	200005d4 	.word	0x200005d4

08002574 <dac_value>:

void dac_value(uint16_t V_dac){
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	80fb      	strh	r3, [r7, #6]
	uint16_t dac_value = ((V_dac*ADC_RES)/VDDA);
 800257e:	88fa      	ldrh	r2, [r7, #6]
 8002580:	4613      	mov	r3, r2
 8002582:	031b      	lsls	r3, r3, #12
 8002584:	1a9b      	subs	r3, r3, r2
 8002586:	4a08      	ldr	r2, [pc, #32]	; (80025a8 <dac_value+0x34>)
 8002588:	8812      	ldrh	r2, [r2, #0]
 800258a:	b212      	sxth	r2, r2
 800258c:	fb93 f3f2 	sdiv	r3, r3, r2
 8002590:	81fb      	strh	r3, [r7, #14]
	HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
 8002592:	89fb      	ldrh	r3, [r7, #14]
 8002594:	2200      	movs	r2, #0
 8002596:	2100      	movs	r1, #0
 8002598:	4804      	ldr	r0, [pc, #16]	; (80025ac <dac_value+0x38>)
 800259a:	f003 fe3b 	bl	8006214 <HAL_DAC_SetValue>
}
 800259e:	bf00      	nop
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	200005bc 	.word	0x200005bc
 80025ac:	200007d0 	.word	0x200007d0

080025b0 <FDCAN_Start>:
/*****************************************************************************/
/** Public API                                                              **/
/*****************************************************************************/

STATUS FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Start the FDCAN bus */
  if (HAL_FDCAN_Start(hfdcan) != HAL_OK)
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f004 fc87 	bl	8006ecc <HAL_FDCAN_Start>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <FDCAN_Start+0x18>
  {
    return FDCAN_STATUS_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e00a      	b.n	80025de <FDCAN_Start+0x2e>
  }

  /* Activate the FIFO interrupt for respective fdcan controller */
  if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80025c8:	2200      	movs	r2, #0
 80025ca:	2101      	movs	r1, #1
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f004 fdc3 	bl	8007158 <HAL_FDCAN_ActivateNotification>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <FDCAN_Start+0x2c>
  {
    return FDCAN_STATUS_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e000      	b.n	80025de <FDCAN_Start+0x2e>
  }

  return FDCAN_STATUS_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
	...

080025e8 <FDCAN_addCallback>:

STATUS FDCAN_addCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t identifier, FDCANCallback *processData)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b089      	sub	sp, #36	; 0x24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
  /* Check if we have space to add a new Callback */
  if (FDCAN_listCallbacksCount >= FDCAN_MAX_CALLBACKS) {
 80025f4:	4b18      	ldr	r3, [pc, #96]	; (8002658 <FDCAN_addCallback+0x70>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2b09      	cmp	r3, #9
 80025fa:	d901      	bls.n	8002600 <FDCAN_addCallback+0x18>
      return FDCAN_STATUS_MAX_LIMIT_REACHED;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e025      	b.n	800264c <FDCAN_addCallback+0x64>
  }

  /* Check if identifier already exists */
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 8002600:	2300      	movs	r3, #0
 8002602:	61fb      	str	r3, [r7, #28]
 8002604:	e00c      	b.n	8002620 <FDCAN_addCallback+0x38>
      if (FDCAN_listCallbacks[i].identifier == identifier) {
 8002606:	4a15      	ldr	r2, [pc, #84]	; (800265c <FDCAN_addCallback+0x74>)
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	4413      	add	r3, r2
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	68ba      	ldr	r2, [r7, #8]
 8002612:	429a      	cmp	r2, r3
 8002614:	d101      	bne.n	800261a <FDCAN_addCallback+0x32>
          return FDCAN_STATUS_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e018      	b.n	800264c <FDCAN_addCallback+0x64>
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	3301      	adds	r3, #1
 800261e:	61fb      	str	r3, [r7, #28]
 8002620:	4b0d      	ldr	r3, [pc, #52]	; (8002658 <FDCAN_addCallback+0x70>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	69fa      	ldr	r2, [r7, #28]
 8002626:	429a      	cmp	r2, r3
 8002628:	d3ed      	bcc.n	8002606 <FDCAN_addCallback+0x1e>
      }
  }

  /* Add the callback to the list and update the count */
  FDCAN_listCallbacks[FDCAN_listCallbacksCount] = (FDCANCallback_internal_t) {
 800262a:	4b0b      	ldr	r3, [pc, #44]	; (8002658 <FDCAN_addCallback+0x70>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	490a      	ldr	r1, [pc, #40]	; (800265c <FDCAN_addCallback+0x74>)
 8002632:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8002636:	4a09      	ldr	r2, [pc, #36]	; (800265c <FDCAN_addCallback+0x74>)
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	4413      	add	r3, r2
 800263c:	68ba      	ldr	r2, [r7, #8]
 800263e:	605a      	str	r2, [r3, #4]
      .fp = processData,
      .identifier = identifier
  };
  FDCAN_listCallbacksCount++;
 8002640:	4b05      	ldr	r3, [pc, #20]	; (8002658 <FDCAN_addCallback+0x70>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	3301      	adds	r3, #1
 8002646:	4a04      	ldr	r2, [pc, #16]	; (8002658 <FDCAN_addCallback+0x70>)
 8002648:	6013      	str	r3, [r2, #0]

  return FDCAN_STATUS_OK;
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	3724      	adds	r7, #36	; 0x24
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	20000630 	.word	0x20000630
 800265c:	200005e0 	.word	0x200005e0

08002660 <FDCAN_sendData>:

STATUS FDCAN_sendData(FDCAN_HandleTypeDef *hfdcan, uint32_t identifier, uint8_t TxData[64])
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b08e      	sub	sp, #56	; 0x38
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
  FDCAN_TxHeaderTypeDef TxHeader;

  /* Set the identifier to send */
  TxHeader.Identifier = identifier;
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	617b      	str	r3, [r7, #20]

  /* Set the data length to send */
  TxHeader.DataLength = FDCAN_DLC_BYTES_64;
 8002670:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 8002674:	623b      	str	r3, [r7, #32]

  /* Set the identifier type to send */
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8002676:	2300      	movs	r3, #0
 8002678:	61bb      	str	r3, [r7, #24]

  /* Set the frame type to send */
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800267a:	2300      	movs	r3, #0
 800267c:	61fb      	str	r3, [r7, #28]

  /* Set the error state indicator to send */
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800267e:	2300      	movs	r3, #0
 8002680:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the bit rate switch to send */
  TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8002682:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002686:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set the FD format to send */
  TxHeader.FDFormat = FDCAN_FD_CAN;
 8002688:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800268c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set the Tx event FIFO control to send */
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800268e:	2300      	movs	r3, #0
 8002690:	633b      	str	r3, [r7, #48]	; 0x30

  /* Set the message marker to send */
  TxHeader.MessageMarker = 0;
 8002692:	2300      	movs	r3, #0
 8002694:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set the message to send */
  if (HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &TxHeader, TxData) != HAL_OK)
 8002696:	f107 0314 	add.w	r3, r7, #20
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	4619      	mov	r1, r3
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f004 fc3c 	bl	8006f1c <HAL_FDCAN_AddMessageToTxFifoQ>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <FDCAN_sendData+0x4e>
  {
    return FDCAN_STATUS_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e000      	b.n	80026b0 <FDCAN_sendData+0x50>
  }

  return FDCAN_STATUS_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3738      	adds	r7, #56	; 0x38
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <HAL_FDCAN_RxFifo0Callback>:
/** Local function definitions                                              **/
/*****************************************************************************/

/* This function overwrites _weak function definition in STM32 HAL FDCAN driver when linking project*/
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b09e      	sub	sp, #120	; 0x78
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  FDCAN_RxHeaderTypeDef RxHeader;
  uint8_t RxData[64];

  /* Fetch the CAN message from the FIFO buffer*/
  if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80026c2:	f107 030c 	add.w	r3, r7, #12
 80026c6:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80026ca:	2140      	movs	r1, #64	; 0x40
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f004 fc69 	bl	8006fa4 <HAL_FDCAN_GetRxMessage>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <HAL_FDCAN_RxFifo0Callback+0x24>
  {
    Error_Handler();
 80026d8:	f000 fd90 	bl	80031fc <Error_Handler>
  }

  /* check if we have a callback for the identifier */
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 80026dc:	2300      	movs	r3, #0
 80026de:	677b      	str	r3, [r7, #116]	; 0x74
 80026e0:	e012      	b.n	8002708 <HAL_FDCAN_RxFifo0Callback+0x50>
      if (FDCAN_listCallbacks[i].identifier == RxHeader.Identifier) {
 80026e2:	4a0e      	ldr	r2, [pc, #56]	; (800271c <HAL_FDCAN_RxFifo0Callback+0x64>)
 80026e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	4413      	add	r3, r2
 80026ea:	685a      	ldr	r2, [r3, #4]
 80026ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d107      	bne.n	8002702 <HAL_FDCAN_RxFifo0Callback+0x4a>
          FDCAN_listCallbacks[i].fp(RxData);
 80026f2:	4a0a      	ldr	r2, [pc, #40]	; (800271c <HAL_FDCAN_RxFifo0Callback+0x64>)
 80026f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026f6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80026fa:	f107 020c 	add.w	r2, r7, #12
 80026fe:	4610      	mov	r0, r2
 8002700:	4798      	blx	r3
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 8002702:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002704:	3301      	adds	r3, #1
 8002706:	677b      	str	r3, [r7, #116]	; 0x74
 8002708:	4b05      	ldr	r3, [pc, #20]	; (8002720 <HAL_FDCAN_RxFifo0Callback+0x68>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800270e:	429a      	cmp	r2, r3
 8002710:	d3e7      	bcc.n	80026e2 <HAL_FDCAN_RxFifo0Callback+0x2a>
      }
  }
}
 8002712:	bf00      	nop
 8002714:	bf00      	nop
 8002716:	3778      	adds	r7, #120	; 0x78
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	200005e0 	.word	0x200005e0
 8002720:	20000630 	.word	0x20000630

08002724 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b08c      	sub	sp, #48	; 0x30
 8002728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800272a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800272e:	2200      	movs	r2, #0
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	605a      	str	r2, [r3, #4]
 8002734:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002736:	1d3b      	adds	r3, r7, #4
 8002738:	2220      	movs	r2, #32
 800273a:	2100      	movs	r1, #0
 800273c:	4618      	mov	r0, r3
 800273e:	f00a f9df 	bl	800cb00 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002742:	4b4d      	ldr	r3, [pc, #308]	; (8002878 <MX_ADC1_Init+0x154>)
 8002744:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002748:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800274a:	4b4b      	ldr	r3, [pc, #300]	; (8002878 <MX_ADC1_Init+0x154>)
 800274c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002750:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002752:	4b49      	ldr	r3, [pc, #292]	; (8002878 <MX_ADC1_Init+0x154>)
 8002754:	2200      	movs	r2, #0
 8002756:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002758:	4b47      	ldr	r3, [pc, #284]	; (8002878 <MX_ADC1_Init+0x154>)
 800275a:	2200      	movs	r2, #0
 800275c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800275e:	4b46      	ldr	r3, [pc, #280]	; (8002878 <MX_ADC1_Init+0x154>)
 8002760:	2200      	movs	r2, #0
 8002762:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002764:	4b44      	ldr	r3, [pc, #272]	; (8002878 <MX_ADC1_Init+0x154>)
 8002766:	2201      	movs	r2, #1
 8002768:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800276a:	4b43      	ldr	r3, [pc, #268]	; (8002878 <MX_ADC1_Init+0x154>)
 800276c:	2208      	movs	r2, #8
 800276e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002770:	4b41      	ldr	r3, [pc, #260]	; (8002878 <MX_ADC1_Init+0x154>)
 8002772:	2200      	movs	r2, #0
 8002774:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002776:	4b40      	ldr	r3, [pc, #256]	; (8002878 <MX_ADC1_Init+0x154>)
 8002778:	2201      	movs	r2, #1
 800277a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 800277c:	4b3e      	ldr	r3, [pc, #248]	; (8002878 <MX_ADC1_Init+0x154>)
 800277e:	2204      	movs	r2, #4
 8002780:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002782:	4b3d      	ldr	r3, [pc, #244]	; (8002878 <MX_ADC1_Init+0x154>)
 8002784:	2200      	movs	r2, #0
 8002786:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800278a:	4b3b      	ldr	r3, [pc, #236]	; (8002878 <MX_ADC1_Init+0x154>)
 800278c:	2200      	movs	r2, #0
 800278e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002790:	4b39      	ldr	r3, [pc, #228]	; (8002878 <MX_ADC1_Init+0x154>)
 8002792:	2200      	movs	r2, #0
 8002794:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002796:	4b38      	ldr	r3, [pc, #224]	; (8002878 <MX_ADC1_Init+0x154>)
 8002798:	2201      	movs	r2, #1
 800279a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800279e:	4b36      	ldr	r3, [pc, #216]	; (8002878 <MX_ADC1_Init+0x154>)
 80027a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027a4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 80027a6:	4b34      	ldr	r3, [pc, #208]	; (8002878 <MX_ADC1_Init+0x154>)
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 80027ae:	4b32      	ldr	r3, [pc, #200]	; (8002878 <MX_ADC1_Init+0x154>)
 80027b0:	220c      	movs	r2, #12
 80027b2:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 80027b4:	4b30      	ldr	r3, [pc, #192]	; (8002878 <MX_ADC1_Init+0x154>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	649a      	str	r2, [r3, #72]	; 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80027ba:	4b2f      	ldr	r3, [pc, #188]	; (8002878 <MX_ADC1_Init+0x154>)
 80027bc:	2200      	movs	r2, #0
 80027be:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80027c0:	4b2d      	ldr	r3, [pc, #180]	; (8002878 <MX_ADC1_Init+0x154>)
 80027c2:	2201      	movs	r2, #1
 80027c4:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80027c6:	482c      	ldr	r0, [pc, #176]	; (8002878 <MX_ADC1_Init+0x154>)
 80027c8:	f001 fdd2 	bl	8004370 <HAL_ADC_Init>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80027d2:	f000 fd13 	bl	80031fc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80027d6:	2300      	movs	r3, #0
 80027d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80027da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027de:	4619      	mov	r1, r3
 80027e0:	4825      	ldr	r0, [pc, #148]	; (8002878 <MX_ADC1_Init+0x154>)
 80027e2:	f003 faef 	bl	8005dc4 <HAL_ADCEx_MultiModeConfigChannel>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 80027ec:	f000 fd06 	bl	80031fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80027f0:	4b22      	ldr	r3, [pc, #136]	; (800287c <MX_ADC1_Init+0x158>)
 80027f2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80027f4:	2306      	movs	r3, #6
 80027f6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 80027f8:	2303      	movs	r3, #3
 80027fa:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80027fc:	237f      	movs	r3, #127	; 0x7f
 80027fe:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002800:	2304      	movs	r3, #4
 8002802:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002804:	2300      	movs	r3, #0
 8002806:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002808:	1d3b      	adds	r3, r7, #4
 800280a:	4619      	mov	r1, r3
 800280c:	481a      	ldr	r0, [pc, #104]	; (8002878 <MX_ADC1_Init+0x154>)
 800280e:	f002 fbf1 	bl	8004ff4 <HAL_ADC_ConfigChannel>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8002818:	f000 fcf0 	bl	80031fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800281c:	4b18      	ldr	r3, [pc, #96]	; (8002880 <MX_ADC1_Init+0x15c>)
 800281e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002820:	230c      	movs	r3, #12
 8002822:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002824:	1d3b      	adds	r3, r7, #4
 8002826:	4619      	mov	r1, r3
 8002828:	4813      	ldr	r0, [pc, #76]	; (8002878 <MX_ADC1_Init+0x154>)
 800282a:	f002 fbe3 	bl	8004ff4 <HAL_ADC_ConfigChannel>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 8002834:	f000 fce2 	bl	80031fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002838:	4b12      	ldr	r3, [pc, #72]	; (8002884 <MX_ADC1_Init+0x160>)
 800283a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800283c:	2312      	movs	r3, #18
 800283e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002840:	1d3b      	adds	r3, r7, #4
 8002842:	4619      	mov	r1, r3
 8002844:	480c      	ldr	r0, [pc, #48]	; (8002878 <MX_ADC1_Init+0x154>)
 8002846:	f002 fbd5 	bl	8004ff4 <HAL_ADC_ConfigChannel>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <MX_ADC1_Init+0x130>
  {
    Error_Handler();
 8002850:	f000 fcd4 	bl	80031fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8002854:	4b0c      	ldr	r3, [pc, #48]	; (8002888 <MX_ADC1_Init+0x164>)
 8002856:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002858:	2318      	movs	r3, #24
 800285a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800285c:	1d3b      	adds	r3, r7, #4
 800285e:	4619      	mov	r1, r3
 8002860:	4805      	ldr	r0, [pc, #20]	; (8002878 <MX_ADC1_Init+0x154>)
 8002862:	f002 fbc7 	bl	8004ff4 <HAL_ADC_ConfigChannel>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <MX_ADC1_Init+0x14c>
  {
    Error_Handler();
 800286c:	f000 fcc6 	bl	80031fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002870:	bf00      	nop
 8002872:	3730      	adds	r7, #48	; 0x30
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	20000634 	.word	0x20000634
 800287c:	04300002 	.word	0x04300002
 8002880:	08600004 	.word	0x08600004
 8002884:	0c900008 	.word	0x0c900008
 8002888:	cb840000 	.word	0xcb840000

0800288c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b088      	sub	sp, #32
 8002890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002892:	463b      	mov	r3, r7
 8002894:	2220      	movs	r2, #32
 8002896:	2100      	movs	r1, #0
 8002898:	4618      	mov	r0, r3
 800289a:	f00a f931 	bl	800cb00 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800289e:	4b47      	ldr	r3, [pc, #284]	; (80029bc <MX_ADC2_Init+0x130>)
 80028a0:	4a47      	ldr	r2, [pc, #284]	; (80029c0 <MX_ADC2_Init+0x134>)
 80028a2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80028a4:	4b45      	ldr	r3, [pc, #276]	; (80029bc <MX_ADC2_Init+0x130>)
 80028a6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80028aa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80028ac:	4b43      	ldr	r3, [pc, #268]	; (80029bc <MX_ADC2_Init+0x130>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80028b2:	4b42      	ldr	r3, [pc, #264]	; (80029bc <MX_ADC2_Init+0x130>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80028b8:	4b40      	ldr	r3, [pc, #256]	; (80029bc <MX_ADC2_Init+0x130>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80028be:	4b3f      	ldr	r3, [pc, #252]	; (80029bc <MX_ADC2_Init+0x130>)
 80028c0:	2201      	movs	r2, #1
 80028c2:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80028c4:	4b3d      	ldr	r3, [pc, #244]	; (80029bc <MX_ADC2_Init+0x130>)
 80028c6:	2204      	movs	r2, #4
 80028c8:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80028ca:	4b3c      	ldr	r3, [pc, #240]	; (80029bc <MX_ADC2_Init+0x130>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80028d0:	4b3a      	ldr	r3, [pc, #232]	; (80029bc <MX_ADC2_Init+0x130>)
 80028d2:	2201      	movs	r2, #1
 80028d4:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 4;
 80028d6:	4b39      	ldr	r3, [pc, #228]	; (80029bc <MX_ADC2_Init+0x130>)
 80028d8:	2204      	movs	r2, #4
 80028da:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80028dc:	4b37      	ldr	r3, [pc, #220]	; (80029bc <MX_ADC2_Init+0x130>)
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80028e4:	4b35      	ldr	r3, [pc, #212]	; (80029bc <MX_ADC2_Init+0x130>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80028ea:	4b34      	ldr	r3, [pc, #208]	; (80029bc <MX_ADC2_Init+0x130>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80028f0:	4b32      	ldr	r3, [pc, #200]	; (80029bc <MX_ADC2_Init+0x130>)
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80028f8:	4b30      	ldr	r3, [pc, #192]	; (80029bc <MX_ADC2_Init+0x130>)
 80028fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80028fe:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = ENABLE;
 8002900:	4b2e      	ldr	r3, [pc, #184]	; (80029bc <MX_ADC2_Init+0x130>)
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc2.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8002908:	4b2c      	ldr	r3, [pc, #176]	; (80029bc <MX_ADC2_Init+0x130>)
 800290a:	220c      	movs	r2, #12
 800290c:	645a      	str	r2, [r3, #68]	; 0x44
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 800290e:	4b2b      	ldr	r3, [pc, #172]	; (80029bc <MX_ADC2_Init+0x130>)
 8002910:	2200      	movs	r2, #0
 8002912:	649a      	str	r2, [r3, #72]	; 0x48
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8002914:	4b29      	ldr	r3, [pc, #164]	; (80029bc <MX_ADC2_Init+0x130>)
 8002916:	2200      	movs	r2, #0
 8002918:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800291a:	4b28      	ldr	r3, [pc, #160]	; (80029bc <MX_ADC2_Init+0x130>)
 800291c:	2201      	movs	r2, #1
 800291e:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002920:	4826      	ldr	r0, [pc, #152]	; (80029bc <MX_ADC2_Init+0x130>)
 8002922:	f001 fd25 	bl	8004370 <HAL_ADC_Init>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <MX_ADC2_Init+0xa4>
  {
    Error_Handler();
 800292c:	f000 fc66 	bl	80031fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002930:	4b24      	ldr	r3, [pc, #144]	; (80029c4 <MX_ADC2_Init+0x138>)
 8002932:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002934:	2306      	movs	r3, #6
 8002936:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8002938:	2307      	movs	r3, #7
 800293a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800293c:	237f      	movs	r3, #127	; 0x7f
 800293e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002940:	2304      	movs	r3, #4
 8002942:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002944:	2300      	movs	r3, #0
 8002946:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002948:	463b      	mov	r3, r7
 800294a:	4619      	mov	r1, r3
 800294c:	481b      	ldr	r0, [pc, #108]	; (80029bc <MX_ADC2_Init+0x130>)
 800294e:	f002 fb51 	bl	8004ff4 <HAL_ADC_ConfigChannel>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <MX_ADC2_Init+0xd0>
  {
    Error_Handler();
 8002958:	f000 fc50 	bl	80031fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800295c:	4b1a      	ldr	r3, [pc, #104]	; (80029c8 <MX_ADC2_Init+0x13c>)
 800295e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002960:	230c      	movs	r3, #12
 8002962:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002964:	2300      	movs	r3, #0
 8002966:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002968:	463b      	mov	r3, r7
 800296a:	4619      	mov	r1, r3
 800296c:	4813      	ldr	r0, [pc, #76]	; (80029bc <MX_ADC2_Init+0x130>)
 800296e:	f002 fb41 	bl	8004ff4 <HAL_ADC_ConfigChannel>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <MX_ADC2_Init+0xf0>
  {
    Error_Handler();
 8002978:	f000 fc40 	bl	80031fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800297c:	4b13      	ldr	r3, [pc, #76]	; (80029cc <MX_ADC2_Init+0x140>)
 800297e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002980:	2312      	movs	r3, #18
 8002982:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002984:	463b      	mov	r3, r7
 8002986:	4619      	mov	r1, r3
 8002988:	480c      	ldr	r0, [pc, #48]	; (80029bc <MX_ADC2_Init+0x130>)
 800298a:	f002 fb33 	bl	8004ff4 <HAL_ADC_ConfigChannel>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <MX_ADC2_Init+0x10c>
  {
    Error_Handler();
 8002994:	f000 fc32 	bl	80031fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002998:	4b0d      	ldr	r3, [pc, #52]	; (80029d0 <MX_ADC2_Init+0x144>)
 800299a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800299c:	2318      	movs	r3, #24
 800299e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80029a0:	463b      	mov	r3, r7
 80029a2:	4619      	mov	r1, r3
 80029a4:	4805      	ldr	r0, [pc, #20]	; (80029bc <MX_ADC2_Init+0x130>)
 80029a6:	f002 fb25 	bl	8004ff4 <HAL_ADC_ConfigChannel>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <MX_ADC2_Init+0x128>
  {
    Error_Handler();
 80029b0:	f000 fc24 	bl	80031fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80029b4:	bf00      	nop
 80029b6:	3720      	adds	r7, #32
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	200006a0 	.word	0x200006a0
 80029c0:	50000100 	.word	0x50000100
 80029c4:	32601000 	.word	0x32601000
 80029c8:	3ac04000 	.word	0x3ac04000
 80029cc:	36902000 	.word	0x36902000
 80029d0:	0c900008 	.word	0x0c900008

080029d4 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b09e      	sub	sp, #120	; 0x78
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029dc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	605a      	str	r2, [r3, #4]
 80029e6:	609a      	str	r2, [r3, #8]
 80029e8:	60da      	str	r2, [r3, #12]
 80029ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029ec:	f107 0320 	add.w	r3, r7, #32
 80029f0:	2244      	movs	r2, #68	; 0x44
 80029f2:	2100      	movs	r1, #0
 80029f4:	4618      	mov	r0, r3
 80029f6:	f00a f883 	bl	800cb00 <memset>
  if(adcHandle->Instance==ADC1)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a02:	d171      	bne.n	8002ae8 <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002a04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a08:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002a0a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002a0e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a10:	f107 0320 	add.w	r3, r7, #32
 8002a14:	4618      	mov	r0, r3
 8002a16:	f005 ff83 	bl	8008920 <HAL_RCCEx_PeriphCLKConfig>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002a20:	f000 fbec 	bl	80031fc <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002a24:	4b7a      	ldr	r3, [pc, #488]	; (8002c10 <HAL_ADC_MspInit+0x23c>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	4a79      	ldr	r2, [pc, #484]	; (8002c10 <HAL_ADC_MspInit+0x23c>)
 8002a2c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002a2e:	4b78      	ldr	r3, [pc, #480]	; (8002c10 <HAL_ADC_MspInit+0x23c>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d10b      	bne.n	8002a4e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002a36:	4b77      	ldr	r3, [pc, #476]	; (8002c14 <HAL_ADC_MspInit+0x240>)
 8002a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a3a:	4a76      	ldr	r2, [pc, #472]	; (8002c14 <HAL_ADC_MspInit+0x240>)
 8002a3c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a42:	4b74      	ldr	r3, [pc, #464]	; (8002c14 <HAL_ADC_MspInit+0x240>)
 8002a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a4a:	61fb      	str	r3, [r7, #28]
 8002a4c:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a4e:	4b71      	ldr	r3, [pc, #452]	; (8002c14 <HAL_ADC_MspInit+0x240>)
 8002a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a52:	4a70      	ldr	r2, [pc, #448]	; (8002c14 <HAL_ADC_MspInit+0x240>)
 8002a54:	f043 0301 	orr.w	r3, r3, #1
 8002a58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a5a:	4b6e      	ldr	r3, [pc, #440]	; (8002c14 <HAL_ADC_MspInit+0x240>)
 8002a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	61bb      	str	r3, [r7, #24]
 8002a64:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = CURRENT_ADC_3_Pin|CURRENT_ADC_2_Pin|CURRENT_ADC_1_Pin;
 8002a66:	2307      	movs	r3, #7
 8002a68:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a72:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002a76:	4619      	mov	r1, r3
 8002a78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a7c:	f004 ff72 	bl	8007964 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002a80:	4b65      	ldr	r3, [pc, #404]	; (8002c18 <HAL_ADC_MspInit+0x244>)
 8002a82:	4a66      	ldr	r2, [pc, #408]	; (8002c1c <HAL_ADC_MspInit+0x248>)
 8002a84:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002a86:	4b64      	ldr	r3, [pc, #400]	; (8002c18 <HAL_ADC_MspInit+0x244>)
 8002a88:	2205      	movs	r2, #5
 8002a8a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a8c:	4b62      	ldr	r3, [pc, #392]	; (8002c18 <HAL_ADC_MspInit+0x244>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a92:	4b61      	ldr	r3, [pc, #388]	; (8002c18 <HAL_ADC_MspInit+0x244>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002a98:	4b5f      	ldr	r3, [pc, #380]	; (8002c18 <HAL_ADC_MspInit+0x244>)
 8002a9a:	2280      	movs	r2, #128	; 0x80
 8002a9c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a9e:	4b5e      	ldr	r3, [pc, #376]	; (8002c18 <HAL_ADC_MspInit+0x244>)
 8002aa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aa4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002aa6:	4b5c      	ldr	r3, [pc, #368]	; (8002c18 <HAL_ADC_MspInit+0x244>)
 8002aa8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002aac:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002aae:	4b5a      	ldr	r3, [pc, #360]	; (8002c18 <HAL_ADC_MspInit+0x244>)
 8002ab0:	2220      	movs	r2, #32
 8002ab2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002ab4:	4b58      	ldr	r3, [pc, #352]	; (8002c18 <HAL_ADC_MspInit+0x244>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002aba:	4857      	ldr	r0, [pc, #348]	; (8002c18 <HAL_ADC_MspInit+0x244>)
 8002abc:	f003 fd7a 	bl	80065b4 <HAL_DMA_Init>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 8002ac6:	f000 fb99 	bl	80031fc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a52      	ldr	r2, [pc, #328]	; (8002c18 <HAL_ADC_MspInit+0x244>)
 8002ace:	655a      	str	r2, [r3, #84]	; 0x54
 8002ad0:	4a51      	ldr	r2, [pc, #324]	; (8002c18 <HAL_ADC_MspInit+0x244>)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	2100      	movs	r1, #0
 8002ada:	2012      	movs	r0, #18
 8002adc:	f003 faf1 	bl	80060c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002ae0:	2012      	movs	r0, #18
 8002ae2:	f003 fb08 	bl	80060f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8002ae6:	e08f      	b.n	8002c08 <HAL_ADC_MspInit+0x234>
  else if(adcHandle->Instance==ADC2)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a4c      	ldr	r2, [pc, #304]	; (8002c20 <HAL_ADC_MspInit+0x24c>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	f040 808a 	bne.w	8002c08 <HAL_ADC_MspInit+0x234>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002af4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002af8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002afa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002afe:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b00:	f107 0320 	add.w	r3, r7, #32
 8002b04:	4618      	mov	r0, r3
 8002b06:	f005 ff0b 	bl	8008920 <HAL_RCCEx_PeriphCLKConfig>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <HAL_ADC_MspInit+0x140>
      Error_Handler();
 8002b10:	f000 fb74 	bl	80031fc <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002b14:	4b3e      	ldr	r3, [pc, #248]	; (8002c10 <HAL_ADC_MspInit+0x23c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	4a3d      	ldr	r2, [pc, #244]	; (8002c10 <HAL_ADC_MspInit+0x23c>)
 8002b1c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002b1e:	4b3c      	ldr	r3, [pc, #240]	; (8002c10 <HAL_ADC_MspInit+0x23c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d10b      	bne.n	8002b3e <HAL_ADC_MspInit+0x16a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002b26:	4b3b      	ldr	r3, [pc, #236]	; (8002c14 <HAL_ADC_MspInit+0x240>)
 8002b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b2a:	4a3a      	ldr	r2, [pc, #232]	; (8002c14 <HAL_ADC_MspInit+0x240>)
 8002b2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b32:	4b38      	ldr	r3, [pc, #224]	; (8002c14 <HAL_ADC_MspInit+0x240>)
 8002b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b3a:	617b      	str	r3, [r7, #20]
 8002b3c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b3e:	4b35      	ldr	r3, [pc, #212]	; (8002c14 <HAL_ADC_MspInit+0x240>)
 8002b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b42:	4a34      	ldr	r2, [pc, #208]	; (8002c14 <HAL_ADC_MspInit+0x240>)
 8002b44:	f043 0301 	orr.w	r3, r3, #1
 8002b48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b4a:	4b32      	ldr	r3, [pc, #200]	; (8002c14 <HAL_ADC_MspInit+0x240>)
 8002b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	613b      	str	r3, [r7, #16]
 8002b54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b56:	4b2f      	ldr	r3, [pc, #188]	; (8002c14 <HAL_ADC_MspInit+0x240>)
 8002b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b5a:	4a2e      	ldr	r2, [pc, #184]	; (8002c14 <HAL_ADC_MspInit+0x240>)
 8002b5c:	f043 0302 	orr.w	r3, r3, #2
 8002b60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b62:	4b2c      	ldr	r3, [pc, #176]	; (8002c14 <HAL_ADC_MspInit+0x240>)
 8002b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	60fb      	str	r3, [r7, #12]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = V_BAT_ADC_Pin|V_AUX_ADC_Pin;
 8002b6e:	2360      	movs	r3, #96	; 0x60
 8002b70:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b72:	2303      	movs	r3, #3
 8002b74:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b76:	2300      	movs	r3, #0
 8002b78:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b7a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002b7e:	4619      	mov	r1, r3
 8002b80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b84:	f004 feee 	bl	8007964 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC2_NTC1_Pin|ADC2_NTC2_Pin;
 8002b88:	f640 0304 	movw	r3, #2052	; 0x804
 8002b8c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b92:	2300      	movs	r3, #0
 8002b94:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b96:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	4821      	ldr	r0, [pc, #132]	; (8002c24 <HAL_ADC_MspInit+0x250>)
 8002b9e:	f004 fee1 	bl	8007964 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8002ba2:	4b21      	ldr	r3, [pc, #132]	; (8002c28 <HAL_ADC_MspInit+0x254>)
 8002ba4:	4a21      	ldr	r2, [pc, #132]	; (8002c2c <HAL_ADC_MspInit+0x258>)
 8002ba6:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8002ba8:	4b1f      	ldr	r3, [pc, #124]	; (8002c28 <HAL_ADC_MspInit+0x254>)
 8002baa:	2224      	movs	r2, #36	; 0x24
 8002bac:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002bae:	4b1e      	ldr	r3, [pc, #120]	; (8002c28 <HAL_ADC_MspInit+0x254>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bb4:	4b1c      	ldr	r3, [pc, #112]	; (8002c28 <HAL_ADC_MspInit+0x254>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002bba:	4b1b      	ldr	r3, [pc, #108]	; (8002c28 <HAL_ADC_MspInit+0x254>)
 8002bbc:	2280      	movs	r2, #128	; 0x80
 8002bbe:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002bc0:	4b19      	ldr	r3, [pc, #100]	; (8002c28 <HAL_ADC_MspInit+0x254>)
 8002bc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bc6:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002bc8:	4b17      	ldr	r3, [pc, #92]	; (8002c28 <HAL_ADC_MspInit+0x254>)
 8002bca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bce:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002bd0:	4b15      	ldr	r3, [pc, #84]	; (8002c28 <HAL_ADC_MspInit+0x254>)
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002bd6:	4b14      	ldr	r3, [pc, #80]	; (8002c28 <HAL_ADC_MspInit+0x254>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002bdc:	4812      	ldr	r0, [pc, #72]	; (8002c28 <HAL_ADC_MspInit+0x254>)
 8002bde:	f003 fce9 	bl	80065b4 <HAL_DMA_Init>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <HAL_ADC_MspInit+0x218>
      Error_Handler();
 8002be8:	f000 fb08 	bl	80031fc <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a0e      	ldr	r2, [pc, #56]	; (8002c28 <HAL_ADC_MspInit+0x254>)
 8002bf0:	655a      	str	r2, [r3, #84]	; 0x54
 8002bf2:	4a0d      	ldr	r2, [pc, #52]	; (8002c28 <HAL_ADC_MspInit+0x254>)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	2012      	movs	r0, #18
 8002bfe:	f003 fa60 	bl	80060c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002c02:	2012      	movs	r0, #18
 8002c04:	f003 fa77 	bl	80060f6 <HAL_NVIC_EnableIRQ>
}
 8002c08:	bf00      	nop
 8002c0a:	3778      	adds	r7, #120	; 0x78
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	200007cc 	.word	0x200007cc
 8002c14:	40021000 	.word	0x40021000
 8002c18:	2000070c 	.word	0x2000070c
 8002c1c:	40020008 	.word	0x40020008
 8002c20:	50000100 	.word	0x50000100
 8002c24:	48000400 	.word	0x48000400
 8002c28:	2000076c 	.word	0x2000076c
 8002c2c:	4002001c 	.word	0x4002001c

08002c30 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b08c      	sub	sp, #48	; 0x30
 8002c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002c36:	463b      	mov	r3, r7
 8002c38:	2230      	movs	r2, #48	; 0x30
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f009 ff5f 	bl	800cb00 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8002c42:	4b16      	ldr	r3, [pc, #88]	; (8002c9c <MX_DAC1_Init+0x6c>)
 8002c44:	4a16      	ldr	r2, [pc, #88]	; (8002ca0 <MX_DAC1_Init+0x70>)
 8002c46:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002c48:	4814      	ldr	r0, [pc, #80]	; (8002c9c <MX_DAC1_Init+0x6c>)
 8002c4a:	f003 fa6e 	bl	800612a <HAL_DAC_Init>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d001      	beq.n	8002c58 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8002c54:	f000 fad2 	bl	80031fc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8002c60:	2300      	movs	r3, #0
 8002c62:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002c64:	2300      	movs	r3, #0
 8002c66:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002c70:	2300      	movs	r3, #0
 8002c72:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8002c74:	2301      	movs	r3, #1
 8002c76:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002c7c:	463b      	mov	r3, r7
 8002c7e:	2200      	movs	r2, #0
 8002c80:	4619      	mov	r1, r3
 8002c82:	4806      	ldr	r0, [pc, #24]	; (8002c9c <MX_DAC1_Init+0x6c>)
 8002c84:	f003 faee 	bl	8006264 <HAL_DAC_ConfigChannel>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8002c8e:	f000 fab5 	bl	80031fc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8002c92:	bf00      	nop
 8002c94:	3730      	adds	r7, #48	; 0x30
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	200007d0 	.word	0x200007d0
 8002ca0:	50000800 	.word	0x50000800

08002ca4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b08a      	sub	sp, #40	; 0x28
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cac:	f107 0314 	add.w	r3, r7, #20
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	605a      	str	r2, [r3, #4]
 8002cb6:	609a      	str	r2, [r3, #8]
 8002cb8:	60da      	str	r2, [r3, #12]
 8002cba:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a15      	ldr	r2, [pc, #84]	; (8002d18 <HAL_DAC_MspInit+0x74>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d124      	bne.n	8002d10 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002cc6:	4b15      	ldr	r3, [pc, #84]	; (8002d1c <HAL_DAC_MspInit+0x78>)
 8002cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cca:	4a14      	ldr	r2, [pc, #80]	; (8002d1c <HAL_DAC_MspInit+0x78>)
 8002ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cd2:	4b12      	ldr	r3, [pc, #72]	; (8002d1c <HAL_DAC_MspInit+0x78>)
 8002cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cda:	613b      	str	r3, [r7, #16]
 8002cdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cde:	4b0f      	ldr	r3, [pc, #60]	; (8002d1c <HAL_DAC_MspInit+0x78>)
 8002ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce2:	4a0e      	ldr	r2, [pc, #56]	; (8002d1c <HAL_DAC_MspInit+0x78>)
 8002ce4:	f043 0301 	orr.w	r3, r3, #1
 8002ce8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cea:	4b0c      	ldr	r3, [pc, #48]	; (8002d1c <HAL_DAC_MspInit+0x78>)
 8002cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002cf6:	2310      	movs	r3, #16
 8002cf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d02:	f107 0314 	add.w	r3, r7, #20
 8002d06:	4619      	mov	r1, r3
 8002d08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d0c:	f004 fe2a 	bl	8007964 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8002d10:	bf00      	nop
 8002d12:	3728      	adds	r7, #40	; 0x28
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	50000800 	.word	0x50000800
 8002d1c:	40021000 	.word	0x40021000

08002d20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002d26:	4b30      	ldr	r3, [pc, #192]	; (8002de8 <MX_DMA_Init+0xc8>)
 8002d28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d2a:	4a2f      	ldr	r2, [pc, #188]	; (8002de8 <MX_DMA_Init+0xc8>)
 8002d2c:	f043 0304 	orr.w	r3, r3, #4
 8002d30:	6493      	str	r3, [r2, #72]	; 0x48
 8002d32:	4b2d      	ldr	r3, [pc, #180]	; (8002de8 <MX_DMA_Init+0xc8>)
 8002d34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d36:	f003 0304 	and.w	r3, r3, #4
 8002d3a:	60fb      	str	r3, [r7, #12]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d3e:	4b2a      	ldr	r3, [pc, #168]	; (8002de8 <MX_DMA_Init+0xc8>)
 8002d40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d42:	4a29      	ldr	r2, [pc, #164]	; (8002de8 <MX_DMA_Init+0xc8>)
 8002d44:	f043 0301 	orr.w	r3, r3, #1
 8002d48:	6493      	str	r3, [r2, #72]	; 0x48
 8002d4a:	4b27      	ldr	r3, [pc, #156]	; (8002de8 <MX_DMA_Init+0xc8>)
 8002d4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	60bb      	str	r3, [r7, #8]
 8002d54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002d56:	4b24      	ldr	r3, [pc, #144]	; (8002de8 <MX_DMA_Init+0xc8>)
 8002d58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d5a:	4a23      	ldr	r2, [pc, #140]	; (8002de8 <MX_DMA_Init+0xc8>)
 8002d5c:	f043 0302 	orr.w	r3, r3, #2
 8002d60:	6493      	str	r3, [r2, #72]	; 0x48
 8002d62:	4b21      	ldr	r3, [pc, #132]	; (8002de8 <MX_DMA_Init+0xc8>)
 8002d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	607b      	str	r3, [r7, #4]
 8002d6c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002d6e:	2200      	movs	r2, #0
 8002d70:	2100      	movs	r1, #0
 8002d72:	200b      	movs	r0, #11
 8002d74:	f003 f9a5 	bl	80060c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002d78:	200b      	movs	r0, #11
 8002d7a:	f003 f9bc 	bl	80060f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002d7e:	2200      	movs	r2, #0
 8002d80:	2100      	movs	r1, #0
 8002d82:	200c      	movs	r0, #12
 8002d84:	f003 f99d 	bl	80060c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002d88:	200c      	movs	r0, #12
 8002d8a:	f003 f9b4 	bl	80060f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002d8e:	2200      	movs	r2, #0
 8002d90:	2100      	movs	r1, #0
 8002d92:	200d      	movs	r0, #13
 8002d94:	f003 f995 	bl	80060c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002d98:	200d      	movs	r0, #13
 8002d9a:	f003 f9ac 	bl	80060f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002d9e:	2200      	movs	r2, #0
 8002da0:	2100      	movs	r1, #0
 8002da2:	200e      	movs	r0, #14
 8002da4:	f003 f98d 	bl	80060c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002da8:	200e      	movs	r0, #14
 8002daa:	f003 f9a4 	bl	80060f6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8002dae:	2200      	movs	r2, #0
 8002db0:	2100      	movs	r1, #0
 8002db2:	2038      	movs	r0, #56	; 0x38
 8002db4:	f003 f985 	bl	80060c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8002db8:	2038      	movs	r0, #56	; 0x38
 8002dba:	f003 f99c 	bl	80060f6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	2039      	movs	r0, #57	; 0x39
 8002dc4:	f003 f97d 	bl	80060c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8002dc8:	2039      	movs	r0, #57	; 0x39
 8002dca:	f003 f994 	bl	80060f6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8002dce:	2200      	movs	r2, #0
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	203a      	movs	r0, #58	; 0x3a
 8002dd4:	f003 f975 	bl	80060c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8002dd8:	203a      	movs	r0, #58	; 0x3a
 8002dda:	f003 f98c 	bl	80060f6 <HAL_NVIC_EnableIRQ>

}
 8002dde:	bf00      	nop
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	40021000 	.word	0x40021000

08002dec <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8002df0:	4b20      	ldr	r3, [pc, #128]	; (8002e74 <MX_FDCAN1_Init+0x88>)
 8002df2:	4a21      	ldr	r2, [pc, #132]	; (8002e78 <MX_FDCAN1_Init+0x8c>)
 8002df4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8002df6:	4b1f      	ldr	r3, [pc, #124]	; (8002e74 <MX_FDCAN1_Init+0x88>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8002dfc:	4b1d      	ldr	r3, [pc, #116]	; (8002e74 <MX_FDCAN1_Init+0x88>)
 8002dfe:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002e02:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8002e04:	4b1b      	ldr	r3, [pc, #108]	; (8002e74 <MX_FDCAN1_Init+0x88>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8002e0a:	4b1a      	ldr	r3, [pc, #104]	; (8002e74 <MX_FDCAN1_Init+0x88>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8002e10:	4b18      	ldr	r3, [pc, #96]	; (8002e74 <MX_FDCAN1_Init+0x88>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8002e16:	4b17      	ldr	r3, [pc, #92]	; (8002e74 <MX_FDCAN1_Init+0x88>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8002e1c:	4b15      	ldr	r3, [pc, #84]	; (8002e74 <MX_FDCAN1_Init+0x88>)
 8002e1e:	2201      	movs	r2, #1
 8002e20:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 7;
 8002e22:	4b14      	ldr	r3, [pc, #80]	; (8002e74 <MX_FDCAN1_Init+0x88>)
 8002e24:	2207      	movs	r2, #7
 8002e26:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 42;
 8002e28:	4b12      	ldr	r3, [pc, #72]	; (8002e74 <MX_FDCAN1_Init+0x88>)
 8002e2a:	222a      	movs	r2, #42	; 0x2a
 8002e2c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 7;
 8002e2e:	4b11      	ldr	r3, [pc, #68]	; (8002e74 <MX_FDCAN1_Init+0x88>)
 8002e30:	2207      	movs	r2, #7
 8002e32:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8002e34:	4b0f      	ldr	r3, [pc, #60]	; (8002e74 <MX_FDCAN1_Init+0x88>)
 8002e36:	2201      	movs	r2, #1
 8002e38:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 9;
 8002e3a:	4b0e      	ldr	r3, [pc, #56]	; (8002e74 <MX_FDCAN1_Init+0x88>)
 8002e3c:	2209      	movs	r2, #9
 8002e3e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 8002e40:	4b0c      	ldr	r3, [pc, #48]	; (8002e74 <MX_FDCAN1_Init+0x88>)
 8002e42:	220a      	movs	r2, #10
 8002e44:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 9;
 8002e46:	4b0b      	ldr	r3, [pc, #44]	; (8002e74 <MX_FDCAN1_Init+0x88>)
 8002e48:	2209      	movs	r2, #9
 8002e4a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8002e4c:	4b09      	ldr	r3, [pc, #36]	; (8002e74 <MX_FDCAN1_Init+0x88>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8002e52:	4b08      	ldr	r3, [pc, #32]	; (8002e74 <MX_FDCAN1_Init+0x88>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002e58:	4b06      	ldr	r3, [pc, #24]	; (8002e74 <MX_FDCAN1_Init+0x88>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8002e5e:	4805      	ldr	r0, [pc, #20]	; (8002e74 <MX_FDCAN1_Init+0x88>)
 8002e60:	f003 feda 	bl	8006c18 <HAL_FDCAN_Init>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8002e6a:	f000 f9c7 	bl	80031fc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8002e6e:	bf00      	nop
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	200007e4 	.word	0x200007e4
 8002e78:	40006400 	.word	0x40006400

08002e7c <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b09a      	sub	sp, #104	; 0x68
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e84:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]
 8002e8c:	605a      	str	r2, [r3, #4]
 8002e8e:	609a      	str	r2, [r3, #8]
 8002e90:	60da      	str	r2, [r3, #12]
 8002e92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e94:	f107 0310 	add.w	r3, r7, #16
 8002e98:	2244      	movs	r2, #68	; 0x44
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f009 fe2f 	bl	800cb00 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a24      	ldr	r2, [pc, #144]	; (8002f38 <HAL_FDCAN_MspInit+0xbc>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d141      	bne.n	8002f30 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002eac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002eb0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002eb2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002eb6:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002eb8:	f107 0310 	add.w	r3, r7, #16
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f005 fd2f 	bl	8008920 <HAL_RCCEx_PeriphCLKConfig>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d001      	beq.n	8002ecc <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8002ec8:	f000 f998 	bl	80031fc <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002ecc:	4b1b      	ldr	r3, [pc, #108]	; (8002f3c <HAL_FDCAN_MspInit+0xc0>)
 8002ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed0:	4a1a      	ldr	r2, [pc, #104]	; (8002f3c <HAL_FDCAN_MspInit+0xc0>)
 8002ed2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ed6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ed8:	4b18      	ldr	r3, [pc, #96]	; (8002f3c <HAL_FDCAN_MspInit+0xc0>)
 8002eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee0:	60fb      	str	r3, [r7, #12]
 8002ee2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ee4:	4b15      	ldr	r3, [pc, #84]	; (8002f3c <HAL_FDCAN_MspInit+0xc0>)
 8002ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ee8:	4a14      	ldr	r2, [pc, #80]	; (8002f3c <HAL_FDCAN_MspInit+0xc0>)
 8002eea:	f043 0301 	orr.w	r3, r3, #1
 8002eee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ef0:	4b12      	ldr	r3, [pc, #72]	; (8002f3c <HAL_FDCAN_MspInit+0xc0>)
 8002ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	60bb      	str	r3, [r7, #8]
 8002efa:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002efc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002f00:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f02:	2302      	movs	r3, #2
 8002f04:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f06:	2300      	movs	r3, #0
 8002f08:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002f0e:	2309      	movs	r3, #9
 8002f10:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f12:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002f16:	4619      	mov	r1, r3
 8002f18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f1c:	f004 fd22 	bl	8007964 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8002f20:	2200      	movs	r2, #0
 8002f22:	2100      	movs	r1, #0
 8002f24:	2015      	movs	r0, #21
 8002f26:	f003 f8cc 	bl	80060c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002f2a:	2015      	movs	r0, #21
 8002f2c:	f003 f8e3 	bl	80060f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8002f30:	bf00      	nop
 8002f32:	3768      	adds	r7, #104	; 0x68
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40006400 	.word	0x40006400
 8002f3c:	40021000 	.word	0x40021000

08002f40 <MX_FMAC_Init>:

FMAC_HandleTypeDef hfmac;

/* FMAC init function */
void MX_FMAC_Init(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 8002f44:	4b06      	ldr	r3, [pc, #24]	; (8002f60 <MX_FMAC_Init+0x20>)
 8002f46:	4a07      	ldr	r2, [pc, #28]	; (8002f64 <MX_FMAC_Init+0x24>)
 8002f48:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 8002f4a:	4805      	ldr	r0, [pc, #20]	; (8002f60 <MX_FMAC_Init+0x20>)
 8002f4c:	f004 fc5e 	bl	800780c <HAL_FMAC_Init>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 8002f56:	f000 f951 	bl	80031fc <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 8002f5a:	bf00      	nop
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	20000848 	.word	0x20000848
 8002f64:	40021400 	.word	0x40021400

08002f68 <HAL_FMAC_MspInit>:

void HAL_FMAC_MspInit(FMAC_HandleTypeDef* fmacHandle)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]

  if(fmacHandle->Instance==FMAC)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a0a      	ldr	r2, [pc, #40]	; (8002fa0 <HAL_FMAC_MspInit+0x38>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d10b      	bne.n	8002f92 <HAL_FMAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* FMAC clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 8002f7a:	4b0a      	ldr	r3, [pc, #40]	; (8002fa4 <HAL_FMAC_MspInit+0x3c>)
 8002f7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f7e:	4a09      	ldr	r2, [pc, #36]	; (8002fa4 <HAL_FMAC_MspInit+0x3c>)
 8002f80:	f043 0310 	orr.w	r3, r3, #16
 8002f84:	6493      	str	r3, [r2, #72]	; 0x48
 8002f86:	4b07      	ldr	r3, [pc, #28]	; (8002fa4 <HAL_FMAC_MspInit+0x3c>)
 8002f88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f8a:	f003 0310 	and.w	r3, r3, #16
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }
}
 8002f92:	bf00      	nop
 8002f94:	3714      	adds	r7, #20
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	40021400 	.word	0x40021400
 8002fa4:	40021000 	.word	0x40021000

08002fa8 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b08a      	sub	sp, #40	; 0x28
 8002fac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fae:	f107 0314 	add.w	r3, r7, #20
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	601a      	str	r2, [r3, #0]
 8002fb6:	605a      	str	r2, [r3, #4]
 8002fb8:	609a      	str	r2, [r3, #8]
 8002fba:	60da      	str	r2, [r3, #12]
 8002fbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002fbe:	4b51      	ldr	r3, [pc, #324]	; (8003104 <MX_GPIO_Init+0x15c>)
 8002fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fc2:	4a50      	ldr	r2, [pc, #320]	; (8003104 <MX_GPIO_Init+0x15c>)
 8002fc4:	f043 0320 	orr.w	r3, r3, #32
 8002fc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fca:	4b4e      	ldr	r3, [pc, #312]	; (8003104 <MX_GPIO_Init+0x15c>)
 8002fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fce:	f003 0320 	and.w	r3, r3, #32
 8002fd2:	613b      	str	r3, [r7, #16]
 8002fd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fd6:	4b4b      	ldr	r3, [pc, #300]	; (8003104 <MX_GPIO_Init+0x15c>)
 8002fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fda:	4a4a      	ldr	r2, [pc, #296]	; (8003104 <MX_GPIO_Init+0x15c>)
 8002fdc:	f043 0304 	orr.w	r3, r3, #4
 8002fe0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fe2:	4b48      	ldr	r3, [pc, #288]	; (8003104 <MX_GPIO_Init+0x15c>)
 8002fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fe6:	f003 0304 	and.w	r3, r3, #4
 8002fea:	60fb      	str	r3, [r7, #12]
 8002fec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fee:	4b45      	ldr	r3, [pc, #276]	; (8003104 <MX_GPIO_Init+0x15c>)
 8002ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ff2:	4a44      	ldr	r2, [pc, #272]	; (8003104 <MX_GPIO_Init+0x15c>)
 8002ff4:	f043 0301 	orr.w	r3, r3, #1
 8002ff8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ffa:	4b42      	ldr	r3, [pc, #264]	; (8003104 <MX_GPIO_Init+0x15c>)
 8002ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	60bb      	str	r3, [r7, #8]
 8003004:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003006:	4b3f      	ldr	r3, [pc, #252]	; (8003104 <MX_GPIO_Init+0x15c>)
 8003008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800300a:	4a3e      	ldr	r2, [pc, #248]	; (8003104 <MX_GPIO_Init+0x15c>)
 800300c:	f043 0302 	orr.w	r3, r3, #2
 8003010:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003012:	4b3c      	ldr	r3, [pc, #240]	; (8003104 <MX_GPIO_Init+0x15c>)
 8003014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	607b      	str	r3, [r7, #4]
 800301c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800301e:	4b39      	ldr	r3, [pc, #228]	; (8003104 <MX_GPIO_Init+0x15c>)
 8003020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003022:	4a38      	ldr	r2, [pc, #224]	; (8003104 <MX_GPIO_Init+0x15c>)
 8003024:	f043 0308 	orr.w	r3, r3, #8
 8003028:	64d3      	str	r3, [r2, #76]	; 0x4c
 800302a:	4b36      	ldr	r3, [pc, #216]	; (8003104 <MX_GPIO_Init+0x15c>)
 800302c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800302e:	f003 0308 	and.w	r3, r3, #8
 8003032:	603b      	str	r3, [r7, #0]
 8003034:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RUNNING_LED_Pin|WARNING_LED_Pin, GPIO_PIN_RESET);
 8003036:	2200      	movs	r2, #0
 8003038:	21c0      	movs	r1, #192	; 0xc0
 800303a:	4833      	ldr	r0, [pc, #204]	; (8003108 <MX_GPIO_Init+0x160>)
 800303c:	f004 fe14 	bl	8007c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, GPIO_PIN_RESET);
 8003040:	2200      	movs	r2, #0
 8003042:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003046:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800304a:	f004 fe0d 	bl	8007c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, GPIO_PIN_RESET);
 800304e:	2200      	movs	r2, #0
 8003050:	2104      	movs	r1, #4
 8003052:	482e      	ldr	r0, [pc, #184]	; (800310c <MX_GPIO_Init+0x164>)
 8003054:	f004 fe08 	bl	8007c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, GPIO_PIN_RESET);
 8003058:	2200      	movs	r2, #0
 800305a:	2140      	movs	r1, #64	; 0x40
 800305c:	482c      	ldr	r0, [pc, #176]	; (8003110 <MX_GPIO_Init+0x168>)
 800305e:	f004 fe03 	bl	8007c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RUNNING_LED_Pin|WARNING_LED_Pin;
 8003062:	23c0      	movs	r3, #192	; 0xc0
 8003064:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003066:	2301      	movs	r3, #1
 8003068:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800306a:	2300      	movs	r3, #0
 800306c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800306e:	2300      	movs	r3, #0
 8003070:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003072:	f107 0314 	add.w	r3, r7, #20
 8003076:	4619      	mov	r1, r3
 8003078:	4823      	ldr	r0, [pc, #140]	; (8003108 <MX_GPIO_Init+0x160>)
 800307a:	f004 fc73 	bl	8007964 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800307e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003082:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003084:	2302      	movs	r3, #2
 8003086:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003088:	2300      	movs	r3, #0
 800308a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800308c:	2300      	movs	r3, #0
 800308e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003090:	2300      	movs	r3, #0
 8003092:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003094:	f107 0314 	add.w	r3, r7, #20
 8003098:	4619      	mov	r1, r3
 800309a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800309e:	f004 fc61 	bl	8007964 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ERROR_LED_Pin;
 80030a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030a8:	2301      	movs	r3, #1
 80030aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ac:	2300      	movs	r3, #0
 80030ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b0:	2300      	movs	r3, #0
 80030b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ERROR_LED_GPIO_Port, &GPIO_InitStruct);
 80030b4:	f107 0314 	add.w	r3, r7, #20
 80030b8:	4619      	mov	r1, r3
 80030ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030be:	f004 fc51 	bl	8007964 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER2_CS_Pin;
 80030c2:	2304      	movs	r3, #4
 80030c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030c6:	2301      	movs	r3, #1
 80030c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ca:	2300      	movs	r3, #0
 80030cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ce:	2300      	movs	r3, #0
 80030d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENCODER2_CS_GPIO_Port, &GPIO_InitStruct);
 80030d2:	f107 0314 	add.w	r3, r7, #20
 80030d6:	4619      	mov	r1, r3
 80030d8:	480c      	ldr	r0, [pc, #48]	; (800310c <MX_GPIO_Init+0x164>)
 80030da:	f004 fc43 	bl	8007964 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER1_CS_Pin;
 80030de:	2340      	movs	r3, #64	; 0x40
 80030e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030e2:	2301      	movs	r3, #1
 80030e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e6:	2300      	movs	r3, #0
 80030e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ea:	2300      	movs	r3, #0
 80030ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENCODER1_CS_GPIO_Port, &GPIO_InitStruct);
 80030ee:	f107 0314 	add.w	r3, r7, #20
 80030f2:	4619      	mov	r1, r3
 80030f4:	4806      	ldr	r0, [pc, #24]	; (8003110 <MX_GPIO_Init+0x168>)
 80030f6:	f004 fc35 	bl	8007964 <HAL_GPIO_Init>

}
 80030fa:	bf00      	nop
 80030fc:	3728      	adds	r7, #40	; 0x28
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	40021000 	.word	0x40021000
 8003108:	48000800 	.word	0x48000800
 800310c:	48000c00 	.word	0x48000c00
 8003110:	48000400 	.word	0x48000400

08003114 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003118:	f000 fe05 	bl	8003d26 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800311c:	f000 f81b 	bl	8003156 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003120:	f7ff ff42 	bl	8002fa8 <MX_GPIO_Init>
  MX_DMA_Init();
 8003124:	f7ff fdfc 	bl	8002d20 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8003128:	f7ff fe60 	bl	8002dec <MX_FDCAN1_Init>
  MX_SPI1_Init();
 800312c:	f000 f86c 	bl	8003208 <MX_SPI1_Init>
  MX_SPI3_Init();
 8003130:	f000 f8a8 	bl	8003284 <MX_SPI3_Init>
  MX_TIM1_Init();
 8003134:	f000 fb3c 	bl	80037b0 <MX_TIM1_Init>
  MX_ADC1_Init();
 8003138:	f7ff faf4 	bl	8002724 <MX_ADC1_Init>
  MX_ADC2_Init();
 800313c:	f7ff fba6 	bl	800288c <MX_ADC2_Init>
  MX_DAC1_Init();
 8003140:	f7ff fd76 	bl	8002c30 <MX_DAC1_Init>
  MX_USART1_UART_Init();
 8003144:	f000 fcec 	bl	8003b20 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8003148:	f000 fbfa 	bl	8003940 <MX_TIM3_Init>
  MX_FMAC_Init();
 800314c:	f7ff fef8 	bl	8002f40 <MX_FMAC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	BLDC_main();
 8003150:	f7fd fb06 	bl	8000760 <BLDC_main>
 8003154:	e7fc      	b.n	8003150 <main+0x3c>

08003156 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b094      	sub	sp, #80	; 0x50
 800315a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800315c:	f107 0318 	add.w	r3, r7, #24
 8003160:	2238      	movs	r2, #56	; 0x38
 8003162:	2100      	movs	r1, #0
 8003164:	4618      	mov	r0, r3
 8003166:	f009 fccb 	bl	800cb00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800316a:	1d3b      	adds	r3, r7, #4
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	605a      	str	r2, [r3, #4]
 8003172:	609a      	str	r2, [r3, #8]
 8003174:	60da      	str	r2, [r3, #12]
 8003176:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003178:	2000      	movs	r0, #0
 800317a:	f004 fda7 	bl	8007ccc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800317e:	2302      	movs	r3, #2
 8003180:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003182:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003186:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003188:	2340      	movs	r3, #64	; 0x40
 800318a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800318c:	2302      	movs	r3, #2
 800318e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003190:	2302      	movs	r3, #2
 8003192:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003194:	2304      	movs	r3, #4
 8003196:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8003198:	2350      	movs	r3, #80	; 0x50
 800319a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800319c:	2302      	movs	r3, #2
 800319e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 80031a0:	2308      	movs	r3, #8
 80031a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80031a4:	2302      	movs	r3, #2
 80031a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031a8:	f107 0318 	add.w	r3, r7, #24
 80031ac:	4618      	mov	r0, r3
 80031ae:	f004 fe41 	bl	8007e34 <HAL_RCC_OscConfig>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d001      	beq.n	80031bc <SystemClock_Config+0x66>
  {
    Error_Handler();
 80031b8:	f000 f820 	bl	80031fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031bc:	230f      	movs	r3, #15
 80031be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031c0:	2303      	movs	r3, #3
 80031c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031c4:	2300      	movs	r3, #0
 80031c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80031c8:	2300      	movs	r3, #0
 80031ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80031cc:	2300      	movs	r3, #0
 80031ce:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80031d0:	1d3b      	adds	r3, r7, #4
 80031d2:	2104      	movs	r1, #4
 80031d4:	4618      	mov	r0, r3
 80031d6:	f005 f945 	bl	8008464 <HAL_RCC_ClockConfig>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80031e0:	f000 f80c 	bl	80031fc <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_16);
 80031e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80031e8:	f04f 7140 	mov.w	r1, #50331648	; 0x3000000
 80031ec:	f44f 7080 	mov.w	r0, #256	; 0x100
 80031f0:	f005 fa74 	bl	80086dc <HAL_RCC_MCOConfig>
}
 80031f4:	bf00      	nop
 80031f6:	3750      	adds	r7, #80	; 0x50
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003200:	b672      	cpsid	i
}
 8003202:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003204:	e7fe      	b.n	8003204 <Error_Handler+0x8>
	...

08003208 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi3_rx;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800320c:	4b1b      	ldr	r3, [pc, #108]	; (800327c <MX_SPI1_Init+0x74>)
 800320e:	4a1c      	ldr	r2, [pc, #112]	; (8003280 <MX_SPI1_Init+0x78>)
 8003210:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003212:	4b1a      	ldr	r3, [pc, #104]	; (800327c <MX_SPI1_Init+0x74>)
 8003214:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003218:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800321a:	4b18      	ldr	r3, [pc, #96]	; (800327c <MX_SPI1_Init+0x74>)
 800321c:	2200      	movs	r2, #0
 800321e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003220:	4b16      	ldr	r3, [pc, #88]	; (800327c <MX_SPI1_Init+0x74>)
 8003222:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003226:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003228:	4b14      	ldr	r3, [pc, #80]	; (800327c <MX_SPI1_Init+0x74>)
 800322a:	2200      	movs	r2, #0
 800322c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800322e:	4b13      	ldr	r3, [pc, #76]	; (800327c <MX_SPI1_Init+0x74>)
 8003230:	2201      	movs	r2, #1
 8003232:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003234:	4b11      	ldr	r3, [pc, #68]	; (800327c <MX_SPI1_Init+0x74>)
 8003236:	f44f 7200 	mov.w	r2, #512	; 0x200
 800323a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800323c:	4b0f      	ldr	r3, [pc, #60]	; (800327c <MX_SPI1_Init+0x74>)
 800323e:	2228      	movs	r2, #40	; 0x28
 8003240:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003242:	4b0e      	ldr	r3, [pc, #56]	; (800327c <MX_SPI1_Init+0x74>)
 8003244:	2200      	movs	r2, #0
 8003246:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003248:	4b0c      	ldr	r3, [pc, #48]	; (800327c <MX_SPI1_Init+0x74>)
 800324a:	2200      	movs	r2, #0
 800324c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800324e:	4b0b      	ldr	r3, [pc, #44]	; (800327c <MX_SPI1_Init+0x74>)
 8003250:	2200      	movs	r2, #0
 8003252:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003254:	4b09      	ldr	r3, [pc, #36]	; (800327c <MX_SPI1_Init+0x74>)
 8003256:	2207      	movs	r2, #7
 8003258:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800325a:	4b08      	ldr	r3, [pc, #32]	; (800327c <MX_SPI1_Init+0x74>)
 800325c:	2200      	movs	r2, #0
 800325e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003260:	4b06      	ldr	r3, [pc, #24]	; (800327c <MX_SPI1_Init+0x74>)
 8003262:	2200      	movs	r2, #0
 8003264:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003266:	4805      	ldr	r0, [pc, #20]	; (800327c <MX_SPI1_Init+0x74>)
 8003268:	f005 fd4a 	bl	8008d00 <HAL_SPI_Init>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003272:	f7ff ffc3 	bl	80031fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003276:	bf00      	nop
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	20000880 	.word	0x20000880
 8003280:	40013000 	.word	0x40013000

08003284 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8003288:	4b1b      	ldr	r3, [pc, #108]	; (80032f8 <MX_SPI3_Init+0x74>)
 800328a:	4a1c      	ldr	r2, [pc, #112]	; (80032fc <MX_SPI3_Init+0x78>)
 800328c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800328e:	4b1a      	ldr	r3, [pc, #104]	; (80032f8 <MX_SPI3_Init+0x74>)
 8003290:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003294:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003296:	4b18      	ldr	r3, [pc, #96]	; (80032f8 <MX_SPI3_Init+0x74>)
 8003298:	2200      	movs	r2, #0
 800329a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800329c:	4b16      	ldr	r3, [pc, #88]	; (80032f8 <MX_SPI3_Init+0x74>)
 800329e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80032a2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80032a4:	4b14      	ldr	r3, [pc, #80]	; (80032f8 <MX_SPI3_Init+0x74>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80032aa:	4b13      	ldr	r3, [pc, #76]	; (80032f8 <MX_SPI3_Init+0x74>)
 80032ac:	2201      	movs	r2, #1
 80032ae:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80032b0:	4b11      	ldr	r3, [pc, #68]	; (80032f8 <MX_SPI3_Init+0x74>)
 80032b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032b6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80032b8:	4b0f      	ldr	r3, [pc, #60]	; (80032f8 <MX_SPI3_Init+0x74>)
 80032ba:	2228      	movs	r2, #40	; 0x28
 80032bc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80032be:	4b0e      	ldr	r3, [pc, #56]	; (80032f8 <MX_SPI3_Init+0x74>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80032c4:	4b0c      	ldr	r3, [pc, #48]	; (80032f8 <MX_SPI3_Init+0x74>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032ca:	4b0b      	ldr	r3, [pc, #44]	; (80032f8 <MX_SPI3_Init+0x74>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80032d0:	4b09      	ldr	r3, [pc, #36]	; (80032f8 <MX_SPI3_Init+0x74>)
 80032d2:	2207      	movs	r2, #7
 80032d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80032d6:	4b08      	ldr	r3, [pc, #32]	; (80032f8 <MX_SPI3_Init+0x74>)
 80032d8:	2200      	movs	r2, #0
 80032da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80032dc:	4b06      	ldr	r3, [pc, #24]	; (80032f8 <MX_SPI3_Init+0x74>)
 80032de:	2200      	movs	r2, #0
 80032e0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80032e2:	4805      	ldr	r0, [pc, #20]	; (80032f8 <MX_SPI3_Init+0x74>)
 80032e4:	f005 fd0c 	bl	8008d00 <HAL_SPI_Init>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80032ee:	f7ff ff85 	bl	80031fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80032f2:	bf00      	nop
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	200008e4 	.word	0x200008e4
 80032fc:	40003c00 	.word	0x40003c00

08003300 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b08c      	sub	sp, #48	; 0x30
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003308:	f107 031c 	add.w	r3, r7, #28
 800330c:	2200      	movs	r2, #0
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	605a      	str	r2, [r3, #4]
 8003312:	609a      	str	r2, [r3, #8]
 8003314:	60da      	str	r2, [r3, #12]
 8003316:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a89      	ldr	r2, [pc, #548]	; (8003544 <HAL_SPI_MspInit+0x244>)
 800331e:	4293      	cmp	r3, r2
 8003320:	f040 8083 	bne.w	800342a <HAL_SPI_MspInit+0x12a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003324:	4b88      	ldr	r3, [pc, #544]	; (8003548 <HAL_SPI_MspInit+0x248>)
 8003326:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003328:	4a87      	ldr	r2, [pc, #540]	; (8003548 <HAL_SPI_MspInit+0x248>)
 800332a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800332e:	6613      	str	r3, [r2, #96]	; 0x60
 8003330:	4b85      	ldr	r3, [pc, #532]	; (8003548 <HAL_SPI_MspInit+0x248>)
 8003332:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003334:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003338:	61bb      	str	r3, [r7, #24]
 800333a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800333c:	4b82      	ldr	r3, [pc, #520]	; (8003548 <HAL_SPI_MspInit+0x248>)
 800333e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003340:	4a81      	ldr	r2, [pc, #516]	; (8003548 <HAL_SPI_MspInit+0x248>)
 8003342:	f043 0302 	orr.w	r3, r3, #2
 8003346:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003348:	4b7f      	ldr	r3, [pc, #508]	; (8003548 <HAL_SPI_MspInit+0x248>)
 800334a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	617b      	str	r3, [r7, #20]
 8003352:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003354:	2338      	movs	r3, #56	; 0x38
 8003356:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003358:	2302      	movs	r3, #2
 800335a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800335c:	2300      	movs	r3, #0
 800335e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003360:	2300      	movs	r3, #0
 8003362:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003364:	2305      	movs	r3, #5
 8003366:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003368:	f107 031c 	add.w	r3, r7, #28
 800336c:	4619      	mov	r1, r3
 800336e:	4877      	ldr	r0, [pc, #476]	; (800354c <HAL_SPI_MspInit+0x24c>)
 8003370:	f004 faf8 	bl	8007964 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel3;
 8003374:	4b76      	ldr	r3, [pc, #472]	; (8003550 <HAL_SPI_MspInit+0x250>)
 8003376:	4a77      	ldr	r2, [pc, #476]	; (8003554 <HAL_SPI_MspInit+0x254>)
 8003378:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800337a:	4b75      	ldr	r3, [pc, #468]	; (8003550 <HAL_SPI_MspInit+0x250>)
 800337c:	220a      	movs	r2, #10
 800337e:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003380:	4b73      	ldr	r3, [pc, #460]	; (8003550 <HAL_SPI_MspInit+0x250>)
 8003382:	2200      	movs	r2, #0
 8003384:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003386:	4b72      	ldr	r3, [pc, #456]	; (8003550 <HAL_SPI_MspInit+0x250>)
 8003388:	2200      	movs	r2, #0
 800338a:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800338c:	4b70      	ldr	r3, [pc, #448]	; (8003550 <HAL_SPI_MspInit+0x250>)
 800338e:	2280      	movs	r2, #128	; 0x80
 8003390:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003392:	4b6f      	ldr	r3, [pc, #444]	; (8003550 <HAL_SPI_MspInit+0x250>)
 8003394:	2200      	movs	r2, #0
 8003396:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003398:	4b6d      	ldr	r3, [pc, #436]	; (8003550 <HAL_SPI_MspInit+0x250>)
 800339a:	2200      	movs	r2, #0
 800339c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800339e:	4b6c      	ldr	r3, [pc, #432]	; (8003550 <HAL_SPI_MspInit+0x250>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80033a4:	4b6a      	ldr	r3, [pc, #424]	; (8003550 <HAL_SPI_MspInit+0x250>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80033aa:	4869      	ldr	r0, [pc, #420]	; (8003550 <HAL_SPI_MspInit+0x250>)
 80033ac:	f003 f902 	bl	80065b4 <HAL_DMA_Init>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 80033b6:	f7ff ff21 	bl	80031fc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a64      	ldr	r2, [pc, #400]	; (8003550 <HAL_SPI_MspInit+0x250>)
 80033be:	659a      	str	r2, [r3, #88]	; 0x58
 80033c0:	4a63      	ldr	r2, [pc, #396]	; (8003550 <HAL_SPI_MspInit+0x250>)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel4;
 80033c6:	4b64      	ldr	r3, [pc, #400]	; (8003558 <HAL_SPI_MspInit+0x258>)
 80033c8:	4a64      	ldr	r2, [pc, #400]	; (800355c <HAL_SPI_MspInit+0x25c>)
 80033ca:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80033cc:	4b62      	ldr	r3, [pc, #392]	; (8003558 <HAL_SPI_MspInit+0x258>)
 80033ce:	220b      	movs	r2, #11
 80033d0:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033d2:	4b61      	ldr	r3, [pc, #388]	; (8003558 <HAL_SPI_MspInit+0x258>)
 80033d4:	2210      	movs	r2, #16
 80033d6:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033d8:	4b5f      	ldr	r3, [pc, #380]	; (8003558 <HAL_SPI_MspInit+0x258>)
 80033da:	2200      	movs	r2, #0
 80033dc:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80033de:	4b5e      	ldr	r3, [pc, #376]	; (8003558 <HAL_SPI_MspInit+0x258>)
 80033e0:	2280      	movs	r2, #128	; 0x80
 80033e2:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033e4:	4b5c      	ldr	r3, [pc, #368]	; (8003558 <HAL_SPI_MspInit+0x258>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033ea:	4b5b      	ldr	r3, [pc, #364]	; (8003558 <HAL_SPI_MspInit+0x258>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80033f0:	4b59      	ldr	r3, [pc, #356]	; (8003558 <HAL_SPI_MspInit+0x258>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80033f6:	4b58      	ldr	r3, [pc, #352]	; (8003558 <HAL_SPI_MspInit+0x258>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80033fc:	4856      	ldr	r0, [pc, #344]	; (8003558 <HAL_SPI_MspInit+0x258>)
 80033fe:	f003 f8d9 	bl	80065b4 <HAL_DMA_Init>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d001      	beq.n	800340c <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 8003408:	f7ff fef8 	bl	80031fc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a52      	ldr	r2, [pc, #328]	; (8003558 <HAL_SPI_MspInit+0x258>)
 8003410:	655a      	str	r2, [r3, #84]	; 0x54
 8003412:	4a51      	ldr	r2, [pc, #324]	; (8003558 <HAL_SPI_MspInit+0x258>)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003418:	2200      	movs	r2, #0
 800341a:	2100      	movs	r1, #0
 800341c:	2023      	movs	r0, #35	; 0x23
 800341e:	f002 fe50 	bl	80060c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003422:	2023      	movs	r0, #35	; 0x23
 8003424:	f002 fe67 	bl	80060f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8003428:	e088      	b.n	800353c <HAL_SPI_MspInit+0x23c>
  else if(spiHandle->Instance==SPI3)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a4c      	ldr	r2, [pc, #304]	; (8003560 <HAL_SPI_MspInit+0x260>)
 8003430:	4293      	cmp	r3, r2
 8003432:	f040 8083 	bne.w	800353c <HAL_SPI_MspInit+0x23c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003436:	4b44      	ldr	r3, [pc, #272]	; (8003548 <HAL_SPI_MspInit+0x248>)
 8003438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800343a:	4a43      	ldr	r2, [pc, #268]	; (8003548 <HAL_SPI_MspInit+0x248>)
 800343c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003440:	6593      	str	r3, [r2, #88]	; 0x58
 8003442:	4b41      	ldr	r3, [pc, #260]	; (8003548 <HAL_SPI_MspInit+0x248>)
 8003444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003446:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800344a:	613b      	str	r3, [r7, #16]
 800344c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800344e:	4b3e      	ldr	r3, [pc, #248]	; (8003548 <HAL_SPI_MspInit+0x248>)
 8003450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003452:	4a3d      	ldr	r2, [pc, #244]	; (8003548 <HAL_SPI_MspInit+0x248>)
 8003454:	f043 0304 	orr.w	r3, r3, #4
 8003458:	64d3      	str	r3, [r2, #76]	; 0x4c
 800345a:	4b3b      	ldr	r3, [pc, #236]	; (8003548 <HAL_SPI_MspInit+0x248>)
 800345c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800345e:	f003 0304 	and.w	r3, r3, #4
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003466:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800346a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800346c:	2302      	movs	r3, #2
 800346e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003470:	2300      	movs	r3, #0
 8003472:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003474:	2300      	movs	r3, #0
 8003476:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003478:	2306      	movs	r3, #6
 800347a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800347c:	f107 031c 	add.w	r3, r7, #28
 8003480:	4619      	mov	r1, r3
 8003482:	4838      	ldr	r0, [pc, #224]	; (8003564 <HAL_SPI_MspInit+0x264>)
 8003484:	f004 fa6e 	bl	8007964 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA2_Channel1;
 8003488:	4b37      	ldr	r3, [pc, #220]	; (8003568 <HAL_SPI_MspInit+0x268>)
 800348a:	4a38      	ldr	r2, [pc, #224]	; (800356c <HAL_SPI_MspInit+0x26c>)
 800348c:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 800348e:	4b36      	ldr	r3, [pc, #216]	; (8003568 <HAL_SPI_MspInit+0x268>)
 8003490:	220e      	movs	r2, #14
 8003492:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003494:	4b34      	ldr	r3, [pc, #208]	; (8003568 <HAL_SPI_MspInit+0x268>)
 8003496:	2200      	movs	r2, #0
 8003498:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800349a:	4b33      	ldr	r3, [pc, #204]	; (8003568 <HAL_SPI_MspInit+0x268>)
 800349c:	2200      	movs	r2, #0
 800349e:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80034a0:	4b31      	ldr	r3, [pc, #196]	; (8003568 <HAL_SPI_MspInit+0x268>)
 80034a2:	2280      	movs	r2, #128	; 0x80
 80034a4:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034a6:	4b30      	ldr	r3, [pc, #192]	; (8003568 <HAL_SPI_MspInit+0x268>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034ac:	4b2e      	ldr	r3, [pc, #184]	; (8003568 <HAL_SPI_MspInit+0x268>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 80034b2:	4b2d      	ldr	r3, [pc, #180]	; (8003568 <HAL_SPI_MspInit+0x268>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80034b8:	4b2b      	ldr	r3, [pc, #172]	; (8003568 <HAL_SPI_MspInit+0x268>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 80034be:	482a      	ldr	r0, [pc, #168]	; (8003568 <HAL_SPI_MspInit+0x268>)
 80034c0:	f003 f878 	bl	80065b4 <HAL_DMA_Init>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <HAL_SPI_MspInit+0x1ce>
      Error_Handler();
 80034ca:	f7ff fe97 	bl	80031fc <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a25      	ldr	r2, [pc, #148]	; (8003568 <HAL_SPI_MspInit+0x268>)
 80034d2:	659a      	str	r2, [r3, #88]	; 0x58
 80034d4:	4a24      	ldr	r2, [pc, #144]	; (8003568 <HAL_SPI_MspInit+0x268>)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_spi3_tx.Instance = DMA2_Channel2;
 80034da:	4b25      	ldr	r3, [pc, #148]	; (8003570 <HAL_SPI_MspInit+0x270>)
 80034dc:	4a25      	ldr	r2, [pc, #148]	; (8003574 <HAL_SPI_MspInit+0x274>)
 80034de:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 80034e0:	4b23      	ldr	r3, [pc, #140]	; (8003570 <HAL_SPI_MspInit+0x270>)
 80034e2:	220f      	movs	r2, #15
 80034e4:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034e6:	4b22      	ldr	r3, [pc, #136]	; (8003570 <HAL_SPI_MspInit+0x270>)
 80034e8:	2210      	movs	r2, #16
 80034ea:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034ec:	4b20      	ldr	r3, [pc, #128]	; (8003570 <HAL_SPI_MspInit+0x270>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80034f2:	4b1f      	ldr	r3, [pc, #124]	; (8003570 <HAL_SPI_MspInit+0x270>)
 80034f4:	2280      	movs	r2, #128	; 0x80
 80034f6:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034f8:	4b1d      	ldr	r3, [pc, #116]	; (8003570 <HAL_SPI_MspInit+0x270>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034fe:	4b1c      	ldr	r3, [pc, #112]	; (8003570 <HAL_SPI_MspInit+0x270>)
 8003500:	2200      	movs	r2, #0
 8003502:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8003504:	4b1a      	ldr	r3, [pc, #104]	; (8003570 <HAL_SPI_MspInit+0x270>)
 8003506:	2200      	movs	r2, #0
 8003508:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800350a:	4b19      	ldr	r3, [pc, #100]	; (8003570 <HAL_SPI_MspInit+0x270>)
 800350c:	2200      	movs	r2, #0
 800350e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8003510:	4817      	ldr	r0, [pc, #92]	; (8003570 <HAL_SPI_MspInit+0x270>)
 8003512:	f003 f84f 	bl	80065b4 <HAL_DMA_Init>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d001      	beq.n	8003520 <HAL_SPI_MspInit+0x220>
      Error_Handler();
 800351c:	f7ff fe6e 	bl	80031fc <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a13      	ldr	r2, [pc, #76]	; (8003570 <HAL_SPI_MspInit+0x270>)
 8003524:	655a      	str	r2, [r3, #84]	; 0x54
 8003526:	4a12      	ldr	r2, [pc, #72]	; (8003570 <HAL_SPI_MspInit+0x270>)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 800352c:	2200      	movs	r2, #0
 800352e:	2100      	movs	r1, #0
 8003530:	2033      	movs	r0, #51	; 0x33
 8003532:	f002 fdc6 	bl	80060c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8003536:	2033      	movs	r0, #51	; 0x33
 8003538:	f002 fddd 	bl	80060f6 <HAL_NVIC_EnableIRQ>
}
 800353c:	bf00      	nop
 800353e:	3730      	adds	r7, #48	; 0x30
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	40013000 	.word	0x40013000
 8003548:	40021000 	.word	0x40021000
 800354c:	48000400 	.word	0x48000400
 8003550:	20000948 	.word	0x20000948
 8003554:	40020030 	.word	0x40020030
 8003558:	200009a8 	.word	0x200009a8
 800355c:	40020044 	.word	0x40020044
 8003560:	40003c00 	.word	0x40003c00
 8003564:	48000800 	.word	0x48000800
 8003568:	20000a08 	.word	0x20000a08
 800356c:	40020408 	.word	0x40020408
 8003570:	20000a68 	.word	0x20000a68
 8003574:	4002041c 	.word	0x4002041c

08003578 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800357e:	4b0f      	ldr	r3, [pc, #60]	; (80035bc <HAL_MspInit+0x44>)
 8003580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003582:	4a0e      	ldr	r2, [pc, #56]	; (80035bc <HAL_MspInit+0x44>)
 8003584:	f043 0301 	orr.w	r3, r3, #1
 8003588:	6613      	str	r3, [r2, #96]	; 0x60
 800358a:	4b0c      	ldr	r3, [pc, #48]	; (80035bc <HAL_MspInit+0x44>)
 800358c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	607b      	str	r3, [r7, #4]
 8003594:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003596:	4b09      	ldr	r3, [pc, #36]	; (80035bc <HAL_MspInit+0x44>)
 8003598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800359a:	4a08      	ldr	r2, [pc, #32]	; (80035bc <HAL_MspInit+0x44>)
 800359c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035a0:	6593      	str	r3, [r2, #88]	; 0x58
 80035a2:	4b06      	ldr	r3, [pc, #24]	; (80035bc <HAL_MspInit+0x44>)
 80035a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035aa:	603b      	str	r3, [r7, #0]
 80035ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80035ae:	f004 fc31 	bl	8007e14 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035b2:	bf00      	nop
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	40021000 	.word	0x40021000

080035c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035c0:	b480      	push	{r7}
 80035c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80035c4:	e7fe      	b.n	80035c4 <NMI_Handler+0x4>

080035c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035c6:	b480      	push	{r7}
 80035c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035ca:	e7fe      	b.n	80035ca <HardFault_Handler+0x4>

080035cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035d0:	e7fe      	b.n	80035d0 <MemManage_Handler+0x4>

080035d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035d2:	b480      	push	{r7}
 80035d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035d6:	e7fe      	b.n	80035d6 <BusFault_Handler+0x4>

080035d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035dc:	e7fe      	b.n	80035dc <UsageFault_Handler+0x4>

080035de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035de:	b480      	push	{r7}
 80035e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035e2:	bf00      	nop
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035f0:	bf00      	nop
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr

080035fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035fa:	b480      	push	{r7}
 80035fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035fe:	bf00      	nop
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800360c:	f000 fbde 	bl	8003dcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003610:	bf00      	nop
 8003612:	bd80      	pop	{r7, pc}

08003614 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003618:	4802      	ldr	r0, [pc, #8]	; (8003624 <DMA1_Channel1_IRQHandler+0x10>)
 800361a:	f003 f9ae 	bl	800697a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800361e:	bf00      	nop
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	2000070c 	.word	0x2000070c

08003628 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800362c:	4802      	ldr	r0, [pc, #8]	; (8003638 <DMA1_Channel2_IRQHandler+0x10>)
 800362e:	f003 f9a4 	bl	800697a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003632:	bf00      	nop
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	2000076c 	.word	0x2000076c

0800363c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003640:	4802      	ldr	r0, [pc, #8]	; (800364c <DMA1_Channel3_IRQHandler+0x10>)
 8003642:	f003 f99a 	bl	800697a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003646:	bf00      	nop
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	20000948 	.word	0x20000948

08003650 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003654:	4802      	ldr	r0, [pc, #8]	; (8003660 <DMA1_Channel4_IRQHandler+0x10>)
 8003656:	f003 f990 	bl	800697a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800365a:	bf00      	nop
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	200009a8 	.word	0x200009a8

08003664 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003668:	4803      	ldr	r0, [pc, #12]	; (8003678 <ADC1_2_IRQHandler+0x14>)
 800366a:	f001 fa95 	bl	8004b98 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800366e:	4803      	ldr	r0, [pc, #12]	; (800367c <ADC1_2_IRQHandler+0x18>)
 8003670:	f001 fa92 	bl	8004b98 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003674:	bf00      	nop
 8003676:	bd80      	pop	{r7, pc}
 8003678:	20000634 	.word	0x20000634
 800367c:	200006a0 	.word	0x200006a0

08003680 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8003684:	4802      	ldr	r0, [pc, #8]	; (8003690 <FDCAN1_IT0_IRQHandler+0x10>)
 8003686:	f003 fe4d 	bl	8007324 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800368a:	bf00      	nop
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	200007e4 	.word	0x200007e4

08003694 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003698:	4802      	ldr	r0, [pc, #8]	; (80036a4 <TIM3_IRQHandler+0x10>)
 800369a:	f006 fc0f 	bl	8009ebc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800369e:	bf00      	nop
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	20000b18 	.word	0x20000b18

080036a8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80036ac:	4802      	ldr	r0, [pc, #8]	; (80036b8 <SPI1_IRQHandler+0x10>)
 80036ae:	f005 fd5f 	bl	8009170 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80036b2:	bf00      	nop
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	20000880 	.word	0x20000880

080036bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80036c0:	4802      	ldr	r0, [pc, #8]	; (80036cc <USART1_IRQHandler+0x10>)
 80036c2:	f007 ff7b 	bl	800b5bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80036c6:	bf00      	nop
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	20000b64 	.word	0x20000b64

080036d0 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80036d4:	4802      	ldr	r0, [pc, #8]	; (80036e0 <SPI3_IRQHandler+0x10>)
 80036d6:	f005 fd4b 	bl	8009170 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80036da:	bf00      	nop
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	200008e4 	.word	0x200008e4

080036e4 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 80036e8:	4802      	ldr	r0, [pc, #8]	; (80036f4 <DMA2_Channel1_IRQHandler+0x10>)
 80036ea:	f003 f946 	bl	800697a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 80036ee:	bf00      	nop
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	20000a08 	.word	0x20000a08

080036f8 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80036fc:	4802      	ldr	r0, [pc, #8]	; (8003708 <DMA2_Channel2_IRQHandler+0x10>)
 80036fe:	f003 f93c 	bl	800697a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8003702:	bf00      	nop
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	20000a68 	.word	0x20000a68

0800370c <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003710:	4802      	ldr	r0, [pc, #8]	; (800371c <DMA2_Channel3_IRQHandler+0x10>)
 8003712:	f003 f932 	bl	800697a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8003716:	bf00      	nop
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	20000bf4 	.word	0x20000bf4

08003720 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003728:	4a14      	ldr	r2, [pc, #80]	; (800377c <_sbrk+0x5c>)
 800372a:	4b15      	ldr	r3, [pc, #84]	; (8003780 <_sbrk+0x60>)
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003734:	4b13      	ldr	r3, [pc, #76]	; (8003784 <_sbrk+0x64>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d102      	bne.n	8003742 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800373c:	4b11      	ldr	r3, [pc, #68]	; (8003784 <_sbrk+0x64>)
 800373e:	4a12      	ldr	r2, [pc, #72]	; (8003788 <_sbrk+0x68>)
 8003740:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003742:	4b10      	ldr	r3, [pc, #64]	; (8003784 <_sbrk+0x64>)
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4413      	add	r3, r2
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	429a      	cmp	r2, r3
 800374e:	d207      	bcs.n	8003760 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003750:	f009 f9de 	bl	800cb10 <__errno>
 8003754:	4603      	mov	r3, r0
 8003756:	220c      	movs	r2, #12
 8003758:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800375a:	f04f 33ff 	mov.w	r3, #4294967295
 800375e:	e009      	b.n	8003774 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003760:	4b08      	ldr	r3, [pc, #32]	; (8003784 <_sbrk+0x64>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003766:	4b07      	ldr	r3, [pc, #28]	; (8003784 <_sbrk+0x64>)
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4413      	add	r3, r2
 800376e:	4a05      	ldr	r2, [pc, #20]	; (8003784 <_sbrk+0x64>)
 8003770:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003772:	68fb      	ldr	r3, [r7, #12]
}
 8003774:	4618      	mov	r0, r3
 8003776:	3718      	adds	r7, #24
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	20008000 	.word	0x20008000
 8003780:	00000400 	.word	0x00000400
 8003784:	20000ac8 	.word	0x20000ac8
 8003788:	20000da0 	.word	0x20000da0

0800378c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003790:	4b06      	ldr	r3, [pc, #24]	; (80037ac <SystemInit+0x20>)
 8003792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003796:	4a05      	ldr	r2, [pc, #20]	; (80037ac <SystemInit+0x20>)
 8003798:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800379c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80037a0:	bf00      	nop
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	e000ed00 	.word	0xe000ed00

080037b0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b09c      	sub	sp, #112	; 0x70
 80037b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80037b6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80037ba:	2200      	movs	r2, #0
 80037bc:	601a      	str	r2, [r3, #0]
 80037be:	605a      	str	r2, [r3, #4]
 80037c0:	609a      	str	r2, [r3, #8]
 80037c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80037c8:	2200      	movs	r2, #0
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	605a      	str	r2, [r3, #4]
 80037ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80037d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80037d4:	2200      	movs	r2, #0
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	605a      	str	r2, [r3, #4]
 80037da:	609a      	str	r2, [r3, #8]
 80037dc:	60da      	str	r2, [r3, #12]
 80037de:	611a      	str	r2, [r3, #16]
 80037e0:	615a      	str	r2, [r3, #20]
 80037e2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80037e4:	1d3b      	adds	r3, r7, #4
 80037e6:	2234      	movs	r2, #52	; 0x34
 80037e8:	2100      	movs	r1, #0
 80037ea:	4618      	mov	r0, r3
 80037ec:	f009 f988 	bl	800cb00 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80037f0:	4b51      	ldr	r3, [pc, #324]	; (8003938 <MX_TIM1_Init+0x188>)
 80037f2:	4a52      	ldr	r2, [pc, #328]	; (800393c <MX_TIM1_Init+0x18c>)
 80037f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80037f6:	4b50      	ldr	r3, [pc, #320]	; (8003938 <MX_TIM1_Init+0x188>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80037fc:	4b4e      	ldr	r3, [pc, #312]	; (8003938 <MX_TIM1_Init+0x188>)
 80037fe:	2220      	movs	r2, #32
 8003800:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1499;
 8003802:	4b4d      	ldr	r3, [pc, #308]	; (8003938 <MX_TIM1_Init+0x188>)
 8003804:	f240 52db 	movw	r2, #1499	; 0x5db
 8003808:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800380a:	4b4b      	ldr	r3, [pc, #300]	; (8003938 <MX_TIM1_Init+0x188>)
 800380c:	2200      	movs	r2, #0
 800380e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003810:	4b49      	ldr	r3, [pc, #292]	; (8003938 <MX_TIM1_Init+0x188>)
 8003812:	2200      	movs	r2, #0
 8003814:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003816:	4b48      	ldr	r3, [pc, #288]	; (8003938 <MX_TIM1_Init+0x188>)
 8003818:	2280      	movs	r2, #128	; 0x80
 800381a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800381c:	4846      	ldr	r0, [pc, #280]	; (8003938 <MX_TIM1_Init+0x188>)
 800381e:	f006 f86d 	bl	80098fc <HAL_TIM_Base_Init>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003828:	f7ff fce8 	bl	80031fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800382c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003830:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003832:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003836:	4619      	mov	r1, r3
 8003838:	483f      	ldr	r0, [pc, #252]	; (8003938 <MX_TIM1_Init+0x188>)
 800383a:	f006 fdd3 	bl	800a3e4 <HAL_TIM_ConfigClockSource>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d001      	beq.n	8003848 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003844:	f7ff fcda 	bl	80031fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003848:	483b      	ldr	r0, [pc, #236]	; (8003938 <MX_TIM1_Init+0x188>)
 800384a:	f006 f93f 	bl	8009acc <HAL_TIM_PWM_Init>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d001      	beq.n	8003858 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003854:	f7ff fcd2 	bl	80031fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003858:	2300      	movs	r3, #0
 800385a:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800385c:	2300      	movs	r3, #0
 800385e:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003860:	2300      	movs	r3, #0
 8003862:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003864:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003868:	4619      	mov	r1, r3
 800386a:	4833      	ldr	r0, [pc, #204]	; (8003938 <MX_TIM1_Init+0x188>)
 800386c:	f007 fc36 	bl	800b0dc <HAL_TIMEx_MasterConfigSynchronization>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8003876:	f7ff fcc1 	bl	80031fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800387a:	2360      	movs	r3, #96	; 0x60
 800387c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800387e:	2300      	movs	r3, #0
 8003880:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8003882:	2302      	movs	r3, #2
 8003884:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8003886:	2308      	movs	r3, #8
 8003888:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800388a:	2300      	movs	r3, #0
 800388c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800388e:	2300      	movs	r3, #0
 8003890:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003892:	2300      	movs	r3, #0
 8003894:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003896:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800389a:	2200      	movs	r2, #0
 800389c:	4619      	mov	r1, r3
 800389e:	4826      	ldr	r0, [pc, #152]	; (8003938 <MX_TIM1_Init+0x188>)
 80038a0:	f006 fc8c 	bl	800a1bc <HAL_TIM_PWM_ConfigChannel>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80038aa:	f7ff fca7 	bl	80031fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80038ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80038b2:	2204      	movs	r2, #4
 80038b4:	4619      	mov	r1, r3
 80038b6:	4820      	ldr	r0, [pc, #128]	; (8003938 <MX_TIM1_Init+0x188>)
 80038b8:	f006 fc80 	bl	800a1bc <HAL_TIM_PWM_ConfigChannel>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80038c2:	f7ff fc9b 	bl	80031fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80038c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80038ca:	2208      	movs	r2, #8
 80038cc:	4619      	mov	r1, r3
 80038ce:	481a      	ldr	r0, [pc, #104]	; (8003938 <MX_TIM1_Init+0x188>)
 80038d0:	f006 fc74 	bl	800a1bc <HAL_TIM_PWM_ConfigChannel>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80038da:	f7ff fc8f 	bl	80031fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80038de:	2300      	movs	r3, #0
 80038e0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80038e2:	2300      	movs	r3, #0
 80038e4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80038e6:	2300      	movs	r3, #0
 80038e8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80038ea:	2300      	movs	r3, #0
 80038ec:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80038ee:	2300      	movs	r3, #0
 80038f0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80038f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80038f6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80038f8:	2300      	movs	r3, #0
 80038fa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80038fc:	2300      	movs	r3, #0
 80038fe:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003900:	2300      	movs	r3, #0
 8003902:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003904:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003908:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800390a:	2300      	movs	r3, #0
 800390c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800390e:	2300      	movs	r3, #0
 8003910:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003912:	2300      	movs	r3, #0
 8003914:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003916:	1d3b      	adds	r3, r7, #4
 8003918:	4619      	mov	r1, r3
 800391a:	4807      	ldr	r0, [pc, #28]	; (8003938 <MX_TIM1_Init+0x188>)
 800391c:	f007 fc60 	bl	800b1e0 <HAL_TIMEx_ConfigBreakDeadTime>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8003926:	f7ff fc69 	bl	80031fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800392a:	4803      	ldr	r0, [pc, #12]	; (8003938 <MX_TIM1_Init+0x188>)
 800392c:	f000 f890 	bl	8003a50 <HAL_TIM_MspPostInit>

}
 8003930:	bf00      	nop
 8003932:	3770      	adds	r7, #112	; 0x70
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	20000acc 	.word	0x20000acc
 800393c:	40012c00 	.word	0x40012c00

08003940 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b088      	sub	sp, #32
 8003944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003946:	f107 0310 	add.w	r3, r7, #16
 800394a:	2200      	movs	r2, #0
 800394c:	601a      	str	r2, [r3, #0]
 800394e:	605a      	str	r2, [r3, #4]
 8003950:	609a      	str	r2, [r3, #8]
 8003952:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003954:	1d3b      	adds	r3, r7, #4
 8003956:	2200      	movs	r2, #0
 8003958:	601a      	str	r2, [r3, #0]
 800395a:	605a      	str	r2, [r3, #4]
 800395c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800395e:	4b1d      	ldr	r3, [pc, #116]	; (80039d4 <MX_TIM3_Init+0x94>)
 8003960:	4a1d      	ldr	r2, [pc, #116]	; (80039d8 <MX_TIM3_Init+0x98>)
 8003962:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3;
 8003964:	4b1b      	ldr	r3, [pc, #108]	; (80039d4 <MX_TIM3_Init+0x94>)
 8003966:	2203      	movs	r2, #3
 8003968:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800396a:	4b1a      	ldr	r3, [pc, #104]	; (80039d4 <MX_TIM3_Init+0x94>)
 800396c:	2200      	movs	r2, #0
 800396e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3999;
 8003970:	4b18      	ldr	r3, [pc, #96]	; (80039d4 <MX_TIM3_Init+0x94>)
 8003972:	f640 729f 	movw	r2, #3999	; 0xf9f
 8003976:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003978:	4b16      	ldr	r3, [pc, #88]	; (80039d4 <MX_TIM3_Init+0x94>)
 800397a:	2200      	movs	r2, #0
 800397c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800397e:	4b15      	ldr	r3, [pc, #84]	; (80039d4 <MX_TIM3_Init+0x94>)
 8003980:	2280      	movs	r2, #128	; 0x80
 8003982:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003984:	4813      	ldr	r0, [pc, #76]	; (80039d4 <MX_TIM3_Init+0x94>)
 8003986:	f005 ffb9 	bl	80098fc <HAL_TIM_Base_Init>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d001      	beq.n	8003994 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003990:	f7ff fc34 	bl	80031fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003994:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003998:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800399a:	f107 0310 	add.w	r3, r7, #16
 800399e:	4619      	mov	r1, r3
 80039a0:	480c      	ldr	r0, [pc, #48]	; (80039d4 <MX_TIM3_Init+0x94>)
 80039a2:	f006 fd1f 	bl	800a3e4 <HAL_TIM_ConfigClockSource>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d001      	beq.n	80039b0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80039ac:	f7ff fc26 	bl	80031fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039b0:	2300      	movs	r3, #0
 80039b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039b4:	2300      	movs	r3, #0
 80039b6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80039b8:	1d3b      	adds	r3, r7, #4
 80039ba:	4619      	mov	r1, r3
 80039bc:	4805      	ldr	r0, [pc, #20]	; (80039d4 <MX_TIM3_Init+0x94>)
 80039be:	f007 fb8d 	bl	800b0dc <HAL_TIMEx_MasterConfigSynchronization>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80039c8:	f7ff fc18 	bl	80031fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80039cc:	bf00      	nop
 80039ce:	3720      	adds	r7, #32
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	20000b18 	.word	0x20000b18
 80039d8:	40000400 	.word	0x40000400

080039dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a16      	ldr	r2, [pc, #88]	; (8003a44 <HAL_TIM_Base_MspInit+0x68>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d10c      	bne.n	8003a08 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80039ee:	4b16      	ldr	r3, [pc, #88]	; (8003a48 <HAL_TIM_Base_MspInit+0x6c>)
 80039f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039f2:	4a15      	ldr	r2, [pc, #84]	; (8003a48 <HAL_TIM_Base_MspInit+0x6c>)
 80039f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80039f8:	6613      	str	r3, [r2, #96]	; 0x60
 80039fa:	4b13      	ldr	r3, [pc, #76]	; (8003a48 <HAL_TIM_Base_MspInit+0x6c>)
 80039fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a02:	60fb      	str	r3, [r7, #12]
 8003a04:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003a06:	e018      	b.n	8003a3a <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a0f      	ldr	r2, [pc, #60]	; (8003a4c <HAL_TIM_Base_MspInit+0x70>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d113      	bne.n	8003a3a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a12:	4b0d      	ldr	r3, [pc, #52]	; (8003a48 <HAL_TIM_Base_MspInit+0x6c>)
 8003a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a16:	4a0c      	ldr	r2, [pc, #48]	; (8003a48 <HAL_TIM_Base_MspInit+0x6c>)
 8003a18:	f043 0302 	orr.w	r3, r3, #2
 8003a1c:	6593      	str	r3, [r2, #88]	; 0x58
 8003a1e:	4b0a      	ldr	r3, [pc, #40]	; (8003a48 <HAL_TIM_Base_MspInit+0x6c>)
 8003a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	60bb      	str	r3, [r7, #8]
 8003a28:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	201d      	movs	r0, #29
 8003a30:	f002 fb47 	bl	80060c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003a34:	201d      	movs	r0, #29
 8003a36:	f002 fb5e 	bl	80060f6 <HAL_NVIC_EnableIRQ>
}
 8003a3a:	bf00      	nop
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	40012c00 	.word	0x40012c00
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	40000400 	.word	0x40000400

08003a50 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b08a      	sub	sp, #40	; 0x28
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a58:	f107 0314 	add.w	r3, r7, #20
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	601a      	str	r2, [r3, #0]
 8003a60:	605a      	str	r2, [r3, #4]
 8003a62:	609a      	str	r2, [r3, #8]
 8003a64:	60da      	str	r2, [r3, #12]
 8003a66:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a28      	ldr	r2, [pc, #160]	; (8003b10 <HAL_TIM_MspPostInit+0xc0>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d149      	bne.n	8003b06 <HAL_TIM_MspPostInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a72:	4b28      	ldr	r3, [pc, #160]	; (8003b14 <HAL_TIM_MspPostInit+0xc4>)
 8003a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a76:	4a27      	ldr	r2, [pc, #156]	; (8003b14 <HAL_TIM_MspPostInit+0xc4>)
 8003a78:	f043 0304 	orr.w	r3, r3, #4
 8003a7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a7e:	4b25      	ldr	r3, [pc, #148]	; (8003b14 <HAL_TIM_MspPostInit+0xc4>)
 8003a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a82:	f003 0304 	and.w	r3, r3, #4
 8003a86:	613b      	str	r3, [r7, #16]
 8003a88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a8a:	4b22      	ldr	r3, [pc, #136]	; (8003b14 <HAL_TIM_MspPostInit+0xc4>)
 8003a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a8e:	4a21      	ldr	r2, [pc, #132]	; (8003b14 <HAL_TIM_MspPostInit+0xc4>)
 8003a90:	f043 0302 	orr.w	r3, r3, #2
 8003a94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a96:	4b1f      	ldr	r3, [pc, #124]	; (8003b14 <HAL_TIM_MspPostInit+0xc4>)
 8003a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	60fb      	str	r3, [r7, #12]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> TIM1_CH3
    PB13     ------> TIM1_CH1N
    PB14     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8003aa2:	2307      	movs	r3, #7
 8003aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ab6:	f107 0314 	add.w	r3, r7, #20
 8003aba:	4619      	mov	r1, r3
 8003abc:	4816      	ldr	r0, [pc, #88]	; (8003b18 <HAL_TIM_MspPostInit+0xc8>)
 8003abe:	f003 ff51 	bl	8007964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8003ac2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8003ac6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ac8:	2302      	movs	r3, #2
 8003aca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003acc:	2300      	movs	r3, #0
 8003ace:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003ad4:	2306      	movs	r3, #6
 8003ad6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ad8:	f107 0314 	add.w	r3, r7, #20
 8003adc:	4619      	mov	r1, r3
 8003ade:	480f      	ldr	r0, [pc, #60]	; (8003b1c <HAL_TIM_MspPostInit+0xcc>)
 8003ae0:	f003 ff40 	bl	8007964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003ae4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ae8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aea:	2302      	movs	r3, #2
 8003aec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aee:	2300      	movs	r3, #0
 8003af0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003af2:	2300      	movs	r3, #0
 8003af4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8003af6:	2304      	movs	r3, #4
 8003af8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003afa:	f107 0314 	add.w	r3, r7, #20
 8003afe:	4619      	mov	r1, r3
 8003b00:	4806      	ldr	r0, [pc, #24]	; (8003b1c <HAL_TIM_MspPostInit+0xcc>)
 8003b02:	f003 ff2f 	bl	8007964 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003b06:	bf00      	nop
 8003b08:	3728      	adds	r7, #40	; 0x28
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	40012c00 	.word	0x40012c00
 8003b14:	40021000 	.word	0x40021000
 8003b18:	48000800 	.word	0x48000800
 8003b1c:	48000400 	.word	0x48000400

08003b20 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003b24:	4b22      	ldr	r3, [pc, #136]	; (8003bb0 <MX_USART1_UART_Init+0x90>)
 8003b26:	4a23      	ldr	r2, [pc, #140]	; (8003bb4 <MX_USART1_UART_Init+0x94>)
 8003b28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8003b2a:	4b21      	ldr	r3, [pc, #132]	; (8003bb0 <MX_USART1_UART_Init+0x90>)
 8003b2c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8003b30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003b32:	4b1f      	ldr	r3, [pc, #124]	; (8003bb0 <MX_USART1_UART_Init+0x90>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003b38:	4b1d      	ldr	r3, [pc, #116]	; (8003bb0 <MX_USART1_UART_Init+0x90>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003b3e:	4b1c      	ldr	r3, [pc, #112]	; (8003bb0 <MX_USART1_UART_Init+0x90>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003b44:	4b1a      	ldr	r3, [pc, #104]	; (8003bb0 <MX_USART1_UART_Init+0x90>)
 8003b46:	220c      	movs	r2, #12
 8003b48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b4a:	4b19      	ldr	r3, [pc, #100]	; (8003bb0 <MX_USART1_UART_Init+0x90>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b50:	4b17      	ldr	r3, [pc, #92]	; (8003bb0 <MX_USART1_UART_Init+0x90>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b56:	4b16      	ldr	r3, [pc, #88]	; (8003bb0 <MX_USART1_UART_Init+0x90>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003b5c:	4b14      	ldr	r3, [pc, #80]	; (8003bb0 <MX_USART1_UART_Init+0x90>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b62:	4b13      	ldr	r3, [pc, #76]	; (8003bb0 <MX_USART1_UART_Init+0x90>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003b68:	4811      	ldr	r0, [pc, #68]	; (8003bb0 <MX_USART1_UART_Init+0x90>)
 8003b6a:	f007 fc44 	bl	800b3f6 <HAL_UART_Init>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d001      	beq.n	8003b78 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003b74:	f7ff fb42 	bl	80031fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b78:	2100      	movs	r1, #0
 8003b7a:	480d      	ldr	r0, [pc, #52]	; (8003bb0 <MX_USART1_UART_Init+0x90>)
 8003b7c:	f008 febb 	bl	800c8f6 <HAL_UARTEx_SetTxFifoThreshold>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003b86:	f7ff fb39 	bl	80031fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	4808      	ldr	r0, [pc, #32]	; (8003bb0 <MX_USART1_UART_Init+0x90>)
 8003b8e:	f008 fef0 	bl	800c972 <HAL_UARTEx_SetRxFifoThreshold>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d001      	beq.n	8003b9c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003b98:	f7ff fb30 	bl	80031fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003b9c:	4804      	ldr	r0, [pc, #16]	; (8003bb0 <MX_USART1_UART_Init+0x90>)
 8003b9e:	f008 fe71 	bl	800c884 <HAL_UARTEx_DisableFifoMode>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003ba8:	f7ff fb28 	bl	80031fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003bac:	bf00      	nop
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	20000b64 	.word	0x20000b64
 8003bb4:	40013800 	.word	0x40013800

08003bb8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b09a      	sub	sp, #104	; 0x68
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bc0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	601a      	str	r2, [r3, #0]
 8003bc8:	605a      	str	r2, [r3, #4]
 8003bca:	609a      	str	r2, [r3, #8]
 8003bcc:	60da      	str	r2, [r3, #12]
 8003bce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003bd0:	f107 0310 	add.w	r3, r7, #16
 8003bd4:	2244      	movs	r2, #68	; 0x44
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f008 ff91 	bl	800cb00 <memset>
  if(uartHandle->Instance==USART1)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a37      	ldr	r2, [pc, #220]	; (8003cc0 <HAL_UART_MspInit+0x108>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d166      	bne.n	8003cb6 <HAL_UART_MspInit+0xfe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003be8:	2301      	movs	r3, #1
 8003bea:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003bec:	2300      	movs	r3, #0
 8003bee:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003bf0:	f107 0310 	add.w	r3, r7, #16
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f004 fe93 	bl	8008920 <HAL_RCCEx_PeriphCLKConfig>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d001      	beq.n	8003c04 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003c00:	f7ff fafc 	bl	80031fc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c04:	4b2f      	ldr	r3, [pc, #188]	; (8003cc4 <HAL_UART_MspInit+0x10c>)
 8003c06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c08:	4a2e      	ldr	r2, [pc, #184]	; (8003cc4 <HAL_UART_MspInit+0x10c>)
 8003c0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c0e:	6613      	str	r3, [r2, #96]	; 0x60
 8003c10:	4b2c      	ldr	r3, [pc, #176]	; (8003cc4 <HAL_UART_MspInit+0x10c>)
 8003c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c18:	60fb      	str	r3, [r7, #12]
 8003c1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c1c:	4b29      	ldr	r3, [pc, #164]	; (8003cc4 <HAL_UART_MspInit+0x10c>)
 8003c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c20:	4a28      	ldr	r2, [pc, #160]	; (8003cc4 <HAL_UART_MspInit+0x10c>)
 8003c22:	f043 0304 	orr.w	r3, r3, #4
 8003c26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c28:	4b26      	ldr	r3, [pc, #152]	; (8003cc4 <HAL_UART_MspInit+0x10c>)
 8003c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c2c:	f003 0304 	and.w	r3, r3, #4
 8003c30:	60bb      	str	r3, [r7, #8]
 8003c32:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003c34:	2330      	movs	r3, #48	; 0x30
 8003c36:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c38:	2302      	movs	r3, #2
 8003c3a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c40:	2300      	movs	r3, #0
 8003c42:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003c44:	2307      	movs	r3, #7
 8003c46:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c48:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	481e      	ldr	r0, [pc, #120]	; (8003cc8 <HAL_UART_MspInit+0x110>)
 8003c50:	f003 fe88 	bl	8007964 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel3;
 8003c54:	4b1d      	ldr	r3, [pc, #116]	; (8003ccc <HAL_UART_MspInit+0x114>)
 8003c56:	4a1e      	ldr	r2, [pc, #120]	; (8003cd0 <HAL_UART_MspInit+0x118>)
 8003c58:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003c5a:	4b1c      	ldr	r3, [pc, #112]	; (8003ccc <HAL_UART_MspInit+0x114>)
 8003c5c:	2219      	movs	r2, #25
 8003c5e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c60:	4b1a      	ldr	r3, [pc, #104]	; (8003ccc <HAL_UART_MspInit+0x114>)
 8003c62:	2210      	movs	r2, #16
 8003c64:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c66:	4b19      	ldr	r3, [pc, #100]	; (8003ccc <HAL_UART_MspInit+0x114>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003c6c:	4b17      	ldr	r3, [pc, #92]	; (8003ccc <HAL_UART_MspInit+0x114>)
 8003c6e:	2280      	movs	r2, #128	; 0x80
 8003c70:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c72:	4b16      	ldr	r3, [pc, #88]	; (8003ccc <HAL_UART_MspInit+0x114>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c78:	4b14      	ldr	r3, [pc, #80]	; (8003ccc <HAL_UART_MspInit+0x114>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003c7e:	4b13      	ldr	r3, [pc, #76]	; (8003ccc <HAL_UART_MspInit+0x114>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003c84:	4b11      	ldr	r3, [pc, #68]	; (8003ccc <HAL_UART_MspInit+0x114>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003c8a:	4810      	ldr	r0, [pc, #64]	; (8003ccc <HAL_UART_MspInit+0x114>)
 8003c8c:	f002 fc92 	bl	80065b4 <HAL_DMA_Init>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 8003c96:	f7ff fab1 	bl	80031fc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a0b      	ldr	r2, [pc, #44]	; (8003ccc <HAL_UART_MspInit+0x114>)
 8003c9e:	679a      	str	r2, [r3, #120]	; 0x78
 8003ca0:	4a0a      	ldr	r2, [pc, #40]	; (8003ccc <HAL_UART_MspInit+0x114>)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	2100      	movs	r1, #0
 8003caa:	2025      	movs	r0, #37	; 0x25
 8003cac:	f002 fa09 	bl	80060c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003cb0:	2025      	movs	r0, #37	; 0x25
 8003cb2:	f002 fa20 	bl	80060f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003cb6:	bf00      	nop
 8003cb8:	3768      	adds	r7, #104	; 0x68
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	40013800 	.word	0x40013800
 8003cc4:	40021000 	.word	0x40021000
 8003cc8:	48000800 	.word	0x48000800
 8003ccc:	20000bf4 	.word	0x20000bf4
 8003cd0:	40020430 	.word	0x40020430

08003cd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003cd4:	480d      	ldr	r0, [pc, #52]	; (8003d0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003cd6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003cd8:	480d      	ldr	r0, [pc, #52]	; (8003d10 <LoopForever+0x6>)
  ldr r1, =_edata
 8003cda:	490e      	ldr	r1, [pc, #56]	; (8003d14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003cdc:	4a0e      	ldr	r2, [pc, #56]	; (8003d18 <LoopForever+0xe>)
  movs r3, #0
 8003cde:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003ce0:	e002      	b.n	8003ce8 <LoopCopyDataInit>

08003ce2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ce2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ce4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ce6:	3304      	adds	r3, #4

08003ce8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ce8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003cea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003cec:	d3f9      	bcc.n	8003ce2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003cee:	4a0b      	ldr	r2, [pc, #44]	; (8003d1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003cf0:	4c0b      	ldr	r4, [pc, #44]	; (8003d20 <LoopForever+0x16>)
  movs r3, #0
 8003cf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003cf4:	e001      	b.n	8003cfa <LoopFillZerobss>

08003cf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003cf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003cf8:	3204      	adds	r2, #4

08003cfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003cfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003cfc:	d3fb      	bcc.n	8003cf6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003cfe:	f7ff fd45 	bl	800378c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d02:	f008 ff0b 	bl	800cb1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003d06:	f7ff fa05 	bl	8003114 <main>

08003d0a <LoopForever>:

LoopForever:
    b LoopForever
 8003d0a:	e7fe      	b.n	8003d0a <LoopForever>
  ldr   r0, =_estack
 8003d0c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003d10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d14:	2000019c 	.word	0x2000019c
  ldr r2, =_sidata
 8003d18:	0800d518 	.word	0x0800d518
  ldr r2, =_sbss
 8003d1c:	2000019c 	.word	0x2000019c
  ldr r4, =_ebss
 8003d20:	20000da0 	.word	0x20000da0

08003d24 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003d24:	e7fe      	b.n	8003d24 <COMP1_2_3_IRQHandler>

08003d26 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b082      	sub	sp, #8
 8003d2a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d30:	2003      	movs	r0, #3
 8003d32:	f002 f9bb 	bl	80060ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003d36:	200f      	movs	r0, #15
 8003d38:	f000 f80e 	bl	8003d58 <HAL_InitTick>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d002      	beq.n	8003d48 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	71fb      	strb	r3, [r7, #7]
 8003d46:	e001      	b.n	8003d4c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003d48:	f7ff fc16 	bl	8003578 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003d4c:	79fb      	ldrb	r3, [r7, #7]

}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
	...

08003d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003d60:	2300      	movs	r3, #0
 8003d62:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003d64:	4b16      	ldr	r3, [pc, #88]	; (8003dc0 <HAL_InitTick+0x68>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d022      	beq.n	8003db2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003d6c:	4b15      	ldr	r3, [pc, #84]	; (8003dc4 <HAL_InitTick+0x6c>)
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	4b13      	ldr	r3, [pc, #76]	; (8003dc0 <HAL_InitTick+0x68>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003d78:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d80:	4618      	mov	r0, r3
 8003d82:	f002 f9c6 	bl	8006112 <HAL_SYSTICK_Config>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d10f      	bne.n	8003dac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b0f      	cmp	r3, #15
 8003d90:	d809      	bhi.n	8003da6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d92:	2200      	movs	r2, #0
 8003d94:	6879      	ldr	r1, [r7, #4]
 8003d96:	f04f 30ff 	mov.w	r0, #4294967295
 8003d9a:	f002 f992 	bl	80060c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003d9e:	4a0a      	ldr	r2, [pc, #40]	; (8003dc8 <HAL_InitTick+0x70>)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6013      	str	r3, [r2, #0]
 8003da4:	e007      	b.n	8003db6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	73fb      	strb	r3, [r7, #15]
 8003daa:	e004      	b.n	8003db6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	73fb      	strb	r3, [r7, #15]
 8003db0:	e001      	b.n	8003db6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3710      	adds	r7, #16
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	20000148 	.word	0x20000148
 8003dc4:	20000140 	.word	0x20000140
 8003dc8:	20000144 	.word	0x20000144

08003dcc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003dd0:	4b05      	ldr	r3, [pc, #20]	; (8003de8 <HAL_IncTick+0x1c>)
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	4b05      	ldr	r3, [pc, #20]	; (8003dec <HAL_IncTick+0x20>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4413      	add	r3, r2
 8003dda:	4a03      	ldr	r2, [pc, #12]	; (8003de8 <HAL_IncTick+0x1c>)
 8003ddc:	6013      	str	r3, [r2, #0]
}
 8003dde:	bf00      	nop
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr
 8003de8:	20000c54 	.word	0x20000c54
 8003dec:	20000148 	.word	0x20000148

08003df0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003df0:	b480      	push	{r7}
 8003df2:	af00      	add	r7, sp, #0
  return uwTick;
 8003df4:	4b03      	ldr	r3, [pc, #12]	; (8003e04 <HAL_GetTick+0x14>)
 8003df6:	681b      	ldr	r3, [r3, #0]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	20000c54 	.word	0x20000c54

08003e08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e10:	f7ff ffee 	bl	8003df0 <HAL_GetTick>
 8003e14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e20:	d004      	beq.n	8003e2c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e22:	4b09      	ldr	r3, [pc, #36]	; (8003e48 <HAL_Delay+0x40>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	4413      	add	r3, r2
 8003e2a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003e2c:	bf00      	nop
 8003e2e:	f7ff ffdf 	bl	8003df0 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d8f7      	bhi.n	8003e2e <HAL_Delay+0x26>
  {
  }
}
 8003e3e:	bf00      	nop
 8003e40:	bf00      	nop
 8003e42:	3710      	adds	r7, #16
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	20000148 	.word	0x20000148

08003e4c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	431a      	orrs	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	609a      	str	r2, [r3, #8]
}
 8003e66:	bf00      	nop
 8003e68:	370c      	adds	r7, #12
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr

08003e72 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003e72:	b480      	push	{r7}
 8003e74:	b083      	sub	sp, #12
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
 8003e7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	431a      	orrs	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	609a      	str	r2, [r3, #8]
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b087      	sub	sp, #28
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
 8003ec0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	3360      	adds	r3, #96	; 0x60
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	4413      	add	r3, r2
 8003ece:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	4b08      	ldr	r3, [pc, #32]	; (8003ef8 <LL_ADC_SetOffset+0x44>)
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003ede:	683a      	ldr	r2, [r7, #0]
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003eec:	bf00      	nop
 8003eee:	371c      	adds	r7, #28
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr
 8003ef8:	03fff000 	.word	0x03fff000

08003efc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	3360      	adds	r3, #96	; 0x60
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4413      	add	r3, r2
 8003f12:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3714      	adds	r7, #20
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b087      	sub	sp, #28
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	3360      	adds	r3, #96	; 0x60
 8003f38:	461a      	mov	r2, r3
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	4413      	add	r3, r2
 8003f40:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	431a      	orrs	r2, r3
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003f52:	bf00      	nop
 8003f54:	371c      	adds	r7, #28
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr

08003f5e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003f5e:	b480      	push	{r7}
 8003f60:	b087      	sub	sp, #28
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	60f8      	str	r0, [r7, #12]
 8003f66:	60b9      	str	r1, [r7, #8]
 8003f68:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	3360      	adds	r3, #96	; 0x60
 8003f6e:	461a      	mov	r2, r3
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	4413      	add	r3, r2
 8003f76:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	431a      	orrs	r2, r3
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003f88:	bf00      	nop
 8003f8a:	371c      	adds	r7, #28
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b087      	sub	sp, #28
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	3360      	adds	r3, #96	; 0x60
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	4413      	add	r3, r2
 8003fac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003fbe:	bf00      	nop
 8003fc0:	371c      	adds	r7, #28
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr

08003fca <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b083      	sub	sp, #12
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
 8003fd2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	615a      	str	r2, [r3, #20]
}
 8003fe4:	bf00      	nop
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004000:	2b00      	cmp	r3, #0
 8004002:	d101      	bne.n	8004008 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004004:	2301      	movs	r3, #1
 8004006:	e000      	b.n	800400a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr

08004016 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004016:	b480      	push	{r7}
 8004018:	b087      	sub	sp, #28
 800401a:	af00      	add	r7, sp, #0
 800401c:	60f8      	str	r0, [r7, #12]
 800401e:	60b9      	str	r1, [r7, #8]
 8004020:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	3330      	adds	r3, #48	; 0x30
 8004026:	461a      	mov	r2, r3
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	0a1b      	lsrs	r3, r3, #8
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	f003 030c 	and.w	r3, r3, #12
 8004032:	4413      	add	r3, r2
 8004034:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	f003 031f 	and.w	r3, r3, #31
 8004040:	211f      	movs	r1, #31
 8004042:	fa01 f303 	lsl.w	r3, r1, r3
 8004046:	43db      	mvns	r3, r3
 8004048:	401a      	ands	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	0e9b      	lsrs	r3, r3, #26
 800404e:	f003 011f 	and.w	r1, r3, #31
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	f003 031f 	and.w	r3, r3, #31
 8004058:	fa01 f303 	lsl.w	r3, r1, r3
 800405c:	431a      	orrs	r2, r3
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004062:	bf00      	nop
 8004064:	371c      	adds	r7, #28
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr

0800406e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800406e:	b480      	push	{r7}
 8004070:	b083      	sub	sp, #12
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800407a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800407e:	2b00      	cmp	r3, #0
 8004080:	d101      	bne.n	8004086 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8004082:	2301      	movs	r3, #1
 8004084:	e000      	b.n	8004088 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004094:	b480      	push	{r7}
 8004096:	b087      	sub	sp, #28
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	3314      	adds	r3, #20
 80040a4:	461a      	mov	r2, r3
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	0e5b      	lsrs	r3, r3, #25
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	f003 0304 	and.w	r3, r3, #4
 80040b0:	4413      	add	r3, r2
 80040b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	0d1b      	lsrs	r3, r3, #20
 80040bc:	f003 031f 	and.w	r3, r3, #31
 80040c0:	2107      	movs	r1, #7
 80040c2:	fa01 f303 	lsl.w	r3, r1, r3
 80040c6:	43db      	mvns	r3, r3
 80040c8:	401a      	ands	r2, r3
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	0d1b      	lsrs	r3, r3, #20
 80040ce:	f003 031f 	and.w	r3, r3, #31
 80040d2:	6879      	ldr	r1, [r7, #4]
 80040d4:	fa01 f303 	lsl.w	r3, r1, r3
 80040d8:	431a      	orrs	r2, r3
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80040de:	bf00      	nop
 80040e0:	371c      	adds	r7, #28
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
	...

080040ec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a0f      	ldr	r2, [pc, #60]	; (8004138 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d10a      	bne.n	8004116 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800410c:	431a      	orrs	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8004114:	e00a      	b.n	800412c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004122:	43db      	mvns	r3, r3
 8004124:	401a      	ands	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800412c:	bf00      	nop
 800412e:	3714      	adds	r7, #20
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr
 8004138:	407f0000 	.word	0x407f0000

0800413c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f003 031f 	and.w	r3, r3, #31
}
 800414c:	4618      	mov	r0, r3
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8004168:	4618      	mov	r0, r3
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004184:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	6093      	str	r3, [r2, #8]
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041ac:	d101      	bne.n	80041b2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80041ae:	2301      	movs	r3, #1
 80041b0:	e000      	b.n	80041b4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80041d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80041d4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041fc:	d101      	bne.n	8004202 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80041fe:	2301      	movs	r3, #1
 8004200:	e000      	b.n	8004204 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004220:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004224:	f043 0201 	orr.w	r2, r3, #1
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004248:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800424c:	f043 0202 	orr.w	r2, r3, #2
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f003 0301 	and.w	r3, r3, #1
 8004270:	2b01      	cmp	r3, #1
 8004272:	d101      	bne.n	8004278 <LL_ADC_IsEnabled+0x18>
 8004274:	2301      	movs	r3, #1
 8004276:	e000      	b.n	800427a <LL_ADC_IsEnabled+0x1a>
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr

08004286 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004286:	b480      	push	{r7}
 8004288:	b083      	sub	sp, #12
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b02      	cmp	r3, #2
 8004298:	d101      	bne.n	800429e <LL_ADC_IsDisableOngoing+0x18>
 800429a:	2301      	movs	r3, #1
 800429c:	e000      	b.n	80042a0 <LL_ADC_IsDisableOngoing+0x1a>
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80042bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80042c0:	f043 0204 	orr.w	r2, r3, #4
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80042e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80042e8:	f043 0210 	orr.w	r2, r3, #16
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80042f0:	bf00      	nop
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f003 0304 	and.w	r3, r3, #4
 800430c:	2b04      	cmp	r3, #4
 800430e:	d101      	bne.n	8004314 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004310:	2301      	movs	r3, #1
 8004312:	e000      	b.n	8004316 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	370c      	adds	r7, #12
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr

08004322 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8004322:	b480      	push	{r7}
 8004324:	b083      	sub	sp, #12
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004332:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004336:	f043 0220 	orr.w	r2, r3, #32
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800433e:	bf00      	nop
 8004340:	370c      	adds	r7, #12
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr

0800434a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800434a:	b480      	push	{r7}
 800434c:	b083      	sub	sp, #12
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f003 0308 	and.w	r3, r3, #8
 800435a:	2b08      	cmp	r3, #8
 800435c:	d101      	bne.n	8004362 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800435e:	2301      	movs	r3, #1
 8004360:	e000      	b.n	8004364 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004370:	b590      	push	{r4, r7, lr}
 8004372:	b089      	sub	sp, #36	; 0x24
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004378:	2300      	movs	r3, #0
 800437a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800437c:	2300      	movs	r3, #0
 800437e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e177      	b.n	800467a <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004394:	2b00      	cmp	r3, #0
 8004396:	d109      	bne.n	80043ac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f7fe fb1b 	bl	80029d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7ff fef1 	bl	8004198 <LL_ADC_IsDeepPowerDownEnabled>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d004      	beq.n	80043c6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7ff fed7 	bl	8004174 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7ff ff0c 	bl	80041e8 <LL_ADC_IsInternalRegulatorEnabled>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d115      	bne.n	8004402 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4618      	mov	r0, r3
 80043dc:	f7ff fef0 	bl	80041c0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80043e0:	4b9c      	ldr	r3, [pc, #624]	; (8004654 <HAL_ADC_Init+0x2e4>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	099b      	lsrs	r3, r3, #6
 80043e6:	4a9c      	ldr	r2, [pc, #624]	; (8004658 <HAL_ADC_Init+0x2e8>)
 80043e8:	fba2 2303 	umull	r2, r3, r2, r3
 80043ec:	099b      	lsrs	r3, r3, #6
 80043ee:	3301      	adds	r3, #1
 80043f0:	005b      	lsls	r3, r3, #1
 80043f2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80043f4:	e002      	b.n	80043fc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	3b01      	subs	r3, #1
 80043fa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1f9      	bne.n	80043f6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4618      	mov	r0, r3
 8004408:	f7ff feee 	bl	80041e8 <LL_ADC_IsInternalRegulatorEnabled>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d10d      	bne.n	800442e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004416:	f043 0210 	orr.w	r2, r3, #16
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004422:	f043 0201 	orr.w	r2, r3, #1
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4618      	mov	r0, r3
 8004434:	f7ff ff62 	bl	80042fc <LL_ADC_REG_IsConversionOngoing>
 8004438:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800443e:	f003 0310 	and.w	r3, r3, #16
 8004442:	2b00      	cmp	r3, #0
 8004444:	f040 8110 	bne.w	8004668 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	2b00      	cmp	r3, #0
 800444c:	f040 810c 	bne.w	8004668 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004454:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004458:	f043 0202 	orr.w	r2, r3, #2
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4618      	mov	r0, r3
 8004466:	f7ff fefb 	bl	8004260 <LL_ADC_IsEnabled>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d111      	bne.n	8004494 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004470:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004474:	f7ff fef4 	bl	8004260 <LL_ADC_IsEnabled>
 8004478:	4604      	mov	r4, r0
 800447a:	4878      	ldr	r0, [pc, #480]	; (800465c <HAL_ADC_Init+0x2ec>)
 800447c:	f7ff fef0 	bl	8004260 <LL_ADC_IsEnabled>
 8004480:	4603      	mov	r3, r0
 8004482:	4323      	orrs	r3, r4
 8004484:	2b00      	cmp	r3, #0
 8004486:	d105      	bne.n	8004494 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	4619      	mov	r1, r3
 800448e:	4874      	ldr	r0, [pc, #464]	; (8004660 <HAL_ADC_Init+0x2f0>)
 8004490:	f7ff fcdc 	bl	8003e4c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	7f5b      	ldrb	r3, [r3, #29]
 8004498:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800449e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80044a4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80044aa:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80044b2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80044b4:	4313      	orrs	r3, r2
 80044b6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d106      	bne.n	80044d0 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c6:	3b01      	subs	r3, #1
 80044c8:	045b      	lsls	r3, r3, #17
 80044ca:	69ba      	ldr	r2, [r7, #24]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d009      	beq.n	80044ec <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044dc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80044e6:	69ba      	ldr	r2, [r7, #24]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68da      	ldr	r2, [r3, #12]
 80044f2:	4b5c      	ldr	r3, [pc, #368]	; (8004664 <HAL_ADC_Init+0x2f4>)
 80044f4:	4013      	ands	r3, r2
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	6812      	ldr	r2, [r2, #0]
 80044fa:	69b9      	ldr	r1, [r7, #24]
 80044fc:	430b      	orrs	r3, r1
 80044fe:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	430a      	orrs	r2, r1
 8004514:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4618      	mov	r0, r3
 800451c:	f7ff feee 	bl	80042fc <LL_ADC_REG_IsConversionOngoing>
 8004520:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4618      	mov	r0, r3
 8004528:	f7ff ff0f 	bl	800434a <LL_ADC_INJ_IsConversionOngoing>
 800452c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d16d      	bne.n	8004610 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d16a      	bne.n	8004610 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800453e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004546:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004548:	4313      	orrs	r3, r2
 800454a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004556:	f023 0302 	bic.w	r3, r3, #2
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	6812      	ldr	r2, [r2, #0]
 800455e:	69b9      	ldr	r1, [r7, #24]
 8004560:	430b      	orrs	r3, r1
 8004562:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d017      	beq.n	800459c <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	691a      	ldr	r2, [r3, #16]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800457a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004584:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004588:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	6911      	ldr	r1, [r2, #16]
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	6812      	ldr	r2, [r2, #0]
 8004594:	430b      	orrs	r3, r1
 8004596:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800459a:	e013      	b.n	80045c4 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	691a      	ldr	r2, [r3, #16]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80045aa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	6812      	ldr	r2, [r2, #0]
 80045b8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80045bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80045c0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d118      	bne.n	8004600 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80045d8:	f023 0304 	bic.w	r3, r3, #4
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80045e4:	4311      	orrs	r1, r2
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80045ea:	4311      	orrs	r1, r2
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80045f0:	430a      	orrs	r2, r1
 80045f2:	431a      	orrs	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f042 0201 	orr.w	r2, r2, #1
 80045fc:	611a      	str	r2, [r3, #16]
 80045fe:	e007      	b.n	8004610 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	691a      	ldr	r2, [r3, #16]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f022 0201 	bic.w	r2, r2, #1
 800460e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	695b      	ldr	r3, [r3, #20]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d10c      	bne.n	8004632 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461e:	f023 010f 	bic.w	r1, r3, #15
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	1e5a      	subs	r2, r3, #1
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	430a      	orrs	r2, r1
 800462e:	631a      	str	r2, [r3, #48]	; 0x30
 8004630:	e007      	b.n	8004642 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f022 020f 	bic.w	r2, r2, #15
 8004640:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004646:	f023 0303 	bic.w	r3, r3, #3
 800464a:	f043 0201 	orr.w	r2, r3, #1
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	65da      	str	r2, [r3, #92]	; 0x5c
 8004652:	e011      	b.n	8004678 <HAL_ADC_Init+0x308>
 8004654:	20000140 	.word	0x20000140
 8004658:	053e2d63 	.word	0x053e2d63
 800465c:	50000100 	.word	0x50000100
 8004660:	50000300 	.word	0x50000300
 8004664:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800466c:	f043 0210 	orr.w	r2, r3, #16
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004678:	7ffb      	ldrb	r3, [r7, #31]
}
 800467a:	4618      	mov	r0, r3
 800467c:	3724      	adds	r7, #36	; 0x24
 800467e:	46bd      	mov	sp, r7
 8004680:	bd90      	pop	{r4, r7, pc}
 8004682:	bf00      	nop

08004684 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800468c:	4859      	ldr	r0, [pc, #356]	; (80047f4 <HAL_ADC_Start+0x170>)
 800468e:	f7ff fd55 	bl	800413c <LL_ADC_GetMultimode>
 8004692:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4618      	mov	r0, r3
 800469a:	f7ff fe2f 	bl	80042fc <LL_ADC_REG_IsConversionOngoing>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f040 809f 	bne.w	80047e4 <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d101      	bne.n	80046b4 <HAL_ADC_Start+0x30>
 80046b0:	2302      	movs	r3, #2
 80046b2:	e09a      	b.n	80047ea <HAL_ADC_Start+0x166>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f001 f945 	bl	800594c <ADC_Enable>
 80046c2:	4603      	mov	r3, r0
 80046c4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80046c6:	7dfb      	ldrb	r3, [r7, #23]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f040 8086 	bne.w	80047da <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046d2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80046d6:	f023 0301 	bic.w	r3, r3, #1
 80046da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a44      	ldr	r2, [pc, #272]	; (80047f8 <HAL_ADC_Start+0x174>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d002      	beq.n	80046f2 <HAL_ADC_Start+0x6e>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	e001      	b.n	80046f6 <HAL_ADC_Start+0x72>
 80046f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	6812      	ldr	r2, [r2, #0]
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d002      	beq.n	8004704 <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d105      	bne.n	8004710 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004708:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004714:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004718:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800471c:	d106      	bne.n	800472c <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004722:	f023 0206 	bic.w	r2, r3, #6
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	661a      	str	r2, [r3, #96]	; 0x60
 800472a:	e002      	b.n	8004732 <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	221c      	movs	r2, #28
 8004738:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a2c      	ldr	r2, [pc, #176]	; (80047f8 <HAL_ADC_Start+0x174>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d002      	beq.n	8004752 <HAL_ADC_Start+0xce>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	e001      	b.n	8004756 <HAL_ADC_Start+0xd2>
 8004752:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	6812      	ldr	r2, [r2, #0]
 800475a:	4293      	cmp	r3, r2
 800475c:	d008      	beq.n	8004770 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d005      	beq.n	8004770 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	2b05      	cmp	r3, #5
 8004768:	d002      	beq.n	8004770 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	2b09      	cmp	r3, #9
 800476e:	d114      	bne.n	800479a <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d007      	beq.n	800478e <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004782:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004786:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4618      	mov	r0, r3
 8004794:	f7ff fd8a 	bl	80042ac <LL_ADC_REG_StartConversion>
 8004798:	e026      	b.n	80047e8 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800479e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a13      	ldr	r2, [pc, #76]	; (80047f8 <HAL_ADC_Start+0x174>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d002      	beq.n	80047b6 <HAL_ADC_Start+0x132>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	e001      	b.n	80047ba <HAL_ADC_Start+0x136>
 80047b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80047ba:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00f      	beq.n	80047e8 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047cc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80047d0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	65da      	str	r2, [r3, #92]	; 0x5c
 80047d8:	e006      	b.n	80047e8 <HAL_ADC_Start+0x164>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80047e2:	e001      	b.n	80047e8 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80047e4:	2302      	movs	r3, #2
 80047e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80047e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3718      	adds	r7, #24
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	50000300 	.word	0x50000300
 80047f8:	50000100 	.word	0x50000100

080047fc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800480a:	2b01      	cmp	r3, #1
 800480c:	d101      	bne.n	8004812 <HAL_ADC_Stop+0x16>
 800480e:	2302      	movs	r3, #2
 8004810:	e023      	b.n	800485a <HAL_ADC_Stop+0x5e>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800481a:	2103      	movs	r1, #3
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f000 ffd9 	bl	80057d4 <ADC_ConversionStop>
 8004822:	4603      	mov	r3, r0
 8004824:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004826:	7bfb      	ldrb	r3, [r7, #15]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d111      	bne.n	8004850 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f001 f8ef 	bl	8005a10 <ADC_Disable>
 8004832:	4603      	mov	r3, r0
 8004834:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004836:	7bfb      	ldrb	r3, [r7, #15]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d109      	bne.n	8004850 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004840:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004844:	f023 0301 	bic.w	r3, r3, #1
 8004848:	f043 0201 	orr.w	r2, r3, #1
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004858:	7bfb      	ldrb	r3, [r7, #15]
}
 800485a:	4618      	mov	r0, r3
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
	...

08004864 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b088      	sub	sp, #32
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800486e:	4867      	ldr	r0, [pc, #412]	; (8004a0c <HAL_ADC_PollForConversion+0x1a8>)
 8004870:	f7ff fc64 	bl	800413c <LL_ADC_GetMultimode>
 8004874:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	2b08      	cmp	r3, #8
 800487c:	d102      	bne.n	8004884 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800487e:	2308      	movs	r3, #8
 8004880:	61fb      	str	r3, [r7, #28]
 8004882:	e02a      	b.n	80048da <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d005      	beq.n	8004896 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	2b05      	cmp	r3, #5
 800488e:	d002      	beq.n	8004896 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	2b09      	cmp	r3, #9
 8004894:	d111      	bne.n	80048ba <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	f003 0301 	and.w	r3, r3, #1
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d007      	beq.n	80048b4 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048a8:	f043 0220 	orr.w	r2, r3, #32
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e0a6      	b.n	8004a02 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80048b4:	2304      	movs	r3, #4
 80048b6:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80048b8:	e00f      	b.n	80048da <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80048ba:	4854      	ldr	r0, [pc, #336]	; (8004a0c <HAL_ADC_PollForConversion+0x1a8>)
 80048bc:	f7ff fc4c 	bl	8004158 <LL_ADC_GetMultiDMATransfer>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d007      	beq.n	80048d6 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ca:	f043 0220 	orr.w	r2, r3, #32
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e095      	b.n	8004a02 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80048d6:	2304      	movs	r3, #4
 80048d8:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80048da:	f7ff fa89 	bl	8003df0 <HAL_GetTick>
 80048de:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80048e0:	e021      	b.n	8004926 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e8:	d01d      	beq.n	8004926 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80048ea:	f7ff fa81 	bl	8003df0 <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	683a      	ldr	r2, [r7, #0]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d302      	bcc.n	8004900 <HAL_ADC_PollForConversion+0x9c>
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d112      	bne.n	8004926 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	4013      	ands	r3, r2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10b      	bne.n	8004926 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004912:	f043 0204 	orr.w	r2, r3, #4
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e06d      	b.n	8004a02 <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	4013      	ands	r3, r2
 8004930:	2b00      	cmp	r3, #0
 8004932:	d0d6      	beq.n	80048e2 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004938:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4618      	mov	r0, r3
 8004946:	f7ff fb53 	bl	8003ff0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d01c      	beq.n	800498a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	7f5b      	ldrb	r3, [r3, #29]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d118      	bne.n	800498a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0308 	and.w	r3, r3, #8
 8004962:	2b08      	cmp	r3, #8
 8004964:	d111      	bne.n	800498a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800496a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004976:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d105      	bne.n	800498a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004982:	f043 0201 	orr.w	r2, r3, #1
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a20      	ldr	r2, [pc, #128]	; (8004a10 <HAL_ADC_PollForConversion+0x1ac>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d002      	beq.n	800499a <HAL_ADC_PollForConversion+0x136>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	e001      	b.n	800499e <HAL_ADC_PollForConversion+0x13a>
 800499a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	6812      	ldr	r2, [r2, #0]
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d008      	beq.n	80049b8 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d005      	beq.n	80049b8 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	2b05      	cmp	r3, #5
 80049b0:	d002      	beq.n	80049b8 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	2b09      	cmp	r3, #9
 80049b6:	d104      	bne.n	80049c2 <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	61bb      	str	r3, [r7, #24]
 80049c0:	e00d      	b.n	80049de <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a12      	ldr	r2, [pc, #72]	; (8004a10 <HAL_ADC_PollForConversion+0x1ac>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d002      	beq.n	80049d2 <HAL_ADC_PollForConversion+0x16e>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	e001      	b.n	80049d6 <HAL_ADC_PollForConversion+0x172>
 80049d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80049d6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	2b08      	cmp	r3, #8
 80049e2:	d104      	bne.n	80049ee <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2208      	movs	r2, #8
 80049ea:	601a      	str	r2, [r3, #0]
 80049ec:	e008      	b.n	8004a00 <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d103      	bne.n	8004a00 <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	220c      	movs	r2, #12
 80049fe:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3720      	adds	r7, #32
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	50000300 	.word	0x50000300
 8004a10:	50000100 	.word	0x50000100

08004a14 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b086      	sub	sp, #24
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a20:	4851      	ldr	r0, [pc, #324]	; (8004b68 <HAL_ADC_Start_DMA+0x154>)
 8004a22:	f7ff fb8b 	bl	800413c <LL_ADC_GetMultimode>
 8004a26:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7ff fc65 	bl	80042fc <LL_ADC_REG_IsConversionOngoing>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f040 808f 	bne.w	8004b58 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d101      	bne.n	8004a48 <HAL_ADC_Start_DMA+0x34>
 8004a44:	2302      	movs	r3, #2
 8004a46:	e08a      	b.n	8004b5e <HAL_ADC_Start_DMA+0x14a>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d005      	beq.n	8004a62 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	2b05      	cmp	r3, #5
 8004a5a:	d002      	beq.n	8004a62 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	2b09      	cmp	r3, #9
 8004a60:	d173      	bne.n	8004b4a <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004a62:	68f8      	ldr	r0, [r7, #12]
 8004a64:	f000 ff72 	bl	800594c <ADC_Enable>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004a6c:	7dfb      	ldrb	r3, [r7, #23]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d166      	bne.n	8004b40 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a76:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004a7a:	f023 0301 	bic.w	r3, r3, #1
 8004a7e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a38      	ldr	r2, [pc, #224]	; (8004b6c <HAL_ADC_Start_DMA+0x158>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d002      	beq.n	8004a96 <HAL_ADC_Start_DMA+0x82>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	e001      	b.n	8004a9a <HAL_ADC_Start_DMA+0x86>
 8004a96:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	6812      	ldr	r2, [r2, #0]
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d002      	beq.n	8004aa8 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d105      	bne.n	8004ab4 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aac:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ab8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d006      	beq.n	8004ace <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ac4:	f023 0206 	bic.w	r2, r3, #6
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	661a      	str	r2, [r3, #96]	; 0x60
 8004acc:	e002      	b.n	8004ad4 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad8:	4a25      	ldr	r2, [pc, #148]	; (8004b70 <HAL_ADC_Start_DMA+0x15c>)
 8004ada:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ae0:	4a24      	ldr	r2, [pc, #144]	; (8004b74 <HAL_ADC_Start_DMA+0x160>)
 8004ae2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ae8:	4a23      	ldr	r2, [pc, #140]	; (8004b78 <HAL_ADC_Start_DMA+0x164>)
 8004aea:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	221c      	movs	r2, #28
 8004af2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	685a      	ldr	r2, [r3, #4]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f042 0210 	orr.w	r2, r2, #16
 8004b0a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68da      	ldr	r2, [r3, #12]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f042 0201 	orr.w	r2, r2, #1
 8004b1a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	3340      	adds	r3, #64	; 0x40
 8004b26:	4619      	mov	r1, r3
 8004b28:	68ba      	ldr	r2, [r7, #8]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f001 fdea 	bl	8006704 <HAL_DMA_Start_IT>
 8004b30:	4603      	mov	r3, r0
 8004b32:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f7ff fbb7 	bl	80042ac <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004b3e:	e00d      	b.n	8004b5c <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8004b48:	e008      	b.n	8004b5c <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8004b56:	e001      	b.n	8004b5c <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004b58:	2302      	movs	r3, #2
 8004b5a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004b5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3718      	adds	r7, #24
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	50000300 	.word	0x50000300
 8004b6c:	50000100 	.word	0x50000100
 8004b70:	08005acf 	.word	0x08005acf
 8004b74:	08005ba7 	.word	0x08005ba7
 8004b78:	08005bc3 	.word	0x08005bc3

08004b7c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
	...

08004b98 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b08a      	sub	sp, #40	; 0x28
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004bb4:	4883      	ldr	r0, [pc, #524]	; (8004dc4 <HAL_ADC_IRQHandler+0x22c>)
 8004bb6:	f7ff fac1 	bl	800413c <LL_ADC_GetMultimode>
 8004bba:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	f003 0302 	and.w	r3, r3, #2
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d017      	beq.n	8004bf6 <HAL_ADC_IRQHandler+0x5e>
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	f003 0302 	and.w	r3, r3, #2
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d012      	beq.n	8004bf6 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bd4:	f003 0310 	and.w	r3, r3, #16
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d105      	bne.n	8004be8 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004be0:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f001 f8e1 	bl	8005db0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2202      	movs	r2, #2
 8004bf4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	f003 0304 	and.w	r3, r3, #4
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d004      	beq.n	8004c0a <HAL_ADC_IRQHandler+0x72>
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	f003 0304 	and.w	r3, r3, #4
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d10a      	bne.n	8004c20 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f000 8085 	beq.w	8004d20 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	f003 0308 	and.w	r3, r3, #8
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d07f      	beq.n	8004d20 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c24:	f003 0310 	and.w	r3, r3, #16
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d105      	bne.n	8004c38 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c30:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f7ff f9d7 	bl	8003ff0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d064      	beq.n	8004d12 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a5e      	ldr	r2, [pc, #376]	; (8004dc8 <HAL_ADC_IRQHandler+0x230>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d002      	beq.n	8004c58 <HAL_ADC_IRQHandler+0xc0>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	e001      	b.n	8004c5c <HAL_ADC_IRQHandler+0xc4>
 8004c58:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	6812      	ldr	r2, [r2, #0]
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d008      	beq.n	8004c76 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d005      	beq.n	8004c76 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	2b05      	cmp	r3, #5
 8004c6e:	d002      	beq.n	8004c76 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	2b09      	cmp	r3, #9
 8004c74:	d104      	bne.n	8004c80 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	623b      	str	r3, [r7, #32]
 8004c7e:	e00d      	b.n	8004c9c <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a50      	ldr	r2, [pc, #320]	; (8004dc8 <HAL_ADC_IRQHandler+0x230>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d002      	beq.n	8004c90 <HAL_ADC_IRQHandler+0xf8>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	e001      	b.n	8004c94 <HAL_ADC_IRQHandler+0xfc>
 8004c90:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004c94:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004c9c:	6a3b      	ldr	r3, [r7, #32]
 8004c9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d135      	bne.n	8004d12 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0308 	and.w	r3, r3, #8
 8004cb0:	2b08      	cmp	r3, #8
 8004cb2:	d12e      	bne.n	8004d12 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7ff fb1f 	bl	80042fc <LL_ADC_REG_IsConversionOngoing>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d11a      	bne.n	8004cfa <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	685a      	ldr	r2, [r3, #4]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f022 020c 	bic.w	r2, r2, #12
 8004cd2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cd8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ce4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d112      	bne.n	8004d12 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cf0:	f043 0201 	orr.w	r2, r3, #1
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	65da      	str	r2, [r3, #92]	; 0x5c
 8004cf8:	e00b      	b.n	8004d12 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cfe:	f043 0210 	orr.w	r2, r3, #16
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d0a:	f043 0201 	orr.w	r2, r3, #1
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f7fd fb1c 	bl	8002350 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	220c      	movs	r2, #12
 8004d1e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	f003 0320 	and.w	r3, r3, #32
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d004      	beq.n	8004d34 <HAL_ADC_IRQHandler+0x19c>
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	f003 0320 	and.w	r3, r3, #32
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d10b      	bne.n	8004d4c <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f000 809e 	beq.w	8004e7c <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	f000 8098 	beq.w	8004e7c <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d50:	f003 0310 	and.w	r3, r3, #16
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d105      	bne.n	8004d64 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d5c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f7ff f980 	bl	800406e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004d6e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4618      	mov	r0, r3
 8004d76:	f7ff f93b 	bl	8003ff0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004d7a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a11      	ldr	r2, [pc, #68]	; (8004dc8 <HAL_ADC_IRQHandler+0x230>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d002      	beq.n	8004d8c <HAL_ADC_IRQHandler+0x1f4>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	e001      	b.n	8004d90 <HAL_ADC_IRQHandler+0x1f8>
 8004d8c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	6812      	ldr	r2, [r2, #0]
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d008      	beq.n	8004daa <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d005      	beq.n	8004daa <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	2b06      	cmp	r3, #6
 8004da2:	d002      	beq.n	8004daa <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	2b07      	cmp	r3, #7
 8004da8:	d104      	bne.n	8004db4 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	623b      	str	r3, [r7, #32]
 8004db2:	e011      	b.n	8004dd8 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a03      	ldr	r2, [pc, #12]	; (8004dc8 <HAL_ADC_IRQHandler+0x230>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d006      	beq.n	8004dcc <HAL_ADC_IRQHandler+0x234>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	e005      	b.n	8004dd0 <HAL_ADC_IRQHandler+0x238>
 8004dc4:	50000300 	.word	0x50000300
 8004dc8:	50000100 	.word	0x50000100
 8004dcc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004dd0:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d047      	beq.n	8004e6e <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004dde:	6a3b      	ldr	r3, [r7, #32]
 8004de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d007      	beq.n	8004df8 <HAL_ADC_IRQHandler+0x260>
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d03f      	beq.n	8004e6e <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004dee:	6a3b      	ldr	r3, [r7, #32]
 8004df0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d13a      	bne.n	8004e6e <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e02:	2b40      	cmp	r3, #64	; 0x40
 8004e04:	d133      	bne.n	8004e6e <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004e06:	6a3b      	ldr	r3, [r7, #32]
 8004e08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d12e      	bne.n	8004e6e <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7ff fa98 	bl	800434a <LL_ADC_INJ_IsConversionOngoing>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d11a      	bne.n	8004e56 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e2e:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e34:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d112      	bne.n	8004e6e <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e4c:	f043 0201 	orr.w	r2, r3, #1
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	65da      	str	r2, [r3, #92]	; 0x5c
 8004e54:	e00b      	b.n	8004e6e <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e5a:	f043 0210 	orr.w	r2, r3, #16
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e66:	f043 0201 	orr.w	r2, r3, #1
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 ff76 	bl	8005d60 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2260      	movs	r2, #96	; 0x60
 8004e7a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d011      	beq.n	8004eaa <HAL_ADC_IRQHandler+0x312>
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00c      	beq.n	8004eaa <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e94:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f000 f895 	bl	8004fcc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2280      	movs	r2, #128	; 0x80
 8004ea8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d012      	beq.n	8004eda <HAL_ADC_IRQHandler+0x342>
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00d      	beq.n	8004eda <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ec2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 ff5c 	bl	8005d88 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ed8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d012      	beq.n	8004f0a <HAL_ADC_IRQHandler+0x372>
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00d      	beq.n	8004f0a <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ef2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 ff4e 	bl	8005d9c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f08:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	f003 0310 	and.w	r3, r3, #16
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d036      	beq.n	8004f82 <HAL_ADC_IRQHandler+0x3ea>
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	f003 0310 	and.w	r3, r3, #16
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d031      	beq.n	8004f82 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d102      	bne.n	8004f2c <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8004f26:	2301      	movs	r3, #1
 8004f28:	627b      	str	r3, [r7, #36]	; 0x24
 8004f2a:	e014      	b.n	8004f56 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d008      	beq.n	8004f44 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004f32:	4825      	ldr	r0, [pc, #148]	; (8004fc8 <HAL_ADC_IRQHandler+0x430>)
 8004f34:	f7ff f910 	bl	8004158 <LL_ADC_GetMultiDMATransfer>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00b      	beq.n	8004f56 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	627b      	str	r3, [r7, #36]	; 0x24
 8004f42:	e008      	b.n	8004f56 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d001      	beq.n	8004f56 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8004f52:	2301      	movs	r3, #1
 8004f54:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d10e      	bne.n	8004f7a <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f60:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f6c:	f043 0202 	orr.w	r2, r3, #2
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f000 f833 	bl	8004fe0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2210      	movs	r2, #16
 8004f80:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d018      	beq.n	8004fbe <HAL_ADC_IRQHandler+0x426>
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d013      	beq.n	8004fbe <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f9a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fa6:	f043 0208 	orr.w	r2, r3, #8
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004fb6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 fedb 	bl	8005d74 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004fbe:	bf00      	nop
 8004fc0:	3728      	adds	r7, #40	; 0x28
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	50000300 	.word	0x50000300

08004fcc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004fd4:	bf00      	nop
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004fe8:	bf00      	nop
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b0b6      	sub	sp, #216	; 0xd8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ffe:	2300      	movs	r3, #0
 8005000:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005004:	2300      	movs	r3, #0
 8005006:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800500e:	2b01      	cmp	r3, #1
 8005010:	d101      	bne.n	8005016 <HAL_ADC_ConfigChannel+0x22>
 8005012:	2302      	movs	r3, #2
 8005014:	e3c8      	b.n	80057a8 <HAL_ADC_ConfigChannel+0x7b4>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4618      	mov	r0, r3
 8005024:	f7ff f96a 	bl	80042fc <LL_ADC_REG_IsConversionOngoing>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	f040 83ad 	bne.w	800578a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6818      	ldr	r0, [r3, #0]
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	6859      	ldr	r1, [r3, #4]
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	461a      	mov	r2, r3
 800503e:	f7fe ffea 	bl	8004016 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4618      	mov	r0, r3
 8005048:	f7ff f958 	bl	80042fc <LL_ADC_REG_IsConversionOngoing>
 800504c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4618      	mov	r0, r3
 8005056:	f7ff f978 	bl	800434a <LL_ADC_INJ_IsConversionOngoing>
 800505a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800505e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005062:	2b00      	cmp	r3, #0
 8005064:	f040 81d9 	bne.w	800541a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005068:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800506c:	2b00      	cmp	r3, #0
 800506e:	f040 81d4 	bne.w	800541a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800507a:	d10f      	bne.n	800509c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6818      	ldr	r0, [r3, #0]
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2200      	movs	r2, #0
 8005086:	4619      	mov	r1, r3
 8005088:	f7ff f804 	bl	8004094 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005094:	4618      	mov	r0, r3
 8005096:	f7fe ff98 	bl	8003fca <LL_ADC_SetSamplingTimeCommonConfig>
 800509a:	e00e      	b.n	80050ba <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6818      	ldr	r0, [r3, #0]
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	6819      	ldr	r1, [r3, #0]
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	461a      	mov	r2, r3
 80050aa:	f7fe fff3 	bl	8004094 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2100      	movs	r1, #0
 80050b4:	4618      	mov	r0, r3
 80050b6:	f7fe ff88 	bl	8003fca <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	695a      	ldr	r2, [r3, #20]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	08db      	lsrs	r3, r3, #3
 80050c6:	f003 0303 	and.w	r3, r3, #3
 80050ca:	005b      	lsls	r3, r3, #1
 80050cc:	fa02 f303 	lsl.w	r3, r2, r3
 80050d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	2b04      	cmp	r3, #4
 80050da:	d022      	beq.n	8005122 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6818      	ldr	r0, [r3, #0]
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	6919      	ldr	r1, [r3, #16]
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80050ec:	f7fe fee2 	bl	8003eb4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6818      	ldr	r0, [r3, #0]
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	6919      	ldr	r1, [r3, #16]
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	461a      	mov	r2, r3
 80050fe:	f7fe ff2e 	bl	8003f5e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6818      	ldr	r0, [r3, #0]
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	6919      	ldr	r1, [r3, #16]
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	7f1b      	ldrb	r3, [r3, #28]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d102      	bne.n	8005118 <HAL_ADC_ConfigChannel+0x124>
 8005112:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005116:	e000      	b.n	800511a <HAL_ADC_ConfigChannel+0x126>
 8005118:	2300      	movs	r3, #0
 800511a:	461a      	mov	r2, r3
 800511c:	f7fe ff3a 	bl	8003f94 <LL_ADC_SetOffsetSaturation>
 8005120:	e17b      	b.n	800541a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2100      	movs	r1, #0
 8005128:	4618      	mov	r0, r3
 800512a:	f7fe fee7 	bl	8003efc <LL_ADC_GetOffsetChannel>
 800512e:	4603      	mov	r3, r0
 8005130:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005134:	2b00      	cmp	r3, #0
 8005136:	d10a      	bne.n	800514e <HAL_ADC_ConfigChannel+0x15a>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2100      	movs	r1, #0
 800513e:	4618      	mov	r0, r3
 8005140:	f7fe fedc 	bl	8003efc <LL_ADC_GetOffsetChannel>
 8005144:	4603      	mov	r3, r0
 8005146:	0e9b      	lsrs	r3, r3, #26
 8005148:	f003 021f 	and.w	r2, r3, #31
 800514c:	e01e      	b.n	800518c <HAL_ADC_ConfigChannel+0x198>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2100      	movs	r1, #0
 8005154:	4618      	mov	r0, r3
 8005156:	f7fe fed1 	bl	8003efc <LL_ADC_GetOffsetChannel>
 800515a:	4603      	mov	r3, r0
 800515c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005160:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005164:	fa93 f3a3 	rbit	r3, r3
 8005168:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800516c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005170:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005174:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d101      	bne.n	8005180 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 800517c:	2320      	movs	r3, #32
 800517e:	e004      	b.n	800518a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8005180:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005184:	fab3 f383 	clz	r3, r3
 8005188:	b2db      	uxtb	r3, r3
 800518a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005194:	2b00      	cmp	r3, #0
 8005196:	d105      	bne.n	80051a4 <HAL_ADC_ConfigChannel+0x1b0>
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	0e9b      	lsrs	r3, r3, #26
 800519e:	f003 031f 	and.w	r3, r3, #31
 80051a2:	e018      	b.n	80051d6 <HAL_ADC_ConfigChannel+0x1e2>
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80051b0:	fa93 f3a3 	rbit	r3, r3
 80051b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80051b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80051bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80051c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d101      	bne.n	80051cc <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80051c8:	2320      	movs	r3, #32
 80051ca:	e004      	b.n	80051d6 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80051cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80051d0:	fab3 f383 	clz	r3, r3
 80051d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d106      	bne.n	80051e8 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2200      	movs	r2, #0
 80051e0:	2100      	movs	r1, #0
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7fe fea0 	bl	8003f28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2101      	movs	r1, #1
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7fe fe84 	bl	8003efc <LL_ADC_GetOffsetChannel>
 80051f4:	4603      	mov	r3, r0
 80051f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d10a      	bne.n	8005214 <HAL_ADC_ConfigChannel+0x220>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	2101      	movs	r1, #1
 8005204:	4618      	mov	r0, r3
 8005206:	f7fe fe79 	bl	8003efc <LL_ADC_GetOffsetChannel>
 800520a:	4603      	mov	r3, r0
 800520c:	0e9b      	lsrs	r3, r3, #26
 800520e:	f003 021f 	and.w	r2, r3, #31
 8005212:	e01e      	b.n	8005252 <HAL_ADC_ConfigChannel+0x25e>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2101      	movs	r1, #1
 800521a:	4618      	mov	r0, r3
 800521c:	f7fe fe6e 	bl	8003efc <LL_ADC_GetOffsetChannel>
 8005220:	4603      	mov	r3, r0
 8005222:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005226:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800522a:	fa93 f3a3 	rbit	r3, r3
 800522e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8005232:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005236:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800523a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800523e:	2b00      	cmp	r3, #0
 8005240:	d101      	bne.n	8005246 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8005242:	2320      	movs	r3, #32
 8005244:	e004      	b.n	8005250 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8005246:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800524a:	fab3 f383 	clz	r3, r3
 800524e:	b2db      	uxtb	r3, r3
 8005250:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800525a:	2b00      	cmp	r3, #0
 800525c:	d105      	bne.n	800526a <HAL_ADC_ConfigChannel+0x276>
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	0e9b      	lsrs	r3, r3, #26
 8005264:	f003 031f 	and.w	r3, r3, #31
 8005268:	e018      	b.n	800529c <HAL_ADC_ConfigChannel+0x2a8>
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005272:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005276:	fa93 f3a3 	rbit	r3, r3
 800527a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800527e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005282:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8005286:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800528a:	2b00      	cmp	r3, #0
 800528c:	d101      	bne.n	8005292 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800528e:	2320      	movs	r3, #32
 8005290:	e004      	b.n	800529c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8005292:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005296:	fab3 f383 	clz	r3, r3
 800529a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800529c:	429a      	cmp	r2, r3
 800529e:	d106      	bne.n	80052ae <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2200      	movs	r2, #0
 80052a6:	2101      	movs	r1, #1
 80052a8:	4618      	mov	r0, r3
 80052aa:	f7fe fe3d 	bl	8003f28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2102      	movs	r1, #2
 80052b4:	4618      	mov	r0, r3
 80052b6:	f7fe fe21 	bl	8003efc <LL_ADC_GetOffsetChannel>
 80052ba:	4603      	mov	r3, r0
 80052bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d10a      	bne.n	80052da <HAL_ADC_ConfigChannel+0x2e6>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2102      	movs	r1, #2
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7fe fe16 	bl	8003efc <LL_ADC_GetOffsetChannel>
 80052d0:	4603      	mov	r3, r0
 80052d2:	0e9b      	lsrs	r3, r3, #26
 80052d4:	f003 021f 	and.w	r2, r3, #31
 80052d8:	e01e      	b.n	8005318 <HAL_ADC_ConfigChannel+0x324>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2102      	movs	r1, #2
 80052e0:	4618      	mov	r0, r3
 80052e2:	f7fe fe0b 	bl	8003efc <LL_ADC_GetOffsetChannel>
 80052e6:	4603      	mov	r3, r0
 80052e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052f0:	fa93 f3a3 	rbit	r3, r3
 80052f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80052f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80052fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8005300:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005304:	2b00      	cmp	r3, #0
 8005306:	d101      	bne.n	800530c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8005308:	2320      	movs	r3, #32
 800530a:	e004      	b.n	8005316 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 800530c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005310:	fab3 f383 	clz	r3, r3
 8005314:	b2db      	uxtb	r3, r3
 8005316:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005320:	2b00      	cmp	r3, #0
 8005322:	d105      	bne.n	8005330 <HAL_ADC_ConfigChannel+0x33c>
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	0e9b      	lsrs	r3, r3, #26
 800532a:	f003 031f 	and.w	r3, r3, #31
 800532e:	e016      	b.n	800535e <HAL_ADC_ConfigChannel+0x36a>
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005338:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800533c:	fa93 f3a3 	rbit	r3, r3
 8005340:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8005342:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005344:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8005348:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800534c:	2b00      	cmp	r3, #0
 800534e:	d101      	bne.n	8005354 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8005350:	2320      	movs	r3, #32
 8005352:	e004      	b.n	800535e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8005354:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005358:	fab3 f383 	clz	r3, r3
 800535c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800535e:	429a      	cmp	r2, r3
 8005360:	d106      	bne.n	8005370 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2200      	movs	r2, #0
 8005368:	2102      	movs	r1, #2
 800536a:	4618      	mov	r0, r3
 800536c:	f7fe fddc 	bl	8003f28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2103      	movs	r1, #3
 8005376:	4618      	mov	r0, r3
 8005378:	f7fe fdc0 	bl	8003efc <LL_ADC_GetOffsetChannel>
 800537c:	4603      	mov	r3, r0
 800537e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10a      	bne.n	800539c <HAL_ADC_ConfigChannel+0x3a8>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2103      	movs	r1, #3
 800538c:	4618      	mov	r0, r3
 800538e:	f7fe fdb5 	bl	8003efc <LL_ADC_GetOffsetChannel>
 8005392:	4603      	mov	r3, r0
 8005394:	0e9b      	lsrs	r3, r3, #26
 8005396:	f003 021f 	and.w	r2, r3, #31
 800539a:	e017      	b.n	80053cc <HAL_ADC_ConfigChannel+0x3d8>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2103      	movs	r1, #3
 80053a2:	4618      	mov	r0, r3
 80053a4:	f7fe fdaa 	bl	8003efc <LL_ADC_GetOffsetChannel>
 80053a8:	4603      	mov	r3, r0
 80053aa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053ae:	fa93 f3a3 	rbit	r3, r3
 80053b2:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80053b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053b6:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80053b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d101      	bne.n	80053c2 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80053be:	2320      	movs	r3, #32
 80053c0:	e003      	b.n	80053ca <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80053c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053c4:	fab3 f383 	clz	r3, r3
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d105      	bne.n	80053e4 <HAL_ADC_ConfigChannel+0x3f0>
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	0e9b      	lsrs	r3, r3, #26
 80053de:	f003 031f 	and.w	r3, r3, #31
 80053e2:	e011      	b.n	8005408 <HAL_ADC_ConfigChannel+0x414>
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053ec:	fa93 f3a3 	rbit	r3, r3
 80053f0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80053f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80053f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d101      	bne.n	8005400 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80053fc:	2320      	movs	r3, #32
 80053fe:	e003      	b.n	8005408 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8005400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005402:	fab3 f383 	clz	r3, r3
 8005406:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005408:	429a      	cmp	r2, r3
 800540a:	d106      	bne.n	800541a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2200      	movs	r2, #0
 8005412:	2103      	movs	r1, #3
 8005414:	4618      	mov	r0, r3
 8005416:	f7fe fd87 	bl	8003f28 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4618      	mov	r0, r3
 8005420:	f7fe ff1e 	bl	8004260 <LL_ADC_IsEnabled>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	f040 8140 	bne.w	80056ac <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6818      	ldr	r0, [r3, #0]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	6819      	ldr	r1, [r3, #0]
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	461a      	mov	r2, r3
 800543a:	f7fe fe57 	bl	80040ec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	4a8f      	ldr	r2, [pc, #572]	; (8005680 <HAL_ADC_ConfigChannel+0x68c>)
 8005444:	4293      	cmp	r3, r2
 8005446:	f040 8131 	bne.w	80056ac <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005456:	2b00      	cmp	r3, #0
 8005458:	d10b      	bne.n	8005472 <HAL_ADC_ConfigChannel+0x47e>
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	0e9b      	lsrs	r3, r3, #26
 8005460:	3301      	adds	r3, #1
 8005462:	f003 031f 	and.w	r3, r3, #31
 8005466:	2b09      	cmp	r3, #9
 8005468:	bf94      	ite	ls
 800546a:	2301      	movls	r3, #1
 800546c:	2300      	movhi	r3, #0
 800546e:	b2db      	uxtb	r3, r3
 8005470:	e019      	b.n	80054a6 <HAL_ADC_ConfigChannel+0x4b2>
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005478:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800547a:	fa93 f3a3 	rbit	r3, r3
 800547e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8005480:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005482:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8005484:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005486:	2b00      	cmp	r3, #0
 8005488:	d101      	bne.n	800548e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800548a:	2320      	movs	r3, #32
 800548c:	e003      	b.n	8005496 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800548e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005490:	fab3 f383 	clz	r3, r3
 8005494:	b2db      	uxtb	r3, r3
 8005496:	3301      	adds	r3, #1
 8005498:	f003 031f 	and.w	r3, r3, #31
 800549c:	2b09      	cmp	r3, #9
 800549e:	bf94      	ite	ls
 80054a0:	2301      	movls	r3, #1
 80054a2:	2300      	movhi	r3, #0
 80054a4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d079      	beq.n	800559e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d107      	bne.n	80054c6 <HAL_ADC_ConfigChannel+0x4d2>
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	0e9b      	lsrs	r3, r3, #26
 80054bc:	3301      	adds	r3, #1
 80054be:	069b      	lsls	r3, r3, #26
 80054c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80054c4:	e015      	b.n	80054f2 <HAL_ADC_ConfigChannel+0x4fe>
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054ce:	fa93 f3a3 	rbit	r3, r3
 80054d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80054d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054d6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80054d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d101      	bne.n	80054e2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80054de:	2320      	movs	r3, #32
 80054e0:	e003      	b.n	80054ea <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80054e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054e4:	fab3 f383 	clz	r3, r3
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	3301      	adds	r3, #1
 80054ec:	069b      	lsls	r3, r3, #26
 80054ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d109      	bne.n	8005512 <HAL_ADC_ConfigChannel+0x51e>
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	0e9b      	lsrs	r3, r3, #26
 8005504:	3301      	adds	r3, #1
 8005506:	f003 031f 	and.w	r3, r3, #31
 800550a:	2101      	movs	r1, #1
 800550c:	fa01 f303 	lsl.w	r3, r1, r3
 8005510:	e017      	b.n	8005542 <HAL_ADC_ConfigChannel+0x54e>
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800551a:	fa93 f3a3 	rbit	r3, r3
 800551e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8005520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005522:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8005524:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005526:	2b00      	cmp	r3, #0
 8005528:	d101      	bne.n	800552e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800552a:	2320      	movs	r3, #32
 800552c:	e003      	b.n	8005536 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800552e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005530:	fab3 f383 	clz	r3, r3
 8005534:	b2db      	uxtb	r3, r3
 8005536:	3301      	adds	r3, #1
 8005538:	f003 031f 	and.w	r3, r3, #31
 800553c:	2101      	movs	r1, #1
 800553e:	fa01 f303 	lsl.w	r3, r1, r3
 8005542:	ea42 0103 	orr.w	r1, r2, r3
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800554e:	2b00      	cmp	r3, #0
 8005550:	d10a      	bne.n	8005568 <HAL_ADC_ConfigChannel+0x574>
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	0e9b      	lsrs	r3, r3, #26
 8005558:	3301      	adds	r3, #1
 800555a:	f003 021f 	and.w	r2, r3, #31
 800555e:	4613      	mov	r3, r2
 8005560:	005b      	lsls	r3, r3, #1
 8005562:	4413      	add	r3, r2
 8005564:	051b      	lsls	r3, r3, #20
 8005566:	e018      	b.n	800559a <HAL_ADC_ConfigChannel+0x5a6>
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800556e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005570:	fa93 f3a3 	rbit	r3, r3
 8005574:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005578:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800557a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800557c:	2b00      	cmp	r3, #0
 800557e:	d101      	bne.n	8005584 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8005580:	2320      	movs	r3, #32
 8005582:	e003      	b.n	800558c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8005584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005586:	fab3 f383 	clz	r3, r3
 800558a:	b2db      	uxtb	r3, r3
 800558c:	3301      	adds	r3, #1
 800558e:	f003 021f 	and.w	r2, r3, #31
 8005592:	4613      	mov	r3, r2
 8005594:	005b      	lsls	r3, r3, #1
 8005596:	4413      	add	r3, r2
 8005598:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800559a:	430b      	orrs	r3, r1
 800559c:	e081      	b.n	80056a2 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d107      	bne.n	80055ba <HAL_ADC_ConfigChannel+0x5c6>
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	0e9b      	lsrs	r3, r3, #26
 80055b0:	3301      	adds	r3, #1
 80055b2:	069b      	lsls	r3, r3, #26
 80055b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80055b8:	e015      	b.n	80055e6 <HAL_ADC_ConfigChannel+0x5f2>
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c2:	fa93 f3a3 	rbit	r3, r3
 80055c6:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80055c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ca:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80055cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d101      	bne.n	80055d6 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80055d2:	2320      	movs	r3, #32
 80055d4:	e003      	b.n	80055de <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80055d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d8:	fab3 f383 	clz	r3, r3
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	3301      	adds	r3, #1
 80055e0:	069b      	lsls	r3, r3, #26
 80055e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d109      	bne.n	8005606 <HAL_ADC_ConfigChannel+0x612>
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	0e9b      	lsrs	r3, r3, #26
 80055f8:	3301      	adds	r3, #1
 80055fa:	f003 031f 	and.w	r3, r3, #31
 80055fe:	2101      	movs	r1, #1
 8005600:	fa01 f303 	lsl.w	r3, r1, r3
 8005604:	e017      	b.n	8005636 <HAL_ADC_ConfigChannel+0x642>
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800560c:	6a3b      	ldr	r3, [r7, #32]
 800560e:	fa93 f3a3 	rbit	r3, r3
 8005612:	61fb      	str	r3, [r7, #28]
  return result;
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561a:	2b00      	cmp	r3, #0
 800561c:	d101      	bne.n	8005622 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800561e:	2320      	movs	r3, #32
 8005620:	e003      	b.n	800562a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8005622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005624:	fab3 f383 	clz	r3, r3
 8005628:	b2db      	uxtb	r3, r3
 800562a:	3301      	adds	r3, #1
 800562c:	f003 031f 	and.w	r3, r3, #31
 8005630:	2101      	movs	r1, #1
 8005632:	fa01 f303 	lsl.w	r3, r1, r3
 8005636:	ea42 0103 	orr.w	r1, r2, r3
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005642:	2b00      	cmp	r3, #0
 8005644:	d10d      	bne.n	8005662 <HAL_ADC_ConfigChannel+0x66e>
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	0e9b      	lsrs	r3, r3, #26
 800564c:	3301      	adds	r3, #1
 800564e:	f003 021f 	and.w	r2, r3, #31
 8005652:	4613      	mov	r3, r2
 8005654:	005b      	lsls	r3, r3, #1
 8005656:	4413      	add	r3, r2
 8005658:	3b1e      	subs	r3, #30
 800565a:	051b      	lsls	r3, r3, #20
 800565c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005660:	e01e      	b.n	80056a0 <HAL_ADC_ConfigChannel+0x6ac>
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	fa93 f3a3 	rbit	r3, r3
 800566e:	613b      	str	r3, [r7, #16]
  return result;
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d104      	bne.n	8005684 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800567a:	2320      	movs	r3, #32
 800567c:	e006      	b.n	800568c <HAL_ADC_ConfigChannel+0x698>
 800567e:	bf00      	nop
 8005680:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	fab3 f383 	clz	r3, r3
 800568a:	b2db      	uxtb	r3, r3
 800568c:	3301      	adds	r3, #1
 800568e:	f003 021f 	and.w	r2, r3, #31
 8005692:	4613      	mov	r3, r2
 8005694:	005b      	lsls	r3, r3, #1
 8005696:	4413      	add	r3, r2
 8005698:	3b1e      	subs	r3, #30
 800569a:	051b      	lsls	r3, r3, #20
 800569c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80056a0:	430b      	orrs	r3, r1
 80056a2:	683a      	ldr	r2, [r7, #0]
 80056a4:	6892      	ldr	r2, [r2, #8]
 80056a6:	4619      	mov	r1, r3
 80056a8:	f7fe fcf4 	bl	8004094 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	4b3f      	ldr	r3, [pc, #252]	; (80057b0 <HAL_ADC_ConfigChannel+0x7bc>)
 80056b2:	4013      	ands	r3, r2
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d071      	beq.n	800579c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80056b8:	483e      	ldr	r0, [pc, #248]	; (80057b4 <HAL_ADC_ConfigChannel+0x7c0>)
 80056ba:	f7fe fbed 	bl	8003e98 <LL_ADC_GetCommonPathInternalCh>
 80056be:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a3c      	ldr	r2, [pc, #240]	; (80057b8 <HAL_ADC_ConfigChannel+0x7c4>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d004      	beq.n	80056d6 <HAL_ADC_ConfigChannel+0x6e2>
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a3a      	ldr	r2, [pc, #232]	; (80057bc <HAL_ADC_ConfigChannel+0x7c8>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d127      	bne.n	8005726 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80056d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80056da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d121      	bne.n	8005726 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80056ea:	d157      	bne.n	800579c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80056ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80056f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80056f4:	4619      	mov	r1, r3
 80056f6:	482f      	ldr	r0, [pc, #188]	; (80057b4 <HAL_ADC_ConfigChannel+0x7c0>)
 80056f8:	f7fe fbbb 	bl	8003e72 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80056fc:	4b30      	ldr	r3, [pc, #192]	; (80057c0 <HAL_ADC_ConfigChannel+0x7cc>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	099b      	lsrs	r3, r3, #6
 8005702:	4a30      	ldr	r2, [pc, #192]	; (80057c4 <HAL_ADC_ConfigChannel+0x7d0>)
 8005704:	fba2 2303 	umull	r2, r3, r2, r3
 8005708:	099b      	lsrs	r3, r3, #6
 800570a:	1c5a      	adds	r2, r3, #1
 800570c:	4613      	mov	r3, r2
 800570e:	005b      	lsls	r3, r3, #1
 8005710:	4413      	add	r3, r2
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005716:	e002      	b.n	800571e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	3b01      	subs	r3, #1
 800571c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1f9      	bne.n	8005718 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005724:	e03a      	b.n	800579c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a27      	ldr	r2, [pc, #156]	; (80057c8 <HAL_ADC_ConfigChannel+0x7d4>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d113      	bne.n	8005758 <HAL_ADC_ConfigChannel+0x764>
 8005730:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005734:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005738:	2b00      	cmp	r3, #0
 800573a:	d10d      	bne.n	8005758 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a22      	ldr	r2, [pc, #136]	; (80057cc <HAL_ADC_ConfigChannel+0x7d8>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d02a      	beq.n	800579c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005746:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800574a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800574e:	4619      	mov	r1, r3
 8005750:	4818      	ldr	r0, [pc, #96]	; (80057b4 <HAL_ADC_ConfigChannel+0x7c0>)
 8005752:	f7fe fb8e 	bl	8003e72 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005756:	e021      	b.n	800579c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a1c      	ldr	r2, [pc, #112]	; (80057d0 <HAL_ADC_ConfigChannel+0x7dc>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d11c      	bne.n	800579c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005762:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d116      	bne.n	800579c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a16      	ldr	r2, [pc, #88]	; (80057cc <HAL_ADC_ConfigChannel+0x7d8>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d011      	beq.n	800579c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005778:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800577c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005780:	4619      	mov	r1, r3
 8005782:	480c      	ldr	r0, [pc, #48]	; (80057b4 <HAL_ADC_ConfigChannel+0x7c0>)
 8005784:	f7fe fb75 	bl	8003e72 <LL_ADC_SetCommonPathInternalCh>
 8005788:	e008      	b.n	800579c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800578e:	f043 0220 	orr.w	r2, r3, #32
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80057a4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	37d8      	adds	r7, #216	; 0xd8
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	80080000 	.word	0x80080000
 80057b4:	50000300 	.word	0x50000300
 80057b8:	c3210000 	.word	0xc3210000
 80057bc:	90c00010 	.word	0x90c00010
 80057c0:	20000140 	.word	0x20000140
 80057c4:	053e2d63 	.word	0x053e2d63
 80057c8:	c7520000 	.word	0xc7520000
 80057cc:	50000100 	.word	0x50000100
 80057d0:	cb840000 	.word	0xcb840000

080057d4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b088      	sub	sp, #32
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80057de:	2300      	movs	r3, #0
 80057e0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7fe fd86 	bl	80042fc <LL_ADC_REG_IsConversionOngoing>
 80057f0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4618      	mov	r0, r3
 80057f8:	f7fe fda7 	bl	800434a <LL_ADC_INJ_IsConversionOngoing>
 80057fc:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d103      	bne.n	800580c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2b00      	cmp	r3, #0
 8005808:	f000 8098 	beq.w	800593c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005816:	2b00      	cmp	r3, #0
 8005818:	d02a      	beq.n	8005870 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	7f5b      	ldrb	r3, [r3, #29]
 800581e:	2b01      	cmp	r3, #1
 8005820:	d126      	bne.n	8005870 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	7f1b      	ldrb	r3, [r3, #28]
 8005826:	2b01      	cmp	r3, #1
 8005828:	d122      	bne.n	8005870 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800582a:	2301      	movs	r3, #1
 800582c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800582e:	e014      	b.n	800585a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	4a45      	ldr	r2, [pc, #276]	; (8005948 <ADC_ConversionStop+0x174>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d90d      	bls.n	8005854 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800583c:	f043 0210 	orr.w	r2, r3, #16
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005848:	f043 0201 	orr.w	r2, r3, #1
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e074      	b.n	800593e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	3301      	adds	r3, #1
 8005858:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005864:	2b40      	cmp	r3, #64	; 0x40
 8005866:	d1e3      	bne.n	8005830 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2240      	movs	r2, #64	; 0x40
 800586e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	2b02      	cmp	r3, #2
 8005874:	d014      	beq.n	80058a0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4618      	mov	r0, r3
 800587c:	f7fe fd3e 	bl	80042fc <LL_ADC_REG_IsConversionOngoing>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00c      	beq.n	80058a0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4618      	mov	r0, r3
 800588c:	f7fe fcfb 	bl	8004286 <LL_ADC_IsDisableOngoing>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d104      	bne.n	80058a0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4618      	mov	r0, r3
 800589c:	f7fe fd1a 	bl	80042d4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d014      	beq.n	80058d0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7fe fd4d 	bl	800434a <LL_ADC_INJ_IsConversionOngoing>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00c      	beq.n	80058d0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4618      	mov	r0, r3
 80058bc:	f7fe fce3 	bl	8004286 <LL_ADC_IsDisableOngoing>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d104      	bne.n	80058d0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4618      	mov	r0, r3
 80058cc:	f7fe fd29 	bl	8004322 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d005      	beq.n	80058e2 <ADC_ConversionStop+0x10e>
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	2b03      	cmp	r3, #3
 80058da:	d105      	bne.n	80058e8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80058dc:	230c      	movs	r3, #12
 80058de:	617b      	str	r3, [r7, #20]
        break;
 80058e0:	e005      	b.n	80058ee <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80058e2:	2308      	movs	r3, #8
 80058e4:	617b      	str	r3, [r7, #20]
        break;
 80058e6:	e002      	b.n	80058ee <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80058e8:	2304      	movs	r3, #4
 80058ea:	617b      	str	r3, [r7, #20]
        break;
 80058ec:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80058ee:	f7fe fa7f 	bl	8003df0 <HAL_GetTick>
 80058f2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80058f4:	e01b      	b.n	800592e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80058f6:	f7fe fa7b 	bl	8003df0 <HAL_GetTick>
 80058fa:	4602      	mov	r2, r0
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	2b05      	cmp	r3, #5
 8005902:	d914      	bls.n	800592e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	689a      	ldr	r2, [r3, #8]
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	4013      	ands	r3, r2
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00d      	beq.n	800592e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005916:	f043 0210 	orr.w	r2, r3, #16
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005922:	f043 0201 	orr.w	r2, r3, #1
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e007      	b.n	800593e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	689a      	ldr	r2, [r3, #8]
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	4013      	ands	r3, r2
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1dc      	bne.n	80058f6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3720      	adds	r7, #32
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	a33fffff 	.word	0xa33fffff

0800594c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4618      	mov	r0, r3
 800595a:	f7fe fc81 	bl	8004260 <LL_ADC_IsEnabled>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d14d      	bne.n	8005a00 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	689a      	ldr	r2, [r3, #8]
 800596a:	4b28      	ldr	r3, [pc, #160]	; (8005a0c <ADC_Enable+0xc0>)
 800596c:	4013      	ands	r3, r2
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00d      	beq.n	800598e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005976:	f043 0210 	orr.w	r2, r3, #16
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005982:	f043 0201 	orr.w	r2, r3, #1
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e039      	b.n	8005a02 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4618      	mov	r0, r3
 8005994:	f7fe fc3c 	bl	8004210 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005998:	f7fe fa2a 	bl	8003df0 <HAL_GetTick>
 800599c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800599e:	e028      	b.n	80059f2 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4618      	mov	r0, r3
 80059a6:	f7fe fc5b 	bl	8004260 <LL_ADC_IsEnabled>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d104      	bne.n	80059ba <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4618      	mov	r0, r3
 80059b6:	f7fe fc2b 	bl	8004210 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80059ba:	f7fe fa19 	bl	8003df0 <HAL_GetTick>
 80059be:	4602      	mov	r2, r0
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	d914      	bls.n	80059f2 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0301 	and.w	r3, r3, #1
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d00d      	beq.n	80059f2 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059da:	f043 0210 	orr.w	r2, r3, #16
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059e6:	f043 0201 	orr.w	r2, r3, #1
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e007      	b.n	8005a02 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0301 	and.w	r3, r3, #1
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d1cf      	bne.n	80059a0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3710      	adds	r7, #16
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	8000003f 	.word	0x8000003f

08005a10 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f7fe fc32 	bl	8004286 <LL_ADC_IsDisableOngoing>
 8005a22:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7fe fc19 	bl	8004260 <LL_ADC_IsEnabled>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d047      	beq.n	8005ac4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d144      	bne.n	8005ac4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	f003 030d 	and.w	r3, r3, #13
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d10c      	bne.n	8005a62 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f7fe fbf3 	bl	8004238 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2203      	movs	r2, #3
 8005a58:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005a5a:	f7fe f9c9 	bl	8003df0 <HAL_GetTick>
 8005a5e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005a60:	e029      	b.n	8005ab6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a66:	f043 0210 	orr.w	r2, r3, #16
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a72:	f043 0201 	orr.w	r2, r3, #1
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e023      	b.n	8005ac6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005a7e:	f7fe f9b7 	bl	8003df0 <HAL_GetTick>
 8005a82:	4602      	mov	r2, r0
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	d914      	bls.n	8005ab6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	f003 0301 	and.w	r3, r3, #1
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00d      	beq.n	8005ab6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a9e:	f043 0210 	orr.w	r2, r3, #16
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005aaa:	f043 0201 	orr.w	r2, r3, #1
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e007      	b.n	8005ac6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	f003 0301 	and.w	r3, r3, #1
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1dc      	bne.n	8005a7e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3710      	adds	r7, #16
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}

08005ace <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b084      	sub	sp, #16
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ada:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ae0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d14b      	bne.n	8005b80 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 0308 	and.w	r3, r3, #8
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d021      	beq.n	8005b46 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4618      	mov	r0, r3
 8005b08:	f7fe fa72 	bl	8003ff0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d032      	beq.n	8005b78 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d12b      	bne.n	8005b78 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b24:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d11f      	bne.n	8005b78 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b3c:	f043 0201 	orr.w	r2, r3, #1
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	65da      	str	r2, [r3, #92]	; 0x5c
 8005b44:	e018      	b.n	8005b78 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	f003 0302 	and.w	r3, r3, #2
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d111      	bne.n	8005b78 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d105      	bne.n	8005b78 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b70:	f043 0201 	orr.w	r2, r3, #1
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005b78:	68f8      	ldr	r0, [r7, #12]
 8005b7a:	f7fc fbe9 	bl	8002350 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005b7e:	e00e      	b.n	8005b9e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b84:	f003 0310 	and.w	r3, r3, #16
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d003      	beq.n	8005b94 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f7ff fa27 	bl	8004fe0 <HAL_ADC_ErrorCallback>
}
 8005b92:	e004      	b.n	8005b9e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	4798      	blx	r3
}
 8005b9e:	bf00      	nop
 8005ba0:	3710      	adds	r7, #16
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}

08005ba6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005ba6:	b580      	push	{r7, lr}
 8005ba8:	b084      	sub	sp, #16
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005bb4:	68f8      	ldr	r0, [r7, #12]
 8005bb6:	f7fc fab9 	bl	800212c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005bba:	bf00      	nop
 8005bbc:	3710      	adds	r7, #16
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}

08005bc2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005bc2:	b580      	push	{r7, lr}
 8005bc4:	b084      	sub	sp, #16
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bce:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bd4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005be0:	f043 0204 	orr.w	r2, r3, #4
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005be8:	68f8      	ldr	r0, [r7, #12]
 8005bea:	f7ff f9f9 	bl	8004fe0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005bee:	bf00      	nop
 8005bf0:	3710      	adds	r7, #16
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <LL_ADC_IsEnabled>:
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	b083      	sub	sp, #12
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d101      	bne.n	8005c0e <LL_ADC_IsEnabled+0x18>
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e000      	b.n	8005c10 <LL_ADC_IsEnabled+0x1a>
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	370c      	adds	r7, #12
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <LL_ADC_StartCalibration>:
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005c2e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005c32:	683a      	ldr	r2, [r7, #0]
 8005c34:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	609a      	str	r2, [r3, #8]
}
 8005c42:	bf00      	nop
 8005c44:	370c      	adds	r7, #12
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr

08005c4e <LL_ADC_IsCalibrationOnGoing>:
{
 8005c4e:	b480      	push	{r7}
 8005c50:	b083      	sub	sp, #12
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c62:	d101      	bne.n	8005c68 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005c64:	2301      	movs	r3, #1
 8005c66:	e000      	b.n	8005c6a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	370c      	adds	r7, #12
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr

08005c76 <LL_ADC_REG_IsConversionOngoing>:
{
 8005c76:	b480      	push	{r7}
 8005c78:	b083      	sub	sp, #12
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	f003 0304 	and.w	r3, r3, #4
 8005c86:	2b04      	cmp	r3, #4
 8005c88:	d101      	bne.n	8005c8e <LL_ADC_REG_IsConversionOngoing+0x18>
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e000      	b.n	8005c90 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d101      	bne.n	8005cb8 <HAL_ADCEx_Calibration_Start+0x1c>
 8005cb4:	2302      	movs	r3, #2
 8005cb6:	e04d      	b.n	8005d54 <HAL_ADCEx_Calibration_Start+0xb8>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f7ff fea5 	bl	8005a10 <ADC_Disable>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005cca:	7bfb      	ldrb	r3, [r7, #15]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d136      	bne.n	8005d3e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cd4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005cd8:	f023 0302 	bic.w	r3, r3, #2
 8005cdc:	f043 0202 	orr.w	r2, r3, #2
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	6839      	ldr	r1, [r7, #0]
 8005cea:	4618      	mov	r0, r3
 8005cec:	f7ff ff96 	bl	8005c1c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005cf0:	e014      	b.n	8005d1c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	4a18      	ldr	r2, [pc, #96]	; (8005d5c <HAL_ADCEx_Calibration_Start+0xc0>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d90d      	bls.n	8005d1c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d04:	f023 0312 	bic.w	r3, r3, #18
 8005d08:	f043 0210 	orr.w	r2, r3, #16
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e01b      	b.n	8005d54 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4618      	mov	r0, r3
 8005d22:	f7ff ff94 	bl	8005c4e <LL_ADC_IsCalibrationOnGoing>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d1e2      	bne.n	8005cf2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d30:	f023 0303 	bic.w	r3, r3, #3
 8005d34:	f043 0201 	orr.w	r2, r3, #1
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	65da      	str	r2, [r3, #92]	; 0x5c
 8005d3c:	e005      	b.n	8005d4a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d42:	f043 0210 	orr.w	r2, r3, #16
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3710      	adds	r7, #16
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}
 8005d5c:	0004de01 	.word	0x0004de01

08005d60 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005d68:	bf00      	nop
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005d7c:	bf00      	nop
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005d90:	bf00      	nop
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005db8:	bf00      	nop
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005dc4:	b590      	push	{r4, r7, lr}
 8005dc6:	b0a1      	sub	sp, #132	; 0x84
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d101      	bne.n	8005de2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005dde:	2302      	movs	r3, #2
 8005de0:	e08b      	b.n	8005efa <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2201      	movs	r2, #1
 8005de6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8005dea:	2300      	movs	r3, #0
 8005dec:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8005dee:	2300      	movs	r3, #0
 8005df0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005dfa:	d102      	bne.n	8005e02 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005dfc:	4b41      	ldr	r3, [pc, #260]	; (8005f04 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005dfe:	60bb      	str	r3, [r7, #8]
 8005e00:	e001      	b.n	8005e06 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005e02:	2300      	movs	r3, #0
 8005e04:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d10b      	bne.n	8005e24 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e10:	f043 0220 	orr.w	r2, r3, #32
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e06a      	b.n	8005efa <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	4618      	mov	r0, r3
 8005e28:	f7ff ff25 	bl	8005c76 <LL_ADC_REG_IsConversionOngoing>
 8005e2c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4618      	mov	r0, r3
 8005e34:	f7ff ff1f 	bl	8005c76 <LL_ADC_REG_IsConversionOngoing>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d14c      	bne.n	8005ed8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005e3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d149      	bne.n	8005ed8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005e44:	4b30      	ldr	r3, [pc, #192]	; (8005f08 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8005e46:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d028      	beq.n	8005ea2 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005e50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	6859      	ldr	r1, [r3, #4]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005e62:	035b      	lsls	r3, r3, #13
 8005e64:	430b      	orrs	r3, r1
 8005e66:	431a      	orrs	r2, r3
 8005e68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e6a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005e6c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005e70:	f7ff fec1 	bl	8005bf6 <LL_ADC_IsEnabled>
 8005e74:	4604      	mov	r4, r0
 8005e76:	4823      	ldr	r0, [pc, #140]	; (8005f04 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005e78:	f7ff febd 	bl	8005bf6 <LL_ADC_IsEnabled>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	4323      	orrs	r3, r4
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d133      	bne.n	8005eec <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005e84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005e8c:	f023 030f 	bic.w	r3, r3, #15
 8005e90:	683a      	ldr	r2, [r7, #0]
 8005e92:	6811      	ldr	r1, [r2, #0]
 8005e94:	683a      	ldr	r2, [r7, #0]
 8005e96:	6892      	ldr	r2, [r2, #8]
 8005e98:	430a      	orrs	r2, r1
 8005e9a:	431a      	orrs	r2, r3
 8005e9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e9e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005ea0:	e024      	b.n	8005eec <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005ea2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005eaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005eac:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005eae:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005eb2:	f7ff fea0 	bl	8005bf6 <LL_ADC_IsEnabled>
 8005eb6:	4604      	mov	r4, r0
 8005eb8:	4812      	ldr	r0, [pc, #72]	; (8005f04 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005eba:	f7ff fe9c 	bl	8005bf6 <LL_ADC_IsEnabled>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	4323      	orrs	r3, r4
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d112      	bne.n	8005eec <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005ec6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005ece:	f023 030f 	bic.w	r3, r3, #15
 8005ed2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005ed4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005ed6:	e009      	b.n	8005eec <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005edc:	f043 0220 	orr.w	r2, r3, #32
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005eea:	e000      	b.n	8005eee <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005eec:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005ef6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3784      	adds	r7, #132	; 0x84
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd90      	pop	{r4, r7, pc}
 8005f02:	bf00      	nop
 8005f04:	50000100 	.word	0x50000100
 8005f08:	50000300 	.word	0x50000300

08005f0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b085      	sub	sp, #20
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f003 0307 	and.w	r3, r3, #7
 8005f1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f1c:	4b0c      	ldr	r3, [pc, #48]	; (8005f50 <__NVIC_SetPriorityGrouping+0x44>)
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f22:	68ba      	ldr	r2, [r7, #8]
 8005f24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005f28:	4013      	ands	r3, r2
 8005f2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005f34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f3e:	4a04      	ldr	r2, [pc, #16]	; (8005f50 <__NVIC_SetPriorityGrouping+0x44>)
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	60d3      	str	r3, [r2, #12]
}
 8005f44:	bf00      	nop
 8005f46:	3714      	adds	r7, #20
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr
 8005f50:	e000ed00 	.word	0xe000ed00

08005f54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005f54:	b480      	push	{r7}
 8005f56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f58:	4b04      	ldr	r3, [pc, #16]	; (8005f6c <__NVIC_GetPriorityGrouping+0x18>)
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	0a1b      	lsrs	r3, r3, #8
 8005f5e:	f003 0307 	and.w	r3, r3, #7
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr
 8005f6c:	e000ed00 	.word	0xe000ed00

08005f70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	4603      	mov	r3, r0
 8005f78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	db0b      	blt.n	8005f9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f82:	79fb      	ldrb	r3, [r7, #7]
 8005f84:	f003 021f 	and.w	r2, r3, #31
 8005f88:	4907      	ldr	r1, [pc, #28]	; (8005fa8 <__NVIC_EnableIRQ+0x38>)
 8005f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f8e:	095b      	lsrs	r3, r3, #5
 8005f90:	2001      	movs	r0, #1
 8005f92:	fa00 f202 	lsl.w	r2, r0, r2
 8005f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005f9a:	bf00      	nop
 8005f9c:	370c      	adds	r7, #12
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop
 8005fa8:	e000e100 	.word	0xe000e100

08005fac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	6039      	str	r1, [r7, #0]
 8005fb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	db0a      	blt.n	8005fd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	b2da      	uxtb	r2, r3
 8005fc4:	490c      	ldr	r1, [pc, #48]	; (8005ff8 <__NVIC_SetPriority+0x4c>)
 8005fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fca:	0112      	lsls	r2, r2, #4
 8005fcc:	b2d2      	uxtb	r2, r2
 8005fce:	440b      	add	r3, r1
 8005fd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005fd4:	e00a      	b.n	8005fec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	b2da      	uxtb	r2, r3
 8005fda:	4908      	ldr	r1, [pc, #32]	; (8005ffc <__NVIC_SetPriority+0x50>)
 8005fdc:	79fb      	ldrb	r3, [r7, #7]
 8005fde:	f003 030f 	and.w	r3, r3, #15
 8005fe2:	3b04      	subs	r3, #4
 8005fe4:	0112      	lsls	r2, r2, #4
 8005fe6:	b2d2      	uxtb	r2, r2
 8005fe8:	440b      	add	r3, r1
 8005fea:	761a      	strb	r2, [r3, #24]
}
 8005fec:	bf00      	nop
 8005fee:	370c      	adds	r7, #12
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr
 8005ff8:	e000e100 	.word	0xe000e100
 8005ffc:	e000ed00 	.word	0xe000ed00

08006000 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006000:	b480      	push	{r7}
 8006002:	b089      	sub	sp, #36	; 0x24
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f003 0307 	and.w	r3, r3, #7
 8006012:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	f1c3 0307 	rsb	r3, r3, #7
 800601a:	2b04      	cmp	r3, #4
 800601c:	bf28      	it	cs
 800601e:	2304      	movcs	r3, #4
 8006020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	3304      	adds	r3, #4
 8006026:	2b06      	cmp	r3, #6
 8006028:	d902      	bls.n	8006030 <NVIC_EncodePriority+0x30>
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	3b03      	subs	r3, #3
 800602e:	e000      	b.n	8006032 <NVIC_EncodePriority+0x32>
 8006030:	2300      	movs	r3, #0
 8006032:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006034:	f04f 32ff 	mov.w	r2, #4294967295
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	fa02 f303 	lsl.w	r3, r2, r3
 800603e:	43da      	mvns	r2, r3
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	401a      	ands	r2, r3
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006048:	f04f 31ff 	mov.w	r1, #4294967295
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	fa01 f303 	lsl.w	r3, r1, r3
 8006052:	43d9      	mvns	r1, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006058:	4313      	orrs	r3, r2
         );
}
 800605a:	4618      	mov	r0, r3
 800605c:	3724      	adds	r7, #36	; 0x24
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
	...

08006068 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b082      	sub	sp, #8
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	3b01      	subs	r3, #1
 8006074:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006078:	d301      	bcc.n	800607e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800607a:	2301      	movs	r3, #1
 800607c:	e00f      	b.n	800609e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800607e:	4a0a      	ldr	r2, [pc, #40]	; (80060a8 <SysTick_Config+0x40>)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	3b01      	subs	r3, #1
 8006084:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006086:	210f      	movs	r1, #15
 8006088:	f04f 30ff 	mov.w	r0, #4294967295
 800608c:	f7ff ff8e 	bl	8005fac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006090:	4b05      	ldr	r3, [pc, #20]	; (80060a8 <SysTick_Config+0x40>)
 8006092:	2200      	movs	r2, #0
 8006094:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006096:	4b04      	ldr	r3, [pc, #16]	; (80060a8 <SysTick_Config+0x40>)
 8006098:	2207      	movs	r2, #7
 800609a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3708      	adds	r7, #8
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	e000e010 	.word	0xe000e010

080060ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f7ff ff29 	bl	8005f0c <__NVIC_SetPriorityGrouping>
}
 80060ba:	bf00      	nop
 80060bc:	3708      	adds	r7, #8
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b086      	sub	sp, #24
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	4603      	mov	r3, r0
 80060ca:	60b9      	str	r1, [r7, #8]
 80060cc:	607a      	str	r2, [r7, #4]
 80060ce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80060d0:	f7ff ff40 	bl	8005f54 <__NVIC_GetPriorityGrouping>
 80060d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	68b9      	ldr	r1, [r7, #8]
 80060da:	6978      	ldr	r0, [r7, #20]
 80060dc:	f7ff ff90 	bl	8006000 <NVIC_EncodePriority>
 80060e0:	4602      	mov	r2, r0
 80060e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060e6:	4611      	mov	r1, r2
 80060e8:	4618      	mov	r0, r3
 80060ea:	f7ff ff5f 	bl	8005fac <__NVIC_SetPriority>
}
 80060ee:	bf00      	nop
 80060f0:	3718      	adds	r7, #24
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b082      	sub	sp, #8
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	4603      	mov	r3, r0
 80060fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006104:	4618      	mov	r0, r3
 8006106:	f7ff ff33 	bl	8005f70 <__NVIC_EnableIRQ>
}
 800610a:	bf00      	nop
 800610c:	3708      	adds	r7, #8
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}

08006112 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006112:	b580      	push	{r7, lr}
 8006114:	b082      	sub	sp, #8
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f7ff ffa4 	bl	8006068 <SysTick_Config>
 8006120:	4603      	mov	r3, r0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3708      	adds	r7, #8
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800612a:	b580      	push	{r7, lr}
 800612c:	b082      	sub	sp, #8
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d101      	bne.n	800613c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	e014      	b.n	8006166 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	791b      	ldrb	r3, [r3, #4]
 8006140:	b2db      	uxtb	r3, r3
 8006142:	2b00      	cmp	r3, #0
 8006144:	d105      	bne.n	8006152 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f7fc fda9 	bl	8002ca4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2202      	movs	r2, #2
 8006156:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2201      	movs	r2, #1
 8006162:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006164:	2300      	movs	r3, #0
}
 8006166:	4618      	mov	r0, r3
 8006168:	3708      	adds	r7, #8
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b082      	sub	sp, #8
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
 8006176:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	795b      	ldrb	r3, [r3, #5]
 800617c:	2b01      	cmp	r3, #1
 800617e:	d101      	bne.n	8006184 <HAL_DAC_Start+0x16>
 8006180:	2302      	movs	r3, #2
 8006182:	e043      	b.n	800620c <HAL_DAC_Start+0x9e>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2202      	movs	r2, #2
 800618e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	6819      	ldr	r1, [r3, #0]
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	f003 0310 	and.w	r3, r3, #16
 800619c:	2201      	movs	r2, #1
 800619e:	409a      	lsls	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	430a      	orrs	r2, r1
 80061a6:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 80061a8:	2001      	movs	r0, #1
 80061aa:	f7fd fe2d 	bl	8003e08 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d10f      	bne.n	80061d4 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d11d      	bne.n	80061fe <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	685a      	ldr	r2, [r3, #4]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f042 0201 	orr.w	r2, r2, #1
 80061d0:	605a      	str	r2, [r3, #4]
 80061d2:	e014      	b.n	80061fe <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	f003 0310 	and.w	r3, r3, #16
 80061e4:	2102      	movs	r1, #2
 80061e6:	fa01 f303 	lsl.w	r3, r1, r3
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d107      	bne.n	80061fe <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	685a      	ldr	r2, [r3, #4]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f042 0202 	orr.w	r2, r2, #2
 80061fc:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2201      	movs	r2, #1
 8006202:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3708      	adds	r7, #8
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8006214:	b480      	push	{r7}
 8006216:	b087      	sub	sp, #28
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	607a      	str	r2, [r7, #4]
 8006220:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8006222:	2300      	movs	r3, #0
 8006224:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d105      	bne.n	8006244 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8006238:	697a      	ldr	r2, [r7, #20]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4413      	add	r3, r2
 800623e:	3308      	adds	r3, #8
 8006240:	617b      	str	r3, [r7, #20]
 8006242:	e004      	b.n	800624e <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8006244:	697a      	ldr	r2, [r7, #20]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4413      	add	r3, r2
 800624a:	3314      	adds	r3, #20
 800624c:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	461a      	mov	r2, r3
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	371c      	adds	r7, #28
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b08a      	sub	sp, #40	; 0x28
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	795b      	ldrb	r3, [r3, #5]
 8006274:	2b01      	cmp	r3, #1
 8006276:	d101      	bne.n	800627c <HAL_DAC_ConfigChannel+0x18>
 8006278:	2302      	movs	r3, #2
 800627a:	e192      	b.n	80065a2 <HAL_DAC_ConfigChannel+0x33e>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2201      	movs	r2, #1
 8006280:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2202      	movs	r2, #2
 8006286:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	2b04      	cmp	r3, #4
 800628e:	d174      	bne.n	800637a <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8006290:	f7fd fdae 	bl	8003df0 <HAL_GetTick>
 8006294:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d134      	bne.n	8006306 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800629c:	e011      	b.n	80062c2 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800629e:	f7fd fda7 	bl	8003df0 <HAL_GetTick>
 80062a2:	4602      	mov	r2, r0
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	1ad3      	subs	r3, r2, r3
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d90a      	bls.n	80062c2 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	691b      	ldr	r3, [r3, #16]
 80062b0:	f043 0208 	orr.w	r2, r3, #8
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2203      	movs	r2, #3
 80062bc:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80062be:	2303      	movs	r3, #3
 80062c0:	e16f      	b.n	80065a2 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d1e6      	bne.n	800629e <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 80062d0:	2001      	movs	r0, #1
 80062d2:	f7fd fd99 	bl	8003e08 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68ba      	ldr	r2, [r7, #8]
 80062dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80062de:	641a      	str	r2, [r3, #64]	; 0x40
 80062e0:	e01e      	b.n	8006320 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80062e2:	f7fd fd85 	bl	8003df0 <HAL_GetTick>
 80062e6:	4602      	mov	r2, r0
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	1ad3      	subs	r3, r2, r3
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d90a      	bls.n	8006306 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	691b      	ldr	r3, [r3, #16]
 80062f4:	f043 0208 	orr.w	r2, r3, #8
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2203      	movs	r2, #3
 8006300:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8006302:	2303      	movs	r3, #3
 8006304:	e14d      	b.n	80065a2 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800630c:	2b00      	cmp	r3, #0
 800630e:	dbe8      	blt.n	80062e2 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8006310:	2001      	movs	r0, #1
 8006312:	f7fd fd79 	bl	8003e08 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68ba      	ldr	r2, [r7, #8]
 800631c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800631e:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f003 0310 	and.w	r3, r3, #16
 800632c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006330:	fa01 f303 	lsl.w	r3, r1, r3
 8006334:	43db      	mvns	r3, r3
 8006336:	ea02 0103 	and.w	r1, r2, r3
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f003 0310 	and.w	r3, r3, #16
 8006344:	409a      	lsls	r2, r3
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	430a      	orrs	r2, r1
 800634c:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f003 0310 	and.w	r3, r3, #16
 800635a:	21ff      	movs	r1, #255	; 0xff
 800635c:	fa01 f303 	lsl.w	r3, r1, r3
 8006360:	43db      	mvns	r3, r3
 8006362:	ea02 0103 	and.w	r1, r2, r3
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f003 0310 	and.w	r3, r3, #16
 8006370:	409a      	lsls	r2, r3
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	430a      	orrs	r2, r1
 8006378:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	69db      	ldr	r3, [r3, #28]
 800637e:	2b01      	cmp	r3, #1
 8006380:	d11d      	bne.n	80063be <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006388:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f003 0310 	and.w	r3, r3, #16
 8006390:	221f      	movs	r2, #31
 8006392:	fa02 f303 	lsl.w	r3, r2, r3
 8006396:	43db      	mvns	r3, r3
 8006398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800639a:	4013      	ands	r3, r2
 800639c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	6a1b      	ldr	r3, [r3, #32]
 80063a2:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f003 0310 	and.w	r3, r3, #16
 80063aa:	69ba      	ldr	r2, [r7, #24]
 80063ac:	fa02 f303 	lsl.w	r3, r2, r3
 80063b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063b2:	4313      	orrs	r3, r2
 80063b4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063bc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063c4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f003 0310 	and.w	r3, r3, #16
 80063cc:	2207      	movs	r2, #7
 80063ce:	fa02 f303 	lsl.w	r3, r2, r3
 80063d2:	43db      	mvns	r3, r3
 80063d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063d6:	4013      	ands	r3, r2
 80063d8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	699b      	ldr	r3, [r3, #24]
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d102      	bne.n	80063e8 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 80063e2:	2300      	movs	r3, #0
 80063e4:	623b      	str	r3, [r7, #32]
 80063e6:	e00f      	b.n	8006408 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	699b      	ldr	r3, [r3, #24]
 80063ec:	2b02      	cmp	r3, #2
 80063ee:	d102      	bne.n	80063f6 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80063f0:	2301      	movs	r3, #1
 80063f2:	623b      	str	r3, [r7, #32]
 80063f4:	e008      	b.n	8006408 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	695b      	ldr	r3, [r3, #20]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d102      	bne.n	8006404 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80063fe:	2301      	movs	r3, #1
 8006400:	623b      	str	r3, [r7, #32]
 8006402:	e001      	b.n	8006408 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8006404:	2300      	movs	r3, #0
 8006406:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	689a      	ldr	r2, [r3, #8]
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	695b      	ldr	r3, [r3, #20]
 8006410:	4313      	orrs	r3, r2
 8006412:	6a3a      	ldr	r2, [r7, #32]
 8006414:	4313      	orrs	r3, r2
 8006416:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f003 0310 	and.w	r3, r3, #16
 800641e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006422:	fa02 f303 	lsl.w	r3, r2, r3
 8006426:	43db      	mvns	r3, r3
 8006428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800642a:	4013      	ands	r3, r2
 800642c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	791b      	ldrb	r3, [r3, #4]
 8006432:	2b01      	cmp	r3, #1
 8006434:	d102      	bne.n	800643c <HAL_DAC_ConfigChannel+0x1d8>
 8006436:	f44f 7380 	mov.w	r3, #256	; 0x100
 800643a:	e000      	b.n	800643e <HAL_DAC_ConfigChannel+0x1da>
 800643c:	2300      	movs	r3, #0
 800643e:	69ba      	ldr	r2, [r7, #24]
 8006440:	4313      	orrs	r3, r2
 8006442:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f003 0310 	and.w	r3, r3, #16
 800644a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800644e:	fa02 f303 	lsl.w	r3, r2, r3
 8006452:	43db      	mvns	r3, r3
 8006454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006456:	4013      	ands	r3, r2
 8006458:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	795b      	ldrb	r3, [r3, #5]
 800645e:	2b01      	cmp	r3, #1
 8006460:	d102      	bne.n	8006468 <HAL_DAC_ConfigChannel+0x204>
 8006462:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006466:	e000      	b.n	800646a <HAL_DAC_ConfigChannel+0x206>
 8006468:	2300      	movs	r3, #0
 800646a:	69ba      	ldr	r2, [r7, #24]
 800646c:	4313      	orrs	r3, r2
 800646e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8006470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006472:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8006476:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2b02      	cmp	r3, #2
 800647e:	d114      	bne.n	80064aa <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8006480:	f002 f9d2 	bl	8008828 <HAL_RCC_GetHCLKFreq>
 8006484:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	4a48      	ldr	r2, [pc, #288]	; (80065ac <HAL_DAC_ConfigChannel+0x348>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d904      	bls.n	8006498 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800648e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006490:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006494:	627b      	str	r3, [r7, #36]	; 0x24
 8006496:	e00f      	b.n	80064b8 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	4a45      	ldr	r2, [pc, #276]	; (80065b0 <HAL_DAC_ConfigChannel+0x34c>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d90a      	bls.n	80064b6 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80064a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80064a6:	627b      	str	r3, [r7, #36]	; 0x24
 80064a8:	e006      	b.n	80064b8 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064b0:	4313      	orrs	r3, r2
 80064b2:	627b      	str	r3, [r7, #36]	; 0x24
 80064b4:	e000      	b.n	80064b8 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80064b6:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f003 0310 	and.w	r3, r3, #16
 80064be:	69ba      	ldr	r2, [r7, #24]
 80064c0:	fa02 f303 	lsl.w	r3, r2, r3
 80064c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064c6:	4313      	orrs	r3, r2
 80064c8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	6819      	ldr	r1, [r3, #0]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f003 0310 	and.w	r3, r3, #16
 80064de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80064e2:	fa02 f303 	lsl.w	r3, r2, r3
 80064e6:	43da      	mvns	r2, r3
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	400a      	ands	r2, r1
 80064ee:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f003 0310 	and.w	r3, r3, #16
 80064fe:	f640 72fe 	movw	r2, #4094	; 0xffe
 8006502:	fa02 f303 	lsl.w	r3, r2, r3
 8006506:	43db      	mvns	r3, r3
 8006508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800650a:	4013      	ands	r3, r2
 800650c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f003 0310 	and.w	r3, r3, #16
 800651a:	69ba      	ldr	r2, [r7, #24]
 800651c:	fa02 f303 	lsl.w	r3, r2, r3
 8006520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006522:	4313      	orrs	r3, r2
 8006524:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800652c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	6819      	ldr	r1, [r3, #0]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f003 0310 	and.w	r3, r3, #16
 800653a:	22c0      	movs	r2, #192	; 0xc0
 800653c:	fa02 f303 	lsl.w	r3, r2, r3
 8006540:	43da      	mvns	r2, r3
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	400a      	ands	r2, r1
 8006548:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	089b      	lsrs	r3, r3, #2
 8006550:	f003 030f 	and.w	r3, r3, #15
 8006554:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	089b      	lsrs	r3, r3, #2
 800655c:	021b      	lsls	r3, r3, #8
 800655e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006562:	69ba      	ldr	r2, [r7, #24]
 8006564:	4313      	orrs	r3, r2
 8006566:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f003 0310 	and.w	r3, r3, #16
 8006574:	f640 710f 	movw	r1, #3855	; 0xf0f
 8006578:	fa01 f303 	lsl.w	r3, r1, r3
 800657c:	43db      	mvns	r3, r3
 800657e:	ea02 0103 	and.w	r1, r2, r3
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f003 0310 	and.w	r3, r3, #16
 8006588:	69ba      	ldr	r2, [r7, #24]
 800658a:	409a      	lsls	r2, r3
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	430a      	orrs	r2, r1
 8006592:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2201      	movs	r2, #1
 8006598:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2200      	movs	r2, #0
 800659e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3728      	adds	r7, #40	; 0x28
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	09896800 	.word	0x09896800
 80065b0:	04c4b400 	.word	0x04c4b400

080065b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d101      	bne.n	80065c6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e08d      	b.n	80066e2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	461a      	mov	r2, r3
 80065cc:	4b47      	ldr	r3, [pc, #284]	; (80066ec <HAL_DMA_Init+0x138>)
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d80f      	bhi.n	80065f2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	461a      	mov	r2, r3
 80065d8:	4b45      	ldr	r3, [pc, #276]	; (80066f0 <HAL_DMA_Init+0x13c>)
 80065da:	4413      	add	r3, r2
 80065dc:	4a45      	ldr	r2, [pc, #276]	; (80066f4 <HAL_DMA_Init+0x140>)
 80065de:	fba2 2303 	umull	r2, r3, r2, r3
 80065e2:	091b      	lsrs	r3, r3, #4
 80065e4:	009a      	lsls	r2, r3, #2
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a42      	ldr	r2, [pc, #264]	; (80066f8 <HAL_DMA_Init+0x144>)
 80065ee:	641a      	str	r2, [r3, #64]	; 0x40
 80065f0:	e00e      	b.n	8006610 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	461a      	mov	r2, r3
 80065f8:	4b40      	ldr	r3, [pc, #256]	; (80066fc <HAL_DMA_Init+0x148>)
 80065fa:	4413      	add	r3, r2
 80065fc:	4a3d      	ldr	r2, [pc, #244]	; (80066f4 <HAL_DMA_Init+0x140>)
 80065fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006602:	091b      	lsrs	r3, r3, #4
 8006604:	009a      	lsls	r2, r3, #2
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a3c      	ldr	r2, [pc, #240]	; (8006700 <HAL_DMA_Init+0x14c>)
 800660e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2202      	movs	r2, #2
 8006614:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800662a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006634:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006640:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800664c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a1b      	ldr	r3, [r3, #32]
 8006652:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	4313      	orrs	r3, r2
 8006658:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 fa76 	bl	8006b54 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006670:	d102      	bne.n	8006678 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	685a      	ldr	r2, [r3, #4]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006680:	b2d2      	uxtb	r2, r2
 8006682:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800668c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d010      	beq.n	80066b8 <HAL_DMA_Init+0x104>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	2b04      	cmp	r3, #4
 800669c:	d80c      	bhi.n	80066b8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 fa96 	bl	8006bd0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066a8:	2200      	movs	r2, #0
 80066aa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80066b4:	605a      	str	r2, [r3, #4]
 80066b6:	e008      	b.n	80066ca <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3710      	adds	r7, #16
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	40020407 	.word	0x40020407
 80066f0:	bffdfff8 	.word	0xbffdfff8
 80066f4:	cccccccd 	.word	0xcccccccd
 80066f8:	40020000 	.word	0x40020000
 80066fc:	bffdfbf8 	.word	0xbffdfbf8
 8006700:	40020400 	.word	0x40020400

08006704 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b086      	sub	sp, #24
 8006708:	af00      	add	r7, sp, #0
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	607a      	str	r2, [r7, #4]
 8006710:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006712:	2300      	movs	r3, #0
 8006714:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800671c:	2b01      	cmp	r3, #1
 800671e:	d101      	bne.n	8006724 <HAL_DMA_Start_IT+0x20>
 8006720:	2302      	movs	r3, #2
 8006722:	e066      	b.n	80067f2 <HAL_DMA_Start_IT+0xee>
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006732:	b2db      	uxtb	r3, r3
 8006734:	2b01      	cmp	r3, #1
 8006736:	d155      	bne.n	80067e4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2202      	movs	r2, #2
 800673c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2200      	movs	r2, #0
 8006744:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f022 0201 	bic.w	r2, r2, #1
 8006754:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	68b9      	ldr	r1, [r7, #8]
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f000 f9bb 	bl	8006ad8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006766:	2b00      	cmp	r3, #0
 8006768:	d008      	beq.n	800677c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f042 020e 	orr.w	r2, r2, #14
 8006778:	601a      	str	r2, [r3, #0]
 800677a:	e00f      	b.n	800679c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f022 0204 	bic.w	r2, r2, #4
 800678a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f042 020a 	orr.w	r2, r2, #10
 800679a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d007      	beq.n	80067ba <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067b8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d007      	beq.n	80067d2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067d0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f042 0201 	orr.w	r2, r2, #1
 80067e0:	601a      	str	r2, [r3, #0]
 80067e2:	e005      	b.n	80067f0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80067ec:	2302      	movs	r3, #2
 80067ee:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80067f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3718      	adds	r7, #24
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}

080067fa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80067fa:	b480      	push	{r7}
 80067fc:	b085      	sub	sp, #20
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006802:	2300      	movs	r3, #0
 8006804:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800680c:	b2db      	uxtb	r3, r3
 800680e:	2b02      	cmp	r3, #2
 8006810:	d005      	beq.n	800681e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2204      	movs	r2, #4
 8006816:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	73fb      	strb	r3, [r7, #15]
 800681c:	e037      	b.n	800688e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f022 020e 	bic.w	r2, r2, #14
 800682c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006838:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800683c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f022 0201 	bic.w	r2, r2, #1
 800684c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006852:	f003 021f 	and.w	r2, r3, #31
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685a:	2101      	movs	r1, #1
 800685c:	fa01 f202 	lsl.w	r2, r1, r2
 8006860:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800686a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006870:	2b00      	cmp	r3, #0
 8006872:	d00c      	beq.n	800688e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800687e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006882:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800688c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2201      	movs	r2, #1
 8006892:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800689e:	7bfb      	ldrb	r3, [r7, #15]
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3714      	adds	r7, #20
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068b4:	2300      	movs	r3, #0
 80068b6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	2b02      	cmp	r3, #2
 80068c2:	d00d      	beq.n	80068e0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2204      	movs	r2, #4
 80068c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2201      	movs	r2, #1
 80068ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	73fb      	strb	r3, [r7, #15]
 80068de:	e047      	b.n	8006970 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f022 020e 	bic.w	r2, r2, #14
 80068ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f022 0201 	bic.w	r2, r2, #1
 80068fe:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800690a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800690e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006914:	f003 021f 	and.w	r2, r3, #31
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691c:	2101      	movs	r1, #1
 800691e:	fa01 f202 	lsl.w	r2, r1, r2
 8006922:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800692c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00c      	beq.n	8006950 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006940:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006944:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800694e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006964:	2b00      	cmp	r3, #0
 8006966:	d003      	beq.n	8006970 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	4798      	blx	r3
    }
  }
  return status;
 8006970:	7bfb      	ldrb	r3, [r7, #15]
}
 8006972:	4618      	mov	r0, r3
 8006974:	3710      	adds	r7, #16
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}

0800697a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800697a:	b580      	push	{r7, lr}
 800697c:	b084      	sub	sp, #16
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006996:	f003 031f 	and.w	r3, r3, #31
 800699a:	2204      	movs	r2, #4
 800699c:	409a      	lsls	r2, r3
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	4013      	ands	r3, r2
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d026      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x7a>
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	f003 0304 	and.w	r3, r3, #4
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d021      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 0320 	and.w	r3, r3, #32
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d107      	bne.n	80069ce <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f022 0204 	bic.w	r2, r2, #4
 80069cc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069d2:	f003 021f 	and.w	r2, r3, #31
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069da:	2104      	movs	r1, #4
 80069dc:	fa01 f202 	lsl.w	r2, r1, r2
 80069e0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d071      	beq.n	8006ace <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80069f2:	e06c      	b.n	8006ace <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069f8:	f003 031f 	and.w	r3, r3, #31
 80069fc:	2202      	movs	r2, #2
 80069fe:	409a      	lsls	r2, r3
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	4013      	ands	r3, r2
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d02e      	beq.n	8006a66 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	f003 0302 	and.w	r3, r3, #2
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d029      	beq.n	8006a66 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 0320 	and.w	r3, r3, #32
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d10b      	bne.n	8006a38 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f022 020a 	bic.w	r2, r2, #10
 8006a2e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a3c:	f003 021f 	and.w	r2, r3, #31
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a44:	2102      	movs	r1, #2
 8006a46:	fa01 f202 	lsl.w	r2, r1, r2
 8006a4a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d038      	beq.n	8006ace <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006a64:	e033      	b.n	8006ace <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a6a:	f003 031f 	and.w	r3, r3, #31
 8006a6e:	2208      	movs	r2, #8
 8006a70:	409a      	lsls	r2, r3
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	4013      	ands	r3, r2
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d02a      	beq.n	8006ad0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	f003 0308 	and.w	r3, r3, #8
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d025      	beq.n	8006ad0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f022 020e 	bic.w	r2, r2, #14
 8006a92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a98:	f003 021f 	and.w	r2, r3, #31
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa0:	2101      	movs	r1, #1
 8006aa2:	fa01 f202 	lsl.w	r2, r1, r2
 8006aa6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d004      	beq.n	8006ad0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006ace:	bf00      	nop
 8006ad0:	bf00      	nop
}
 8006ad2:	3710      	adds	r7, #16
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b085      	sub	sp, #20
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	607a      	str	r2, [r7, #4]
 8006ae4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006aea:	68fa      	ldr	r2, [r7, #12]
 8006aec:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006aee:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d004      	beq.n	8006b02 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006b00:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b06:	f003 021f 	and.w	r2, r3, #31
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b0e:	2101      	movs	r1, #1
 8006b10:	fa01 f202 	lsl.w	r2, r1, r2
 8006b14:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	683a      	ldr	r2, [r7, #0]
 8006b1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	2b10      	cmp	r3, #16
 8006b24:	d108      	bne.n	8006b38 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	68ba      	ldr	r2, [r7, #8]
 8006b34:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006b36:	e007      	b.n	8006b48 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68ba      	ldr	r2, [r7, #8]
 8006b3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	60da      	str	r2, [r3, #12]
}
 8006b48:	bf00      	nop
 8006b4a:	3714      	adds	r7, #20
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b087      	sub	sp, #28
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	461a      	mov	r2, r3
 8006b62:	4b16      	ldr	r3, [pc, #88]	; (8006bbc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d802      	bhi.n	8006b6e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006b68:	4b15      	ldr	r3, [pc, #84]	; (8006bc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006b6a:	617b      	str	r3, [r7, #20]
 8006b6c:	e001      	b.n	8006b72 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8006b6e:	4b15      	ldr	r3, [pc, #84]	; (8006bc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006b70:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	3b08      	subs	r3, #8
 8006b7e:	4a12      	ldr	r2, [pc, #72]	; (8006bc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006b80:	fba2 2303 	umull	r2, r3, r2, r3
 8006b84:	091b      	lsrs	r3, r3, #4
 8006b86:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b8c:	089b      	lsrs	r3, r3, #2
 8006b8e:	009a      	lsls	r2, r3, #2
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	4413      	add	r3, r2
 8006b94:	461a      	mov	r2, r3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a0b      	ldr	r2, [pc, #44]	; (8006bcc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006b9e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f003 031f 	and.w	r3, r3, #31
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	409a      	lsls	r2, r3
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006bae:	bf00      	nop
 8006bb0:	371c      	adds	r7, #28
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr
 8006bba:	bf00      	nop
 8006bbc:	40020407 	.word	0x40020407
 8006bc0:	40020800 	.word	0x40020800
 8006bc4:	40020820 	.word	0x40020820
 8006bc8:	cccccccd 	.word	0xcccccccd
 8006bcc:	40020880 	.word	0x40020880

08006bd0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b085      	sub	sp, #20
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006be0:	68fa      	ldr	r2, [r7, #12]
 8006be2:	4b0b      	ldr	r3, [pc, #44]	; (8006c10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006be4:	4413      	add	r3, r2
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	461a      	mov	r2, r3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a08      	ldr	r2, [pc, #32]	; (8006c14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006bf2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	3b01      	subs	r3, #1
 8006bf8:	f003 031f 	and.w	r3, r3, #31
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	409a      	lsls	r2, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8006c04:	bf00      	nop
 8006c06:	3714      	adds	r7, #20
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr
 8006c10:	1000823f 	.word	0x1000823f
 8006c14:	40020940 	.word	0x40020940

08006c18 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d101      	bne.n	8006c2a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e147      	b.n	8006eba <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d106      	bne.n	8006c44 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f7fc f91c 	bl	8002e7c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	699a      	ldr	r2, [r3, #24]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f022 0210 	bic.w	r2, r2, #16
 8006c52:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006c54:	f7fd f8cc 	bl	8003df0 <HAL_GetTick>
 8006c58:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006c5a:	e012      	b.n	8006c82 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006c5c:	f7fd f8c8 	bl	8003df0 <HAL_GetTick>
 8006c60:	4602      	mov	r2, r0
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	1ad3      	subs	r3, r2, r3
 8006c66:	2b0a      	cmp	r3, #10
 8006c68:	d90b      	bls.n	8006c82 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c6e:	f043 0201 	orr.w	r2, r3, #1
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2203      	movs	r2, #3
 8006c7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e11b      	b.n	8006eba <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	699b      	ldr	r3, [r3, #24]
 8006c88:	f003 0308 	and.w	r3, r3, #8
 8006c8c:	2b08      	cmp	r3, #8
 8006c8e:	d0e5      	beq.n	8006c5c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	699a      	ldr	r2, [r3, #24]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f042 0201 	orr.w	r2, r2, #1
 8006c9e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006ca0:	f7fd f8a6 	bl	8003df0 <HAL_GetTick>
 8006ca4:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006ca6:	e012      	b.n	8006cce <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006ca8:	f7fd f8a2 	bl	8003df0 <HAL_GetTick>
 8006cac:	4602      	mov	r2, r0
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	2b0a      	cmp	r3, #10
 8006cb4:	d90b      	bls.n	8006cce <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cba:	f043 0201 	orr.w	r2, r3, #1
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2203      	movs	r2, #3
 8006cc6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e0f5      	b.n	8006eba <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	699b      	ldr	r3, [r3, #24]
 8006cd4:	f003 0301 	and.w	r3, r3, #1
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d0e5      	beq.n	8006ca8 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	699a      	ldr	r2, [r3, #24]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f042 0202 	orr.w	r2, r2, #2
 8006cea:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a74      	ldr	r2, [pc, #464]	; (8006ec4 <HAL_FDCAN_Init+0x2ac>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d103      	bne.n	8006cfe <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8006cf6:	4a74      	ldr	r2, [pc, #464]	; (8006ec8 <HAL_FDCAN_Init+0x2b0>)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	7c1b      	ldrb	r3, [r3, #16]
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d108      	bne.n	8006d18 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	699a      	ldr	r2, [r3, #24]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d14:	619a      	str	r2, [r3, #24]
 8006d16:	e007      	b.n	8006d28 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	699a      	ldr	r2, [r3, #24]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d26:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	7c5b      	ldrb	r3, [r3, #17]
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d108      	bne.n	8006d42 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	699a      	ldr	r2, [r3, #24]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d3e:	619a      	str	r2, [r3, #24]
 8006d40:	e007      	b.n	8006d52 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	699a      	ldr	r2, [r3, #24]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006d50:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	7c9b      	ldrb	r3, [r3, #18]
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d108      	bne.n	8006d6c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	699a      	ldr	r2, [r3, #24]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006d68:	619a      	str	r2, [r3, #24]
 8006d6a:	e007      	b.n	8006d7c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	699a      	ldr	r2, [r3, #24]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006d7a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	699b      	ldr	r3, [r3, #24]
 8006d82:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	689a      	ldr	r2, [r3, #8]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	430a      	orrs	r2, r1
 8006d90:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	699a      	ldr	r2, [r3, #24]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8006da0:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	691a      	ldr	r2, [r3, #16]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f022 0210 	bic.w	r2, r2, #16
 8006db0:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	68db      	ldr	r3, [r3, #12]
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d108      	bne.n	8006dcc <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	699a      	ldr	r2, [r3, #24]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f042 0204 	orr.w	r2, r2, #4
 8006dc8:	619a      	str	r2, [r3, #24]
 8006dca:	e02c      	b.n	8006e26 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d028      	beq.n	8006e26 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	2b02      	cmp	r3, #2
 8006dda:	d01c      	beq.n	8006e16 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	699a      	ldr	r2, [r3, #24]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006dea:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	691a      	ldr	r2, [r3, #16]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f042 0210 	orr.w	r2, r2, #16
 8006dfa:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	2b03      	cmp	r3, #3
 8006e02:	d110      	bne.n	8006e26 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	699a      	ldr	r2, [r3, #24]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f042 0220 	orr.w	r2, r2, #32
 8006e12:	619a      	str	r2, [r3, #24]
 8006e14:	e007      	b.n	8006e26 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	699a      	ldr	r2, [r3, #24]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f042 0220 	orr.w	r2, r2, #32
 8006e24:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	699b      	ldr	r3, [r3, #24]
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	69db      	ldr	r3, [r3, #28]
 8006e32:	3b01      	subs	r3, #1
 8006e34:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006e36:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6a1b      	ldr	r3, [r3, #32]
 8006e3c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006e3e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	695b      	ldr	r3, [r3, #20]
 8006e46:	3b01      	subs	r3, #1
 8006e48:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006e4e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006e50:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e5a:	d115      	bne.n	8006e88 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e60:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e66:	3b01      	subs	r3, #1
 8006e68:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006e6a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e70:	3b01      	subs	r3, #1
 8006e72:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006e74:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7c:	3b01      	subs	r3, #1
 8006e7e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006e84:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006e86:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	430a      	orrs	r2, r1
 8006e9a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 fbe2 	bl	8007668 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3710      	adds	r7, #16
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	bf00      	nop
 8006ec4:	40006400 	.word	0x40006400
 8006ec8:	40006500 	.word	0x40006500

08006ecc <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d110      	bne.n	8006f02 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2202      	movs	r2, #2
 8006ee4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	699a      	ldr	r2, [r3, #24]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f022 0201 	bic.w	r2, r2, #1
 8006ef6:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8006efe:	2300      	movs	r3, #0
 8006f00:	e006      	b.n	8006f10 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f06:	f043 0204 	orr.w	r2, r3, #4
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
  }
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	370c      	adds	r7, #12
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b086      	sub	sp, #24
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	2b02      	cmp	r3, #2
 8006f32:	d12c      	bne.n	8006f8e <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8006f3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d007      	beq.n	8006f54 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f48:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e023      	b.n	8006f9c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8006f5c:	0c1b      	lsrs	r3, r3, #16
 8006f5e:	f003 0303 	and.w	r3, r3, #3
 8006f62:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	68b9      	ldr	r1, [r7, #8]
 8006f6a:	68f8      	ldr	r0, [r7, #12]
 8006f6c:	f000 fbd2 	bl	8007714 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2101      	movs	r1, #1
 8006f76:	697a      	ldr	r2, [r7, #20]
 8006f78:	fa01 f202 	lsl.w	r2, r1, r2
 8006f7c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8006f80:	2201      	movs	r2, #1
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	409a      	lsls	r2, r3
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	e006      	b.n	8006f9c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f92:	f043 0208 	orr.w	r2, r3, #8
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
  }
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3718      	adds	r7, #24
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b08b      	sub	sp, #44	; 0x2c
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	607a      	str	r2, [r7, #4]
 8006fb0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006fb8:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8006fba:	7efb      	ldrb	r3, [r7, #27]
 8006fbc:	2b02      	cmp	r3, #2
 8006fbe:	f040 80bc 	bne.w	800713a <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	2b40      	cmp	r3, #64	; 0x40
 8006fc6:	d121      	bne.n	800700c <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fd0:	f003 030f 	and.w	r3, r3, #15
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d107      	bne.n	8006fe8 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fdc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	e0af      	b.n	8007148 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ff0:	0a1b      	lsrs	r3, r3, #8
 8006ff2:	f003 0303 	and.w	r3, r3, #3
 8006ff6:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8006ffc:	69fa      	ldr	r2, [r7, #28]
 8006ffe:	4613      	mov	r3, r2
 8007000:	00db      	lsls	r3, r3, #3
 8007002:	4413      	add	r3, r2
 8007004:	00db      	lsls	r3, r3, #3
 8007006:	440b      	add	r3, r1
 8007008:	627b      	str	r3, [r7, #36]	; 0x24
 800700a:	e020      	b.n	800704e <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007014:	f003 030f 	and.w	r3, r3, #15
 8007018:	2b00      	cmp	r3, #0
 800701a:	d107      	bne.n	800702c <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007020:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	e08d      	b.n	8007148 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007034:	0a1b      	lsrs	r3, r3, #8
 8007036:	f003 0303 	and.w	r3, r3, #3
 800703a:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007040:	69fa      	ldr	r2, [r7, #28]
 8007042:	4613      	mov	r3, r2
 8007044:	00db      	lsls	r3, r3, #3
 8007046:	4413      	add	r3, r2
 8007048:	00db      	lsls	r3, r3, #3
 800704a:	440b      	add	r3, r1
 800704c:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800704e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d107      	bne.n	8007072 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8007062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	0c9b      	lsrs	r3, r3, #18
 8007068:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	601a      	str	r2, [r3, #0]
 8007070:	e005      	b.n	800707e <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8007072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800707e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800708a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8007096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007098:	3304      	adds	r3, #4
 800709a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800709c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	b29a      	uxth	r2, r3
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80070a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80070b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80070be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80070ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	0e1b      	lsrs	r3, r3, #24
 80070d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80070d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	0fda      	lsrs	r2, r3, #31
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80070e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e4:	3304      	adds	r3, #4
 80070e6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80070e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ea:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80070ec:	2300      	movs	r3, #0
 80070ee:	623b      	str	r3, [r7, #32]
 80070f0:	e00a      	b.n	8007108 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	6a3b      	ldr	r3, [r7, #32]
 80070f6:	441a      	add	r2, r3
 80070f8:	6839      	ldr	r1, [r7, #0]
 80070fa:	6a3b      	ldr	r3, [r7, #32]
 80070fc:	440b      	add	r3, r1
 80070fe:	7812      	ldrb	r2, [r2, #0]
 8007100:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8007102:	6a3b      	ldr	r3, [r7, #32]
 8007104:	3301      	adds	r3, #1
 8007106:	623b      	str	r3, [r7, #32]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	0c1b      	lsrs	r3, r3, #16
 800710e:	4a11      	ldr	r2, [pc, #68]	; (8007154 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8007110:	5cd3      	ldrb	r3, [r2, r3]
 8007112:	461a      	mov	r2, r3
 8007114:	6a3b      	ldr	r3, [r7, #32]
 8007116:	4293      	cmp	r3, r2
 8007118:	d3eb      	bcc.n	80070f2 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	2b40      	cmp	r3, #64	; 0x40
 800711e:	d105      	bne.n	800712c <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	69fa      	ldr	r2, [r7, #28]
 8007126:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800712a:	e004      	b.n	8007136 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	69fa      	ldr	r2, [r7, #28]
 8007132:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8007136:	2300      	movs	r3, #0
 8007138:	e006      	b.n	8007148 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800713e:	f043 0208 	orr.w	r2, r3, #8
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007146:	2301      	movs	r3, #1
  }
}
 8007148:	4618      	mov	r0, r3
 800714a:	372c      	adds	r7, #44	; 0x2c
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr
 8007154:	0800d49c 	.word	0x0800d49c

08007158 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8007158:	b480      	push	{r7}
 800715a:	b087      	sub	sp, #28
 800715c:	af00      	add	r7, sp, #0
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
 8007162:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800716a:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800716c:	7dfb      	ldrb	r3, [r7, #23]
 800716e:	2b01      	cmp	r3, #1
 8007170:	d003      	beq.n	800717a <HAL_FDCAN_ActivateNotification+0x22>
 8007172:	7dfb      	ldrb	r3, [r7, #23]
 8007174:	2b02      	cmp	r3, #2
 8007176:	f040 80c8 	bne.w	800730a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007180:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	f003 0307 	and.w	r3, r3, #7
 8007188:	2b00      	cmp	r3, #0
 800718a:	d004      	beq.n	8007196 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	f003 0301 	and.w	r3, r3, #1
 8007192:	2b00      	cmp	r3, #0
 8007194:	d03b      	beq.n	800720e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800719c:	2b00      	cmp	r3, #0
 800719e:	d004      	beq.n	80071aa <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	f003 0302 	and.w	r3, r3, #2
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d031      	beq.n	800720e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d004      	beq.n	80071be <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	f003 0304 	and.w	r3, r3, #4
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d027      	beq.n	800720e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d004      	beq.n	80071d2 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	f003 0308 	and.w	r3, r3, #8
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d01d      	beq.n	800720e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d004      	beq.n	80071e6 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	f003 0310 	and.w	r3, r3, #16
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d013      	beq.n	800720e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d004      	beq.n	80071fa <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	f003 0320 	and.w	r3, r3, #32
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d009      	beq.n	800720e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8007200:	2b00      	cmp	r3, #0
 8007202:	d00c      	beq.n	800721e <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800720a:	2b00      	cmp	r3, #0
 800720c:	d107      	bne.n	800721e <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f042 0201 	orr.w	r2, r2, #1
 800721c:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	f003 0307 	and.w	r3, r3, #7
 8007224:	2b00      	cmp	r3, #0
 8007226:	d004      	beq.n	8007232 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	f003 0301 	and.w	r3, r3, #1
 800722e:	2b00      	cmp	r3, #0
 8007230:	d13b      	bne.n	80072aa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8007238:	2b00      	cmp	r3, #0
 800723a:	d004      	beq.n	8007246 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	f003 0302 	and.w	r3, r3, #2
 8007242:	2b00      	cmp	r3, #0
 8007244:	d131      	bne.n	80072aa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800724c:	2b00      	cmp	r3, #0
 800724e:	d004      	beq.n	800725a <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	f003 0304 	and.w	r3, r3, #4
 8007256:	2b00      	cmp	r3, #0
 8007258:	d127      	bne.n	80072aa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8007260:	2b00      	cmp	r3, #0
 8007262:	d004      	beq.n	800726e <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	f003 0308 	and.w	r3, r3, #8
 800726a:	2b00      	cmp	r3, #0
 800726c:	d11d      	bne.n	80072aa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8007274:	2b00      	cmp	r3, #0
 8007276:	d004      	beq.n	8007282 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	f003 0310 	and.w	r3, r3, #16
 800727e:	2b00      	cmp	r3, #0
 8007280:	d113      	bne.n	80072aa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8007288:	2b00      	cmp	r3, #0
 800728a:	d004      	beq.n	8007296 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	f003 0320 	and.w	r3, r3, #32
 8007292:	2b00      	cmp	r3, #0
 8007294:	d109      	bne.n	80072aa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800729c:	2b00      	cmp	r3, #0
 800729e:	d00c      	beq.n	80072ba <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d007      	beq.n	80072ba <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f042 0202 	orr.w	r2, r2, #2
 80072b8:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d009      	beq.n	80072d8 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	430a      	orrs	r2, r1
 80072d4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d009      	beq.n	80072f6 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	430a      	orrs	r2, r1
 80072f2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	68ba      	ldr	r2, [r7, #8]
 8007302:	430a      	orrs	r2, r1
 8007304:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8007306:	2300      	movs	r3, #0
 8007308:	e006      	b.n	8007318 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800730e:	f043 0202 	orr.w	r2, r3, #2
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007316:	2301      	movs	r3, #1
  }
}
 8007318:	4618      	mov	r0, r3
 800731a:	371c      	adds	r7, #28
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b08a      	sub	sp, #40	; 0x28
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007332:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8007336:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800733e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007340:	4013      	ands	r3, r2
 8007342:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800734a:	f003 0307 	and.w	r3, r3, #7
 800734e:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007356:	6a3a      	ldr	r2, [r7, #32]
 8007358:	4013      	ands	r3, r2
 800735a:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007362:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007366:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800736e:	69fa      	ldr	r2, [r7, #28]
 8007370:	4013      	ands	r3, r2
 8007372:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800737a:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 800737e:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007386:	69ba      	ldr	r2, [r7, #24]
 8007388:	4013      	ands	r3, r2
 800738a:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007392:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8007396:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800739e:	697a      	ldr	r2, [r7, #20]
 80073a0:	4013      	ands	r3, r2
 80073a2:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00d      	beq.n	80073ce <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d006      	beq.n	80073ce <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	2240      	movs	r2, #64	; 0x40
 80073c6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 f92e 	bl	800762a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d01b      	beq.n	8007414 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d014      	beq.n	8007414 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80073f2:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80073fc:	693a      	ldr	r2, [r7, #16]
 80073fe:	4013      	ands	r3, r2
 8007400:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f44f 7280 	mov.w	r2, #256	; 0x100
 800740a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800740c:	6939      	ldr	r1, [r7, #16]
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 f8ec 	bl	80075ec <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8007414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007416:	2b00      	cmp	r3, #0
 8007418:	d007      	beq.n	800742a <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007420:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8007422:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 f8b6 	bl	8007596 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800742a:	6a3b      	ldr	r3, [r7, #32]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d007      	beq.n	8007440 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	6a3a      	ldr	r2, [r7, #32]
 8007436:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8007438:	6a39      	ldr	r1, [r7, #32]
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f7fb f93c 	bl	80026b8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d007      	beq.n	8007456 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	69fa      	ldr	r2, [r7, #28]
 800744c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800744e:	69f9      	ldr	r1, [r7, #28]
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 f8ab 	bl	80075ac <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800745c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007460:	2b00      	cmp	r3, #0
 8007462:	d00e      	beq.n	8007482 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800746a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800746e:	2b00      	cmp	r3, #0
 8007470:	d007      	beq.n	8007482 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f44f 7200 	mov.w	r2, #512	; 0x200
 800747a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 f8a0 	bl	80075c2 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800748c:	2b00      	cmp	r3, #0
 800748e:	d01a      	beq.n	80074c6 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800749a:	2b00      	cmp	r3, #0
 800749c:	d013      	beq.n	80074c6 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80074a6:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80074b0:	68fa      	ldr	r2, [r7, #12]
 80074b2:	4013      	ands	r3, r2
 80074b4:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	2280      	movs	r2, #128	; 0x80
 80074bc:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80074be:	68f9      	ldr	r1, [r7, #12]
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 f888 	bl	80075d6 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d00e      	beq.n	80074f2 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d007      	beq.n	80074f2 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80074ea:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 f888 	bl	8007602 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d00e      	beq.n	800751e <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007506:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800750a:	2b00      	cmp	r3, #0
 800750c:	d007      	beq.n	800751e <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007516:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 f87c 	bl	8007616 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007524:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007528:	2b00      	cmp	r3, #0
 800752a:	d011      	beq.n	8007550 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007532:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007536:	2b00      	cmp	r3, #0
 8007538:	d00a      	beq.n	8007550 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007542:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007548:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d007      	beq.n	8007566 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	697a      	ldr	r2, [r7, #20]
 800755c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800755e:	6979      	ldr	r1, [r7, #20]
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 f876 	bl	8007652 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d009      	beq.n	8007580 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	69ba      	ldr	r2, [r7, #24]
 8007572:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007578:	69bb      	ldr	r3, [r7, #24]
 800757a:	431a      	orrs	r2, r3
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007584:	2b00      	cmp	r3, #0
 8007586:	d002      	beq.n	800758e <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 f858 	bl	800763e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800758e:	bf00      	nop
 8007590:	3728      	adds	r7, #40	; 0x28
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}

08007596 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8007596:	b480      	push	{r7}
 8007598:	b083      	sub	sp, #12
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
 800759e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80075a0:	bf00      	nop
 80075a2:	370c      	adds	r7, #12
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80075b6:	bf00      	nop
 80075b8:	370c      	adds	r7, #12
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr

080075c2 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80075c2:	b480      	push	{r7}
 80075c4:	b083      	sub	sp, #12
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80075ca:	bf00      	nop
 80075cc:	370c      	adds	r7, #12
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr

080075d6 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80075d6:	b480      	push	{r7}
 80075d8:	b083      	sub	sp, #12
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
 80075de:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80075e0:	bf00      	nop
 80075e2:	370c      	adds	r7, #12
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr

080075ec <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b083      	sub	sp, #12
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80075f6:	bf00      	nop
 80075f8:	370c      	adds	r7, #12
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr

08007602 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007602:	b480      	push	{r7}
 8007604:	b083      	sub	sp, #12
 8007606:	af00      	add	r7, sp, #0
 8007608:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800760a:	bf00      	nop
 800760c:	370c      	adds	r7, #12
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr

08007616 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007616:	b480      	push	{r7}
 8007618:	b083      	sub	sp, #12
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800761e:	bf00      	nop
 8007620:	370c      	adds	r7, #12
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr

0800762a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800762a:	b480      	push	{r7}
 800762c:	b083      	sub	sp, #12
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8007632:	bf00      	nop
 8007634:	370c      	adds	r7, #12
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr

0800763e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800763e:	b480      	push	{r7}
 8007640:	b083      	sub	sp, #12
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8007646:	bf00      	nop
 8007648:	370c      	adds	r7, #12
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr

08007652 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8007652:	b480      	push	{r7}
 8007654:	b083      	sub	sp, #12
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
 800765a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800765c:	bf00      	nop
 800765e:	370c      	adds	r7, #12
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr

08007668 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007668:	b480      	push	{r7}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8007670:	4b27      	ldr	r3, [pc, #156]	; (8007710 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8007672:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	68ba      	ldr	r2, [r7, #8]
 8007678:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007682:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800768a:	041a      	lsls	r2, r3, #16
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	430a      	orrs	r2, r1
 8007692:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	f103 0270 	add.w	r2, r3, #112	; 0x70
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076a8:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b0:	061a      	lsls	r2, r3, #24
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	430a      	orrs	r2, r1
 80076b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	60fb      	str	r3, [r7, #12]
 80076e8:	e005      	b.n	80076f6 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2200      	movs	r2, #0
 80076ee:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	3304      	adds	r3, #4
 80076f4:	60fb      	str	r3, [r7, #12]
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	429a      	cmp	r2, r3
 8007700:	d3f3      	bcc.n	80076ea <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8007702:	bf00      	nop
 8007704:	bf00      	nop
 8007706:	3714      	adds	r7, #20
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr
 8007710:	4000a400 	.word	0x4000a400

08007714 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8007714:	b480      	push	{r7}
 8007716:	b089      	sub	sp, #36	; 0x24
 8007718:	af00      	add	r7, sp, #0
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	60b9      	str	r1, [r7, #8]
 800771e:	607a      	str	r2, [r7, #4]
 8007720:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d10a      	bne.n	8007740 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8007732:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800773a:	4313      	orrs	r3, r2
 800773c:	61fb      	str	r3, [r7, #28]
 800773e:	e00a      	b.n	8007756 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8007748:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800774e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007750:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007754:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	6a1b      	ldr	r3, [r3, #32]
 800775a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8007760:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8007766:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800776c:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8007772:	4313      	orrs	r3, r2
 8007774:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800777a:	683a      	ldr	r2, [r7, #0]
 800777c:	4613      	mov	r3, r2
 800777e:	00db      	lsls	r3, r3, #3
 8007780:	4413      	add	r3, r2
 8007782:	00db      	lsls	r3, r3, #3
 8007784:	440b      	add	r3, r1
 8007786:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8007788:	69bb      	ldr	r3, [r7, #24]
 800778a:	69fa      	ldr	r2, [r7, #28]
 800778c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800778e:	69bb      	ldr	r3, [r7, #24]
 8007790:	3304      	adds	r3, #4
 8007792:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8007794:	69bb      	ldr	r3, [r7, #24]
 8007796:	693a      	ldr	r2, [r7, #16]
 8007798:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800779a:	69bb      	ldr	r3, [r7, #24]
 800779c:	3304      	adds	r3, #4
 800779e:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80077a0:	2300      	movs	r3, #0
 80077a2:	617b      	str	r3, [r7, #20]
 80077a4:	e020      	b.n	80077e8 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	3303      	adds	r3, #3
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	4413      	add	r3, r2
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	3302      	adds	r3, #2
 80077b6:	6879      	ldr	r1, [r7, #4]
 80077b8:	440b      	add	r3, r1
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80077be:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	3301      	adds	r3, #1
 80077c4:	6879      	ldr	r1, [r7, #4]
 80077c6:	440b      	add	r3, r1
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80077cc:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80077ce:	6879      	ldr	r1, [r7, #4]
 80077d0:	697a      	ldr	r2, [r7, #20]
 80077d2:	440a      	add	r2, r1
 80077d4:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80077d6:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80077d8:	69bb      	ldr	r3, [r7, #24]
 80077da:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	3304      	adds	r3, #4
 80077e0:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	3304      	adds	r3, #4
 80077e6:	617b      	str	r3, [r7, #20]
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	0c1b      	lsrs	r3, r3, #16
 80077ee:	4a06      	ldr	r2, [pc, #24]	; (8007808 <FDCAN_CopyMessageToRAM+0xf4>)
 80077f0:	5cd3      	ldrb	r3, [r2, r3]
 80077f2:	461a      	mov	r2, r3
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d3d5      	bcc.n	80077a6 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 80077fa:	bf00      	nop
 80077fc:	bf00      	nop
 80077fe:	3724      	adds	r7, #36	; 0x24
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr
 8007808:	0800d49c 	.word	0x0800d49c

0800780c <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d101      	bne.n	800781e <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	e033      	b.n	8007886 <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007824:	b2db      	uxtb	r3, r3
 8007826:	2b00      	cmp	r3, #0
 8007828:	d106      	bne.n	8007838 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2200      	movs	r2, #0
 800782e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f7fb fb98 	bl	8002f68 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2200      	movs	r2, #0
 800783c:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 f854 	bl	80078ec <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 f822 	bl	800788e <FMAC_Reset>
 800784a:	4603      	mov	r3, r0
 800784c:	2b01      	cmp	r3, #1
 800784e:	d10c      	bne.n	800786a <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007854:	f043 0210 	orr.w	r2, r3, #16
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	22a0      	movs	r2, #160	; 0xa0
 8007860:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_ERROR;
 8007864:	2301      	movs	r3, #1
 8007866:	73fb      	strb	r3, [r7, #15]
 8007868:	e008      	b.n	800787c <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2220      	movs	r2, #32
 8007874:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 8007878:	2300      	movs	r3, #0
 800787a:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2200      	movs	r2, #0
 8007880:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8007884:	7bfb      	ldrb	r3, [r7, #15]
}
 8007886:	4618      	mov	r0, r3
 8007888:	3710      	adds	r7, #16
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}

0800788e <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 800788e:	b580      	push	{r7, lr}
 8007890:	b084      	sub	sp, #16
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007896:	f7fc faab 	bl	8003df0 <HAL_GetTick>
 800789a:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	691a      	ldr	r2, [r3, #16]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80078aa:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 80078ac:	e00f      	b.n	80078ce <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 80078ae:	f7fc fa9f 	bl	8003df0 <HAL_GetTick>
 80078b2:	4602      	mov	r2, r0
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	1ad3      	subs	r3, r2, r3
 80078b8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80078bc:	d907      	bls.n	80078ce <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078c2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	e00a      	b.n	80078e4 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	691b      	ldr	r3, [r3, #16]
 80078d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d1e8      	bne.n	80078ae <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 80078e2:	2300      	movs	r3, #0
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3710      	adds	r7, #16
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 f807 	bl	8007908 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 f81b 	bl	8007936 <FMAC_ResetOutputStateAndDataPointers>
}
 8007900:	bf00      	nop
 8007902:	3708      	adds	r7, #8
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2220      	movs	r2, #32
 8007926:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 800792a:	bf00      	nop
 800792c:	370c      	adds	r7, #12
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr

08007936 <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8007936:	b480      	push	{r7}
 8007938:	b083      	sub	sp, #12
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2200      	movs	r2, #0
 8007942:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2200      	movs	r2, #0
 8007948:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2220      	movs	r2, #32
 8007954:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8007958:	bf00      	nop
 800795a:	370c      	adds	r7, #12
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007964:	b480      	push	{r7}
 8007966:	b087      	sub	sp, #28
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800796e:	2300      	movs	r3, #0
 8007970:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007972:	e15a      	b.n	8007c2a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	2101      	movs	r1, #1
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	fa01 f303 	lsl.w	r3, r1, r3
 8007980:	4013      	ands	r3, r2
 8007982:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2b00      	cmp	r3, #0
 8007988:	f000 814c 	beq.w	8007c24 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	f003 0303 	and.w	r3, r3, #3
 8007994:	2b01      	cmp	r3, #1
 8007996:	d005      	beq.n	80079a4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80079a0:	2b02      	cmp	r3, #2
 80079a2:	d130      	bne.n	8007a06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	005b      	lsls	r3, r3, #1
 80079ae:	2203      	movs	r2, #3
 80079b0:	fa02 f303 	lsl.w	r3, r2, r3
 80079b4:	43db      	mvns	r3, r3
 80079b6:	693a      	ldr	r2, [r7, #16]
 80079b8:	4013      	ands	r3, r2
 80079ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	68da      	ldr	r2, [r3, #12]
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	005b      	lsls	r3, r3, #1
 80079c4:	fa02 f303 	lsl.w	r3, r2, r3
 80079c8:	693a      	ldr	r2, [r7, #16]
 80079ca:	4313      	orrs	r3, r2
 80079cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	693a      	ldr	r2, [r7, #16]
 80079d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80079da:	2201      	movs	r2, #1
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	fa02 f303 	lsl.w	r3, r2, r3
 80079e2:	43db      	mvns	r3, r3
 80079e4:	693a      	ldr	r2, [r7, #16]
 80079e6:	4013      	ands	r3, r2
 80079e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	091b      	lsrs	r3, r3, #4
 80079f0:	f003 0201 	and.w	r2, r3, #1
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	fa02 f303 	lsl.w	r3, r2, r3
 80079fa:	693a      	ldr	r2, [r7, #16]
 80079fc:	4313      	orrs	r3, r2
 80079fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	693a      	ldr	r2, [r7, #16]
 8007a04:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	f003 0303 	and.w	r3, r3, #3
 8007a0e:	2b03      	cmp	r3, #3
 8007a10:	d017      	beq.n	8007a42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	68db      	ldr	r3, [r3, #12]
 8007a16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	005b      	lsls	r3, r3, #1
 8007a1c:	2203      	movs	r2, #3
 8007a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a22:	43db      	mvns	r3, r3
 8007a24:	693a      	ldr	r2, [r7, #16]
 8007a26:	4013      	ands	r3, r2
 8007a28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	689a      	ldr	r2, [r3, #8]
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	005b      	lsls	r3, r3, #1
 8007a32:	fa02 f303 	lsl.w	r3, r2, r3
 8007a36:	693a      	ldr	r2, [r7, #16]
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	693a      	ldr	r2, [r7, #16]
 8007a40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	f003 0303 	and.w	r3, r3, #3
 8007a4a:	2b02      	cmp	r3, #2
 8007a4c:	d123      	bne.n	8007a96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	08da      	lsrs	r2, r3, #3
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	3208      	adds	r2, #8
 8007a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	f003 0307 	and.w	r3, r3, #7
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	220f      	movs	r2, #15
 8007a66:	fa02 f303 	lsl.w	r3, r2, r3
 8007a6a:	43db      	mvns	r3, r3
 8007a6c:	693a      	ldr	r2, [r7, #16]
 8007a6e:	4013      	ands	r3, r2
 8007a70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	691a      	ldr	r2, [r3, #16]
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	f003 0307 	and.w	r3, r3, #7
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a82:	693a      	ldr	r2, [r7, #16]
 8007a84:	4313      	orrs	r3, r2
 8007a86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	08da      	lsrs	r2, r3, #3
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	3208      	adds	r2, #8
 8007a90:	6939      	ldr	r1, [r7, #16]
 8007a92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	005b      	lsls	r3, r3, #1
 8007aa0:	2203      	movs	r2, #3
 8007aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8007aa6:	43db      	mvns	r3, r3
 8007aa8:	693a      	ldr	r2, [r7, #16]
 8007aaa:	4013      	ands	r3, r2
 8007aac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	f003 0203 	and.w	r2, r3, #3
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	005b      	lsls	r3, r3, #1
 8007aba:	fa02 f303 	lsl.w	r3, r2, r3
 8007abe:	693a      	ldr	r2, [r7, #16]
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	693a      	ldr	r2, [r7, #16]
 8007ac8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	f000 80a6 	beq.w	8007c24 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ad8:	4b5b      	ldr	r3, [pc, #364]	; (8007c48 <HAL_GPIO_Init+0x2e4>)
 8007ada:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007adc:	4a5a      	ldr	r2, [pc, #360]	; (8007c48 <HAL_GPIO_Init+0x2e4>)
 8007ade:	f043 0301 	orr.w	r3, r3, #1
 8007ae2:	6613      	str	r3, [r2, #96]	; 0x60
 8007ae4:	4b58      	ldr	r3, [pc, #352]	; (8007c48 <HAL_GPIO_Init+0x2e4>)
 8007ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ae8:	f003 0301 	and.w	r3, r3, #1
 8007aec:	60bb      	str	r3, [r7, #8]
 8007aee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007af0:	4a56      	ldr	r2, [pc, #344]	; (8007c4c <HAL_GPIO_Init+0x2e8>)
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	089b      	lsrs	r3, r3, #2
 8007af6:	3302      	adds	r3, #2
 8007af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007afc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	f003 0303 	and.w	r3, r3, #3
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	220f      	movs	r2, #15
 8007b08:	fa02 f303 	lsl.w	r3, r2, r3
 8007b0c:	43db      	mvns	r3, r3
 8007b0e:	693a      	ldr	r2, [r7, #16]
 8007b10:	4013      	ands	r3, r2
 8007b12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007b1a:	d01f      	beq.n	8007b5c <HAL_GPIO_Init+0x1f8>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	4a4c      	ldr	r2, [pc, #304]	; (8007c50 <HAL_GPIO_Init+0x2ec>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d019      	beq.n	8007b58 <HAL_GPIO_Init+0x1f4>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	4a4b      	ldr	r2, [pc, #300]	; (8007c54 <HAL_GPIO_Init+0x2f0>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d013      	beq.n	8007b54 <HAL_GPIO_Init+0x1f0>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	4a4a      	ldr	r2, [pc, #296]	; (8007c58 <HAL_GPIO_Init+0x2f4>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d00d      	beq.n	8007b50 <HAL_GPIO_Init+0x1ec>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	4a49      	ldr	r2, [pc, #292]	; (8007c5c <HAL_GPIO_Init+0x2f8>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d007      	beq.n	8007b4c <HAL_GPIO_Init+0x1e8>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	4a48      	ldr	r2, [pc, #288]	; (8007c60 <HAL_GPIO_Init+0x2fc>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d101      	bne.n	8007b48 <HAL_GPIO_Init+0x1e4>
 8007b44:	2305      	movs	r3, #5
 8007b46:	e00a      	b.n	8007b5e <HAL_GPIO_Init+0x1fa>
 8007b48:	2306      	movs	r3, #6
 8007b4a:	e008      	b.n	8007b5e <HAL_GPIO_Init+0x1fa>
 8007b4c:	2304      	movs	r3, #4
 8007b4e:	e006      	b.n	8007b5e <HAL_GPIO_Init+0x1fa>
 8007b50:	2303      	movs	r3, #3
 8007b52:	e004      	b.n	8007b5e <HAL_GPIO_Init+0x1fa>
 8007b54:	2302      	movs	r3, #2
 8007b56:	e002      	b.n	8007b5e <HAL_GPIO_Init+0x1fa>
 8007b58:	2301      	movs	r3, #1
 8007b5a:	e000      	b.n	8007b5e <HAL_GPIO_Init+0x1fa>
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	697a      	ldr	r2, [r7, #20]
 8007b60:	f002 0203 	and.w	r2, r2, #3
 8007b64:	0092      	lsls	r2, r2, #2
 8007b66:	4093      	lsls	r3, r2
 8007b68:	693a      	ldr	r2, [r7, #16]
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007b6e:	4937      	ldr	r1, [pc, #220]	; (8007c4c <HAL_GPIO_Init+0x2e8>)
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	089b      	lsrs	r3, r3, #2
 8007b74:	3302      	adds	r3, #2
 8007b76:	693a      	ldr	r2, [r7, #16]
 8007b78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007b7c:	4b39      	ldr	r3, [pc, #228]	; (8007c64 <HAL_GPIO_Init+0x300>)
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	43db      	mvns	r3, r3
 8007b86:	693a      	ldr	r2, [r7, #16]
 8007b88:	4013      	ands	r3, r2
 8007b8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d003      	beq.n	8007ba0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8007b98:	693a      	ldr	r2, [r7, #16]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007ba0:	4a30      	ldr	r2, [pc, #192]	; (8007c64 <HAL_GPIO_Init+0x300>)
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007ba6:	4b2f      	ldr	r3, [pc, #188]	; (8007c64 <HAL_GPIO_Init+0x300>)
 8007ba8:	68db      	ldr	r3, [r3, #12]
 8007baa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	43db      	mvns	r3, r3
 8007bb0:	693a      	ldr	r2, [r7, #16]
 8007bb2:	4013      	ands	r3, r2
 8007bb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d003      	beq.n	8007bca <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8007bc2:	693a      	ldr	r2, [r7, #16]
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007bca:	4a26      	ldr	r2, [pc, #152]	; (8007c64 <HAL_GPIO_Init+0x300>)
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007bd0:	4b24      	ldr	r3, [pc, #144]	; (8007c64 <HAL_GPIO_Init+0x300>)
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	43db      	mvns	r3, r3
 8007bda:	693a      	ldr	r2, [r7, #16]
 8007bdc:	4013      	ands	r3, r2
 8007bde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d003      	beq.n	8007bf4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007bec:	693a      	ldr	r2, [r7, #16]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007bf4:	4a1b      	ldr	r2, [pc, #108]	; (8007c64 <HAL_GPIO_Init+0x300>)
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007bfa:	4b1a      	ldr	r3, [pc, #104]	; (8007c64 <HAL_GPIO_Init+0x300>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	43db      	mvns	r3, r3
 8007c04:	693a      	ldr	r2, [r7, #16]
 8007c06:	4013      	ands	r3, r2
 8007c08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d003      	beq.n	8007c1e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8007c16:	693a      	ldr	r2, [r7, #16]
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007c1e:	4a11      	ldr	r2, [pc, #68]	; (8007c64 <HAL_GPIO_Init+0x300>)
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	3301      	adds	r3, #1
 8007c28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	fa22 f303 	lsr.w	r3, r2, r3
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	f47f ae9d 	bne.w	8007974 <HAL_GPIO_Init+0x10>
  }
}
 8007c3a:	bf00      	nop
 8007c3c:	bf00      	nop
 8007c3e:	371c      	adds	r7, #28
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr
 8007c48:	40021000 	.word	0x40021000
 8007c4c:	40010000 	.word	0x40010000
 8007c50:	48000400 	.word	0x48000400
 8007c54:	48000800 	.word	0x48000800
 8007c58:	48000c00 	.word	0x48000c00
 8007c5c:	48001000 	.word	0x48001000
 8007c60:	48001400 	.word	0x48001400
 8007c64:	40010400 	.word	0x40010400

08007c68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	460b      	mov	r3, r1
 8007c72:	807b      	strh	r3, [r7, #2]
 8007c74:	4613      	mov	r3, r2
 8007c76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007c78:	787b      	ldrb	r3, [r7, #1]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d003      	beq.n	8007c86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007c7e:	887a      	ldrh	r2, [r7, #2]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007c84:	e002      	b.n	8007c8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007c86:	887a      	ldrh	r2, [r7, #2]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007c8c:	bf00      	nop
 8007c8e:	370c      	adds	r7, #12
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b085      	sub	sp, #20
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	695b      	ldr	r3, [r3, #20]
 8007ca8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007caa:	887a      	ldrh	r2, [r7, #2]
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	4013      	ands	r3, r2
 8007cb0:	041a      	lsls	r2, r3, #16
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	43d9      	mvns	r1, r3
 8007cb6:	887b      	ldrh	r3, [r7, #2]
 8007cb8:	400b      	ands	r3, r1
 8007cba:	431a      	orrs	r2, r3
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	619a      	str	r2, [r3, #24]
}
 8007cc0:	bf00      	nop
 8007cc2:	3714      	adds	r7, #20
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b085      	sub	sp, #20
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d141      	bne.n	8007d5e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007cda:	4b4b      	ldr	r3, [pc, #300]	; (8007e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007ce2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ce6:	d131      	bne.n	8007d4c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007ce8:	4b47      	ldr	r3, [pc, #284]	; (8007e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007cea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cee:	4a46      	ldr	r2, [pc, #280]	; (8007e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007cf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cf4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007cf8:	4b43      	ldr	r3, [pc, #268]	; (8007e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007d00:	4a41      	ldr	r2, [pc, #260]	; (8007e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007d06:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007d08:	4b40      	ldr	r3, [pc, #256]	; (8007e0c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	2232      	movs	r2, #50	; 0x32
 8007d0e:	fb02 f303 	mul.w	r3, r2, r3
 8007d12:	4a3f      	ldr	r2, [pc, #252]	; (8007e10 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007d14:	fba2 2303 	umull	r2, r3, r2, r3
 8007d18:	0c9b      	lsrs	r3, r3, #18
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007d1e:	e002      	b.n	8007d26 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	3b01      	subs	r3, #1
 8007d24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007d26:	4b38      	ldr	r3, [pc, #224]	; (8007e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d28:	695b      	ldr	r3, [r3, #20]
 8007d2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d32:	d102      	bne.n	8007d3a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d1f2      	bne.n	8007d20 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007d3a:	4b33      	ldr	r3, [pc, #204]	; (8007e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d3c:	695b      	ldr	r3, [r3, #20]
 8007d3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d46:	d158      	bne.n	8007dfa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007d48:	2303      	movs	r3, #3
 8007d4a:	e057      	b.n	8007dfc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007d4c:	4b2e      	ldr	r3, [pc, #184]	; (8007e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d52:	4a2d      	ldr	r2, [pc, #180]	; (8007e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d58:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007d5c:	e04d      	b.n	8007dfa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d64:	d141      	bne.n	8007dea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007d66:	4b28      	ldr	r3, [pc, #160]	; (8007e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007d6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d72:	d131      	bne.n	8007dd8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007d74:	4b24      	ldr	r3, [pc, #144]	; (8007e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d7a:	4a23      	ldr	r2, [pc, #140]	; (8007e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d80:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007d84:	4b20      	ldr	r3, [pc, #128]	; (8007e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007d8c:	4a1e      	ldr	r2, [pc, #120]	; (8007e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007d92:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007d94:	4b1d      	ldr	r3, [pc, #116]	; (8007e0c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2232      	movs	r2, #50	; 0x32
 8007d9a:	fb02 f303 	mul.w	r3, r2, r3
 8007d9e:	4a1c      	ldr	r2, [pc, #112]	; (8007e10 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007da0:	fba2 2303 	umull	r2, r3, r2, r3
 8007da4:	0c9b      	lsrs	r3, r3, #18
 8007da6:	3301      	adds	r3, #1
 8007da8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007daa:	e002      	b.n	8007db2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	3b01      	subs	r3, #1
 8007db0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007db2:	4b15      	ldr	r3, [pc, #84]	; (8007e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007db4:	695b      	ldr	r3, [r3, #20]
 8007db6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dbe:	d102      	bne.n	8007dc6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d1f2      	bne.n	8007dac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007dc6:	4b10      	ldr	r3, [pc, #64]	; (8007e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007dc8:	695b      	ldr	r3, [r3, #20]
 8007dca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dd2:	d112      	bne.n	8007dfa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007dd4:	2303      	movs	r3, #3
 8007dd6:	e011      	b.n	8007dfc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007dd8:	4b0b      	ldr	r3, [pc, #44]	; (8007e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007dda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007dde:	4a0a      	ldr	r2, [pc, #40]	; (8007e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007de4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007de8:	e007      	b.n	8007dfa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007dea:	4b07      	ldr	r3, [pc, #28]	; (8007e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007df2:	4a05      	ldr	r2, [pc, #20]	; (8007e08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007df4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007df8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007dfa:	2300      	movs	r3, #0
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3714      	adds	r7, #20
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr
 8007e08:	40007000 	.word	0x40007000
 8007e0c:	20000140 	.word	0x20000140
 8007e10:	431bde83 	.word	0x431bde83

08007e14 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007e14:	b480      	push	{r7}
 8007e16:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007e18:	4b05      	ldr	r3, [pc, #20]	; (8007e30 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	4a04      	ldr	r2, [pc, #16]	; (8007e30 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007e1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e22:	6093      	str	r3, [r2, #8]
}
 8007e24:	bf00      	nop
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr
 8007e2e:	bf00      	nop
 8007e30:	40007000 	.word	0x40007000

08007e34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b088      	sub	sp, #32
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d101      	bne.n	8007e46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	e306      	b.n	8008454 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f003 0301 	and.w	r3, r3, #1
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d075      	beq.n	8007f3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e52:	4b97      	ldr	r3, [pc, #604]	; (80080b0 <HAL_RCC_OscConfig+0x27c>)
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	f003 030c 	and.w	r3, r3, #12
 8007e5a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007e5c:	4b94      	ldr	r3, [pc, #592]	; (80080b0 <HAL_RCC_OscConfig+0x27c>)
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	f003 0303 	and.w	r3, r3, #3
 8007e64:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007e66:	69bb      	ldr	r3, [r7, #24]
 8007e68:	2b0c      	cmp	r3, #12
 8007e6a:	d102      	bne.n	8007e72 <HAL_RCC_OscConfig+0x3e>
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	2b03      	cmp	r3, #3
 8007e70:	d002      	beq.n	8007e78 <HAL_RCC_OscConfig+0x44>
 8007e72:	69bb      	ldr	r3, [r7, #24]
 8007e74:	2b08      	cmp	r3, #8
 8007e76:	d10b      	bne.n	8007e90 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e78:	4b8d      	ldr	r3, [pc, #564]	; (80080b0 <HAL_RCC_OscConfig+0x27c>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d05b      	beq.n	8007f3c <HAL_RCC_OscConfig+0x108>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d157      	bne.n	8007f3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	e2e1      	b.n	8008454 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e98:	d106      	bne.n	8007ea8 <HAL_RCC_OscConfig+0x74>
 8007e9a:	4b85      	ldr	r3, [pc, #532]	; (80080b0 <HAL_RCC_OscConfig+0x27c>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a84      	ldr	r2, [pc, #528]	; (80080b0 <HAL_RCC_OscConfig+0x27c>)
 8007ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ea4:	6013      	str	r3, [r2, #0]
 8007ea6:	e01d      	b.n	8007ee4 <HAL_RCC_OscConfig+0xb0>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007eb0:	d10c      	bne.n	8007ecc <HAL_RCC_OscConfig+0x98>
 8007eb2:	4b7f      	ldr	r3, [pc, #508]	; (80080b0 <HAL_RCC_OscConfig+0x27c>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a7e      	ldr	r2, [pc, #504]	; (80080b0 <HAL_RCC_OscConfig+0x27c>)
 8007eb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007ebc:	6013      	str	r3, [r2, #0]
 8007ebe:	4b7c      	ldr	r3, [pc, #496]	; (80080b0 <HAL_RCC_OscConfig+0x27c>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a7b      	ldr	r2, [pc, #492]	; (80080b0 <HAL_RCC_OscConfig+0x27c>)
 8007ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ec8:	6013      	str	r3, [r2, #0]
 8007eca:	e00b      	b.n	8007ee4 <HAL_RCC_OscConfig+0xb0>
 8007ecc:	4b78      	ldr	r3, [pc, #480]	; (80080b0 <HAL_RCC_OscConfig+0x27c>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a77      	ldr	r2, [pc, #476]	; (80080b0 <HAL_RCC_OscConfig+0x27c>)
 8007ed2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ed6:	6013      	str	r3, [r2, #0]
 8007ed8:	4b75      	ldr	r3, [pc, #468]	; (80080b0 <HAL_RCC_OscConfig+0x27c>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a74      	ldr	r2, [pc, #464]	; (80080b0 <HAL_RCC_OscConfig+0x27c>)
 8007ede:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ee2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d013      	beq.n	8007f14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eec:	f7fb ff80 	bl	8003df0 <HAL_GetTick>
 8007ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007ef2:	e008      	b.n	8007f06 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ef4:	f7fb ff7c 	bl	8003df0 <HAL_GetTick>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	1ad3      	subs	r3, r2, r3
 8007efe:	2b64      	cmp	r3, #100	; 0x64
 8007f00:	d901      	bls.n	8007f06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007f02:	2303      	movs	r3, #3
 8007f04:	e2a6      	b.n	8008454 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007f06:	4b6a      	ldr	r3, [pc, #424]	; (80080b0 <HAL_RCC_OscConfig+0x27c>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d0f0      	beq.n	8007ef4 <HAL_RCC_OscConfig+0xc0>
 8007f12:	e014      	b.n	8007f3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f14:	f7fb ff6c 	bl	8003df0 <HAL_GetTick>
 8007f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007f1a:	e008      	b.n	8007f2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f1c:	f7fb ff68 	bl	8003df0 <HAL_GetTick>
 8007f20:	4602      	mov	r2, r0
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	1ad3      	subs	r3, r2, r3
 8007f26:	2b64      	cmp	r3, #100	; 0x64
 8007f28:	d901      	bls.n	8007f2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007f2a:	2303      	movs	r3, #3
 8007f2c:	e292      	b.n	8008454 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007f2e:	4b60      	ldr	r3, [pc, #384]	; (80080b0 <HAL_RCC_OscConfig+0x27c>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d1f0      	bne.n	8007f1c <HAL_RCC_OscConfig+0xe8>
 8007f3a:	e000      	b.n	8007f3e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f003 0302 	and.w	r3, r3, #2
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d075      	beq.n	8008036 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f4a:	4b59      	ldr	r3, [pc, #356]	; (80080b0 <HAL_RCC_OscConfig+0x27c>)
 8007f4c:	689b      	ldr	r3, [r3, #8]
 8007f4e:	f003 030c 	and.w	r3, r3, #12
 8007f52:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007f54:	4b56      	ldr	r3, [pc, #344]	; (80080b0 <HAL_RCC_OscConfig+0x27c>)
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	f003 0303 	and.w	r3, r3, #3
 8007f5c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	2b0c      	cmp	r3, #12
 8007f62:	d102      	bne.n	8007f6a <HAL_RCC_OscConfig+0x136>
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	2b02      	cmp	r3, #2
 8007f68:	d002      	beq.n	8007f70 <HAL_RCC_OscConfig+0x13c>
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	2b04      	cmp	r3, #4
 8007f6e:	d11f      	bne.n	8007fb0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f70:	4b4f      	ldr	r3, [pc, #316]	; (80080b0 <HAL_RCC_OscConfig+0x27c>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d005      	beq.n	8007f88 <HAL_RCC_OscConfig+0x154>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	68db      	ldr	r3, [r3, #12]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d101      	bne.n	8007f88 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007f84:	2301      	movs	r3, #1
 8007f86:	e265      	b.n	8008454 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f88:	4b49      	ldr	r3, [pc, #292]	; (80080b0 <HAL_RCC_OscConfig+0x27c>)
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	691b      	ldr	r3, [r3, #16]
 8007f94:	061b      	lsls	r3, r3, #24
 8007f96:	4946      	ldr	r1, [pc, #280]	; (80080b0 <HAL_RCC_OscConfig+0x27c>)
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007f9c:	4b45      	ldr	r3, [pc, #276]	; (80080b4 <HAL_RCC_OscConfig+0x280>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f7fb fed9 	bl	8003d58 <HAL_InitTick>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d043      	beq.n	8008034 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007fac:	2301      	movs	r3, #1
 8007fae:	e251      	b.n	8008454 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	68db      	ldr	r3, [r3, #12]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d023      	beq.n	8008000 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007fb8:	4b3d      	ldr	r3, [pc, #244]	; (80080b0 <HAL_RCC_OscConfig+0x27c>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a3c      	ldr	r2, [pc, #240]	; (80080b0 <HAL_RCC_OscConfig+0x27c>)
 8007fbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fc4:	f7fb ff14 	bl	8003df0 <HAL_GetTick>
 8007fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007fca:	e008      	b.n	8007fde <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007fcc:	f7fb ff10 	bl	8003df0 <HAL_GetTick>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	1ad3      	subs	r3, r2, r3
 8007fd6:	2b02      	cmp	r3, #2
 8007fd8:	d901      	bls.n	8007fde <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007fda:	2303      	movs	r3, #3
 8007fdc:	e23a      	b.n	8008454 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007fde:	4b34      	ldr	r3, [pc, #208]	; (80080b0 <HAL_RCC_OscConfig+0x27c>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d0f0      	beq.n	8007fcc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fea:	4b31      	ldr	r3, [pc, #196]	; (80080b0 <HAL_RCC_OscConfig+0x27c>)
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	691b      	ldr	r3, [r3, #16]
 8007ff6:	061b      	lsls	r3, r3, #24
 8007ff8:	492d      	ldr	r1, [pc, #180]	; (80080b0 <HAL_RCC_OscConfig+0x27c>)
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	604b      	str	r3, [r1, #4]
 8007ffe:	e01a      	b.n	8008036 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008000:	4b2b      	ldr	r3, [pc, #172]	; (80080b0 <HAL_RCC_OscConfig+0x27c>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a2a      	ldr	r2, [pc, #168]	; (80080b0 <HAL_RCC_OscConfig+0x27c>)
 8008006:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800800a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800800c:	f7fb fef0 	bl	8003df0 <HAL_GetTick>
 8008010:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008012:	e008      	b.n	8008026 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008014:	f7fb feec 	bl	8003df0 <HAL_GetTick>
 8008018:	4602      	mov	r2, r0
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	1ad3      	subs	r3, r2, r3
 800801e:	2b02      	cmp	r3, #2
 8008020:	d901      	bls.n	8008026 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008022:	2303      	movs	r3, #3
 8008024:	e216      	b.n	8008454 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008026:	4b22      	ldr	r3, [pc, #136]	; (80080b0 <HAL_RCC_OscConfig+0x27c>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800802e:	2b00      	cmp	r3, #0
 8008030:	d1f0      	bne.n	8008014 <HAL_RCC_OscConfig+0x1e0>
 8008032:	e000      	b.n	8008036 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008034:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f003 0308 	and.w	r3, r3, #8
 800803e:	2b00      	cmp	r3, #0
 8008040:	d041      	beq.n	80080c6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	695b      	ldr	r3, [r3, #20]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d01c      	beq.n	8008084 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800804a:	4b19      	ldr	r3, [pc, #100]	; (80080b0 <HAL_RCC_OscConfig+0x27c>)
 800804c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008050:	4a17      	ldr	r2, [pc, #92]	; (80080b0 <HAL_RCC_OscConfig+0x27c>)
 8008052:	f043 0301 	orr.w	r3, r3, #1
 8008056:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800805a:	f7fb fec9 	bl	8003df0 <HAL_GetTick>
 800805e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008060:	e008      	b.n	8008074 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008062:	f7fb fec5 	bl	8003df0 <HAL_GetTick>
 8008066:	4602      	mov	r2, r0
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	1ad3      	subs	r3, r2, r3
 800806c:	2b02      	cmp	r3, #2
 800806e:	d901      	bls.n	8008074 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008070:	2303      	movs	r3, #3
 8008072:	e1ef      	b.n	8008454 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008074:	4b0e      	ldr	r3, [pc, #56]	; (80080b0 <HAL_RCC_OscConfig+0x27c>)
 8008076:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800807a:	f003 0302 	and.w	r3, r3, #2
 800807e:	2b00      	cmp	r3, #0
 8008080:	d0ef      	beq.n	8008062 <HAL_RCC_OscConfig+0x22e>
 8008082:	e020      	b.n	80080c6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008084:	4b0a      	ldr	r3, [pc, #40]	; (80080b0 <HAL_RCC_OscConfig+0x27c>)
 8008086:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800808a:	4a09      	ldr	r2, [pc, #36]	; (80080b0 <HAL_RCC_OscConfig+0x27c>)
 800808c:	f023 0301 	bic.w	r3, r3, #1
 8008090:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008094:	f7fb feac 	bl	8003df0 <HAL_GetTick>
 8008098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800809a:	e00d      	b.n	80080b8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800809c:	f7fb fea8 	bl	8003df0 <HAL_GetTick>
 80080a0:	4602      	mov	r2, r0
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	1ad3      	subs	r3, r2, r3
 80080a6:	2b02      	cmp	r3, #2
 80080a8:	d906      	bls.n	80080b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80080aa:	2303      	movs	r3, #3
 80080ac:	e1d2      	b.n	8008454 <HAL_RCC_OscConfig+0x620>
 80080ae:	bf00      	nop
 80080b0:	40021000 	.word	0x40021000
 80080b4:	20000144 	.word	0x20000144
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80080b8:	4b8c      	ldr	r3, [pc, #560]	; (80082ec <HAL_RCC_OscConfig+0x4b8>)
 80080ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80080be:	f003 0302 	and.w	r3, r3, #2
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d1ea      	bne.n	800809c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f003 0304 	and.w	r3, r3, #4
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	f000 80a6 	beq.w	8008220 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80080d4:	2300      	movs	r3, #0
 80080d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80080d8:	4b84      	ldr	r3, [pc, #528]	; (80082ec <HAL_RCC_OscConfig+0x4b8>)
 80080da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d101      	bne.n	80080e8 <HAL_RCC_OscConfig+0x2b4>
 80080e4:	2301      	movs	r3, #1
 80080e6:	e000      	b.n	80080ea <HAL_RCC_OscConfig+0x2b6>
 80080e8:	2300      	movs	r3, #0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d00d      	beq.n	800810a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80080ee:	4b7f      	ldr	r3, [pc, #508]	; (80082ec <HAL_RCC_OscConfig+0x4b8>)
 80080f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080f2:	4a7e      	ldr	r2, [pc, #504]	; (80082ec <HAL_RCC_OscConfig+0x4b8>)
 80080f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080f8:	6593      	str	r3, [r2, #88]	; 0x58
 80080fa:	4b7c      	ldr	r3, [pc, #496]	; (80082ec <HAL_RCC_OscConfig+0x4b8>)
 80080fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008102:	60fb      	str	r3, [r7, #12]
 8008104:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008106:	2301      	movs	r3, #1
 8008108:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800810a:	4b79      	ldr	r3, [pc, #484]	; (80082f0 <HAL_RCC_OscConfig+0x4bc>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008112:	2b00      	cmp	r3, #0
 8008114:	d118      	bne.n	8008148 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008116:	4b76      	ldr	r3, [pc, #472]	; (80082f0 <HAL_RCC_OscConfig+0x4bc>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a75      	ldr	r2, [pc, #468]	; (80082f0 <HAL_RCC_OscConfig+0x4bc>)
 800811c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008120:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008122:	f7fb fe65 	bl	8003df0 <HAL_GetTick>
 8008126:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008128:	e008      	b.n	800813c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800812a:	f7fb fe61 	bl	8003df0 <HAL_GetTick>
 800812e:	4602      	mov	r2, r0
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	1ad3      	subs	r3, r2, r3
 8008134:	2b02      	cmp	r3, #2
 8008136:	d901      	bls.n	800813c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008138:	2303      	movs	r3, #3
 800813a:	e18b      	b.n	8008454 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800813c:	4b6c      	ldr	r3, [pc, #432]	; (80082f0 <HAL_RCC_OscConfig+0x4bc>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008144:	2b00      	cmp	r3, #0
 8008146:	d0f0      	beq.n	800812a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	2b01      	cmp	r3, #1
 800814e:	d108      	bne.n	8008162 <HAL_RCC_OscConfig+0x32e>
 8008150:	4b66      	ldr	r3, [pc, #408]	; (80082ec <HAL_RCC_OscConfig+0x4b8>)
 8008152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008156:	4a65      	ldr	r2, [pc, #404]	; (80082ec <HAL_RCC_OscConfig+0x4b8>)
 8008158:	f043 0301 	orr.w	r3, r3, #1
 800815c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008160:	e024      	b.n	80081ac <HAL_RCC_OscConfig+0x378>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	2b05      	cmp	r3, #5
 8008168:	d110      	bne.n	800818c <HAL_RCC_OscConfig+0x358>
 800816a:	4b60      	ldr	r3, [pc, #384]	; (80082ec <HAL_RCC_OscConfig+0x4b8>)
 800816c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008170:	4a5e      	ldr	r2, [pc, #376]	; (80082ec <HAL_RCC_OscConfig+0x4b8>)
 8008172:	f043 0304 	orr.w	r3, r3, #4
 8008176:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800817a:	4b5c      	ldr	r3, [pc, #368]	; (80082ec <HAL_RCC_OscConfig+0x4b8>)
 800817c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008180:	4a5a      	ldr	r2, [pc, #360]	; (80082ec <HAL_RCC_OscConfig+0x4b8>)
 8008182:	f043 0301 	orr.w	r3, r3, #1
 8008186:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800818a:	e00f      	b.n	80081ac <HAL_RCC_OscConfig+0x378>
 800818c:	4b57      	ldr	r3, [pc, #348]	; (80082ec <HAL_RCC_OscConfig+0x4b8>)
 800818e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008192:	4a56      	ldr	r2, [pc, #344]	; (80082ec <HAL_RCC_OscConfig+0x4b8>)
 8008194:	f023 0301 	bic.w	r3, r3, #1
 8008198:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800819c:	4b53      	ldr	r3, [pc, #332]	; (80082ec <HAL_RCC_OscConfig+0x4b8>)
 800819e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081a2:	4a52      	ldr	r2, [pc, #328]	; (80082ec <HAL_RCC_OscConfig+0x4b8>)
 80081a4:	f023 0304 	bic.w	r3, r3, #4
 80081a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d016      	beq.n	80081e2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081b4:	f7fb fe1c 	bl	8003df0 <HAL_GetTick>
 80081b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80081ba:	e00a      	b.n	80081d2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081bc:	f7fb fe18 	bl	8003df0 <HAL_GetTick>
 80081c0:	4602      	mov	r2, r0
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	1ad3      	subs	r3, r2, r3
 80081c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d901      	bls.n	80081d2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80081ce:	2303      	movs	r3, #3
 80081d0:	e140      	b.n	8008454 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80081d2:	4b46      	ldr	r3, [pc, #280]	; (80082ec <HAL_RCC_OscConfig+0x4b8>)
 80081d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081d8:	f003 0302 	and.w	r3, r3, #2
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d0ed      	beq.n	80081bc <HAL_RCC_OscConfig+0x388>
 80081e0:	e015      	b.n	800820e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081e2:	f7fb fe05 	bl	8003df0 <HAL_GetTick>
 80081e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80081e8:	e00a      	b.n	8008200 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081ea:	f7fb fe01 	bl	8003df0 <HAL_GetTick>
 80081ee:	4602      	mov	r2, r0
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	1ad3      	subs	r3, r2, r3
 80081f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d901      	bls.n	8008200 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80081fc:	2303      	movs	r3, #3
 80081fe:	e129      	b.n	8008454 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008200:	4b3a      	ldr	r3, [pc, #232]	; (80082ec <HAL_RCC_OscConfig+0x4b8>)
 8008202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008206:	f003 0302 	and.w	r3, r3, #2
 800820a:	2b00      	cmp	r3, #0
 800820c:	d1ed      	bne.n	80081ea <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800820e:	7ffb      	ldrb	r3, [r7, #31]
 8008210:	2b01      	cmp	r3, #1
 8008212:	d105      	bne.n	8008220 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008214:	4b35      	ldr	r3, [pc, #212]	; (80082ec <HAL_RCC_OscConfig+0x4b8>)
 8008216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008218:	4a34      	ldr	r2, [pc, #208]	; (80082ec <HAL_RCC_OscConfig+0x4b8>)
 800821a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800821e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f003 0320 	and.w	r3, r3, #32
 8008228:	2b00      	cmp	r3, #0
 800822a:	d03c      	beq.n	80082a6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	699b      	ldr	r3, [r3, #24]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d01c      	beq.n	800826e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008234:	4b2d      	ldr	r3, [pc, #180]	; (80082ec <HAL_RCC_OscConfig+0x4b8>)
 8008236:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800823a:	4a2c      	ldr	r2, [pc, #176]	; (80082ec <HAL_RCC_OscConfig+0x4b8>)
 800823c:	f043 0301 	orr.w	r3, r3, #1
 8008240:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008244:	f7fb fdd4 	bl	8003df0 <HAL_GetTick>
 8008248:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800824a:	e008      	b.n	800825e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800824c:	f7fb fdd0 	bl	8003df0 <HAL_GetTick>
 8008250:	4602      	mov	r2, r0
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	1ad3      	subs	r3, r2, r3
 8008256:	2b02      	cmp	r3, #2
 8008258:	d901      	bls.n	800825e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800825a:	2303      	movs	r3, #3
 800825c:	e0fa      	b.n	8008454 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800825e:	4b23      	ldr	r3, [pc, #140]	; (80082ec <HAL_RCC_OscConfig+0x4b8>)
 8008260:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008264:	f003 0302 	and.w	r3, r3, #2
 8008268:	2b00      	cmp	r3, #0
 800826a:	d0ef      	beq.n	800824c <HAL_RCC_OscConfig+0x418>
 800826c:	e01b      	b.n	80082a6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800826e:	4b1f      	ldr	r3, [pc, #124]	; (80082ec <HAL_RCC_OscConfig+0x4b8>)
 8008270:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008274:	4a1d      	ldr	r2, [pc, #116]	; (80082ec <HAL_RCC_OscConfig+0x4b8>)
 8008276:	f023 0301 	bic.w	r3, r3, #1
 800827a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800827e:	f7fb fdb7 	bl	8003df0 <HAL_GetTick>
 8008282:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008284:	e008      	b.n	8008298 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008286:	f7fb fdb3 	bl	8003df0 <HAL_GetTick>
 800828a:	4602      	mov	r2, r0
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	1ad3      	subs	r3, r2, r3
 8008290:	2b02      	cmp	r3, #2
 8008292:	d901      	bls.n	8008298 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008294:	2303      	movs	r3, #3
 8008296:	e0dd      	b.n	8008454 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008298:	4b14      	ldr	r3, [pc, #80]	; (80082ec <HAL_RCC_OscConfig+0x4b8>)
 800829a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800829e:	f003 0302 	and.w	r3, r3, #2
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d1ef      	bne.n	8008286 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	69db      	ldr	r3, [r3, #28]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	f000 80d1 	beq.w	8008452 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80082b0:	4b0e      	ldr	r3, [pc, #56]	; (80082ec <HAL_RCC_OscConfig+0x4b8>)
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	f003 030c 	and.w	r3, r3, #12
 80082b8:	2b0c      	cmp	r3, #12
 80082ba:	f000 808b 	beq.w	80083d4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	69db      	ldr	r3, [r3, #28]
 80082c2:	2b02      	cmp	r3, #2
 80082c4:	d15e      	bne.n	8008384 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082c6:	4b09      	ldr	r3, [pc, #36]	; (80082ec <HAL_RCC_OscConfig+0x4b8>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a08      	ldr	r2, [pc, #32]	; (80082ec <HAL_RCC_OscConfig+0x4b8>)
 80082cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80082d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082d2:	f7fb fd8d 	bl	8003df0 <HAL_GetTick>
 80082d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80082d8:	e00c      	b.n	80082f4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082da:	f7fb fd89 	bl	8003df0 <HAL_GetTick>
 80082de:	4602      	mov	r2, r0
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	1ad3      	subs	r3, r2, r3
 80082e4:	2b02      	cmp	r3, #2
 80082e6:	d905      	bls.n	80082f4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80082e8:	2303      	movs	r3, #3
 80082ea:	e0b3      	b.n	8008454 <HAL_RCC_OscConfig+0x620>
 80082ec:	40021000 	.word	0x40021000
 80082f0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80082f4:	4b59      	ldr	r3, [pc, #356]	; (800845c <HAL_RCC_OscConfig+0x628>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d1ec      	bne.n	80082da <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008300:	4b56      	ldr	r3, [pc, #344]	; (800845c <HAL_RCC_OscConfig+0x628>)
 8008302:	68da      	ldr	r2, [r3, #12]
 8008304:	4b56      	ldr	r3, [pc, #344]	; (8008460 <HAL_RCC_OscConfig+0x62c>)
 8008306:	4013      	ands	r3, r2
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	6a11      	ldr	r1, [r2, #32]
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008310:	3a01      	subs	r2, #1
 8008312:	0112      	lsls	r2, r2, #4
 8008314:	4311      	orrs	r1, r2
 8008316:	687a      	ldr	r2, [r7, #4]
 8008318:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800831a:	0212      	lsls	r2, r2, #8
 800831c:	4311      	orrs	r1, r2
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008322:	0852      	lsrs	r2, r2, #1
 8008324:	3a01      	subs	r2, #1
 8008326:	0552      	lsls	r2, r2, #21
 8008328:	4311      	orrs	r1, r2
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800832e:	0852      	lsrs	r2, r2, #1
 8008330:	3a01      	subs	r2, #1
 8008332:	0652      	lsls	r2, r2, #25
 8008334:	4311      	orrs	r1, r2
 8008336:	687a      	ldr	r2, [r7, #4]
 8008338:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800833a:	06d2      	lsls	r2, r2, #27
 800833c:	430a      	orrs	r2, r1
 800833e:	4947      	ldr	r1, [pc, #284]	; (800845c <HAL_RCC_OscConfig+0x628>)
 8008340:	4313      	orrs	r3, r2
 8008342:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008344:	4b45      	ldr	r3, [pc, #276]	; (800845c <HAL_RCC_OscConfig+0x628>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a44      	ldr	r2, [pc, #272]	; (800845c <HAL_RCC_OscConfig+0x628>)
 800834a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800834e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008350:	4b42      	ldr	r3, [pc, #264]	; (800845c <HAL_RCC_OscConfig+0x628>)
 8008352:	68db      	ldr	r3, [r3, #12]
 8008354:	4a41      	ldr	r2, [pc, #260]	; (800845c <HAL_RCC_OscConfig+0x628>)
 8008356:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800835a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800835c:	f7fb fd48 	bl	8003df0 <HAL_GetTick>
 8008360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008362:	e008      	b.n	8008376 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008364:	f7fb fd44 	bl	8003df0 <HAL_GetTick>
 8008368:	4602      	mov	r2, r0
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	1ad3      	subs	r3, r2, r3
 800836e:	2b02      	cmp	r3, #2
 8008370:	d901      	bls.n	8008376 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008372:	2303      	movs	r3, #3
 8008374:	e06e      	b.n	8008454 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008376:	4b39      	ldr	r3, [pc, #228]	; (800845c <HAL_RCC_OscConfig+0x628>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800837e:	2b00      	cmp	r3, #0
 8008380:	d0f0      	beq.n	8008364 <HAL_RCC_OscConfig+0x530>
 8008382:	e066      	b.n	8008452 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008384:	4b35      	ldr	r3, [pc, #212]	; (800845c <HAL_RCC_OscConfig+0x628>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a34      	ldr	r2, [pc, #208]	; (800845c <HAL_RCC_OscConfig+0x628>)
 800838a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800838e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8008390:	4b32      	ldr	r3, [pc, #200]	; (800845c <HAL_RCC_OscConfig+0x628>)
 8008392:	68db      	ldr	r3, [r3, #12]
 8008394:	4a31      	ldr	r2, [pc, #196]	; (800845c <HAL_RCC_OscConfig+0x628>)
 8008396:	f023 0303 	bic.w	r3, r3, #3
 800839a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800839c:	4b2f      	ldr	r3, [pc, #188]	; (800845c <HAL_RCC_OscConfig+0x628>)
 800839e:	68db      	ldr	r3, [r3, #12]
 80083a0:	4a2e      	ldr	r2, [pc, #184]	; (800845c <HAL_RCC_OscConfig+0x628>)
 80083a2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80083a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083aa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083ac:	f7fb fd20 	bl	8003df0 <HAL_GetTick>
 80083b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80083b2:	e008      	b.n	80083c6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083b4:	f7fb fd1c 	bl	8003df0 <HAL_GetTick>
 80083b8:	4602      	mov	r2, r0
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	1ad3      	subs	r3, r2, r3
 80083be:	2b02      	cmp	r3, #2
 80083c0:	d901      	bls.n	80083c6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80083c2:	2303      	movs	r3, #3
 80083c4:	e046      	b.n	8008454 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80083c6:	4b25      	ldr	r3, [pc, #148]	; (800845c <HAL_RCC_OscConfig+0x628>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d1f0      	bne.n	80083b4 <HAL_RCC_OscConfig+0x580>
 80083d2:	e03e      	b.n	8008452 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	69db      	ldr	r3, [r3, #28]
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d101      	bne.n	80083e0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80083dc:	2301      	movs	r3, #1
 80083de:	e039      	b.n	8008454 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80083e0:	4b1e      	ldr	r3, [pc, #120]	; (800845c <HAL_RCC_OscConfig+0x628>)
 80083e2:	68db      	ldr	r3, [r3, #12]
 80083e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	f003 0203 	and.w	r2, r3, #3
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6a1b      	ldr	r3, [r3, #32]
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d12c      	bne.n	800844e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083fe:	3b01      	subs	r3, #1
 8008400:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008402:	429a      	cmp	r2, r3
 8008404:	d123      	bne.n	800844e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008410:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008412:	429a      	cmp	r2, r3
 8008414:	d11b      	bne.n	800844e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008420:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008422:	429a      	cmp	r2, r3
 8008424:	d113      	bne.n	800844e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008430:	085b      	lsrs	r3, r3, #1
 8008432:	3b01      	subs	r3, #1
 8008434:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008436:	429a      	cmp	r2, r3
 8008438:	d109      	bne.n	800844e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008444:	085b      	lsrs	r3, r3, #1
 8008446:	3b01      	subs	r3, #1
 8008448:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800844a:	429a      	cmp	r2, r3
 800844c:	d001      	beq.n	8008452 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	e000      	b.n	8008454 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8008452:	2300      	movs	r3, #0
}
 8008454:	4618      	mov	r0, r3
 8008456:	3720      	adds	r7, #32
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}
 800845c:	40021000 	.word	0x40021000
 8008460:	019f800c 	.word	0x019f800c

08008464 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b086      	sub	sp, #24
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800846e:	2300      	movs	r3, #0
 8008470:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d101      	bne.n	800847c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008478:	2301      	movs	r3, #1
 800847a:	e11e      	b.n	80086ba <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800847c:	4b91      	ldr	r3, [pc, #580]	; (80086c4 <HAL_RCC_ClockConfig+0x260>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f003 030f 	and.w	r3, r3, #15
 8008484:	683a      	ldr	r2, [r7, #0]
 8008486:	429a      	cmp	r2, r3
 8008488:	d910      	bls.n	80084ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800848a:	4b8e      	ldr	r3, [pc, #568]	; (80086c4 <HAL_RCC_ClockConfig+0x260>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f023 020f 	bic.w	r2, r3, #15
 8008492:	498c      	ldr	r1, [pc, #560]	; (80086c4 <HAL_RCC_ClockConfig+0x260>)
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	4313      	orrs	r3, r2
 8008498:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800849a:	4b8a      	ldr	r3, [pc, #552]	; (80086c4 <HAL_RCC_ClockConfig+0x260>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f003 030f 	and.w	r3, r3, #15
 80084a2:	683a      	ldr	r2, [r7, #0]
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d001      	beq.n	80084ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80084a8:	2301      	movs	r3, #1
 80084aa:	e106      	b.n	80086ba <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f003 0301 	and.w	r3, r3, #1
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d073      	beq.n	80085a0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	2b03      	cmp	r3, #3
 80084be:	d129      	bne.n	8008514 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80084c0:	4b81      	ldr	r3, [pc, #516]	; (80086c8 <HAL_RCC_ClockConfig+0x264>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d101      	bne.n	80084d0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80084cc:	2301      	movs	r3, #1
 80084ce:	e0f4      	b.n	80086ba <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80084d0:	f000 f9e2 	bl	8008898 <RCC_GetSysClockFreqFromPLLSource>
 80084d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	4a7c      	ldr	r2, [pc, #496]	; (80086cc <HAL_RCC_ClockConfig+0x268>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d93f      	bls.n	800855e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80084de:	4b7a      	ldr	r3, [pc, #488]	; (80086c8 <HAL_RCC_ClockConfig+0x264>)
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d009      	beq.n	80084fe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d033      	beq.n	800855e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d12f      	bne.n	800855e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80084fe:	4b72      	ldr	r3, [pc, #456]	; (80086c8 <HAL_RCC_ClockConfig+0x264>)
 8008500:	689b      	ldr	r3, [r3, #8]
 8008502:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008506:	4a70      	ldr	r2, [pc, #448]	; (80086c8 <HAL_RCC_ClockConfig+0x264>)
 8008508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800850c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800850e:	2380      	movs	r3, #128	; 0x80
 8008510:	617b      	str	r3, [r7, #20]
 8008512:	e024      	b.n	800855e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	2b02      	cmp	r3, #2
 800851a:	d107      	bne.n	800852c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800851c:	4b6a      	ldr	r3, [pc, #424]	; (80086c8 <HAL_RCC_ClockConfig+0x264>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008524:	2b00      	cmp	r3, #0
 8008526:	d109      	bne.n	800853c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008528:	2301      	movs	r3, #1
 800852a:	e0c6      	b.n	80086ba <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800852c:	4b66      	ldr	r3, [pc, #408]	; (80086c8 <HAL_RCC_ClockConfig+0x264>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008534:	2b00      	cmp	r3, #0
 8008536:	d101      	bne.n	800853c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008538:	2301      	movs	r3, #1
 800853a:	e0be      	b.n	80086ba <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800853c:	f000 f914 	bl	8008768 <HAL_RCC_GetSysClockFreq>
 8008540:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	4a61      	ldr	r2, [pc, #388]	; (80086cc <HAL_RCC_ClockConfig+0x268>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d909      	bls.n	800855e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800854a:	4b5f      	ldr	r3, [pc, #380]	; (80086c8 <HAL_RCC_ClockConfig+0x264>)
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008552:	4a5d      	ldr	r2, [pc, #372]	; (80086c8 <HAL_RCC_ClockConfig+0x264>)
 8008554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008558:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800855a:	2380      	movs	r3, #128	; 0x80
 800855c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800855e:	4b5a      	ldr	r3, [pc, #360]	; (80086c8 <HAL_RCC_ClockConfig+0x264>)
 8008560:	689b      	ldr	r3, [r3, #8]
 8008562:	f023 0203 	bic.w	r2, r3, #3
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	4957      	ldr	r1, [pc, #348]	; (80086c8 <HAL_RCC_ClockConfig+0x264>)
 800856c:	4313      	orrs	r3, r2
 800856e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008570:	f7fb fc3e 	bl	8003df0 <HAL_GetTick>
 8008574:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008576:	e00a      	b.n	800858e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008578:	f7fb fc3a 	bl	8003df0 <HAL_GetTick>
 800857c:	4602      	mov	r2, r0
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	1ad3      	subs	r3, r2, r3
 8008582:	f241 3288 	movw	r2, #5000	; 0x1388
 8008586:	4293      	cmp	r3, r2
 8008588:	d901      	bls.n	800858e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800858a:	2303      	movs	r3, #3
 800858c:	e095      	b.n	80086ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800858e:	4b4e      	ldr	r3, [pc, #312]	; (80086c8 <HAL_RCC_ClockConfig+0x264>)
 8008590:	689b      	ldr	r3, [r3, #8]
 8008592:	f003 020c 	and.w	r2, r3, #12
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	009b      	lsls	r3, r3, #2
 800859c:	429a      	cmp	r2, r3
 800859e:	d1eb      	bne.n	8008578 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f003 0302 	and.w	r3, r3, #2
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d023      	beq.n	80085f4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f003 0304 	and.w	r3, r3, #4
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d005      	beq.n	80085c4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80085b8:	4b43      	ldr	r3, [pc, #268]	; (80086c8 <HAL_RCC_ClockConfig+0x264>)
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	4a42      	ldr	r2, [pc, #264]	; (80086c8 <HAL_RCC_ClockConfig+0x264>)
 80085be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80085c2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f003 0308 	and.w	r3, r3, #8
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d007      	beq.n	80085e0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80085d0:	4b3d      	ldr	r3, [pc, #244]	; (80086c8 <HAL_RCC_ClockConfig+0x264>)
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80085d8:	4a3b      	ldr	r2, [pc, #236]	; (80086c8 <HAL_RCC_ClockConfig+0x264>)
 80085da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80085de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80085e0:	4b39      	ldr	r3, [pc, #228]	; (80086c8 <HAL_RCC_ClockConfig+0x264>)
 80085e2:	689b      	ldr	r3, [r3, #8]
 80085e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	689b      	ldr	r3, [r3, #8]
 80085ec:	4936      	ldr	r1, [pc, #216]	; (80086c8 <HAL_RCC_ClockConfig+0x264>)
 80085ee:	4313      	orrs	r3, r2
 80085f0:	608b      	str	r3, [r1, #8]
 80085f2:	e008      	b.n	8008606 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	2b80      	cmp	r3, #128	; 0x80
 80085f8:	d105      	bne.n	8008606 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80085fa:	4b33      	ldr	r3, [pc, #204]	; (80086c8 <HAL_RCC_ClockConfig+0x264>)
 80085fc:	689b      	ldr	r3, [r3, #8]
 80085fe:	4a32      	ldr	r2, [pc, #200]	; (80086c8 <HAL_RCC_ClockConfig+0x264>)
 8008600:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008604:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008606:	4b2f      	ldr	r3, [pc, #188]	; (80086c4 <HAL_RCC_ClockConfig+0x260>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f003 030f 	and.w	r3, r3, #15
 800860e:	683a      	ldr	r2, [r7, #0]
 8008610:	429a      	cmp	r2, r3
 8008612:	d21d      	bcs.n	8008650 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008614:	4b2b      	ldr	r3, [pc, #172]	; (80086c4 <HAL_RCC_ClockConfig+0x260>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f023 020f 	bic.w	r2, r3, #15
 800861c:	4929      	ldr	r1, [pc, #164]	; (80086c4 <HAL_RCC_ClockConfig+0x260>)
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	4313      	orrs	r3, r2
 8008622:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008624:	f7fb fbe4 	bl	8003df0 <HAL_GetTick>
 8008628:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800862a:	e00a      	b.n	8008642 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800862c:	f7fb fbe0 	bl	8003df0 <HAL_GetTick>
 8008630:	4602      	mov	r2, r0
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	1ad3      	subs	r3, r2, r3
 8008636:	f241 3288 	movw	r2, #5000	; 0x1388
 800863a:	4293      	cmp	r3, r2
 800863c:	d901      	bls.n	8008642 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800863e:	2303      	movs	r3, #3
 8008640:	e03b      	b.n	80086ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008642:	4b20      	ldr	r3, [pc, #128]	; (80086c4 <HAL_RCC_ClockConfig+0x260>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f003 030f 	and.w	r3, r3, #15
 800864a:	683a      	ldr	r2, [r7, #0]
 800864c:	429a      	cmp	r2, r3
 800864e:	d1ed      	bne.n	800862c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f003 0304 	and.w	r3, r3, #4
 8008658:	2b00      	cmp	r3, #0
 800865a:	d008      	beq.n	800866e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800865c:	4b1a      	ldr	r3, [pc, #104]	; (80086c8 <HAL_RCC_ClockConfig+0x264>)
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	68db      	ldr	r3, [r3, #12]
 8008668:	4917      	ldr	r1, [pc, #92]	; (80086c8 <HAL_RCC_ClockConfig+0x264>)
 800866a:	4313      	orrs	r3, r2
 800866c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f003 0308 	and.w	r3, r3, #8
 8008676:	2b00      	cmp	r3, #0
 8008678:	d009      	beq.n	800868e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800867a:	4b13      	ldr	r3, [pc, #76]	; (80086c8 <HAL_RCC_ClockConfig+0x264>)
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	691b      	ldr	r3, [r3, #16]
 8008686:	00db      	lsls	r3, r3, #3
 8008688:	490f      	ldr	r1, [pc, #60]	; (80086c8 <HAL_RCC_ClockConfig+0x264>)
 800868a:	4313      	orrs	r3, r2
 800868c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800868e:	f000 f86b 	bl	8008768 <HAL_RCC_GetSysClockFreq>
 8008692:	4602      	mov	r2, r0
 8008694:	4b0c      	ldr	r3, [pc, #48]	; (80086c8 <HAL_RCC_ClockConfig+0x264>)
 8008696:	689b      	ldr	r3, [r3, #8]
 8008698:	091b      	lsrs	r3, r3, #4
 800869a:	f003 030f 	and.w	r3, r3, #15
 800869e:	490c      	ldr	r1, [pc, #48]	; (80086d0 <HAL_RCC_ClockConfig+0x26c>)
 80086a0:	5ccb      	ldrb	r3, [r1, r3]
 80086a2:	f003 031f 	and.w	r3, r3, #31
 80086a6:	fa22 f303 	lsr.w	r3, r2, r3
 80086aa:	4a0a      	ldr	r2, [pc, #40]	; (80086d4 <HAL_RCC_ClockConfig+0x270>)
 80086ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80086ae:	4b0a      	ldr	r3, [pc, #40]	; (80086d8 <HAL_RCC_ClockConfig+0x274>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4618      	mov	r0, r3
 80086b4:	f7fb fb50 	bl	8003d58 <HAL_InitTick>
 80086b8:	4603      	mov	r3, r0
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3718      	adds	r7, #24
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
 80086c2:	bf00      	nop
 80086c4:	40022000 	.word	0x40022000
 80086c8:	40021000 	.word	0x40021000
 80086cc:	04c4b400 	.word	0x04c4b400
 80086d0:	0800d484 	.word	0x0800d484
 80086d4:	20000140 	.word	0x20000140
 80086d8:	20000144 	.word	0x20000144

080086dc <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b08c      	sub	sp, #48	; 0x30
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	60f8      	str	r0, [r7, #12]
 80086e4:	60b9      	str	r1, [r7, #8]
 80086e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 80086e8:	2302      	movs	r3, #2
 80086ea:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80086ec:	2303      	movs	r3, #3
 80086ee:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 80086f0:	2300      	movs	r3, #0
 80086f2:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086fa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	0c1b      	lsrs	r3, r3, #16
 8008700:	f003 030f 	and.w	r3, r3, #15
 8008704:	f503 1390 	add.w	r3, r3, #1179648	; 0x120000
 8008708:	029b      	lsls	r3, r3, #10
 800870a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	0c1b      	lsrs	r3, r3, #16
 8008710:	f003 030f 	and.w	r3, r3, #15
 8008714:	627b      	str	r3, [r7, #36]	; 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 8008716:	4b13      	ldr	r3, [pc, #76]	; (8008764 <HAL_RCC_MCOConfig+0x88>)
 8008718:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800871a:	2101      	movs	r1, #1
 800871c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871e:	fa01 f303 	lsl.w	r3, r1, r3
 8008722:	4910      	ldr	r1, [pc, #64]	; (8008764 <HAL_RCC_MCOConfig+0x88>)
 8008724:	4313      	orrs	r3, r2
 8008726:	64cb      	str	r3, [r1, #76]	; 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	b29b      	uxth	r3, r3
 800872c:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	0d1b      	lsrs	r3, r3, #20
 8008732:	b2db      	uxtb	r3, r3
 8008734:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 8008736:	f107 0310 	add.w	r3, r7, #16
 800873a:	4619      	mov	r1, r3
 800873c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800873e:	f7ff f911 	bl	8007964 <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 8008742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008744:	2b00      	cmp	r3, #0
 8008746:	d109      	bne.n	800875c <HAL_RCC_MCOConfig+0x80>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 8008748:	4b06      	ldr	r3, [pc, #24]	; (8008764 <HAL_RCC_MCOConfig+0x88>)
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008750:	68b9      	ldr	r1, [r7, #8]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	430b      	orrs	r3, r1
 8008756:	4903      	ldr	r1, [pc, #12]	; (8008764 <HAL_RCC_MCOConfig+0x88>)
 8008758:	4313      	orrs	r3, r2
 800875a:	608b      	str	r3, [r1, #8]
  }
}
 800875c:	bf00      	nop
 800875e:	3730      	adds	r7, #48	; 0x30
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}
 8008764:	40021000 	.word	0x40021000

08008768 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008768:	b480      	push	{r7}
 800876a:	b087      	sub	sp, #28
 800876c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800876e:	4b2c      	ldr	r3, [pc, #176]	; (8008820 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	f003 030c 	and.w	r3, r3, #12
 8008776:	2b04      	cmp	r3, #4
 8008778:	d102      	bne.n	8008780 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800877a:	4b2a      	ldr	r3, [pc, #168]	; (8008824 <HAL_RCC_GetSysClockFreq+0xbc>)
 800877c:	613b      	str	r3, [r7, #16]
 800877e:	e047      	b.n	8008810 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008780:	4b27      	ldr	r3, [pc, #156]	; (8008820 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008782:	689b      	ldr	r3, [r3, #8]
 8008784:	f003 030c 	and.w	r3, r3, #12
 8008788:	2b08      	cmp	r3, #8
 800878a:	d102      	bne.n	8008792 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800878c:	4b25      	ldr	r3, [pc, #148]	; (8008824 <HAL_RCC_GetSysClockFreq+0xbc>)
 800878e:	613b      	str	r3, [r7, #16]
 8008790:	e03e      	b.n	8008810 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008792:	4b23      	ldr	r3, [pc, #140]	; (8008820 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008794:	689b      	ldr	r3, [r3, #8]
 8008796:	f003 030c 	and.w	r3, r3, #12
 800879a:	2b0c      	cmp	r3, #12
 800879c:	d136      	bne.n	800880c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800879e:	4b20      	ldr	r3, [pc, #128]	; (8008820 <HAL_RCC_GetSysClockFreq+0xb8>)
 80087a0:	68db      	ldr	r3, [r3, #12]
 80087a2:	f003 0303 	and.w	r3, r3, #3
 80087a6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80087a8:	4b1d      	ldr	r3, [pc, #116]	; (8008820 <HAL_RCC_GetSysClockFreq+0xb8>)
 80087aa:	68db      	ldr	r3, [r3, #12]
 80087ac:	091b      	lsrs	r3, r3, #4
 80087ae:	f003 030f 	and.w	r3, r3, #15
 80087b2:	3301      	adds	r3, #1
 80087b4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2b03      	cmp	r3, #3
 80087ba:	d10c      	bne.n	80087d6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80087bc:	4a19      	ldr	r2, [pc, #100]	; (8008824 <HAL_RCC_GetSysClockFreq+0xbc>)
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80087c4:	4a16      	ldr	r2, [pc, #88]	; (8008820 <HAL_RCC_GetSysClockFreq+0xb8>)
 80087c6:	68d2      	ldr	r2, [r2, #12]
 80087c8:	0a12      	lsrs	r2, r2, #8
 80087ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80087ce:	fb02 f303 	mul.w	r3, r2, r3
 80087d2:	617b      	str	r3, [r7, #20]
      break;
 80087d4:	e00c      	b.n	80087f0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80087d6:	4a13      	ldr	r2, [pc, #76]	; (8008824 <HAL_RCC_GetSysClockFreq+0xbc>)
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	fbb2 f3f3 	udiv	r3, r2, r3
 80087de:	4a10      	ldr	r2, [pc, #64]	; (8008820 <HAL_RCC_GetSysClockFreq+0xb8>)
 80087e0:	68d2      	ldr	r2, [r2, #12]
 80087e2:	0a12      	lsrs	r2, r2, #8
 80087e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80087e8:	fb02 f303 	mul.w	r3, r2, r3
 80087ec:	617b      	str	r3, [r7, #20]
      break;
 80087ee:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80087f0:	4b0b      	ldr	r3, [pc, #44]	; (8008820 <HAL_RCC_GetSysClockFreq+0xb8>)
 80087f2:	68db      	ldr	r3, [r3, #12]
 80087f4:	0e5b      	lsrs	r3, r3, #25
 80087f6:	f003 0303 	and.w	r3, r3, #3
 80087fa:	3301      	adds	r3, #1
 80087fc:	005b      	lsls	r3, r3, #1
 80087fe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008800:	697a      	ldr	r2, [r7, #20]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	fbb2 f3f3 	udiv	r3, r2, r3
 8008808:	613b      	str	r3, [r7, #16]
 800880a:	e001      	b.n	8008810 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800880c:	2300      	movs	r3, #0
 800880e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008810:	693b      	ldr	r3, [r7, #16]
}
 8008812:	4618      	mov	r0, r3
 8008814:	371c      	adds	r7, #28
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr
 800881e:	bf00      	nop
 8008820:	40021000 	.word	0x40021000
 8008824:	00f42400 	.word	0x00f42400

08008828 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008828:	b480      	push	{r7}
 800882a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800882c:	4b03      	ldr	r3, [pc, #12]	; (800883c <HAL_RCC_GetHCLKFreq+0x14>)
 800882e:	681b      	ldr	r3, [r3, #0]
}
 8008830:	4618      	mov	r0, r3
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr
 800883a:	bf00      	nop
 800883c:	20000140 	.word	0x20000140

08008840 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008844:	f7ff fff0 	bl	8008828 <HAL_RCC_GetHCLKFreq>
 8008848:	4602      	mov	r2, r0
 800884a:	4b06      	ldr	r3, [pc, #24]	; (8008864 <HAL_RCC_GetPCLK1Freq+0x24>)
 800884c:	689b      	ldr	r3, [r3, #8]
 800884e:	0a1b      	lsrs	r3, r3, #8
 8008850:	f003 0307 	and.w	r3, r3, #7
 8008854:	4904      	ldr	r1, [pc, #16]	; (8008868 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008856:	5ccb      	ldrb	r3, [r1, r3]
 8008858:	f003 031f 	and.w	r3, r3, #31
 800885c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008860:	4618      	mov	r0, r3
 8008862:	bd80      	pop	{r7, pc}
 8008864:	40021000 	.word	0x40021000
 8008868:	0800d494 	.word	0x0800d494

0800886c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008870:	f7ff ffda 	bl	8008828 <HAL_RCC_GetHCLKFreq>
 8008874:	4602      	mov	r2, r0
 8008876:	4b06      	ldr	r3, [pc, #24]	; (8008890 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008878:	689b      	ldr	r3, [r3, #8]
 800887a:	0adb      	lsrs	r3, r3, #11
 800887c:	f003 0307 	and.w	r3, r3, #7
 8008880:	4904      	ldr	r1, [pc, #16]	; (8008894 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008882:	5ccb      	ldrb	r3, [r1, r3]
 8008884:	f003 031f 	and.w	r3, r3, #31
 8008888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800888c:	4618      	mov	r0, r3
 800888e:	bd80      	pop	{r7, pc}
 8008890:	40021000 	.word	0x40021000
 8008894:	0800d494 	.word	0x0800d494

08008898 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008898:	b480      	push	{r7}
 800889a:	b087      	sub	sp, #28
 800889c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800889e:	4b1e      	ldr	r3, [pc, #120]	; (8008918 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80088a0:	68db      	ldr	r3, [r3, #12]
 80088a2:	f003 0303 	and.w	r3, r3, #3
 80088a6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80088a8:	4b1b      	ldr	r3, [pc, #108]	; (8008918 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80088aa:	68db      	ldr	r3, [r3, #12]
 80088ac:	091b      	lsrs	r3, r3, #4
 80088ae:	f003 030f 	and.w	r3, r3, #15
 80088b2:	3301      	adds	r3, #1
 80088b4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	2b03      	cmp	r3, #3
 80088ba:	d10c      	bne.n	80088d6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80088bc:	4a17      	ldr	r2, [pc, #92]	; (800891c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80088c4:	4a14      	ldr	r2, [pc, #80]	; (8008918 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80088c6:	68d2      	ldr	r2, [r2, #12]
 80088c8:	0a12      	lsrs	r2, r2, #8
 80088ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80088ce:	fb02 f303 	mul.w	r3, r2, r3
 80088d2:	617b      	str	r3, [r7, #20]
    break;
 80088d4:	e00c      	b.n	80088f0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80088d6:	4a11      	ldr	r2, [pc, #68]	; (800891c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	fbb2 f3f3 	udiv	r3, r2, r3
 80088de:	4a0e      	ldr	r2, [pc, #56]	; (8008918 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80088e0:	68d2      	ldr	r2, [r2, #12]
 80088e2:	0a12      	lsrs	r2, r2, #8
 80088e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80088e8:	fb02 f303 	mul.w	r3, r2, r3
 80088ec:	617b      	str	r3, [r7, #20]
    break;
 80088ee:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80088f0:	4b09      	ldr	r3, [pc, #36]	; (8008918 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80088f2:	68db      	ldr	r3, [r3, #12]
 80088f4:	0e5b      	lsrs	r3, r3, #25
 80088f6:	f003 0303 	and.w	r3, r3, #3
 80088fa:	3301      	adds	r3, #1
 80088fc:	005b      	lsls	r3, r3, #1
 80088fe:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008900:	697a      	ldr	r2, [r7, #20]
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	fbb2 f3f3 	udiv	r3, r2, r3
 8008908:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800890a:	687b      	ldr	r3, [r7, #4]
}
 800890c:	4618      	mov	r0, r3
 800890e:	371c      	adds	r7, #28
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr
 8008918:	40021000 	.word	0x40021000
 800891c:	00f42400 	.word	0x00f42400

08008920 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b086      	sub	sp, #24
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008928:	2300      	movs	r3, #0
 800892a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800892c:	2300      	movs	r3, #0
 800892e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008938:	2b00      	cmp	r3, #0
 800893a:	f000 8098 	beq.w	8008a6e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800893e:	2300      	movs	r3, #0
 8008940:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008942:	4b43      	ldr	r3, [pc, #268]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800894a:	2b00      	cmp	r3, #0
 800894c:	d10d      	bne.n	800896a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800894e:	4b40      	ldr	r3, [pc, #256]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008952:	4a3f      	ldr	r2, [pc, #252]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008958:	6593      	str	r3, [r2, #88]	; 0x58
 800895a:	4b3d      	ldr	r3, [pc, #244]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800895c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800895e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008962:	60bb      	str	r3, [r7, #8]
 8008964:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008966:	2301      	movs	r3, #1
 8008968:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800896a:	4b3a      	ldr	r3, [pc, #232]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a39      	ldr	r2, [pc, #228]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008974:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008976:	f7fb fa3b 	bl	8003df0 <HAL_GetTick>
 800897a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800897c:	e009      	b.n	8008992 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800897e:	f7fb fa37 	bl	8003df0 <HAL_GetTick>
 8008982:	4602      	mov	r2, r0
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	1ad3      	subs	r3, r2, r3
 8008988:	2b02      	cmp	r3, #2
 800898a:	d902      	bls.n	8008992 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800898c:	2303      	movs	r3, #3
 800898e:	74fb      	strb	r3, [r7, #19]
        break;
 8008990:	e005      	b.n	800899e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008992:	4b30      	ldr	r3, [pc, #192]	; (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800899a:	2b00      	cmp	r3, #0
 800899c:	d0ef      	beq.n	800897e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800899e:	7cfb      	ldrb	r3, [r7, #19]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d159      	bne.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80089a4:	4b2a      	ldr	r3, [pc, #168]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089ae:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d01e      	beq.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ba:	697a      	ldr	r2, [r7, #20]
 80089bc:	429a      	cmp	r2, r3
 80089be:	d019      	beq.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80089c0:	4b23      	ldr	r3, [pc, #140]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80089cc:	4b20      	ldr	r3, [pc, #128]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089d2:	4a1f      	ldr	r2, [pc, #124]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80089dc:	4b1c      	ldr	r3, [pc, #112]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089e2:	4a1b      	ldr	r2, [pc, #108]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80089e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80089ec:	4a18      	ldr	r2, [pc, #96]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	f003 0301 	and.w	r3, r3, #1
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d016      	beq.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089fe:	f7fb f9f7 	bl	8003df0 <HAL_GetTick>
 8008a02:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a04:	e00b      	b.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a06:	f7fb f9f3 	bl	8003df0 <HAL_GetTick>
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	1ad3      	subs	r3, r2, r3
 8008a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d902      	bls.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008a18:	2303      	movs	r3, #3
 8008a1a:	74fb      	strb	r3, [r7, #19]
            break;
 8008a1c:	e006      	b.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a1e:	4b0c      	ldr	r3, [pc, #48]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a24:	f003 0302 	and.w	r3, r3, #2
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d0ec      	beq.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008a2c:	7cfb      	ldrb	r3, [r7, #19]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d10b      	bne.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008a32:	4b07      	ldr	r3, [pc, #28]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a40:	4903      	ldr	r1, [pc, #12]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008a42:	4313      	orrs	r3, r2
 8008a44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008a48:	e008      	b.n	8008a5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008a4a:	7cfb      	ldrb	r3, [r7, #19]
 8008a4c:	74bb      	strb	r3, [r7, #18]
 8008a4e:	e005      	b.n	8008a5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008a50:	40021000 	.word	0x40021000
 8008a54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a58:	7cfb      	ldrb	r3, [r7, #19]
 8008a5a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008a5c:	7c7b      	ldrb	r3, [r7, #17]
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d105      	bne.n	8008a6e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a62:	4ba6      	ldr	r3, [pc, #664]	; (8008cfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a66:	4aa5      	ldr	r2, [pc, #660]	; (8008cfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a6c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f003 0301 	and.w	r3, r3, #1
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d00a      	beq.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008a7a:	4ba0      	ldr	r3, [pc, #640]	; (8008cfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a80:	f023 0203 	bic.w	r2, r3, #3
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	499c      	ldr	r1, [pc, #624]	; (8008cfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f003 0302 	and.w	r3, r3, #2
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d00a      	beq.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008a9c:	4b97      	ldr	r3, [pc, #604]	; (8008cfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008aa2:	f023 020c 	bic.w	r2, r3, #12
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	4994      	ldr	r1, [pc, #592]	; (8008cfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008aac:	4313      	orrs	r3, r2
 8008aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f003 0304 	and.w	r3, r3, #4
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d00a      	beq.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008abe:	4b8f      	ldr	r3, [pc, #572]	; (8008cfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ac4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	68db      	ldr	r3, [r3, #12]
 8008acc:	498b      	ldr	r1, [pc, #556]	; (8008cfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f003 0308 	and.w	r3, r3, #8
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d00a      	beq.n	8008af6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008ae0:	4b86      	ldr	r3, [pc, #536]	; (8008cfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ae6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	691b      	ldr	r3, [r3, #16]
 8008aee:	4983      	ldr	r1, [pc, #524]	; (8008cfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008af0:	4313      	orrs	r3, r2
 8008af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f003 0320 	and.w	r3, r3, #32
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d00a      	beq.n	8008b18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008b02:	4b7e      	ldr	r3, [pc, #504]	; (8008cfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b08:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	695b      	ldr	r3, [r3, #20]
 8008b10:	497a      	ldr	r1, [pc, #488]	; (8008cfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008b12:	4313      	orrs	r3, r2
 8008b14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d00a      	beq.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008b24:	4b75      	ldr	r3, [pc, #468]	; (8008cfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b2a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	699b      	ldr	r3, [r3, #24]
 8008b32:	4972      	ldr	r1, [pc, #456]	; (8008cfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008b34:	4313      	orrs	r3, r2
 8008b36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d00a      	beq.n	8008b5c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008b46:	4b6d      	ldr	r3, [pc, #436]	; (8008cfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b4c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	69db      	ldr	r3, [r3, #28]
 8008b54:	4969      	ldr	r1, [pc, #420]	; (8008cfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008b56:	4313      	orrs	r3, r2
 8008b58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d00a      	beq.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008b68:	4b64      	ldr	r3, [pc, #400]	; (8008cfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b6e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6a1b      	ldr	r3, [r3, #32]
 8008b76:	4961      	ldr	r1, [pc, #388]	; (8008cfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008b78:	4313      	orrs	r3, r2
 8008b7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d00a      	beq.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008b8a:	4b5c      	ldr	r3, [pc, #368]	; (8008cfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b90:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b98:	4958      	ldr	r1, [pc, #352]	; (8008cfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d015      	beq.n	8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008bac:	4b53      	ldr	r3, [pc, #332]	; (8008cfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bb2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bba:	4950      	ldr	r1, [pc, #320]	; (8008cfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bca:	d105      	bne.n	8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008bcc:	4b4b      	ldr	r3, [pc, #300]	; (8008cfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008bce:	68db      	ldr	r3, [r3, #12]
 8008bd0:	4a4a      	ldr	r2, [pc, #296]	; (8008cfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008bd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008bd6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d015      	beq.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008be4:	4b45      	ldr	r3, [pc, #276]	; (8008cfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bf2:	4942      	ldr	r1, [pc, #264]	; (8008cfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c02:	d105      	bne.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008c04:	4b3d      	ldr	r3, [pc, #244]	; (8008cfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c06:	68db      	ldr	r3, [r3, #12]
 8008c08:	4a3c      	ldr	r2, [pc, #240]	; (8008cfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c0e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d015      	beq.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008c1c:	4b37      	ldr	r3, [pc, #220]	; (8008cfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c22:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c2a:	4934      	ldr	r1, [pc, #208]	; (8008cfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c36:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008c3a:	d105      	bne.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008c3c:	4b2f      	ldr	r3, [pc, #188]	; (8008cfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c3e:	68db      	ldr	r3, [r3, #12]
 8008c40:	4a2e      	ldr	r2, [pc, #184]	; (8008cfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c46:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d015      	beq.n	8008c80 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008c54:	4b29      	ldr	r3, [pc, #164]	; (8008cfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c5a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c62:	4926      	ldr	r1, [pc, #152]	; (8008cfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c64:	4313      	orrs	r3, r2
 8008c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c72:	d105      	bne.n	8008c80 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008c74:	4b21      	ldr	r3, [pc, #132]	; (8008cfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c76:	68db      	ldr	r3, [r3, #12]
 8008c78:	4a20      	ldr	r2, [pc, #128]	; (8008cfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c7e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d015      	beq.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008c8c:	4b1b      	ldr	r3, [pc, #108]	; (8008cfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c9a:	4918      	ldr	r1, [pc, #96]	; (8008cfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ca6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008caa:	d105      	bne.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008cac:	4b13      	ldr	r3, [pc, #76]	; (8008cfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008cae:	68db      	ldr	r3, [r3, #12]
 8008cb0:	4a12      	ldr	r2, [pc, #72]	; (8008cfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008cb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008cb6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d015      	beq.n	8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008cc4:	4b0d      	ldr	r3, [pc, #52]	; (8008cfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cd2:	490a      	ldr	r1, [pc, #40]	; (8008cfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ce2:	d105      	bne.n	8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008ce4:	4b05      	ldr	r3, [pc, #20]	; (8008cfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	4a04      	ldr	r2, [pc, #16]	; (8008cfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008cea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008cee:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008cf0:	7cbb      	ldrb	r3, [r7, #18]
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3718      	adds	r7, #24
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}
 8008cfa:	bf00      	nop
 8008cfc:	40021000 	.word	0x40021000

08008d00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b084      	sub	sp, #16
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d101      	bne.n	8008d12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	e09d      	b.n	8008e4e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d108      	bne.n	8008d2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d22:	d009      	beq.n	8008d38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2200      	movs	r2, #0
 8008d28:	61da      	str	r2, [r3, #28]
 8008d2a:	e005      	b.n	8008d38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2200      	movs	r2, #0
 8008d36:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008d44:	b2db      	uxtb	r3, r3
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d106      	bne.n	8008d58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f7fa fad4 	bl	8003300 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2202      	movs	r2, #2
 8008d5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	681a      	ldr	r2, [r3, #0]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d6e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	68db      	ldr	r3, [r3, #12]
 8008d74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008d78:	d902      	bls.n	8008d80 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	60fb      	str	r3, [r7, #12]
 8008d7e:	e002      	b.n	8008d86 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008d80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d84:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	68db      	ldr	r3, [r3, #12]
 8008d8a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008d8e:	d007      	beq.n	8008da0 <HAL_SPI_Init+0xa0>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	68db      	ldr	r3, [r3, #12]
 8008d94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008d98:	d002      	beq.n	8008da0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	689b      	ldr	r3, [r3, #8]
 8008dac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008db0:	431a      	orrs	r2, r3
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	691b      	ldr	r3, [r3, #16]
 8008db6:	f003 0302 	and.w	r3, r3, #2
 8008dba:	431a      	orrs	r2, r3
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	695b      	ldr	r3, [r3, #20]
 8008dc0:	f003 0301 	and.w	r3, r3, #1
 8008dc4:	431a      	orrs	r2, r3
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	699b      	ldr	r3, [r3, #24]
 8008dca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008dce:	431a      	orrs	r2, r3
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	69db      	ldr	r3, [r3, #28]
 8008dd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008dd8:	431a      	orrs	r2, r3
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6a1b      	ldr	r3, [r3, #32]
 8008dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008de2:	ea42 0103 	orr.w	r1, r2, r3
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dea:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	430a      	orrs	r2, r1
 8008df4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	699b      	ldr	r3, [r3, #24]
 8008dfa:	0c1b      	lsrs	r3, r3, #16
 8008dfc:	f003 0204 	and.w	r2, r3, #4
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e04:	f003 0310 	and.w	r3, r3, #16
 8008e08:	431a      	orrs	r2, r3
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e0e:	f003 0308 	and.w	r3, r3, #8
 8008e12:	431a      	orrs	r2, r3
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	68db      	ldr	r3, [r3, #12]
 8008e18:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008e1c:	ea42 0103 	orr.w	r1, r2, r3
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	430a      	orrs	r2, r1
 8008e2c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	69da      	ldr	r2, [r3, #28]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e3c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2200      	movs	r2, #0
 8008e42:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2201      	movs	r2, #1
 8008e48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008e4c:	2300      	movs	r3, #0
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3710      	adds	r7, #16
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
	...

08008e58 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b086      	sub	sp, #24
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	60f8      	str	r0, [r7, #12]
 8008e60:	60b9      	str	r1, [r7, #8]
 8008e62:	607a      	str	r2, [r7, #4]
 8008e64:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008e66:	2300      	movs	r3, #0
 8008e68:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d101      	bne.n	8008e78 <HAL_SPI_TransmitReceive_DMA+0x20>
 8008e74:	2302      	movs	r3, #2
 8008e76:	e16c      	b.n	8009152 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008e86:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8008e8e:	7dbb      	ldrb	r3, [r7, #22]
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d00d      	beq.n	8008eb0 <HAL_SPI_TransmitReceive_DMA+0x58>
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e9a:	d106      	bne.n	8008eaa <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	689b      	ldr	r3, [r3, #8]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d102      	bne.n	8008eaa <HAL_SPI_TransmitReceive_DMA+0x52>
 8008ea4:	7dbb      	ldrb	r3, [r7, #22]
 8008ea6:	2b04      	cmp	r3, #4
 8008ea8:	d002      	beq.n	8008eb0 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8008eaa:	2302      	movs	r3, #2
 8008eac:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008eae:	e14b      	b.n	8009148 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d005      	beq.n	8008ec2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d002      	beq.n	8008ec2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8008ebc:	887b      	ldrh	r3, [r7, #2]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d102      	bne.n	8008ec8 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008ec6:	e13f      	b.n	8009148 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008ece:	b2db      	uxtb	r3, r3
 8008ed0:	2b04      	cmp	r3, #4
 8008ed2:	d003      	beq.n	8008edc <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2205      	movs	r2, #5
 8008ed8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	68ba      	ldr	r2, [r7, #8]
 8008ee6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	887a      	ldrh	r2, [r7, #2]
 8008eec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	887a      	ldrh	r2, [r7, #2]
 8008ef2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	687a      	ldr	r2, [r7, #4]
 8008ef8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	887a      	ldrh	r2, [r7, #2]
 8008efe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	887a      	ldrh	r2, [r7, #2]
 8008f06:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	2200      	movs	r2, #0
 8008f14:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	685a      	ldr	r2, [r3, #4]
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8008f24:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	68db      	ldr	r3, [r3, #12]
 8008f2a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008f2e:	d908      	bls.n	8008f42 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	685a      	ldr	r2, [r3, #4]
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008f3e:	605a      	str	r2, [r3, #4]
 8008f40:	e06f      	b.n	8009022 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	685a      	ldr	r2, [r3, #4]
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008f50:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f56:	699b      	ldr	r3, [r3, #24]
 8008f58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f5c:	d126      	bne.n	8008fac <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8008f62:	f003 0301 	and.w	r3, r3, #1
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d10f      	bne.n	8008f8a <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	685a      	ldr	r2, [r3, #4]
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008f78:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f7e:	b29b      	uxth	r3, r3
 8008f80:	085b      	lsrs	r3, r3, #1
 8008f82:	b29a      	uxth	r2, r3
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008f88:	e010      	b.n	8008fac <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	685a      	ldr	r2, [r3, #4]
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008f98:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	085b      	lsrs	r3, r3, #1
 8008fa2:	b29b      	uxth	r3, r3
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	b29a      	uxth	r2, r3
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fb0:	699b      	ldr	r3, [r3, #24]
 8008fb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fb6:	d134      	bne.n	8009022 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	685a      	ldr	r2, [r3, #4]
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008fc6:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008fce:	b29b      	uxth	r3, r3
 8008fd0:	f003 0301 	and.w	r3, r3, #1
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d111      	bne.n	8008ffc <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	685a      	ldr	r2, [r3, #4]
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008fe6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008fee:	b29b      	uxth	r3, r3
 8008ff0:	085b      	lsrs	r3, r3, #1
 8008ff2:	b29a      	uxth	r2, r3
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008ffa:	e012      	b.n	8009022 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	685a      	ldr	r2, [r3, #4]
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800900a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009012:	b29b      	uxth	r3, r3
 8009014:	085b      	lsrs	r3, r3, #1
 8009016:	b29b      	uxth	r3, r3
 8009018:	3301      	adds	r3, #1
 800901a:	b29a      	uxth	r2, r3
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009028:	b2db      	uxtb	r3, r3
 800902a:	2b04      	cmp	r3, #4
 800902c:	d108      	bne.n	8009040 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009032:	4a4a      	ldr	r2, [pc, #296]	; (800915c <HAL_SPI_TransmitReceive_DMA+0x304>)
 8009034:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800903a:	4a49      	ldr	r2, [pc, #292]	; (8009160 <HAL_SPI_TransmitReceive_DMA+0x308>)
 800903c:	62da      	str	r2, [r3, #44]	; 0x2c
 800903e:	e007      	b.n	8009050 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009044:	4a47      	ldr	r2, [pc, #284]	; (8009164 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8009046:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800904c:	4a46      	ldr	r2, [pc, #280]	; (8009168 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800904e:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009054:	4a45      	ldr	r2, [pc, #276]	; (800916c <HAL_SPI_TransmitReceive_DMA+0x314>)
 8009056:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800905c:	2200      	movs	r2, #0
 800905e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	330c      	adds	r3, #12
 800906a:	4619      	mov	r1, r3
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009070:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009078:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800907a:	f7fd fb43 	bl	8006704 <HAL_DMA_Start_IT>
 800907e:	4603      	mov	r3, r0
 8009080:	2b00      	cmp	r3, #0
 8009082:	d00c      	beq.n	800909e <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009088:	f043 0210 	orr.w	r2, r3, #16
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8009090:	2301      	movs	r3, #1
 8009092:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2201      	movs	r2, #1
 8009098:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800909c:	e054      	b.n	8009148 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	685a      	ldr	r2, [r3, #4]
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f042 0201 	orr.w	r2, r2, #1
 80090ac:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090b2:	2200      	movs	r2, #0
 80090b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090ba:	2200      	movs	r2, #0
 80090bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090c2:	2200      	movs	r2, #0
 80090c4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090ca:	2200      	movs	r2, #0
 80090cc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090d6:	4619      	mov	r1, r3
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	330c      	adds	r3, #12
 80090de:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090e4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80090e6:	f7fd fb0d 	bl	8006704 <HAL_DMA_Start_IT>
 80090ea:	4603      	mov	r3, r0
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d00c      	beq.n	800910a <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090f4:	f043 0210 	orr.w	r2, r3, #16
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80090fc:	2301      	movs	r3, #1
 80090fe:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	2201      	movs	r2, #1
 8009104:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8009108:	e01e      	b.n	8009148 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009114:	2b40      	cmp	r3, #64	; 0x40
 8009116:	d007      	beq.n	8009128 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009126:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	685a      	ldr	r2, [r3, #4]
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f042 0220 	orr.w	r2, r2, #32
 8009136:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	685a      	ldr	r2, [r3, #4]
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f042 0202 	orr.w	r2, r2, #2
 8009146:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2200      	movs	r2, #0
 800914c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009150:	7dfb      	ldrb	r3, [r7, #23]
}
 8009152:	4618      	mov	r0, r3
 8009154:	3718      	adds	r7, #24
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}
 800915a:	bf00      	nop
 800915c:	080094e1 	.word	0x080094e1
 8009160:	080093a9 	.word	0x080093a9
 8009164:	080094fd 	.word	0x080094fd
 8009168:	08009451 	.word	0x08009451
 800916c:	08009519 	.word	0x08009519

08009170 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b088      	sub	sp, #32
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	689b      	ldr	r3, [r3, #8]
 8009186:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009188:	69bb      	ldr	r3, [r7, #24]
 800918a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800918e:	2b00      	cmp	r3, #0
 8009190:	d10e      	bne.n	80091b0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009192:	69bb      	ldr	r3, [r7, #24]
 8009194:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009198:	2b00      	cmp	r3, #0
 800919a:	d009      	beq.n	80091b0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800919c:	69fb      	ldr	r3, [r7, #28]
 800919e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d004      	beq.n	80091b0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	4798      	blx	r3
    return;
 80091ae:	e0ce      	b.n	800934e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80091b0:	69bb      	ldr	r3, [r7, #24]
 80091b2:	f003 0302 	and.w	r3, r3, #2
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d009      	beq.n	80091ce <HAL_SPI_IRQHandler+0x5e>
 80091ba:	69fb      	ldr	r3, [r7, #28]
 80091bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d004      	beq.n	80091ce <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	4798      	blx	r3
    return;
 80091cc:	e0bf      	b.n	800934e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80091ce:	69bb      	ldr	r3, [r7, #24]
 80091d0:	f003 0320 	and.w	r3, r3, #32
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d10a      	bne.n	80091ee <HAL_SPI_IRQHandler+0x7e>
 80091d8:	69bb      	ldr	r3, [r7, #24]
 80091da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d105      	bne.n	80091ee <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80091e2:	69bb      	ldr	r3, [r7, #24]
 80091e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	f000 80b0 	beq.w	800934e <HAL_SPI_IRQHandler+0x1de>
 80091ee:	69fb      	ldr	r3, [r7, #28]
 80091f0:	f003 0320 	and.w	r3, r3, #32
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	f000 80aa 	beq.w	800934e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80091fa:	69bb      	ldr	r3, [r7, #24]
 80091fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009200:	2b00      	cmp	r3, #0
 8009202:	d023      	beq.n	800924c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800920a:	b2db      	uxtb	r3, r3
 800920c:	2b03      	cmp	r3, #3
 800920e:	d011      	beq.n	8009234 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009214:	f043 0204 	orr.w	r2, r3, #4
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800921c:	2300      	movs	r3, #0
 800921e:	617b      	str	r3, [r7, #20]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	68db      	ldr	r3, [r3, #12]
 8009226:	617b      	str	r3, [r7, #20]
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	689b      	ldr	r3, [r3, #8]
 800922e:	617b      	str	r3, [r7, #20]
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	e00b      	b.n	800924c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009234:	2300      	movs	r3, #0
 8009236:	613b      	str	r3, [r7, #16]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	68db      	ldr	r3, [r3, #12]
 800923e:	613b      	str	r3, [r7, #16]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	689b      	ldr	r3, [r3, #8]
 8009246:	613b      	str	r3, [r7, #16]
 8009248:	693b      	ldr	r3, [r7, #16]
        return;
 800924a:	e080      	b.n	800934e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800924c:	69bb      	ldr	r3, [r7, #24]
 800924e:	f003 0320 	and.w	r3, r3, #32
 8009252:	2b00      	cmp	r3, #0
 8009254:	d014      	beq.n	8009280 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800925a:	f043 0201 	orr.w	r2, r3, #1
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009262:	2300      	movs	r3, #0
 8009264:	60fb      	str	r3, [r7, #12]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	689b      	ldr	r3, [r3, #8]
 800926c:	60fb      	str	r3, [r7, #12]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	681a      	ldr	r2, [r3, #0]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800927c:	601a      	str	r2, [r3, #0]
 800927e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009280:	69bb      	ldr	r3, [r7, #24]
 8009282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009286:	2b00      	cmp	r3, #0
 8009288:	d00c      	beq.n	80092a4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800928e:	f043 0208 	orr.w	r2, r3, #8
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009296:	2300      	movs	r3, #0
 8009298:	60bb      	str	r3, [r7, #8]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	689b      	ldr	r3, [r3, #8]
 80092a0:	60bb      	str	r3, [r7, #8]
 80092a2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d04f      	beq.n	800934c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	685a      	ldr	r2, [r3, #4]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80092ba:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2201      	movs	r2, #1
 80092c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80092c4:	69fb      	ldr	r3, [r7, #28]
 80092c6:	f003 0302 	and.w	r3, r3, #2
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d104      	bne.n	80092d8 <HAL_SPI_IRQHandler+0x168>
 80092ce:	69fb      	ldr	r3, [r7, #28]
 80092d0:	f003 0301 	and.w	r3, r3, #1
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d034      	beq.n	8009342 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	685a      	ldr	r2, [r3, #4]
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f022 0203 	bic.w	r2, r2, #3
 80092e6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d011      	beq.n	8009314 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092f4:	4a17      	ldr	r2, [pc, #92]	; (8009354 <HAL_SPI_IRQHandler+0x1e4>)
 80092f6:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092fc:	4618      	mov	r0, r3
 80092fe:	f7fd fad5 	bl	80068ac <HAL_DMA_Abort_IT>
 8009302:	4603      	mov	r3, r0
 8009304:	2b00      	cmp	r3, #0
 8009306:	d005      	beq.n	8009314 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800930c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009318:	2b00      	cmp	r3, #0
 800931a:	d016      	beq.n	800934a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009320:	4a0c      	ldr	r2, [pc, #48]	; (8009354 <HAL_SPI_IRQHandler+0x1e4>)
 8009322:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009328:	4618      	mov	r0, r3
 800932a:	f7fd fabf 	bl	80068ac <HAL_DMA_Abort_IT>
 800932e:	4603      	mov	r3, r0
 8009330:	2b00      	cmp	r3, #0
 8009332:	d00a      	beq.n	800934a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009338:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8009340:	e003      	b.n	800934a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f000 f826 	bl	8009394 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009348:	e000      	b.n	800934c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800934a:	bf00      	nop
    return;
 800934c:	bf00      	nop
  }
}
 800934e:	3720      	adds	r7, #32
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}
 8009354:	08009559 	.word	0x08009559

08009358 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8009360:	bf00      	nop
 8009362:	370c      	adds	r7, #12
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr

0800936c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800936c:	b480      	push	{r7}
 800936e:	b083      	sub	sp, #12
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8009374:	bf00      	nop
 8009376:	370c      	adds	r7, #12
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr

08009380 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009380:	b480      	push	{r7}
 8009382:	b083      	sub	sp, #12
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8009388:	bf00      	nop
 800938a:	370c      	adds	r7, #12
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr

08009394 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009394:	b480      	push	{r7}
 8009396:	b083      	sub	sp, #12
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800939c:	bf00      	nop
 800939e:	370c      	adds	r7, #12
 80093a0:	46bd      	mov	sp, r7
 80093a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a6:	4770      	bx	lr

080093a8 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b084      	sub	sp, #16
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093b4:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80093b6:	f7fa fd1b 	bl	8003df0 <HAL_GetTick>
 80093ba:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f003 0320 	and.w	r3, r3, #32
 80093c6:	2b20      	cmp	r3, #32
 80093c8:	d03c      	beq.n	8009444 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	685a      	ldr	r2, [r3, #4]
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f022 0220 	bic.w	r2, r2, #32
 80093d8:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	689b      	ldr	r3, [r3, #8]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d10d      	bne.n	80093fe <SPI_DMAReceiveCplt+0x56>
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80093ea:	d108      	bne.n	80093fe <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	685a      	ldr	r2, [r3, #4]
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f022 0203 	bic.w	r2, r2, #3
 80093fa:	605a      	str	r2, [r3, #4]
 80093fc:	e007      	b.n	800940e <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	685a      	ldr	r2, [r3, #4]
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f022 0201 	bic.w	r2, r2, #1
 800940c:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800940e:	68ba      	ldr	r2, [r7, #8]
 8009410:	2164      	movs	r1, #100	; 0x64
 8009412:	68f8      	ldr	r0, [r7, #12]
 8009414:	f000 f9d4 	bl	80097c0 <SPI_EndRxTransaction>
 8009418:	4603      	mov	r3, r0
 800941a:	2b00      	cmp	r3, #0
 800941c:	d002      	beq.n	8009424 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2220      	movs	r2, #32
 8009422:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2200      	movs	r2, #0
 8009428:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2201      	movs	r2, #1
 8009430:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009438:	2b00      	cmp	r3, #0
 800943a:	d003      	beq.n	8009444 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800943c:	68f8      	ldr	r0, [r7, #12]
 800943e:	f7ff ffa9 	bl	8009394 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009442:	e002      	b.n	800944a <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8009444:	68f8      	ldr	r0, [r7, #12]
 8009446:	f7ff ff87 	bl	8009358 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800944a:	3710      	adds	r7, #16
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}

08009450 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b084      	sub	sp, #16
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800945c:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800945e:	f7fa fcc7 	bl	8003df0 <HAL_GetTick>
 8009462:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f003 0320 	and.w	r3, r3, #32
 800946e:	2b20      	cmp	r3, #32
 8009470:	d030      	beq.n	80094d4 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	685a      	ldr	r2, [r3, #4]
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f022 0220 	bic.w	r2, r2, #32
 8009480:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009482:	68ba      	ldr	r2, [r7, #8]
 8009484:	2164      	movs	r1, #100	; 0x64
 8009486:	68f8      	ldr	r0, [r7, #12]
 8009488:	f000 f9f2 	bl	8009870 <SPI_EndRxTxTransaction>
 800948c:	4603      	mov	r3, r0
 800948e:	2b00      	cmp	r3, #0
 8009490:	d005      	beq.n	800949e <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009496:	f043 0220 	orr.w	r2, r3, #32
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	685a      	ldr	r2, [r3, #4]
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f022 0203 	bic.w	r2, r2, #3
 80094ac:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2200      	movs	r2, #0
 80094b2:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	2200      	movs	r2, #0
 80094b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	2201      	movs	r2, #1
 80094c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d003      	beq.n	80094d4 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80094cc:	68f8      	ldr	r0, [r7, #12]
 80094ce:	f7ff ff61 	bl	8009394 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80094d2:	e002      	b.n	80094da <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80094d4:	68f8      	ldr	r0, [r7, #12]
 80094d6:	f7f8 f85b 	bl	8001590 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80094da:	3710      	adds	r7, #16
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}

080094e0 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b084      	sub	sp, #16
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094ec:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80094ee:	68f8      	ldr	r0, [r7, #12]
 80094f0:	f7ff ff3c 	bl	800936c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80094f4:	bf00      	nop
 80094f6:	3710      	adds	r7, #16
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}

080094fc <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009508:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800950a:	68f8      	ldr	r0, [r7, #12]
 800950c:	f7ff ff38 	bl	8009380 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009510:	bf00      	nop
 8009512:	3710      	adds	r7, #16
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}

08009518 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b084      	sub	sp, #16
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009524:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	685a      	ldr	r2, [r3, #4]
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f022 0203 	bic.w	r2, r2, #3
 8009534:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800953a:	f043 0210 	orr.w	r2, r3, #16
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2201      	movs	r2, #1
 8009546:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800954a:	68f8      	ldr	r0, [r7, #12]
 800954c:	f7ff ff22 	bl	8009394 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009550:	bf00      	nop
 8009552:	3710      	adds	r7, #16
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b084      	sub	sp, #16
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009564:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2200      	movs	r2, #0
 800956a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2200      	movs	r2, #0
 8009572:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009574:	68f8      	ldr	r0, [r7, #12]
 8009576:	f7ff ff0d 	bl	8009394 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800957a:	bf00      	nop
 800957c:	3710      	adds	r7, #16
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}
	...

08009584 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b088      	sub	sp, #32
 8009588:	af00      	add	r7, sp, #0
 800958a:	60f8      	str	r0, [r7, #12]
 800958c:	60b9      	str	r1, [r7, #8]
 800958e:	603b      	str	r3, [r7, #0]
 8009590:	4613      	mov	r3, r2
 8009592:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009594:	f7fa fc2c 	bl	8003df0 <HAL_GetTick>
 8009598:	4602      	mov	r2, r0
 800959a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800959c:	1a9b      	subs	r3, r3, r2
 800959e:	683a      	ldr	r2, [r7, #0]
 80095a0:	4413      	add	r3, r2
 80095a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80095a4:	f7fa fc24 	bl	8003df0 <HAL_GetTick>
 80095a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80095aa:	4b39      	ldr	r3, [pc, #228]	; (8009690 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	015b      	lsls	r3, r3, #5
 80095b0:	0d1b      	lsrs	r3, r3, #20
 80095b2:	69fa      	ldr	r2, [r7, #28]
 80095b4:	fb02 f303 	mul.w	r3, r2, r3
 80095b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80095ba:	e054      	b.n	8009666 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095c2:	d050      	beq.n	8009666 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80095c4:	f7fa fc14 	bl	8003df0 <HAL_GetTick>
 80095c8:	4602      	mov	r2, r0
 80095ca:	69bb      	ldr	r3, [r7, #24]
 80095cc:	1ad3      	subs	r3, r2, r3
 80095ce:	69fa      	ldr	r2, [r7, #28]
 80095d0:	429a      	cmp	r2, r3
 80095d2:	d902      	bls.n	80095da <SPI_WaitFlagStateUntilTimeout+0x56>
 80095d4:	69fb      	ldr	r3, [r7, #28]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d13d      	bne.n	8009656 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	685a      	ldr	r2, [r3, #4]
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80095e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	685b      	ldr	r3, [r3, #4]
 80095ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80095f2:	d111      	bne.n	8009618 <SPI_WaitFlagStateUntilTimeout+0x94>
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	689b      	ldr	r3, [r3, #8]
 80095f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095fc:	d004      	beq.n	8009608 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	689b      	ldr	r3, [r3, #8]
 8009602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009606:	d107      	bne.n	8009618 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009616:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800961c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009620:	d10f      	bne.n	8009642 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	681a      	ldr	r2, [r3, #0]
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009630:	601a      	str	r2, [r3, #0]
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	681a      	ldr	r2, [r3, #0]
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009640:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	2201      	movs	r2, #1
 8009646:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2200      	movs	r2, #0
 800964e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009652:	2303      	movs	r3, #3
 8009654:	e017      	b.n	8009686 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d101      	bne.n	8009660 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800965c:	2300      	movs	r3, #0
 800965e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	3b01      	subs	r3, #1
 8009664:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	689a      	ldr	r2, [r3, #8]
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	4013      	ands	r3, r2
 8009670:	68ba      	ldr	r2, [r7, #8]
 8009672:	429a      	cmp	r2, r3
 8009674:	bf0c      	ite	eq
 8009676:	2301      	moveq	r3, #1
 8009678:	2300      	movne	r3, #0
 800967a:	b2db      	uxtb	r3, r3
 800967c:	461a      	mov	r2, r3
 800967e:	79fb      	ldrb	r3, [r7, #7]
 8009680:	429a      	cmp	r2, r3
 8009682:	d19b      	bne.n	80095bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009684:	2300      	movs	r3, #0
}
 8009686:	4618      	mov	r0, r3
 8009688:	3720      	adds	r7, #32
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
 800968e:	bf00      	nop
 8009690:	20000140 	.word	0x20000140

08009694 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b08a      	sub	sp, #40	; 0x28
 8009698:	af00      	add	r7, sp, #0
 800969a:	60f8      	str	r0, [r7, #12]
 800969c:	60b9      	str	r1, [r7, #8]
 800969e:	607a      	str	r2, [r7, #4]
 80096a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80096a2:	2300      	movs	r3, #0
 80096a4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80096a6:	f7fa fba3 	bl	8003df0 <HAL_GetTick>
 80096aa:	4602      	mov	r2, r0
 80096ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ae:	1a9b      	subs	r3, r3, r2
 80096b0:	683a      	ldr	r2, [r7, #0]
 80096b2:	4413      	add	r3, r2
 80096b4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80096b6:	f7fa fb9b 	bl	8003df0 <HAL_GetTick>
 80096ba:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	330c      	adds	r3, #12
 80096c2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80096c4:	4b3d      	ldr	r3, [pc, #244]	; (80097bc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80096c6:	681a      	ldr	r2, [r3, #0]
 80096c8:	4613      	mov	r3, r2
 80096ca:	009b      	lsls	r3, r3, #2
 80096cc:	4413      	add	r3, r2
 80096ce:	00da      	lsls	r2, r3, #3
 80096d0:	1ad3      	subs	r3, r2, r3
 80096d2:	0d1b      	lsrs	r3, r3, #20
 80096d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096d6:	fb02 f303 	mul.w	r3, r2, r3
 80096da:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80096dc:	e060      	b.n	80097a0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80096e4:	d107      	bne.n	80096f6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d104      	bne.n	80096f6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80096ec:	69fb      	ldr	r3, [r7, #28]
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	b2db      	uxtb	r3, r3
 80096f2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80096f4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096fc:	d050      	beq.n	80097a0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80096fe:	f7fa fb77 	bl	8003df0 <HAL_GetTick>
 8009702:	4602      	mov	r2, r0
 8009704:	6a3b      	ldr	r3, [r7, #32]
 8009706:	1ad3      	subs	r3, r2, r3
 8009708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800970a:	429a      	cmp	r2, r3
 800970c:	d902      	bls.n	8009714 <SPI_WaitFifoStateUntilTimeout+0x80>
 800970e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009710:	2b00      	cmp	r3, #0
 8009712:	d13d      	bne.n	8009790 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	685a      	ldr	r2, [r3, #4]
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009722:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	685b      	ldr	r3, [r3, #4]
 8009728:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800972c:	d111      	bne.n	8009752 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	689b      	ldr	r3, [r3, #8]
 8009732:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009736:	d004      	beq.n	8009742 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	689b      	ldr	r3, [r3, #8]
 800973c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009740:	d107      	bne.n	8009752 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	681a      	ldr	r2, [r3, #0]
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009750:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009756:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800975a:	d10f      	bne.n	800977c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	681a      	ldr	r2, [r3, #0]
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800976a:	601a      	str	r2, [r3, #0]
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	681a      	ldr	r2, [r3, #0]
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800977a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2201      	movs	r2, #1
 8009780:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	2200      	movs	r2, #0
 8009788:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800978c:	2303      	movs	r3, #3
 800978e:	e010      	b.n	80097b2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009790:	69bb      	ldr	r3, [r7, #24]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d101      	bne.n	800979a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009796:	2300      	movs	r3, #0
 8009798:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800979a:	69bb      	ldr	r3, [r7, #24]
 800979c:	3b01      	subs	r3, #1
 800979e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	689a      	ldr	r2, [r3, #8]
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	4013      	ands	r3, r2
 80097aa:	687a      	ldr	r2, [r7, #4]
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d196      	bne.n	80096de <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80097b0:	2300      	movs	r3, #0
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3728      	adds	r7, #40	; 0x28
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}
 80097ba:	bf00      	nop
 80097bc:	20000140 	.word	0x20000140

080097c0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b086      	sub	sp, #24
 80097c4:	af02      	add	r7, sp, #8
 80097c6:	60f8      	str	r0, [r7, #12]
 80097c8:	60b9      	str	r1, [r7, #8]
 80097ca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80097d4:	d111      	bne.n	80097fa <SPI_EndRxTransaction+0x3a>
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	689b      	ldr	r3, [r3, #8]
 80097da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097de:	d004      	beq.n	80097ea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	689b      	ldr	r3, [r3, #8]
 80097e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097e8:	d107      	bne.n	80097fa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	681a      	ldr	r2, [r3, #0]
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097f8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	9300      	str	r3, [sp, #0]
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	2200      	movs	r2, #0
 8009802:	2180      	movs	r1, #128	; 0x80
 8009804:	68f8      	ldr	r0, [r7, #12]
 8009806:	f7ff febd 	bl	8009584 <SPI_WaitFlagStateUntilTimeout>
 800980a:	4603      	mov	r3, r0
 800980c:	2b00      	cmp	r3, #0
 800980e:	d007      	beq.n	8009820 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009814:	f043 0220 	orr.w	r2, r3, #32
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800981c:	2303      	movs	r3, #3
 800981e:	e023      	b.n	8009868 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009828:	d11d      	bne.n	8009866 <SPI_EndRxTransaction+0xa6>
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	689b      	ldr	r3, [r3, #8]
 800982e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009832:	d004      	beq.n	800983e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	689b      	ldr	r3, [r3, #8]
 8009838:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800983c:	d113      	bne.n	8009866 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	9300      	str	r3, [sp, #0]
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	2200      	movs	r2, #0
 8009846:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800984a:	68f8      	ldr	r0, [r7, #12]
 800984c:	f7ff ff22 	bl	8009694 <SPI_WaitFifoStateUntilTimeout>
 8009850:	4603      	mov	r3, r0
 8009852:	2b00      	cmp	r3, #0
 8009854:	d007      	beq.n	8009866 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800985a:	f043 0220 	orr.w	r2, r3, #32
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8009862:	2303      	movs	r3, #3
 8009864:	e000      	b.n	8009868 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8009866:	2300      	movs	r3, #0
}
 8009868:	4618      	mov	r0, r3
 800986a:	3710      	adds	r7, #16
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}

08009870 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b086      	sub	sp, #24
 8009874:	af02      	add	r7, sp, #8
 8009876:	60f8      	str	r0, [r7, #12]
 8009878:	60b9      	str	r1, [r7, #8]
 800987a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	9300      	str	r3, [sp, #0]
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	2200      	movs	r2, #0
 8009884:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009888:	68f8      	ldr	r0, [r7, #12]
 800988a:	f7ff ff03 	bl	8009694 <SPI_WaitFifoStateUntilTimeout>
 800988e:	4603      	mov	r3, r0
 8009890:	2b00      	cmp	r3, #0
 8009892:	d007      	beq.n	80098a4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009898:	f043 0220 	orr.w	r2, r3, #32
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80098a0:	2303      	movs	r3, #3
 80098a2:	e027      	b.n	80098f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	9300      	str	r3, [sp, #0]
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	2200      	movs	r2, #0
 80098ac:	2180      	movs	r1, #128	; 0x80
 80098ae:	68f8      	ldr	r0, [r7, #12]
 80098b0:	f7ff fe68 	bl	8009584 <SPI_WaitFlagStateUntilTimeout>
 80098b4:	4603      	mov	r3, r0
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d007      	beq.n	80098ca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098be:	f043 0220 	orr.w	r2, r3, #32
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80098c6:	2303      	movs	r3, #3
 80098c8:	e014      	b.n	80098f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	9300      	str	r3, [sp, #0]
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	2200      	movs	r2, #0
 80098d2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80098d6:	68f8      	ldr	r0, [r7, #12]
 80098d8:	f7ff fedc 	bl	8009694 <SPI_WaitFifoStateUntilTimeout>
 80098dc:	4603      	mov	r3, r0
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d007      	beq.n	80098f2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098e6:	f043 0220 	orr.w	r2, r3, #32
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80098ee:	2303      	movs	r3, #3
 80098f0:	e000      	b.n	80098f4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80098f2:	2300      	movs	r3, #0
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3710      	adds	r7, #16
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b082      	sub	sp, #8
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d101      	bne.n	800990e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800990a:	2301      	movs	r3, #1
 800990c:	e049      	b.n	80099a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009914:	b2db      	uxtb	r3, r3
 8009916:	2b00      	cmp	r3, #0
 8009918:	d106      	bne.n	8009928 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2200      	movs	r2, #0
 800991e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f7fa f85a 	bl	80039dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2202      	movs	r2, #2
 800992c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681a      	ldr	r2, [r3, #0]
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	3304      	adds	r3, #4
 8009938:	4619      	mov	r1, r3
 800993a:	4610      	mov	r0, r2
 800993c:	f000 fe74 	bl	800a628 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2201      	movs	r2, #1
 8009944:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2201      	movs	r2, #1
 800994c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2201      	movs	r2, #1
 8009954:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2201      	movs	r2, #1
 800995c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2201      	movs	r2, #1
 8009964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2201      	movs	r2, #1
 800996c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2201      	movs	r2, #1
 8009974:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2201      	movs	r2, #1
 800997c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2201      	movs	r2, #1
 8009984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2201      	movs	r2, #1
 800998c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2201      	movs	r2, #1
 8009994:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2201      	movs	r2, #1
 800999c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80099a0:	2300      	movs	r3, #0
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3708      	adds	r7, #8
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}

080099aa <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80099aa:	b480      	push	{r7}
 80099ac:	b083      	sub	sp, #12
 80099ae:	af00      	add	r7, sp, #0
 80099b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	6a1a      	ldr	r2, [r3, #32]
 80099b8:	f241 1311 	movw	r3, #4369	; 0x1111
 80099bc:	4013      	ands	r3, r2
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d10f      	bne.n	80099e2 <HAL_TIM_Base_Stop+0x38>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	6a1a      	ldr	r2, [r3, #32]
 80099c8:	f244 4344 	movw	r3, #17476	; 0x4444
 80099cc:	4013      	ands	r3, r2
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d107      	bne.n	80099e2 <HAL_TIM_Base_Stop+0x38>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	681a      	ldr	r2, [r3, #0]
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f022 0201 	bic.w	r2, r2, #1
 80099e0:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2201      	movs	r2, #1
 80099e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80099ea:	2300      	movs	r3, #0
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	370c      	adds	r7, #12
 80099f0:	46bd      	mov	sp, r7
 80099f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f6:	4770      	bx	lr

080099f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b085      	sub	sp, #20
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a06:	b2db      	uxtb	r3, r3
 8009a08:	2b01      	cmp	r3, #1
 8009a0a:	d001      	beq.n	8009a10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	e04a      	b.n	8009aa6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2202      	movs	r2, #2
 8009a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	68da      	ldr	r2, [r3, #12]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f042 0201 	orr.w	r2, r2, #1
 8009a26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4a21      	ldr	r2, [pc, #132]	; (8009ab4 <HAL_TIM_Base_Start_IT+0xbc>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d018      	beq.n	8009a64 <HAL_TIM_Base_Start_IT+0x6c>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a3a:	d013      	beq.n	8009a64 <HAL_TIM_Base_Start_IT+0x6c>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4a1d      	ldr	r2, [pc, #116]	; (8009ab8 <HAL_TIM_Base_Start_IT+0xc0>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d00e      	beq.n	8009a64 <HAL_TIM_Base_Start_IT+0x6c>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	4a1c      	ldr	r2, [pc, #112]	; (8009abc <HAL_TIM_Base_Start_IT+0xc4>)
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d009      	beq.n	8009a64 <HAL_TIM_Base_Start_IT+0x6c>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4a1a      	ldr	r2, [pc, #104]	; (8009ac0 <HAL_TIM_Base_Start_IT+0xc8>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d004      	beq.n	8009a64 <HAL_TIM_Base_Start_IT+0x6c>
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	4a19      	ldr	r2, [pc, #100]	; (8009ac4 <HAL_TIM_Base_Start_IT+0xcc>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d115      	bne.n	8009a90 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	689a      	ldr	r2, [r3, #8]
 8009a6a:	4b17      	ldr	r3, [pc, #92]	; (8009ac8 <HAL_TIM_Base_Start_IT+0xd0>)
 8009a6c:	4013      	ands	r3, r2
 8009a6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2b06      	cmp	r3, #6
 8009a74:	d015      	beq.n	8009aa2 <HAL_TIM_Base_Start_IT+0xaa>
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a7c:	d011      	beq.n	8009aa2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	681a      	ldr	r2, [r3, #0]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f042 0201 	orr.w	r2, r2, #1
 8009a8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a8e:	e008      	b.n	8009aa2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	681a      	ldr	r2, [r3, #0]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f042 0201 	orr.w	r2, r2, #1
 8009a9e:	601a      	str	r2, [r3, #0]
 8009aa0:	e000      	b.n	8009aa4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009aa2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009aa4:	2300      	movs	r3, #0
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3714      	adds	r7, #20
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab0:	4770      	bx	lr
 8009ab2:	bf00      	nop
 8009ab4:	40012c00 	.word	0x40012c00
 8009ab8:	40000400 	.word	0x40000400
 8009abc:	40000800 	.word	0x40000800
 8009ac0:	40013400 	.word	0x40013400
 8009ac4:	40014000 	.word	0x40014000
 8009ac8:	00010007 	.word	0x00010007

08009acc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b082      	sub	sp, #8
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d101      	bne.n	8009ade <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009ada:	2301      	movs	r3, #1
 8009adc:	e049      	b.n	8009b72 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ae4:	b2db      	uxtb	r3, r3
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d106      	bne.n	8009af8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2200      	movs	r2, #0
 8009aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f000 f841 	bl	8009b7a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2202      	movs	r2, #2
 8009afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681a      	ldr	r2, [r3, #0]
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	3304      	adds	r3, #4
 8009b08:	4619      	mov	r1, r3
 8009b0a:	4610      	mov	r0, r2
 8009b0c:	f000 fd8c 	bl	800a628 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2201      	movs	r2, #1
 8009b14:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2201      	movs	r2, #1
 8009b24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2201      	movs	r2, #1
 8009b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2201      	movs	r2, #1
 8009b3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2201      	movs	r2, #1
 8009b44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2201      	movs	r2, #1
 8009b54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2201      	movs	r2, #1
 8009b64:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b70:	2300      	movs	r3, #0
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3708      	adds	r7, #8
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}

08009b7a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009b7a:	b480      	push	{r7}
 8009b7c:	b083      	sub	sp, #12
 8009b7e:	af00      	add	r7, sp, #0
 8009b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009b82:	bf00      	nop
 8009b84:	370c      	adds	r7, #12
 8009b86:	46bd      	mov	sp, r7
 8009b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8c:	4770      	bx	lr
	...

08009b90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b084      	sub	sp, #16
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d109      	bne.n	8009bb4 <HAL_TIM_PWM_Start+0x24>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009ba6:	b2db      	uxtb	r3, r3
 8009ba8:	2b01      	cmp	r3, #1
 8009baa:	bf14      	ite	ne
 8009bac:	2301      	movne	r3, #1
 8009bae:	2300      	moveq	r3, #0
 8009bb0:	b2db      	uxtb	r3, r3
 8009bb2:	e03c      	b.n	8009c2e <HAL_TIM_PWM_Start+0x9e>
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	2b04      	cmp	r3, #4
 8009bb8:	d109      	bne.n	8009bce <HAL_TIM_PWM_Start+0x3e>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009bc0:	b2db      	uxtb	r3, r3
 8009bc2:	2b01      	cmp	r3, #1
 8009bc4:	bf14      	ite	ne
 8009bc6:	2301      	movne	r3, #1
 8009bc8:	2300      	moveq	r3, #0
 8009bca:	b2db      	uxtb	r3, r3
 8009bcc:	e02f      	b.n	8009c2e <HAL_TIM_PWM_Start+0x9e>
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	2b08      	cmp	r3, #8
 8009bd2:	d109      	bne.n	8009be8 <HAL_TIM_PWM_Start+0x58>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009bda:	b2db      	uxtb	r3, r3
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	bf14      	ite	ne
 8009be0:	2301      	movne	r3, #1
 8009be2:	2300      	moveq	r3, #0
 8009be4:	b2db      	uxtb	r3, r3
 8009be6:	e022      	b.n	8009c2e <HAL_TIM_PWM_Start+0x9e>
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	2b0c      	cmp	r3, #12
 8009bec:	d109      	bne.n	8009c02 <HAL_TIM_PWM_Start+0x72>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009bf4:	b2db      	uxtb	r3, r3
 8009bf6:	2b01      	cmp	r3, #1
 8009bf8:	bf14      	ite	ne
 8009bfa:	2301      	movne	r3, #1
 8009bfc:	2300      	moveq	r3, #0
 8009bfe:	b2db      	uxtb	r3, r3
 8009c00:	e015      	b.n	8009c2e <HAL_TIM_PWM_Start+0x9e>
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	2b10      	cmp	r3, #16
 8009c06:	d109      	bne.n	8009c1c <HAL_TIM_PWM_Start+0x8c>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009c0e:	b2db      	uxtb	r3, r3
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	bf14      	ite	ne
 8009c14:	2301      	movne	r3, #1
 8009c16:	2300      	moveq	r3, #0
 8009c18:	b2db      	uxtb	r3, r3
 8009c1a:	e008      	b.n	8009c2e <HAL_TIM_PWM_Start+0x9e>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009c22:	b2db      	uxtb	r3, r3
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	bf14      	ite	ne
 8009c28:	2301      	movne	r3, #1
 8009c2a:	2300      	moveq	r3, #0
 8009c2c:	b2db      	uxtb	r3, r3
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d001      	beq.n	8009c36 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009c32:	2301      	movs	r3, #1
 8009c34:	e097      	b.n	8009d66 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d104      	bne.n	8009c46 <HAL_TIM_PWM_Start+0xb6>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2202      	movs	r2, #2
 8009c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009c44:	e023      	b.n	8009c8e <HAL_TIM_PWM_Start+0xfe>
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	2b04      	cmp	r3, #4
 8009c4a:	d104      	bne.n	8009c56 <HAL_TIM_PWM_Start+0xc6>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2202      	movs	r2, #2
 8009c50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009c54:	e01b      	b.n	8009c8e <HAL_TIM_PWM_Start+0xfe>
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	2b08      	cmp	r3, #8
 8009c5a:	d104      	bne.n	8009c66 <HAL_TIM_PWM_Start+0xd6>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2202      	movs	r2, #2
 8009c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009c64:	e013      	b.n	8009c8e <HAL_TIM_PWM_Start+0xfe>
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	2b0c      	cmp	r3, #12
 8009c6a:	d104      	bne.n	8009c76 <HAL_TIM_PWM_Start+0xe6>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2202      	movs	r2, #2
 8009c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009c74:	e00b      	b.n	8009c8e <HAL_TIM_PWM_Start+0xfe>
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	2b10      	cmp	r3, #16
 8009c7a:	d104      	bne.n	8009c86 <HAL_TIM_PWM_Start+0xf6>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2202      	movs	r2, #2
 8009c80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009c84:	e003      	b.n	8009c8e <HAL_TIM_PWM_Start+0xfe>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2202      	movs	r2, #2
 8009c8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	2201      	movs	r2, #1
 8009c94:	6839      	ldr	r1, [r7, #0]
 8009c96:	4618      	mov	r0, r3
 8009c98:	f001 f8e8 	bl	800ae6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	4a33      	ldr	r2, [pc, #204]	; (8009d70 <HAL_TIM_PWM_Start+0x1e0>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d013      	beq.n	8009cce <HAL_TIM_PWM_Start+0x13e>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4a32      	ldr	r2, [pc, #200]	; (8009d74 <HAL_TIM_PWM_Start+0x1e4>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d00e      	beq.n	8009cce <HAL_TIM_PWM_Start+0x13e>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4a30      	ldr	r2, [pc, #192]	; (8009d78 <HAL_TIM_PWM_Start+0x1e8>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d009      	beq.n	8009cce <HAL_TIM_PWM_Start+0x13e>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	4a2f      	ldr	r2, [pc, #188]	; (8009d7c <HAL_TIM_PWM_Start+0x1ec>)
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d004      	beq.n	8009cce <HAL_TIM_PWM_Start+0x13e>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	4a2d      	ldr	r2, [pc, #180]	; (8009d80 <HAL_TIM_PWM_Start+0x1f0>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d101      	bne.n	8009cd2 <HAL_TIM_PWM_Start+0x142>
 8009cce:	2301      	movs	r3, #1
 8009cd0:	e000      	b.n	8009cd4 <HAL_TIM_PWM_Start+0x144>
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d007      	beq.n	8009ce8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009ce6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4a20      	ldr	r2, [pc, #128]	; (8009d70 <HAL_TIM_PWM_Start+0x1e0>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d018      	beq.n	8009d24 <HAL_TIM_PWM_Start+0x194>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cfa:	d013      	beq.n	8009d24 <HAL_TIM_PWM_Start+0x194>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4a20      	ldr	r2, [pc, #128]	; (8009d84 <HAL_TIM_PWM_Start+0x1f4>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d00e      	beq.n	8009d24 <HAL_TIM_PWM_Start+0x194>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	4a1f      	ldr	r2, [pc, #124]	; (8009d88 <HAL_TIM_PWM_Start+0x1f8>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d009      	beq.n	8009d24 <HAL_TIM_PWM_Start+0x194>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4a17      	ldr	r2, [pc, #92]	; (8009d74 <HAL_TIM_PWM_Start+0x1e4>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d004      	beq.n	8009d24 <HAL_TIM_PWM_Start+0x194>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4a16      	ldr	r2, [pc, #88]	; (8009d78 <HAL_TIM_PWM_Start+0x1e8>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d115      	bne.n	8009d50 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	689a      	ldr	r2, [r3, #8]
 8009d2a:	4b18      	ldr	r3, [pc, #96]	; (8009d8c <HAL_TIM_PWM_Start+0x1fc>)
 8009d2c:	4013      	ands	r3, r2
 8009d2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	2b06      	cmp	r3, #6
 8009d34:	d015      	beq.n	8009d62 <HAL_TIM_PWM_Start+0x1d2>
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d3c:	d011      	beq.n	8009d62 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	681a      	ldr	r2, [r3, #0]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f042 0201 	orr.w	r2, r2, #1
 8009d4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d4e:	e008      	b.n	8009d62 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	681a      	ldr	r2, [r3, #0]
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f042 0201 	orr.w	r2, r2, #1
 8009d5e:	601a      	str	r2, [r3, #0]
 8009d60:	e000      	b.n	8009d64 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009d64:	2300      	movs	r3, #0
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3710      	adds	r7, #16
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}
 8009d6e:	bf00      	nop
 8009d70:	40012c00 	.word	0x40012c00
 8009d74:	40013400 	.word	0x40013400
 8009d78:	40014000 	.word	0x40014000
 8009d7c:	40014400 	.word	0x40014400
 8009d80:	40014800 	.word	0x40014800
 8009d84:	40000400 	.word	0x40000400
 8009d88:	40000800 	.word	0x40000800
 8009d8c:	00010007 	.word	0x00010007

08009d90 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b082      	sub	sp, #8
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	6839      	ldr	r1, [r7, #0]
 8009da2:	4618      	mov	r0, r3
 8009da4:	f001 f862 	bl	800ae6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	4a3e      	ldr	r2, [pc, #248]	; (8009ea8 <HAL_TIM_PWM_Stop+0x118>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d013      	beq.n	8009dda <HAL_TIM_PWM_Stop+0x4a>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	4a3d      	ldr	r2, [pc, #244]	; (8009eac <HAL_TIM_PWM_Stop+0x11c>)
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d00e      	beq.n	8009dda <HAL_TIM_PWM_Stop+0x4a>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a3b      	ldr	r2, [pc, #236]	; (8009eb0 <HAL_TIM_PWM_Stop+0x120>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d009      	beq.n	8009dda <HAL_TIM_PWM_Stop+0x4a>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	4a3a      	ldr	r2, [pc, #232]	; (8009eb4 <HAL_TIM_PWM_Stop+0x124>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d004      	beq.n	8009dda <HAL_TIM_PWM_Stop+0x4a>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4a38      	ldr	r2, [pc, #224]	; (8009eb8 <HAL_TIM_PWM_Stop+0x128>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d101      	bne.n	8009dde <HAL_TIM_PWM_Stop+0x4e>
 8009dda:	2301      	movs	r3, #1
 8009ddc:	e000      	b.n	8009de0 <HAL_TIM_PWM_Stop+0x50>
 8009dde:	2300      	movs	r3, #0
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d017      	beq.n	8009e14 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	6a1a      	ldr	r2, [r3, #32]
 8009dea:	f241 1311 	movw	r3, #4369	; 0x1111
 8009dee:	4013      	ands	r3, r2
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d10f      	bne.n	8009e14 <HAL_TIM_PWM_Stop+0x84>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	6a1a      	ldr	r2, [r3, #32]
 8009dfa:	f244 4344 	movw	r3, #17476	; 0x4444
 8009dfe:	4013      	ands	r3, r2
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d107      	bne.n	8009e14 <HAL_TIM_PWM_Stop+0x84>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009e12:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	6a1a      	ldr	r2, [r3, #32]
 8009e1a:	f241 1311 	movw	r3, #4369	; 0x1111
 8009e1e:	4013      	ands	r3, r2
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d10f      	bne.n	8009e44 <HAL_TIM_PWM_Stop+0xb4>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	6a1a      	ldr	r2, [r3, #32]
 8009e2a:	f244 4344 	movw	r3, #17476	; 0x4444
 8009e2e:	4013      	ands	r3, r2
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d107      	bne.n	8009e44 <HAL_TIM_PWM_Stop+0xb4>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	681a      	ldr	r2, [r3, #0]
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f022 0201 	bic.w	r2, r2, #1
 8009e42:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d104      	bne.n	8009e54 <HAL_TIM_PWM_Stop+0xc4>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2201      	movs	r2, #1
 8009e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e52:	e023      	b.n	8009e9c <HAL_TIM_PWM_Stop+0x10c>
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	2b04      	cmp	r3, #4
 8009e58:	d104      	bne.n	8009e64 <HAL_TIM_PWM_Stop+0xd4>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009e62:	e01b      	b.n	8009e9c <HAL_TIM_PWM_Stop+0x10c>
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	2b08      	cmp	r3, #8
 8009e68:	d104      	bne.n	8009e74 <HAL_TIM_PWM_Stop+0xe4>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2201      	movs	r2, #1
 8009e6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009e72:	e013      	b.n	8009e9c <HAL_TIM_PWM_Stop+0x10c>
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	2b0c      	cmp	r3, #12
 8009e78:	d104      	bne.n	8009e84 <HAL_TIM_PWM_Stop+0xf4>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2201      	movs	r2, #1
 8009e7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009e82:	e00b      	b.n	8009e9c <HAL_TIM_PWM_Stop+0x10c>
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	2b10      	cmp	r3, #16
 8009e88:	d104      	bne.n	8009e94 <HAL_TIM_PWM_Stop+0x104>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2201      	movs	r2, #1
 8009e8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009e92:	e003      	b.n	8009e9c <HAL_TIM_PWM_Stop+0x10c>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2201      	movs	r2, #1
 8009e98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8009e9c:	2300      	movs	r3, #0
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3708      	adds	r7, #8
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}
 8009ea6:	bf00      	nop
 8009ea8:	40012c00 	.word	0x40012c00
 8009eac:	40013400 	.word	0x40013400
 8009eb0:	40014000 	.word	0x40014000
 8009eb4:	40014400 	.word	0x40014400
 8009eb8:	40014800 	.word	0x40014800

08009ebc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b082      	sub	sp, #8
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	691b      	ldr	r3, [r3, #16]
 8009eca:	f003 0302 	and.w	r3, r3, #2
 8009ece:	2b02      	cmp	r3, #2
 8009ed0:	d122      	bne.n	8009f18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	68db      	ldr	r3, [r3, #12]
 8009ed8:	f003 0302 	and.w	r3, r3, #2
 8009edc:	2b02      	cmp	r3, #2
 8009ede:	d11b      	bne.n	8009f18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f06f 0202 	mvn.w	r2, #2
 8009ee8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2201      	movs	r2, #1
 8009eee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	699b      	ldr	r3, [r3, #24]
 8009ef6:	f003 0303 	and.w	r3, r3, #3
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d003      	beq.n	8009f06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 fb74 	bl	800a5ec <HAL_TIM_IC_CaptureCallback>
 8009f04:	e005      	b.n	8009f12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f000 fb66 	bl	800a5d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f000 fb77 	bl	800a600 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2200      	movs	r2, #0
 8009f16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	691b      	ldr	r3, [r3, #16]
 8009f1e:	f003 0304 	and.w	r3, r3, #4
 8009f22:	2b04      	cmp	r3, #4
 8009f24:	d122      	bne.n	8009f6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	68db      	ldr	r3, [r3, #12]
 8009f2c:	f003 0304 	and.w	r3, r3, #4
 8009f30:	2b04      	cmp	r3, #4
 8009f32:	d11b      	bne.n	8009f6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f06f 0204 	mvn.w	r2, #4
 8009f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2202      	movs	r2, #2
 8009f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	699b      	ldr	r3, [r3, #24]
 8009f4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d003      	beq.n	8009f5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f000 fb4a 	bl	800a5ec <HAL_TIM_IC_CaptureCallback>
 8009f58:	e005      	b.n	8009f66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f000 fb3c 	bl	800a5d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f000 fb4d 	bl	800a600 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	691b      	ldr	r3, [r3, #16]
 8009f72:	f003 0308 	and.w	r3, r3, #8
 8009f76:	2b08      	cmp	r3, #8
 8009f78:	d122      	bne.n	8009fc0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	68db      	ldr	r3, [r3, #12]
 8009f80:	f003 0308 	and.w	r3, r3, #8
 8009f84:	2b08      	cmp	r3, #8
 8009f86:	d11b      	bne.n	8009fc0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f06f 0208 	mvn.w	r2, #8
 8009f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2204      	movs	r2, #4
 8009f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	69db      	ldr	r3, [r3, #28]
 8009f9e:	f003 0303 	and.w	r3, r3, #3
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d003      	beq.n	8009fae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f000 fb20 	bl	800a5ec <HAL_TIM_IC_CaptureCallback>
 8009fac:	e005      	b.n	8009fba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f000 fb12 	bl	800a5d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f000 fb23 	bl	800a600 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	691b      	ldr	r3, [r3, #16]
 8009fc6:	f003 0310 	and.w	r3, r3, #16
 8009fca:	2b10      	cmp	r3, #16
 8009fcc:	d122      	bne.n	800a014 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	68db      	ldr	r3, [r3, #12]
 8009fd4:	f003 0310 	and.w	r3, r3, #16
 8009fd8:	2b10      	cmp	r3, #16
 8009fda:	d11b      	bne.n	800a014 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	f06f 0210 	mvn.w	r2, #16
 8009fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2208      	movs	r2, #8
 8009fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	69db      	ldr	r3, [r3, #28]
 8009ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d003      	beq.n	800a002 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f000 faf6 	bl	800a5ec <HAL_TIM_IC_CaptureCallback>
 800a000:	e005      	b.n	800a00e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f000 fae8 	bl	800a5d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f000 faf9 	bl	800a600 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2200      	movs	r2, #0
 800a012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	691b      	ldr	r3, [r3, #16]
 800a01a:	f003 0301 	and.w	r3, r3, #1
 800a01e:	2b01      	cmp	r3, #1
 800a020:	d10e      	bne.n	800a040 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	68db      	ldr	r3, [r3, #12]
 800a028:	f003 0301 	and.w	r3, r3, #1
 800a02c:	2b01      	cmp	r3, #1
 800a02e:	d107      	bne.n	800a040 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f06f 0201 	mvn.w	r2, #1
 800a038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f7f7 fb94 	bl	8001768 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	691b      	ldr	r3, [r3, #16]
 800a046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a04a:	2b80      	cmp	r3, #128	; 0x80
 800a04c:	d10e      	bne.n	800a06c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	68db      	ldr	r3, [r3, #12]
 800a054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a058:	2b80      	cmp	r3, #128	; 0x80
 800a05a:	d107      	bne.n	800a06c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f001 f964 	bl	800b334 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	691b      	ldr	r3, [r3, #16]
 800a072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a07a:	d10e      	bne.n	800a09a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	68db      	ldr	r3, [r3, #12]
 800a082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a086:	2b80      	cmp	r3, #128	; 0x80
 800a088:	d107      	bne.n	800a09a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a092:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f001 f957 	bl	800b348 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	691b      	ldr	r3, [r3, #16]
 800a0a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0a4:	2b40      	cmp	r3, #64	; 0x40
 800a0a6:	d10e      	bne.n	800a0c6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	68db      	ldr	r3, [r3, #12]
 800a0ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0b2:	2b40      	cmp	r3, #64	; 0x40
 800a0b4:	d107      	bne.n	800a0c6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a0be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f000 faa7 	bl	800a614 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	691b      	ldr	r3, [r3, #16]
 800a0cc:	f003 0320 	and.w	r3, r3, #32
 800a0d0:	2b20      	cmp	r3, #32
 800a0d2:	d10e      	bne.n	800a0f2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	68db      	ldr	r3, [r3, #12]
 800a0da:	f003 0320 	and.w	r3, r3, #32
 800a0de:	2b20      	cmp	r3, #32
 800a0e0:	d107      	bne.n	800a0f2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f06f 0220 	mvn.w	r2, #32
 800a0ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f001 f917 	bl	800b320 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	691b      	ldr	r3, [r3, #16]
 800a0f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a0fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a100:	d10f      	bne.n	800a122 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	68db      	ldr	r3, [r3, #12]
 800a108:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a10c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a110:	d107      	bne.n	800a122 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800a11a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f001 f91d 	bl	800b35c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	691b      	ldr	r3, [r3, #16]
 800a128:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a12c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a130:	d10f      	bne.n	800a152 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	68db      	ldr	r3, [r3, #12]
 800a138:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a13c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a140:	d107      	bne.n	800a152 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800a14a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f001 f90f 	bl	800b370 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	691b      	ldr	r3, [r3, #16]
 800a158:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a15c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a160:	d10f      	bne.n	800a182 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	68db      	ldr	r3, [r3, #12]
 800a168:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a16c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a170:	d107      	bne.n	800a182 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800a17a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f001 f901 	bl	800b384 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	691b      	ldr	r3, [r3, #16]
 800a188:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a18c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a190:	d10f      	bne.n	800a1b2 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	68db      	ldr	r3, [r3, #12]
 800a198:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a19c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a1a0:	d107      	bne.n	800a1b2 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800a1aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f001 f8f3 	bl	800b398 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a1b2:	bf00      	nop
 800a1b4:	3708      	adds	r7, #8
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}
	...

0800a1bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b086      	sub	sp, #24
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	60f8      	str	r0, [r7, #12]
 800a1c4:	60b9      	str	r1, [r7, #8]
 800a1c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1d2:	2b01      	cmp	r3, #1
 800a1d4:	d101      	bne.n	800a1da <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a1d6:	2302      	movs	r3, #2
 800a1d8:	e0ff      	b.n	800a3da <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2201      	movs	r2, #1
 800a1de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2b14      	cmp	r3, #20
 800a1e6:	f200 80f0 	bhi.w	800a3ca <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a1ea:	a201      	add	r2, pc, #4	; (adr r2, 800a1f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a1ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1f0:	0800a245 	.word	0x0800a245
 800a1f4:	0800a3cb 	.word	0x0800a3cb
 800a1f8:	0800a3cb 	.word	0x0800a3cb
 800a1fc:	0800a3cb 	.word	0x0800a3cb
 800a200:	0800a285 	.word	0x0800a285
 800a204:	0800a3cb 	.word	0x0800a3cb
 800a208:	0800a3cb 	.word	0x0800a3cb
 800a20c:	0800a3cb 	.word	0x0800a3cb
 800a210:	0800a2c7 	.word	0x0800a2c7
 800a214:	0800a3cb 	.word	0x0800a3cb
 800a218:	0800a3cb 	.word	0x0800a3cb
 800a21c:	0800a3cb 	.word	0x0800a3cb
 800a220:	0800a307 	.word	0x0800a307
 800a224:	0800a3cb 	.word	0x0800a3cb
 800a228:	0800a3cb 	.word	0x0800a3cb
 800a22c:	0800a3cb 	.word	0x0800a3cb
 800a230:	0800a349 	.word	0x0800a349
 800a234:	0800a3cb 	.word	0x0800a3cb
 800a238:	0800a3cb 	.word	0x0800a3cb
 800a23c:	0800a3cb 	.word	0x0800a3cb
 800a240:	0800a389 	.word	0x0800a389
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	68b9      	ldr	r1, [r7, #8]
 800a24a:	4618      	mov	r0, r3
 800a24c:	f000 fa7c 	bl	800a748 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	699a      	ldr	r2, [r3, #24]
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f042 0208 	orr.w	r2, r2, #8
 800a25e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	699a      	ldr	r2, [r3, #24]
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f022 0204 	bic.w	r2, r2, #4
 800a26e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	6999      	ldr	r1, [r3, #24]
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	691a      	ldr	r2, [r3, #16]
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	430a      	orrs	r2, r1
 800a280:	619a      	str	r2, [r3, #24]
      break;
 800a282:	e0a5      	b.n	800a3d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	68b9      	ldr	r1, [r7, #8]
 800a28a:	4618      	mov	r0, r3
 800a28c:	f000 faec 	bl	800a868 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	699a      	ldr	r2, [r3, #24]
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a29e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	699a      	ldr	r2, [r3, #24]
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a2ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	6999      	ldr	r1, [r3, #24]
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	691b      	ldr	r3, [r3, #16]
 800a2ba:	021a      	lsls	r2, r3, #8
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	430a      	orrs	r2, r1
 800a2c2:	619a      	str	r2, [r3, #24]
      break;
 800a2c4:	e084      	b.n	800a3d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	68b9      	ldr	r1, [r7, #8]
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f000 fb55 	bl	800a97c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	69da      	ldr	r2, [r3, #28]
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f042 0208 	orr.w	r2, r2, #8
 800a2e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	69da      	ldr	r2, [r3, #28]
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f022 0204 	bic.w	r2, r2, #4
 800a2f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	69d9      	ldr	r1, [r3, #28]
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	691a      	ldr	r2, [r3, #16]
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	430a      	orrs	r2, r1
 800a302:	61da      	str	r2, [r3, #28]
      break;
 800a304:	e064      	b.n	800a3d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	68b9      	ldr	r1, [r7, #8]
 800a30c:	4618      	mov	r0, r3
 800a30e:	f000 fbbd 	bl	800aa8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	69da      	ldr	r2, [r3, #28]
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a320:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	69da      	ldr	r2, [r3, #28]
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a330:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	69d9      	ldr	r1, [r3, #28]
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	691b      	ldr	r3, [r3, #16]
 800a33c:	021a      	lsls	r2, r3, #8
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	430a      	orrs	r2, r1
 800a344:	61da      	str	r2, [r3, #28]
      break;
 800a346:	e043      	b.n	800a3d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	68b9      	ldr	r1, [r7, #8]
 800a34e:	4618      	mov	r0, r3
 800a350:	f000 fc26 	bl	800aba0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f042 0208 	orr.w	r2, r2, #8
 800a362:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f022 0204 	bic.w	r2, r2, #4
 800a372:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	691a      	ldr	r2, [r3, #16]
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	430a      	orrs	r2, r1
 800a384:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800a386:	e023      	b.n	800a3d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	68b9      	ldr	r1, [r7, #8]
 800a38e:	4618      	mov	r0, r3
 800a390:	f000 fc6a 	bl	800ac68 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a3a2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a3b2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	691b      	ldr	r3, [r3, #16]
 800a3be:	021a      	lsls	r2, r3, #8
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	430a      	orrs	r2, r1
 800a3c6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800a3c8:	e002      	b.n	800a3d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	75fb      	strb	r3, [r7, #23]
      break;
 800a3ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a3d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3718      	adds	r7, #24
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}
 800a3e2:	bf00      	nop

0800a3e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b084      	sub	sp, #16
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3f8:	2b01      	cmp	r3, #1
 800a3fa:	d101      	bne.n	800a400 <HAL_TIM_ConfigClockSource+0x1c>
 800a3fc:	2302      	movs	r3, #2
 800a3fe:	e0de      	b.n	800a5be <HAL_TIM_ConfigClockSource+0x1da>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2201      	movs	r2, #1
 800a404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2202      	movs	r2, #2
 800a40c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	689b      	ldr	r3, [r3, #8]
 800a416:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800a41e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a422:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a42a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	68ba      	ldr	r2, [r7, #8]
 800a432:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	4a63      	ldr	r2, [pc, #396]	; (800a5c8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	f000 80a9 	beq.w	800a592 <HAL_TIM_ConfigClockSource+0x1ae>
 800a440:	4a61      	ldr	r2, [pc, #388]	; (800a5c8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a442:	4293      	cmp	r3, r2
 800a444:	f200 80ae 	bhi.w	800a5a4 <HAL_TIM_ConfigClockSource+0x1c0>
 800a448:	4a60      	ldr	r2, [pc, #384]	; (800a5cc <HAL_TIM_ConfigClockSource+0x1e8>)
 800a44a:	4293      	cmp	r3, r2
 800a44c:	f000 80a1 	beq.w	800a592 <HAL_TIM_ConfigClockSource+0x1ae>
 800a450:	4a5e      	ldr	r2, [pc, #376]	; (800a5cc <HAL_TIM_ConfigClockSource+0x1e8>)
 800a452:	4293      	cmp	r3, r2
 800a454:	f200 80a6 	bhi.w	800a5a4 <HAL_TIM_ConfigClockSource+0x1c0>
 800a458:	4a5d      	ldr	r2, [pc, #372]	; (800a5d0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a45a:	4293      	cmp	r3, r2
 800a45c:	f000 8099 	beq.w	800a592 <HAL_TIM_ConfigClockSource+0x1ae>
 800a460:	4a5b      	ldr	r2, [pc, #364]	; (800a5d0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a462:	4293      	cmp	r3, r2
 800a464:	f200 809e 	bhi.w	800a5a4 <HAL_TIM_ConfigClockSource+0x1c0>
 800a468:	4a5a      	ldr	r2, [pc, #360]	; (800a5d4 <HAL_TIM_ConfigClockSource+0x1f0>)
 800a46a:	4293      	cmp	r3, r2
 800a46c:	f000 8091 	beq.w	800a592 <HAL_TIM_ConfigClockSource+0x1ae>
 800a470:	4a58      	ldr	r2, [pc, #352]	; (800a5d4 <HAL_TIM_ConfigClockSource+0x1f0>)
 800a472:	4293      	cmp	r3, r2
 800a474:	f200 8096 	bhi.w	800a5a4 <HAL_TIM_ConfigClockSource+0x1c0>
 800a478:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a47c:	f000 8089 	beq.w	800a592 <HAL_TIM_ConfigClockSource+0x1ae>
 800a480:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a484:	f200 808e 	bhi.w	800a5a4 <HAL_TIM_ConfigClockSource+0x1c0>
 800a488:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a48c:	d03e      	beq.n	800a50c <HAL_TIM_ConfigClockSource+0x128>
 800a48e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a492:	f200 8087 	bhi.w	800a5a4 <HAL_TIM_ConfigClockSource+0x1c0>
 800a496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a49a:	f000 8086 	beq.w	800a5aa <HAL_TIM_ConfigClockSource+0x1c6>
 800a49e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4a2:	d87f      	bhi.n	800a5a4 <HAL_TIM_ConfigClockSource+0x1c0>
 800a4a4:	2b70      	cmp	r3, #112	; 0x70
 800a4a6:	d01a      	beq.n	800a4de <HAL_TIM_ConfigClockSource+0xfa>
 800a4a8:	2b70      	cmp	r3, #112	; 0x70
 800a4aa:	d87b      	bhi.n	800a5a4 <HAL_TIM_ConfigClockSource+0x1c0>
 800a4ac:	2b60      	cmp	r3, #96	; 0x60
 800a4ae:	d050      	beq.n	800a552 <HAL_TIM_ConfigClockSource+0x16e>
 800a4b0:	2b60      	cmp	r3, #96	; 0x60
 800a4b2:	d877      	bhi.n	800a5a4 <HAL_TIM_ConfigClockSource+0x1c0>
 800a4b4:	2b50      	cmp	r3, #80	; 0x50
 800a4b6:	d03c      	beq.n	800a532 <HAL_TIM_ConfigClockSource+0x14e>
 800a4b8:	2b50      	cmp	r3, #80	; 0x50
 800a4ba:	d873      	bhi.n	800a5a4 <HAL_TIM_ConfigClockSource+0x1c0>
 800a4bc:	2b40      	cmp	r3, #64	; 0x40
 800a4be:	d058      	beq.n	800a572 <HAL_TIM_ConfigClockSource+0x18e>
 800a4c0:	2b40      	cmp	r3, #64	; 0x40
 800a4c2:	d86f      	bhi.n	800a5a4 <HAL_TIM_ConfigClockSource+0x1c0>
 800a4c4:	2b30      	cmp	r3, #48	; 0x30
 800a4c6:	d064      	beq.n	800a592 <HAL_TIM_ConfigClockSource+0x1ae>
 800a4c8:	2b30      	cmp	r3, #48	; 0x30
 800a4ca:	d86b      	bhi.n	800a5a4 <HAL_TIM_ConfigClockSource+0x1c0>
 800a4cc:	2b20      	cmp	r3, #32
 800a4ce:	d060      	beq.n	800a592 <HAL_TIM_ConfigClockSource+0x1ae>
 800a4d0:	2b20      	cmp	r3, #32
 800a4d2:	d867      	bhi.n	800a5a4 <HAL_TIM_ConfigClockSource+0x1c0>
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d05c      	beq.n	800a592 <HAL_TIM_ConfigClockSource+0x1ae>
 800a4d8:	2b10      	cmp	r3, #16
 800a4da:	d05a      	beq.n	800a592 <HAL_TIM_ConfigClockSource+0x1ae>
 800a4dc:	e062      	b.n	800a5a4 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6818      	ldr	r0, [r3, #0]
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	6899      	ldr	r1, [r3, #8]
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	685a      	ldr	r2, [r3, #4]
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	68db      	ldr	r3, [r3, #12]
 800a4ee:	f000 fc9d 	bl	800ae2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	689b      	ldr	r3, [r3, #8]
 800a4f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a500:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	68ba      	ldr	r2, [r7, #8]
 800a508:	609a      	str	r2, [r3, #8]
      break;
 800a50a:	e04f      	b.n	800a5ac <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6818      	ldr	r0, [r3, #0]
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	6899      	ldr	r1, [r3, #8]
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	685a      	ldr	r2, [r3, #4]
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	68db      	ldr	r3, [r3, #12]
 800a51c:	f000 fc86 	bl	800ae2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	689a      	ldr	r2, [r3, #8]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a52e:	609a      	str	r2, [r3, #8]
      break;
 800a530:	e03c      	b.n	800a5ac <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6818      	ldr	r0, [r3, #0]
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	6859      	ldr	r1, [r3, #4]
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	68db      	ldr	r3, [r3, #12]
 800a53e:	461a      	mov	r2, r3
 800a540:	f000 fbf8 	bl	800ad34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	2150      	movs	r1, #80	; 0x50
 800a54a:	4618      	mov	r0, r3
 800a54c:	f000 fc51 	bl	800adf2 <TIM_ITRx_SetConfig>
      break;
 800a550:	e02c      	b.n	800a5ac <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6818      	ldr	r0, [r3, #0]
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	6859      	ldr	r1, [r3, #4]
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	68db      	ldr	r3, [r3, #12]
 800a55e:	461a      	mov	r2, r3
 800a560:	f000 fc17 	bl	800ad92 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	2160      	movs	r1, #96	; 0x60
 800a56a:	4618      	mov	r0, r3
 800a56c:	f000 fc41 	bl	800adf2 <TIM_ITRx_SetConfig>
      break;
 800a570:	e01c      	b.n	800a5ac <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6818      	ldr	r0, [r3, #0]
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	6859      	ldr	r1, [r3, #4]
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	68db      	ldr	r3, [r3, #12]
 800a57e:	461a      	mov	r2, r3
 800a580:	f000 fbd8 	bl	800ad34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	2140      	movs	r1, #64	; 0x40
 800a58a:	4618      	mov	r0, r3
 800a58c:	f000 fc31 	bl	800adf2 <TIM_ITRx_SetConfig>
      break;
 800a590:	e00c      	b.n	800a5ac <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681a      	ldr	r2, [r3, #0]
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	4619      	mov	r1, r3
 800a59c:	4610      	mov	r0, r2
 800a59e:	f000 fc28 	bl	800adf2 <TIM_ITRx_SetConfig>
      break;
 800a5a2:	e003      	b.n	800a5ac <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	73fb      	strb	r3, [r7, #15]
      break;
 800a5a8:	e000      	b.n	800a5ac <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800a5aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2201      	movs	r2, #1
 800a5b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a5bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3710      	adds	r7, #16
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}
 800a5c6:	bf00      	nop
 800a5c8:	00100070 	.word	0x00100070
 800a5cc:	00100040 	.word	0x00100040
 800a5d0:	00100030 	.word	0x00100030
 800a5d4:	00100020 	.word	0x00100020

0800a5d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b083      	sub	sp, #12
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a5e0:	bf00      	nop
 800a5e2:	370c      	adds	r7, #12
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr

0800a5ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b083      	sub	sp, #12
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a5f4:	bf00      	nop
 800a5f6:	370c      	adds	r7, #12
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr

0800a600 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a600:	b480      	push	{r7}
 800a602:	b083      	sub	sp, #12
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a608:	bf00      	nop
 800a60a:	370c      	adds	r7, #12
 800a60c:	46bd      	mov	sp, r7
 800a60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a612:	4770      	bx	lr

0800a614 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a614:	b480      	push	{r7}
 800a616:	b083      	sub	sp, #12
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a61c:	bf00      	nop
 800a61e:	370c      	adds	r7, #12
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr

0800a628 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a628:	b480      	push	{r7}
 800a62a:	b085      	sub	sp, #20
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	4a3c      	ldr	r2, [pc, #240]	; (800a72c <TIM_Base_SetConfig+0x104>)
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d00f      	beq.n	800a660 <TIM_Base_SetConfig+0x38>
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a646:	d00b      	beq.n	800a660 <TIM_Base_SetConfig+0x38>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	4a39      	ldr	r2, [pc, #228]	; (800a730 <TIM_Base_SetConfig+0x108>)
 800a64c:	4293      	cmp	r3, r2
 800a64e:	d007      	beq.n	800a660 <TIM_Base_SetConfig+0x38>
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	4a38      	ldr	r2, [pc, #224]	; (800a734 <TIM_Base_SetConfig+0x10c>)
 800a654:	4293      	cmp	r3, r2
 800a656:	d003      	beq.n	800a660 <TIM_Base_SetConfig+0x38>
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	4a37      	ldr	r2, [pc, #220]	; (800a738 <TIM_Base_SetConfig+0x110>)
 800a65c:	4293      	cmp	r3, r2
 800a65e:	d108      	bne.n	800a672 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a666:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	685b      	ldr	r3, [r3, #4]
 800a66c:	68fa      	ldr	r2, [r7, #12]
 800a66e:	4313      	orrs	r3, r2
 800a670:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	4a2d      	ldr	r2, [pc, #180]	; (800a72c <TIM_Base_SetConfig+0x104>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d01b      	beq.n	800a6b2 <TIM_Base_SetConfig+0x8a>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a680:	d017      	beq.n	800a6b2 <TIM_Base_SetConfig+0x8a>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	4a2a      	ldr	r2, [pc, #168]	; (800a730 <TIM_Base_SetConfig+0x108>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d013      	beq.n	800a6b2 <TIM_Base_SetConfig+0x8a>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	4a29      	ldr	r2, [pc, #164]	; (800a734 <TIM_Base_SetConfig+0x10c>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d00f      	beq.n	800a6b2 <TIM_Base_SetConfig+0x8a>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	4a28      	ldr	r2, [pc, #160]	; (800a738 <TIM_Base_SetConfig+0x110>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d00b      	beq.n	800a6b2 <TIM_Base_SetConfig+0x8a>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	4a27      	ldr	r2, [pc, #156]	; (800a73c <TIM_Base_SetConfig+0x114>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d007      	beq.n	800a6b2 <TIM_Base_SetConfig+0x8a>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	4a26      	ldr	r2, [pc, #152]	; (800a740 <TIM_Base_SetConfig+0x118>)
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	d003      	beq.n	800a6b2 <TIM_Base_SetConfig+0x8a>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	4a25      	ldr	r2, [pc, #148]	; (800a744 <TIM_Base_SetConfig+0x11c>)
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d108      	bne.n	800a6c4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a6b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	68db      	ldr	r3, [r3, #12]
 800a6be:	68fa      	ldr	r2, [r7, #12]
 800a6c0:	4313      	orrs	r3, r2
 800a6c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	695b      	ldr	r3, [r3, #20]
 800a6ce:	4313      	orrs	r3, r2
 800a6d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	68fa      	ldr	r2, [r7, #12]
 800a6d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	689a      	ldr	r2, [r3, #8]
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	681a      	ldr	r2, [r3, #0]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	4a10      	ldr	r2, [pc, #64]	; (800a72c <TIM_Base_SetConfig+0x104>)
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	d00f      	beq.n	800a710 <TIM_Base_SetConfig+0xe8>
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	4a11      	ldr	r2, [pc, #68]	; (800a738 <TIM_Base_SetConfig+0x110>)
 800a6f4:	4293      	cmp	r3, r2
 800a6f6:	d00b      	beq.n	800a710 <TIM_Base_SetConfig+0xe8>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	4a10      	ldr	r2, [pc, #64]	; (800a73c <TIM_Base_SetConfig+0x114>)
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	d007      	beq.n	800a710 <TIM_Base_SetConfig+0xe8>
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	4a0f      	ldr	r2, [pc, #60]	; (800a740 <TIM_Base_SetConfig+0x118>)
 800a704:	4293      	cmp	r3, r2
 800a706:	d003      	beq.n	800a710 <TIM_Base_SetConfig+0xe8>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	4a0e      	ldr	r2, [pc, #56]	; (800a744 <TIM_Base_SetConfig+0x11c>)
 800a70c:	4293      	cmp	r3, r2
 800a70e:	d103      	bne.n	800a718 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	691a      	ldr	r2, [r3, #16]
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2201      	movs	r2, #1
 800a71c:	615a      	str	r2, [r3, #20]
}
 800a71e:	bf00      	nop
 800a720:	3714      	adds	r7, #20
 800a722:	46bd      	mov	sp, r7
 800a724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a728:	4770      	bx	lr
 800a72a:	bf00      	nop
 800a72c:	40012c00 	.word	0x40012c00
 800a730:	40000400 	.word	0x40000400
 800a734:	40000800 	.word	0x40000800
 800a738:	40013400 	.word	0x40013400
 800a73c:	40014000 	.word	0x40014000
 800a740:	40014400 	.word	0x40014400
 800a744:	40014800 	.word	0x40014800

0800a748 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a748:	b480      	push	{r7}
 800a74a:	b087      	sub	sp, #28
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6a1b      	ldr	r3, [r3, #32]
 800a756:	f023 0201 	bic.w	r2, r3, #1
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6a1b      	ldr	r3, [r3, #32]
 800a762:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	685b      	ldr	r3, [r3, #4]
 800a768:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	699b      	ldr	r3, [r3, #24]
 800a76e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a77a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	f023 0303 	bic.w	r3, r3, #3
 800a782:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	68fa      	ldr	r2, [r7, #12]
 800a78a:	4313      	orrs	r3, r2
 800a78c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	f023 0302 	bic.w	r3, r3, #2
 800a794:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	689b      	ldr	r3, [r3, #8]
 800a79a:	697a      	ldr	r2, [r7, #20]
 800a79c:	4313      	orrs	r3, r2
 800a79e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	4a2c      	ldr	r2, [pc, #176]	; (800a854 <TIM_OC1_SetConfig+0x10c>)
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d00f      	beq.n	800a7c8 <TIM_OC1_SetConfig+0x80>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	4a2b      	ldr	r2, [pc, #172]	; (800a858 <TIM_OC1_SetConfig+0x110>)
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d00b      	beq.n	800a7c8 <TIM_OC1_SetConfig+0x80>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	4a2a      	ldr	r2, [pc, #168]	; (800a85c <TIM_OC1_SetConfig+0x114>)
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	d007      	beq.n	800a7c8 <TIM_OC1_SetConfig+0x80>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	4a29      	ldr	r2, [pc, #164]	; (800a860 <TIM_OC1_SetConfig+0x118>)
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d003      	beq.n	800a7c8 <TIM_OC1_SetConfig+0x80>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	4a28      	ldr	r2, [pc, #160]	; (800a864 <TIM_OC1_SetConfig+0x11c>)
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	d10c      	bne.n	800a7e2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a7c8:	697b      	ldr	r3, [r7, #20]
 800a7ca:	f023 0308 	bic.w	r3, r3, #8
 800a7ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	68db      	ldr	r3, [r3, #12]
 800a7d4:	697a      	ldr	r2, [r7, #20]
 800a7d6:	4313      	orrs	r3, r2
 800a7d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	f023 0304 	bic.w	r3, r3, #4
 800a7e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	4a1b      	ldr	r2, [pc, #108]	; (800a854 <TIM_OC1_SetConfig+0x10c>)
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d00f      	beq.n	800a80a <TIM_OC1_SetConfig+0xc2>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	4a1a      	ldr	r2, [pc, #104]	; (800a858 <TIM_OC1_SetConfig+0x110>)
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d00b      	beq.n	800a80a <TIM_OC1_SetConfig+0xc2>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	4a19      	ldr	r2, [pc, #100]	; (800a85c <TIM_OC1_SetConfig+0x114>)
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	d007      	beq.n	800a80a <TIM_OC1_SetConfig+0xc2>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	4a18      	ldr	r2, [pc, #96]	; (800a860 <TIM_OC1_SetConfig+0x118>)
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d003      	beq.n	800a80a <TIM_OC1_SetConfig+0xc2>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	4a17      	ldr	r2, [pc, #92]	; (800a864 <TIM_OC1_SetConfig+0x11c>)
 800a806:	4293      	cmp	r3, r2
 800a808:	d111      	bne.n	800a82e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a810:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a818:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	695b      	ldr	r3, [r3, #20]
 800a81e:	693a      	ldr	r2, [r7, #16]
 800a820:	4313      	orrs	r3, r2
 800a822:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	699b      	ldr	r3, [r3, #24]
 800a828:	693a      	ldr	r2, [r7, #16]
 800a82a:	4313      	orrs	r3, r2
 800a82c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	693a      	ldr	r2, [r7, #16]
 800a832:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	68fa      	ldr	r2, [r7, #12]
 800a838:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	685a      	ldr	r2, [r3, #4]
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	697a      	ldr	r2, [r7, #20]
 800a846:	621a      	str	r2, [r3, #32]
}
 800a848:	bf00      	nop
 800a84a:	371c      	adds	r7, #28
 800a84c:	46bd      	mov	sp, r7
 800a84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a852:	4770      	bx	lr
 800a854:	40012c00 	.word	0x40012c00
 800a858:	40013400 	.word	0x40013400
 800a85c:	40014000 	.word	0x40014000
 800a860:	40014400 	.word	0x40014400
 800a864:	40014800 	.word	0x40014800

0800a868 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a868:	b480      	push	{r7}
 800a86a:	b087      	sub	sp, #28
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
 800a870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6a1b      	ldr	r3, [r3, #32]
 800a876:	f023 0210 	bic.w	r2, r3, #16
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6a1b      	ldr	r3, [r3, #32]
 800a882:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	685b      	ldr	r3, [r3, #4]
 800a888:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	699b      	ldr	r3, [r3, #24]
 800a88e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a896:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a89a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a8a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	021b      	lsls	r3, r3, #8
 800a8aa:	68fa      	ldr	r2, [r7, #12]
 800a8ac:	4313      	orrs	r3, r2
 800a8ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	f023 0320 	bic.w	r3, r3, #32
 800a8b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	689b      	ldr	r3, [r3, #8]
 800a8bc:	011b      	lsls	r3, r3, #4
 800a8be:	697a      	ldr	r2, [r7, #20]
 800a8c0:	4313      	orrs	r3, r2
 800a8c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	4a28      	ldr	r2, [pc, #160]	; (800a968 <TIM_OC2_SetConfig+0x100>)
 800a8c8:	4293      	cmp	r3, r2
 800a8ca:	d003      	beq.n	800a8d4 <TIM_OC2_SetConfig+0x6c>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	4a27      	ldr	r2, [pc, #156]	; (800a96c <TIM_OC2_SetConfig+0x104>)
 800a8d0:	4293      	cmp	r3, r2
 800a8d2:	d10d      	bne.n	800a8f0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a8da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	68db      	ldr	r3, [r3, #12]
 800a8e0:	011b      	lsls	r3, r3, #4
 800a8e2:	697a      	ldr	r2, [r7, #20]
 800a8e4:	4313      	orrs	r3, r2
 800a8e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a8e8:	697b      	ldr	r3, [r7, #20]
 800a8ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a8ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	4a1d      	ldr	r2, [pc, #116]	; (800a968 <TIM_OC2_SetConfig+0x100>)
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	d00f      	beq.n	800a918 <TIM_OC2_SetConfig+0xb0>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	4a1c      	ldr	r2, [pc, #112]	; (800a96c <TIM_OC2_SetConfig+0x104>)
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d00b      	beq.n	800a918 <TIM_OC2_SetConfig+0xb0>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	4a1b      	ldr	r2, [pc, #108]	; (800a970 <TIM_OC2_SetConfig+0x108>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d007      	beq.n	800a918 <TIM_OC2_SetConfig+0xb0>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	4a1a      	ldr	r2, [pc, #104]	; (800a974 <TIM_OC2_SetConfig+0x10c>)
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d003      	beq.n	800a918 <TIM_OC2_SetConfig+0xb0>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	4a19      	ldr	r2, [pc, #100]	; (800a978 <TIM_OC2_SetConfig+0x110>)
 800a914:	4293      	cmp	r3, r2
 800a916:	d113      	bne.n	800a940 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a918:	693b      	ldr	r3, [r7, #16]
 800a91a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a91e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a926:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	695b      	ldr	r3, [r3, #20]
 800a92c:	009b      	lsls	r3, r3, #2
 800a92e:	693a      	ldr	r2, [r7, #16]
 800a930:	4313      	orrs	r3, r2
 800a932:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	699b      	ldr	r3, [r3, #24]
 800a938:	009b      	lsls	r3, r3, #2
 800a93a:	693a      	ldr	r2, [r7, #16]
 800a93c:	4313      	orrs	r3, r2
 800a93e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	693a      	ldr	r2, [r7, #16]
 800a944:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	68fa      	ldr	r2, [r7, #12]
 800a94a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	685a      	ldr	r2, [r3, #4]
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	697a      	ldr	r2, [r7, #20]
 800a958:	621a      	str	r2, [r3, #32]
}
 800a95a:	bf00      	nop
 800a95c:	371c      	adds	r7, #28
 800a95e:	46bd      	mov	sp, r7
 800a960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a964:	4770      	bx	lr
 800a966:	bf00      	nop
 800a968:	40012c00 	.word	0x40012c00
 800a96c:	40013400 	.word	0x40013400
 800a970:	40014000 	.word	0x40014000
 800a974:	40014400 	.word	0x40014400
 800a978:	40014800 	.word	0x40014800

0800a97c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b087      	sub	sp, #28
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
 800a984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6a1b      	ldr	r3, [r3, #32]
 800a98a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6a1b      	ldr	r3, [r3, #32]
 800a996:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	685b      	ldr	r3, [r3, #4]
 800a99c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	69db      	ldr	r3, [r3, #28]
 800a9a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a9aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	f023 0303 	bic.w	r3, r3, #3
 800a9b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	68fa      	ldr	r2, [r7, #12]
 800a9be:	4313      	orrs	r3, r2
 800a9c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a9c2:	697b      	ldr	r3, [r7, #20]
 800a9c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a9c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	689b      	ldr	r3, [r3, #8]
 800a9ce:	021b      	lsls	r3, r3, #8
 800a9d0:	697a      	ldr	r2, [r7, #20]
 800a9d2:	4313      	orrs	r3, r2
 800a9d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	4a27      	ldr	r2, [pc, #156]	; (800aa78 <TIM_OC3_SetConfig+0xfc>)
 800a9da:	4293      	cmp	r3, r2
 800a9dc:	d003      	beq.n	800a9e6 <TIM_OC3_SetConfig+0x6a>
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	4a26      	ldr	r2, [pc, #152]	; (800aa7c <TIM_OC3_SetConfig+0x100>)
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	d10d      	bne.n	800aa02 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a9ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	68db      	ldr	r3, [r3, #12]
 800a9f2:	021b      	lsls	r3, r3, #8
 800a9f4:	697a      	ldr	r2, [r7, #20]
 800a9f6:	4313      	orrs	r3, r2
 800a9f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a9fa:	697b      	ldr	r3, [r7, #20]
 800a9fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aa00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	4a1c      	ldr	r2, [pc, #112]	; (800aa78 <TIM_OC3_SetConfig+0xfc>)
 800aa06:	4293      	cmp	r3, r2
 800aa08:	d00f      	beq.n	800aa2a <TIM_OC3_SetConfig+0xae>
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	4a1b      	ldr	r2, [pc, #108]	; (800aa7c <TIM_OC3_SetConfig+0x100>)
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	d00b      	beq.n	800aa2a <TIM_OC3_SetConfig+0xae>
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	4a1a      	ldr	r2, [pc, #104]	; (800aa80 <TIM_OC3_SetConfig+0x104>)
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d007      	beq.n	800aa2a <TIM_OC3_SetConfig+0xae>
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	4a19      	ldr	r2, [pc, #100]	; (800aa84 <TIM_OC3_SetConfig+0x108>)
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	d003      	beq.n	800aa2a <TIM_OC3_SetConfig+0xae>
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	4a18      	ldr	r2, [pc, #96]	; (800aa88 <TIM_OC3_SetConfig+0x10c>)
 800aa26:	4293      	cmp	r3, r2
 800aa28:	d113      	bne.n	800aa52 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800aa2a:	693b      	ldr	r3, [r7, #16]
 800aa2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aa30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aa38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	695b      	ldr	r3, [r3, #20]
 800aa3e:	011b      	lsls	r3, r3, #4
 800aa40:	693a      	ldr	r2, [r7, #16]
 800aa42:	4313      	orrs	r3, r2
 800aa44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	699b      	ldr	r3, [r3, #24]
 800aa4a:	011b      	lsls	r3, r3, #4
 800aa4c:	693a      	ldr	r2, [r7, #16]
 800aa4e:	4313      	orrs	r3, r2
 800aa50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	693a      	ldr	r2, [r7, #16]
 800aa56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	68fa      	ldr	r2, [r7, #12]
 800aa5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	685a      	ldr	r2, [r3, #4]
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	697a      	ldr	r2, [r7, #20]
 800aa6a:	621a      	str	r2, [r3, #32]
}
 800aa6c:	bf00      	nop
 800aa6e:	371c      	adds	r7, #28
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr
 800aa78:	40012c00 	.word	0x40012c00
 800aa7c:	40013400 	.word	0x40013400
 800aa80:	40014000 	.word	0x40014000
 800aa84:	40014400 	.word	0x40014400
 800aa88:	40014800 	.word	0x40014800

0800aa8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	b087      	sub	sp, #28
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
 800aa94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6a1b      	ldr	r3, [r3, #32]
 800aa9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6a1b      	ldr	r3, [r3, #32]
 800aaa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	685b      	ldr	r3, [r3, #4]
 800aaac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	69db      	ldr	r3, [r3, #28]
 800aab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aaba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aabe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aac6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	021b      	lsls	r3, r3, #8
 800aace:	68fa      	ldr	r2, [r7, #12]
 800aad0:	4313      	orrs	r3, r2
 800aad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aada:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	689b      	ldr	r3, [r3, #8]
 800aae0:	031b      	lsls	r3, r3, #12
 800aae2:	697a      	ldr	r2, [r7, #20]
 800aae4:	4313      	orrs	r3, r2
 800aae6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	4a28      	ldr	r2, [pc, #160]	; (800ab8c <TIM_OC4_SetConfig+0x100>)
 800aaec:	4293      	cmp	r3, r2
 800aaee:	d003      	beq.n	800aaf8 <TIM_OC4_SetConfig+0x6c>
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	4a27      	ldr	r2, [pc, #156]	; (800ab90 <TIM_OC4_SetConfig+0x104>)
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	d10d      	bne.n	800ab14 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800aafe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	68db      	ldr	r3, [r3, #12]
 800ab04:	031b      	lsls	r3, r3, #12
 800ab06:	697a      	ldr	r2, [r7, #20]
 800ab08:	4313      	orrs	r3, r2
 800ab0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800ab0c:	697b      	ldr	r3, [r7, #20]
 800ab0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ab12:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	4a1d      	ldr	r2, [pc, #116]	; (800ab8c <TIM_OC4_SetConfig+0x100>)
 800ab18:	4293      	cmp	r3, r2
 800ab1a:	d00f      	beq.n	800ab3c <TIM_OC4_SetConfig+0xb0>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	4a1c      	ldr	r2, [pc, #112]	; (800ab90 <TIM_OC4_SetConfig+0x104>)
 800ab20:	4293      	cmp	r3, r2
 800ab22:	d00b      	beq.n	800ab3c <TIM_OC4_SetConfig+0xb0>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	4a1b      	ldr	r2, [pc, #108]	; (800ab94 <TIM_OC4_SetConfig+0x108>)
 800ab28:	4293      	cmp	r3, r2
 800ab2a:	d007      	beq.n	800ab3c <TIM_OC4_SetConfig+0xb0>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	4a1a      	ldr	r2, [pc, #104]	; (800ab98 <TIM_OC4_SetConfig+0x10c>)
 800ab30:	4293      	cmp	r3, r2
 800ab32:	d003      	beq.n	800ab3c <TIM_OC4_SetConfig+0xb0>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	4a19      	ldr	r2, [pc, #100]	; (800ab9c <TIM_OC4_SetConfig+0x110>)
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	d113      	bne.n	800ab64 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ab42:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800ab44:	693b      	ldr	r3, [r7, #16]
 800ab46:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ab4a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	695b      	ldr	r3, [r3, #20]
 800ab50:	019b      	lsls	r3, r3, #6
 800ab52:	693a      	ldr	r2, [r7, #16]
 800ab54:	4313      	orrs	r3, r2
 800ab56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	699b      	ldr	r3, [r3, #24]
 800ab5c:	019b      	lsls	r3, r3, #6
 800ab5e:	693a      	ldr	r2, [r7, #16]
 800ab60:	4313      	orrs	r3, r2
 800ab62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	693a      	ldr	r2, [r7, #16]
 800ab68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	68fa      	ldr	r2, [r7, #12]
 800ab6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	685a      	ldr	r2, [r3, #4]
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	697a      	ldr	r2, [r7, #20]
 800ab7c:	621a      	str	r2, [r3, #32]
}
 800ab7e:	bf00      	nop
 800ab80:	371c      	adds	r7, #28
 800ab82:	46bd      	mov	sp, r7
 800ab84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab88:	4770      	bx	lr
 800ab8a:	bf00      	nop
 800ab8c:	40012c00 	.word	0x40012c00
 800ab90:	40013400 	.word	0x40013400
 800ab94:	40014000 	.word	0x40014000
 800ab98:	40014400 	.word	0x40014400
 800ab9c:	40014800 	.word	0x40014800

0800aba0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800aba0:	b480      	push	{r7}
 800aba2:	b087      	sub	sp, #28
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
 800aba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6a1b      	ldr	r3, [r3, #32]
 800abae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6a1b      	ldr	r3, [r3, #32]
 800abba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	685b      	ldr	r3, [r3, #4]
 800abc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800abce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	68fa      	ldr	r2, [r7, #12]
 800abda:	4313      	orrs	r3, r2
 800abdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800abe4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	689b      	ldr	r3, [r3, #8]
 800abea:	041b      	lsls	r3, r3, #16
 800abec:	693a      	ldr	r2, [r7, #16]
 800abee:	4313      	orrs	r3, r2
 800abf0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	4a17      	ldr	r2, [pc, #92]	; (800ac54 <TIM_OC5_SetConfig+0xb4>)
 800abf6:	4293      	cmp	r3, r2
 800abf8:	d00f      	beq.n	800ac1a <TIM_OC5_SetConfig+0x7a>
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	4a16      	ldr	r2, [pc, #88]	; (800ac58 <TIM_OC5_SetConfig+0xb8>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d00b      	beq.n	800ac1a <TIM_OC5_SetConfig+0x7a>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	4a15      	ldr	r2, [pc, #84]	; (800ac5c <TIM_OC5_SetConfig+0xbc>)
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d007      	beq.n	800ac1a <TIM_OC5_SetConfig+0x7a>
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	4a14      	ldr	r2, [pc, #80]	; (800ac60 <TIM_OC5_SetConfig+0xc0>)
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d003      	beq.n	800ac1a <TIM_OC5_SetConfig+0x7a>
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	4a13      	ldr	r2, [pc, #76]	; (800ac64 <TIM_OC5_SetConfig+0xc4>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d109      	bne.n	800ac2e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ac20:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	695b      	ldr	r3, [r3, #20]
 800ac26:	021b      	lsls	r3, r3, #8
 800ac28:	697a      	ldr	r2, [r7, #20]
 800ac2a:	4313      	orrs	r3, r2
 800ac2c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	697a      	ldr	r2, [r7, #20]
 800ac32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	68fa      	ldr	r2, [r7, #12]
 800ac38:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	685a      	ldr	r2, [r3, #4]
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	693a      	ldr	r2, [r7, #16]
 800ac46:	621a      	str	r2, [r3, #32]
}
 800ac48:	bf00      	nop
 800ac4a:	371c      	adds	r7, #28
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac52:	4770      	bx	lr
 800ac54:	40012c00 	.word	0x40012c00
 800ac58:	40013400 	.word	0x40013400
 800ac5c:	40014000 	.word	0x40014000
 800ac60:	40014400 	.word	0x40014400
 800ac64:	40014800 	.word	0x40014800

0800ac68 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b087      	sub	sp, #28
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
 800ac70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6a1b      	ldr	r3, [r3, #32]
 800ac76:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6a1b      	ldr	r3, [r3, #32]
 800ac82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	685b      	ldr	r3, [r3, #4]
 800ac88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ac96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	021b      	lsls	r3, r3, #8
 800aca2:	68fa      	ldr	r2, [r7, #12]
 800aca4:	4313      	orrs	r3, r2
 800aca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800aca8:	693b      	ldr	r3, [r7, #16]
 800acaa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800acae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	689b      	ldr	r3, [r3, #8]
 800acb4:	051b      	lsls	r3, r3, #20
 800acb6:	693a      	ldr	r2, [r7, #16]
 800acb8:	4313      	orrs	r3, r2
 800acba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	4a18      	ldr	r2, [pc, #96]	; (800ad20 <TIM_OC6_SetConfig+0xb8>)
 800acc0:	4293      	cmp	r3, r2
 800acc2:	d00f      	beq.n	800ace4 <TIM_OC6_SetConfig+0x7c>
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	4a17      	ldr	r2, [pc, #92]	; (800ad24 <TIM_OC6_SetConfig+0xbc>)
 800acc8:	4293      	cmp	r3, r2
 800acca:	d00b      	beq.n	800ace4 <TIM_OC6_SetConfig+0x7c>
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	4a16      	ldr	r2, [pc, #88]	; (800ad28 <TIM_OC6_SetConfig+0xc0>)
 800acd0:	4293      	cmp	r3, r2
 800acd2:	d007      	beq.n	800ace4 <TIM_OC6_SetConfig+0x7c>
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	4a15      	ldr	r2, [pc, #84]	; (800ad2c <TIM_OC6_SetConfig+0xc4>)
 800acd8:	4293      	cmp	r3, r2
 800acda:	d003      	beq.n	800ace4 <TIM_OC6_SetConfig+0x7c>
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	4a14      	ldr	r2, [pc, #80]	; (800ad30 <TIM_OC6_SetConfig+0xc8>)
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d109      	bne.n	800acf8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800acea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	695b      	ldr	r3, [r3, #20]
 800acf0:	029b      	lsls	r3, r3, #10
 800acf2:	697a      	ldr	r2, [r7, #20]
 800acf4:	4313      	orrs	r3, r2
 800acf6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	697a      	ldr	r2, [r7, #20]
 800acfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	68fa      	ldr	r2, [r7, #12]
 800ad02:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	685a      	ldr	r2, [r3, #4]
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	693a      	ldr	r2, [r7, #16]
 800ad10:	621a      	str	r2, [r3, #32]
}
 800ad12:	bf00      	nop
 800ad14:	371c      	adds	r7, #28
 800ad16:	46bd      	mov	sp, r7
 800ad18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1c:	4770      	bx	lr
 800ad1e:	bf00      	nop
 800ad20:	40012c00 	.word	0x40012c00
 800ad24:	40013400 	.word	0x40013400
 800ad28:	40014000 	.word	0x40014000
 800ad2c:	40014400 	.word	0x40014400
 800ad30:	40014800 	.word	0x40014800

0800ad34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad34:	b480      	push	{r7}
 800ad36:	b087      	sub	sp, #28
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	60f8      	str	r0, [r7, #12]
 800ad3c:	60b9      	str	r1, [r7, #8]
 800ad3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	6a1b      	ldr	r3, [r3, #32]
 800ad44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	6a1b      	ldr	r3, [r3, #32]
 800ad4a:	f023 0201 	bic.w	r2, r3, #1
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	699b      	ldr	r3, [r3, #24]
 800ad56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ad58:	693b      	ldr	r3, [r7, #16]
 800ad5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ad5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	011b      	lsls	r3, r3, #4
 800ad64:	693a      	ldr	r2, [r7, #16]
 800ad66:	4313      	orrs	r3, r2
 800ad68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	f023 030a 	bic.w	r3, r3, #10
 800ad70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ad72:	697a      	ldr	r2, [r7, #20]
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	4313      	orrs	r3, r2
 800ad78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	693a      	ldr	r2, [r7, #16]
 800ad7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	697a      	ldr	r2, [r7, #20]
 800ad84:	621a      	str	r2, [r3, #32]
}
 800ad86:	bf00      	nop
 800ad88:	371c      	adds	r7, #28
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad90:	4770      	bx	lr

0800ad92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad92:	b480      	push	{r7}
 800ad94:	b087      	sub	sp, #28
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	60f8      	str	r0, [r7, #12]
 800ad9a:	60b9      	str	r1, [r7, #8]
 800ad9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	6a1b      	ldr	r3, [r3, #32]
 800ada2:	f023 0210 	bic.w	r2, r3, #16
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	699b      	ldr	r3, [r3, #24]
 800adae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	6a1b      	ldr	r3, [r3, #32]
 800adb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800adbc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	031b      	lsls	r3, r3, #12
 800adc2:	697a      	ldr	r2, [r7, #20]
 800adc4:	4313      	orrs	r3, r2
 800adc6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800adce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	011b      	lsls	r3, r3, #4
 800add4:	693a      	ldr	r2, [r7, #16]
 800add6:	4313      	orrs	r3, r2
 800add8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	697a      	ldr	r2, [r7, #20]
 800adde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	693a      	ldr	r2, [r7, #16]
 800ade4:	621a      	str	r2, [r3, #32]
}
 800ade6:	bf00      	nop
 800ade8:	371c      	adds	r7, #28
 800adea:	46bd      	mov	sp, r7
 800adec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf0:	4770      	bx	lr

0800adf2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800adf2:	b480      	push	{r7}
 800adf4:	b085      	sub	sp, #20
 800adf6:	af00      	add	r7, sp, #0
 800adf8:	6078      	str	r0, [r7, #4]
 800adfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	689b      	ldr	r3, [r3, #8]
 800ae00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800ae08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ae0e:	683a      	ldr	r2, [r7, #0]
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	4313      	orrs	r3, r2
 800ae14:	f043 0307 	orr.w	r3, r3, #7
 800ae18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	68fa      	ldr	r2, [r7, #12]
 800ae1e:	609a      	str	r2, [r3, #8]
}
 800ae20:	bf00      	nop
 800ae22:	3714      	adds	r7, #20
 800ae24:	46bd      	mov	sp, r7
 800ae26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2a:	4770      	bx	lr

0800ae2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b087      	sub	sp, #28
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	60f8      	str	r0, [r7, #12]
 800ae34:	60b9      	str	r1, [r7, #8]
 800ae36:	607a      	str	r2, [r7, #4]
 800ae38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	689b      	ldr	r3, [r3, #8]
 800ae3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ae46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	021a      	lsls	r2, r3, #8
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	431a      	orrs	r2, r3
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	4313      	orrs	r3, r2
 800ae54:	697a      	ldr	r2, [r7, #20]
 800ae56:	4313      	orrs	r3, r2
 800ae58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	697a      	ldr	r2, [r7, #20]
 800ae5e:	609a      	str	r2, [r3, #8]
}
 800ae60:	bf00      	nop
 800ae62:	371c      	adds	r7, #28
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr

0800ae6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b087      	sub	sp, #28
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	60f8      	str	r0, [r7, #12]
 800ae74:	60b9      	str	r1, [r7, #8]
 800ae76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	f003 031f 	and.w	r3, r3, #31
 800ae7e:	2201      	movs	r2, #1
 800ae80:	fa02 f303 	lsl.w	r3, r2, r3
 800ae84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	6a1a      	ldr	r2, [r3, #32]
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	43db      	mvns	r3, r3
 800ae8e:	401a      	ands	r2, r3
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	6a1a      	ldr	r2, [r3, #32]
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	f003 031f 	and.w	r3, r3, #31
 800ae9e:	6879      	ldr	r1, [r7, #4]
 800aea0:	fa01 f303 	lsl.w	r3, r1, r3
 800aea4:	431a      	orrs	r2, r3
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	621a      	str	r2, [r3, #32]
}
 800aeaa:	bf00      	nop
 800aeac:	371c      	adds	r7, #28
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb4:	4770      	bx	lr
	...

0800aeb8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b084      	sub	sp, #16
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d109      	bne.n	800aedc <HAL_TIMEx_PWMN_Start+0x24>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aece:	b2db      	uxtb	r3, r3
 800aed0:	2b01      	cmp	r3, #1
 800aed2:	bf14      	ite	ne
 800aed4:	2301      	movne	r3, #1
 800aed6:	2300      	moveq	r3, #0
 800aed8:	b2db      	uxtb	r3, r3
 800aeda:	e022      	b.n	800af22 <HAL_TIMEx_PWMN_Start+0x6a>
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	2b04      	cmp	r3, #4
 800aee0:	d109      	bne.n	800aef6 <HAL_TIMEx_PWMN_Start+0x3e>
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aee8:	b2db      	uxtb	r3, r3
 800aeea:	2b01      	cmp	r3, #1
 800aeec:	bf14      	ite	ne
 800aeee:	2301      	movne	r3, #1
 800aef0:	2300      	moveq	r3, #0
 800aef2:	b2db      	uxtb	r3, r3
 800aef4:	e015      	b.n	800af22 <HAL_TIMEx_PWMN_Start+0x6a>
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	2b08      	cmp	r3, #8
 800aefa:	d109      	bne.n	800af10 <HAL_TIMEx_PWMN_Start+0x58>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800af02:	b2db      	uxtb	r3, r3
 800af04:	2b01      	cmp	r3, #1
 800af06:	bf14      	ite	ne
 800af08:	2301      	movne	r3, #1
 800af0a:	2300      	moveq	r3, #0
 800af0c:	b2db      	uxtb	r3, r3
 800af0e:	e008      	b.n	800af22 <HAL_TIMEx_PWMN_Start+0x6a>
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800af16:	b2db      	uxtb	r3, r3
 800af18:	2b01      	cmp	r3, #1
 800af1a:	bf14      	ite	ne
 800af1c:	2301      	movne	r3, #1
 800af1e:	2300      	moveq	r3, #0
 800af20:	b2db      	uxtb	r3, r3
 800af22:	2b00      	cmp	r3, #0
 800af24:	d001      	beq.n	800af2a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800af26:	2301      	movs	r3, #1
 800af28:	e069      	b.n	800affe <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d104      	bne.n	800af3a <HAL_TIMEx_PWMN_Start+0x82>
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2202      	movs	r2, #2
 800af34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af38:	e013      	b.n	800af62 <HAL_TIMEx_PWMN_Start+0xaa>
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	2b04      	cmp	r3, #4
 800af3e:	d104      	bne.n	800af4a <HAL_TIMEx_PWMN_Start+0x92>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2202      	movs	r2, #2
 800af44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af48:	e00b      	b.n	800af62 <HAL_TIMEx_PWMN_Start+0xaa>
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	2b08      	cmp	r3, #8
 800af4e:	d104      	bne.n	800af5a <HAL_TIMEx_PWMN_Start+0xa2>
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2202      	movs	r2, #2
 800af54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800af58:	e003      	b.n	800af62 <HAL_TIMEx_PWMN_Start+0xaa>
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2202      	movs	r2, #2
 800af5e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	2204      	movs	r2, #4
 800af68:	6839      	ldr	r1, [r7, #0]
 800af6a:	4618      	mov	r0, r3
 800af6c:	f000 fa1e 	bl	800b3ac <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800af7e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	4a20      	ldr	r2, [pc, #128]	; (800b008 <HAL_TIMEx_PWMN_Start+0x150>)
 800af86:	4293      	cmp	r3, r2
 800af88:	d018      	beq.n	800afbc <HAL_TIMEx_PWMN_Start+0x104>
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af92:	d013      	beq.n	800afbc <HAL_TIMEx_PWMN_Start+0x104>
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	4a1c      	ldr	r2, [pc, #112]	; (800b00c <HAL_TIMEx_PWMN_Start+0x154>)
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d00e      	beq.n	800afbc <HAL_TIMEx_PWMN_Start+0x104>
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	4a1b      	ldr	r2, [pc, #108]	; (800b010 <HAL_TIMEx_PWMN_Start+0x158>)
 800afa4:	4293      	cmp	r3, r2
 800afa6:	d009      	beq.n	800afbc <HAL_TIMEx_PWMN_Start+0x104>
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	4a19      	ldr	r2, [pc, #100]	; (800b014 <HAL_TIMEx_PWMN_Start+0x15c>)
 800afae:	4293      	cmp	r3, r2
 800afb0:	d004      	beq.n	800afbc <HAL_TIMEx_PWMN_Start+0x104>
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	4a18      	ldr	r2, [pc, #96]	; (800b018 <HAL_TIMEx_PWMN_Start+0x160>)
 800afb8:	4293      	cmp	r3, r2
 800afba:	d115      	bne.n	800afe8 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	689a      	ldr	r2, [r3, #8]
 800afc2:	4b16      	ldr	r3, [pc, #88]	; (800b01c <HAL_TIMEx_PWMN_Start+0x164>)
 800afc4:	4013      	ands	r3, r2
 800afc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	2b06      	cmp	r3, #6
 800afcc:	d015      	beq.n	800affa <HAL_TIMEx_PWMN_Start+0x142>
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afd4:	d011      	beq.n	800affa <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	681a      	ldr	r2, [r3, #0]
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f042 0201 	orr.w	r2, r2, #1
 800afe4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800afe6:	e008      	b.n	800affa <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	681a      	ldr	r2, [r3, #0]
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f042 0201 	orr.w	r2, r2, #1
 800aff6:	601a      	str	r2, [r3, #0]
 800aff8:	e000      	b.n	800affc <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800affa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800affc:	2300      	movs	r3, #0
}
 800affe:	4618      	mov	r0, r3
 800b000:	3710      	adds	r7, #16
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}
 800b006:	bf00      	nop
 800b008:	40012c00 	.word	0x40012c00
 800b00c:	40000400 	.word	0x40000400
 800b010:	40000800 	.word	0x40000800
 800b014:	40013400 	.word	0x40013400
 800b018:	40014000 	.word	0x40014000
 800b01c:	00010007 	.word	0x00010007

0800b020 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b082      	sub	sp, #8
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
 800b028:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	2200      	movs	r2, #0
 800b030:	6839      	ldr	r1, [r7, #0]
 800b032:	4618      	mov	r0, r3
 800b034:	f000 f9ba 	bl	800b3ac <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	6a1a      	ldr	r2, [r3, #32]
 800b03e:	f241 1311 	movw	r3, #4369	; 0x1111
 800b042:	4013      	ands	r3, r2
 800b044:	2b00      	cmp	r3, #0
 800b046:	d10f      	bne.n	800b068 <HAL_TIMEx_PWMN_Stop+0x48>
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	6a1a      	ldr	r2, [r3, #32]
 800b04e:	f244 4344 	movw	r3, #17476	; 0x4444
 800b052:	4013      	ands	r3, r2
 800b054:	2b00      	cmp	r3, #0
 800b056:	d107      	bne.n	800b068 <HAL_TIMEx_PWMN_Stop+0x48>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b066:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	6a1a      	ldr	r2, [r3, #32]
 800b06e:	f241 1311 	movw	r3, #4369	; 0x1111
 800b072:	4013      	ands	r3, r2
 800b074:	2b00      	cmp	r3, #0
 800b076:	d10f      	bne.n	800b098 <HAL_TIMEx_PWMN_Stop+0x78>
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	6a1a      	ldr	r2, [r3, #32]
 800b07e:	f244 4344 	movw	r3, #17476	; 0x4444
 800b082:	4013      	ands	r3, r2
 800b084:	2b00      	cmp	r3, #0
 800b086:	d107      	bne.n	800b098 <HAL_TIMEx_PWMN_Stop+0x78>
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	681a      	ldr	r2, [r3, #0]
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	f022 0201 	bic.w	r2, r2, #1
 800b096:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d104      	bne.n	800b0a8 <HAL_TIMEx_PWMN_Stop+0x88>
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2201      	movs	r2, #1
 800b0a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b0a6:	e013      	b.n	800b0d0 <HAL_TIMEx_PWMN_Stop+0xb0>
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	2b04      	cmp	r3, #4
 800b0ac:	d104      	bne.n	800b0b8 <HAL_TIMEx_PWMN_Stop+0x98>
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2201      	movs	r2, #1
 800b0b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b0b6:	e00b      	b.n	800b0d0 <HAL_TIMEx_PWMN_Stop+0xb0>
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	2b08      	cmp	r3, #8
 800b0bc:	d104      	bne.n	800b0c8 <HAL_TIMEx_PWMN_Stop+0xa8>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2201      	movs	r2, #1
 800b0c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b0c6:	e003      	b.n	800b0d0 <HAL_TIMEx_PWMN_Stop+0xb0>
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 800b0d0:	2300      	movs	r3, #0
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	3708      	adds	r7, #8
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}
	...

0800b0dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b0dc:	b480      	push	{r7}
 800b0de:	b085      	sub	sp, #20
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
 800b0e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b0ec:	2b01      	cmp	r3, #1
 800b0ee:	d101      	bne.n	800b0f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b0f0:	2302      	movs	r3, #2
 800b0f2:	e065      	b.n	800b1c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2201      	movs	r2, #1
 800b0f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2202      	movs	r2, #2
 800b100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	685b      	ldr	r3, [r3, #4]
 800b10a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	689b      	ldr	r3, [r3, #8]
 800b112:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	4a2c      	ldr	r2, [pc, #176]	; (800b1cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b11a:	4293      	cmp	r3, r2
 800b11c:	d004      	beq.n	800b128 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	4a2b      	ldr	r2, [pc, #172]	; (800b1d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b124:	4293      	cmp	r3, r2
 800b126:	d108      	bne.n	800b13a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b12e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	685b      	ldr	r3, [r3, #4]
 800b134:	68fa      	ldr	r2, [r7, #12]
 800b136:	4313      	orrs	r3, r2
 800b138:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800b140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b144:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	68fa      	ldr	r2, [r7, #12]
 800b14c:	4313      	orrs	r3, r2
 800b14e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	68fa      	ldr	r2, [r7, #12]
 800b156:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	4a1b      	ldr	r2, [pc, #108]	; (800b1cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b15e:	4293      	cmp	r3, r2
 800b160:	d018      	beq.n	800b194 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b16a:	d013      	beq.n	800b194 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	4a18      	ldr	r2, [pc, #96]	; (800b1d4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b172:	4293      	cmp	r3, r2
 800b174:	d00e      	beq.n	800b194 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	4a17      	ldr	r2, [pc, #92]	; (800b1d8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b17c:	4293      	cmp	r3, r2
 800b17e:	d009      	beq.n	800b194 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	4a12      	ldr	r2, [pc, #72]	; (800b1d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b186:	4293      	cmp	r3, r2
 800b188:	d004      	beq.n	800b194 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	4a13      	ldr	r2, [pc, #76]	; (800b1dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b190:	4293      	cmp	r3, r2
 800b192:	d10c      	bne.n	800b1ae <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b19a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	689b      	ldr	r3, [r3, #8]
 800b1a0:	68ba      	ldr	r2, [r7, #8]
 800b1a2:	4313      	orrs	r3, r2
 800b1a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	68ba      	ldr	r2, [r7, #8]
 800b1ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2201      	movs	r2, #1
 800b1b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b1be:	2300      	movs	r3, #0
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	3714      	adds	r7, #20
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ca:	4770      	bx	lr
 800b1cc:	40012c00 	.word	0x40012c00
 800b1d0:	40013400 	.word	0x40013400
 800b1d4:	40000400 	.word	0x40000400
 800b1d8:	40000800 	.word	0x40000800
 800b1dc:	40014000 	.word	0x40014000

0800b1e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	b085      	sub	sp, #20
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
 800b1e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b1f4:	2b01      	cmp	r3, #1
 800b1f6:	d101      	bne.n	800b1fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b1f8:	2302      	movs	r3, #2
 800b1fa:	e087      	b.n	800b30c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2201      	movs	r2, #1
 800b200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	68db      	ldr	r3, [r3, #12]
 800b20e:	4313      	orrs	r3, r2
 800b210:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	689b      	ldr	r3, [r3, #8]
 800b21c:	4313      	orrs	r3, r2
 800b21e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	685b      	ldr	r3, [r3, #4]
 800b22a:	4313      	orrs	r3, r2
 800b22c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	4313      	orrs	r3, r2
 800b23a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	691b      	ldr	r3, [r3, #16]
 800b246:	4313      	orrs	r3, r2
 800b248:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	695b      	ldr	r3, [r3, #20]
 800b254:	4313      	orrs	r3, r2
 800b256:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b262:	4313      	orrs	r3, r2
 800b264:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	699b      	ldr	r3, [r3, #24]
 800b270:	041b      	lsls	r3, r3, #16
 800b272:	4313      	orrs	r3, r2
 800b274:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	4a27      	ldr	r2, [pc, #156]	; (800b318 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b27c:	4293      	cmp	r3, r2
 800b27e:	d004      	beq.n	800b28a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	4a25      	ldr	r2, [pc, #148]	; (800b31c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b286:	4293      	cmp	r3, r2
 800b288:	d106      	bne.n	800b298 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	69db      	ldr	r3, [r3, #28]
 800b294:	4313      	orrs	r3, r2
 800b296:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	4a1e      	ldr	r2, [pc, #120]	; (800b318 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	d004      	beq.n	800b2ac <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	4a1d      	ldr	r2, [pc, #116]	; (800b31c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b2a8:	4293      	cmp	r3, r2
 800b2aa:	d126      	bne.n	800b2fa <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2b6:	051b      	lsls	r3, r3, #20
 800b2b8:	4313      	orrs	r3, r2
 800b2ba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	6a1b      	ldr	r3, [r3, #32]
 800b2c6:	4313      	orrs	r3, r2
 800b2c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2d4:	4313      	orrs	r3, r2
 800b2d6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	4a0e      	ldr	r2, [pc, #56]	; (800b318 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b2de:	4293      	cmp	r3, r2
 800b2e0:	d004      	beq.n	800b2ec <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	4a0d      	ldr	r2, [pc, #52]	; (800b31c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	d106      	bne.n	800b2fa <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2f6:	4313      	orrs	r3, r2
 800b2f8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	68fa      	ldr	r2, [r7, #12]
 800b300:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2200      	movs	r2, #0
 800b306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b30a:	2300      	movs	r3, #0
}
 800b30c:	4618      	mov	r0, r3
 800b30e:	3714      	adds	r7, #20
 800b310:	46bd      	mov	sp, r7
 800b312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b316:	4770      	bx	lr
 800b318:	40012c00 	.word	0x40012c00
 800b31c:	40013400 	.word	0x40013400

0800b320 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b320:	b480      	push	{r7}
 800b322:	b083      	sub	sp, #12
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b328:	bf00      	nop
 800b32a:	370c      	adds	r7, #12
 800b32c:	46bd      	mov	sp, r7
 800b32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b332:	4770      	bx	lr

0800b334 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b334:	b480      	push	{r7}
 800b336:	b083      	sub	sp, #12
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b33c:	bf00      	nop
 800b33e:	370c      	adds	r7, #12
 800b340:	46bd      	mov	sp, r7
 800b342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b346:	4770      	bx	lr

0800b348 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b348:	b480      	push	{r7}
 800b34a:	b083      	sub	sp, #12
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b350:	bf00      	nop
 800b352:	370c      	adds	r7, #12
 800b354:	46bd      	mov	sp, r7
 800b356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35a:	4770      	bx	lr

0800b35c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b35c:	b480      	push	{r7}
 800b35e:	b083      	sub	sp, #12
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b364:	bf00      	nop
 800b366:	370c      	adds	r7, #12
 800b368:	46bd      	mov	sp, r7
 800b36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36e:	4770      	bx	lr

0800b370 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b370:	b480      	push	{r7}
 800b372:	b083      	sub	sp, #12
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b378:	bf00      	nop
 800b37a:	370c      	adds	r7, #12
 800b37c:	46bd      	mov	sp, r7
 800b37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b382:	4770      	bx	lr

0800b384 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b384:	b480      	push	{r7}
 800b386:	b083      	sub	sp, #12
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b38c:	bf00      	nop
 800b38e:	370c      	adds	r7, #12
 800b390:	46bd      	mov	sp, r7
 800b392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b396:	4770      	bx	lr

0800b398 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b398:	b480      	push	{r7}
 800b39a:	b083      	sub	sp, #12
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b3a0:	bf00      	nop
 800b3a2:	370c      	adds	r7, #12
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3aa:	4770      	bx	lr

0800b3ac <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b087      	sub	sp, #28
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	60f8      	str	r0, [r7, #12]
 800b3b4:	60b9      	str	r1, [r7, #8]
 800b3b6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	f003 031f 	and.w	r3, r3, #31
 800b3be:	2204      	movs	r2, #4
 800b3c0:	fa02 f303 	lsl.w	r3, r2, r3
 800b3c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	6a1a      	ldr	r2, [r3, #32]
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	43db      	mvns	r3, r3
 800b3ce:	401a      	ands	r2, r3
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	6a1a      	ldr	r2, [r3, #32]
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	f003 031f 	and.w	r3, r3, #31
 800b3de:	6879      	ldr	r1, [r7, #4]
 800b3e0:	fa01 f303 	lsl.w	r3, r1, r3
 800b3e4:	431a      	orrs	r2, r3
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	621a      	str	r2, [r3, #32]
}
 800b3ea:	bf00      	nop
 800b3ec:	371c      	adds	r7, #28
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f4:	4770      	bx	lr

0800b3f6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b3f6:	b580      	push	{r7, lr}
 800b3f8:	b082      	sub	sp, #8
 800b3fa:	af00      	add	r7, sp, #0
 800b3fc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d101      	bne.n	800b408 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b404:	2301      	movs	r3, #1
 800b406:	e042      	b.n	800b48e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d106      	bne.n	800b420 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2200      	movs	r2, #0
 800b416:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f7f8 fbcc 	bl	8003bb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2224      	movs	r2, #36	; 0x24
 800b424:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	681a      	ldr	r2, [r3, #0]
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	f022 0201 	bic.w	r2, r2, #1
 800b436:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f000 fc01 	bl	800bc40 <UART_SetConfig>
 800b43e:	4603      	mov	r3, r0
 800b440:	2b01      	cmp	r3, #1
 800b442:	d101      	bne.n	800b448 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b444:	2301      	movs	r3, #1
 800b446:	e022      	b.n	800b48e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d002      	beq.n	800b456 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f000 fec1 	bl	800c1d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	685a      	ldr	r2, [r3, #4]
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b464:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	689a      	ldr	r2, [r3, #8]
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b474:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	681a      	ldr	r2, [r3, #0]
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	f042 0201 	orr.w	r2, r2, #1
 800b484:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f000 ff48 	bl	800c31c <UART_CheckIdleState>
 800b48c:	4603      	mov	r3, r0
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3708      	adds	r7, #8
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}
	...

0800b498 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b08a      	sub	sp, #40	; 0x28
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	60f8      	str	r0, [r7, #12]
 800b4a0:	60b9      	str	r1, [r7, #8]
 800b4a2:	4613      	mov	r3, r2
 800b4a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b4ac:	2b20      	cmp	r3, #32
 800b4ae:	d17a      	bne.n	800b5a6 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d002      	beq.n	800b4bc <HAL_UART_Transmit_DMA+0x24>
 800b4b6:	88fb      	ldrh	r3, [r7, #6]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d101      	bne.n	800b4c0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800b4bc:	2301      	movs	r3, #1
 800b4be:	e073      	b.n	800b5a8 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b4c6:	2b01      	cmp	r3, #1
 800b4c8:	d101      	bne.n	800b4ce <HAL_UART_Transmit_DMA+0x36>
 800b4ca:	2302      	movs	r3, #2
 800b4cc:	e06c      	b.n	800b5a8 <HAL_UART_Transmit_DMA+0x110>
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	2201      	movs	r2, #1
 800b4d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	68ba      	ldr	r2, [r7, #8]
 800b4da:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	88fa      	ldrh	r2, [r7, #6]
 800b4e0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	88fa      	ldrh	r2, [r7, #6]
 800b4e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	2221      	movs	r2, #33	; 0x21
 800b4f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b500:	2b00      	cmp	r3, #0
 800b502:	d02c      	beq.n	800b55e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b508:	4a29      	ldr	r2, [pc, #164]	; (800b5b0 <HAL_UART_Transmit_DMA+0x118>)
 800b50a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b510:	4a28      	ldr	r2, [pc, #160]	; (800b5b4 <HAL_UART_Transmit_DMA+0x11c>)
 800b512:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b518:	4a27      	ldr	r2, [pc, #156]	; (800b5b8 <HAL_UART_Transmit_DMA+0x120>)
 800b51a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b520:	2200      	movs	r2, #0
 800b522:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b52c:	4619      	mov	r1, r3
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	3328      	adds	r3, #40	; 0x28
 800b534:	461a      	mov	r2, r3
 800b536:	88fb      	ldrh	r3, [r7, #6]
 800b538:	f7fb f8e4 	bl	8006704 <HAL_DMA_Start_IT>
 800b53c:	4603      	mov	r3, r0
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d00d      	beq.n	800b55e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	2210      	movs	r2, #16
 800b546:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	2200      	movs	r2, #0
 800b54e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	2220      	movs	r2, #32
 800b556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800b55a:	2301      	movs	r3, #1
 800b55c:	e024      	b.n	800b5a8 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	2240      	movs	r2, #64	; 0x40
 800b564:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	2200      	movs	r2, #0
 800b56a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	3308      	adds	r3, #8
 800b574:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	e853 3f00 	ldrex	r3, [r3]
 800b57c:	613b      	str	r3, [r7, #16]
   return(result);
 800b57e:	693b      	ldr	r3, [r7, #16]
 800b580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b584:	627b      	str	r3, [r7, #36]	; 0x24
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	3308      	adds	r3, #8
 800b58c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b58e:	623a      	str	r2, [r7, #32]
 800b590:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b592:	69f9      	ldr	r1, [r7, #28]
 800b594:	6a3a      	ldr	r2, [r7, #32]
 800b596:	e841 2300 	strex	r3, r2, [r1]
 800b59a:	61bb      	str	r3, [r7, #24]
   return(result);
 800b59c:	69bb      	ldr	r3, [r7, #24]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d1e5      	bne.n	800b56e <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	e000      	b.n	800b5a8 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800b5a6:	2302      	movs	r3, #2
  }
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	3728      	adds	r7, #40	; 0x28
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd80      	pop	{r7, pc}
 800b5b0:	0800c691 	.word	0x0800c691
 800b5b4:	0800c72b 	.word	0x0800c72b
 800b5b8:	0800c747 	.word	0x0800c747

0800b5bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b0ba      	sub	sp, #232	; 0xe8
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	69db      	ldr	r3, [r3, #28]
 800b5ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	689b      	ldr	r3, [r3, #8]
 800b5de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b5e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b5e6:	f640 030f 	movw	r3, #2063	; 0x80f
 800b5ea:	4013      	ands	r3, r2
 800b5ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b5f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d11b      	bne.n	800b630 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b5f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5fc:	f003 0320 	and.w	r3, r3, #32
 800b600:	2b00      	cmp	r3, #0
 800b602:	d015      	beq.n	800b630 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b608:	f003 0320 	and.w	r3, r3, #32
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d105      	bne.n	800b61c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b610:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d009      	beq.n	800b630 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b620:	2b00      	cmp	r3, #0
 800b622:	f000 82d6 	beq.w	800bbd2 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b62a:	6878      	ldr	r0, [r7, #4]
 800b62c:	4798      	blx	r3
      }
      return;
 800b62e:	e2d0      	b.n	800bbd2 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b630:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b634:	2b00      	cmp	r3, #0
 800b636:	f000 811f 	beq.w	800b878 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b63a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b63e:	4b8b      	ldr	r3, [pc, #556]	; (800b86c <HAL_UART_IRQHandler+0x2b0>)
 800b640:	4013      	ands	r3, r2
 800b642:	2b00      	cmp	r3, #0
 800b644:	d106      	bne.n	800b654 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b646:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b64a:	4b89      	ldr	r3, [pc, #548]	; (800b870 <HAL_UART_IRQHandler+0x2b4>)
 800b64c:	4013      	ands	r3, r2
 800b64e:	2b00      	cmp	r3, #0
 800b650:	f000 8112 	beq.w	800b878 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b658:	f003 0301 	and.w	r3, r3, #1
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d011      	beq.n	800b684 <HAL_UART_IRQHandler+0xc8>
 800b660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d00b      	beq.n	800b684 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	2201      	movs	r2, #1
 800b672:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b67a:	f043 0201 	orr.w	r2, r3, #1
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b688:	f003 0302 	and.w	r3, r3, #2
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d011      	beq.n	800b6b4 <HAL_UART_IRQHandler+0xf8>
 800b690:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b694:	f003 0301 	and.w	r3, r3, #1
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d00b      	beq.n	800b6b4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	2202      	movs	r2, #2
 800b6a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b6aa:	f043 0204 	orr.w	r2, r3, #4
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b6b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6b8:	f003 0304 	and.w	r3, r3, #4
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d011      	beq.n	800b6e4 <HAL_UART_IRQHandler+0x128>
 800b6c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b6c4:	f003 0301 	and.w	r3, r3, #1
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d00b      	beq.n	800b6e4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	2204      	movs	r2, #4
 800b6d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b6da:	f043 0202 	orr.w	r2, r3, #2
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b6e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6e8:	f003 0308 	and.w	r3, r3, #8
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d017      	beq.n	800b720 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b6f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6f4:	f003 0320 	and.w	r3, r3, #32
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d105      	bne.n	800b708 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b6fc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b700:	4b5a      	ldr	r3, [pc, #360]	; (800b86c <HAL_UART_IRQHandler+0x2b0>)
 800b702:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b704:	2b00      	cmp	r3, #0
 800b706:	d00b      	beq.n	800b720 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	2208      	movs	r2, #8
 800b70e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b716:	f043 0208 	orr.w	r2, r3, #8
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b724:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d012      	beq.n	800b752 <HAL_UART_IRQHandler+0x196>
 800b72c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b730:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b734:	2b00      	cmp	r3, #0
 800b736:	d00c      	beq.n	800b752 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b740:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b748:	f043 0220 	orr.w	r2, r3, #32
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b758:	2b00      	cmp	r3, #0
 800b75a:	f000 823c 	beq.w	800bbd6 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b75e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b762:	f003 0320 	and.w	r3, r3, #32
 800b766:	2b00      	cmp	r3, #0
 800b768:	d013      	beq.n	800b792 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b76a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b76e:	f003 0320 	and.w	r3, r3, #32
 800b772:	2b00      	cmp	r3, #0
 800b774:	d105      	bne.n	800b782 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b776:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b77a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d007      	beq.n	800b792 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b786:	2b00      	cmp	r3, #0
 800b788:	d003      	beq.n	800b792 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b798:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	689b      	ldr	r3, [r3, #8]
 800b7a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7a6:	2b40      	cmp	r3, #64	; 0x40
 800b7a8:	d005      	beq.n	800b7b6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b7aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b7ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d04f      	beq.n	800b856 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	f000 ff04 	bl	800c5c4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	689b      	ldr	r3, [r3, #8]
 800b7c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7c6:	2b40      	cmp	r3, #64	; 0x40
 800b7c8:	d141      	bne.n	800b84e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	3308      	adds	r3, #8
 800b7d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b7d8:	e853 3f00 	ldrex	r3, [r3]
 800b7dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b7e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b7e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b7e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	3308      	adds	r3, #8
 800b7f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b7f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b7fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b802:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b806:	e841 2300 	strex	r3, r2, [r1]
 800b80a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b80e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b812:	2b00      	cmp	r3, #0
 800b814:	d1d9      	bne.n	800b7ca <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d013      	beq.n	800b846 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b822:	4a14      	ldr	r2, [pc, #80]	; (800b874 <HAL_UART_IRQHandler+0x2b8>)
 800b824:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b82a:	4618      	mov	r0, r3
 800b82c:	f7fb f83e 	bl	80068ac <HAL_DMA_Abort_IT>
 800b830:	4603      	mov	r3, r0
 800b832:	2b00      	cmp	r3, #0
 800b834:	d017      	beq.n	800b866 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b83a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b83c:	687a      	ldr	r2, [r7, #4]
 800b83e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800b840:	4610      	mov	r0, r2
 800b842:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b844:	e00f      	b.n	800b866 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b846:	6878      	ldr	r0, [r7, #4]
 800b848:	f000 f9e4 	bl	800bc14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b84c:	e00b      	b.n	800b866 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	f000 f9e0 	bl	800bc14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b854:	e007      	b.n	800b866 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b856:	6878      	ldr	r0, [r7, #4]
 800b858:	f000 f9dc 	bl	800bc14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2200      	movs	r2, #0
 800b860:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800b864:	e1b7      	b.n	800bbd6 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b866:	bf00      	nop
    return;
 800b868:	e1b5      	b.n	800bbd6 <HAL_UART_IRQHandler+0x61a>
 800b86a:	bf00      	nop
 800b86c:	10000001 	.word	0x10000001
 800b870:	04000120 	.word	0x04000120
 800b874:	0800c7c7 	.word	0x0800c7c7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b87c:	2b01      	cmp	r3, #1
 800b87e:	f040 814a 	bne.w	800bb16 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b886:	f003 0310 	and.w	r3, r3, #16
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	f000 8143 	beq.w	800bb16 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b894:	f003 0310 	and.w	r3, r3, #16
 800b898:	2b00      	cmp	r3, #0
 800b89a:	f000 813c 	beq.w	800bb16 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	2210      	movs	r2, #16
 800b8a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	689b      	ldr	r3, [r3, #8]
 800b8ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8b0:	2b40      	cmp	r3, #64	; 0x40
 800b8b2:	f040 80b5 	bne.w	800ba20 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	685b      	ldr	r3, [r3, #4]
 800b8be:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b8c2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	f000 8187 	beq.w	800bbda <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b8d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b8d6:	429a      	cmp	r2, r3
 800b8d8:	f080 817f 	bcs.w	800bbda <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b8e2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	f003 0320 	and.w	r3, r3, #32
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	f040 8086 	bne.w	800ba04 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b900:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b904:	e853 3f00 	ldrex	r3, [r3]
 800b908:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b90c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b910:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b914:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	461a      	mov	r2, r3
 800b91e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b922:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b926:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b92a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b92e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b932:	e841 2300 	strex	r3, r2, [r1]
 800b936:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b93a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d1da      	bne.n	800b8f8 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	3308      	adds	r3, #8
 800b948:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b94a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b94c:	e853 3f00 	ldrex	r3, [r3]
 800b950:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b952:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b954:	f023 0301 	bic.w	r3, r3, #1
 800b958:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	3308      	adds	r3, #8
 800b962:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b966:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b96a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b96c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b96e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b972:	e841 2300 	strex	r3, r2, [r1]
 800b976:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b978:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d1e1      	bne.n	800b942 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	3308      	adds	r3, #8
 800b984:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b986:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b988:	e853 3f00 	ldrex	r3, [r3]
 800b98c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b98e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b990:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b994:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	3308      	adds	r3, #8
 800b99e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b9a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b9a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b9a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b9aa:	e841 2300 	strex	r3, r2, [r1]
 800b9ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b9b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d1e3      	bne.n	800b97e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2220      	movs	r2, #32
 800b9ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9cc:	e853 3f00 	ldrex	r3, [r3]
 800b9d0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b9d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b9d4:	f023 0310 	bic.w	r3, r3, #16
 800b9d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	461a      	mov	r2, r3
 800b9e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b9e6:	65bb      	str	r3, [r7, #88]	; 0x58
 800b9e8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b9ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b9ee:	e841 2300 	strex	r3, r2, [r1]
 800b9f2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b9f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d1e4      	bne.n	800b9c4 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9fe:	4618      	mov	r0, r3
 800ba00:	f7fa fefb 	bl	80067fa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ba10:	b29b      	uxth	r3, r3
 800ba12:	1ad3      	subs	r3, r2, r3
 800ba14:	b29b      	uxth	r3, r3
 800ba16:	4619      	mov	r1, r3
 800ba18:	6878      	ldr	r0, [r7, #4]
 800ba1a:	f000 f905 	bl	800bc28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ba1e:	e0dc      	b.n	800bbda <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ba2c:	b29b      	uxth	r3, r3
 800ba2e:	1ad3      	subs	r3, r2, r3
 800ba30:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ba3a:	b29b      	uxth	r3, r3
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	f000 80ce 	beq.w	800bbde <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800ba42:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	f000 80c9 	beq.w	800bbde <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba54:	e853 3f00 	ldrex	r3, [r3]
 800ba58:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ba5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ba60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	461a      	mov	r2, r3
 800ba6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ba6e:	647b      	str	r3, [r7, #68]	; 0x44
 800ba70:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ba74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba76:	e841 2300 	strex	r3, r2, [r1]
 800ba7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ba7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d1e4      	bne.n	800ba4c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	3308      	adds	r3, #8
 800ba88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba8c:	e853 3f00 	ldrex	r3, [r3]
 800ba90:	623b      	str	r3, [r7, #32]
   return(result);
 800ba92:	6a3b      	ldr	r3, [r7, #32]
 800ba94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ba98:	f023 0301 	bic.w	r3, r3, #1
 800ba9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	3308      	adds	r3, #8
 800baa6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800baaa:	633a      	str	r2, [r7, #48]	; 0x30
 800baac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bab2:	e841 2300 	strex	r3, r2, [r1]
 800bab6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baba:	2b00      	cmp	r3, #0
 800babc:	d1e1      	bne.n	800ba82 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2220      	movs	r2, #32
 800bac2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2200      	movs	r2, #0
 800baca:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2200      	movs	r2, #0
 800bad0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bad8:	693b      	ldr	r3, [r7, #16]
 800bada:	e853 3f00 	ldrex	r3, [r3]
 800bade:	60fb      	str	r3, [r7, #12]
   return(result);
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	f023 0310 	bic.w	r3, r3, #16
 800bae6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	461a      	mov	r2, r3
 800baf0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800baf4:	61fb      	str	r3, [r7, #28]
 800baf6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baf8:	69b9      	ldr	r1, [r7, #24]
 800bafa:	69fa      	ldr	r2, [r7, #28]
 800bafc:	e841 2300 	strex	r3, r2, [r1]
 800bb00:	617b      	str	r3, [r7, #20]
   return(result);
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d1e4      	bne.n	800bad2 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bb08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bb0c:	4619      	mov	r1, r3
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f000 f88a 	bl	800bc28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bb14:	e063      	b.n	800bbde <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bb16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d00e      	beq.n	800bb40 <HAL_UART_IRQHandler+0x584>
 800bb22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d008      	beq.n	800bb40 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800bb36:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	f000 fe85 	bl	800c848 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bb3e:	e051      	b.n	800bbe4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bb40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d014      	beq.n	800bb76 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bb4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d105      	bne.n	800bb64 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bb58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d008      	beq.n	800bb76 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d03a      	beq.n	800bbe2 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	4798      	blx	r3
    }
    return;
 800bb74:	e035      	b.n	800bbe2 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bb76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d009      	beq.n	800bb96 <HAL_UART_IRQHandler+0x5da>
 800bb82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d003      	beq.n	800bb96 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f000 fe2f 	bl	800c7f2 <UART_EndTransmit_IT>
    return;
 800bb94:	e026      	b.n	800bbe4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bb96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d009      	beq.n	800bbb6 <HAL_UART_IRQHandler+0x5fa>
 800bba2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bba6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d003      	beq.n	800bbb6 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bbae:	6878      	ldr	r0, [r7, #4]
 800bbb0:	f000 fe5e 	bl	800c870 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bbb4:	e016      	b.n	800bbe4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bbb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d010      	beq.n	800bbe4 <HAL_UART_IRQHandler+0x628>
 800bbc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	da0c      	bge.n	800bbe4 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bbca:	6878      	ldr	r0, [r7, #4]
 800bbcc:	f000 fe46 	bl	800c85c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bbd0:	e008      	b.n	800bbe4 <HAL_UART_IRQHandler+0x628>
      return;
 800bbd2:	bf00      	nop
 800bbd4:	e006      	b.n	800bbe4 <HAL_UART_IRQHandler+0x628>
    return;
 800bbd6:	bf00      	nop
 800bbd8:	e004      	b.n	800bbe4 <HAL_UART_IRQHandler+0x628>
      return;
 800bbda:	bf00      	nop
 800bbdc:	e002      	b.n	800bbe4 <HAL_UART_IRQHandler+0x628>
      return;
 800bbde:	bf00      	nop
 800bbe0:	e000      	b.n	800bbe4 <HAL_UART_IRQHandler+0x628>
    return;
 800bbe2:	bf00      	nop
  }
}
 800bbe4:	37e8      	adds	r7, #232	; 0xe8
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}
 800bbea:	bf00      	nop

0800bbec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bbec:	b480      	push	{r7}
 800bbee:	b083      	sub	sp, #12
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bbf4:	bf00      	nop
 800bbf6:	370c      	adds	r7, #12
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfe:	4770      	bx	lr

0800bc00 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bc00:	b480      	push	{r7}
 800bc02:	b083      	sub	sp, #12
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800bc08:	bf00      	nop
 800bc0a:	370c      	adds	r7, #12
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc12:	4770      	bx	lr

0800bc14 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bc14:	b480      	push	{r7}
 800bc16:	b083      	sub	sp, #12
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bc1c:	bf00      	nop
 800bc1e:	370c      	adds	r7, #12
 800bc20:	46bd      	mov	sp, r7
 800bc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc26:	4770      	bx	lr

0800bc28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bc28:	b480      	push	{r7}
 800bc2a:	b083      	sub	sp, #12
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
 800bc30:	460b      	mov	r3, r1
 800bc32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bc34:	bf00      	nop
 800bc36:	370c      	adds	r7, #12
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3e:	4770      	bx	lr

0800bc40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bc40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bc44:	b08c      	sub	sp, #48	; 0x30
 800bc46:	af00      	add	r7, sp, #0
 800bc48:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bc50:	697b      	ldr	r3, [r7, #20]
 800bc52:	689a      	ldr	r2, [r3, #8]
 800bc54:	697b      	ldr	r3, [r7, #20]
 800bc56:	691b      	ldr	r3, [r3, #16]
 800bc58:	431a      	orrs	r2, r3
 800bc5a:	697b      	ldr	r3, [r7, #20]
 800bc5c:	695b      	ldr	r3, [r3, #20]
 800bc5e:	431a      	orrs	r2, r3
 800bc60:	697b      	ldr	r3, [r7, #20]
 800bc62:	69db      	ldr	r3, [r3, #28]
 800bc64:	4313      	orrs	r3, r2
 800bc66:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	681a      	ldr	r2, [r3, #0]
 800bc6e:	4bab      	ldr	r3, [pc, #684]	; (800bf1c <UART_SetConfig+0x2dc>)
 800bc70:	4013      	ands	r3, r2
 800bc72:	697a      	ldr	r2, [r7, #20]
 800bc74:	6812      	ldr	r2, [r2, #0]
 800bc76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bc78:	430b      	orrs	r3, r1
 800bc7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bc7c:	697b      	ldr	r3, [r7, #20]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	685b      	ldr	r3, [r3, #4]
 800bc82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bc86:	697b      	ldr	r3, [r7, #20]
 800bc88:	68da      	ldr	r2, [r3, #12]
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	430a      	orrs	r2, r1
 800bc90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bc92:	697b      	ldr	r3, [r7, #20]
 800bc94:	699b      	ldr	r3, [r3, #24]
 800bc96:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bc98:	697b      	ldr	r3, [r7, #20]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	4aa0      	ldr	r2, [pc, #640]	; (800bf20 <UART_SetConfig+0x2e0>)
 800bc9e:	4293      	cmp	r3, r2
 800bca0:	d004      	beq.n	800bcac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	6a1b      	ldr	r3, [r3, #32]
 800bca6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bca8:	4313      	orrs	r3, r2
 800bcaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bcac:	697b      	ldr	r3, [r7, #20]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	689b      	ldr	r3, [r3, #8]
 800bcb2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800bcb6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800bcba:	697a      	ldr	r2, [r7, #20]
 800bcbc:	6812      	ldr	r2, [r2, #0]
 800bcbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bcc0:	430b      	orrs	r3, r1
 800bcc2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bcc4:	697b      	ldr	r3, [r7, #20]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcca:	f023 010f 	bic.w	r1, r3, #15
 800bcce:	697b      	ldr	r3, [r7, #20]
 800bcd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bcd2:	697b      	ldr	r3, [r7, #20]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	430a      	orrs	r2, r1
 800bcd8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bcda:	697b      	ldr	r3, [r7, #20]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	4a91      	ldr	r2, [pc, #580]	; (800bf24 <UART_SetConfig+0x2e4>)
 800bce0:	4293      	cmp	r3, r2
 800bce2:	d125      	bne.n	800bd30 <UART_SetConfig+0xf0>
 800bce4:	4b90      	ldr	r3, [pc, #576]	; (800bf28 <UART_SetConfig+0x2e8>)
 800bce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcea:	f003 0303 	and.w	r3, r3, #3
 800bcee:	2b03      	cmp	r3, #3
 800bcf0:	d81a      	bhi.n	800bd28 <UART_SetConfig+0xe8>
 800bcf2:	a201      	add	r2, pc, #4	; (adr r2, 800bcf8 <UART_SetConfig+0xb8>)
 800bcf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcf8:	0800bd09 	.word	0x0800bd09
 800bcfc:	0800bd19 	.word	0x0800bd19
 800bd00:	0800bd11 	.word	0x0800bd11
 800bd04:	0800bd21 	.word	0x0800bd21
 800bd08:	2301      	movs	r3, #1
 800bd0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bd0e:	e0d6      	b.n	800bebe <UART_SetConfig+0x27e>
 800bd10:	2302      	movs	r3, #2
 800bd12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bd16:	e0d2      	b.n	800bebe <UART_SetConfig+0x27e>
 800bd18:	2304      	movs	r3, #4
 800bd1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bd1e:	e0ce      	b.n	800bebe <UART_SetConfig+0x27e>
 800bd20:	2308      	movs	r3, #8
 800bd22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bd26:	e0ca      	b.n	800bebe <UART_SetConfig+0x27e>
 800bd28:	2310      	movs	r3, #16
 800bd2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bd2e:	e0c6      	b.n	800bebe <UART_SetConfig+0x27e>
 800bd30:	697b      	ldr	r3, [r7, #20]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	4a7d      	ldr	r2, [pc, #500]	; (800bf2c <UART_SetConfig+0x2ec>)
 800bd36:	4293      	cmp	r3, r2
 800bd38:	d138      	bne.n	800bdac <UART_SetConfig+0x16c>
 800bd3a:	4b7b      	ldr	r3, [pc, #492]	; (800bf28 <UART_SetConfig+0x2e8>)
 800bd3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd40:	f003 030c 	and.w	r3, r3, #12
 800bd44:	2b0c      	cmp	r3, #12
 800bd46:	d82d      	bhi.n	800bda4 <UART_SetConfig+0x164>
 800bd48:	a201      	add	r2, pc, #4	; (adr r2, 800bd50 <UART_SetConfig+0x110>)
 800bd4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd4e:	bf00      	nop
 800bd50:	0800bd85 	.word	0x0800bd85
 800bd54:	0800bda5 	.word	0x0800bda5
 800bd58:	0800bda5 	.word	0x0800bda5
 800bd5c:	0800bda5 	.word	0x0800bda5
 800bd60:	0800bd95 	.word	0x0800bd95
 800bd64:	0800bda5 	.word	0x0800bda5
 800bd68:	0800bda5 	.word	0x0800bda5
 800bd6c:	0800bda5 	.word	0x0800bda5
 800bd70:	0800bd8d 	.word	0x0800bd8d
 800bd74:	0800bda5 	.word	0x0800bda5
 800bd78:	0800bda5 	.word	0x0800bda5
 800bd7c:	0800bda5 	.word	0x0800bda5
 800bd80:	0800bd9d 	.word	0x0800bd9d
 800bd84:	2300      	movs	r3, #0
 800bd86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bd8a:	e098      	b.n	800bebe <UART_SetConfig+0x27e>
 800bd8c:	2302      	movs	r3, #2
 800bd8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bd92:	e094      	b.n	800bebe <UART_SetConfig+0x27e>
 800bd94:	2304      	movs	r3, #4
 800bd96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bd9a:	e090      	b.n	800bebe <UART_SetConfig+0x27e>
 800bd9c:	2308      	movs	r3, #8
 800bd9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bda2:	e08c      	b.n	800bebe <UART_SetConfig+0x27e>
 800bda4:	2310      	movs	r3, #16
 800bda6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bdaa:	e088      	b.n	800bebe <UART_SetConfig+0x27e>
 800bdac:	697b      	ldr	r3, [r7, #20]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	4a5f      	ldr	r2, [pc, #380]	; (800bf30 <UART_SetConfig+0x2f0>)
 800bdb2:	4293      	cmp	r3, r2
 800bdb4:	d125      	bne.n	800be02 <UART_SetConfig+0x1c2>
 800bdb6:	4b5c      	ldr	r3, [pc, #368]	; (800bf28 <UART_SetConfig+0x2e8>)
 800bdb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdbc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bdc0:	2b30      	cmp	r3, #48	; 0x30
 800bdc2:	d016      	beq.n	800bdf2 <UART_SetConfig+0x1b2>
 800bdc4:	2b30      	cmp	r3, #48	; 0x30
 800bdc6:	d818      	bhi.n	800bdfa <UART_SetConfig+0x1ba>
 800bdc8:	2b20      	cmp	r3, #32
 800bdca:	d00a      	beq.n	800bde2 <UART_SetConfig+0x1a2>
 800bdcc:	2b20      	cmp	r3, #32
 800bdce:	d814      	bhi.n	800bdfa <UART_SetConfig+0x1ba>
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d002      	beq.n	800bdda <UART_SetConfig+0x19a>
 800bdd4:	2b10      	cmp	r3, #16
 800bdd6:	d008      	beq.n	800bdea <UART_SetConfig+0x1aa>
 800bdd8:	e00f      	b.n	800bdfa <UART_SetConfig+0x1ba>
 800bdda:	2300      	movs	r3, #0
 800bddc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bde0:	e06d      	b.n	800bebe <UART_SetConfig+0x27e>
 800bde2:	2302      	movs	r3, #2
 800bde4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bde8:	e069      	b.n	800bebe <UART_SetConfig+0x27e>
 800bdea:	2304      	movs	r3, #4
 800bdec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bdf0:	e065      	b.n	800bebe <UART_SetConfig+0x27e>
 800bdf2:	2308      	movs	r3, #8
 800bdf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bdf8:	e061      	b.n	800bebe <UART_SetConfig+0x27e>
 800bdfa:	2310      	movs	r3, #16
 800bdfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be00:	e05d      	b.n	800bebe <UART_SetConfig+0x27e>
 800be02:	697b      	ldr	r3, [r7, #20]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	4a4b      	ldr	r2, [pc, #300]	; (800bf34 <UART_SetConfig+0x2f4>)
 800be08:	4293      	cmp	r3, r2
 800be0a:	d125      	bne.n	800be58 <UART_SetConfig+0x218>
 800be0c:	4b46      	ldr	r3, [pc, #280]	; (800bf28 <UART_SetConfig+0x2e8>)
 800be0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be12:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800be16:	2bc0      	cmp	r3, #192	; 0xc0
 800be18:	d016      	beq.n	800be48 <UART_SetConfig+0x208>
 800be1a:	2bc0      	cmp	r3, #192	; 0xc0
 800be1c:	d818      	bhi.n	800be50 <UART_SetConfig+0x210>
 800be1e:	2b80      	cmp	r3, #128	; 0x80
 800be20:	d00a      	beq.n	800be38 <UART_SetConfig+0x1f8>
 800be22:	2b80      	cmp	r3, #128	; 0x80
 800be24:	d814      	bhi.n	800be50 <UART_SetConfig+0x210>
 800be26:	2b00      	cmp	r3, #0
 800be28:	d002      	beq.n	800be30 <UART_SetConfig+0x1f0>
 800be2a:	2b40      	cmp	r3, #64	; 0x40
 800be2c:	d008      	beq.n	800be40 <UART_SetConfig+0x200>
 800be2e:	e00f      	b.n	800be50 <UART_SetConfig+0x210>
 800be30:	2300      	movs	r3, #0
 800be32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be36:	e042      	b.n	800bebe <UART_SetConfig+0x27e>
 800be38:	2302      	movs	r3, #2
 800be3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be3e:	e03e      	b.n	800bebe <UART_SetConfig+0x27e>
 800be40:	2304      	movs	r3, #4
 800be42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be46:	e03a      	b.n	800bebe <UART_SetConfig+0x27e>
 800be48:	2308      	movs	r3, #8
 800be4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be4e:	e036      	b.n	800bebe <UART_SetConfig+0x27e>
 800be50:	2310      	movs	r3, #16
 800be52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be56:	e032      	b.n	800bebe <UART_SetConfig+0x27e>
 800be58:	697b      	ldr	r3, [r7, #20]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	4a30      	ldr	r2, [pc, #192]	; (800bf20 <UART_SetConfig+0x2e0>)
 800be5e:	4293      	cmp	r3, r2
 800be60:	d12a      	bne.n	800beb8 <UART_SetConfig+0x278>
 800be62:	4b31      	ldr	r3, [pc, #196]	; (800bf28 <UART_SetConfig+0x2e8>)
 800be64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be68:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800be6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800be70:	d01a      	beq.n	800bea8 <UART_SetConfig+0x268>
 800be72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800be76:	d81b      	bhi.n	800beb0 <UART_SetConfig+0x270>
 800be78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800be7c:	d00c      	beq.n	800be98 <UART_SetConfig+0x258>
 800be7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800be82:	d815      	bhi.n	800beb0 <UART_SetConfig+0x270>
 800be84:	2b00      	cmp	r3, #0
 800be86:	d003      	beq.n	800be90 <UART_SetConfig+0x250>
 800be88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be8c:	d008      	beq.n	800bea0 <UART_SetConfig+0x260>
 800be8e:	e00f      	b.n	800beb0 <UART_SetConfig+0x270>
 800be90:	2300      	movs	r3, #0
 800be92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be96:	e012      	b.n	800bebe <UART_SetConfig+0x27e>
 800be98:	2302      	movs	r3, #2
 800be9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800be9e:	e00e      	b.n	800bebe <UART_SetConfig+0x27e>
 800bea0:	2304      	movs	r3, #4
 800bea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bea6:	e00a      	b.n	800bebe <UART_SetConfig+0x27e>
 800bea8:	2308      	movs	r3, #8
 800beaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800beae:	e006      	b.n	800bebe <UART_SetConfig+0x27e>
 800beb0:	2310      	movs	r3, #16
 800beb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800beb6:	e002      	b.n	800bebe <UART_SetConfig+0x27e>
 800beb8:	2310      	movs	r3, #16
 800beba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bebe:	697b      	ldr	r3, [r7, #20]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	4a17      	ldr	r2, [pc, #92]	; (800bf20 <UART_SetConfig+0x2e0>)
 800bec4:	4293      	cmp	r3, r2
 800bec6:	f040 80a8 	bne.w	800c01a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800beca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bece:	2b08      	cmp	r3, #8
 800bed0:	d834      	bhi.n	800bf3c <UART_SetConfig+0x2fc>
 800bed2:	a201      	add	r2, pc, #4	; (adr r2, 800bed8 <UART_SetConfig+0x298>)
 800bed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bed8:	0800befd 	.word	0x0800befd
 800bedc:	0800bf3d 	.word	0x0800bf3d
 800bee0:	0800bf05 	.word	0x0800bf05
 800bee4:	0800bf3d 	.word	0x0800bf3d
 800bee8:	0800bf0b 	.word	0x0800bf0b
 800beec:	0800bf3d 	.word	0x0800bf3d
 800bef0:	0800bf3d 	.word	0x0800bf3d
 800bef4:	0800bf3d 	.word	0x0800bf3d
 800bef8:	0800bf13 	.word	0x0800bf13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800befc:	f7fc fca0 	bl	8008840 <HAL_RCC_GetPCLK1Freq>
 800bf00:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bf02:	e021      	b.n	800bf48 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bf04:	4b0c      	ldr	r3, [pc, #48]	; (800bf38 <UART_SetConfig+0x2f8>)
 800bf06:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bf08:	e01e      	b.n	800bf48 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bf0a:	f7fc fc2d 	bl	8008768 <HAL_RCC_GetSysClockFreq>
 800bf0e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bf10:	e01a      	b.n	800bf48 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bf12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bf18:	e016      	b.n	800bf48 <UART_SetConfig+0x308>
 800bf1a:	bf00      	nop
 800bf1c:	cfff69f3 	.word	0xcfff69f3
 800bf20:	40008000 	.word	0x40008000
 800bf24:	40013800 	.word	0x40013800
 800bf28:	40021000 	.word	0x40021000
 800bf2c:	40004400 	.word	0x40004400
 800bf30:	40004800 	.word	0x40004800
 800bf34:	40004c00 	.word	0x40004c00
 800bf38:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800bf40:	2301      	movs	r3, #1
 800bf42:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800bf46:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bf48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	f000 812a 	beq.w	800c1a4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bf50:	697b      	ldr	r3, [r7, #20]
 800bf52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf54:	4a9e      	ldr	r2, [pc, #632]	; (800c1d0 <UART_SetConfig+0x590>)
 800bf56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf5a:	461a      	mov	r2, r3
 800bf5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf5e:	fbb3 f3f2 	udiv	r3, r3, r2
 800bf62:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bf64:	697b      	ldr	r3, [r7, #20]
 800bf66:	685a      	ldr	r2, [r3, #4]
 800bf68:	4613      	mov	r3, r2
 800bf6a:	005b      	lsls	r3, r3, #1
 800bf6c:	4413      	add	r3, r2
 800bf6e:	69ba      	ldr	r2, [r7, #24]
 800bf70:	429a      	cmp	r2, r3
 800bf72:	d305      	bcc.n	800bf80 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bf74:	697b      	ldr	r3, [r7, #20]
 800bf76:	685b      	ldr	r3, [r3, #4]
 800bf78:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bf7a:	69ba      	ldr	r2, [r7, #24]
 800bf7c:	429a      	cmp	r2, r3
 800bf7e:	d903      	bls.n	800bf88 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800bf80:	2301      	movs	r3, #1
 800bf82:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bf86:	e10d      	b.n	800c1a4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	60bb      	str	r3, [r7, #8]
 800bf8e:	60fa      	str	r2, [r7, #12]
 800bf90:	697b      	ldr	r3, [r7, #20]
 800bf92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf94:	4a8e      	ldr	r2, [pc, #568]	; (800c1d0 <UART_SetConfig+0x590>)
 800bf96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf9a:	b29b      	uxth	r3, r3
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	603b      	str	r3, [r7, #0]
 800bfa0:	607a      	str	r2, [r7, #4]
 800bfa2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bfa6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bfaa:	f7f4 f991 	bl	80002d0 <__aeabi_uldivmod>
 800bfae:	4602      	mov	r2, r0
 800bfb0:	460b      	mov	r3, r1
 800bfb2:	4610      	mov	r0, r2
 800bfb4:	4619      	mov	r1, r3
 800bfb6:	f04f 0200 	mov.w	r2, #0
 800bfba:	f04f 0300 	mov.w	r3, #0
 800bfbe:	020b      	lsls	r3, r1, #8
 800bfc0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bfc4:	0202      	lsls	r2, r0, #8
 800bfc6:	6979      	ldr	r1, [r7, #20]
 800bfc8:	6849      	ldr	r1, [r1, #4]
 800bfca:	0849      	lsrs	r1, r1, #1
 800bfcc:	2000      	movs	r0, #0
 800bfce:	460c      	mov	r4, r1
 800bfd0:	4605      	mov	r5, r0
 800bfd2:	eb12 0804 	adds.w	r8, r2, r4
 800bfd6:	eb43 0905 	adc.w	r9, r3, r5
 800bfda:	697b      	ldr	r3, [r7, #20]
 800bfdc:	685b      	ldr	r3, [r3, #4]
 800bfde:	2200      	movs	r2, #0
 800bfe0:	469a      	mov	sl, r3
 800bfe2:	4693      	mov	fp, r2
 800bfe4:	4652      	mov	r2, sl
 800bfe6:	465b      	mov	r3, fp
 800bfe8:	4640      	mov	r0, r8
 800bfea:	4649      	mov	r1, r9
 800bfec:	f7f4 f970 	bl	80002d0 <__aeabi_uldivmod>
 800bff0:	4602      	mov	r2, r0
 800bff2:	460b      	mov	r3, r1
 800bff4:	4613      	mov	r3, r2
 800bff6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bff8:	6a3b      	ldr	r3, [r7, #32]
 800bffa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bffe:	d308      	bcc.n	800c012 <UART_SetConfig+0x3d2>
 800c000:	6a3b      	ldr	r3, [r7, #32]
 800c002:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c006:	d204      	bcs.n	800c012 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800c008:	697b      	ldr	r3, [r7, #20]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	6a3a      	ldr	r2, [r7, #32]
 800c00e:	60da      	str	r2, [r3, #12]
 800c010:	e0c8      	b.n	800c1a4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800c012:	2301      	movs	r3, #1
 800c014:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c018:	e0c4      	b.n	800c1a4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c01a:	697b      	ldr	r3, [r7, #20]
 800c01c:	69db      	ldr	r3, [r3, #28]
 800c01e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c022:	d167      	bne.n	800c0f4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800c024:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c028:	2b08      	cmp	r3, #8
 800c02a:	d828      	bhi.n	800c07e <UART_SetConfig+0x43e>
 800c02c:	a201      	add	r2, pc, #4	; (adr r2, 800c034 <UART_SetConfig+0x3f4>)
 800c02e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c032:	bf00      	nop
 800c034:	0800c059 	.word	0x0800c059
 800c038:	0800c061 	.word	0x0800c061
 800c03c:	0800c069 	.word	0x0800c069
 800c040:	0800c07f 	.word	0x0800c07f
 800c044:	0800c06f 	.word	0x0800c06f
 800c048:	0800c07f 	.word	0x0800c07f
 800c04c:	0800c07f 	.word	0x0800c07f
 800c050:	0800c07f 	.word	0x0800c07f
 800c054:	0800c077 	.word	0x0800c077
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c058:	f7fc fbf2 	bl	8008840 <HAL_RCC_GetPCLK1Freq>
 800c05c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c05e:	e014      	b.n	800c08a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c060:	f7fc fc04 	bl	800886c <HAL_RCC_GetPCLK2Freq>
 800c064:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c066:	e010      	b.n	800c08a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c068:	4b5a      	ldr	r3, [pc, #360]	; (800c1d4 <UART_SetConfig+0x594>)
 800c06a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c06c:	e00d      	b.n	800c08a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c06e:	f7fc fb7b 	bl	8008768 <HAL_RCC_GetSysClockFreq>
 800c072:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c074:	e009      	b.n	800c08a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c076:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c07a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c07c:	e005      	b.n	800c08a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800c07e:	2300      	movs	r3, #0
 800c080:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c082:	2301      	movs	r3, #1
 800c084:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c088:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	f000 8089 	beq.w	800c1a4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c092:	697b      	ldr	r3, [r7, #20]
 800c094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c096:	4a4e      	ldr	r2, [pc, #312]	; (800c1d0 <UART_SetConfig+0x590>)
 800c098:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c09c:	461a      	mov	r2, r3
 800c09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800c0a4:	005a      	lsls	r2, r3, #1
 800c0a6:	697b      	ldr	r3, [r7, #20]
 800c0a8:	685b      	ldr	r3, [r3, #4]
 800c0aa:	085b      	lsrs	r3, r3, #1
 800c0ac:	441a      	add	r2, r3
 800c0ae:	697b      	ldr	r3, [r7, #20]
 800c0b0:	685b      	ldr	r3, [r3, #4]
 800c0b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c0b8:	6a3b      	ldr	r3, [r7, #32]
 800c0ba:	2b0f      	cmp	r3, #15
 800c0bc:	d916      	bls.n	800c0ec <UART_SetConfig+0x4ac>
 800c0be:	6a3b      	ldr	r3, [r7, #32]
 800c0c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0c4:	d212      	bcs.n	800c0ec <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c0c6:	6a3b      	ldr	r3, [r7, #32]
 800c0c8:	b29b      	uxth	r3, r3
 800c0ca:	f023 030f 	bic.w	r3, r3, #15
 800c0ce:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c0d0:	6a3b      	ldr	r3, [r7, #32]
 800c0d2:	085b      	lsrs	r3, r3, #1
 800c0d4:	b29b      	uxth	r3, r3
 800c0d6:	f003 0307 	and.w	r3, r3, #7
 800c0da:	b29a      	uxth	r2, r3
 800c0dc:	8bfb      	ldrh	r3, [r7, #30]
 800c0de:	4313      	orrs	r3, r2
 800c0e0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800c0e2:	697b      	ldr	r3, [r7, #20]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	8bfa      	ldrh	r2, [r7, #30]
 800c0e8:	60da      	str	r2, [r3, #12]
 800c0ea:	e05b      	b.n	800c1a4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c0f2:	e057      	b.n	800c1a4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c0f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c0f8:	2b08      	cmp	r3, #8
 800c0fa:	d828      	bhi.n	800c14e <UART_SetConfig+0x50e>
 800c0fc:	a201      	add	r2, pc, #4	; (adr r2, 800c104 <UART_SetConfig+0x4c4>)
 800c0fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c102:	bf00      	nop
 800c104:	0800c129 	.word	0x0800c129
 800c108:	0800c131 	.word	0x0800c131
 800c10c:	0800c139 	.word	0x0800c139
 800c110:	0800c14f 	.word	0x0800c14f
 800c114:	0800c13f 	.word	0x0800c13f
 800c118:	0800c14f 	.word	0x0800c14f
 800c11c:	0800c14f 	.word	0x0800c14f
 800c120:	0800c14f 	.word	0x0800c14f
 800c124:	0800c147 	.word	0x0800c147
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c128:	f7fc fb8a 	bl	8008840 <HAL_RCC_GetPCLK1Freq>
 800c12c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c12e:	e014      	b.n	800c15a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c130:	f7fc fb9c 	bl	800886c <HAL_RCC_GetPCLK2Freq>
 800c134:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c136:	e010      	b.n	800c15a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c138:	4b26      	ldr	r3, [pc, #152]	; (800c1d4 <UART_SetConfig+0x594>)
 800c13a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c13c:	e00d      	b.n	800c15a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c13e:	f7fc fb13 	bl	8008768 <HAL_RCC_GetSysClockFreq>
 800c142:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c144:	e009      	b.n	800c15a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c146:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c14a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c14c:	e005      	b.n	800c15a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800c14e:	2300      	movs	r3, #0
 800c150:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c152:	2301      	movs	r3, #1
 800c154:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c158:	bf00      	nop
    }

    if (pclk != 0U)
 800c15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d021      	beq.n	800c1a4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c160:	697b      	ldr	r3, [r7, #20]
 800c162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c164:	4a1a      	ldr	r2, [pc, #104]	; (800c1d0 <UART_SetConfig+0x590>)
 800c166:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c16a:	461a      	mov	r2, r3
 800c16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c16e:	fbb3 f2f2 	udiv	r2, r3, r2
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	685b      	ldr	r3, [r3, #4]
 800c176:	085b      	lsrs	r3, r3, #1
 800c178:	441a      	add	r2, r3
 800c17a:	697b      	ldr	r3, [r7, #20]
 800c17c:	685b      	ldr	r3, [r3, #4]
 800c17e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c182:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c184:	6a3b      	ldr	r3, [r7, #32]
 800c186:	2b0f      	cmp	r3, #15
 800c188:	d909      	bls.n	800c19e <UART_SetConfig+0x55e>
 800c18a:	6a3b      	ldr	r3, [r7, #32]
 800c18c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c190:	d205      	bcs.n	800c19e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c192:	6a3b      	ldr	r3, [r7, #32]
 800c194:	b29a      	uxth	r2, r3
 800c196:	697b      	ldr	r3, [r7, #20]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	60da      	str	r2, [r3, #12]
 800c19c:	e002      	b.n	800c1a4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800c19e:	2301      	movs	r3, #1
 800c1a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c1a4:	697b      	ldr	r3, [r7, #20]
 800c1a6:	2201      	movs	r2, #1
 800c1a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c1ac:	697b      	ldr	r3, [r7, #20]
 800c1ae:	2201      	movs	r2, #1
 800c1b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c1b4:	697b      	ldr	r3, [r7, #20]
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c1ba:	697b      	ldr	r3, [r7, #20]
 800c1bc:	2200      	movs	r2, #0
 800c1be:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c1c0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	3730      	adds	r7, #48	; 0x30
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c1ce:	bf00      	nop
 800c1d0:	0800d4ac 	.word	0x0800d4ac
 800c1d4:	00f42400 	.word	0x00f42400

0800c1d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c1d8:	b480      	push	{r7}
 800c1da:	b083      	sub	sp, #12
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1e4:	f003 0301 	and.w	r3, r3, #1
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d00a      	beq.n	800c202 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	685b      	ldr	r3, [r3, #4]
 800c1f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	430a      	orrs	r2, r1
 800c200:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c206:	f003 0302 	and.w	r3, r3, #2
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d00a      	beq.n	800c224 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	685b      	ldr	r3, [r3, #4]
 800c214:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	430a      	orrs	r2, r1
 800c222:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c228:	f003 0304 	and.w	r3, r3, #4
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d00a      	beq.n	800c246 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	685b      	ldr	r3, [r3, #4]
 800c236:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	430a      	orrs	r2, r1
 800c244:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c24a:	f003 0308 	and.w	r3, r3, #8
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d00a      	beq.n	800c268 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	685b      	ldr	r3, [r3, #4]
 800c258:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	430a      	orrs	r2, r1
 800c266:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c26c:	f003 0310 	and.w	r3, r3, #16
 800c270:	2b00      	cmp	r3, #0
 800c272:	d00a      	beq.n	800c28a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	689b      	ldr	r3, [r3, #8]
 800c27a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	430a      	orrs	r2, r1
 800c288:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c28e:	f003 0320 	and.w	r3, r3, #32
 800c292:	2b00      	cmp	r3, #0
 800c294:	d00a      	beq.n	800c2ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	689b      	ldr	r3, [r3, #8]
 800c29c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	430a      	orrs	r2, r1
 800c2aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d01a      	beq.n	800c2ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	685b      	ldr	r3, [r3, #4]
 800c2be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	430a      	orrs	r2, r1
 800c2cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c2d6:	d10a      	bne.n	800c2ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	685b      	ldr	r3, [r3, #4]
 800c2de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	430a      	orrs	r2, r1
 800c2ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d00a      	beq.n	800c310 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	685b      	ldr	r3, [r3, #4]
 800c300:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	430a      	orrs	r2, r1
 800c30e:	605a      	str	r2, [r3, #4]
  }
}
 800c310:	bf00      	nop
 800c312:	370c      	adds	r7, #12
 800c314:	46bd      	mov	sp, r7
 800c316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31a:	4770      	bx	lr

0800c31c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b086      	sub	sp, #24
 800c320:	af02      	add	r7, sp, #8
 800c322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2200      	movs	r2, #0
 800c328:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c32c:	f7f7 fd60 	bl	8003df0 <HAL_GetTick>
 800c330:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	f003 0308 	and.w	r3, r3, #8
 800c33c:	2b08      	cmp	r3, #8
 800c33e:	d10e      	bne.n	800c35e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c340:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c344:	9300      	str	r3, [sp, #0]
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	2200      	movs	r2, #0
 800c34a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c34e:	6878      	ldr	r0, [r7, #4]
 800c350:	f000 f82f 	bl	800c3b2 <UART_WaitOnFlagUntilTimeout>
 800c354:	4603      	mov	r3, r0
 800c356:	2b00      	cmp	r3, #0
 800c358:	d001      	beq.n	800c35e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c35a:	2303      	movs	r3, #3
 800c35c:	e025      	b.n	800c3aa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	f003 0304 	and.w	r3, r3, #4
 800c368:	2b04      	cmp	r3, #4
 800c36a:	d10e      	bne.n	800c38a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c36c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c370:	9300      	str	r3, [sp, #0]
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	2200      	movs	r2, #0
 800c376:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c37a:	6878      	ldr	r0, [r7, #4]
 800c37c:	f000 f819 	bl	800c3b2 <UART_WaitOnFlagUntilTimeout>
 800c380:	4603      	mov	r3, r0
 800c382:	2b00      	cmp	r3, #0
 800c384:	d001      	beq.n	800c38a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c386:	2303      	movs	r3, #3
 800c388:	e00f      	b.n	800c3aa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	2220      	movs	r2, #32
 800c38e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2220      	movs	r2, #32
 800c396:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	2200      	movs	r2, #0
 800c39e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c3a8:	2300      	movs	r3, #0
}
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	3710      	adds	r7, #16
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	bd80      	pop	{r7, pc}

0800c3b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c3b2:	b580      	push	{r7, lr}
 800c3b4:	b09c      	sub	sp, #112	; 0x70
 800c3b6:	af00      	add	r7, sp, #0
 800c3b8:	60f8      	str	r0, [r7, #12]
 800c3ba:	60b9      	str	r1, [r7, #8]
 800c3bc:	603b      	str	r3, [r7, #0]
 800c3be:	4613      	mov	r3, r2
 800c3c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c3c2:	e0a9      	b.n	800c518 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c3c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c3c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3ca:	f000 80a5 	beq.w	800c518 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c3ce:	f7f7 fd0f 	bl	8003df0 <HAL_GetTick>
 800c3d2:	4602      	mov	r2, r0
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	1ad3      	subs	r3, r2, r3
 800c3d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c3da:	429a      	cmp	r2, r3
 800c3dc:	d302      	bcc.n	800c3e4 <UART_WaitOnFlagUntilTimeout+0x32>
 800c3de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d140      	bne.n	800c466 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c3ec:	e853 3f00 	ldrex	r3, [r3]
 800c3f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c3f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c3f8:	667b      	str	r3, [r7, #100]	; 0x64
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	461a      	mov	r2, r3
 800c400:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c402:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c404:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c406:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c408:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c40a:	e841 2300 	strex	r3, r2, [r1]
 800c40e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c410:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c412:	2b00      	cmp	r3, #0
 800c414:	d1e6      	bne.n	800c3e4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	3308      	adds	r3, #8
 800c41c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c41e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c420:	e853 3f00 	ldrex	r3, [r3]
 800c424:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c428:	f023 0301 	bic.w	r3, r3, #1
 800c42c:	663b      	str	r3, [r7, #96]	; 0x60
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	3308      	adds	r3, #8
 800c434:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c436:	64ba      	str	r2, [r7, #72]	; 0x48
 800c438:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c43a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c43c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c43e:	e841 2300 	strex	r3, r2, [r1]
 800c442:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c446:	2b00      	cmp	r3, #0
 800c448:	d1e5      	bne.n	800c416 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	2220      	movs	r2, #32
 800c44e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	2220      	movs	r2, #32
 800c456:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	2200      	movs	r2, #0
 800c45e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c462:	2303      	movs	r3, #3
 800c464:	e069      	b.n	800c53a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	f003 0304 	and.w	r3, r3, #4
 800c470:	2b00      	cmp	r3, #0
 800c472:	d051      	beq.n	800c518 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	69db      	ldr	r3, [r3, #28]
 800c47a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c47e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c482:	d149      	bne.n	800c518 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c48c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c496:	e853 3f00 	ldrex	r3, [r3]
 800c49a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c49e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c4a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	461a      	mov	r2, r3
 800c4aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c4ac:	637b      	str	r3, [r7, #52]	; 0x34
 800c4ae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c4b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c4b4:	e841 2300 	strex	r3, r2, [r1]
 800c4b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c4ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d1e6      	bne.n	800c48e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	3308      	adds	r3, #8
 800c4c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4c8:	697b      	ldr	r3, [r7, #20]
 800c4ca:	e853 3f00 	ldrex	r3, [r3]
 800c4ce:	613b      	str	r3, [r7, #16]
   return(result);
 800c4d0:	693b      	ldr	r3, [r7, #16]
 800c4d2:	f023 0301 	bic.w	r3, r3, #1
 800c4d6:	66bb      	str	r3, [r7, #104]	; 0x68
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	3308      	adds	r3, #8
 800c4de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c4e0:	623a      	str	r2, [r7, #32]
 800c4e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4e4:	69f9      	ldr	r1, [r7, #28]
 800c4e6:	6a3a      	ldr	r2, [r7, #32]
 800c4e8:	e841 2300 	strex	r3, r2, [r1]
 800c4ec:	61bb      	str	r3, [r7, #24]
   return(result);
 800c4ee:	69bb      	ldr	r3, [r7, #24]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d1e5      	bne.n	800c4c0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	2220      	movs	r2, #32
 800c4f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	2220      	movs	r2, #32
 800c500:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	2220      	movs	r2, #32
 800c508:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	2200      	movs	r2, #0
 800c510:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c514:	2303      	movs	r3, #3
 800c516:	e010      	b.n	800c53a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	69da      	ldr	r2, [r3, #28]
 800c51e:	68bb      	ldr	r3, [r7, #8]
 800c520:	4013      	ands	r3, r2
 800c522:	68ba      	ldr	r2, [r7, #8]
 800c524:	429a      	cmp	r2, r3
 800c526:	bf0c      	ite	eq
 800c528:	2301      	moveq	r3, #1
 800c52a:	2300      	movne	r3, #0
 800c52c:	b2db      	uxtb	r3, r3
 800c52e:	461a      	mov	r2, r3
 800c530:	79fb      	ldrb	r3, [r7, #7]
 800c532:	429a      	cmp	r2, r3
 800c534:	f43f af46 	beq.w	800c3c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c538:	2300      	movs	r3, #0
}
 800c53a:	4618      	mov	r0, r3
 800c53c:	3770      	adds	r7, #112	; 0x70
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}

0800c542 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c542:	b480      	push	{r7}
 800c544:	b08f      	sub	sp, #60	; 0x3c
 800c546:	af00      	add	r7, sp, #0
 800c548:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c550:	6a3b      	ldr	r3, [r7, #32]
 800c552:	e853 3f00 	ldrex	r3, [r3]
 800c556:	61fb      	str	r3, [r7, #28]
   return(result);
 800c558:	69fb      	ldr	r3, [r7, #28]
 800c55a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c55e:	637b      	str	r3, [r7, #52]	; 0x34
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	461a      	mov	r2, r3
 800c566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c568:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c56a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c56c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c56e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c570:	e841 2300 	strex	r3, r2, [r1]
 800c574:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d1e6      	bne.n	800c54a <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	3308      	adds	r3, #8
 800c582:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	e853 3f00 	ldrex	r3, [r3]
 800c58a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c58c:	68bb      	ldr	r3, [r7, #8]
 800c58e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800c592:	633b      	str	r3, [r7, #48]	; 0x30
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	3308      	adds	r3, #8
 800c59a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c59c:	61ba      	str	r2, [r7, #24]
 800c59e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5a0:	6979      	ldr	r1, [r7, #20]
 800c5a2:	69ba      	ldr	r2, [r7, #24]
 800c5a4:	e841 2300 	strex	r3, r2, [r1]
 800c5a8:	613b      	str	r3, [r7, #16]
   return(result);
 800c5aa:	693b      	ldr	r3, [r7, #16]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d1e5      	bne.n	800c57c <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2220      	movs	r2, #32
 800c5b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800c5b8:	bf00      	nop
 800c5ba:	373c      	adds	r7, #60	; 0x3c
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c2:	4770      	bx	lr

0800c5c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c5c4:	b480      	push	{r7}
 800c5c6:	b095      	sub	sp, #84	; 0x54
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5d4:	e853 3f00 	ldrex	r3, [r3]
 800c5d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c5e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	461a      	mov	r2, r3
 800c5e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5ea:	643b      	str	r3, [r7, #64]	; 0x40
 800c5ec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c5f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c5f2:	e841 2300 	strex	r3, r2, [r1]
 800c5f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c5f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d1e6      	bne.n	800c5cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	3308      	adds	r3, #8
 800c604:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c606:	6a3b      	ldr	r3, [r7, #32]
 800c608:	e853 3f00 	ldrex	r3, [r3]
 800c60c:	61fb      	str	r3, [r7, #28]
   return(result);
 800c60e:	69fb      	ldr	r3, [r7, #28]
 800c610:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c614:	f023 0301 	bic.w	r3, r3, #1
 800c618:	64bb      	str	r3, [r7, #72]	; 0x48
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	3308      	adds	r3, #8
 800c620:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c622:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c624:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c626:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c628:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c62a:	e841 2300 	strex	r3, r2, [r1]
 800c62e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c632:	2b00      	cmp	r3, #0
 800c634:	d1e3      	bne.n	800c5fe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c63a:	2b01      	cmp	r3, #1
 800c63c:	d118      	bne.n	800c670 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	e853 3f00 	ldrex	r3, [r3]
 800c64a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c64c:	68bb      	ldr	r3, [r7, #8]
 800c64e:	f023 0310 	bic.w	r3, r3, #16
 800c652:	647b      	str	r3, [r7, #68]	; 0x44
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	461a      	mov	r2, r3
 800c65a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c65c:	61bb      	str	r3, [r7, #24]
 800c65e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c660:	6979      	ldr	r1, [r7, #20]
 800c662:	69ba      	ldr	r2, [r7, #24]
 800c664:	e841 2300 	strex	r3, r2, [r1]
 800c668:	613b      	str	r3, [r7, #16]
   return(result);
 800c66a:	693b      	ldr	r3, [r7, #16]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d1e6      	bne.n	800c63e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2220      	movs	r2, #32
 800c674:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2200      	movs	r2, #0
 800c67c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	2200      	movs	r2, #0
 800c682:	671a      	str	r2, [r3, #112]	; 0x70
}
 800c684:	bf00      	nop
 800c686:	3754      	adds	r7, #84	; 0x54
 800c688:	46bd      	mov	sp, r7
 800c68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68e:	4770      	bx	lr

0800c690 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b090      	sub	sp, #64	; 0x40
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c69c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	f003 0320 	and.w	r3, r3, #32
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d137      	bne.n	800c71c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800c6ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c6b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	3308      	adds	r3, #8
 800c6ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6be:	e853 3f00 	ldrex	r3, [r3]
 800c6c2:	623b      	str	r3, [r7, #32]
   return(result);
 800c6c4:	6a3b      	ldr	r3, [r7, #32]
 800c6c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c6ca:	63bb      	str	r3, [r7, #56]	; 0x38
 800c6cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	3308      	adds	r3, #8
 800c6d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c6d4:	633a      	str	r2, [r7, #48]	; 0x30
 800c6d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c6da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6dc:	e841 2300 	strex	r3, r2, [r1]
 800c6e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c6e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d1e5      	bne.n	800c6b4 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c6e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6ee:	693b      	ldr	r3, [r7, #16]
 800c6f0:	e853 3f00 	ldrex	r3, [r3]
 800c6f4:	60fb      	str	r3, [r7, #12]
   return(result);
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6fc:	637b      	str	r3, [r7, #52]	; 0x34
 800c6fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	461a      	mov	r2, r3
 800c704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c706:	61fb      	str	r3, [r7, #28]
 800c708:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c70a:	69b9      	ldr	r1, [r7, #24]
 800c70c:	69fa      	ldr	r2, [r7, #28]
 800c70e:	e841 2300 	strex	r3, r2, [r1]
 800c712:	617b      	str	r3, [r7, #20]
   return(result);
 800c714:	697b      	ldr	r3, [r7, #20]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d1e6      	bne.n	800c6e8 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c71a:	e002      	b.n	800c722 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800c71c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c71e:	f7ff fa65 	bl	800bbec <HAL_UART_TxCpltCallback>
}
 800c722:	bf00      	nop
 800c724:	3740      	adds	r7, #64	; 0x40
 800c726:	46bd      	mov	sp, r7
 800c728:	bd80      	pop	{r7, pc}

0800c72a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c72a:	b580      	push	{r7, lr}
 800c72c:	b084      	sub	sp, #16
 800c72e:	af00      	add	r7, sp, #0
 800c730:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c736:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c738:	68f8      	ldr	r0, [r7, #12]
 800c73a:	f7ff fa61 	bl	800bc00 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c73e:	bf00      	nop
 800c740:	3710      	adds	r7, #16
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}

0800c746 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c746:	b580      	push	{r7, lr}
 800c748:	b086      	sub	sp, #24
 800c74a:	af00      	add	r7, sp, #0
 800c74c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c752:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c754:	697b      	ldr	r3, [r7, #20]
 800c756:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c75a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c75c:	697b      	ldr	r3, [r7, #20]
 800c75e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c762:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c764:	697b      	ldr	r3, [r7, #20]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	689b      	ldr	r3, [r3, #8]
 800c76a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c76e:	2b80      	cmp	r3, #128	; 0x80
 800c770:	d109      	bne.n	800c786 <UART_DMAError+0x40>
 800c772:	693b      	ldr	r3, [r7, #16]
 800c774:	2b21      	cmp	r3, #33	; 0x21
 800c776:	d106      	bne.n	800c786 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c778:	697b      	ldr	r3, [r7, #20]
 800c77a:	2200      	movs	r2, #0
 800c77c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800c780:	6978      	ldr	r0, [r7, #20]
 800c782:	f7ff fede 	bl	800c542 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c786:	697b      	ldr	r3, [r7, #20]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	689b      	ldr	r3, [r3, #8]
 800c78c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c790:	2b40      	cmp	r3, #64	; 0x40
 800c792:	d109      	bne.n	800c7a8 <UART_DMAError+0x62>
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	2b22      	cmp	r3, #34	; 0x22
 800c798:	d106      	bne.n	800c7a8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c79a:	697b      	ldr	r3, [r7, #20]
 800c79c:	2200      	movs	r2, #0
 800c79e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800c7a2:	6978      	ldr	r0, [r7, #20]
 800c7a4:	f7ff ff0e 	bl	800c5c4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c7a8:	697b      	ldr	r3, [r7, #20]
 800c7aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c7ae:	f043 0210 	orr.w	r2, r3, #16
 800c7b2:	697b      	ldr	r3, [r7, #20]
 800c7b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c7b8:	6978      	ldr	r0, [r7, #20]
 800c7ba:	f7ff fa2b 	bl	800bc14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c7be:	bf00      	nop
 800c7c0:	3718      	adds	r7, #24
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}

0800c7c6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c7c6:	b580      	push	{r7, lr}
 800c7c8:	b084      	sub	sp, #16
 800c7ca:	af00      	add	r7, sp, #0
 800c7cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	2200      	movs	r2, #0
 800c7e0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c7e4:	68f8      	ldr	r0, [r7, #12]
 800c7e6:	f7ff fa15 	bl	800bc14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c7ea:	bf00      	nop
 800c7ec:	3710      	adds	r7, #16
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	bd80      	pop	{r7, pc}

0800c7f2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c7f2:	b580      	push	{r7, lr}
 800c7f4:	b088      	sub	sp, #32
 800c7f6:	af00      	add	r7, sp, #0
 800c7f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	e853 3f00 	ldrex	r3, [r3]
 800c806:	60bb      	str	r3, [r7, #8]
   return(result);
 800c808:	68bb      	ldr	r3, [r7, #8]
 800c80a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c80e:	61fb      	str	r3, [r7, #28]
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	461a      	mov	r2, r3
 800c816:	69fb      	ldr	r3, [r7, #28]
 800c818:	61bb      	str	r3, [r7, #24]
 800c81a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c81c:	6979      	ldr	r1, [r7, #20]
 800c81e:	69ba      	ldr	r2, [r7, #24]
 800c820:	e841 2300 	strex	r3, r2, [r1]
 800c824:	613b      	str	r3, [r7, #16]
   return(result);
 800c826:	693b      	ldr	r3, [r7, #16]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d1e6      	bne.n	800c7fa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2220      	movs	r2, #32
 800c830:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2200      	movs	r2, #0
 800c838:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c83a:	6878      	ldr	r0, [r7, #4]
 800c83c:	f7ff f9d6 	bl	800bbec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c840:	bf00      	nop
 800c842:	3720      	adds	r7, #32
 800c844:	46bd      	mov	sp, r7
 800c846:	bd80      	pop	{r7, pc}

0800c848 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c848:	b480      	push	{r7}
 800c84a:	b083      	sub	sp, #12
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c850:	bf00      	nop
 800c852:	370c      	adds	r7, #12
 800c854:	46bd      	mov	sp, r7
 800c856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85a:	4770      	bx	lr

0800c85c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c85c:	b480      	push	{r7}
 800c85e:	b083      	sub	sp, #12
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c864:	bf00      	nop
 800c866:	370c      	adds	r7, #12
 800c868:	46bd      	mov	sp, r7
 800c86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86e:	4770      	bx	lr

0800c870 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c870:	b480      	push	{r7}
 800c872:	b083      	sub	sp, #12
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c878:	bf00      	nop
 800c87a:	370c      	adds	r7, #12
 800c87c:	46bd      	mov	sp, r7
 800c87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c882:	4770      	bx	lr

0800c884 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c884:	b480      	push	{r7}
 800c886:	b085      	sub	sp, #20
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c892:	2b01      	cmp	r3, #1
 800c894:	d101      	bne.n	800c89a <HAL_UARTEx_DisableFifoMode+0x16>
 800c896:	2302      	movs	r3, #2
 800c898:	e027      	b.n	800c8ea <HAL_UARTEx_DisableFifoMode+0x66>
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2201      	movs	r2, #1
 800c89e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2224      	movs	r2, #36	; 0x24
 800c8a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	681a      	ldr	r2, [r3, #0]
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	f022 0201 	bic.w	r2, r2, #1
 800c8c0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c8c8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	68fa      	ldr	r2, [r7, #12]
 800c8d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	2220      	movs	r2, #32
 800c8dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c8e8:	2300      	movs	r3, #0
}
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	3714      	adds	r7, #20
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f4:	4770      	bx	lr

0800c8f6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c8f6:	b580      	push	{r7, lr}
 800c8f8:	b084      	sub	sp, #16
 800c8fa:	af00      	add	r7, sp, #0
 800c8fc:	6078      	str	r0, [r7, #4]
 800c8fe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c906:	2b01      	cmp	r3, #1
 800c908:	d101      	bne.n	800c90e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c90a:	2302      	movs	r3, #2
 800c90c:	e02d      	b.n	800c96a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	2201      	movs	r2, #1
 800c912:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	2224      	movs	r2, #36	; 0x24
 800c91a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	681a      	ldr	r2, [r3, #0]
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	f022 0201 	bic.w	r2, r2, #1
 800c934:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	689b      	ldr	r3, [r3, #8]
 800c93c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	683a      	ldr	r2, [r7, #0]
 800c946:	430a      	orrs	r2, r1
 800c948:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c94a:	6878      	ldr	r0, [r7, #4]
 800c94c:	f000 f850 	bl	800c9f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	68fa      	ldr	r2, [r7, #12]
 800c956:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2220      	movs	r2, #32
 800c95c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	2200      	movs	r2, #0
 800c964:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c968:	2300      	movs	r3, #0
}
 800c96a:	4618      	mov	r0, r3
 800c96c:	3710      	adds	r7, #16
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}

0800c972 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c972:	b580      	push	{r7, lr}
 800c974:	b084      	sub	sp, #16
 800c976:	af00      	add	r7, sp, #0
 800c978:	6078      	str	r0, [r7, #4]
 800c97a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c982:	2b01      	cmp	r3, #1
 800c984:	d101      	bne.n	800c98a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c986:	2302      	movs	r3, #2
 800c988:	e02d      	b.n	800c9e6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	2201      	movs	r2, #1
 800c98e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	2224      	movs	r2, #36	; 0x24
 800c996:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	681a      	ldr	r2, [r3, #0]
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	f022 0201 	bic.w	r2, r2, #1
 800c9b0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	689b      	ldr	r3, [r3, #8]
 800c9b8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	683a      	ldr	r2, [r7, #0]
 800c9c2:	430a      	orrs	r2, r1
 800c9c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c9c6:	6878      	ldr	r0, [r7, #4]
 800c9c8:	f000 f812 	bl	800c9f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	68fa      	ldr	r2, [r7, #12]
 800c9d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	2220      	movs	r2, #32
 800c9d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2200      	movs	r2, #0
 800c9e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c9e4:	2300      	movs	r3, #0
}
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	3710      	adds	r7, #16
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd80      	pop	{r7, pc}
	...

0800c9f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c9f0:	b480      	push	{r7}
 800c9f2:	b085      	sub	sp, #20
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d108      	bne.n	800ca12 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2201      	movs	r2, #1
 800ca04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	2201      	movs	r2, #1
 800ca0c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ca10:	e031      	b.n	800ca76 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ca12:	2308      	movs	r3, #8
 800ca14:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ca16:	2308      	movs	r3, #8
 800ca18:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	689b      	ldr	r3, [r3, #8]
 800ca20:	0e5b      	lsrs	r3, r3, #25
 800ca22:	b2db      	uxtb	r3, r3
 800ca24:	f003 0307 	and.w	r3, r3, #7
 800ca28:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	689b      	ldr	r3, [r3, #8]
 800ca30:	0f5b      	lsrs	r3, r3, #29
 800ca32:	b2db      	uxtb	r3, r3
 800ca34:	f003 0307 	and.w	r3, r3, #7
 800ca38:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ca3a:	7bbb      	ldrb	r3, [r7, #14]
 800ca3c:	7b3a      	ldrb	r2, [r7, #12]
 800ca3e:	4911      	ldr	r1, [pc, #68]	; (800ca84 <UARTEx_SetNbDataToProcess+0x94>)
 800ca40:	5c8a      	ldrb	r2, [r1, r2]
 800ca42:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ca46:	7b3a      	ldrb	r2, [r7, #12]
 800ca48:	490f      	ldr	r1, [pc, #60]	; (800ca88 <UARTEx_SetNbDataToProcess+0x98>)
 800ca4a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ca4c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ca50:	b29a      	uxth	r2, r3
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ca58:	7bfb      	ldrb	r3, [r7, #15]
 800ca5a:	7b7a      	ldrb	r2, [r7, #13]
 800ca5c:	4909      	ldr	r1, [pc, #36]	; (800ca84 <UARTEx_SetNbDataToProcess+0x94>)
 800ca5e:	5c8a      	ldrb	r2, [r1, r2]
 800ca60:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ca64:	7b7a      	ldrb	r2, [r7, #13]
 800ca66:	4908      	ldr	r1, [pc, #32]	; (800ca88 <UARTEx_SetNbDataToProcess+0x98>)
 800ca68:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ca6a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ca6e:	b29a      	uxth	r2, r3
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ca76:	bf00      	nop
 800ca78:	3714      	adds	r7, #20
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca80:	4770      	bx	lr
 800ca82:	bf00      	nop
 800ca84:	0800d4c4 	.word	0x0800d4c4
 800ca88:	0800d4cc 	.word	0x0800d4cc

0800ca8c <_vsniprintf_r>:
 800ca8c:	b530      	push	{r4, r5, lr}
 800ca8e:	4614      	mov	r4, r2
 800ca90:	2c00      	cmp	r4, #0
 800ca92:	b09b      	sub	sp, #108	; 0x6c
 800ca94:	4605      	mov	r5, r0
 800ca96:	461a      	mov	r2, r3
 800ca98:	da05      	bge.n	800caa6 <_vsniprintf_r+0x1a>
 800ca9a:	238b      	movs	r3, #139	; 0x8b
 800ca9c:	6003      	str	r3, [r0, #0]
 800ca9e:	f04f 30ff 	mov.w	r0, #4294967295
 800caa2:	b01b      	add	sp, #108	; 0x6c
 800caa4:	bd30      	pop	{r4, r5, pc}
 800caa6:	f44f 7302 	mov.w	r3, #520	; 0x208
 800caaa:	f8ad 300c 	strh.w	r3, [sp, #12]
 800caae:	bf14      	ite	ne
 800cab0:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cab4:	4623      	moveq	r3, r4
 800cab6:	9302      	str	r3, [sp, #8]
 800cab8:	9305      	str	r3, [sp, #20]
 800caba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cabe:	9100      	str	r1, [sp, #0]
 800cac0:	9104      	str	r1, [sp, #16]
 800cac2:	f8ad 300e 	strh.w	r3, [sp, #14]
 800cac6:	4669      	mov	r1, sp
 800cac8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800caca:	f000 f9ad 	bl	800ce28 <_svfiprintf_r>
 800cace:	1c43      	adds	r3, r0, #1
 800cad0:	bfbc      	itt	lt
 800cad2:	238b      	movlt	r3, #139	; 0x8b
 800cad4:	602b      	strlt	r3, [r5, #0]
 800cad6:	2c00      	cmp	r4, #0
 800cad8:	d0e3      	beq.n	800caa2 <_vsniprintf_r+0x16>
 800cada:	9b00      	ldr	r3, [sp, #0]
 800cadc:	2200      	movs	r2, #0
 800cade:	701a      	strb	r2, [r3, #0]
 800cae0:	e7df      	b.n	800caa2 <_vsniprintf_r+0x16>
	...

0800cae4 <vsniprintf>:
 800cae4:	b507      	push	{r0, r1, r2, lr}
 800cae6:	9300      	str	r3, [sp, #0]
 800cae8:	4613      	mov	r3, r2
 800caea:	460a      	mov	r2, r1
 800caec:	4601      	mov	r1, r0
 800caee:	4803      	ldr	r0, [pc, #12]	; (800cafc <vsniprintf+0x18>)
 800caf0:	6800      	ldr	r0, [r0, #0]
 800caf2:	f7ff ffcb 	bl	800ca8c <_vsniprintf_r>
 800caf6:	b003      	add	sp, #12
 800caf8:	f85d fb04 	ldr.w	pc, [sp], #4
 800cafc:	20000198 	.word	0x20000198

0800cb00 <memset>:
 800cb00:	4402      	add	r2, r0
 800cb02:	4603      	mov	r3, r0
 800cb04:	4293      	cmp	r3, r2
 800cb06:	d100      	bne.n	800cb0a <memset+0xa>
 800cb08:	4770      	bx	lr
 800cb0a:	f803 1b01 	strb.w	r1, [r3], #1
 800cb0e:	e7f9      	b.n	800cb04 <memset+0x4>

0800cb10 <__errno>:
 800cb10:	4b01      	ldr	r3, [pc, #4]	; (800cb18 <__errno+0x8>)
 800cb12:	6818      	ldr	r0, [r3, #0]
 800cb14:	4770      	bx	lr
 800cb16:	bf00      	nop
 800cb18:	20000198 	.word	0x20000198

0800cb1c <__libc_init_array>:
 800cb1c:	b570      	push	{r4, r5, r6, lr}
 800cb1e:	4d0d      	ldr	r5, [pc, #52]	; (800cb54 <__libc_init_array+0x38>)
 800cb20:	4c0d      	ldr	r4, [pc, #52]	; (800cb58 <__libc_init_array+0x3c>)
 800cb22:	1b64      	subs	r4, r4, r5
 800cb24:	10a4      	asrs	r4, r4, #2
 800cb26:	2600      	movs	r6, #0
 800cb28:	42a6      	cmp	r6, r4
 800cb2a:	d109      	bne.n	800cb40 <__libc_init_array+0x24>
 800cb2c:	4d0b      	ldr	r5, [pc, #44]	; (800cb5c <__libc_init_array+0x40>)
 800cb2e:	4c0c      	ldr	r4, [pc, #48]	; (800cb60 <__libc_init_array+0x44>)
 800cb30:	f000 fc6a 	bl	800d408 <_init>
 800cb34:	1b64      	subs	r4, r4, r5
 800cb36:	10a4      	asrs	r4, r4, #2
 800cb38:	2600      	movs	r6, #0
 800cb3a:	42a6      	cmp	r6, r4
 800cb3c:	d105      	bne.n	800cb4a <__libc_init_array+0x2e>
 800cb3e:	bd70      	pop	{r4, r5, r6, pc}
 800cb40:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb44:	4798      	blx	r3
 800cb46:	3601      	adds	r6, #1
 800cb48:	e7ee      	b.n	800cb28 <__libc_init_array+0xc>
 800cb4a:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb4e:	4798      	blx	r3
 800cb50:	3601      	adds	r6, #1
 800cb52:	e7f2      	b.n	800cb3a <__libc_init_array+0x1e>
 800cb54:	0800d510 	.word	0x0800d510
 800cb58:	0800d510 	.word	0x0800d510
 800cb5c:	0800d510 	.word	0x0800d510
 800cb60:	0800d514 	.word	0x0800d514

0800cb64 <__retarget_lock_acquire_recursive>:
 800cb64:	4770      	bx	lr

0800cb66 <__retarget_lock_release_recursive>:
 800cb66:	4770      	bx	lr

0800cb68 <memcpy>:
 800cb68:	440a      	add	r2, r1
 800cb6a:	4291      	cmp	r1, r2
 800cb6c:	f100 33ff 	add.w	r3, r0, #4294967295
 800cb70:	d100      	bne.n	800cb74 <memcpy+0xc>
 800cb72:	4770      	bx	lr
 800cb74:	b510      	push	{r4, lr}
 800cb76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb7e:	4291      	cmp	r1, r2
 800cb80:	d1f9      	bne.n	800cb76 <memcpy+0xe>
 800cb82:	bd10      	pop	{r4, pc}

0800cb84 <_free_r>:
 800cb84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb86:	2900      	cmp	r1, #0
 800cb88:	d044      	beq.n	800cc14 <_free_r+0x90>
 800cb8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb8e:	9001      	str	r0, [sp, #4]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	f1a1 0404 	sub.w	r4, r1, #4
 800cb96:	bfb8      	it	lt
 800cb98:	18e4      	addlt	r4, r4, r3
 800cb9a:	f000 f8df 	bl	800cd5c <__malloc_lock>
 800cb9e:	4a1e      	ldr	r2, [pc, #120]	; (800cc18 <_free_r+0x94>)
 800cba0:	9801      	ldr	r0, [sp, #4]
 800cba2:	6813      	ldr	r3, [r2, #0]
 800cba4:	b933      	cbnz	r3, 800cbb4 <_free_r+0x30>
 800cba6:	6063      	str	r3, [r4, #4]
 800cba8:	6014      	str	r4, [r2, #0]
 800cbaa:	b003      	add	sp, #12
 800cbac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cbb0:	f000 b8da 	b.w	800cd68 <__malloc_unlock>
 800cbb4:	42a3      	cmp	r3, r4
 800cbb6:	d908      	bls.n	800cbca <_free_r+0x46>
 800cbb8:	6825      	ldr	r5, [r4, #0]
 800cbba:	1961      	adds	r1, r4, r5
 800cbbc:	428b      	cmp	r3, r1
 800cbbe:	bf01      	itttt	eq
 800cbc0:	6819      	ldreq	r1, [r3, #0]
 800cbc2:	685b      	ldreq	r3, [r3, #4]
 800cbc4:	1949      	addeq	r1, r1, r5
 800cbc6:	6021      	streq	r1, [r4, #0]
 800cbc8:	e7ed      	b.n	800cba6 <_free_r+0x22>
 800cbca:	461a      	mov	r2, r3
 800cbcc:	685b      	ldr	r3, [r3, #4]
 800cbce:	b10b      	cbz	r3, 800cbd4 <_free_r+0x50>
 800cbd0:	42a3      	cmp	r3, r4
 800cbd2:	d9fa      	bls.n	800cbca <_free_r+0x46>
 800cbd4:	6811      	ldr	r1, [r2, #0]
 800cbd6:	1855      	adds	r5, r2, r1
 800cbd8:	42a5      	cmp	r5, r4
 800cbda:	d10b      	bne.n	800cbf4 <_free_r+0x70>
 800cbdc:	6824      	ldr	r4, [r4, #0]
 800cbde:	4421      	add	r1, r4
 800cbe0:	1854      	adds	r4, r2, r1
 800cbe2:	42a3      	cmp	r3, r4
 800cbe4:	6011      	str	r1, [r2, #0]
 800cbe6:	d1e0      	bne.n	800cbaa <_free_r+0x26>
 800cbe8:	681c      	ldr	r4, [r3, #0]
 800cbea:	685b      	ldr	r3, [r3, #4]
 800cbec:	6053      	str	r3, [r2, #4]
 800cbee:	440c      	add	r4, r1
 800cbf0:	6014      	str	r4, [r2, #0]
 800cbf2:	e7da      	b.n	800cbaa <_free_r+0x26>
 800cbf4:	d902      	bls.n	800cbfc <_free_r+0x78>
 800cbf6:	230c      	movs	r3, #12
 800cbf8:	6003      	str	r3, [r0, #0]
 800cbfa:	e7d6      	b.n	800cbaa <_free_r+0x26>
 800cbfc:	6825      	ldr	r5, [r4, #0]
 800cbfe:	1961      	adds	r1, r4, r5
 800cc00:	428b      	cmp	r3, r1
 800cc02:	bf04      	itt	eq
 800cc04:	6819      	ldreq	r1, [r3, #0]
 800cc06:	685b      	ldreq	r3, [r3, #4]
 800cc08:	6063      	str	r3, [r4, #4]
 800cc0a:	bf04      	itt	eq
 800cc0c:	1949      	addeq	r1, r1, r5
 800cc0e:	6021      	streq	r1, [r4, #0]
 800cc10:	6054      	str	r4, [r2, #4]
 800cc12:	e7ca      	b.n	800cbaa <_free_r+0x26>
 800cc14:	b003      	add	sp, #12
 800cc16:	bd30      	pop	{r4, r5, pc}
 800cc18:	20000d98 	.word	0x20000d98

0800cc1c <sbrk_aligned>:
 800cc1c:	b570      	push	{r4, r5, r6, lr}
 800cc1e:	4e0e      	ldr	r6, [pc, #56]	; (800cc58 <sbrk_aligned+0x3c>)
 800cc20:	460c      	mov	r4, r1
 800cc22:	6831      	ldr	r1, [r6, #0]
 800cc24:	4605      	mov	r5, r0
 800cc26:	b911      	cbnz	r1, 800cc2e <sbrk_aligned+0x12>
 800cc28:	f000 fba6 	bl	800d378 <_sbrk_r>
 800cc2c:	6030      	str	r0, [r6, #0]
 800cc2e:	4621      	mov	r1, r4
 800cc30:	4628      	mov	r0, r5
 800cc32:	f000 fba1 	bl	800d378 <_sbrk_r>
 800cc36:	1c43      	adds	r3, r0, #1
 800cc38:	d00a      	beq.n	800cc50 <sbrk_aligned+0x34>
 800cc3a:	1cc4      	adds	r4, r0, #3
 800cc3c:	f024 0403 	bic.w	r4, r4, #3
 800cc40:	42a0      	cmp	r0, r4
 800cc42:	d007      	beq.n	800cc54 <sbrk_aligned+0x38>
 800cc44:	1a21      	subs	r1, r4, r0
 800cc46:	4628      	mov	r0, r5
 800cc48:	f000 fb96 	bl	800d378 <_sbrk_r>
 800cc4c:	3001      	adds	r0, #1
 800cc4e:	d101      	bne.n	800cc54 <sbrk_aligned+0x38>
 800cc50:	f04f 34ff 	mov.w	r4, #4294967295
 800cc54:	4620      	mov	r0, r4
 800cc56:	bd70      	pop	{r4, r5, r6, pc}
 800cc58:	20000d9c 	.word	0x20000d9c

0800cc5c <_malloc_r>:
 800cc5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc60:	1ccd      	adds	r5, r1, #3
 800cc62:	f025 0503 	bic.w	r5, r5, #3
 800cc66:	3508      	adds	r5, #8
 800cc68:	2d0c      	cmp	r5, #12
 800cc6a:	bf38      	it	cc
 800cc6c:	250c      	movcc	r5, #12
 800cc6e:	2d00      	cmp	r5, #0
 800cc70:	4607      	mov	r7, r0
 800cc72:	db01      	blt.n	800cc78 <_malloc_r+0x1c>
 800cc74:	42a9      	cmp	r1, r5
 800cc76:	d905      	bls.n	800cc84 <_malloc_r+0x28>
 800cc78:	230c      	movs	r3, #12
 800cc7a:	603b      	str	r3, [r7, #0]
 800cc7c:	2600      	movs	r6, #0
 800cc7e:	4630      	mov	r0, r6
 800cc80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc84:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800cd58 <_malloc_r+0xfc>
 800cc88:	f000 f868 	bl	800cd5c <__malloc_lock>
 800cc8c:	f8d8 3000 	ldr.w	r3, [r8]
 800cc90:	461c      	mov	r4, r3
 800cc92:	bb5c      	cbnz	r4, 800ccec <_malloc_r+0x90>
 800cc94:	4629      	mov	r1, r5
 800cc96:	4638      	mov	r0, r7
 800cc98:	f7ff ffc0 	bl	800cc1c <sbrk_aligned>
 800cc9c:	1c43      	adds	r3, r0, #1
 800cc9e:	4604      	mov	r4, r0
 800cca0:	d155      	bne.n	800cd4e <_malloc_r+0xf2>
 800cca2:	f8d8 4000 	ldr.w	r4, [r8]
 800cca6:	4626      	mov	r6, r4
 800cca8:	2e00      	cmp	r6, #0
 800ccaa:	d145      	bne.n	800cd38 <_malloc_r+0xdc>
 800ccac:	2c00      	cmp	r4, #0
 800ccae:	d048      	beq.n	800cd42 <_malloc_r+0xe6>
 800ccb0:	6823      	ldr	r3, [r4, #0]
 800ccb2:	4631      	mov	r1, r6
 800ccb4:	4638      	mov	r0, r7
 800ccb6:	eb04 0903 	add.w	r9, r4, r3
 800ccba:	f000 fb5d 	bl	800d378 <_sbrk_r>
 800ccbe:	4581      	cmp	r9, r0
 800ccc0:	d13f      	bne.n	800cd42 <_malloc_r+0xe6>
 800ccc2:	6821      	ldr	r1, [r4, #0]
 800ccc4:	1a6d      	subs	r5, r5, r1
 800ccc6:	4629      	mov	r1, r5
 800ccc8:	4638      	mov	r0, r7
 800ccca:	f7ff ffa7 	bl	800cc1c <sbrk_aligned>
 800ccce:	3001      	adds	r0, #1
 800ccd0:	d037      	beq.n	800cd42 <_malloc_r+0xe6>
 800ccd2:	6823      	ldr	r3, [r4, #0]
 800ccd4:	442b      	add	r3, r5
 800ccd6:	6023      	str	r3, [r4, #0]
 800ccd8:	f8d8 3000 	ldr.w	r3, [r8]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d038      	beq.n	800cd52 <_malloc_r+0xf6>
 800cce0:	685a      	ldr	r2, [r3, #4]
 800cce2:	42a2      	cmp	r2, r4
 800cce4:	d12b      	bne.n	800cd3e <_malloc_r+0xe2>
 800cce6:	2200      	movs	r2, #0
 800cce8:	605a      	str	r2, [r3, #4]
 800ccea:	e00f      	b.n	800cd0c <_malloc_r+0xb0>
 800ccec:	6822      	ldr	r2, [r4, #0]
 800ccee:	1b52      	subs	r2, r2, r5
 800ccf0:	d41f      	bmi.n	800cd32 <_malloc_r+0xd6>
 800ccf2:	2a0b      	cmp	r2, #11
 800ccf4:	d917      	bls.n	800cd26 <_malloc_r+0xca>
 800ccf6:	1961      	adds	r1, r4, r5
 800ccf8:	42a3      	cmp	r3, r4
 800ccfa:	6025      	str	r5, [r4, #0]
 800ccfc:	bf18      	it	ne
 800ccfe:	6059      	strne	r1, [r3, #4]
 800cd00:	6863      	ldr	r3, [r4, #4]
 800cd02:	bf08      	it	eq
 800cd04:	f8c8 1000 	streq.w	r1, [r8]
 800cd08:	5162      	str	r2, [r4, r5]
 800cd0a:	604b      	str	r3, [r1, #4]
 800cd0c:	4638      	mov	r0, r7
 800cd0e:	f104 060b 	add.w	r6, r4, #11
 800cd12:	f000 f829 	bl	800cd68 <__malloc_unlock>
 800cd16:	f026 0607 	bic.w	r6, r6, #7
 800cd1a:	1d23      	adds	r3, r4, #4
 800cd1c:	1af2      	subs	r2, r6, r3
 800cd1e:	d0ae      	beq.n	800cc7e <_malloc_r+0x22>
 800cd20:	1b9b      	subs	r3, r3, r6
 800cd22:	50a3      	str	r3, [r4, r2]
 800cd24:	e7ab      	b.n	800cc7e <_malloc_r+0x22>
 800cd26:	42a3      	cmp	r3, r4
 800cd28:	6862      	ldr	r2, [r4, #4]
 800cd2a:	d1dd      	bne.n	800cce8 <_malloc_r+0x8c>
 800cd2c:	f8c8 2000 	str.w	r2, [r8]
 800cd30:	e7ec      	b.n	800cd0c <_malloc_r+0xb0>
 800cd32:	4623      	mov	r3, r4
 800cd34:	6864      	ldr	r4, [r4, #4]
 800cd36:	e7ac      	b.n	800cc92 <_malloc_r+0x36>
 800cd38:	4634      	mov	r4, r6
 800cd3a:	6876      	ldr	r6, [r6, #4]
 800cd3c:	e7b4      	b.n	800cca8 <_malloc_r+0x4c>
 800cd3e:	4613      	mov	r3, r2
 800cd40:	e7cc      	b.n	800ccdc <_malloc_r+0x80>
 800cd42:	230c      	movs	r3, #12
 800cd44:	603b      	str	r3, [r7, #0]
 800cd46:	4638      	mov	r0, r7
 800cd48:	f000 f80e 	bl	800cd68 <__malloc_unlock>
 800cd4c:	e797      	b.n	800cc7e <_malloc_r+0x22>
 800cd4e:	6025      	str	r5, [r4, #0]
 800cd50:	e7dc      	b.n	800cd0c <_malloc_r+0xb0>
 800cd52:	605b      	str	r3, [r3, #4]
 800cd54:	deff      	udf	#255	; 0xff
 800cd56:	bf00      	nop
 800cd58:	20000d98 	.word	0x20000d98

0800cd5c <__malloc_lock>:
 800cd5c:	4801      	ldr	r0, [pc, #4]	; (800cd64 <__malloc_lock+0x8>)
 800cd5e:	f7ff bf01 	b.w	800cb64 <__retarget_lock_acquire_recursive>
 800cd62:	bf00      	nop
 800cd64:	20000d94 	.word	0x20000d94

0800cd68 <__malloc_unlock>:
 800cd68:	4801      	ldr	r0, [pc, #4]	; (800cd70 <__malloc_unlock+0x8>)
 800cd6a:	f7ff befc 	b.w	800cb66 <__retarget_lock_release_recursive>
 800cd6e:	bf00      	nop
 800cd70:	20000d94 	.word	0x20000d94

0800cd74 <__ssputs_r>:
 800cd74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd78:	688e      	ldr	r6, [r1, #8]
 800cd7a:	461f      	mov	r7, r3
 800cd7c:	42be      	cmp	r6, r7
 800cd7e:	680b      	ldr	r3, [r1, #0]
 800cd80:	4682      	mov	sl, r0
 800cd82:	460c      	mov	r4, r1
 800cd84:	4690      	mov	r8, r2
 800cd86:	d82c      	bhi.n	800cde2 <__ssputs_r+0x6e>
 800cd88:	898a      	ldrh	r2, [r1, #12]
 800cd8a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cd8e:	d026      	beq.n	800cdde <__ssputs_r+0x6a>
 800cd90:	6965      	ldr	r5, [r4, #20]
 800cd92:	6909      	ldr	r1, [r1, #16]
 800cd94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cd98:	eba3 0901 	sub.w	r9, r3, r1
 800cd9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cda0:	1c7b      	adds	r3, r7, #1
 800cda2:	444b      	add	r3, r9
 800cda4:	106d      	asrs	r5, r5, #1
 800cda6:	429d      	cmp	r5, r3
 800cda8:	bf38      	it	cc
 800cdaa:	461d      	movcc	r5, r3
 800cdac:	0553      	lsls	r3, r2, #21
 800cdae:	d527      	bpl.n	800ce00 <__ssputs_r+0x8c>
 800cdb0:	4629      	mov	r1, r5
 800cdb2:	f7ff ff53 	bl	800cc5c <_malloc_r>
 800cdb6:	4606      	mov	r6, r0
 800cdb8:	b360      	cbz	r0, 800ce14 <__ssputs_r+0xa0>
 800cdba:	6921      	ldr	r1, [r4, #16]
 800cdbc:	464a      	mov	r2, r9
 800cdbe:	f7ff fed3 	bl	800cb68 <memcpy>
 800cdc2:	89a3      	ldrh	r3, [r4, #12]
 800cdc4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cdc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdcc:	81a3      	strh	r3, [r4, #12]
 800cdce:	6126      	str	r6, [r4, #16]
 800cdd0:	6165      	str	r5, [r4, #20]
 800cdd2:	444e      	add	r6, r9
 800cdd4:	eba5 0509 	sub.w	r5, r5, r9
 800cdd8:	6026      	str	r6, [r4, #0]
 800cdda:	60a5      	str	r5, [r4, #8]
 800cddc:	463e      	mov	r6, r7
 800cdde:	42be      	cmp	r6, r7
 800cde0:	d900      	bls.n	800cde4 <__ssputs_r+0x70>
 800cde2:	463e      	mov	r6, r7
 800cde4:	6820      	ldr	r0, [r4, #0]
 800cde6:	4632      	mov	r2, r6
 800cde8:	4641      	mov	r1, r8
 800cdea:	f000 faab 	bl	800d344 <memmove>
 800cdee:	68a3      	ldr	r3, [r4, #8]
 800cdf0:	1b9b      	subs	r3, r3, r6
 800cdf2:	60a3      	str	r3, [r4, #8]
 800cdf4:	6823      	ldr	r3, [r4, #0]
 800cdf6:	4433      	add	r3, r6
 800cdf8:	6023      	str	r3, [r4, #0]
 800cdfa:	2000      	movs	r0, #0
 800cdfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce00:	462a      	mov	r2, r5
 800ce02:	f000 fac9 	bl	800d398 <_realloc_r>
 800ce06:	4606      	mov	r6, r0
 800ce08:	2800      	cmp	r0, #0
 800ce0a:	d1e0      	bne.n	800cdce <__ssputs_r+0x5a>
 800ce0c:	6921      	ldr	r1, [r4, #16]
 800ce0e:	4650      	mov	r0, sl
 800ce10:	f7ff feb8 	bl	800cb84 <_free_r>
 800ce14:	230c      	movs	r3, #12
 800ce16:	f8ca 3000 	str.w	r3, [sl]
 800ce1a:	89a3      	ldrh	r3, [r4, #12]
 800ce1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce20:	81a3      	strh	r3, [r4, #12]
 800ce22:	f04f 30ff 	mov.w	r0, #4294967295
 800ce26:	e7e9      	b.n	800cdfc <__ssputs_r+0x88>

0800ce28 <_svfiprintf_r>:
 800ce28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce2c:	4698      	mov	r8, r3
 800ce2e:	898b      	ldrh	r3, [r1, #12]
 800ce30:	061b      	lsls	r3, r3, #24
 800ce32:	b09d      	sub	sp, #116	; 0x74
 800ce34:	4607      	mov	r7, r0
 800ce36:	460d      	mov	r5, r1
 800ce38:	4614      	mov	r4, r2
 800ce3a:	d50e      	bpl.n	800ce5a <_svfiprintf_r+0x32>
 800ce3c:	690b      	ldr	r3, [r1, #16]
 800ce3e:	b963      	cbnz	r3, 800ce5a <_svfiprintf_r+0x32>
 800ce40:	2140      	movs	r1, #64	; 0x40
 800ce42:	f7ff ff0b 	bl	800cc5c <_malloc_r>
 800ce46:	6028      	str	r0, [r5, #0]
 800ce48:	6128      	str	r0, [r5, #16]
 800ce4a:	b920      	cbnz	r0, 800ce56 <_svfiprintf_r+0x2e>
 800ce4c:	230c      	movs	r3, #12
 800ce4e:	603b      	str	r3, [r7, #0]
 800ce50:	f04f 30ff 	mov.w	r0, #4294967295
 800ce54:	e0d0      	b.n	800cff8 <_svfiprintf_r+0x1d0>
 800ce56:	2340      	movs	r3, #64	; 0x40
 800ce58:	616b      	str	r3, [r5, #20]
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	9309      	str	r3, [sp, #36]	; 0x24
 800ce5e:	2320      	movs	r3, #32
 800ce60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce64:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce68:	2330      	movs	r3, #48	; 0x30
 800ce6a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d010 <_svfiprintf_r+0x1e8>
 800ce6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ce72:	f04f 0901 	mov.w	r9, #1
 800ce76:	4623      	mov	r3, r4
 800ce78:	469a      	mov	sl, r3
 800ce7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce7e:	b10a      	cbz	r2, 800ce84 <_svfiprintf_r+0x5c>
 800ce80:	2a25      	cmp	r2, #37	; 0x25
 800ce82:	d1f9      	bne.n	800ce78 <_svfiprintf_r+0x50>
 800ce84:	ebba 0b04 	subs.w	fp, sl, r4
 800ce88:	d00b      	beq.n	800cea2 <_svfiprintf_r+0x7a>
 800ce8a:	465b      	mov	r3, fp
 800ce8c:	4622      	mov	r2, r4
 800ce8e:	4629      	mov	r1, r5
 800ce90:	4638      	mov	r0, r7
 800ce92:	f7ff ff6f 	bl	800cd74 <__ssputs_r>
 800ce96:	3001      	adds	r0, #1
 800ce98:	f000 80a9 	beq.w	800cfee <_svfiprintf_r+0x1c6>
 800ce9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce9e:	445a      	add	r2, fp
 800cea0:	9209      	str	r2, [sp, #36]	; 0x24
 800cea2:	f89a 3000 	ldrb.w	r3, [sl]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	f000 80a1 	beq.w	800cfee <_svfiprintf_r+0x1c6>
 800ceac:	2300      	movs	r3, #0
 800ceae:	f04f 32ff 	mov.w	r2, #4294967295
 800ceb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ceb6:	f10a 0a01 	add.w	sl, sl, #1
 800ceba:	9304      	str	r3, [sp, #16]
 800cebc:	9307      	str	r3, [sp, #28]
 800cebe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cec2:	931a      	str	r3, [sp, #104]	; 0x68
 800cec4:	4654      	mov	r4, sl
 800cec6:	2205      	movs	r2, #5
 800cec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cecc:	4850      	ldr	r0, [pc, #320]	; (800d010 <_svfiprintf_r+0x1e8>)
 800cece:	f7f3 f9af 	bl	8000230 <memchr>
 800ced2:	9a04      	ldr	r2, [sp, #16]
 800ced4:	b9d8      	cbnz	r0, 800cf0e <_svfiprintf_r+0xe6>
 800ced6:	06d0      	lsls	r0, r2, #27
 800ced8:	bf44      	itt	mi
 800ceda:	2320      	movmi	r3, #32
 800cedc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cee0:	0711      	lsls	r1, r2, #28
 800cee2:	bf44      	itt	mi
 800cee4:	232b      	movmi	r3, #43	; 0x2b
 800cee6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ceea:	f89a 3000 	ldrb.w	r3, [sl]
 800ceee:	2b2a      	cmp	r3, #42	; 0x2a
 800cef0:	d015      	beq.n	800cf1e <_svfiprintf_r+0xf6>
 800cef2:	9a07      	ldr	r2, [sp, #28]
 800cef4:	4654      	mov	r4, sl
 800cef6:	2000      	movs	r0, #0
 800cef8:	f04f 0c0a 	mov.w	ip, #10
 800cefc:	4621      	mov	r1, r4
 800cefe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf02:	3b30      	subs	r3, #48	; 0x30
 800cf04:	2b09      	cmp	r3, #9
 800cf06:	d94d      	bls.n	800cfa4 <_svfiprintf_r+0x17c>
 800cf08:	b1b0      	cbz	r0, 800cf38 <_svfiprintf_r+0x110>
 800cf0a:	9207      	str	r2, [sp, #28]
 800cf0c:	e014      	b.n	800cf38 <_svfiprintf_r+0x110>
 800cf0e:	eba0 0308 	sub.w	r3, r0, r8
 800cf12:	fa09 f303 	lsl.w	r3, r9, r3
 800cf16:	4313      	orrs	r3, r2
 800cf18:	9304      	str	r3, [sp, #16]
 800cf1a:	46a2      	mov	sl, r4
 800cf1c:	e7d2      	b.n	800cec4 <_svfiprintf_r+0x9c>
 800cf1e:	9b03      	ldr	r3, [sp, #12]
 800cf20:	1d19      	adds	r1, r3, #4
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	9103      	str	r1, [sp, #12]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	bfbb      	ittet	lt
 800cf2a:	425b      	neglt	r3, r3
 800cf2c:	f042 0202 	orrlt.w	r2, r2, #2
 800cf30:	9307      	strge	r3, [sp, #28]
 800cf32:	9307      	strlt	r3, [sp, #28]
 800cf34:	bfb8      	it	lt
 800cf36:	9204      	strlt	r2, [sp, #16]
 800cf38:	7823      	ldrb	r3, [r4, #0]
 800cf3a:	2b2e      	cmp	r3, #46	; 0x2e
 800cf3c:	d10c      	bne.n	800cf58 <_svfiprintf_r+0x130>
 800cf3e:	7863      	ldrb	r3, [r4, #1]
 800cf40:	2b2a      	cmp	r3, #42	; 0x2a
 800cf42:	d134      	bne.n	800cfae <_svfiprintf_r+0x186>
 800cf44:	9b03      	ldr	r3, [sp, #12]
 800cf46:	1d1a      	adds	r2, r3, #4
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	9203      	str	r2, [sp, #12]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	bfb8      	it	lt
 800cf50:	f04f 33ff 	movlt.w	r3, #4294967295
 800cf54:	3402      	adds	r4, #2
 800cf56:	9305      	str	r3, [sp, #20]
 800cf58:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d020 <_svfiprintf_r+0x1f8>
 800cf5c:	7821      	ldrb	r1, [r4, #0]
 800cf5e:	2203      	movs	r2, #3
 800cf60:	4650      	mov	r0, sl
 800cf62:	f7f3 f965 	bl	8000230 <memchr>
 800cf66:	b138      	cbz	r0, 800cf78 <_svfiprintf_r+0x150>
 800cf68:	9b04      	ldr	r3, [sp, #16]
 800cf6a:	eba0 000a 	sub.w	r0, r0, sl
 800cf6e:	2240      	movs	r2, #64	; 0x40
 800cf70:	4082      	lsls	r2, r0
 800cf72:	4313      	orrs	r3, r2
 800cf74:	3401      	adds	r4, #1
 800cf76:	9304      	str	r3, [sp, #16]
 800cf78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf7c:	4825      	ldr	r0, [pc, #148]	; (800d014 <_svfiprintf_r+0x1ec>)
 800cf7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cf82:	2206      	movs	r2, #6
 800cf84:	f7f3 f954 	bl	8000230 <memchr>
 800cf88:	2800      	cmp	r0, #0
 800cf8a:	d038      	beq.n	800cffe <_svfiprintf_r+0x1d6>
 800cf8c:	4b22      	ldr	r3, [pc, #136]	; (800d018 <_svfiprintf_r+0x1f0>)
 800cf8e:	bb1b      	cbnz	r3, 800cfd8 <_svfiprintf_r+0x1b0>
 800cf90:	9b03      	ldr	r3, [sp, #12]
 800cf92:	3307      	adds	r3, #7
 800cf94:	f023 0307 	bic.w	r3, r3, #7
 800cf98:	3308      	adds	r3, #8
 800cf9a:	9303      	str	r3, [sp, #12]
 800cf9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf9e:	4433      	add	r3, r6
 800cfa0:	9309      	str	r3, [sp, #36]	; 0x24
 800cfa2:	e768      	b.n	800ce76 <_svfiprintf_r+0x4e>
 800cfa4:	fb0c 3202 	mla	r2, ip, r2, r3
 800cfa8:	460c      	mov	r4, r1
 800cfaa:	2001      	movs	r0, #1
 800cfac:	e7a6      	b.n	800cefc <_svfiprintf_r+0xd4>
 800cfae:	2300      	movs	r3, #0
 800cfb0:	3401      	adds	r4, #1
 800cfb2:	9305      	str	r3, [sp, #20]
 800cfb4:	4619      	mov	r1, r3
 800cfb6:	f04f 0c0a 	mov.w	ip, #10
 800cfba:	4620      	mov	r0, r4
 800cfbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cfc0:	3a30      	subs	r2, #48	; 0x30
 800cfc2:	2a09      	cmp	r2, #9
 800cfc4:	d903      	bls.n	800cfce <_svfiprintf_r+0x1a6>
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d0c6      	beq.n	800cf58 <_svfiprintf_r+0x130>
 800cfca:	9105      	str	r1, [sp, #20]
 800cfcc:	e7c4      	b.n	800cf58 <_svfiprintf_r+0x130>
 800cfce:	fb0c 2101 	mla	r1, ip, r1, r2
 800cfd2:	4604      	mov	r4, r0
 800cfd4:	2301      	movs	r3, #1
 800cfd6:	e7f0      	b.n	800cfba <_svfiprintf_r+0x192>
 800cfd8:	ab03      	add	r3, sp, #12
 800cfda:	9300      	str	r3, [sp, #0]
 800cfdc:	462a      	mov	r2, r5
 800cfde:	4b0f      	ldr	r3, [pc, #60]	; (800d01c <_svfiprintf_r+0x1f4>)
 800cfe0:	a904      	add	r1, sp, #16
 800cfe2:	4638      	mov	r0, r7
 800cfe4:	f3af 8000 	nop.w
 800cfe8:	1c42      	adds	r2, r0, #1
 800cfea:	4606      	mov	r6, r0
 800cfec:	d1d6      	bne.n	800cf9c <_svfiprintf_r+0x174>
 800cfee:	89ab      	ldrh	r3, [r5, #12]
 800cff0:	065b      	lsls	r3, r3, #25
 800cff2:	f53f af2d 	bmi.w	800ce50 <_svfiprintf_r+0x28>
 800cff6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cff8:	b01d      	add	sp, #116	; 0x74
 800cffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cffe:	ab03      	add	r3, sp, #12
 800d000:	9300      	str	r3, [sp, #0]
 800d002:	462a      	mov	r2, r5
 800d004:	4b05      	ldr	r3, [pc, #20]	; (800d01c <_svfiprintf_r+0x1f4>)
 800d006:	a904      	add	r1, sp, #16
 800d008:	4638      	mov	r0, r7
 800d00a:	f000 f879 	bl	800d100 <_printf_i>
 800d00e:	e7eb      	b.n	800cfe8 <_svfiprintf_r+0x1c0>
 800d010:	0800d4d4 	.word	0x0800d4d4
 800d014:	0800d4de 	.word	0x0800d4de
 800d018:	00000000 	.word	0x00000000
 800d01c:	0800cd75 	.word	0x0800cd75
 800d020:	0800d4da 	.word	0x0800d4da

0800d024 <_printf_common>:
 800d024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d028:	4616      	mov	r6, r2
 800d02a:	4699      	mov	r9, r3
 800d02c:	688a      	ldr	r2, [r1, #8]
 800d02e:	690b      	ldr	r3, [r1, #16]
 800d030:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d034:	4293      	cmp	r3, r2
 800d036:	bfb8      	it	lt
 800d038:	4613      	movlt	r3, r2
 800d03a:	6033      	str	r3, [r6, #0]
 800d03c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d040:	4607      	mov	r7, r0
 800d042:	460c      	mov	r4, r1
 800d044:	b10a      	cbz	r2, 800d04a <_printf_common+0x26>
 800d046:	3301      	adds	r3, #1
 800d048:	6033      	str	r3, [r6, #0]
 800d04a:	6823      	ldr	r3, [r4, #0]
 800d04c:	0699      	lsls	r1, r3, #26
 800d04e:	bf42      	ittt	mi
 800d050:	6833      	ldrmi	r3, [r6, #0]
 800d052:	3302      	addmi	r3, #2
 800d054:	6033      	strmi	r3, [r6, #0]
 800d056:	6825      	ldr	r5, [r4, #0]
 800d058:	f015 0506 	ands.w	r5, r5, #6
 800d05c:	d106      	bne.n	800d06c <_printf_common+0x48>
 800d05e:	f104 0a19 	add.w	sl, r4, #25
 800d062:	68e3      	ldr	r3, [r4, #12]
 800d064:	6832      	ldr	r2, [r6, #0]
 800d066:	1a9b      	subs	r3, r3, r2
 800d068:	42ab      	cmp	r3, r5
 800d06a:	dc26      	bgt.n	800d0ba <_printf_common+0x96>
 800d06c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d070:	1e13      	subs	r3, r2, #0
 800d072:	6822      	ldr	r2, [r4, #0]
 800d074:	bf18      	it	ne
 800d076:	2301      	movne	r3, #1
 800d078:	0692      	lsls	r2, r2, #26
 800d07a:	d42b      	bmi.n	800d0d4 <_printf_common+0xb0>
 800d07c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d080:	4649      	mov	r1, r9
 800d082:	4638      	mov	r0, r7
 800d084:	47c0      	blx	r8
 800d086:	3001      	adds	r0, #1
 800d088:	d01e      	beq.n	800d0c8 <_printf_common+0xa4>
 800d08a:	6823      	ldr	r3, [r4, #0]
 800d08c:	6922      	ldr	r2, [r4, #16]
 800d08e:	f003 0306 	and.w	r3, r3, #6
 800d092:	2b04      	cmp	r3, #4
 800d094:	bf02      	ittt	eq
 800d096:	68e5      	ldreq	r5, [r4, #12]
 800d098:	6833      	ldreq	r3, [r6, #0]
 800d09a:	1aed      	subeq	r5, r5, r3
 800d09c:	68a3      	ldr	r3, [r4, #8]
 800d09e:	bf0c      	ite	eq
 800d0a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d0a4:	2500      	movne	r5, #0
 800d0a6:	4293      	cmp	r3, r2
 800d0a8:	bfc4      	itt	gt
 800d0aa:	1a9b      	subgt	r3, r3, r2
 800d0ac:	18ed      	addgt	r5, r5, r3
 800d0ae:	2600      	movs	r6, #0
 800d0b0:	341a      	adds	r4, #26
 800d0b2:	42b5      	cmp	r5, r6
 800d0b4:	d11a      	bne.n	800d0ec <_printf_common+0xc8>
 800d0b6:	2000      	movs	r0, #0
 800d0b8:	e008      	b.n	800d0cc <_printf_common+0xa8>
 800d0ba:	2301      	movs	r3, #1
 800d0bc:	4652      	mov	r2, sl
 800d0be:	4649      	mov	r1, r9
 800d0c0:	4638      	mov	r0, r7
 800d0c2:	47c0      	blx	r8
 800d0c4:	3001      	adds	r0, #1
 800d0c6:	d103      	bne.n	800d0d0 <_printf_common+0xac>
 800d0c8:	f04f 30ff 	mov.w	r0, #4294967295
 800d0cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0d0:	3501      	adds	r5, #1
 800d0d2:	e7c6      	b.n	800d062 <_printf_common+0x3e>
 800d0d4:	18e1      	adds	r1, r4, r3
 800d0d6:	1c5a      	adds	r2, r3, #1
 800d0d8:	2030      	movs	r0, #48	; 0x30
 800d0da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d0de:	4422      	add	r2, r4
 800d0e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d0e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d0e8:	3302      	adds	r3, #2
 800d0ea:	e7c7      	b.n	800d07c <_printf_common+0x58>
 800d0ec:	2301      	movs	r3, #1
 800d0ee:	4622      	mov	r2, r4
 800d0f0:	4649      	mov	r1, r9
 800d0f2:	4638      	mov	r0, r7
 800d0f4:	47c0      	blx	r8
 800d0f6:	3001      	adds	r0, #1
 800d0f8:	d0e6      	beq.n	800d0c8 <_printf_common+0xa4>
 800d0fa:	3601      	adds	r6, #1
 800d0fc:	e7d9      	b.n	800d0b2 <_printf_common+0x8e>
	...

0800d100 <_printf_i>:
 800d100:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d104:	7e0f      	ldrb	r7, [r1, #24]
 800d106:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d108:	2f78      	cmp	r7, #120	; 0x78
 800d10a:	4691      	mov	r9, r2
 800d10c:	4680      	mov	r8, r0
 800d10e:	460c      	mov	r4, r1
 800d110:	469a      	mov	sl, r3
 800d112:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d116:	d807      	bhi.n	800d128 <_printf_i+0x28>
 800d118:	2f62      	cmp	r7, #98	; 0x62
 800d11a:	d80a      	bhi.n	800d132 <_printf_i+0x32>
 800d11c:	2f00      	cmp	r7, #0
 800d11e:	f000 80d4 	beq.w	800d2ca <_printf_i+0x1ca>
 800d122:	2f58      	cmp	r7, #88	; 0x58
 800d124:	f000 80c0 	beq.w	800d2a8 <_printf_i+0x1a8>
 800d128:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d12c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d130:	e03a      	b.n	800d1a8 <_printf_i+0xa8>
 800d132:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d136:	2b15      	cmp	r3, #21
 800d138:	d8f6      	bhi.n	800d128 <_printf_i+0x28>
 800d13a:	a101      	add	r1, pc, #4	; (adr r1, 800d140 <_printf_i+0x40>)
 800d13c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d140:	0800d199 	.word	0x0800d199
 800d144:	0800d1ad 	.word	0x0800d1ad
 800d148:	0800d129 	.word	0x0800d129
 800d14c:	0800d129 	.word	0x0800d129
 800d150:	0800d129 	.word	0x0800d129
 800d154:	0800d129 	.word	0x0800d129
 800d158:	0800d1ad 	.word	0x0800d1ad
 800d15c:	0800d129 	.word	0x0800d129
 800d160:	0800d129 	.word	0x0800d129
 800d164:	0800d129 	.word	0x0800d129
 800d168:	0800d129 	.word	0x0800d129
 800d16c:	0800d2b1 	.word	0x0800d2b1
 800d170:	0800d1d9 	.word	0x0800d1d9
 800d174:	0800d26b 	.word	0x0800d26b
 800d178:	0800d129 	.word	0x0800d129
 800d17c:	0800d129 	.word	0x0800d129
 800d180:	0800d2d3 	.word	0x0800d2d3
 800d184:	0800d129 	.word	0x0800d129
 800d188:	0800d1d9 	.word	0x0800d1d9
 800d18c:	0800d129 	.word	0x0800d129
 800d190:	0800d129 	.word	0x0800d129
 800d194:	0800d273 	.word	0x0800d273
 800d198:	682b      	ldr	r3, [r5, #0]
 800d19a:	1d1a      	adds	r2, r3, #4
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	602a      	str	r2, [r5, #0]
 800d1a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d1a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	e09f      	b.n	800d2ec <_printf_i+0x1ec>
 800d1ac:	6820      	ldr	r0, [r4, #0]
 800d1ae:	682b      	ldr	r3, [r5, #0]
 800d1b0:	0607      	lsls	r7, r0, #24
 800d1b2:	f103 0104 	add.w	r1, r3, #4
 800d1b6:	6029      	str	r1, [r5, #0]
 800d1b8:	d501      	bpl.n	800d1be <_printf_i+0xbe>
 800d1ba:	681e      	ldr	r6, [r3, #0]
 800d1bc:	e003      	b.n	800d1c6 <_printf_i+0xc6>
 800d1be:	0646      	lsls	r6, r0, #25
 800d1c0:	d5fb      	bpl.n	800d1ba <_printf_i+0xba>
 800d1c2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d1c6:	2e00      	cmp	r6, #0
 800d1c8:	da03      	bge.n	800d1d2 <_printf_i+0xd2>
 800d1ca:	232d      	movs	r3, #45	; 0x2d
 800d1cc:	4276      	negs	r6, r6
 800d1ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d1d2:	485a      	ldr	r0, [pc, #360]	; (800d33c <_printf_i+0x23c>)
 800d1d4:	230a      	movs	r3, #10
 800d1d6:	e012      	b.n	800d1fe <_printf_i+0xfe>
 800d1d8:	682b      	ldr	r3, [r5, #0]
 800d1da:	6820      	ldr	r0, [r4, #0]
 800d1dc:	1d19      	adds	r1, r3, #4
 800d1de:	6029      	str	r1, [r5, #0]
 800d1e0:	0605      	lsls	r5, r0, #24
 800d1e2:	d501      	bpl.n	800d1e8 <_printf_i+0xe8>
 800d1e4:	681e      	ldr	r6, [r3, #0]
 800d1e6:	e002      	b.n	800d1ee <_printf_i+0xee>
 800d1e8:	0641      	lsls	r1, r0, #25
 800d1ea:	d5fb      	bpl.n	800d1e4 <_printf_i+0xe4>
 800d1ec:	881e      	ldrh	r6, [r3, #0]
 800d1ee:	4853      	ldr	r0, [pc, #332]	; (800d33c <_printf_i+0x23c>)
 800d1f0:	2f6f      	cmp	r7, #111	; 0x6f
 800d1f2:	bf0c      	ite	eq
 800d1f4:	2308      	moveq	r3, #8
 800d1f6:	230a      	movne	r3, #10
 800d1f8:	2100      	movs	r1, #0
 800d1fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d1fe:	6865      	ldr	r5, [r4, #4]
 800d200:	60a5      	str	r5, [r4, #8]
 800d202:	2d00      	cmp	r5, #0
 800d204:	bfa2      	ittt	ge
 800d206:	6821      	ldrge	r1, [r4, #0]
 800d208:	f021 0104 	bicge.w	r1, r1, #4
 800d20c:	6021      	strge	r1, [r4, #0]
 800d20e:	b90e      	cbnz	r6, 800d214 <_printf_i+0x114>
 800d210:	2d00      	cmp	r5, #0
 800d212:	d04b      	beq.n	800d2ac <_printf_i+0x1ac>
 800d214:	4615      	mov	r5, r2
 800d216:	fbb6 f1f3 	udiv	r1, r6, r3
 800d21a:	fb03 6711 	mls	r7, r3, r1, r6
 800d21e:	5dc7      	ldrb	r7, [r0, r7]
 800d220:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d224:	4637      	mov	r7, r6
 800d226:	42bb      	cmp	r3, r7
 800d228:	460e      	mov	r6, r1
 800d22a:	d9f4      	bls.n	800d216 <_printf_i+0x116>
 800d22c:	2b08      	cmp	r3, #8
 800d22e:	d10b      	bne.n	800d248 <_printf_i+0x148>
 800d230:	6823      	ldr	r3, [r4, #0]
 800d232:	07de      	lsls	r6, r3, #31
 800d234:	d508      	bpl.n	800d248 <_printf_i+0x148>
 800d236:	6923      	ldr	r3, [r4, #16]
 800d238:	6861      	ldr	r1, [r4, #4]
 800d23a:	4299      	cmp	r1, r3
 800d23c:	bfde      	ittt	le
 800d23e:	2330      	movle	r3, #48	; 0x30
 800d240:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d244:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d248:	1b52      	subs	r2, r2, r5
 800d24a:	6122      	str	r2, [r4, #16]
 800d24c:	f8cd a000 	str.w	sl, [sp]
 800d250:	464b      	mov	r3, r9
 800d252:	aa03      	add	r2, sp, #12
 800d254:	4621      	mov	r1, r4
 800d256:	4640      	mov	r0, r8
 800d258:	f7ff fee4 	bl	800d024 <_printf_common>
 800d25c:	3001      	adds	r0, #1
 800d25e:	d14a      	bne.n	800d2f6 <_printf_i+0x1f6>
 800d260:	f04f 30ff 	mov.w	r0, #4294967295
 800d264:	b004      	add	sp, #16
 800d266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d26a:	6823      	ldr	r3, [r4, #0]
 800d26c:	f043 0320 	orr.w	r3, r3, #32
 800d270:	6023      	str	r3, [r4, #0]
 800d272:	4833      	ldr	r0, [pc, #204]	; (800d340 <_printf_i+0x240>)
 800d274:	2778      	movs	r7, #120	; 0x78
 800d276:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d27a:	6823      	ldr	r3, [r4, #0]
 800d27c:	6829      	ldr	r1, [r5, #0]
 800d27e:	061f      	lsls	r7, r3, #24
 800d280:	f851 6b04 	ldr.w	r6, [r1], #4
 800d284:	d402      	bmi.n	800d28c <_printf_i+0x18c>
 800d286:	065f      	lsls	r7, r3, #25
 800d288:	bf48      	it	mi
 800d28a:	b2b6      	uxthmi	r6, r6
 800d28c:	07df      	lsls	r7, r3, #31
 800d28e:	bf48      	it	mi
 800d290:	f043 0320 	orrmi.w	r3, r3, #32
 800d294:	6029      	str	r1, [r5, #0]
 800d296:	bf48      	it	mi
 800d298:	6023      	strmi	r3, [r4, #0]
 800d29a:	b91e      	cbnz	r6, 800d2a4 <_printf_i+0x1a4>
 800d29c:	6823      	ldr	r3, [r4, #0]
 800d29e:	f023 0320 	bic.w	r3, r3, #32
 800d2a2:	6023      	str	r3, [r4, #0]
 800d2a4:	2310      	movs	r3, #16
 800d2a6:	e7a7      	b.n	800d1f8 <_printf_i+0xf8>
 800d2a8:	4824      	ldr	r0, [pc, #144]	; (800d33c <_printf_i+0x23c>)
 800d2aa:	e7e4      	b.n	800d276 <_printf_i+0x176>
 800d2ac:	4615      	mov	r5, r2
 800d2ae:	e7bd      	b.n	800d22c <_printf_i+0x12c>
 800d2b0:	682b      	ldr	r3, [r5, #0]
 800d2b2:	6826      	ldr	r6, [r4, #0]
 800d2b4:	6961      	ldr	r1, [r4, #20]
 800d2b6:	1d18      	adds	r0, r3, #4
 800d2b8:	6028      	str	r0, [r5, #0]
 800d2ba:	0635      	lsls	r5, r6, #24
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	d501      	bpl.n	800d2c4 <_printf_i+0x1c4>
 800d2c0:	6019      	str	r1, [r3, #0]
 800d2c2:	e002      	b.n	800d2ca <_printf_i+0x1ca>
 800d2c4:	0670      	lsls	r0, r6, #25
 800d2c6:	d5fb      	bpl.n	800d2c0 <_printf_i+0x1c0>
 800d2c8:	8019      	strh	r1, [r3, #0]
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	6123      	str	r3, [r4, #16]
 800d2ce:	4615      	mov	r5, r2
 800d2d0:	e7bc      	b.n	800d24c <_printf_i+0x14c>
 800d2d2:	682b      	ldr	r3, [r5, #0]
 800d2d4:	1d1a      	adds	r2, r3, #4
 800d2d6:	602a      	str	r2, [r5, #0]
 800d2d8:	681d      	ldr	r5, [r3, #0]
 800d2da:	6862      	ldr	r2, [r4, #4]
 800d2dc:	2100      	movs	r1, #0
 800d2de:	4628      	mov	r0, r5
 800d2e0:	f7f2 ffa6 	bl	8000230 <memchr>
 800d2e4:	b108      	cbz	r0, 800d2ea <_printf_i+0x1ea>
 800d2e6:	1b40      	subs	r0, r0, r5
 800d2e8:	6060      	str	r0, [r4, #4]
 800d2ea:	6863      	ldr	r3, [r4, #4]
 800d2ec:	6123      	str	r3, [r4, #16]
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d2f4:	e7aa      	b.n	800d24c <_printf_i+0x14c>
 800d2f6:	6923      	ldr	r3, [r4, #16]
 800d2f8:	462a      	mov	r2, r5
 800d2fa:	4649      	mov	r1, r9
 800d2fc:	4640      	mov	r0, r8
 800d2fe:	47d0      	blx	sl
 800d300:	3001      	adds	r0, #1
 800d302:	d0ad      	beq.n	800d260 <_printf_i+0x160>
 800d304:	6823      	ldr	r3, [r4, #0]
 800d306:	079b      	lsls	r3, r3, #30
 800d308:	d413      	bmi.n	800d332 <_printf_i+0x232>
 800d30a:	68e0      	ldr	r0, [r4, #12]
 800d30c:	9b03      	ldr	r3, [sp, #12]
 800d30e:	4298      	cmp	r0, r3
 800d310:	bfb8      	it	lt
 800d312:	4618      	movlt	r0, r3
 800d314:	e7a6      	b.n	800d264 <_printf_i+0x164>
 800d316:	2301      	movs	r3, #1
 800d318:	4632      	mov	r2, r6
 800d31a:	4649      	mov	r1, r9
 800d31c:	4640      	mov	r0, r8
 800d31e:	47d0      	blx	sl
 800d320:	3001      	adds	r0, #1
 800d322:	d09d      	beq.n	800d260 <_printf_i+0x160>
 800d324:	3501      	adds	r5, #1
 800d326:	68e3      	ldr	r3, [r4, #12]
 800d328:	9903      	ldr	r1, [sp, #12]
 800d32a:	1a5b      	subs	r3, r3, r1
 800d32c:	42ab      	cmp	r3, r5
 800d32e:	dcf2      	bgt.n	800d316 <_printf_i+0x216>
 800d330:	e7eb      	b.n	800d30a <_printf_i+0x20a>
 800d332:	2500      	movs	r5, #0
 800d334:	f104 0619 	add.w	r6, r4, #25
 800d338:	e7f5      	b.n	800d326 <_printf_i+0x226>
 800d33a:	bf00      	nop
 800d33c:	0800d4e5 	.word	0x0800d4e5
 800d340:	0800d4f6 	.word	0x0800d4f6

0800d344 <memmove>:
 800d344:	4288      	cmp	r0, r1
 800d346:	b510      	push	{r4, lr}
 800d348:	eb01 0402 	add.w	r4, r1, r2
 800d34c:	d902      	bls.n	800d354 <memmove+0x10>
 800d34e:	4284      	cmp	r4, r0
 800d350:	4623      	mov	r3, r4
 800d352:	d807      	bhi.n	800d364 <memmove+0x20>
 800d354:	1e43      	subs	r3, r0, #1
 800d356:	42a1      	cmp	r1, r4
 800d358:	d008      	beq.n	800d36c <memmove+0x28>
 800d35a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d35e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d362:	e7f8      	b.n	800d356 <memmove+0x12>
 800d364:	4402      	add	r2, r0
 800d366:	4601      	mov	r1, r0
 800d368:	428a      	cmp	r2, r1
 800d36a:	d100      	bne.n	800d36e <memmove+0x2a>
 800d36c:	bd10      	pop	{r4, pc}
 800d36e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d372:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d376:	e7f7      	b.n	800d368 <memmove+0x24>

0800d378 <_sbrk_r>:
 800d378:	b538      	push	{r3, r4, r5, lr}
 800d37a:	4d06      	ldr	r5, [pc, #24]	; (800d394 <_sbrk_r+0x1c>)
 800d37c:	2300      	movs	r3, #0
 800d37e:	4604      	mov	r4, r0
 800d380:	4608      	mov	r0, r1
 800d382:	602b      	str	r3, [r5, #0]
 800d384:	f7f6 f9cc 	bl	8003720 <_sbrk>
 800d388:	1c43      	adds	r3, r0, #1
 800d38a:	d102      	bne.n	800d392 <_sbrk_r+0x1a>
 800d38c:	682b      	ldr	r3, [r5, #0]
 800d38e:	b103      	cbz	r3, 800d392 <_sbrk_r+0x1a>
 800d390:	6023      	str	r3, [r4, #0]
 800d392:	bd38      	pop	{r3, r4, r5, pc}
 800d394:	20000d90 	.word	0x20000d90

0800d398 <_realloc_r>:
 800d398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d39c:	4680      	mov	r8, r0
 800d39e:	4614      	mov	r4, r2
 800d3a0:	460e      	mov	r6, r1
 800d3a2:	b921      	cbnz	r1, 800d3ae <_realloc_r+0x16>
 800d3a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d3a8:	4611      	mov	r1, r2
 800d3aa:	f7ff bc57 	b.w	800cc5c <_malloc_r>
 800d3ae:	b92a      	cbnz	r2, 800d3bc <_realloc_r+0x24>
 800d3b0:	f7ff fbe8 	bl	800cb84 <_free_r>
 800d3b4:	4625      	mov	r5, r4
 800d3b6:	4628      	mov	r0, r5
 800d3b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3bc:	f000 f81b 	bl	800d3f6 <_malloc_usable_size_r>
 800d3c0:	4284      	cmp	r4, r0
 800d3c2:	4607      	mov	r7, r0
 800d3c4:	d802      	bhi.n	800d3cc <_realloc_r+0x34>
 800d3c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d3ca:	d812      	bhi.n	800d3f2 <_realloc_r+0x5a>
 800d3cc:	4621      	mov	r1, r4
 800d3ce:	4640      	mov	r0, r8
 800d3d0:	f7ff fc44 	bl	800cc5c <_malloc_r>
 800d3d4:	4605      	mov	r5, r0
 800d3d6:	2800      	cmp	r0, #0
 800d3d8:	d0ed      	beq.n	800d3b6 <_realloc_r+0x1e>
 800d3da:	42bc      	cmp	r4, r7
 800d3dc:	4622      	mov	r2, r4
 800d3de:	4631      	mov	r1, r6
 800d3e0:	bf28      	it	cs
 800d3e2:	463a      	movcs	r2, r7
 800d3e4:	f7ff fbc0 	bl	800cb68 <memcpy>
 800d3e8:	4631      	mov	r1, r6
 800d3ea:	4640      	mov	r0, r8
 800d3ec:	f7ff fbca 	bl	800cb84 <_free_r>
 800d3f0:	e7e1      	b.n	800d3b6 <_realloc_r+0x1e>
 800d3f2:	4635      	mov	r5, r6
 800d3f4:	e7df      	b.n	800d3b6 <_realloc_r+0x1e>

0800d3f6 <_malloc_usable_size_r>:
 800d3f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d3fa:	1f18      	subs	r0, r3, #4
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	bfbc      	itt	lt
 800d400:	580b      	ldrlt	r3, [r1, r0]
 800d402:	18c0      	addlt	r0, r0, r3
 800d404:	4770      	bx	lr
	...

0800d408 <_init>:
 800d408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d40a:	bf00      	nop
 800d40c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d40e:	bc08      	pop	{r3}
 800d410:	469e      	mov	lr, r3
 800d412:	4770      	bx	lr

0800d414 <_fini>:
 800d414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d416:	bf00      	nop
 800d418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d41a:	bc08      	pop	{r3}
 800d41c:	469e      	mov	lr, r3
 800d41e:	4770      	bx	lr
