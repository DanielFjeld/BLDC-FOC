
CUBEMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000121f4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000958  080123d8  080123d8  000223d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012d30  08012d30  00030740  2**0
                  CONTENTS
  4 .ARM          00000008  08012d30  08012d30  00022d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012d38  08012d38  00030740  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012d38  08012d38  00022d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012d3c  08012d3c  00022d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000740  20000000  08012d40  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001aa4  20000740  08013480  00030740  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200021e4  08013480  000321e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030740  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030770  2**0
                  CONTENTS, READONLY
 13 .debug_info   00029927  00000000  00000000  000307b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006090  00000000  00000000  0005a0da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002190  00000000  00000000  00060170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000019aa  00000000  00000000  00062300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000278a9  00000000  00000000  00063caa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00030805  00000000  00000000  0008b553  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed4fa  00000000  00000000  000bbd58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009fac  00000000  00000000  001a9254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001b3200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000740 	.word	0x20000740
 80001fc:	00000000 	.word	0x00000000
 8000200:	080123bc 	.word	0x080123bc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000744 	.word	0x20000744
 800021c:	080123bc 	.word	0x080123bc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b970 	b.w	8000fd0 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9e08      	ldr	r6, [sp, #32]
 8000d0e:	460d      	mov	r5, r1
 8000d10:	4604      	mov	r4, r0
 8000d12:	460f      	mov	r7, r1
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d14a      	bne.n	8000dae <__udivmoddi4+0xa6>
 8000d18:	428a      	cmp	r2, r1
 8000d1a:	4694      	mov	ip, r2
 8000d1c:	d965      	bls.n	8000dea <__udivmoddi4+0xe2>
 8000d1e:	fab2 f382 	clz	r3, r2
 8000d22:	b143      	cbz	r3, 8000d36 <__udivmoddi4+0x2e>
 8000d24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d28:	f1c3 0220 	rsb	r2, r3, #32
 8000d2c:	409f      	lsls	r7, r3
 8000d2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d32:	4317      	orrs	r7, r2
 8000d34:	409c      	lsls	r4, r3
 8000d36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d3a:	fa1f f58c 	uxth.w	r5, ip
 8000d3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d42:	0c22      	lsrs	r2, r4, #16
 8000d44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d4c:	fb01 f005 	mul.w	r0, r1, r5
 8000d50:	4290      	cmp	r0, r2
 8000d52:	d90a      	bls.n	8000d6a <__udivmoddi4+0x62>
 8000d54:	eb1c 0202 	adds.w	r2, ip, r2
 8000d58:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d5c:	f080 811c 	bcs.w	8000f98 <__udivmoddi4+0x290>
 8000d60:	4290      	cmp	r0, r2
 8000d62:	f240 8119 	bls.w	8000f98 <__udivmoddi4+0x290>
 8000d66:	3902      	subs	r1, #2
 8000d68:	4462      	add	r2, ip
 8000d6a:	1a12      	subs	r2, r2, r0
 8000d6c:	b2a4      	uxth	r4, r4
 8000d6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d7a:	fb00 f505 	mul.w	r5, r0, r5
 8000d7e:	42a5      	cmp	r5, r4
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x90>
 8000d82:	eb1c 0404 	adds.w	r4, ip, r4
 8000d86:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d8a:	f080 8107 	bcs.w	8000f9c <__udivmoddi4+0x294>
 8000d8e:	42a5      	cmp	r5, r4
 8000d90:	f240 8104 	bls.w	8000f9c <__udivmoddi4+0x294>
 8000d94:	4464      	add	r4, ip
 8000d96:	3802      	subs	r0, #2
 8000d98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d9c:	1b64      	subs	r4, r4, r5
 8000d9e:	2100      	movs	r1, #0
 8000da0:	b11e      	cbz	r6, 8000daa <__udivmoddi4+0xa2>
 8000da2:	40dc      	lsrs	r4, r3
 8000da4:	2300      	movs	r3, #0
 8000da6:	e9c6 4300 	strd	r4, r3, [r6]
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0xbc>
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	f000 80ed 	beq.w	8000f92 <__udivmoddi4+0x28a>
 8000db8:	2100      	movs	r1, #0
 8000dba:	e9c6 0500 	strd	r0, r5, [r6]
 8000dbe:	4608      	mov	r0, r1
 8000dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc4:	fab3 f183 	clz	r1, r3
 8000dc8:	2900      	cmp	r1, #0
 8000dca:	d149      	bne.n	8000e60 <__udivmoddi4+0x158>
 8000dcc:	42ab      	cmp	r3, r5
 8000dce:	d302      	bcc.n	8000dd6 <__udivmoddi4+0xce>
 8000dd0:	4282      	cmp	r2, r0
 8000dd2:	f200 80f8 	bhi.w	8000fc6 <__udivmoddi4+0x2be>
 8000dd6:	1a84      	subs	r4, r0, r2
 8000dd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ddc:	2001      	movs	r0, #1
 8000dde:	4617      	mov	r7, r2
 8000de0:	2e00      	cmp	r6, #0
 8000de2:	d0e2      	beq.n	8000daa <__udivmoddi4+0xa2>
 8000de4:	e9c6 4700 	strd	r4, r7, [r6]
 8000de8:	e7df      	b.n	8000daa <__udivmoddi4+0xa2>
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xe6>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f382 	clz	r3, r2
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	f040 8090 	bne.w	8000f18 <__udivmoddi4+0x210>
 8000df8:	1a8a      	subs	r2, r1, r2
 8000dfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dfe:	fa1f fe8c 	uxth.w	lr, ip
 8000e02:	2101      	movs	r1, #1
 8000e04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e08:	fb07 2015 	mls	r0, r7, r5, r2
 8000e0c:	0c22      	lsrs	r2, r4, #16
 8000e0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e12:	fb0e f005 	mul.w	r0, lr, r5
 8000e16:	4290      	cmp	r0, r2
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x124>
 8000e1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e1e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x122>
 8000e24:	4290      	cmp	r0, r2
 8000e26:	f200 80cb 	bhi.w	8000fc0 <__udivmoddi4+0x2b8>
 8000e2a:	4645      	mov	r5, r8
 8000e2c:	1a12      	subs	r2, r2, r0
 8000e2e:	b2a4      	uxth	r4, r4
 8000e30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e34:	fb07 2210 	mls	r2, r7, r0, r2
 8000e38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e40:	45a6      	cmp	lr, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x14e>
 8000e44:	eb1c 0404 	adds.w	r4, ip, r4
 8000e48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e4c:	d202      	bcs.n	8000e54 <__udivmoddi4+0x14c>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f200 80bb 	bhi.w	8000fca <__udivmoddi4+0x2c2>
 8000e54:	4610      	mov	r0, r2
 8000e56:	eba4 040e 	sub.w	r4, r4, lr
 8000e5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e5e:	e79f      	b.n	8000da0 <__udivmoddi4+0x98>
 8000e60:	f1c1 0720 	rsb	r7, r1, #32
 8000e64:	408b      	lsls	r3, r1
 8000e66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e72:	fa20 f307 	lsr.w	r3, r0, r7
 8000e76:	40fd      	lsrs	r5, r7
 8000e78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e7c:	4323      	orrs	r3, r4
 8000e7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	fb09 5518 	mls	r5, r9, r8, r5
 8000e8a:	0c1c      	lsrs	r4, r3, #16
 8000e8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e90:	fb08 f50e 	mul.w	r5, r8, lr
 8000e94:	42a5      	cmp	r5, r4
 8000e96:	fa02 f201 	lsl.w	r2, r2, r1
 8000e9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e9e:	d90b      	bls.n	8000eb8 <__udivmoddi4+0x1b0>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ea8:	f080 8088 	bcs.w	8000fbc <__udivmoddi4+0x2b4>
 8000eac:	42a5      	cmp	r5, r4
 8000eae:	f240 8085 	bls.w	8000fbc <__udivmoddi4+0x2b4>
 8000eb2:	f1a8 0802 	sub.w	r8, r8, #2
 8000eb6:	4464      	add	r4, ip
 8000eb8:	1b64      	subs	r4, r4, r5
 8000eba:	b29d      	uxth	r5, r3
 8000ebc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ec0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ec4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ec8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ecc:	45a6      	cmp	lr, r4
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x1da>
 8000ed0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ed8:	d26c      	bcs.n	8000fb4 <__udivmoddi4+0x2ac>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	d96a      	bls.n	8000fb4 <__udivmoddi4+0x2ac>
 8000ede:	3b02      	subs	r3, #2
 8000ee0:	4464      	add	r4, ip
 8000ee2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ee6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eea:	eba4 040e 	sub.w	r4, r4, lr
 8000eee:	42ac      	cmp	r4, r5
 8000ef0:	46c8      	mov	r8, r9
 8000ef2:	46ae      	mov	lr, r5
 8000ef4:	d356      	bcc.n	8000fa4 <__udivmoddi4+0x29c>
 8000ef6:	d053      	beq.n	8000fa0 <__udivmoddi4+0x298>
 8000ef8:	b156      	cbz	r6, 8000f10 <__udivmoddi4+0x208>
 8000efa:	ebb0 0208 	subs.w	r2, r0, r8
 8000efe:	eb64 040e 	sbc.w	r4, r4, lr
 8000f02:	fa04 f707 	lsl.w	r7, r4, r7
 8000f06:	40ca      	lsrs	r2, r1
 8000f08:	40cc      	lsrs	r4, r1
 8000f0a:	4317      	orrs	r7, r2
 8000f0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f10:	4618      	mov	r0, r3
 8000f12:	2100      	movs	r1, #0
 8000f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f18:	f1c3 0120 	rsb	r1, r3, #32
 8000f1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f20:	fa20 f201 	lsr.w	r2, r0, r1
 8000f24:	fa25 f101 	lsr.w	r1, r5, r1
 8000f28:	409d      	lsls	r5, r3
 8000f2a:	432a      	orrs	r2, r5
 8000f2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f30:	fa1f fe8c 	uxth.w	lr, ip
 8000f34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f38:	fb07 1510 	mls	r5, r7, r0, r1
 8000f3c:	0c11      	lsrs	r1, r2, #16
 8000f3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f42:	fb00 f50e 	mul.w	r5, r0, lr
 8000f46:	428d      	cmp	r5, r1
 8000f48:	fa04 f403 	lsl.w	r4, r4, r3
 8000f4c:	d908      	bls.n	8000f60 <__udivmoddi4+0x258>
 8000f4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f56:	d22f      	bcs.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f58:	428d      	cmp	r5, r1
 8000f5a:	d92d      	bls.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	4461      	add	r1, ip
 8000f60:	1b49      	subs	r1, r1, r5
 8000f62:	b292      	uxth	r2, r2
 8000f64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f68:	fb07 1115 	mls	r1, r7, r5, r1
 8000f6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f70:	fb05 f10e 	mul.w	r1, r5, lr
 8000f74:	4291      	cmp	r1, r2
 8000f76:	d908      	bls.n	8000f8a <__udivmoddi4+0x282>
 8000f78:	eb1c 0202 	adds.w	r2, ip, r2
 8000f7c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f80:	d216      	bcs.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f82:	4291      	cmp	r1, r2
 8000f84:	d914      	bls.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f86:	3d02      	subs	r5, #2
 8000f88:	4462      	add	r2, ip
 8000f8a:	1a52      	subs	r2, r2, r1
 8000f8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f90:	e738      	b.n	8000e04 <__udivmoddi4+0xfc>
 8000f92:	4631      	mov	r1, r6
 8000f94:	4630      	mov	r0, r6
 8000f96:	e708      	b.n	8000daa <__udivmoddi4+0xa2>
 8000f98:	4639      	mov	r1, r7
 8000f9a:	e6e6      	b.n	8000d6a <__udivmoddi4+0x62>
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	e6fb      	b.n	8000d98 <__udivmoddi4+0x90>
 8000fa0:	4548      	cmp	r0, r9
 8000fa2:	d2a9      	bcs.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fa4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fac:	3b01      	subs	r3, #1
 8000fae:	e7a3      	b.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fb0:	4645      	mov	r5, r8
 8000fb2:	e7ea      	b.n	8000f8a <__udivmoddi4+0x282>
 8000fb4:	462b      	mov	r3, r5
 8000fb6:	e794      	b.n	8000ee2 <__udivmoddi4+0x1da>
 8000fb8:	4640      	mov	r0, r8
 8000fba:	e7d1      	b.n	8000f60 <__udivmoddi4+0x258>
 8000fbc:	46d0      	mov	r8, sl
 8000fbe:	e77b      	b.n	8000eb8 <__udivmoddi4+0x1b0>
 8000fc0:	3d02      	subs	r5, #2
 8000fc2:	4462      	add	r2, ip
 8000fc4:	e732      	b.n	8000e2c <__udivmoddi4+0x124>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e70a      	b.n	8000de0 <__udivmoddi4+0xd8>
 8000fca:	4464      	add	r4, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e742      	b.n	8000e56 <__udivmoddi4+0x14e>

08000fd0 <__aeabi_idiv0>:
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <Update_FIR_filter>:
//----------------------FIR-------------------
#define FIR_FILTER_LENGTH 10
uint8_t FIR_index = 0;
float FIR_value = 0;
float FIR_Values[FIR_FILTER_LENGTH] = {0};
float Update_FIR_filter(float input){
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	ed87 0a01 	vstr	s0, [r7, #4]
	FIR_value -= FIR_Values[FIR_index];
 8000fde:	4b22      	ldr	r3, [pc, #136]	; (8001068 <Update_FIR_filter+0x94>)
 8000fe0:	ed93 7a00 	vldr	s14, [r3]
 8000fe4:	4b21      	ldr	r3, [pc, #132]	; (800106c <Update_FIR_filter+0x98>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	4a21      	ldr	r2, [pc, #132]	; (8001070 <Update_FIR_filter+0x9c>)
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	4413      	add	r3, r2
 8000fee:	edd3 7a00 	vldr	s15, [r3]
 8000ff2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ff6:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <Update_FIR_filter+0x94>)
 8000ff8:	edc3 7a00 	vstr	s15, [r3]
	FIR_Values[FIR_index] = input/FIR_FILTER_LENGTH;
 8000ffc:	4b1b      	ldr	r3, [pc, #108]	; (800106c <Update_FIR_filter+0x98>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	ed97 7a01 	vldr	s14, [r7, #4]
 8001004:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001008:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800100c:	4a18      	ldr	r2, [pc, #96]	; (8001070 <Update_FIR_filter+0x9c>)
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	4413      	add	r3, r2
 8001012:	edc3 7a00 	vstr	s15, [r3]
	FIR_value += FIR_Values[FIR_index];
 8001016:	4b15      	ldr	r3, [pc, #84]	; (800106c <Update_FIR_filter+0x98>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	4a15      	ldr	r2, [pc, #84]	; (8001070 <Update_FIR_filter+0x9c>)
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	4413      	add	r3, r2
 8001020:	ed93 7a00 	vldr	s14, [r3]
 8001024:	4b10      	ldr	r3, [pc, #64]	; (8001068 <Update_FIR_filter+0x94>)
 8001026:	edd3 7a00 	vldr	s15, [r3]
 800102a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800102e:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <Update_FIR_filter+0x94>)
 8001030:	edc3 7a00 	vstr	s15, [r3]
	if(FIR_index < FIR_FILTER_LENGTH-1)FIR_index++;
 8001034:	4b0d      	ldr	r3, [pc, #52]	; (800106c <Update_FIR_filter+0x98>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b08      	cmp	r3, #8
 800103a:	d806      	bhi.n	800104a <Update_FIR_filter+0x76>
 800103c:	4b0b      	ldr	r3, [pc, #44]	; (800106c <Update_FIR_filter+0x98>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	3301      	adds	r3, #1
 8001042:	b2da      	uxtb	r2, r3
 8001044:	4b09      	ldr	r3, [pc, #36]	; (800106c <Update_FIR_filter+0x98>)
 8001046:	701a      	strb	r2, [r3, #0]
 8001048:	e002      	b.n	8001050 <Update_FIR_filter+0x7c>
	else FIR_index = 0;
 800104a:	4b08      	ldr	r3, [pc, #32]	; (800106c <Update_FIR_filter+0x98>)
 800104c:	2200      	movs	r2, #0
 800104e:	701a      	strb	r2, [r3, #0]
	return FIR_value;
 8001050:	4b05      	ldr	r3, [pc, #20]	; (8001068 <Update_FIR_filter+0x94>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	ee07 3a90 	vmov	s15, r3
}
 8001058:	eeb0 0a67 	vmov.f32	s0, s15
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	200007a8 	.word	0x200007a8
 800106c:	200007a4 	.word	0x200007a4
 8001070:	200007ac 	.word	0x200007ac

08001074 <Update_FIR_filter2>:

#define FIR_FILTER_LENGTH2 100
uint8_t FIR_index2 = 0;
float FIR_Values2[FIR_FILTER_LENGTH2] = {0};
float FIR2_value = 0;
float Update_FIR_filter2(float input){
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	ed87 0a01 	vstr	s0, [r7, #4]
	FIR2_value -= FIR_Values2[FIR_index];
 800107e:	4b22      	ldr	r3, [pc, #136]	; (8001108 <Update_FIR_filter2+0x94>)
 8001080:	ed93 7a00 	vldr	s14, [r3]
 8001084:	4b21      	ldr	r3, [pc, #132]	; (800110c <Update_FIR_filter2+0x98>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	4a21      	ldr	r2, [pc, #132]	; (8001110 <Update_FIR_filter2+0x9c>)
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	4413      	add	r3, r2
 800108e:	edd3 7a00 	vldr	s15, [r3]
 8001092:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001096:	4b1c      	ldr	r3, [pc, #112]	; (8001108 <Update_FIR_filter2+0x94>)
 8001098:	edc3 7a00 	vstr	s15, [r3]
	FIR_Values2[FIR_index] = input/FIR_FILTER_LENGTH2;
 800109c:	4b1b      	ldr	r3, [pc, #108]	; (800110c <Update_FIR_filter2+0x98>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	ed97 7a01 	vldr	s14, [r7, #4]
 80010a4:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001114 <Update_FIR_filter2+0xa0>
 80010a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010ac:	4a18      	ldr	r2, [pc, #96]	; (8001110 <Update_FIR_filter2+0x9c>)
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	4413      	add	r3, r2
 80010b2:	edc3 7a00 	vstr	s15, [r3]
	FIR2_value += FIR_Values2[FIR_index] ;
 80010b6:	4b15      	ldr	r3, [pc, #84]	; (800110c <Update_FIR_filter2+0x98>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	4a15      	ldr	r2, [pc, #84]	; (8001110 <Update_FIR_filter2+0x9c>)
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	4413      	add	r3, r2
 80010c0:	ed93 7a00 	vldr	s14, [r3]
 80010c4:	4b10      	ldr	r3, [pc, #64]	; (8001108 <Update_FIR_filter2+0x94>)
 80010c6:	edd3 7a00 	vldr	s15, [r3]
 80010ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ce:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <Update_FIR_filter2+0x94>)
 80010d0:	edc3 7a00 	vstr	s15, [r3]
	if(FIR_index2 < FIR_FILTER_LENGTH2-1)FIR_index2++;
 80010d4:	4b10      	ldr	r3, [pc, #64]	; (8001118 <Update_FIR_filter2+0xa4>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b62      	cmp	r3, #98	; 0x62
 80010da:	d806      	bhi.n	80010ea <Update_FIR_filter2+0x76>
 80010dc:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <Update_FIR_filter2+0xa4>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	3301      	adds	r3, #1
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <Update_FIR_filter2+0xa4>)
 80010e6:	701a      	strb	r2, [r3, #0]
 80010e8:	e002      	b.n	80010f0 <Update_FIR_filter2+0x7c>
	else FIR_index2 = 0;
 80010ea:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <Update_FIR_filter2+0xa4>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	701a      	strb	r2, [r3, #0]
	return FIR2_value;
 80010f0:	4b05      	ldr	r3, [pc, #20]	; (8001108 <Update_FIR_filter2+0x94>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	ee07 3a90 	vmov	s15, r3
}
 80010f8:	eeb0 0a67 	vmov.f32	s0, s15
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000968 	.word	0x20000968
 800110c:	200007a4 	.word	0x200007a4
 8001110:	200007d8 	.word	0x200007d8
 8001114:	42c80000 	.word	0x42c80000
 8001118:	200007d4 	.word	0x200007d4

0800111c <Current_IRQ>:
PID_instance Current_PID = {0};
PID_instance Velocity_PID = {0};
PID_instance Angle_PID = {0};

//-------------------IRQ handlers---------------------
void Current_IRQ(Current* ptr){
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
    if(ptr != NULL)memcpy(&IRQ_Current, ptr, sizeof(Current));
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d008      	beq.n	800113c <Current_IRQ+0x20>
 800112a:	2210      	movs	r2, #16
 800112c:	6879      	ldr	r1, [r7, #4]
 800112e:	4805      	ldr	r0, [pc, #20]	; (8001144 <Current_IRQ+0x28>)
 8001130:	f00e f94d 	bl	800f3ce <memcpy>
    else return;
    Current_Callback_flag = 1;
 8001134:	4b04      	ldr	r3, [pc, #16]	; (8001148 <Current_IRQ+0x2c>)
 8001136:	2201      	movs	r2, #1
 8001138:	701a      	strb	r2, [r3, #0]
 800113a:	e000      	b.n	800113e <Current_IRQ+0x22>
    else return;
 800113c:	bf00      	nop
}
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	2000076c 	.word	0x2000076c
 8001148:	2000075c 	.word	0x2000075c

0800114c <Voltage_Temp_IRQ>:
void Voltage_Temp_IRQ(Voltage_Temp* ptr){
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
	memcpy(&IRQ_Voltage_Temp, ptr, sizeof(Voltage_Temp));
 8001154:	220c      	movs	r2, #12
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	4803      	ldr	r0, [pc, #12]	; (8001168 <Voltage_Temp_IRQ+0x1c>)
 800115a:	f00e f938 	bl	800f3ce <memcpy>
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	2000077c 	.word	0x2000077c

0800116c <Encoders_IRQ>:
void Encoders_IRQ(Encoders* ptr){
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
	memcpy(&IRQ_Encoders, ptr, sizeof(Encoders));
 8001174:	221c      	movs	r2, #28
 8001176:	6879      	ldr	r1, [r7, #4]
 8001178:	4803      	ldr	r0, [pc, #12]	; (8001188 <Encoders_IRQ+0x1c>)
 800117a:	f00e f928 	bl	800f3ce <memcpy>
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000788 	.word	0x20000788

0800118c <Can_RX_Status_IRQ>:

//-------------------CAN RX------------------------
void Can_RX_Status_IRQ(CAN_Status* ptr){
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
	memcpy(&IRQ_Status, ptr, sizeof(CAN_Status));
 8001194:	220c      	movs	r2, #12
 8001196:	6879      	ldr	r1, [r7, #4]
 8001198:	4803      	ldr	r0, [pc, #12]	; (80011a8 <Can_RX_Status_IRQ+0x1c>)
 800119a:	f00e f918 	bl	800f3ce <memcpy>
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	2000096c 	.word	0x2000096c

080011ac <HAL_TIM_PeriodElapsedCallback>:

//--------------------TIMERS---------------------------
volatile int count = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	if(htim == &htim3)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4a15      	ldr	r2, [pc, #84]	; (800120c <HAL_TIM_PeriodElapsedCallback+0x60>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d101      	bne.n	80011c0 <HAL_TIM_PeriodElapsedCallback+0x14>
			ENCODER_TIM_PeriodElapsedCallback();
 80011bc:	f002 f8e8 	bl	8003390 <ENCODER_TIM_PeriodElapsedCallback>

	count++;
 80011c0:	4b13      	ldr	r3, [pc, #76]	; (8001210 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	3301      	adds	r3, #1
 80011c6:	4a12      	ldr	r2, [pc, #72]	; (8001210 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80011c8:	6013      	str	r3, [r2, #0]
	if(htim == &htim2){
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a11      	ldr	r2, [pc, #68]	; (8001214 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d118      	bne.n	8001204 <HAL_TIM_PeriodElapsedCallback+0x58>
		#ifdef RUNNING_LED_DEBUG2
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
 80011d2:	2201      	movs	r2, #1
 80011d4:	2140      	movs	r1, #64	; 0x40
 80011d6:	4810      	ldr	r0, [pc, #64]	; (8001218 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80011d8:	f008 fbce 	bl	8009978 <HAL_GPIO_WritePin>
		#endif

		calculate();
 80011dc:	f000 fbf8 	bl	80019d0 <calculate>
		//time keepers
		timing_CAN_feedback++;
 80011e0:	4b0e      	ldr	r3, [pc, #56]	; (800121c <HAL_TIM_PeriodElapsedCallback+0x70>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	3301      	adds	r3, #1
 80011e6:	4a0d      	ldr	r2, [pc, #52]	; (800121c <HAL_TIM_PeriodElapsedCallback+0x70>)
 80011e8:	6013      	str	r3, [r2, #0]
		running_LED_timing++;
 80011ea:	4b0d      	ldr	r3, [pc, #52]	; (8001220 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	3301      	adds	r3, #1
 80011f0:	4a0b      	ldr	r2, [pc, #44]	; (8001220 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80011f2:	6013      	str	r3, [r2, #0]

		#ifdef RUNNING_LED_DEBUG2
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
 80011f4:	2200      	movs	r2, #0
 80011f6:	2140      	movs	r1, #64	; 0x40
 80011f8:	4807      	ldr	r0, [pc, #28]	; (8001218 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80011fa:	f008 fbbd 	bl	8009978 <HAL_GPIO_WritePin>
		#endif

		count = 0;
 80011fe:	4b04      	ldr	r3, [pc, #16]	; (8001210 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
	}
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20001f58 	.word	0x20001f58
 8001210:	20000ab8 	.word	0x20000ab8
 8001214:	20001f0c 	.word	0x20001f0c
 8001218:	48000800 	.word	0x48000800
 800121c:	20000760 	.word	0x20000760
 8001220:	20000764 	.word	0x20000764

08001224 <check_value>:
	.max_warning = NAN,
	.min_warning = NAN,
};

//check value OK
void check_value(CAN_LIMITS* ptr, int32_t value, uint32_t *warning_ptr, uint32_t *error_ptr, uint8_t bit_pos){
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
 8001230:	603b      	str	r3, [r7, #0]
	if(value >= ptr->max_error   || value <= ptr->min_error)   *error_ptr   |= (1 << bit_pos);//error
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	ee07 3a90 	vmov	s15, r3
 8001238:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001242:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124a:	da0c      	bge.n	8001266 <check_value+0x42>
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	ee07 3a90 	vmov	s15, r3
 8001252:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	edd3 7a01 	vldr	s15, [r3, #4]
 800125c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001264:	d808      	bhi.n	8001278 <check_value+0x54>
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	7e3a      	ldrb	r2, [r7, #24]
 800126c:	2101      	movs	r1, #1
 800126e:	fa01 f202 	lsl.w	r2, r1, r2
 8001272:	431a      	orrs	r2, r3
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	601a      	str	r2, [r3, #0]
	if(value >= ptr->max_warning || value <= ptr->min_warning) *warning_ptr |= (1 << bit_pos);//warning
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	ee07 3a90 	vmov	s15, r3
 800127e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	edd3 7a02 	vldr	s15, [r3, #8]
 8001288:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800128c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001290:	da0d      	bge.n	80012ae <check_value+0x8a>
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	ee07 3a90 	vmov	s15, r3
 8001298:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	edd3 7a00 	vldr	s15, [r3]
 80012a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012aa:	d900      	bls.n	80012ae <check_value+0x8a>
}
 80012ac:	e008      	b.n	80012c0 <check_value+0x9c>
	if(value >= ptr->max_warning || value <= ptr->min_warning) *warning_ptr |= (1 << bit_pos);//warning
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	7e3a      	ldrb	r2, [r7, #24]
 80012b4:	2101      	movs	r1, #1
 80012b6:	fa01 f202 	lsl.w	r2, r1, r2
 80012ba:	431a      	orrs	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	601a      	str	r2, [r3, #0]
}
 80012c0:	bf00      	nop
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <BLDC_main>:

volatile float theta;
volatile float mag;


void BLDC_main(void){
 80012cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ce:	b08d      	sub	sp, #52	; 0x34
 80012d0:	af06      	add	r7, sp, #24
	Flash_init();
 80012d2:	f002 f8c3 	bl	800345c <Flash_init>
	storage = Flash_get_values();
 80012d6:	f002 f8f9 	bl	80034cc <Flash_get_values>
 80012da:	4603      	mov	r3, r0
 80012dc:	4a8b      	ldr	r2, [pc, #556]	; (800150c <BLDC_main+0x240>)
 80012de:	6013      	str	r3, [r2, #0]

	HAL_Delay(100);
 80012e0:	2064      	movs	r0, #100	; 0x64
 80012e2:	f004 fd4f 	bl	8005d84 <HAL_Delay>
	//----------------PID---------
	SetSampleTime(&Current_PID, 50); //50us = 20kHz
 80012e6:	2132      	movs	r1, #50	; 0x32
 80012e8:	4889      	ldr	r0, [pc, #548]	; (8001510 <BLDC_main+0x244>)
 80012ea:	f002 fa65 	bl	80037b8 <SetSampleTime>
	SetTunings(&Current_PID, storage->Current_kp, storage->Current_ki, storage->Current_kd, 1);
 80012ee:	4b87      	ldr	r3, [pc, #540]	; (800150c <BLDC_main+0x240>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80012f6:	4b85      	ldr	r3, [pc, #532]	; (800150c <BLDC_main+0x240>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80012fe:	4b83      	ldr	r3, [pc, #524]	; (800150c <BLDC_main+0x240>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8001306:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800130a:	eeb0 1a66 	vmov.f32	s2, s13
 800130e:	eef0 0a47 	vmov.f32	s1, s14
 8001312:	eeb0 0a67 	vmov.f32	s0, s15
 8001316:	487e      	ldr	r0, [pc, #504]	; (8001510 <BLDC_main+0x244>)
 8001318:	f002 f994 	bl	8003644 <SetTunings>
	SetOutputLimits(&Current_PID, -1500, 1500);
 800131c:	eddf 0a7d 	vldr	s1, [pc, #500]	; 8001514 <BLDC_main+0x248>
 8001320:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8001518 <BLDC_main+0x24c>
 8001324:	487a      	ldr	r0, [pc, #488]	; (8001510 <BLDC_main+0x244>)
 8001326:	f002 fa7b 	bl	8003820 <SetOutputLimits>
	SetControllerDirection(&Current_PID, DIRECT);
 800132a:	2100      	movs	r1, #0
 800132c:	4878      	ldr	r0, [pc, #480]	; (8001510 <BLDC_main+0x244>)
 800132e:	f002 fb27 	bl	8003980 <SetControllerDirection>
	SetMode(&Current_PID,  AUTOMATIC);
 8001332:	2101      	movs	r1, #1
 8001334:	4876      	ldr	r0, [pc, #472]	; (8001510 <BLDC_main+0x244>)
 8001336:	f002 facf 	bl	80038d8 <SetMode>
	Initialize(&Current_PID);
 800133a:	4875      	ldr	r0, [pc, #468]	; (8001510 <BLDC_main+0x244>)
 800133c:	f002 faee 	bl	800391c <Initialize>

	SetSampleTime(&Velocity_PID, 50); //50us = 20kHz
 8001340:	2132      	movs	r1, #50	; 0x32
 8001342:	4876      	ldr	r0, [pc, #472]	; (800151c <BLDC_main+0x250>)
 8001344:	f002 fa38 	bl	80037b8 <SetSampleTime>
	SetTunings(&Velocity_PID, storage->Velocity_kp, storage->Velocity_ki, storage->Velocity_kd, 1);
 8001348:	4b70      	ldr	r3, [pc, #448]	; (800150c <BLDC_main+0x240>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001350:	4b6e      	ldr	r3, [pc, #440]	; (800150c <BLDC_main+0x240>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001358:	4b6c      	ldr	r3, [pc, #432]	; (800150c <BLDC_main+0x240>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8001360:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8001364:	eeb0 1a66 	vmov.f32	s2, s13
 8001368:	eef0 0a47 	vmov.f32	s1, s14
 800136c:	eeb0 0a67 	vmov.f32	s0, s15
 8001370:	486a      	ldr	r0, [pc, #424]	; (800151c <BLDC_main+0x250>)
 8001372:	f002 f967 	bl	8003644 <SetTunings>
	SetOutputLimits(&Velocity_PID, -(storage->Current_limit*1000.0f), (storage->Current_limit*1000.0f));
 8001376:	4b65      	ldr	r3, [pc, #404]	; (800150c <BLDC_main+0x240>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800137c:	ee07 3a90 	vmov	s15, r3
 8001380:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001384:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8001520 <BLDC_main+0x254>
 8001388:	ee67 7a87 	vmul.f32	s15, s15, s14
 800138c:	eeb1 7a67 	vneg.f32	s14, s15
 8001390:	4b5e      	ldr	r3, [pc, #376]	; (800150c <BLDC_main+0x240>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001396:	ee07 3a90 	vmov	s15, r3
 800139a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800139e:	eddf 6a60 	vldr	s13, [pc, #384]	; 8001520 <BLDC_main+0x254>
 80013a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80013a6:	eef0 0a67 	vmov.f32	s1, s15
 80013aa:	eeb0 0a47 	vmov.f32	s0, s14
 80013ae:	485b      	ldr	r0, [pc, #364]	; (800151c <BLDC_main+0x250>)
 80013b0:	f002 fa36 	bl	8003820 <SetOutputLimits>
	SetControllerDirection(&Velocity_PID, DIRECT);
 80013b4:	2100      	movs	r1, #0
 80013b6:	4859      	ldr	r0, [pc, #356]	; (800151c <BLDC_main+0x250>)
 80013b8:	f002 fae2 	bl	8003980 <SetControllerDirection>
	SetMode(&Velocity_PID,  AUTOMATIC);
 80013bc:	2101      	movs	r1, #1
 80013be:	4857      	ldr	r0, [pc, #348]	; (800151c <BLDC_main+0x250>)
 80013c0:	f002 fa8a 	bl	80038d8 <SetMode>
	Initialize(&Velocity_PID);
 80013c4:	4855      	ldr	r0, [pc, #340]	; (800151c <BLDC_main+0x250>)
 80013c6:	f002 faa9 	bl	800391c <Initialize>

	SetSampleTime(&Angle_PID, 50); //50us = 20kHz
 80013ca:	2132      	movs	r1, #50	; 0x32
 80013cc:	4855      	ldr	r0, [pc, #340]	; (8001524 <BLDC_main+0x258>)
 80013ce:	f002 f9f3 	bl	80037b8 <SetSampleTime>
	SetTunings(&Angle_PID, storage->Angle_kp, storage->Angle_ki, storage->Angle_kd, 1);
 80013d2:	4b4e      	ldr	r3, [pc, #312]	; (800150c <BLDC_main+0x240>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	edd3 7a08 	vldr	s15, [r3, #32]
 80013da:	4b4c      	ldr	r3, [pc, #304]	; (800150c <BLDC_main+0x240>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80013e2:	4b4a      	ldr	r3, [pc, #296]	; (800150c <BLDC_main+0x240>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80013ea:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80013ee:	eeb0 1a66 	vmov.f32	s2, s13
 80013f2:	eef0 0a47 	vmov.f32	s1, s14
 80013f6:	eeb0 0a67 	vmov.f32	s0, s15
 80013fa:	484a      	ldr	r0, [pc, #296]	; (8001524 <BLDC_main+0x258>)
 80013fc:	f002 f922 	bl	8003644 <SetTunings>
	SetOutputLimits(&Angle_PID, -(storage->Velocity_limit*1000.0f), (storage->Velocity_limit*1000.0f));
 8001400:	4b42      	ldr	r3, [pc, #264]	; (800150c <BLDC_main+0x240>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001406:	ee07 3a90 	vmov	s15, r3
 800140a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800140e:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8001520 <BLDC_main+0x254>
 8001412:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001416:	eeb1 7a67 	vneg.f32	s14, s15
 800141a:	4b3c      	ldr	r3, [pc, #240]	; (800150c <BLDC_main+0x240>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001420:	ee07 3a90 	vmov	s15, r3
 8001424:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001428:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8001520 <BLDC_main+0x254>
 800142c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001430:	eef0 0a67 	vmov.f32	s1, s15
 8001434:	eeb0 0a47 	vmov.f32	s0, s14
 8001438:	483a      	ldr	r0, [pc, #232]	; (8001524 <BLDC_main+0x258>)
 800143a:	f002 f9f1 	bl	8003820 <SetOutputLimits>
	SetControllerDirection(&Angle_PID, DIRECT);
 800143e:	2100      	movs	r1, #0
 8001440:	4838      	ldr	r0, [pc, #224]	; (8001524 <BLDC_main+0x258>)
 8001442:	f002 fa9d 	bl	8003980 <SetControllerDirection>
	SetMode(&Angle_PID,  AUTOMATIC);
 8001446:	2101      	movs	r1, #1
 8001448:	4836      	ldr	r0, [pc, #216]	; (8001524 <BLDC_main+0x258>)
 800144a:	f002 fa45 	bl	80038d8 <SetMode>
	Initialize(&Angle_PID);
 800144e:	4835      	ldr	r0, [pc, #212]	; (8001524 <BLDC_main+0x258>)
 8001450:	f002 fa64 	bl	800391c <Initialize>

	SetSampleTime(&Current_PID_offset, 50); //50us = 20kHz
 8001454:	2132      	movs	r1, #50	; 0x32
 8001456:	4834      	ldr	r0, [pc, #208]	; (8001528 <BLDC_main+0x25c>)
 8001458:	f002 f9ae 	bl	80037b8 <SetSampleTime>
	SetTunings(&Current_PID_offset, storage->Current_offset_kp, storage->Current_offset_ki, storage->Current_offset_kd, 1);
 800145c:	4b2b      	ldr	r3, [pc, #172]	; (800150c <BLDC_main+0x240>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001464:	4b29      	ldr	r3, [pc, #164]	; (800150c <BLDC_main+0x240>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800146c:	4b27      	ldr	r3, [pc, #156]	; (800150c <BLDC_main+0x240>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 8001474:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8001478:	eeb0 1a66 	vmov.f32	s2, s13
 800147c:	eef0 0a47 	vmov.f32	s1, s14
 8001480:	eeb0 0a67 	vmov.f32	s0, s15
 8001484:	4828      	ldr	r0, [pc, #160]	; (8001528 <BLDC_main+0x25c>)
 8001486:	f002 f8dd 	bl	8003644 <SetTunings>
	SetOutputLimits(&Current_PID_offset, -1500, 1500);
 800148a:	eddf 0a22 	vldr	s1, [pc, #136]	; 8001514 <BLDC_main+0x248>
 800148e:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8001518 <BLDC_main+0x24c>
 8001492:	4825      	ldr	r0, [pc, #148]	; (8001528 <BLDC_main+0x25c>)
 8001494:	f002 f9c4 	bl	8003820 <SetOutputLimits>
	SetControllerDirection(&Current_PID_offset, DIRECT);
 8001498:	2100      	movs	r1, #0
 800149a:	4823      	ldr	r0, [pc, #140]	; (8001528 <BLDC_main+0x25c>)
 800149c:	f002 fa70 	bl	8003980 <SetControllerDirection>
	SetMode(&Current_PID_offset,  AUTOMATIC);
 80014a0:	2101      	movs	r1, #1
 80014a2:	4821      	ldr	r0, [pc, #132]	; (8001528 <BLDC_main+0x25c>)
 80014a4:	f002 fa18 	bl	80038d8 <SetMode>
	Initialize(&Current_PID_offset);
 80014a8:	481f      	ldr	r0, [pc, #124]	; (8001528 <BLDC_main+0x25c>)
 80014aa:	f002 fa37 	bl	800391c <Initialize>

	//setup encoder
	ORBIS_init((void*)&Encoders_IRQ);
 80014ae:	481f      	ldr	r0, [pc, #124]	; (800152c <BLDC_main+0x260>)
 80014b0:	f001 fe18 	bl	80030e4 <ORBIS_init>

	//setup current
	current_init((void*)&Current_IRQ);
 80014b4:	481e      	ldr	r0, [pc, #120]	; (8001530 <BLDC_main+0x264>)
 80014b6:	f002 fb61 	bl	8003b7c <current_init>

	//setup voltage and temperature readings
	voltage_temperature_init((void*)&Voltage_Temp_IRQ);
 80014ba:	481e      	ldr	r0, [pc, #120]	; (8001534 <BLDC_main+0x268>)
 80014bc:	f002 fb84 	bl	8003bc8 <voltage_temperature_init>
	//setup CAN
	//-----------------CAN----------------------
	FDCAN_addCallback(&hfdcan1, (CAN_STATUS_ID << 8) 		| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_Status_IRQ);
 80014c0:	4a1d      	ldr	r2, [pc, #116]	; (8001538 <BLDC_main+0x26c>)
 80014c2:	2136      	movs	r1, #54	; 0x36
 80014c4:	481d      	ldr	r0, [pc, #116]	; (800153c <BLDC_main+0x270>)
 80014c6:	f002 fe45 	bl	8004154 <FDCAN_addCallback>
//	FDCAN_addCallback(&hfdcan1, (CAN_PID_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_PID_IRQ);

	FDCAN_Start(&hfdcan1);
 80014ca:	481c      	ldr	r0, [pc, #112]	; (800153c <BLDC_main+0x270>)
 80014cc:	f002 fe26 	bl	800411c <FDCAN_Start>

	//--------------setup PWM------------------
	electrical_offset = storage->electrical_offset;
 80014d0:	4b0e      	ldr	r3, [pc, #56]	; (800150c <BLDC_main+0x240>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80014d6:	4a1a      	ldr	r2, [pc, #104]	; (8001540 <BLDC_main+0x274>)
 80014d8:	6013      	str	r3, [r2, #0]
	PHASE_ORDER = storage->PHASE_ORDER;
 80014da:	4b0c      	ldr	r3, [pc, #48]	; (800150c <BLDC_main+0x240>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 80014e2:	4b18      	ldr	r3, [pc, #96]	; (8001544 <BLDC_main+0x278>)
 80014e4:	701a      	strb	r2, [r3, #0]
	mech_offset = storage->mech_offset;//storage->mech_offset;
 80014e6:	4b09      	ldr	r3, [pc, #36]	; (800150c <BLDC_main+0x240>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f8b3 24a8 	ldrh.w	r2, [r3, #1192]	; 0x4a8
 80014ee:	4b16      	ldr	r3, [pc, #88]	; (8001548 <BLDC_main+0x27c>)
 80014f0:	801a      	strh	r2, [r3, #0]
	if(mech_offset > 400)mech_offset = 0;
 80014f2:	4b15      	ldr	r3, [pc, #84]	; (8001548 <BLDC_main+0x27c>)
 80014f4:	881b      	ldrh	r3, [r3, #0]
 80014f6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80014fa:	d902      	bls.n	8001502 <BLDC_main+0x236>
 80014fc:	4b12      	ldr	r3, [pc, #72]	; (8001548 <BLDC_main+0x27c>)
 80014fe:	2200      	movs	r2, #0
 8001500:	801a      	strh	r2, [r3, #0]
	uint8_t flash_nan = 0;
 8001502:	2300      	movs	r3, #0
 8001504:	75fb      	strb	r3, [r7, #23]
	for(int i = 0; i < SIZE*NPP; i++){
 8001506:	2300      	movs	r3, #0
 8001508:	613b      	str	r3, [r7, #16]
 800150a:	e031      	b.n	8001570 <BLDC_main+0x2a4>
 800150c:	20000abc 	.word	0x20000abc
 8001510:	200009f8 	.word	0x200009f8
 8001514:	44bb8000 	.word	0x44bb8000
 8001518:	c4bb8000 	.word	0xc4bb8000
 800151c:	20000a38 	.word	0x20000a38
 8001520:	447a0000 	.word	0x447a0000
 8001524:	20000a78 	.word	0x20000a78
 8001528:	200009b8 	.word	0x200009b8
 800152c:	0800116d 	.word	0x0800116d
 8001530:	0800111d 	.word	0x0800111d
 8001534:	0800114d 	.word	0x0800114d
 8001538:	0800118d 	.word	0x0800118d
 800153c:	20001ab8 	.word	0x20001ab8
 8001540:	20000f6c 	.word	0x20000f6c
 8001544:	20000f68 	.word	0x20000f68
 8001548:	20000ac0 	.word	0x20000ac0
		if (isnan(storage->error_filt[i]))flash_nan = 1;
 800154c:	4b9a      	ldr	r3, [pc, #616]	; (80017b8 <BLDC_main+0x4ec>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	331a      	adds	r3, #26
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	4413      	add	r3, r2
 8001558:	edd3 7a00 	vldr	s15, [r3]
 800155c:	eef4 7a67 	vcmp.f32	s15, s15
 8001560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001564:	d701      	bvc.n	800156a <BLDC_main+0x29e>
 8001566:	2301      	movs	r3, #1
 8001568:	75fb      	strb	r3, [r7, #23]
	for(int i = 0; i < SIZE*NPP; i++){
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	3301      	adds	r3, #1
 800156e:	613b      	str	r3, [r7, #16]
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8001576:	dbe9      	blt.n	800154c <BLDC_main+0x280>
	}
	if(!flash_nan)memcpy(error_filt, storage->error_filt,sizeof(error_filt));
 8001578:	7dfb      	ldrb	r3, [r7, #23]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d108      	bne.n	8001590 <BLDC_main+0x2c4>
 800157e:	4b8e      	ldr	r3, [pc, #568]	; (80017b8 <BLDC_main+0x4ec>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	3368      	adds	r3, #104	; 0x68
 8001584:	f44f 6288 	mov.w	r2, #1088	; 0x440
 8001588:	4619      	mov	r1, r3
 800158a:	488c      	ldr	r0, [pc, #560]	; (80017bc <BLDC_main+0x4f0>)
 800158c:	f00d ff1f 	bl	800f3ce <memcpy>

	uint32_t test = 1499;
 8001590:	f240 53db 	movw	r3, #1499	; 0x5db
 8001594:	60fb      	str	r3, [r7, #12]
	CTRL_init_PWM(&test);
 8001596:	f107 030c 	add.w	r3, r7, #12
 800159a:	4618      	mov	r0, r3
 800159c:	f000 fdfa 	bl	8002194 <CTRL_init_PWM>

	#ifdef CALIBRATE_ON_STARTUP
	Status = BLDC_CALIBRATING_ENCODER;
	#endif

	HAL_TIM_Base_Start_IT(&htim2); //20khz update rate for PID loops
 80015a0:	4887      	ldr	r0, [pc, #540]	; (80017c0 <BLDC_main+0x4f4>)
 80015a2:	f00a f897 	bl	800b6d4 <HAL_TIM_Base_Start_IT>
	while(1){

		if (Status == BLDC_CALIBRATING_ENCODER){
 80015a6:	4b87      	ldr	r3, [pc, #540]	; (80017c4 <BLDC_main+0x4f8>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d13e      	bne.n	800162c <BLDC_main+0x360>
			HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
 80015ae:	2201      	movs	r2, #1
 80015b0:	2140      	movs	r1, #64	; 0x40
 80015b2:	4885      	ldr	r0, [pc, #532]	; (80017c8 <BLDC_main+0x4fc>)
 80015b4:	f008 f9e0 	bl	8009978 <HAL_GPIO_WritePin>
			order_phases(&IRQ_Encoders, &IRQ_Current);
 80015b8:	4984      	ldr	r1, [pc, #528]	; (80017cc <BLDC_main+0x500>)
 80015ba:	4885      	ldr	r0, [pc, #532]	; (80017d0 <BLDC_main+0x504>)
 80015bc:	f000 ffc8 	bl	8002550 <order_phases>
			calibrate(&IRQ_Encoders, &IRQ_Current);
 80015c0:	4982      	ldr	r1, [pc, #520]	; (80017cc <BLDC_main+0x500>)
 80015c2:	4883      	ldr	r0, [pc, #524]	; (80017d0 <BLDC_main+0x504>)
 80015c4:	f001 f938 	bl	8002838 <calibrate>

			//start calibration
			storage->mech_offset = (int16_t)(IRQ_Encoders.Encoder1_pos/1000)%360;
 80015c8:	4b81      	ldr	r3, [pc, #516]	; (80017d0 <BLDC_main+0x504>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a81      	ldr	r2, [pc, #516]	; (80017d4 <BLDC_main+0x508>)
 80015ce:	fba2 2303 	umull	r2, r3, r2, r3
 80015d2:	099b      	lsrs	r3, r3, #6
 80015d4:	b21b      	sxth	r3, r3
 80015d6:	4a80      	ldr	r2, [pc, #512]	; (80017d8 <BLDC_main+0x50c>)
 80015d8:	fb82 1203 	smull	r1, r2, r2, r3
 80015dc:	441a      	add	r2, r3
 80015de:	1211      	asrs	r1, r2, #8
 80015e0:	17da      	asrs	r2, r3, #31
 80015e2:	1a8a      	subs	r2, r1, r2
 80015e4:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80015e8:	fb01 f202 	mul.w	r2, r1, r2
 80015ec:	1a9b      	subs	r3, r3, r2
 80015ee:	b21a      	sxth	r2, r3
 80015f0:	4b71      	ldr	r3, [pc, #452]	; (80017b8 <BLDC_main+0x4ec>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	b292      	uxth	r2, r2
 80015f6:	f8a3 24a8 	strh.w	r2, [r3, #1192]	; 0x4a8
			storage->electrical_offset = electrical_offset;
 80015fa:	4b6f      	ldr	r3, [pc, #444]	; (80017b8 <BLDC_main+0x4ec>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a77      	ldr	r2, [pc, #476]	; (80017dc <BLDC_main+0x510>)
 8001600:	6812      	ldr	r2, [r2, #0]
 8001602:	665a      	str	r2, [r3, #100]	; 0x64
			storage->PHASE_ORDER = PHASE_ORDER;
 8001604:	4b6c      	ldr	r3, [pc, #432]	; (80017b8 <BLDC_main+0x4ec>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a75      	ldr	r2, [pc, #468]	; (80017e0 <BLDC_main+0x514>)
 800160a:	7812      	ldrb	r2, [r2, #0]
 800160c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			memcpy(storage->error_filt,error_filt,sizeof(error_filt));
 8001610:	4b69      	ldr	r3, [pc, #420]	; (80017b8 <BLDC_main+0x4ec>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	3368      	adds	r3, #104	; 0x68
 8001616:	f44f 6288 	mov.w	r2, #1088	; 0x440
 800161a:	4968      	ldr	r1, [pc, #416]	; (80017bc <BLDC_main+0x4f0>)
 800161c:	4618      	mov	r0, r3
 800161e:	f00d fed6 	bl	800f3ce <memcpy>
			Flash_save();
 8001622:	f001 ff47 	bl	80034b4 <Flash_save>
			Status = BLDC_STOPPED_WITH_BREAK;
 8001626:	4b67      	ldr	r3, [pc, #412]	; (80017c4 <BLDC_main+0x4f8>)
 8001628:	2200      	movs	r2, #0
 800162a:	701a      	strb	r2, [r3, #0]
		}
		//calculate();

		timing_CAN_feedback++;
 800162c:	4b6d      	ldr	r3, [pc, #436]	; (80017e4 <BLDC_main+0x518>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	3301      	adds	r3, #1
 8001632:	4a6c      	ldr	r2, [pc, #432]	; (80017e4 <BLDC_main+0x518>)
 8001634:	6013      	str	r3, [r2, #0]
		if(1 || timing_CAN_feedback >= LOOP_FREQ_KHZ*5){ //every 5ms
			timing_CAN_feedback = 0;
 8001636:	4b6b      	ldr	r3, [pc, #428]	; (80017e4 <BLDC_main+0x518>)
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
			Feedback.Status_warning = warning;
 800163c:	4b6a      	ldr	r3, [pc, #424]	; (80017e8 <BLDC_main+0x51c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a6a      	ldr	r2, [pc, #424]	; (80017ec <BLDC_main+0x520>)
 8001642:	6053      	str	r3, [r2, #4]
			Feedback.Status_faults = error;
 8001644:	4b6a      	ldr	r3, [pc, #424]	; (80017f0 <BLDC_main+0x524>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a68      	ldr	r2, [pc, #416]	; (80017ec <BLDC_main+0x520>)
 800164a:	6093      	str	r3, [r2, #8]
			Feedback.Status_setpoint = IRQ_STATUS_BUFF.setpoint;
 800164c:	4b69      	ldr	r3, [pc, #420]	; (80017f4 <BLDC_main+0x528>)
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	4a66      	ldr	r2, [pc, #408]	; (80017ec <BLDC_main+0x520>)
 8001652:	60d3      	str	r3, [r2, #12]
			Feedback.Status_mode = Status;
 8001654:	4b5b      	ldr	r3, [pc, #364]	; (80017c4 <BLDC_main+0x4f8>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	461a      	mov	r2, r3
 800165a:	4b64      	ldr	r3, [pc, #400]	; (80017ec <BLDC_main+0x520>)
 800165c:	601a      	str	r2, [r3, #0]

			Feedback.Current_DC = IRQ_Current_BUFF.Current_DC;
 800165e:	4b66      	ldr	r3, [pc, #408]	; (80017f8 <BLDC_main+0x52c>)
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	461a      	mov	r2, r3
 8001664:	4b61      	ldr	r3, [pc, #388]	; (80017ec <BLDC_main+0x520>)
 8001666:	62da      	str	r2, [r3, #44]	; 0x2c
			Feedback.Current_M1 = IRQ_Current_BUFF.Current_M1;
 8001668:	4b63      	ldr	r3, [pc, #396]	; (80017f8 <BLDC_main+0x52c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a5f      	ldr	r2, [pc, #380]	; (80017ec <BLDC_main+0x520>)
 800166e:	6213      	str	r3, [r2, #32]
			Feedback.Current_M2 = IRQ_Current_BUFF.Current_M2;
 8001670:	4b61      	ldr	r3, [pc, #388]	; (80017f8 <BLDC_main+0x52c>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	4a5d      	ldr	r2, [pc, #372]	; (80017ec <BLDC_main+0x520>)
 8001676:	6253      	str	r3, [r2, #36]	; 0x24
			Feedback.Current_M3 = IRQ_Current_BUFF.Current_M3;
 8001678:	4b5f      	ldr	r3, [pc, #380]	; (80017f8 <BLDC_main+0x52c>)
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	4a5b      	ldr	r2, [pc, #364]	; (80017ec <BLDC_main+0x520>)
 800167e:	6293      	str	r3, [r2, #40]	; 0x28

			Feedback.Voltage_AUX = IRQ_Voltage_Temp_BUFF.V_aux;
 8001680:	4b5e      	ldr	r3, [pc, #376]	; (80017fc <BLDC_main+0x530>)
 8001682:	889b      	ldrh	r3, [r3, #4]
 8001684:	461a      	mov	r2, r3
 8001686:	4b59      	ldr	r3, [pc, #356]	; (80017ec <BLDC_main+0x520>)
 8001688:	63da      	str	r2, [r3, #60]	; 0x3c
			Feedback.Voltage_BAT = IRQ_Voltage_Temp_BUFF.V_Bat;
 800168a:	4b5c      	ldr	r3, [pc, #368]	; (80017fc <BLDC_main+0x530>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a57      	ldr	r2, [pc, #348]	; (80017ec <BLDC_main+0x520>)
 8001690:	6393      	str	r3, [r2, #56]	; 0x38
			Feedback.Temp_NTC1 = IRQ_Voltage_Temp_BUFF.Temp_NTC1;
 8001692:	4b5a      	ldr	r3, [pc, #360]	; (80017fc <BLDC_main+0x530>)
 8001694:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8001698:	4b54      	ldr	r3, [pc, #336]	; (80017ec <BLDC_main+0x520>)
 800169a:	861a      	strh	r2, [r3, #48]	; 0x30
			Feedback.Temp_NTC2 = IRQ_Voltage_Temp_BUFF.Temp_NTC2;
 800169c:	4b57      	ldr	r3, [pc, #348]	; (80017fc <BLDC_main+0x530>)
 800169e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80016a2:	4b52      	ldr	r3, [pc, #328]	; (80017ec <BLDC_main+0x520>)
 80016a4:	865a      	strh	r2, [r3, #50]	; 0x32
			Feedback.Temp_ENCODER1 = IRQ_Encoders_BUFF.Encoder1_temp_x10;
 80016a6:	4b56      	ldr	r3, [pc, #344]	; (8001800 <BLDC_main+0x534>)
 80016a8:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 80016ac:	4b4f      	ldr	r3, [pc, #316]	; (80017ec <BLDC_main+0x520>)
 80016ae:	869a      	strh	r2, [r3, #52]	; 0x34
			Feedback.Temp_ENCODER2 = IRQ_Encoders_BUFF.Encoder2_temp_x10;
 80016b0:	4b53      	ldr	r3, [pc, #332]	; (8001800 <BLDC_main+0x534>)
 80016b2:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
 80016b6:	4b4d      	ldr	r3, [pc, #308]	; (80017ec <BLDC_main+0x520>)
 80016b8:	86da      	strh	r2, [r3, #54]	; 0x36

			Feedback.Position_Encoder1_pos = IRQ_Encoders_BUFF.Encoder1_pos;
 80016ba:	4b51      	ldr	r3, [pc, #324]	; (8001800 <BLDC_main+0x534>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a4b      	ldr	r2, [pc, #300]	; (80017ec <BLDC_main+0x520>)
 80016c0:	6113      	str	r3, [r2, #16]
			Feedback.Position_Encoder2_pos = IRQ_Encoders_BUFF.Encoder2_pos;
 80016c2:	4b4f      	ldr	r3, [pc, #316]	; (8001800 <BLDC_main+0x534>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	4a49      	ldr	r2, [pc, #292]	; (80017ec <BLDC_main+0x520>)
 80016c8:	6153      	str	r3, [r2, #20]
			Feedback.Position_Calculated_pos = Angle_PID.Input;
 80016ca:	4b4e      	ldr	r3, [pc, #312]	; (8001804 <BLDC_main+0x538>)
 80016cc:	edd3 7a00 	vldr	s15, [r3]
 80016d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016d4:	ee17 2a90 	vmov	r2, s15
 80016d8:	4b44      	ldr	r3, [pc, #272]	; (80017ec <BLDC_main+0x520>)
 80016da:	619a      	str	r2, [r3, #24]
			Feedback.Position_Velocity = IRQ_Encoders_BUFF.Velocity;
 80016dc:	4b48      	ldr	r3, [pc, #288]	; (8001800 <BLDC_main+0x534>)
 80016de:	695b      	ldr	r3, [r3, #20]
 80016e0:	4a42      	ldr	r2, [pc, #264]	; (80017ec <BLDC_main+0x520>)
 80016e2:	61d3      	str	r3, [r2, #28]
			FDCAN_sendData(&hfdcan1, (CAN_FEEDBACK_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (uint8_t*)&Feedback);
 80016e4:	4a41      	ldr	r2, [pc, #260]	; (80017ec <BLDC_main+0x520>)
 80016e6:	f240 4136 	movw	r1, #1078	; 0x436
 80016ea:	4847      	ldr	r0, [pc, #284]	; (8001808 <BLDC_main+0x53c>)
 80016ec:	f002 fd6e 	bl	80041cc <FDCAN_sendData>

			//-----------------PRINTF DEBUGGING-------------------

			//will print same info as on CAN-BUS
			#ifdef PRINT_DEBUG
			PrintServerPrintf(
 80016f0:	4b3e      	ldr	r3, [pc, #248]	; (80017ec <BLDC_main+0x520>)
 80016f2:	6a19      	ldr	r1, [r3, #32]
 80016f4:	4b3d      	ldr	r3, [pc, #244]	; (80017ec <BLDC_main+0x520>)
 80016f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016f8:	4b3c      	ldr	r3, [pc, #240]	; (80017ec <BLDC_main+0x520>)
 80016fa:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80016fc:	4b3b      	ldr	r3, [pc, #236]	; (80017ec <BLDC_main+0x520>)
 80016fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					#ifdef print
					"test[c:%f s:%f]"
					#endif
					"\r\n"
					#ifdef Current_debug
					, Feedback.Current_M1,  Feedback.Current_M2, Feedback.Current_M3, Feedback.Current_DC, (int32_t)Current_PID.Output, (int16_t)d_lpf, (int16_t)q_lpf, (int16_t)theta , (int16_t)Current_PID_offset.Output // test
 8001700:	4c42      	ldr	r4, [pc, #264]	; (800180c <BLDC_main+0x540>)
 8001702:	edd4 7a01 	vldr	s15, [r4, #4]
			PrintServerPrintf(
 8001706:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800170a:	edc7 7a01 	vstr	s15, [r7, #4]
					, Feedback.Current_M1,  Feedback.Current_M2, Feedback.Current_M3, Feedback.Current_DC, (int32_t)Current_PID.Output, (int16_t)d_lpf, (int16_t)q_lpf, (int16_t)theta , (int16_t)Current_PID_offset.Output // test
 800170e:	4c40      	ldr	r4, [pc, #256]	; (8001810 <BLDC_main+0x544>)
 8001710:	edd4 7a00 	vldr	s15, [r4]
 8001714:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001718:	ee17 4a90 	vmov	r4, s15
 800171c:	b224      	sxth	r4, r4
			PrintServerPrintf(
 800171e:	4625      	mov	r5, r4
					, Feedback.Current_M1,  Feedback.Current_M2, Feedback.Current_M3, Feedback.Current_DC, (int32_t)Current_PID.Output, (int16_t)d_lpf, (int16_t)q_lpf, (int16_t)theta , (int16_t)Current_PID_offset.Output // test
 8001720:	4c3c      	ldr	r4, [pc, #240]	; (8001814 <BLDC_main+0x548>)
 8001722:	edd4 7a00 	vldr	s15, [r4]
 8001726:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800172a:	ee17 4a90 	vmov	r4, s15
 800172e:	b224      	sxth	r4, r4
			PrintServerPrintf(
 8001730:	4626      	mov	r6, r4
					, Feedback.Current_M1,  Feedback.Current_M2, Feedback.Current_M3, Feedback.Current_DC, (int32_t)Current_PID.Output, (int16_t)d_lpf, (int16_t)q_lpf, (int16_t)theta , (int16_t)Current_PID_offset.Output // test
 8001732:	4c39      	ldr	r4, [pc, #228]	; (8001818 <BLDC_main+0x54c>)
 8001734:	edd4 7a00 	vldr	s15, [r4]
 8001738:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800173c:	ee17 4a90 	vmov	r4, s15
 8001740:	b224      	sxth	r4, r4
			PrintServerPrintf(
 8001742:	603c      	str	r4, [r7, #0]
					, Feedback.Current_M1,  Feedback.Current_M2, Feedback.Current_M3, Feedback.Current_DC, (int32_t)Current_PID.Output, (int16_t)d_lpf, (int16_t)q_lpf, (int16_t)theta , (int16_t)Current_PID_offset.Output // test
 8001744:	4c35      	ldr	r4, [pc, #212]	; (800181c <BLDC_main+0x550>)
 8001746:	edd4 7a01 	vldr	s15, [r4, #4]
 800174a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800174e:	ee17 4a90 	vmov	r4, s15
 8001752:	b224      	sxth	r4, r4
			PrintServerPrintf(
 8001754:	9405      	str	r4, [sp, #20]
 8001756:	683c      	ldr	r4, [r7, #0]
 8001758:	9404      	str	r4, [sp, #16]
 800175a:	9603      	str	r6, [sp, #12]
 800175c:	9502      	str	r5, [sp, #8]
 800175e:	687c      	ldr	r4, [r7, #4]
 8001760:	9401      	str	r4, [sp, #4]
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	4603      	mov	r3, r0
 8001766:	482e      	ldr	r0, [pc, #184]	; (8001820 <BLDC_main+0x554>)
 8001768:	f002 f918 	bl	800399c <PrintServerPrintf>
					#endif
			); // \r only goes back not to next line!
			#endif
		}

		if(error)HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 1);
 800176c:	4b20      	ldr	r3, [pc, #128]	; (80017f0 <BLDC_main+0x524>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d007      	beq.n	8001784 <BLDC_main+0x4b8>
 8001774:	2201      	movs	r2, #1
 8001776:	f44f 7100 	mov.w	r1, #512	; 0x200
 800177a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800177e:	f008 f8fb 	bl	8009978 <HAL_GPIO_WritePin>
 8001782:	e006      	b.n	8001792 <BLDC_main+0x4c6>
		else HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 0);
 8001784:	2200      	movs	r2, #0
 8001786:	f44f 7100 	mov.w	r1, #512	; 0x200
 800178a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800178e:	f008 f8f3 	bl	8009978 <HAL_GPIO_WritePin>
		if(warning)HAL_GPIO_WritePin(WARNING_LED_GPIO_Port, WARNING_LED_Pin, 1);
 8001792:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <BLDC_main+0x51c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d005      	beq.n	80017a6 <BLDC_main+0x4da>
 800179a:	2201      	movs	r2, #1
 800179c:	2180      	movs	r1, #128	; 0x80
 800179e:	480a      	ldr	r0, [pc, #40]	; (80017c8 <BLDC_main+0x4fc>)
 80017a0:	f008 f8ea 	bl	8009978 <HAL_GPIO_WritePin>
 80017a4:	e004      	b.n	80017b0 <BLDC_main+0x4e4>
		else HAL_GPIO_WritePin(WARNING_LED_GPIO_Port, WARNING_LED_Pin, 0);
 80017a6:	2200      	movs	r2, #0
 80017a8:	2180      	movs	r1, #128	; 0x80
 80017aa:	4807      	ldr	r0, [pc, #28]	; (80017c8 <BLDC_main+0x4fc>)
 80017ac:	f008 f8e4 	bl	8009978 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin);
		}
		#endif
		#endif

		HAL_Delay(5);
 80017b0:	2005      	movs	r0, #5
 80017b2:	f004 fae7 	bl	8005d84 <HAL_Delay>
		if (Status == BLDC_CALIBRATING_ENCODER){
 80017b6:	e6f6      	b.n	80015a6 <BLDC_main+0x2da>
 80017b8:	20000abc 	.word	0x20000abc
 80017bc:	20000b28 	.word	0x20000b28
 80017c0:	20001f0c 	.word	0x20001f0c
 80017c4:	20000b08 	.word	0x20000b08
 80017c8:	48000800 	.word	0x48000800
 80017cc:	2000076c 	.word	0x2000076c
 80017d0:	20000788 	.word	0x20000788
 80017d4:	10624dd3 	.word	0x10624dd3
 80017d8:	b60b60b7 	.word	0xb60b60b7
 80017dc:	20000f6c 	.word	0x20000f6c
 80017e0:	20000f68 	.word	0x20000f68
 80017e4:	20000760 	.word	0x20000760
 80017e8:	20000b14 	.word	0x20000b14
 80017ec:	20000978 	.word	0x20000978
 80017f0:	20000768 	.word	0x20000768
 80017f4:	20000afc 	.word	0x20000afc
 80017f8:	20000ac4 	.word	0x20000ac4
 80017fc:	20000ad4 	.word	0x20000ad4
 8001800:	20000ae0 	.word	0x20000ae0
 8001804:	20000a78 	.word	0x20000a78
 8001808:	20001ab8 	.word	0x20001ab8
 800180c:	200009f8 	.word	0x200009f8
 8001810:	20000b1c 	.word	0x20000b1c
 8001814:	20000b18 	.word	0x20000b18
 8001818:	20000b20 	.word	0x20000b20
 800181c:	200009b8 	.word	0x200009b8
 8001820:	080123d8 	.word	0x080123d8

08001824 <sqrtI>:
	}
}

uint32_t sqrtI(uint32_t sqrtArg)
{
 8001824:	b480      	push	{r7}
 8001826:	b087      	sub	sp, #28
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
uint32_t answer, x;
uint32_t temp;
if ( sqrtArg == 0 ) return 0; // undefined result
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d101      	bne.n	8001836 <sqrtI+0x12>
 8001832:	2300      	movs	r3, #0
 8001834:	e027      	b.n	8001886 <sqrtI+0x62>
if ( sqrtArg == 1 ) return 1; // identity
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d101      	bne.n	8001840 <sqrtI+0x1c>
 800183c:	2301      	movs	r3, #1
 800183e:	e022      	b.n	8001886 <sqrtI+0x62>
answer = 0; // integer square root
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
for( x=0x8000; x>0; x=x>>1 )
 8001844:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001848:	613b      	str	r3, [r7, #16]
 800184a:	e016      	b.n	800187a <sqrtI+0x56>
{ // 16 bit shift
answer |= x; // possible bit in root
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	4313      	orrs	r3, r2
 8001852:	617b      	str	r3, [r7, #20]
temp = answer * answer; // fast unsigned multiply
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	fb03 f303 	mul.w	r3, r3, r3
 800185a:	60fb      	str	r3, [r7, #12]
if (temp == sqrtArg) break; // exact, found it
 800185c:	68fa      	ldr	r2, [r7, #12]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	429a      	cmp	r2, r3
 8001862:	d00e      	beq.n	8001882 <sqrtI+0x5e>
if (temp > sqrtArg) answer ^= x; // too large, reverse bit
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	429a      	cmp	r2, r3
 800186a:	d903      	bls.n	8001874 <sqrtI+0x50>
 800186c:	697a      	ldr	r2, [r7, #20]
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	4053      	eors	r3, r2
 8001872:	617b      	str	r3, [r7, #20]
for( x=0x8000; x>0; x=x>>1 )
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	085b      	lsrs	r3, r3, #1
 8001878:	613b      	str	r3, [r7, #16]
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1e5      	bne.n	800184c <sqrtI+0x28>
 8001880:	e000      	b.n	8001884 <sqrtI+0x60>
if (temp == sqrtArg) break; // exact, found it
 8001882:	bf00      	nop
}
return answer; // approximate root
 8001884:	697b      	ldr	r3, [r7, #20]
}
 8001886:	4618      	mov	r0, r3
 8001888:	371c      	adds	r7, #28
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
	...

08001894 <atan2_approximation2>:
#define PI_FLOAT     3.14159265f
#define PIBY2_FLOAT  1.5707963f
float atan2_approximation2( float y, float x )
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	ed87 0a01 	vstr	s0, [r7, #4]
 800189e:	edc7 0a00 	vstr	s1, [r7]
	if ( x == 0.0f )
 80018a2:	edd7 7a00 	vldr	s15, [r7]
 80018a6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80018aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ae:	d116      	bne.n	80018de <atan2_approximation2+0x4a>
	{
		if ( y > 0.0f ) return PIBY2_FLOAT;
 80018b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80018b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018bc:	dd02      	ble.n	80018c4 <atan2_approximation2+0x30>
 80018be:	eddf 7a3e 	vldr	s15, [pc, #248]	; 80019b8 <atan2_approximation2+0x124>
 80018c2:	e071      	b.n	80019a8 <atan2_approximation2+0x114>
		if ( y == 0.0f ) return 0.0f;
 80018c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80018c8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80018cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d0:	d102      	bne.n	80018d8 <atan2_approximation2+0x44>
 80018d2:	eddf 7a3a 	vldr	s15, [pc, #232]	; 80019bc <atan2_approximation2+0x128>
 80018d6:	e067      	b.n	80019a8 <atan2_approximation2+0x114>
		return -PIBY2_FLOAT;
 80018d8:	eddf 7a39 	vldr	s15, [pc, #228]	; 80019c0 <atan2_approximation2+0x12c>
 80018dc:	e064      	b.n	80019a8 <atan2_approximation2+0x114>
	}
	float atan;
	float z = y/x;
 80018de:	edd7 6a01 	vldr	s13, [r7, #4]
 80018e2:	ed97 7a00 	vldr	s14, [r7]
 80018e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018ea:	edc7 7a02 	vstr	s15, [r7, #8]
	if ( fabs( z ) < 1.0f )
 80018ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80018f2:	eef0 7ae7 	vabs.f32	s15, s15
 80018f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80018fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001902:	d52f      	bpl.n	8001964 <atan2_approximation2+0xd0>
	{
		atan = z/(1.0f + 0.28f*z*z);
 8001904:	edd7 7a02 	vldr	s15, [r7, #8]
 8001908:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80019c4 <atan2_approximation2+0x130>
 800190c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001910:	edd7 7a02 	vldr	s15, [r7, #8]
 8001914:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001918:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800191c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001920:	edd7 6a02 	vldr	s13, [r7, #8]
 8001924:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001928:	edc7 7a03 	vstr	s15, [r7, #12]
		if ( x < 0.0f )
 800192c:	edd7 7a00 	vldr	s15, [r7]
 8001930:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001938:	d534      	bpl.n	80019a4 <atan2_approximation2+0x110>
		{
			if ( y < 0.0f ) return atan - PI_FLOAT;
 800193a:	edd7 7a01 	vldr	s15, [r7, #4]
 800193e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001946:	d506      	bpl.n	8001956 <atan2_approximation2+0xc2>
 8001948:	edd7 7a03 	vldr	s15, [r7, #12]
 800194c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80019c8 <atan2_approximation2+0x134>
 8001950:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001954:	e028      	b.n	80019a8 <atan2_approximation2+0x114>
			return atan + PI_FLOAT;
 8001956:	edd7 7a03 	vldr	s15, [r7, #12]
 800195a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80019c8 <atan2_approximation2+0x134>
 800195e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001962:	e021      	b.n	80019a8 <atan2_approximation2+0x114>
		}
	}
	else
	{
		atan = PIBY2_FLOAT - z/(z*z + 0.28f);
 8001964:	edd7 7a02 	vldr	s15, [r7, #8]
 8001968:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800196c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80019c4 <atan2_approximation2+0x130>
 8001970:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001974:	edd7 6a02 	vldr	s13, [r7, #8]
 8001978:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800197c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80019b8 <atan2_approximation2+0x124>
 8001980:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001984:	edc7 7a03 	vstr	s15, [r7, #12]
		if ( y < 0.0f ) return atan - PI_FLOAT;
 8001988:	edd7 7a01 	vldr	s15, [r7, #4]
 800198c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001994:	d506      	bpl.n	80019a4 <atan2_approximation2+0x110>
 8001996:	edd7 7a03 	vldr	s15, [r7, #12]
 800199a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80019c8 <atan2_approximation2+0x134>
 800199e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80019a2:	e001      	b.n	80019a8 <atan2_approximation2+0x114>
	}
	return atan;
 80019a4:	edd7 7a03 	vldr	s15, [r7, #12]
}
 80019a8:	eeb0 0a67 	vmov.f32	s0, s15
 80019ac:	3714      	adds	r7, #20
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	3fc90fda 	.word	0x3fc90fda
 80019bc:	00000000 	.word	0x00000000
 80019c0:	bfc90fda 	.word	0xbfc90fda
 80019c4:	3e8f5c29 	.word	0x3e8f5c29
 80019c8:	40490fdb 	.word	0x40490fdb
 80019cc:	00000000 	.word	0x00000000

080019d0 <calculate>:
void calculate(){
 80019d0:	b5b0      	push	{r4, r5, r7, lr}
 80019d2:	b08a      	sub	sp, #40	; 0x28
 80019d4:	af02      	add	r7, sp, #8
	/**-----------------MEMCPY---------------------- 1.84us*/
	#ifdef RUNNING_LED_DEBUG
	HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
	#endif

	memcpy(&IRQ_Current_BUFF, &IRQ_Current, sizeof(Current));
 80019d6:	4a3e      	ldr	r2, [pc, #248]	; (8001ad0 <calculate+0x100>)
 80019d8:	4b3e      	ldr	r3, [pc, #248]	; (8001ad4 <calculate+0x104>)
 80019da:	4614      	mov	r4, r2
 80019dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	memcpy(&IRQ_Voltage_Temp_BUFF, &IRQ_Voltage_Temp, sizeof(Voltage_Temp));
 80019e2:	4b3d      	ldr	r3, [pc, #244]	; (8001ad8 <calculate+0x108>)
 80019e4:	4a3d      	ldr	r2, [pc, #244]	; (8001adc <calculate+0x10c>)
 80019e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80019e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	memcpy(&IRQ_Encoders_BUFF, &IRQ_Encoders, sizeof(Encoders));
 80019ec:	4a3c      	ldr	r2, [pc, #240]	; (8001ae0 <calculate+0x110>)
 80019ee:	4b3d      	ldr	r3, [pc, #244]	; (8001ae4 <calculate+0x114>)
 80019f0:	4614      	mov	r4, r2
 80019f2:	461d      	mov	r5, r3
 80019f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80019fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	memcpy(&IRQ_STATUS_BUFF, &IRQ_Status, sizeof(CAN_Status));
 8001a00:	4b39      	ldr	r3, [pc, #228]	; (8001ae8 <calculate+0x118>)
 8001a02:	4a3a      	ldr	r2, [pc, #232]	; (8001aec <calculate+0x11c>)
 8001a04:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a06:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	//FSM
	if(Status == BLDC_STOPPED_WITH_BREAK && IRQ_STATUS_BUFF.status == INPUT_CALIBRATE_ENCODER)Status = BLDC_CALIBRATING_ENCODER;
 8001a0a:	4b39      	ldr	r3, [pc, #228]	; (8001af0 <calculate+0x120>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d107      	bne.n	8001a22 <calculate+0x52>
 8001a12:	4b35      	ldr	r3, [pc, #212]	; (8001ae8 <calculate+0x118>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2b04      	cmp	r3, #4
 8001a18:	d103      	bne.n	8001a22 <calculate+0x52>
 8001a1a:	4b35      	ldr	r3, [pc, #212]	; (8001af0 <calculate+0x120>)
 8001a1c:	2202      	movs	r2, #2
 8001a1e:	701a      	strb	r2, [r3, #0]
 8001a20:	e046      	b.n	8001ab0 <calculate+0xe0>
	else if(Status == BLDC_STOPPED_WITH_BREAK && IRQ_STATUS_BUFF.status == INPUT_RESET_ERRORS)error = 0;
 8001a22:	4b33      	ldr	r3, [pc, #204]	; (8001af0 <calculate+0x120>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d107      	bne.n	8001a3a <calculate+0x6a>
 8001a2a:	4b2f      	ldr	r3, [pc, #188]	; (8001ae8 <calculate+0x118>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2b05      	cmp	r3, #5
 8001a30:	d103      	bne.n	8001a3a <calculate+0x6a>
 8001a32:	4b30      	ldr	r3, [pc, #192]	; (8001af4 <calculate+0x124>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	e03a      	b.n	8001ab0 <calculate+0xe0>
	else if(Status == BLDC_STOPPED_WITH_BREAK && IRQ_STATUS_BUFF.status == INPUT_START){
 8001a3a:	4b2d      	ldr	r3, [pc, #180]	; (8001af0 <calculate+0x120>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d113      	bne.n	8001a6a <calculate+0x9a>
 8001a42:	4b29      	ldr	r3, [pc, #164]	; (8001ae8 <calculate+0x118>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d10f      	bne.n	8001a6a <calculate+0x9a>
		Status = BLDC_RUNNING;
 8001a4a:	4b29      	ldr	r3, [pc, #164]	; (8001af0 <calculate+0x120>)
 8001a4c:	2203      	movs	r2, #3
 8001a4e:	701a      	strb	r2, [r3, #0]
		SetMode(&Current_PID,  AUTOMATIC);
 8001a50:	2101      	movs	r1, #1
 8001a52:	4829      	ldr	r0, [pc, #164]	; (8001af8 <calculate+0x128>)
 8001a54:	f001 ff40 	bl	80038d8 <SetMode>
		SetMode(&Velocity_PID,  AUTOMATIC);
 8001a58:	2101      	movs	r1, #1
 8001a5a:	4828      	ldr	r0, [pc, #160]	; (8001afc <calculate+0x12c>)
 8001a5c:	f001 ff3c 	bl	80038d8 <SetMode>
		SetMode(&Angle_PID,  AUTOMATIC);
 8001a60:	2101      	movs	r1, #1
 8001a62:	4827      	ldr	r0, [pc, #156]	; (8001b00 <calculate+0x130>)
 8001a64:	f001 ff38 	bl	80038d8 <SetMode>
 8001a68:	e022      	b.n	8001ab0 <calculate+0xe0>
	}
	else if(Status == BLDC_RUNNING && IRQ_STATUS_BUFF.status == INPUT_STOP_WITH_BREAK){
 8001a6a:	4b21      	ldr	r3, [pc, #132]	; (8001af0 <calculate+0x120>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b03      	cmp	r3, #3
 8001a70:	d113      	bne.n	8001a9a <calculate+0xca>
 8001a72:	4b1d      	ldr	r3, [pc, #116]	; (8001ae8 <calculate+0x118>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d10f      	bne.n	8001a9a <calculate+0xca>
		Status = BLDC_STOPPED_WITH_BREAK;
 8001a7a:	4b1d      	ldr	r3, [pc, #116]	; (8001af0 <calculate+0x120>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	701a      	strb	r2, [r3, #0]
		SetMode(&Current_PID,  MANUAL);
 8001a80:	2100      	movs	r1, #0
 8001a82:	481d      	ldr	r0, [pc, #116]	; (8001af8 <calculate+0x128>)
 8001a84:	f001 ff28 	bl	80038d8 <SetMode>
		SetMode(&Velocity_PID,  MANUAL);
 8001a88:	2100      	movs	r1, #0
 8001a8a:	481c      	ldr	r0, [pc, #112]	; (8001afc <calculate+0x12c>)
 8001a8c:	f001 ff24 	bl	80038d8 <SetMode>
		SetMode(&Angle_PID,  MANUAL);
 8001a90:	2100      	movs	r1, #0
 8001a92:	481b      	ldr	r0, [pc, #108]	; (8001b00 <calculate+0x130>)
 8001a94:	f001 ff20 	bl	80038d8 <SetMode>
 8001a98:	e00a      	b.n	8001ab0 <calculate+0xe0>
	}
	else if(Status == BLDC_RUNNING && IRQ_STATUS_BUFF.status == INPUT_STOP_AND_SHUTDOWN)Status = BLDC_STOPPED_AND_SHUTDOWN;
 8001a9a:	4b15      	ldr	r3, [pc, #84]	; (8001af0 <calculate+0x120>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b03      	cmp	r3, #3
 8001aa0:	d106      	bne.n	8001ab0 <calculate+0xe0>
 8001aa2:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <calculate+0x118>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d102      	bne.n	8001ab0 <calculate+0xe0>
 8001aaa:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <calculate+0x120>)
 8001aac:	2201      	movs	r2, #1
 8001aae:	701a      	strb	r2, [r3, #0]

	if (last_pos_encoder > 270000 && IRQ_Encoders_BUFF.Encoder1_pos < 90000)position_overflow++;
 8001ab0:	4b14      	ldr	r3, [pc, #80]	; (8001b04 <calculate+0x134>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a14      	ldr	r2, [pc, #80]	; (8001b08 <calculate+0x138>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d92c      	bls.n	8001b14 <calculate+0x144>
 8001aba:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <calculate+0x110>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a13      	ldr	r2, [pc, #76]	; (8001b0c <calculate+0x13c>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d827      	bhi.n	8001b14 <calculate+0x144>
 8001ac4:	4b12      	ldr	r3, [pc, #72]	; (8001b10 <calculate+0x140>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	4a11      	ldr	r2, [pc, #68]	; (8001b10 <calculate+0x140>)
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	e030      	b.n	8001b32 <calculate+0x162>
 8001ad0:	20000ac4 	.word	0x20000ac4
 8001ad4:	2000076c 	.word	0x2000076c
 8001ad8:	20000ad4 	.word	0x20000ad4
 8001adc:	2000077c 	.word	0x2000077c
 8001ae0:	20000ae0 	.word	0x20000ae0
 8001ae4:	20000788 	.word	0x20000788
 8001ae8:	20000afc 	.word	0x20000afc
 8001aec:	2000096c 	.word	0x2000096c
 8001af0:	20000b08 	.word	0x20000b08
 8001af4:	20000768 	.word	0x20000768
 8001af8:	200009f8 	.word	0x200009f8
 8001afc:	20000a38 	.word	0x20000a38
 8001b00:	20000a78 	.word	0x20000a78
 8001b04:	20000b0c 	.word	0x20000b0c
 8001b08:	00041eb0 	.word	0x00041eb0
 8001b0c:	00015f8f 	.word	0x00015f8f
 8001b10:	20000b10 	.word	0x20000b10
	else if (last_pos_encoder < 90000 && IRQ_Encoders_BUFF.Encoder1_pos > 270000)position_overflow--;
 8001b14:	4bc6      	ldr	r3, [pc, #792]	; (8001e30 <calculate+0x460>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4ac6      	ldr	r2, [pc, #792]	; (8001e34 <calculate+0x464>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d809      	bhi.n	8001b32 <calculate+0x162>
 8001b1e:	4bc6      	ldr	r3, [pc, #792]	; (8001e38 <calculate+0x468>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4ac6      	ldr	r2, [pc, #792]	; (8001e3c <calculate+0x46c>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d904      	bls.n	8001b32 <calculate+0x162>
 8001b28:	4bc5      	ldr	r3, [pc, #788]	; (8001e40 <calculate+0x470>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	4ac4      	ldr	r2, [pc, #784]	; (8001e40 <calculate+0x470>)
 8001b30:	6013      	str	r3, [r2, #0]
	last_pos_encoder = IRQ_Encoders_BUFF.Encoder1_pos;
 8001b32:	4bc1      	ldr	r3, [pc, #772]	; (8001e38 <calculate+0x468>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4abe      	ldr	r2, [pc, #760]	; (8001e30 <calculate+0x460>)
 8001b38:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
	#endif

	float d;
	float q;
	int16_t index_error = (int16_t)(IRQ_Encoders_BUFF.Encoder1_pos/1000)%360;// - electrical_offset);
 8001b3a:	4bbf      	ldr	r3, [pc, #764]	; (8001e38 <calculate+0x468>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4ac1      	ldr	r2, [pc, #772]	; (8001e44 <calculate+0x474>)
 8001b40:	fba2 2303 	umull	r2, r3, r2, r3
 8001b44:	099b      	lsrs	r3, r3, #6
 8001b46:	b21b      	sxth	r3, r3
 8001b48:	4abf      	ldr	r2, [pc, #764]	; (8001e48 <calculate+0x478>)
 8001b4a:	fb82 1203 	smull	r1, r2, r2, r3
 8001b4e:	441a      	add	r2, r3
 8001b50:	1211      	asrs	r1, r2, #8
 8001b52:	17da      	asrs	r2, r3, #31
 8001b54:	1a8a      	subs	r2, r1, r2
 8001b56:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001b5a:	fb01 f202 	mul.w	r2, r1, r2
 8001b5e:	1a9b      	subs	r3, r3, r2
 8001b60:	837b      	strh	r3, [r7, #26]
	uint16_t index_error2 = ((((index_error-mech_offset+360)%360)*(SIZE*NPP))/360)%(SIZE*NPP);
 8001b62:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001b66:	4ab9      	ldr	r2, [pc, #740]	; (8001e4c <calculate+0x47c>)
 8001b68:	8812      	ldrh	r2, [r2, #0]
 8001b6a:	1a9b      	subs	r3, r3, r2
 8001b6c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b70:	4ab5      	ldr	r2, [pc, #724]	; (8001e48 <calculate+0x478>)
 8001b72:	fb82 1203 	smull	r1, r2, r2, r3
 8001b76:	441a      	add	r2, r3
 8001b78:	1211      	asrs	r1, r2, #8
 8001b7a:	17da      	asrs	r2, r3, #31
 8001b7c:	1a8a      	subs	r2, r1, r2
 8001b7e:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001b82:	fb01 f202 	mul.w	r2, r1, r2
 8001b86:	1a9a      	subs	r2, r3, r2
 8001b88:	4613      	mov	r3, r2
 8001b8a:	011b      	lsls	r3, r3, #4
 8001b8c:	4413      	add	r3, r2
 8001b8e:	011b      	lsls	r3, r3, #4
 8001b90:	4aad      	ldr	r2, [pc, #692]	; (8001e48 <calculate+0x478>)
 8001b92:	fb82 1203 	smull	r1, r2, r2, r3
 8001b96:	441a      	add	r2, r3
 8001b98:	1212      	asrs	r2, r2, #8
 8001b9a:	17db      	asrs	r3, r3, #31
 8001b9c:	1ad2      	subs	r2, r2, r3
 8001b9e:	4bac      	ldr	r3, [pc, #688]	; (8001e50 <calculate+0x480>)
 8001ba0:	fb83 1302 	smull	r1, r3, r3, r2
 8001ba4:	11d9      	asrs	r1, r3, #7
 8001ba6:	17d3      	asrs	r3, r2, #31
 8001ba8:	1ac9      	subs	r1, r1, r3
 8001baa:	460b      	mov	r3, r1
 8001bac:	011b      	lsls	r3, r3, #4
 8001bae:	440b      	add	r3, r1
 8001bb0:	011b      	lsls	r3, r3, #4
 8001bb2:	1ad1      	subs	r1, r2, r3
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	833b      	strh	r3, [r7, #24]
	int32_t error_pos = ((int32_t)(error_filt[index_error2] - (int32_t)error_filt[0])*17);
 8001bb8:	8b3b      	ldrh	r3, [r7, #24]
 8001bba:	4aa6      	ldr	r2, [pc, #664]	; (8001e54 <calculate+0x484>)
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	4413      	add	r3, r2
 8001bc0:	ed93 7a00 	vldr	s14, [r3]
 8001bc4:	4ba3      	ldr	r3, [pc, #652]	; (8001e54 <calculate+0x484>)
 8001bc6:	edd3 7a00 	vldr	s15, [r3]
 8001bca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bda:	ee17 2a90 	vmov	r2, s15
 8001bde:	4613      	mov	r3, r2
 8001be0:	011b      	lsls	r3, r3, #4
 8001be2:	4413      	add	r3, r2
 8001be4:	617b      	str	r3, [r7, #20]

	int16_t angle_temp_1 = mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, 0);
 8001be6:	4b94      	ldr	r3, [pc, #592]	; (8001e38 <calculate+0x468>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2100      	movs	r1, #0
 8001bec:	4618      	mov	r0, r3
 8001bee:	f000 fa43 	bl	8002078 <mech_to_el_deg>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	827b      	strh	r3, [r7, #18]
	int16_t angle = (angle_temp_1 + error_pos + (int32_t)electrical_offset + 2*360)%360;
 8001bf6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	4a96      	ldr	r2, [pc, #600]	; (8001e58 <calculate+0x488>)
 8001c00:	edd2 7a00 	vldr	s15, [r2]
 8001c04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c08:	ee17 2a90 	vmov	r2, s15
 8001c0c:	4413      	add	r3, r2
 8001c0e:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8001c12:	4a8d      	ldr	r2, [pc, #564]	; (8001e48 <calculate+0x478>)
 8001c14:	fb82 1203 	smull	r1, r2, r2, r3
 8001c18:	441a      	add	r2, r3
 8001c1a:	1211      	asrs	r1, r2, #8
 8001c1c:	17da      	asrs	r2, r3, #31
 8001c1e:	1a8a      	subs	r2, r1, r2
 8001c20:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001c24:	fb01 f202 	mul.w	r2, r1, r2
 8001c28:	1a9a      	subs	r2, r3, r2
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	823b      	strh	r3, [r7, #16]

//	dq0((float)angle*3.14159264f/180, (float)IRQ_Current_BUFF.Current_M2, (float)IRQ_Current_BUFF.Current_M3, (float)IRQ_Current_BUFF.Current_M1, &d, &q);
	dq0((float)angle*3.14159264f/180, (float)IRQ_Current_BUFF.Current_M3, (float)IRQ_Current_BUFF.Current_M2, (float)IRQ_Current_BUFF.Current_M1, &d, &q);
 8001c2e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001c32:	ee07 3a90 	vmov	s15, r3
 8001c36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c3a:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8001e5c <calculate+0x48c>
 8001c3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c42:	eddf 6a87 	vldr	s13, [pc, #540]	; 8001e60 <calculate+0x490>
 8001c46:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c4a:	4b86      	ldr	r3, [pc, #536]	; (8001e64 <calculate+0x494>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	ee07 3a90 	vmov	s15, r3
 8001c52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c56:	4b83      	ldr	r3, [pc, #524]	; (8001e64 <calculate+0x494>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	ee06 3a90 	vmov	s13, r3
 8001c5e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001c62:	4b80      	ldr	r3, [pc, #512]	; (8001e64 <calculate+0x494>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	ee06 3a10 	vmov	s12, r3
 8001c6a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8001c6e:	463a      	mov	r2, r7
 8001c70:	1d3b      	adds	r3, r7, #4
 8001c72:	4611      	mov	r1, r2
 8001c74:	4618      	mov	r0, r3
 8001c76:	eef0 1a46 	vmov.f32	s3, s12
 8001c7a:	eeb0 1a66 	vmov.f32	s2, s13
 8001c7e:	eef0 0a67 	vmov.f32	s1, s15
 8001c82:	eeb0 0a47 	vmov.f32	s0, s14
 8001c86:	f002 f9bb 	bl	8004000 <dq0>
//	dq0((float)angle*3.14159264f/180, (float)IRQ_Current_BUFF.Current_M2, (float)IRQ_Current_BUFF.Current_M3, (float)IRQ_Current_BUFF.Current_M1, &d, &q);

	q_lpf = Update_FIR_filter(q);
 8001c8a:	edd7 7a00 	vldr	s15, [r7]
 8001c8e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c92:	f7ff f99f 	bl	8000fd4 <Update_FIR_filter>
 8001c96:	eef0 7a40 	vmov.f32	s15, s0
 8001c9a:	4b73      	ldr	r3, [pc, #460]	; (8001e68 <calculate+0x498>)
 8001c9c:	edc3 7a00 	vstr	s15, [r3]
	d_lpf = Update_FIR_filter2(d);
 8001ca0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ca4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ca8:	f7ff f9e4 	bl	8001074 <Update_FIR_filter2>
 8001cac:	eef0 7a40 	vmov.f32	s15, s0
 8001cb0:	4b6e      	ldr	r3, [pc, #440]	; (8001e6c <calculate+0x49c>)
 8001cb2:	edc3 7a00 	vstr	s15, [r3]

	/**------------------calculate PID----------------------- 6.88*/
	#ifdef RUNNING_LED_DEBUG
	HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
	#endif
	Angle_PID.Input = (float)IRQ_Encoders_BUFF.Encoder1_pos + position_overflow*360000.0f + storage->Encoder1_offset*1000.0f;
 8001cb6:	4b60      	ldr	r3, [pc, #384]	; (8001e38 <calculate+0x468>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	ee07 3a90 	vmov	s15, r3
 8001cbe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001cc2:	4b5f      	ldr	r3, [pc, #380]	; (8001e40 <calculate+0x470>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	ee07 3a90 	vmov	s15, r3
 8001cca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cce:	eddf 6a68 	vldr	s13, [pc, #416]	; 8001e70 <calculate+0x4a0>
 8001cd2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001cd6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cda:	4b66      	ldr	r3, [pc, #408]	; (8001e74 <calculate+0x4a4>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001ce2:	eddf 6a65 	vldr	s13, [pc, #404]	; 8001e78 <calculate+0x4a8>
 8001ce6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001cea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cee:	4b63      	ldr	r3, [pc, #396]	; (8001e7c <calculate+0x4ac>)
 8001cf0:	edc3 7a00 	vstr	s15, [r3]
	Velocity_PID.Input = (float)(IRQ_Encoders_BUFF.Velocity);
 8001cf4:	4b50      	ldr	r3, [pc, #320]	; (8001e38 <calculate+0x468>)
 8001cf6:	695b      	ldr	r3, [r3, #20]
 8001cf8:	ee07 3a90 	vmov	s15, r3
 8001cfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d00:	4b5f      	ldr	r3, [pc, #380]	; (8001e80 <calculate+0x4b0>)
 8001d02:	edc3 7a00 	vstr	s15, [r3]
	Current_PID.Input = q_lpf;
 8001d06:	4b58      	ldr	r3, [pc, #352]	; (8001e68 <calculate+0x498>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a5e      	ldr	r2, [pc, #376]	; (8001e84 <calculate+0x4b4>)
 8001d0c:	6013      	str	r3, [r2, #0]
	Current_PID_offset.Input = d_lpf;
 8001d0e:	4b57      	ldr	r3, [pc, #348]	; (8001e6c <calculate+0x49c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a5d      	ldr	r2, [pc, #372]	; (8001e88 <calculate+0x4b8>)
 8001d14:	6013      	str	r3, [r2, #0]

	Angle_PID.Setpoint = (float)IRQ_STATUS_BUFF.setpoint;
 8001d16:	4b5d      	ldr	r3, [pc, #372]	; (8001e8c <calculate+0x4bc>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	ee07 3a90 	vmov	s15, r3
 8001d1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d22:	4b56      	ldr	r3, [pc, #344]	; (8001e7c <calculate+0x4ac>)
 8001d24:	edc3 7a02 	vstr	s15, [r3, #8]
	Compute(&Angle_PID);
 8001d28:	4854      	ldr	r0, [pc, #336]	; (8001e7c <calculate+0x4ac>)
 8001d2a:	f001 fbd9 	bl	80034e0 <Compute>

	Velocity_PID.Setpoint = Angle_PID.Output;
 8001d2e:	4b53      	ldr	r3, [pc, #332]	; (8001e7c <calculate+0x4ac>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	4a53      	ldr	r2, [pc, #332]	; (8001e80 <calculate+0x4b0>)
 8001d34:	6093      	str	r3, [r2, #8]
	Compute(&Velocity_PID);
 8001d36:	4852      	ldr	r0, [pc, #328]	; (8001e80 <calculate+0x4b0>)
 8001d38:	f001 fbd2 	bl	80034e0 <Compute>

	Current_PID.Setpoint = 500; //Velocity_PID.Output;
 8001d3c:	4b51      	ldr	r3, [pc, #324]	; (8001e84 <calculate+0x4b4>)
 8001d3e:	4a54      	ldr	r2, [pc, #336]	; (8001e90 <calculate+0x4c0>)
 8001d40:	609a      	str	r2, [r3, #8]
	Compute(&Current_PID);
 8001d42:	4850      	ldr	r0, [pc, #320]	; (8001e84 <calculate+0x4b4>)
 8001d44:	f001 fbcc 	bl	80034e0 <Compute>

	Current_PID_offset.Setpoint = 0;
 8001d48:	4b4f      	ldr	r3, [pc, #316]	; (8001e88 <calculate+0x4b8>)
 8001d4a:	f04f 0200 	mov.w	r2, #0
 8001d4e:	609a      	str	r2, [r3, #8]
	Compute(&Current_PID_offset);
 8001d50:	484d      	ldr	r0, [pc, #308]	; (8001e88 <calculate+0x4b8>)
 8001d52:	f001 fbc5 	bl	80034e0 <Compute>
	/**-----------------set PWM--------------------- 8.66us*/
	#ifdef RUNNING_LED_DEBUG
	HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
	#endif

	float V_d = Current_PID_offset.Output;
 8001d56:	4b4c      	ldr	r3, [pc, #304]	; (8001e88 <calculate+0x4b8>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	60fb      	str	r3, [r7, #12]
	float V_q = Current_PID.Output;
 8001d5c:	4b49      	ldr	r3, [pc, #292]	; (8001e84 <calculate+0x4b4>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	60bb      	str	r3, [r7, #8]
//	RunCordic_inverse(V_d, V_q, &theta, &mag);
//
//	mag = mag*1500.0f/0.7f;
//	theta = theta*180.0f;

	theta = atan2_approximation2(V_q, V_d)*180.0f/3.14159264f;
 8001d62:	edd7 0a03 	vldr	s1, [r7, #12]
 8001d66:	ed97 0a02 	vldr	s0, [r7, #8]
 8001d6a:	f7ff fd93 	bl	8001894 <atan2_approximation2>
 8001d6e:	eef0 7a40 	vmov.f32	s15, s0
 8001d72:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001e60 <calculate+0x490>
 8001d76:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d7a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001e5c <calculate+0x48c>
 8001d7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d82:	4b44      	ldr	r3, [pc, #272]	; (8001e94 <calculate+0x4c4>)
 8001d84:	edc3 7a00 	vstr	s15, [r3]
	uint32_t mag = (uint32_t)(sqrtI((V_q*V_q+V_d*V_d)));
 8001d88:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d8c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001d90:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d94:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001da0:	ee17 0a90 	vmov	r0, s15
 8001da4:	f7ff fd3e 	bl	8001824 <sqrtI>
 8001da8:	61f8      	str	r0, [r7, #28]
    mag *= 0.7;
 8001daa:	69f8      	ldr	r0, [r7, #28]
 8001dac:	f7fe fbd2 	bl	8000554 <__aeabi_ui2d>
 8001db0:	a31d      	add	r3, pc, #116	; (adr r3, 8001e28 <calculate+0x458>)
 8001db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db6:	f7fe fc47 	bl	8000648 <__aeabi_dmul>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	4610      	mov	r0, r2
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	f7fe ff19 	bl	8000bf8 <__aeabi_d2uiz>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	61fb      	str	r3, [r7, #28]
	if (mag > 1499)mag = 1499;
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	f240 52db 	movw	r2, #1499	; 0x5db
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d902      	bls.n	8001dda <calculate+0x40a>
 8001dd4:	f240 53db 	movw	r3, #1499	; 0x5db
 8001dd8:	61fb      	str	r3, [r7, #28]
	/**----------------error check---------------5.92us*/
	#ifdef RUNNING_LED_DEBUG
	HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
	#endif

	warning = 0;
 8001dda:	4b2f      	ldr	r3, [pc, #188]	; (8001e98 <calculate+0x4c8>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
	check_value(&LIMIT_Current, (int32_t)q_lpf, &warning, &error, 0);
 8001de0:	4b21      	ldr	r3, [pc, #132]	; (8001e68 <calculate+0x498>)
 8001de2:	edd3 7a00 	vldr	s15, [r3]
 8001de6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dea:	2300      	movs	r3, #0
 8001dec:	9300      	str	r3, [sp, #0]
 8001dee:	4b2b      	ldr	r3, [pc, #172]	; (8001e9c <calculate+0x4cc>)
 8001df0:	4a29      	ldr	r2, [pc, #164]	; (8001e98 <calculate+0x4c8>)
 8001df2:	ee17 1a90 	vmov	r1, s15
 8001df6:	482a      	ldr	r0, [pc, #168]	; (8001ea0 <calculate+0x4d0>)
 8001df8:	f7ff fa14 	bl	8001224 <check_value>
	check_value(&LIMIT_Current, (int32_t)d_lpf, &warning, &error, 0);
 8001dfc:	4b1b      	ldr	r3, [pc, #108]	; (8001e6c <calculate+0x49c>)
 8001dfe:	edd3 7a00 	vldr	s15, [r3]
 8001e02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e06:	2300      	movs	r3, #0
 8001e08:	9300      	str	r3, [sp, #0]
 8001e0a:	4b24      	ldr	r3, [pc, #144]	; (8001e9c <calculate+0x4cc>)
 8001e0c:	4a22      	ldr	r2, [pc, #136]	; (8001e98 <calculate+0x4c8>)
 8001e0e:	ee17 1a90 	vmov	r1, s15
 8001e12:	4823      	ldr	r0, [pc, #140]	; (8001ea0 <calculate+0x4d0>)
 8001e14:	f7ff fa06 	bl	8001224 <check_value>
	check_value(&LIMIT_Encoder_1, IRQ_Encoders_BUFF.Encoder1_pos, &warning, &error, 1);
 8001e18:	4b07      	ldr	r3, [pc, #28]	; (8001e38 <calculate+0x468>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e040      	b.n	8001ea4 <calculate+0x4d4>
 8001e22:	bf00      	nop
 8001e24:	f3af 8000 	nop.w
 8001e28:	66666666 	.word	0x66666666
 8001e2c:	3fe66666 	.word	0x3fe66666
 8001e30:	20000b0c 	.word	0x20000b0c
 8001e34:	00015f8f 	.word	0x00015f8f
 8001e38:	20000ae0 	.word	0x20000ae0
 8001e3c:	00041eb0 	.word	0x00041eb0
 8001e40:	20000b10 	.word	0x20000b10
 8001e44:	10624dd3 	.word	0x10624dd3
 8001e48:	b60b60b7 	.word	0xb60b60b7
 8001e4c:	20000ac0 	.word	0x20000ac0
 8001e50:	78787879 	.word	0x78787879
 8001e54:	20000b28 	.word	0x20000b28
 8001e58:	20000f6c 	.word	0x20000f6c
 8001e5c:	40490fdb 	.word	0x40490fdb
 8001e60:	43340000 	.word	0x43340000
 8001e64:	20000ac4 	.word	0x20000ac4
 8001e68:	20000b18 	.word	0x20000b18
 8001e6c:	20000b1c 	.word	0x20000b1c
 8001e70:	48afc800 	.word	0x48afc800
 8001e74:	20000abc 	.word	0x20000abc
 8001e78:	447a0000 	.word	0x447a0000
 8001e7c:	20000a78 	.word	0x20000a78
 8001e80:	20000a38 	.word	0x20000a38
 8001e84:	200009f8 	.word	0x200009f8
 8001e88:	200009b8 	.word	0x200009b8
 8001e8c:	20000afc 	.word	0x20000afc
 8001e90:	43fa0000 	.word	0x43fa0000
 8001e94:	20000b20 	.word	0x20000b20
 8001e98:	20000b14 	.word	0x20000b14
 8001e9c:	20000768 	.word	0x20000768
 8001ea0:	20000050 	.word	0x20000050
 8001ea4:	9300      	str	r3, [sp, #0]
 8001ea6:	4b65      	ldr	r3, [pc, #404]	; (800203c <calculate+0x66c>)
 8001ea8:	4a65      	ldr	r2, [pc, #404]	; (8002040 <calculate+0x670>)
 8001eaa:	4866      	ldr	r0, [pc, #408]	; (8002044 <calculate+0x674>)
 8001eac:	f7ff f9ba 	bl	8001224 <check_value>
	check_value(&LIMIT_Encoder_2, IRQ_Encoders_BUFF.Encoder2_pos, &warning, &error, 2);
 8001eb0:	4b65      	ldr	r3, [pc, #404]	; (8002048 <calculate+0x678>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	4b60      	ldr	r3, [pc, #384]	; (800203c <calculate+0x66c>)
 8001ebc:	4a60      	ldr	r2, [pc, #384]	; (8002040 <calculate+0x670>)
 8001ebe:	4863      	ldr	r0, [pc, #396]	; (800204c <calculate+0x67c>)
 8001ec0:	f7ff f9b0 	bl	8001224 <check_value>
	check_value(&LIMIT_Velocity, IRQ_Encoders_BUFF.Velocity, &warning, &error, 3);
 8001ec4:	4b60      	ldr	r3, [pc, #384]	; (8002048 <calculate+0x678>)
 8001ec6:	6959      	ldr	r1, [r3, #20]
 8001ec8:	2303      	movs	r3, #3
 8001eca:	9300      	str	r3, [sp, #0]
 8001ecc:	4b5b      	ldr	r3, [pc, #364]	; (800203c <calculate+0x66c>)
 8001ece:	4a5c      	ldr	r2, [pc, #368]	; (8002040 <calculate+0x670>)
 8001ed0:	485f      	ldr	r0, [pc, #380]	; (8002050 <calculate+0x680>)
 8001ed2:	f7ff f9a7 	bl	8001224 <check_value>
	check_value(&LIMIT_V_AUX, IRQ_Voltage_Temp_BUFF.V_aux, &warning, &error, 4);
 8001ed6:	4b5f      	ldr	r3, [pc, #380]	; (8002054 <calculate+0x684>)
 8001ed8:	889b      	ldrh	r3, [r3, #4]
 8001eda:	4619      	mov	r1, r3
 8001edc:	2304      	movs	r3, #4
 8001ede:	9300      	str	r3, [sp, #0]
 8001ee0:	4b56      	ldr	r3, [pc, #344]	; (800203c <calculate+0x66c>)
 8001ee2:	4a57      	ldr	r2, [pc, #348]	; (8002040 <calculate+0x670>)
 8001ee4:	485c      	ldr	r0, [pc, #368]	; (8002058 <calculate+0x688>)
 8001ee6:	f7ff f99d 	bl	8001224 <check_value>
	check_value(&LIMIT_V_BAT, IRQ_Voltage_Temp_BUFF.V_Bat, &warning, &error, 5);
 8001eea:	4b5a      	ldr	r3, [pc, #360]	; (8002054 <calculate+0x684>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4619      	mov	r1, r3
 8001ef0:	2305      	movs	r3, #5
 8001ef2:	9300      	str	r3, [sp, #0]
 8001ef4:	4b51      	ldr	r3, [pc, #324]	; (800203c <calculate+0x66c>)
 8001ef6:	4a52      	ldr	r2, [pc, #328]	; (8002040 <calculate+0x670>)
 8001ef8:	4858      	ldr	r0, [pc, #352]	; (800205c <calculate+0x68c>)
 8001efa:	f7ff f993 	bl	8001224 <check_value>
	check_value(&LIMIT_temp, IRQ_Voltage_Temp_BUFF.Temp_NTC1, &warning, &error, 6);
 8001efe:	4b55      	ldr	r3, [pc, #340]	; (8002054 <calculate+0x684>)
 8001f00:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001f04:	4619      	mov	r1, r3
 8001f06:	2306      	movs	r3, #6
 8001f08:	9300      	str	r3, [sp, #0]
 8001f0a:	4b4c      	ldr	r3, [pc, #304]	; (800203c <calculate+0x66c>)
 8001f0c:	4a4c      	ldr	r2, [pc, #304]	; (8002040 <calculate+0x670>)
 8001f0e:	4854      	ldr	r0, [pc, #336]	; (8002060 <calculate+0x690>)
 8001f10:	f7ff f988 	bl	8001224 <check_value>
	check_value(&LIMIT_temp, IRQ_Voltage_Temp_BUFF.Temp_NTC2, &warning, &error, 7);
 8001f14:	4b4f      	ldr	r3, [pc, #316]	; (8002054 <calculate+0x684>)
 8001f16:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	2307      	movs	r3, #7
 8001f1e:	9300      	str	r3, [sp, #0]
 8001f20:	4b46      	ldr	r3, [pc, #280]	; (800203c <calculate+0x66c>)
 8001f22:	4a47      	ldr	r2, [pc, #284]	; (8002040 <calculate+0x670>)
 8001f24:	484e      	ldr	r0, [pc, #312]	; (8002060 <calculate+0x690>)
 8001f26:	f7ff f97d 	bl	8001224 <check_value>
	/**-----------------set PWM--------------------- 2us*/
	#ifdef RUNNING_LED_DEBUG
	HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
	#endif

	if(error){
 8001f2a:	4b44      	ldr	r3, [pc, #272]	; (800203c <calculate+0x66c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d005      	beq.n	8001f3e <calculate+0x56e>
		Status = BLDC_ERROR;
 8001f32:	4b4c      	ldr	r3, [pc, #304]	; (8002064 <calculate+0x694>)
 8001f34:	2204      	movs	r2, #4
 8001f36:	701a      	strb	r2, [r3, #0]
		shutoff();
 8001f38:	f000 fad6 	bl	80024e8 <shutoff>
 8001f3c:	e067      	b.n	800200e <calculate+0x63e>
	}
	else if (Status == BLDC_STOPPED_AND_SHUTDOWN){
 8001f3e:	4b49      	ldr	r3, [pc, #292]	; (8002064 <calculate+0x694>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d104      	bne.n	8001f50 <calculate+0x580>
		shutoff();
 8001f46:	f000 facf 	bl	80024e8 <shutoff>
		shutdown();
 8001f4a:	f000 fadf 	bl	800250c <shutdown>
 8001f4e:	e05e      	b.n	800200e <calculate+0x63e>
	}
	else if (Status == BLDC_STOPPED_WITH_BREAK){
 8001f50:	4b44      	ldr	r3, [pc, #272]	; (8002064 <calculate+0x694>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d12b      	bne.n	8001fb0 <calculate+0x5e0>
//		shutoff();
		inverter(mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, 0)+error_pos + (int32_t)electrical_offset + (int32_t)theta + 360*2, mag, PHASE_ORDER);
 8001f58:	4b3b      	ldr	r3, [pc, #236]	; (8002048 <calculate+0x678>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f000 f88a 	bl	8002078 <mech_to_el_deg>
 8001f64:	4603      	mov	r3, r0
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	4413      	add	r3, r2
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	4b3d      	ldr	r3, [pc, #244]	; (8002068 <calculate+0x698>)
 8001f72:	edd3 7a00 	vldr	s15, [r3]
 8001f76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f7a:	ee17 3a90 	vmov	r3, s15
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	4413      	add	r3, r2
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	4b39      	ldr	r3, [pc, #228]	; (800206c <calculate+0x69c>)
 8001f86:	edd3 7a00 	vldr	s15, [r3]
 8001f8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f8e:	ee17 3a90 	vmov	r3, s15
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	4413      	add	r3, r2
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	b21b      	sxth	r3, r3
 8001fa0:	69fa      	ldr	r2, [r7, #28]
 8001fa2:	b291      	uxth	r1, r2
 8001fa4:	4a32      	ldr	r2, [pc, #200]	; (8002070 <calculate+0x6a0>)
 8001fa6:	7812      	ldrb	r2, [r2, #0]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f000 f949 	bl	8002240 <inverter>
 8001fae:	e02e      	b.n	800200e <calculate+0x63e>
	}
	else if (Status == BLDC_RUNNING){
 8001fb0:	4b2c      	ldr	r3, [pc, #176]	; (8002064 <calculate+0x694>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b03      	cmp	r3, #3
 8001fb6:	d12a      	bne.n	800200e <calculate+0x63e>
		inverter(mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, 0)+error_pos + (int32_t)electrical_offset + (int32_t)theta + 360*2, mag, PHASE_ORDER);
 8001fb8:	4b23      	ldr	r3, [pc, #140]	; (8002048 <calculate+0x678>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f000 f85a 	bl	8002078 <mech_to_el_deg>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	4413      	add	r3, r2
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	4b25      	ldr	r3, [pc, #148]	; (8002068 <calculate+0x698>)
 8001fd2:	edd3 7a00 	vldr	s15, [r3]
 8001fd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fda:	ee17 3a90 	vmov	r3, s15
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	4413      	add	r3, r2
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	4b21      	ldr	r3, [pc, #132]	; (800206c <calculate+0x69c>)
 8001fe6:	edd3 7a00 	vldr	s15, [r3]
 8001fea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fee:	ee17 3a90 	vmov	r3, s15
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	4413      	add	r3, r2
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	b21b      	sxth	r3, r3
 8002000:	69fa      	ldr	r2, [r7, #28]
 8002002:	b291      	uxth	r1, r2
 8002004:	4a1a      	ldr	r2, [pc, #104]	; (8002070 <calculate+0x6a0>)
 8002006:	7812      	ldrb	r2, [r2, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	f000 f919 	bl	8002240 <inverter>
	/**-----------------update dac---------------------------*/
	#ifdef RUNNING_LED_DEBUG
	HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
	#endif
	#ifdef DAC_DEBUG
	dac_value(q/10 +1500);
 800200e:	ed97 7a00 	vldr	s14, [r7]
 8002012:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002016:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800201a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002074 <calculate+0x6a4>
 800201e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002022:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002026:	ee17 3a90 	vmov	r3, s15
 800202a:	b29b      	uxth	r3, r3
 800202c:	4618      	mov	r0, r3
 800202e:	f001 fcdb 	bl	80039e8 <dac_value>
	#endif

	#ifdef RUNNING_LED_DEBUG
	HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
	#endif
}
 8002032:	bf00      	nop
 8002034:	3720      	adds	r7, #32
 8002036:	46bd      	mov	sp, r7
 8002038:	bdb0      	pop	{r4, r5, r7, pc}
 800203a:	bf00      	nop
 800203c:	20000768 	.word	0x20000768
 8002040:	20000b14 	.word	0x20000b14
 8002044:	20000000 	.word	0x20000000
 8002048:	20000ae0 	.word	0x20000ae0
 800204c:	20000010 	.word	0x20000010
 8002050:	20000060 	.word	0x20000060
 8002054:	20000ad4 	.word	0x20000ad4
 8002058:	20000030 	.word	0x20000030
 800205c:	20000020 	.word	0x20000020
 8002060:	20000040 	.word	0x20000040
 8002064:	20000b08 	.word	0x20000b08
 8002068:	20000f6c 	.word	0x20000f6c
 800206c:	20000b20 	.word	0x20000b20
 8002070:	20000f68 	.word	0x20000f68
 8002074:	44bb8000 	.word	0x44bb8000

08002078 <mech_to_el_deg>:
int16_t mech_to_el_deg(int32_t angle_deg, int32_t offset_deg){
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
	uint32_t temp = angle_deg-offset_deg+360000*2;
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
 800208c:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 8002090:	60fb      	str	r3, [r7, #12]
	temp = temp % (360000/17);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	4a13      	ldr	r2, [pc, #76]	; (80020e4 <mech_to_el_deg+0x6c>)
 8002096:	fba2 1203 	umull	r1, r2, r2, r3
 800209a:	0b92      	lsrs	r2, r2, #14
 800209c:	f245 21b8 	movw	r1, #21176	; 0x52b8
 80020a0:	fb01 f202 	mul.w	r2, r1, r2
 80020a4:	1a9b      	subs	r3, r3, r2
 80020a6:	60fb      	str	r3, [r7, #12]
	temp = temp*17/1000;
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	4613      	mov	r3, r2
 80020ac:	011b      	lsls	r3, r3, #4
 80020ae:	4413      	add	r3, r2
 80020b0:	4a0d      	ldr	r2, [pc, #52]	; (80020e8 <mech_to_el_deg+0x70>)
 80020b2:	fba2 2303 	umull	r2, r3, r2, r3
 80020b6:	099b      	lsrs	r3, r3, #6
 80020b8:	60fb      	str	r3, [r7, #12]
	temp = temp % 360;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	08da      	lsrs	r2, r3, #3
 80020be:	490b      	ldr	r1, [pc, #44]	; (80020ec <mech_to_el_deg+0x74>)
 80020c0:	fba1 1202 	umull	r1, r2, r1, r2
 80020c4:	0892      	lsrs	r2, r2, #2
 80020c6:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80020ca:	fb01 f202 	mul.w	r2, r1, r2
 80020ce:	1a9b      	subs	r3, r3, r2
 80020d0:	60fb      	str	r3, [r7, #12]
	return (int16_t)temp;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	b21b      	sxth	r3, r3
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	c6119a11 	.word	0xc6119a11
 80020e8:	10624dd3 	.word	0x10624dd3
 80020ec:	16c16c17 	.word	0x16c16c17

080020f0 <RunCordic>:


#define CORDIC_CONFIG_COSINE (LL_CORDIC_FUNCTION_COSINE | LL_CORDIC_PRECISION_4CYCLES | LL_CORDIC_SCALE_0 | LL_CORDIC_NBWRITE_1 | LL_CORDIC_NBREAD_1 | LL_CORDIC_INSIZE_16BITS | LL_CORDIC_OUTSIZE_16BITS)
#define CORDIC_CONFIG_MODULUS (LL_CORDIC_FUNCTION_MODULUS | LL_CORDIC_PRECISION_8CYCLES | LL_CORDIC_SCALE_0 | LL_CORDIC_NBWRITE_1 | LL_CORDIC_NBREAD_1 | LL_CORDIC_INSIZE_16BITS | LL_CORDIC_OUTSIZE_16BITS)

void RunCordic(float theta, float *cos_out, float *sin_out) {
 80020f0:	b480      	push	{r7}
 80020f2:	b089      	sub	sp, #36	; 0x24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	ed87 0a03 	vstr	s0, [r7, #12]
 80020fa:	60b8      	str	r0, [r7, #8]
 80020fc:	6079      	str	r1, [r7, #4]
	CORDIC->CSR = CORDIC_CONFIG_COSINE;
 80020fe:	4b20      	ldr	r3, [pc, #128]	; (8002180 <RunCordic+0x90>)
 8002100:	4a20      	ldr	r2, [pc, #128]	; (8002184 <RunCordic+0x94>)
 8002102:	601a      	str	r2, [r3, #0]
	unsigned int cordicin = 0x7fff0000;  //  mag = 1
 8002104:	4b20      	ldr	r3, [pc, #128]	; (8002188 <RunCordic+0x98>)
 8002106:	61fb      	str	r3, [r7, #28]
	short thetashort = theta*10430;       // wrap it
 8002108:	edd7 7a03 	vldr	s15, [r7, #12]
 800210c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800218c <RunCordic+0x9c>
 8002110:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002114:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002118:	ee17 3a90 	vmov	r3, s15
 800211c:	837b      	strh	r3, [r7, #26]
	cordicin += thetashort;
 800211e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002122:	69fa      	ldr	r2, [r7, #28]
 8002124:	4413      	add	r3, r2
 8002126:	61fb      	str	r3, [r7, #28]
	CORDIC->WDATA = cordicin;
 8002128:	4a15      	ldr	r2, [pc, #84]	; (8002180 <RunCordic+0x90>)
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	6053      	str	r3, [r2, #4]
	unsigned int out0 = CORDIC->RDATA;
 800212e:	4b14      	ldr	r3, [pc, #80]	; (8002180 <RunCordic+0x90>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	617b      	str	r3, [r7, #20]
	short out2 = (out0&0xffff0000)>>16;
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	0c1b      	lsrs	r3, r3, #16
 8002138:	827b      	strh	r3, [r7, #18]
	short out1 = out0&0xffff;  //
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	823b      	strh	r3, [r7, #16]
	*cos_out = (float)out1/32768.0f;
 800213e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002142:	ee07 3a90 	vmov	s15, r3
 8002146:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800214a:	eddf 6a11 	vldr	s13, [pc, #68]	; 8002190 <RunCordic+0xa0>
 800214e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	edc3 7a00 	vstr	s15, [r3]
	*sin_out = (float)out2/32768.0f;
 8002158:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800215c:	ee07 3a90 	vmov	s15, r3
 8002160:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002164:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8002190 <RunCordic+0xa0>
 8002168:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	edc3 7a00 	vstr	s15, [r3]
}
 8002172:	bf00      	nop
 8002174:	3724      	adds	r7, #36	; 0x24
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	40020c00 	.word	0x40020c00
 8002184:	00600040 	.word	0x00600040
 8002188:	7fff0000 	.word	0x7fff0000
 800218c:	4622f800 	.word	0x4622f800
 8002190:	47000000 	.word	0x47000000

08002194 <CTRL_init_PWM>:
#define duty_max 1499
#define pi 3.1415926535

uint32_t *V_bat = 0;

void CTRL_init_PWM(uint32_t *V_bat_ptr){
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
	V_bat = V_bat_ptr;
 800219c:	4a24      	ldr	r2, [pc, #144]	; (8002230 <CTRL_init_PWM+0x9c>)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6013      	str	r3, [r2, #0]
	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) Error_Handler(); //error
 80021a2:	2100      	movs	r1, #0
 80021a4:	4823      	ldr	r0, [pc, #140]	; (8002234 <CTRL_init_PWM+0xa0>)
 80021a6:	f009 fb61 	bl	800b86c <HAL_TIM_PWM_Start>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <CTRL_init_PWM+0x20>
 80021b0:	f002 feb6 	bl	8004f20 <Error_Handler>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) Error_Handler(); //error
 80021b4:	2100      	movs	r1, #0
 80021b6:	481f      	ldr	r0, [pc, #124]	; (8002234 <CTRL_init_PWM+0xa0>)
 80021b8:	f00a fcec 	bl	800cb94 <HAL_TIMEx_PWMN_Start>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <CTRL_init_PWM+0x32>
 80021c2:	f002 fead 	bl	8004f20 <Error_Handler>

	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK) Error_Handler(); //error
 80021c6:	2104      	movs	r1, #4
 80021c8:	481a      	ldr	r0, [pc, #104]	; (8002234 <CTRL_init_PWM+0xa0>)
 80021ca:	f009 fb4f 	bl	800b86c <HAL_TIM_PWM_Start>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <CTRL_init_PWM+0x44>
 80021d4:	f002 fea4 	bl	8004f20 <Error_Handler>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2) != HAL_OK) Error_Handler(); //error
 80021d8:	2104      	movs	r1, #4
 80021da:	4816      	ldr	r0, [pc, #88]	; (8002234 <CTRL_init_PWM+0xa0>)
 80021dc:	f00a fcda 	bl	800cb94 <HAL_TIMEx_PWMN_Start>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <CTRL_init_PWM+0x56>
 80021e6:	f002 fe9b 	bl	8004f20 <Error_Handler>

	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3) != HAL_OK) Error_Handler(); //error
 80021ea:	2108      	movs	r1, #8
 80021ec:	4811      	ldr	r0, [pc, #68]	; (8002234 <CTRL_init_PWM+0xa0>)
 80021ee:	f009 fb3d 	bl	800b86c <HAL_TIM_PWM_Start>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <CTRL_init_PWM+0x68>
 80021f8:	f002 fe92 	bl	8004f20 <Error_Handler>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3) != HAL_OK) Error_Handler(); //error
 80021fc:	2108      	movs	r1, #8
 80021fe:	480d      	ldr	r0, [pc, #52]	; (8002234 <CTRL_init_PWM+0xa0>)
 8002200:	f00a fcc8 	bl	800cb94 <HAL_TIMEx_PWMN_Start>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <CTRL_init_PWM+0x7a>
 800220a:	f002 fe89 	bl	8004f20 <Error_Handler>

	TIM1->CCR1 = 0;
 800220e:	4b0a      	ldr	r3, [pc, #40]	; (8002238 <CTRL_init_PWM+0xa4>)
 8002210:	2200      	movs	r2, #0
 8002212:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 8002214:	4b08      	ldr	r3, [pc, #32]	; (8002238 <CTRL_init_PWM+0xa4>)
 8002216:	2200      	movs	r2, #0
 8002218:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 800221a:	4b07      	ldr	r3, [pc, #28]	; (8002238 <CTRL_init_PWM+0xa4>)
 800221c:	2200      	movs	r2, #0
 800221e:	63da      	str	r2, [r3, #60]	; 0x3c

	HAL_TIM_Base_Start_IT(&htim3);
 8002220:	4806      	ldr	r0, [pc, #24]	; (800223c <CTRL_init_PWM+0xa8>)
 8002222:	f009 fa57 	bl	800b6d4 <HAL_TIM_Base_Start_IT>
}
 8002226:	bf00      	nop
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	20000b24 	.word	0x20000b24
 8002234:	20001ec0 	.word	0x20001ec0
 8002238:	40012c00 	.word	0x40012c00
 800223c:	20001f58 	.word	0x20001f58

08002240 <inverter>:

void inverter(int16_t angle, uint16_t voltage, uint8_t direction){
 8002240:	b480      	push	{r7}
 8002242:	b08b      	sub	sp, #44	; 0x2c
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	80fb      	strh	r3, [r7, #6]
 800224a:	460b      	mov	r3, r1
 800224c:	80bb      	strh	r3, [r7, #4]
 800224e:	4613      	mov	r3, r2
 8002250:	70fb      	strb	r3, [r7, #3]
	angle = (angle+360*2)%360;
 8002252:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002256:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800225a:	4a9d      	ldr	r2, [pc, #628]	; (80024d0 <inverter+0x290>)
 800225c:	fb82 1203 	smull	r1, r2, r2, r3
 8002260:	441a      	add	r2, r3
 8002262:	1211      	asrs	r1, r2, #8
 8002264:	17da      	asrs	r2, r3, #31
 8002266:	1a8a      	subs	r2, r1, r2
 8002268:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800226c:	fb01 f202 	mul.w	r2, r1, r2
 8002270:	1a9a      	subs	r2, r3, r2
 8002272:	4613      	mov	r3, r2
 8002274:	80fb      	strh	r3, [r7, #6]

	uint16_t duty = voltage; //(voltage * duty_max)/ (*V_bat);
 8002276:	88bb      	ldrh	r3, [r7, #4]
 8002278:	84fb      	strh	r3, [r7, #38]	; 0x26
	if(duty > duty_max)duty = duty_max;
 800227a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800227c:	f240 52db 	movw	r2, #1499	; 0x5db
 8002280:	4293      	cmp	r3, r2
 8002282:	d902      	bls.n	800228a <inverter+0x4a>
 8002284:	f240 53db 	movw	r3, #1499	; 0x5db
 8002288:	84fb      	strh	r3, [r7, #38]	; 0x26

	uint32_t compare_M1 = 0;
 800228a:	2300      	movs	r3, #0
 800228c:	623b      	str	r3, [r7, #32]
	uint32_t compare_M2 = 0;
 800228e:	2300      	movs	r3, #0
 8002290:	61fb      	str	r3, [r7, #28]
	uint32_t compare_M3 = 0;
 8002292:	2300      	movs	r3, #0
 8002294:	61bb      	str	r3, [r7, #24]

	float deg = (float)(angle%60);
 8002296:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800229a:	4b8e      	ldr	r3, [pc, #568]	; (80024d4 <inverter+0x294>)
 800229c:	fb83 1302 	smull	r1, r3, r3, r2
 80022a0:	4413      	add	r3, r2
 80022a2:	1159      	asrs	r1, r3, #5
 80022a4:	17d3      	asrs	r3, r2, #31
 80022a6:	1ac9      	subs	r1, r1, r3
 80022a8:	460b      	mov	r3, r1
 80022aa:	011b      	lsls	r3, r3, #4
 80022ac:	1a5b      	subs	r3, r3, r1
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	b21b      	sxth	r3, r3
 80022b4:	ee07 3a90 	vmov	s15, r3
 80022b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022bc:	edc7 7a05 	vstr	s15, [r7, #20]
	uint16_t T1 = (uint16_t)(duty*(float)( 4*(60-deg)*(180-(60-deg))/(40500 - (60-deg)*(180-(60-deg))))); //*pi/180
 80022c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80022c2:	ee07 3a90 	vmov	s15, r3
 80022c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022ca:	eddf 6a83 	vldr	s13, [pc, #524]	; 80024d8 <inverter+0x298>
 80022ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80022d2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80022d6:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80022da:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80022de:	ed9f 6a7e 	vldr	s12, [pc, #504]	; 80024d8 <inverter+0x298>
 80022e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80022e6:	ee76 7a67 	vsub.f32	s15, s12, s15
 80022ea:	ed9f 6a7c 	vldr	s12, [pc, #496]	; 80024dc <inverter+0x29c>
 80022ee:	ee76 7a67 	vsub.f32	s15, s12, s15
 80022f2:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80022f6:	eddf 6a78 	vldr	s13, [pc, #480]	; 80024d8 <inverter+0x298>
 80022fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80022fe:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002302:	eddf 5a75 	vldr	s11, [pc, #468]	; 80024d8 <inverter+0x298>
 8002306:	edd7 7a05 	vldr	s15, [r7, #20]
 800230a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800230e:	eddf 5a73 	vldr	s11, [pc, #460]	; 80024dc <inverter+0x29c>
 8002312:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8002316:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800231a:	eddf 6a71 	vldr	s13, [pc, #452]	; 80024e0 <inverter+0x2a0>
 800231e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002322:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800232a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800232e:	ee17 3a90 	vmov	r3, s15
 8002332:	827b      	strh	r3, [r7, #18]
	uint16_t T2 = (uint16_t)(duty*(float)(4*deg*(180-deg)/(40500 - deg*(180-deg))));
 8002334:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002336:	ee07 3a90 	vmov	s15, r3
 800233a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800233e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002342:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002346:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800234a:	ed9f 6a64 	vldr	s12, [pc, #400]	; 80024dc <inverter+0x29c>
 800234e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002352:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002356:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800235a:	eddf 6a60 	vldr	s13, [pc, #384]	; 80024dc <inverter+0x29c>
 800235e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002362:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002366:	edd7 7a05 	vldr	s15, [r7, #20]
 800236a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800236e:	eddf 6a5c 	vldr	s13, [pc, #368]	; 80024e0 <inverter+0x2a0>
 8002372:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002376:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800237a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800237e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002382:	ee17 3a90 	vmov	r3, s15
 8002386:	823b      	strh	r3, [r7, #16]
	uint16_t T0 = (duty_max-T1-T2)/2;
 8002388:	8a7b      	ldrh	r3, [r7, #18]
 800238a:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 800238e:	3303      	adds	r3, #3
 8002390:	8a3a      	ldrh	r2, [r7, #16]
 8002392:	1a9b      	subs	r3, r3, r2
 8002394:	0fda      	lsrs	r2, r3, #31
 8002396:	4413      	add	r3, r2
 8002398:	105b      	asrs	r3, r3, #1
 800239a:	81fb      	strh	r3, [r7, #14]

	if(angle >= 0 && angle < 60){
 800239c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	db10      	blt.n	80023c6 <inverter+0x186>
 80023a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023a8:	2b3b      	cmp	r3, #59	; 0x3b
 80023aa:	dc0c      	bgt.n	80023c6 <inverter+0x186>
		compare_M1 = T0;
 80023ac:	89fb      	ldrh	r3, [r7, #14]
 80023ae:	623b      	str	r3, [r7, #32]
		compare_M2 = T0+T2;
 80023b0:	89fa      	ldrh	r2, [r7, #14]
 80023b2:	8a3b      	ldrh	r3, [r7, #16]
 80023b4:	4413      	add	r3, r2
 80023b6:	61fb      	str	r3, [r7, #28]
		compare_M3 = T0+T1+T2;
 80023b8:	89fa      	ldrh	r2, [r7, #14]
 80023ba:	8a7b      	ldrh	r3, [r7, #18]
 80023bc:	441a      	add	r2, r3
 80023be:	8a3b      	ldrh	r3, [r7, #16]
 80023c0:	4413      	add	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
 80023c4:	e06a      	b.n	800249c <inverter+0x25c>
		}
	else if(angle >= 60 && angle < 120){
 80023c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023ca:	2b3b      	cmp	r3, #59	; 0x3b
 80023cc:	dd10      	ble.n	80023f0 <inverter+0x1b0>
 80023ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023d2:	2b77      	cmp	r3, #119	; 0x77
 80023d4:	dc0c      	bgt.n	80023f0 <inverter+0x1b0>
		compare_M1 = T0;
 80023d6:	89fb      	ldrh	r3, [r7, #14]
 80023d8:	623b      	str	r3, [r7, #32]
		compare_M2 = T0+T1+T2;
 80023da:	89fa      	ldrh	r2, [r7, #14]
 80023dc:	8a7b      	ldrh	r3, [r7, #18]
 80023de:	441a      	add	r2, r3
 80023e0:	8a3b      	ldrh	r3, [r7, #16]
 80023e2:	4413      	add	r3, r2
 80023e4:	61fb      	str	r3, [r7, #28]
		compare_M3 = T0+T1;
 80023e6:	89fa      	ldrh	r2, [r7, #14]
 80023e8:	8a7b      	ldrh	r3, [r7, #18]
 80023ea:	4413      	add	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
 80023ee:	e055      	b.n	800249c <inverter+0x25c>
		}
	else if(angle >= 120 && angle < 180){
 80023f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023f4:	2b77      	cmp	r3, #119	; 0x77
 80023f6:	dd10      	ble.n	800241a <inverter+0x1da>
 80023f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023fc:	2bb3      	cmp	r3, #179	; 0xb3
 80023fe:	dc0c      	bgt.n	800241a <inverter+0x1da>
		compare_M1 = T0+T2;
 8002400:	89fa      	ldrh	r2, [r7, #14]
 8002402:	8a3b      	ldrh	r3, [r7, #16]
 8002404:	4413      	add	r3, r2
 8002406:	623b      	str	r3, [r7, #32]
		compare_M2 = T0+T1+T2;
 8002408:	89fa      	ldrh	r2, [r7, #14]
 800240a:	8a7b      	ldrh	r3, [r7, #18]
 800240c:	441a      	add	r2, r3
 800240e:	8a3b      	ldrh	r3, [r7, #16]
 8002410:	4413      	add	r3, r2
 8002412:	61fb      	str	r3, [r7, #28]
		compare_M3 = T0;
 8002414:	89fb      	ldrh	r3, [r7, #14]
 8002416:	61bb      	str	r3, [r7, #24]
 8002418:	e040      	b.n	800249c <inverter+0x25c>
		}
	else if(angle >= 180 && angle < 240){
 800241a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800241e:	2bb3      	cmp	r3, #179	; 0xb3
 8002420:	dd10      	ble.n	8002444 <inverter+0x204>
 8002422:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002426:	2bef      	cmp	r3, #239	; 0xef
 8002428:	dc0c      	bgt.n	8002444 <inverter+0x204>
		compare_M1 = T0+T1+T2;
 800242a:	89fa      	ldrh	r2, [r7, #14]
 800242c:	8a7b      	ldrh	r3, [r7, #18]
 800242e:	441a      	add	r2, r3
 8002430:	8a3b      	ldrh	r3, [r7, #16]
 8002432:	4413      	add	r3, r2
 8002434:	623b      	str	r3, [r7, #32]
		compare_M2 = T0+T1;
 8002436:	89fa      	ldrh	r2, [r7, #14]
 8002438:	8a7b      	ldrh	r3, [r7, #18]
 800243a:	4413      	add	r3, r2
 800243c:	61fb      	str	r3, [r7, #28]
		compare_M3 = T0;
 800243e:	89fb      	ldrh	r3, [r7, #14]
 8002440:	61bb      	str	r3, [r7, #24]
 8002442:	e02b      	b.n	800249c <inverter+0x25c>
		}
	else if(angle >= 240 && angle < 300){
 8002444:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002448:	2bef      	cmp	r3, #239	; 0xef
 800244a:	dd11      	ble.n	8002470 <inverter+0x230>
 800244c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002450:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002454:	da0c      	bge.n	8002470 <inverter+0x230>
		compare_M1 = T0+T1+T2;
 8002456:	89fa      	ldrh	r2, [r7, #14]
 8002458:	8a7b      	ldrh	r3, [r7, #18]
 800245a:	441a      	add	r2, r3
 800245c:	8a3b      	ldrh	r3, [r7, #16]
 800245e:	4413      	add	r3, r2
 8002460:	623b      	str	r3, [r7, #32]
		compare_M2 = T0;
 8002462:	89fb      	ldrh	r3, [r7, #14]
 8002464:	61fb      	str	r3, [r7, #28]
		compare_M3 = T0+T2;
 8002466:	89fa      	ldrh	r2, [r7, #14]
 8002468:	8a3b      	ldrh	r3, [r7, #16]
 800246a:	4413      	add	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
 800246e:	e015      	b.n	800249c <inverter+0x25c>
		}
	else if(angle >= 300 && angle <= 360){
 8002470:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002474:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002478:	db10      	blt.n	800249c <inverter+0x25c>
 800247a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800247e:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8002482:	dc0b      	bgt.n	800249c <inverter+0x25c>
		compare_M1 = T0+T1;
 8002484:	89fa      	ldrh	r2, [r7, #14]
 8002486:	8a7b      	ldrh	r3, [r7, #18]
 8002488:	4413      	add	r3, r2
 800248a:	623b      	str	r3, [r7, #32]
		compare_M2 = T0;
 800248c:	89fb      	ldrh	r3, [r7, #14]
 800248e:	61fb      	str	r3, [r7, #28]
		compare_M3 = T0+T1+T2;
 8002490:	89fa      	ldrh	r2, [r7, #14]
 8002492:	8a7b      	ldrh	r3, [r7, #18]
 8002494:	441a      	add	r2, r3
 8002496:	8a3b      	ldrh	r3, [r7, #16]
 8002498:	4413      	add	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
		}
//	PrintServerPrintf("OK %d %d %d %d\r\n", (uint32_t)(compare_M1), (uint32_t)(compare_M2), (uint32_t)(compare_M3), (int32_t)angle);
	TIM1->CCR1 = compare_M1;
 800249c:	4a11      	ldr	r2, [pc, #68]	; (80024e4 <inverter+0x2a4>)
 800249e:	6a3b      	ldr	r3, [r7, #32]
 80024a0:	6353      	str	r3, [r2, #52]	; 0x34
	if(direction){
 80024a2:	78fb      	ldrb	r3, [r7, #3]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d006      	beq.n	80024b6 <inverter+0x276>
		TIM1->CCR2 = compare_M3;
 80024a8:	4a0e      	ldr	r2, [pc, #56]	; (80024e4 <inverter+0x2a4>)
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	6393      	str	r3, [r2, #56]	; 0x38
		TIM1->CCR3 = compare_M2;
 80024ae:	4a0d      	ldr	r2, [pc, #52]	; (80024e4 <inverter+0x2a4>)
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	63d3      	str	r3, [r2, #60]	; 0x3c
	}


//	dac_value(angle*8+200);

}
 80024b4:	e005      	b.n	80024c2 <inverter+0x282>
		TIM1->CCR2 = compare_M2;
 80024b6:	4a0b      	ldr	r2, [pc, #44]	; (80024e4 <inverter+0x2a4>)
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	6393      	str	r3, [r2, #56]	; 0x38
		TIM1->CCR3 = compare_M3;
 80024bc:	4a09      	ldr	r2, [pc, #36]	; (80024e4 <inverter+0x2a4>)
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80024c2:	bf00      	nop
 80024c4:	372c      	adds	r7, #44	; 0x2c
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	b60b60b7 	.word	0xb60b60b7
 80024d4:	88888889 	.word	0x88888889
 80024d8:	42700000 	.word	0x42700000
 80024dc:	43340000 	.word	0x43340000
 80024e0:	471e3400 	.word	0x471e3400
 80024e4:	40012c00 	.word	0x40012c00

080024e8 <shutoff>:
void shutoff(void){
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
	TIM1->CCR1 = 0;
 80024ec:	4b06      	ldr	r3, [pc, #24]	; (8002508 <shutoff+0x20>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 80024f2:	4b05      	ldr	r3, [pc, #20]	; (8002508 <shutoff+0x20>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 80024f8:	4b03      	ldr	r3, [pc, #12]	; (8002508 <shutoff+0x20>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80024fe:	bf00      	nop
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr
 8002508:	40012c00 	.word	0x40012c00

0800250c <shutdown>:
void shutdown(void){
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1); //error
 8002510:	2100      	movs	r1, #0
 8002512:	480e      	ldr	r0, [pc, #56]	; (800254c <shutdown+0x40>)
 8002514:	f009 faaa 	bl	800ba6c <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1); //error
 8002518:	2100      	movs	r1, #0
 800251a:	480c      	ldr	r0, [pc, #48]	; (800254c <shutdown+0x40>)
 800251c:	f00a fbee 	bl	800ccfc <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2); //error
 8002520:	2104      	movs	r1, #4
 8002522:	480a      	ldr	r0, [pc, #40]	; (800254c <shutdown+0x40>)
 8002524:	f009 faa2 	bl	800ba6c <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2); //error
 8002528:	2104      	movs	r1, #4
 800252a:	4808      	ldr	r0, [pc, #32]	; (800254c <shutdown+0x40>)
 800252c:	f00a fbe6 	bl	800ccfc <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3); //error
 8002530:	2108      	movs	r1, #8
 8002532:	4806      	ldr	r0, [pc, #24]	; (800254c <shutdown+0x40>)
 8002534:	f009 fa9a 	bl	800ba6c <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3); //error
 8002538:	2108      	movs	r1, #8
 800253a:	4804      	ldr	r0, [pc, #16]	; (800254c <shutdown+0x40>)
 800253c:	f00a fbde 	bl	800ccfc <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_Base_Stop(&htim1);
 8002540:	4802      	ldr	r0, [pc, #8]	; (800254c <shutdown+0x40>)
 8002542:	f009 f8a0 	bl	800b686 <HAL_TIM_Base_Stop>
}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	20001ec0 	.word	0x20001ec0

08002550 <order_phases>:
float electrical_offset = 0;
float pi = 3.14159265f;

uint32_t motor_lut[LUT_SIZE];

void order_phases(Encoders *ps, Current *cs){ //, GPIOStruct *gpio, ControllerStruct *controller, PreferenceWriter *prefs
 8002550:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002554:	b090      	sub	sp, #64	; 0x40
 8002556:	af04      	add	r7, sp, #16
 8002558:	6078      	str	r0, [r7, #4]
 800255a:	6039      	str	r1, [r7, #0]

    ///Checks phase order, to ensure that positive Q current produces
    ///torque in the positive direction wrt the position sensor.
	PrintServerPrintf("\n\r Checking phase ordering\n\r");
 800255c:	48a8      	ldr	r0, [pc, #672]	; (8002800 <order_phases+0x2b0>)
 800255e:	f001 fa1d 	bl	800399c <PrintServerPrintf>
    float theta_ref = 0;
 8002562:	f04f 0300 	mov.w	r3, #0
 8002566:	62fb      	str	r3, [r7, #44]	; 0x2c
    float theta_actual = 0;
 8002568:	f04f 0300 	mov.w	r3, #0
 800256c:	61fb      	str	r3, [r7, #28]
    int sample_counter = 0;
 800256e:	2300      	movs	r3, #0
 8002570:	62bb      	str	r3, [r7, #40]	; 0x28

    float d;
    float q;

    PHASE_ORDER = 0;
 8002572:	4ba4      	ldr	r3, [pc, #656]	; (8002804 <order_phases+0x2b4>)
 8002574:	2200      	movs	r2, #0
 8002576:	701a      	strb	r2, [r3, #0]

    ///Set voltage angle to zero, wait for rotor position to settle
    inverter((int16_t)theta_ref, CAL_DUTY, PHASE_ORDER);
 8002578:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800257c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002580:	ee17 3a90 	vmov	r3, s15
 8002584:	b21b      	sxth	r3, r3
 8002586:	4a9f      	ldr	r2, [pc, #636]	; (8002804 <order_phases+0x2b4>)
 8002588:	7812      	ldrb	r2, [r2, #0]
 800258a:	2164      	movs	r1, #100	; 0x64
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff fe57 	bl	8002240 <inverter>
    HAL_Delay(1000);
 8002592:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002596:	f003 fbf5 	bl	8005d84 <HAL_Delay>
    //float theta_start = ps->GetMechPositionFixed();                                  //get initial rotor position
    float theta_start;

    //current d and q
    dq0(theta_ref*pi/180, (float)cs->Current_M1/1000, (float)cs->Current_M2/1000, (float)cs->Current_M3/1000, &d, &q);
 800259a:	4b9b      	ldr	r3, [pc, #620]	; (8002808 <order_phases+0x2b8>)
 800259c:	ed93 7a00 	vldr	s14, [r3]
 80025a0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80025a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025a8:	eddf 6a98 	vldr	s13, [pc, #608]	; 800280c <order_phases+0x2bc>
 80025ac:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	ee07 3a90 	vmov	s15, r3
 80025b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025bc:	ed9f 6a94 	vldr	s12, [pc, #592]	; 8002810 <order_phases+0x2c0>
 80025c0:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	ee07 3a90 	vmov	s15, r3
 80025cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025d0:	eddf 5a8f 	vldr	s11, [pc, #572]	; 8002810 <order_phases+0x2c0>
 80025d4:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	ee07 3a90 	vmov	s15, r3
 80025e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025e4:	ed9f 5a8a 	vldr	s10, [pc, #552]	; 8002810 <order_phases+0x2c0>
 80025e8:	eec7 5a85 	vdiv.f32	s11, s15, s10
 80025ec:	f107 020c 	add.w	r2, r7, #12
 80025f0:	f107 0310 	add.w	r3, r7, #16
 80025f4:	4611      	mov	r1, r2
 80025f6:	4618      	mov	r0, r3
 80025f8:	eef0 1a65 	vmov.f32	s3, s11
 80025fc:	eeb0 1a46 	vmov.f32	s2, s12
 8002600:	eef0 0a66 	vmov.f32	s1, s13
 8002604:	eeb0 0a47 	vmov.f32	s0, s14
 8002608:	f001 fcfa 	bl	8004000 <dq0>
//    controller->i_b = I_SCALE*(float)(controller->adc2_raw - controller->adc2_offset);    //Calculate phase currents from ADC readings
//    controller->i_c = I_SCALE*(float)(controller->adc1_raw - controller->adc1_offset);
//    controller->i_a = -controller->i_b - controller->i_c;
//    dq0(controller->theta_elec, controller->i_a, controller->i_b, controller->i_c, &controller->i_d, &controller->i_q);    //dq0 transform on currents
    float current = sqrt((d*d + q*q));
 800260c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002610:	edd7 7a04 	vldr	s15, [r7, #16]
 8002614:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002618:	edd7 6a03 	vldr	s13, [r7, #12]
 800261c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002620:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002624:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002628:	ee17 0a90 	vmov	r0, s15
 800262c:	f7fd ffb4 	bl	8000598 <__aeabi_f2d>
 8002630:	4602      	mov	r2, r0
 8002632:	460b      	mov	r3, r1
 8002634:	ec43 2b10 	vmov	d0, r2, r3
 8002638:	f00e ff72 	bl	8011520 <sqrt>
 800263c:	ec53 2b10 	vmov	r2, r3, d0
 8002640:	4610      	mov	r0, r2
 8002642:	4619      	mov	r1, r3
 8002644:	f7fe faf8 	bl	8000c38 <__aeabi_d2f>
 8002648:	4603      	mov	r3, r0
 800264a:	61bb      	str	r3, [r7, #24]
    PrintServerPrintf("\n\rCurrent\n\r");
 800264c:	4871      	ldr	r0, [pc, #452]	; (8002814 <order_phases+0x2c4>)
 800264e:	f001 f9a5 	bl	800399c <PrintServerPrintf>
    PrintServerPrintf("%f %f %f\n\r\n\r", d, q, current);
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	4618      	mov	r0, r3
 8002656:	f7fd ff9f 	bl	8000598 <__aeabi_f2d>
 800265a:	4680      	mov	r8, r0
 800265c:	4689      	mov	r9, r1
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	4618      	mov	r0, r3
 8002662:	f7fd ff99 	bl	8000598 <__aeabi_f2d>
 8002666:	4604      	mov	r4, r0
 8002668:	460d      	mov	r5, r1
 800266a:	69b8      	ldr	r0, [r7, #24]
 800266c:	f7fd ff94 	bl	8000598 <__aeabi_f2d>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002678:	e9cd 4500 	strd	r4, r5, [sp]
 800267c:	4642      	mov	r2, r8
 800267e:	464b      	mov	r3, r9
 8002680:	4865      	ldr	r0, [pc, #404]	; (8002818 <order_phases+0x2c8>)
 8002682:	f001 f98b 	bl	800399c <PrintServerPrintf>
    /// Rotate voltage angle
    while(theta_ref < 360*2){       //rotate for 2 electrical cycles
 8002686:	e045      	b.n	8002714 <order_phases+0x1c4>
    	inverter((int16_t)theta_ref, CAL_DUTY, PHASE_ORDER);
 8002688:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800268c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002690:	ee17 3a90 	vmov	r3, s15
 8002694:	b21b      	sxth	r3, r3
 8002696:	4a5b      	ldr	r2, [pc, #364]	; (8002804 <order_phases+0x2b4>)
 8002698:	7812      	ldrb	r2, [r2, #0]
 800269a:	2164      	movs	r1, #100	; 0x64
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff fdcf 	bl	8002240 <inverter>
    	HAL_Delay(1);
 80026a2:	2001      	movs	r0, #1
 80026a4:	f003 fb6e 	bl	8005d84 <HAL_Delay>
       theta_actual = (float)ps->Encoder1_pos/1000; //sample position sensor
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	ee07 3a90 	vmov	s15, r3
 80026b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026b4:	eddf 6a56 	vldr	s13, [pc, #344]	; 8002810 <order_phases+0x2c0>
 80026b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026bc:	edc7 7a07 	vstr	s15, [r7, #28]
       if(theta_ref==0){theta_start = theta_actual;}
 80026c0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80026c4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80026c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026cc:	d101      	bne.n	80026d2 <order_phases+0x182>
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	627b      	str	r3, [r7, #36]	; 0x24
       if(sample_counter >= 1){
 80026d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	dd12      	ble.n	80026fe <order_phases+0x1ae>
           sample_counter = 0 ;
 80026d8:	2300      	movs	r3, #0
 80026da:	62bb      	str	r3, [r7, #40]	; 0x28
           PrintServerPrintf("%.4f %.4f\n\r", (float)theta_ref, theta_actual);
 80026dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80026de:	f7fd ff5b 	bl	8000598 <__aeabi_f2d>
 80026e2:	4604      	mov	r4, r0
 80026e4:	460d      	mov	r5, r1
 80026e6:	69f8      	ldr	r0, [r7, #28]
 80026e8:	f7fd ff56 	bl	8000598 <__aeabi_f2d>
 80026ec:	4602      	mov	r2, r0
 80026ee:	460b      	mov	r3, r1
 80026f0:	e9cd 2300 	strd	r2, r3, [sp]
 80026f4:	4622      	mov	r2, r4
 80026f6:	462b      	mov	r3, r5
 80026f8:	4848      	ldr	r0, [pc, #288]	; (800281c <order_phases+0x2cc>)
 80026fa:	f001 f94f 	bl	800399c <PrintServerPrintf>
        }
        sample_counter++;
 80026fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002700:	3301      	adds	r3, #1
 8002702:	62bb      	str	r3, [r7, #40]	; 0x28
       theta_ref += 1;
 8002704:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002708:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800270c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002710:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    while(theta_ref < 360*2){       //rotate for 2 electrical cycles
 8002714:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002718:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8002820 <order_phases+0x2d0>
 800271c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002724:	d4b0      	bmi.n	8002688 <order_phases+0x138>
        }
    float theta_end = (float)ps->Encoder1_pos/1000;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	ee07 3a90 	vmov	s15, r3
 800272e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002732:	eddf 6a37 	vldr	s13, [pc, #220]	; 8002810 <order_phases+0x2c0>
 8002736:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800273a:	edc7 7a05 	vstr	s15, [r7, #20]
    int direction = (theta_end - theta_start)>0;
 800273e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002742:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002746:	ee77 7a67 	vsub.f32	s15, s14, s15
 800274a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800274e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002752:	bfcc      	ite	gt
 8002754:	2301      	movgt	r3, #1
 8002756:	2300      	movle	r3, #0
 8002758:	b2db      	uxtb	r3, r3
 800275a:	623b      	str	r3, [r7, #32]
    if ((theta_end - theta_start) > 180) direction = 0;
 800275c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002760:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002764:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002768:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800280c <order_phases+0x2bc>
 800276c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002774:	dd01      	ble.n	800277a <order_phases+0x22a>
 8002776:	2300      	movs	r3, #0
 8002778:	623b      	str	r3, [r7, #32]
    if ((theta_end - theta_start) < -180) direction = 1;
 800277a:	ed97 7a05 	vldr	s14, [r7, #20]
 800277e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002782:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002786:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002824 <order_phases+0x2d4>
 800278a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800278e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002792:	d501      	bpl.n	8002798 <order_phases+0x248>
 8002794:	2301      	movs	r3, #1
 8002796:	623b      	str	r3, [r7, #32]
    PrintServerPrintf("Theta Start:   %f    Theta End:  %f\n\r", theta_start, theta_end);
 8002798:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800279a:	f7fd fefd 	bl	8000598 <__aeabi_f2d>
 800279e:	4604      	mov	r4, r0
 80027a0:	460d      	mov	r5, r1
 80027a2:	6978      	ldr	r0, [r7, #20]
 80027a4:	f7fd fef8 	bl	8000598 <__aeabi_f2d>
 80027a8:	4602      	mov	r2, r0
 80027aa:	460b      	mov	r3, r1
 80027ac:	e9cd 2300 	strd	r2, r3, [sp]
 80027b0:	4622      	mov	r2, r4
 80027b2:	462b      	mov	r3, r5
 80027b4:	481c      	ldr	r0, [pc, #112]	; (8002828 <order_phases+0x2d8>)
 80027b6:	f001 f8f1 	bl	800399c <PrintServerPrintf>
    PrintServerPrintf("Direction:  %d\n\r", direction);
 80027ba:	6a39      	ldr	r1, [r7, #32]
 80027bc:	481b      	ldr	r0, [pc, #108]	; (800282c <order_phases+0x2dc>)
 80027be:	f001 f8ed 	bl	800399c <PrintServerPrintf>
    if(direction){PrintServerPrintf("Phasing correct\n\r");}
 80027c2:	6a3b      	ldr	r3, [r7, #32]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d003      	beq.n	80027d0 <order_phases+0x280>
 80027c8:	4819      	ldr	r0, [pc, #100]	; (8002830 <order_phases+0x2e0>)
 80027ca:	f001 f8e7 	bl	800399c <PrintServerPrintf>
 80027ce:	e005      	b.n	80027dc <order_phases+0x28c>
    else if(!direction){PrintServerPrintf("Phasing incorrect.  Swapping phases V and W\n\r");}
 80027d0:	6a3b      	ldr	r3, [r7, #32]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d102      	bne.n	80027dc <order_phases+0x28c>
 80027d6:	4817      	ldr	r0, [pc, #92]	; (8002834 <order_phases+0x2e4>)
 80027d8:	f001 f8e0 	bl	800399c <PrintServerPrintf>
    PHASE_ORDER = !direction;
 80027dc:	6a3b      	ldr	r3, [r7, #32]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	bf0c      	ite	eq
 80027e2:	2301      	moveq	r3, #1
 80027e4:	2300      	movne	r3, #0
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	461a      	mov	r2, r3
 80027ea:	4b06      	ldr	r3, [pc, #24]	; (8002804 <order_phases+0x2b4>)
 80027ec:	701a      	strb	r2, [r3, #0]
    HAL_Delay(10);
 80027ee:	200a      	movs	r0, #10
 80027f0:	f003 fac8 	bl	8005d84 <HAL_Delay>
    }
 80027f4:	bf00      	nop
 80027f6:	3730      	adds	r7, #48	; 0x30
 80027f8:	46bd      	mov	sp, r7
 80027fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80027fe:	bf00      	nop
 8002800:	08012428 	.word	0x08012428
 8002804:	20000f68 	.word	0x20000f68
 8002808:	20000070 	.word	0x20000070
 800280c:	43340000 	.word	0x43340000
 8002810:	447a0000 	.word	0x447a0000
 8002814:	08012448 	.word	0x08012448
 8002818:	08012454 	.word	0x08012454
 800281c:	08012464 	.word	0x08012464
 8002820:	44340000 	.word	0x44340000
 8002824:	c3340000 	.word	0xc3340000
 8002828:	08012470 	.word	0x08012470
 800282c:	08012498 	.word	0x08012498
 8002830:	080124ac 	.word	0x080124ac
 8002834:	080124c0 	.word	0x080124c0

08002838 <calibrate>:


void calibrate(Encoders *ps, Current *cs){ //, PositionSensor *ps, GPIOStruct *gpio, ControllerStruct *controller, PreferenceWriter *prefs
 8002838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800283c:	b0c3      	sub	sp, #268	; 0x10c
 800283e:	af04      	add	r7, sp, #16
 8002840:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002842:	63b9      	str	r1, [r7, #56]	; 0x38
 8002844:	466b      	mov	r3, sp
 8002846:	461e      	mov	r6, r3
    /// Measures the electrical angle offset of the position sensor
    /// and (in the future) corrects nonlinearity due to position sensor eccentricity
	PrintServerPrintf("Starting calibration procedure\n\r");
 8002848:	48d4      	ldr	r0, [pc, #848]	; (8002b9c <calibrate+0x364>)
 800284a:	f001 f8a7 	bl	800399c <PrintServerPrintf>

   const int n = SIZE*NPP;                                                      // number of positions to be sampled per mechanical rotation.  Multiple of NPP for filtering reasons (see later)
 800284e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002852:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
   const int n2 = 40;                                                          // increments between saved samples (for smoothing motion)
 8002856:	2328      	movs	r3, #40	; 0x28
 8002858:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
   float delta = 360.0f*NPP/(n*n2);                                              // change in angle between samples
 800285c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002860:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002864:	fb02 f303 	mul.w	r3, r2, r3
 8002868:	ee07 3a90 	vmov	s15, r3
 800286c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002870:	eddf 6acb 	vldr	s13, [pc, #812]	; 8002ba0 <calibrate+0x368>
 8002874:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002878:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
//   const int  n_lut =  SIZE*NPP;
   const int window = WINDOW_SIZE;
 800287c:	2310      	movs	r3, #16
 800287e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   float cogging_current[WINDOW_SIZE] = {0};
 8002882:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8002886:	2340      	movs	r3, #64	; 0x40
 8002888:	461a      	mov	r2, r3
 800288a:	2100      	movs	r1, #0
 800288c:	f00c fd20 	bl	800f2d0 <memset>


   float theta_ref = 0;
 8002890:	f04f 0300 	mov.w	r3, #0
 8002894:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
   float theta_actual = 0;
 8002898:	f04f 0300 	mov.w	r3, #0
 800289c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

   float d;
   float q;


    float error_f[n];
 80028a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80028a4:	3b01      	subs	r3, #1
 80028a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80028aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80028ae:	2200      	movs	r2, #0
 80028b0:	461c      	mov	r4, r3
 80028b2:	4615      	mov	r5, r2
 80028b4:	f04f 0200 	mov.w	r2, #0
 80028b8:	f04f 0300 	mov.w	r3, #0
 80028bc:	016b      	lsls	r3, r5, #5
 80028be:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80028c2:	0162      	lsls	r2, r4, #5
 80028c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80028c8:	2200      	movs	r2, #0
 80028ca:	4698      	mov	r8, r3
 80028cc:	4691      	mov	r9, r2
 80028ce:	f04f 0200 	mov.w	r2, #0
 80028d2:	f04f 0300 	mov.w	r3, #0
 80028d6:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80028da:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80028de:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80028e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	3307      	adds	r3, #7
 80028ea:	08db      	lsrs	r3, r3, #3
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	ebad 0d03 	sub.w	sp, sp, r3
 80028f2:	ab04      	add	r3, sp, #16
 80028f4:	3303      	adds	r3, #3
 80028f6:	089b      	lsrs	r3, r3, #2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    float error_b[n];
 80028fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002902:	3b01      	subs	r3, #1
 8002904:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002908:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800290c:	2200      	movs	r2, #0
 800290e:	469a      	mov	sl, r3
 8002910:	4693      	mov	fp, r2
 8002912:	f04f 0200 	mov.w	r2, #0
 8002916:	f04f 0300 	mov.w	r3, #0
 800291a:	ea4f 134b 	mov.w	r3, fp, lsl #5
 800291e:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8002922:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8002926:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800292a:	2200      	movs	r2, #0
 800292c:	633b      	str	r3, [r7, #48]	; 0x30
 800292e:	637a      	str	r2, [r7, #52]	; 0x34
 8002930:	f04f 0200 	mov.w	r2, #0
 8002934:	f04f 0300 	mov.w	r3, #0
 8002938:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800293c:	4629      	mov	r1, r5
 800293e:	014b      	lsls	r3, r1, #5
 8002940:	4621      	mov	r1, r4
 8002942:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8002946:	4621      	mov	r1, r4
 8002948:	014a      	lsls	r2, r1, #5
 800294a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	3307      	adds	r3, #7
 8002952:	08db      	lsrs	r3, r3, #3
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	ebad 0d03 	sub.w	sp, sp, r3
 800295a:	ab04      	add	r3, sp, #16
 800295c:	3303      	adds	r3, #3
 800295e:	089b      	lsrs	r3, r3, #2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
//    int lut[n];
    int raw_f[n];
 8002966:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800296a:	3b01      	subs	r3, #1
 800296c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002970:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002974:	2200      	movs	r2, #0
 8002976:	62bb      	str	r3, [r7, #40]	; 0x28
 8002978:	62fa      	str	r2, [r7, #44]	; 0x2c
 800297a:	f04f 0200 	mov.w	r2, #0
 800297e:	f04f 0300 	mov.w	r3, #0
 8002982:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8002986:	4629      	mov	r1, r5
 8002988:	014b      	lsls	r3, r1, #5
 800298a:	4621      	mov	r1, r4
 800298c:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8002990:	4621      	mov	r1, r4
 8002992:	014a      	lsls	r2, r1, #5
 8002994:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002998:	2200      	movs	r2, #0
 800299a:	623b      	str	r3, [r7, #32]
 800299c:	627a      	str	r2, [r7, #36]	; 0x24
 800299e:	f04f 0200 	mov.w	r2, #0
 80029a2:	f04f 0300 	mov.w	r3, #0
 80029a6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80029aa:	4629      	mov	r1, r5
 80029ac:	014b      	lsls	r3, r1, #5
 80029ae:	4621      	mov	r1, r4
 80029b0:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 80029b4:	4621      	mov	r1, r4
 80029b6:	014a      	lsls	r2, r1, #5
 80029b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	3307      	adds	r3, #7
 80029c0:	08db      	lsrs	r3, r3, #3
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	ebad 0d03 	sub.w	sp, sp, r3
 80029c8:	ab04      	add	r3, sp, #16
 80029ca:	3303      	adds	r3, #3
 80029cc:	089b      	lsrs	r3, r3, #2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    int raw_b[n];
 80029d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80029d8:	3b01      	subs	r3, #1
 80029da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80029de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80029e2:	2200      	movs	r2, #0
 80029e4:	61bb      	str	r3, [r7, #24]
 80029e6:	61fa      	str	r2, [r7, #28]
 80029e8:	f04f 0200 	mov.w	r2, #0
 80029ec:	f04f 0300 	mov.w	r3, #0
 80029f0:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80029f4:	4629      	mov	r1, r5
 80029f6:	014b      	lsls	r3, r1, #5
 80029f8:	4621      	mov	r1, r4
 80029fa:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 80029fe:	4621      	mov	r1, r4
 8002a00:	014a      	lsls	r2, r1, #5
 8002a02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002a06:	2200      	movs	r2, #0
 8002a08:	613b      	str	r3, [r7, #16]
 8002a0a:	617a      	str	r2, [r7, #20]
 8002a0c:	f04f 0200 	mov.w	r2, #0
 8002a10:	f04f 0300 	mov.w	r3, #0
 8002a14:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002a18:	4629      	mov	r1, r5
 8002a1a:	014b      	lsls	r3, r1, #5
 8002a1c:	4621      	mov	r1, r4
 8002a1e:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8002a22:	4621      	mov	r1, r4
 8002a24:	014a      	lsls	r2, r1, #5
 8002a26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	3307      	adds	r3, #7
 8002a2e:	08db      	lsrs	r3, r3, #3
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	ebad 0d03 	sub.w	sp, sp, r3
 8002a36:	ab04      	add	r3, sp, #16
 8002a38:	3303      	adds	r3, #3
 8002a3a:	089b      	lsrs	r3, r3, #2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    float error[n];
 8002a42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002a46:	3b01      	subs	r3, #1
 8002a48:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002a4c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002a50:	2200      	movs	r2, #0
 8002a52:	60bb      	str	r3, [r7, #8]
 8002a54:	60fa      	str	r2, [r7, #12]
 8002a56:	f04f 0200 	mov.w	r2, #0
 8002a5a:	f04f 0300 	mov.w	r3, #0
 8002a5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a62:	4629      	mov	r1, r5
 8002a64:	014b      	lsls	r3, r1, #5
 8002a66:	4621      	mov	r1, r4
 8002a68:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8002a6c:	4621      	mov	r1, r4
 8002a6e:	014a      	lsls	r2, r1, #5
 8002a70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002a74:	2200      	movs	r2, #0
 8002a76:	603b      	str	r3, [r7, #0]
 8002a78:	607a      	str	r2, [r7, #4]
 8002a7a:	f04f 0200 	mov.w	r2, #0
 8002a7e:	f04f 0300 	mov.w	r3, #0
 8002a82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a86:	4629      	mov	r1, r5
 8002a88:	014b      	lsls	r3, r1, #5
 8002a8a:	4621      	mov	r1, r4
 8002a8c:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8002a90:	4621      	mov	r1, r4
 8002a92:	014a      	lsls	r2, r1, #5
 8002a94:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	3307      	adds	r3, #7
 8002a9c:	08db      	lsrs	r3, r3, #3
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	ebad 0d03 	sub.w	sp, sp, r3
 8002aa4:	ab04      	add	r3, sp, #16
 8002aa6:	3303      	adds	r3, #3
 8002aa8:	089b      	lsrs	r3, r3, #2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90




    ///Set voltage angle to zero, wait for rotor position to settle
    inverter((int16_t)theta_ref, CAL_DUTY, PHASE_ORDER);
 8002ab0:	edd7 7a3d 	vldr	s15, [r7, #244]	; 0xf4
 8002ab4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ab8:	ee17 3a90 	vmov	r3, s15
 8002abc:	b21b      	sxth	r3, r3
 8002abe:	4a39      	ldr	r2, [pc, #228]	; (8002ba4 <calibrate+0x36c>)
 8002ac0:	7812      	ldrb	r2, [r2, #0]
 8002ac2:	2164      	movs	r1, #100	; 0x64
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff fbbb 	bl	8002240 <inverter>
    HAL_Delay(1000);
 8002aca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ace:	f003 f959 	bl	8005d84 <HAL_Delay>

    dq0(theta_ref*pi/180, (float)cs->Current_M1/1000, (float)cs->Current_M2/1000, (float)cs->Current_M3/1000, &d, &q);
 8002ad2:	4b35      	ldr	r3, [pc, #212]	; (8002ba8 <calibrate+0x370>)
 8002ad4:	ed93 7a00 	vldr	s14, [r3]
 8002ad8:	edd7 7a3d 	vldr	s15, [r7, #244]	; 0xf4
 8002adc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ae0:	eddf 6a32 	vldr	s13, [pc, #200]	; 8002bac <calibrate+0x374>
 8002ae4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	ee07 3a90 	vmov	s15, r3
 8002af0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002af4:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8002bb0 <calibrate+0x378>
 8002af8:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8002afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	ee07 3a90 	vmov	s15, r3
 8002b04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b08:	eddf 5a29 	vldr	s11, [pc, #164]	; 8002bb0 <calibrate+0x378>
 8002b0c:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8002b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	ee07 3a90 	vmov	s15, r3
 8002b18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b1c:	ed9f 5a24 	vldr	s10, [pc, #144]	; 8002bb0 <calibrate+0x378>
 8002b20:	eec7 5a85 	vdiv.f32	s11, s15, s10
 8002b24:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8002b28:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002b2c:	4611      	mov	r1, r2
 8002b2e:	4618      	mov	r0, r3
 8002b30:	eef0 1a65 	vmov.f32	s3, s11
 8002b34:	eeb0 1a46 	vmov.f32	s2, s12
 8002b38:	eef0 0a66 	vmov.f32	s1, s13
 8002b3c:	eeb0 0a47 	vmov.f32	s0, s14
 8002b40:	f001 fa5e 	bl	8004000 <dq0>
    float current = sqrt((d*d + q*q));
 8002b44:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002b48:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002b4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b50:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8002b54:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002b58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b60:	ee17 0a90 	vmov	r0, s15
 8002b64:	f7fd fd18 	bl	8000598 <__aeabi_f2d>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	ec43 2b10 	vmov	d0, r2, r3
 8002b70:	f00e fcd6 	bl	8011520 <sqrt>
 8002b74:	ec53 2b10 	vmov	r2, r3, d0
 8002b78:	4610      	mov	r0, r2
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	f7fe f85c 	bl	8000c38 <__aeabi_d2f>
 8002b80:	4603      	mov	r3, r0
 8002b82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PrintServerPrintf("Current Angle : Rotor Angle : Raw Encoder \n\r\n\r");
 8002b86:	480b      	ldr	r0, [pc, #44]	; (8002bb4 <calibrate+0x37c>)
 8002b88:	f000 ff08 	bl	800399c <PrintServerPrintf>
    for(int i = 0; i<n; i++){                                                   // rotate forwards
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002b92:	e0a2      	b.n	8002cda <calibrate+0x4a2>
       for(int j = 0; j<n2; j++){
 8002b94:	2300      	movs	r3, #0
 8002b96:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002b9a:	e092      	b.n	8002cc2 <calibrate+0x48a>
 8002b9c:	080124f0 	.word	0x080124f0
 8002ba0:	45bf4000 	.word	0x45bf4000
 8002ba4:	20000f68 	.word	0x20000f68
 8002ba8:	20000070 	.word	0x20000070
 8002bac:	43340000 	.word	0x43340000
 8002bb0:	447a0000 	.word	0x447a0000
 8002bb4:	08012514 	.word	0x08012514
        theta_ref += delta;
 8002bb8:	ed97 7a3d 	vldr	s14, [r7, #244]	; 0xf4
 8002bbc:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002bc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bc4:	edc7 7a3d 	vstr	s15, [r7, #244]	; 0xf4
        inverter((int16_t)theta_ref, CAL_DUTY, PHASE_ORDER);
 8002bc8:	edd7 7a3d 	vldr	s15, [r7, #244]	; 0xf4
 8002bcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bd0:	ee17 3a90 	vmov	r3, s15
 8002bd4:	b21b      	sxth	r3, r3
 8002bd6:	4ae0      	ldr	r2, [pc, #896]	; (8002f58 <calibrate+0x720>)
 8002bd8:	7812      	ldrb	r2, [r2, #0]
 8002bda:	2164      	movs	r1, #100	; 0x64
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7ff fb2f 	bl	8002240 <inverter>
        HAL_Delay(1);
 8002be2:	2001      	movs	r0, #1
 8002be4:	f003 f8ce 	bl	8005d84 <HAL_Delay>
       theta_actual = (float)ps->Encoder1_pos/1000; //fixed position
 8002be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	ee07 3a90 	vmov	s15, r3
 8002bf0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002bf4:	eddf 6ad9 	vldr	s13, [pc, #868]	; 8002f5c <calibrate+0x724>
 8002bf8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bfc:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
       error_f[i] = theta_ref/NPP - theta_actual;
 8002c00:	edd7 7a3d 	vldr	s15, [r7, #244]	; 0xf4
 8002c04:	eef3 6a01 	vmov.f32	s13, #49	; 0x41880000  17.0
 8002c08:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002c0c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002c10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c14:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002c18:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	edc3 7a00 	vstr	s15, [r3]
	   if(error_f[i] < 0)error_f [i] = error_f[i]+ 360.0f;
 8002c24:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002c28:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	4413      	add	r3, r2
 8002c30:	edd3 7a00 	vldr	s15, [r3]
 8002c34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c3c:	d513      	bpl.n	8002c66 <calibrate+0x42e>
 8002c3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002c42:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4413      	add	r3, r2
 8002c4a:	edd3 7a00 	vldr	s15, [r3]
 8002c4e:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8002f60 <calibrate+0x728>
 8002c52:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002c5a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	edc3 7a00 	vstr	s15, [r3]
       raw_f[i] = ps->Encoder1_pos_raw; //raw position
 8002c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c70:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8002c74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
       PrintServerPrintf("%.4f %.4f%d\n\r", theta_ref/(NPP), theta_actual, raw_f[i]);
 8002c78:	edd7 7a3d 	vldr	s15, [r7, #244]	; 0xf4
 8002c7c:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8002c80:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002c84:	ee16 0a90 	vmov	r0, s13
 8002c88:	f7fd fc86 	bl	8000598 <__aeabi_f2d>
 8002c8c:	4604      	mov	r4, r0
 8002c8e:	460d      	mov	r5, r1
 8002c90:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8002c94:	f7fd fc80 	bl	8000598 <__aeabi_f2d>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8002ca0:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8002ca4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8002ca8:	9102      	str	r1, [sp, #8]
 8002caa:	e9cd 2300 	strd	r2, r3, [sp]
 8002cae:	4622      	mov	r2, r4
 8002cb0:	462b      	mov	r3, r5
 8002cb2:	48ac      	ldr	r0, [pc, #688]	; (8002f64 <calibrate+0x72c>)
 8002cb4:	f000 fe72 	bl	800399c <PrintServerPrintf>
       for(int j = 0; j<n2; j++){
 8002cb8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002cc2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002cc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	f6ff af74 	blt.w	8002bb8 <calibrate+0x380>
    for(int i = 0; i<n; i++){                                                   // rotate forwards
 8002cd0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002cda:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8002cde:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	f6ff af56 	blt.w	8002b94 <calibrate+0x35c>
        }
    }

    for(int i = 0; i<n; i++){                                                   // rotate backwards
 8002ce8:	2300      	movs	r3, #0
 8002cea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002cee:	e094      	b.n	8002e1a <calibrate+0x5e2>
       for(int j = 0; j<n2; j++){
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002cf6:	e084      	b.n	8002e02 <calibrate+0x5ca>
       theta_ref -= delta;
 8002cf8:	ed97 7a3d 	vldr	s14, [r7, #244]	; 0xf4
 8002cfc:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002d00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d04:	edc7 7a3d 	vstr	s15, [r7, #244]	; 0xf4
       inverter((int16_t)theta_ref, CAL_DUTY, PHASE_ORDER);
 8002d08:	edd7 7a3d 	vldr	s15, [r7, #244]	; 0xf4
 8002d0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d10:	ee17 3a90 	vmov	r3, s15
 8002d14:	b21b      	sxth	r3, r3
 8002d16:	4a90      	ldr	r2, [pc, #576]	; (8002f58 <calibrate+0x720>)
 8002d18:	7812      	ldrb	r2, [r2, #0]
 8002d1a:	2164      	movs	r1, #100	; 0x64
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff fa8f 	bl	8002240 <inverter>
       HAL_Delay(1);                                                         // sample position sensor
 8002d22:	2001      	movs	r0, #1
 8002d24:	f003 f82e 	bl	8005d84 <HAL_Delay>
       theta_actual = (float)ps->Encoder1_pos/1000;                                   // get mechanical position
 8002d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	ee07 3a90 	vmov	s15, r3
 8002d30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d34:	eddf 6a89 	vldr	s13, [pc, #548]	; 8002f5c <calibrate+0x724>
 8002d38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d3c:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
       error_b[i] = theta_ref/NPP - theta_actual;
 8002d40:	edd7 7a3d 	vldr	s15, [r7, #244]	; 0xf4
 8002d44:	eef3 6a01 	vmov.f32	s13, #49	; 0x41880000  17.0
 8002d48:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002d4c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002d50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d54:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002d58:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	4413      	add	r3, r2
 8002d60:	edc3 7a00 	vstr	s15, [r3]
       if(error_b[i] < 0)error_b[i] = error_b[i]+ 360.0f;
 8002d64:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002d68:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	4413      	add	r3, r2
 8002d70:	edd3 7a00 	vldr	s15, [r3]
 8002d74:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d7c:	d513      	bpl.n	8002da6 <calibrate+0x56e>
 8002d7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002d82:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4413      	add	r3, r2
 8002d8a:	edd3 7a00 	vldr	s15, [r3]
 8002d8e:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8002f60 <calibrate+0x728>
 8002d92:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002d9a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	4413      	add	r3, r2
 8002da2:	edc3 7a00 	vstr	s15, [r3]
       raw_b[i] =  ps->Encoder1_pos_raw;
 8002da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	4619      	mov	r1, r3
 8002dac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002db0:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002db4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
       PrintServerPrintf("%.4f %.4f %d\n\r", theta_ref/(NPP), theta_actual, raw_b[i]);
 8002db8:	edd7 7a3d 	vldr	s15, [r7, #244]	; 0xf4
 8002dbc:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8002dc0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002dc4:	ee16 0a90 	vmov	r0, s13
 8002dc8:	f7fd fbe6 	bl	8000598 <__aeabi_f2d>
 8002dcc:	4604      	mov	r4, r0
 8002dce:	460d      	mov	r5, r1
 8002dd0:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8002dd4:	f7fd fbe0 	bl	8000598 <__aeabi_f2d>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	460b      	mov	r3, r1
 8002ddc:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8002de0:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8002de4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8002de8:	9102      	str	r1, [sp, #8]
 8002dea:	e9cd 2300 	strd	r2, r3, [sp]
 8002dee:	4622      	mov	r2, r4
 8002df0:	462b      	mov	r3, r5
 8002df2:	485d      	ldr	r0, [pc, #372]	; (8002f68 <calibrate+0x730>)
 8002df4:	f000 fdd2 	bl	800399c <PrintServerPrintf>
       for(int j = 0; j<n2; j++){
 8002df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002e02:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002e06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	f6ff af74 	blt.w	8002cf8 <calibrate+0x4c0>
    for(int i = 0; i<n; i++){                                                   // rotate backwards
 8002e10:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002e14:	3301      	adds	r3, #1
 8002e16:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002e1a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002e1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002e22:	429a      	cmp	r2, r3
 8002e24:	f6ff af64 	blt.w	8002cf0 <calibrate+0x4b8>
       //theta_ref -= delta;
        }
    }

        electrical_offset = 0;
 8002e28:	4b50      	ldr	r3, [pc, #320]	; (8002f6c <calibrate+0x734>)
 8002e2a:	f04f 0200 	mov.w	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]
        for(int i = 0; i<n; i++){
 8002e30:	2300      	movs	r3, #0
 8002e32:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002e36:	e02c      	b.n	8002e92 <calibrate+0x65a>
        	electrical_offset += (error_f[i] + error_b[n-1-i])/(2.0f*n);                   // calclate average position sensor offset
 8002e38:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	4413      	add	r3, r2
 8002e44:	ed93 7a00 	vldr	s14, [r3]
 8002e48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002e4c:	1e5a      	subs	r2, r3, #1
 8002e4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4413      	add	r3, r2
 8002e5c:	edd3 7a00 	vldr	s15, [r3]
 8002e60:	ee77 6a27 	vadd.f32	s13, s14, s15
 8002e64:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002e68:	ee07 3a90 	vmov	s15, r3
 8002e6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e70:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002e74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e78:	4b3c      	ldr	r3, [pc, #240]	; (8002f6c <calibrate+0x734>)
 8002e7a:	edd3 7a00 	vldr	s15, [r3]
 8002e7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e82:	4b3a      	ldr	r3, [pc, #232]	; (8002f6c <calibrate+0x734>)
 8002e84:	edc3 7a00 	vstr	s15, [r3]
        for(int i = 0; i<n; i++){
 8002e88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002e92:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002e96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	dbcc      	blt.n	8002e38 <calibrate+0x600>
            }
        electrical_offset = fmod(electrical_offset*NPP, 360);                                        // convert mechanical angle to electrical angle
 8002e9e:	4b33      	ldr	r3, [pc, #204]	; (8002f6c <calibrate+0x734>)
 8002ea0:	edd3 7a00 	vldr	s15, [r3]
 8002ea4:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8002ea8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002eac:	ee17 0a90 	vmov	r0, s15
 8002eb0:	f7fd fb72 	bl	8000598 <__aeabi_f2d>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	ed9f 1b25 	vldr	d1, [pc, #148]	; 8002f50 <calibrate+0x718>
 8002ebc:	ec43 2b10 	vmov	d0, r2, r3
 8002ec0:	f00e fb00 	bl	80114c4 <fmod>
 8002ec4:	ec53 2b10 	vmov	r2, r3, d0
 8002ec8:	4610      	mov	r0, r2
 8002eca:	4619      	mov	r1, r3
 8002ecc:	f7fd feb4 	bl	8000c38 <__aeabi_d2f>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	4a26      	ldr	r2, [pc, #152]	; (8002f6c <calibrate+0x734>)
 8002ed4:	6013      	str	r3, [r2, #0]
        /// FIR n-sample average, where n = number of samples in one electrical cycle
        /// This filter has zero gain at electrical frequency and all integer multiples
        /// So cogging effects should be completely filtered out.


        float mean = 0;
 8002ed6:	f04f 0300 	mov.w	r3, #0
 8002eda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
        for (int i = 0; i<n; i++){                                              //Average the forward and back directions
 8002ede:	2300      	movs	r3, #0
 8002ee0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002ee4:	e026      	b.n	8002f34 <calibrate+0x6fc>
            error[i] = 0.5f*(error_f[i] + error_b[n-i-1]);
 8002ee6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002eea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	4413      	add	r3, r2
 8002ef2:	ed93 7a00 	vldr	s14, [r3]
 8002ef6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002efa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	3b01      	subs	r3, #1
 8002f02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	4413      	add	r3, r2
 8002f0a:	edd3 7a00 	vldr	s15, [r3]
 8002f0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f12:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002f16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f1a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002f1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	4413      	add	r3, r2
 8002f26:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i<n; i++){                                              //Average the forward and back directions
 8002f2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f2e:	3301      	adds	r3, #1
 8002f30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002f34:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8002f38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	dbd2      	blt.n	8002ee6 <calibrate+0x6ae>
            }
        for (int i = 0; i<n; i++){
 8002f40:	2300      	movs	r3, #0
 8002f42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002f46:	e0af      	b.n	80030a8 <calibrate+0x870>
            for(int j = 0; j<window; j++){
 8002f48:	2300      	movs	r3, #0
 8002f4a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f4e:	e05c      	b.n	800300a <calibrate+0x7d2>
 8002f50:	00000000 	.word	0x00000000
 8002f54:	40768000 	.word	0x40768000
 8002f58:	20000f68 	.word	0x20000f68
 8002f5c:	447a0000 	.word	0x447a0000
 8002f60:	43b40000 	.word	0x43b40000
 8002f64:	08012544 	.word	0x08012544
 8002f68:	08012554 	.word	0x08012554
 8002f6c:	20000f6c 	.word	0x20000f6c
                int ind = -window/2 + j + i;                                    // Indexes from -window/2 to + window/2
 8002f70:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002f74:	0fda      	lsrs	r2, r3, #31
 8002f76:	4413      	add	r3, r2
 8002f78:	105b      	asrs	r3, r3, #1
 8002f7a:	425b      	negs	r3, r3
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002f82:	4413      	add	r3, r2
 8002f84:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002f88:	4413      	add	r3, r2
 8002f8a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                if(ind<0){
 8002f8e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	da07      	bge.n	8002fa6 <calibrate+0x76e>
                    ind += n;}                                                  // Moving average wraps around
 8002f96:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002f9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002f9e:	4413      	add	r3, r2
 8002fa0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002fa4:	e00c      	b.n	8002fc0 <calibrate+0x788>
                else if(ind > n-1) {
 8002fa6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002faa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	dc06      	bgt.n	8002fc0 <calibrate+0x788>
                    ind -= n;}
 8002fb2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002fb6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                if(error[ind] == NAN)while(1);
                error_filt[i] += error[ind]/(float)window;
 8002fc0:	4a45      	ldr	r2, [pc, #276]	; (80030d8 <calibrate+0x8a0>)
 8002fc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4413      	add	r3, r2
 8002fca:	ed93 7a00 	vldr	s14, [r3]
 8002fce:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002fd2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	ed93 6a00 	vldr	s12, [r3]
 8002fde:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002fe2:	ee07 3a90 	vmov	s15, r3
 8002fe6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002fea:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002fee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ff2:	4a39      	ldr	r2, [pc, #228]	; (80030d8 <calibrate+0x8a0>)
 8002ff4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	edc3 7a00 	vstr	s15, [r3]
            for(int j = 0; j<window; j++){
 8003000:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003004:	3301      	adds	r3, #1
 8003006:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800300a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800300e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003012:	429a      	cmp	r2, r3
 8003014:	dbac      	blt.n	8002f70 <calibrate+0x738>
                if(error_filt[i] == NAN)while(1);
                }
            if(i<window){
 8003016:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800301a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800301e:	429a      	cmp	r2, r3
 8003020:	da28      	bge.n	8003074 <calibrate+0x83c>
                cogging_current[i] = current*sinf((error[i] - error_filt[i])*NPP);
 8003022:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003026:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4413      	add	r3, r2
 800302e:	ed93 7a00 	vldr	s14, [r3]
 8003032:	4a29      	ldr	r2, [pc, #164]	; (80030d8 <calibrate+0x8a0>)
 8003034:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	4413      	add	r3, r2
 800303c:	edd3 7a00 	vldr	s15, [r3]
 8003040:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003044:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8003048:	ee67 7a87 	vmul.f32	s15, s15, s14
 800304c:	eeb0 0a67 	vmov.f32	s0, s15
 8003050:	f00e fa92 	bl	8011578 <sinf>
 8003054:	eeb0 7a40 	vmov.f32	s14, s0
 8003058:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800305c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003060:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	33c0      	adds	r3, #192	; 0xc0
 8003068:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800306c:	4413      	add	r3, r2
 800306e:	3bac      	subs	r3, #172	; 0xac
 8003070:	edc3 7a00 	vstr	s15, [r3]
                }
//            PrintServerPrintf("%.4f   %4f    %.4f   %.4f\n\r", error[i], error_filt[i], error_f[i], error_b[i]);
//            HAL_Delay(10);
            mean += error_filt[i]/n;
 8003074:	4a18      	ldr	r2, [pc, #96]	; (80030d8 <calibrate+0x8a0>)
 8003076:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4413      	add	r3, r2
 800307e:	edd3 6a00 	vldr	s13, [r3]
 8003082:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003086:	ee07 3a90 	vmov	s15, r3
 800308a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800308e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003092:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8003096:	ee77 7a27 	vadd.f32	s15, s14, s15
 800309a:	edc7 7a37 	vstr	s15, [r7, #220]	; 0xdc
        for (int i = 0; i<n; i++){
 800309e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030a2:	3301      	adds	r3, #1
 80030a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80030a8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80030ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80030b0:	429a      	cmp	r2, r3
 80030b2:	f6ff af49 	blt.w	8002f48 <calibrate+0x710>
            }
//        int raw_offset = (raw_f[0] + raw_b[n-1])/2;                             //Insensitive to errors in this direction, so 2 points is plenty

PrintServerPrintf("\n\rEncoder Electrical Offset (deg) %f\n\r",  electrical_offset);
 80030b6:	4b09      	ldr	r3, [pc, #36]	; (80030dc <calibrate+0x8a4>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fd fa6c 	bl	8000598 <__aeabi_f2d>
 80030c0:	4602      	mov	r2, r0
 80030c2:	460b      	mov	r3, r1
 80030c4:	4806      	ldr	r0, [pc, #24]	; (80030e0 <calibrate+0x8a8>)
 80030c6:	f000 fc69 	bl	800399c <PrintServerPrintf>
 80030ca:	46b5      	mov	sp, r6

    }
 80030cc:	bf00      	nop
 80030ce:	37fc      	adds	r7, #252	; 0xfc
 80030d0:	46bd      	mov	sp, r7
 80030d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030d6:	bf00      	nop
 80030d8:	20000b28 	.word	0x20000b28
 80030dc:	20000f6c 	.word	0x20000f6c
 80030e0:	08012564 	.word	0x08012564

080030e4 <ORBIS_init>:
 *
 *  can transmit the command while receiving position
 *
 *  max 4MHz
 */
void ORBIS_init(Encoders_Callback __IRQ_callback){
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 1);
 80030ec:	2201      	movs	r2, #1
 80030ee:	2140      	movs	r1, #64	; 0x40
 80030f0:	4815      	ldr	r0, [pc, #84]	; (8003148 <ORBIS_init+0x64>)
 80030f2:	f006 fc41 	bl	8009978 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 1);
 80030f6:	2201      	movs	r2, #1
 80030f8:	2104      	movs	r1, #4
 80030fa:	4814      	ldr	r0, [pc, #80]	; (800314c <ORBIS_init+0x68>)
 80030fc:	f006 fc3c 	bl	8009978 <HAL_GPIO_WritePin>
	//setup callback
	Encoders_IRQ_callback = __IRQ_callback;
 8003100:	4a13      	ldr	r2, [pc, #76]	; (8003150 <ORBIS_init+0x6c>)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6013      	str	r3, [r2, #0]

	//setup DMA
	SPI1_tx_buff[0] = ORBIS_NORNAL_OPERATION;
 8003106:	4b13      	ldr	r3, [pc, #76]	; (8003154 <ORBIS_init+0x70>)
 8003108:	2274      	movs	r2, #116	; 0x74
 800310a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 0);
 800310c:	2200      	movs	r2, #0
 800310e:	2140      	movs	r1, #64	; 0x40
 8003110:	480d      	ldr	r0, [pc, #52]	; (8003148 <ORBIS_init+0x64>)
 8003112:	f006 fc31 	bl	8009978 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 0);
 8003116:	2200      	movs	r2, #0
 8003118:	2104      	movs	r1, #4
 800311a:	480c      	ldr	r0, [pc, #48]	; (800314c <ORBIS_init+0x68>)
 800311c:	f006 fc2c 	bl	8009978 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA(&hspi1, SPI1_tx_buff, SPI1_rx_buff, ORBIS_SPI_SIZE);
 8003120:	2305      	movs	r3, #5
 8003122:	4a0d      	ldr	r2, [pc, #52]	; (8003158 <ORBIS_init+0x74>)
 8003124:	490b      	ldr	r1, [pc, #44]	; (8003154 <ORBIS_init+0x70>)
 8003126:	480d      	ldr	r0, [pc, #52]	; (800315c <ORBIS_init+0x78>)
 8003128:	f007 fd04 	bl	800ab34 <HAL_SPI_TransmitReceive_DMA>
	HAL_SPI_TransmitReceive_DMA(&hspi3, SPI3_tx_buff, SPI3_rx_buff, ORBIS_SPI_SIZE);
 800312c:	2305      	movs	r3, #5
 800312e:	4a0c      	ldr	r2, [pc, #48]	; (8003160 <ORBIS_init+0x7c>)
 8003130:	490c      	ldr	r1, [pc, #48]	; (8003164 <ORBIS_init+0x80>)
 8003132:	480d      	ldr	r0, [pc, #52]	; (8003168 <ORBIS_init+0x84>)
 8003134:	f007 fcfe 	bl	800ab34 <HAL_SPI_TransmitReceive_DMA>

	//setup timer
	HAL_TIM_Base_Start_IT(&htim3);
 8003138:	480c      	ldr	r0, [pc, #48]	; (800316c <ORBIS_init+0x88>)
 800313a:	f008 facb 	bl	800b6d4 <HAL_TIM_Base_Start_IT>

}
 800313e:	bf00      	nop
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	48000400 	.word	0x48000400
 800314c:	48000c00 	.word	0x48000c00
 8003150:	20000f90 	.word	0x20000f90
 8003154:	20000f70 	.word	0x20000f70
 8003158:	20000f78 	.word	0x20000f78
 800315c:	20001c74 	.word	0x20001c74
 8003160:	20000f88 	.word	0x20000f88
 8003164:	20000f80 	.word	0x20000f80
 8003168:	20001cd8 	.word	0x20001cd8
 800316c:	20001f58 	.word	0x20001f58

08003170 <HAL_SPI_TxRxCpltCallback>:
uint8_t velocity_index = 0;
float velocity_array[velocity_lpf_size] = {0};


void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef * hspi)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) {
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a73      	ldr	r2, [pc, #460]	; (8003348 <HAL_SPI_TxRxCpltCallback+0x1d8>)
 800317c:	4293      	cmp	r3, r2
 800317e:	f040 80bb 	bne.w	80032f8 <HAL_SPI_TxRxCpltCallback+0x188>
		HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 1);
 8003182:	2201      	movs	r2, #1
 8003184:	2140      	movs	r1, #64	; 0x40
 8003186:	4871      	ldr	r0, [pc, #452]	; (800334c <HAL_SPI_TxRxCpltCallback+0x1dc>)
 8003188:	f006 fbf6 	bl	8009978 <HAL_GPIO_WritePin>
		data_encoders.Calculated_pos = SPI1_rx_buff[0]; //(SPI1_rx_buff[3] << 8) | (SPI1_rx_buff[2]);
 800318c:	4b70      	ldr	r3, [pc, #448]	; (8003350 <HAL_SPI_TxRxCpltCallback+0x1e0>)
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	461a      	mov	r2, r3
 8003192:	4b70      	ldr	r3, [pc, #448]	; (8003354 <HAL_SPI_TxRxCpltCallback+0x1e4>)
 8003194:	611a      	str	r2, [r3, #16]
		data_encoders.Encoder1_pos = (uint32_t)(((uint32_t)(SPI1_rx_buff[0] << 6) | (SPI1_rx_buff[1] >> 2)) * 5625) >> 8;
 8003196:	4b6e      	ldr	r3, [pc, #440]	; (8003350 <HAL_SPI_TxRxCpltCallback+0x1e0>)
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	019b      	lsls	r3, r3, #6
 800319c:	461a      	mov	r2, r3
 800319e:	4b6c      	ldr	r3, [pc, #432]	; (8003350 <HAL_SPI_TxRxCpltCallback+0x1e0>)
 80031a0:	785b      	ldrb	r3, [r3, #1]
 80031a2:	089b      	lsrs	r3, r3, #2
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	4313      	orrs	r3, r2
 80031a8:	f241 52f9 	movw	r2, #5625	; 0x15f9
 80031ac:	fb02 f303 	mul.w	r3, r2, r3
 80031b0:	0a1b      	lsrs	r3, r3, #8
 80031b2:	4a68      	ldr	r2, [pc, #416]	; (8003354 <HAL_SPI_TxRxCpltCallback+0x1e4>)
 80031b4:	6013      	str	r3, [r2, #0]
		data_encoders.Encoder1_pos_raw = (uint32_t)(SPI1_rx_buff[0] << 6) | (SPI1_rx_buff[1] >> 2);
 80031b6:	4b66      	ldr	r3, [pc, #408]	; (8003350 <HAL_SPI_TxRxCpltCallback+0x1e0>)
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	019b      	lsls	r3, r3, #6
 80031bc:	461a      	mov	r2, r3
 80031be:	4b64      	ldr	r3, [pc, #400]	; (8003350 <HAL_SPI_TxRxCpltCallback+0x1e0>)
 80031c0:	785b      	ldrb	r3, [r3, #1]
 80031c2:	089b      	lsrs	r3, r3, #2
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	4313      	orrs	r3, r2
 80031c8:	4a62      	ldr	r2, [pc, #392]	; (8003354 <HAL_SPI_TxRxCpltCallback+0x1e4>)
 80031ca:	6093      	str	r3, [r2, #8]

		float velocity_temp;
		if(((int32_t)data_encoders.Encoder1_pos - last_pos) > 180000)velocity_temp = ((int32_t)data_encoders.Encoder1_pos-last_pos - 360000);
 80031cc:	4b61      	ldr	r3, [pc, #388]	; (8003354 <HAL_SPI_TxRxCpltCallback+0x1e4>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	461a      	mov	r2, r3
 80031d2:	4b61      	ldr	r3, [pc, #388]	; (8003358 <HAL_SPI_TxRxCpltCallback+0x1e8>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	4a60      	ldr	r2, [pc, #384]	; (800335c <HAL_SPI_TxRxCpltCallback+0x1ec>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	dd10      	ble.n	8003200 <HAL_SPI_TxRxCpltCallback+0x90>
 80031de:	4b5d      	ldr	r3, [pc, #372]	; (8003354 <HAL_SPI_TxRxCpltCallback+0x1e4>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	461a      	mov	r2, r3
 80031e4:	4b5c      	ldr	r3, [pc, #368]	; (8003358 <HAL_SPI_TxRxCpltCallback+0x1e8>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	f5a3 23af 	sub.w	r3, r3, #358400	; 0x57800
 80031ee:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 80031f2:	ee07 3a90 	vmov	s15, r3
 80031f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031fa:	edc7 7a03 	vstr	s15, [r7, #12]
 80031fe:	e025      	b.n	800324c <HAL_SPI_TxRxCpltCallback+0xdc>
		else if(((int32_t)data_encoders.Encoder1_pos - last_pos) < -180000)velocity_temp = ((int32_t)data_encoders.Encoder1_pos-last_pos + 360000);
 8003200:	4b54      	ldr	r3, [pc, #336]	; (8003354 <HAL_SPI_TxRxCpltCallback+0x1e4>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	461a      	mov	r2, r3
 8003206:	4b54      	ldr	r3, [pc, #336]	; (8003358 <HAL_SPI_TxRxCpltCallback+0x1e8>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	4a54      	ldr	r2, [pc, #336]	; (8003360 <HAL_SPI_TxRxCpltCallback+0x1f0>)
 800320e:	4293      	cmp	r3, r2
 8003210:	da10      	bge.n	8003234 <HAL_SPI_TxRxCpltCallback+0xc4>
 8003212:	4b50      	ldr	r3, [pc, #320]	; (8003354 <HAL_SPI_TxRxCpltCallback+0x1e4>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	461a      	mov	r2, r3
 8003218:	4b4f      	ldr	r3, [pc, #316]	; (8003358 <HAL_SPI_TxRxCpltCallback+0x1e8>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	f503 23af 	add.w	r3, r3, #358400	; 0x57800
 8003222:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8003226:	ee07 3a90 	vmov	s15, r3
 800322a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800322e:	edc7 7a03 	vstr	s15, [r7, #12]
 8003232:	e00b      	b.n	800324c <HAL_SPI_TxRxCpltCallback+0xdc>
		else velocity_temp = ((int32_t)data_encoders.Encoder1_pos-last_pos);
 8003234:	4b47      	ldr	r3, [pc, #284]	; (8003354 <HAL_SPI_TxRxCpltCallback+0x1e4>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	461a      	mov	r2, r3
 800323a:	4b47      	ldr	r3, [pc, #284]	; (8003358 <HAL_SPI_TxRxCpltCallback+0x1e8>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	ee07 3a90 	vmov	s15, r3
 8003244:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003248:	edc7 7a03 	vstr	s15, [r7, #12]
		last_pos = (int32_t)data_encoders.Encoder1_pos;
 800324c:	4b41      	ldr	r3, [pc, #260]	; (8003354 <HAL_SPI_TxRxCpltCallback+0x1e4>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	461a      	mov	r2, r3
 8003252:	4b41      	ldr	r3, [pc, #260]	; (8003358 <HAL_SPI_TxRxCpltCallback+0x1e8>)
 8003254:	601a      	str	r2, [r3, #0]

		velocity_accumulate += velocity_temp;
 8003256:	4b43      	ldr	r3, [pc, #268]	; (8003364 <HAL_SPI_TxRxCpltCallback+0x1f4>)
 8003258:	ed93 7a00 	vldr	s14, [r3]
 800325c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003260:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003264:	4b3f      	ldr	r3, [pc, #252]	; (8003364 <HAL_SPI_TxRxCpltCallback+0x1f4>)
 8003266:	edc3 7a00 	vstr	s15, [r3]
		velocity_accumulate -= velocity_array[velocity_index];
 800326a:	4b3e      	ldr	r3, [pc, #248]	; (8003364 <HAL_SPI_TxRxCpltCallback+0x1f4>)
 800326c:	ed93 7a00 	vldr	s14, [r3]
 8003270:	4b3d      	ldr	r3, [pc, #244]	; (8003368 <HAL_SPI_TxRxCpltCallback+0x1f8>)
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	4a3d      	ldr	r2, [pc, #244]	; (800336c <HAL_SPI_TxRxCpltCallback+0x1fc>)
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	edd3 7a00 	vldr	s15, [r3]
 800327e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003282:	4b38      	ldr	r3, [pc, #224]	; (8003364 <HAL_SPI_TxRxCpltCallback+0x1f4>)
 8003284:	edc3 7a00 	vstr	s15, [r3]
		velocity_array[velocity_index] = velocity_temp;
 8003288:	4b37      	ldr	r3, [pc, #220]	; (8003368 <HAL_SPI_TxRxCpltCallback+0x1f8>)
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	4a37      	ldr	r2, [pc, #220]	; (800336c <HAL_SPI_TxRxCpltCallback+0x1fc>)
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	601a      	str	r2, [r3, #0]
		velocity_index++;
 8003296:	4b34      	ldr	r3, [pc, #208]	; (8003368 <HAL_SPI_TxRxCpltCallback+0x1f8>)
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	3301      	adds	r3, #1
 800329c:	b2da      	uxtb	r2, r3
 800329e:	4b32      	ldr	r3, [pc, #200]	; (8003368 <HAL_SPI_TxRxCpltCallback+0x1f8>)
 80032a0:	701a      	strb	r2, [r3, #0]
		if (velocity_index == velocity_lpf_size)velocity_index = 0;
 80032a2:	4b31      	ldr	r3, [pc, #196]	; (8003368 <HAL_SPI_TxRxCpltCallback+0x1f8>)
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	2b64      	cmp	r3, #100	; 0x64
 80032a8:	d102      	bne.n	80032b0 <HAL_SPI_TxRxCpltCallback+0x140>
 80032aa:	4b2f      	ldr	r3, [pc, #188]	; (8003368 <HAL_SPI_TxRxCpltCallback+0x1f8>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	701a      	strb	r2, [r3, #0]

		data_encoders.Velocity = (int32_t)((velocity_accumulate*10000.0f*60.0f)/360.0f/velocity_lpf_size);
 80032b0:	4b2c      	ldr	r3, [pc, #176]	; (8003364 <HAL_SPI_TxRxCpltCallback+0x1f4>)
 80032b2:	edd3 7a00 	vldr	s15, [r3]
 80032b6:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8003370 <HAL_SPI_TxRxCpltCallback+0x200>
 80032ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032be:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8003374 <HAL_SPI_TxRxCpltCallback+0x204>
 80032c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032c6:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8003378 <HAL_SPI_TxRxCpltCallback+0x208>
 80032ca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80032ce:	eddf 6a2b 	vldr	s13, [pc, #172]	; 800337c <HAL_SPI_TxRxCpltCallback+0x20c>
 80032d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80032d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032da:	ee17 2a90 	vmov	r2, s15
 80032de:	4b1d      	ldr	r3, [pc, #116]	; (8003354 <HAL_SPI_TxRxCpltCallback+0x1e4>)
 80032e0:	615a      	str	r2, [r3, #20]
		data_encoders.Encoder1_temp_x10 = (int16_t)(((uint16_t)(SPI1_rx_buff[2] << 8 | (SPI1_rx_buff[3]))));
 80032e2:	4b1b      	ldr	r3, [pc, #108]	; (8003350 <HAL_SPI_TxRxCpltCallback+0x1e0>)
 80032e4:	789b      	ldrb	r3, [r3, #2]
 80032e6:	021b      	lsls	r3, r3, #8
 80032e8:	b21a      	sxth	r2, r3
 80032ea:	4b19      	ldr	r3, [pc, #100]	; (8003350 <HAL_SPI_TxRxCpltCallback+0x1e0>)
 80032ec:	78db      	ldrb	r3, [r3, #3]
 80032ee:	b21b      	sxth	r3, r3
 80032f0:	4313      	orrs	r3, r2
 80032f2:	b21a      	sxth	r2, r3
 80032f4:	4b17      	ldr	r3, [pc, #92]	; (8003354 <HAL_SPI_TxRxCpltCallback+0x1e4>)
 80032f6:	831a      	strh	r2, [r3, #24]
	}
	if (hspi == &hspi3) {
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a21      	ldr	r2, [pc, #132]	; (8003380 <HAL_SPI_TxRxCpltCallback+0x210>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d11a      	bne.n	8003336 <HAL_SPI_TxRxCpltCallback+0x1c6>
		HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 1);
 8003300:	2201      	movs	r2, #1
 8003302:	2104      	movs	r1, #4
 8003304:	481f      	ldr	r0, [pc, #124]	; (8003384 <HAL_SPI_TxRxCpltCallback+0x214>)
 8003306:	f006 fb37 	bl	8009978 <HAL_GPIO_WritePin>
		data_encoders.Encoder2_temp_x10 = (SPI3_rx_buff[3] << 8) | (SPI3_rx_buff[2]);
 800330a:	4b1f      	ldr	r3, [pc, #124]	; (8003388 <HAL_SPI_TxRxCpltCallback+0x218>)
 800330c:	78db      	ldrb	r3, [r3, #3]
 800330e:	021b      	lsls	r3, r3, #8
 8003310:	b21a      	sxth	r2, r3
 8003312:	4b1d      	ldr	r3, [pc, #116]	; (8003388 <HAL_SPI_TxRxCpltCallback+0x218>)
 8003314:	789b      	ldrb	r3, [r3, #2]
 8003316:	b21b      	sxth	r3, r3
 8003318:	4313      	orrs	r3, r2
 800331a:	b21a      	sxth	r2, r3
 800331c:	4b0d      	ldr	r3, [pc, #52]	; (8003354 <HAL_SPI_TxRxCpltCallback+0x1e4>)
 800331e:	835a      	strh	r2, [r3, #26]
		data_encoders.Encoder2_pos = (SPI3_rx_buff[0] << 6) | (SPI3_rx_buff[1] >> 2);
 8003320:	4b19      	ldr	r3, [pc, #100]	; (8003388 <HAL_SPI_TxRxCpltCallback+0x218>)
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	019b      	lsls	r3, r3, #6
 8003326:	4a18      	ldr	r2, [pc, #96]	; (8003388 <HAL_SPI_TxRxCpltCallback+0x218>)
 8003328:	7852      	ldrb	r2, [r2, #1]
 800332a:	0892      	lsrs	r2, r2, #2
 800332c:	b2d2      	uxtb	r2, r2
 800332e:	4313      	orrs	r3, r2
 8003330:	461a      	mov	r2, r3
 8003332:	4b08      	ldr	r3, [pc, #32]	; (8003354 <HAL_SPI_TxRxCpltCallback+0x1e4>)
 8003334:	605a      	str	r2, [r3, #4]

	}
	//data_encoders.Calculated_pos = 10;

	Encoders_IRQ_callback(&data_encoders);
 8003336:	4b15      	ldr	r3, [pc, #84]	; (800338c <HAL_SPI_TxRxCpltCallback+0x21c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4806      	ldr	r0, [pc, #24]	; (8003354 <HAL_SPI_TxRxCpltCallback+0x1e4>)
 800333c:	4798      	blx	r3
}
 800333e:	bf00      	nop
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	20001c74 	.word	0x20001c74
 800334c:	48000400 	.word	0x48000400
 8003350:	20000f78 	.word	0x20000f78
 8003354:	20000f94 	.word	0x20000f94
 8003358:	20000fb4 	.word	0x20000fb4
 800335c:	0002bf20 	.word	0x0002bf20
 8003360:	fffd40e0 	.word	0xfffd40e0
 8003364:	20000fb0 	.word	0x20000fb0
 8003368:	20000fb8 	.word	0x20000fb8
 800336c:	20000fbc 	.word	0x20000fbc
 8003370:	461c4000 	.word	0x461c4000
 8003374:	42700000 	.word	0x42700000
 8003378:	43b40000 	.word	0x43b40000
 800337c:	42c80000 	.word	0x42c80000
 8003380:	20001cd8 	.word	0x20001cd8
 8003384:	48000c00 	.word	0x48000c00
 8003388:	20000f88 	.word	0x20000f88
 800338c:	20000f90 	.word	0x20000f90

08003390 <ENCODER_TIM_PeriodElapsedCallback>:
void ENCODER_TIM_PeriodElapsedCallback(){
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 0);
 8003394:	2200      	movs	r2, #0
 8003396:	2140      	movs	r1, #64	; 0x40
 8003398:	480a      	ldr	r0, [pc, #40]	; (80033c4 <ENCODER_TIM_PeriodElapsedCallback+0x34>)
 800339a:	f006 faed 	bl	8009978 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 0);
 800339e:	2200      	movs	r2, #0
 80033a0:	2104      	movs	r1, #4
 80033a2:	4809      	ldr	r0, [pc, #36]	; (80033c8 <ENCODER_TIM_PeriodElapsedCallback+0x38>)
 80033a4:	f006 fae8 	bl	8009978 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA(&hspi1, SPI1_tx_buff, SPI1_rx_buff, ORBIS_SPI_SIZE);
 80033a8:	2305      	movs	r3, #5
 80033aa:	4a08      	ldr	r2, [pc, #32]	; (80033cc <ENCODER_TIM_PeriodElapsedCallback+0x3c>)
 80033ac:	4908      	ldr	r1, [pc, #32]	; (80033d0 <ENCODER_TIM_PeriodElapsedCallback+0x40>)
 80033ae:	4809      	ldr	r0, [pc, #36]	; (80033d4 <ENCODER_TIM_PeriodElapsedCallback+0x44>)
 80033b0:	f007 fbc0 	bl	800ab34 <HAL_SPI_TransmitReceive_DMA>
	HAL_SPI_TransmitReceive_DMA(&hspi3, SPI3_tx_buff, SPI3_rx_buff, ORBIS_SPI_SIZE);
 80033b4:	2305      	movs	r3, #5
 80033b6:	4a08      	ldr	r2, [pc, #32]	; (80033d8 <ENCODER_TIM_PeriodElapsedCallback+0x48>)
 80033b8:	4908      	ldr	r1, [pc, #32]	; (80033dc <ENCODER_TIM_PeriodElapsedCallback+0x4c>)
 80033ba:	4809      	ldr	r0, [pc, #36]	; (80033e0 <ENCODER_TIM_PeriodElapsedCallback+0x50>)
 80033bc:	f007 fbba 	bl	800ab34 <HAL_SPI_TransmitReceive_DMA>
}
 80033c0:	bf00      	nop
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	48000400 	.word	0x48000400
 80033c8:	48000c00 	.word	0x48000c00
 80033cc:	20000f78 	.word	0x20000f78
 80033d0:	20000f70 	.word	0x20000f70
 80033d4:	20001c74 	.word	0x20001c74
 80033d8:	20000f88 	.word	0x20000f88
 80033dc:	20000f80 	.word	0x20000f80
 80033e0:	20001cd8 	.word	0x20001cd8

080033e4 <flash_write>:

Flash* flash_read(uint32_t address){
    return (Flash*)address;
}

void flash_write(uint32_t page, uint64_t data[], uint32_t size){
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b08c      	sub	sp, #48	; 0x30
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
	uint32_t PageError;
	FLASH_EraseInitTypeDef pEraseInit = {
 80033f0:	2300      	movs	r3, #0
 80033f2:	617b      	str	r3, [r7, #20]
 80033f4:	2301      	movs	r3, #1
 80033f6:	61bb      	str	r3, [r7, #24]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	61fb      	str	r3, [r7, #28]
 80033fc:	2301      	movs	r3, #1
 80033fe:	623b      	str	r3, [r7, #32]
			.NbPages = 1,
			.Page = page,
			.TypeErase = FLASH_TYPEERASE_PAGES
	};

	HAL_FLASH_Unlock();
 8003400:	f005 fe7c 	bl	80090fc <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 8003404:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003408:	f107 0314 	add.w	r3, r7, #20
 800340c:	4611      	mov	r1, r2
 800340e:	4618      	mov	r0, r3
 8003410:	f005 ff60 	bl	80092d4 <HAL_FLASHEx_Erase>

    for(int i = 0; i < size/sizeof(uint64_t); i++){
 8003414:	2300      	movs	r3, #0
 8003416:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003418:	e014      	b.n	8003444 <flash_write+0x60>
    	uint32_t address = FLASH_BASE + PAGE_SIZE*page + i*sizeof(uint64_t);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003420:	021a      	lsls	r2, r3, #8
 8003422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003424:	4413      	add	r3, r2
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	62bb      	str	r3, [r7, #40]	; 0x28
    	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,address, data[i]);
 800342a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800342c:	00db      	lsls	r3, r3, #3
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	4413      	add	r3, r2
 8003432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003436:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003438:	2000      	movs	r0, #0
 800343a:	f005 fe09 	bl	8009050 <HAL_FLASH_Program>
    for(int i = 0; i < size/sizeof(uint64_t); i++){
 800343e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003440:	3301      	adds	r3, #1
 8003442:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	08da      	lsrs	r2, r3, #3
 8003448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800344a:	429a      	cmp	r2, r3
 800344c:	d8e5      	bhi.n	800341a <flash_write+0x36>
    }
    HAL_FLASH_Lock();
 800344e:	f005 fe77 	bl	8009140 <HAL_FLASH_Lock>
}
 8003452:	bf00      	nop
 8003454:	3730      	adds	r7, #48	; 0x30
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
	...

0800345c <Flash_init>:

void Flash_init(){
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
	if (memcmp(ptr, &RAM, RAM_COMPARE)){
 8003460:	4b11      	ldr	r3, [pc, #68]	; (80034a8 <Flash_init+0x4c>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	225e      	movs	r2, #94	; 0x5e
 8003466:	4911      	ldr	r1, [pc, #68]	; (80034ac <Flash_init+0x50>)
 8003468:	4618      	mov	r0, r3
 800346a:	f00b ff21 	bl	800f2b0 <memcmp>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00f      	beq.n	8003494 <Flash_init+0x38>
		memcpy(&Stored_in_RAM, ptr, sizeof(Flash));
 8003474:	4b0c      	ldr	r3, [pc, #48]	; (80034a8 <Flash_init+0x4c>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f44f 6297 	mov.w	r2, #1208	; 0x4b8
 800347c:	4619      	mov	r1, r3
 800347e:	480c      	ldr	r0, [pc, #48]	; (80034b0 <Flash_init+0x54>)
 8003480:	f00b ffa5 	bl	800f3ce <memcpy>
		memcpy(&Stored_in_RAM, &RAM, RAM_COMPARE);
 8003484:	225e      	movs	r2, #94	; 0x5e
 8003486:	4909      	ldr	r1, [pc, #36]	; (80034ac <Flash_init+0x50>)
 8003488:	4809      	ldr	r0, [pc, #36]	; (80034b0 <Flash_init+0x54>)
 800348a:	f00b ffa0 	bl	800f3ce <memcpy>
		Flash_save();
 800348e:	f000 f811 	bl	80034b4 <Flash_save>
	}
	else memcpy(&Stored_in_RAM, ptr, sizeof(Flash));
}
 8003492:	e007      	b.n	80034a4 <Flash_init+0x48>
	else memcpy(&Stored_in_RAM, ptr, sizeof(Flash));
 8003494:	4b04      	ldr	r3, [pc, #16]	; (80034a8 <Flash_init+0x4c>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f44f 6297 	mov.w	r2, #1208	; 0x4b8
 800349c:	4619      	mov	r1, r3
 800349e:	4804      	ldr	r0, [pc, #16]	; (80034b0 <Flash_init+0x54>)
 80034a0:	f00b ff95 	bl	800f3ce <memcpy>
}
 80034a4:	bf00      	nop
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	20000074 	.word	0x20000074
 80034ac:	20000078 	.word	0x20000078
 80034b0:	20001150 	.word	0x20001150

080034b4 <Flash_save>:

void Flash_save(){
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
	flash_write(PAGE_NUMBER, (uint64_t*)&Stored_in_RAM, sizeof(Flash));
 80034b8:	f44f 6297 	mov.w	r2, #1208	; 0x4b8
 80034bc:	4902      	ldr	r1, [pc, #8]	; (80034c8 <Flash_save+0x14>)
 80034be:	203f      	movs	r0, #63	; 0x3f
 80034c0:	f7ff ff90 	bl	80033e4 <flash_write>
}
 80034c4:	bf00      	nop
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	20001150 	.word	0x20001150

080034cc <Flash_get_values>:

Flash *Flash_get_values(){
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
	return &Stored_in_RAM; //*ptr;// = flash_read(FLASH_BASE + PAGE_SIZE*PAGE_NUMBER);
 80034d0:	4b02      	ldr	r3, [pc, #8]	; (80034dc <Flash_get_values+0x10>)
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	20001150 	.word	0x20001150

080034e0 <Compute>:
#include "PID.h"

#include <stdio.h>

void Compute(PID_instance *val)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
	if(!val->inAuto) return;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f000 80a2 	beq.w	8003638 <Compute+0x158>
	/*Compute all the working error variables*/
	float error = val->Setpoint - val->Input;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	ed93 7a02 	vldr	s14, [r3, #8]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	edd3 7a00 	vldr	s15, [r3]
 8003500:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003504:	edc7 7a03 	vstr	s15, [r7, #12]
	float dInput = (val->Input - val->lastInput);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	ed93 7a00 	vldr	s14, [r3]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	edd3 7a04 	vldr	s15, [r3, #16]
 8003514:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003518:	edc7 7a02 	vstr	s15, [r7, #8]
	val->outputSum+= (val->ki * error);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	ed93 7a03 	vldr	s14, [r3, #12]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	edd3 6a06 	vldr	s13, [r3, #24]
 8003528:	edd7 7a03 	vldr	s15, [r7, #12]
 800352c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003530:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	edc3 7a03 	vstr	s15, [r3, #12]

	/*Add Proportional on Measurement, if P_ON_M is specified*/
	if(val->pOnM) val->outputSum-= val->pOnMKp * dInput;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00e      	beq.n	8003562 <Compute+0x82>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	ed93 7a03 	vldr	s14, [r3, #12]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8003550:	edd7 7a02 	vldr	s15, [r7, #8]
 8003554:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003558:	ee77 7a67 	vsub.f32	s15, s14, s15
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	edc3 7a03 	vstr	s15, [r3, #12]

	if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	ed93 7a03 	vldr	s14, [r3, #12]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800356e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003576:	dd04      	ble.n	8003582 <Compute+0xa2>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	60da      	str	r2, [r3, #12]
 8003580:	e00e      	b.n	80035a0 <Compute+0xc0>
	else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	ed93 7a03 	vldr	s14, [r3, #12]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	edd3 7a08 	vldr	s15, [r3, #32]
 800358e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003596:	d503      	bpl.n	80035a0 <Compute+0xc0>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a1a      	ldr	r2, [r3, #32]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	60da      	str	r2, [r3, #12]

	/*Add Proportional on Error, if P_ON_E is specified*/
	if(val->pOnE) val->Output = val->pOnEKp * error;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00a      	beq.n	80035c0 <Compute+0xe0>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80035b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80035b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	edc3 7a01 	vstr	s15, [r3, #4]
 80035be:	e003      	b.n	80035c8 <Compute+0xe8>
	else val->Output = 0;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f04f 0200 	mov.w	r2, #0
 80035c6:	605a      	str	r2, [r3, #4]

	/*Compute Rest of PID Output*/
	val->Output += val->outputSum - val->kd * dInput;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	ed93 7a01 	vldr	s14, [r3, #4]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	edd3 6a03 	vldr	s13, [r3, #12]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	ed93 6a07 	vldr	s12, [r3, #28]
 80035da:	edd7 7a02 	vldr	s15, [r7, #8]
 80035de:	ee66 7a27 	vmul.f32	s15, s12, s15
 80035e2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80035e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	edc3 7a01 	vstr	s15, [r3, #4]

	if(val->Output > val->outMax) val->Output = val->outMax;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	ed93 7a01 	vldr	s14, [r3, #4]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80035fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003604:	dd04      	ble.n	8003610 <Compute+0x130>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	605a      	str	r2, [r3, #4]
 800360e:	e00e      	b.n	800362e <Compute+0x14e>
	else if(val->Output < val->outMin) val->Output = val->outMin;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	ed93 7a01 	vldr	s14, [r3, #4]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	edd3 7a08 	vldr	s15, [r3, #32]
 800361c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003624:	d503      	bpl.n	800362e <Compute+0x14e>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a1a      	ldr	r2, [r3, #32]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	605a      	str	r2, [r3, #4]

	/*Remember some variables for next time*/
	val->lastInput = val->Input;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	611a      	str	r2, [r3, #16]
 8003636:	e000      	b.n	800363a <Compute+0x15a>
	if(!val->inAuto) return;
 8003638:	bf00      	nop
}
 800363a:	3714      	adds	r7, #20
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <SetTunings>:

void SetTunings(PID_instance *val, float Kp, float Ki, float Kd, float pOn)
{
 8003644:	b480      	push	{r7}
 8003646:	b089      	sub	sp, #36	; 0x24
 8003648:	af00      	add	r7, sp, #0
 800364a:	6178      	str	r0, [r7, #20]
 800364c:	ed87 0a04 	vstr	s0, [r7, #16]
 8003650:	edc7 0a03 	vstr	s1, [r7, #12]
 8003654:	ed87 1a02 	vstr	s2, [r7, #8]
 8003658:	edc7 1a01 	vstr	s3, [r7, #4]
   if (Kp<0 || Ki<0|| Kd<0 || pOn<0 || pOn>1) return;
 800365c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003660:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003668:	f100 809b 	bmi.w	80037a2 <SetTunings+0x15e>
 800366c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003670:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003678:	f100 8093 	bmi.w	80037a2 <SetTunings+0x15e>
 800367c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003680:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003688:	f100 808b 	bmi.w	80037a2 <SetTunings+0x15e>
 800368c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003690:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003698:	f100 8083 	bmi.w	80037a2 <SetTunings+0x15e>
 800369c:	edd7 7a01 	vldr	s15, [r7, #4]
 80036a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ac:	dc79      	bgt.n	80037a2 <SetTunings+0x15e>

   val->pOnE = pOn>0; //some p on error is desired;
 80036ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80036b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ba:	bfcc      	ite	gt
 80036bc:	2301      	movgt	r3, #1
 80036be:	2300      	movle	r3, #0
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	461a      	mov	r2, r3
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
   val->pOnM = pOn<1; //some p on measurement is desired;
 80036ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80036ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036da:	bf4c      	ite	mi
 80036dc:	2301      	movmi	r3, #1
 80036de:	2300      	movpl	r3, #0
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	461a      	mov	r2, r3
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

   float SampleTimeInSec = ((float)val->SampleTime)/1000000;
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ee:	ee07 3a90 	vmov	s15, r3
 80036f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80036f6:	eddf 6a2e 	vldr	s13, [pc, #184]	; 80037b0 <SetTunings+0x16c>
 80036fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80036fe:	edc7 7a07 	vstr	s15, [r7, #28]
   val->kp = Kp;
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	615a      	str	r2, [r3, #20]
   val->ki = Ki * SampleTimeInSec;
 8003708:	ed97 7a03 	vldr	s14, [r7, #12]
 800370c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003710:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	edc3 7a06 	vstr	s15, [r3, #24]
   val->kd = Kd / SampleTimeInSec;
 800371a:	edd7 6a02 	vldr	s13, [r7, #8]
 800371e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003722:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	edc3 7a07 	vstr	s15, [r3, #28]

  if(val->controllerDirection ==REVERSE)
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003730:	2b01      	cmp	r3, #1
 8003732:	d11d      	bne.n	8003770 <SetTunings+0x12c>
   {
	  val->kp = (0 - val->kp);
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	edd3 7a05 	vldr	s15, [r3, #20]
 800373a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80037b4 <SetTunings+0x170>
 800373e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	edc3 7a05 	vstr	s15, [r3, #20]
	  val->ki = (0 - val->ki);
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	edd3 7a06 	vldr	s15, [r3, #24]
 800374e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80037b4 <SetTunings+0x170>
 8003752:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	edc3 7a06 	vstr	s15, [r3, #24]
	  val->kd = (0 - val->kd);
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	edd3 7a07 	vldr	s15, [r3, #28]
 8003762:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80037b4 <SetTunings+0x170>
 8003766:	ee77 7a67 	vsub.f32	s15, s14, s15
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	edc3 7a07 	vstr	s15, [r3, #28]
   }

  val->pOnEKp = pOn * val->kp;
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	ed93 7a05 	vldr	s14, [r3, #20]
 8003776:	edd7 7a01 	vldr	s15, [r7, #4]
 800377a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
  val->pOnMKp = (1 - pOn) * val->kp;
 8003784:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003788:	edd7 7a01 	vldr	s15, [r7, #4]
 800378c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	edd3 7a05 	vldr	s15, [r3, #20]
 8003796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 80037a0:	e000      	b.n	80037a4 <SetTunings+0x160>
   if (Kp<0 || Ki<0|| Kd<0 || pOn<0 || pOn>1) return;
 80037a2:	bf00      	nop
}
 80037a4:	3724      	adds	r7, #36	; 0x24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	49742400 	.word	0x49742400
 80037b4:	00000000 	.word	0x00000000

080037b8 <SetSampleTime>:

void SetSampleTime(PID_instance *val, int NewSampleTime)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
   if (NewSampleTime > 0)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	dd25      	ble.n	8003814 <SetSampleTime+0x5c>
   {
      float ratio  = (float)NewSampleTime
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	ee07 3a90 	vmov	s15, r3
 80037ce:	eef8 6ae7 	vcvt.f32.s32	s13, s15
                      / (float)val->SampleTime;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d6:	ee07 3a90 	vmov	s15, r3
 80037da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
      float ratio  = (float)NewSampleTime
 80037de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037e2:	edc7 7a03 	vstr	s15, [r7, #12]
      val->ki *= ratio;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	ed93 7a06 	vldr	s14, [r3, #24]
 80037ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80037f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	edc3 7a06 	vstr	s15, [r3, #24]
      val->kd /= ratio;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	edd3 6a07 	vldr	s13, [r3, #28]
 8003800:	ed97 7a03 	vldr	s14, [r7, #12]
 8003804:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	edc3 7a07 	vstr	s15, [r3, #28]
      val->SampleTime = (unsigned long)NewSampleTime;
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	629a      	str	r2, [r3, #40]	; 0x28
   }
}
 8003814:	bf00      	nop
 8003816:	3714      	adds	r7, #20
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <SetOutputLimits>:

void SetOutputLimits(PID_instance *val, float Min, float Max)
{
 8003820:	b480      	push	{r7}
 8003822:	b085      	sub	sp, #20
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	ed87 0a02 	vstr	s0, [r7, #8]
 800382c:	edc7 0a01 	vstr	s1, [r7, #4]
   if(Min > Max) return;
 8003830:	ed97 7a02 	vldr	s14, [r7, #8]
 8003834:	edd7 7a01 	vldr	s15, [r7, #4]
 8003838:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800383c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003840:	dc44      	bgt.n	80038cc <SetOutputLimits+0xac>
   val->outMin = Min;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	68ba      	ldr	r2, [r7, #8]
 8003846:	621a      	str	r2, [r3, #32]
   val->outMax = Max;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	625a      	str	r2, [r3, #36]	; 0x24

   if(val->Output > val->outMax) val->Output = val->outMax;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	ed93 7a01 	vldr	s14, [r3, #4]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800385a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800385e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003862:	dd04      	ble.n	800386e <SetOutputLimits+0x4e>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	605a      	str	r2, [r3, #4]
 800386c:	e00e      	b.n	800388c <SetOutputLimits+0x6c>
   else if(val->Output < val->outMin) val->Output = val->outMin;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	ed93 7a01 	vldr	s14, [r3, #4]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	edd3 7a08 	vldr	s15, [r3, #32]
 800387a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800387e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003882:	d503      	bpl.n	800388c <SetOutputLimits+0x6c>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6a1a      	ldr	r2, [r3, #32]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	605a      	str	r2, [r3, #4]

   if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	ed93 7a03 	vldr	s14, [r3, #12]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003898:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800389c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038a0:	dd04      	ble.n	80038ac <SetOutputLimits+0x8c>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	60da      	str	r2, [r3, #12]
 80038aa:	e010      	b.n	80038ce <SetOutputLimits+0xae>
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	ed93 7a03 	vldr	s14, [r3, #12]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	edd3 7a08 	vldr	s15, [r3, #32]
 80038b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038c0:	d505      	bpl.n	80038ce <SetOutputLimits+0xae>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6a1a      	ldr	r2, [r3, #32]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	60da      	str	r2, [r3, #12]
 80038ca:	e000      	b.n	80038ce <SetOutputLimits+0xae>
   if(Min > Max) return;
 80038cc:	bf00      	nop
}
 80038ce:	3714      	adds	r7, #20
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <SetMode>:

void SetMode(PID_instance *val, int Mode)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
    uint8_t newAuto = (Mode == AUTOMATIC);
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	bf0c      	ite	eq
 80038e8:	2301      	moveq	r3, #1
 80038ea:	2300      	movne	r3, #0
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	73fb      	strb	r3, [r7, #15]
    if(newAuto == !val->inAuto)
 80038f0:	7bfb      	ldrb	r3, [r7, #15]
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 80038f8:	2a00      	cmp	r2, #0
 80038fa:	bf0c      	ite	eq
 80038fc:	2201      	moveq	r2, #1
 80038fe:	2200      	movne	r2, #0
 8003900:	b2d2      	uxtb	r2, r2
 8003902:	4293      	cmp	r3, r2
 8003904:	d102      	bne.n	800390c <SetMode+0x34>
    {  /*we just went from manual to auto*/
        Initialize(val);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 f808 	bl	800391c <Initialize>
    }
    val->inAuto = newAuto;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	7bfa      	ldrb	r2, [r7, #15]
 8003910:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8003914:	bf00      	nop
 8003916:	3710      	adds	r7, #16
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <Initialize>:

void Initialize(PID_instance *val)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
	val->lastInput = val->Input;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	611a      	str	r2, [r3, #16]
	val->outputSum = val->Output;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685a      	ldr	r2, [r3, #4]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	60da      	str	r2, [r3, #12]
   if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	ed93 7a03 	vldr	s14, [r3, #12]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003940:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003948:	dd04      	ble.n	8003954 <Initialize+0x38>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	60da      	str	r2, [r3, #12]
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
}
 8003952:	e00f      	b.n	8003974 <Initialize+0x58>
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	ed93 7a03 	vldr	s14, [r3, #12]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	edd3 7a08 	vldr	s15, [r3, #32]
 8003960:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003968:	d400      	bmi.n	800396c <Initialize+0x50>
}
 800396a:	e003      	b.n	8003974 <Initialize+0x58>
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a1a      	ldr	r2, [r3, #32]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	60da      	str	r2, [r3, #12]
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <SetControllerDirection>:

void SetControllerDirection(PID_instance *val, int Direction)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
	val->controllerDirection = Direction;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	683a      	ldr	r2, [r7, #0]
 800398e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <PrintServerPrintf>:
/* For convenience, define a pointer to UART handle */
UART_HandleTypeDef *uart_handle_p = &huart1;

volatile uint8_t buff[PRINT_BUFFER_SIZE];
void PrintServerPrintf(const char *fmt, ...)
{
 800399c:	b40f      	push	{r0, r1, r2, r3}
 800399e:	b590      	push	{r4, r7, lr}
 80039a0:	b083      	sub	sp, #12
 80039a2:	af00      	add	r7, sp, #0
/* local variable to store the final text string to be sent to UART */

/* va_list is a type to hold information about variable arguments */
va_list args;
/* va_start must be called before accessing variable argument list */
va_start(args, fmt);
 80039a4:	f107 031c 	add.w	r3, r7, #28
 80039a8:	607b      	str	r3, [r7, #4]
*
* The vsnprintf() function converts each entry in the argument list
* according to the corresponding format specifier in format. The format has
* the same form and function as the format string for the printf()
* function. */
vsnprintf((char *)buff, PRINT_BUFFER_SIZE, fmt, args);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80039b2:	480b      	ldr	r0, [pc, #44]	; (80039e0 <PrintServerPrintf+0x44>)
 80039b4:	f00b fc6e 	bl	800f294 <vsniprintf>
/* va_end should be executed before the function returns whenever
* va_start has been previously used in that function */
va_end(args);
HAL_UART_Transmit_DMA(uart_handle_p, (uint8_t *)buff, strlen((char *)buff));
 80039b8:	4b0a      	ldr	r3, [pc, #40]	; (80039e4 <PrintServerPrintf+0x48>)
 80039ba:	681c      	ldr	r4, [r3, #0]
 80039bc:	4808      	ldr	r0, [pc, #32]	; (80039e0 <PrintServerPrintf+0x44>)
 80039be:	f7fc fc7f 	bl	80002c0 <strlen>
 80039c2:	4603      	mov	r3, r0
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	461a      	mov	r2, r3
 80039c8:	4905      	ldr	r1, [pc, #20]	; (80039e0 <PrintServerPrintf+0x44>)
 80039ca:	4620      	mov	r0, r4
 80039cc:	f009 fbd2 	bl	800d174 <HAL_UART_Transmit_DMA>
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80039da:	b004      	add	sp, #16
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	20001608 	.word	0x20001608
 80039e4:	20000530 	.word	0x20000530

080039e8 <dac_value>:
#define Vref 3000

uint16_t calibrating = 0;
volatile uint32_t Voltage_offset_temp[3] = {0};

void dac_value(uint16_t V_dac){
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	4603      	mov	r3, r0
 80039f0:	80fb      	strh	r3, [r7, #6]
	uint16_t dac_value = ((V_dac*ADC_RES)/VDDA);
 80039f2:	88fa      	ldrh	r2, [r7, #6]
 80039f4:	4613      	mov	r3, r2
 80039f6:	031b      	lsls	r3, r3, #12
 80039f8:	1a9b      	subs	r3, r3, r2
 80039fa:	4a08      	ldr	r2, [pc, #32]	; (8003a1c <dac_value+0x34>)
 80039fc:	8812      	ldrh	r2, [r2, #0]
 80039fe:	b212      	sxth	r2, r2
 8003a00:	fb93 f3f2 	sdiv	r3, r3, r2
 8003a04:	81fb      	strh	r3, [r7, #14]
	HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
 8003a06:	89fb      	ldrh	r3, [r7, #14]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	4804      	ldr	r0, [pc, #16]	; (8003a20 <dac_value+0x38>)
 8003a0e:	f004 f823 	bl	8007a58 <HAL_DAC_SetValue>
}
 8003a12:	bf00      	nop
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	20001854 	.word	0x20001854
 8003a20:	20001aa4 	.word	0x20001aa4

08003a24 <ADC_CAL>:
    // Calculate the magnitude of the vector sum
    float magnitude = sqrt(sum.real * sum.real + sum.imag * sum.imag);
    return magnitude;
}

void ADC_CAL(){
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
	VDDA = (int16_t)3000*(*vrefint)/(adc_result_DMA[3]/number_of_oversample);
 8003a28:	4b4b      	ldr	r3, [pc, #300]	; (8003b58 <ADC_CAL+0x134>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	881b      	ldrh	r3, [r3, #0]
 8003a2e:	461a      	mov	r2, r3
 8003a30:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003a34:	fb02 f303 	mul.w	r3, r2, r3
 8003a38:	461a      	mov	r2, r3
 8003a3a:	4b48      	ldr	r3, [pc, #288]	; (8003b5c <ADC_CAL+0x138>)
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	091b      	lsrs	r3, r3, #4
 8003a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a44:	b21a      	sxth	r2, r3
 8003a46:	4b46      	ldr	r3, [pc, #280]	; (8003b60 <ADC_CAL+0x13c>)
 8003a48:	801a      	strh	r2, [r3, #0]
	Voltage_offset_temp[0] += (int32_t)((adc_result_DMA[2]/number_of_oversample*VDDA)/4095)*153/100; //*153/100
 8003a4a:	4b44      	ldr	r3, [pc, #272]	; (8003b5c <ADC_CAL+0x138>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	091b      	lsrs	r3, r3, #4
 8003a50:	4a43      	ldr	r2, [pc, #268]	; (8003b60 <ADC_CAL+0x13c>)
 8003a52:	8812      	ldrh	r2, [r2, #0]
 8003a54:	b212      	sxth	r2, r2
 8003a56:	fb03 f202 	mul.w	r2, r3, r2
 8003a5a:	4b42      	ldr	r3, [pc, #264]	; (8003b64 <ADC_CAL+0x140>)
 8003a5c:	fba3 1302 	umull	r1, r3, r3, r2
 8003a60:	1ad2      	subs	r2, r2, r3
 8003a62:	0852      	lsrs	r2, r2, #1
 8003a64:	4413      	add	r3, r2
 8003a66:	0adb      	lsrs	r3, r3, #11
 8003a68:	461a      	mov	r2, r3
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	00db      	lsls	r3, r3, #3
 8003a6e:	4413      	add	r3, r2
 8003a70:	011a      	lsls	r2, r3, #4
 8003a72:	4413      	add	r3, r2
 8003a74:	4a3c      	ldr	r2, [pc, #240]	; (8003b68 <ADC_CAL+0x144>)
 8003a76:	fb82 1203 	smull	r1, r2, r2, r3
 8003a7a:	1152      	asrs	r2, r2, #5
 8003a7c:	17db      	asrs	r3, r3, #31
 8003a7e:	1ad2      	subs	r2, r2, r3
 8003a80:	4b3a      	ldr	r3, [pc, #232]	; (8003b6c <ADC_CAL+0x148>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4413      	add	r3, r2
 8003a86:	4a39      	ldr	r2, [pc, #228]	; (8003b6c <ADC_CAL+0x148>)
 8003a88:	6013      	str	r3, [r2, #0]
	Voltage_offset_temp[1] += (int32_t)((adc_result_DMA[1]/number_of_oversample*VDDA)/4095)*153/100;
 8003a8a:	4b34      	ldr	r3, [pc, #208]	; (8003b5c <ADC_CAL+0x138>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	091b      	lsrs	r3, r3, #4
 8003a90:	4a33      	ldr	r2, [pc, #204]	; (8003b60 <ADC_CAL+0x13c>)
 8003a92:	8812      	ldrh	r2, [r2, #0]
 8003a94:	b212      	sxth	r2, r2
 8003a96:	fb03 f202 	mul.w	r2, r3, r2
 8003a9a:	4b32      	ldr	r3, [pc, #200]	; (8003b64 <ADC_CAL+0x140>)
 8003a9c:	fba3 1302 	umull	r1, r3, r3, r2
 8003aa0:	1ad2      	subs	r2, r2, r3
 8003aa2:	0852      	lsrs	r2, r2, #1
 8003aa4:	4413      	add	r3, r2
 8003aa6:	0adb      	lsrs	r3, r3, #11
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	4613      	mov	r3, r2
 8003aac:	00db      	lsls	r3, r3, #3
 8003aae:	4413      	add	r3, r2
 8003ab0:	011a      	lsls	r2, r3, #4
 8003ab2:	4413      	add	r3, r2
 8003ab4:	4a2c      	ldr	r2, [pc, #176]	; (8003b68 <ADC_CAL+0x144>)
 8003ab6:	fb82 1203 	smull	r1, r2, r2, r3
 8003aba:	1152      	asrs	r2, r2, #5
 8003abc:	17db      	asrs	r3, r3, #31
 8003abe:	1ad2      	subs	r2, r2, r3
 8003ac0:	4b2a      	ldr	r3, [pc, #168]	; (8003b6c <ADC_CAL+0x148>)
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	4a29      	ldr	r2, [pc, #164]	; (8003b6c <ADC_CAL+0x148>)
 8003ac8:	6053      	str	r3, [r2, #4]
	Voltage_offset_temp[2] += (int32_t)((adc_result_DMA[0]/number_of_oversample*VDDA)/4095)*153/100;
 8003aca:	4b24      	ldr	r3, [pc, #144]	; (8003b5c <ADC_CAL+0x138>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	091b      	lsrs	r3, r3, #4
 8003ad0:	4a23      	ldr	r2, [pc, #140]	; (8003b60 <ADC_CAL+0x13c>)
 8003ad2:	8812      	ldrh	r2, [r2, #0]
 8003ad4:	b212      	sxth	r2, r2
 8003ad6:	fb03 f202 	mul.w	r2, r3, r2
 8003ada:	4b22      	ldr	r3, [pc, #136]	; (8003b64 <ADC_CAL+0x140>)
 8003adc:	fba3 1302 	umull	r1, r3, r3, r2
 8003ae0:	1ad2      	subs	r2, r2, r3
 8003ae2:	0852      	lsrs	r2, r2, #1
 8003ae4:	4413      	add	r3, r2
 8003ae6:	0adb      	lsrs	r3, r3, #11
 8003ae8:	461a      	mov	r2, r3
 8003aea:	4613      	mov	r3, r2
 8003aec:	00db      	lsls	r3, r3, #3
 8003aee:	4413      	add	r3, r2
 8003af0:	011a      	lsls	r2, r3, #4
 8003af2:	4413      	add	r3, r2
 8003af4:	4a1c      	ldr	r2, [pc, #112]	; (8003b68 <ADC_CAL+0x144>)
 8003af6:	fb82 1203 	smull	r1, r2, r2, r3
 8003afa:	1152      	asrs	r2, r2, #5
 8003afc:	17db      	asrs	r3, r3, #31
 8003afe:	1ad2      	subs	r2, r2, r3
 8003b00:	4b1a      	ldr	r3, [pc, #104]	; (8003b6c <ADC_CAL+0x148>)
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	4413      	add	r3, r2
 8003b06:	4a19      	ldr	r2, [pc, #100]	; (8003b6c <ADC_CAL+0x148>)
 8003b08:	6093      	str	r3, [r2, #8]
	calibrating--;
 8003b0a:	4b19      	ldr	r3, [pc, #100]	; (8003b70 <ADC_CAL+0x14c>)
 8003b0c:	881b      	ldrh	r3, [r3, #0]
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	4b17      	ldr	r3, [pc, #92]	; (8003b70 <ADC_CAL+0x14c>)
 8003b14:	801a      	strh	r2, [r3, #0]

	if(!calibrating){
 8003b16:	4b16      	ldr	r3, [pc, #88]	; (8003b70 <ADC_CAL+0x14c>)
 8003b18:	881b      	ldrh	r3, [r3, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d117      	bne.n	8003b4e <ADC_CAL+0x12a>
		Voltage_offset[0] = Voltage_offset_temp[0]/number_of_calibration_points;
 8003b1e:	4b13      	ldr	r3, [pc, #76]	; (8003b6c <ADC_CAL+0x148>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a14      	ldr	r2, [pc, #80]	; (8003b74 <ADC_CAL+0x150>)
 8003b24:	fba2 2303 	umull	r2, r3, r2, r3
 8003b28:	099b      	lsrs	r3, r3, #6
 8003b2a:	4a13      	ldr	r2, [pc, #76]	; (8003b78 <ADC_CAL+0x154>)
 8003b2c:	6013      	str	r3, [r2, #0]
		Voltage_offset[1] = Voltage_offset_temp[1]/number_of_calibration_points;
 8003b2e:	4b0f      	ldr	r3, [pc, #60]	; (8003b6c <ADC_CAL+0x148>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	4a10      	ldr	r2, [pc, #64]	; (8003b74 <ADC_CAL+0x150>)
 8003b34:	fba2 2303 	umull	r2, r3, r2, r3
 8003b38:	099b      	lsrs	r3, r3, #6
 8003b3a:	4a0f      	ldr	r2, [pc, #60]	; (8003b78 <ADC_CAL+0x154>)
 8003b3c:	6053      	str	r3, [r2, #4]
		Voltage_offset[2] = Voltage_offset_temp[2]/number_of_calibration_points;
 8003b3e:	4b0b      	ldr	r3, [pc, #44]	; (8003b6c <ADC_CAL+0x148>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	4a0c      	ldr	r2, [pc, #48]	; (8003b74 <ADC_CAL+0x150>)
 8003b44:	fba2 2303 	umull	r2, r3, r2, r3
 8003b48:	099b      	lsrs	r3, r3, #6
 8003b4a:	4a0b      	ldr	r2, [pc, #44]	; (8003b78 <ADC_CAL+0x154>)
 8003b4c:	6093      	str	r3, [r2, #8]
	}
}
 8003b4e:	bf00      	nop
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr
 8003b58:	20000534 	.word	0x20000534
 8003b5c:	20001808 	.word	0x20001808
 8003b60:	20001854 	.word	0x20001854
 8003b64:	00100101 	.word	0x00100101
 8003b68:	51eb851f 	.word	0x51eb851f
 8003b6c:	20001880 	.word	0x20001880
 8003b70:	2000187c 	.word	0x2000187c
 8003b74:	10624dd3 	.word	0x10624dd3
 8003b78:	20001848 	.word	0x20001848

08003b7c <current_init>:

void current_init(Current_Callback __IRQ_callback){
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
	//ADC_CAL_init(&hadc1);
	calibrating = number_of_calibration_points;
 8003b84:	4b0b      	ldr	r3, [pc, #44]	; (8003bb4 <current_init+0x38>)
 8003b86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b8a:	801a      	strh	r2, [r3, #0]

	Curent_IRQ_callback = __IRQ_callback;
 8003b8c:	4a0a      	ldr	r2, [pc, #40]	; (8003bb8 <current_init+0x3c>)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6013      	str	r3, [r2, #0]

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_result_DMA, number_of_channels*2);
 8003b92:	2208      	movs	r2, #8
 8003b94:	4909      	ldr	r1, [pc, #36]	; (8003bbc <current_init+0x40>)
 8003b96:	480a      	ldr	r0, [pc, #40]	; (8003bc0 <current_init+0x44>)
 8003b98:	f002 fce4 	bl	8006564 <HAL_ADC_Start_DMA>


	HAL_DAC_Init(&hdac1);
 8003b9c:	4809      	ldr	r0, [pc, #36]	; (8003bc4 <current_init+0x48>)
 8003b9e:	f003 fee6 	bl	800796e <HAL_DAC_Init>
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 8003ba2:	2100      	movs	r1, #0
 8003ba4:	4807      	ldr	r0, [pc, #28]	; (8003bc4 <current_init+0x48>)
 8003ba6:	f003 ff04 	bl	80079b2 <HAL_DAC_Start>
}
 8003baa:	bf00      	nop
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	2000187c 	.word	0x2000187c
 8003bb8:	20001858 	.word	0x20001858
 8003bbc:	20001808 	.word	0x20001808
 8003bc0:	200018e0 	.word	0x200018e0
 8003bc4:	20001aa4 	.word	0x20001aa4

08003bc8 <voltage_temperature_init>:
void voltage_temperature_init(VT_Callback __IRQ_callback){
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
	VT_IRQ_callback = __IRQ_callback;
 8003bd0:	4a05      	ldr	r2, [pc, #20]	; (8003be8 <voltage_temperature_init+0x20>)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6013      	str	r3, [r2, #0]

	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)VT_adc_result_DMA, number_of_VT_channels*2);
 8003bd6:	2208      	movs	r2, #8
 8003bd8:	4904      	ldr	r1, [pc, #16]	; (8003bec <voltage_temperature_init+0x24>)
 8003bda:	4805      	ldr	r0, [pc, #20]	; (8003bf0 <voltage_temperature_init+0x28>)
 8003bdc:	f002 fcc2 	bl	8006564 <HAL_ADC_Start_DMA>
}
 8003be0:	bf00      	nop
 8003be2:	3708      	adds	r7, #8
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	2000186c 	.word	0x2000186c
 8003bec:	20001828 	.word	0x20001828
 8003bf0:	2000194c 	.word	0x2000194c

08003bf4 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1){
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a6e      	ldr	r2, [pc, #440]	; (8003db8 <HAL_ADC_ConvHalfCpltCallback+0x1c4>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	f040 8091 	bne.w	8003d28 <HAL_ADC_ConvHalfCpltCallback+0x134>
		if(calibrating)ADC_CAL();
 8003c06:	4b6d      	ldr	r3, [pc, #436]	; (8003dbc <HAL_ADC_ConvHalfCpltCallback+0x1c8>)
 8003c08:	881b      	ldrh	r3, [r3, #0]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d002      	beq.n	8003c14 <HAL_ADC_ConvHalfCpltCallback+0x20>
 8003c0e:	f7ff ff09 	bl	8003a24 <ADC_CAL>
 8003c12:	e089      	b.n	8003d28 <HAL_ADC_ConvHalfCpltCallback+0x134>
		else {
			VDDA = (int16_t)3000*(*vrefint)/(adc_result_DMA[3]/number_of_oversample);
 8003c14:	4b6a      	ldr	r3, [pc, #424]	; (8003dc0 <HAL_ADC_ConvHalfCpltCallback+0x1cc>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	881b      	ldrh	r3, [r3, #0]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003c20:	fb02 f303 	mul.w	r3, r2, r3
 8003c24:	461a      	mov	r2, r3
 8003c26:	4b67      	ldr	r3, [pc, #412]	; (8003dc4 <HAL_ADC_ConvHalfCpltCallback+0x1d0>)
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	091b      	lsrs	r3, r3, #4
 8003c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c30:	b21a      	sxth	r2, r3
 8003c32:	4b65      	ldr	r3, [pc, #404]	; (8003dc8 <HAL_ADC_ConvHalfCpltCallback+0x1d4>)
 8003c34:	801a      	strh	r2, [r3, #0]
			data.Current_M1 = -(int32_t)(((((int32_t)adc_result_DMA[2]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[0])*50;
 8003c36:	4b65      	ldr	r3, [pc, #404]	; (8003dcc <HAL_ADC_ConvHalfCpltCallback+0x1d8>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	4b61      	ldr	r3, [pc, #388]	; (8003dc4 <HAL_ADC_ConvHalfCpltCallback+0x1d0>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	da00      	bge.n	8003c46 <HAL_ADC_ConvHalfCpltCallback+0x52>
 8003c44:	330f      	adds	r3, #15
 8003c46:	111b      	asrs	r3, r3, #4
 8003c48:	461a      	mov	r2, r3
 8003c4a:	4b5f      	ldr	r3, [pc, #380]	; (8003dc8 <HAL_ADC_ConvHalfCpltCallback+0x1d4>)
 8003c4c:	881b      	ldrh	r3, [r3, #0]
 8003c4e:	b21b      	sxth	r3, r3
 8003c50:	fb02 f303 	mul.w	r3, r2, r3
 8003c54:	4a5e      	ldr	r2, [pc, #376]	; (8003dd0 <HAL_ADC_ConvHalfCpltCallback+0x1dc>)
 8003c56:	fb82 0203 	smull	r0, r2, r2, r3
 8003c5a:	441a      	add	r2, r3
 8003c5c:	12d2      	asrs	r2, r2, #11
 8003c5e:	17db      	asrs	r3, r3, #31
 8003c60:	1ad2      	subs	r2, r2, r3
 8003c62:	4613      	mov	r3, r2
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	4413      	add	r3, r2
 8003c68:	011a      	lsls	r2, r3, #4
 8003c6a:	4413      	add	r3, r2
 8003c6c:	4a59      	ldr	r2, [pc, #356]	; (8003dd4 <HAL_ADC_ConvHalfCpltCallback+0x1e0>)
 8003c6e:	fb82 0203 	smull	r0, r2, r2, r3
 8003c72:	1152      	asrs	r2, r2, #5
 8003c74:	17db      	asrs	r3, r3, #31
 8003c76:	1a9b      	subs	r3, r3, r2
 8003c78:	440b      	add	r3, r1
 8003c7a:	2232      	movs	r2, #50	; 0x32
 8003c7c:	fb02 f303 	mul.w	r3, r2, r3
 8003c80:	4a55      	ldr	r2, [pc, #340]	; (8003dd8 <HAL_ADC_ConvHalfCpltCallback+0x1e4>)
 8003c82:	6013      	str	r3, [r2, #0]
			data.Current_M2 = -(int32_t)(((((int32_t)adc_result_DMA[1]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[1])*50;
 8003c84:	4b51      	ldr	r3, [pc, #324]	; (8003dcc <HAL_ADC_ConvHalfCpltCallback+0x1d8>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	4619      	mov	r1, r3
 8003c8a:	4b4e      	ldr	r3, [pc, #312]	; (8003dc4 <HAL_ADC_ConvHalfCpltCallback+0x1d0>)
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	da00      	bge.n	8003c94 <HAL_ADC_ConvHalfCpltCallback+0xa0>
 8003c92:	330f      	adds	r3, #15
 8003c94:	111b      	asrs	r3, r3, #4
 8003c96:	461a      	mov	r2, r3
 8003c98:	4b4b      	ldr	r3, [pc, #300]	; (8003dc8 <HAL_ADC_ConvHalfCpltCallback+0x1d4>)
 8003c9a:	881b      	ldrh	r3, [r3, #0]
 8003c9c:	b21b      	sxth	r3, r3
 8003c9e:	fb02 f303 	mul.w	r3, r2, r3
 8003ca2:	4a4b      	ldr	r2, [pc, #300]	; (8003dd0 <HAL_ADC_ConvHalfCpltCallback+0x1dc>)
 8003ca4:	fb82 0203 	smull	r0, r2, r2, r3
 8003ca8:	441a      	add	r2, r3
 8003caa:	12d2      	asrs	r2, r2, #11
 8003cac:	17db      	asrs	r3, r3, #31
 8003cae:	1ad2      	subs	r2, r2, r3
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	4413      	add	r3, r2
 8003cb6:	011a      	lsls	r2, r3, #4
 8003cb8:	4413      	add	r3, r2
 8003cba:	4a46      	ldr	r2, [pc, #280]	; (8003dd4 <HAL_ADC_ConvHalfCpltCallback+0x1e0>)
 8003cbc:	fb82 0203 	smull	r0, r2, r2, r3
 8003cc0:	1152      	asrs	r2, r2, #5
 8003cc2:	17db      	asrs	r3, r3, #31
 8003cc4:	1a9b      	subs	r3, r3, r2
 8003cc6:	440b      	add	r3, r1
 8003cc8:	2232      	movs	r2, #50	; 0x32
 8003cca:	fb02 f303 	mul.w	r3, r2, r3
 8003cce:	4a42      	ldr	r2, [pc, #264]	; (8003dd8 <HAL_ADC_ConvHalfCpltCallback+0x1e4>)
 8003cd0:	6053      	str	r3, [r2, #4]
			data.Current_M3 = -(int32_t)(((((int32_t)adc_result_DMA[0]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[2])*50;
 8003cd2:	4b3e      	ldr	r3, [pc, #248]	; (8003dcc <HAL_ADC_ConvHalfCpltCallback+0x1d8>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	4b3a      	ldr	r3, [pc, #232]	; (8003dc4 <HAL_ADC_ConvHalfCpltCallback+0x1d0>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	da00      	bge.n	8003ce2 <HAL_ADC_ConvHalfCpltCallback+0xee>
 8003ce0:	330f      	adds	r3, #15
 8003ce2:	111b      	asrs	r3, r3, #4
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	4b38      	ldr	r3, [pc, #224]	; (8003dc8 <HAL_ADC_ConvHalfCpltCallback+0x1d4>)
 8003ce8:	881b      	ldrh	r3, [r3, #0]
 8003cea:	b21b      	sxth	r3, r3
 8003cec:	fb02 f303 	mul.w	r3, r2, r3
 8003cf0:	4a37      	ldr	r2, [pc, #220]	; (8003dd0 <HAL_ADC_ConvHalfCpltCallback+0x1dc>)
 8003cf2:	fb82 0203 	smull	r0, r2, r2, r3
 8003cf6:	441a      	add	r2, r3
 8003cf8:	12d2      	asrs	r2, r2, #11
 8003cfa:	17db      	asrs	r3, r3, #31
 8003cfc:	1ad2      	subs	r2, r2, r3
 8003cfe:	4613      	mov	r3, r2
 8003d00:	00db      	lsls	r3, r3, #3
 8003d02:	4413      	add	r3, r2
 8003d04:	011a      	lsls	r2, r3, #4
 8003d06:	4413      	add	r3, r2
 8003d08:	4a32      	ldr	r2, [pc, #200]	; (8003dd4 <HAL_ADC_ConvHalfCpltCallback+0x1e0>)
 8003d0a:	fb82 0203 	smull	r0, r2, r2, r3
 8003d0e:	1152      	asrs	r2, r2, #5
 8003d10:	17db      	asrs	r3, r3, #31
 8003d12:	1a9b      	subs	r3, r3, r2
 8003d14:	440b      	add	r3, r1
 8003d16:	2232      	movs	r2, #50	; 0x32
 8003d18:	fb02 f303 	mul.w	r3, r2, r3
 8003d1c:	4a2e      	ldr	r2, [pc, #184]	; (8003dd8 <HAL_ADC_ConvHalfCpltCallback+0x1e4>)
 8003d1e:	6093      	str	r3, [r2, #8]
			Curent_IRQ_callback(&data);
 8003d20:	4b2e      	ldr	r3, [pc, #184]	; (8003ddc <HAL_ADC_ConvHalfCpltCallback+0x1e8>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	482c      	ldr	r0, [pc, #176]	; (8003dd8 <HAL_ADC_ConvHalfCpltCallback+0x1e4>)
 8003d26:	4798      	blx	r3
		}
	}
	if (hadc == &hadc2){
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a2d      	ldr	r2, [pc, #180]	; (8003de0 <HAL_ADC_ConvHalfCpltCallback+0x1ec>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d13f      	bne.n	8003db0 <HAL_ADC_ConvHalfCpltCallback+0x1bc>
		//VT_data.Temp_NTC1 = (VT_adc_result_DMA[0]/number_of_VT_oversample*VDDA)/ADC_RES;
		VT_data.Temp_NTC2 = (VT_adc_result_DMA[1]/number_of_VT_oversample*VDDA)/ADC_RES;
 8003d30:	4b2c      	ldr	r3, [pc, #176]	; (8003de4 <HAL_ADC_ConvHalfCpltCallback+0x1f0>)
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	091b      	lsrs	r3, r3, #4
 8003d36:	4a24      	ldr	r2, [pc, #144]	; (8003dc8 <HAL_ADC_ConvHalfCpltCallback+0x1d4>)
 8003d38:	8812      	ldrh	r2, [r2, #0]
 8003d3a:	b212      	sxth	r2, r2
 8003d3c:	fb03 f202 	mul.w	r2, r3, r2
 8003d40:	4b29      	ldr	r3, [pc, #164]	; (8003de8 <HAL_ADC_ConvHalfCpltCallback+0x1f4>)
 8003d42:	fba3 1302 	umull	r1, r3, r3, r2
 8003d46:	1ad2      	subs	r2, r2, r3
 8003d48:	0852      	lsrs	r2, r2, #1
 8003d4a:	4413      	add	r3, r2
 8003d4c:	0adb      	lsrs	r3, r3, #11
 8003d4e:	b21a      	sxth	r2, r3
 8003d50:	4b26      	ldr	r3, [pc, #152]	; (8003dec <HAL_ADC_ConvHalfCpltCallback+0x1f8>)
 8003d52:	811a      	strh	r2, [r3, #8]
		VT_data.V_Bat = (VT_adc_result_DMA[2]/number_of_VT_oversample*VDDA*34)/ADC_RES;
 8003d54:	4b23      	ldr	r3, [pc, #140]	; (8003de4 <HAL_ADC_ConvHalfCpltCallback+0x1f0>)
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	091b      	lsrs	r3, r3, #4
 8003d5a:	4a1b      	ldr	r2, [pc, #108]	; (8003dc8 <HAL_ADC_ConvHalfCpltCallback+0x1d4>)
 8003d5c:	8812      	ldrh	r2, [r2, #0]
 8003d5e:	b212      	sxth	r2, r2
 8003d60:	fb03 f202 	mul.w	r2, r3, r2
 8003d64:	4613      	mov	r3, r2
 8003d66:	011b      	lsls	r3, r3, #4
 8003d68:	4413      	add	r3, r2
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	4b1e      	ldr	r3, [pc, #120]	; (8003de8 <HAL_ADC_ConvHalfCpltCallback+0x1f4>)
 8003d70:	fba3 1302 	umull	r1, r3, r3, r2
 8003d74:	1ad2      	subs	r2, r2, r3
 8003d76:	0852      	lsrs	r2, r2, #1
 8003d78:	4413      	add	r3, r2
 8003d7a:	0adb      	lsrs	r3, r3, #11
 8003d7c:	4a1b      	ldr	r2, [pc, #108]	; (8003dec <HAL_ADC_ConvHalfCpltCallback+0x1f8>)
 8003d7e:	6013      	str	r3, [r2, #0]
		VT_data.V_aux = (VT_adc_result_DMA[3]/number_of_VT_oversample*VDDA*57)/ADC_RES/10;
 8003d80:	4b18      	ldr	r3, [pc, #96]	; (8003de4 <HAL_ADC_ConvHalfCpltCallback+0x1f0>)
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	091b      	lsrs	r3, r3, #4
 8003d86:	4a10      	ldr	r2, [pc, #64]	; (8003dc8 <HAL_ADC_ConvHalfCpltCallback+0x1d4>)
 8003d88:	8812      	ldrh	r2, [r2, #0]
 8003d8a:	b212      	sxth	r2, r2
 8003d8c:	fb03 f202 	mul.w	r2, r3, r2
 8003d90:	4613      	mov	r3, r2
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	1a9b      	subs	r3, r3, r2
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	4413      	add	r3, r2
 8003d9a:	4a15      	ldr	r2, [pc, #84]	; (8003df0 <HAL_ADC_ConvHalfCpltCallback+0x1fc>)
 8003d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003da0:	0bdb      	lsrs	r3, r3, #15
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	4b11      	ldr	r3, [pc, #68]	; (8003dec <HAL_ADC_ConvHalfCpltCallback+0x1f8>)
 8003da6:	809a      	strh	r2, [r3, #4]
		VT_IRQ_callback(&VT_data);
 8003da8:	4b12      	ldr	r3, [pc, #72]	; (8003df4 <HAL_ADC_ConvHalfCpltCallback+0x200>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	480f      	ldr	r0, [pc, #60]	; (8003dec <HAL_ADC_ConvHalfCpltCallback+0x1f8>)
 8003dae:	4798      	blx	r3
	}
}
 8003db0:	bf00      	nop
 8003db2:	3708      	adds	r7, #8
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	200018e0 	.word	0x200018e0
 8003dbc:	2000187c 	.word	0x2000187c
 8003dc0:	20000534 	.word	0x20000534
 8003dc4:	20001808 	.word	0x20001808
 8003dc8:	20001854 	.word	0x20001854
 8003dcc:	20001848 	.word	0x20001848
 8003dd0:	80080081 	.word	0x80080081
 8003dd4:	51eb851f 	.word	0x51eb851f
 8003dd8:	2000185c 	.word	0x2000185c
 8003ddc:	20001858 	.word	0x20001858
 8003de0:	2000194c 	.word	0x2000194c
 8003de4:	20001828 	.word	0x20001828
 8003de8:	00100101 	.word	0x00100101
 8003dec:	20001870 	.word	0x20001870
 8003df0:	ccd99a67 	.word	0xccd99a67
 8003df4:	2000186c 	.word	0x2000186c

08003df8 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1 && !calibrating){
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a6f      	ldr	r2, [pc, #444]	; (8003fc0 <HAL_ADC_ConvCpltCallback+0x1c8>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	f040 808f 	bne.w	8003f28 <HAL_ADC_ConvCpltCallback+0x130>
 8003e0a:	4b6e      	ldr	r3, [pc, #440]	; (8003fc4 <HAL_ADC_ConvCpltCallback+0x1cc>)
 8003e0c:	881b      	ldrh	r3, [r3, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f040 808a 	bne.w	8003f28 <HAL_ADC_ConvCpltCallback+0x130>
		VDDA = (int16_t)3000*(*vrefint)/(adc_result_DMA[7]/number_of_oversample);
 8003e14:	4b6c      	ldr	r3, [pc, #432]	; (8003fc8 <HAL_ADC_ConvCpltCallback+0x1d0>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	881b      	ldrh	r3, [r3, #0]
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003e20:	fb02 f303 	mul.w	r3, r2, r3
 8003e24:	461a      	mov	r2, r3
 8003e26:	4b69      	ldr	r3, [pc, #420]	; (8003fcc <HAL_ADC_ConvCpltCallback+0x1d4>)
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	091b      	lsrs	r3, r3, #4
 8003e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e30:	b21a      	sxth	r2, r3
 8003e32:	4b67      	ldr	r3, [pc, #412]	; (8003fd0 <HAL_ADC_ConvCpltCallback+0x1d8>)
 8003e34:	801a      	strh	r2, [r3, #0]
		data.Current_M1 = -(int32_t)(((((int32_t)adc_result_DMA[6]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[0])*50;
 8003e36:	4b67      	ldr	r3, [pc, #412]	; (8003fd4 <HAL_ADC_ConvCpltCallback+0x1dc>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	4b63      	ldr	r3, [pc, #396]	; (8003fcc <HAL_ADC_ConvCpltCallback+0x1d4>)
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	da00      	bge.n	8003e46 <HAL_ADC_ConvCpltCallback+0x4e>
 8003e44:	330f      	adds	r3, #15
 8003e46:	111b      	asrs	r3, r3, #4
 8003e48:	461a      	mov	r2, r3
 8003e4a:	4b61      	ldr	r3, [pc, #388]	; (8003fd0 <HAL_ADC_ConvCpltCallback+0x1d8>)
 8003e4c:	881b      	ldrh	r3, [r3, #0]
 8003e4e:	b21b      	sxth	r3, r3
 8003e50:	fb02 f303 	mul.w	r3, r2, r3
 8003e54:	4a60      	ldr	r2, [pc, #384]	; (8003fd8 <HAL_ADC_ConvCpltCallback+0x1e0>)
 8003e56:	fb82 0203 	smull	r0, r2, r2, r3
 8003e5a:	441a      	add	r2, r3
 8003e5c:	12d2      	asrs	r2, r2, #11
 8003e5e:	17db      	asrs	r3, r3, #31
 8003e60:	1ad2      	subs	r2, r2, r3
 8003e62:	4613      	mov	r3, r2
 8003e64:	00db      	lsls	r3, r3, #3
 8003e66:	4413      	add	r3, r2
 8003e68:	011a      	lsls	r2, r3, #4
 8003e6a:	4413      	add	r3, r2
 8003e6c:	4a5b      	ldr	r2, [pc, #364]	; (8003fdc <HAL_ADC_ConvCpltCallback+0x1e4>)
 8003e6e:	fb82 0203 	smull	r0, r2, r2, r3
 8003e72:	1152      	asrs	r2, r2, #5
 8003e74:	17db      	asrs	r3, r3, #31
 8003e76:	1a9b      	subs	r3, r3, r2
 8003e78:	440b      	add	r3, r1
 8003e7a:	2232      	movs	r2, #50	; 0x32
 8003e7c:	fb02 f303 	mul.w	r3, r2, r3
 8003e80:	4a57      	ldr	r2, [pc, #348]	; (8003fe0 <HAL_ADC_ConvCpltCallback+0x1e8>)
 8003e82:	6013      	str	r3, [r2, #0]
		data.Current_M2 = -(int32_t)(((((int32_t)adc_result_DMA[5]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[1])*50;
 8003e84:	4b53      	ldr	r3, [pc, #332]	; (8003fd4 <HAL_ADC_ConvCpltCallback+0x1dc>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	4619      	mov	r1, r3
 8003e8a:	4b50      	ldr	r3, [pc, #320]	; (8003fcc <HAL_ADC_ConvCpltCallback+0x1d4>)
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	da00      	bge.n	8003e94 <HAL_ADC_ConvCpltCallback+0x9c>
 8003e92:	330f      	adds	r3, #15
 8003e94:	111b      	asrs	r3, r3, #4
 8003e96:	461a      	mov	r2, r3
 8003e98:	4b4d      	ldr	r3, [pc, #308]	; (8003fd0 <HAL_ADC_ConvCpltCallback+0x1d8>)
 8003e9a:	881b      	ldrh	r3, [r3, #0]
 8003e9c:	b21b      	sxth	r3, r3
 8003e9e:	fb02 f303 	mul.w	r3, r2, r3
 8003ea2:	4a4d      	ldr	r2, [pc, #308]	; (8003fd8 <HAL_ADC_ConvCpltCallback+0x1e0>)
 8003ea4:	fb82 0203 	smull	r0, r2, r2, r3
 8003ea8:	441a      	add	r2, r3
 8003eaa:	12d2      	asrs	r2, r2, #11
 8003eac:	17db      	asrs	r3, r3, #31
 8003eae:	1ad2      	subs	r2, r2, r3
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	4413      	add	r3, r2
 8003eb6:	011a      	lsls	r2, r3, #4
 8003eb8:	4413      	add	r3, r2
 8003eba:	4a48      	ldr	r2, [pc, #288]	; (8003fdc <HAL_ADC_ConvCpltCallback+0x1e4>)
 8003ebc:	fb82 0203 	smull	r0, r2, r2, r3
 8003ec0:	1152      	asrs	r2, r2, #5
 8003ec2:	17db      	asrs	r3, r3, #31
 8003ec4:	1a9b      	subs	r3, r3, r2
 8003ec6:	440b      	add	r3, r1
 8003ec8:	2232      	movs	r2, #50	; 0x32
 8003eca:	fb02 f303 	mul.w	r3, r2, r3
 8003ece:	4a44      	ldr	r2, [pc, #272]	; (8003fe0 <HAL_ADC_ConvCpltCallback+0x1e8>)
 8003ed0:	6053      	str	r3, [r2, #4]
		data.Current_M3 = -(int32_t)(((((int32_t)adc_result_DMA[4]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[2])*50;
 8003ed2:	4b40      	ldr	r3, [pc, #256]	; (8003fd4 <HAL_ADC_ConvCpltCallback+0x1dc>)
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	4b3c      	ldr	r3, [pc, #240]	; (8003fcc <HAL_ADC_ConvCpltCallback+0x1d4>)
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	da00      	bge.n	8003ee2 <HAL_ADC_ConvCpltCallback+0xea>
 8003ee0:	330f      	adds	r3, #15
 8003ee2:	111b      	asrs	r3, r3, #4
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	4b3a      	ldr	r3, [pc, #232]	; (8003fd0 <HAL_ADC_ConvCpltCallback+0x1d8>)
 8003ee8:	881b      	ldrh	r3, [r3, #0]
 8003eea:	b21b      	sxth	r3, r3
 8003eec:	fb02 f303 	mul.w	r3, r2, r3
 8003ef0:	4a39      	ldr	r2, [pc, #228]	; (8003fd8 <HAL_ADC_ConvCpltCallback+0x1e0>)
 8003ef2:	fb82 0203 	smull	r0, r2, r2, r3
 8003ef6:	441a      	add	r2, r3
 8003ef8:	12d2      	asrs	r2, r2, #11
 8003efa:	17db      	asrs	r3, r3, #31
 8003efc:	1ad2      	subs	r2, r2, r3
 8003efe:	4613      	mov	r3, r2
 8003f00:	00db      	lsls	r3, r3, #3
 8003f02:	4413      	add	r3, r2
 8003f04:	011a      	lsls	r2, r3, #4
 8003f06:	4413      	add	r3, r2
 8003f08:	4a34      	ldr	r2, [pc, #208]	; (8003fdc <HAL_ADC_ConvCpltCallback+0x1e4>)
 8003f0a:	fb82 0203 	smull	r0, r2, r2, r3
 8003f0e:	1152      	asrs	r2, r2, #5
 8003f10:	17db      	asrs	r3, r3, #31
 8003f12:	1a9b      	subs	r3, r3, r2
 8003f14:	440b      	add	r3, r1
 8003f16:	2232      	movs	r2, #50	; 0x32
 8003f18:	fb02 f303 	mul.w	r3, r2, r3
 8003f1c:	4a30      	ldr	r2, [pc, #192]	; (8003fe0 <HAL_ADC_ConvCpltCallback+0x1e8>)
 8003f1e:	6093      	str	r3, [r2, #8]
		Curent_IRQ_callback(&data);
 8003f20:	4b30      	ldr	r3, [pc, #192]	; (8003fe4 <HAL_ADC_ConvCpltCallback+0x1ec>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	482e      	ldr	r0, [pc, #184]	; (8003fe0 <HAL_ADC_ConvCpltCallback+0x1e8>)
 8003f26:	4798      	blx	r3
	}
	if (hadc == &hadc2){
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a2f      	ldr	r2, [pc, #188]	; (8003fe8 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d142      	bne.n	8003fb6 <HAL_ADC_ConvCpltCallback+0x1be>
		VT_data.Temp_NTC1 = 0; //(VT_adc_result_DMA[4]/number_of_VT_oversample*VDDA)/ADC_RES * ;
 8003f30:	4b2e      	ldr	r3, [pc, #184]	; (8003fec <HAL_ADC_ConvCpltCallback+0x1f4>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	80da      	strh	r2, [r3, #6]
		VT_data.Temp_NTC2 = (VT_adc_result_DMA[5]/number_of_VT_oversample*VDDA)/ADC_RES;
 8003f36:	4b2e      	ldr	r3, [pc, #184]	; (8003ff0 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	091b      	lsrs	r3, r3, #4
 8003f3c:	4a24      	ldr	r2, [pc, #144]	; (8003fd0 <HAL_ADC_ConvCpltCallback+0x1d8>)
 8003f3e:	8812      	ldrh	r2, [r2, #0]
 8003f40:	b212      	sxth	r2, r2
 8003f42:	fb03 f202 	mul.w	r2, r3, r2
 8003f46:	4b2b      	ldr	r3, [pc, #172]	; (8003ff4 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8003f48:	fba3 1302 	umull	r1, r3, r3, r2
 8003f4c:	1ad2      	subs	r2, r2, r3
 8003f4e:	0852      	lsrs	r2, r2, #1
 8003f50:	4413      	add	r3, r2
 8003f52:	0adb      	lsrs	r3, r3, #11
 8003f54:	b21a      	sxth	r2, r3
 8003f56:	4b25      	ldr	r3, [pc, #148]	; (8003fec <HAL_ADC_ConvCpltCallback+0x1f4>)
 8003f58:	811a      	strh	r2, [r3, #8]
		VT_data.V_Bat = (VT_adc_result_DMA[6]/number_of_VT_oversample*VDDA*34)/ADC_RES;
 8003f5a:	4b25      	ldr	r3, [pc, #148]	; (8003ff0 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	091b      	lsrs	r3, r3, #4
 8003f60:	4a1b      	ldr	r2, [pc, #108]	; (8003fd0 <HAL_ADC_ConvCpltCallback+0x1d8>)
 8003f62:	8812      	ldrh	r2, [r2, #0]
 8003f64:	b212      	sxth	r2, r2
 8003f66:	fb03 f202 	mul.w	r2, r3, r2
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	011b      	lsls	r3, r3, #4
 8003f6e:	4413      	add	r3, r2
 8003f70:	005b      	lsls	r3, r3, #1
 8003f72:	461a      	mov	r2, r3
 8003f74:	4b1f      	ldr	r3, [pc, #124]	; (8003ff4 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8003f76:	fba3 1302 	umull	r1, r3, r3, r2
 8003f7a:	1ad2      	subs	r2, r2, r3
 8003f7c:	0852      	lsrs	r2, r2, #1
 8003f7e:	4413      	add	r3, r2
 8003f80:	0adb      	lsrs	r3, r3, #11
 8003f82:	4a1a      	ldr	r2, [pc, #104]	; (8003fec <HAL_ADC_ConvCpltCallback+0x1f4>)
 8003f84:	6013      	str	r3, [r2, #0]
		VT_data.V_aux = (VT_adc_result_DMA[7]/number_of_VT_oversample*VDDA*57)/ADC_RES/10;
 8003f86:	4b1a      	ldr	r3, [pc, #104]	; (8003ff0 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	091b      	lsrs	r3, r3, #4
 8003f8c:	4a10      	ldr	r2, [pc, #64]	; (8003fd0 <HAL_ADC_ConvCpltCallback+0x1d8>)
 8003f8e:	8812      	ldrh	r2, [r2, #0]
 8003f90:	b212      	sxth	r2, r2
 8003f92:	fb03 f202 	mul.w	r2, r3, r2
 8003f96:	4613      	mov	r3, r2
 8003f98:	00db      	lsls	r3, r3, #3
 8003f9a:	1a9b      	subs	r3, r3, r2
 8003f9c:	00db      	lsls	r3, r3, #3
 8003f9e:	4413      	add	r3, r2
 8003fa0:	4a15      	ldr	r2, [pc, #84]	; (8003ff8 <HAL_ADC_ConvCpltCallback+0x200>)
 8003fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa6:	0bdb      	lsrs	r3, r3, #15
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	4b10      	ldr	r3, [pc, #64]	; (8003fec <HAL_ADC_ConvCpltCallback+0x1f4>)
 8003fac:	809a      	strh	r2, [r3, #4]
		VT_IRQ_callback(&VT_data);
 8003fae:	4b13      	ldr	r3, [pc, #76]	; (8003ffc <HAL_ADC_ConvCpltCallback+0x204>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	480e      	ldr	r0, [pc, #56]	; (8003fec <HAL_ADC_ConvCpltCallback+0x1f4>)
 8003fb4:	4798      	blx	r3
	}
}
 8003fb6:	bf00      	nop
 8003fb8:	3708      	adds	r7, #8
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	200018e0 	.word	0x200018e0
 8003fc4:	2000187c 	.word	0x2000187c
 8003fc8:	20000534 	.word	0x20000534
 8003fcc:	20001808 	.word	0x20001808
 8003fd0:	20001854 	.word	0x20001854
 8003fd4:	20001848 	.word	0x20001848
 8003fd8:	80080081 	.word	0x80080081
 8003fdc:	51eb851f 	.word	0x51eb851f
 8003fe0:	2000185c 	.word	0x2000185c
 8003fe4:	20001858 	.word	0x20001858
 8003fe8:	2000194c 	.word	0x2000194c
 8003fec:	20001870 	.word	0x20001870
 8003ff0:	20001828 	.word	0x20001828
 8003ff4:	00100101 	.word	0x00100101
 8003ff8:	ccd99a67 	.word	0xccd99a67
 8003ffc:	2000186c 	.word	0x2000186c

08004000 <dq0>:

void dq0(float theta, float a, float b, float c, float *d, float *q){
 8004000:	b580      	push	{r7, lr}
 8004002:	b088      	sub	sp, #32
 8004004:	af00      	add	r7, sp, #0
 8004006:	ed87 0a05 	vstr	s0, [r7, #20]
 800400a:	edc7 0a04 	vstr	s1, [r7, #16]
 800400e:	ed87 1a03 	vstr	s2, [r7, #12]
 8004012:	edc7 1a02 	vstr	s3, [r7, #8]
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
    /// DQ0 Transform ///
    ///Phase current amplitude = lengh of dq vector///
    ///i.e. iq = 1, id = 0, peak phase current of 1///
	float cf;// = cosf(theta);
	float sf;// = sinf(theta);
	RunCordic(theta, &cf, &sf);
 800401a:	f107 0218 	add.w	r2, r7, #24
 800401e:	f107 031c 	add.w	r3, r7, #28
 8004022:	4611      	mov	r1, r2
 8004024:	4618      	mov	r0, r3
 8004026:	ed97 0a05 	vldr	s0, [r7, #20]
 800402a:	f7fe f861 	bl	80020f0 <RunCordic>

    *d = 0.6666667f*(cf*a + (0.86602540378f*sf-.5f*cf)*b + (-0.86602540378f*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 800402e:	ed97 7a07 	vldr	s14, [r7, #28]
 8004032:	edd7 7a04 	vldr	s15, [r7, #16]
 8004036:	ee27 7a27 	vmul.f32	s14, s14, s15
 800403a:	edd7 7a06 	vldr	s15, [r7, #24]
 800403e:	eddf 6a34 	vldr	s13, [pc, #208]	; 8004110 <dq0+0x110>
 8004042:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004046:	edd7 7a07 	vldr	s15, [r7, #28]
 800404a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800404e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004052:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004056:	edd7 7a03 	vldr	s15, [r7, #12]
 800405a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800405e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004062:	edd7 7a06 	vldr	s15, [r7, #24]
 8004066:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8004114 <dq0+0x114>
 800406a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800406e:	edd7 7a07 	vldr	s15, [r7, #28]
 8004072:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8004076:	ee67 7a86 	vmul.f32	s15, s15, s12
 800407a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800407e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004082:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004086:	ee77 7a27 	vadd.f32	s15, s14, s15
 800408a:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8004118 <dq0+0x118>
 800408e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	edc3 7a00 	vstr	s15, [r3]
    *q = 0.6666667f*(-sf*a - (-0.86602540378f*cf-.5f*sf)*b - (0.86602540378f*cf-.5f*sf)*c);
 8004098:	edd7 7a06 	vldr	s15, [r7, #24]
 800409c:	eeb1 7a67 	vneg.f32	s14, s15
 80040a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80040a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040a8:	edd7 7a07 	vldr	s15, [r7, #28]
 80040ac:	eddf 6a19 	vldr	s13, [pc, #100]	; 8004114 <dq0+0x114>
 80040b0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80040b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80040b8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80040bc:	ee67 7a86 	vmul.f32	s15, s15, s12
 80040c0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80040c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80040c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80040d0:	edd7 7a07 	vldr	s15, [r7, #28]
 80040d4:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8004110 <dq0+0x110>
 80040d8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80040dc:	edd7 7a06 	vldr	s15, [r7, #24]
 80040e0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80040e4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80040e8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80040ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80040f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040f8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8004118 <dq0+0x118>
 80040fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	edc3 7a00 	vstr	s15, [r3]
    }
 8004106:	bf00      	nop
 8004108:	3720      	adds	r7, #32
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	3f5db3d7 	.word	0x3f5db3d7
 8004114:	bf5db3d7 	.word	0xbf5db3d7
 8004118:	3f2aaaab 	.word	0x3f2aaaab

0800411c <FDCAN_Start>:
/*****************************************************************************/
/** Public API                                                              **/
/*****************************************************************************/

STATUS FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  /* Start the FDCAN bus */
  if (HAL_FDCAN_Start(hfdcan) != HAL_OK)
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f004 faf3 	bl	8008710 <HAL_FDCAN_Start>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d001      	beq.n	8004134 <FDCAN_Start+0x18>
  {
    return FDCAN_STATUS_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e00a      	b.n	800414a <FDCAN_Start+0x2e>
  }

  /* Activate the FIFO interrupt for respective fdcan controller */
  if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8004134:	2200      	movs	r2, #0
 8004136:	2101      	movs	r1, #1
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f004 fc2f 	bl	800899c <HAL_FDCAN_ActivateNotification>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d001      	beq.n	8004148 <FDCAN_Start+0x2c>
  {
    return FDCAN_STATUS_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e000      	b.n	800414a <FDCAN_Start+0x2e>
  }

  return FDCAN_STATUS_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3708      	adds	r7, #8
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
	...

08004154 <FDCAN_addCallback>:

STATUS FDCAN_addCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t identifier, FDCANCallback *processData)
{
 8004154:	b480      	push	{r7}
 8004156:	b089      	sub	sp, #36	; 0x24
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
  /* Check if we have space to add a new Callback */
  if (FDCAN_listCallbacksCount >= FDCAN_MAX_CALLBACKS) {
 8004160:	4b18      	ldr	r3, [pc, #96]	; (80041c4 <FDCAN_addCallback+0x70>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2b09      	cmp	r3, #9
 8004166:	d901      	bls.n	800416c <FDCAN_addCallback+0x18>
      return FDCAN_STATUS_MAX_LIMIT_REACHED;
 8004168:	2303      	movs	r3, #3
 800416a:	e025      	b.n	80041b8 <FDCAN_addCallback+0x64>
  }

  /* Check if identifier already exists */
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 800416c:	2300      	movs	r3, #0
 800416e:	61fb      	str	r3, [r7, #28]
 8004170:	e00c      	b.n	800418c <FDCAN_addCallback+0x38>
      if (FDCAN_listCallbacks[i].identifier == identifier) {
 8004172:	4a15      	ldr	r2, [pc, #84]	; (80041c8 <FDCAN_addCallback+0x74>)
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	00db      	lsls	r3, r3, #3
 8004178:	4413      	add	r3, r2
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	68ba      	ldr	r2, [r7, #8]
 800417e:	429a      	cmp	r2, r3
 8004180:	d101      	bne.n	8004186 <FDCAN_addCallback+0x32>
          return FDCAN_STATUS_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e018      	b.n	80041b8 <FDCAN_addCallback+0x64>
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	3301      	adds	r3, #1
 800418a:	61fb      	str	r3, [r7, #28]
 800418c:	4b0d      	ldr	r3, [pc, #52]	; (80041c4 <FDCAN_addCallback+0x70>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	69fa      	ldr	r2, [r7, #28]
 8004192:	429a      	cmp	r2, r3
 8004194:	d3ed      	bcc.n	8004172 <FDCAN_addCallback+0x1e>
      }
  }

  /* Add the callback to the list and update the count */
  FDCAN_listCallbacks[FDCAN_listCallbacksCount] = (FDCANCallback_internal_t) {
 8004196:	4b0b      	ldr	r3, [pc, #44]	; (80041c4 <FDCAN_addCallback+0x70>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	490a      	ldr	r1, [pc, #40]	; (80041c8 <FDCAN_addCallback+0x74>)
 800419e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80041a2:	4a09      	ldr	r2, [pc, #36]	; (80041c8 <FDCAN_addCallback+0x74>)
 80041a4:	00db      	lsls	r3, r3, #3
 80041a6:	4413      	add	r3, r2
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	605a      	str	r2, [r3, #4]
      .fp = processData,
      .identifier = identifier
  };
  FDCAN_listCallbacksCount++;
 80041ac:	4b05      	ldr	r3, [pc, #20]	; (80041c4 <FDCAN_addCallback+0x70>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	3301      	adds	r3, #1
 80041b2:	4a04      	ldr	r2, [pc, #16]	; (80041c4 <FDCAN_addCallback+0x70>)
 80041b4:	6013      	str	r3, [r2, #0]

  return FDCAN_STATUS_OK;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3724      	adds	r7, #36	; 0x24
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr
 80041c4:	200018dc 	.word	0x200018dc
 80041c8:	2000188c 	.word	0x2000188c

080041cc <FDCAN_sendData>:

STATUS FDCAN_sendData(FDCAN_HandleTypeDef *hfdcan, uint32_t identifier, uint8_t TxData[64])
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b08e      	sub	sp, #56	; 0x38
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
  FDCAN_TxHeaderTypeDef TxHeader;

  /* Set the identifier to send */
  TxHeader.Identifier = identifier;
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	617b      	str	r3, [r7, #20]

  /* Set the data length to send */
  TxHeader.DataLength = FDCAN_DLC_BYTES_64;
 80041dc:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 80041e0:	623b      	str	r3, [r7, #32]

  /* Set the identifier type to send */
  TxHeader.IdType = FDCAN_STANDARD_ID;
 80041e2:	2300      	movs	r3, #0
 80041e4:	61bb      	str	r3, [r7, #24]

  /* Set the frame type to send */
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80041e6:	2300      	movs	r3, #0
 80041e8:	61fb      	str	r3, [r7, #28]

  /* Set the error state indicator to send */
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80041ea:	2300      	movs	r3, #0
 80041ec:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the bit rate switch to send */
  TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 80041ee:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80041f2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set the FD format to send */
  TxHeader.FDFormat = FDCAN_FD_CAN;
 80041f4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80041f8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set the Tx event FIFO control to send */
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80041fa:	2300      	movs	r3, #0
 80041fc:	633b      	str	r3, [r7, #48]	; 0x30

  /* Set the message marker to send */
  TxHeader.MessageMarker = 0;
 80041fe:	2300      	movs	r3, #0
 8004200:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set the message to send */
  if (HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &TxHeader, TxData) != HAL_OK)
 8004202:	f107 0314 	add.w	r3, r7, #20
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	4619      	mov	r1, r3
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f004 faa8 	bl	8008760 <HAL_FDCAN_AddMessageToTxFifoQ>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d001      	beq.n	800421a <FDCAN_sendData+0x4e>
  {
    return FDCAN_STATUS_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e000      	b.n	800421c <FDCAN_sendData+0x50>
  }

  return FDCAN_STATUS_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3738      	adds	r7, #56	; 0x38
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <HAL_FDCAN_RxFifo0Callback>:
/** Local function definitions                                              **/
/*****************************************************************************/

/* This function overwrites _weak function definition in STM32 HAL FDCAN driver when linking project*/
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b09e      	sub	sp, #120	; 0x78
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  FDCAN_RxHeaderTypeDef RxHeader;
  uint8_t RxData[64];

  /* Fetch the CAN message from the FIFO buffer*/
  if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 800422e:	f107 030c 	add.w	r3, r7, #12
 8004232:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8004236:	2140      	movs	r1, #64	; 0x40
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f004 fad5 	bl	80087e8 <HAL_FDCAN_GetRxMessage>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d001      	beq.n	8004248 <HAL_FDCAN_RxFifo0Callback+0x24>
  {
    Error_Handler();
 8004244:	f000 fe6c 	bl	8004f20 <Error_Handler>
  }

  /* check if we have a callback for the identifier */
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 8004248:	2300      	movs	r3, #0
 800424a:	677b      	str	r3, [r7, #116]	; 0x74
 800424c:	e012      	b.n	8004274 <HAL_FDCAN_RxFifo0Callback+0x50>
      if (FDCAN_listCallbacks[i].identifier == RxHeader.Identifier) {
 800424e:	4a0e      	ldr	r2, [pc, #56]	; (8004288 <HAL_FDCAN_RxFifo0Callback+0x64>)
 8004250:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	4413      	add	r3, r2
 8004256:	685a      	ldr	r2, [r3, #4]
 8004258:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800425a:	429a      	cmp	r2, r3
 800425c:	d107      	bne.n	800426e <HAL_FDCAN_RxFifo0Callback+0x4a>
          FDCAN_listCallbacks[i].fp(RxData);
 800425e:	4a0a      	ldr	r2, [pc, #40]	; (8004288 <HAL_FDCAN_RxFifo0Callback+0x64>)
 8004260:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004262:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004266:	f107 020c 	add.w	r2, r7, #12
 800426a:	4610      	mov	r0, r2
 800426c:	4798      	blx	r3
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 800426e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004270:	3301      	adds	r3, #1
 8004272:	677b      	str	r3, [r7, #116]	; 0x74
 8004274:	4b05      	ldr	r3, [pc, #20]	; (800428c <HAL_FDCAN_RxFifo0Callback+0x68>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800427a:	429a      	cmp	r2, r3
 800427c:	d3e7      	bcc.n	800424e <HAL_FDCAN_RxFifo0Callback+0x2a>
      }
  }
}
 800427e:	bf00      	nop
 8004280:	bf00      	nop
 8004282:	3778      	adds	r7, #120	; 0x78
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	2000188c 	.word	0x2000188c
 800428c:	200018dc 	.word	0x200018dc

08004290 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b08c      	sub	sp, #48	; 0x30
 8004294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8004296:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800429a:	2200      	movs	r2, #0
 800429c:	601a      	str	r2, [r3, #0]
 800429e:	605a      	str	r2, [r3, #4]
 80042a0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80042a2:	1d3b      	adds	r3, r7, #4
 80042a4:	2220      	movs	r2, #32
 80042a6:	2100      	movs	r1, #0
 80042a8:	4618      	mov	r0, r3
 80042aa:	f00b f811 	bl	800f2d0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80042ae:	4b4d      	ldr	r3, [pc, #308]	; (80043e4 <MX_ADC1_Init+0x154>)
 80042b0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80042b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80042b6:	4b4b      	ldr	r3, [pc, #300]	; (80043e4 <MX_ADC1_Init+0x154>)
 80042b8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80042bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80042be:	4b49      	ldr	r3, [pc, #292]	; (80043e4 <MX_ADC1_Init+0x154>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80042c4:	4b47      	ldr	r3, [pc, #284]	; (80043e4 <MX_ADC1_Init+0x154>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80042ca:	4b46      	ldr	r3, [pc, #280]	; (80043e4 <MX_ADC1_Init+0x154>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80042d0:	4b44      	ldr	r3, [pc, #272]	; (80043e4 <MX_ADC1_Init+0x154>)
 80042d2:	2201      	movs	r2, #1
 80042d4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80042d6:	4b43      	ldr	r3, [pc, #268]	; (80043e4 <MX_ADC1_Init+0x154>)
 80042d8:	2208      	movs	r2, #8
 80042da:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80042dc:	4b41      	ldr	r3, [pc, #260]	; (80043e4 <MX_ADC1_Init+0x154>)
 80042de:	2200      	movs	r2, #0
 80042e0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80042e2:	4b40      	ldr	r3, [pc, #256]	; (80043e4 <MX_ADC1_Init+0x154>)
 80042e4:	2201      	movs	r2, #1
 80042e6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 80042e8:	4b3e      	ldr	r3, [pc, #248]	; (80043e4 <MX_ADC1_Init+0x154>)
 80042ea:	2204      	movs	r2, #4
 80042ec:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80042ee:	4b3d      	ldr	r3, [pc, #244]	; (80043e4 <MX_ADC1_Init+0x154>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80042f6:	4b3b      	ldr	r3, [pc, #236]	; (80043e4 <MX_ADC1_Init+0x154>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80042fc:	4b39      	ldr	r3, [pc, #228]	; (80043e4 <MX_ADC1_Init+0x154>)
 80042fe:	2200      	movs	r2, #0
 8004300:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004302:	4b38      	ldr	r3, [pc, #224]	; (80043e4 <MX_ADC1_Init+0x154>)
 8004304:	2201      	movs	r2, #1
 8004306:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800430a:	4b36      	ldr	r3, [pc, #216]	; (80043e4 <MX_ADC1_Init+0x154>)
 800430c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004310:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 8004312:	4b34      	ldr	r3, [pc, #208]	; (80043e4 <MX_ADC1_Init+0x154>)
 8004314:	2201      	movs	r2, #1
 8004316:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 800431a:	4b32      	ldr	r3, [pc, #200]	; (80043e4 <MX_ADC1_Init+0x154>)
 800431c:	220c      	movs	r2, #12
 800431e:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 8004320:	4b30      	ldr	r3, [pc, #192]	; (80043e4 <MX_ADC1_Init+0x154>)
 8004322:	2200      	movs	r2, #0
 8004324:	649a      	str	r2, [r3, #72]	; 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8004326:	4b2f      	ldr	r3, [pc, #188]	; (80043e4 <MX_ADC1_Init+0x154>)
 8004328:	2200      	movs	r2, #0
 800432a:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800432c:	4b2d      	ldr	r3, [pc, #180]	; (80043e4 <MX_ADC1_Init+0x154>)
 800432e:	2201      	movs	r2, #1
 8004330:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004332:	482c      	ldr	r0, [pc, #176]	; (80043e4 <MX_ADC1_Init+0x154>)
 8004334:	f001 ff8c 	bl	8006250 <HAL_ADC_Init>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800433e:	f000 fdef 	bl	8004f20 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8004342:	2300      	movs	r3, #0
 8004344:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800434a:	4619      	mov	r1, r3
 800434c:	4825      	ldr	r0, [pc, #148]	; (80043e4 <MX_ADC1_Init+0x154>)
 800434e:	f003 f929 	bl	80075a4 <HAL_ADCEx_MultiModeConfigChannel>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d001      	beq.n	800435c <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8004358:	f000 fde2 	bl	8004f20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800435c:	4b22      	ldr	r3, [pc, #136]	; (80043e8 <MX_ADC1_Init+0x158>)
 800435e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004360:	2306      	movs	r3, #6
 8004362:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8004364:	2303      	movs	r3, #3
 8004366:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004368:	237f      	movs	r3, #127	; 0x7f
 800436a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800436c:	2304      	movs	r3, #4
 800436e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8004370:	2300      	movs	r3, #0
 8004372:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004374:	1d3b      	adds	r3, r7, #4
 8004376:	4619      	mov	r1, r3
 8004378:	481a      	ldr	r0, [pc, #104]	; (80043e4 <MX_ADC1_Init+0x154>)
 800437a:	f002 fbd5 	bl	8006b28 <HAL_ADC_ConfigChannel>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d001      	beq.n	8004388 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8004384:	f000 fdcc 	bl	8004f20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8004388:	4b18      	ldr	r3, [pc, #96]	; (80043ec <MX_ADC1_Init+0x15c>)
 800438a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800438c:	230c      	movs	r3, #12
 800438e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004390:	1d3b      	adds	r3, r7, #4
 8004392:	4619      	mov	r1, r3
 8004394:	4813      	ldr	r0, [pc, #76]	; (80043e4 <MX_ADC1_Init+0x154>)
 8004396:	f002 fbc7 	bl	8006b28 <HAL_ADC_ConfigChannel>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d001      	beq.n	80043a4 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 80043a0:	f000 fdbe 	bl	8004f20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80043a4:	4b12      	ldr	r3, [pc, #72]	; (80043f0 <MX_ADC1_Init+0x160>)
 80043a6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80043a8:	2312      	movs	r3, #18
 80043aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80043ac:	1d3b      	adds	r3, r7, #4
 80043ae:	4619      	mov	r1, r3
 80043b0:	480c      	ldr	r0, [pc, #48]	; (80043e4 <MX_ADC1_Init+0x154>)
 80043b2:	f002 fbb9 	bl	8006b28 <HAL_ADC_ConfigChannel>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d001      	beq.n	80043c0 <MX_ADC1_Init+0x130>
  {
    Error_Handler();
 80043bc:	f000 fdb0 	bl	8004f20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80043c0:	4b0c      	ldr	r3, [pc, #48]	; (80043f4 <MX_ADC1_Init+0x164>)
 80043c2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80043c4:	2318      	movs	r3, #24
 80043c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80043c8:	1d3b      	adds	r3, r7, #4
 80043ca:	4619      	mov	r1, r3
 80043cc:	4805      	ldr	r0, [pc, #20]	; (80043e4 <MX_ADC1_Init+0x154>)
 80043ce:	f002 fbab 	bl	8006b28 <HAL_ADC_ConfigChannel>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d001      	beq.n	80043dc <MX_ADC1_Init+0x14c>
  {
    Error_Handler();
 80043d8:	f000 fda2 	bl	8004f20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80043dc:	bf00      	nop
 80043de:	3730      	adds	r7, #48	; 0x30
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	200018e0 	.word	0x200018e0
 80043e8:	04300002 	.word	0x04300002
 80043ec:	08600004 	.word	0x08600004
 80043f0:	0c900008 	.word	0x0c900008
 80043f4:	cb840000 	.word	0xcb840000

080043f8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b088      	sub	sp, #32
 80043fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80043fe:	463b      	mov	r3, r7
 8004400:	2220      	movs	r2, #32
 8004402:	2100      	movs	r1, #0
 8004404:	4618      	mov	r0, r3
 8004406:	f00a ff63 	bl	800f2d0 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800440a:	4b47      	ldr	r3, [pc, #284]	; (8004528 <MX_ADC2_Init+0x130>)
 800440c:	4a47      	ldr	r2, [pc, #284]	; (800452c <MX_ADC2_Init+0x134>)
 800440e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004410:	4b45      	ldr	r3, [pc, #276]	; (8004528 <MX_ADC2_Init+0x130>)
 8004412:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004416:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004418:	4b43      	ldr	r3, [pc, #268]	; (8004528 <MX_ADC2_Init+0x130>)
 800441a:	2200      	movs	r2, #0
 800441c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800441e:	4b42      	ldr	r3, [pc, #264]	; (8004528 <MX_ADC2_Init+0x130>)
 8004420:	2200      	movs	r2, #0
 8004422:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8004424:	4b40      	ldr	r3, [pc, #256]	; (8004528 <MX_ADC2_Init+0x130>)
 8004426:	2200      	movs	r2, #0
 8004428:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800442a:	4b3f      	ldr	r3, [pc, #252]	; (8004528 <MX_ADC2_Init+0x130>)
 800442c:	2201      	movs	r2, #1
 800442e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004430:	4b3d      	ldr	r3, [pc, #244]	; (8004528 <MX_ADC2_Init+0x130>)
 8004432:	2204      	movs	r2, #4
 8004434:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8004436:	4b3c      	ldr	r3, [pc, #240]	; (8004528 <MX_ADC2_Init+0x130>)
 8004438:	2200      	movs	r2, #0
 800443a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800443c:	4b3a      	ldr	r3, [pc, #232]	; (8004528 <MX_ADC2_Init+0x130>)
 800443e:	2201      	movs	r2, #1
 8004440:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 4;
 8004442:	4b39      	ldr	r3, [pc, #228]	; (8004528 <MX_ADC2_Init+0x130>)
 8004444:	2204      	movs	r2, #4
 8004446:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004448:	4b37      	ldr	r3, [pc, #220]	; (8004528 <MX_ADC2_Init+0x130>)
 800444a:	2200      	movs	r2, #0
 800444c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004450:	4b35      	ldr	r3, [pc, #212]	; (8004528 <MX_ADC2_Init+0x130>)
 8004452:	2200      	movs	r2, #0
 8004454:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004456:	4b34      	ldr	r3, [pc, #208]	; (8004528 <MX_ADC2_Init+0x130>)
 8004458:	2200      	movs	r2, #0
 800445a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800445c:	4b32      	ldr	r3, [pc, #200]	; (8004528 <MX_ADC2_Init+0x130>)
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8004464:	4b30      	ldr	r3, [pc, #192]	; (8004528 <MX_ADC2_Init+0x130>)
 8004466:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800446a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = ENABLE;
 800446c:	4b2e      	ldr	r3, [pc, #184]	; (8004528 <MX_ADC2_Init+0x130>)
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc2.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8004474:	4b2c      	ldr	r3, [pc, #176]	; (8004528 <MX_ADC2_Init+0x130>)
 8004476:	220c      	movs	r2, #12
 8004478:	645a      	str	r2, [r3, #68]	; 0x44
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 800447a:	4b2b      	ldr	r3, [pc, #172]	; (8004528 <MX_ADC2_Init+0x130>)
 800447c:	2200      	movs	r2, #0
 800447e:	649a      	str	r2, [r3, #72]	; 0x48
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8004480:	4b29      	ldr	r3, [pc, #164]	; (8004528 <MX_ADC2_Init+0x130>)
 8004482:	2200      	movs	r2, #0
 8004484:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8004486:	4b28      	ldr	r3, [pc, #160]	; (8004528 <MX_ADC2_Init+0x130>)
 8004488:	2201      	movs	r2, #1
 800448a:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800448c:	4826      	ldr	r0, [pc, #152]	; (8004528 <MX_ADC2_Init+0x130>)
 800448e:	f001 fedf 	bl	8006250 <HAL_ADC_Init>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d001      	beq.n	800449c <MX_ADC2_Init+0xa4>
  {
    Error_Handler();
 8004498:	f000 fd42 	bl	8004f20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800449c:	4b24      	ldr	r3, [pc, #144]	; (8004530 <MX_ADC2_Init+0x138>)
 800449e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80044a0:	2306      	movs	r3, #6
 80044a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80044a4:	2307      	movs	r3, #7
 80044a6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80044a8:	237f      	movs	r3, #127	; 0x7f
 80044aa:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80044ac:	2304      	movs	r3, #4
 80044ae:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80044b0:	2300      	movs	r3, #0
 80044b2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80044b4:	463b      	mov	r3, r7
 80044b6:	4619      	mov	r1, r3
 80044b8:	481b      	ldr	r0, [pc, #108]	; (8004528 <MX_ADC2_Init+0x130>)
 80044ba:	f002 fb35 	bl	8006b28 <HAL_ADC_ConfigChannel>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d001      	beq.n	80044c8 <MX_ADC2_Init+0xd0>
  {
    Error_Handler();
 80044c4:	f000 fd2c 	bl	8004f20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80044c8:	4b1a      	ldr	r3, [pc, #104]	; (8004534 <MX_ADC2_Init+0x13c>)
 80044ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80044cc:	230c      	movs	r3, #12
 80044ce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80044d0:	2300      	movs	r3, #0
 80044d2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80044d4:	463b      	mov	r3, r7
 80044d6:	4619      	mov	r1, r3
 80044d8:	4813      	ldr	r0, [pc, #76]	; (8004528 <MX_ADC2_Init+0x130>)
 80044da:	f002 fb25 	bl	8006b28 <HAL_ADC_ConfigChannel>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <MX_ADC2_Init+0xf0>
  {
    Error_Handler();
 80044e4:	f000 fd1c 	bl	8004f20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80044e8:	4b13      	ldr	r3, [pc, #76]	; (8004538 <MX_ADC2_Init+0x140>)
 80044ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80044ec:	2312      	movs	r3, #18
 80044ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80044f0:	463b      	mov	r3, r7
 80044f2:	4619      	mov	r1, r3
 80044f4:	480c      	ldr	r0, [pc, #48]	; (8004528 <MX_ADC2_Init+0x130>)
 80044f6:	f002 fb17 	bl	8006b28 <HAL_ADC_ConfigChannel>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d001      	beq.n	8004504 <MX_ADC2_Init+0x10c>
  {
    Error_Handler();
 8004500:	f000 fd0e 	bl	8004f20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8004504:	4b0d      	ldr	r3, [pc, #52]	; (800453c <MX_ADC2_Init+0x144>)
 8004506:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8004508:	2318      	movs	r3, #24
 800450a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800450c:	463b      	mov	r3, r7
 800450e:	4619      	mov	r1, r3
 8004510:	4805      	ldr	r0, [pc, #20]	; (8004528 <MX_ADC2_Init+0x130>)
 8004512:	f002 fb09 	bl	8006b28 <HAL_ADC_ConfigChannel>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <MX_ADC2_Init+0x128>
  {
    Error_Handler();
 800451c:	f000 fd00 	bl	8004f20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8004520:	bf00      	nop
 8004522:	3720      	adds	r7, #32
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	2000194c 	.word	0x2000194c
 800452c:	50000100 	.word	0x50000100
 8004530:	32601000 	.word	0x32601000
 8004534:	3ac04000 	.word	0x3ac04000
 8004538:	36902000 	.word	0x36902000
 800453c:	0c900008 	.word	0x0c900008

08004540 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b09e      	sub	sp, #120	; 0x78
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004548:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800454c:	2200      	movs	r2, #0
 800454e:	601a      	str	r2, [r3, #0]
 8004550:	605a      	str	r2, [r3, #4]
 8004552:	609a      	str	r2, [r3, #8]
 8004554:	60da      	str	r2, [r3, #12]
 8004556:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004558:	f107 0320 	add.w	r3, r7, #32
 800455c:	2244      	movs	r2, #68	; 0x44
 800455e:	2100      	movs	r1, #0
 8004560:	4618      	mov	r0, r3
 8004562:	f00a feb5 	bl	800f2d0 <memset>
  if(adcHandle->Instance==ADC1)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800456e:	d171      	bne.n	8004654 <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004570:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004574:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004576:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800457a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800457c:	f107 0320 	add.w	r3, r7, #32
 8004580:	4618      	mov	r0, r3
 8004582:	f006 f83b 	bl	800a5fc <HAL_RCCEx_PeriphCLKConfig>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d001      	beq.n	8004590 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800458c:	f000 fcc8 	bl	8004f20 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004590:	4b7a      	ldr	r3, [pc, #488]	; (800477c <HAL_ADC_MspInit+0x23c>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	3301      	adds	r3, #1
 8004596:	4a79      	ldr	r2, [pc, #484]	; (800477c <HAL_ADC_MspInit+0x23c>)
 8004598:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800459a:	4b78      	ldr	r3, [pc, #480]	; (800477c <HAL_ADC_MspInit+0x23c>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d10b      	bne.n	80045ba <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80045a2:	4b77      	ldr	r3, [pc, #476]	; (8004780 <HAL_ADC_MspInit+0x240>)
 80045a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045a6:	4a76      	ldr	r2, [pc, #472]	; (8004780 <HAL_ADC_MspInit+0x240>)
 80045a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80045ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80045ae:	4b74      	ldr	r3, [pc, #464]	; (8004780 <HAL_ADC_MspInit+0x240>)
 80045b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045b6:	61fb      	str	r3, [r7, #28]
 80045b8:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045ba:	4b71      	ldr	r3, [pc, #452]	; (8004780 <HAL_ADC_MspInit+0x240>)
 80045bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045be:	4a70      	ldr	r2, [pc, #448]	; (8004780 <HAL_ADC_MspInit+0x240>)
 80045c0:	f043 0301 	orr.w	r3, r3, #1
 80045c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80045c6:	4b6e      	ldr	r3, [pc, #440]	; (8004780 <HAL_ADC_MspInit+0x240>)
 80045c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	61bb      	str	r3, [r7, #24]
 80045d0:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = CURRENT_ADC_3_Pin|CURRENT_ADC_2_Pin|CURRENT_ADC_1_Pin;
 80045d2:	2307      	movs	r3, #7
 80045d4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80045d6:	2303      	movs	r3, #3
 80045d8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045da:	2300      	movs	r3, #0
 80045dc:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045de:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80045e2:	4619      	mov	r1, r3
 80045e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80045e8:	f005 f844 	bl	8009674 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80045ec:	4b65      	ldr	r3, [pc, #404]	; (8004784 <HAL_ADC_MspInit+0x244>)
 80045ee:	4a66      	ldr	r2, [pc, #408]	; (8004788 <HAL_ADC_MspInit+0x248>)
 80045f0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80045f2:	4b64      	ldr	r3, [pc, #400]	; (8004784 <HAL_ADC_MspInit+0x244>)
 80045f4:	2205      	movs	r2, #5
 80045f6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80045f8:	4b62      	ldr	r3, [pc, #392]	; (8004784 <HAL_ADC_MspInit+0x244>)
 80045fa:	2200      	movs	r2, #0
 80045fc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80045fe:	4b61      	ldr	r3, [pc, #388]	; (8004784 <HAL_ADC_MspInit+0x244>)
 8004600:	2200      	movs	r2, #0
 8004602:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004604:	4b5f      	ldr	r3, [pc, #380]	; (8004784 <HAL_ADC_MspInit+0x244>)
 8004606:	2280      	movs	r2, #128	; 0x80
 8004608:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800460a:	4b5e      	ldr	r3, [pc, #376]	; (8004784 <HAL_ADC_MspInit+0x244>)
 800460c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004610:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004612:	4b5c      	ldr	r3, [pc, #368]	; (8004784 <HAL_ADC_MspInit+0x244>)
 8004614:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004618:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800461a:	4b5a      	ldr	r3, [pc, #360]	; (8004784 <HAL_ADC_MspInit+0x244>)
 800461c:	2220      	movs	r2, #32
 800461e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004620:	4b58      	ldr	r3, [pc, #352]	; (8004784 <HAL_ADC_MspInit+0x244>)
 8004622:	2200      	movs	r2, #0
 8004624:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004626:	4857      	ldr	r0, [pc, #348]	; (8004784 <HAL_ADC_MspInit+0x244>)
 8004628:	f003 fbe6 	bl	8007df8 <HAL_DMA_Init>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d001      	beq.n	8004636 <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 8004632:	f000 fc75 	bl	8004f20 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a52      	ldr	r2, [pc, #328]	; (8004784 <HAL_ADC_MspInit+0x244>)
 800463a:	655a      	str	r2, [r3, #84]	; 0x54
 800463c:	4a51      	ldr	r2, [pc, #324]	; (8004784 <HAL_ADC_MspInit+0x244>)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8004642:	2200      	movs	r2, #0
 8004644:	2100      	movs	r1, #0
 8004646:	2012      	movs	r0, #18
 8004648:	f003 f95d 	bl	8007906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800464c:	2012      	movs	r0, #18
 800464e:	f003 f974 	bl	800793a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8004652:	e08f      	b.n	8004774 <HAL_ADC_MspInit+0x234>
  else if(adcHandle->Instance==ADC2)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a4c      	ldr	r2, [pc, #304]	; (800478c <HAL_ADC_MspInit+0x24c>)
 800465a:	4293      	cmp	r3, r2
 800465c:	f040 808a 	bne.w	8004774 <HAL_ADC_MspInit+0x234>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004660:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004664:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004666:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800466a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800466c:	f107 0320 	add.w	r3, r7, #32
 8004670:	4618      	mov	r0, r3
 8004672:	f005 ffc3 	bl	800a5fc <HAL_RCCEx_PeriphCLKConfig>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d001      	beq.n	8004680 <HAL_ADC_MspInit+0x140>
      Error_Handler();
 800467c:	f000 fc50 	bl	8004f20 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004680:	4b3e      	ldr	r3, [pc, #248]	; (800477c <HAL_ADC_MspInit+0x23c>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	3301      	adds	r3, #1
 8004686:	4a3d      	ldr	r2, [pc, #244]	; (800477c <HAL_ADC_MspInit+0x23c>)
 8004688:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800468a:	4b3c      	ldr	r3, [pc, #240]	; (800477c <HAL_ADC_MspInit+0x23c>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d10b      	bne.n	80046aa <HAL_ADC_MspInit+0x16a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004692:	4b3b      	ldr	r3, [pc, #236]	; (8004780 <HAL_ADC_MspInit+0x240>)
 8004694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004696:	4a3a      	ldr	r2, [pc, #232]	; (8004780 <HAL_ADC_MspInit+0x240>)
 8004698:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800469c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800469e:	4b38      	ldr	r3, [pc, #224]	; (8004780 <HAL_ADC_MspInit+0x240>)
 80046a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046a6:	617b      	str	r3, [r7, #20]
 80046a8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046aa:	4b35      	ldr	r3, [pc, #212]	; (8004780 <HAL_ADC_MspInit+0x240>)
 80046ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ae:	4a34      	ldr	r2, [pc, #208]	; (8004780 <HAL_ADC_MspInit+0x240>)
 80046b0:	f043 0301 	orr.w	r3, r3, #1
 80046b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046b6:	4b32      	ldr	r3, [pc, #200]	; (8004780 <HAL_ADC_MspInit+0x240>)
 80046b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	613b      	str	r3, [r7, #16]
 80046c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046c2:	4b2f      	ldr	r3, [pc, #188]	; (8004780 <HAL_ADC_MspInit+0x240>)
 80046c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046c6:	4a2e      	ldr	r2, [pc, #184]	; (8004780 <HAL_ADC_MspInit+0x240>)
 80046c8:	f043 0302 	orr.w	r3, r3, #2
 80046cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046ce:	4b2c      	ldr	r3, [pc, #176]	; (8004780 <HAL_ADC_MspInit+0x240>)
 80046d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	60fb      	str	r3, [r7, #12]
 80046d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = V_BAT_ADC_Pin|V_AUX_ADC_Pin;
 80046da:	2360      	movs	r3, #96	; 0x60
 80046dc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80046de:	2303      	movs	r3, #3
 80046e0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046e2:	2300      	movs	r3, #0
 80046e4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046e6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80046ea:	4619      	mov	r1, r3
 80046ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80046f0:	f004 ffc0 	bl	8009674 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC2_NTC1_Pin|ADC2_NTC2_Pin;
 80046f4:	f640 0304 	movw	r3, #2052	; 0x804
 80046f8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80046fa:	2303      	movs	r3, #3
 80046fc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046fe:	2300      	movs	r3, #0
 8004700:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004702:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004706:	4619      	mov	r1, r3
 8004708:	4821      	ldr	r0, [pc, #132]	; (8004790 <HAL_ADC_MspInit+0x250>)
 800470a:	f004 ffb3 	bl	8009674 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 800470e:	4b21      	ldr	r3, [pc, #132]	; (8004794 <HAL_ADC_MspInit+0x254>)
 8004710:	4a21      	ldr	r2, [pc, #132]	; (8004798 <HAL_ADC_MspInit+0x258>)
 8004712:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8004714:	4b1f      	ldr	r3, [pc, #124]	; (8004794 <HAL_ADC_MspInit+0x254>)
 8004716:	2224      	movs	r2, #36	; 0x24
 8004718:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800471a:	4b1e      	ldr	r3, [pc, #120]	; (8004794 <HAL_ADC_MspInit+0x254>)
 800471c:	2200      	movs	r2, #0
 800471e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004720:	4b1c      	ldr	r3, [pc, #112]	; (8004794 <HAL_ADC_MspInit+0x254>)
 8004722:	2200      	movs	r2, #0
 8004724:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004726:	4b1b      	ldr	r3, [pc, #108]	; (8004794 <HAL_ADC_MspInit+0x254>)
 8004728:	2280      	movs	r2, #128	; 0x80
 800472a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800472c:	4b19      	ldr	r3, [pc, #100]	; (8004794 <HAL_ADC_MspInit+0x254>)
 800472e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004732:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004734:	4b17      	ldr	r3, [pc, #92]	; (8004794 <HAL_ADC_MspInit+0x254>)
 8004736:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800473a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800473c:	4b15      	ldr	r3, [pc, #84]	; (8004794 <HAL_ADC_MspInit+0x254>)
 800473e:	2220      	movs	r2, #32
 8004740:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8004742:	4b14      	ldr	r3, [pc, #80]	; (8004794 <HAL_ADC_MspInit+0x254>)
 8004744:	2200      	movs	r2, #0
 8004746:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004748:	4812      	ldr	r0, [pc, #72]	; (8004794 <HAL_ADC_MspInit+0x254>)
 800474a:	f003 fb55 	bl	8007df8 <HAL_DMA_Init>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d001      	beq.n	8004758 <HAL_ADC_MspInit+0x218>
      Error_Handler();
 8004754:	f000 fbe4 	bl	8004f20 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a0e      	ldr	r2, [pc, #56]	; (8004794 <HAL_ADC_MspInit+0x254>)
 800475c:	655a      	str	r2, [r3, #84]	; 0x54
 800475e:	4a0d      	ldr	r2, [pc, #52]	; (8004794 <HAL_ADC_MspInit+0x254>)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8004764:	2200      	movs	r2, #0
 8004766:	2100      	movs	r1, #0
 8004768:	2012      	movs	r0, #18
 800476a:	f003 f8cc 	bl	8007906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800476e:	2012      	movs	r0, #18
 8004770:	f003 f8e3 	bl	800793a <HAL_NVIC_EnableIRQ>
}
 8004774:	bf00      	nop
 8004776:	3778      	adds	r7, #120	; 0x78
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	20001a78 	.word	0x20001a78
 8004780:	40021000 	.word	0x40021000
 8004784:	200019b8 	.word	0x200019b8
 8004788:	40020008 	.word	0x40020008
 800478c:	50000100 	.word	0x50000100
 8004790:	48000400 	.word	0x48000400
 8004794:	20001a18 	.word	0x20001a18
 8004798:	4002001c 	.word	0x4002001c

0800479c <MX_CORDIC_Init>:

CORDIC_HandleTypeDef hcordic;

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 80047a0:	4b06      	ldr	r3, [pc, #24]	; (80047bc <MX_CORDIC_Init+0x20>)
 80047a2:	4a07      	ldr	r2, [pc, #28]	; (80047c0 <MX_CORDIC_Init+0x24>)
 80047a4:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 80047a6:	4805      	ldr	r0, [pc, #20]	; (80047bc <MX_CORDIC_Init+0x20>)
 80047a8:	f002 ffa0 	bl	80076ec <HAL_CORDIC_Init>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d001      	beq.n	80047b6 <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 80047b2:	f000 fbb5 	bl	8004f20 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 80047b6:	bf00      	nop
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	20001a7c 	.word	0x20001a7c
 80047c0:	40020c00 	.word	0x40020c00

080047c4 <HAL_CORDIC_MspInit>:

void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* cordicHandle)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]

  if(cordicHandle->Instance==CORDIC)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a0a      	ldr	r2, [pc, #40]	; (80047fc <HAL_CORDIC_MspInit+0x38>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d10b      	bne.n	80047ee <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* CORDIC clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80047d6:	4b0a      	ldr	r3, [pc, #40]	; (8004800 <HAL_CORDIC_MspInit+0x3c>)
 80047d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047da:	4a09      	ldr	r2, [pc, #36]	; (8004800 <HAL_CORDIC_MspInit+0x3c>)
 80047dc:	f043 0308 	orr.w	r3, r3, #8
 80047e0:	6493      	str	r3, [r2, #72]	; 0x48
 80047e2:	4b07      	ldr	r3, [pc, #28]	; (8004800 <HAL_CORDIC_MspInit+0x3c>)
 80047e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047e6:	f003 0308 	and.w	r3, r3, #8
 80047ea:	60fb      	str	r3, [r7, #12]
 80047ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }
}
 80047ee:	bf00      	nop
 80047f0:	3714      	adds	r7, #20
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	40020c00 	.word	0x40020c00
 8004800:	40021000 	.word	0x40021000

08004804 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b08c      	sub	sp, #48	; 0x30
 8004808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800480a:	463b      	mov	r3, r7
 800480c:	2230      	movs	r2, #48	; 0x30
 800480e:	2100      	movs	r1, #0
 8004810:	4618      	mov	r0, r3
 8004812:	f00a fd5d 	bl	800f2d0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8004816:	4b16      	ldr	r3, [pc, #88]	; (8004870 <MX_DAC1_Init+0x6c>)
 8004818:	4a16      	ldr	r2, [pc, #88]	; (8004874 <MX_DAC1_Init+0x70>)
 800481a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800481c:	4814      	ldr	r0, [pc, #80]	; (8004870 <MX_DAC1_Init+0x6c>)
 800481e:	f003 f8a6 	bl	800796e <HAL_DAC_Init>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d001      	beq.n	800482c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8004828:	f000 fb7a 	bl	8004f20 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800482c:	2300      	movs	r3, #0
 800482e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8004830:	2300      	movs	r3, #0
 8004832:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8004834:	2300      	movs	r3, #0
 8004836:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8004838:	2300      	movs	r3, #0
 800483a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800483c:	2300      	movs	r3, #0
 800483e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8004840:	2300      	movs	r3, #0
 8004842:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8004844:	2300      	movs	r3, #0
 8004846:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8004848:	2301      	movs	r3, #1
 800484a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800484c:	2300      	movs	r3, #0
 800484e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8004850:	463b      	mov	r3, r7
 8004852:	2200      	movs	r2, #0
 8004854:	4619      	mov	r1, r3
 8004856:	4806      	ldr	r0, [pc, #24]	; (8004870 <MX_DAC1_Init+0x6c>)
 8004858:	f003 f926 	bl	8007aa8 <HAL_DAC_ConfigChannel>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8004862:	f000 fb5d 	bl	8004f20 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8004866:	bf00      	nop
 8004868:	3730      	adds	r7, #48	; 0x30
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	20001aa4 	.word	0x20001aa4
 8004874:	50000800 	.word	0x50000800

08004878 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b08a      	sub	sp, #40	; 0x28
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004880:	f107 0314 	add.w	r3, r7, #20
 8004884:	2200      	movs	r2, #0
 8004886:	601a      	str	r2, [r3, #0]
 8004888:	605a      	str	r2, [r3, #4]
 800488a:	609a      	str	r2, [r3, #8]
 800488c:	60da      	str	r2, [r3, #12]
 800488e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a15      	ldr	r2, [pc, #84]	; (80048ec <HAL_DAC_MspInit+0x74>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d124      	bne.n	80048e4 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800489a:	4b15      	ldr	r3, [pc, #84]	; (80048f0 <HAL_DAC_MspInit+0x78>)
 800489c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800489e:	4a14      	ldr	r2, [pc, #80]	; (80048f0 <HAL_DAC_MspInit+0x78>)
 80048a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80048a6:	4b12      	ldr	r3, [pc, #72]	; (80048f0 <HAL_DAC_MspInit+0x78>)
 80048a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048ae:	613b      	str	r3, [r7, #16]
 80048b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048b2:	4b0f      	ldr	r3, [pc, #60]	; (80048f0 <HAL_DAC_MspInit+0x78>)
 80048b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048b6:	4a0e      	ldr	r2, [pc, #56]	; (80048f0 <HAL_DAC_MspInit+0x78>)
 80048b8:	f043 0301 	orr.w	r3, r3, #1
 80048bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80048be:	4b0c      	ldr	r3, [pc, #48]	; (80048f0 <HAL_DAC_MspInit+0x78>)
 80048c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	60fb      	str	r3, [r7, #12]
 80048c8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80048ca:	2310      	movs	r3, #16
 80048cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80048ce:	2303      	movs	r3, #3
 80048d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048d2:	2300      	movs	r3, #0
 80048d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048d6:	f107 0314 	add.w	r3, r7, #20
 80048da:	4619      	mov	r1, r3
 80048dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80048e0:	f004 fec8 	bl	8009674 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80048e4:	bf00      	nop
 80048e6:	3728      	adds	r7, #40	; 0x28
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	50000800 	.word	0x50000800
 80048f0:	40021000 	.word	0x40021000

080048f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80048fa:	4b3c      	ldr	r3, [pc, #240]	; (80049ec <MX_DMA_Init+0xf8>)
 80048fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048fe:	4a3b      	ldr	r2, [pc, #236]	; (80049ec <MX_DMA_Init+0xf8>)
 8004900:	f043 0304 	orr.w	r3, r3, #4
 8004904:	6493      	str	r3, [r2, #72]	; 0x48
 8004906:	4b39      	ldr	r3, [pc, #228]	; (80049ec <MX_DMA_Init+0xf8>)
 8004908:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800490a:	f003 0304 	and.w	r3, r3, #4
 800490e:	60fb      	str	r3, [r7, #12]
 8004910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004912:	4b36      	ldr	r3, [pc, #216]	; (80049ec <MX_DMA_Init+0xf8>)
 8004914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004916:	4a35      	ldr	r2, [pc, #212]	; (80049ec <MX_DMA_Init+0xf8>)
 8004918:	f043 0301 	orr.w	r3, r3, #1
 800491c:	6493      	str	r3, [r2, #72]	; 0x48
 800491e:	4b33      	ldr	r3, [pc, #204]	; (80049ec <MX_DMA_Init+0xf8>)
 8004920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	60bb      	str	r3, [r7, #8]
 8004928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800492a:	4b30      	ldr	r3, [pc, #192]	; (80049ec <MX_DMA_Init+0xf8>)
 800492c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800492e:	4a2f      	ldr	r2, [pc, #188]	; (80049ec <MX_DMA_Init+0xf8>)
 8004930:	f043 0302 	orr.w	r3, r3, #2
 8004934:	6493      	str	r3, [r2, #72]	; 0x48
 8004936:	4b2d      	ldr	r3, [pc, #180]	; (80049ec <MX_DMA_Init+0xf8>)
 8004938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800493a:	f003 0302 	and.w	r3, r3, #2
 800493e:	607b      	str	r3, [r7, #4]
 8004940:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004942:	2200      	movs	r2, #0
 8004944:	2100      	movs	r1, #0
 8004946:	200b      	movs	r0, #11
 8004948:	f002 ffdd 	bl	8007906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800494c:	200b      	movs	r0, #11
 800494e:	f002 fff4 	bl	800793a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8004952:	2200      	movs	r2, #0
 8004954:	2100      	movs	r1, #0
 8004956:	200c      	movs	r0, #12
 8004958:	f002 ffd5 	bl	8007906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800495c:	200c      	movs	r0, #12
 800495e:	f002 ffec 	bl	800793a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8004962:	2200      	movs	r2, #0
 8004964:	2100      	movs	r1, #0
 8004966:	200d      	movs	r0, #13
 8004968:	f002 ffcd 	bl	8007906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800496c:	200d      	movs	r0, #13
 800496e:	f002 ffe4 	bl	800793a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8004972:	2200      	movs	r2, #0
 8004974:	2100      	movs	r1, #0
 8004976:	200e      	movs	r0, #14
 8004978:	f002 ffc5 	bl	8007906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800497c:	200e      	movs	r0, #14
 800497e:	f002 ffdc 	bl	800793a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8004982:	2200      	movs	r2, #0
 8004984:	2100      	movs	r1, #0
 8004986:	200f      	movs	r0, #15
 8004988:	f002 ffbd 	bl	8007906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800498c:	200f      	movs	r0, #15
 800498e:	f002 ffd4 	bl	800793a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8004992:	2200      	movs	r2, #0
 8004994:	2100      	movs	r1, #0
 8004996:	2010      	movs	r0, #16
 8004998:	f002 ffb5 	bl	8007906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800499c:	2010      	movs	r0, #16
 800499e:	f002 ffcc 	bl	800793a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 80049a2:	2200      	movs	r2, #0
 80049a4:	2100      	movs	r1, #0
 80049a6:	2038      	movs	r0, #56	; 0x38
 80049a8:	f002 ffad 	bl	8007906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80049ac:	2038      	movs	r0, #56	; 0x38
 80049ae:	f002 ffc4 	bl	800793a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 80049b2:	2200      	movs	r2, #0
 80049b4:	2100      	movs	r1, #0
 80049b6:	2039      	movs	r0, #57	; 0x39
 80049b8:	f002 ffa5 	bl	8007906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 80049bc:	2039      	movs	r0, #57	; 0x39
 80049be:	f002 ffbc 	bl	800793a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 80049c2:	2200      	movs	r2, #0
 80049c4:	2100      	movs	r1, #0
 80049c6:	203a      	movs	r0, #58	; 0x3a
 80049c8:	f002 ff9d 	bl	8007906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 80049cc:	203a      	movs	r0, #58	; 0x3a
 80049ce:	f002 ffb4 	bl	800793a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 80049d2:	2200      	movs	r2, #0
 80049d4:	2100      	movs	r1, #0
 80049d6:	203b      	movs	r0, #59	; 0x3b
 80049d8:	f002 ff95 	bl	8007906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 80049dc:	203b      	movs	r0, #59	; 0x3b
 80049de:	f002 ffac 	bl	800793a <HAL_NVIC_EnableIRQ>

}
 80049e2:	bf00      	nop
 80049e4:	3710      	adds	r7, #16
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	40021000 	.word	0x40021000

080049f0 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80049f4:	4b20      	ldr	r3, [pc, #128]	; (8004a78 <MX_FDCAN1_Init+0x88>)
 80049f6:	4a21      	ldr	r2, [pc, #132]	; (8004a7c <MX_FDCAN1_Init+0x8c>)
 80049f8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80049fa:	4b1f      	ldr	r3, [pc, #124]	; (8004a78 <MX_FDCAN1_Init+0x88>)
 80049fc:	2200      	movs	r2, #0
 80049fe:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8004a00:	4b1d      	ldr	r3, [pc, #116]	; (8004a78 <MX_FDCAN1_Init+0x88>)
 8004a02:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004a06:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8004a08:	4b1b      	ldr	r3, [pc, #108]	; (8004a78 <MX_FDCAN1_Init+0x88>)
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8004a0e:	4b1a      	ldr	r3, [pc, #104]	; (8004a78 <MX_FDCAN1_Init+0x88>)
 8004a10:	2200      	movs	r2, #0
 8004a12:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8004a14:	4b18      	ldr	r3, [pc, #96]	; (8004a78 <MX_FDCAN1_Init+0x88>)
 8004a16:	2200      	movs	r2, #0
 8004a18:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8004a1a:	4b17      	ldr	r3, [pc, #92]	; (8004a78 <MX_FDCAN1_Init+0x88>)
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8004a20:	4b15      	ldr	r3, [pc, #84]	; (8004a78 <MX_FDCAN1_Init+0x88>)
 8004a22:	2201      	movs	r2, #1
 8004a24:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 7;
 8004a26:	4b14      	ldr	r3, [pc, #80]	; (8004a78 <MX_FDCAN1_Init+0x88>)
 8004a28:	2207      	movs	r2, #7
 8004a2a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 42;
 8004a2c:	4b12      	ldr	r3, [pc, #72]	; (8004a78 <MX_FDCAN1_Init+0x88>)
 8004a2e:	222a      	movs	r2, #42	; 0x2a
 8004a30:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 7;
 8004a32:	4b11      	ldr	r3, [pc, #68]	; (8004a78 <MX_FDCAN1_Init+0x88>)
 8004a34:	2207      	movs	r2, #7
 8004a36:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8004a38:	4b0f      	ldr	r3, [pc, #60]	; (8004a78 <MX_FDCAN1_Init+0x88>)
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 9;
 8004a3e:	4b0e      	ldr	r3, [pc, #56]	; (8004a78 <MX_FDCAN1_Init+0x88>)
 8004a40:	2209      	movs	r2, #9
 8004a42:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 8004a44:	4b0c      	ldr	r3, [pc, #48]	; (8004a78 <MX_FDCAN1_Init+0x88>)
 8004a46:	220a      	movs	r2, #10
 8004a48:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 9;
 8004a4a:	4b0b      	ldr	r3, [pc, #44]	; (8004a78 <MX_FDCAN1_Init+0x88>)
 8004a4c:	2209      	movs	r2, #9
 8004a4e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8004a50:	4b09      	ldr	r3, [pc, #36]	; (8004a78 <MX_FDCAN1_Init+0x88>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8004a56:	4b08      	ldr	r3, [pc, #32]	; (8004a78 <MX_FDCAN1_Init+0x88>)
 8004a58:	2200      	movs	r2, #0
 8004a5a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8004a5c:	4b06      	ldr	r3, [pc, #24]	; (8004a78 <MX_FDCAN1_Init+0x88>)
 8004a5e:	2200      	movs	r2, #0
 8004a60:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8004a62:	4805      	ldr	r0, [pc, #20]	; (8004a78 <MX_FDCAN1_Init+0x88>)
 8004a64:	f003 fcfa 	bl	800845c <HAL_FDCAN_Init>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d001      	beq.n	8004a72 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8004a6e:	f000 fa57 	bl	8004f20 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8004a72:	bf00      	nop
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	20001ab8 	.word	0x20001ab8
 8004a7c:	40006400 	.word	0x40006400

08004a80 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b09a      	sub	sp, #104	; 0x68
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a88:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	601a      	str	r2, [r3, #0]
 8004a90:	605a      	str	r2, [r3, #4]
 8004a92:	609a      	str	r2, [r3, #8]
 8004a94:	60da      	str	r2, [r3, #12]
 8004a96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004a98:	f107 0310 	add.w	r3, r7, #16
 8004a9c:	2244      	movs	r2, #68	; 0x44
 8004a9e:	2100      	movs	r1, #0
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f00a fc15 	bl	800f2d0 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a24      	ldr	r2, [pc, #144]	; (8004b3c <HAL_FDCAN_MspInit+0xbc>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d141      	bne.n	8004b34 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8004ab0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ab4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8004ab6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004aba:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004abc:	f107 0310 	add.w	r3, r7, #16
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f005 fd9b 	bl	800a5fc <HAL_RCCEx_PeriphCLKConfig>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d001      	beq.n	8004ad0 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8004acc:	f000 fa28 	bl	8004f20 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8004ad0:	4b1b      	ldr	r3, [pc, #108]	; (8004b40 <HAL_FDCAN_MspInit+0xc0>)
 8004ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad4:	4a1a      	ldr	r2, [pc, #104]	; (8004b40 <HAL_FDCAN_MspInit+0xc0>)
 8004ad6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004ada:	6593      	str	r3, [r2, #88]	; 0x58
 8004adc:	4b18      	ldr	r3, [pc, #96]	; (8004b40 <HAL_FDCAN_MspInit+0xc0>)
 8004ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ae4:	60fb      	str	r3, [r7, #12]
 8004ae6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ae8:	4b15      	ldr	r3, [pc, #84]	; (8004b40 <HAL_FDCAN_MspInit+0xc0>)
 8004aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aec:	4a14      	ldr	r2, [pc, #80]	; (8004b40 <HAL_FDCAN_MspInit+0xc0>)
 8004aee:	f043 0301 	orr.w	r3, r3, #1
 8004af2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004af4:	4b12      	ldr	r3, [pc, #72]	; (8004b40 <HAL_FDCAN_MspInit+0xc0>)
 8004af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004af8:	f003 0301 	and.w	r3, r3, #1
 8004afc:	60bb      	str	r3, [r7, #8]
 8004afe:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004b00:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004b04:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b06:	2302      	movs	r3, #2
 8004b08:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8004b12:	2309      	movs	r3, #9
 8004b14:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b16:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b20:	f004 fda8 	bl	8009674 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8004b24:	2200      	movs	r2, #0
 8004b26:	2100      	movs	r1, #0
 8004b28:	2015      	movs	r0, #21
 8004b2a:	f002 feec 	bl	8007906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8004b2e:	2015      	movs	r0, #21
 8004b30:	f002 ff03 	bl	800793a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8004b34:	bf00      	nop
 8004b36:	3768      	adds	r7, #104	; 0x68
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	40006400 	.word	0x40006400
 8004b40:	40021000 	.word	0x40021000

08004b44 <MX_FMAC_Init>:
DMA_HandleTypeDef hdma_fmac_read;
DMA_HandleTypeDef hdma_fmac_write;

/* FMAC init function */
void MX_FMAC_Init(void)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 8004b48:	4b06      	ldr	r3, [pc, #24]	; (8004b64 <MX_FMAC_Init+0x20>)
 8004b4a:	4a07      	ldr	r2, [pc, #28]	; (8004b68 <MX_FMAC_Init+0x24>)
 8004b4c:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 8004b4e:	4805      	ldr	r0, [pc, #20]	; (8004b64 <MX_FMAC_Init+0x20>)
 8004b50:	f004 fce4 	bl	800951c <HAL_FMAC_Init>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d001      	beq.n	8004b5e <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 8004b5a:	f000 f9e1 	bl	8004f20 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 8004b5e:	bf00      	nop
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	20001b1c 	.word	0x20001b1c
 8004b68:	40021400 	.word	0x40021400

08004b6c <HAL_FMAC_MspInit>:

void HAL_FMAC_MspInit(FMAC_HandleTypeDef* fmacHandle)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]

  if(fmacHandle->Instance==FMAC)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a4a      	ldr	r2, [pc, #296]	; (8004ca4 <HAL_FMAC_MspInit+0x138>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	f040 808e 	bne.w	8004c9c <HAL_FMAC_MspInit+0x130>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* FMAC clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 8004b80:	4b49      	ldr	r3, [pc, #292]	; (8004ca8 <HAL_FMAC_MspInit+0x13c>)
 8004b82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b84:	4a48      	ldr	r2, [pc, #288]	; (8004ca8 <HAL_FMAC_MspInit+0x13c>)
 8004b86:	f043 0310 	orr.w	r3, r3, #16
 8004b8a:	6493      	str	r3, [r2, #72]	; 0x48
 8004b8c:	4b46      	ldr	r3, [pc, #280]	; (8004ca8 <HAL_FMAC_MspInit+0x13c>)
 8004b8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b90:	f003 0310 	and.w	r3, r3, #16
 8004b94:	60fb      	str	r3, [r7, #12]
 8004b96:	68fb      	ldr	r3, [r7, #12]

    /* FMAC DMA Init */
    /* FMAC_PRELOAD Init */
    hdma_fmac_preload.Instance = DMA1_Channel5;
 8004b98:	4b44      	ldr	r3, [pc, #272]	; (8004cac <HAL_FMAC_MspInit+0x140>)
 8004b9a:	4a45      	ldr	r2, [pc, #276]	; (8004cb0 <HAL_FMAC_MspInit+0x144>)
 8004b9c:	601a      	str	r2, [r3, #0]
    hdma_fmac_preload.Init.Request = DMA_REQUEST_MEM2MEM;
 8004b9e:	4b43      	ldr	r3, [pc, #268]	; (8004cac <HAL_FMAC_MspInit+0x140>)
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	605a      	str	r2, [r3, #4]
    hdma_fmac_preload.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8004ba4:	4b41      	ldr	r3, [pc, #260]	; (8004cac <HAL_FMAC_MspInit+0x140>)
 8004ba6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004baa:	609a      	str	r2, [r3, #8]
    hdma_fmac_preload.Init.PeriphInc = DMA_PINC_ENABLE;
 8004bac:	4b3f      	ldr	r3, [pc, #252]	; (8004cac <HAL_FMAC_MspInit+0x140>)
 8004bae:	2240      	movs	r2, #64	; 0x40
 8004bb0:	60da      	str	r2, [r3, #12]
    hdma_fmac_preload.Init.MemInc = DMA_MINC_DISABLE;
 8004bb2:	4b3e      	ldr	r3, [pc, #248]	; (8004cac <HAL_FMAC_MspInit+0x140>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	611a      	str	r2, [r3, #16]
    hdma_fmac_preload.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004bb8:	4b3c      	ldr	r3, [pc, #240]	; (8004cac <HAL_FMAC_MspInit+0x140>)
 8004bba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004bbe:	615a      	str	r2, [r3, #20]
    hdma_fmac_preload.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004bc0:	4b3a      	ldr	r3, [pc, #232]	; (8004cac <HAL_FMAC_MspInit+0x140>)
 8004bc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bc6:	619a      	str	r2, [r3, #24]
    hdma_fmac_preload.Init.Mode = DMA_NORMAL;
 8004bc8:	4b38      	ldr	r3, [pc, #224]	; (8004cac <HAL_FMAC_MspInit+0x140>)
 8004bca:	2200      	movs	r2, #0
 8004bcc:	61da      	str	r2, [r3, #28]
    hdma_fmac_preload.Init.Priority = DMA_PRIORITY_LOW;
 8004bce:	4b37      	ldr	r3, [pc, #220]	; (8004cac <HAL_FMAC_MspInit+0x140>)
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_fmac_preload) != HAL_OK)
 8004bd4:	4835      	ldr	r0, [pc, #212]	; (8004cac <HAL_FMAC_MspInit+0x140>)
 8004bd6:	f003 f90f 	bl	8007df8 <HAL_DMA_Init>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d001      	beq.n	8004be4 <HAL_FMAC_MspInit+0x78>
    {
      Error_Handler();
 8004be0:	f000 f99e 	bl	8004f20 <Error_Handler>
    }

    __HAL_LINKDMA(fmacHandle,hdmaPreload,hdma_fmac_preload);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a31      	ldr	r2, [pc, #196]	; (8004cac <HAL_FMAC_MspInit+0x140>)
 8004be8:	62da      	str	r2, [r3, #44]	; 0x2c
 8004bea:	4a30      	ldr	r2, [pc, #192]	; (8004cac <HAL_FMAC_MspInit+0x140>)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6293      	str	r3, [r2, #40]	; 0x28

    /* FMAC_READ Init */
    hdma_fmac_read.Instance = DMA1_Channel6;
 8004bf0:	4b30      	ldr	r3, [pc, #192]	; (8004cb4 <HAL_FMAC_MspInit+0x148>)
 8004bf2:	4a31      	ldr	r2, [pc, #196]	; (8004cb8 <HAL_FMAC_MspInit+0x14c>)
 8004bf4:	601a      	str	r2, [r3, #0]
    hdma_fmac_read.Init.Request = DMA_REQUEST_FMAC_READ;
 8004bf6:	4b2f      	ldr	r3, [pc, #188]	; (8004cb4 <HAL_FMAC_MspInit+0x148>)
 8004bf8:	226e      	movs	r2, #110	; 0x6e
 8004bfa:	605a      	str	r2, [r3, #4]
    hdma_fmac_read.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004bfc:	4b2d      	ldr	r3, [pc, #180]	; (8004cb4 <HAL_FMAC_MspInit+0x148>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	609a      	str	r2, [r3, #8]
    hdma_fmac_read.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c02:	4b2c      	ldr	r3, [pc, #176]	; (8004cb4 <HAL_FMAC_MspInit+0x148>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	60da      	str	r2, [r3, #12]
    hdma_fmac_read.Init.MemInc = DMA_MINC_ENABLE;
 8004c08:	4b2a      	ldr	r3, [pc, #168]	; (8004cb4 <HAL_FMAC_MspInit+0x148>)
 8004c0a:	2280      	movs	r2, #128	; 0x80
 8004c0c:	611a      	str	r2, [r3, #16]
    hdma_fmac_read.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004c0e:	4b29      	ldr	r3, [pc, #164]	; (8004cb4 <HAL_FMAC_MspInit+0x148>)
 8004c10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c14:	615a      	str	r2, [r3, #20]
    hdma_fmac_read.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004c16:	4b27      	ldr	r3, [pc, #156]	; (8004cb4 <HAL_FMAC_MspInit+0x148>)
 8004c18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c1c:	619a      	str	r2, [r3, #24]
    hdma_fmac_read.Init.Mode = DMA_NORMAL;
 8004c1e:	4b25      	ldr	r3, [pc, #148]	; (8004cb4 <HAL_FMAC_MspInit+0x148>)
 8004c20:	2200      	movs	r2, #0
 8004c22:	61da      	str	r2, [r3, #28]
    hdma_fmac_read.Init.Priority = DMA_PRIORITY_LOW;
 8004c24:	4b23      	ldr	r3, [pc, #140]	; (8004cb4 <HAL_FMAC_MspInit+0x148>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_fmac_read) != HAL_OK)
 8004c2a:	4822      	ldr	r0, [pc, #136]	; (8004cb4 <HAL_FMAC_MspInit+0x148>)
 8004c2c:	f003 f8e4 	bl	8007df8 <HAL_DMA_Init>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d001      	beq.n	8004c3a <HAL_FMAC_MspInit+0xce>
    {
      Error_Handler();
 8004c36:	f000 f973 	bl	8004f20 <Error_Handler>
    }

    __HAL_LINKDMA(fmacHandle,hdmaOut,hdma_fmac_read);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a1d      	ldr	r2, [pc, #116]	; (8004cb4 <HAL_FMAC_MspInit+0x148>)
 8004c3e:	629a      	str	r2, [r3, #40]	; 0x28
 8004c40:	4a1c      	ldr	r2, [pc, #112]	; (8004cb4 <HAL_FMAC_MspInit+0x148>)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6293      	str	r3, [r2, #40]	; 0x28

    /* FMAC_WRITE Init */
    hdma_fmac_write.Instance = DMA2_Channel4;
 8004c46:	4b1d      	ldr	r3, [pc, #116]	; (8004cbc <HAL_FMAC_MspInit+0x150>)
 8004c48:	4a1d      	ldr	r2, [pc, #116]	; (8004cc0 <HAL_FMAC_MspInit+0x154>)
 8004c4a:	601a      	str	r2, [r3, #0]
    hdma_fmac_write.Init.Request = DMA_REQUEST_FMAC_WRITE;
 8004c4c:	4b1b      	ldr	r3, [pc, #108]	; (8004cbc <HAL_FMAC_MspInit+0x150>)
 8004c4e:	226f      	movs	r2, #111	; 0x6f
 8004c50:	605a      	str	r2, [r3, #4]
    hdma_fmac_write.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004c52:	4b1a      	ldr	r3, [pc, #104]	; (8004cbc <HAL_FMAC_MspInit+0x150>)
 8004c54:	2210      	movs	r2, #16
 8004c56:	609a      	str	r2, [r3, #8]
    hdma_fmac_write.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c58:	4b18      	ldr	r3, [pc, #96]	; (8004cbc <HAL_FMAC_MspInit+0x150>)
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	60da      	str	r2, [r3, #12]
    hdma_fmac_write.Init.MemInc = DMA_MINC_ENABLE;
 8004c5e:	4b17      	ldr	r3, [pc, #92]	; (8004cbc <HAL_FMAC_MspInit+0x150>)
 8004c60:	2280      	movs	r2, #128	; 0x80
 8004c62:	611a      	str	r2, [r3, #16]
    hdma_fmac_write.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004c64:	4b15      	ldr	r3, [pc, #84]	; (8004cbc <HAL_FMAC_MspInit+0x150>)
 8004c66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c6a:	615a      	str	r2, [r3, #20]
    hdma_fmac_write.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004c6c:	4b13      	ldr	r3, [pc, #76]	; (8004cbc <HAL_FMAC_MspInit+0x150>)
 8004c6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c72:	619a      	str	r2, [r3, #24]
    hdma_fmac_write.Init.Mode = DMA_NORMAL;
 8004c74:	4b11      	ldr	r3, [pc, #68]	; (8004cbc <HAL_FMAC_MspInit+0x150>)
 8004c76:	2200      	movs	r2, #0
 8004c78:	61da      	str	r2, [r3, #28]
    hdma_fmac_write.Init.Priority = DMA_PRIORITY_LOW;
 8004c7a:	4b10      	ldr	r3, [pc, #64]	; (8004cbc <HAL_FMAC_MspInit+0x150>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_fmac_write) != HAL_OK)
 8004c80:	480e      	ldr	r0, [pc, #56]	; (8004cbc <HAL_FMAC_MspInit+0x150>)
 8004c82:	f003 f8b9 	bl	8007df8 <HAL_DMA_Init>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d001      	beq.n	8004c90 <HAL_FMAC_MspInit+0x124>
    {
      Error_Handler();
 8004c8c:	f000 f948 	bl	8004f20 <Error_Handler>
    }

    __HAL_LINKDMA(fmacHandle,hdmaIn,hdma_fmac_write);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a0a      	ldr	r2, [pc, #40]	; (8004cbc <HAL_FMAC_MspInit+0x150>)
 8004c94:	625a      	str	r2, [r3, #36]	; 0x24
 8004c96:	4a09      	ldr	r2, [pc, #36]	; (8004cbc <HAL_FMAC_MspInit+0x150>)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }
}
 8004c9c:	bf00      	nop
 8004c9e:	3710      	adds	r7, #16
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	40021400 	.word	0x40021400
 8004ca8:	40021000 	.word	0x40021000
 8004cac:	20001b54 	.word	0x20001b54
 8004cb0:	40020058 	.word	0x40020058
 8004cb4:	20001bb4 	.word	0x20001bb4
 8004cb8:	4002006c 	.word	0x4002006c
 8004cbc:	20001c14 	.word	0x20001c14
 8004cc0:	40020444 	.word	0x40020444

08004cc4 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b08a      	sub	sp, #40	; 0x28
 8004cc8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cca:	f107 0314 	add.w	r3, r7, #20
 8004cce:	2200      	movs	r2, #0
 8004cd0:	601a      	str	r2, [r3, #0]
 8004cd2:	605a      	str	r2, [r3, #4]
 8004cd4:	609a      	str	r2, [r3, #8]
 8004cd6:	60da      	str	r2, [r3, #12]
 8004cd8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004cda:	4b51      	ldr	r3, [pc, #324]	; (8004e20 <MX_GPIO_Init+0x15c>)
 8004cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cde:	4a50      	ldr	r2, [pc, #320]	; (8004e20 <MX_GPIO_Init+0x15c>)
 8004ce0:	f043 0320 	orr.w	r3, r3, #32
 8004ce4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ce6:	4b4e      	ldr	r3, [pc, #312]	; (8004e20 <MX_GPIO_Init+0x15c>)
 8004ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cea:	f003 0320 	and.w	r3, r3, #32
 8004cee:	613b      	str	r3, [r7, #16]
 8004cf0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004cf2:	4b4b      	ldr	r3, [pc, #300]	; (8004e20 <MX_GPIO_Init+0x15c>)
 8004cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cf6:	4a4a      	ldr	r2, [pc, #296]	; (8004e20 <MX_GPIO_Init+0x15c>)
 8004cf8:	f043 0304 	orr.w	r3, r3, #4
 8004cfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004cfe:	4b48      	ldr	r3, [pc, #288]	; (8004e20 <MX_GPIO_Init+0x15c>)
 8004d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d02:	f003 0304 	and.w	r3, r3, #4
 8004d06:	60fb      	str	r3, [r7, #12]
 8004d08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d0a:	4b45      	ldr	r3, [pc, #276]	; (8004e20 <MX_GPIO_Init+0x15c>)
 8004d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d0e:	4a44      	ldr	r2, [pc, #272]	; (8004e20 <MX_GPIO_Init+0x15c>)
 8004d10:	f043 0301 	orr.w	r3, r3, #1
 8004d14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d16:	4b42      	ldr	r3, [pc, #264]	; (8004e20 <MX_GPIO_Init+0x15c>)
 8004d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d1a:	f003 0301 	and.w	r3, r3, #1
 8004d1e:	60bb      	str	r3, [r7, #8]
 8004d20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d22:	4b3f      	ldr	r3, [pc, #252]	; (8004e20 <MX_GPIO_Init+0x15c>)
 8004d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d26:	4a3e      	ldr	r2, [pc, #248]	; (8004e20 <MX_GPIO_Init+0x15c>)
 8004d28:	f043 0302 	orr.w	r3, r3, #2
 8004d2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d2e:	4b3c      	ldr	r3, [pc, #240]	; (8004e20 <MX_GPIO_Init+0x15c>)
 8004d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	607b      	str	r3, [r7, #4]
 8004d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004d3a:	4b39      	ldr	r3, [pc, #228]	; (8004e20 <MX_GPIO_Init+0x15c>)
 8004d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d3e:	4a38      	ldr	r2, [pc, #224]	; (8004e20 <MX_GPIO_Init+0x15c>)
 8004d40:	f043 0308 	orr.w	r3, r3, #8
 8004d44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d46:	4b36      	ldr	r3, [pc, #216]	; (8004e20 <MX_GPIO_Init+0x15c>)
 8004d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d4a:	f003 0308 	and.w	r3, r3, #8
 8004d4e:	603b      	str	r3, [r7, #0]
 8004d50:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RUNNING_LED_Pin|WARNING_LED_Pin, GPIO_PIN_RESET);
 8004d52:	2200      	movs	r2, #0
 8004d54:	21c0      	movs	r1, #192	; 0xc0
 8004d56:	4833      	ldr	r0, [pc, #204]	; (8004e24 <MX_GPIO_Init+0x160>)
 8004d58:	f004 fe0e 	bl	8009978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, GPIO_PIN_RESET);
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d66:	f004 fe07 	bl	8009978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, GPIO_PIN_RESET);
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	2104      	movs	r1, #4
 8004d6e:	482e      	ldr	r0, [pc, #184]	; (8004e28 <MX_GPIO_Init+0x164>)
 8004d70:	f004 fe02 	bl	8009978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, GPIO_PIN_RESET);
 8004d74:	2200      	movs	r2, #0
 8004d76:	2140      	movs	r1, #64	; 0x40
 8004d78:	482c      	ldr	r0, [pc, #176]	; (8004e2c <MX_GPIO_Init+0x168>)
 8004d7a:	f004 fdfd 	bl	8009978 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RUNNING_LED_Pin|WARNING_LED_Pin;
 8004d7e:	23c0      	movs	r3, #192	; 0xc0
 8004d80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d82:	2301      	movs	r3, #1
 8004d84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d86:	2300      	movs	r3, #0
 8004d88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d8e:	f107 0314 	add.w	r3, r7, #20
 8004d92:	4619      	mov	r1, r3
 8004d94:	4823      	ldr	r0, [pc, #140]	; (8004e24 <MX_GPIO_Init+0x160>)
 8004d96:	f004 fc6d 	bl	8009674 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004d9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004da0:	2302      	movs	r3, #2
 8004da2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004da4:	2300      	movs	r3, #0
 8004da6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004da8:	2300      	movs	r3, #0
 8004daa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004dac:	2300      	movs	r3, #0
 8004dae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004db0:	f107 0314 	add.w	r3, r7, #20
 8004db4:	4619      	mov	r1, r3
 8004db6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004dba:	f004 fc5b 	bl	8009674 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ERROR_LED_Pin;
 8004dbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004dc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ERROR_LED_GPIO_Port, &GPIO_InitStruct);
 8004dd0:	f107 0314 	add.w	r3, r7, #20
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004dda:	f004 fc4b 	bl	8009674 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER2_CS_Pin;
 8004dde:	2304      	movs	r3, #4
 8004de0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004de2:	2301      	movs	r3, #1
 8004de4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004de6:	2300      	movs	r3, #0
 8004de8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dea:	2300      	movs	r3, #0
 8004dec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENCODER2_CS_GPIO_Port, &GPIO_InitStruct);
 8004dee:	f107 0314 	add.w	r3, r7, #20
 8004df2:	4619      	mov	r1, r3
 8004df4:	480c      	ldr	r0, [pc, #48]	; (8004e28 <MX_GPIO_Init+0x164>)
 8004df6:	f004 fc3d 	bl	8009674 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER1_CS_Pin;
 8004dfa:	2340      	movs	r3, #64	; 0x40
 8004dfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e02:	2300      	movs	r3, #0
 8004e04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e06:	2300      	movs	r3, #0
 8004e08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENCODER1_CS_GPIO_Port, &GPIO_InitStruct);
 8004e0a:	f107 0314 	add.w	r3, r7, #20
 8004e0e:	4619      	mov	r1, r3
 8004e10:	4806      	ldr	r0, [pc, #24]	; (8004e2c <MX_GPIO_Init+0x168>)
 8004e12:	f004 fc2f 	bl	8009674 <HAL_GPIO_Init>

}
 8004e16:	bf00      	nop
 8004e18:	3728      	adds	r7, #40	; 0x28
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	40021000 	.word	0x40021000
 8004e24:	48000800 	.word	0x48000800
 8004e28:	48000c00 	.word	0x48000c00
 8004e2c:	48000400 	.word	0x48000400

08004e30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004e34:	f000 ff35 	bl	8005ca2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004e38:	f000 f81f 	bl	8004e7a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004e3c:	f7ff ff42 	bl	8004cc4 <MX_GPIO_Init>
  MX_DMA_Init();
 8004e40:	f7ff fd58 	bl	80048f4 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8004e44:	f7ff fdd4 	bl	80049f0 <MX_FDCAN1_Init>
  MX_SPI1_Init();
 8004e48:	f000 f870 	bl	8004f2c <MX_SPI1_Init>
  MX_SPI3_Init();
 8004e4c:	f000 f8ac 	bl	8004fa8 <MX_SPI3_Init>
  MX_TIM1_Init();
 8004e50:	f000 fc04 	bl	800565c <MX_TIM1_Init>
  MX_ADC1_Init();
 8004e54:	f7ff fa1c 	bl	8004290 <MX_ADC1_Init>
  MX_ADC2_Init();
 8004e58:	f7ff face 	bl	80043f8 <MX_ADC2_Init>
  MX_DAC1_Init();
 8004e5c:	f7ff fcd2 	bl	8004804 <MX_DAC1_Init>
  MX_USART1_UART_Init();
 8004e60:	f000 fe1c 	bl	8005a9c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8004e64:	f000 fd10 	bl	8005888 <MX_TIM3_Init>
  MX_FMAC_Init();
 8004e68:	f7ff fe6c 	bl	8004b44 <MX_FMAC_Init>
  MX_CORDIC_Init();
 8004e6c:	f7ff fc96 	bl	800479c <MX_CORDIC_Init>
  MX_TIM2_Init();
 8004e70:	f000 fcbc 	bl	80057ec <MX_TIM2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	BLDC_main();
 8004e74:	f7fc fa2a 	bl	80012cc <BLDC_main>
 8004e78:	e7fc      	b.n	8004e74 <main+0x44>

08004e7a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b094      	sub	sp, #80	; 0x50
 8004e7e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004e80:	f107 0318 	add.w	r3, r7, #24
 8004e84:	2238      	movs	r2, #56	; 0x38
 8004e86:	2100      	movs	r1, #0
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f00a fa21 	bl	800f2d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004e8e:	1d3b      	adds	r3, r7, #4
 8004e90:	2200      	movs	r2, #0
 8004e92:	601a      	str	r2, [r3, #0]
 8004e94:	605a      	str	r2, [r3, #4]
 8004e96:	609a      	str	r2, [r3, #8]
 8004e98:	60da      	str	r2, [r3, #12]
 8004e9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8004e9c:	2000      	movs	r0, #0
 8004e9e:	f004 fd83 	bl	80099a8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004ea6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004eaa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004eac:	2340      	movs	r3, #64	; 0x40
 8004eae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004eb0:	2302      	movs	r3, #2
 8004eb2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004eb4:	2302      	movs	r3, #2
 8004eb6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8004eb8:	2304      	movs	r3, #4
 8004eba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8004ebc:	2350      	movs	r3, #80	; 0x50
 8004ebe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8004ec4:	2308      	movs	r3, #8
 8004ec6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004ec8:	2302      	movs	r3, #2
 8004eca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004ecc:	f107 0318 	add.w	r3, r7, #24
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f004 fe1d 	bl	8009b10 <HAL_RCC_OscConfig>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d001      	beq.n	8004ee0 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8004edc:	f000 f820 	bl	8004f20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004ee0:	230f      	movs	r3, #15
 8004ee2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004eec:	2300      	movs	r3, #0
 8004eee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004ef4:	1d3b      	adds	r3, r7, #4
 8004ef6:	2104      	movs	r1, #4
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f005 f921 	bl	800a140 <HAL_RCC_ClockConfig>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d001      	beq.n	8004f08 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8004f04:	f000 f80c 	bl	8004f20 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_16);
 8004f08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004f0c:	f04f 7140 	mov.w	r1, #50331648	; 0x3000000
 8004f10:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004f14:	f005 fa50 	bl	800a3b8 <HAL_RCC_MCOConfig>
}
 8004f18:	bf00      	nop
 8004f1a:	3750      	adds	r7, #80	; 0x50
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004f20:	b480      	push	{r7}
 8004f22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004f24:	b672      	cpsid	i
}
 8004f26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004f28:	e7fe      	b.n	8004f28 <Error_Handler+0x8>
	...

08004f2c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi3_rx;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004f30:	4b1b      	ldr	r3, [pc, #108]	; (8004fa0 <MX_SPI1_Init+0x74>)
 8004f32:	4a1c      	ldr	r2, [pc, #112]	; (8004fa4 <MX_SPI1_Init+0x78>)
 8004f34:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004f36:	4b1a      	ldr	r3, [pc, #104]	; (8004fa0 <MX_SPI1_Init+0x74>)
 8004f38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004f3c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004f3e:	4b18      	ldr	r3, [pc, #96]	; (8004fa0 <MX_SPI1_Init+0x74>)
 8004f40:	2200      	movs	r2, #0
 8004f42:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004f44:	4b16      	ldr	r3, [pc, #88]	; (8004fa0 <MX_SPI1_Init+0x74>)
 8004f46:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004f4a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f4c:	4b14      	ldr	r3, [pc, #80]	; (8004fa0 <MX_SPI1_Init+0x74>)
 8004f4e:	2200      	movs	r2, #0
 8004f50:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004f52:	4b13      	ldr	r3, [pc, #76]	; (8004fa0 <MX_SPI1_Init+0x74>)
 8004f54:	2201      	movs	r2, #1
 8004f56:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004f58:	4b11      	ldr	r3, [pc, #68]	; (8004fa0 <MX_SPI1_Init+0x74>)
 8004f5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f5e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8004f60:	4b0f      	ldr	r3, [pc, #60]	; (8004fa0 <MX_SPI1_Init+0x74>)
 8004f62:	2228      	movs	r2, #40	; 0x28
 8004f64:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004f66:	4b0e      	ldr	r3, [pc, #56]	; (8004fa0 <MX_SPI1_Init+0x74>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004f6c:	4b0c      	ldr	r3, [pc, #48]	; (8004fa0 <MX_SPI1_Init+0x74>)
 8004f6e:	2200      	movs	r2, #0
 8004f70:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f72:	4b0b      	ldr	r3, [pc, #44]	; (8004fa0 <MX_SPI1_Init+0x74>)
 8004f74:	2200      	movs	r2, #0
 8004f76:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004f78:	4b09      	ldr	r3, [pc, #36]	; (8004fa0 <MX_SPI1_Init+0x74>)
 8004f7a:	2207      	movs	r2, #7
 8004f7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004f7e:	4b08      	ldr	r3, [pc, #32]	; (8004fa0 <MX_SPI1_Init+0x74>)
 8004f80:	2200      	movs	r2, #0
 8004f82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004f84:	4b06      	ldr	r3, [pc, #24]	; (8004fa0 <MX_SPI1_Init+0x74>)
 8004f86:	2200      	movs	r2, #0
 8004f88:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004f8a:	4805      	ldr	r0, [pc, #20]	; (8004fa0 <MX_SPI1_Init+0x74>)
 8004f8c:	f005 fd26 	bl	800a9dc <HAL_SPI_Init>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d001      	beq.n	8004f9a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8004f96:	f7ff ffc3 	bl	8004f20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004f9a:	bf00      	nop
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	20001c74 	.word	0x20001c74
 8004fa4:	40013000 	.word	0x40013000

08004fa8 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8004fac:	4b1b      	ldr	r3, [pc, #108]	; (800501c <MX_SPI3_Init+0x74>)
 8004fae:	4a1c      	ldr	r2, [pc, #112]	; (8005020 <MX_SPI3_Init+0x78>)
 8004fb0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004fb2:	4b1a      	ldr	r3, [pc, #104]	; (800501c <MX_SPI3_Init+0x74>)
 8004fb4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004fb8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8004fba:	4b18      	ldr	r3, [pc, #96]	; (800501c <MX_SPI3_Init+0x74>)
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004fc0:	4b16      	ldr	r3, [pc, #88]	; (800501c <MX_SPI3_Init+0x74>)
 8004fc2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004fc6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004fc8:	4b14      	ldr	r3, [pc, #80]	; (800501c <MX_SPI3_Init+0x74>)
 8004fca:	2200      	movs	r2, #0
 8004fcc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004fce:	4b13      	ldr	r3, [pc, #76]	; (800501c <MX_SPI3_Init+0x74>)
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004fd4:	4b11      	ldr	r3, [pc, #68]	; (800501c <MX_SPI3_Init+0x74>)
 8004fd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fda:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8004fdc:	4b0f      	ldr	r3, [pc, #60]	; (800501c <MX_SPI3_Init+0x74>)
 8004fde:	2228      	movs	r2, #40	; 0x28
 8004fe0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004fe2:	4b0e      	ldr	r3, [pc, #56]	; (800501c <MX_SPI3_Init+0x74>)
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004fe8:	4b0c      	ldr	r3, [pc, #48]	; (800501c <MX_SPI3_Init+0x74>)
 8004fea:	2200      	movs	r2, #0
 8004fec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fee:	4b0b      	ldr	r3, [pc, #44]	; (800501c <MX_SPI3_Init+0x74>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8004ff4:	4b09      	ldr	r3, [pc, #36]	; (800501c <MX_SPI3_Init+0x74>)
 8004ff6:	2207      	movs	r2, #7
 8004ff8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004ffa:	4b08      	ldr	r3, [pc, #32]	; (800501c <MX_SPI3_Init+0x74>)
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8005000:	4b06      	ldr	r3, [pc, #24]	; (800501c <MX_SPI3_Init+0x74>)
 8005002:	2200      	movs	r2, #0
 8005004:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8005006:	4805      	ldr	r0, [pc, #20]	; (800501c <MX_SPI3_Init+0x74>)
 8005008:	f005 fce8 	bl	800a9dc <HAL_SPI_Init>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d001      	beq.n	8005016 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8005012:	f7ff ff85 	bl	8004f20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8005016:	bf00      	nop
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	20001cd8 	.word	0x20001cd8
 8005020:	40003c00 	.word	0x40003c00

08005024 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b08c      	sub	sp, #48	; 0x30
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800502c:	f107 031c 	add.w	r3, r7, #28
 8005030:	2200      	movs	r2, #0
 8005032:	601a      	str	r2, [r3, #0]
 8005034:	605a      	str	r2, [r3, #4]
 8005036:	609a      	str	r2, [r3, #8]
 8005038:	60da      	str	r2, [r3, #12]
 800503a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a89      	ldr	r2, [pc, #548]	; (8005268 <HAL_SPI_MspInit+0x244>)
 8005042:	4293      	cmp	r3, r2
 8005044:	f040 8083 	bne.w	800514e <HAL_SPI_MspInit+0x12a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005048:	4b88      	ldr	r3, [pc, #544]	; (800526c <HAL_SPI_MspInit+0x248>)
 800504a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800504c:	4a87      	ldr	r2, [pc, #540]	; (800526c <HAL_SPI_MspInit+0x248>)
 800504e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005052:	6613      	str	r3, [r2, #96]	; 0x60
 8005054:	4b85      	ldr	r3, [pc, #532]	; (800526c <HAL_SPI_MspInit+0x248>)
 8005056:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005058:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800505c:	61bb      	str	r3, [r7, #24]
 800505e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005060:	4b82      	ldr	r3, [pc, #520]	; (800526c <HAL_SPI_MspInit+0x248>)
 8005062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005064:	4a81      	ldr	r2, [pc, #516]	; (800526c <HAL_SPI_MspInit+0x248>)
 8005066:	f043 0302 	orr.w	r3, r3, #2
 800506a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800506c:	4b7f      	ldr	r3, [pc, #508]	; (800526c <HAL_SPI_MspInit+0x248>)
 800506e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005070:	f003 0302 	and.w	r3, r3, #2
 8005074:	617b      	str	r3, [r7, #20]
 8005076:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8005078:	2338      	movs	r3, #56	; 0x38
 800507a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800507c:	2302      	movs	r3, #2
 800507e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005080:	2300      	movs	r3, #0
 8005082:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005084:	2300      	movs	r3, #0
 8005086:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005088:	2305      	movs	r3, #5
 800508a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800508c:	f107 031c 	add.w	r3, r7, #28
 8005090:	4619      	mov	r1, r3
 8005092:	4877      	ldr	r0, [pc, #476]	; (8005270 <HAL_SPI_MspInit+0x24c>)
 8005094:	f004 faee 	bl	8009674 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel3;
 8005098:	4b76      	ldr	r3, [pc, #472]	; (8005274 <HAL_SPI_MspInit+0x250>)
 800509a:	4a77      	ldr	r2, [pc, #476]	; (8005278 <HAL_SPI_MspInit+0x254>)
 800509c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800509e:	4b75      	ldr	r3, [pc, #468]	; (8005274 <HAL_SPI_MspInit+0x250>)
 80050a0:	220a      	movs	r2, #10
 80050a2:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80050a4:	4b73      	ldr	r3, [pc, #460]	; (8005274 <HAL_SPI_MspInit+0x250>)
 80050a6:	2200      	movs	r2, #0
 80050a8:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80050aa:	4b72      	ldr	r3, [pc, #456]	; (8005274 <HAL_SPI_MspInit+0x250>)
 80050ac:	2200      	movs	r2, #0
 80050ae:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80050b0:	4b70      	ldr	r3, [pc, #448]	; (8005274 <HAL_SPI_MspInit+0x250>)
 80050b2:	2280      	movs	r2, #128	; 0x80
 80050b4:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80050b6:	4b6f      	ldr	r3, [pc, #444]	; (8005274 <HAL_SPI_MspInit+0x250>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80050bc:	4b6d      	ldr	r3, [pc, #436]	; (8005274 <HAL_SPI_MspInit+0x250>)
 80050be:	2200      	movs	r2, #0
 80050c0:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80050c2:	4b6c      	ldr	r3, [pc, #432]	; (8005274 <HAL_SPI_MspInit+0x250>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80050c8:	4b6a      	ldr	r3, [pc, #424]	; (8005274 <HAL_SPI_MspInit+0x250>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80050ce:	4869      	ldr	r0, [pc, #420]	; (8005274 <HAL_SPI_MspInit+0x250>)
 80050d0:	f002 fe92 	bl	8007df8 <HAL_DMA_Init>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d001      	beq.n	80050de <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 80050da:	f7ff ff21 	bl	8004f20 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a64      	ldr	r2, [pc, #400]	; (8005274 <HAL_SPI_MspInit+0x250>)
 80050e2:	659a      	str	r2, [r3, #88]	; 0x58
 80050e4:	4a63      	ldr	r2, [pc, #396]	; (8005274 <HAL_SPI_MspInit+0x250>)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel4;
 80050ea:	4b64      	ldr	r3, [pc, #400]	; (800527c <HAL_SPI_MspInit+0x258>)
 80050ec:	4a64      	ldr	r2, [pc, #400]	; (8005280 <HAL_SPI_MspInit+0x25c>)
 80050ee:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80050f0:	4b62      	ldr	r3, [pc, #392]	; (800527c <HAL_SPI_MspInit+0x258>)
 80050f2:	220b      	movs	r2, #11
 80050f4:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80050f6:	4b61      	ldr	r3, [pc, #388]	; (800527c <HAL_SPI_MspInit+0x258>)
 80050f8:	2210      	movs	r2, #16
 80050fa:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80050fc:	4b5f      	ldr	r3, [pc, #380]	; (800527c <HAL_SPI_MspInit+0x258>)
 80050fe:	2200      	movs	r2, #0
 8005100:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005102:	4b5e      	ldr	r3, [pc, #376]	; (800527c <HAL_SPI_MspInit+0x258>)
 8005104:	2280      	movs	r2, #128	; 0x80
 8005106:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005108:	4b5c      	ldr	r3, [pc, #368]	; (800527c <HAL_SPI_MspInit+0x258>)
 800510a:	2200      	movs	r2, #0
 800510c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800510e:	4b5b      	ldr	r3, [pc, #364]	; (800527c <HAL_SPI_MspInit+0x258>)
 8005110:	2200      	movs	r2, #0
 8005112:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8005114:	4b59      	ldr	r3, [pc, #356]	; (800527c <HAL_SPI_MspInit+0x258>)
 8005116:	2200      	movs	r2, #0
 8005118:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800511a:	4b58      	ldr	r3, [pc, #352]	; (800527c <HAL_SPI_MspInit+0x258>)
 800511c:	2200      	movs	r2, #0
 800511e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8005120:	4856      	ldr	r0, [pc, #344]	; (800527c <HAL_SPI_MspInit+0x258>)
 8005122:	f002 fe69 	bl	8007df8 <HAL_DMA_Init>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d001      	beq.n	8005130 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 800512c:	f7ff fef8 	bl	8004f20 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a52      	ldr	r2, [pc, #328]	; (800527c <HAL_SPI_MspInit+0x258>)
 8005134:	655a      	str	r2, [r3, #84]	; 0x54
 8005136:	4a51      	ldr	r2, [pc, #324]	; (800527c <HAL_SPI_MspInit+0x258>)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800513c:	2200      	movs	r2, #0
 800513e:	2100      	movs	r1, #0
 8005140:	2023      	movs	r0, #35	; 0x23
 8005142:	f002 fbe0 	bl	8007906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8005146:	2023      	movs	r0, #35	; 0x23
 8005148:	f002 fbf7 	bl	800793a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800514c:	e088      	b.n	8005260 <HAL_SPI_MspInit+0x23c>
  else if(spiHandle->Instance==SPI3)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a4c      	ldr	r2, [pc, #304]	; (8005284 <HAL_SPI_MspInit+0x260>)
 8005154:	4293      	cmp	r3, r2
 8005156:	f040 8083 	bne.w	8005260 <HAL_SPI_MspInit+0x23c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800515a:	4b44      	ldr	r3, [pc, #272]	; (800526c <HAL_SPI_MspInit+0x248>)
 800515c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800515e:	4a43      	ldr	r2, [pc, #268]	; (800526c <HAL_SPI_MspInit+0x248>)
 8005160:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005164:	6593      	str	r3, [r2, #88]	; 0x58
 8005166:	4b41      	ldr	r3, [pc, #260]	; (800526c <HAL_SPI_MspInit+0x248>)
 8005168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800516a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800516e:	613b      	str	r3, [r7, #16]
 8005170:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005172:	4b3e      	ldr	r3, [pc, #248]	; (800526c <HAL_SPI_MspInit+0x248>)
 8005174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005176:	4a3d      	ldr	r2, [pc, #244]	; (800526c <HAL_SPI_MspInit+0x248>)
 8005178:	f043 0304 	orr.w	r3, r3, #4
 800517c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800517e:	4b3b      	ldr	r3, [pc, #236]	; (800526c <HAL_SPI_MspInit+0x248>)
 8005180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005182:	f003 0304 	and.w	r3, r3, #4
 8005186:	60fb      	str	r3, [r7, #12]
 8005188:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800518a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800518e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005190:	2302      	movs	r3, #2
 8005192:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005194:	2300      	movs	r3, #0
 8005196:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005198:	2300      	movs	r3, #0
 800519a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800519c:	2306      	movs	r3, #6
 800519e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051a0:	f107 031c 	add.w	r3, r7, #28
 80051a4:	4619      	mov	r1, r3
 80051a6:	4838      	ldr	r0, [pc, #224]	; (8005288 <HAL_SPI_MspInit+0x264>)
 80051a8:	f004 fa64 	bl	8009674 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA2_Channel1;
 80051ac:	4b37      	ldr	r3, [pc, #220]	; (800528c <HAL_SPI_MspInit+0x268>)
 80051ae:	4a38      	ldr	r2, [pc, #224]	; (8005290 <HAL_SPI_MspInit+0x26c>)
 80051b0:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 80051b2:	4b36      	ldr	r3, [pc, #216]	; (800528c <HAL_SPI_MspInit+0x268>)
 80051b4:	220e      	movs	r2, #14
 80051b6:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80051b8:	4b34      	ldr	r3, [pc, #208]	; (800528c <HAL_SPI_MspInit+0x268>)
 80051ba:	2200      	movs	r2, #0
 80051bc:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80051be:	4b33      	ldr	r3, [pc, #204]	; (800528c <HAL_SPI_MspInit+0x268>)
 80051c0:	2200      	movs	r2, #0
 80051c2:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80051c4:	4b31      	ldr	r3, [pc, #196]	; (800528c <HAL_SPI_MspInit+0x268>)
 80051c6:	2280      	movs	r2, #128	; 0x80
 80051c8:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80051ca:	4b30      	ldr	r3, [pc, #192]	; (800528c <HAL_SPI_MspInit+0x268>)
 80051cc:	2200      	movs	r2, #0
 80051ce:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80051d0:	4b2e      	ldr	r3, [pc, #184]	; (800528c <HAL_SPI_MspInit+0x268>)
 80051d2:	2200      	movs	r2, #0
 80051d4:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 80051d6:	4b2d      	ldr	r3, [pc, #180]	; (800528c <HAL_SPI_MspInit+0x268>)
 80051d8:	2200      	movs	r2, #0
 80051da:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80051dc:	4b2b      	ldr	r3, [pc, #172]	; (800528c <HAL_SPI_MspInit+0x268>)
 80051de:	2200      	movs	r2, #0
 80051e0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 80051e2:	482a      	ldr	r0, [pc, #168]	; (800528c <HAL_SPI_MspInit+0x268>)
 80051e4:	f002 fe08 	bl	8007df8 <HAL_DMA_Init>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d001      	beq.n	80051f2 <HAL_SPI_MspInit+0x1ce>
      Error_Handler();
 80051ee:	f7ff fe97 	bl	8004f20 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a25      	ldr	r2, [pc, #148]	; (800528c <HAL_SPI_MspInit+0x268>)
 80051f6:	659a      	str	r2, [r3, #88]	; 0x58
 80051f8:	4a24      	ldr	r2, [pc, #144]	; (800528c <HAL_SPI_MspInit+0x268>)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_spi3_tx.Instance = DMA2_Channel2;
 80051fe:	4b25      	ldr	r3, [pc, #148]	; (8005294 <HAL_SPI_MspInit+0x270>)
 8005200:	4a25      	ldr	r2, [pc, #148]	; (8005298 <HAL_SPI_MspInit+0x274>)
 8005202:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 8005204:	4b23      	ldr	r3, [pc, #140]	; (8005294 <HAL_SPI_MspInit+0x270>)
 8005206:	220f      	movs	r2, #15
 8005208:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800520a:	4b22      	ldr	r3, [pc, #136]	; (8005294 <HAL_SPI_MspInit+0x270>)
 800520c:	2210      	movs	r2, #16
 800520e:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005210:	4b20      	ldr	r3, [pc, #128]	; (8005294 <HAL_SPI_MspInit+0x270>)
 8005212:	2200      	movs	r2, #0
 8005214:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005216:	4b1f      	ldr	r3, [pc, #124]	; (8005294 <HAL_SPI_MspInit+0x270>)
 8005218:	2280      	movs	r2, #128	; 0x80
 800521a:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800521c:	4b1d      	ldr	r3, [pc, #116]	; (8005294 <HAL_SPI_MspInit+0x270>)
 800521e:	2200      	movs	r2, #0
 8005220:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005222:	4b1c      	ldr	r3, [pc, #112]	; (8005294 <HAL_SPI_MspInit+0x270>)
 8005224:	2200      	movs	r2, #0
 8005226:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8005228:	4b1a      	ldr	r3, [pc, #104]	; (8005294 <HAL_SPI_MspInit+0x270>)
 800522a:	2200      	movs	r2, #0
 800522c:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800522e:	4b19      	ldr	r3, [pc, #100]	; (8005294 <HAL_SPI_MspInit+0x270>)
 8005230:	2200      	movs	r2, #0
 8005232:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8005234:	4817      	ldr	r0, [pc, #92]	; (8005294 <HAL_SPI_MspInit+0x270>)
 8005236:	f002 fddf 	bl	8007df8 <HAL_DMA_Init>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d001      	beq.n	8005244 <HAL_SPI_MspInit+0x220>
      Error_Handler();
 8005240:	f7ff fe6e 	bl	8004f20 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a13      	ldr	r2, [pc, #76]	; (8005294 <HAL_SPI_MspInit+0x270>)
 8005248:	655a      	str	r2, [r3, #84]	; 0x54
 800524a:	4a12      	ldr	r2, [pc, #72]	; (8005294 <HAL_SPI_MspInit+0x270>)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8005250:	2200      	movs	r2, #0
 8005252:	2100      	movs	r1, #0
 8005254:	2033      	movs	r0, #51	; 0x33
 8005256:	f002 fb56 	bl	8007906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800525a:	2033      	movs	r0, #51	; 0x33
 800525c:	f002 fb6d 	bl	800793a <HAL_NVIC_EnableIRQ>
}
 8005260:	bf00      	nop
 8005262:	3730      	adds	r7, #48	; 0x30
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	40013000 	.word	0x40013000
 800526c:	40021000 	.word	0x40021000
 8005270:	48000400 	.word	0x48000400
 8005274:	20001d3c 	.word	0x20001d3c
 8005278:	40020030 	.word	0x40020030
 800527c:	20001d9c 	.word	0x20001d9c
 8005280:	40020044 	.word	0x40020044
 8005284:	40003c00 	.word	0x40003c00
 8005288:	48000800 	.word	0x48000800
 800528c:	20001dfc 	.word	0x20001dfc
 8005290:	40020408 	.word	0x40020408
 8005294:	20001e5c 	.word	0x20001e5c
 8005298:	4002041c 	.word	0x4002041c

0800529c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052a2:	4b0f      	ldr	r3, [pc, #60]	; (80052e0 <HAL_MspInit+0x44>)
 80052a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052a6:	4a0e      	ldr	r2, [pc, #56]	; (80052e0 <HAL_MspInit+0x44>)
 80052a8:	f043 0301 	orr.w	r3, r3, #1
 80052ac:	6613      	str	r3, [r2, #96]	; 0x60
 80052ae:	4b0c      	ldr	r3, [pc, #48]	; (80052e0 <HAL_MspInit+0x44>)
 80052b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	607b      	str	r3, [r7, #4]
 80052b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80052ba:	4b09      	ldr	r3, [pc, #36]	; (80052e0 <HAL_MspInit+0x44>)
 80052bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052be:	4a08      	ldr	r2, [pc, #32]	; (80052e0 <HAL_MspInit+0x44>)
 80052c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052c4:	6593      	str	r3, [r2, #88]	; 0x58
 80052c6:	4b06      	ldr	r3, [pc, #24]	; (80052e0 <HAL_MspInit+0x44>)
 80052c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052ce:	603b      	str	r3, [r7, #0]
 80052d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80052d2:	f004 fc0d 	bl	8009af0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80052d6:	bf00      	nop
 80052d8:	3708      	adds	r7, #8
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	40021000 	.word	0x40021000

080052e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80052e4:	b480      	push	{r7}
 80052e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80052e8:	e7fe      	b.n	80052e8 <NMI_Handler+0x4>
	...

080052ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80052ec:	b480      	push	{r7}
 80052ee:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  TIM1->CCR1 = 0;
 80052f0:	4b04      	ldr	r3, [pc, #16]	; (8005304 <HardFault_Handler+0x18>)
 80052f2:	2200      	movs	r2, #0
 80052f4:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM1->CCR2 = 0;
 80052f6:	4b03      	ldr	r3, [pc, #12]	; (8005304 <HardFault_Handler+0x18>)
 80052f8:	2200      	movs	r2, #0
 80052fa:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM1->CCR3 = 0;
 80052fc:	4b01      	ldr	r3, [pc, #4]	; (8005304 <HardFault_Handler+0x18>)
 80052fe:	2200      	movs	r2, #0
 8005300:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM1->CCR1 = 0;
 8005302:	e7f5      	b.n	80052f0 <HardFault_Handler+0x4>
 8005304:	40012c00 	.word	0x40012c00

08005308 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005308:	b480      	push	{r7}
 800530a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800530c:	e7fe      	b.n	800530c <MemManage_Handler+0x4>

0800530e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800530e:	b480      	push	{r7}
 8005310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005312:	e7fe      	b.n	8005312 <BusFault_Handler+0x4>

08005314 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005314:	b480      	push	{r7}
 8005316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005318:	e7fe      	b.n	8005318 <UsageFault_Handler+0x4>

0800531a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800531a:	b480      	push	{r7}
 800531c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800531e:	bf00      	nop
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005328:	b480      	push	{r7}
 800532a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800532c:	bf00      	nop
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr

08005336 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005336:	b480      	push	{r7}
 8005338:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800533a:	bf00      	nop
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005348:	f000 fcfe 	bl	8005d48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800534c:	bf00      	nop
 800534e:	bd80      	pop	{r7, pc}

08005350 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005354:	4802      	ldr	r0, [pc, #8]	; (8005360 <DMA1_Channel1_IRQHandler+0x10>)
 8005356:	f002 ff32 	bl	80081be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800535a:	bf00      	nop
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	200019b8 	.word	0x200019b8

08005364 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8005368:	4802      	ldr	r0, [pc, #8]	; (8005374 <DMA1_Channel2_IRQHandler+0x10>)
 800536a:	f002 ff28 	bl	80081be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800536e:	bf00      	nop
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	20001a18 	.word	0x20001a18

08005378 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800537c:	4802      	ldr	r0, [pc, #8]	; (8005388 <DMA1_Channel3_IRQHandler+0x10>)
 800537e:	f002 ff1e 	bl	80081be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8005382:	bf00      	nop
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	20001d3c 	.word	0x20001d3c

0800538c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8005390:	4802      	ldr	r0, [pc, #8]	; (800539c <DMA1_Channel4_IRQHandler+0x10>)
 8005392:	f002 ff14 	bl	80081be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8005396:	bf00      	nop
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	20001d9c 	.word	0x20001d9c

080053a0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_fmac_preload);
 80053a4:	4802      	ldr	r0, [pc, #8]	; (80053b0 <DMA1_Channel5_IRQHandler+0x10>)
 80053a6:	f002 ff0a 	bl	80081be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80053aa:	bf00      	nop
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	20001b54 	.word	0x20001b54

080053b4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_fmac_read);
 80053b8:	4802      	ldr	r0, [pc, #8]	; (80053c4 <DMA1_Channel6_IRQHandler+0x10>)
 80053ba:	f002 ff00 	bl	80081be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80053be:	bf00      	nop
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	20001bb4 	.word	0x20001bb4

080053c8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80053cc:	4803      	ldr	r0, [pc, #12]	; (80053dc <ADC1_2_IRQHandler+0x14>)
 80053ce:	f001 f97d 	bl	80066cc <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80053d2:	4803      	ldr	r0, [pc, #12]	; (80053e0 <ADC1_2_IRQHandler+0x18>)
 80053d4:	f001 f97a 	bl	80066cc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80053d8:	bf00      	nop
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	200018e0 	.word	0x200018e0
 80053e0:	2000194c 	.word	0x2000194c

080053e4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80053e8:	4802      	ldr	r0, [pc, #8]	; (80053f4 <FDCAN1_IT0_IRQHandler+0x10>)
 80053ea:	f003 fbbd 	bl	8008b68 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80053ee:	bf00      	nop
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	20001ab8 	.word	0x20001ab8

080053f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80053fc:	4802      	ldr	r0, [pc, #8]	; (8005408 <TIM2_IRQHandler+0x10>)
 80053fe:	f006 fbcb 	bl	800bb98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005402:	bf00      	nop
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	20001f0c 	.word	0x20001f0c

0800540c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005410:	4802      	ldr	r0, [pc, #8]	; (800541c <TIM3_IRQHandler+0x10>)
 8005412:	f006 fbc1 	bl	800bb98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005416:	bf00      	nop
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	20001f58 	.word	0x20001f58

08005420 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8005424:	4802      	ldr	r0, [pc, #8]	; (8005430 <SPI1_IRQHandler+0x10>)
 8005426:	f005 fd11 	bl	800ae4c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800542a:	bf00      	nop
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	20001c74 	.word	0x20001c74

08005434 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005438:	4802      	ldr	r0, [pc, #8]	; (8005444 <USART1_IRQHandler+0x10>)
 800543a:	f007 ff2d 	bl	800d298 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800543e:	bf00      	nop
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	20001fa4 	.word	0x20001fa4

08005448 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800544c:	4802      	ldr	r0, [pc, #8]	; (8005458 <SPI3_IRQHandler+0x10>)
 800544e:	f005 fcfd 	bl	800ae4c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8005452:	bf00      	nop
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	20001cd8 	.word	0x20001cd8

0800545c <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8005460:	4802      	ldr	r0, [pc, #8]	; (800546c <DMA2_Channel1_IRQHandler+0x10>)
 8005462:	f002 feac 	bl	80081be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8005466:	bf00      	nop
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	20001dfc 	.word	0x20001dfc

08005470 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8005474:	4802      	ldr	r0, [pc, #8]	; (8005480 <DMA2_Channel2_IRQHandler+0x10>)
 8005476:	f002 fea2 	bl	80081be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 800547a:	bf00      	nop
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	20001e5c 	.word	0x20001e5c

08005484 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8005488:	4802      	ldr	r0, [pc, #8]	; (8005494 <DMA2_Channel3_IRQHandler+0x10>)
 800548a:	f002 fe98 	bl	80081be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 800548e:	bf00      	nop
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	20002034 	.word	0x20002034

08005498 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_fmac_write);
 800549c:	4802      	ldr	r0, [pc, #8]	; (80054a8 <DMA2_Channel4_IRQHandler+0x10>)
 800549e:	f002 fe8e 	bl	80081be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 80054a2:	bf00      	nop
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	20001c14 	.word	0x20001c14

080054ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80054ac:	b480      	push	{r7}
 80054ae:	af00      	add	r7, sp, #0
  return 1;
 80054b0:	2301      	movs	r3, #1
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <_kill>:

int _kill(int pid, int sig)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80054c6:	f009 ff55 	bl	800f374 <__errno>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2216      	movs	r2, #22
 80054ce:	601a      	str	r2, [r3, #0]
  return -1;
 80054d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3708      	adds	r7, #8
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <_exit>:

void _exit (int status)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80054e4:	f04f 31ff 	mov.w	r1, #4294967295
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f7ff ffe7 	bl	80054bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80054ee:	e7fe      	b.n	80054ee <_exit+0x12>

080054f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b086      	sub	sp, #24
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054fc:	2300      	movs	r3, #0
 80054fe:	617b      	str	r3, [r7, #20]
 8005500:	e00a      	b.n	8005518 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005502:	f3af 8000 	nop.w
 8005506:	4601      	mov	r1, r0
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	1c5a      	adds	r2, r3, #1
 800550c:	60ba      	str	r2, [r7, #8]
 800550e:	b2ca      	uxtb	r2, r1
 8005510:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	3301      	adds	r3, #1
 8005516:	617b      	str	r3, [r7, #20]
 8005518:	697a      	ldr	r2, [r7, #20]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	429a      	cmp	r2, r3
 800551e:	dbf0      	blt.n	8005502 <_read+0x12>
  }

  return len;
 8005520:	687b      	ldr	r3, [r7, #4]
}
 8005522:	4618      	mov	r0, r3
 8005524:	3718      	adds	r7, #24
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}

0800552a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800552a:	b580      	push	{r7, lr}
 800552c:	b086      	sub	sp, #24
 800552e:	af00      	add	r7, sp, #0
 8005530:	60f8      	str	r0, [r7, #12]
 8005532:	60b9      	str	r1, [r7, #8]
 8005534:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005536:	2300      	movs	r3, #0
 8005538:	617b      	str	r3, [r7, #20]
 800553a:	e009      	b.n	8005550 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	1c5a      	adds	r2, r3, #1
 8005540:	60ba      	str	r2, [r7, #8]
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	4618      	mov	r0, r3
 8005546:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	3301      	adds	r3, #1
 800554e:	617b      	str	r3, [r7, #20]
 8005550:	697a      	ldr	r2, [r7, #20]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	429a      	cmp	r2, r3
 8005556:	dbf1      	blt.n	800553c <_write+0x12>
  }
  return len;
 8005558:	687b      	ldr	r3, [r7, #4]
}
 800555a:	4618      	mov	r0, r3
 800555c:	3718      	adds	r7, #24
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <_close>:

int _close(int file)
{
 8005562:	b480      	push	{r7}
 8005564:	b083      	sub	sp, #12
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800556a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800556e:	4618      	mov	r0, r3
 8005570:	370c      	adds	r7, #12
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr

0800557a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800557a:	b480      	push	{r7}
 800557c:	b083      	sub	sp, #12
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
 8005582:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800558a:	605a      	str	r2, [r3, #4]
  return 0;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	370c      	adds	r7, #12
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr

0800559a <_isatty>:

int _isatty(int file)
{
 800559a:	b480      	push	{r7}
 800559c:	b083      	sub	sp, #12
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80055a2:	2301      	movs	r3, #1
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b085      	sub	sp, #20
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3714      	adds	r7, #20
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr
	...

080055cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b086      	sub	sp, #24
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80055d4:	4a14      	ldr	r2, [pc, #80]	; (8005628 <_sbrk+0x5c>)
 80055d6:	4b15      	ldr	r3, [pc, #84]	; (800562c <_sbrk+0x60>)
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80055e0:	4b13      	ldr	r3, [pc, #76]	; (8005630 <_sbrk+0x64>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d102      	bne.n	80055ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80055e8:	4b11      	ldr	r3, [pc, #68]	; (8005630 <_sbrk+0x64>)
 80055ea:	4a12      	ldr	r2, [pc, #72]	; (8005634 <_sbrk+0x68>)
 80055ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80055ee:	4b10      	ldr	r3, [pc, #64]	; (8005630 <_sbrk+0x64>)
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4413      	add	r3, r2
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d207      	bcs.n	800560c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80055fc:	f009 feba 	bl	800f374 <__errno>
 8005600:	4603      	mov	r3, r0
 8005602:	220c      	movs	r2, #12
 8005604:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005606:	f04f 33ff 	mov.w	r3, #4294967295
 800560a:	e009      	b.n	8005620 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800560c:	4b08      	ldr	r3, [pc, #32]	; (8005630 <_sbrk+0x64>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005612:	4b07      	ldr	r3, [pc, #28]	; (8005630 <_sbrk+0x64>)
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4413      	add	r3, r2
 800561a:	4a05      	ldr	r2, [pc, #20]	; (8005630 <_sbrk+0x64>)
 800561c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800561e:	68fb      	ldr	r3, [r7, #12]
}
 8005620:	4618      	mov	r0, r3
 8005622:	3718      	adds	r7, #24
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	20008000 	.word	0x20008000
 800562c:	00000400 	.word	0x00000400
 8005630:	20001ebc 	.word	0x20001ebc
 8005634:	200021e8 	.word	0x200021e8

08005638 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005638:	b480      	push	{r7}
 800563a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800563c:	4b06      	ldr	r3, [pc, #24]	; (8005658 <SystemInit+0x20>)
 800563e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005642:	4a05      	ldr	r2, [pc, #20]	; (8005658 <SystemInit+0x20>)
 8005644:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005648:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800564c:	bf00      	nop
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	e000ed00 	.word	0xe000ed00

0800565c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b09c      	sub	sp, #112	; 0x70
 8005660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005662:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005666:	2200      	movs	r2, #0
 8005668:	601a      	str	r2, [r3, #0]
 800566a:	605a      	str	r2, [r3, #4]
 800566c:	609a      	str	r2, [r3, #8]
 800566e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005670:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005674:	2200      	movs	r2, #0
 8005676:	601a      	str	r2, [r3, #0]
 8005678:	605a      	str	r2, [r3, #4]
 800567a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800567c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005680:	2200      	movs	r2, #0
 8005682:	601a      	str	r2, [r3, #0]
 8005684:	605a      	str	r2, [r3, #4]
 8005686:	609a      	str	r2, [r3, #8]
 8005688:	60da      	str	r2, [r3, #12]
 800568a:	611a      	str	r2, [r3, #16]
 800568c:	615a      	str	r2, [r3, #20]
 800568e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005690:	1d3b      	adds	r3, r7, #4
 8005692:	2234      	movs	r2, #52	; 0x34
 8005694:	2100      	movs	r1, #0
 8005696:	4618      	mov	r0, r3
 8005698:	f009 fe1a 	bl	800f2d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800569c:	4b51      	ldr	r3, [pc, #324]	; (80057e4 <MX_TIM1_Init+0x188>)
 800569e:	4a52      	ldr	r2, [pc, #328]	; (80057e8 <MX_TIM1_Init+0x18c>)
 80056a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80056a2:	4b50      	ldr	r3, [pc, #320]	; (80057e4 <MX_TIM1_Init+0x188>)
 80056a4:	2200      	movs	r2, #0
 80056a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80056a8:	4b4e      	ldr	r3, [pc, #312]	; (80057e4 <MX_TIM1_Init+0x188>)
 80056aa:	2220      	movs	r2, #32
 80056ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1499;
 80056ae:	4b4d      	ldr	r3, [pc, #308]	; (80057e4 <MX_TIM1_Init+0x188>)
 80056b0:	f240 52db 	movw	r2, #1499	; 0x5db
 80056b4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80056b6:	4b4b      	ldr	r3, [pc, #300]	; (80057e4 <MX_TIM1_Init+0x188>)
 80056b8:	2200      	movs	r2, #0
 80056ba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80056bc:	4b49      	ldr	r3, [pc, #292]	; (80057e4 <MX_TIM1_Init+0x188>)
 80056be:	2200      	movs	r2, #0
 80056c0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80056c2:	4b48      	ldr	r3, [pc, #288]	; (80057e4 <MX_TIM1_Init+0x188>)
 80056c4:	2280      	movs	r2, #128	; 0x80
 80056c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80056c8:	4846      	ldr	r0, [pc, #280]	; (80057e4 <MX_TIM1_Init+0x188>)
 80056ca:	f005 ff85 	bl	800b5d8 <HAL_TIM_Base_Init>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d001      	beq.n	80056d8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80056d4:	f7ff fc24 	bl	8004f20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80056d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056dc:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80056de:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80056e2:	4619      	mov	r1, r3
 80056e4:	483f      	ldr	r0, [pc, #252]	; (80057e4 <MX_TIM1_Init+0x188>)
 80056e6:	f006 fceb 	bl	800c0c0 <HAL_TIM_ConfigClockSource>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d001      	beq.n	80056f4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80056f0:	f7ff fc16 	bl	8004f20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80056f4:	483b      	ldr	r0, [pc, #236]	; (80057e4 <MX_TIM1_Init+0x188>)
 80056f6:	f006 f857 	bl	800b7a8 <HAL_TIM_PWM_Init>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d001      	beq.n	8005704 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8005700:	f7ff fc0e 	bl	8004f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005704:	2300      	movs	r3, #0
 8005706:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005708:	2300      	movs	r3, #0
 800570a:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800570c:	2300      	movs	r3, #0
 800570e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005710:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005714:	4619      	mov	r1, r3
 8005716:	4833      	ldr	r0, [pc, #204]	; (80057e4 <MX_TIM1_Init+0x188>)
 8005718:	f007 fb4e 	bl	800cdb8 <HAL_TIMEx_MasterConfigSynchronization>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d001      	beq.n	8005726 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8005722:	f7ff fbfd 	bl	8004f20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005726:	2360      	movs	r3, #96	; 0x60
 8005728:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800572a:	2300      	movs	r3, #0
 800572c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800572e:	2302      	movs	r3, #2
 8005730:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8005732:	2308      	movs	r3, #8
 8005734:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005736:	2300      	movs	r3, #0
 8005738:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800573a:	2300      	movs	r3, #0
 800573c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800573e:	2300      	movs	r3, #0
 8005740:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005742:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005746:	2200      	movs	r2, #0
 8005748:	4619      	mov	r1, r3
 800574a:	4826      	ldr	r0, [pc, #152]	; (80057e4 <MX_TIM1_Init+0x188>)
 800574c:	f006 fba4 	bl	800be98 <HAL_TIM_PWM_ConfigChannel>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d001      	beq.n	800575a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8005756:	f7ff fbe3 	bl	8004f20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800575a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800575e:	2204      	movs	r2, #4
 8005760:	4619      	mov	r1, r3
 8005762:	4820      	ldr	r0, [pc, #128]	; (80057e4 <MX_TIM1_Init+0x188>)
 8005764:	f006 fb98 	bl	800be98 <HAL_TIM_PWM_ConfigChannel>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d001      	beq.n	8005772 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800576e:	f7ff fbd7 	bl	8004f20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005772:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005776:	2208      	movs	r2, #8
 8005778:	4619      	mov	r1, r3
 800577a:	481a      	ldr	r0, [pc, #104]	; (80057e4 <MX_TIM1_Init+0x188>)
 800577c:	f006 fb8c 	bl	800be98 <HAL_TIM_PWM_ConfigChannel>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d001      	beq.n	800578a <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8005786:	f7ff fbcb 	bl	8004f20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800578a:	2300      	movs	r3, #0
 800578c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800578e:	2300      	movs	r3, #0
 8005790:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005792:	2300      	movs	r3, #0
 8005794:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005796:	2300      	movs	r3, #0
 8005798:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800579a:	2300      	movs	r3, #0
 800579c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800579e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80057a2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80057a4:	2300      	movs	r3, #0
 80057a6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80057a8:	2300      	movs	r3, #0
 80057aa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80057ac:	2300      	movs	r3, #0
 80057ae:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80057b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80057b6:	2300      	movs	r3, #0
 80057b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80057ba:	2300      	movs	r3, #0
 80057bc:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80057be:	2300      	movs	r3, #0
 80057c0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80057c2:	1d3b      	adds	r3, r7, #4
 80057c4:	4619      	mov	r1, r3
 80057c6:	4807      	ldr	r0, [pc, #28]	; (80057e4 <MX_TIM1_Init+0x188>)
 80057c8:	f007 fb78 	bl	800cebc <HAL_TIMEx_ConfigBreakDeadTime>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d001      	beq.n	80057d6 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 80057d2:	f7ff fba5 	bl	8004f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80057d6:	4803      	ldr	r0, [pc, #12]	; (80057e4 <MX_TIM1_Init+0x188>)
 80057d8:	f000 f8f8 	bl	80059cc <HAL_TIM_MspPostInit>

}
 80057dc:	bf00      	nop
 80057de:	3770      	adds	r7, #112	; 0x70
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	20001ec0 	.word	0x20001ec0
 80057e8:	40012c00 	.word	0x40012c00

080057ec <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b088      	sub	sp, #32
 80057f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80057f2:	f107 0310 	add.w	r3, r7, #16
 80057f6:	2200      	movs	r2, #0
 80057f8:	601a      	str	r2, [r3, #0]
 80057fa:	605a      	str	r2, [r3, #4]
 80057fc:	609a      	str	r2, [r3, #8]
 80057fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005800:	1d3b      	adds	r3, r7, #4
 8005802:	2200      	movs	r2, #0
 8005804:	601a      	str	r2, [r3, #0]
 8005806:	605a      	str	r2, [r3, #4]
 8005808:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800580a:	4b1e      	ldr	r3, [pc, #120]	; (8005884 <MX_TIM2_Init+0x98>)
 800580c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005810:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005812:	4b1c      	ldr	r3, [pc, #112]	; (8005884 <MX_TIM2_Init+0x98>)
 8005814:	2200      	movs	r2, #0
 8005816:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005818:	4b1a      	ldr	r3, [pc, #104]	; (8005884 <MX_TIM2_Init+0x98>)
 800581a:	2200      	movs	r2, #0
 800581c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7999;
 800581e:	4b19      	ldr	r3, [pc, #100]	; (8005884 <MX_TIM2_Init+0x98>)
 8005820:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8005824:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005826:	4b17      	ldr	r3, [pc, #92]	; (8005884 <MX_TIM2_Init+0x98>)
 8005828:	2200      	movs	r2, #0
 800582a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800582c:	4b15      	ldr	r3, [pc, #84]	; (8005884 <MX_TIM2_Init+0x98>)
 800582e:	2280      	movs	r2, #128	; 0x80
 8005830:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005832:	4814      	ldr	r0, [pc, #80]	; (8005884 <MX_TIM2_Init+0x98>)
 8005834:	f005 fed0 	bl	800b5d8 <HAL_TIM_Base_Init>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d001      	beq.n	8005842 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800583e:	f7ff fb6f 	bl	8004f20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005842:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005846:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005848:	f107 0310 	add.w	r3, r7, #16
 800584c:	4619      	mov	r1, r3
 800584e:	480d      	ldr	r0, [pc, #52]	; (8005884 <MX_TIM2_Init+0x98>)
 8005850:	f006 fc36 	bl	800c0c0 <HAL_TIM_ConfigClockSource>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d001      	beq.n	800585e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800585a:	f7ff fb61 	bl	8004f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800585e:	2300      	movs	r3, #0
 8005860:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005862:	2300      	movs	r3, #0
 8005864:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005866:	1d3b      	adds	r3, r7, #4
 8005868:	4619      	mov	r1, r3
 800586a:	4806      	ldr	r0, [pc, #24]	; (8005884 <MX_TIM2_Init+0x98>)
 800586c:	f007 faa4 	bl	800cdb8 <HAL_TIMEx_MasterConfigSynchronization>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d001      	beq.n	800587a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8005876:	f7ff fb53 	bl	8004f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800587a:	bf00      	nop
 800587c:	3720      	adds	r7, #32
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	20001f0c 	.word	0x20001f0c

08005888 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b088      	sub	sp, #32
 800588c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800588e:	f107 0310 	add.w	r3, r7, #16
 8005892:	2200      	movs	r2, #0
 8005894:	601a      	str	r2, [r3, #0]
 8005896:	605a      	str	r2, [r3, #4]
 8005898:	609a      	str	r2, [r3, #8]
 800589a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800589c:	1d3b      	adds	r3, r7, #4
 800589e:	2200      	movs	r2, #0
 80058a0:	601a      	str	r2, [r3, #0]
 80058a2:	605a      	str	r2, [r3, #4]
 80058a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80058a6:	4b1d      	ldr	r3, [pc, #116]	; (800591c <MX_TIM3_Init+0x94>)
 80058a8:	4a1d      	ldr	r2, [pc, #116]	; (8005920 <MX_TIM3_Init+0x98>)
 80058aa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3;
 80058ac:	4b1b      	ldr	r3, [pc, #108]	; (800591c <MX_TIM3_Init+0x94>)
 80058ae:	2203      	movs	r2, #3
 80058b0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80058b2:	4b1a      	ldr	r3, [pc, #104]	; (800591c <MX_TIM3_Init+0x94>)
 80058b4:	2200      	movs	r2, #0
 80058b6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7999;
 80058b8:	4b18      	ldr	r3, [pc, #96]	; (800591c <MX_TIM3_Init+0x94>)
 80058ba:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80058be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80058c0:	4b16      	ldr	r3, [pc, #88]	; (800591c <MX_TIM3_Init+0x94>)
 80058c2:	2200      	movs	r2, #0
 80058c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80058c6:	4b15      	ldr	r3, [pc, #84]	; (800591c <MX_TIM3_Init+0x94>)
 80058c8:	2280      	movs	r2, #128	; 0x80
 80058ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80058cc:	4813      	ldr	r0, [pc, #76]	; (800591c <MX_TIM3_Init+0x94>)
 80058ce:	f005 fe83 	bl	800b5d8 <HAL_TIM_Base_Init>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d001      	beq.n	80058dc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80058d8:	f7ff fb22 	bl	8004f20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80058dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80058e2:	f107 0310 	add.w	r3, r7, #16
 80058e6:	4619      	mov	r1, r3
 80058e8:	480c      	ldr	r0, [pc, #48]	; (800591c <MX_TIM3_Init+0x94>)
 80058ea:	f006 fbe9 	bl	800c0c0 <HAL_TIM_ConfigClockSource>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d001      	beq.n	80058f8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80058f4:	f7ff fb14 	bl	8004f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80058f8:	2300      	movs	r3, #0
 80058fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80058fc:	2300      	movs	r3, #0
 80058fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005900:	1d3b      	adds	r3, r7, #4
 8005902:	4619      	mov	r1, r3
 8005904:	4805      	ldr	r0, [pc, #20]	; (800591c <MX_TIM3_Init+0x94>)
 8005906:	f007 fa57 	bl	800cdb8 <HAL_TIMEx_MasterConfigSynchronization>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d001      	beq.n	8005914 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8005910:	f7ff fb06 	bl	8004f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8005914:	bf00      	nop
 8005916:	3720      	adds	r7, #32
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}
 800591c:	20001f58 	.word	0x20001f58
 8005920:	40000400 	.word	0x40000400

08005924 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b086      	sub	sp, #24
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a23      	ldr	r2, [pc, #140]	; (80059c0 <HAL_TIM_Base_MspInit+0x9c>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d10c      	bne.n	8005950 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005936:	4b23      	ldr	r3, [pc, #140]	; (80059c4 <HAL_TIM_Base_MspInit+0xa0>)
 8005938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800593a:	4a22      	ldr	r2, [pc, #136]	; (80059c4 <HAL_TIM_Base_MspInit+0xa0>)
 800593c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005940:	6613      	str	r3, [r2, #96]	; 0x60
 8005942:	4b20      	ldr	r3, [pc, #128]	; (80059c4 <HAL_TIM_Base_MspInit+0xa0>)
 8005944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005946:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800594a:	617b      	str	r3, [r7, #20]
 800594c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800594e:	e032      	b.n	80059b6 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM2)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005958:	d114      	bne.n	8005984 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800595a:	4b1a      	ldr	r3, [pc, #104]	; (80059c4 <HAL_TIM_Base_MspInit+0xa0>)
 800595c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800595e:	4a19      	ldr	r2, [pc, #100]	; (80059c4 <HAL_TIM_Base_MspInit+0xa0>)
 8005960:	f043 0301 	orr.w	r3, r3, #1
 8005964:	6593      	str	r3, [r2, #88]	; 0x58
 8005966:	4b17      	ldr	r3, [pc, #92]	; (80059c4 <HAL_TIM_Base_MspInit+0xa0>)
 8005968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800596a:	f003 0301 	and.w	r3, r3, #1
 800596e:	613b      	str	r3, [r7, #16]
 8005970:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005972:	2200      	movs	r2, #0
 8005974:	2100      	movs	r1, #0
 8005976:	201c      	movs	r0, #28
 8005978:	f001 ffc5 	bl	8007906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800597c:	201c      	movs	r0, #28
 800597e:	f001 ffdc 	bl	800793a <HAL_NVIC_EnableIRQ>
}
 8005982:	e018      	b.n	80059b6 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM3)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a0f      	ldr	r2, [pc, #60]	; (80059c8 <HAL_TIM_Base_MspInit+0xa4>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d113      	bne.n	80059b6 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800598e:	4b0d      	ldr	r3, [pc, #52]	; (80059c4 <HAL_TIM_Base_MspInit+0xa0>)
 8005990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005992:	4a0c      	ldr	r2, [pc, #48]	; (80059c4 <HAL_TIM_Base_MspInit+0xa0>)
 8005994:	f043 0302 	orr.w	r3, r3, #2
 8005998:	6593      	str	r3, [r2, #88]	; 0x58
 800599a:	4b0a      	ldr	r3, [pc, #40]	; (80059c4 <HAL_TIM_Base_MspInit+0xa0>)
 800599c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800599e:	f003 0302 	and.w	r3, r3, #2
 80059a2:	60fb      	str	r3, [r7, #12]
 80059a4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80059a6:	2200      	movs	r2, #0
 80059a8:	2100      	movs	r1, #0
 80059aa:	201d      	movs	r0, #29
 80059ac:	f001 ffab 	bl	8007906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80059b0:	201d      	movs	r0, #29
 80059b2:	f001 ffc2 	bl	800793a <HAL_NVIC_EnableIRQ>
}
 80059b6:	bf00      	nop
 80059b8:	3718      	adds	r7, #24
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	40012c00 	.word	0x40012c00
 80059c4:	40021000 	.word	0x40021000
 80059c8:	40000400 	.word	0x40000400

080059cc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b08a      	sub	sp, #40	; 0x28
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059d4:	f107 0314 	add.w	r3, r7, #20
 80059d8:	2200      	movs	r2, #0
 80059da:	601a      	str	r2, [r3, #0]
 80059dc:	605a      	str	r2, [r3, #4]
 80059de:	609a      	str	r2, [r3, #8]
 80059e0:	60da      	str	r2, [r3, #12]
 80059e2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a28      	ldr	r2, [pc, #160]	; (8005a8c <HAL_TIM_MspPostInit+0xc0>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d149      	bne.n	8005a82 <HAL_TIM_MspPostInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80059ee:	4b28      	ldr	r3, [pc, #160]	; (8005a90 <HAL_TIM_MspPostInit+0xc4>)
 80059f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059f2:	4a27      	ldr	r2, [pc, #156]	; (8005a90 <HAL_TIM_MspPostInit+0xc4>)
 80059f4:	f043 0304 	orr.w	r3, r3, #4
 80059f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80059fa:	4b25      	ldr	r3, [pc, #148]	; (8005a90 <HAL_TIM_MspPostInit+0xc4>)
 80059fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059fe:	f003 0304 	and.w	r3, r3, #4
 8005a02:	613b      	str	r3, [r7, #16]
 8005a04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a06:	4b22      	ldr	r3, [pc, #136]	; (8005a90 <HAL_TIM_MspPostInit+0xc4>)
 8005a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a0a:	4a21      	ldr	r2, [pc, #132]	; (8005a90 <HAL_TIM_MspPostInit+0xc4>)
 8005a0c:	f043 0302 	orr.w	r3, r3, #2
 8005a10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005a12:	4b1f      	ldr	r3, [pc, #124]	; (8005a90 <HAL_TIM_MspPostInit+0xc4>)
 8005a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a16:	f003 0302 	and.w	r3, r3, #2
 8005a1a:	60fb      	str	r3, [r7, #12]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> TIM1_CH3
    PB13     ------> TIM1_CH1N
    PB14     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8005a1e:	2307      	movs	r3, #7
 8005a20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a22:	2302      	movs	r3, #2
 8005a24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a26:	2300      	movs	r3, #0
 8005a28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8005a2e:	2302      	movs	r3, #2
 8005a30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a32:	f107 0314 	add.w	r3, r7, #20
 8005a36:	4619      	mov	r1, r3
 8005a38:	4816      	ldr	r0, [pc, #88]	; (8005a94 <HAL_TIM_MspPostInit+0xc8>)
 8005a3a:	f003 fe1b 	bl	8009674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8005a3e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8005a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a44:	2302      	movs	r3, #2
 8005a46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8005a50:	2306      	movs	r3, #6
 8005a52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a54:	f107 0314 	add.w	r3, r7, #20
 8005a58:	4619      	mov	r1, r3
 8005a5a:	480f      	ldr	r0, [pc, #60]	; (8005a98 <HAL_TIM_MspPostInit+0xcc>)
 8005a5c:	f003 fe0a 	bl	8009674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005a60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a66:	2302      	movs	r3, #2
 8005a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8005a72:	2304      	movs	r3, #4
 8005a74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a76:	f107 0314 	add.w	r3, r7, #20
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	4806      	ldr	r0, [pc, #24]	; (8005a98 <HAL_TIM_MspPostInit+0xcc>)
 8005a7e:	f003 fdf9 	bl	8009674 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005a82:	bf00      	nop
 8005a84:	3728      	adds	r7, #40	; 0x28
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	40012c00 	.word	0x40012c00
 8005a90:	40021000 	.word	0x40021000
 8005a94:	48000800 	.word	0x48000800
 8005a98:	48000400 	.word	0x48000400

08005a9c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005aa0:	4b22      	ldr	r3, [pc, #136]	; (8005b2c <MX_USART1_UART_Init+0x90>)
 8005aa2:	4a23      	ldr	r2, [pc, #140]	; (8005b30 <MX_USART1_UART_Init+0x94>)
 8005aa4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8005aa6:	4b21      	ldr	r3, [pc, #132]	; (8005b2c <MX_USART1_UART_Init+0x90>)
 8005aa8:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8005aac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005aae:	4b1f      	ldr	r3, [pc, #124]	; (8005b2c <MX_USART1_UART_Init+0x90>)
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005ab4:	4b1d      	ldr	r3, [pc, #116]	; (8005b2c <MX_USART1_UART_Init+0x90>)
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005aba:	4b1c      	ldr	r3, [pc, #112]	; (8005b2c <MX_USART1_UART_Init+0x90>)
 8005abc:	2200      	movs	r2, #0
 8005abe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005ac0:	4b1a      	ldr	r3, [pc, #104]	; (8005b2c <MX_USART1_UART_Init+0x90>)
 8005ac2:	220c      	movs	r2, #12
 8005ac4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005ac6:	4b19      	ldr	r3, [pc, #100]	; (8005b2c <MX_USART1_UART_Init+0x90>)
 8005ac8:	2200      	movs	r2, #0
 8005aca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005acc:	4b17      	ldr	r3, [pc, #92]	; (8005b2c <MX_USART1_UART_Init+0x90>)
 8005ace:	2200      	movs	r2, #0
 8005ad0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005ad2:	4b16      	ldr	r3, [pc, #88]	; (8005b2c <MX_USART1_UART_Init+0x90>)
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005ad8:	4b14      	ldr	r3, [pc, #80]	; (8005b2c <MX_USART1_UART_Init+0x90>)
 8005ada:	2200      	movs	r2, #0
 8005adc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005ade:	4b13      	ldr	r3, [pc, #76]	; (8005b2c <MX_USART1_UART_Init+0x90>)
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005ae4:	4811      	ldr	r0, [pc, #68]	; (8005b2c <MX_USART1_UART_Init+0x90>)
 8005ae6:	f007 faf4 	bl	800d0d2 <HAL_UART_Init>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d001      	beq.n	8005af4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8005af0:	f7ff fa16 	bl	8004f20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005af4:	2100      	movs	r1, #0
 8005af6:	480d      	ldr	r0, [pc, #52]	; (8005b2c <MX_USART1_UART_Init+0x90>)
 8005af8:	f008 fd6b 	bl	800e5d2 <HAL_UARTEx_SetTxFifoThreshold>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d001      	beq.n	8005b06 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8005b02:	f7ff fa0d 	bl	8004f20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005b06:	2100      	movs	r1, #0
 8005b08:	4808      	ldr	r0, [pc, #32]	; (8005b2c <MX_USART1_UART_Init+0x90>)
 8005b0a:	f008 fda0 	bl	800e64e <HAL_UARTEx_SetRxFifoThreshold>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d001      	beq.n	8005b18 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8005b14:	f7ff fa04 	bl	8004f20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8005b18:	4804      	ldr	r0, [pc, #16]	; (8005b2c <MX_USART1_UART_Init+0x90>)
 8005b1a:	f008 fd21 	bl	800e560 <HAL_UARTEx_DisableFifoMode>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d001      	beq.n	8005b28 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8005b24:	f7ff f9fc 	bl	8004f20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005b28:	bf00      	nop
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	20001fa4 	.word	0x20001fa4
 8005b30:	40013800 	.word	0x40013800

08005b34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b09a      	sub	sp, #104	; 0x68
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b3c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005b40:	2200      	movs	r2, #0
 8005b42:	601a      	str	r2, [r3, #0]
 8005b44:	605a      	str	r2, [r3, #4]
 8005b46:	609a      	str	r2, [r3, #8]
 8005b48:	60da      	str	r2, [r3, #12]
 8005b4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005b4c:	f107 0310 	add.w	r3, r7, #16
 8005b50:	2244      	movs	r2, #68	; 0x44
 8005b52:	2100      	movs	r1, #0
 8005b54:	4618      	mov	r0, r3
 8005b56:	f009 fbbb 	bl	800f2d0 <memset>
  if(uartHandle->Instance==USART1)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a37      	ldr	r2, [pc, #220]	; (8005c3c <HAL_UART_MspInit+0x108>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d166      	bne.n	8005c32 <HAL_UART_MspInit+0xfe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005b64:	2301      	movs	r3, #1
 8005b66:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005b6c:	f107 0310 	add.w	r3, r7, #16
 8005b70:	4618      	mov	r0, r3
 8005b72:	f004 fd43 	bl	800a5fc <HAL_RCCEx_PeriphCLKConfig>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d001      	beq.n	8005b80 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005b7c:	f7ff f9d0 	bl	8004f20 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005b80:	4b2f      	ldr	r3, [pc, #188]	; (8005c40 <HAL_UART_MspInit+0x10c>)
 8005b82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b84:	4a2e      	ldr	r2, [pc, #184]	; (8005c40 <HAL_UART_MspInit+0x10c>)
 8005b86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b8a:	6613      	str	r3, [r2, #96]	; 0x60
 8005b8c:	4b2c      	ldr	r3, [pc, #176]	; (8005c40 <HAL_UART_MspInit+0x10c>)
 8005b8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b94:	60fb      	str	r3, [r7, #12]
 8005b96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b98:	4b29      	ldr	r3, [pc, #164]	; (8005c40 <HAL_UART_MspInit+0x10c>)
 8005b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b9c:	4a28      	ldr	r2, [pc, #160]	; (8005c40 <HAL_UART_MspInit+0x10c>)
 8005b9e:	f043 0304 	orr.w	r3, r3, #4
 8005ba2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005ba4:	4b26      	ldr	r3, [pc, #152]	; (8005c40 <HAL_UART_MspInit+0x10c>)
 8005ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ba8:	f003 0304 	and.w	r3, r3, #4
 8005bac:	60bb      	str	r3, [r7, #8]
 8005bae:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005bb0:	2330      	movs	r3, #48	; 0x30
 8005bb2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bb4:	2302      	movs	r3, #2
 8005bb6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005bc0:	2307      	movs	r3, #7
 8005bc2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005bc4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005bc8:	4619      	mov	r1, r3
 8005bca:	481e      	ldr	r0, [pc, #120]	; (8005c44 <HAL_UART_MspInit+0x110>)
 8005bcc:	f003 fd52 	bl	8009674 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel3;
 8005bd0:	4b1d      	ldr	r3, [pc, #116]	; (8005c48 <HAL_UART_MspInit+0x114>)
 8005bd2:	4a1e      	ldr	r2, [pc, #120]	; (8005c4c <HAL_UART_MspInit+0x118>)
 8005bd4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8005bd6:	4b1c      	ldr	r3, [pc, #112]	; (8005c48 <HAL_UART_MspInit+0x114>)
 8005bd8:	2219      	movs	r2, #25
 8005bda:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005bdc:	4b1a      	ldr	r3, [pc, #104]	; (8005c48 <HAL_UART_MspInit+0x114>)
 8005bde:	2210      	movs	r2, #16
 8005be0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005be2:	4b19      	ldr	r3, [pc, #100]	; (8005c48 <HAL_UART_MspInit+0x114>)
 8005be4:	2200      	movs	r2, #0
 8005be6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005be8:	4b17      	ldr	r3, [pc, #92]	; (8005c48 <HAL_UART_MspInit+0x114>)
 8005bea:	2280      	movs	r2, #128	; 0x80
 8005bec:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005bee:	4b16      	ldr	r3, [pc, #88]	; (8005c48 <HAL_UART_MspInit+0x114>)
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005bf4:	4b14      	ldr	r3, [pc, #80]	; (8005c48 <HAL_UART_MspInit+0x114>)
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8005bfa:	4b13      	ldr	r3, [pc, #76]	; (8005c48 <HAL_UART_MspInit+0x114>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005c00:	4b11      	ldr	r3, [pc, #68]	; (8005c48 <HAL_UART_MspInit+0x114>)
 8005c02:	2200      	movs	r2, #0
 8005c04:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005c06:	4810      	ldr	r0, [pc, #64]	; (8005c48 <HAL_UART_MspInit+0x114>)
 8005c08:	f002 f8f6 	bl	8007df8 <HAL_DMA_Init>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d001      	beq.n	8005c16 <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 8005c12:	f7ff f985 	bl	8004f20 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a0b      	ldr	r2, [pc, #44]	; (8005c48 <HAL_UART_MspInit+0x114>)
 8005c1a:	679a      	str	r2, [r3, #120]	; 0x78
 8005c1c:	4a0a      	ldr	r2, [pc, #40]	; (8005c48 <HAL_UART_MspInit+0x114>)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005c22:	2200      	movs	r2, #0
 8005c24:	2100      	movs	r1, #0
 8005c26:	2025      	movs	r0, #37	; 0x25
 8005c28:	f001 fe6d 	bl	8007906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005c2c:	2025      	movs	r0, #37	; 0x25
 8005c2e:	f001 fe84 	bl	800793a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005c32:	bf00      	nop
 8005c34:	3768      	adds	r7, #104	; 0x68
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	40013800 	.word	0x40013800
 8005c40:	40021000 	.word	0x40021000
 8005c44:	48000800 	.word	0x48000800
 8005c48:	20002034 	.word	0x20002034
 8005c4c:	40020430 	.word	0x40020430

08005c50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005c50:	480d      	ldr	r0, [pc, #52]	; (8005c88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005c52:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005c54:	480d      	ldr	r0, [pc, #52]	; (8005c8c <LoopForever+0x6>)
  ldr r1, =_edata
 8005c56:	490e      	ldr	r1, [pc, #56]	; (8005c90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005c58:	4a0e      	ldr	r2, [pc, #56]	; (8005c94 <LoopForever+0xe>)
  movs r3, #0
 8005c5a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005c5c:	e002      	b.n	8005c64 <LoopCopyDataInit>

08005c5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005c5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005c60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005c62:	3304      	adds	r3, #4

08005c64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005c64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005c66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005c68:	d3f9      	bcc.n	8005c5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005c6a:	4a0b      	ldr	r2, [pc, #44]	; (8005c98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005c6c:	4c0b      	ldr	r4, [pc, #44]	; (8005c9c <LoopForever+0x16>)
  movs r3, #0
 8005c6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005c70:	e001      	b.n	8005c76 <LoopFillZerobss>

08005c72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005c72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005c74:	3204      	adds	r2, #4

08005c76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005c76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005c78:	d3fb      	bcc.n	8005c72 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005c7a:	f7ff fcdd 	bl	8005638 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005c7e:	f009 fb7f 	bl	800f380 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005c82:	f7ff f8d5 	bl	8004e30 <main>

08005c86 <LoopForever>:

LoopForever:
    b LoopForever
 8005c86:	e7fe      	b.n	8005c86 <LoopForever>
  ldr   r0, =_estack
 8005c88:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8005c8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005c90:	20000740 	.word	0x20000740
  ldr r2, =_sidata
 8005c94:	08012d40 	.word	0x08012d40
  ldr r2, =_sbss
 8005c98:	20000740 	.word	0x20000740
  ldr r4, =_ebss
 8005c9c:	200021e4 	.word	0x200021e4

08005ca0 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005ca0:	e7fe      	b.n	8005ca0 <COMP1_2_3_IRQHandler>

08005ca2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b082      	sub	sp, #8
 8005ca6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005cac:	2003      	movs	r0, #3
 8005cae:	f001 fe1f 	bl	80078f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005cb2:	200f      	movs	r0, #15
 8005cb4:	f000 f80e 	bl	8005cd4 <HAL_InitTick>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d002      	beq.n	8005cc4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	71fb      	strb	r3, [r7, #7]
 8005cc2:	e001      	b.n	8005cc8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005cc4:	f7ff faea 	bl	800529c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005cc8:	79fb      	ldrb	r3, [r7, #7]

}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3708      	adds	r7, #8
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
	...

08005cd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005ce0:	4b16      	ldr	r3, [pc, #88]	; (8005d3c <HAL_InitTick+0x68>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d022      	beq.n	8005d2e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005ce8:	4b15      	ldr	r3, [pc, #84]	; (8005d40 <HAL_InitTick+0x6c>)
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	4b13      	ldr	r3, [pc, #76]	; (8005d3c <HAL_InitTick+0x68>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005cf4:	fbb1 f3f3 	udiv	r3, r1, r3
 8005cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f001 fe2a 	bl	8007956 <HAL_SYSTICK_Config>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d10f      	bne.n	8005d28 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2b0f      	cmp	r3, #15
 8005d0c:	d809      	bhi.n	8005d22 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005d0e:	2200      	movs	r2, #0
 8005d10:	6879      	ldr	r1, [r7, #4]
 8005d12:	f04f 30ff 	mov.w	r0, #4294967295
 8005d16:	f001 fdf6 	bl	8007906 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005d1a:	4a0a      	ldr	r2, [pc, #40]	; (8005d44 <HAL_InitTick+0x70>)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6013      	str	r3, [r2, #0]
 8005d20:	e007      	b.n	8005d32 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	73fb      	strb	r3, [r7, #15]
 8005d26:	e004      	b.n	8005d32 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	73fb      	strb	r3, [r7, #15]
 8005d2c:	e001      	b.n	8005d32 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3710      	adds	r7, #16
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	20000540 	.word	0x20000540
 8005d40:	20000538 	.word	0x20000538
 8005d44:	2000053c 	.word	0x2000053c

08005d48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005d4c:	4b05      	ldr	r3, [pc, #20]	; (8005d64 <HAL_IncTick+0x1c>)
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	4b05      	ldr	r3, [pc, #20]	; (8005d68 <HAL_IncTick+0x20>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4413      	add	r3, r2
 8005d56:	4a03      	ldr	r2, [pc, #12]	; (8005d64 <HAL_IncTick+0x1c>)
 8005d58:	6013      	str	r3, [r2, #0]
}
 8005d5a:	bf00      	nop
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr
 8005d64:	20002094 	.word	0x20002094
 8005d68:	20000540 	.word	0x20000540

08005d6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	af00      	add	r7, sp, #0
  return uwTick;
 8005d70:	4b03      	ldr	r3, [pc, #12]	; (8005d80 <HAL_GetTick+0x14>)
 8005d72:	681b      	ldr	r3, [r3, #0]
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr
 8005d7e:	bf00      	nop
 8005d80:	20002094 	.word	0x20002094

08005d84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005d8c:	f7ff ffee 	bl	8005d6c <HAL_GetTick>
 8005d90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d9c:	d004      	beq.n	8005da8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005d9e:	4b09      	ldr	r3, [pc, #36]	; (8005dc4 <HAL_Delay+0x40>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	4413      	add	r3, r2
 8005da6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005da8:	bf00      	nop
 8005daa:	f7ff ffdf 	bl	8005d6c <HAL_GetTick>
 8005dae:	4602      	mov	r2, r0
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	1ad3      	subs	r3, r2, r3
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d8f7      	bhi.n	8005daa <HAL_Delay+0x26>
  {
  }
}
 8005dba:	bf00      	nop
 8005dbc:	bf00      	nop
 8005dbe:	3710      	adds	r7, #16
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	20000540 	.word	0x20000540

08005dc8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	431a      	orrs	r2, r3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	609a      	str	r2, [r3, #8]
}
 8005de2:	bf00      	nop
 8005de4:	370c      	adds	r7, #12
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr

08005dee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005dee:	b480      	push	{r7}
 8005df0:	b083      	sub	sp, #12
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
 8005df6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	431a      	orrs	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	609a      	str	r2, [r3, #8]
}
 8005e08:	bf00      	nop
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b087      	sub	sp, #28
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	607a      	str	r2, [r7, #4]
 8005e3c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	3360      	adds	r3, #96	; 0x60
 8005e42:	461a      	mov	r2, r3
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	4413      	add	r3, r2
 8005e4a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	4b08      	ldr	r3, [pc, #32]	; (8005e74 <LL_ADC_SetOffset+0x44>)
 8005e52:	4013      	ands	r3, r2
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005e5a:	683a      	ldr	r2, [r7, #0]
 8005e5c:	430a      	orrs	r2, r1
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005e68:	bf00      	nop
 8005e6a:	371c      	adds	r7, #28
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr
 8005e74:	03fff000 	.word	0x03fff000

08005e78 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	3360      	adds	r3, #96	; 0x60
 8005e86:	461a      	mov	r2, r3
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	4413      	add	r3, r2
 8005e8e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3714      	adds	r7, #20
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b087      	sub	sp, #28
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	3360      	adds	r3, #96	; 0x60
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	4413      	add	r3, r2
 8005ebc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	431a      	orrs	r2, r3
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005ece:	bf00      	nop
 8005ed0:	371c      	adds	r7, #28
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr

08005eda <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8005eda:	b480      	push	{r7}
 8005edc:	b087      	sub	sp, #28
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	60f8      	str	r0, [r7, #12]
 8005ee2:	60b9      	str	r1, [r7, #8]
 8005ee4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	3360      	adds	r3, #96	; 0x60
 8005eea:	461a      	mov	r2, r3
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	4413      	add	r3, r2
 8005ef2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	431a      	orrs	r2, r3
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8005f04:	bf00      	nop
 8005f06:	371c      	adds	r7, #28
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b087      	sub	sp, #28
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	3360      	adds	r3, #96	; 0x60
 8005f20:	461a      	mov	r2, r3
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	4413      	add	r3, r2
 8005f28:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	431a      	orrs	r2, r3
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8005f3a:	bf00      	nop
 8005f3c:	371c      	adds	r7, #28
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr

08005f46 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8005f46:	b480      	push	{r7}
 8005f48:	b083      	sub	sp, #12
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
 8005f4e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	695b      	ldr	r3, [r3, #20]
 8005f54:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	431a      	orrs	r2, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	615a      	str	r2, [r3, #20]
}
 8005f60:	bf00      	nop
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d101      	bne.n	8005f84 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005f80:	2301      	movs	r3, #1
 8005f82:	e000      	b.n	8005f86 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	370c      	adds	r7, #12
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr

08005f92 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005f92:	b480      	push	{r7}
 8005f94:	b087      	sub	sp, #28
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	60f8      	str	r0, [r7, #12]
 8005f9a:	60b9      	str	r1, [r7, #8]
 8005f9c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	3330      	adds	r3, #48	; 0x30
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	0a1b      	lsrs	r3, r3, #8
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	f003 030c 	and.w	r3, r3, #12
 8005fae:	4413      	add	r3, r2
 8005fb0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	f003 031f 	and.w	r3, r3, #31
 8005fbc:	211f      	movs	r1, #31
 8005fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8005fc2:	43db      	mvns	r3, r3
 8005fc4:	401a      	ands	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	0e9b      	lsrs	r3, r3, #26
 8005fca:	f003 011f 	and.w	r1, r3, #31
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	f003 031f 	and.w	r3, r3, #31
 8005fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8005fd8:	431a      	orrs	r2, r3
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005fde:	bf00      	nop
 8005fe0:	371c      	adds	r7, #28
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr

08005fea <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b083      	sub	sp, #12
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ff6:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d101      	bne.n	8006002 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8005ffe:	2301      	movs	r3, #1
 8006000:	e000      	b.n	8006004 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006010:	b480      	push	{r7}
 8006012:	b087      	sub	sp, #28
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	3314      	adds	r3, #20
 8006020:	461a      	mov	r2, r3
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	0e5b      	lsrs	r3, r3, #25
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	f003 0304 	and.w	r3, r3, #4
 800602c:	4413      	add	r3, r2
 800602e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	0d1b      	lsrs	r3, r3, #20
 8006038:	f003 031f 	and.w	r3, r3, #31
 800603c:	2107      	movs	r1, #7
 800603e:	fa01 f303 	lsl.w	r3, r1, r3
 8006042:	43db      	mvns	r3, r3
 8006044:	401a      	ands	r2, r3
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	0d1b      	lsrs	r3, r3, #20
 800604a:	f003 031f 	and.w	r3, r3, #31
 800604e:	6879      	ldr	r1, [r7, #4]
 8006050:	fa01 f303 	lsl.w	r3, r1, r3
 8006054:	431a      	orrs	r2, r3
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800605a:	bf00      	nop
 800605c:	371c      	adds	r7, #28
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
	...

08006068 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006068:	b480      	push	{r7}
 800606a:	b085      	sub	sp, #20
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a0f      	ldr	r2, [pc, #60]	; (80060b4 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d10a      	bne.n	8006092 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006088:	431a      	orrs	r2, r3
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8006090:	e00a      	b.n	80060a8 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800609e:	43db      	mvns	r3, r3
 80060a0:	401a      	ands	r2, r3
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80060a8:	bf00      	nop
 80060aa:	3714      	adds	r7, #20
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr
 80060b4:	407f0000 	.word	0x407f0000

080060b8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	f003 031f 	and.w	r3, r3, #31
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006100:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	6093      	str	r3, [r2, #8]
}
 8006108:	bf00      	nop
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006124:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006128:	d101      	bne.n	800612e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800612a:	2301      	movs	r3, #1
 800612c:	e000      	b.n	8006130 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800612e:	2300      	movs	r3, #0
}
 8006130:	4618      	mov	r0, r3
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800614c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006150:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006158:	bf00      	nop
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006174:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006178:	d101      	bne.n	800617e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800617a:	2301      	movs	r3, #1
 800617c:	e000      	b.n	8006180 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800617e:	2300      	movs	r3, #0
}
 8006180:	4618      	mov	r0, r3
 8006182:	370c      	adds	r7, #12
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr

0800618c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800619c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80061a0:	f043 0201 	orr.w	r2, r3, #1
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80061a8:	bf00      	nop
 80061aa:	370c      	adds	r7, #12
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	f003 0301 	and.w	r3, r3, #1
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d101      	bne.n	80061cc <LL_ADC_IsEnabled+0x18>
 80061c8:	2301      	movs	r3, #1
 80061ca:	e000      	b.n	80061ce <LL_ADC_IsEnabled+0x1a>
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	370c      	adds	r7, #12
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr

080061da <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80061da:	b480      	push	{r7}
 80061dc:	b083      	sub	sp, #12
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061ea:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80061ee:	f043 0204 	orr.w	r2, r3, #4
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80061f6:	bf00      	nop
 80061f8:	370c      	adds	r7, #12
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr

08006202 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006202:	b480      	push	{r7}
 8006204:	b083      	sub	sp, #12
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	f003 0304 	and.w	r3, r3, #4
 8006212:	2b04      	cmp	r3, #4
 8006214:	d101      	bne.n	800621a <LL_ADC_REG_IsConversionOngoing+0x18>
 8006216:	2301      	movs	r3, #1
 8006218:	e000      	b.n	800621c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	f003 0308 	and.w	r3, r3, #8
 8006238:	2b08      	cmp	r3, #8
 800623a:	d101      	bne.n	8006240 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800623c:	2301      	movs	r3, #1
 800623e:	e000      	b.n	8006242 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	370c      	adds	r7, #12
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr
	...

08006250 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006250:	b590      	push	{r4, r7, lr}
 8006252:	b089      	sub	sp, #36	; 0x24
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006258:	2300      	movs	r3, #0
 800625a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800625c:	2300      	movs	r3, #0
 800625e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d101      	bne.n	800626a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	e177      	b.n	800655a <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006274:	2b00      	cmp	r3, #0
 8006276:	d109      	bne.n	800628c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f7fe f961 	bl	8004540 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4618      	mov	r0, r3
 8006292:	f7ff ff3f 	bl	8006114 <LL_ADC_IsDeepPowerDownEnabled>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d004      	beq.n	80062a6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4618      	mov	r0, r3
 80062a2:	f7ff ff25 	bl	80060f0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4618      	mov	r0, r3
 80062ac:	f7ff ff5a 	bl	8006164 <LL_ADC_IsInternalRegulatorEnabled>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d115      	bne.n	80062e2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7ff ff3e 	bl	800613c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80062c0:	4b9c      	ldr	r3, [pc, #624]	; (8006534 <HAL_ADC_Init+0x2e4>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	099b      	lsrs	r3, r3, #6
 80062c6:	4a9c      	ldr	r2, [pc, #624]	; (8006538 <HAL_ADC_Init+0x2e8>)
 80062c8:	fba2 2303 	umull	r2, r3, r2, r3
 80062cc:	099b      	lsrs	r3, r3, #6
 80062ce:	3301      	adds	r3, #1
 80062d0:	005b      	lsls	r3, r3, #1
 80062d2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80062d4:	e002      	b.n	80062dc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	3b01      	subs	r3, #1
 80062da:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d1f9      	bne.n	80062d6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7ff ff3c 	bl	8006164 <LL_ADC_IsInternalRegulatorEnabled>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d10d      	bne.n	800630e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062f6:	f043 0210 	orr.w	r2, r3, #16
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006302:	f043 0201 	orr.w	r2, r3, #1
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4618      	mov	r0, r3
 8006314:	f7ff ff75 	bl	8006202 <LL_ADC_REG_IsConversionOngoing>
 8006318:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800631e:	f003 0310 	and.w	r3, r3, #16
 8006322:	2b00      	cmp	r3, #0
 8006324:	f040 8110 	bne.w	8006548 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	2b00      	cmp	r3, #0
 800632c:	f040 810c 	bne.w	8006548 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006334:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006338:	f043 0202 	orr.w	r2, r3, #2
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4618      	mov	r0, r3
 8006346:	f7ff ff35 	bl	80061b4 <LL_ADC_IsEnabled>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d111      	bne.n	8006374 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006350:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006354:	f7ff ff2e 	bl	80061b4 <LL_ADC_IsEnabled>
 8006358:	4604      	mov	r4, r0
 800635a:	4878      	ldr	r0, [pc, #480]	; (800653c <HAL_ADC_Init+0x2ec>)
 800635c:	f7ff ff2a 	bl	80061b4 <LL_ADC_IsEnabled>
 8006360:	4603      	mov	r3, r0
 8006362:	4323      	orrs	r3, r4
 8006364:	2b00      	cmp	r3, #0
 8006366:	d105      	bne.n	8006374 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	4619      	mov	r1, r3
 800636e:	4874      	ldr	r0, [pc, #464]	; (8006540 <HAL_ADC_Init+0x2f0>)
 8006370:	f7ff fd2a 	bl	8005dc8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	7f5b      	ldrb	r3, [r3, #29]
 8006378:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800637e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8006384:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800638a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006392:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006394:	4313      	orrs	r3, r2
 8006396:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d106      	bne.n	80063b0 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a6:	3b01      	subs	r3, #1
 80063a8:	045b      	lsls	r3, r3, #17
 80063aa:	69ba      	ldr	r2, [r7, #24]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d009      	beq.n	80063cc <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063bc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80063c6:	69ba      	ldr	r2, [r7, #24]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68da      	ldr	r2, [r3, #12]
 80063d2:	4b5c      	ldr	r3, [pc, #368]	; (8006544 <HAL_ADC_Init+0x2f4>)
 80063d4:	4013      	ands	r3, r2
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	6812      	ldr	r2, [r2, #0]
 80063da:	69b9      	ldr	r1, [r7, #24]
 80063dc:	430b      	orrs	r3, r1
 80063de:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	430a      	orrs	r2, r1
 80063f4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7ff ff01 	bl	8006202 <LL_ADC_REG_IsConversionOngoing>
 8006400:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4618      	mov	r0, r3
 8006408:	f7ff ff0e 	bl	8006228 <LL_ADC_INJ_IsConversionOngoing>
 800640c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d16d      	bne.n	80064f0 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d16a      	bne.n	80064f0 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800641e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006426:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006428:	4313      	orrs	r3, r2
 800642a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006436:	f023 0302 	bic.w	r3, r3, #2
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	6812      	ldr	r2, [r2, #0]
 800643e:	69b9      	ldr	r1, [r7, #24]
 8006440:	430b      	orrs	r3, r1
 8006442:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	691b      	ldr	r3, [r3, #16]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d017      	beq.n	800647c <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	691a      	ldr	r2, [r3, #16]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800645a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006464:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006468:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	6911      	ldr	r1, [r2, #16]
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	6812      	ldr	r2, [r2, #0]
 8006474:	430b      	orrs	r3, r1
 8006476:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800647a:	e013      	b.n	80064a4 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	691a      	ldr	r2, [r3, #16]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800648a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	6812      	ldr	r2, [r2, #0]
 8006498:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800649c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80064a0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d118      	bne.n	80064e0 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80064b8:	f023 0304 	bic.w	r3, r3, #4
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80064c4:	4311      	orrs	r1, r2
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80064ca:	4311      	orrs	r1, r2
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80064d0:	430a      	orrs	r2, r1
 80064d2:	431a      	orrs	r2, r3
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f042 0201 	orr.w	r2, r2, #1
 80064dc:	611a      	str	r2, [r3, #16]
 80064de:	e007      	b.n	80064f0 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	691a      	ldr	r2, [r3, #16]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f022 0201 	bic.w	r2, r2, #1
 80064ee:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	695b      	ldr	r3, [r3, #20]
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d10c      	bne.n	8006512 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064fe:	f023 010f 	bic.w	r1, r3, #15
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a1b      	ldr	r3, [r3, #32]
 8006506:	1e5a      	subs	r2, r3, #1
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	430a      	orrs	r2, r1
 800650e:	631a      	str	r2, [r3, #48]	; 0x30
 8006510:	e007      	b.n	8006522 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f022 020f 	bic.w	r2, r2, #15
 8006520:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006526:	f023 0303 	bic.w	r3, r3, #3
 800652a:	f043 0201 	orr.w	r2, r3, #1
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	65da      	str	r2, [r3, #92]	; 0x5c
 8006532:	e011      	b.n	8006558 <HAL_ADC_Init+0x308>
 8006534:	20000538 	.word	0x20000538
 8006538:	053e2d63 	.word	0x053e2d63
 800653c:	50000100 	.word	0x50000100
 8006540:	50000300 	.word	0x50000300
 8006544:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800654c:	f043 0210 	orr.w	r2, r3, #16
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006558:	7ffb      	ldrb	r3, [r7, #31]
}
 800655a:	4618      	mov	r0, r3
 800655c:	3724      	adds	r7, #36	; 0x24
 800655e:	46bd      	mov	sp, r7
 8006560:	bd90      	pop	{r4, r7, pc}
 8006562:	bf00      	nop

08006564 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b086      	sub	sp, #24
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006570:	4851      	ldr	r0, [pc, #324]	; (80066b8 <HAL_ADC_Start_DMA+0x154>)
 8006572:	f7ff fda1 	bl	80060b8 <LL_ADC_GetMultimode>
 8006576:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4618      	mov	r0, r3
 800657e:	f7ff fe40 	bl	8006202 <LL_ADC_REG_IsConversionOngoing>
 8006582:	4603      	mov	r3, r0
 8006584:	2b00      	cmp	r3, #0
 8006586:	f040 808f 	bne.w	80066a8 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006590:	2b01      	cmp	r3, #1
 8006592:	d101      	bne.n	8006598 <HAL_ADC_Start_DMA+0x34>
 8006594:	2302      	movs	r3, #2
 8006596:	e08a      	b.n	80066ae <HAL_ADC_Start_DMA+0x14a>
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d005      	beq.n	80065b2 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	2b05      	cmp	r3, #5
 80065aa:	d002      	beq.n	80065b2 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	2b09      	cmp	r3, #9
 80065b0:	d173      	bne.n	800669a <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80065b2:	68f8      	ldr	r0, [r7, #12]
 80065b4:	f000 fea8 	bl	8007308 <ADC_Enable>
 80065b8:	4603      	mov	r3, r0
 80065ba:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80065bc:	7dfb      	ldrb	r3, [r7, #23]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d166      	bne.n	8006690 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065c6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80065ca:	f023 0301 	bic.w	r3, r3, #1
 80065ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a38      	ldr	r2, [pc, #224]	; (80066bc <HAL_ADC_Start_DMA+0x158>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d002      	beq.n	80065e6 <HAL_ADC_Start_DMA+0x82>
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	e001      	b.n	80065ea <HAL_ADC_Start_DMA+0x86>
 80065e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80065ea:	68fa      	ldr	r2, [r7, #12]
 80065ec:	6812      	ldr	r2, [r2, #0]
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d002      	beq.n	80065f8 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d105      	bne.n	8006604 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065fc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006608:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800660c:	2b00      	cmp	r3, #0
 800660e:	d006      	beq.n	800661e <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006614:	f023 0206 	bic.w	r2, r3, #6
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	661a      	str	r2, [r3, #96]	; 0x60
 800661c:	e002      	b.n	8006624 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2200      	movs	r2, #0
 8006622:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006628:	4a25      	ldr	r2, [pc, #148]	; (80066c0 <HAL_ADC_Start_DMA+0x15c>)
 800662a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006630:	4a24      	ldr	r2, [pc, #144]	; (80066c4 <HAL_ADC_Start_DMA+0x160>)
 8006632:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006638:	4a23      	ldr	r2, [pc, #140]	; (80066c8 <HAL_ADC_Start_DMA+0x164>)
 800663a:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	221c      	movs	r2, #28
 8006642:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2200      	movs	r2, #0
 8006648:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	685a      	ldr	r2, [r3, #4]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f042 0210 	orr.w	r2, r2, #16
 800665a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	68da      	ldr	r2, [r3, #12]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f042 0201 	orr.w	r2, r2, #1
 800666a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	3340      	adds	r3, #64	; 0x40
 8006676:	4619      	mov	r1, r3
 8006678:	68ba      	ldr	r2, [r7, #8]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f001 fc64 	bl	8007f48 <HAL_DMA_Start_IT>
 8006680:	4603      	mov	r3, r0
 8006682:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4618      	mov	r0, r3
 800668a:	f7ff fda6 	bl	80061da <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800668e:	e00d      	b.n	80066ac <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8006698:	e008      	b.n	80066ac <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80066a6:	e001      	b.n	80066ac <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80066a8:	2302      	movs	r3, #2
 80066aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80066ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3718      	adds	r7, #24
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	50000300 	.word	0x50000300
 80066bc:	50000100 	.word	0x50000100
 80066c0:	080073cd 	.word	0x080073cd
 80066c4:	080074a5 	.word	0x080074a5
 80066c8:	080074c1 	.word	0x080074c1

080066cc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b08a      	sub	sp, #40	; 0x28
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80066d4:	2300      	movs	r3, #0
 80066d6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80066e8:	4883      	ldr	r0, [pc, #524]	; (80068f8 <HAL_ADC_IRQHandler+0x22c>)
 80066ea:	f7ff fce5 	bl	80060b8 <LL_ADC_GetMultimode>
 80066ee:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	f003 0302 	and.w	r3, r3, #2
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d017      	beq.n	800672a <HAL_ADC_IRQHandler+0x5e>
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	f003 0302 	and.w	r3, r3, #2
 8006700:	2b00      	cmp	r3, #0
 8006702:	d012      	beq.n	800672a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006708:	f003 0310 	and.w	r3, r3, #16
 800670c:	2b00      	cmp	r3, #0
 800670e:	d105      	bne.n	800671c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006714:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 ff37 	bl	8007590 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2202      	movs	r2, #2
 8006728:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	f003 0304 	and.w	r3, r3, #4
 8006730:	2b00      	cmp	r3, #0
 8006732:	d004      	beq.n	800673e <HAL_ADC_IRQHandler+0x72>
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	f003 0304 	and.w	r3, r3, #4
 800673a:	2b00      	cmp	r3, #0
 800673c:	d10a      	bne.n	8006754 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006744:	2b00      	cmp	r3, #0
 8006746:	f000 8085 	beq.w	8006854 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	f003 0308 	and.w	r3, r3, #8
 8006750:	2b00      	cmp	r3, #0
 8006752:	d07f      	beq.n	8006854 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006758:	f003 0310 	and.w	r3, r3, #16
 800675c:	2b00      	cmp	r3, #0
 800675e:	d105      	bne.n	800676c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006764:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4618      	mov	r0, r3
 8006772:	f7ff fbfb 	bl	8005f6c <LL_ADC_REG_IsTriggerSourceSWStart>
 8006776:	4603      	mov	r3, r0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d064      	beq.n	8006846 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a5e      	ldr	r2, [pc, #376]	; (80068fc <HAL_ADC_IRQHandler+0x230>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d002      	beq.n	800678c <HAL_ADC_IRQHandler+0xc0>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	e001      	b.n	8006790 <HAL_ADC_IRQHandler+0xc4>
 800678c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	6812      	ldr	r2, [r2, #0]
 8006794:	4293      	cmp	r3, r2
 8006796:	d008      	beq.n	80067aa <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d005      	beq.n	80067aa <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	2b05      	cmp	r3, #5
 80067a2:	d002      	beq.n	80067aa <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	2b09      	cmp	r3, #9
 80067a8:	d104      	bne.n	80067b4 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	623b      	str	r3, [r7, #32]
 80067b2:	e00d      	b.n	80067d0 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a50      	ldr	r2, [pc, #320]	; (80068fc <HAL_ADC_IRQHandler+0x230>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d002      	beq.n	80067c4 <HAL_ADC_IRQHandler+0xf8>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	e001      	b.n	80067c8 <HAL_ADC_IRQHandler+0xfc>
 80067c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80067c8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80067d0:	6a3b      	ldr	r3, [r7, #32]
 80067d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d135      	bne.n	8006846 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 0308 	and.w	r3, r3, #8
 80067e4:	2b08      	cmp	r3, #8
 80067e6:	d12e      	bne.n	8006846 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4618      	mov	r0, r3
 80067ee:	f7ff fd08 	bl	8006202 <LL_ADC_REG_IsConversionOngoing>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d11a      	bne.n	800682e <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	685a      	ldr	r2, [r3, #4]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f022 020c 	bic.w	r2, r2, #12
 8006806:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800680c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006818:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800681c:	2b00      	cmp	r3, #0
 800681e:	d112      	bne.n	8006846 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006824:	f043 0201 	orr.w	r2, r3, #1
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	65da      	str	r2, [r3, #92]	; 0x5c
 800682c:	e00b      	b.n	8006846 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006832:	f043 0210 	orr.w	r2, r3, #16
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800683e:	f043 0201 	orr.w	r2, r3, #1
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f7fd fad6 	bl	8003df8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	220c      	movs	r2, #12
 8006852:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	f003 0320 	and.w	r3, r3, #32
 800685a:	2b00      	cmp	r3, #0
 800685c:	d004      	beq.n	8006868 <HAL_ADC_IRQHandler+0x19c>
 800685e:	69bb      	ldr	r3, [r7, #24]
 8006860:	f003 0320 	and.w	r3, r3, #32
 8006864:	2b00      	cmp	r3, #0
 8006866:	d10b      	bne.n	8006880 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800686e:	2b00      	cmp	r3, #0
 8006870:	f000 809e 	beq.w	80069b0 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800687a:	2b00      	cmp	r3, #0
 800687c:	f000 8098 	beq.w	80069b0 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006884:	f003 0310 	and.w	r3, r3, #16
 8006888:	2b00      	cmp	r3, #0
 800688a:	d105      	bne.n	8006898 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006890:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4618      	mov	r0, r3
 800689e:	f7ff fba4 	bl	8005fea <LL_ADC_INJ_IsTriggerSourceSWStart>
 80068a2:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4618      	mov	r0, r3
 80068aa:	f7ff fb5f 	bl	8005f6c <LL_ADC_REG_IsTriggerSourceSWStart>
 80068ae:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a11      	ldr	r2, [pc, #68]	; (80068fc <HAL_ADC_IRQHandler+0x230>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d002      	beq.n	80068c0 <HAL_ADC_IRQHandler+0x1f4>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	e001      	b.n	80068c4 <HAL_ADC_IRQHandler+0x1f8>
 80068c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	6812      	ldr	r2, [r2, #0]
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d008      	beq.n	80068de <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d005      	beq.n	80068de <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	2b06      	cmp	r3, #6
 80068d6:	d002      	beq.n	80068de <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	2b07      	cmp	r3, #7
 80068dc:	d104      	bne.n	80068e8 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	623b      	str	r3, [r7, #32]
 80068e6:	e011      	b.n	800690c <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a03      	ldr	r2, [pc, #12]	; (80068fc <HAL_ADC_IRQHandler+0x230>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d006      	beq.n	8006900 <HAL_ADC_IRQHandler+0x234>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	e005      	b.n	8006904 <HAL_ADC_IRQHandler+0x238>
 80068f8:	50000300 	.word	0x50000300
 80068fc:	50000100 	.word	0x50000100
 8006900:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006904:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d047      	beq.n	80069a2 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8006912:	6a3b      	ldr	r3, [r7, #32]
 8006914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006918:	2b00      	cmp	r3, #0
 800691a:	d007      	beq.n	800692c <HAL_ADC_IRQHandler+0x260>
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d03f      	beq.n	80069a2 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8006922:	6a3b      	ldr	r3, [r7, #32]
 8006924:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8006928:	2b00      	cmp	r3, #0
 800692a:	d13a      	bne.n	80069a2 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006936:	2b40      	cmp	r3, #64	; 0x40
 8006938:	d133      	bne.n	80069a2 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800693a:	6a3b      	ldr	r3, [r7, #32]
 800693c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006940:	2b00      	cmp	r3, #0
 8006942:	d12e      	bne.n	80069a2 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4618      	mov	r0, r3
 800694a:	f7ff fc6d 	bl	8006228 <LL_ADC_INJ_IsConversionOngoing>
 800694e:	4603      	mov	r3, r0
 8006950:	2b00      	cmp	r3, #0
 8006952:	d11a      	bne.n	800698a <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	685a      	ldr	r2, [r3, #4]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006962:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006968:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006978:	2b00      	cmp	r3, #0
 800697a:	d112      	bne.n	80069a2 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006980:	f043 0201 	orr.w	r2, r3, #1
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	65da      	str	r2, [r3, #92]	; 0x5c
 8006988:	e00b      	b.n	80069a2 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800698e:	f043 0210 	orr.w	r2, r3, #16
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800699a:	f043 0201 	orr.w	r2, r3, #1
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 fdcc 	bl	8007540 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2260      	movs	r2, #96	; 0x60
 80069ae:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80069b0:	69fb      	ldr	r3, [r7, #28]
 80069b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d011      	beq.n	80069de <HAL_ADC_IRQHandler+0x312>
 80069ba:	69bb      	ldr	r3, [r7, #24]
 80069bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d00c      	beq.n	80069de <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069c8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f000 f895 	bl	8006b00 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2280      	movs	r2, #128	; 0x80
 80069dc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d012      	beq.n	8006a0e <HAL_ADC_IRQHandler+0x342>
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00d      	beq.n	8006a0e <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 fdb2 	bl	8007568 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a0c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8006a0e:	69fb      	ldr	r3, [r7, #28]
 8006a10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d012      	beq.n	8006a3e <HAL_ADC_IRQHandler+0x372>
 8006a18:	69bb      	ldr	r3, [r7, #24]
 8006a1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d00d      	beq.n	8006a3e <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a26:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 fda4 	bl	800757c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a3c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	f003 0310 	and.w	r3, r3, #16
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d036      	beq.n	8006ab6 <HAL_ADC_IRQHandler+0x3ea>
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	f003 0310 	and.w	r3, r3, #16
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d031      	beq.n	8006ab6 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d102      	bne.n	8006a60 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a5e:	e014      	b.n	8006a8a <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d008      	beq.n	8006a78 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8006a66:	4825      	ldr	r0, [pc, #148]	; (8006afc <HAL_ADC_IRQHandler+0x430>)
 8006a68:	f7ff fb34 	bl	80060d4 <LL_ADC_GetMultiDMATransfer>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d00b      	beq.n	8006a8a <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8006a72:	2301      	movs	r3, #1
 8006a74:	627b      	str	r3, [r7, #36]	; 0x24
 8006a76:	e008      	b.n	8006a8a <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	68db      	ldr	r3, [r3, #12]
 8006a7e:	f003 0301 	and.w	r3, r3, #1
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d001      	beq.n	8006a8a <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8006a86:	2301      	movs	r3, #1
 8006a88:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8006a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d10e      	bne.n	8006aae <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a94:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006aa0:	f043 0202 	orr.w	r2, r3, #2
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 f833 	bl	8006b14 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	2210      	movs	r2, #16
 8006ab4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d018      	beq.n	8006af2 <HAL_ADC_IRQHandler+0x426>
 8006ac0:	69bb      	ldr	r3, [r7, #24]
 8006ac2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d013      	beq.n	8006af2 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ace:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ada:	f043 0208 	orr.w	r2, r3, #8
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006aea:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 fd31 	bl	8007554 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8006af2:	bf00      	nop
 8006af4:	3728      	adds	r7, #40	; 0x28
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	50000300 	.word	0x50000300

08006b00 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006b08:	bf00      	nop
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006b1c:	bf00      	nop
 8006b1e:	370c      	adds	r7, #12
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b0b6      	sub	sp, #216	; 0xd8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006b32:	2300      	movs	r3, #0
 8006b34:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d101      	bne.n	8006b4a <HAL_ADC_ConfigChannel+0x22>
 8006b46:	2302      	movs	r3, #2
 8006b48:	e3c8      	b.n	80072dc <HAL_ADC_ConfigChannel+0x7b4>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4618      	mov	r0, r3
 8006b58:	f7ff fb53 	bl	8006202 <LL_ADC_REG_IsConversionOngoing>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	f040 83ad 	bne.w	80072be <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6818      	ldr	r0, [r3, #0]
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	6859      	ldr	r1, [r3, #4]
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	461a      	mov	r2, r3
 8006b72:	f7ff fa0e 	bl	8005f92 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f7ff fb41 	bl	8006202 <LL_ADC_REG_IsConversionOngoing>
 8006b80:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7ff fb4d 	bl	8006228 <LL_ADC_INJ_IsConversionOngoing>
 8006b8e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006b92:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	f040 81d9 	bne.w	8006f4e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006b9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f040 81d4 	bne.w	8006f4e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bae:	d10f      	bne.n	8006bd0 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6818      	ldr	r0, [r3, #0]
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	4619      	mov	r1, r3
 8006bbc:	f7ff fa28 	bl	8006010 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f7ff f9bc 	bl	8005f46 <LL_ADC_SetSamplingTimeCommonConfig>
 8006bce:	e00e      	b.n	8006bee <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6818      	ldr	r0, [r3, #0]
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	6819      	ldr	r1, [r3, #0]
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	461a      	mov	r2, r3
 8006bde:	f7ff fa17 	bl	8006010 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2100      	movs	r1, #0
 8006be8:	4618      	mov	r0, r3
 8006bea:	f7ff f9ac 	bl	8005f46 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	695a      	ldr	r2, [r3, #20]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	08db      	lsrs	r3, r3, #3
 8006bfa:	f003 0303 	and.w	r3, r3, #3
 8006bfe:	005b      	lsls	r3, r3, #1
 8006c00:	fa02 f303 	lsl.w	r3, r2, r3
 8006c04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	2b04      	cmp	r3, #4
 8006c0e:	d022      	beq.n	8006c56 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6818      	ldr	r0, [r3, #0]
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	6919      	ldr	r1, [r3, #16]
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c20:	f7ff f906 	bl	8005e30 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6818      	ldr	r0, [r3, #0]
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	6919      	ldr	r1, [r3, #16]
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	699b      	ldr	r3, [r3, #24]
 8006c30:	461a      	mov	r2, r3
 8006c32:	f7ff f952 	bl	8005eda <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6818      	ldr	r0, [r3, #0]
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	6919      	ldr	r1, [r3, #16]
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	7f1b      	ldrb	r3, [r3, #28]
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d102      	bne.n	8006c4c <HAL_ADC_ConfigChannel+0x124>
 8006c46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c4a:	e000      	b.n	8006c4e <HAL_ADC_ConfigChannel+0x126>
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	461a      	mov	r2, r3
 8006c50:	f7ff f95e 	bl	8005f10 <LL_ADC_SetOffsetSaturation>
 8006c54:	e17b      	b.n	8006f4e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2100      	movs	r1, #0
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f7ff f90b 	bl	8005e78 <LL_ADC_GetOffsetChannel>
 8006c62:	4603      	mov	r3, r0
 8006c64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d10a      	bne.n	8006c82 <HAL_ADC_ConfigChannel+0x15a>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2100      	movs	r1, #0
 8006c72:	4618      	mov	r0, r3
 8006c74:	f7ff f900 	bl	8005e78 <LL_ADC_GetOffsetChannel>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	0e9b      	lsrs	r3, r3, #26
 8006c7c:	f003 021f 	and.w	r2, r3, #31
 8006c80:	e01e      	b.n	8006cc0 <HAL_ADC_ConfigChannel+0x198>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2100      	movs	r1, #0
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f7ff f8f5 	bl	8005e78 <LL_ADC_GetOffsetChannel>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c94:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006c98:	fa93 f3a3 	rbit	r3, r3
 8006c9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006ca0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ca4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006ca8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d101      	bne.n	8006cb4 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8006cb0:	2320      	movs	r3, #32
 8006cb2:	e004      	b.n	8006cbe <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8006cb4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006cb8:	fab3 f383 	clz	r3, r3
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d105      	bne.n	8006cd8 <HAL_ADC_ConfigChannel+0x1b0>
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	0e9b      	lsrs	r3, r3, #26
 8006cd2:	f003 031f 	and.w	r3, r3, #31
 8006cd6:	e018      	b.n	8006d0a <HAL_ADC_ConfigChannel+0x1e2>
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ce0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006ce4:	fa93 f3a3 	rbit	r3, r3
 8006ce8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8006cec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006cf0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8006cf4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d101      	bne.n	8006d00 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8006cfc:	2320      	movs	r3, #32
 8006cfe:	e004      	b.n	8006d0a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8006d00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006d04:	fab3 f383 	clz	r3, r3
 8006d08:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d106      	bne.n	8006d1c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2200      	movs	r2, #0
 8006d14:	2100      	movs	r1, #0
 8006d16:	4618      	mov	r0, r3
 8006d18:	f7ff f8c4 	bl	8005ea4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2101      	movs	r1, #1
 8006d22:	4618      	mov	r0, r3
 8006d24:	f7ff f8a8 	bl	8005e78 <LL_ADC_GetOffsetChannel>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d10a      	bne.n	8006d48 <HAL_ADC_ConfigChannel+0x220>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2101      	movs	r1, #1
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7ff f89d 	bl	8005e78 <LL_ADC_GetOffsetChannel>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	0e9b      	lsrs	r3, r3, #26
 8006d42:	f003 021f 	and.w	r2, r3, #31
 8006d46:	e01e      	b.n	8006d86 <HAL_ADC_ConfigChannel+0x25e>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2101      	movs	r1, #1
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f7ff f892 	bl	8005e78 <LL_ADC_GetOffsetChannel>
 8006d54:	4603      	mov	r3, r0
 8006d56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006d5e:	fa93 f3a3 	rbit	r3, r3
 8006d62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8006d66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8006d6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d101      	bne.n	8006d7a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8006d76:	2320      	movs	r3, #32
 8006d78:	e004      	b.n	8006d84 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8006d7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d7e:	fab3 f383 	clz	r3, r3
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d105      	bne.n	8006d9e <HAL_ADC_ConfigChannel+0x276>
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	0e9b      	lsrs	r3, r3, #26
 8006d98:	f003 031f 	and.w	r3, r3, #31
 8006d9c:	e018      	b.n	8006dd0 <HAL_ADC_ConfigChannel+0x2a8>
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006da6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006daa:	fa93 f3a3 	rbit	r3, r3
 8006dae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8006db2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006db6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8006dba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d101      	bne.n	8006dc6 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8006dc2:	2320      	movs	r3, #32
 8006dc4:	e004      	b.n	8006dd0 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8006dc6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006dca:	fab3 f383 	clz	r3, r3
 8006dce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d106      	bne.n	8006de2 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	2101      	movs	r1, #1
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f7ff f861 	bl	8005ea4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2102      	movs	r1, #2
 8006de8:	4618      	mov	r0, r3
 8006dea:	f7ff f845 	bl	8005e78 <LL_ADC_GetOffsetChannel>
 8006dee:	4603      	mov	r3, r0
 8006df0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d10a      	bne.n	8006e0e <HAL_ADC_ConfigChannel+0x2e6>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	2102      	movs	r1, #2
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f7ff f83a 	bl	8005e78 <LL_ADC_GetOffsetChannel>
 8006e04:	4603      	mov	r3, r0
 8006e06:	0e9b      	lsrs	r3, r3, #26
 8006e08:	f003 021f 	and.w	r2, r3, #31
 8006e0c:	e01e      	b.n	8006e4c <HAL_ADC_ConfigChannel+0x324>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2102      	movs	r1, #2
 8006e14:	4618      	mov	r0, r3
 8006e16:	f7ff f82f 	bl	8005e78 <LL_ADC_GetOffsetChannel>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e24:	fa93 f3a3 	rbit	r3, r3
 8006e28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8006e2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8006e34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d101      	bne.n	8006e40 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8006e3c:	2320      	movs	r3, #32
 8006e3e:	e004      	b.n	8006e4a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8006e40:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e44:	fab3 f383 	clz	r3, r3
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d105      	bne.n	8006e64 <HAL_ADC_ConfigChannel+0x33c>
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	0e9b      	lsrs	r3, r3, #26
 8006e5e:	f003 031f 	and.w	r3, r3, #31
 8006e62:	e016      	b.n	8006e92 <HAL_ADC_ConfigChannel+0x36a>
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e70:	fa93 f3a3 	rbit	r3, r3
 8006e74:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8006e76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006e78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8006e7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d101      	bne.n	8006e88 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8006e84:	2320      	movs	r3, #32
 8006e86:	e004      	b.n	8006e92 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8006e88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e8c:	fab3 f383 	clz	r3, r3
 8006e90:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d106      	bne.n	8006ea4 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	2102      	movs	r1, #2
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7ff f800 	bl	8005ea4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2103      	movs	r1, #3
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f7fe ffe4 	bl	8005e78 <LL_ADC_GetOffsetChannel>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d10a      	bne.n	8006ed0 <HAL_ADC_ConfigChannel+0x3a8>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2103      	movs	r1, #3
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f7fe ffd9 	bl	8005e78 <LL_ADC_GetOffsetChannel>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	0e9b      	lsrs	r3, r3, #26
 8006eca:	f003 021f 	and.w	r2, r3, #31
 8006ece:	e017      	b.n	8006f00 <HAL_ADC_ConfigChannel+0x3d8>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2103      	movs	r1, #3
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7fe ffce 	bl	8005e78 <LL_ADC_GetOffsetChannel>
 8006edc:	4603      	mov	r3, r0
 8006ede:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ee0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ee2:	fa93 f3a3 	rbit	r3, r3
 8006ee6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8006ee8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006eea:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8006eec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d101      	bne.n	8006ef6 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8006ef2:	2320      	movs	r3, #32
 8006ef4:	e003      	b.n	8006efe <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8006ef6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ef8:	fab3 f383 	clz	r3, r3
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d105      	bne.n	8006f18 <HAL_ADC_ConfigChannel+0x3f0>
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	0e9b      	lsrs	r3, r3, #26
 8006f12:	f003 031f 	and.w	r3, r3, #31
 8006f16:	e011      	b.n	8006f3c <HAL_ADC_ConfigChannel+0x414>
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f20:	fa93 f3a3 	rbit	r3, r3
 8006f24:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8006f26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f28:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8006f2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d101      	bne.n	8006f34 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8006f30:	2320      	movs	r3, #32
 8006f32:	e003      	b.n	8006f3c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8006f34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f36:	fab3 f383 	clz	r3, r3
 8006f3a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d106      	bne.n	8006f4e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	2200      	movs	r2, #0
 8006f46:	2103      	movs	r1, #3
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f7fe ffab 	bl	8005ea4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4618      	mov	r0, r3
 8006f54:	f7ff f92e 	bl	80061b4 <LL_ADC_IsEnabled>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	f040 8140 	bne.w	80071e0 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6818      	ldr	r0, [r3, #0]
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	6819      	ldr	r1, [r3, #0]
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	f7ff f87b 	bl	8006068 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	4a8f      	ldr	r2, [pc, #572]	; (80071b4 <HAL_ADC_ConfigChannel+0x68c>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	f040 8131 	bne.w	80071e0 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d10b      	bne.n	8006fa6 <HAL_ADC_ConfigChannel+0x47e>
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	0e9b      	lsrs	r3, r3, #26
 8006f94:	3301      	adds	r3, #1
 8006f96:	f003 031f 	and.w	r3, r3, #31
 8006f9a:	2b09      	cmp	r3, #9
 8006f9c:	bf94      	ite	ls
 8006f9e:	2301      	movls	r3, #1
 8006fa0:	2300      	movhi	r3, #0
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	e019      	b.n	8006fda <HAL_ADC_ConfigChannel+0x4b2>
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fae:	fa93 f3a3 	rbit	r3, r3
 8006fb2:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8006fb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006fb6:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8006fb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d101      	bne.n	8006fc2 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8006fbe:	2320      	movs	r3, #32
 8006fc0:	e003      	b.n	8006fca <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8006fc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006fc4:	fab3 f383 	clz	r3, r3
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	3301      	adds	r3, #1
 8006fcc:	f003 031f 	and.w	r3, r3, #31
 8006fd0:	2b09      	cmp	r3, #9
 8006fd2:	bf94      	ite	ls
 8006fd4:	2301      	movls	r3, #1
 8006fd6:	2300      	movhi	r3, #0
 8006fd8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d079      	beq.n	80070d2 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d107      	bne.n	8006ffa <HAL_ADC_ConfigChannel+0x4d2>
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	0e9b      	lsrs	r3, r3, #26
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	069b      	lsls	r3, r3, #26
 8006ff4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006ff8:	e015      	b.n	8007026 <HAL_ADC_ConfigChannel+0x4fe>
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007000:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007002:	fa93 f3a3 	rbit	r3, r3
 8007006:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8007008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800700a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800700c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800700e:	2b00      	cmp	r3, #0
 8007010:	d101      	bne.n	8007016 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8007012:	2320      	movs	r3, #32
 8007014:	e003      	b.n	800701e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8007016:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007018:	fab3 f383 	clz	r3, r3
 800701c:	b2db      	uxtb	r3, r3
 800701e:	3301      	adds	r3, #1
 8007020:	069b      	lsls	r3, r3, #26
 8007022:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800702e:	2b00      	cmp	r3, #0
 8007030:	d109      	bne.n	8007046 <HAL_ADC_ConfigChannel+0x51e>
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	0e9b      	lsrs	r3, r3, #26
 8007038:	3301      	adds	r3, #1
 800703a:	f003 031f 	and.w	r3, r3, #31
 800703e:	2101      	movs	r1, #1
 8007040:	fa01 f303 	lsl.w	r3, r1, r3
 8007044:	e017      	b.n	8007076 <HAL_ADC_ConfigChannel+0x54e>
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800704c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800704e:	fa93 f3a3 	rbit	r3, r3
 8007052:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8007054:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007056:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8007058:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800705a:	2b00      	cmp	r3, #0
 800705c:	d101      	bne.n	8007062 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800705e:	2320      	movs	r3, #32
 8007060:	e003      	b.n	800706a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8007062:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007064:	fab3 f383 	clz	r3, r3
 8007068:	b2db      	uxtb	r3, r3
 800706a:	3301      	adds	r3, #1
 800706c:	f003 031f 	and.w	r3, r3, #31
 8007070:	2101      	movs	r1, #1
 8007072:	fa01 f303 	lsl.w	r3, r1, r3
 8007076:	ea42 0103 	orr.w	r1, r2, r3
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007082:	2b00      	cmp	r3, #0
 8007084:	d10a      	bne.n	800709c <HAL_ADC_ConfigChannel+0x574>
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	0e9b      	lsrs	r3, r3, #26
 800708c:	3301      	adds	r3, #1
 800708e:	f003 021f 	and.w	r2, r3, #31
 8007092:	4613      	mov	r3, r2
 8007094:	005b      	lsls	r3, r3, #1
 8007096:	4413      	add	r3, r2
 8007098:	051b      	lsls	r3, r3, #20
 800709a:	e018      	b.n	80070ce <HAL_ADC_ConfigChannel+0x5a6>
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a4:	fa93 f3a3 	rbit	r3, r3
 80070a8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80070aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80070ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d101      	bne.n	80070b8 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80070b4:	2320      	movs	r3, #32
 80070b6:	e003      	b.n	80070c0 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80070b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070ba:	fab3 f383 	clz	r3, r3
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	3301      	adds	r3, #1
 80070c2:	f003 021f 	and.w	r2, r3, #31
 80070c6:	4613      	mov	r3, r2
 80070c8:	005b      	lsls	r3, r3, #1
 80070ca:	4413      	add	r3, r2
 80070cc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80070ce:	430b      	orrs	r3, r1
 80070d0:	e081      	b.n	80071d6 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d107      	bne.n	80070ee <HAL_ADC_ConfigChannel+0x5c6>
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	0e9b      	lsrs	r3, r3, #26
 80070e4:	3301      	adds	r3, #1
 80070e6:	069b      	lsls	r3, r3, #26
 80070e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80070ec:	e015      	b.n	800711a <HAL_ADC_ConfigChannel+0x5f2>
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f6:	fa93 f3a3 	rbit	r3, r3
 80070fa:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80070fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070fe:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8007100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007102:	2b00      	cmp	r3, #0
 8007104:	d101      	bne.n	800710a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8007106:	2320      	movs	r3, #32
 8007108:	e003      	b.n	8007112 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800710a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800710c:	fab3 f383 	clz	r3, r3
 8007110:	b2db      	uxtb	r3, r3
 8007112:	3301      	adds	r3, #1
 8007114:	069b      	lsls	r3, r3, #26
 8007116:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007122:	2b00      	cmp	r3, #0
 8007124:	d109      	bne.n	800713a <HAL_ADC_ConfigChannel+0x612>
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	0e9b      	lsrs	r3, r3, #26
 800712c:	3301      	adds	r3, #1
 800712e:	f003 031f 	and.w	r3, r3, #31
 8007132:	2101      	movs	r1, #1
 8007134:	fa01 f303 	lsl.w	r3, r1, r3
 8007138:	e017      	b.n	800716a <HAL_ADC_ConfigChannel+0x642>
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007140:	6a3b      	ldr	r3, [r7, #32]
 8007142:	fa93 f3a3 	rbit	r3, r3
 8007146:	61fb      	str	r3, [r7, #28]
  return result;
 8007148:	69fb      	ldr	r3, [r7, #28]
 800714a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800714c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714e:	2b00      	cmp	r3, #0
 8007150:	d101      	bne.n	8007156 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8007152:	2320      	movs	r3, #32
 8007154:	e003      	b.n	800715e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8007156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007158:	fab3 f383 	clz	r3, r3
 800715c:	b2db      	uxtb	r3, r3
 800715e:	3301      	adds	r3, #1
 8007160:	f003 031f 	and.w	r3, r3, #31
 8007164:	2101      	movs	r1, #1
 8007166:	fa01 f303 	lsl.w	r3, r1, r3
 800716a:	ea42 0103 	orr.w	r1, r2, r3
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007176:	2b00      	cmp	r3, #0
 8007178:	d10d      	bne.n	8007196 <HAL_ADC_ConfigChannel+0x66e>
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	0e9b      	lsrs	r3, r3, #26
 8007180:	3301      	adds	r3, #1
 8007182:	f003 021f 	and.w	r2, r3, #31
 8007186:	4613      	mov	r3, r2
 8007188:	005b      	lsls	r3, r3, #1
 800718a:	4413      	add	r3, r2
 800718c:	3b1e      	subs	r3, #30
 800718e:	051b      	lsls	r3, r3, #20
 8007190:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007194:	e01e      	b.n	80071d4 <HAL_ADC_ConfigChannel+0x6ac>
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	fa93 f3a3 	rbit	r3, r3
 80071a2:	613b      	str	r3, [r7, #16]
  return result;
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d104      	bne.n	80071b8 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80071ae:	2320      	movs	r3, #32
 80071b0:	e006      	b.n	80071c0 <HAL_ADC_ConfigChannel+0x698>
 80071b2:	bf00      	nop
 80071b4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	fab3 f383 	clz	r3, r3
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	3301      	adds	r3, #1
 80071c2:	f003 021f 	and.w	r2, r3, #31
 80071c6:	4613      	mov	r3, r2
 80071c8:	005b      	lsls	r3, r3, #1
 80071ca:	4413      	add	r3, r2
 80071cc:	3b1e      	subs	r3, #30
 80071ce:	051b      	lsls	r3, r3, #20
 80071d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80071d4:	430b      	orrs	r3, r1
 80071d6:	683a      	ldr	r2, [r7, #0]
 80071d8:	6892      	ldr	r2, [r2, #8]
 80071da:	4619      	mov	r1, r3
 80071dc:	f7fe ff18 	bl	8006010 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	4b3f      	ldr	r3, [pc, #252]	; (80072e4 <HAL_ADC_ConfigChannel+0x7bc>)
 80071e6:	4013      	ands	r3, r2
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d071      	beq.n	80072d0 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80071ec:	483e      	ldr	r0, [pc, #248]	; (80072e8 <HAL_ADC_ConfigChannel+0x7c0>)
 80071ee:	f7fe fe11 	bl	8005e14 <LL_ADC_GetCommonPathInternalCh>
 80071f2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a3c      	ldr	r2, [pc, #240]	; (80072ec <HAL_ADC_ConfigChannel+0x7c4>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d004      	beq.n	800720a <HAL_ADC_ConfigChannel+0x6e2>
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a3a      	ldr	r2, [pc, #232]	; (80072f0 <HAL_ADC_ConfigChannel+0x7c8>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d127      	bne.n	800725a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800720a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800720e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007212:	2b00      	cmp	r3, #0
 8007214:	d121      	bne.n	800725a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800721e:	d157      	bne.n	80072d0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007220:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007224:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007228:	4619      	mov	r1, r3
 800722a:	482f      	ldr	r0, [pc, #188]	; (80072e8 <HAL_ADC_ConfigChannel+0x7c0>)
 800722c:	f7fe fddf 	bl	8005dee <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007230:	4b30      	ldr	r3, [pc, #192]	; (80072f4 <HAL_ADC_ConfigChannel+0x7cc>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	099b      	lsrs	r3, r3, #6
 8007236:	4a30      	ldr	r2, [pc, #192]	; (80072f8 <HAL_ADC_ConfigChannel+0x7d0>)
 8007238:	fba2 2303 	umull	r2, r3, r2, r3
 800723c:	099b      	lsrs	r3, r3, #6
 800723e:	1c5a      	adds	r2, r3, #1
 8007240:	4613      	mov	r3, r2
 8007242:	005b      	lsls	r3, r3, #1
 8007244:	4413      	add	r3, r2
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800724a:	e002      	b.n	8007252 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	3b01      	subs	r3, #1
 8007250:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d1f9      	bne.n	800724c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007258:	e03a      	b.n	80072d0 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a27      	ldr	r2, [pc, #156]	; (80072fc <HAL_ADC_ConfigChannel+0x7d4>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d113      	bne.n	800728c <HAL_ADC_ConfigChannel+0x764>
 8007264:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007268:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800726c:	2b00      	cmp	r3, #0
 800726e:	d10d      	bne.n	800728c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a22      	ldr	r2, [pc, #136]	; (8007300 <HAL_ADC_ConfigChannel+0x7d8>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d02a      	beq.n	80072d0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800727a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800727e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007282:	4619      	mov	r1, r3
 8007284:	4818      	ldr	r0, [pc, #96]	; (80072e8 <HAL_ADC_ConfigChannel+0x7c0>)
 8007286:	f7fe fdb2 	bl	8005dee <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800728a:	e021      	b.n	80072d0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a1c      	ldr	r2, [pc, #112]	; (8007304 <HAL_ADC_ConfigChannel+0x7dc>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d11c      	bne.n	80072d0 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007296:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800729a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d116      	bne.n	80072d0 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a16      	ldr	r2, [pc, #88]	; (8007300 <HAL_ADC_ConfigChannel+0x7d8>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d011      	beq.n	80072d0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80072ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80072b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80072b4:	4619      	mov	r1, r3
 80072b6:	480c      	ldr	r0, [pc, #48]	; (80072e8 <HAL_ADC_ConfigChannel+0x7c0>)
 80072b8:	f7fe fd99 	bl	8005dee <LL_ADC_SetCommonPathInternalCh>
 80072bc:	e008      	b.n	80072d0 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072c2:	f043 0220 	orr.w	r2, r3, #32
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80072d8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80072dc:	4618      	mov	r0, r3
 80072de:	37d8      	adds	r7, #216	; 0xd8
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}
 80072e4:	80080000 	.word	0x80080000
 80072e8:	50000300 	.word	0x50000300
 80072ec:	c3210000 	.word	0xc3210000
 80072f0:	90c00010 	.word	0x90c00010
 80072f4:	20000538 	.word	0x20000538
 80072f8:	053e2d63 	.word	0x053e2d63
 80072fc:	c7520000 	.word	0xc7520000
 8007300:	50000100 	.word	0x50000100
 8007304:	cb840000 	.word	0xcb840000

08007308 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4618      	mov	r0, r3
 8007316:	f7fe ff4d 	bl	80061b4 <LL_ADC_IsEnabled>
 800731a:	4603      	mov	r3, r0
 800731c:	2b00      	cmp	r3, #0
 800731e:	d14d      	bne.n	80073bc <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	689a      	ldr	r2, [r3, #8]
 8007326:	4b28      	ldr	r3, [pc, #160]	; (80073c8 <ADC_Enable+0xc0>)
 8007328:	4013      	ands	r3, r2
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00d      	beq.n	800734a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007332:	f043 0210 	orr.w	r2, r3, #16
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800733e:	f043 0201 	orr.w	r2, r3, #1
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	e039      	b.n	80073be <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4618      	mov	r0, r3
 8007350:	f7fe ff1c 	bl	800618c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8007354:	f7fe fd0a 	bl	8005d6c <HAL_GetTick>
 8007358:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800735a:	e028      	b.n	80073ae <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4618      	mov	r0, r3
 8007362:	f7fe ff27 	bl	80061b4 <LL_ADC_IsEnabled>
 8007366:	4603      	mov	r3, r0
 8007368:	2b00      	cmp	r3, #0
 800736a:	d104      	bne.n	8007376 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4618      	mov	r0, r3
 8007372:	f7fe ff0b 	bl	800618c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007376:	f7fe fcf9 	bl	8005d6c <HAL_GetTick>
 800737a:	4602      	mov	r2, r0
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	1ad3      	subs	r3, r2, r3
 8007380:	2b02      	cmp	r3, #2
 8007382:	d914      	bls.n	80073ae <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f003 0301 	and.w	r3, r3, #1
 800738e:	2b01      	cmp	r3, #1
 8007390:	d00d      	beq.n	80073ae <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007396:	f043 0210 	orr.w	r2, r3, #16
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073a2:	f043 0201 	orr.w	r2, r3, #1
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	e007      	b.n	80073be <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f003 0301 	and.w	r3, r3, #1
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d1cf      	bne.n	800735c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80073bc:	2300      	movs	r3, #0
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3710      	adds	r7, #16
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	8000003f 	.word	0x8000003f

080073cc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073de:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d14b      	bne.n	800747e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073ea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f003 0308 	and.w	r3, r3, #8
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d021      	beq.n	8007444 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4618      	mov	r0, r3
 8007406:	f7fe fdb1 	bl	8005f6c <LL_ADC_REG_IsTriggerSourceSWStart>
 800740a:	4603      	mov	r3, r0
 800740c:	2b00      	cmp	r3, #0
 800740e:	d032      	beq.n	8007476 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	68db      	ldr	r3, [r3, #12]
 8007416:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800741a:	2b00      	cmp	r3, #0
 800741c:	d12b      	bne.n	8007476 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007422:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800742e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007432:	2b00      	cmp	r3, #0
 8007434:	d11f      	bne.n	8007476 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800743a:	f043 0201 	orr.w	r2, r3, #1
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	65da      	str	r2, [r3, #92]	; 0x5c
 8007442:	e018      	b.n	8007476 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	f003 0302 	and.w	r3, r3, #2
 800744e:	2b00      	cmp	r3, #0
 8007450:	d111      	bne.n	8007476 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007456:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007462:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007466:	2b00      	cmp	r3, #0
 8007468:	d105      	bne.n	8007476 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800746e:	f043 0201 	orr.w	r2, r3, #1
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007476:	68f8      	ldr	r0, [r7, #12]
 8007478:	f7fc fcbe 	bl	8003df8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800747c:	e00e      	b.n	800749c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007482:	f003 0310 	and.w	r3, r3, #16
 8007486:	2b00      	cmp	r3, #0
 8007488:	d003      	beq.n	8007492 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800748a:	68f8      	ldr	r0, [r7, #12]
 800748c:	f7ff fb42 	bl	8006b14 <HAL_ADC_ErrorCallback>
}
 8007490:	e004      	b.n	800749c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	4798      	blx	r3
}
 800749c:	bf00      	nop
 800749e:	3710      	adds	r7, #16
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	f7fc fb9e 	bl	8003bf4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80074b8:	bf00      	nop
 80074ba:	3710      	adds	r7, #16
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074cc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074de:	f043 0204 	orr.w	r2, r3, #4
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80074e6:	68f8      	ldr	r0, [r7, #12]
 80074e8:	f7ff fb14 	bl	8006b14 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80074ec:	bf00      	nop
 80074ee:	3710      	adds	r7, #16
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <LL_ADC_IsEnabled>:
{
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	f003 0301 	and.w	r3, r3, #1
 8007504:	2b01      	cmp	r3, #1
 8007506:	d101      	bne.n	800750c <LL_ADC_IsEnabled+0x18>
 8007508:	2301      	movs	r3, #1
 800750a:	e000      	b.n	800750e <LL_ADC_IsEnabled+0x1a>
 800750c:	2300      	movs	r3, #0
}
 800750e:	4618      	mov	r0, r3
 8007510:	370c      	adds	r7, #12
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr

0800751a <LL_ADC_REG_IsConversionOngoing>:
{
 800751a:	b480      	push	{r7}
 800751c:	b083      	sub	sp, #12
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	f003 0304 	and.w	r3, r3, #4
 800752a:	2b04      	cmp	r3, #4
 800752c:	d101      	bne.n	8007532 <LL_ADC_REG_IsConversionOngoing+0x18>
 800752e:	2301      	movs	r3, #1
 8007530:	e000      	b.n	8007534 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007532:	2300      	movs	r3, #0
}
 8007534:	4618      	mov	r0, r3
 8007536:	370c      	adds	r7, #12
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr

08007540 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8007548:	bf00      	nop
 800754a:	370c      	adds	r7, #12
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800755c:	bf00      	nop
 800755e:	370c      	adds	r7, #12
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8007570:	bf00      	nop
 8007572:	370c      	adds	r7, #12
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr

0800757c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8007584:	bf00      	nop
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8007598:	bf00      	nop
 800759a:	370c      	adds	r7, #12
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80075a4:	b590      	push	{r4, r7, lr}
 80075a6:	b0a1      	sub	sp, #132	; 0x84
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80075ae:	2300      	movs	r3, #0
 80075b0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d101      	bne.n	80075c2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80075be:	2302      	movs	r3, #2
 80075c0:	e08b      	b.n	80076da <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2201      	movs	r2, #1
 80075c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80075ca:	2300      	movs	r3, #0
 80075cc:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80075ce:	2300      	movs	r3, #0
 80075d0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075da:	d102      	bne.n	80075e2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80075dc:	4b41      	ldr	r3, [pc, #260]	; (80076e4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80075de:	60bb      	str	r3, [r7, #8]
 80075e0:	e001      	b.n	80075e6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80075e2:	2300      	movs	r3, #0
 80075e4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d10b      	bne.n	8007604 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075f0:	f043 0220 	orr.w	r2, r3, #32
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8007600:	2301      	movs	r3, #1
 8007602:	e06a      	b.n	80076da <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	4618      	mov	r0, r3
 8007608:	f7ff ff87 	bl	800751a <LL_ADC_REG_IsConversionOngoing>
 800760c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4618      	mov	r0, r3
 8007614:	f7ff ff81 	bl	800751a <LL_ADC_REG_IsConversionOngoing>
 8007618:	4603      	mov	r3, r0
 800761a:	2b00      	cmp	r3, #0
 800761c:	d14c      	bne.n	80076b8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800761e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007620:	2b00      	cmp	r3, #0
 8007622:	d149      	bne.n	80076b8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007624:	4b30      	ldr	r3, [pc, #192]	; (80076e8 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8007626:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d028      	beq.n	8007682 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8007630:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	6859      	ldr	r1, [r3, #4]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007642:	035b      	lsls	r3, r3, #13
 8007644:	430b      	orrs	r3, r1
 8007646:	431a      	orrs	r2, r3
 8007648:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800764a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800764c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007650:	f7ff ff50 	bl	80074f4 <LL_ADC_IsEnabled>
 8007654:	4604      	mov	r4, r0
 8007656:	4823      	ldr	r0, [pc, #140]	; (80076e4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8007658:	f7ff ff4c 	bl	80074f4 <LL_ADC_IsEnabled>
 800765c:	4603      	mov	r3, r0
 800765e:	4323      	orrs	r3, r4
 8007660:	2b00      	cmp	r3, #0
 8007662:	d133      	bne.n	80076cc <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8007664:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800766c:	f023 030f 	bic.w	r3, r3, #15
 8007670:	683a      	ldr	r2, [r7, #0]
 8007672:	6811      	ldr	r1, [r2, #0]
 8007674:	683a      	ldr	r2, [r7, #0]
 8007676:	6892      	ldr	r2, [r2, #8]
 8007678:	430a      	orrs	r2, r1
 800767a:	431a      	orrs	r2, r3
 800767c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800767e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007680:	e024      	b.n	80076cc <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8007682:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800768a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800768c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800768e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007692:	f7ff ff2f 	bl	80074f4 <LL_ADC_IsEnabled>
 8007696:	4604      	mov	r4, r0
 8007698:	4812      	ldr	r0, [pc, #72]	; (80076e4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800769a:	f7ff ff2b 	bl	80074f4 <LL_ADC_IsEnabled>
 800769e:	4603      	mov	r3, r0
 80076a0:	4323      	orrs	r3, r4
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d112      	bne.n	80076cc <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80076a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80076ae:	f023 030f 	bic.w	r3, r3, #15
 80076b2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80076b4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80076b6:	e009      	b.n	80076cc <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076bc:	f043 0220 	orr.w	r2, r3, #32
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80076ca:	e000      	b.n	80076ce <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80076cc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80076d6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3784      	adds	r7, #132	; 0x84
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd90      	pop	{r4, r7, pc}
 80076e2:	bf00      	nop
 80076e4:	50000100 	.word	0x50000100
 80076e8:	50000300 	.word	0x50000300

080076ec <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b082      	sub	sp, #8
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d101      	bne.n	80076fe <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	e023      	b.n	8007746 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007704:	b2db      	uxtb	r3, r3
 8007706:	2b00      	cmp	r3, #0
 8007708:	d106      	bne.n	8007718 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f7fd f856 	bl	80047c4 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2201      	movs	r2, #1
 8007740:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	3708      	adds	r7, #8
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
	...

08007750 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007750:	b480      	push	{r7}
 8007752:	b085      	sub	sp, #20
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f003 0307 	and.w	r3, r3, #7
 800775e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007760:	4b0c      	ldr	r3, [pc, #48]	; (8007794 <__NVIC_SetPriorityGrouping+0x44>)
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007766:	68ba      	ldr	r2, [r7, #8]
 8007768:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800776c:	4013      	ands	r3, r2
 800776e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007778:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800777c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007780:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007782:	4a04      	ldr	r2, [pc, #16]	; (8007794 <__NVIC_SetPriorityGrouping+0x44>)
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	60d3      	str	r3, [r2, #12]
}
 8007788:	bf00      	nop
 800778a:	3714      	adds	r7, #20
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr
 8007794:	e000ed00 	.word	0xe000ed00

08007798 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007798:	b480      	push	{r7}
 800779a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800779c:	4b04      	ldr	r3, [pc, #16]	; (80077b0 <__NVIC_GetPriorityGrouping+0x18>)
 800779e:	68db      	ldr	r3, [r3, #12]
 80077a0:	0a1b      	lsrs	r3, r3, #8
 80077a2:	f003 0307 	and.w	r3, r3, #7
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr
 80077b0:	e000ed00 	.word	0xe000ed00

080077b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	4603      	mov	r3, r0
 80077bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80077be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	db0b      	blt.n	80077de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80077c6:	79fb      	ldrb	r3, [r7, #7]
 80077c8:	f003 021f 	and.w	r2, r3, #31
 80077cc:	4907      	ldr	r1, [pc, #28]	; (80077ec <__NVIC_EnableIRQ+0x38>)
 80077ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077d2:	095b      	lsrs	r3, r3, #5
 80077d4:	2001      	movs	r0, #1
 80077d6:	fa00 f202 	lsl.w	r2, r0, r2
 80077da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80077de:	bf00      	nop
 80077e0:	370c      	adds	r7, #12
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop
 80077ec:	e000e100 	.word	0xe000e100

080077f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b083      	sub	sp, #12
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	4603      	mov	r3, r0
 80077f8:	6039      	str	r1, [r7, #0]
 80077fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80077fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007800:	2b00      	cmp	r3, #0
 8007802:	db0a      	blt.n	800781a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	b2da      	uxtb	r2, r3
 8007808:	490c      	ldr	r1, [pc, #48]	; (800783c <__NVIC_SetPriority+0x4c>)
 800780a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800780e:	0112      	lsls	r2, r2, #4
 8007810:	b2d2      	uxtb	r2, r2
 8007812:	440b      	add	r3, r1
 8007814:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007818:	e00a      	b.n	8007830 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	b2da      	uxtb	r2, r3
 800781e:	4908      	ldr	r1, [pc, #32]	; (8007840 <__NVIC_SetPriority+0x50>)
 8007820:	79fb      	ldrb	r3, [r7, #7]
 8007822:	f003 030f 	and.w	r3, r3, #15
 8007826:	3b04      	subs	r3, #4
 8007828:	0112      	lsls	r2, r2, #4
 800782a:	b2d2      	uxtb	r2, r2
 800782c:	440b      	add	r3, r1
 800782e:	761a      	strb	r2, [r3, #24]
}
 8007830:	bf00      	nop
 8007832:	370c      	adds	r7, #12
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr
 800783c:	e000e100 	.word	0xe000e100
 8007840:	e000ed00 	.word	0xe000ed00

08007844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007844:	b480      	push	{r7}
 8007846:	b089      	sub	sp, #36	; 0x24
 8007848:	af00      	add	r7, sp, #0
 800784a:	60f8      	str	r0, [r7, #12]
 800784c:	60b9      	str	r1, [r7, #8]
 800784e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f003 0307 	and.w	r3, r3, #7
 8007856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007858:	69fb      	ldr	r3, [r7, #28]
 800785a:	f1c3 0307 	rsb	r3, r3, #7
 800785e:	2b04      	cmp	r3, #4
 8007860:	bf28      	it	cs
 8007862:	2304      	movcs	r3, #4
 8007864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007866:	69fb      	ldr	r3, [r7, #28]
 8007868:	3304      	adds	r3, #4
 800786a:	2b06      	cmp	r3, #6
 800786c:	d902      	bls.n	8007874 <NVIC_EncodePriority+0x30>
 800786e:	69fb      	ldr	r3, [r7, #28]
 8007870:	3b03      	subs	r3, #3
 8007872:	e000      	b.n	8007876 <NVIC_EncodePriority+0x32>
 8007874:	2300      	movs	r3, #0
 8007876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007878:	f04f 32ff 	mov.w	r2, #4294967295
 800787c:	69bb      	ldr	r3, [r7, #24]
 800787e:	fa02 f303 	lsl.w	r3, r2, r3
 8007882:	43da      	mvns	r2, r3
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	401a      	ands	r2, r3
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800788c:	f04f 31ff 	mov.w	r1, #4294967295
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	fa01 f303 	lsl.w	r3, r1, r3
 8007896:	43d9      	mvns	r1, r3
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800789c:	4313      	orrs	r3, r2
         );
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3724      	adds	r7, #36	; 0x24
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr
	...

080078ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	3b01      	subs	r3, #1
 80078b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80078bc:	d301      	bcc.n	80078c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80078be:	2301      	movs	r3, #1
 80078c0:	e00f      	b.n	80078e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80078c2:	4a0a      	ldr	r2, [pc, #40]	; (80078ec <SysTick_Config+0x40>)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	3b01      	subs	r3, #1
 80078c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80078ca:	210f      	movs	r1, #15
 80078cc:	f04f 30ff 	mov.w	r0, #4294967295
 80078d0:	f7ff ff8e 	bl	80077f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80078d4:	4b05      	ldr	r3, [pc, #20]	; (80078ec <SysTick_Config+0x40>)
 80078d6:	2200      	movs	r2, #0
 80078d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80078da:	4b04      	ldr	r3, [pc, #16]	; (80078ec <SysTick_Config+0x40>)
 80078dc:	2207      	movs	r2, #7
 80078de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80078e0:	2300      	movs	r3, #0
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3708      	adds	r7, #8
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	e000e010 	.word	0xe000e010

080078f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b082      	sub	sp, #8
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f7ff ff29 	bl	8007750 <__NVIC_SetPriorityGrouping>
}
 80078fe:	bf00      	nop
 8007900:	3708      	adds	r7, #8
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}

08007906 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007906:	b580      	push	{r7, lr}
 8007908:	b086      	sub	sp, #24
 800790a:	af00      	add	r7, sp, #0
 800790c:	4603      	mov	r3, r0
 800790e:	60b9      	str	r1, [r7, #8]
 8007910:	607a      	str	r2, [r7, #4]
 8007912:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007914:	f7ff ff40 	bl	8007798 <__NVIC_GetPriorityGrouping>
 8007918:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	68b9      	ldr	r1, [r7, #8]
 800791e:	6978      	ldr	r0, [r7, #20]
 8007920:	f7ff ff90 	bl	8007844 <NVIC_EncodePriority>
 8007924:	4602      	mov	r2, r0
 8007926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800792a:	4611      	mov	r1, r2
 800792c:	4618      	mov	r0, r3
 800792e:	f7ff ff5f 	bl	80077f0 <__NVIC_SetPriority>
}
 8007932:	bf00      	nop
 8007934:	3718      	adds	r7, #24
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b082      	sub	sp, #8
 800793e:	af00      	add	r7, sp, #0
 8007940:	4603      	mov	r3, r0
 8007942:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007948:	4618      	mov	r0, r3
 800794a:	f7ff ff33 	bl	80077b4 <__NVIC_EnableIRQ>
}
 800794e:	bf00      	nop
 8007950:	3708      	adds	r7, #8
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007956:	b580      	push	{r7, lr}
 8007958:	b082      	sub	sp, #8
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f7ff ffa4 	bl	80078ac <SysTick_Config>
 8007964:	4603      	mov	r3, r0
}
 8007966:	4618      	mov	r0, r3
 8007968:	3708      	adds	r7, #8
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}

0800796e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800796e:	b580      	push	{r7, lr}
 8007970:	b082      	sub	sp, #8
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d101      	bne.n	8007980 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800797c:	2301      	movs	r3, #1
 800797e:	e014      	b.n	80079aa <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	791b      	ldrb	r3, [r3, #4]
 8007984:	b2db      	uxtb	r3, r3
 8007986:	2b00      	cmp	r3, #0
 8007988:	d105      	bne.n	8007996 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2200      	movs	r2, #0
 800798e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f7fc ff71 	bl	8004878 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2202      	movs	r2, #2
 800799a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2201      	movs	r2, #1
 80079a6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3708      	adds	r7, #8
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}

080079b2 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80079b2:	b580      	push	{r7, lr}
 80079b4:	b082      	sub	sp, #8
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
 80079ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	795b      	ldrb	r3, [r3, #5]
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d101      	bne.n	80079c8 <HAL_DAC_Start+0x16>
 80079c4:	2302      	movs	r3, #2
 80079c6:	e043      	b.n	8007a50 <HAL_DAC_Start+0x9e>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2202      	movs	r2, #2
 80079d2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	6819      	ldr	r1, [r3, #0]
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	f003 0310 	and.w	r3, r3, #16
 80079e0:	2201      	movs	r2, #1
 80079e2:	409a      	lsls	r2, r3
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	430a      	orrs	r2, r1
 80079ea:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 80079ec:	2001      	movs	r0, #1
 80079ee:	f7fe f9c9 	bl	8005d84 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d10f      	bne.n	8007a18 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8007a02:	2b02      	cmp	r3, #2
 8007a04:	d11d      	bne.n	8007a42 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	685a      	ldr	r2, [r3, #4]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f042 0201 	orr.w	r2, r2, #1
 8007a14:	605a      	str	r2, [r3, #4]
 8007a16:	e014      	b.n	8007a42 <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	f003 0310 	and.w	r3, r3, #16
 8007a28:	2102      	movs	r1, #2
 8007a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d107      	bne.n	8007a42 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	685a      	ldr	r2, [r3, #4]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f042 0202 	orr.w	r2, r2, #2
 8007a40:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2201      	movs	r2, #1
 8007a46:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007a4e:	2300      	movs	r3, #0
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3708      	adds	r7, #8
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b087      	sub	sp, #28
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	60b9      	str	r1, [r7, #8]
 8007a62:	607a      	str	r2, [r7, #4]
 8007a64:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8007a66:	2300      	movs	r3, #0
 8007a68:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d105      	bne.n	8007a88 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8007a7c:	697a      	ldr	r2, [r7, #20]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4413      	add	r3, r2
 8007a82:	3308      	adds	r3, #8
 8007a84:	617b      	str	r3, [r7, #20]
 8007a86:	e004      	b.n	8007a92 <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8007a88:	697a      	ldr	r2, [r7, #20]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4413      	add	r3, r2
 8007a8e:	3314      	adds	r3, #20
 8007a90:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	461a      	mov	r2, r3
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8007a9a:	2300      	movs	r3, #0
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	371c      	adds	r7, #28
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr

08007aa8 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b08a      	sub	sp, #40	; 0x28
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	60f8      	str	r0, [r7, #12]
 8007ab0:	60b9      	str	r1, [r7, #8]
 8007ab2:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	795b      	ldrb	r3, [r3, #5]
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d101      	bne.n	8007ac0 <HAL_DAC_ConfigChannel+0x18>
 8007abc:	2302      	movs	r3, #2
 8007abe:	e192      	b.n	8007de6 <HAL_DAC_ConfigChannel+0x33e>
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2202      	movs	r2, #2
 8007aca:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	2b04      	cmp	r3, #4
 8007ad2:	d174      	bne.n	8007bbe <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8007ad4:	f7fe f94a 	bl	8005d6c <HAL_GetTick>
 8007ad8:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d134      	bne.n	8007b4a <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007ae0:	e011      	b.n	8007b06 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007ae2:	f7fe f943 	bl	8005d6c <HAL_GetTick>
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	69fb      	ldr	r3, [r7, #28]
 8007aea:	1ad3      	subs	r3, r2, r3
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d90a      	bls.n	8007b06 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	691b      	ldr	r3, [r3, #16]
 8007af4:	f043 0208 	orr.w	r2, r3, #8
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2203      	movs	r2, #3
 8007b00:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8007b02:	2303      	movs	r3, #3
 8007b04:	e16f      	b.n	8007de6 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d1e6      	bne.n	8007ae2 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8007b14:	2001      	movs	r0, #1
 8007b16:	f7fe f935 	bl	8005d84 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	68ba      	ldr	r2, [r7, #8]
 8007b20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007b22:	641a      	str	r2, [r3, #64]	; 0x40
 8007b24:	e01e      	b.n	8007b64 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007b26:	f7fe f921 	bl	8005d6c <HAL_GetTick>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	69fb      	ldr	r3, [r7, #28]
 8007b2e:	1ad3      	subs	r3, r2, r3
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d90a      	bls.n	8007b4a <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	691b      	ldr	r3, [r3, #16]
 8007b38:	f043 0208 	orr.w	r2, r3, #8
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2203      	movs	r2, #3
 8007b44:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8007b46:	2303      	movs	r3, #3
 8007b48:	e14d      	b.n	8007de6 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	dbe8      	blt.n	8007b26 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8007b54:	2001      	movs	r0, #1
 8007b56:	f7fe f915 	bl	8005d84 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	68ba      	ldr	r2, [r7, #8]
 8007b60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007b62:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f003 0310 	and.w	r3, r3, #16
 8007b70:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8007b74:	fa01 f303 	lsl.w	r3, r1, r3
 8007b78:	43db      	mvns	r3, r3
 8007b7a:	ea02 0103 	and.w	r1, r2, r3
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f003 0310 	and.w	r3, r3, #16
 8007b88:	409a      	lsls	r2, r3
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	430a      	orrs	r2, r1
 8007b90:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f003 0310 	and.w	r3, r3, #16
 8007b9e:	21ff      	movs	r1, #255	; 0xff
 8007ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ba4:	43db      	mvns	r3, r3
 8007ba6:	ea02 0103 	and.w	r1, r2, r3
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f003 0310 	and.w	r3, r3, #16
 8007bb4:	409a      	lsls	r2, r3
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	430a      	orrs	r2, r1
 8007bbc:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	69db      	ldr	r3, [r3, #28]
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d11d      	bne.n	8007c02 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bcc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f003 0310 	and.w	r3, r3, #16
 8007bd4:	221f      	movs	r2, #31
 8007bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bda:	43db      	mvns	r3, r3
 8007bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bde:	4013      	ands	r3, r2
 8007be0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	6a1b      	ldr	r3, [r3, #32]
 8007be6:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f003 0310 	and.w	r3, r3, #16
 8007bee:	69ba      	ldr	r2, [r7, #24]
 8007bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8007bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c00:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c08:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f003 0310 	and.w	r3, r3, #16
 8007c10:	2207      	movs	r2, #7
 8007c12:	fa02 f303 	lsl.w	r3, r2, r3
 8007c16:	43db      	mvns	r3, r3
 8007c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c1a:	4013      	ands	r3, r2
 8007c1c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	699b      	ldr	r3, [r3, #24]
 8007c22:	2b01      	cmp	r3, #1
 8007c24:	d102      	bne.n	8007c2c <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8007c26:	2300      	movs	r3, #0
 8007c28:	623b      	str	r3, [r7, #32]
 8007c2a:	e00f      	b.n	8007c4c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	699b      	ldr	r3, [r3, #24]
 8007c30:	2b02      	cmp	r3, #2
 8007c32:	d102      	bne.n	8007c3a <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8007c34:	2301      	movs	r3, #1
 8007c36:	623b      	str	r3, [r7, #32]
 8007c38:	e008      	b.n	8007c4c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	695b      	ldr	r3, [r3, #20]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d102      	bne.n	8007c48 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8007c42:	2301      	movs	r3, #1
 8007c44:	623b      	str	r3, [r7, #32]
 8007c46:	e001      	b.n	8007c4c <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	689a      	ldr	r2, [r3, #8]
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	695b      	ldr	r3, [r3, #20]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	6a3a      	ldr	r2, [r7, #32]
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f003 0310 	and.w	r3, r3, #16
 8007c62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c66:	fa02 f303 	lsl.w	r3, r2, r3
 8007c6a:	43db      	mvns	r3, r3
 8007c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c6e:	4013      	ands	r3, r2
 8007c70:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	791b      	ldrb	r3, [r3, #4]
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d102      	bne.n	8007c80 <HAL_DAC_ConfigChannel+0x1d8>
 8007c7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c7e:	e000      	b.n	8007c82 <HAL_DAC_ConfigChannel+0x1da>
 8007c80:	2300      	movs	r3, #0
 8007c82:	69ba      	ldr	r2, [r7, #24]
 8007c84:	4313      	orrs	r3, r2
 8007c86:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f003 0310 	and.w	r3, r3, #16
 8007c8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c92:	fa02 f303 	lsl.w	r3, r2, r3
 8007c96:	43db      	mvns	r3, r3
 8007c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c9a:	4013      	ands	r3, r2
 8007c9c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	795b      	ldrb	r3, [r3, #5]
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d102      	bne.n	8007cac <HAL_DAC_ConfigChannel+0x204>
 8007ca6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007caa:	e000      	b.n	8007cae <HAL_DAC_ConfigChannel+0x206>
 8007cac:	2300      	movs	r3, #0
 8007cae:	69ba      	ldr	r2, [r7, #24]
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8007cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007cba:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	2b02      	cmp	r3, #2
 8007cc2:	d114      	bne.n	8007cee <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8007cc4:	f002 fc1e 	bl	800a504 <HAL_RCC_GetHCLKFreq>
 8007cc8:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	4a48      	ldr	r2, [pc, #288]	; (8007df0 <HAL_DAC_ConfigChannel+0x348>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d904      	bls.n	8007cdc <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8007cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8007cda:	e00f      	b.n	8007cfc <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	4a45      	ldr	r2, [pc, #276]	; (8007df4 <HAL_DAC_ConfigChannel+0x34c>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d90a      	bls.n	8007cfa <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8007ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007cea:	627b      	str	r3, [r7, #36]	; 0x24
 8007cec:	e006      	b.n	8007cfc <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8007cf8:	e000      	b.n	8007cfc <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8007cfa:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f003 0310 	and.w	r3, r3, #16
 8007d02:	69ba      	ldr	r2, [r7, #24]
 8007d04:	fa02 f303 	lsl.w	r3, r2, r3
 8007d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	6819      	ldr	r1, [r3, #0]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f003 0310 	and.w	r3, r3, #16
 8007d22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007d26:	fa02 f303 	lsl.w	r3, r2, r3
 8007d2a:	43da      	mvns	r2, r3
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	400a      	ands	r2, r1
 8007d32:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f003 0310 	and.w	r3, r3, #16
 8007d42:	f640 72fe 	movw	r2, #4094	; 0xffe
 8007d46:	fa02 f303 	lsl.w	r3, r2, r3
 8007d4a:	43db      	mvns	r3, r3
 8007d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d4e:	4013      	ands	r3, r2
 8007d50:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	68db      	ldr	r3, [r3, #12]
 8007d56:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f003 0310 	and.w	r3, r3, #16
 8007d5e:	69ba      	ldr	r2, [r7, #24]
 8007d60:	fa02 f303 	lsl.w	r3, r2, r3
 8007d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d66:	4313      	orrs	r3, r2
 8007d68:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d70:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	6819      	ldr	r1, [r3, #0]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f003 0310 	and.w	r3, r3, #16
 8007d7e:	22c0      	movs	r2, #192	; 0xc0
 8007d80:	fa02 f303 	lsl.w	r3, r2, r3
 8007d84:	43da      	mvns	r2, r3
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	400a      	ands	r2, r1
 8007d8c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	68db      	ldr	r3, [r3, #12]
 8007d92:	089b      	lsrs	r3, r3, #2
 8007d94:	f003 030f 	and.w	r3, r3, #15
 8007d98:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	691b      	ldr	r3, [r3, #16]
 8007d9e:	089b      	lsrs	r3, r3, #2
 8007da0:	021b      	lsls	r3, r3, #8
 8007da2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007da6:	69ba      	ldr	r2, [r7, #24]
 8007da8:	4313      	orrs	r3, r2
 8007daa:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f003 0310 	and.w	r3, r3, #16
 8007db8:	f640 710f 	movw	r1, #3855	; 0xf0f
 8007dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8007dc0:	43db      	mvns	r3, r3
 8007dc2:	ea02 0103 	and.w	r1, r2, r3
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f003 0310 	and.w	r3, r3, #16
 8007dcc:	69ba      	ldr	r2, [r7, #24]
 8007dce:	409a      	lsls	r2, r3
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	430a      	orrs	r2, r1
 8007dd6:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2200      	movs	r2, #0
 8007de2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007de4:	2300      	movs	r3, #0
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3728      	adds	r7, #40	; 0x28
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	09896800 	.word	0x09896800
 8007df4:	04c4b400 	.word	0x04c4b400

08007df8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b084      	sub	sp, #16
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d101      	bne.n	8007e0a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007e06:	2301      	movs	r3, #1
 8007e08:	e08d      	b.n	8007f26 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	461a      	mov	r2, r3
 8007e10:	4b47      	ldr	r3, [pc, #284]	; (8007f30 <HAL_DMA_Init+0x138>)
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d80f      	bhi.n	8007e36 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	4b45      	ldr	r3, [pc, #276]	; (8007f34 <HAL_DMA_Init+0x13c>)
 8007e1e:	4413      	add	r3, r2
 8007e20:	4a45      	ldr	r2, [pc, #276]	; (8007f38 <HAL_DMA_Init+0x140>)
 8007e22:	fba2 2303 	umull	r2, r3, r2, r3
 8007e26:	091b      	lsrs	r3, r3, #4
 8007e28:	009a      	lsls	r2, r3, #2
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	4a42      	ldr	r2, [pc, #264]	; (8007f3c <HAL_DMA_Init+0x144>)
 8007e32:	641a      	str	r2, [r3, #64]	; 0x40
 8007e34:	e00e      	b.n	8007e54 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	4b40      	ldr	r3, [pc, #256]	; (8007f40 <HAL_DMA_Init+0x148>)
 8007e3e:	4413      	add	r3, r2
 8007e40:	4a3d      	ldr	r2, [pc, #244]	; (8007f38 <HAL_DMA_Init+0x140>)
 8007e42:	fba2 2303 	umull	r2, r3, r2, r3
 8007e46:	091b      	lsrs	r3, r3, #4
 8007e48:	009a      	lsls	r2, r3, #2
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	4a3c      	ldr	r2, [pc, #240]	; (8007f44 <HAL_DMA_Init+0x14c>)
 8007e52:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2202      	movs	r2, #2
 8007e58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e6e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007e78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	691b      	ldr	r3, [r3, #16]
 8007e7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	699b      	ldr	r3, [r3, #24]
 8007e8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6a1b      	ldr	r3, [r3, #32]
 8007e96:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007e98:	68fa      	ldr	r2, [r7, #12]
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	68fa      	ldr	r2, [r7, #12]
 8007ea4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 fa76 	bl	8008398 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	689b      	ldr	r3, [r3, #8]
 8007eb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007eb4:	d102      	bne.n	8007ebc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	685a      	ldr	r2, [r3, #4]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ec4:	b2d2      	uxtb	r2, r2
 8007ec6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007ed0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d010      	beq.n	8007efc <HAL_DMA_Init+0x104>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	2b04      	cmp	r3, #4
 8007ee0:	d80c      	bhi.n	8007efc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 fa96 	bl	8008414 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eec:	2200      	movs	r2, #0
 8007eee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007ef8:	605a      	str	r2, [r3, #4]
 8007efa:	e008      	b.n	8007f0e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2200      	movs	r2, #0
 8007f00:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007f24:	2300      	movs	r3, #0
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3710      	adds	r7, #16
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
 8007f2e:	bf00      	nop
 8007f30:	40020407 	.word	0x40020407
 8007f34:	bffdfff8 	.word	0xbffdfff8
 8007f38:	cccccccd 	.word	0xcccccccd
 8007f3c:	40020000 	.word	0x40020000
 8007f40:	bffdfbf8 	.word	0xbffdfbf8
 8007f44:	40020400 	.word	0x40020400

08007f48 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b086      	sub	sp, #24
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	60f8      	str	r0, [r7, #12]
 8007f50:	60b9      	str	r1, [r7, #8]
 8007f52:	607a      	str	r2, [r7, #4]
 8007f54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f56:	2300      	movs	r3, #0
 8007f58:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d101      	bne.n	8007f68 <HAL_DMA_Start_IT+0x20>
 8007f64:	2302      	movs	r3, #2
 8007f66:	e066      	b.n	8008036 <HAL_DMA_Start_IT+0xee>
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d155      	bne.n	8008028 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2202      	movs	r2, #2
 8007f80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2200      	movs	r2, #0
 8007f88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f022 0201 	bic.w	r2, r2, #1
 8007f98:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	68b9      	ldr	r1, [r7, #8]
 8007fa0:	68f8      	ldr	r0, [r7, #12]
 8007fa2:	f000 f9bb 	bl	800831c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d008      	beq.n	8007fc0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f042 020e 	orr.w	r2, r2, #14
 8007fbc:	601a      	str	r2, [r3, #0]
 8007fbe:	e00f      	b.n	8007fe0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f022 0204 	bic.w	r2, r2, #4
 8007fce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	681a      	ldr	r2, [r3, #0]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f042 020a 	orr.w	r2, r2, #10
 8007fde:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d007      	beq.n	8007ffe <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ff8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ffc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008002:	2b00      	cmp	r3, #0
 8008004:	d007      	beq.n	8008016 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008010:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008014:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	681a      	ldr	r2, [r3, #0]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f042 0201 	orr.w	r2, r2, #1
 8008024:	601a      	str	r2, [r3, #0]
 8008026:	e005      	b.n	8008034 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2200      	movs	r2, #0
 800802c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8008030:	2302      	movs	r3, #2
 8008032:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8008034:	7dfb      	ldrb	r3, [r7, #23]
}
 8008036:	4618      	mov	r0, r3
 8008038:	3718      	adds	r7, #24
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}

0800803e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800803e:	b480      	push	{r7}
 8008040:	b085      	sub	sp, #20
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008046:	2300      	movs	r3, #0
 8008048:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008050:	b2db      	uxtb	r3, r3
 8008052:	2b02      	cmp	r3, #2
 8008054:	d005      	beq.n	8008062 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2204      	movs	r2, #4
 800805a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800805c:	2301      	movs	r3, #1
 800805e:	73fb      	strb	r3, [r7, #15]
 8008060:	e037      	b.n	80080d2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	681a      	ldr	r2, [r3, #0]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f022 020e 	bic.w	r2, r2, #14
 8008070:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800807c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008080:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	681a      	ldr	r2, [r3, #0]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f022 0201 	bic.w	r2, r2, #1
 8008090:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008096:	f003 021f 	and.w	r2, r3, #31
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800809e:	2101      	movs	r1, #1
 80080a0:	fa01 f202 	lsl.w	r2, r1, r2
 80080a4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080aa:	687a      	ldr	r2, [r7, #4]
 80080ac:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80080ae:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d00c      	beq.n	80080d2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80080c6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80080d0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2201      	movs	r2, #1
 80080d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80080e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3714      	adds	r7, #20
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b084      	sub	sp, #16
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80080f8:	2300      	movs	r3, #0
 80080fa:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008102:	b2db      	uxtb	r3, r3
 8008104:	2b02      	cmp	r3, #2
 8008106:	d00d      	beq.n	8008124 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2204      	movs	r2, #4
 800810c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2201      	movs	r2, #1
 8008112:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2200      	movs	r2, #0
 800811a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800811e:	2301      	movs	r3, #1
 8008120:	73fb      	strb	r3, [r7, #15]
 8008122:	e047      	b.n	80081b4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f022 020e 	bic.w	r2, r2, #14
 8008132:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f022 0201 	bic.w	r2, r2, #1
 8008142:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008148:	681a      	ldr	r2, [r3, #0]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800814e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008152:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008158:	f003 021f 	and.w	r2, r3, #31
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008160:	2101      	movs	r1, #1
 8008162:	fa01 f202 	lsl.w	r2, r1, r2
 8008166:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008170:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008176:	2b00      	cmp	r3, #0
 8008178:	d00c      	beq.n	8008194 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800817e:	681a      	ldr	r2, [r3, #0]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008184:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008188:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008192:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d003      	beq.n	80081b4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	4798      	blx	r3
    }
  }
  return status;
 80081b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3710      	adds	r7, #16
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}

080081be <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80081be:	b580      	push	{r7, lr}
 80081c0:	b084      	sub	sp, #16
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081da:	f003 031f 	and.w	r3, r3, #31
 80081de:	2204      	movs	r2, #4
 80081e0:	409a      	lsls	r2, r3
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	4013      	ands	r3, r2
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d026      	beq.n	8008238 <HAL_DMA_IRQHandler+0x7a>
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	f003 0304 	and.w	r3, r3, #4
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d021      	beq.n	8008238 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f003 0320 	and.w	r3, r3, #32
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d107      	bne.n	8008212 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f022 0204 	bic.w	r2, r2, #4
 8008210:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008216:	f003 021f 	and.w	r2, r3, #31
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821e:	2104      	movs	r1, #4
 8008220:	fa01 f202 	lsl.w	r2, r1, r2
 8008224:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800822a:	2b00      	cmp	r3, #0
 800822c:	d071      	beq.n	8008312 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8008236:	e06c      	b.n	8008312 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800823c:	f003 031f 	and.w	r3, r3, #31
 8008240:	2202      	movs	r2, #2
 8008242:	409a      	lsls	r2, r3
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	4013      	ands	r3, r2
 8008248:	2b00      	cmp	r3, #0
 800824a:	d02e      	beq.n	80082aa <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	f003 0302 	and.w	r3, r3, #2
 8008252:	2b00      	cmp	r3, #0
 8008254:	d029      	beq.n	80082aa <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f003 0320 	and.w	r3, r3, #32
 8008260:	2b00      	cmp	r3, #0
 8008262:	d10b      	bne.n	800827c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f022 020a 	bic.w	r2, r2, #10
 8008272:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2201      	movs	r2, #1
 8008278:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008280:	f003 021f 	and.w	r2, r3, #31
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008288:	2102      	movs	r1, #2
 800828a:	fa01 f202 	lsl.w	r2, r1, r2
 800828e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800829c:	2b00      	cmp	r3, #0
 800829e:	d038      	beq.n	8008312 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80082a8:	e033      	b.n	8008312 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082ae:	f003 031f 	and.w	r3, r3, #31
 80082b2:	2208      	movs	r2, #8
 80082b4:	409a      	lsls	r2, r3
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	4013      	ands	r3, r2
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d02a      	beq.n	8008314 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	f003 0308 	and.w	r3, r3, #8
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d025      	beq.n	8008314 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f022 020e 	bic.w	r2, r2, #14
 80082d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082dc:	f003 021f 	and.w	r2, r3, #31
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082e4:	2101      	movs	r1, #1
 80082e6:	fa01 f202 	lsl.w	r2, r1, r2
 80082ea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2201      	movs	r2, #1
 80082f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2201      	movs	r2, #1
 80082f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2200      	movs	r2, #0
 80082fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008306:	2b00      	cmp	r3, #0
 8008308:	d004      	beq.n	8008314 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8008312:	bf00      	nop
 8008314:	bf00      	nop
}
 8008316:	3710      	adds	r7, #16
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800831c:	b480      	push	{r7}
 800831e:	b085      	sub	sp, #20
 8008320:	af00      	add	r7, sp, #0
 8008322:	60f8      	str	r0, [r7, #12]
 8008324:	60b9      	str	r1, [r7, #8]
 8008326:	607a      	str	r2, [r7, #4]
 8008328:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800832e:	68fa      	ldr	r2, [r7, #12]
 8008330:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008332:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008338:	2b00      	cmp	r3, #0
 800833a:	d004      	beq.n	8008346 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008340:	68fa      	ldr	r2, [r7, #12]
 8008342:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008344:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800834a:	f003 021f 	and.w	r2, r3, #31
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008352:	2101      	movs	r1, #1
 8008354:	fa01 f202 	lsl.w	r2, r1, r2
 8008358:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	683a      	ldr	r2, [r7, #0]
 8008360:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	689b      	ldr	r3, [r3, #8]
 8008366:	2b10      	cmp	r3, #16
 8008368:	d108      	bne.n	800837c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	68ba      	ldr	r2, [r7, #8]
 8008378:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800837a:	e007      	b.n	800838c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	68ba      	ldr	r2, [r7, #8]
 8008382:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	60da      	str	r2, [r3, #12]
}
 800838c:	bf00      	nop
 800838e:	3714      	adds	r7, #20
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr

08008398 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008398:	b480      	push	{r7}
 800839a:	b087      	sub	sp, #28
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	461a      	mov	r2, r3
 80083a6:	4b16      	ldr	r3, [pc, #88]	; (8008400 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80083a8:	429a      	cmp	r2, r3
 80083aa:	d802      	bhi.n	80083b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80083ac:	4b15      	ldr	r3, [pc, #84]	; (8008404 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80083ae:	617b      	str	r3, [r7, #20]
 80083b0:	e001      	b.n	80083b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80083b2:	4b15      	ldr	r3, [pc, #84]	; (8008408 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80083b4:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	3b08      	subs	r3, #8
 80083c2:	4a12      	ldr	r2, [pc, #72]	; (800840c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80083c4:	fba2 2303 	umull	r2, r3, r2, r3
 80083c8:	091b      	lsrs	r3, r3, #4
 80083ca:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083d0:	089b      	lsrs	r3, r3, #2
 80083d2:	009a      	lsls	r2, r3, #2
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	4413      	add	r3, r2
 80083d8:	461a      	mov	r2, r3
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	4a0b      	ldr	r2, [pc, #44]	; (8008410 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80083e2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f003 031f 	and.w	r3, r3, #31
 80083ea:	2201      	movs	r2, #1
 80083ec:	409a      	lsls	r2, r3
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80083f2:	bf00      	nop
 80083f4:	371c      	adds	r7, #28
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr
 80083fe:	bf00      	nop
 8008400:	40020407 	.word	0x40020407
 8008404:	40020800 	.word	0x40020800
 8008408:	40020820 	.word	0x40020820
 800840c:	cccccccd 	.word	0xcccccccd
 8008410:	40020880 	.word	0x40020880

08008414 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008414:	b480      	push	{r7}
 8008416:	b085      	sub	sp, #20
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	b2db      	uxtb	r3, r3
 8008422:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008424:	68fa      	ldr	r2, [r7, #12]
 8008426:	4b0b      	ldr	r3, [pc, #44]	; (8008454 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8008428:	4413      	add	r3, r2
 800842a:	009b      	lsls	r3, r3, #2
 800842c:	461a      	mov	r2, r3
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	4a08      	ldr	r2, [pc, #32]	; (8008458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8008436:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	3b01      	subs	r3, #1
 800843c:	f003 031f 	and.w	r3, r3, #31
 8008440:	2201      	movs	r2, #1
 8008442:	409a      	lsls	r2, r3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8008448:	bf00      	nop
 800844a:	3714      	adds	r7, #20
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr
 8008454:	1000823f 	.word	0x1000823f
 8008458:	40020940 	.word	0x40020940

0800845c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b084      	sub	sp, #16
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d101      	bne.n	800846e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	e147      	b.n	80086fe <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008474:	b2db      	uxtb	r3, r3
 8008476:	2b00      	cmp	r3, #0
 8008478:	d106      	bne.n	8008488 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2200      	movs	r2, #0
 800847e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f7fc fafc 	bl	8004a80 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	699a      	ldr	r2, [r3, #24]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f022 0210 	bic.w	r2, r2, #16
 8008496:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008498:	f7fd fc68 	bl	8005d6c <HAL_GetTick>
 800849c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800849e:	e012      	b.n	80084c6 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80084a0:	f7fd fc64 	bl	8005d6c <HAL_GetTick>
 80084a4:	4602      	mov	r2, r0
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	1ad3      	subs	r3, r2, r3
 80084aa:	2b0a      	cmp	r3, #10
 80084ac:	d90b      	bls.n	80084c6 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084b2:	f043 0201 	orr.w	r2, r3, #1
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2203      	movs	r2, #3
 80084be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80084c2:	2301      	movs	r3, #1
 80084c4:	e11b      	b.n	80086fe <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	699b      	ldr	r3, [r3, #24]
 80084cc:	f003 0308 	and.w	r3, r3, #8
 80084d0:	2b08      	cmp	r3, #8
 80084d2:	d0e5      	beq.n	80084a0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	699a      	ldr	r2, [r3, #24]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f042 0201 	orr.w	r2, r2, #1
 80084e2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80084e4:	f7fd fc42 	bl	8005d6c <HAL_GetTick>
 80084e8:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80084ea:	e012      	b.n	8008512 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80084ec:	f7fd fc3e 	bl	8005d6c <HAL_GetTick>
 80084f0:	4602      	mov	r2, r0
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	1ad3      	subs	r3, r2, r3
 80084f6:	2b0a      	cmp	r3, #10
 80084f8:	d90b      	bls.n	8008512 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084fe:	f043 0201 	orr.w	r2, r3, #1
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2203      	movs	r2, #3
 800850a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800850e:	2301      	movs	r3, #1
 8008510:	e0f5      	b.n	80086fe <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	699b      	ldr	r3, [r3, #24]
 8008518:	f003 0301 	and.w	r3, r3, #1
 800851c:	2b00      	cmp	r3, #0
 800851e:	d0e5      	beq.n	80084ec <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	699a      	ldr	r2, [r3, #24]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f042 0202 	orr.w	r2, r2, #2
 800852e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a74      	ldr	r2, [pc, #464]	; (8008708 <HAL_FDCAN_Init+0x2ac>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d103      	bne.n	8008542 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800853a:	4a74      	ldr	r2, [pc, #464]	; (800870c <HAL_FDCAN_Init+0x2b0>)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	7c1b      	ldrb	r3, [r3, #16]
 8008546:	2b01      	cmp	r3, #1
 8008548:	d108      	bne.n	800855c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	699a      	ldr	r2, [r3, #24]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008558:	619a      	str	r2, [r3, #24]
 800855a:	e007      	b.n	800856c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	699a      	ldr	r2, [r3, #24]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800856a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	7c5b      	ldrb	r3, [r3, #17]
 8008570:	2b01      	cmp	r3, #1
 8008572:	d108      	bne.n	8008586 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	699a      	ldr	r2, [r3, #24]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008582:	619a      	str	r2, [r3, #24]
 8008584:	e007      	b.n	8008596 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	699a      	ldr	r2, [r3, #24]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008594:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	7c9b      	ldrb	r3, [r3, #18]
 800859a:	2b01      	cmp	r3, #1
 800859c:	d108      	bne.n	80085b0 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	699a      	ldr	r2, [r3, #24]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80085ac:	619a      	str	r2, [r3, #24]
 80085ae:	e007      	b.n	80085c0 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	699a      	ldr	r2, [r3, #24]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80085be:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	699b      	ldr	r3, [r3, #24]
 80085c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	689a      	ldr	r2, [r3, #8]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	430a      	orrs	r2, r1
 80085d4:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	699a      	ldr	r2, [r3, #24]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80085e4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	691a      	ldr	r2, [r3, #16]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f022 0210 	bic.w	r2, r2, #16
 80085f4:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	68db      	ldr	r3, [r3, #12]
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d108      	bne.n	8008610 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	699a      	ldr	r2, [r3, #24]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f042 0204 	orr.w	r2, r2, #4
 800860c:	619a      	str	r2, [r3, #24]
 800860e:	e02c      	b.n	800866a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	68db      	ldr	r3, [r3, #12]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d028      	beq.n	800866a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	68db      	ldr	r3, [r3, #12]
 800861c:	2b02      	cmp	r3, #2
 800861e:	d01c      	beq.n	800865a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	699a      	ldr	r2, [r3, #24]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800862e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	691a      	ldr	r2, [r3, #16]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f042 0210 	orr.w	r2, r2, #16
 800863e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	68db      	ldr	r3, [r3, #12]
 8008644:	2b03      	cmp	r3, #3
 8008646:	d110      	bne.n	800866a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	699a      	ldr	r2, [r3, #24]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f042 0220 	orr.w	r2, r2, #32
 8008656:	619a      	str	r2, [r3, #24]
 8008658:	e007      	b.n	800866a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	699a      	ldr	r2, [r3, #24]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f042 0220 	orr.w	r2, r2, #32
 8008668:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	699b      	ldr	r3, [r3, #24]
 800866e:	3b01      	subs	r3, #1
 8008670:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	69db      	ldr	r3, [r3, #28]
 8008676:	3b01      	subs	r3, #1
 8008678:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800867a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6a1b      	ldr	r3, [r3, #32]
 8008680:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008682:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	695b      	ldr	r3, [r3, #20]
 800868a:	3b01      	subs	r3, #1
 800868c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8008692:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008694:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	689b      	ldr	r3, [r3, #8]
 800869a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800869e:	d115      	bne.n	80086cc <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086aa:	3b01      	subs	r3, #1
 80086ac:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80086ae:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086b4:	3b01      	subs	r3, #1
 80086b6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80086b8:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c0:	3b01      	subs	r3, #1
 80086c2:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80086c8:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80086ca:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	430a      	orrs	r2, r1
 80086de:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 fbe2 	bl	8008eac <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2200      	movs	r2, #0
 80086ec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2200      	movs	r2, #0
 80086f2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80086fc:	2300      	movs	r3, #0
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3710      	adds	r7, #16
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop
 8008708:	40006400 	.word	0x40006400
 800870c:	40006500 	.word	0x40006500

08008710 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8008710:	b480      	push	{r7}
 8008712:	b083      	sub	sp, #12
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800871e:	b2db      	uxtb	r3, r3
 8008720:	2b01      	cmp	r3, #1
 8008722:	d110      	bne.n	8008746 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2202      	movs	r2, #2
 8008728:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	699a      	ldr	r2, [r3, #24]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f022 0201 	bic.w	r2, r2, #1
 800873a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2200      	movs	r2, #0
 8008740:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8008742:	2300      	movs	r3, #0
 8008744:	e006      	b.n	8008754 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800874a:	f043 0204 	orr.w	r2, r3, #4
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8008752:	2301      	movs	r3, #1
  }
}
 8008754:	4618      	mov	r0, r3
 8008756:	370c      	adds	r7, #12
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr

08008760 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b086      	sub	sp, #24
 8008764:	af00      	add	r7, sp, #0
 8008766:	60f8      	str	r0, [r7, #12]
 8008768:	60b9      	str	r1, [r7, #8]
 800876a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008772:	b2db      	uxtb	r3, r3
 8008774:	2b02      	cmp	r3, #2
 8008776:	d12c      	bne.n	80087d2 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008780:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008784:	2b00      	cmp	r3, #0
 8008786:	d007      	beq.n	8008798 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800878c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8008794:	2301      	movs	r3, #1
 8008796:	e023      	b.n	80087e0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80087a0:	0c1b      	lsrs	r3, r3, #16
 80087a2:	f003 0303 	and.w	r3, r3, #3
 80087a6:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	687a      	ldr	r2, [r7, #4]
 80087ac:	68b9      	ldr	r1, [r7, #8]
 80087ae:	68f8      	ldr	r0, [r7, #12]
 80087b0:	f000 fbd2 	bl	8008f58 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	2101      	movs	r1, #1
 80087ba:	697a      	ldr	r2, [r7, #20]
 80087bc:	fa01 f202 	lsl.w	r2, r1, r2
 80087c0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80087c4:	2201      	movs	r2, #1
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	409a      	lsls	r2, r3
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 80087ce:	2300      	movs	r3, #0
 80087d0:	e006      	b.n	80087e0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087d6:	f043 0208 	orr.w	r2, r3, #8
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80087de:	2301      	movs	r3, #1
  }
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3718      	adds	r7, #24
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b08b      	sub	sp, #44	; 0x2c
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	60f8      	str	r0, [r7, #12]
 80087f0:	60b9      	str	r1, [r7, #8]
 80087f2:	607a      	str	r2, [r7, #4]
 80087f4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80087fc:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80087fe:	7efb      	ldrb	r3, [r7, #27]
 8008800:	2b02      	cmp	r3, #2
 8008802:	f040 80bc 	bne.w	800897e <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	2b40      	cmp	r3, #64	; 0x40
 800880a:	d121      	bne.n	8008850 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008814:	f003 030f 	and.w	r3, r3, #15
 8008818:	2b00      	cmp	r3, #0
 800881a:	d107      	bne.n	800882c <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008820:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8008828:	2301      	movs	r3, #1
 800882a:	e0af      	b.n	800898c <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008834:	0a1b      	lsrs	r3, r3, #8
 8008836:	f003 0303 	and.w	r3, r3, #3
 800883a:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8008840:	69fa      	ldr	r2, [r7, #28]
 8008842:	4613      	mov	r3, r2
 8008844:	00db      	lsls	r3, r3, #3
 8008846:	4413      	add	r3, r2
 8008848:	00db      	lsls	r3, r3, #3
 800884a:	440b      	add	r3, r1
 800884c:	627b      	str	r3, [r7, #36]	; 0x24
 800884e:	e020      	b.n	8008892 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008858:	f003 030f 	and.w	r3, r3, #15
 800885c:	2b00      	cmp	r3, #0
 800885e:	d107      	bne.n	8008870 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008864:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800886c:	2301      	movs	r3, #1
 800886e:	e08d      	b.n	800898c <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008878:	0a1b      	lsrs	r3, r3, #8
 800887a:	f003 0303 	and.w	r3, r3, #3
 800887e:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008884:	69fa      	ldr	r2, [r7, #28]
 8008886:	4613      	mov	r3, r2
 8008888:	00db      	lsls	r3, r3, #3
 800888a:	4413      	add	r3, r2
 800888c:	00db      	lsls	r3, r3, #3
 800888e:	440b      	add	r3, r1
 8008890:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8008892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d107      	bne.n	80088b6 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80088a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	0c9b      	lsrs	r3, r3, #18
 80088ac:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	601a      	str	r2, [r3, #0]
 80088b4:	e005      	b.n	80088c2 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80088b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80088c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80088ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80088da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088dc:	3304      	adds	r3, #4
 80088de:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80088e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	b29a      	uxth	r2, r3
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80088ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80088f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8008902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800890e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	0e1b      	lsrs	r3, r3, #24
 8008914:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800891c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	0fda      	lsrs	r2, r3, #31
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8008926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008928:	3304      	adds	r3, #4
 800892a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800892c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892e:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8008930:	2300      	movs	r3, #0
 8008932:	623b      	str	r3, [r7, #32]
 8008934:	e00a      	b.n	800894c <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8008936:	697a      	ldr	r2, [r7, #20]
 8008938:	6a3b      	ldr	r3, [r7, #32]
 800893a:	441a      	add	r2, r3
 800893c:	6839      	ldr	r1, [r7, #0]
 800893e:	6a3b      	ldr	r3, [r7, #32]
 8008940:	440b      	add	r3, r1
 8008942:	7812      	ldrb	r2, [r2, #0]
 8008944:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8008946:	6a3b      	ldr	r3, [r7, #32]
 8008948:	3301      	adds	r3, #1
 800894a:	623b      	str	r3, [r7, #32]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	68db      	ldr	r3, [r3, #12]
 8008950:	0c1b      	lsrs	r3, r3, #16
 8008952:	4a11      	ldr	r2, [pc, #68]	; (8008998 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8008954:	5cd3      	ldrb	r3, [r2, r3]
 8008956:	461a      	mov	r2, r3
 8008958:	6a3b      	ldr	r3, [r7, #32]
 800895a:	4293      	cmp	r3, r2
 800895c:	d3eb      	bcc.n	8008936 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	2b40      	cmp	r3, #64	; 0x40
 8008962:	d105      	bne.n	8008970 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	69fa      	ldr	r2, [r7, #28]
 800896a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800896e:	e004      	b.n	800897a <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	69fa      	ldr	r2, [r7, #28]
 8008976:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800897a:	2300      	movs	r3, #0
 800897c:	e006      	b.n	800898c <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008982:	f043 0208 	orr.w	r2, r3, #8
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800898a:	2301      	movs	r3, #1
  }
}
 800898c:	4618      	mov	r0, r3
 800898e:	372c      	adds	r7, #44	; 0x2c
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr
 8008998:	080125a4 	.word	0x080125a4

0800899c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 800899c:	b480      	push	{r7}
 800899e:	b087      	sub	sp, #28
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	60f8      	str	r0, [r7, #12]
 80089a4:	60b9      	str	r1, [r7, #8]
 80089a6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80089ae:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80089b0:	7dfb      	ldrb	r3, [r7, #23]
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	d003      	beq.n	80089be <HAL_FDCAN_ActivateNotification+0x22>
 80089b6:	7dfb      	ldrb	r3, [r7, #23]
 80089b8:	2b02      	cmp	r3, #2
 80089ba:	f040 80c8 	bne.w	8008b4e <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089c4:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	f003 0307 	and.w	r3, r3, #7
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d004      	beq.n	80089da <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	f003 0301 	and.w	r3, r3, #1
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d03b      	beq.n	8008a52 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d004      	beq.n	80089ee <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	f003 0302 	and.w	r3, r3, #2
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d031      	beq.n	8008a52 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d004      	beq.n	8008a02 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	f003 0304 	and.w	r3, r3, #4
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d027      	beq.n	8008a52 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d004      	beq.n	8008a16 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	f003 0308 	and.w	r3, r3, #8
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d01d      	beq.n	8008a52 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d004      	beq.n	8008a2a <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	f003 0310 	and.w	r3, r3, #16
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d013      	beq.n	8008a52 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d004      	beq.n	8008a3e <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	f003 0320 	and.w	r3, r3, #32
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d009      	beq.n	8008a52 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d00c      	beq.n	8008a62 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d107      	bne.n	8008a62 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f042 0201 	orr.w	r2, r2, #1
 8008a60:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	f003 0307 	and.w	r3, r3, #7
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d004      	beq.n	8008a76 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	f003 0301 	and.w	r3, r3, #1
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d13b      	bne.n	8008aee <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d004      	beq.n	8008a8a <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	f003 0302 	and.w	r3, r3, #2
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d131      	bne.n	8008aee <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d004      	beq.n	8008a9e <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	f003 0304 	and.w	r3, r3, #4
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d127      	bne.n	8008aee <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d004      	beq.n	8008ab2 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	f003 0308 	and.w	r3, r3, #8
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d11d      	bne.n	8008aee <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d004      	beq.n	8008ac6 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	f003 0310 	and.w	r3, r3, #16
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d113      	bne.n	8008aee <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d004      	beq.n	8008ada <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	f003 0320 	and.w	r3, r3, #32
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d109      	bne.n	8008aee <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d00c      	beq.n	8008afe <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d007      	beq.n	8008afe <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f042 0202 	orr.w	r2, r2, #2
 8008afc:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d009      	beq.n	8008b1c <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	430a      	orrs	r2, r1
 8008b18:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d009      	beq.n	8008b3a <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	687a      	ldr	r2, [r7, #4]
 8008b34:	430a      	orrs	r2, r1
 8008b36:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	68ba      	ldr	r2, [r7, #8]
 8008b46:	430a      	orrs	r2, r1
 8008b48:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	e006      	b.n	8008b5c <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b52:	f043 0202 	orr.w	r2, r3, #2
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8008b5a:	2301      	movs	r3, #1
  }
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	371c      	adds	r7, #28
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr

08008b68 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b08a      	sub	sp, #40	; 0x28
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b76:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8008b7a:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b84:	4013      	ands	r3, r2
 8008b86:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b8e:	f003 0307 	and.w	r3, r3, #7
 8008b92:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b9a:	6a3a      	ldr	r2, [r7, #32]
 8008b9c:	4013      	ands	r3, r2
 8008b9e:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ba6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008baa:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bb2:	69fa      	ldr	r2, [r7, #28]
 8008bb4:	4013      	ands	r3, r2
 8008bb6:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bbe:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8008bc2:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bca:	69ba      	ldr	r2, [r7, #24]
 8008bcc:	4013      	ands	r3, r2
 8008bce:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bd6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8008bda:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008be2:	697a      	ldr	r2, [r7, #20]
 8008be4:	4013      	ands	r3, r2
 8008be6:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d00d      	beq.n	8008c12 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d006      	beq.n	8008c12 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	2240      	movs	r2, #64	; 0x40
 8008c0a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f000 f92e 	bl	8008e6e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d01b      	beq.n	8008c58 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d014      	beq.n	8008c58 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008c36:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008c40:	693a      	ldr	r2, [r7, #16]
 8008c42:	4013      	ands	r3, r2
 8008c44:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008c4e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8008c50:	6939      	ldr	r1, [r7, #16]
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 f8ec 	bl	8008e30 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8008c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d007      	beq.n	8008c6e <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c64:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8008c66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f000 f8b6 	bl	8008dda <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8008c6e:	6a3b      	ldr	r3, [r7, #32]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d007      	beq.n	8008c84 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	6a3a      	ldr	r2, [r7, #32]
 8008c7a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8008c7c:	6a39      	ldr	r1, [r7, #32]
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f7fb fad0 	bl	8004224 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8008c84:	69fb      	ldr	r3, [r7, #28]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d007      	beq.n	8008c9a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	69fa      	ldr	r2, [r7, #28]
 8008c90:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8008c92:	69f9      	ldr	r1, [r7, #28]
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 f8ab 	bl	8008df0 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ca0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d00e      	beq.n	8008cc6 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d007      	beq.n	8008cc6 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008cbe:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 f8a0 	bl	8008e06 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d01a      	beq.n	8008d0a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d013      	beq.n	8008d0a <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8008cea:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008cf4:	68fa      	ldr	r2, [r7, #12]
 8008cf6:	4013      	ands	r3, r2
 8008cf8:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	2280      	movs	r2, #128	; 0x80
 8008d00:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8008d02:	68f9      	ldr	r1, [r7, #12]
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f000 f888 	bl	8008e1a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d00e      	beq.n	8008d36 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d007      	beq.n	8008d36 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008d2e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 f888 	bl	8008e46 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d00e      	beq.n	8008d62 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d007      	beq.n	8008d62 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008d5a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 f87c 	bl	8008e5a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d011      	beq.n	8008d94 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d00a      	beq.n	8008d94 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008d86:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d8c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d007      	beq.n	8008daa <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	697a      	ldr	r2, [r7, #20]
 8008da0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8008da2:	6979      	ldr	r1, [r7, #20]
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f000 f876 	bl	8008e96 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8008daa:	69bb      	ldr	r3, [r7, #24]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d009      	beq.n	8008dc4 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	69ba      	ldr	r2, [r7, #24]
 8008db6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008dbc:	69bb      	ldr	r3, [r7, #24]
 8008dbe:	431a      	orrs	r2, r3
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d002      	beq.n	8008dd2 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f000 f858 	bl	8008e82 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8008dd2:	bf00      	nop
 8008dd4:	3728      	adds	r7, #40	; 0x28
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}

08008dda <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8008dda:	b480      	push	{r7}
 8008ddc:	b083      	sub	sp, #12
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	6078      	str	r0, [r7, #4]
 8008de2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8008de4:	bf00      	nop
 8008de6:	370c      	adds	r7, #12
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr

08008df0 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b083      	sub	sp, #12
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8008dfa:	bf00      	nop
 8008dfc:	370c      	adds	r7, #12
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr

08008e06 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008e06:	b480      	push	{r7}
 8008e08:	b083      	sub	sp, #12
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8008e0e:	bf00      	nop
 8008e10:	370c      	adds	r7, #12
 8008e12:	46bd      	mov	sp, r7
 8008e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e18:	4770      	bx	lr

08008e1a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8008e1a:	b480      	push	{r7}
 8008e1c:	b083      	sub	sp, #12
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	6078      	str	r0, [r7, #4]
 8008e22:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8008e24:	bf00      	nop
 8008e26:	370c      	adds	r7, #12
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr

08008e30 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b083      	sub	sp, #12
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8008e3a:	bf00      	nop
 8008e3c:	370c      	adds	r7, #12
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e44:	4770      	bx	lr

08008e46 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008e46:	b480      	push	{r7}
 8008e48:	b083      	sub	sp, #12
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8008e4e:	bf00      	nop
 8008e50:	370c      	adds	r7, #12
 8008e52:	46bd      	mov	sp, r7
 8008e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e58:	4770      	bx	lr

08008e5a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008e5a:	b480      	push	{r7}
 8008e5c:	b083      	sub	sp, #12
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8008e62:	bf00      	nop
 8008e64:	370c      	adds	r7, #12
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr

08008e6e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008e6e:	b480      	push	{r7}
 8008e70:	b083      	sub	sp, #12
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8008e76:	bf00      	nop
 8008e78:	370c      	adds	r7, #12
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr

08008e82 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008e82:	b480      	push	{r7}
 8008e84:	b083      	sub	sp, #12
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8008e8a:	bf00      	nop
 8008e8c:	370c      	adds	r7, #12
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr

08008e96 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8008e96:	b480      	push	{r7}
 8008e98:	b083      	sub	sp, #12
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	6078      	str	r0, [r7, #4]
 8008e9e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8008ea0:	bf00      	nop
 8008ea2:	370c      	adds	r7, #12
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b085      	sub	sp, #20
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8008eb4:	4b27      	ldr	r3, [pc, #156]	; (8008f54 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8008eb6:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	68ba      	ldr	r2, [r7, #8]
 8008ebc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ec6:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ece:	041a      	lsls	r2, r3, #16
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	430a      	orrs	r2, r1
 8008ed6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008eec:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ef4:	061a      	lsls	r2, r3, #24
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	430a      	orrs	r2, r1
 8008efc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	60fb      	str	r3, [r7, #12]
 8008f2c:	e005      	b.n	8008f3a <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2200      	movs	r2, #0
 8008f32:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	3304      	adds	r3, #4
 8008f38:	60fb      	str	r3, [r7, #12]
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008f40:	68fa      	ldr	r2, [r7, #12]
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d3f3      	bcc.n	8008f2e <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8008f46:	bf00      	nop
 8008f48:	bf00      	nop
 8008f4a:	3714      	adds	r7, #20
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr
 8008f54:	4000a400 	.word	0x4000a400

08008f58 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b089      	sub	sp, #36	; 0x24
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	60f8      	str	r0, [r7, #12]
 8008f60:	60b9      	str	r1, [r7, #8]
 8008f62:	607a      	str	r2, [r7, #4]
 8008f64:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d10a      	bne.n	8008f84 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8008f76:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	61fb      	str	r3, [r7, #28]
 8008f82:	e00a      	b.n	8008f9a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8008f8c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8008f92:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008f94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f98:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	6a1b      	ldr	r3, [r3, #32]
 8008f9e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008fa4:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8008faa:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8008fb0:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008fbe:	683a      	ldr	r2, [r7, #0]
 8008fc0:	4613      	mov	r3, r2
 8008fc2:	00db      	lsls	r3, r3, #3
 8008fc4:	4413      	add	r3, r2
 8008fc6:	00db      	lsls	r3, r3, #3
 8008fc8:	440b      	add	r3, r1
 8008fca:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8008fcc:	69bb      	ldr	r3, [r7, #24]
 8008fce:	69fa      	ldr	r2, [r7, #28]
 8008fd0:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8008fd2:	69bb      	ldr	r3, [r7, #24]
 8008fd4:	3304      	adds	r3, #4
 8008fd6:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8008fd8:	69bb      	ldr	r3, [r7, #24]
 8008fda:	693a      	ldr	r2, [r7, #16]
 8008fdc:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8008fde:	69bb      	ldr	r3, [r7, #24]
 8008fe0:	3304      	adds	r3, #4
 8008fe2:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	617b      	str	r3, [r7, #20]
 8008fe8:	e020      	b.n	800902c <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	3303      	adds	r3, #3
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	4413      	add	r3, r2
 8008ff2:	781b      	ldrb	r3, [r3, #0]
 8008ff4:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	3302      	adds	r3, #2
 8008ffa:	6879      	ldr	r1, [r7, #4]
 8008ffc:	440b      	add	r3, r1
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8009002:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	3301      	adds	r3, #1
 8009008:	6879      	ldr	r1, [r7, #4]
 800900a:	440b      	add	r3, r1
 800900c:	781b      	ldrb	r3, [r3, #0]
 800900e:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8009010:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8009012:	6879      	ldr	r1, [r7, #4]
 8009014:	697a      	ldr	r2, [r7, #20]
 8009016:	440a      	add	r2, r1
 8009018:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800901a:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800901c:	69bb      	ldr	r3, [r7, #24]
 800901e:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8009020:	69bb      	ldr	r3, [r7, #24]
 8009022:	3304      	adds	r3, #4
 8009024:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	3304      	adds	r3, #4
 800902a:	617b      	str	r3, [r7, #20]
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	68db      	ldr	r3, [r3, #12]
 8009030:	0c1b      	lsrs	r3, r3, #16
 8009032:	4a06      	ldr	r2, [pc, #24]	; (800904c <FDCAN_CopyMessageToRAM+0xf4>)
 8009034:	5cd3      	ldrb	r3, [r2, r3]
 8009036:	461a      	mov	r2, r3
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	4293      	cmp	r3, r2
 800903c:	d3d5      	bcc.n	8008fea <FDCAN_CopyMessageToRAM+0x92>
  }
}
 800903e:	bf00      	nop
 8009040:	bf00      	nop
 8009042:	3724      	adds	r7, #36	; 0x24
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr
 800904c:	080125a4 	.word	0x080125a4

08009050 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b086      	sub	sp, #24
 8009054:	af00      	add	r7, sp, #0
 8009056:	60f8      	str	r0, [r7, #12]
 8009058:	60b9      	str	r1, [r7, #8]
 800905a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800905e:	2300      	movs	r3, #0
 8009060:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009062:	4b24      	ldr	r3, [pc, #144]	; (80090f4 <HAL_FLASH_Program+0xa4>)
 8009064:	781b      	ldrb	r3, [r3, #0]
 8009066:	2b01      	cmp	r3, #1
 8009068:	d101      	bne.n	800906e <HAL_FLASH_Program+0x1e>
 800906a:	2302      	movs	r3, #2
 800906c:	e03e      	b.n	80090ec <HAL_FLASH_Program+0x9c>
 800906e:	4b21      	ldr	r3, [pc, #132]	; (80090f4 <HAL_FLASH_Program+0xa4>)
 8009070:	2201      	movs	r2, #1
 8009072:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009074:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009078:	f000 f87c 	bl	8009174 <FLASH_WaitForLastOperation>
 800907c:	4603      	mov	r3, r0
 800907e:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8009080:	7dfb      	ldrb	r3, [r7, #23]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d12e      	bne.n	80090e4 <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009086:	4b1b      	ldr	r3, [pc, #108]	; (80090f4 <HAL_FLASH_Program+0xa4>)
 8009088:	2200      	movs	r2, #0
 800908a:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d107      	bne.n	80090a2 <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8009092:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009096:	68b8      	ldr	r0, [r7, #8]
 8009098:	f000 f8c0 	bl	800921c <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 800909c:	2301      	movs	r3, #1
 800909e:	613b      	str	r3, [r7, #16]
 80090a0:	e010      	b.n	80090c4 <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2b01      	cmp	r3, #1
 80090a6:	d002      	beq.n	80090ae <HAL_FLASH_Program+0x5e>
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	2b02      	cmp	r3, #2
 80090ac:	d10a      	bne.n	80090c4 <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	4619      	mov	r1, r3
 80090b2:	68b8      	ldr	r0, [r7, #8]
 80090b4:	f000 f8d8 	bl	8009268 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2b02      	cmp	r3, #2
 80090bc:	d102      	bne.n	80090c4 <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 80090be:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80090c2:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80090c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80090c8:	f000 f854 	bl	8009174 <FLASH_WaitForLastOperation>
 80090cc:	4603      	mov	r3, r0
 80090ce:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d006      	beq.n	80090e4 <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80090d6:	4b08      	ldr	r3, [pc, #32]	; (80090f8 <HAL_FLASH_Program+0xa8>)
 80090d8:	695a      	ldr	r2, [r3, #20]
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	43db      	mvns	r3, r3
 80090de:	4906      	ldr	r1, [pc, #24]	; (80090f8 <HAL_FLASH_Program+0xa8>)
 80090e0:	4013      	ands	r3, r2
 80090e2:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80090e4:	4b03      	ldr	r3, [pc, #12]	; (80090f4 <HAL_FLASH_Program+0xa4>)
 80090e6:	2200      	movs	r2, #0
 80090e8:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80090ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3718      	adds	r7, #24
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}
 80090f4:	20000544 	.word	0x20000544
 80090f8:	40022000 	.word	0x40022000

080090fc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b083      	sub	sp, #12
 8009100:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8009102:	2300      	movs	r3, #0
 8009104:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8009106:	4b0b      	ldr	r3, [pc, #44]	; (8009134 <HAL_FLASH_Unlock+0x38>)
 8009108:	695b      	ldr	r3, [r3, #20]
 800910a:	2b00      	cmp	r3, #0
 800910c:	da0b      	bge.n	8009126 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800910e:	4b09      	ldr	r3, [pc, #36]	; (8009134 <HAL_FLASH_Unlock+0x38>)
 8009110:	4a09      	ldr	r2, [pc, #36]	; (8009138 <HAL_FLASH_Unlock+0x3c>)
 8009112:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8009114:	4b07      	ldr	r3, [pc, #28]	; (8009134 <HAL_FLASH_Unlock+0x38>)
 8009116:	4a09      	ldr	r2, [pc, #36]	; (800913c <HAL_FLASH_Unlock+0x40>)
 8009118:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800911a:	4b06      	ldr	r3, [pc, #24]	; (8009134 <HAL_FLASH_Unlock+0x38>)
 800911c:	695b      	ldr	r3, [r3, #20]
 800911e:	2b00      	cmp	r3, #0
 8009120:	da01      	bge.n	8009126 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8009122:	2301      	movs	r3, #1
 8009124:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8009126:	79fb      	ldrb	r3, [r7, #7]
}
 8009128:	4618      	mov	r0, r3
 800912a:	370c      	adds	r7, #12
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr
 8009134:	40022000 	.word	0x40022000
 8009138:	45670123 	.word	0x45670123
 800913c:	cdef89ab 	.word	0xcdef89ab

08009140 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8009140:	b480      	push	{r7}
 8009142:	b083      	sub	sp, #12
 8009144:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8009146:	2301      	movs	r3, #1
 8009148:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800914a:	4b09      	ldr	r3, [pc, #36]	; (8009170 <HAL_FLASH_Lock+0x30>)
 800914c:	695b      	ldr	r3, [r3, #20]
 800914e:	4a08      	ldr	r2, [pc, #32]	; (8009170 <HAL_FLASH_Lock+0x30>)
 8009150:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009154:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8009156:	4b06      	ldr	r3, [pc, #24]	; (8009170 <HAL_FLASH_Lock+0x30>)
 8009158:	695b      	ldr	r3, [r3, #20]
 800915a:	2b00      	cmp	r3, #0
 800915c:	da01      	bge.n	8009162 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 800915e:	2300      	movs	r3, #0
 8009160:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009162:	79fb      	ldrb	r3, [r7, #7]
}
 8009164:	4618      	mov	r0, r3
 8009166:	370c      	adds	r7, #12
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr
 8009170:	40022000 	.word	0x40022000

08009174 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b084      	sub	sp, #16
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 800917c:	f7fc fdf6 	bl	8005d6c <HAL_GetTick>
 8009180:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8009182:	e009      	b.n	8009198 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8009184:	f7fc fdf2 	bl	8005d6c <HAL_GetTick>
 8009188:	4602      	mov	r2, r0
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	1ad3      	subs	r3, r2, r3
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	429a      	cmp	r2, r3
 8009192:	d201      	bcs.n	8009198 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8009194:	2303      	movs	r3, #3
 8009196:	e038      	b.n	800920a <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8009198:	4b1e      	ldr	r3, [pc, #120]	; (8009214 <FLASH_WaitForLastOperation+0xa0>)
 800919a:	691b      	ldr	r3, [r3, #16]
 800919c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80091a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091a4:	d0ee      	beq.n	8009184 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80091a6:	4b1b      	ldr	r3, [pc, #108]	; (8009214 <FLASH_WaitForLastOperation+0xa0>)
 80091a8:	691a      	ldr	r2, [r3, #16]
 80091aa:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80091ae:	4013      	ands	r3, r2
 80091b0:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d01e      	beq.n	80091f6 <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 80091b8:	4b17      	ldr	r3, [pc, #92]	; (8009218 <FLASH_WaitForLastOperation+0xa4>)
 80091ba:	685a      	ldr	r2, [r3, #4]
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	4313      	orrs	r3, r2
 80091c0:	4a15      	ldr	r2, [pc, #84]	; (8009218 <FLASH_WaitForLastOperation+0xa4>)
 80091c2:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d007      	beq.n	80091de <FLASH_WaitForLastOperation+0x6a>
 80091ce:	4b11      	ldr	r3, [pc, #68]	; (8009214 <FLASH_WaitForLastOperation+0xa0>)
 80091d0:	699a      	ldr	r2, [r3, #24]
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80091d8:	490e      	ldr	r1, [pc, #56]	; (8009214 <FLASH_WaitForLastOperation+0xa0>)
 80091da:	4313      	orrs	r3, r2
 80091dc:	618b      	str	r3, [r1, #24]
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d004      	beq.n	80091f2 <FLASH_WaitForLastOperation+0x7e>
 80091e8:	4a0a      	ldr	r2, [pc, #40]	; (8009214 <FLASH_WaitForLastOperation+0xa0>)
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80091f0:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 80091f2:	2301      	movs	r3, #1
 80091f4:	e009      	b.n	800920a <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80091f6:	4b07      	ldr	r3, [pc, #28]	; (8009214 <FLASH_WaitForLastOperation+0xa0>)
 80091f8:	691b      	ldr	r3, [r3, #16]
 80091fa:	f003 0301 	and.w	r3, r3, #1
 80091fe:	2b01      	cmp	r3, #1
 8009200:	d102      	bne.n	8009208 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8009202:	4b04      	ldr	r3, [pc, #16]	; (8009214 <FLASH_WaitForLastOperation+0xa0>)
 8009204:	2201      	movs	r2, #1
 8009206:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8009208:	2300      	movs	r3, #0
}
 800920a:	4618      	mov	r0, r3
 800920c:	3710      	adds	r7, #16
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}
 8009212:	bf00      	nop
 8009214:	40022000 	.word	0x40022000
 8009218:	20000544 	.word	0x20000544

0800921c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800921c:	b480      	push	{r7}
 800921e:	b085      	sub	sp, #20
 8009220:	af00      	add	r7, sp, #0
 8009222:	60f8      	str	r0, [r7, #12]
 8009224:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8009228:	4b0e      	ldr	r3, [pc, #56]	; (8009264 <FLASH_Program_DoubleWord+0x48>)
 800922a:	695b      	ldr	r3, [r3, #20]
 800922c:	4a0d      	ldr	r2, [pc, #52]	; (8009264 <FLASH_Program_DoubleWord+0x48>)
 800922e:	f043 0301 	orr.w	r3, r3, #1
 8009232:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	683a      	ldr	r2, [r7, #0]
 8009238:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800923a:	f3bf 8f6f 	isb	sy
}
 800923e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8009240:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009244:	f04f 0200 	mov.w	r2, #0
 8009248:	f04f 0300 	mov.w	r3, #0
 800924c:	000a      	movs	r2, r1
 800924e:	2300      	movs	r3, #0
 8009250:	68f9      	ldr	r1, [r7, #12]
 8009252:	3104      	adds	r1, #4
 8009254:	4613      	mov	r3, r2
 8009256:	600b      	str	r3, [r1, #0]
}
 8009258:	bf00      	nop
 800925a:	3714      	adds	r7, #20
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr
 8009264:	40022000 	.word	0x40022000

08009268 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8009268:	b480      	push	{r7}
 800926a:	b089      	sub	sp, #36	; 0x24
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8009272:	2340      	movs	r3, #64	; 0x40
 8009274:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800927e:	4b14      	ldr	r3, [pc, #80]	; (80092d0 <FLASH_Program_Fast+0x68>)
 8009280:	695b      	ldr	r3, [r3, #20]
 8009282:	4a13      	ldr	r2, [pc, #76]	; (80092d0 <FLASH_Program_Fast+0x68>)
 8009284:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009288:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800928a:	f3ef 8310 	mrs	r3, PRIMASK
 800928e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009290:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8009292:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009294:	b672      	cpsid	i
}
 8009296:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	681a      	ldr	r2, [r3, #0]
 800929c:	69bb      	ldr	r3, [r7, #24]
 800929e:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80092a0:	69bb      	ldr	r3, [r7, #24]
 80092a2:	3304      	adds	r3, #4
 80092a4:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	3304      	adds	r3, #4
 80092aa:	617b      	str	r3, [r7, #20]
    row_index--;
 80092ac:	7ffb      	ldrb	r3, [r7, #31]
 80092ae:	3b01      	subs	r3, #1
 80092b0:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 80092b2:	7ffb      	ldrb	r3, [r7, #31]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d1ef      	bne.n	8009298 <FLASH_Program_Fast+0x30>
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	f383 8810 	msr	PRIMASK, r3
}
 80092c2:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80092c4:	bf00      	nop
 80092c6:	3724      	adds	r7, #36	; 0x24
 80092c8:	46bd      	mov	sp, r7
 80092ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ce:	4770      	bx	lr
 80092d0:	40022000 	.word	0x40022000

080092d4 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b084      	sub	sp, #16
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80092de:	4b47      	ldr	r3, [pc, #284]	; (80093fc <HAL_FLASHEx_Erase+0x128>)
 80092e0:	781b      	ldrb	r3, [r3, #0]
 80092e2:	2b01      	cmp	r3, #1
 80092e4:	d101      	bne.n	80092ea <HAL_FLASHEx_Erase+0x16>
 80092e6:	2302      	movs	r3, #2
 80092e8:	e083      	b.n	80093f2 <HAL_FLASHEx_Erase+0x11e>
 80092ea:	4b44      	ldr	r3, [pc, #272]	; (80093fc <HAL_FLASHEx_Erase+0x128>)
 80092ec:	2201      	movs	r2, #1
 80092ee:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80092f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80092f4:	f7ff ff3e 	bl	8009174 <FLASH_WaitForLastOperation>
 80092f8:	4603      	mov	r3, r0
 80092fa:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80092fc:	7bfb      	ldrb	r3, [r7, #15]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d173      	bne.n	80093ea <HAL_FLASHEx_Erase+0x116>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009302:	4b3e      	ldr	r3, [pc, #248]	; (80093fc <HAL_FLASHEx_Erase+0x128>)
 8009304:	2200      	movs	r2, #0
 8009306:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8009308:	4b3d      	ldr	r3, [pc, #244]	; (8009400 <HAL_FLASHEx_Erase+0x12c>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009310:	2b00      	cmp	r3, #0
 8009312:	d013      	beq.n	800933c <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8009314:	4b3a      	ldr	r3, [pc, #232]	; (8009400 <HAL_FLASHEx_Erase+0x12c>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800931c:	2b00      	cmp	r3, #0
 800931e:	d009      	beq.n	8009334 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8009320:	4b37      	ldr	r3, [pc, #220]	; (8009400 <HAL_FLASHEx_Erase+0x12c>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	4a36      	ldr	r2, [pc, #216]	; (8009400 <HAL_FLASHEx_Erase+0x12c>)
 8009326:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800932a:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800932c:	4b33      	ldr	r3, [pc, #204]	; (80093fc <HAL_FLASHEx_Erase+0x128>)
 800932e:	2203      	movs	r2, #3
 8009330:	771a      	strb	r2, [r3, #28]
 8009332:	e016      	b.n	8009362 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8009334:	4b31      	ldr	r3, [pc, #196]	; (80093fc <HAL_FLASHEx_Erase+0x128>)
 8009336:	2201      	movs	r2, #1
 8009338:	771a      	strb	r2, [r3, #28]
 800933a:	e012      	b.n	8009362 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800933c:	4b30      	ldr	r3, [pc, #192]	; (8009400 <HAL_FLASHEx_Erase+0x12c>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009344:	2b00      	cmp	r3, #0
 8009346:	d009      	beq.n	800935c <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8009348:	4b2d      	ldr	r3, [pc, #180]	; (8009400 <HAL_FLASHEx_Erase+0x12c>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4a2c      	ldr	r2, [pc, #176]	; (8009400 <HAL_FLASHEx_Erase+0x12c>)
 800934e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009352:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8009354:	4b29      	ldr	r3, [pc, #164]	; (80093fc <HAL_FLASHEx_Erase+0x128>)
 8009356:	2202      	movs	r2, #2
 8009358:	771a      	strb	r2, [r3, #28]
 800935a:	e002      	b.n	8009362 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800935c:	4b27      	ldr	r3, [pc, #156]	; (80093fc <HAL_FLASHEx_Erase+0x128>)
 800935e:	2200      	movs	r2, #0
 8009360:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	2b01      	cmp	r3, #1
 8009368:	d111      	bne.n	800938e <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	4618      	mov	r0, r3
 8009370:	f000 f848 	bl	8009404 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009374:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009378:	f7ff fefc 	bl	8009174 <FLASH_WaitForLastOperation>
 800937c:	4603      	mov	r3, r0
 800937e:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8009380:	4b1f      	ldr	r3, [pc, #124]	; (8009400 <HAL_FLASHEx_Erase+0x12c>)
 8009382:	695b      	ldr	r3, [r3, #20]
 8009384:	4a1e      	ldr	r2, [pc, #120]	; (8009400 <HAL_FLASHEx_Erase+0x12c>)
 8009386:	f023 0304 	bic.w	r3, r3, #4
 800938a:	6153      	str	r3, [r2, #20]
 800938c:	e02b      	b.n	80093e6 <HAL_FLASHEx_Erase+0x112>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	f04f 32ff 	mov.w	r2, #4294967295
 8009394:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	689b      	ldr	r3, [r3, #8]
 800939a:	60bb      	str	r3, [r7, #8]
 800939c:	e01b      	b.n	80093d6 <HAL_FLASHEx_Erase+0x102>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	4619      	mov	r1, r3
 80093a4:	68b8      	ldr	r0, [r7, #8]
 80093a6:	f000 f84b 	bl	8009440 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80093aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80093ae:	f7ff fee1 	bl	8009174 <FLASH_WaitForLastOperation>
 80093b2:	4603      	mov	r3, r0
 80093b4:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80093b6:	4b12      	ldr	r3, [pc, #72]	; (8009400 <HAL_FLASHEx_Erase+0x12c>)
 80093b8:	695b      	ldr	r3, [r3, #20]
 80093ba:	4a11      	ldr	r2, [pc, #68]	; (8009400 <HAL_FLASHEx_Erase+0x12c>)
 80093bc:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 80093c0:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 80093c2:	7bfb      	ldrb	r3, [r7, #15]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d003      	beq.n	80093d0 <HAL_FLASHEx_Erase+0xfc>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	68ba      	ldr	r2, [r7, #8]
 80093cc:	601a      	str	r2, [r3, #0]
          break;
 80093ce:	e00a      	b.n	80093e6 <HAL_FLASHEx_Erase+0x112>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	3301      	adds	r3, #1
 80093d4:	60bb      	str	r3, [r7, #8]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	689a      	ldr	r2, [r3, #8]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	68db      	ldr	r3, [r3, #12]
 80093de:	4413      	add	r3, r2
 80093e0:	68ba      	ldr	r2, [r7, #8]
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d3db      	bcc.n	800939e <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80093e6:	f000 f84f 	bl	8009488 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80093ea:	4b04      	ldr	r3, [pc, #16]	; (80093fc <HAL_FLASHEx_Erase+0x128>)
 80093ec:	2200      	movs	r2, #0
 80093ee:	701a      	strb	r2, [r3, #0]

  return status;
 80093f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3710      	adds	r7, #16
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	bf00      	nop
 80093fc:	20000544 	.word	0x20000544
 8009400:	40022000 	.word	0x40022000

08009404 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8009404:	b480      	push	{r7}
 8009406:	b083      	sub	sp, #12
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f003 0301 	and.w	r3, r3, #1
 8009412:	2b00      	cmp	r3, #0
 8009414:	d005      	beq.n	8009422 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8009416:	4b09      	ldr	r3, [pc, #36]	; (800943c <FLASH_MassErase+0x38>)
 8009418:	695b      	ldr	r3, [r3, #20]
 800941a:	4a08      	ldr	r2, [pc, #32]	; (800943c <FLASH_MassErase+0x38>)
 800941c:	f043 0304 	orr.w	r3, r3, #4
 8009420:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8009422:	4b06      	ldr	r3, [pc, #24]	; (800943c <FLASH_MassErase+0x38>)
 8009424:	695b      	ldr	r3, [r3, #20]
 8009426:	4a05      	ldr	r2, [pc, #20]	; (800943c <FLASH_MassErase+0x38>)
 8009428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800942c:	6153      	str	r3, [r2, #20]
}
 800942e:	bf00      	nop
 8009430:	370c      	adds	r7, #12
 8009432:	46bd      	mov	sp, r7
 8009434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009438:	4770      	bx	lr
 800943a:	bf00      	nop
 800943c:	40022000 	.word	0x40022000

08009440 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8009440:	b480      	push	{r7}
 8009442:	b083      	sub	sp, #12
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800944a:	4b0e      	ldr	r3, [pc, #56]	; (8009484 <FLASH_PageErase+0x44>)
 800944c:	695b      	ldr	r3, [r3, #20]
 800944e:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	00db      	lsls	r3, r3, #3
 8009456:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800945a:	490a      	ldr	r1, [pc, #40]	; (8009484 <FLASH_PageErase+0x44>)
 800945c:	4313      	orrs	r3, r2
 800945e:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8009460:	4b08      	ldr	r3, [pc, #32]	; (8009484 <FLASH_PageErase+0x44>)
 8009462:	695b      	ldr	r3, [r3, #20]
 8009464:	4a07      	ldr	r2, [pc, #28]	; (8009484 <FLASH_PageErase+0x44>)
 8009466:	f043 0302 	orr.w	r3, r3, #2
 800946a:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800946c:	4b05      	ldr	r3, [pc, #20]	; (8009484 <FLASH_PageErase+0x44>)
 800946e:	695b      	ldr	r3, [r3, #20]
 8009470:	4a04      	ldr	r2, [pc, #16]	; (8009484 <FLASH_PageErase+0x44>)
 8009472:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009476:	6153      	str	r3, [r2, #20]
}
 8009478:	bf00      	nop
 800947a:	370c      	adds	r7, #12
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr
 8009484:	40022000 	.word	0x40022000

08009488 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8009488:	b480      	push	{r7}
 800948a:	b083      	sub	sp, #12
 800948c:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800948e:	4b21      	ldr	r3, [pc, #132]	; (8009514 <FLASH_FlushCaches+0x8c>)
 8009490:	7f1b      	ldrb	r3, [r3, #28]
 8009492:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8009494:	79fb      	ldrb	r3, [r7, #7]
 8009496:	2b01      	cmp	r3, #1
 8009498:	d002      	beq.n	80094a0 <FLASH_FlushCaches+0x18>
 800949a:	79fb      	ldrb	r3, [r7, #7]
 800949c:	2b03      	cmp	r3, #3
 800949e:	d117      	bne.n	80094d0 <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80094a0:	4b1d      	ldr	r3, [pc, #116]	; (8009518 <FLASH_FlushCaches+0x90>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a1c      	ldr	r2, [pc, #112]	; (8009518 <FLASH_FlushCaches+0x90>)
 80094a6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80094aa:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80094ac:	4b1a      	ldr	r3, [pc, #104]	; (8009518 <FLASH_FlushCaches+0x90>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	4a19      	ldr	r2, [pc, #100]	; (8009518 <FLASH_FlushCaches+0x90>)
 80094b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80094b6:	6013      	str	r3, [r2, #0]
 80094b8:	4b17      	ldr	r3, [pc, #92]	; (8009518 <FLASH_FlushCaches+0x90>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4a16      	ldr	r2, [pc, #88]	; (8009518 <FLASH_FlushCaches+0x90>)
 80094be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80094c2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80094c4:	4b14      	ldr	r3, [pc, #80]	; (8009518 <FLASH_FlushCaches+0x90>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4a13      	ldr	r2, [pc, #76]	; (8009518 <FLASH_FlushCaches+0x90>)
 80094ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80094ce:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80094d0:	79fb      	ldrb	r3, [r7, #7]
 80094d2:	2b02      	cmp	r3, #2
 80094d4:	d002      	beq.n	80094dc <FLASH_FlushCaches+0x54>
 80094d6:	79fb      	ldrb	r3, [r7, #7]
 80094d8:	2b03      	cmp	r3, #3
 80094da:	d111      	bne.n	8009500 <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80094dc:	4b0e      	ldr	r3, [pc, #56]	; (8009518 <FLASH_FlushCaches+0x90>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4a0d      	ldr	r2, [pc, #52]	; (8009518 <FLASH_FlushCaches+0x90>)
 80094e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80094e6:	6013      	str	r3, [r2, #0]
 80094e8:	4b0b      	ldr	r3, [pc, #44]	; (8009518 <FLASH_FlushCaches+0x90>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4a0a      	ldr	r2, [pc, #40]	; (8009518 <FLASH_FlushCaches+0x90>)
 80094ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094f2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80094f4:	4b08      	ldr	r3, [pc, #32]	; (8009518 <FLASH_FlushCaches+0x90>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4a07      	ldr	r2, [pc, #28]	; (8009518 <FLASH_FlushCaches+0x90>)
 80094fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80094fe:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8009500:	4b04      	ldr	r3, [pc, #16]	; (8009514 <FLASH_FlushCaches+0x8c>)
 8009502:	2200      	movs	r2, #0
 8009504:	771a      	strb	r2, [r3, #28]
}
 8009506:	bf00      	nop
 8009508:	370c      	adds	r7, #12
 800950a:	46bd      	mov	sp, r7
 800950c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009510:	4770      	bx	lr
 8009512:	bf00      	nop
 8009514:	20000544 	.word	0x20000544
 8009518:	40022000 	.word	0x40022000

0800951c <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b084      	sub	sp, #16
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d101      	bne.n	800952e <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 800952a:	2301      	movs	r3, #1
 800952c:	e033      	b.n	8009596 <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009534:	b2db      	uxtb	r3, r3
 8009536:	2b00      	cmp	r3, #0
 8009538:	d106      	bne.n	8009548 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2200      	movs	r2, #0
 800953e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f7fb fb12 	bl	8004b6c <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2200      	movs	r2, #0
 800954c:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f000 f854 	bl	80095fc <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f000 f822 	bl	800959e <FMAC_Reset>
 800955a:	4603      	mov	r3, r0
 800955c:	2b01      	cmp	r3, #1
 800955e:	d10c      	bne.n	800957a <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009564:	f043 0210 	orr.w	r2, r3, #16
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	22a0      	movs	r2, #160	; 0xa0
 8009570:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_ERROR;
 8009574:	2301      	movs	r3, #1
 8009576:	73fb      	strb	r3, [r7, #15]
 8009578:	e008      	b.n	800958c <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2200      	movs	r2, #0
 800957e:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2220      	movs	r2, #32
 8009584:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 8009588:	2300      	movs	r3, #0
 800958a:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2200      	movs	r2, #0
 8009590:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8009594:	7bfb      	ldrb	r3, [r7, #15]
}
 8009596:	4618      	mov	r0, r3
 8009598:	3710      	adds	r7, #16
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}

0800959e <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 800959e:	b580      	push	{r7, lr}
 80095a0:	b084      	sub	sp, #16
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80095a6:	f7fc fbe1 	bl	8005d6c <HAL_GetTick>
 80095aa:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	691a      	ldr	r2, [r3, #16]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80095ba:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 80095bc:	e00f      	b.n	80095de <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 80095be:	f7fc fbd5 	bl	8005d6c <HAL_GetTick>
 80095c2:	4602      	mov	r2, r0
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	1ad3      	subs	r3, r2, r3
 80095c8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80095cc:	d907      	bls.n	80095de <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095d2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80095da:	2301      	movs	r3, #1
 80095dc:	e00a      	b.n	80095f4 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	691b      	ldr	r3, [r3, #16]
 80095e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d1e8      	bne.n	80095be <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2200      	movs	r2, #0
 80095f0:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 80095f2:	2300      	movs	r3, #0
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3710      	adds	r7, #16
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}

080095fc <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b082      	sub	sp, #8
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f000 f807 	bl	8009618 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 f81b 	bl	8009646 <FMAC_ResetOutputStateAndDataPointers>
}
 8009610:	bf00      	nop
 8009612:	3708      	adds	r7, #8
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8009618:	b480      	push	{r7}
 800961a:	b083      	sub	sp, #12
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2200      	movs	r2, #0
 8009624:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2200      	movs	r2, #0
 800962a:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2200      	movs	r2, #0
 8009630:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2220      	movs	r2, #32
 8009636:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 800963a:	bf00      	nop
 800963c:	370c      	adds	r7, #12
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr

08009646 <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8009646:	b480      	push	{r7}
 8009648:	b083      	sub	sp, #12
 800964a:	af00      	add	r7, sp, #0
 800964c:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2200      	movs	r2, #0
 8009652:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2200      	movs	r2, #0
 8009658:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2200      	movs	r2, #0
 800965e:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2220      	movs	r2, #32
 8009664:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8009668:	bf00      	nop
 800966a:	370c      	adds	r7, #12
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr

08009674 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009674:	b480      	push	{r7}
 8009676:	b087      	sub	sp, #28
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800967e:	2300      	movs	r3, #0
 8009680:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8009682:	e15a      	b.n	800993a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	681a      	ldr	r2, [r3, #0]
 8009688:	2101      	movs	r1, #1
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	fa01 f303 	lsl.w	r3, r1, r3
 8009690:	4013      	ands	r3, r2
 8009692:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2b00      	cmp	r3, #0
 8009698:	f000 814c 	beq.w	8009934 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	f003 0303 	and.w	r3, r3, #3
 80096a4:	2b01      	cmp	r3, #1
 80096a6:	d005      	beq.n	80096b4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	685b      	ldr	r3, [r3, #4]
 80096ac:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80096b0:	2b02      	cmp	r3, #2
 80096b2:	d130      	bne.n	8009716 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	689b      	ldr	r3, [r3, #8]
 80096b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	005b      	lsls	r3, r3, #1
 80096be:	2203      	movs	r2, #3
 80096c0:	fa02 f303 	lsl.w	r3, r2, r3
 80096c4:	43db      	mvns	r3, r3
 80096c6:	693a      	ldr	r2, [r7, #16]
 80096c8:	4013      	ands	r3, r2
 80096ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	68da      	ldr	r2, [r3, #12]
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	005b      	lsls	r3, r3, #1
 80096d4:	fa02 f303 	lsl.w	r3, r2, r3
 80096d8:	693a      	ldr	r2, [r7, #16]
 80096da:	4313      	orrs	r3, r2
 80096dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	693a      	ldr	r2, [r7, #16]
 80096e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	685b      	ldr	r3, [r3, #4]
 80096e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80096ea:	2201      	movs	r2, #1
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	fa02 f303 	lsl.w	r3, r2, r3
 80096f2:	43db      	mvns	r3, r3
 80096f4:	693a      	ldr	r2, [r7, #16]
 80096f6:	4013      	ands	r3, r2
 80096f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	685b      	ldr	r3, [r3, #4]
 80096fe:	091b      	lsrs	r3, r3, #4
 8009700:	f003 0201 	and.w	r2, r3, #1
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	fa02 f303 	lsl.w	r3, r2, r3
 800970a:	693a      	ldr	r2, [r7, #16]
 800970c:	4313      	orrs	r3, r2
 800970e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	693a      	ldr	r2, [r7, #16]
 8009714:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	685b      	ldr	r3, [r3, #4]
 800971a:	f003 0303 	and.w	r3, r3, #3
 800971e:	2b03      	cmp	r3, #3
 8009720:	d017      	beq.n	8009752 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	68db      	ldr	r3, [r3, #12]
 8009726:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	005b      	lsls	r3, r3, #1
 800972c:	2203      	movs	r2, #3
 800972e:	fa02 f303 	lsl.w	r3, r2, r3
 8009732:	43db      	mvns	r3, r3
 8009734:	693a      	ldr	r2, [r7, #16]
 8009736:	4013      	ands	r3, r2
 8009738:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	689a      	ldr	r2, [r3, #8]
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	005b      	lsls	r3, r3, #1
 8009742:	fa02 f303 	lsl.w	r3, r2, r3
 8009746:	693a      	ldr	r2, [r7, #16]
 8009748:	4313      	orrs	r3, r2
 800974a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	693a      	ldr	r2, [r7, #16]
 8009750:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	f003 0303 	and.w	r3, r3, #3
 800975a:	2b02      	cmp	r3, #2
 800975c:	d123      	bne.n	80097a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	08da      	lsrs	r2, r3, #3
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	3208      	adds	r2, #8
 8009766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800976a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	f003 0307 	and.w	r3, r3, #7
 8009772:	009b      	lsls	r3, r3, #2
 8009774:	220f      	movs	r2, #15
 8009776:	fa02 f303 	lsl.w	r3, r2, r3
 800977a:	43db      	mvns	r3, r3
 800977c:	693a      	ldr	r2, [r7, #16]
 800977e:	4013      	ands	r3, r2
 8009780:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	691a      	ldr	r2, [r3, #16]
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	f003 0307 	and.w	r3, r3, #7
 800978c:	009b      	lsls	r3, r3, #2
 800978e:	fa02 f303 	lsl.w	r3, r2, r3
 8009792:	693a      	ldr	r2, [r7, #16]
 8009794:	4313      	orrs	r3, r2
 8009796:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	08da      	lsrs	r2, r3, #3
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	3208      	adds	r2, #8
 80097a0:	6939      	ldr	r1, [r7, #16]
 80097a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	005b      	lsls	r3, r3, #1
 80097b0:	2203      	movs	r2, #3
 80097b2:	fa02 f303 	lsl.w	r3, r2, r3
 80097b6:	43db      	mvns	r3, r3
 80097b8:	693a      	ldr	r2, [r7, #16]
 80097ba:	4013      	ands	r3, r2
 80097bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	685b      	ldr	r3, [r3, #4]
 80097c2:	f003 0203 	and.w	r2, r3, #3
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	005b      	lsls	r3, r3, #1
 80097ca:	fa02 f303 	lsl.w	r3, r2, r3
 80097ce:	693a      	ldr	r2, [r7, #16]
 80097d0:	4313      	orrs	r3, r2
 80097d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	693a      	ldr	r2, [r7, #16]
 80097d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	685b      	ldr	r3, [r3, #4]
 80097de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	f000 80a6 	beq.w	8009934 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80097e8:	4b5b      	ldr	r3, [pc, #364]	; (8009958 <HAL_GPIO_Init+0x2e4>)
 80097ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097ec:	4a5a      	ldr	r2, [pc, #360]	; (8009958 <HAL_GPIO_Init+0x2e4>)
 80097ee:	f043 0301 	orr.w	r3, r3, #1
 80097f2:	6613      	str	r3, [r2, #96]	; 0x60
 80097f4:	4b58      	ldr	r3, [pc, #352]	; (8009958 <HAL_GPIO_Init+0x2e4>)
 80097f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097f8:	f003 0301 	and.w	r3, r3, #1
 80097fc:	60bb      	str	r3, [r7, #8]
 80097fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009800:	4a56      	ldr	r2, [pc, #344]	; (800995c <HAL_GPIO_Init+0x2e8>)
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	089b      	lsrs	r3, r3, #2
 8009806:	3302      	adds	r3, #2
 8009808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800980c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	f003 0303 	and.w	r3, r3, #3
 8009814:	009b      	lsls	r3, r3, #2
 8009816:	220f      	movs	r2, #15
 8009818:	fa02 f303 	lsl.w	r3, r2, r3
 800981c:	43db      	mvns	r3, r3
 800981e:	693a      	ldr	r2, [r7, #16]
 8009820:	4013      	ands	r3, r2
 8009822:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800982a:	d01f      	beq.n	800986c <HAL_GPIO_Init+0x1f8>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	4a4c      	ldr	r2, [pc, #304]	; (8009960 <HAL_GPIO_Init+0x2ec>)
 8009830:	4293      	cmp	r3, r2
 8009832:	d019      	beq.n	8009868 <HAL_GPIO_Init+0x1f4>
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	4a4b      	ldr	r2, [pc, #300]	; (8009964 <HAL_GPIO_Init+0x2f0>)
 8009838:	4293      	cmp	r3, r2
 800983a:	d013      	beq.n	8009864 <HAL_GPIO_Init+0x1f0>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	4a4a      	ldr	r2, [pc, #296]	; (8009968 <HAL_GPIO_Init+0x2f4>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d00d      	beq.n	8009860 <HAL_GPIO_Init+0x1ec>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	4a49      	ldr	r2, [pc, #292]	; (800996c <HAL_GPIO_Init+0x2f8>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d007      	beq.n	800985c <HAL_GPIO_Init+0x1e8>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	4a48      	ldr	r2, [pc, #288]	; (8009970 <HAL_GPIO_Init+0x2fc>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d101      	bne.n	8009858 <HAL_GPIO_Init+0x1e4>
 8009854:	2305      	movs	r3, #5
 8009856:	e00a      	b.n	800986e <HAL_GPIO_Init+0x1fa>
 8009858:	2306      	movs	r3, #6
 800985a:	e008      	b.n	800986e <HAL_GPIO_Init+0x1fa>
 800985c:	2304      	movs	r3, #4
 800985e:	e006      	b.n	800986e <HAL_GPIO_Init+0x1fa>
 8009860:	2303      	movs	r3, #3
 8009862:	e004      	b.n	800986e <HAL_GPIO_Init+0x1fa>
 8009864:	2302      	movs	r3, #2
 8009866:	e002      	b.n	800986e <HAL_GPIO_Init+0x1fa>
 8009868:	2301      	movs	r3, #1
 800986a:	e000      	b.n	800986e <HAL_GPIO_Init+0x1fa>
 800986c:	2300      	movs	r3, #0
 800986e:	697a      	ldr	r2, [r7, #20]
 8009870:	f002 0203 	and.w	r2, r2, #3
 8009874:	0092      	lsls	r2, r2, #2
 8009876:	4093      	lsls	r3, r2
 8009878:	693a      	ldr	r2, [r7, #16]
 800987a:	4313      	orrs	r3, r2
 800987c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800987e:	4937      	ldr	r1, [pc, #220]	; (800995c <HAL_GPIO_Init+0x2e8>)
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	089b      	lsrs	r3, r3, #2
 8009884:	3302      	adds	r3, #2
 8009886:	693a      	ldr	r2, [r7, #16]
 8009888:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800988c:	4b39      	ldr	r3, [pc, #228]	; (8009974 <HAL_GPIO_Init+0x300>)
 800988e:	689b      	ldr	r3, [r3, #8]
 8009890:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	43db      	mvns	r3, r3
 8009896:	693a      	ldr	r2, [r7, #16]
 8009898:	4013      	ands	r3, r2
 800989a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d003      	beq.n	80098b0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80098a8:	693a      	ldr	r2, [r7, #16]
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	4313      	orrs	r3, r2
 80098ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80098b0:	4a30      	ldr	r2, [pc, #192]	; (8009974 <HAL_GPIO_Init+0x300>)
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80098b6:	4b2f      	ldr	r3, [pc, #188]	; (8009974 <HAL_GPIO_Init+0x300>)
 80098b8:	68db      	ldr	r3, [r3, #12]
 80098ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	43db      	mvns	r3, r3
 80098c0:	693a      	ldr	r2, [r7, #16]
 80098c2:	4013      	ands	r3, r2
 80098c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	685b      	ldr	r3, [r3, #4]
 80098ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d003      	beq.n	80098da <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80098d2:	693a      	ldr	r2, [r7, #16]
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	4313      	orrs	r3, r2
 80098d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80098da:	4a26      	ldr	r2, [pc, #152]	; (8009974 <HAL_GPIO_Init+0x300>)
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80098e0:	4b24      	ldr	r3, [pc, #144]	; (8009974 <HAL_GPIO_Init+0x300>)
 80098e2:	685b      	ldr	r3, [r3, #4]
 80098e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	43db      	mvns	r3, r3
 80098ea:	693a      	ldr	r2, [r7, #16]
 80098ec:	4013      	ands	r3, r2
 80098ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	685b      	ldr	r3, [r3, #4]
 80098f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d003      	beq.n	8009904 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80098fc:	693a      	ldr	r2, [r7, #16]
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	4313      	orrs	r3, r2
 8009902:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009904:	4a1b      	ldr	r2, [pc, #108]	; (8009974 <HAL_GPIO_Init+0x300>)
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800990a:	4b1a      	ldr	r3, [pc, #104]	; (8009974 <HAL_GPIO_Init+0x300>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	43db      	mvns	r3, r3
 8009914:	693a      	ldr	r2, [r7, #16]
 8009916:	4013      	ands	r3, r2
 8009918:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	685b      	ldr	r3, [r3, #4]
 800991e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009922:	2b00      	cmp	r3, #0
 8009924:	d003      	beq.n	800992e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8009926:	693a      	ldr	r2, [r7, #16]
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	4313      	orrs	r3, r2
 800992c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800992e:	4a11      	ldr	r2, [pc, #68]	; (8009974 <HAL_GPIO_Init+0x300>)
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	3301      	adds	r3, #1
 8009938:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	681a      	ldr	r2, [r3, #0]
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	fa22 f303 	lsr.w	r3, r2, r3
 8009944:	2b00      	cmp	r3, #0
 8009946:	f47f ae9d 	bne.w	8009684 <HAL_GPIO_Init+0x10>
  }
}
 800994a:	bf00      	nop
 800994c:	bf00      	nop
 800994e:	371c      	adds	r7, #28
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr
 8009958:	40021000 	.word	0x40021000
 800995c:	40010000 	.word	0x40010000
 8009960:	48000400 	.word	0x48000400
 8009964:	48000800 	.word	0x48000800
 8009968:	48000c00 	.word	0x48000c00
 800996c:	48001000 	.word	0x48001000
 8009970:	48001400 	.word	0x48001400
 8009974:	40010400 	.word	0x40010400

08009978 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009978:	b480      	push	{r7}
 800997a:	b083      	sub	sp, #12
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	460b      	mov	r3, r1
 8009982:	807b      	strh	r3, [r7, #2]
 8009984:	4613      	mov	r3, r2
 8009986:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009988:	787b      	ldrb	r3, [r7, #1]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d003      	beq.n	8009996 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800998e:	887a      	ldrh	r2, [r7, #2]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009994:	e002      	b.n	800999c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009996:	887a      	ldrh	r2, [r7, #2]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800999c:	bf00      	nop
 800999e:	370c      	adds	r7, #12
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr

080099a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b085      	sub	sp, #20
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d141      	bne.n	8009a3a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80099b6:	4b4b      	ldr	r3, [pc, #300]	; (8009ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80099be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099c2:	d131      	bne.n	8009a28 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80099c4:	4b47      	ldr	r3, [pc, #284]	; (8009ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80099c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80099ca:	4a46      	ldr	r2, [pc, #280]	; (8009ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80099cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80099d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80099d4:	4b43      	ldr	r3, [pc, #268]	; (8009ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80099dc:	4a41      	ldr	r2, [pc, #260]	; (8009ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80099de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80099e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80099e4:	4b40      	ldr	r3, [pc, #256]	; (8009ae8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	2232      	movs	r2, #50	; 0x32
 80099ea:	fb02 f303 	mul.w	r3, r2, r3
 80099ee:	4a3f      	ldr	r2, [pc, #252]	; (8009aec <HAL_PWREx_ControlVoltageScaling+0x144>)
 80099f0:	fba2 2303 	umull	r2, r3, r2, r3
 80099f4:	0c9b      	lsrs	r3, r3, #18
 80099f6:	3301      	adds	r3, #1
 80099f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80099fa:	e002      	b.n	8009a02 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	3b01      	subs	r3, #1
 8009a00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009a02:	4b38      	ldr	r3, [pc, #224]	; (8009ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a04:	695b      	ldr	r3, [r3, #20]
 8009a06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a0e:	d102      	bne.n	8009a16 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d1f2      	bne.n	80099fc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009a16:	4b33      	ldr	r3, [pc, #204]	; (8009ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a18:	695b      	ldr	r3, [r3, #20]
 8009a1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a22:	d158      	bne.n	8009ad6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009a24:	2303      	movs	r3, #3
 8009a26:	e057      	b.n	8009ad8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009a28:	4b2e      	ldr	r3, [pc, #184]	; (8009ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a2e:	4a2d      	ldr	r2, [pc, #180]	; (8009ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009a38:	e04d      	b.n	8009ad6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a40:	d141      	bne.n	8009ac6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009a42:	4b28      	ldr	r3, [pc, #160]	; (8009ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009a4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a4e:	d131      	bne.n	8009ab4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009a50:	4b24      	ldr	r3, [pc, #144]	; (8009ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a56:	4a23      	ldr	r2, [pc, #140]	; (8009ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009a60:	4b20      	ldr	r3, [pc, #128]	; (8009ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009a68:	4a1e      	ldr	r2, [pc, #120]	; (8009ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009a6e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009a70:	4b1d      	ldr	r3, [pc, #116]	; (8009ae8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	2232      	movs	r2, #50	; 0x32
 8009a76:	fb02 f303 	mul.w	r3, r2, r3
 8009a7a:	4a1c      	ldr	r2, [pc, #112]	; (8009aec <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8009a80:	0c9b      	lsrs	r3, r3, #18
 8009a82:	3301      	adds	r3, #1
 8009a84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009a86:	e002      	b.n	8009a8e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	3b01      	subs	r3, #1
 8009a8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009a8e:	4b15      	ldr	r3, [pc, #84]	; (8009ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a90:	695b      	ldr	r3, [r3, #20]
 8009a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a9a:	d102      	bne.n	8009aa2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d1f2      	bne.n	8009a88 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009aa2:	4b10      	ldr	r3, [pc, #64]	; (8009ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009aa4:	695b      	ldr	r3, [r3, #20]
 8009aa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009aaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009aae:	d112      	bne.n	8009ad6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009ab0:	2303      	movs	r3, #3
 8009ab2:	e011      	b.n	8009ad8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009ab4:	4b0b      	ldr	r3, [pc, #44]	; (8009ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009ab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009aba:	4a0a      	ldr	r2, [pc, #40]	; (8009ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ac0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009ac4:	e007      	b.n	8009ad6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009ac6:	4b07      	ldr	r3, [pc, #28]	; (8009ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009ace:	4a05      	ldr	r2, [pc, #20]	; (8009ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009ad0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009ad4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8009ad6:	2300      	movs	r3, #0
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3714      	adds	r7, #20
 8009adc:	46bd      	mov	sp, r7
 8009ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae2:	4770      	bx	lr
 8009ae4:	40007000 	.word	0x40007000
 8009ae8:	20000538 	.word	0x20000538
 8009aec:	431bde83 	.word	0x431bde83

08009af0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8009af0:	b480      	push	{r7}
 8009af2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8009af4:	4b05      	ldr	r3, [pc, #20]	; (8009b0c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009af6:	689b      	ldr	r3, [r3, #8]
 8009af8:	4a04      	ldr	r2, [pc, #16]	; (8009b0c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009afa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009afe:	6093      	str	r3, [r2, #8]
}
 8009b00:	bf00      	nop
 8009b02:	46bd      	mov	sp, r7
 8009b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b08:	4770      	bx	lr
 8009b0a:	bf00      	nop
 8009b0c:	40007000 	.word	0x40007000

08009b10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b088      	sub	sp, #32
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d101      	bne.n	8009b22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009b1e:	2301      	movs	r3, #1
 8009b20:	e306      	b.n	800a130 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f003 0301 	and.w	r3, r3, #1
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d075      	beq.n	8009c1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009b2e:	4b97      	ldr	r3, [pc, #604]	; (8009d8c <HAL_RCC_OscConfig+0x27c>)
 8009b30:	689b      	ldr	r3, [r3, #8]
 8009b32:	f003 030c 	and.w	r3, r3, #12
 8009b36:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009b38:	4b94      	ldr	r3, [pc, #592]	; (8009d8c <HAL_RCC_OscConfig+0x27c>)
 8009b3a:	68db      	ldr	r3, [r3, #12]
 8009b3c:	f003 0303 	and.w	r3, r3, #3
 8009b40:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8009b42:	69bb      	ldr	r3, [r7, #24]
 8009b44:	2b0c      	cmp	r3, #12
 8009b46:	d102      	bne.n	8009b4e <HAL_RCC_OscConfig+0x3e>
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	2b03      	cmp	r3, #3
 8009b4c:	d002      	beq.n	8009b54 <HAL_RCC_OscConfig+0x44>
 8009b4e:	69bb      	ldr	r3, [r7, #24]
 8009b50:	2b08      	cmp	r3, #8
 8009b52:	d10b      	bne.n	8009b6c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b54:	4b8d      	ldr	r3, [pc, #564]	; (8009d8c <HAL_RCC_OscConfig+0x27c>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d05b      	beq.n	8009c18 <HAL_RCC_OscConfig+0x108>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d157      	bne.n	8009c18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009b68:	2301      	movs	r3, #1
 8009b6a:	e2e1      	b.n	800a130 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b74:	d106      	bne.n	8009b84 <HAL_RCC_OscConfig+0x74>
 8009b76:	4b85      	ldr	r3, [pc, #532]	; (8009d8c <HAL_RCC_OscConfig+0x27c>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4a84      	ldr	r2, [pc, #528]	; (8009d8c <HAL_RCC_OscConfig+0x27c>)
 8009b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b80:	6013      	str	r3, [r2, #0]
 8009b82:	e01d      	b.n	8009bc0 <HAL_RCC_OscConfig+0xb0>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	685b      	ldr	r3, [r3, #4]
 8009b88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009b8c:	d10c      	bne.n	8009ba8 <HAL_RCC_OscConfig+0x98>
 8009b8e:	4b7f      	ldr	r3, [pc, #508]	; (8009d8c <HAL_RCC_OscConfig+0x27c>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4a7e      	ldr	r2, [pc, #504]	; (8009d8c <HAL_RCC_OscConfig+0x27c>)
 8009b94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009b98:	6013      	str	r3, [r2, #0]
 8009b9a:	4b7c      	ldr	r3, [pc, #496]	; (8009d8c <HAL_RCC_OscConfig+0x27c>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4a7b      	ldr	r2, [pc, #492]	; (8009d8c <HAL_RCC_OscConfig+0x27c>)
 8009ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ba4:	6013      	str	r3, [r2, #0]
 8009ba6:	e00b      	b.n	8009bc0 <HAL_RCC_OscConfig+0xb0>
 8009ba8:	4b78      	ldr	r3, [pc, #480]	; (8009d8c <HAL_RCC_OscConfig+0x27c>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4a77      	ldr	r2, [pc, #476]	; (8009d8c <HAL_RCC_OscConfig+0x27c>)
 8009bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009bb2:	6013      	str	r3, [r2, #0]
 8009bb4:	4b75      	ldr	r3, [pc, #468]	; (8009d8c <HAL_RCC_OscConfig+0x27c>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4a74      	ldr	r2, [pc, #464]	; (8009d8c <HAL_RCC_OscConfig+0x27c>)
 8009bba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009bbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d013      	beq.n	8009bf0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bc8:	f7fc f8d0 	bl	8005d6c <HAL_GetTick>
 8009bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009bce:	e008      	b.n	8009be2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009bd0:	f7fc f8cc 	bl	8005d6c <HAL_GetTick>
 8009bd4:	4602      	mov	r2, r0
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	1ad3      	subs	r3, r2, r3
 8009bda:	2b64      	cmp	r3, #100	; 0x64
 8009bdc:	d901      	bls.n	8009be2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009bde:	2303      	movs	r3, #3
 8009be0:	e2a6      	b.n	800a130 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009be2:	4b6a      	ldr	r3, [pc, #424]	; (8009d8c <HAL_RCC_OscConfig+0x27c>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d0f0      	beq.n	8009bd0 <HAL_RCC_OscConfig+0xc0>
 8009bee:	e014      	b.n	8009c1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bf0:	f7fc f8bc 	bl	8005d6c <HAL_GetTick>
 8009bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009bf6:	e008      	b.n	8009c0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009bf8:	f7fc f8b8 	bl	8005d6c <HAL_GetTick>
 8009bfc:	4602      	mov	r2, r0
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	1ad3      	subs	r3, r2, r3
 8009c02:	2b64      	cmp	r3, #100	; 0x64
 8009c04:	d901      	bls.n	8009c0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009c06:	2303      	movs	r3, #3
 8009c08:	e292      	b.n	800a130 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009c0a:	4b60      	ldr	r3, [pc, #384]	; (8009d8c <HAL_RCC_OscConfig+0x27c>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d1f0      	bne.n	8009bf8 <HAL_RCC_OscConfig+0xe8>
 8009c16:	e000      	b.n	8009c1a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009c18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f003 0302 	and.w	r3, r3, #2
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d075      	beq.n	8009d12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009c26:	4b59      	ldr	r3, [pc, #356]	; (8009d8c <HAL_RCC_OscConfig+0x27c>)
 8009c28:	689b      	ldr	r3, [r3, #8]
 8009c2a:	f003 030c 	and.w	r3, r3, #12
 8009c2e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009c30:	4b56      	ldr	r3, [pc, #344]	; (8009d8c <HAL_RCC_OscConfig+0x27c>)
 8009c32:	68db      	ldr	r3, [r3, #12]
 8009c34:	f003 0303 	and.w	r3, r3, #3
 8009c38:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8009c3a:	69bb      	ldr	r3, [r7, #24]
 8009c3c:	2b0c      	cmp	r3, #12
 8009c3e:	d102      	bne.n	8009c46 <HAL_RCC_OscConfig+0x136>
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	2b02      	cmp	r3, #2
 8009c44:	d002      	beq.n	8009c4c <HAL_RCC_OscConfig+0x13c>
 8009c46:	69bb      	ldr	r3, [r7, #24]
 8009c48:	2b04      	cmp	r3, #4
 8009c4a:	d11f      	bne.n	8009c8c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009c4c:	4b4f      	ldr	r3, [pc, #316]	; (8009d8c <HAL_RCC_OscConfig+0x27c>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d005      	beq.n	8009c64 <HAL_RCC_OscConfig+0x154>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	68db      	ldr	r3, [r3, #12]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d101      	bne.n	8009c64 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8009c60:	2301      	movs	r3, #1
 8009c62:	e265      	b.n	800a130 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c64:	4b49      	ldr	r3, [pc, #292]	; (8009d8c <HAL_RCC_OscConfig+0x27c>)
 8009c66:	685b      	ldr	r3, [r3, #4]
 8009c68:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	691b      	ldr	r3, [r3, #16]
 8009c70:	061b      	lsls	r3, r3, #24
 8009c72:	4946      	ldr	r1, [pc, #280]	; (8009d8c <HAL_RCC_OscConfig+0x27c>)
 8009c74:	4313      	orrs	r3, r2
 8009c76:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009c78:	4b45      	ldr	r3, [pc, #276]	; (8009d90 <HAL_RCC_OscConfig+0x280>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f7fc f829 	bl	8005cd4 <HAL_InitTick>
 8009c82:	4603      	mov	r3, r0
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d043      	beq.n	8009d10 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8009c88:	2301      	movs	r3, #1
 8009c8a:	e251      	b.n	800a130 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	68db      	ldr	r3, [r3, #12]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d023      	beq.n	8009cdc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009c94:	4b3d      	ldr	r3, [pc, #244]	; (8009d8c <HAL_RCC_OscConfig+0x27c>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4a3c      	ldr	r2, [pc, #240]	; (8009d8c <HAL_RCC_OscConfig+0x27c>)
 8009c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ca0:	f7fc f864 	bl	8005d6c <HAL_GetTick>
 8009ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009ca6:	e008      	b.n	8009cba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009ca8:	f7fc f860 	bl	8005d6c <HAL_GetTick>
 8009cac:	4602      	mov	r2, r0
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	1ad3      	subs	r3, r2, r3
 8009cb2:	2b02      	cmp	r3, #2
 8009cb4:	d901      	bls.n	8009cba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009cb6:	2303      	movs	r3, #3
 8009cb8:	e23a      	b.n	800a130 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009cba:	4b34      	ldr	r3, [pc, #208]	; (8009d8c <HAL_RCC_OscConfig+0x27c>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d0f0      	beq.n	8009ca8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009cc6:	4b31      	ldr	r3, [pc, #196]	; (8009d8c <HAL_RCC_OscConfig+0x27c>)
 8009cc8:	685b      	ldr	r3, [r3, #4]
 8009cca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	691b      	ldr	r3, [r3, #16]
 8009cd2:	061b      	lsls	r3, r3, #24
 8009cd4:	492d      	ldr	r1, [pc, #180]	; (8009d8c <HAL_RCC_OscConfig+0x27c>)
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	604b      	str	r3, [r1, #4]
 8009cda:	e01a      	b.n	8009d12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009cdc:	4b2b      	ldr	r3, [pc, #172]	; (8009d8c <HAL_RCC_OscConfig+0x27c>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4a2a      	ldr	r2, [pc, #168]	; (8009d8c <HAL_RCC_OscConfig+0x27c>)
 8009ce2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ce6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ce8:	f7fc f840 	bl	8005d6c <HAL_GetTick>
 8009cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009cee:	e008      	b.n	8009d02 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009cf0:	f7fc f83c 	bl	8005d6c <HAL_GetTick>
 8009cf4:	4602      	mov	r2, r0
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	1ad3      	subs	r3, r2, r3
 8009cfa:	2b02      	cmp	r3, #2
 8009cfc:	d901      	bls.n	8009d02 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8009cfe:	2303      	movs	r3, #3
 8009d00:	e216      	b.n	800a130 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009d02:	4b22      	ldr	r3, [pc, #136]	; (8009d8c <HAL_RCC_OscConfig+0x27c>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d1f0      	bne.n	8009cf0 <HAL_RCC_OscConfig+0x1e0>
 8009d0e:	e000      	b.n	8009d12 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009d10:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f003 0308 	and.w	r3, r3, #8
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d041      	beq.n	8009da2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	695b      	ldr	r3, [r3, #20]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d01c      	beq.n	8009d60 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009d26:	4b19      	ldr	r3, [pc, #100]	; (8009d8c <HAL_RCC_OscConfig+0x27c>)
 8009d28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d2c:	4a17      	ldr	r2, [pc, #92]	; (8009d8c <HAL_RCC_OscConfig+0x27c>)
 8009d2e:	f043 0301 	orr.w	r3, r3, #1
 8009d32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d36:	f7fc f819 	bl	8005d6c <HAL_GetTick>
 8009d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009d3c:	e008      	b.n	8009d50 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009d3e:	f7fc f815 	bl	8005d6c <HAL_GetTick>
 8009d42:	4602      	mov	r2, r0
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	1ad3      	subs	r3, r2, r3
 8009d48:	2b02      	cmp	r3, #2
 8009d4a:	d901      	bls.n	8009d50 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009d4c:	2303      	movs	r3, #3
 8009d4e:	e1ef      	b.n	800a130 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009d50:	4b0e      	ldr	r3, [pc, #56]	; (8009d8c <HAL_RCC_OscConfig+0x27c>)
 8009d52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d56:	f003 0302 	and.w	r3, r3, #2
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d0ef      	beq.n	8009d3e <HAL_RCC_OscConfig+0x22e>
 8009d5e:	e020      	b.n	8009da2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009d60:	4b0a      	ldr	r3, [pc, #40]	; (8009d8c <HAL_RCC_OscConfig+0x27c>)
 8009d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d66:	4a09      	ldr	r2, [pc, #36]	; (8009d8c <HAL_RCC_OscConfig+0x27c>)
 8009d68:	f023 0301 	bic.w	r3, r3, #1
 8009d6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d70:	f7fb fffc 	bl	8005d6c <HAL_GetTick>
 8009d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009d76:	e00d      	b.n	8009d94 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009d78:	f7fb fff8 	bl	8005d6c <HAL_GetTick>
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	693b      	ldr	r3, [r7, #16]
 8009d80:	1ad3      	subs	r3, r2, r3
 8009d82:	2b02      	cmp	r3, #2
 8009d84:	d906      	bls.n	8009d94 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009d86:	2303      	movs	r3, #3
 8009d88:	e1d2      	b.n	800a130 <HAL_RCC_OscConfig+0x620>
 8009d8a:	bf00      	nop
 8009d8c:	40021000 	.word	0x40021000
 8009d90:	2000053c 	.word	0x2000053c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009d94:	4b8c      	ldr	r3, [pc, #560]	; (8009fc8 <HAL_RCC_OscConfig+0x4b8>)
 8009d96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d9a:	f003 0302 	and.w	r3, r3, #2
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d1ea      	bne.n	8009d78 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f003 0304 	and.w	r3, r3, #4
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	f000 80a6 	beq.w	8009efc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009db0:	2300      	movs	r3, #0
 8009db2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009db4:	4b84      	ldr	r3, [pc, #528]	; (8009fc8 <HAL_RCC_OscConfig+0x4b8>)
 8009db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d101      	bne.n	8009dc4 <HAL_RCC_OscConfig+0x2b4>
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	e000      	b.n	8009dc6 <HAL_RCC_OscConfig+0x2b6>
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d00d      	beq.n	8009de6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009dca:	4b7f      	ldr	r3, [pc, #508]	; (8009fc8 <HAL_RCC_OscConfig+0x4b8>)
 8009dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dce:	4a7e      	ldr	r2, [pc, #504]	; (8009fc8 <HAL_RCC_OscConfig+0x4b8>)
 8009dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009dd4:	6593      	str	r3, [r2, #88]	; 0x58
 8009dd6:	4b7c      	ldr	r3, [pc, #496]	; (8009fc8 <HAL_RCC_OscConfig+0x4b8>)
 8009dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009dde:	60fb      	str	r3, [r7, #12]
 8009de0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009de2:	2301      	movs	r3, #1
 8009de4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009de6:	4b79      	ldr	r3, [pc, #484]	; (8009fcc <HAL_RCC_OscConfig+0x4bc>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d118      	bne.n	8009e24 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009df2:	4b76      	ldr	r3, [pc, #472]	; (8009fcc <HAL_RCC_OscConfig+0x4bc>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	4a75      	ldr	r2, [pc, #468]	; (8009fcc <HAL_RCC_OscConfig+0x4bc>)
 8009df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009dfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009dfe:	f7fb ffb5 	bl	8005d6c <HAL_GetTick>
 8009e02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009e04:	e008      	b.n	8009e18 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009e06:	f7fb ffb1 	bl	8005d6c <HAL_GetTick>
 8009e0a:	4602      	mov	r2, r0
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	1ad3      	subs	r3, r2, r3
 8009e10:	2b02      	cmp	r3, #2
 8009e12:	d901      	bls.n	8009e18 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8009e14:	2303      	movs	r3, #3
 8009e16:	e18b      	b.n	800a130 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009e18:	4b6c      	ldr	r3, [pc, #432]	; (8009fcc <HAL_RCC_OscConfig+0x4bc>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d0f0      	beq.n	8009e06 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	689b      	ldr	r3, [r3, #8]
 8009e28:	2b01      	cmp	r3, #1
 8009e2a:	d108      	bne.n	8009e3e <HAL_RCC_OscConfig+0x32e>
 8009e2c:	4b66      	ldr	r3, [pc, #408]	; (8009fc8 <HAL_RCC_OscConfig+0x4b8>)
 8009e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e32:	4a65      	ldr	r2, [pc, #404]	; (8009fc8 <HAL_RCC_OscConfig+0x4b8>)
 8009e34:	f043 0301 	orr.w	r3, r3, #1
 8009e38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009e3c:	e024      	b.n	8009e88 <HAL_RCC_OscConfig+0x378>
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	689b      	ldr	r3, [r3, #8]
 8009e42:	2b05      	cmp	r3, #5
 8009e44:	d110      	bne.n	8009e68 <HAL_RCC_OscConfig+0x358>
 8009e46:	4b60      	ldr	r3, [pc, #384]	; (8009fc8 <HAL_RCC_OscConfig+0x4b8>)
 8009e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e4c:	4a5e      	ldr	r2, [pc, #376]	; (8009fc8 <HAL_RCC_OscConfig+0x4b8>)
 8009e4e:	f043 0304 	orr.w	r3, r3, #4
 8009e52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009e56:	4b5c      	ldr	r3, [pc, #368]	; (8009fc8 <HAL_RCC_OscConfig+0x4b8>)
 8009e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e5c:	4a5a      	ldr	r2, [pc, #360]	; (8009fc8 <HAL_RCC_OscConfig+0x4b8>)
 8009e5e:	f043 0301 	orr.w	r3, r3, #1
 8009e62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009e66:	e00f      	b.n	8009e88 <HAL_RCC_OscConfig+0x378>
 8009e68:	4b57      	ldr	r3, [pc, #348]	; (8009fc8 <HAL_RCC_OscConfig+0x4b8>)
 8009e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e6e:	4a56      	ldr	r2, [pc, #344]	; (8009fc8 <HAL_RCC_OscConfig+0x4b8>)
 8009e70:	f023 0301 	bic.w	r3, r3, #1
 8009e74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009e78:	4b53      	ldr	r3, [pc, #332]	; (8009fc8 <HAL_RCC_OscConfig+0x4b8>)
 8009e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e7e:	4a52      	ldr	r2, [pc, #328]	; (8009fc8 <HAL_RCC_OscConfig+0x4b8>)
 8009e80:	f023 0304 	bic.w	r3, r3, #4
 8009e84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	689b      	ldr	r3, [r3, #8]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d016      	beq.n	8009ebe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e90:	f7fb ff6c 	bl	8005d6c <HAL_GetTick>
 8009e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009e96:	e00a      	b.n	8009eae <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009e98:	f7fb ff68 	bl	8005d6c <HAL_GetTick>
 8009e9c:	4602      	mov	r2, r0
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	1ad3      	subs	r3, r2, r3
 8009ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d901      	bls.n	8009eae <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8009eaa:	2303      	movs	r3, #3
 8009eac:	e140      	b.n	800a130 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009eae:	4b46      	ldr	r3, [pc, #280]	; (8009fc8 <HAL_RCC_OscConfig+0x4b8>)
 8009eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009eb4:	f003 0302 	and.w	r3, r3, #2
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d0ed      	beq.n	8009e98 <HAL_RCC_OscConfig+0x388>
 8009ebc:	e015      	b.n	8009eea <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ebe:	f7fb ff55 	bl	8005d6c <HAL_GetTick>
 8009ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009ec4:	e00a      	b.n	8009edc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ec6:	f7fb ff51 	bl	8005d6c <HAL_GetTick>
 8009eca:	4602      	mov	r2, r0
 8009ecc:	693b      	ldr	r3, [r7, #16]
 8009ece:	1ad3      	subs	r3, r2, r3
 8009ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d901      	bls.n	8009edc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8009ed8:	2303      	movs	r3, #3
 8009eda:	e129      	b.n	800a130 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009edc:	4b3a      	ldr	r3, [pc, #232]	; (8009fc8 <HAL_RCC_OscConfig+0x4b8>)
 8009ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ee2:	f003 0302 	and.w	r3, r3, #2
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d1ed      	bne.n	8009ec6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009eea:	7ffb      	ldrb	r3, [r7, #31]
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d105      	bne.n	8009efc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009ef0:	4b35      	ldr	r3, [pc, #212]	; (8009fc8 <HAL_RCC_OscConfig+0x4b8>)
 8009ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ef4:	4a34      	ldr	r2, [pc, #208]	; (8009fc8 <HAL_RCC_OscConfig+0x4b8>)
 8009ef6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009efa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f003 0320 	and.w	r3, r3, #32
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d03c      	beq.n	8009f82 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	699b      	ldr	r3, [r3, #24]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d01c      	beq.n	8009f4a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009f10:	4b2d      	ldr	r3, [pc, #180]	; (8009fc8 <HAL_RCC_OscConfig+0x4b8>)
 8009f12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009f16:	4a2c      	ldr	r2, [pc, #176]	; (8009fc8 <HAL_RCC_OscConfig+0x4b8>)
 8009f18:	f043 0301 	orr.w	r3, r3, #1
 8009f1c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f20:	f7fb ff24 	bl	8005d6c <HAL_GetTick>
 8009f24:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009f26:	e008      	b.n	8009f3a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009f28:	f7fb ff20 	bl	8005d6c <HAL_GetTick>
 8009f2c:	4602      	mov	r2, r0
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	1ad3      	subs	r3, r2, r3
 8009f32:	2b02      	cmp	r3, #2
 8009f34:	d901      	bls.n	8009f3a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8009f36:	2303      	movs	r3, #3
 8009f38:	e0fa      	b.n	800a130 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009f3a:	4b23      	ldr	r3, [pc, #140]	; (8009fc8 <HAL_RCC_OscConfig+0x4b8>)
 8009f3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009f40:	f003 0302 	and.w	r3, r3, #2
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d0ef      	beq.n	8009f28 <HAL_RCC_OscConfig+0x418>
 8009f48:	e01b      	b.n	8009f82 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009f4a:	4b1f      	ldr	r3, [pc, #124]	; (8009fc8 <HAL_RCC_OscConfig+0x4b8>)
 8009f4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009f50:	4a1d      	ldr	r2, [pc, #116]	; (8009fc8 <HAL_RCC_OscConfig+0x4b8>)
 8009f52:	f023 0301 	bic.w	r3, r3, #1
 8009f56:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f5a:	f7fb ff07 	bl	8005d6c <HAL_GetTick>
 8009f5e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009f60:	e008      	b.n	8009f74 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009f62:	f7fb ff03 	bl	8005d6c <HAL_GetTick>
 8009f66:	4602      	mov	r2, r0
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	1ad3      	subs	r3, r2, r3
 8009f6c:	2b02      	cmp	r3, #2
 8009f6e:	d901      	bls.n	8009f74 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8009f70:	2303      	movs	r3, #3
 8009f72:	e0dd      	b.n	800a130 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009f74:	4b14      	ldr	r3, [pc, #80]	; (8009fc8 <HAL_RCC_OscConfig+0x4b8>)
 8009f76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009f7a:	f003 0302 	and.w	r3, r3, #2
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d1ef      	bne.n	8009f62 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	69db      	ldr	r3, [r3, #28]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	f000 80d1 	beq.w	800a12e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009f8c:	4b0e      	ldr	r3, [pc, #56]	; (8009fc8 <HAL_RCC_OscConfig+0x4b8>)
 8009f8e:	689b      	ldr	r3, [r3, #8]
 8009f90:	f003 030c 	and.w	r3, r3, #12
 8009f94:	2b0c      	cmp	r3, #12
 8009f96:	f000 808b 	beq.w	800a0b0 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	69db      	ldr	r3, [r3, #28]
 8009f9e:	2b02      	cmp	r3, #2
 8009fa0:	d15e      	bne.n	800a060 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009fa2:	4b09      	ldr	r3, [pc, #36]	; (8009fc8 <HAL_RCC_OscConfig+0x4b8>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	4a08      	ldr	r2, [pc, #32]	; (8009fc8 <HAL_RCC_OscConfig+0x4b8>)
 8009fa8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009fac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fae:	f7fb fedd 	bl	8005d6c <HAL_GetTick>
 8009fb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009fb4:	e00c      	b.n	8009fd0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009fb6:	f7fb fed9 	bl	8005d6c <HAL_GetTick>
 8009fba:	4602      	mov	r2, r0
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	1ad3      	subs	r3, r2, r3
 8009fc0:	2b02      	cmp	r3, #2
 8009fc2:	d905      	bls.n	8009fd0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8009fc4:	2303      	movs	r3, #3
 8009fc6:	e0b3      	b.n	800a130 <HAL_RCC_OscConfig+0x620>
 8009fc8:	40021000 	.word	0x40021000
 8009fcc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009fd0:	4b59      	ldr	r3, [pc, #356]	; (800a138 <HAL_RCC_OscConfig+0x628>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d1ec      	bne.n	8009fb6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009fdc:	4b56      	ldr	r3, [pc, #344]	; (800a138 <HAL_RCC_OscConfig+0x628>)
 8009fde:	68da      	ldr	r2, [r3, #12]
 8009fe0:	4b56      	ldr	r3, [pc, #344]	; (800a13c <HAL_RCC_OscConfig+0x62c>)
 8009fe2:	4013      	ands	r3, r2
 8009fe4:	687a      	ldr	r2, [r7, #4]
 8009fe6:	6a11      	ldr	r1, [r2, #32]
 8009fe8:	687a      	ldr	r2, [r7, #4]
 8009fea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009fec:	3a01      	subs	r2, #1
 8009fee:	0112      	lsls	r2, r2, #4
 8009ff0:	4311      	orrs	r1, r2
 8009ff2:	687a      	ldr	r2, [r7, #4]
 8009ff4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009ff6:	0212      	lsls	r2, r2, #8
 8009ff8:	4311      	orrs	r1, r2
 8009ffa:	687a      	ldr	r2, [r7, #4]
 8009ffc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009ffe:	0852      	lsrs	r2, r2, #1
 800a000:	3a01      	subs	r2, #1
 800a002:	0552      	lsls	r2, r2, #21
 800a004:	4311      	orrs	r1, r2
 800a006:	687a      	ldr	r2, [r7, #4]
 800a008:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a00a:	0852      	lsrs	r2, r2, #1
 800a00c:	3a01      	subs	r2, #1
 800a00e:	0652      	lsls	r2, r2, #25
 800a010:	4311      	orrs	r1, r2
 800a012:	687a      	ldr	r2, [r7, #4]
 800a014:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a016:	06d2      	lsls	r2, r2, #27
 800a018:	430a      	orrs	r2, r1
 800a01a:	4947      	ldr	r1, [pc, #284]	; (800a138 <HAL_RCC_OscConfig+0x628>)
 800a01c:	4313      	orrs	r3, r2
 800a01e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a020:	4b45      	ldr	r3, [pc, #276]	; (800a138 <HAL_RCC_OscConfig+0x628>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	4a44      	ldr	r2, [pc, #272]	; (800a138 <HAL_RCC_OscConfig+0x628>)
 800a026:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a02a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a02c:	4b42      	ldr	r3, [pc, #264]	; (800a138 <HAL_RCC_OscConfig+0x628>)
 800a02e:	68db      	ldr	r3, [r3, #12]
 800a030:	4a41      	ldr	r2, [pc, #260]	; (800a138 <HAL_RCC_OscConfig+0x628>)
 800a032:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a036:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a038:	f7fb fe98 	bl	8005d6c <HAL_GetTick>
 800a03c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a03e:	e008      	b.n	800a052 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a040:	f7fb fe94 	bl	8005d6c <HAL_GetTick>
 800a044:	4602      	mov	r2, r0
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	1ad3      	subs	r3, r2, r3
 800a04a:	2b02      	cmp	r3, #2
 800a04c:	d901      	bls.n	800a052 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800a04e:	2303      	movs	r3, #3
 800a050:	e06e      	b.n	800a130 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a052:	4b39      	ldr	r3, [pc, #228]	; (800a138 <HAL_RCC_OscConfig+0x628>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d0f0      	beq.n	800a040 <HAL_RCC_OscConfig+0x530>
 800a05e:	e066      	b.n	800a12e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a060:	4b35      	ldr	r3, [pc, #212]	; (800a138 <HAL_RCC_OscConfig+0x628>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4a34      	ldr	r2, [pc, #208]	; (800a138 <HAL_RCC_OscConfig+0x628>)
 800a066:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a06a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800a06c:	4b32      	ldr	r3, [pc, #200]	; (800a138 <HAL_RCC_OscConfig+0x628>)
 800a06e:	68db      	ldr	r3, [r3, #12]
 800a070:	4a31      	ldr	r2, [pc, #196]	; (800a138 <HAL_RCC_OscConfig+0x628>)
 800a072:	f023 0303 	bic.w	r3, r3, #3
 800a076:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800a078:	4b2f      	ldr	r3, [pc, #188]	; (800a138 <HAL_RCC_OscConfig+0x628>)
 800a07a:	68db      	ldr	r3, [r3, #12]
 800a07c:	4a2e      	ldr	r2, [pc, #184]	; (800a138 <HAL_RCC_OscConfig+0x628>)
 800a07e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800a082:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a086:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a088:	f7fb fe70 	bl	8005d6c <HAL_GetTick>
 800a08c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a08e:	e008      	b.n	800a0a2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a090:	f7fb fe6c 	bl	8005d6c <HAL_GetTick>
 800a094:	4602      	mov	r2, r0
 800a096:	693b      	ldr	r3, [r7, #16]
 800a098:	1ad3      	subs	r3, r2, r3
 800a09a:	2b02      	cmp	r3, #2
 800a09c:	d901      	bls.n	800a0a2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800a09e:	2303      	movs	r3, #3
 800a0a0:	e046      	b.n	800a130 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a0a2:	4b25      	ldr	r3, [pc, #148]	; (800a138 <HAL_RCC_OscConfig+0x628>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d1f0      	bne.n	800a090 <HAL_RCC_OscConfig+0x580>
 800a0ae:	e03e      	b.n	800a12e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	69db      	ldr	r3, [r3, #28]
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	d101      	bne.n	800a0bc <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	e039      	b.n	800a130 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800a0bc:	4b1e      	ldr	r3, [pc, #120]	; (800a138 <HAL_RCC_OscConfig+0x628>)
 800a0be:	68db      	ldr	r3, [r3, #12]
 800a0c0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	f003 0203 	and.w	r2, r3, #3
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6a1b      	ldr	r3, [r3, #32]
 800a0cc:	429a      	cmp	r2, r3
 800a0ce:	d12c      	bne.n	800a12a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0da:	3b01      	subs	r3, #1
 800a0dc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d123      	bne.n	800a12a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ec:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a0ee:	429a      	cmp	r2, r3
 800a0f0:	d11b      	bne.n	800a12a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0fc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a0fe:	429a      	cmp	r2, r3
 800a100:	d113      	bne.n	800a12a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a10c:	085b      	lsrs	r3, r3, #1
 800a10e:	3b01      	subs	r3, #1
 800a110:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a112:	429a      	cmp	r2, r3
 800a114:	d109      	bne.n	800a12a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a120:	085b      	lsrs	r3, r3, #1
 800a122:	3b01      	subs	r3, #1
 800a124:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a126:	429a      	cmp	r2, r3
 800a128:	d001      	beq.n	800a12e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800a12a:	2301      	movs	r3, #1
 800a12c:	e000      	b.n	800a130 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800a12e:	2300      	movs	r3, #0
}
 800a130:	4618      	mov	r0, r3
 800a132:	3720      	adds	r7, #32
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}
 800a138:	40021000 	.word	0x40021000
 800a13c:	019f800c 	.word	0x019f800c

0800a140 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b086      	sub	sp, #24
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800a14a:	2300      	movs	r3, #0
 800a14c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d101      	bne.n	800a158 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a154:	2301      	movs	r3, #1
 800a156:	e11e      	b.n	800a396 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a158:	4b91      	ldr	r3, [pc, #580]	; (800a3a0 <HAL_RCC_ClockConfig+0x260>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f003 030f 	and.w	r3, r3, #15
 800a160:	683a      	ldr	r2, [r7, #0]
 800a162:	429a      	cmp	r2, r3
 800a164:	d910      	bls.n	800a188 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a166:	4b8e      	ldr	r3, [pc, #568]	; (800a3a0 <HAL_RCC_ClockConfig+0x260>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f023 020f 	bic.w	r2, r3, #15
 800a16e:	498c      	ldr	r1, [pc, #560]	; (800a3a0 <HAL_RCC_ClockConfig+0x260>)
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	4313      	orrs	r3, r2
 800a174:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a176:	4b8a      	ldr	r3, [pc, #552]	; (800a3a0 <HAL_RCC_ClockConfig+0x260>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f003 030f 	and.w	r3, r3, #15
 800a17e:	683a      	ldr	r2, [r7, #0]
 800a180:	429a      	cmp	r2, r3
 800a182:	d001      	beq.n	800a188 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a184:	2301      	movs	r3, #1
 800a186:	e106      	b.n	800a396 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f003 0301 	and.w	r3, r3, #1
 800a190:	2b00      	cmp	r3, #0
 800a192:	d073      	beq.n	800a27c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	2b03      	cmp	r3, #3
 800a19a:	d129      	bne.n	800a1f0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a19c:	4b81      	ldr	r3, [pc, #516]	; (800a3a4 <HAL_RCC_ClockConfig+0x264>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d101      	bne.n	800a1ac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	e0f4      	b.n	800a396 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800a1ac:	f000 f9e2 	bl	800a574 <RCC_GetSysClockFreqFromPLLSource>
 800a1b0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	4a7c      	ldr	r2, [pc, #496]	; (800a3a8 <HAL_RCC_ClockConfig+0x268>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d93f      	bls.n	800a23a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800a1ba:	4b7a      	ldr	r3, [pc, #488]	; (800a3a4 <HAL_RCC_ClockConfig+0x264>)
 800a1bc:	689b      	ldr	r3, [r3, #8]
 800a1be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d009      	beq.n	800a1da <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d033      	beq.n	800a23a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d12f      	bne.n	800a23a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a1da:	4b72      	ldr	r3, [pc, #456]	; (800a3a4 <HAL_RCC_ClockConfig+0x264>)
 800a1dc:	689b      	ldr	r3, [r3, #8]
 800a1de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a1e2:	4a70      	ldr	r2, [pc, #448]	; (800a3a4 <HAL_RCC_ClockConfig+0x264>)
 800a1e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1e8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800a1ea:	2380      	movs	r3, #128	; 0x80
 800a1ec:	617b      	str	r3, [r7, #20]
 800a1ee:	e024      	b.n	800a23a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	685b      	ldr	r3, [r3, #4]
 800a1f4:	2b02      	cmp	r3, #2
 800a1f6:	d107      	bne.n	800a208 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a1f8:	4b6a      	ldr	r3, [pc, #424]	; (800a3a4 <HAL_RCC_ClockConfig+0x264>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a200:	2b00      	cmp	r3, #0
 800a202:	d109      	bne.n	800a218 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800a204:	2301      	movs	r3, #1
 800a206:	e0c6      	b.n	800a396 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a208:	4b66      	ldr	r3, [pc, #408]	; (800a3a4 <HAL_RCC_ClockConfig+0x264>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a210:	2b00      	cmp	r3, #0
 800a212:	d101      	bne.n	800a218 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800a214:	2301      	movs	r3, #1
 800a216:	e0be      	b.n	800a396 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800a218:	f000 f914 	bl	800a444 <HAL_RCC_GetSysClockFreq>
 800a21c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	4a61      	ldr	r2, [pc, #388]	; (800a3a8 <HAL_RCC_ClockConfig+0x268>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d909      	bls.n	800a23a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a226:	4b5f      	ldr	r3, [pc, #380]	; (800a3a4 <HAL_RCC_ClockConfig+0x264>)
 800a228:	689b      	ldr	r3, [r3, #8]
 800a22a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a22e:	4a5d      	ldr	r2, [pc, #372]	; (800a3a4 <HAL_RCC_ClockConfig+0x264>)
 800a230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a234:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800a236:	2380      	movs	r3, #128	; 0x80
 800a238:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a23a:	4b5a      	ldr	r3, [pc, #360]	; (800a3a4 <HAL_RCC_ClockConfig+0x264>)
 800a23c:	689b      	ldr	r3, [r3, #8]
 800a23e:	f023 0203 	bic.w	r2, r3, #3
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	685b      	ldr	r3, [r3, #4]
 800a246:	4957      	ldr	r1, [pc, #348]	; (800a3a4 <HAL_RCC_ClockConfig+0x264>)
 800a248:	4313      	orrs	r3, r2
 800a24a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a24c:	f7fb fd8e 	bl	8005d6c <HAL_GetTick>
 800a250:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a252:	e00a      	b.n	800a26a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a254:	f7fb fd8a 	bl	8005d6c <HAL_GetTick>
 800a258:	4602      	mov	r2, r0
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	1ad3      	subs	r3, r2, r3
 800a25e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a262:	4293      	cmp	r3, r2
 800a264:	d901      	bls.n	800a26a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800a266:	2303      	movs	r3, #3
 800a268:	e095      	b.n	800a396 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a26a:	4b4e      	ldr	r3, [pc, #312]	; (800a3a4 <HAL_RCC_ClockConfig+0x264>)
 800a26c:	689b      	ldr	r3, [r3, #8]
 800a26e:	f003 020c 	and.w	r2, r3, #12
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	009b      	lsls	r3, r3, #2
 800a278:	429a      	cmp	r2, r3
 800a27a:	d1eb      	bne.n	800a254 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f003 0302 	and.w	r3, r3, #2
 800a284:	2b00      	cmp	r3, #0
 800a286:	d023      	beq.n	800a2d0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f003 0304 	and.w	r3, r3, #4
 800a290:	2b00      	cmp	r3, #0
 800a292:	d005      	beq.n	800a2a0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a294:	4b43      	ldr	r3, [pc, #268]	; (800a3a4 <HAL_RCC_ClockConfig+0x264>)
 800a296:	689b      	ldr	r3, [r3, #8]
 800a298:	4a42      	ldr	r2, [pc, #264]	; (800a3a4 <HAL_RCC_ClockConfig+0x264>)
 800a29a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a29e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f003 0308 	and.w	r3, r3, #8
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d007      	beq.n	800a2bc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800a2ac:	4b3d      	ldr	r3, [pc, #244]	; (800a3a4 <HAL_RCC_ClockConfig+0x264>)
 800a2ae:	689b      	ldr	r3, [r3, #8]
 800a2b0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a2b4:	4a3b      	ldr	r2, [pc, #236]	; (800a3a4 <HAL_RCC_ClockConfig+0x264>)
 800a2b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a2ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a2bc:	4b39      	ldr	r3, [pc, #228]	; (800a3a4 <HAL_RCC_ClockConfig+0x264>)
 800a2be:	689b      	ldr	r3, [r3, #8]
 800a2c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	689b      	ldr	r3, [r3, #8]
 800a2c8:	4936      	ldr	r1, [pc, #216]	; (800a3a4 <HAL_RCC_ClockConfig+0x264>)
 800a2ca:	4313      	orrs	r3, r2
 800a2cc:	608b      	str	r3, [r1, #8]
 800a2ce:	e008      	b.n	800a2e2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	2b80      	cmp	r3, #128	; 0x80
 800a2d4:	d105      	bne.n	800a2e2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800a2d6:	4b33      	ldr	r3, [pc, #204]	; (800a3a4 <HAL_RCC_ClockConfig+0x264>)
 800a2d8:	689b      	ldr	r3, [r3, #8]
 800a2da:	4a32      	ldr	r2, [pc, #200]	; (800a3a4 <HAL_RCC_ClockConfig+0x264>)
 800a2dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a2e0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a2e2:	4b2f      	ldr	r3, [pc, #188]	; (800a3a0 <HAL_RCC_ClockConfig+0x260>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f003 030f 	and.w	r3, r3, #15
 800a2ea:	683a      	ldr	r2, [r7, #0]
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	d21d      	bcs.n	800a32c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a2f0:	4b2b      	ldr	r3, [pc, #172]	; (800a3a0 <HAL_RCC_ClockConfig+0x260>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	f023 020f 	bic.w	r2, r3, #15
 800a2f8:	4929      	ldr	r1, [pc, #164]	; (800a3a0 <HAL_RCC_ClockConfig+0x260>)
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	4313      	orrs	r3, r2
 800a2fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a300:	f7fb fd34 	bl	8005d6c <HAL_GetTick>
 800a304:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a306:	e00a      	b.n	800a31e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a308:	f7fb fd30 	bl	8005d6c <HAL_GetTick>
 800a30c:	4602      	mov	r2, r0
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	1ad3      	subs	r3, r2, r3
 800a312:	f241 3288 	movw	r2, #5000	; 0x1388
 800a316:	4293      	cmp	r3, r2
 800a318:	d901      	bls.n	800a31e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800a31a:	2303      	movs	r3, #3
 800a31c:	e03b      	b.n	800a396 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a31e:	4b20      	ldr	r3, [pc, #128]	; (800a3a0 <HAL_RCC_ClockConfig+0x260>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f003 030f 	and.w	r3, r3, #15
 800a326:	683a      	ldr	r2, [r7, #0]
 800a328:	429a      	cmp	r2, r3
 800a32a:	d1ed      	bne.n	800a308 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f003 0304 	and.w	r3, r3, #4
 800a334:	2b00      	cmp	r3, #0
 800a336:	d008      	beq.n	800a34a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a338:	4b1a      	ldr	r3, [pc, #104]	; (800a3a4 <HAL_RCC_ClockConfig+0x264>)
 800a33a:	689b      	ldr	r3, [r3, #8]
 800a33c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	68db      	ldr	r3, [r3, #12]
 800a344:	4917      	ldr	r1, [pc, #92]	; (800a3a4 <HAL_RCC_ClockConfig+0x264>)
 800a346:	4313      	orrs	r3, r2
 800a348:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f003 0308 	and.w	r3, r3, #8
 800a352:	2b00      	cmp	r3, #0
 800a354:	d009      	beq.n	800a36a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a356:	4b13      	ldr	r3, [pc, #76]	; (800a3a4 <HAL_RCC_ClockConfig+0x264>)
 800a358:	689b      	ldr	r3, [r3, #8]
 800a35a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	691b      	ldr	r3, [r3, #16]
 800a362:	00db      	lsls	r3, r3, #3
 800a364:	490f      	ldr	r1, [pc, #60]	; (800a3a4 <HAL_RCC_ClockConfig+0x264>)
 800a366:	4313      	orrs	r3, r2
 800a368:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a36a:	f000 f86b 	bl	800a444 <HAL_RCC_GetSysClockFreq>
 800a36e:	4602      	mov	r2, r0
 800a370:	4b0c      	ldr	r3, [pc, #48]	; (800a3a4 <HAL_RCC_ClockConfig+0x264>)
 800a372:	689b      	ldr	r3, [r3, #8]
 800a374:	091b      	lsrs	r3, r3, #4
 800a376:	f003 030f 	and.w	r3, r3, #15
 800a37a:	490c      	ldr	r1, [pc, #48]	; (800a3ac <HAL_RCC_ClockConfig+0x26c>)
 800a37c:	5ccb      	ldrb	r3, [r1, r3]
 800a37e:	f003 031f 	and.w	r3, r3, #31
 800a382:	fa22 f303 	lsr.w	r3, r2, r3
 800a386:	4a0a      	ldr	r2, [pc, #40]	; (800a3b0 <HAL_RCC_ClockConfig+0x270>)
 800a388:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800a38a:	4b0a      	ldr	r3, [pc, #40]	; (800a3b4 <HAL_RCC_ClockConfig+0x274>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	4618      	mov	r0, r3
 800a390:	f7fb fca0 	bl	8005cd4 <HAL_InitTick>
 800a394:	4603      	mov	r3, r0
}
 800a396:	4618      	mov	r0, r3
 800a398:	3718      	adds	r7, #24
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}
 800a39e:	bf00      	nop
 800a3a0:	40022000 	.word	0x40022000
 800a3a4:	40021000 	.word	0x40021000
 800a3a8:	04c4b400 	.word	0x04c4b400
 800a3ac:	0801258c 	.word	0x0801258c
 800a3b0:	20000538 	.word	0x20000538
 800a3b4:	2000053c 	.word	0x2000053c

0800a3b8 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b08c      	sub	sp, #48	; 0x30
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	60f8      	str	r0, [r7, #12]
 800a3c0:	60b9      	str	r1, [r7, #8]
 800a3c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 800a3c4:	2302      	movs	r3, #2
 800a3c6:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800a3c8:	2303      	movs	r3, #3
 800a3ca:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a3d6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	0c1b      	lsrs	r3, r3, #16
 800a3dc:	f003 030f 	and.w	r3, r3, #15
 800a3e0:	f503 1390 	add.w	r3, r3, #1179648	; 0x120000
 800a3e4:	029b      	lsls	r3, r3, #10
 800a3e6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	0c1b      	lsrs	r3, r3, #16
 800a3ec:	f003 030f 	and.w	r3, r3, #15
 800a3f0:	627b      	str	r3, [r7, #36]	; 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 800a3f2:	4b13      	ldr	r3, [pc, #76]	; (800a440 <HAL_RCC_MCOConfig+0x88>)
 800a3f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a3f6:	2101      	movs	r1, #1
 800a3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3fa:	fa01 f303 	lsl.w	r3, r1, r3
 800a3fe:	4910      	ldr	r1, [pc, #64]	; (800a440 <HAL_RCC_MCOConfig+0x88>)
 800a400:	4313      	orrs	r3, r2
 800a402:	64cb      	str	r3, [r1, #76]	; 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	b29b      	uxth	r3, r3
 800a408:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	0d1b      	lsrs	r3, r3, #20
 800a40e:	b2db      	uxtb	r3, r3
 800a410:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 800a412:	f107 0310 	add.w	r3, r7, #16
 800a416:	4619      	mov	r1, r3
 800a418:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a41a:	f7ff f92b 	bl	8009674 <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 800a41e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a420:	2b00      	cmp	r3, #0
 800a422:	d109      	bne.n	800a438 <HAL_RCC_MCOConfig+0x80>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 800a424:	4b06      	ldr	r3, [pc, #24]	; (800a440 <HAL_RCC_MCOConfig+0x88>)
 800a426:	689b      	ldr	r3, [r3, #8]
 800a428:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a42c:	68b9      	ldr	r1, [r7, #8]
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	430b      	orrs	r3, r1
 800a432:	4903      	ldr	r1, [pc, #12]	; (800a440 <HAL_RCC_MCOConfig+0x88>)
 800a434:	4313      	orrs	r3, r2
 800a436:	608b      	str	r3, [r1, #8]
  }
}
 800a438:	bf00      	nop
 800a43a:	3730      	adds	r7, #48	; 0x30
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}
 800a440:	40021000 	.word	0x40021000

0800a444 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a444:	b480      	push	{r7}
 800a446:	b087      	sub	sp, #28
 800a448:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800a44a:	4b2c      	ldr	r3, [pc, #176]	; (800a4fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800a44c:	689b      	ldr	r3, [r3, #8]
 800a44e:	f003 030c 	and.w	r3, r3, #12
 800a452:	2b04      	cmp	r3, #4
 800a454:	d102      	bne.n	800a45c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a456:	4b2a      	ldr	r3, [pc, #168]	; (800a500 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a458:	613b      	str	r3, [r7, #16]
 800a45a:	e047      	b.n	800a4ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800a45c:	4b27      	ldr	r3, [pc, #156]	; (800a4fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800a45e:	689b      	ldr	r3, [r3, #8]
 800a460:	f003 030c 	and.w	r3, r3, #12
 800a464:	2b08      	cmp	r3, #8
 800a466:	d102      	bne.n	800a46e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a468:	4b25      	ldr	r3, [pc, #148]	; (800a500 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a46a:	613b      	str	r3, [r7, #16]
 800a46c:	e03e      	b.n	800a4ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800a46e:	4b23      	ldr	r3, [pc, #140]	; (800a4fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800a470:	689b      	ldr	r3, [r3, #8]
 800a472:	f003 030c 	and.w	r3, r3, #12
 800a476:	2b0c      	cmp	r3, #12
 800a478:	d136      	bne.n	800a4e8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a47a:	4b20      	ldr	r3, [pc, #128]	; (800a4fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800a47c:	68db      	ldr	r3, [r3, #12]
 800a47e:	f003 0303 	and.w	r3, r3, #3
 800a482:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a484:	4b1d      	ldr	r3, [pc, #116]	; (800a4fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800a486:	68db      	ldr	r3, [r3, #12]
 800a488:	091b      	lsrs	r3, r3, #4
 800a48a:	f003 030f 	and.w	r3, r3, #15
 800a48e:	3301      	adds	r3, #1
 800a490:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2b03      	cmp	r3, #3
 800a496:	d10c      	bne.n	800a4b2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a498:	4a19      	ldr	r2, [pc, #100]	; (800a500 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4a0:	4a16      	ldr	r2, [pc, #88]	; (800a4fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800a4a2:	68d2      	ldr	r2, [r2, #12]
 800a4a4:	0a12      	lsrs	r2, r2, #8
 800a4a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a4aa:	fb02 f303 	mul.w	r3, r2, r3
 800a4ae:	617b      	str	r3, [r7, #20]
      break;
 800a4b0:	e00c      	b.n	800a4cc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a4b2:	4a13      	ldr	r2, [pc, #76]	; (800a500 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4ba:	4a10      	ldr	r2, [pc, #64]	; (800a4fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800a4bc:	68d2      	ldr	r2, [r2, #12]
 800a4be:	0a12      	lsrs	r2, r2, #8
 800a4c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a4c4:	fb02 f303 	mul.w	r3, r2, r3
 800a4c8:	617b      	str	r3, [r7, #20]
      break;
 800a4ca:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a4cc:	4b0b      	ldr	r3, [pc, #44]	; (800a4fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800a4ce:	68db      	ldr	r3, [r3, #12]
 800a4d0:	0e5b      	lsrs	r3, r3, #25
 800a4d2:	f003 0303 	and.w	r3, r3, #3
 800a4d6:	3301      	adds	r3, #1
 800a4d8:	005b      	lsls	r3, r3, #1
 800a4da:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800a4dc:	697a      	ldr	r2, [r7, #20]
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4e4:	613b      	str	r3, [r7, #16]
 800a4e6:	e001      	b.n	800a4ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800a4ec:	693b      	ldr	r3, [r7, #16]
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	371c      	adds	r7, #28
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f8:	4770      	bx	lr
 800a4fa:	bf00      	nop
 800a4fc:	40021000 	.word	0x40021000
 800a500:	00f42400 	.word	0x00f42400

0800a504 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a504:	b480      	push	{r7}
 800a506:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a508:	4b03      	ldr	r3, [pc, #12]	; (800a518 <HAL_RCC_GetHCLKFreq+0x14>)
 800a50a:	681b      	ldr	r3, [r3, #0]
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	46bd      	mov	sp, r7
 800a510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a514:	4770      	bx	lr
 800a516:	bf00      	nop
 800a518:	20000538 	.word	0x20000538

0800a51c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800a520:	f7ff fff0 	bl	800a504 <HAL_RCC_GetHCLKFreq>
 800a524:	4602      	mov	r2, r0
 800a526:	4b06      	ldr	r3, [pc, #24]	; (800a540 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a528:	689b      	ldr	r3, [r3, #8]
 800a52a:	0a1b      	lsrs	r3, r3, #8
 800a52c:	f003 0307 	and.w	r3, r3, #7
 800a530:	4904      	ldr	r1, [pc, #16]	; (800a544 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a532:	5ccb      	ldrb	r3, [r1, r3]
 800a534:	f003 031f 	and.w	r3, r3, #31
 800a538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	bd80      	pop	{r7, pc}
 800a540:	40021000 	.word	0x40021000
 800a544:	0801259c 	.word	0x0801259c

0800a548 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a54c:	f7ff ffda 	bl	800a504 <HAL_RCC_GetHCLKFreq>
 800a550:	4602      	mov	r2, r0
 800a552:	4b06      	ldr	r3, [pc, #24]	; (800a56c <HAL_RCC_GetPCLK2Freq+0x24>)
 800a554:	689b      	ldr	r3, [r3, #8]
 800a556:	0adb      	lsrs	r3, r3, #11
 800a558:	f003 0307 	and.w	r3, r3, #7
 800a55c:	4904      	ldr	r1, [pc, #16]	; (800a570 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a55e:	5ccb      	ldrb	r3, [r1, r3]
 800a560:	f003 031f 	and.w	r3, r3, #31
 800a564:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a568:	4618      	mov	r0, r3
 800a56a:	bd80      	pop	{r7, pc}
 800a56c:	40021000 	.word	0x40021000
 800a570:	0801259c 	.word	0x0801259c

0800a574 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800a574:	b480      	push	{r7}
 800a576:	b087      	sub	sp, #28
 800a578:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a57a:	4b1e      	ldr	r3, [pc, #120]	; (800a5f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a57c:	68db      	ldr	r3, [r3, #12]
 800a57e:	f003 0303 	and.w	r3, r3, #3
 800a582:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a584:	4b1b      	ldr	r3, [pc, #108]	; (800a5f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a586:	68db      	ldr	r3, [r3, #12]
 800a588:	091b      	lsrs	r3, r3, #4
 800a58a:	f003 030f 	and.w	r3, r3, #15
 800a58e:	3301      	adds	r3, #1
 800a590:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	2b03      	cmp	r3, #3
 800a596:	d10c      	bne.n	800a5b2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a598:	4a17      	ldr	r2, [pc, #92]	; (800a5f8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5a0:	4a14      	ldr	r2, [pc, #80]	; (800a5f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a5a2:	68d2      	ldr	r2, [r2, #12]
 800a5a4:	0a12      	lsrs	r2, r2, #8
 800a5a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a5aa:	fb02 f303 	mul.w	r3, r2, r3
 800a5ae:	617b      	str	r3, [r7, #20]
    break;
 800a5b0:	e00c      	b.n	800a5cc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a5b2:	4a11      	ldr	r2, [pc, #68]	; (800a5f8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5ba:	4a0e      	ldr	r2, [pc, #56]	; (800a5f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a5bc:	68d2      	ldr	r2, [r2, #12]
 800a5be:	0a12      	lsrs	r2, r2, #8
 800a5c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a5c4:	fb02 f303 	mul.w	r3, r2, r3
 800a5c8:	617b      	str	r3, [r7, #20]
    break;
 800a5ca:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a5cc:	4b09      	ldr	r3, [pc, #36]	; (800a5f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a5ce:	68db      	ldr	r3, [r3, #12]
 800a5d0:	0e5b      	lsrs	r3, r3, #25
 800a5d2:	f003 0303 	and.w	r3, r3, #3
 800a5d6:	3301      	adds	r3, #1
 800a5d8:	005b      	lsls	r3, r3, #1
 800a5da:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800a5dc:	697a      	ldr	r2, [r7, #20]
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5e4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800a5e6:	687b      	ldr	r3, [r7, #4]
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	371c      	adds	r7, #28
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f2:	4770      	bx	lr
 800a5f4:	40021000 	.word	0x40021000
 800a5f8:	00f42400 	.word	0x00f42400

0800a5fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b086      	sub	sp, #24
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a604:	2300      	movs	r3, #0
 800a606:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a608:	2300      	movs	r3, #0
 800a60a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a614:	2b00      	cmp	r3, #0
 800a616:	f000 8098 	beq.w	800a74a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a61a:	2300      	movs	r3, #0
 800a61c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a61e:	4b43      	ldr	r3, [pc, #268]	; (800a72c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a626:	2b00      	cmp	r3, #0
 800a628:	d10d      	bne.n	800a646 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a62a:	4b40      	ldr	r3, [pc, #256]	; (800a72c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a62c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a62e:	4a3f      	ldr	r2, [pc, #252]	; (800a72c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a634:	6593      	str	r3, [r2, #88]	; 0x58
 800a636:	4b3d      	ldr	r3, [pc, #244]	; (800a72c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a63a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a63e:	60bb      	str	r3, [r7, #8]
 800a640:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a642:	2301      	movs	r3, #1
 800a644:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a646:	4b3a      	ldr	r3, [pc, #232]	; (800a730 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	4a39      	ldr	r2, [pc, #228]	; (800a730 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a64c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a650:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a652:	f7fb fb8b 	bl	8005d6c <HAL_GetTick>
 800a656:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a658:	e009      	b.n	800a66e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a65a:	f7fb fb87 	bl	8005d6c <HAL_GetTick>
 800a65e:	4602      	mov	r2, r0
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	1ad3      	subs	r3, r2, r3
 800a664:	2b02      	cmp	r3, #2
 800a666:	d902      	bls.n	800a66e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800a668:	2303      	movs	r3, #3
 800a66a:	74fb      	strb	r3, [r7, #19]
        break;
 800a66c:	e005      	b.n	800a67a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a66e:	4b30      	ldr	r3, [pc, #192]	; (800a730 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a676:	2b00      	cmp	r3, #0
 800a678:	d0ef      	beq.n	800a65a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800a67a:	7cfb      	ldrb	r3, [r7, #19]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d159      	bne.n	800a734 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a680:	4b2a      	ldr	r3, [pc, #168]	; (800a72c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a68a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a68c:	697b      	ldr	r3, [r7, #20]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d01e      	beq.n	800a6d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a696:	697a      	ldr	r2, [r7, #20]
 800a698:	429a      	cmp	r2, r3
 800a69a:	d019      	beq.n	800a6d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a69c:	4b23      	ldr	r3, [pc, #140]	; (800a72c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a69e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a6a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a6a8:	4b20      	ldr	r3, [pc, #128]	; (800a72c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a6aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6ae:	4a1f      	ldr	r2, [pc, #124]	; (800a72c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a6b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a6b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a6b8:	4b1c      	ldr	r3, [pc, #112]	; (800a72c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a6ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6be:	4a1b      	ldr	r2, [pc, #108]	; (800a72c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a6c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a6c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a6c8:	4a18      	ldr	r2, [pc, #96]	; (800a72c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a6d0:	697b      	ldr	r3, [r7, #20]
 800a6d2:	f003 0301 	and.w	r3, r3, #1
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d016      	beq.n	800a708 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6da:	f7fb fb47 	bl	8005d6c <HAL_GetTick>
 800a6de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a6e0:	e00b      	b.n	800a6fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a6e2:	f7fb fb43 	bl	8005d6c <HAL_GetTick>
 800a6e6:	4602      	mov	r2, r0
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	1ad3      	subs	r3, r2, r3
 800a6ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	d902      	bls.n	800a6fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800a6f4:	2303      	movs	r3, #3
 800a6f6:	74fb      	strb	r3, [r7, #19]
            break;
 800a6f8:	e006      	b.n	800a708 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a6fa:	4b0c      	ldr	r3, [pc, #48]	; (800a72c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a6fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a700:	f003 0302 	and.w	r3, r3, #2
 800a704:	2b00      	cmp	r3, #0
 800a706:	d0ec      	beq.n	800a6e2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800a708:	7cfb      	ldrb	r3, [r7, #19]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d10b      	bne.n	800a726 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a70e:	4b07      	ldr	r3, [pc, #28]	; (800a72c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a714:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a71c:	4903      	ldr	r1, [pc, #12]	; (800a72c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a71e:	4313      	orrs	r3, r2
 800a720:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800a724:	e008      	b.n	800a738 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a726:	7cfb      	ldrb	r3, [r7, #19]
 800a728:	74bb      	strb	r3, [r7, #18]
 800a72a:	e005      	b.n	800a738 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800a72c:	40021000 	.word	0x40021000
 800a730:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a734:	7cfb      	ldrb	r3, [r7, #19]
 800a736:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a738:	7c7b      	ldrb	r3, [r7, #17]
 800a73a:	2b01      	cmp	r3, #1
 800a73c:	d105      	bne.n	800a74a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a73e:	4ba6      	ldr	r3, [pc, #664]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a742:	4aa5      	ldr	r2, [pc, #660]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a744:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a748:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f003 0301 	and.w	r3, r3, #1
 800a752:	2b00      	cmp	r3, #0
 800a754:	d00a      	beq.n	800a76c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a756:	4ba0      	ldr	r3, [pc, #640]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a75c:	f023 0203 	bic.w	r2, r3, #3
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	685b      	ldr	r3, [r3, #4]
 800a764:	499c      	ldr	r1, [pc, #624]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a766:	4313      	orrs	r3, r2
 800a768:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f003 0302 	and.w	r3, r3, #2
 800a774:	2b00      	cmp	r3, #0
 800a776:	d00a      	beq.n	800a78e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a778:	4b97      	ldr	r3, [pc, #604]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a77a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a77e:	f023 020c 	bic.w	r2, r3, #12
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	689b      	ldr	r3, [r3, #8]
 800a786:	4994      	ldr	r1, [pc, #592]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a788:	4313      	orrs	r3, r2
 800a78a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f003 0304 	and.w	r3, r3, #4
 800a796:	2b00      	cmp	r3, #0
 800a798:	d00a      	beq.n	800a7b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a79a:	4b8f      	ldr	r3, [pc, #572]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a79c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	68db      	ldr	r3, [r3, #12]
 800a7a8:	498b      	ldr	r1, [pc, #556]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a7aa:	4313      	orrs	r3, r2
 800a7ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f003 0308 	and.w	r3, r3, #8
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d00a      	beq.n	800a7d2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a7bc:	4b86      	ldr	r3, [pc, #536]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a7be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	691b      	ldr	r3, [r3, #16]
 800a7ca:	4983      	ldr	r1, [pc, #524]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a7cc:	4313      	orrs	r3, r2
 800a7ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f003 0320 	and.w	r3, r3, #32
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d00a      	beq.n	800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a7de:	4b7e      	ldr	r3, [pc, #504]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a7e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7e4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	695b      	ldr	r3, [r3, #20]
 800a7ec:	497a      	ldr	r1, [pc, #488]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a7ee:	4313      	orrs	r3, r2
 800a7f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d00a      	beq.n	800a816 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a800:	4b75      	ldr	r3, [pc, #468]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a806:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	699b      	ldr	r3, [r3, #24]
 800a80e:	4972      	ldr	r1, [pc, #456]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a810:	4313      	orrs	r3, r2
 800a812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d00a      	beq.n	800a838 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a822:	4b6d      	ldr	r3, [pc, #436]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a828:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	69db      	ldr	r3, [r3, #28]
 800a830:	4969      	ldr	r1, [pc, #420]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a832:	4313      	orrs	r3, r2
 800a834:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a840:	2b00      	cmp	r3, #0
 800a842:	d00a      	beq.n	800a85a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a844:	4b64      	ldr	r3, [pc, #400]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a84a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6a1b      	ldr	r3, [r3, #32]
 800a852:	4961      	ldr	r1, [pc, #388]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a854:	4313      	orrs	r3, r2
 800a856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a862:	2b00      	cmp	r3, #0
 800a864:	d00a      	beq.n	800a87c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a866:	4b5c      	ldr	r3, [pc, #368]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a86c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a874:	4958      	ldr	r1, [pc, #352]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a876:	4313      	orrs	r3, r2
 800a878:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a884:	2b00      	cmp	r3, #0
 800a886:	d015      	beq.n	800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a888:	4b53      	ldr	r3, [pc, #332]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a88a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a88e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a896:	4950      	ldr	r1, [pc, #320]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a898:	4313      	orrs	r3, r2
 800a89a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a8a6:	d105      	bne.n	800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a8a8:	4b4b      	ldr	r3, [pc, #300]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a8aa:	68db      	ldr	r3, [r3, #12]
 800a8ac:	4a4a      	ldr	r2, [pc, #296]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a8ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a8b2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d015      	beq.n	800a8ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a8c0:	4b45      	ldr	r3, [pc, #276]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a8c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ce:	4942      	ldr	r1, [pc, #264]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a8d0:	4313      	orrs	r3, r2
 800a8d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a8de:	d105      	bne.n	800a8ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a8e0:	4b3d      	ldr	r3, [pc, #244]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a8e2:	68db      	ldr	r3, [r3, #12]
 800a8e4:	4a3c      	ldr	r2, [pc, #240]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a8e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a8ea:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d015      	beq.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a8f8:	4b37      	ldr	r3, [pc, #220]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a8fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8fe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a906:	4934      	ldr	r1, [pc, #208]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a908:	4313      	orrs	r3, r2
 800a90a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a912:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a916:	d105      	bne.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a918:	4b2f      	ldr	r3, [pc, #188]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a91a:	68db      	ldr	r3, [r3, #12]
 800a91c:	4a2e      	ldr	r2, [pc, #184]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a91e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a922:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d015      	beq.n	800a95c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a930:	4b29      	ldr	r3, [pc, #164]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a936:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a93e:	4926      	ldr	r1, [pc, #152]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a940:	4313      	orrs	r3, r2
 800a942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a94a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a94e:	d105      	bne.n	800a95c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a950:	4b21      	ldr	r3, [pc, #132]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a952:	68db      	ldr	r3, [r3, #12]
 800a954:	4a20      	ldr	r2, [pc, #128]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a956:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a95a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a964:	2b00      	cmp	r3, #0
 800a966:	d015      	beq.n	800a994 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a968:	4b1b      	ldr	r3, [pc, #108]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a96a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a96e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a976:	4918      	ldr	r1, [pc, #96]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a978:	4313      	orrs	r3, r2
 800a97a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a982:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a986:	d105      	bne.n	800a994 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a988:	4b13      	ldr	r3, [pc, #76]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a98a:	68db      	ldr	r3, [r3, #12]
 800a98c:	4a12      	ldr	r2, [pc, #72]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a98e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a992:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d015      	beq.n	800a9cc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800a9a0:	4b0d      	ldr	r3, [pc, #52]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a9a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9ae:	490a      	ldr	r1, [pc, #40]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a9b0:	4313      	orrs	r3, r2
 800a9b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a9be:	d105      	bne.n	800a9cc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a9c0:	4b05      	ldr	r3, [pc, #20]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a9c2:	68db      	ldr	r3, [r3, #12]
 800a9c4:	4a04      	ldr	r2, [pc, #16]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a9c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a9ca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800a9cc:	7cbb      	ldrb	r3, [r7, #18]
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	3718      	adds	r7, #24
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}
 800a9d6:	bf00      	nop
 800a9d8:	40021000 	.word	0x40021000

0800a9dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b084      	sub	sp, #16
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d101      	bne.n	800a9ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	e09d      	b.n	800ab2a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d108      	bne.n	800aa08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	685b      	ldr	r3, [r3, #4]
 800a9fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a9fe:	d009      	beq.n	800aa14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2200      	movs	r2, #0
 800aa04:	61da      	str	r2, [r3, #28]
 800aa06:	e005      	b.n	800aa14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2200      	movs	r2, #0
 800aa12:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2200      	movs	r2, #0
 800aa18:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800aa20:	b2db      	uxtb	r3, r3
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d106      	bne.n	800aa34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f7fa faf8 	bl	8005024 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2202      	movs	r2, #2
 800aa38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	681a      	ldr	r2, [r3, #0]
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa4a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	68db      	ldr	r3, [r3, #12]
 800aa50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800aa54:	d902      	bls.n	800aa5c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800aa56:	2300      	movs	r3, #0
 800aa58:	60fb      	str	r3, [r7, #12]
 800aa5a:	e002      	b.n	800aa62 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800aa5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa60:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	68db      	ldr	r3, [r3, #12]
 800aa66:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800aa6a:	d007      	beq.n	800aa7c <HAL_SPI_Init+0xa0>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	68db      	ldr	r3, [r3, #12]
 800aa70:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800aa74:	d002      	beq.n	800aa7c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2200      	movs	r2, #0
 800aa7a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	685b      	ldr	r3, [r3, #4]
 800aa80:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	689b      	ldr	r3, [r3, #8]
 800aa88:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800aa8c:	431a      	orrs	r2, r3
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	691b      	ldr	r3, [r3, #16]
 800aa92:	f003 0302 	and.w	r3, r3, #2
 800aa96:	431a      	orrs	r2, r3
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	695b      	ldr	r3, [r3, #20]
 800aa9c:	f003 0301 	and.w	r3, r3, #1
 800aaa0:	431a      	orrs	r2, r3
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	699b      	ldr	r3, [r3, #24]
 800aaa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aaaa:	431a      	orrs	r2, r3
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	69db      	ldr	r3, [r3, #28]
 800aab0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aab4:	431a      	orrs	r2, r3
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6a1b      	ldr	r3, [r3, #32]
 800aaba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aabe:	ea42 0103 	orr.w	r1, r2, r3
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aac6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	430a      	orrs	r2, r1
 800aad0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	699b      	ldr	r3, [r3, #24]
 800aad6:	0c1b      	lsrs	r3, r3, #16
 800aad8:	f003 0204 	and.w	r2, r3, #4
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aae0:	f003 0310 	and.w	r3, r3, #16
 800aae4:	431a      	orrs	r2, r3
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaea:	f003 0308 	and.w	r3, r3, #8
 800aaee:	431a      	orrs	r2, r3
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	68db      	ldr	r3, [r3, #12]
 800aaf4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800aaf8:	ea42 0103 	orr.w	r1, r2, r3
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	430a      	orrs	r2, r1
 800ab08:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	69da      	ldr	r2, [r3, #28]
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ab18:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2201      	movs	r2, #1
 800ab24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800ab28:	2300      	movs	r3, #0
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	3710      	adds	r7, #16
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}
	...

0800ab34 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b086      	sub	sp, #24
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	60f8      	str	r0, [r7, #12]
 800ab3c:	60b9      	str	r1, [r7, #8]
 800ab3e:	607a      	str	r2, [r7, #4]
 800ab40:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ab42:	2300      	movs	r3, #0
 800ab44:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ab4c:	2b01      	cmp	r3, #1
 800ab4e:	d101      	bne.n	800ab54 <HAL_SPI_TransmitReceive_DMA+0x20>
 800ab50:	2302      	movs	r3, #2
 800ab52:	e16c      	b.n	800ae2e <HAL_SPI_TransmitReceive_DMA+0x2fa>
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	2201      	movs	r2, #1
 800ab58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ab62:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	685b      	ldr	r3, [r3, #4]
 800ab68:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800ab6a:	7dbb      	ldrb	r3, [r7, #22]
 800ab6c:	2b01      	cmp	r3, #1
 800ab6e:	d00d      	beq.n	800ab8c <HAL_SPI_TransmitReceive_DMA+0x58>
 800ab70:	693b      	ldr	r3, [r7, #16]
 800ab72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ab76:	d106      	bne.n	800ab86 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	689b      	ldr	r3, [r3, #8]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d102      	bne.n	800ab86 <HAL_SPI_TransmitReceive_DMA+0x52>
 800ab80:	7dbb      	ldrb	r3, [r7, #22]
 800ab82:	2b04      	cmp	r3, #4
 800ab84:	d002      	beq.n	800ab8c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800ab86:	2302      	movs	r3, #2
 800ab88:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ab8a:	e14b      	b.n	800ae24 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d005      	beq.n	800ab9e <HAL_SPI_TransmitReceive_DMA+0x6a>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d002      	beq.n	800ab9e <HAL_SPI_TransmitReceive_DMA+0x6a>
 800ab98:	887b      	ldrh	r3, [r7, #2]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d102      	bne.n	800aba4 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800ab9e:	2301      	movs	r3, #1
 800aba0:	75fb      	strb	r3, [r7, #23]
    goto error;
 800aba2:	e13f      	b.n	800ae24 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800abaa:	b2db      	uxtb	r3, r3
 800abac:	2b04      	cmp	r3, #4
 800abae:	d003      	beq.n	800abb8 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	2205      	movs	r2, #5
 800abb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	2200      	movs	r2, #0
 800abbc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	68ba      	ldr	r2, [r7, #8]
 800abc2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	887a      	ldrh	r2, [r7, #2]
 800abc8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	887a      	ldrh	r2, [r7, #2]
 800abce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	687a      	ldr	r2, [r7, #4]
 800abd4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	887a      	ldrh	r2, [r7, #2]
 800abda:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	887a      	ldrh	r2, [r7, #2]
 800abe2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	2200      	movs	r2, #0
 800abea:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	2200      	movs	r2, #0
 800abf0:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	685a      	ldr	r2, [r3, #4]
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800ac00:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	68db      	ldr	r3, [r3, #12]
 800ac06:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ac0a:	d908      	bls.n	800ac1e <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	685a      	ldr	r2, [r3, #4]
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ac1a:	605a      	str	r2, [r3, #4]
 800ac1c:	e06f      	b.n	800acfe <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	685a      	ldr	r2, [r3, #4]
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ac2c:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac32:	699b      	ldr	r3, [r3, #24]
 800ac34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac38:	d126      	bne.n	800ac88 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800ac3e:	f003 0301 	and.w	r3, r3, #1
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d10f      	bne.n	800ac66 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	685a      	ldr	r2, [r3, #4]
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ac54:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac5a:	b29b      	uxth	r3, r3
 800ac5c:	085b      	lsrs	r3, r3, #1
 800ac5e:	b29a      	uxth	r2, r3
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ac64:	e010      	b.n	800ac88 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	685a      	ldr	r2, [r3, #4]
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ac74:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac7a:	b29b      	uxth	r3, r3
 800ac7c:	085b      	lsrs	r3, r3, #1
 800ac7e:	b29b      	uxth	r3, r3
 800ac80:	3301      	adds	r3, #1
 800ac82:	b29a      	uxth	r2, r3
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac8c:	699b      	ldr	r3, [r3, #24]
 800ac8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac92:	d134      	bne.n	800acfe <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	685a      	ldr	r2, [r3, #4]
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800aca2:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800acaa:	b29b      	uxth	r3, r3
 800acac:	f003 0301 	and.w	r3, r3, #1
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d111      	bne.n	800acd8 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	685a      	ldr	r2, [r3, #4]
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800acc2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800acca:	b29b      	uxth	r3, r3
 800accc:	085b      	lsrs	r3, r3, #1
 800acce:	b29a      	uxth	r2, r3
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800acd6:	e012      	b.n	800acfe <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	685a      	ldr	r2, [r3, #4]
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ace6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800acee:	b29b      	uxth	r3, r3
 800acf0:	085b      	lsrs	r3, r3, #1
 800acf2:	b29b      	uxth	r3, r3
 800acf4:	3301      	adds	r3, #1
 800acf6:	b29a      	uxth	r2, r3
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ad04:	b2db      	uxtb	r3, r3
 800ad06:	2b04      	cmp	r3, #4
 800ad08:	d108      	bne.n	800ad1c <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad0e:	4a4a      	ldr	r2, [pc, #296]	; (800ae38 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800ad10:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad16:	4a49      	ldr	r2, [pc, #292]	; (800ae3c <HAL_SPI_TransmitReceive_DMA+0x308>)
 800ad18:	62da      	str	r2, [r3, #44]	; 0x2c
 800ad1a:	e007      	b.n	800ad2c <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad20:	4a47      	ldr	r2, [pc, #284]	; (800ae40 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800ad22:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad28:	4a46      	ldr	r2, [pc, #280]	; (800ae44 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800ad2a:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad30:	4a45      	ldr	r2, [pc, #276]	; (800ae48 <HAL_SPI_TransmitReceive_DMA+0x314>)
 800ad32:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad38:	2200      	movs	r2, #0
 800ad3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	330c      	adds	r3, #12
 800ad46:	4619      	mov	r1, r3
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad4c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ad54:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800ad56:	f7fd f8f7 	bl	8007f48 <HAL_DMA_Start_IT>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d00c      	beq.n	800ad7a <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad64:	f043 0210 	orr.w	r2, r3, #16
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	2201      	movs	r2, #1
 800ad74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800ad78:	e054      	b.n	800ae24 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	685a      	ldr	r2, [r3, #4]
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f042 0201 	orr.w	r2, r2, #1
 800ad88:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad8e:	2200      	movs	r2, #0
 800ad90:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad96:	2200      	movs	r2, #0
 800ad98:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad9e:	2200      	movs	r2, #0
 800ada0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ada6:	2200      	movs	r2, #0
 800ada8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adb2:	4619      	mov	r1, r3
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	330c      	adds	r3, #12
 800adba:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800adc0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800adc2:	f7fd f8c1 	bl	8007f48 <HAL_DMA_Start_IT>
 800adc6:	4603      	mov	r3, r0
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d00c      	beq.n	800ade6 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800add0:	f043 0210 	orr.w	r2, r3, #16
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800add8:	2301      	movs	r3, #1
 800adda:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	2201      	movs	r2, #1
 800ade0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800ade4:	e01e      	b.n	800ae24 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adf0:	2b40      	cmp	r3, #64	; 0x40
 800adf2:	d007      	beq.n	800ae04 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	681a      	ldr	r2, [r3, #0]
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ae02:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	685a      	ldr	r2, [r3, #4]
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	f042 0220 	orr.w	r2, r2, #32
 800ae12:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	685a      	ldr	r2, [r3, #4]
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f042 0202 	orr.w	r2, r2, #2
 800ae22:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	2200      	movs	r2, #0
 800ae28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800ae2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3718      	adds	r7, #24
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}
 800ae36:	bf00      	nop
 800ae38:	0800b1bd 	.word	0x0800b1bd
 800ae3c:	0800b085 	.word	0x0800b085
 800ae40:	0800b1d9 	.word	0x0800b1d9
 800ae44:	0800b12d 	.word	0x0800b12d
 800ae48:	0800b1f5 	.word	0x0800b1f5

0800ae4c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b088      	sub	sp, #32
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	685b      	ldr	r3, [r3, #4]
 800ae5a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	689b      	ldr	r3, [r3, #8]
 800ae62:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ae64:	69bb      	ldr	r3, [r7, #24]
 800ae66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d10e      	bne.n	800ae8c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ae6e:	69bb      	ldr	r3, [r7, #24]
 800ae70:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d009      	beq.n	800ae8c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ae78:	69fb      	ldr	r3, [r7, #28]
 800ae7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d004      	beq.n	800ae8c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	4798      	blx	r3
    return;
 800ae8a:	e0ce      	b.n	800b02a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800ae8c:	69bb      	ldr	r3, [r7, #24]
 800ae8e:	f003 0302 	and.w	r3, r3, #2
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d009      	beq.n	800aeaa <HAL_SPI_IRQHandler+0x5e>
 800ae96:	69fb      	ldr	r3, [r7, #28]
 800ae98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d004      	beq.n	800aeaa <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	4798      	blx	r3
    return;
 800aea8:	e0bf      	b.n	800b02a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800aeaa:	69bb      	ldr	r3, [r7, #24]
 800aeac:	f003 0320 	and.w	r3, r3, #32
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d10a      	bne.n	800aeca <HAL_SPI_IRQHandler+0x7e>
 800aeb4:	69bb      	ldr	r3, [r7, #24]
 800aeb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d105      	bne.n	800aeca <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800aebe:	69bb      	ldr	r3, [r7, #24]
 800aec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	f000 80b0 	beq.w	800b02a <HAL_SPI_IRQHandler+0x1de>
 800aeca:	69fb      	ldr	r3, [r7, #28]
 800aecc:	f003 0320 	and.w	r3, r3, #32
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	f000 80aa 	beq.w	800b02a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800aed6:	69bb      	ldr	r3, [r7, #24]
 800aed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d023      	beq.n	800af28 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800aee6:	b2db      	uxtb	r3, r3
 800aee8:	2b03      	cmp	r3, #3
 800aeea:	d011      	beq.n	800af10 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aef0:	f043 0204 	orr.w	r2, r3, #4
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aef8:	2300      	movs	r3, #0
 800aefa:	617b      	str	r3, [r7, #20]
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	68db      	ldr	r3, [r3, #12]
 800af02:	617b      	str	r3, [r7, #20]
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	689b      	ldr	r3, [r3, #8]
 800af0a:	617b      	str	r3, [r7, #20]
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	e00b      	b.n	800af28 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800af10:	2300      	movs	r3, #0
 800af12:	613b      	str	r3, [r7, #16]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	68db      	ldr	r3, [r3, #12]
 800af1a:	613b      	str	r3, [r7, #16]
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	689b      	ldr	r3, [r3, #8]
 800af22:	613b      	str	r3, [r7, #16]
 800af24:	693b      	ldr	r3, [r7, #16]
        return;
 800af26:	e080      	b.n	800b02a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800af28:	69bb      	ldr	r3, [r7, #24]
 800af2a:	f003 0320 	and.w	r3, r3, #32
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d014      	beq.n	800af5c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af36:	f043 0201 	orr.w	r2, r3, #1
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800af3e:	2300      	movs	r3, #0
 800af40:	60fb      	str	r3, [r7, #12]
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	689b      	ldr	r3, [r3, #8]
 800af48:	60fb      	str	r3, [r7, #12]
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	681a      	ldr	r2, [r3, #0]
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af58:	601a      	str	r2, [r3, #0]
 800af5a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800af5c:	69bb      	ldr	r3, [r7, #24]
 800af5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af62:	2b00      	cmp	r3, #0
 800af64:	d00c      	beq.n	800af80 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af6a:	f043 0208 	orr.w	r2, r3, #8
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800af72:	2300      	movs	r3, #0
 800af74:	60bb      	str	r3, [r7, #8]
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	689b      	ldr	r3, [r3, #8]
 800af7c:	60bb      	str	r3, [r7, #8]
 800af7e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af84:	2b00      	cmp	r3, #0
 800af86:	d04f      	beq.n	800b028 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	685a      	ldr	r2, [r3, #4]
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800af96:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2201      	movs	r2, #1
 800af9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800afa0:	69fb      	ldr	r3, [r7, #28]
 800afa2:	f003 0302 	and.w	r3, r3, #2
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d104      	bne.n	800afb4 <HAL_SPI_IRQHandler+0x168>
 800afaa:	69fb      	ldr	r3, [r7, #28]
 800afac:	f003 0301 	and.w	r3, r3, #1
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d034      	beq.n	800b01e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	685a      	ldr	r2, [r3, #4]
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f022 0203 	bic.w	r2, r2, #3
 800afc2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d011      	beq.n	800aff0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afd0:	4a17      	ldr	r2, [pc, #92]	; (800b030 <HAL_SPI_IRQHandler+0x1e4>)
 800afd2:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afd8:	4618      	mov	r0, r3
 800afda:	f7fd f889 	bl	80080f0 <HAL_DMA_Abort_IT>
 800afde:	4603      	mov	r3, r0
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d005      	beq.n	800aff0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800afe8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d016      	beq.n	800b026 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800affc:	4a0c      	ldr	r2, [pc, #48]	; (800b030 <HAL_SPI_IRQHandler+0x1e4>)
 800affe:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b004:	4618      	mov	r0, r3
 800b006:	f7fd f873 	bl	80080f0 <HAL_DMA_Abort_IT>
 800b00a:	4603      	mov	r3, r0
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d00a      	beq.n	800b026 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b014:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800b01c:	e003      	b.n	800b026 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f000 f826 	bl	800b070 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800b024:	e000      	b.n	800b028 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800b026:	bf00      	nop
    return;
 800b028:	bf00      	nop
  }
}
 800b02a:	3720      	adds	r7, #32
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}
 800b030:	0800b235 	.word	0x0800b235

0800b034 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b034:	b480      	push	{r7}
 800b036:	b083      	sub	sp, #12
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800b03c:	bf00      	nop
 800b03e:	370c      	adds	r7, #12
 800b040:	46bd      	mov	sp, r7
 800b042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b046:	4770      	bx	lr

0800b048 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b048:	b480      	push	{r7}
 800b04a:	b083      	sub	sp, #12
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800b050:	bf00      	nop
 800b052:	370c      	adds	r7, #12
 800b054:	46bd      	mov	sp, r7
 800b056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05a:	4770      	bx	lr

0800b05c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b05c:	b480      	push	{r7}
 800b05e:	b083      	sub	sp, #12
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800b064:	bf00      	nop
 800b066:	370c      	adds	r7, #12
 800b068:	46bd      	mov	sp, r7
 800b06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06e:	4770      	bx	lr

0800b070 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800b070:	b480      	push	{r7}
 800b072:	b083      	sub	sp, #12
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800b078:	bf00      	nop
 800b07a:	370c      	adds	r7, #12
 800b07c:	46bd      	mov	sp, r7
 800b07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b082:	4770      	bx	lr

0800b084 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b084      	sub	sp, #16
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b090:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b092:	f7fa fe6b 	bl	8005d6c <HAL_GetTick>
 800b096:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f003 0320 	and.w	r3, r3, #32
 800b0a2:	2b20      	cmp	r3, #32
 800b0a4:	d03c      	beq.n	800b120 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	685a      	ldr	r2, [r3, #4]
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	f022 0220 	bic.w	r2, r2, #32
 800b0b4:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	689b      	ldr	r3, [r3, #8]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d10d      	bne.n	800b0da <SPI_DMAReceiveCplt+0x56>
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	685b      	ldr	r3, [r3, #4]
 800b0c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b0c6:	d108      	bne.n	800b0da <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	685a      	ldr	r2, [r3, #4]
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f022 0203 	bic.w	r2, r2, #3
 800b0d6:	605a      	str	r2, [r3, #4]
 800b0d8:	e007      	b.n	800b0ea <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	685a      	ldr	r2, [r3, #4]
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f022 0201 	bic.w	r2, r2, #1
 800b0e8:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b0ea:	68ba      	ldr	r2, [r7, #8]
 800b0ec:	2164      	movs	r1, #100	; 0x64
 800b0ee:	68f8      	ldr	r0, [r7, #12]
 800b0f0:	f000 f9d4 	bl	800b49c <SPI_EndRxTransaction>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d002      	beq.n	800b100 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	2220      	movs	r2, #32
 800b0fe:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	2200      	movs	r2, #0
 800b104:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	2201      	movs	r2, #1
 800b10c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b114:	2b00      	cmp	r3, #0
 800b116:	d003      	beq.n	800b120 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800b118:	68f8      	ldr	r0, [r7, #12]
 800b11a:	f7ff ffa9 	bl	800b070 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800b11e:	e002      	b.n	800b126 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800b120:	68f8      	ldr	r0, [r7, #12]
 800b122:	f7ff ff87 	bl	800b034 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b126:	3710      	adds	r7, #16
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}

0800b12c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b084      	sub	sp, #16
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b138:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b13a:	f7fa fe17 	bl	8005d6c <HAL_GetTick>
 800b13e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	f003 0320 	and.w	r3, r3, #32
 800b14a:	2b20      	cmp	r3, #32
 800b14c:	d030      	beq.n	800b1b0 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	685a      	ldr	r2, [r3, #4]
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	f022 0220 	bic.w	r2, r2, #32
 800b15c:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b15e:	68ba      	ldr	r2, [r7, #8]
 800b160:	2164      	movs	r1, #100	; 0x64
 800b162:	68f8      	ldr	r0, [r7, #12]
 800b164:	f000 f9f2 	bl	800b54c <SPI_EndRxTxTransaction>
 800b168:	4603      	mov	r3, r0
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d005      	beq.n	800b17a <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b172:	f043 0220 	orr.w	r2, r3, #32
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	685a      	ldr	r2, [r3, #4]
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f022 0203 	bic.w	r2, r2, #3
 800b188:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	2200      	movs	r2, #0
 800b18e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	2200      	movs	r2, #0
 800b194:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	2201      	movs	r2, #1
 800b19c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d003      	beq.n	800b1b0 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800b1a8:	68f8      	ldr	r0, [r7, #12]
 800b1aa:	f7ff ff61 	bl	800b070 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800b1ae:	e002      	b.n	800b1b6 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800b1b0:	68f8      	ldr	r0, [r7, #12]
 800b1b2:	f7f7 ffdd 	bl	8003170 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b1b6:	3710      	adds	r7, #16
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}

0800b1bc <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b084      	sub	sp, #16
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1c8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800b1ca:	68f8      	ldr	r0, [r7, #12]
 800b1cc:	f7ff ff3c 	bl	800b048 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b1d0:	bf00      	nop
 800b1d2:	3710      	adds	r7, #16
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}

0800b1d8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b084      	sub	sp, #16
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1e4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800b1e6:	68f8      	ldr	r0, [r7, #12]
 800b1e8:	f7ff ff38 	bl	800b05c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b1ec:	bf00      	nop
 800b1ee:	3710      	adds	r7, #16
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}

0800b1f4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b084      	sub	sp, #16
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b200:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	685a      	ldr	r2, [r3, #4]
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	f022 0203 	bic.w	r2, r2, #3
 800b210:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b216:	f043 0210 	orr.w	r2, r3, #16
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	2201      	movs	r2, #1
 800b222:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b226:	68f8      	ldr	r0, [r7, #12]
 800b228:	f7ff ff22 	bl	800b070 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b22c:	bf00      	nop
 800b22e:	3710      	adds	r7, #16
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}

0800b234 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b084      	sub	sp, #16
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b240:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	2200      	movs	r2, #0
 800b246:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	2200      	movs	r2, #0
 800b24e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b250:	68f8      	ldr	r0, [r7, #12]
 800b252:	f7ff ff0d 	bl	800b070 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b256:	bf00      	nop
 800b258:	3710      	adds	r7, #16
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bd80      	pop	{r7, pc}
	...

0800b260 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b088      	sub	sp, #32
 800b264:	af00      	add	r7, sp, #0
 800b266:	60f8      	str	r0, [r7, #12]
 800b268:	60b9      	str	r1, [r7, #8]
 800b26a:	603b      	str	r3, [r7, #0]
 800b26c:	4613      	mov	r3, r2
 800b26e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b270:	f7fa fd7c 	bl	8005d6c <HAL_GetTick>
 800b274:	4602      	mov	r2, r0
 800b276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b278:	1a9b      	subs	r3, r3, r2
 800b27a:	683a      	ldr	r2, [r7, #0]
 800b27c:	4413      	add	r3, r2
 800b27e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b280:	f7fa fd74 	bl	8005d6c <HAL_GetTick>
 800b284:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b286:	4b39      	ldr	r3, [pc, #228]	; (800b36c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	015b      	lsls	r3, r3, #5
 800b28c:	0d1b      	lsrs	r3, r3, #20
 800b28e:	69fa      	ldr	r2, [r7, #28]
 800b290:	fb02 f303 	mul.w	r3, r2, r3
 800b294:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b296:	e054      	b.n	800b342 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b29e:	d050      	beq.n	800b342 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b2a0:	f7fa fd64 	bl	8005d6c <HAL_GetTick>
 800b2a4:	4602      	mov	r2, r0
 800b2a6:	69bb      	ldr	r3, [r7, #24]
 800b2a8:	1ad3      	subs	r3, r2, r3
 800b2aa:	69fa      	ldr	r2, [r7, #28]
 800b2ac:	429a      	cmp	r2, r3
 800b2ae:	d902      	bls.n	800b2b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 800b2b0:	69fb      	ldr	r3, [r7, #28]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d13d      	bne.n	800b332 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	685a      	ldr	r2, [r3, #4]
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b2c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	685b      	ldr	r3, [r3, #4]
 800b2ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b2ce:	d111      	bne.n	800b2f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	689b      	ldr	r3, [r3, #8]
 800b2d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b2d8:	d004      	beq.n	800b2e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	689b      	ldr	r3, [r3, #8]
 800b2de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b2e2:	d107      	bne.n	800b2f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	681a      	ldr	r2, [r3, #0]
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b2f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b2fc:	d10f      	bne.n	800b31e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	681a      	ldr	r2, [r3, #0]
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b30c:	601a      	str	r2, [r3, #0]
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	681a      	ldr	r2, [r3, #0]
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b31c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	2201      	movs	r2, #1
 800b322:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	2200      	movs	r2, #0
 800b32a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800b32e:	2303      	movs	r3, #3
 800b330:	e017      	b.n	800b362 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b332:	697b      	ldr	r3, [r7, #20]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d101      	bne.n	800b33c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b338:	2300      	movs	r3, #0
 800b33a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b33c:	697b      	ldr	r3, [r7, #20]
 800b33e:	3b01      	subs	r3, #1
 800b340:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	689a      	ldr	r2, [r3, #8]
 800b348:	68bb      	ldr	r3, [r7, #8]
 800b34a:	4013      	ands	r3, r2
 800b34c:	68ba      	ldr	r2, [r7, #8]
 800b34e:	429a      	cmp	r2, r3
 800b350:	bf0c      	ite	eq
 800b352:	2301      	moveq	r3, #1
 800b354:	2300      	movne	r3, #0
 800b356:	b2db      	uxtb	r3, r3
 800b358:	461a      	mov	r2, r3
 800b35a:	79fb      	ldrb	r3, [r7, #7]
 800b35c:	429a      	cmp	r2, r3
 800b35e:	d19b      	bne.n	800b298 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b360:	2300      	movs	r3, #0
}
 800b362:	4618      	mov	r0, r3
 800b364:	3720      	adds	r7, #32
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}
 800b36a:	bf00      	nop
 800b36c:	20000538 	.word	0x20000538

0800b370 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b08a      	sub	sp, #40	; 0x28
 800b374:	af00      	add	r7, sp, #0
 800b376:	60f8      	str	r0, [r7, #12]
 800b378:	60b9      	str	r1, [r7, #8]
 800b37a:	607a      	str	r2, [r7, #4]
 800b37c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800b37e:	2300      	movs	r3, #0
 800b380:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800b382:	f7fa fcf3 	bl	8005d6c <HAL_GetTick>
 800b386:	4602      	mov	r2, r0
 800b388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b38a:	1a9b      	subs	r3, r3, r2
 800b38c:	683a      	ldr	r2, [r7, #0]
 800b38e:	4413      	add	r3, r2
 800b390:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800b392:	f7fa fceb 	bl	8005d6c <HAL_GetTick>
 800b396:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	330c      	adds	r3, #12
 800b39e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800b3a0:	4b3d      	ldr	r3, [pc, #244]	; (800b498 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800b3a2:	681a      	ldr	r2, [r3, #0]
 800b3a4:	4613      	mov	r3, r2
 800b3a6:	009b      	lsls	r3, r3, #2
 800b3a8:	4413      	add	r3, r2
 800b3aa:	00da      	lsls	r2, r3, #3
 800b3ac:	1ad3      	subs	r3, r2, r3
 800b3ae:	0d1b      	lsrs	r3, r3, #20
 800b3b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3b2:	fb02 f303 	mul.w	r3, r2, r3
 800b3b6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800b3b8:	e060      	b.n	800b47c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b3c0:	d107      	bne.n	800b3d2 <SPI_WaitFifoStateUntilTimeout+0x62>
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d104      	bne.n	800b3d2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800b3c8:	69fb      	ldr	r3, [r7, #28]
 800b3ca:	781b      	ldrb	r3, [r3, #0]
 800b3cc:	b2db      	uxtb	r3, r3
 800b3ce:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800b3d0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3d8:	d050      	beq.n	800b47c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b3da:	f7fa fcc7 	bl	8005d6c <HAL_GetTick>
 800b3de:	4602      	mov	r2, r0
 800b3e0:	6a3b      	ldr	r3, [r7, #32]
 800b3e2:	1ad3      	subs	r3, r2, r3
 800b3e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3e6:	429a      	cmp	r2, r3
 800b3e8:	d902      	bls.n	800b3f0 <SPI_WaitFifoStateUntilTimeout+0x80>
 800b3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d13d      	bne.n	800b46c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	685a      	ldr	r2, [r3, #4]
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b3fe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	685b      	ldr	r3, [r3, #4]
 800b404:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b408:	d111      	bne.n	800b42e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	689b      	ldr	r3, [r3, #8]
 800b40e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b412:	d004      	beq.n	800b41e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	689b      	ldr	r3, [r3, #8]
 800b418:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b41c:	d107      	bne.n	800b42e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	681a      	ldr	r2, [r3, #0]
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b42c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b432:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b436:	d10f      	bne.n	800b458 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	681a      	ldr	r2, [r3, #0]
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b446:	601a      	str	r2, [r3, #0]
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	681a      	ldr	r2, [r3, #0]
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b456:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	2201      	movs	r2, #1
 800b45c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	2200      	movs	r2, #0
 800b464:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800b468:	2303      	movs	r3, #3
 800b46a:	e010      	b.n	800b48e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b46c:	69bb      	ldr	r3, [r7, #24]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d101      	bne.n	800b476 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800b472:	2300      	movs	r3, #0
 800b474:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800b476:	69bb      	ldr	r3, [r7, #24]
 800b478:	3b01      	subs	r3, #1
 800b47a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	689a      	ldr	r2, [r3, #8]
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	4013      	ands	r3, r2
 800b486:	687a      	ldr	r2, [r7, #4]
 800b488:	429a      	cmp	r2, r3
 800b48a:	d196      	bne.n	800b3ba <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800b48c:	2300      	movs	r3, #0
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3728      	adds	r7, #40	; 0x28
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}
 800b496:	bf00      	nop
 800b498:	20000538 	.word	0x20000538

0800b49c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b086      	sub	sp, #24
 800b4a0:	af02      	add	r7, sp, #8
 800b4a2:	60f8      	str	r0, [r7, #12]
 800b4a4:	60b9      	str	r1, [r7, #8]
 800b4a6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	685b      	ldr	r3, [r3, #4]
 800b4ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b4b0:	d111      	bne.n	800b4d6 <SPI_EndRxTransaction+0x3a>
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	689b      	ldr	r3, [r3, #8]
 800b4b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b4ba:	d004      	beq.n	800b4c6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	689b      	ldr	r3, [r3, #8]
 800b4c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b4c4:	d107      	bne.n	800b4d6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	681a      	ldr	r2, [r3, #0]
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b4d4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	9300      	str	r3, [sp, #0]
 800b4da:	68bb      	ldr	r3, [r7, #8]
 800b4dc:	2200      	movs	r2, #0
 800b4de:	2180      	movs	r1, #128	; 0x80
 800b4e0:	68f8      	ldr	r0, [r7, #12]
 800b4e2:	f7ff febd 	bl	800b260 <SPI_WaitFlagStateUntilTimeout>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d007      	beq.n	800b4fc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b4f0:	f043 0220 	orr.w	r2, r3, #32
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b4f8:	2303      	movs	r3, #3
 800b4fa:	e023      	b.n	800b544 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	685b      	ldr	r3, [r3, #4]
 800b500:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b504:	d11d      	bne.n	800b542 <SPI_EndRxTransaction+0xa6>
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	689b      	ldr	r3, [r3, #8]
 800b50a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b50e:	d004      	beq.n	800b51a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	689b      	ldr	r3, [r3, #8]
 800b514:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b518:	d113      	bne.n	800b542 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	9300      	str	r3, [sp, #0]
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	2200      	movs	r2, #0
 800b522:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b526:	68f8      	ldr	r0, [r7, #12]
 800b528:	f7ff ff22 	bl	800b370 <SPI_WaitFifoStateUntilTimeout>
 800b52c:	4603      	mov	r3, r0
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d007      	beq.n	800b542 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b536:	f043 0220 	orr.w	r2, r3, #32
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800b53e:	2303      	movs	r3, #3
 800b540:	e000      	b.n	800b544 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800b542:	2300      	movs	r3, #0
}
 800b544:	4618      	mov	r0, r3
 800b546:	3710      	adds	r7, #16
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}

0800b54c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b086      	sub	sp, #24
 800b550:	af02      	add	r7, sp, #8
 800b552:	60f8      	str	r0, [r7, #12]
 800b554:	60b9      	str	r1, [r7, #8]
 800b556:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	9300      	str	r3, [sp, #0]
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	2200      	movs	r2, #0
 800b560:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800b564:	68f8      	ldr	r0, [r7, #12]
 800b566:	f7ff ff03 	bl	800b370 <SPI_WaitFifoStateUntilTimeout>
 800b56a:	4603      	mov	r3, r0
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d007      	beq.n	800b580 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b574:	f043 0220 	orr.w	r2, r3, #32
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b57c:	2303      	movs	r3, #3
 800b57e:	e027      	b.n	800b5d0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	9300      	str	r3, [sp, #0]
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	2200      	movs	r2, #0
 800b588:	2180      	movs	r1, #128	; 0x80
 800b58a:	68f8      	ldr	r0, [r7, #12]
 800b58c:	f7ff fe68 	bl	800b260 <SPI_WaitFlagStateUntilTimeout>
 800b590:	4603      	mov	r3, r0
 800b592:	2b00      	cmp	r3, #0
 800b594:	d007      	beq.n	800b5a6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b59a:	f043 0220 	orr.w	r2, r3, #32
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b5a2:	2303      	movs	r3, #3
 800b5a4:	e014      	b.n	800b5d0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	9300      	str	r3, [sp, #0]
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b5b2:	68f8      	ldr	r0, [r7, #12]
 800b5b4:	f7ff fedc 	bl	800b370 <SPI_WaitFifoStateUntilTimeout>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d007      	beq.n	800b5ce <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b5c2:	f043 0220 	orr.w	r2, r3, #32
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b5ca:	2303      	movs	r3, #3
 800b5cc:	e000      	b.n	800b5d0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800b5ce:	2300      	movs	r3, #0
}
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	3710      	adds	r7, #16
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bd80      	pop	{r7, pc}

0800b5d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b082      	sub	sp, #8
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d101      	bne.n	800b5ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	e049      	b.n	800b67e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5f0:	b2db      	uxtb	r3, r3
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d106      	bne.n	800b604 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f7fa f990 	bl	8005924 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2202      	movs	r2, #2
 800b608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681a      	ldr	r2, [r3, #0]
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	3304      	adds	r3, #4
 800b614:	4619      	mov	r1, r3
 800b616:	4610      	mov	r0, r2
 800b618:	f000 fe74 	bl	800c304 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2201      	movs	r2, #1
 800b620:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2201      	movs	r2, #1
 800b628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2201      	movs	r2, #1
 800b630:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2201      	movs	r2, #1
 800b638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2201      	movs	r2, #1
 800b640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2201      	movs	r2, #1
 800b648:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2201      	movs	r2, #1
 800b650:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2201      	movs	r2, #1
 800b658:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2201      	movs	r2, #1
 800b660:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2201      	movs	r2, #1
 800b668:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2201      	movs	r2, #1
 800b670:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2201      	movs	r2, #1
 800b678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b67c:	2300      	movs	r3, #0
}
 800b67e:	4618      	mov	r0, r3
 800b680:	3708      	adds	r7, #8
 800b682:	46bd      	mov	sp, r7
 800b684:	bd80      	pop	{r7, pc}

0800b686 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800b686:	b480      	push	{r7}
 800b688:	b083      	sub	sp, #12
 800b68a:	af00      	add	r7, sp, #0
 800b68c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	6a1a      	ldr	r2, [r3, #32]
 800b694:	f241 1311 	movw	r3, #4369	; 0x1111
 800b698:	4013      	ands	r3, r2
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d10f      	bne.n	800b6be <HAL_TIM_Base_Stop+0x38>
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	6a1a      	ldr	r2, [r3, #32]
 800b6a4:	f244 4344 	movw	r3, #17476	; 0x4444
 800b6a8:	4013      	ands	r3, r2
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d107      	bne.n	800b6be <HAL_TIM_Base_Stop+0x38>
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	681a      	ldr	r2, [r3, #0]
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	f022 0201 	bic.w	r2, r2, #1
 800b6bc:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	2201      	movs	r2, #1
 800b6c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800b6c6:	2300      	movs	r3, #0
}
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	370c      	adds	r7, #12
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d2:	4770      	bx	lr

0800b6d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	b085      	sub	sp, #20
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6e2:	b2db      	uxtb	r3, r3
 800b6e4:	2b01      	cmp	r3, #1
 800b6e6:	d001      	beq.n	800b6ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b6e8:	2301      	movs	r3, #1
 800b6ea:	e04a      	b.n	800b782 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2202      	movs	r2, #2
 800b6f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	68da      	ldr	r2, [r3, #12]
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	f042 0201 	orr.w	r2, r2, #1
 800b702:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	4a21      	ldr	r2, [pc, #132]	; (800b790 <HAL_TIM_Base_Start_IT+0xbc>)
 800b70a:	4293      	cmp	r3, r2
 800b70c:	d018      	beq.n	800b740 <HAL_TIM_Base_Start_IT+0x6c>
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b716:	d013      	beq.n	800b740 <HAL_TIM_Base_Start_IT+0x6c>
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	4a1d      	ldr	r2, [pc, #116]	; (800b794 <HAL_TIM_Base_Start_IT+0xc0>)
 800b71e:	4293      	cmp	r3, r2
 800b720:	d00e      	beq.n	800b740 <HAL_TIM_Base_Start_IT+0x6c>
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	4a1c      	ldr	r2, [pc, #112]	; (800b798 <HAL_TIM_Base_Start_IT+0xc4>)
 800b728:	4293      	cmp	r3, r2
 800b72a:	d009      	beq.n	800b740 <HAL_TIM_Base_Start_IT+0x6c>
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	4a1a      	ldr	r2, [pc, #104]	; (800b79c <HAL_TIM_Base_Start_IT+0xc8>)
 800b732:	4293      	cmp	r3, r2
 800b734:	d004      	beq.n	800b740 <HAL_TIM_Base_Start_IT+0x6c>
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	4a19      	ldr	r2, [pc, #100]	; (800b7a0 <HAL_TIM_Base_Start_IT+0xcc>)
 800b73c:	4293      	cmp	r3, r2
 800b73e:	d115      	bne.n	800b76c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	689a      	ldr	r2, [r3, #8]
 800b746:	4b17      	ldr	r3, [pc, #92]	; (800b7a4 <HAL_TIM_Base_Start_IT+0xd0>)
 800b748:	4013      	ands	r3, r2
 800b74a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	2b06      	cmp	r3, #6
 800b750:	d015      	beq.n	800b77e <HAL_TIM_Base_Start_IT+0xaa>
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b758:	d011      	beq.n	800b77e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	681a      	ldr	r2, [r3, #0]
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	f042 0201 	orr.w	r2, r2, #1
 800b768:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b76a:	e008      	b.n	800b77e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	681a      	ldr	r2, [r3, #0]
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	f042 0201 	orr.w	r2, r2, #1
 800b77a:	601a      	str	r2, [r3, #0]
 800b77c:	e000      	b.n	800b780 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b77e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b780:	2300      	movs	r3, #0
}
 800b782:	4618      	mov	r0, r3
 800b784:	3714      	adds	r7, #20
 800b786:	46bd      	mov	sp, r7
 800b788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78c:	4770      	bx	lr
 800b78e:	bf00      	nop
 800b790:	40012c00 	.word	0x40012c00
 800b794:	40000400 	.word	0x40000400
 800b798:	40000800 	.word	0x40000800
 800b79c:	40013400 	.word	0x40013400
 800b7a0:	40014000 	.word	0x40014000
 800b7a4:	00010007 	.word	0x00010007

0800b7a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b082      	sub	sp, #8
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d101      	bne.n	800b7ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	e049      	b.n	800b84e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b7c0:	b2db      	uxtb	r3, r3
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d106      	bne.n	800b7d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f000 f841 	bl	800b856 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2202      	movs	r2, #2
 800b7d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681a      	ldr	r2, [r3, #0]
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	3304      	adds	r3, #4
 800b7e4:	4619      	mov	r1, r3
 800b7e6:	4610      	mov	r0, r2
 800b7e8:	f000 fd8c 	bl	800c304 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2201      	movs	r2, #1
 800b7f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2201      	movs	r2, #1
 800b7f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2201      	movs	r2, #1
 800b800:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2201      	movs	r2, #1
 800b808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2201      	movs	r2, #1
 800b810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2201      	movs	r2, #1
 800b818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2201      	movs	r2, #1
 800b820:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2201      	movs	r2, #1
 800b828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2201      	movs	r2, #1
 800b830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2201      	movs	r2, #1
 800b838:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2201      	movs	r2, #1
 800b840:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2201      	movs	r2, #1
 800b848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b84c:	2300      	movs	r3, #0
}
 800b84e:	4618      	mov	r0, r3
 800b850:	3708      	adds	r7, #8
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}

0800b856 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b856:	b480      	push	{r7}
 800b858:	b083      	sub	sp, #12
 800b85a:	af00      	add	r7, sp, #0
 800b85c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b85e:	bf00      	nop
 800b860:	370c      	adds	r7, #12
 800b862:	46bd      	mov	sp, r7
 800b864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b868:	4770      	bx	lr
	...

0800b86c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b084      	sub	sp, #16
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
 800b874:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d109      	bne.n	800b890 <HAL_TIM_PWM_Start+0x24>
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b882:	b2db      	uxtb	r3, r3
 800b884:	2b01      	cmp	r3, #1
 800b886:	bf14      	ite	ne
 800b888:	2301      	movne	r3, #1
 800b88a:	2300      	moveq	r3, #0
 800b88c:	b2db      	uxtb	r3, r3
 800b88e:	e03c      	b.n	800b90a <HAL_TIM_PWM_Start+0x9e>
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	2b04      	cmp	r3, #4
 800b894:	d109      	bne.n	800b8aa <HAL_TIM_PWM_Start+0x3e>
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b89c:	b2db      	uxtb	r3, r3
 800b89e:	2b01      	cmp	r3, #1
 800b8a0:	bf14      	ite	ne
 800b8a2:	2301      	movne	r3, #1
 800b8a4:	2300      	moveq	r3, #0
 800b8a6:	b2db      	uxtb	r3, r3
 800b8a8:	e02f      	b.n	800b90a <HAL_TIM_PWM_Start+0x9e>
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	2b08      	cmp	r3, #8
 800b8ae:	d109      	bne.n	800b8c4 <HAL_TIM_PWM_Start+0x58>
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b8b6:	b2db      	uxtb	r3, r3
 800b8b8:	2b01      	cmp	r3, #1
 800b8ba:	bf14      	ite	ne
 800b8bc:	2301      	movne	r3, #1
 800b8be:	2300      	moveq	r3, #0
 800b8c0:	b2db      	uxtb	r3, r3
 800b8c2:	e022      	b.n	800b90a <HAL_TIM_PWM_Start+0x9e>
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	2b0c      	cmp	r3, #12
 800b8c8:	d109      	bne.n	800b8de <HAL_TIM_PWM_Start+0x72>
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b8d0:	b2db      	uxtb	r3, r3
 800b8d2:	2b01      	cmp	r3, #1
 800b8d4:	bf14      	ite	ne
 800b8d6:	2301      	movne	r3, #1
 800b8d8:	2300      	moveq	r3, #0
 800b8da:	b2db      	uxtb	r3, r3
 800b8dc:	e015      	b.n	800b90a <HAL_TIM_PWM_Start+0x9e>
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	2b10      	cmp	r3, #16
 800b8e2:	d109      	bne.n	800b8f8 <HAL_TIM_PWM_Start+0x8c>
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b8ea:	b2db      	uxtb	r3, r3
 800b8ec:	2b01      	cmp	r3, #1
 800b8ee:	bf14      	ite	ne
 800b8f0:	2301      	movne	r3, #1
 800b8f2:	2300      	moveq	r3, #0
 800b8f4:	b2db      	uxtb	r3, r3
 800b8f6:	e008      	b.n	800b90a <HAL_TIM_PWM_Start+0x9e>
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b8fe:	b2db      	uxtb	r3, r3
 800b900:	2b01      	cmp	r3, #1
 800b902:	bf14      	ite	ne
 800b904:	2301      	movne	r3, #1
 800b906:	2300      	moveq	r3, #0
 800b908:	b2db      	uxtb	r3, r3
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d001      	beq.n	800b912 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b90e:	2301      	movs	r3, #1
 800b910:	e097      	b.n	800ba42 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d104      	bne.n	800b922 <HAL_TIM_PWM_Start+0xb6>
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2202      	movs	r2, #2
 800b91c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b920:	e023      	b.n	800b96a <HAL_TIM_PWM_Start+0xfe>
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	2b04      	cmp	r3, #4
 800b926:	d104      	bne.n	800b932 <HAL_TIM_PWM_Start+0xc6>
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2202      	movs	r2, #2
 800b92c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b930:	e01b      	b.n	800b96a <HAL_TIM_PWM_Start+0xfe>
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	2b08      	cmp	r3, #8
 800b936:	d104      	bne.n	800b942 <HAL_TIM_PWM_Start+0xd6>
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2202      	movs	r2, #2
 800b93c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b940:	e013      	b.n	800b96a <HAL_TIM_PWM_Start+0xfe>
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	2b0c      	cmp	r3, #12
 800b946:	d104      	bne.n	800b952 <HAL_TIM_PWM_Start+0xe6>
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2202      	movs	r2, #2
 800b94c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b950:	e00b      	b.n	800b96a <HAL_TIM_PWM_Start+0xfe>
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	2b10      	cmp	r3, #16
 800b956:	d104      	bne.n	800b962 <HAL_TIM_PWM_Start+0xf6>
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2202      	movs	r2, #2
 800b95c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b960:	e003      	b.n	800b96a <HAL_TIM_PWM_Start+0xfe>
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2202      	movs	r2, #2
 800b966:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	2201      	movs	r2, #1
 800b970:	6839      	ldr	r1, [r7, #0]
 800b972:	4618      	mov	r0, r3
 800b974:	f001 f8e8 	bl	800cb48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	4a33      	ldr	r2, [pc, #204]	; (800ba4c <HAL_TIM_PWM_Start+0x1e0>)
 800b97e:	4293      	cmp	r3, r2
 800b980:	d013      	beq.n	800b9aa <HAL_TIM_PWM_Start+0x13e>
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	4a32      	ldr	r2, [pc, #200]	; (800ba50 <HAL_TIM_PWM_Start+0x1e4>)
 800b988:	4293      	cmp	r3, r2
 800b98a:	d00e      	beq.n	800b9aa <HAL_TIM_PWM_Start+0x13e>
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	4a30      	ldr	r2, [pc, #192]	; (800ba54 <HAL_TIM_PWM_Start+0x1e8>)
 800b992:	4293      	cmp	r3, r2
 800b994:	d009      	beq.n	800b9aa <HAL_TIM_PWM_Start+0x13e>
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	4a2f      	ldr	r2, [pc, #188]	; (800ba58 <HAL_TIM_PWM_Start+0x1ec>)
 800b99c:	4293      	cmp	r3, r2
 800b99e:	d004      	beq.n	800b9aa <HAL_TIM_PWM_Start+0x13e>
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	4a2d      	ldr	r2, [pc, #180]	; (800ba5c <HAL_TIM_PWM_Start+0x1f0>)
 800b9a6:	4293      	cmp	r3, r2
 800b9a8:	d101      	bne.n	800b9ae <HAL_TIM_PWM_Start+0x142>
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	e000      	b.n	800b9b0 <HAL_TIM_PWM_Start+0x144>
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d007      	beq.n	800b9c4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b9c2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	4a20      	ldr	r2, [pc, #128]	; (800ba4c <HAL_TIM_PWM_Start+0x1e0>)
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	d018      	beq.n	800ba00 <HAL_TIM_PWM_Start+0x194>
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9d6:	d013      	beq.n	800ba00 <HAL_TIM_PWM_Start+0x194>
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	4a20      	ldr	r2, [pc, #128]	; (800ba60 <HAL_TIM_PWM_Start+0x1f4>)
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	d00e      	beq.n	800ba00 <HAL_TIM_PWM_Start+0x194>
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	4a1f      	ldr	r2, [pc, #124]	; (800ba64 <HAL_TIM_PWM_Start+0x1f8>)
 800b9e8:	4293      	cmp	r3, r2
 800b9ea:	d009      	beq.n	800ba00 <HAL_TIM_PWM_Start+0x194>
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	4a17      	ldr	r2, [pc, #92]	; (800ba50 <HAL_TIM_PWM_Start+0x1e4>)
 800b9f2:	4293      	cmp	r3, r2
 800b9f4:	d004      	beq.n	800ba00 <HAL_TIM_PWM_Start+0x194>
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	4a16      	ldr	r2, [pc, #88]	; (800ba54 <HAL_TIM_PWM_Start+0x1e8>)
 800b9fc:	4293      	cmp	r3, r2
 800b9fe:	d115      	bne.n	800ba2c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	689a      	ldr	r2, [r3, #8]
 800ba06:	4b18      	ldr	r3, [pc, #96]	; (800ba68 <HAL_TIM_PWM_Start+0x1fc>)
 800ba08:	4013      	ands	r3, r2
 800ba0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	2b06      	cmp	r3, #6
 800ba10:	d015      	beq.n	800ba3e <HAL_TIM_PWM_Start+0x1d2>
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba18:	d011      	beq.n	800ba3e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	681a      	ldr	r2, [r3, #0]
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	f042 0201 	orr.w	r2, r2, #1
 800ba28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba2a:	e008      	b.n	800ba3e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	681a      	ldr	r2, [r3, #0]
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	f042 0201 	orr.w	r2, r2, #1
 800ba3a:	601a      	str	r2, [r3, #0]
 800ba3c:	e000      	b.n	800ba40 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ba40:	2300      	movs	r3, #0
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	3710      	adds	r7, #16
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}
 800ba4a:	bf00      	nop
 800ba4c:	40012c00 	.word	0x40012c00
 800ba50:	40013400 	.word	0x40013400
 800ba54:	40014000 	.word	0x40014000
 800ba58:	40014400 	.word	0x40014400
 800ba5c:	40014800 	.word	0x40014800
 800ba60:	40000400 	.word	0x40000400
 800ba64:	40000800 	.word	0x40000800
 800ba68:	00010007 	.word	0x00010007

0800ba6c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b082      	sub	sp, #8
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
 800ba74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	6839      	ldr	r1, [r7, #0]
 800ba7e:	4618      	mov	r0, r3
 800ba80:	f001 f862 	bl	800cb48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	4a3e      	ldr	r2, [pc, #248]	; (800bb84 <HAL_TIM_PWM_Stop+0x118>)
 800ba8a:	4293      	cmp	r3, r2
 800ba8c:	d013      	beq.n	800bab6 <HAL_TIM_PWM_Stop+0x4a>
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	4a3d      	ldr	r2, [pc, #244]	; (800bb88 <HAL_TIM_PWM_Stop+0x11c>)
 800ba94:	4293      	cmp	r3, r2
 800ba96:	d00e      	beq.n	800bab6 <HAL_TIM_PWM_Stop+0x4a>
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	4a3b      	ldr	r2, [pc, #236]	; (800bb8c <HAL_TIM_PWM_Stop+0x120>)
 800ba9e:	4293      	cmp	r3, r2
 800baa0:	d009      	beq.n	800bab6 <HAL_TIM_PWM_Stop+0x4a>
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	4a3a      	ldr	r2, [pc, #232]	; (800bb90 <HAL_TIM_PWM_Stop+0x124>)
 800baa8:	4293      	cmp	r3, r2
 800baaa:	d004      	beq.n	800bab6 <HAL_TIM_PWM_Stop+0x4a>
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	4a38      	ldr	r2, [pc, #224]	; (800bb94 <HAL_TIM_PWM_Stop+0x128>)
 800bab2:	4293      	cmp	r3, r2
 800bab4:	d101      	bne.n	800baba <HAL_TIM_PWM_Stop+0x4e>
 800bab6:	2301      	movs	r3, #1
 800bab8:	e000      	b.n	800babc <HAL_TIM_PWM_Stop+0x50>
 800baba:	2300      	movs	r3, #0
 800babc:	2b00      	cmp	r3, #0
 800babe:	d017      	beq.n	800baf0 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	6a1a      	ldr	r2, [r3, #32]
 800bac6:	f241 1311 	movw	r3, #4369	; 0x1111
 800baca:	4013      	ands	r3, r2
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d10f      	bne.n	800baf0 <HAL_TIM_PWM_Stop+0x84>
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	6a1a      	ldr	r2, [r3, #32]
 800bad6:	f244 4344 	movw	r3, #17476	; 0x4444
 800bada:	4013      	ands	r3, r2
 800badc:	2b00      	cmp	r3, #0
 800bade:	d107      	bne.n	800baf0 <HAL_TIM_PWM_Stop+0x84>
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800baee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	6a1a      	ldr	r2, [r3, #32]
 800baf6:	f241 1311 	movw	r3, #4369	; 0x1111
 800bafa:	4013      	ands	r3, r2
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d10f      	bne.n	800bb20 <HAL_TIM_PWM_Stop+0xb4>
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	6a1a      	ldr	r2, [r3, #32]
 800bb06:	f244 4344 	movw	r3, #17476	; 0x4444
 800bb0a:	4013      	ands	r3, r2
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d107      	bne.n	800bb20 <HAL_TIM_PWM_Stop+0xb4>
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	681a      	ldr	r2, [r3, #0]
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	f022 0201 	bic.w	r2, r2, #1
 800bb1e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d104      	bne.n	800bb30 <HAL_TIM_PWM_Stop+0xc4>
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2201      	movs	r2, #1
 800bb2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bb2e:	e023      	b.n	800bb78 <HAL_TIM_PWM_Stop+0x10c>
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	2b04      	cmp	r3, #4
 800bb34:	d104      	bne.n	800bb40 <HAL_TIM_PWM_Stop+0xd4>
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2201      	movs	r2, #1
 800bb3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bb3e:	e01b      	b.n	800bb78 <HAL_TIM_PWM_Stop+0x10c>
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	2b08      	cmp	r3, #8
 800bb44:	d104      	bne.n	800bb50 <HAL_TIM_PWM_Stop+0xe4>
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2201      	movs	r2, #1
 800bb4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bb4e:	e013      	b.n	800bb78 <HAL_TIM_PWM_Stop+0x10c>
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	2b0c      	cmp	r3, #12
 800bb54:	d104      	bne.n	800bb60 <HAL_TIM_PWM_Stop+0xf4>
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2201      	movs	r2, #1
 800bb5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bb5e:	e00b      	b.n	800bb78 <HAL_TIM_PWM_Stop+0x10c>
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	2b10      	cmp	r3, #16
 800bb64:	d104      	bne.n	800bb70 <HAL_TIM_PWM_Stop+0x104>
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2201      	movs	r2, #1
 800bb6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bb6e:	e003      	b.n	800bb78 <HAL_TIM_PWM_Stop+0x10c>
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2201      	movs	r2, #1
 800bb74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800bb78:	2300      	movs	r3, #0
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	3708      	adds	r7, #8
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd80      	pop	{r7, pc}
 800bb82:	bf00      	nop
 800bb84:	40012c00 	.word	0x40012c00
 800bb88:	40013400 	.word	0x40013400
 800bb8c:	40014000 	.word	0x40014000
 800bb90:	40014400 	.word	0x40014400
 800bb94:	40014800 	.word	0x40014800

0800bb98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b082      	sub	sp, #8
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	691b      	ldr	r3, [r3, #16]
 800bba6:	f003 0302 	and.w	r3, r3, #2
 800bbaa:	2b02      	cmp	r3, #2
 800bbac:	d122      	bne.n	800bbf4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	68db      	ldr	r3, [r3, #12]
 800bbb4:	f003 0302 	and.w	r3, r3, #2
 800bbb8:	2b02      	cmp	r3, #2
 800bbba:	d11b      	bne.n	800bbf4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	f06f 0202 	mvn.w	r2, #2
 800bbc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	2201      	movs	r2, #1
 800bbca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	699b      	ldr	r3, [r3, #24]
 800bbd2:	f003 0303 	and.w	r3, r3, #3
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d003      	beq.n	800bbe2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f000 fb74 	bl	800c2c8 <HAL_TIM_IC_CaptureCallback>
 800bbe0:	e005      	b.n	800bbee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bbe2:	6878      	ldr	r0, [r7, #4]
 800bbe4:	f000 fb66 	bl	800c2b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	f000 fb77 	bl	800c2dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	691b      	ldr	r3, [r3, #16]
 800bbfa:	f003 0304 	and.w	r3, r3, #4
 800bbfe:	2b04      	cmp	r3, #4
 800bc00:	d122      	bne.n	800bc48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	68db      	ldr	r3, [r3, #12]
 800bc08:	f003 0304 	and.w	r3, r3, #4
 800bc0c:	2b04      	cmp	r3, #4
 800bc0e:	d11b      	bne.n	800bc48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	f06f 0204 	mvn.w	r2, #4
 800bc18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	2202      	movs	r2, #2
 800bc1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	699b      	ldr	r3, [r3, #24]
 800bc26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d003      	beq.n	800bc36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f000 fb4a 	bl	800c2c8 <HAL_TIM_IC_CaptureCallback>
 800bc34:	e005      	b.n	800bc42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	f000 fb3c 	bl	800c2b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f000 fb4d 	bl	800c2dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2200      	movs	r2, #0
 800bc46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	691b      	ldr	r3, [r3, #16]
 800bc4e:	f003 0308 	and.w	r3, r3, #8
 800bc52:	2b08      	cmp	r3, #8
 800bc54:	d122      	bne.n	800bc9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	68db      	ldr	r3, [r3, #12]
 800bc5c:	f003 0308 	and.w	r3, r3, #8
 800bc60:	2b08      	cmp	r3, #8
 800bc62:	d11b      	bne.n	800bc9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	f06f 0208 	mvn.w	r2, #8
 800bc6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2204      	movs	r2, #4
 800bc72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	69db      	ldr	r3, [r3, #28]
 800bc7a:	f003 0303 	and.w	r3, r3, #3
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d003      	beq.n	800bc8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bc82:	6878      	ldr	r0, [r7, #4]
 800bc84:	f000 fb20 	bl	800c2c8 <HAL_TIM_IC_CaptureCallback>
 800bc88:	e005      	b.n	800bc96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc8a:	6878      	ldr	r0, [r7, #4]
 800bc8c:	f000 fb12 	bl	800c2b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	f000 fb23 	bl	800c2dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2200      	movs	r2, #0
 800bc9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	691b      	ldr	r3, [r3, #16]
 800bca2:	f003 0310 	and.w	r3, r3, #16
 800bca6:	2b10      	cmp	r3, #16
 800bca8:	d122      	bne.n	800bcf0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	68db      	ldr	r3, [r3, #12]
 800bcb0:	f003 0310 	and.w	r3, r3, #16
 800bcb4:	2b10      	cmp	r3, #16
 800bcb6:	d11b      	bne.n	800bcf0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	f06f 0210 	mvn.w	r2, #16
 800bcc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	2208      	movs	r2, #8
 800bcc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	69db      	ldr	r3, [r3, #28]
 800bcce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d003      	beq.n	800bcde <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	f000 faf6 	bl	800c2c8 <HAL_TIM_IC_CaptureCallback>
 800bcdc:	e005      	b.n	800bcea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bcde:	6878      	ldr	r0, [r7, #4]
 800bce0:	f000 fae8 	bl	800c2b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	f000 faf9 	bl	800c2dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	2200      	movs	r2, #0
 800bcee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	691b      	ldr	r3, [r3, #16]
 800bcf6:	f003 0301 	and.w	r3, r3, #1
 800bcfa:	2b01      	cmp	r3, #1
 800bcfc:	d10e      	bne.n	800bd1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	68db      	ldr	r3, [r3, #12]
 800bd04:	f003 0301 	and.w	r3, r3, #1
 800bd08:	2b01      	cmp	r3, #1
 800bd0a:	d107      	bne.n	800bd1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	f06f 0201 	mvn.w	r2, #1
 800bd14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	f7f5 fa48 	bl	80011ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	691b      	ldr	r3, [r3, #16]
 800bd22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd26:	2b80      	cmp	r3, #128	; 0x80
 800bd28:	d10e      	bne.n	800bd48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	68db      	ldr	r3, [r3, #12]
 800bd30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd34:	2b80      	cmp	r3, #128	; 0x80
 800bd36:	d107      	bne.n	800bd48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bd40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bd42:	6878      	ldr	r0, [r7, #4]
 800bd44:	f001 f964 	bl	800d010 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	691b      	ldr	r3, [r3, #16]
 800bd4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd56:	d10e      	bne.n	800bd76 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	68db      	ldr	r3, [r3, #12]
 800bd5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd62:	2b80      	cmp	r3, #128	; 0x80
 800bd64:	d107      	bne.n	800bd76 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bd6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bd70:	6878      	ldr	r0, [r7, #4]
 800bd72:	f001 f957 	bl	800d024 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	691b      	ldr	r3, [r3, #16]
 800bd7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd80:	2b40      	cmp	r3, #64	; 0x40
 800bd82:	d10e      	bne.n	800bda2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	68db      	ldr	r3, [r3, #12]
 800bd8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd8e:	2b40      	cmp	r3, #64	; 0x40
 800bd90:	d107      	bne.n	800bda2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bd9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bd9c:	6878      	ldr	r0, [r7, #4]
 800bd9e:	f000 faa7 	bl	800c2f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	691b      	ldr	r3, [r3, #16]
 800bda8:	f003 0320 	and.w	r3, r3, #32
 800bdac:	2b20      	cmp	r3, #32
 800bdae:	d10e      	bne.n	800bdce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	68db      	ldr	r3, [r3, #12]
 800bdb6:	f003 0320 	and.w	r3, r3, #32
 800bdba:	2b20      	cmp	r3, #32
 800bdbc:	d107      	bne.n	800bdce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	f06f 0220 	mvn.w	r2, #32
 800bdc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	f001 f917 	bl	800cffc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	691b      	ldr	r3, [r3, #16]
 800bdd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bdd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bddc:	d10f      	bne.n	800bdfe <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	68db      	ldr	r3, [r3, #12]
 800bde4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bde8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bdec:	d107      	bne.n	800bdfe <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800bdf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800bdf8:	6878      	ldr	r0, [r7, #4]
 800bdfa:	f001 f91d 	bl	800d038 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	691b      	ldr	r3, [r3, #16]
 800be04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800be08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800be0c:	d10f      	bne.n	800be2e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	68db      	ldr	r3, [r3, #12]
 800be14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800be18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800be1c:	d107      	bne.n	800be2e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800be26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f001 f90f 	bl	800d04c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	691b      	ldr	r3, [r3, #16]
 800be34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800be38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800be3c:	d10f      	bne.n	800be5e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	68db      	ldr	r3, [r3, #12]
 800be44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800be48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800be4c:	d107      	bne.n	800be5e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800be56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800be58:	6878      	ldr	r0, [r7, #4]
 800be5a:	f001 f901 	bl	800d060 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	691b      	ldr	r3, [r3, #16]
 800be64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800be68:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800be6c:	d10f      	bne.n	800be8e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	68db      	ldr	r3, [r3, #12]
 800be74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800be78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800be7c:	d107      	bne.n	800be8e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800be86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800be88:	6878      	ldr	r0, [r7, #4]
 800be8a:	f001 f8f3 	bl	800d074 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800be8e:	bf00      	nop
 800be90:	3708      	adds	r7, #8
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}
	...

0800be98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b086      	sub	sp, #24
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	60f8      	str	r0, [r7, #12]
 800bea0:	60b9      	str	r1, [r7, #8]
 800bea2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bea4:	2300      	movs	r3, #0
 800bea6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800beae:	2b01      	cmp	r3, #1
 800beb0:	d101      	bne.n	800beb6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800beb2:	2302      	movs	r3, #2
 800beb4:	e0ff      	b.n	800c0b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	2201      	movs	r2, #1
 800beba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2b14      	cmp	r3, #20
 800bec2:	f200 80f0 	bhi.w	800c0a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bec6:	a201      	add	r2, pc, #4	; (adr r2, 800becc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800becc:	0800bf21 	.word	0x0800bf21
 800bed0:	0800c0a7 	.word	0x0800c0a7
 800bed4:	0800c0a7 	.word	0x0800c0a7
 800bed8:	0800c0a7 	.word	0x0800c0a7
 800bedc:	0800bf61 	.word	0x0800bf61
 800bee0:	0800c0a7 	.word	0x0800c0a7
 800bee4:	0800c0a7 	.word	0x0800c0a7
 800bee8:	0800c0a7 	.word	0x0800c0a7
 800beec:	0800bfa3 	.word	0x0800bfa3
 800bef0:	0800c0a7 	.word	0x0800c0a7
 800bef4:	0800c0a7 	.word	0x0800c0a7
 800bef8:	0800c0a7 	.word	0x0800c0a7
 800befc:	0800bfe3 	.word	0x0800bfe3
 800bf00:	0800c0a7 	.word	0x0800c0a7
 800bf04:	0800c0a7 	.word	0x0800c0a7
 800bf08:	0800c0a7 	.word	0x0800c0a7
 800bf0c:	0800c025 	.word	0x0800c025
 800bf10:	0800c0a7 	.word	0x0800c0a7
 800bf14:	0800c0a7 	.word	0x0800c0a7
 800bf18:	0800c0a7 	.word	0x0800c0a7
 800bf1c:	0800c065 	.word	0x0800c065
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	68b9      	ldr	r1, [r7, #8]
 800bf26:	4618      	mov	r0, r3
 800bf28:	f000 fa7c 	bl	800c424 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	699a      	ldr	r2, [r3, #24]
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	f042 0208 	orr.w	r2, r2, #8
 800bf3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	699a      	ldr	r2, [r3, #24]
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	f022 0204 	bic.w	r2, r2, #4
 800bf4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	6999      	ldr	r1, [r3, #24]
 800bf52:	68bb      	ldr	r3, [r7, #8]
 800bf54:	691a      	ldr	r2, [r3, #16]
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	430a      	orrs	r2, r1
 800bf5c:	619a      	str	r2, [r3, #24]
      break;
 800bf5e:	e0a5      	b.n	800c0ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	68b9      	ldr	r1, [r7, #8]
 800bf66:	4618      	mov	r0, r3
 800bf68:	f000 faec 	bl	800c544 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	699a      	ldr	r2, [r3, #24]
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bf7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	699a      	ldr	r2, [r3, #24]
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bf8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	6999      	ldr	r1, [r3, #24]
 800bf92:	68bb      	ldr	r3, [r7, #8]
 800bf94:	691b      	ldr	r3, [r3, #16]
 800bf96:	021a      	lsls	r2, r3, #8
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	430a      	orrs	r2, r1
 800bf9e:	619a      	str	r2, [r3, #24]
      break;
 800bfa0:	e084      	b.n	800c0ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	68b9      	ldr	r1, [r7, #8]
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	f000 fb55 	bl	800c658 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	69da      	ldr	r2, [r3, #28]
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	f042 0208 	orr.w	r2, r2, #8
 800bfbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	69da      	ldr	r2, [r3, #28]
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	f022 0204 	bic.w	r2, r2, #4
 800bfcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	69d9      	ldr	r1, [r3, #28]
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	691a      	ldr	r2, [r3, #16]
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	430a      	orrs	r2, r1
 800bfde:	61da      	str	r2, [r3, #28]
      break;
 800bfe0:	e064      	b.n	800c0ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	68b9      	ldr	r1, [r7, #8]
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f000 fbbd 	bl	800c768 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	69da      	ldr	r2, [r3, #28]
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bffc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	69da      	ldr	r2, [r3, #28]
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c00c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	69d9      	ldr	r1, [r3, #28]
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	691b      	ldr	r3, [r3, #16]
 800c018:	021a      	lsls	r2, r3, #8
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	430a      	orrs	r2, r1
 800c020:	61da      	str	r2, [r3, #28]
      break;
 800c022:	e043      	b.n	800c0ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	68b9      	ldr	r1, [r7, #8]
 800c02a:	4618      	mov	r0, r3
 800c02c:	f000 fc26 	bl	800c87c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	f042 0208 	orr.w	r2, r2, #8
 800c03e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	f022 0204 	bic.w	r2, r2, #4
 800c04e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	691a      	ldr	r2, [r3, #16]
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	430a      	orrs	r2, r1
 800c060:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800c062:	e023      	b.n	800c0ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	68b9      	ldr	r1, [r7, #8]
 800c06a:	4618      	mov	r0, r3
 800c06c:	f000 fc6a 	bl	800c944 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c07e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c08e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800c096:	68bb      	ldr	r3, [r7, #8]
 800c098:	691b      	ldr	r3, [r3, #16]
 800c09a:	021a      	lsls	r2, r3, #8
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	430a      	orrs	r2, r1
 800c0a2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800c0a4:	e002      	b.n	800c0ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	75fb      	strb	r3, [r7, #23]
      break;
 800c0aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c0b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	3718      	adds	r7, #24
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}
 800c0be:	bf00      	nop

0800c0c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b084      	sub	sp, #16
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
 800c0c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c0d4:	2b01      	cmp	r3, #1
 800c0d6:	d101      	bne.n	800c0dc <HAL_TIM_ConfigClockSource+0x1c>
 800c0d8:	2302      	movs	r3, #2
 800c0da:	e0de      	b.n	800c29a <HAL_TIM_ConfigClockSource+0x1da>
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2201      	movs	r2, #1
 800c0e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2202      	movs	r2, #2
 800c0e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	689b      	ldr	r3, [r3, #8]
 800c0f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c0f4:	68bb      	ldr	r3, [r7, #8]
 800c0f6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800c0fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c0fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c100:	68bb      	ldr	r3, [r7, #8]
 800c102:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c106:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	68ba      	ldr	r2, [r7, #8]
 800c10e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	4a63      	ldr	r2, [pc, #396]	; (800c2a4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c116:	4293      	cmp	r3, r2
 800c118:	f000 80a9 	beq.w	800c26e <HAL_TIM_ConfigClockSource+0x1ae>
 800c11c:	4a61      	ldr	r2, [pc, #388]	; (800c2a4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c11e:	4293      	cmp	r3, r2
 800c120:	f200 80ae 	bhi.w	800c280 <HAL_TIM_ConfigClockSource+0x1c0>
 800c124:	4a60      	ldr	r2, [pc, #384]	; (800c2a8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c126:	4293      	cmp	r3, r2
 800c128:	f000 80a1 	beq.w	800c26e <HAL_TIM_ConfigClockSource+0x1ae>
 800c12c:	4a5e      	ldr	r2, [pc, #376]	; (800c2a8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c12e:	4293      	cmp	r3, r2
 800c130:	f200 80a6 	bhi.w	800c280 <HAL_TIM_ConfigClockSource+0x1c0>
 800c134:	4a5d      	ldr	r2, [pc, #372]	; (800c2ac <HAL_TIM_ConfigClockSource+0x1ec>)
 800c136:	4293      	cmp	r3, r2
 800c138:	f000 8099 	beq.w	800c26e <HAL_TIM_ConfigClockSource+0x1ae>
 800c13c:	4a5b      	ldr	r2, [pc, #364]	; (800c2ac <HAL_TIM_ConfigClockSource+0x1ec>)
 800c13e:	4293      	cmp	r3, r2
 800c140:	f200 809e 	bhi.w	800c280 <HAL_TIM_ConfigClockSource+0x1c0>
 800c144:	4a5a      	ldr	r2, [pc, #360]	; (800c2b0 <HAL_TIM_ConfigClockSource+0x1f0>)
 800c146:	4293      	cmp	r3, r2
 800c148:	f000 8091 	beq.w	800c26e <HAL_TIM_ConfigClockSource+0x1ae>
 800c14c:	4a58      	ldr	r2, [pc, #352]	; (800c2b0 <HAL_TIM_ConfigClockSource+0x1f0>)
 800c14e:	4293      	cmp	r3, r2
 800c150:	f200 8096 	bhi.w	800c280 <HAL_TIM_ConfigClockSource+0x1c0>
 800c154:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c158:	f000 8089 	beq.w	800c26e <HAL_TIM_ConfigClockSource+0x1ae>
 800c15c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c160:	f200 808e 	bhi.w	800c280 <HAL_TIM_ConfigClockSource+0x1c0>
 800c164:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c168:	d03e      	beq.n	800c1e8 <HAL_TIM_ConfigClockSource+0x128>
 800c16a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c16e:	f200 8087 	bhi.w	800c280 <HAL_TIM_ConfigClockSource+0x1c0>
 800c172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c176:	f000 8086 	beq.w	800c286 <HAL_TIM_ConfigClockSource+0x1c6>
 800c17a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c17e:	d87f      	bhi.n	800c280 <HAL_TIM_ConfigClockSource+0x1c0>
 800c180:	2b70      	cmp	r3, #112	; 0x70
 800c182:	d01a      	beq.n	800c1ba <HAL_TIM_ConfigClockSource+0xfa>
 800c184:	2b70      	cmp	r3, #112	; 0x70
 800c186:	d87b      	bhi.n	800c280 <HAL_TIM_ConfigClockSource+0x1c0>
 800c188:	2b60      	cmp	r3, #96	; 0x60
 800c18a:	d050      	beq.n	800c22e <HAL_TIM_ConfigClockSource+0x16e>
 800c18c:	2b60      	cmp	r3, #96	; 0x60
 800c18e:	d877      	bhi.n	800c280 <HAL_TIM_ConfigClockSource+0x1c0>
 800c190:	2b50      	cmp	r3, #80	; 0x50
 800c192:	d03c      	beq.n	800c20e <HAL_TIM_ConfigClockSource+0x14e>
 800c194:	2b50      	cmp	r3, #80	; 0x50
 800c196:	d873      	bhi.n	800c280 <HAL_TIM_ConfigClockSource+0x1c0>
 800c198:	2b40      	cmp	r3, #64	; 0x40
 800c19a:	d058      	beq.n	800c24e <HAL_TIM_ConfigClockSource+0x18e>
 800c19c:	2b40      	cmp	r3, #64	; 0x40
 800c19e:	d86f      	bhi.n	800c280 <HAL_TIM_ConfigClockSource+0x1c0>
 800c1a0:	2b30      	cmp	r3, #48	; 0x30
 800c1a2:	d064      	beq.n	800c26e <HAL_TIM_ConfigClockSource+0x1ae>
 800c1a4:	2b30      	cmp	r3, #48	; 0x30
 800c1a6:	d86b      	bhi.n	800c280 <HAL_TIM_ConfigClockSource+0x1c0>
 800c1a8:	2b20      	cmp	r3, #32
 800c1aa:	d060      	beq.n	800c26e <HAL_TIM_ConfigClockSource+0x1ae>
 800c1ac:	2b20      	cmp	r3, #32
 800c1ae:	d867      	bhi.n	800c280 <HAL_TIM_ConfigClockSource+0x1c0>
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d05c      	beq.n	800c26e <HAL_TIM_ConfigClockSource+0x1ae>
 800c1b4:	2b10      	cmp	r3, #16
 800c1b6:	d05a      	beq.n	800c26e <HAL_TIM_ConfigClockSource+0x1ae>
 800c1b8:	e062      	b.n	800c280 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6818      	ldr	r0, [r3, #0]
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	6899      	ldr	r1, [r3, #8]
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	685a      	ldr	r2, [r3, #4]
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	68db      	ldr	r3, [r3, #12]
 800c1ca:	f000 fc9d 	bl	800cb08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	689b      	ldr	r3, [r3, #8]
 800c1d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c1d6:	68bb      	ldr	r3, [r7, #8]
 800c1d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c1dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	68ba      	ldr	r2, [r7, #8]
 800c1e4:	609a      	str	r2, [r3, #8]
      break;
 800c1e6:	e04f      	b.n	800c288 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	6818      	ldr	r0, [r3, #0]
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	6899      	ldr	r1, [r3, #8]
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	685a      	ldr	r2, [r3, #4]
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	68db      	ldr	r3, [r3, #12]
 800c1f8:	f000 fc86 	bl	800cb08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	689a      	ldr	r2, [r3, #8]
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c20a:	609a      	str	r2, [r3, #8]
      break;
 800c20c:	e03c      	b.n	800c288 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	6818      	ldr	r0, [r3, #0]
 800c212:	683b      	ldr	r3, [r7, #0]
 800c214:	6859      	ldr	r1, [r3, #4]
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	68db      	ldr	r3, [r3, #12]
 800c21a:	461a      	mov	r2, r3
 800c21c:	f000 fbf8 	bl	800ca10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	2150      	movs	r1, #80	; 0x50
 800c226:	4618      	mov	r0, r3
 800c228:	f000 fc51 	bl	800cace <TIM_ITRx_SetConfig>
      break;
 800c22c:	e02c      	b.n	800c288 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6818      	ldr	r0, [r3, #0]
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	6859      	ldr	r1, [r3, #4]
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	68db      	ldr	r3, [r3, #12]
 800c23a:	461a      	mov	r2, r3
 800c23c:	f000 fc17 	bl	800ca6e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	2160      	movs	r1, #96	; 0x60
 800c246:	4618      	mov	r0, r3
 800c248:	f000 fc41 	bl	800cace <TIM_ITRx_SetConfig>
      break;
 800c24c:	e01c      	b.n	800c288 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6818      	ldr	r0, [r3, #0]
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	6859      	ldr	r1, [r3, #4]
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	68db      	ldr	r3, [r3, #12]
 800c25a:	461a      	mov	r2, r3
 800c25c:	f000 fbd8 	bl	800ca10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	2140      	movs	r1, #64	; 0x40
 800c266:	4618      	mov	r0, r3
 800c268:	f000 fc31 	bl	800cace <TIM_ITRx_SetConfig>
      break;
 800c26c:	e00c      	b.n	800c288 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681a      	ldr	r2, [r3, #0]
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	4619      	mov	r1, r3
 800c278:	4610      	mov	r0, r2
 800c27a:	f000 fc28 	bl	800cace <TIM_ITRx_SetConfig>
      break;
 800c27e:	e003      	b.n	800c288 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800c280:	2301      	movs	r3, #1
 800c282:	73fb      	strb	r3, [r7, #15]
      break;
 800c284:	e000      	b.n	800c288 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800c286:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2201      	movs	r2, #1
 800c28c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2200      	movs	r2, #0
 800c294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c298:	7bfb      	ldrb	r3, [r7, #15]
}
 800c29a:	4618      	mov	r0, r3
 800c29c:	3710      	adds	r7, #16
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	bd80      	pop	{r7, pc}
 800c2a2:	bf00      	nop
 800c2a4:	00100070 	.word	0x00100070
 800c2a8:	00100040 	.word	0x00100040
 800c2ac:	00100030 	.word	0x00100030
 800c2b0:	00100020 	.word	0x00100020

0800c2b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c2b4:	b480      	push	{r7}
 800c2b6:	b083      	sub	sp, #12
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c2bc:	bf00      	nop
 800c2be:	370c      	adds	r7, #12
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c6:	4770      	bx	lr

0800c2c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c2c8:	b480      	push	{r7}
 800c2ca:	b083      	sub	sp, #12
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c2d0:	bf00      	nop
 800c2d2:	370c      	adds	r7, #12
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2da:	4770      	bx	lr

0800c2dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c2dc:	b480      	push	{r7}
 800c2de:	b083      	sub	sp, #12
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c2e4:	bf00      	nop
 800c2e6:	370c      	adds	r7, #12
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ee:	4770      	bx	lr

0800c2f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c2f0:	b480      	push	{r7}
 800c2f2:	b083      	sub	sp, #12
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c2f8:	bf00      	nop
 800c2fa:	370c      	adds	r7, #12
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c302:	4770      	bx	lr

0800c304 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c304:	b480      	push	{r7}
 800c306:	b085      	sub	sp, #20
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
 800c30c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	4a3c      	ldr	r2, [pc, #240]	; (800c408 <TIM_Base_SetConfig+0x104>)
 800c318:	4293      	cmp	r3, r2
 800c31a:	d00f      	beq.n	800c33c <TIM_Base_SetConfig+0x38>
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c322:	d00b      	beq.n	800c33c <TIM_Base_SetConfig+0x38>
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	4a39      	ldr	r2, [pc, #228]	; (800c40c <TIM_Base_SetConfig+0x108>)
 800c328:	4293      	cmp	r3, r2
 800c32a:	d007      	beq.n	800c33c <TIM_Base_SetConfig+0x38>
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	4a38      	ldr	r2, [pc, #224]	; (800c410 <TIM_Base_SetConfig+0x10c>)
 800c330:	4293      	cmp	r3, r2
 800c332:	d003      	beq.n	800c33c <TIM_Base_SetConfig+0x38>
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	4a37      	ldr	r2, [pc, #220]	; (800c414 <TIM_Base_SetConfig+0x110>)
 800c338:	4293      	cmp	r3, r2
 800c33a:	d108      	bne.n	800c34e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c342:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	685b      	ldr	r3, [r3, #4]
 800c348:	68fa      	ldr	r2, [r7, #12]
 800c34a:	4313      	orrs	r3, r2
 800c34c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	4a2d      	ldr	r2, [pc, #180]	; (800c408 <TIM_Base_SetConfig+0x104>)
 800c352:	4293      	cmp	r3, r2
 800c354:	d01b      	beq.n	800c38e <TIM_Base_SetConfig+0x8a>
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c35c:	d017      	beq.n	800c38e <TIM_Base_SetConfig+0x8a>
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	4a2a      	ldr	r2, [pc, #168]	; (800c40c <TIM_Base_SetConfig+0x108>)
 800c362:	4293      	cmp	r3, r2
 800c364:	d013      	beq.n	800c38e <TIM_Base_SetConfig+0x8a>
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	4a29      	ldr	r2, [pc, #164]	; (800c410 <TIM_Base_SetConfig+0x10c>)
 800c36a:	4293      	cmp	r3, r2
 800c36c:	d00f      	beq.n	800c38e <TIM_Base_SetConfig+0x8a>
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	4a28      	ldr	r2, [pc, #160]	; (800c414 <TIM_Base_SetConfig+0x110>)
 800c372:	4293      	cmp	r3, r2
 800c374:	d00b      	beq.n	800c38e <TIM_Base_SetConfig+0x8a>
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	4a27      	ldr	r2, [pc, #156]	; (800c418 <TIM_Base_SetConfig+0x114>)
 800c37a:	4293      	cmp	r3, r2
 800c37c:	d007      	beq.n	800c38e <TIM_Base_SetConfig+0x8a>
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	4a26      	ldr	r2, [pc, #152]	; (800c41c <TIM_Base_SetConfig+0x118>)
 800c382:	4293      	cmp	r3, r2
 800c384:	d003      	beq.n	800c38e <TIM_Base_SetConfig+0x8a>
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	4a25      	ldr	r2, [pc, #148]	; (800c420 <TIM_Base_SetConfig+0x11c>)
 800c38a:	4293      	cmp	r3, r2
 800c38c:	d108      	bne.n	800c3a0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c394:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	68db      	ldr	r3, [r3, #12]
 800c39a:	68fa      	ldr	r2, [r7, #12]
 800c39c:	4313      	orrs	r3, r2
 800c39e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	695b      	ldr	r3, [r3, #20]
 800c3aa:	4313      	orrs	r3, r2
 800c3ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	68fa      	ldr	r2, [r7, #12]
 800c3b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	689a      	ldr	r2, [r3, #8]
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	681a      	ldr	r2, [r3, #0]
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	4a10      	ldr	r2, [pc, #64]	; (800c408 <TIM_Base_SetConfig+0x104>)
 800c3c8:	4293      	cmp	r3, r2
 800c3ca:	d00f      	beq.n	800c3ec <TIM_Base_SetConfig+0xe8>
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	4a11      	ldr	r2, [pc, #68]	; (800c414 <TIM_Base_SetConfig+0x110>)
 800c3d0:	4293      	cmp	r3, r2
 800c3d2:	d00b      	beq.n	800c3ec <TIM_Base_SetConfig+0xe8>
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	4a10      	ldr	r2, [pc, #64]	; (800c418 <TIM_Base_SetConfig+0x114>)
 800c3d8:	4293      	cmp	r3, r2
 800c3da:	d007      	beq.n	800c3ec <TIM_Base_SetConfig+0xe8>
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	4a0f      	ldr	r2, [pc, #60]	; (800c41c <TIM_Base_SetConfig+0x118>)
 800c3e0:	4293      	cmp	r3, r2
 800c3e2:	d003      	beq.n	800c3ec <TIM_Base_SetConfig+0xe8>
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	4a0e      	ldr	r2, [pc, #56]	; (800c420 <TIM_Base_SetConfig+0x11c>)
 800c3e8:	4293      	cmp	r3, r2
 800c3ea:	d103      	bne.n	800c3f4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	691a      	ldr	r2, [r3, #16]
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2201      	movs	r2, #1
 800c3f8:	615a      	str	r2, [r3, #20]
}
 800c3fa:	bf00      	nop
 800c3fc:	3714      	adds	r7, #20
 800c3fe:	46bd      	mov	sp, r7
 800c400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c404:	4770      	bx	lr
 800c406:	bf00      	nop
 800c408:	40012c00 	.word	0x40012c00
 800c40c:	40000400 	.word	0x40000400
 800c410:	40000800 	.word	0x40000800
 800c414:	40013400 	.word	0x40013400
 800c418:	40014000 	.word	0x40014000
 800c41c:	40014400 	.word	0x40014400
 800c420:	40014800 	.word	0x40014800

0800c424 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c424:	b480      	push	{r7}
 800c426:	b087      	sub	sp, #28
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
 800c42c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6a1b      	ldr	r3, [r3, #32]
 800c432:	f023 0201 	bic.w	r2, r3, #1
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6a1b      	ldr	r3, [r3, #32]
 800c43e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	685b      	ldr	r3, [r3, #4]
 800c444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	699b      	ldr	r3, [r3, #24]
 800c44a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	f023 0303 	bic.w	r3, r3, #3
 800c45e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	68fa      	ldr	r2, [r7, #12]
 800c466:	4313      	orrs	r3, r2
 800c468:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c46a:	697b      	ldr	r3, [r7, #20]
 800c46c:	f023 0302 	bic.w	r3, r3, #2
 800c470:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	689b      	ldr	r3, [r3, #8]
 800c476:	697a      	ldr	r2, [r7, #20]
 800c478:	4313      	orrs	r3, r2
 800c47a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	4a2c      	ldr	r2, [pc, #176]	; (800c530 <TIM_OC1_SetConfig+0x10c>)
 800c480:	4293      	cmp	r3, r2
 800c482:	d00f      	beq.n	800c4a4 <TIM_OC1_SetConfig+0x80>
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	4a2b      	ldr	r2, [pc, #172]	; (800c534 <TIM_OC1_SetConfig+0x110>)
 800c488:	4293      	cmp	r3, r2
 800c48a:	d00b      	beq.n	800c4a4 <TIM_OC1_SetConfig+0x80>
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	4a2a      	ldr	r2, [pc, #168]	; (800c538 <TIM_OC1_SetConfig+0x114>)
 800c490:	4293      	cmp	r3, r2
 800c492:	d007      	beq.n	800c4a4 <TIM_OC1_SetConfig+0x80>
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	4a29      	ldr	r2, [pc, #164]	; (800c53c <TIM_OC1_SetConfig+0x118>)
 800c498:	4293      	cmp	r3, r2
 800c49a:	d003      	beq.n	800c4a4 <TIM_OC1_SetConfig+0x80>
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	4a28      	ldr	r2, [pc, #160]	; (800c540 <TIM_OC1_SetConfig+0x11c>)
 800c4a0:	4293      	cmp	r3, r2
 800c4a2:	d10c      	bne.n	800c4be <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c4a4:	697b      	ldr	r3, [r7, #20]
 800c4a6:	f023 0308 	bic.w	r3, r3, #8
 800c4aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	68db      	ldr	r3, [r3, #12]
 800c4b0:	697a      	ldr	r2, [r7, #20]
 800c4b2:	4313      	orrs	r3, r2
 800c4b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c4b6:	697b      	ldr	r3, [r7, #20]
 800c4b8:	f023 0304 	bic.w	r3, r3, #4
 800c4bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	4a1b      	ldr	r2, [pc, #108]	; (800c530 <TIM_OC1_SetConfig+0x10c>)
 800c4c2:	4293      	cmp	r3, r2
 800c4c4:	d00f      	beq.n	800c4e6 <TIM_OC1_SetConfig+0xc2>
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	4a1a      	ldr	r2, [pc, #104]	; (800c534 <TIM_OC1_SetConfig+0x110>)
 800c4ca:	4293      	cmp	r3, r2
 800c4cc:	d00b      	beq.n	800c4e6 <TIM_OC1_SetConfig+0xc2>
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	4a19      	ldr	r2, [pc, #100]	; (800c538 <TIM_OC1_SetConfig+0x114>)
 800c4d2:	4293      	cmp	r3, r2
 800c4d4:	d007      	beq.n	800c4e6 <TIM_OC1_SetConfig+0xc2>
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	4a18      	ldr	r2, [pc, #96]	; (800c53c <TIM_OC1_SetConfig+0x118>)
 800c4da:	4293      	cmp	r3, r2
 800c4dc:	d003      	beq.n	800c4e6 <TIM_OC1_SetConfig+0xc2>
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	4a17      	ldr	r2, [pc, #92]	; (800c540 <TIM_OC1_SetConfig+0x11c>)
 800c4e2:	4293      	cmp	r3, r2
 800c4e4:	d111      	bne.n	800c50a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c4e6:	693b      	ldr	r3, [r7, #16]
 800c4e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c4ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c4ee:	693b      	ldr	r3, [r7, #16]
 800c4f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c4f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	695b      	ldr	r3, [r3, #20]
 800c4fa:	693a      	ldr	r2, [r7, #16]
 800c4fc:	4313      	orrs	r3, r2
 800c4fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	699b      	ldr	r3, [r3, #24]
 800c504:	693a      	ldr	r2, [r7, #16]
 800c506:	4313      	orrs	r3, r2
 800c508:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	693a      	ldr	r2, [r7, #16]
 800c50e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	68fa      	ldr	r2, [r7, #12]
 800c514:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	685a      	ldr	r2, [r3, #4]
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	697a      	ldr	r2, [r7, #20]
 800c522:	621a      	str	r2, [r3, #32]
}
 800c524:	bf00      	nop
 800c526:	371c      	adds	r7, #28
 800c528:	46bd      	mov	sp, r7
 800c52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52e:	4770      	bx	lr
 800c530:	40012c00 	.word	0x40012c00
 800c534:	40013400 	.word	0x40013400
 800c538:	40014000 	.word	0x40014000
 800c53c:	40014400 	.word	0x40014400
 800c540:	40014800 	.word	0x40014800

0800c544 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c544:	b480      	push	{r7}
 800c546:	b087      	sub	sp, #28
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
 800c54c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	6a1b      	ldr	r3, [r3, #32]
 800c552:	f023 0210 	bic.w	r2, r3, #16
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6a1b      	ldr	r3, [r3, #32]
 800c55e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	685b      	ldr	r3, [r3, #4]
 800c564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	699b      	ldr	r3, [r3, #24]
 800c56a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c572:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c576:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c57e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	021b      	lsls	r3, r3, #8
 800c586:	68fa      	ldr	r2, [r7, #12]
 800c588:	4313      	orrs	r3, r2
 800c58a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c58c:	697b      	ldr	r3, [r7, #20]
 800c58e:	f023 0320 	bic.w	r3, r3, #32
 800c592:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	689b      	ldr	r3, [r3, #8]
 800c598:	011b      	lsls	r3, r3, #4
 800c59a:	697a      	ldr	r2, [r7, #20]
 800c59c:	4313      	orrs	r3, r2
 800c59e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	4a28      	ldr	r2, [pc, #160]	; (800c644 <TIM_OC2_SetConfig+0x100>)
 800c5a4:	4293      	cmp	r3, r2
 800c5a6:	d003      	beq.n	800c5b0 <TIM_OC2_SetConfig+0x6c>
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	4a27      	ldr	r2, [pc, #156]	; (800c648 <TIM_OC2_SetConfig+0x104>)
 800c5ac:	4293      	cmp	r3, r2
 800c5ae:	d10d      	bne.n	800c5cc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c5b0:	697b      	ldr	r3, [r7, #20]
 800c5b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c5b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	68db      	ldr	r3, [r3, #12]
 800c5bc:	011b      	lsls	r3, r3, #4
 800c5be:	697a      	ldr	r2, [r7, #20]
 800c5c0:	4313      	orrs	r3, r2
 800c5c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c5c4:	697b      	ldr	r3, [r7, #20]
 800c5c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c5ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	4a1d      	ldr	r2, [pc, #116]	; (800c644 <TIM_OC2_SetConfig+0x100>)
 800c5d0:	4293      	cmp	r3, r2
 800c5d2:	d00f      	beq.n	800c5f4 <TIM_OC2_SetConfig+0xb0>
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	4a1c      	ldr	r2, [pc, #112]	; (800c648 <TIM_OC2_SetConfig+0x104>)
 800c5d8:	4293      	cmp	r3, r2
 800c5da:	d00b      	beq.n	800c5f4 <TIM_OC2_SetConfig+0xb0>
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	4a1b      	ldr	r2, [pc, #108]	; (800c64c <TIM_OC2_SetConfig+0x108>)
 800c5e0:	4293      	cmp	r3, r2
 800c5e2:	d007      	beq.n	800c5f4 <TIM_OC2_SetConfig+0xb0>
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	4a1a      	ldr	r2, [pc, #104]	; (800c650 <TIM_OC2_SetConfig+0x10c>)
 800c5e8:	4293      	cmp	r3, r2
 800c5ea:	d003      	beq.n	800c5f4 <TIM_OC2_SetConfig+0xb0>
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	4a19      	ldr	r2, [pc, #100]	; (800c654 <TIM_OC2_SetConfig+0x110>)
 800c5f0:	4293      	cmp	r3, r2
 800c5f2:	d113      	bne.n	800c61c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c5f4:	693b      	ldr	r3, [r7, #16]
 800c5f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c5fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c5fc:	693b      	ldr	r3, [r7, #16]
 800c5fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c602:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	695b      	ldr	r3, [r3, #20]
 800c608:	009b      	lsls	r3, r3, #2
 800c60a:	693a      	ldr	r2, [r7, #16]
 800c60c:	4313      	orrs	r3, r2
 800c60e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	699b      	ldr	r3, [r3, #24]
 800c614:	009b      	lsls	r3, r3, #2
 800c616:	693a      	ldr	r2, [r7, #16]
 800c618:	4313      	orrs	r3, r2
 800c61a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	693a      	ldr	r2, [r7, #16]
 800c620:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	68fa      	ldr	r2, [r7, #12]
 800c626:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	685a      	ldr	r2, [r3, #4]
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	697a      	ldr	r2, [r7, #20]
 800c634:	621a      	str	r2, [r3, #32]
}
 800c636:	bf00      	nop
 800c638:	371c      	adds	r7, #28
 800c63a:	46bd      	mov	sp, r7
 800c63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c640:	4770      	bx	lr
 800c642:	bf00      	nop
 800c644:	40012c00 	.word	0x40012c00
 800c648:	40013400 	.word	0x40013400
 800c64c:	40014000 	.word	0x40014000
 800c650:	40014400 	.word	0x40014400
 800c654:	40014800 	.word	0x40014800

0800c658 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c658:	b480      	push	{r7}
 800c65a:	b087      	sub	sp, #28
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
 800c660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	6a1b      	ldr	r3, [r3, #32]
 800c666:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	6a1b      	ldr	r3, [r3, #32]
 800c672:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	685b      	ldr	r3, [r3, #4]
 800c678:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	69db      	ldr	r3, [r3, #28]
 800c67e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c68a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	f023 0303 	bic.w	r3, r3, #3
 800c692:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	68fa      	ldr	r2, [r7, #12]
 800c69a:	4313      	orrs	r3, r2
 800c69c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c69e:	697b      	ldr	r3, [r7, #20]
 800c6a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c6a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	689b      	ldr	r3, [r3, #8]
 800c6aa:	021b      	lsls	r3, r3, #8
 800c6ac:	697a      	ldr	r2, [r7, #20]
 800c6ae:	4313      	orrs	r3, r2
 800c6b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	4a27      	ldr	r2, [pc, #156]	; (800c754 <TIM_OC3_SetConfig+0xfc>)
 800c6b6:	4293      	cmp	r3, r2
 800c6b8:	d003      	beq.n	800c6c2 <TIM_OC3_SetConfig+0x6a>
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	4a26      	ldr	r2, [pc, #152]	; (800c758 <TIM_OC3_SetConfig+0x100>)
 800c6be:	4293      	cmp	r3, r2
 800c6c0:	d10d      	bne.n	800c6de <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c6c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	68db      	ldr	r3, [r3, #12]
 800c6ce:	021b      	lsls	r3, r3, #8
 800c6d0:	697a      	ldr	r2, [r7, #20]
 800c6d2:	4313      	orrs	r3, r2
 800c6d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c6dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	4a1c      	ldr	r2, [pc, #112]	; (800c754 <TIM_OC3_SetConfig+0xfc>)
 800c6e2:	4293      	cmp	r3, r2
 800c6e4:	d00f      	beq.n	800c706 <TIM_OC3_SetConfig+0xae>
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	4a1b      	ldr	r2, [pc, #108]	; (800c758 <TIM_OC3_SetConfig+0x100>)
 800c6ea:	4293      	cmp	r3, r2
 800c6ec:	d00b      	beq.n	800c706 <TIM_OC3_SetConfig+0xae>
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	4a1a      	ldr	r2, [pc, #104]	; (800c75c <TIM_OC3_SetConfig+0x104>)
 800c6f2:	4293      	cmp	r3, r2
 800c6f4:	d007      	beq.n	800c706 <TIM_OC3_SetConfig+0xae>
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	4a19      	ldr	r2, [pc, #100]	; (800c760 <TIM_OC3_SetConfig+0x108>)
 800c6fa:	4293      	cmp	r3, r2
 800c6fc:	d003      	beq.n	800c706 <TIM_OC3_SetConfig+0xae>
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	4a18      	ldr	r2, [pc, #96]	; (800c764 <TIM_OC3_SetConfig+0x10c>)
 800c702:	4293      	cmp	r3, r2
 800c704:	d113      	bne.n	800c72e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c706:	693b      	ldr	r3, [r7, #16]
 800c708:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c70c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c70e:	693b      	ldr	r3, [r7, #16]
 800c710:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c714:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c716:	683b      	ldr	r3, [r7, #0]
 800c718:	695b      	ldr	r3, [r3, #20]
 800c71a:	011b      	lsls	r3, r3, #4
 800c71c:	693a      	ldr	r2, [r7, #16]
 800c71e:	4313      	orrs	r3, r2
 800c720:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c722:	683b      	ldr	r3, [r7, #0]
 800c724:	699b      	ldr	r3, [r3, #24]
 800c726:	011b      	lsls	r3, r3, #4
 800c728:	693a      	ldr	r2, [r7, #16]
 800c72a:	4313      	orrs	r3, r2
 800c72c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	693a      	ldr	r2, [r7, #16]
 800c732:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	68fa      	ldr	r2, [r7, #12]
 800c738:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c73a:	683b      	ldr	r3, [r7, #0]
 800c73c:	685a      	ldr	r2, [r3, #4]
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	697a      	ldr	r2, [r7, #20]
 800c746:	621a      	str	r2, [r3, #32]
}
 800c748:	bf00      	nop
 800c74a:	371c      	adds	r7, #28
 800c74c:	46bd      	mov	sp, r7
 800c74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c752:	4770      	bx	lr
 800c754:	40012c00 	.word	0x40012c00
 800c758:	40013400 	.word	0x40013400
 800c75c:	40014000 	.word	0x40014000
 800c760:	40014400 	.word	0x40014400
 800c764:	40014800 	.word	0x40014800

0800c768 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c768:	b480      	push	{r7}
 800c76a:	b087      	sub	sp, #28
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
 800c770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	6a1b      	ldr	r3, [r3, #32]
 800c776:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	6a1b      	ldr	r3, [r3, #32]
 800c782:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	685b      	ldr	r3, [r3, #4]
 800c788:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	69db      	ldr	r3, [r3, #28]
 800c78e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c796:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c79a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c7a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	021b      	lsls	r3, r3, #8
 800c7aa:	68fa      	ldr	r2, [r7, #12]
 800c7ac:	4313      	orrs	r3, r2
 800c7ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c7b0:	697b      	ldr	r3, [r7, #20]
 800c7b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c7b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c7b8:	683b      	ldr	r3, [r7, #0]
 800c7ba:	689b      	ldr	r3, [r3, #8]
 800c7bc:	031b      	lsls	r3, r3, #12
 800c7be:	697a      	ldr	r2, [r7, #20]
 800c7c0:	4313      	orrs	r3, r2
 800c7c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	4a28      	ldr	r2, [pc, #160]	; (800c868 <TIM_OC4_SetConfig+0x100>)
 800c7c8:	4293      	cmp	r3, r2
 800c7ca:	d003      	beq.n	800c7d4 <TIM_OC4_SetConfig+0x6c>
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	4a27      	ldr	r2, [pc, #156]	; (800c86c <TIM_OC4_SetConfig+0x104>)
 800c7d0:	4293      	cmp	r3, r2
 800c7d2:	d10d      	bne.n	800c7f0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800c7d4:	697b      	ldr	r3, [r7, #20]
 800c7d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c7da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	68db      	ldr	r3, [r3, #12]
 800c7e0:	031b      	lsls	r3, r3, #12
 800c7e2:	697a      	ldr	r2, [r7, #20]
 800c7e4:	4313      	orrs	r3, r2
 800c7e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800c7e8:	697b      	ldr	r3, [r7, #20]
 800c7ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c7ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	4a1d      	ldr	r2, [pc, #116]	; (800c868 <TIM_OC4_SetConfig+0x100>)
 800c7f4:	4293      	cmp	r3, r2
 800c7f6:	d00f      	beq.n	800c818 <TIM_OC4_SetConfig+0xb0>
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	4a1c      	ldr	r2, [pc, #112]	; (800c86c <TIM_OC4_SetConfig+0x104>)
 800c7fc:	4293      	cmp	r3, r2
 800c7fe:	d00b      	beq.n	800c818 <TIM_OC4_SetConfig+0xb0>
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	4a1b      	ldr	r2, [pc, #108]	; (800c870 <TIM_OC4_SetConfig+0x108>)
 800c804:	4293      	cmp	r3, r2
 800c806:	d007      	beq.n	800c818 <TIM_OC4_SetConfig+0xb0>
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	4a1a      	ldr	r2, [pc, #104]	; (800c874 <TIM_OC4_SetConfig+0x10c>)
 800c80c:	4293      	cmp	r3, r2
 800c80e:	d003      	beq.n	800c818 <TIM_OC4_SetConfig+0xb0>
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	4a19      	ldr	r2, [pc, #100]	; (800c878 <TIM_OC4_SetConfig+0x110>)
 800c814:	4293      	cmp	r3, r2
 800c816:	d113      	bne.n	800c840 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c818:	693b      	ldr	r3, [r7, #16]
 800c81a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c81e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c826:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	695b      	ldr	r3, [r3, #20]
 800c82c:	019b      	lsls	r3, r3, #6
 800c82e:	693a      	ldr	r2, [r7, #16]
 800c830:	4313      	orrs	r3, r2
 800c832:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	699b      	ldr	r3, [r3, #24]
 800c838:	019b      	lsls	r3, r3, #6
 800c83a:	693a      	ldr	r2, [r7, #16]
 800c83c:	4313      	orrs	r3, r2
 800c83e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	693a      	ldr	r2, [r7, #16]
 800c844:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	68fa      	ldr	r2, [r7, #12]
 800c84a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	685a      	ldr	r2, [r3, #4]
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	697a      	ldr	r2, [r7, #20]
 800c858:	621a      	str	r2, [r3, #32]
}
 800c85a:	bf00      	nop
 800c85c:	371c      	adds	r7, #28
 800c85e:	46bd      	mov	sp, r7
 800c860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c864:	4770      	bx	lr
 800c866:	bf00      	nop
 800c868:	40012c00 	.word	0x40012c00
 800c86c:	40013400 	.word	0x40013400
 800c870:	40014000 	.word	0x40014000
 800c874:	40014400 	.word	0x40014400
 800c878:	40014800 	.word	0x40014800

0800c87c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c87c:	b480      	push	{r7}
 800c87e:	b087      	sub	sp, #28
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
 800c884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	6a1b      	ldr	r3, [r3, #32]
 800c88a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	6a1b      	ldr	r3, [r3, #32]
 800c896:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	685b      	ldr	r3, [r3, #4]
 800c89c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c8aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c8ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c8b0:	683b      	ldr	r3, [r7, #0]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	68fa      	ldr	r2, [r7, #12]
 800c8b6:	4313      	orrs	r3, r2
 800c8b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c8ba:	693b      	ldr	r3, [r7, #16]
 800c8bc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c8c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	689b      	ldr	r3, [r3, #8]
 800c8c6:	041b      	lsls	r3, r3, #16
 800c8c8:	693a      	ldr	r2, [r7, #16]
 800c8ca:	4313      	orrs	r3, r2
 800c8cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	4a17      	ldr	r2, [pc, #92]	; (800c930 <TIM_OC5_SetConfig+0xb4>)
 800c8d2:	4293      	cmp	r3, r2
 800c8d4:	d00f      	beq.n	800c8f6 <TIM_OC5_SetConfig+0x7a>
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	4a16      	ldr	r2, [pc, #88]	; (800c934 <TIM_OC5_SetConfig+0xb8>)
 800c8da:	4293      	cmp	r3, r2
 800c8dc:	d00b      	beq.n	800c8f6 <TIM_OC5_SetConfig+0x7a>
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	4a15      	ldr	r2, [pc, #84]	; (800c938 <TIM_OC5_SetConfig+0xbc>)
 800c8e2:	4293      	cmp	r3, r2
 800c8e4:	d007      	beq.n	800c8f6 <TIM_OC5_SetConfig+0x7a>
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	4a14      	ldr	r2, [pc, #80]	; (800c93c <TIM_OC5_SetConfig+0xc0>)
 800c8ea:	4293      	cmp	r3, r2
 800c8ec:	d003      	beq.n	800c8f6 <TIM_OC5_SetConfig+0x7a>
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	4a13      	ldr	r2, [pc, #76]	; (800c940 <TIM_OC5_SetConfig+0xc4>)
 800c8f2:	4293      	cmp	r3, r2
 800c8f4:	d109      	bne.n	800c90a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c8f6:	697b      	ldr	r3, [r7, #20]
 800c8f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c8fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	695b      	ldr	r3, [r3, #20]
 800c902:	021b      	lsls	r3, r3, #8
 800c904:	697a      	ldr	r2, [r7, #20]
 800c906:	4313      	orrs	r3, r2
 800c908:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	697a      	ldr	r2, [r7, #20]
 800c90e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	68fa      	ldr	r2, [r7, #12]
 800c914:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c916:	683b      	ldr	r3, [r7, #0]
 800c918:	685a      	ldr	r2, [r3, #4]
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	693a      	ldr	r2, [r7, #16]
 800c922:	621a      	str	r2, [r3, #32]
}
 800c924:	bf00      	nop
 800c926:	371c      	adds	r7, #28
 800c928:	46bd      	mov	sp, r7
 800c92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92e:	4770      	bx	lr
 800c930:	40012c00 	.word	0x40012c00
 800c934:	40013400 	.word	0x40013400
 800c938:	40014000 	.word	0x40014000
 800c93c:	40014400 	.word	0x40014400
 800c940:	40014800 	.word	0x40014800

0800c944 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c944:	b480      	push	{r7}
 800c946:	b087      	sub	sp, #28
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
 800c94c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	6a1b      	ldr	r3, [r3, #32]
 800c952:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	6a1b      	ldr	r3, [r3, #32]
 800c95e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	685b      	ldr	r3, [r3, #4]
 800c964:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c96a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c972:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c976:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	021b      	lsls	r3, r3, #8
 800c97e:	68fa      	ldr	r2, [r7, #12]
 800c980:	4313      	orrs	r3, r2
 800c982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c984:	693b      	ldr	r3, [r7, #16]
 800c986:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c98a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	689b      	ldr	r3, [r3, #8]
 800c990:	051b      	lsls	r3, r3, #20
 800c992:	693a      	ldr	r2, [r7, #16]
 800c994:	4313      	orrs	r3, r2
 800c996:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	4a18      	ldr	r2, [pc, #96]	; (800c9fc <TIM_OC6_SetConfig+0xb8>)
 800c99c:	4293      	cmp	r3, r2
 800c99e:	d00f      	beq.n	800c9c0 <TIM_OC6_SetConfig+0x7c>
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	4a17      	ldr	r2, [pc, #92]	; (800ca00 <TIM_OC6_SetConfig+0xbc>)
 800c9a4:	4293      	cmp	r3, r2
 800c9a6:	d00b      	beq.n	800c9c0 <TIM_OC6_SetConfig+0x7c>
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	4a16      	ldr	r2, [pc, #88]	; (800ca04 <TIM_OC6_SetConfig+0xc0>)
 800c9ac:	4293      	cmp	r3, r2
 800c9ae:	d007      	beq.n	800c9c0 <TIM_OC6_SetConfig+0x7c>
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	4a15      	ldr	r2, [pc, #84]	; (800ca08 <TIM_OC6_SetConfig+0xc4>)
 800c9b4:	4293      	cmp	r3, r2
 800c9b6:	d003      	beq.n	800c9c0 <TIM_OC6_SetConfig+0x7c>
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	4a14      	ldr	r2, [pc, #80]	; (800ca0c <TIM_OC6_SetConfig+0xc8>)
 800c9bc:	4293      	cmp	r3, r2
 800c9be:	d109      	bne.n	800c9d4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c9c0:	697b      	ldr	r3, [r7, #20]
 800c9c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c9c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	695b      	ldr	r3, [r3, #20]
 800c9cc:	029b      	lsls	r3, r3, #10
 800c9ce:	697a      	ldr	r2, [r7, #20]
 800c9d0:	4313      	orrs	r3, r2
 800c9d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	697a      	ldr	r2, [r7, #20]
 800c9d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	68fa      	ldr	r2, [r7, #12]
 800c9de:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	685a      	ldr	r2, [r3, #4]
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	693a      	ldr	r2, [r7, #16]
 800c9ec:	621a      	str	r2, [r3, #32]
}
 800c9ee:	bf00      	nop
 800c9f0:	371c      	adds	r7, #28
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f8:	4770      	bx	lr
 800c9fa:	bf00      	nop
 800c9fc:	40012c00 	.word	0x40012c00
 800ca00:	40013400 	.word	0x40013400
 800ca04:	40014000 	.word	0x40014000
 800ca08:	40014400 	.word	0x40014400
 800ca0c:	40014800 	.word	0x40014800

0800ca10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ca10:	b480      	push	{r7}
 800ca12:	b087      	sub	sp, #28
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	60f8      	str	r0, [r7, #12]
 800ca18:	60b9      	str	r1, [r7, #8]
 800ca1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	6a1b      	ldr	r3, [r3, #32]
 800ca20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	6a1b      	ldr	r3, [r3, #32]
 800ca26:	f023 0201 	bic.w	r2, r3, #1
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	699b      	ldr	r3, [r3, #24]
 800ca32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ca34:	693b      	ldr	r3, [r7, #16]
 800ca36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ca3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	011b      	lsls	r3, r3, #4
 800ca40:	693a      	ldr	r2, [r7, #16]
 800ca42:	4313      	orrs	r3, r2
 800ca44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ca46:	697b      	ldr	r3, [r7, #20]
 800ca48:	f023 030a 	bic.w	r3, r3, #10
 800ca4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ca4e:	697a      	ldr	r2, [r7, #20]
 800ca50:	68bb      	ldr	r3, [r7, #8]
 800ca52:	4313      	orrs	r3, r2
 800ca54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	693a      	ldr	r2, [r7, #16]
 800ca5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	697a      	ldr	r2, [r7, #20]
 800ca60:	621a      	str	r2, [r3, #32]
}
 800ca62:	bf00      	nop
 800ca64:	371c      	adds	r7, #28
 800ca66:	46bd      	mov	sp, r7
 800ca68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6c:	4770      	bx	lr

0800ca6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ca6e:	b480      	push	{r7}
 800ca70:	b087      	sub	sp, #28
 800ca72:	af00      	add	r7, sp, #0
 800ca74:	60f8      	str	r0, [r7, #12]
 800ca76:	60b9      	str	r1, [r7, #8]
 800ca78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	6a1b      	ldr	r3, [r3, #32]
 800ca7e:	f023 0210 	bic.w	r2, r3, #16
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	699b      	ldr	r3, [r3, #24]
 800ca8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	6a1b      	ldr	r3, [r3, #32]
 800ca90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ca92:	697b      	ldr	r3, [r7, #20]
 800ca94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ca98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	031b      	lsls	r3, r3, #12
 800ca9e:	697a      	ldr	r2, [r7, #20]
 800caa0:	4313      	orrs	r3, r2
 800caa2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800caa4:	693b      	ldr	r3, [r7, #16]
 800caa6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800caaa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800caac:	68bb      	ldr	r3, [r7, #8]
 800caae:	011b      	lsls	r3, r3, #4
 800cab0:	693a      	ldr	r2, [r7, #16]
 800cab2:	4313      	orrs	r3, r2
 800cab4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	697a      	ldr	r2, [r7, #20]
 800caba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	693a      	ldr	r2, [r7, #16]
 800cac0:	621a      	str	r2, [r3, #32]
}
 800cac2:	bf00      	nop
 800cac4:	371c      	adds	r7, #28
 800cac6:	46bd      	mov	sp, r7
 800cac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cacc:	4770      	bx	lr

0800cace <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cace:	b480      	push	{r7}
 800cad0:	b085      	sub	sp, #20
 800cad2:	af00      	add	r7, sp, #0
 800cad4:	6078      	str	r0, [r7, #4]
 800cad6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	689b      	ldr	r3, [r3, #8]
 800cadc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800cae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cae8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800caea:	683a      	ldr	r2, [r7, #0]
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	4313      	orrs	r3, r2
 800caf0:	f043 0307 	orr.w	r3, r3, #7
 800caf4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	68fa      	ldr	r2, [r7, #12]
 800cafa:	609a      	str	r2, [r3, #8]
}
 800cafc:	bf00      	nop
 800cafe:	3714      	adds	r7, #20
 800cb00:	46bd      	mov	sp, r7
 800cb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb06:	4770      	bx	lr

0800cb08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cb08:	b480      	push	{r7}
 800cb0a:	b087      	sub	sp, #28
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	60f8      	str	r0, [r7, #12]
 800cb10:	60b9      	str	r1, [r7, #8]
 800cb12:	607a      	str	r2, [r7, #4]
 800cb14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	689b      	ldr	r3, [r3, #8]
 800cb1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cb1c:	697b      	ldr	r3, [r7, #20]
 800cb1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cb22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	021a      	lsls	r2, r3, #8
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	431a      	orrs	r2, r3
 800cb2c:	68bb      	ldr	r3, [r7, #8]
 800cb2e:	4313      	orrs	r3, r2
 800cb30:	697a      	ldr	r2, [r7, #20]
 800cb32:	4313      	orrs	r3, r2
 800cb34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	697a      	ldr	r2, [r7, #20]
 800cb3a:	609a      	str	r2, [r3, #8]
}
 800cb3c:	bf00      	nop
 800cb3e:	371c      	adds	r7, #28
 800cb40:	46bd      	mov	sp, r7
 800cb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb46:	4770      	bx	lr

0800cb48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cb48:	b480      	push	{r7}
 800cb4a:	b087      	sub	sp, #28
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	60f8      	str	r0, [r7, #12]
 800cb50:	60b9      	str	r1, [r7, #8]
 800cb52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cb54:	68bb      	ldr	r3, [r7, #8]
 800cb56:	f003 031f 	and.w	r3, r3, #31
 800cb5a:	2201      	movs	r2, #1
 800cb5c:	fa02 f303 	lsl.w	r3, r2, r3
 800cb60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	6a1a      	ldr	r2, [r3, #32]
 800cb66:	697b      	ldr	r3, [r7, #20]
 800cb68:	43db      	mvns	r3, r3
 800cb6a:	401a      	ands	r2, r3
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	6a1a      	ldr	r2, [r3, #32]
 800cb74:	68bb      	ldr	r3, [r7, #8]
 800cb76:	f003 031f 	and.w	r3, r3, #31
 800cb7a:	6879      	ldr	r1, [r7, #4]
 800cb7c:	fa01 f303 	lsl.w	r3, r1, r3
 800cb80:	431a      	orrs	r2, r3
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	621a      	str	r2, [r3, #32]
}
 800cb86:	bf00      	nop
 800cb88:	371c      	adds	r7, #28
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb90:	4770      	bx	lr
	...

0800cb94 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b084      	sub	sp, #16
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
 800cb9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d109      	bne.n	800cbb8 <HAL_TIMEx_PWMN_Start+0x24>
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cbaa:	b2db      	uxtb	r3, r3
 800cbac:	2b01      	cmp	r3, #1
 800cbae:	bf14      	ite	ne
 800cbb0:	2301      	movne	r3, #1
 800cbb2:	2300      	moveq	r3, #0
 800cbb4:	b2db      	uxtb	r3, r3
 800cbb6:	e022      	b.n	800cbfe <HAL_TIMEx_PWMN_Start+0x6a>
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	2b04      	cmp	r3, #4
 800cbbc:	d109      	bne.n	800cbd2 <HAL_TIMEx_PWMN_Start+0x3e>
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cbc4:	b2db      	uxtb	r3, r3
 800cbc6:	2b01      	cmp	r3, #1
 800cbc8:	bf14      	ite	ne
 800cbca:	2301      	movne	r3, #1
 800cbcc:	2300      	moveq	r3, #0
 800cbce:	b2db      	uxtb	r3, r3
 800cbd0:	e015      	b.n	800cbfe <HAL_TIMEx_PWMN_Start+0x6a>
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	2b08      	cmp	r3, #8
 800cbd6:	d109      	bne.n	800cbec <HAL_TIMEx_PWMN_Start+0x58>
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800cbde:	b2db      	uxtb	r3, r3
 800cbe0:	2b01      	cmp	r3, #1
 800cbe2:	bf14      	ite	ne
 800cbe4:	2301      	movne	r3, #1
 800cbe6:	2300      	moveq	r3, #0
 800cbe8:	b2db      	uxtb	r3, r3
 800cbea:	e008      	b.n	800cbfe <HAL_TIMEx_PWMN_Start+0x6a>
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800cbf2:	b2db      	uxtb	r3, r3
 800cbf4:	2b01      	cmp	r3, #1
 800cbf6:	bf14      	ite	ne
 800cbf8:	2301      	movne	r3, #1
 800cbfa:	2300      	moveq	r3, #0
 800cbfc:	b2db      	uxtb	r3, r3
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d001      	beq.n	800cc06 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800cc02:	2301      	movs	r3, #1
 800cc04:	e069      	b.n	800ccda <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d104      	bne.n	800cc16 <HAL_TIMEx_PWMN_Start+0x82>
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2202      	movs	r2, #2
 800cc10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cc14:	e013      	b.n	800cc3e <HAL_TIMEx_PWMN_Start+0xaa>
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	2b04      	cmp	r3, #4
 800cc1a:	d104      	bne.n	800cc26 <HAL_TIMEx_PWMN_Start+0x92>
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2202      	movs	r2, #2
 800cc20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cc24:	e00b      	b.n	800cc3e <HAL_TIMEx_PWMN_Start+0xaa>
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	2b08      	cmp	r3, #8
 800cc2a:	d104      	bne.n	800cc36 <HAL_TIMEx_PWMN_Start+0xa2>
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2202      	movs	r2, #2
 800cc30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cc34:	e003      	b.n	800cc3e <HAL_TIMEx_PWMN_Start+0xaa>
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2202      	movs	r2, #2
 800cc3a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	2204      	movs	r2, #4
 800cc44:	6839      	ldr	r1, [r7, #0]
 800cc46:	4618      	mov	r0, r3
 800cc48:	f000 fa1e 	bl	800d088 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cc5a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	4a20      	ldr	r2, [pc, #128]	; (800cce4 <HAL_TIMEx_PWMN_Start+0x150>)
 800cc62:	4293      	cmp	r3, r2
 800cc64:	d018      	beq.n	800cc98 <HAL_TIMEx_PWMN_Start+0x104>
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc6e:	d013      	beq.n	800cc98 <HAL_TIMEx_PWMN_Start+0x104>
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	4a1c      	ldr	r2, [pc, #112]	; (800cce8 <HAL_TIMEx_PWMN_Start+0x154>)
 800cc76:	4293      	cmp	r3, r2
 800cc78:	d00e      	beq.n	800cc98 <HAL_TIMEx_PWMN_Start+0x104>
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	4a1b      	ldr	r2, [pc, #108]	; (800ccec <HAL_TIMEx_PWMN_Start+0x158>)
 800cc80:	4293      	cmp	r3, r2
 800cc82:	d009      	beq.n	800cc98 <HAL_TIMEx_PWMN_Start+0x104>
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	4a19      	ldr	r2, [pc, #100]	; (800ccf0 <HAL_TIMEx_PWMN_Start+0x15c>)
 800cc8a:	4293      	cmp	r3, r2
 800cc8c:	d004      	beq.n	800cc98 <HAL_TIMEx_PWMN_Start+0x104>
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	4a18      	ldr	r2, [pc, #96]	; (800ccf4 <HAL_TIMEx_PWMN_Start+0x160>)
 800cc94:	4293      	cmp	r3, r2
 800cc96:	d115      	bne.n	800ccc4 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	689a      	ldr	r2, [r3, #8]
 800cc9e:	4b16      	ldr	r3, [pc, #88]	; (800ccf8 <HAL_TIMEx_PWMN_Start+0x164>)
 800cca0:	4013      	ands	r3, r2
 800cca2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	2b06      	cmp	r3, #6
 800cca8:	d015      	beq.n	800ccd6 <HAL_TIMEx_PWMN_Start+0x142>
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ccb0:	d011      	beq.n	800ccd6 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	681a      	ldr	r2, [r3, #0]
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	f042 0201 	orr.w	r2, r2, #1
 800ccc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ccc2:	e008      	b.n	800ccd6 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	681a      	ldr	r2, [r3, #0]
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	f042 0201 	orr.w	r2, r2, #1
 800ccd2:	601a      	str	r2, [r3, #0]
 800ccd4:	e000      	b.n	800ccd8 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ccd6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ccd8:	2300      	movs	r3, #0
}
 800ccda:	4618      	mov	r0, r3
 800ccdc:	3710      	adds	r7, #16
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}
 800cce2:	bf00      	nop
 800cce4:	40012c00 	.word	0x40012c00
 800cce8:	40000400 	.word	0x40000400
 800ccec:	40000800 	.word	0x40000800
 800ccf0:	40013400 	.word	0x40013400
 800ccf4:	40014000 	.word	0x40014000
 800ccf8:	00010007 	.word	0x00010007

0800ccfc <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b082      	sub	sp, #8
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
 800cd04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	6839      	ldr	r1, [r7, #0]
 800cd0e:	4618      	mov	r0, r3
 800cd10:	f000 f9ba 	bl	800d088 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	6a1a      	ldr	r2, [r3, #32]
 800cd1a:	f241 1311 	movw	r3, #4369	; 0x1111
 800cd1e:	4013      	ands	r3, r2
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d10f      	bne.n	800cd44 <HAL_TIMEx_PWMN_Stop+0x48>
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	6a1a      	ldr	r2, [r3, #32]
 800cd2a:	f244 4344 	movw	r3, #17476	; 0x4444
 800cd2e:	4013      	ands	r3, r2
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d107      	bne.n	800cd44 <HAL_TIMEx_PWMN_Stop+0x48>
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cd42:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	6a1a      	ldr	r2, [r3, #32]
 800cd4a:	f241 1311 	movw	r3, #4369	; 0x1111
 800cd4e:	4013      	ands	r3, r2
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d10f      	bne.n	800cd74 <HAL_TIMEx_PWMN_Stop+0x78>
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	6a1a      	ldr	r2, [r3, #32]
 800cd5a:	f244 4344 	movw	r3, #17476	; 0x4444
 800cd5e:	4013      	ands	r3, r2
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d107      	bne.n	800cd74 <HAL_TIMEx_PWMN_Stop+0x78>
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	681a      	ldr	r2, [r3, #0]
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	f022 0201 	bic.w	r2, r2, #1
 800cd72:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d104      	bne.n	800cd84 <HAL_TIMEx_PWMN_Stop+0x88>
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	2201      	movs	r2, #1
 800cd7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cd82:	e013      	b.n	800cdac <HAL_TIMEx_PWMN_Stop+0xb0>
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	2b04      	cmp	r3, #4
 800cd88:	d104      	bne.n	800cd94 <HAL_TIMEx_PWMN_Stop+0x98>
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	2201      	movs	r2, #1
 800cd8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cd92:	e00b      	b.n	800cdac <HAL_TIMEx_PWMN_Stop+0xb0>
 800cd94:	683b      	ldr	r3, [r7, #0]
 800cd96:	2b08      	cmp	r3, #8
 800cd98:	d104      	bne.n	800cda4 <HAL_TIMEx_PWMN_Stop+0xa8>
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	2201      	movs	r2, #1
 800cd9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cda2:	e003      	b.n	800cdac <HAL_TIMEx_PWMN_Stop+0xb0>
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2201      	movs	r2, #1
 800cda8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 800cdac:	2300      	movs	r3, #0
}
 800cdae:	4618      	mov	r0, r3
 800cdb0:	3708      	adds	r7, #8
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	bd80      	pop	{r7, pc}
	...

0800cdb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cdb8:	b480      	push	{r7}
 800cdba:	b085      	sub	sp, #20
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
 800cdc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cdc8:	2b01      	cmp	r3, #1
 800cdca:	d101      	bne.n	800cdd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cdcc:	2302      	movs	r3, #2
 800cdce:	e065      	b.n	800ce9c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2201      	movs	r2, #1
 800cdd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	2202      	movs	r2, #2
 800cddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	685b      	ldr	r3, [r3, #4]
 800cde6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	689b      	ldr	r3, [r3, #8]
 800cdee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	4a2c      	ldr	r2, [pc, #176]	; (800cea8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800cdf6:	4293      	cmp	r3, r2
 800cdf8:	d004      	beq.n	800ce04 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	4a2b      	ldr	r2, [pc, #172]	; (800ceac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ce00:	4293      	cmp	r3, r2
 800ce02:	d108      	bne.n	800ce16 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ce0a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ce0c:	683b      	ldr	r3, [r7, #0]
 800ce0e:	685b      	ldr	r3, [r3, #4]
 800ce10:	68fa      	ldr	r2, [r7, #12]
 800ce12:	4313      	orrs	r3, r2
 800ce14:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800ce1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce20:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ce22:	683b      	ldr	r3, [r7, #0]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	68fa      	ldr	r2, [r7, #12]
 800ce28:	4313      	orrs	r3, r2
 800ce2a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	68fa      	ldr	r2, [r7, #12]
 800ce32:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	4a1b      	ldr	r2, [pc, #108]	; (800cea8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ce3a:	4293      	cmp	r3, r2
 800ce3c:	d018      	beq.n	800ce70 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce46:	d013      	beq.n	800ce70 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	4a18      	ldr	r2, [pc, #96]	; (800ceb0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800ce4e:	4293      	cmp	r3, r2
 800ce50:	d00e      	beq.n	800ce70 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	4a17      	ldr	r2, [pc, #92]	; (800ceb4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800ce58:	4293      	cmp	r3, r2
 800ce5a:	d009      	beq.n	800ce70 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	4a12      	ldr	r2, [pc, #72]	; (800ceac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ce62:	4293      	cmp	r3, r2
 800ce64:	d004      	beq.n	800ce70 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	4a13      	ldr	r2, [pc, #76]	; (800ceb8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ce6c:	4293      	cmp	r3, r2
 800ce6e:	d10c      	bne.n	800ce8a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ce70:	68bb      	ldr	r3, [r7, #8]
 800ce72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ce76:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	689b      	ldr	r3, [r3, #8]
 800ce7c:	68ba      	ldr	r2, [r7, #8]
 800ce7e:	4313      	orrs	r3, r2
 800ce80:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	68ba      	ldr	r2, [r7, #8]
 800ce88:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	2201      	movs	r2, #1
 800ce8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	2200      	movs	r2, #0
 800ce96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ce9a:	2300      	movs	r3, #0
}
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	3714      	adds	r7, #20
 800cea0:	46bd      	mov	sp, r7
 800cea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea6:	4770      	bx	lr
 800cea8:	40012c00 	.word	0x40012c00
 800ceac:	40013400 	.word	0x40013400
 800ceb0:	40000400 	.word	0x40000400
 800ceb4:	40000800 	.word	0x40000800
 800ceb8:	40014000 	.word	0x40014000

0800cebc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cebc:	b480      	push	{r7}
 800cebe:	b085      	sub	sp, #20
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
 800cec4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cec6:	2300      	movs	r3, #0
 800cec8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ced0:	2b01      	cmp	r3, #1
 800ced2:	d101      	bne.n	800ced8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ced4:	2302      	movs	r3, #2
 800ced6:	e087      	b.n	800cfe8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2201      	movs	r2, #1
 800cedc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	68db      	ldr	r3, [r3, #12]
 800ceea:	4313      	orrs	r3, r2
 800ceec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	689b      	ldr	r3, [r3, #8]
 800cef8:	4313      	orrs	r3, r2
 800cefa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	685b      	ldr	r3, [r3, #4]
 800cf06:	4313      	orrs	r3, r2
 800cf08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	4313      	orrs	r3, r2
 800cf16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	691b      	ldr	r3, [r3, #16]
 800cf22:	4313      	orrs	r3, r2
 800cf24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	695b      	ldr	r3, [r3, #20]
 800cf30:	4313      	orrs	r3, r2
 800cf32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800cf3a:	683b      	ldr	r3, [r7, #0]
 800cf3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf3e:	4313      	orrs	r3, r2
 800cf40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	699b      	ldr	r3, [r3, #24]
 800cf4c:	041b      	lsls	r3, r3, #16
 800cf4e:	4313      	orrs	r3, r2
 800cf50:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	4a27      	ldr	r2, [pc, #156]	; (800cff4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800cf58:	4293      	cmp	r3, r2
 800cf5a:	d004      	beq.n	800cf66 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	4a25      	ldr	r2, [pc, #148]	; (800cff8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800cf62:	4293      	cmp	r3, r2
 800cf64:	d106      	bne.n	800cf74 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800cf6c:	683b      	ldr	r3, [r7, #0]
 800cf6e:	69db      	ldr	r3, [r3, #28]
 800cf70:	4313      	orrs	r3, r2
 800cf72:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	4a1e      	ldr	r2, [pc, #120]	; (800cff4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800cf7a:	4293      	cmp	r3, r2
 800cf7c:	d004      	beq.n	800cf88 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	4a1d      	ldr	r2, [pc, #116]	; (800cff8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800cf84:	4293      	cmp	r3, r2
 800cf86:	d126      	bne.n	800cfd6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf92:	051b      	lsls	r3, r3, #20
 800cf94:	4313      	orrs	r3, r2
 800cf96:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	6a1b      	ldr	r3, [r3, #32]
 800cfa2:	4313      	orrs	r3, r2
 800cfa4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfb0:	4313      	orrs	r3, r2
 800cfb2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	4a0e      	ldr	r2, [pc, #56]	; (800cff4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800cfba:	4293      	cmp	r3, r2
 800cfbc:	d004      	beq.n	800cfc8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	4a0d      	ldr	r2, [pc, #52]	; (800cff8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800cfc4:	4293      	cmp	r3, r2
 800cfc6:	d106      	bne.n	800cfd6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfd2:	4313      	orrs	r3, r2
 800cfd4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	68fa      	ldr	r2, [r7, #12]
 800cfdc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cfe6:	2300      	movs	r3, #0
}
 800cfe8:	4618      	mov	r0, r3
 800cfea:	3714      	adds	r7, #20
 800cfec:	46bd      	mov	sp, r7
 800cfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff2:	4770      	bx	lr
 800cff4:	40012c00 	.word	0x40012c00
 800cff8:	40013400 	.word	0x40013400

0800cffc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cffc:	b480      	push	{r7}
 800cffe:	b083      	sub	sp, #12
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d004:	bf00      	nop
 800d006:	370c      	adds	r7, #12
 800d008:	46bd      	mov	sp, r7
 800d00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00e:	4770      	bx	lr

0800d010 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d010:	b480      	push	{r7}
 800d012:	b083      	sub	sp, #12
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d018:	bf00      	nop
 800d01a:	370c      	adds	r7, #12
 800d01c:	46bd      	mov	sp, r7
 800d01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d022:	4770      	bx	lr

0800d024 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d024:	b480      	push	{r7}
 800d026:	b083      	sub	sp, #12
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d02c:	bf00      	nop
 800d02e:	370c      	adds	r7, #12
 800d030:	46bd      	mov	sp, r7
 800d032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d036:	4770      	bx	lr

0800d038 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800d038:	b480      	push	{r7}
 800d03a:	b083      	sub	sp, #12
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800d040:	bf00      	nop
 800d042:	370c      	adds	r7, #12
 800d044:	46bd      	mov	sp, r7
 800d046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04a:	4770      	bx	lr

0800d04c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800d04c:	b480      	push	{r7}
 800d04e:	b083      	sub	sp, #12
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800d054:	bf00      	nop
 800d056:	370c      	adds	r7, #12
 800d058:	46bd      	mov	sp, r7
 800d05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05e:	4770      	bx	lr

0800d060 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800d060:	b480      	push	{r7}
 800d062:	b083      	sub	sp, #12
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800d068:	bf00      	nop
 800d06a:	370c      	adds	r7, #12
 800d06c:	46bd      	mov	sp, r7
 800d06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d072:	4770      	bx	lr

0800d074 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800d074:	b480      	push	{r7}
 800d076:	b083      	sub	sp, #12
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800d07c:	bf00      	nop
 800d07e:	370c      	adds	r7, #12
 800d080:	46bd      	mov	sp, r7
 800d082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d086:	4770      	bx	lr

0800d088 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800d088:	b480      	push	{r7}
 800d08a:	b087      	sub	sp, #28
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	60f8      	str	r0, [r7, #12]
 800d090:	60b9      	str	r1, [r7, #8]
 800d092:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d094:	68bb      	ldr	r3, [r7, #8]
 800d096:	f003 031f 	and.w	r3, r3, #31
 800d09a:	2204      	movs	r2, #4
 800d09c:	fa02 f303 	lsl.w	r3, r2, r3
 800d0a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	6a1a      	ldr	r2, [r3, #32]
 800d0a6:	697b      	ldr	r3, [r7, #20]
 800d0a8:	43db      	mvns	r3, r3
 800d0aa:	401a      	ands	r2, r3
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	6a1a      	ldr	r2, [r3, #32]
 800d0b4:	68bb      	ldr	r3, [r7, #8]
 800d0b6:	f003 031f 	and.w	r3, r3, #31
 800d0ba:	6879      	ldr	r1, [r7, #4]
 800d0bc:	fa01 f303 	lsl.w	r3, r1, r3
 800d0c0:	431a      	orrs	r2, r3
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	621a      	str	r2, [r3, #32]
}
 800d0c6:	bf00      	nop
 800d0c8:	371c      	adds	r7, #28
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d0:	4770      	bx	lr

0800d0d2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d0d2:	b580      	push	{r7, lr}
 800d0d4:	b082      	sub	sp, #8
 800d0d6:	af00      	add	r7, sp, #0
 800d0d8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d101      	bne.n	800d0e4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d0e0:	2301      	movs	r3, #1
 800d0e2:	e042      	b.n	800d16a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d106      	bne.n	800d0fc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d0f6:	6878      	ldr	r0, [r7, #4]
 800d0f8:	f7f8 fd1c 	bl	8005b34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2224      	movs	r2, #36	; 0x24
 800d100:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	681a      	ldr	r2, [r3, #0]
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	f022 0201 	bic.w	r2, r2, #1
 800d112:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d114:	6878      	ldr	r0, [r7, #4]
 800d116:	f000 fc01 	bl	800d91c <UART_SetConfig>
 800d11a:	4603      	mov	r3, r0
 800d11c:	2b01      	cmp	r3, #1
 800d11e:	d101      	bne.n	800d124 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d120:	2301      	movs	r3, #1
 800d122:	e022      	b.n	800d16a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d002      	beq.n	800d132 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d12c:	6878      	ldr	r0, [r7, #4]
 800d12e:	f000 fec1 	bl	800deb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	685a      	ldr	r2, [r3, #4]
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d140:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	689a      	ldr	r2, [r3, #8]
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d150:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	681a      	ldr	r2, [r3, #0]
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	f042 0201 	orr.w	r2, r2, #1
 800d160:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d162:	6878      	ldr	r0, [r7, #4]
 800d164:	f000 ff48 	bl	800dff8 <UART_CheckIdleState>
 800d168:	4603      	mov	r3, r0
}
 800d16a:	4618      	mov	r0, r3
 800d16c:	3708      	adds	r7, #8
 800d16e:	46bd      	mov	sp, r7
 800d170:	bd80      	pop	{r7, pc}
	...

0800d174 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b08a      	sub	sp, #40	; 0x28
 800d178:	af00      	add	r7, sp, #0
 800d17a:	60f8      	str	r0, [r7, #12]
 800d17c:	60b9      	str	r1, [r7, #8]
 800d17e:	4613      	mov	r3, r2
 800d180:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d188:	2b20      	cmp	r3, #32
 800d18a:	d17a      	bne.n	800d282 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d18c:	68bb      	ldr	r3, [r7, #8]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d002      	beq.n	800d198 <HAL_UART_Transmit_DMA+0x24>
 800d192:	88fb      	ldrh	r3, [r7, #6]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d101      	bne.n	800d19c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800d198:	2301      	movs	r3, #1
 800d19a:	e073      	b.n	800d284 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d1a2:	2b01      	cmp	r3, #1
 800d1a4:	d101      	bne.n	800d1aa <HAL_UART_Transmit_DMA+0x36>
 800d1a6:	2302      	movs	r3, #2
 800d1a8:	e06c      	b.n	800d284 <HAL_UART_Transmit_DMA+0x110>
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	2201      	movs	r2, #1
 800d1ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	68ba      	ldr	r2, [r7, #8]
 800d1b6:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	88fa      	ldrh	r2, [r7, #6]
 800d1bc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	88fa      	ldrh	r2, [r7, #6]
 800d1c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	2221      	movs	r2, #33	; 0x21
 800d1d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d02c      	beq.n	800d23a <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d1e4:	4a29      	ldr	r2, [pc, #164]	; (800d28c <HAL_UART_Transmit_DMA+0x118>)
 800d1e6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d1ec:	4a28      	ldr	r2, [pc, #160]	; (800d290 <HAL_UART_Transmit_DMA+0x11c>)
 800d1ee:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d1f4:	4a27      	ldr	r2, [pc, #156]	; (800d294 <HAL_UART_Transmit_DMA+0x120>)
 800d1f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d208:	4619      	mov	r1, r3
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	3328      	adds	r3, #40	; 0x28
 800d210:	461a      	mov	r2, r3
 800d212:	88fb      	ldrh	r3, [r7, #6]
 800d214:	f7fa fe98 	bl	8007f48 <HAL_DMA_Start_IT>
 800d218:	4603      	mov	r3, r0
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d00d      	beq.n	800d23a <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	2210      	movs	r2, #16
 800d222:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	2200      	movs	r2, #0
 800d22a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	2220      	movs	r2, #32
 800d232:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800d236:	2301      	movs	r3, #1
 800d238:	e024      	b.n	800d284 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	2240      	movs	r2, #64	; 0x40
 800d240:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	2200      	movs	r2, #0
 800d246:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	3308      	adds	r3, #8
 800d250:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d252:	697b      	ldr	r3, [r7, #20]
 800d254:	e853 3f00 	ldrex	r3, [r3]
 800d258:	613b      	str	r3, [r7, #16]
   return(result);
 800d25a:	693b      	ldr	r3, [r7, #16]
 800d25c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d260:	627b      	str	r3, [r7, #36]	; 0x24
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	3308      	adds	r3, #8
 800d268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d26a:	623a      	str	r2, [r7, #32]
 800d26c:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d26e:	69f9      	ldr	r1, [r7, #28]
 800d270:	6a3a      	ldr	r2, [r7, #32]
 800d272:	e841 2300 	strex	r3, r2, [r1]
 800d276:	61bb      	str	r3, [r7, #24]
   return(result);
 800d278:	69bb      	ldr	r3, [r7, #24]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d1e5      	bne.n	800d24a <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800d27e:	2300      	movs	r3, #0
 800d280:	e000      	b.n	800d284 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800d282:	2302      	movs	r3, #2
  }
}
 800d284:	4618      	mov	r0, r3
 800d286:	3728      	adds	r7, #40	; 0x28
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd80      	pop	{r7, pc}
 800d28c:	0800e36d 	.word	0x0800e36d
 800d290:	0800e407 	.word	0x0800e407
 800d294:	0800e423 	.word	0x0800e423

0800d298 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b0ba      	sub	sp, #232	; 0xe8
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	69db      	ldr	r3, [r3, #28]
 800d2a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	689b      	ldr	r3, [r3, #8]
 800d2ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d2be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d2c2:	f640 030f 	movw	r3, #2063	; 0x80f
 800d2c6:	4013      	ands	r3, r2
 800d2c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d2cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d11b      	bne.n	800d30c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d2d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d2d8:	f003 0320 	and.w	r3, r3, #32
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d015      	beq.n	800d30c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d2e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d2e4:	f003 0320 	and.w	r3, r3, #32
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d105      	bne.n	800d2f8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d2ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d2f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d009      	beq.n	800d30c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	f000 82d6 	beq.w	800d8ae <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d306:	6878      	ldr	r0, [r7, #4]
 800d308:	4798      	blx	r3
      }
      return;
 800d30a:	e2d0      	b.n	800d8ae <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d30c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d310:	2b00      	cmp	r3, #0
 800d312:	f000 811f 	beq.w	800d554 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d316:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d31a:	4b8b      	ldr	r3, [pc, #556]	; (800d548 <HAL_UART_IRQHandler+0x2b0>)
 800d31c:	4013      	ands	r3, r2
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d106      	bne.n	800d330 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d322:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d326:	4b89      	ldr	r3, [pc, #548]	; (800d54c <HAL_UART_IRQHandler+0x2b4>)
 800d328:	4013      	ands	r3, r2
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	f000 8112 	beq.w	800d554 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d334:	f003 0301 	and.w	r3, r3, #1
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d011      	beq.n	800d360 <HAL_UART_IRQHandler+0xc8>
 800d33c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d344:	2b00      	cmp	r3, #0
 800d346:	d00b      	beq.n	800d360 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	2201      	movs	r2, #1
 800d34e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d356:	f043 0201 	orr.w	r2, r3, #1
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d364:	f003 0302 	and.w	r3, r3, #2
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d011      	beq.n	800d390 <HAL_UART_IRQHandler+0xf8>
 800d36c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d370:	f003 0301 	and.w	r3, r3, #1
 800d374:	2b00      	cmp	r3, #0
 800d376:	d00b      	beq.n	800d390 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	2202      	movs	r2, #2
 800d37e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d386:	f043 0204 	orr.w	r2, r3, #4
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d394:	f003 0304 	and.w	r3, r3, #4
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d011      	beq.n	800d3c0 <HAL_UART_IRQHandler+0x128>
 800d39c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d3a0:	f003 0301 	and.w	r3, r3, #1
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d00b      	beq.n	800d3c0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	2204      	movs	r2, #4
 800d3ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d3b6:	f043 0202 	orr.w	r2, r3, #2
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d3c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d3c4:	f003 0308 	and.w	r3, r3, #8
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d017      	beq.n	800d3fc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d3cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d3d0:	f003 0320 	and.w	r3, r3, #32
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d105      	bne.n	800d3e4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d3d8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d3dc:	4b5a      	ldr	r3, [pc, #360]	; (800d548 <HAL_UART_IRQHandler+0x2b0>)
 800d3de:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d00b      	beq.n	800d3fc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	2208      	movs	r2, #8
 800d3ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d3f2:	f043 0208 	orr.w	r2, r3, #8
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d3fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d400:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d404:	2b00      	cmp	r3, #0
 800d406:	d012      	beq.n	800d42e <HAL_UART_IRQHandler+0x196>
 800d408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d40c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d410:	2b00      	cmp	r3, #0
 800d412:	d00c      	beq.n	800d42e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d41c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d424:	f043 0220 	orr.w	r2, r3, #32
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d434:	2b00      	cmp	r3, #0
 800d436:	f000 823c 	beq.w	800d8b2 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d43a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d43e:	f003 0320 	and.w	r3, r3, #32
 800d442:	2b00      	cmp	r3, #0
 800d444:	d013      	beq.n	800d46e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d446:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d44a:	f003 0320 	and.w	r3, r3, #32
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d105      	bne.n	800d45e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d452:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d007      	beq.n	800d46e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d462:	2b00      	cmp	r3, #0
 800d464:	d003      	beq.n	800d46e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d46a:	6878      	ldr	r0, [r7, #4]
 800d46c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d474:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	689b      	ldr	r3, [r3, #8]
 800d47e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d482:	2b40      	cmp	r3, #64	; 0x40
 800d484:	d005      	beq.n	800d492 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d486:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d48a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d04f      	beq.n	800d532 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d492:	6878      	ldr	r0, [r7, #4]
 800d494:	f000 ff04 	bl	800e2a0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	689b      	ldr	r3, [r3, #8]
 800d49e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4a2:	2b40      	cmp	r3, #64	; 0x40
 800d4a4:	d141      	bne.n	800d52a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	3308      	adds	r3, #8
 800d4ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d4b4:	e853 3f00 	ldrex	r3, [r3]
 800d4b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d4bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d4c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d4c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	3308      	adds	r3, #8
 800d4ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d4d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d4d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d4de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d4e2:	e841 2300 	strex	r3, r2, [r1]
 800d4e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d4ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d1d9      	bne.n	800d4a6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d013      	beq.n	800d522 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d4fe:	4a14      	ldr	r2, [pc, #80]	; (800d550 <HAL_UART_IRQHandler+0x2b8>)
 800d500:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d506:	4618      	mov	r0, r3
 800d508:	f7fa fdf2 	bl	80080f0 <HAL_DMA_Abort_IT>
 800d50c:	4603      	mov	r3, r0
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d017      	beq.n	800d542 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d518:	687a      	ldr	r2, [r7, #4]
 800d51a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800d51c:	4610      	mov	r0, r2
 800d51e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d520:	e00f      	b.n	800d542 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d522:	6878      	ldr	r0, [r7, #4]
 800d524:	f000 f9e4 	bl	800d8f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d528:	e00b      	b.n	800d542 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d52a:	6878      	ldr	r0, [r7, #4]
 800d52c:	f000 f9e0 	bl	800d8f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d530:	e007      	b.n	800d542 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d532:	6878      	ldr	r0, [r7, #4]
 800d534:	f000 f9dc 	bl	800d8f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2200      	movs	r2, #0
 800d53c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800d540:	e1b7      	b.n	800d8b2 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d542:	bf00      	nop
    return;
 800d544:	e1b5      	b.n	800d8b2 <HAL_UART_IRQHandler+0x61a>
 800d546:	bf00      	nop
 800d548:	10000001 	.word	0x10000001
 800d54c:	04000120 	.word	0x04000120
 800d550:	0800e4a3 	.word	0x0800e4a3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d558:	2b01      	cmp	r3, #1
 800d55a:	f040 814a 	bne.w	800d7f2 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d55e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d562:	f003 0310 	and.w	r3, r3, #16
 800d566:	2b00      	cmp	r3, #0
 800d568:	f000 8143 	beq.w	800d7f2 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d56c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d570:	f003 0310 	and.w	r3, r3, #16
 800d574:	2b00      	cmp	r3, #0
 800d576:	f000 813c 	beq.w	800d7f2 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	2210      	movs	r2, #16
 800d580:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	689b      	ldr	r3, [r3, #8]
 800d588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d58c:	2b40      	cmp	r3, #64	; 0x40
 800d58e:	f040 80b5 	bne.w	800d6fc <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	685b      	ldr	r3, [r3, #4]
 800d59a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d59e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	f000 8187 	beq.w	800d8b6 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d5ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d5b2:	429a      	cmp	r2, r3
 800d5b4:	f080 817f 	bcs.w	800d8b6 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d5be:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	f003 0320 	and.w	r3, r3, #32
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	f040 8086 	bne.w	800d6e0 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d5e0:	e853 3f00 	ldrex	r3, [r3]
 800d5e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d5e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d5ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d5f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	461a      	mov	r2, r3
 800d5fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d5fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d602:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d606:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d60a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d60e:	e841 2300 	strex	r3, r2, [r1]
 800d612:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d616:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d1da      	bne.n	800d5d4 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	3308      	adds	r3, #8
 800d624:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d626:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d628:	e853 3f00 	ldrex	r3, [r3]
 800d62c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d62e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d630:	f023 0301 	bic.w	r3, r3, #1
 800d634:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	3308      	adds	r3, #8
 800d63e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d642:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d646:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d648:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d64a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d64e:	e841 2300 	strex	r3, r2, [r1]
 800d652:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d654:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d656:	2b00      	cmp	r3, #0
 800d658:	d1e1      	bne.n	800d61e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	3308      	adds	r3, #8
 800d660:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d662:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d664:	e853 3f00 	ldrex	r3, [r3]
 800d668:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d66a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d66c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d670:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	3308      	adds	r3, #8
 800d67a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d67e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d680:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d682:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d684:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d686:	e841 2300 	strex	r3, r2, [r1]
 800d68a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d68c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d1e3      	bne.n	800d65a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	2220      	movs	r2, #32
 800d696:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	2200      	movs	r2, #0
 800d69e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6a8:	e853 3f00 	ldrex	r3, [r3]
 800d6ac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d6ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d6b0:	f023 0310 	bic.w	r3, r3, #16
 800d6b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	461a      	mov	r2, r3
 800d6be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d6c2:	65bb      	str	r3, [r7, #88]	; 0x58
 800d6c4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d6c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d6ca:	e841 2300 	strex	r3, r2, [r1]
 800d6ce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d6d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d1e4      	bne.n	800d6a0 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6da:	4618      	mov	r0, r3
 800d6dc:	f7fa fcaf 	bl	800803e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d6ec:	b29b      	uxth	r3, r3
 800d6ee:	1ad3      	subs	r3, r2, r3
 800d6f0:	b29b      	uxth	r3, r3
 800d6f2:	4619      	mov	r1, r3
 800d6f4:	6878      	ldr	r0, [r7, #4]
 800d6f6:	f000 f905 	bl	800d904 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d6fa:	e0dc      	b.n	800d8b6 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d708:	b29b      	uxth	r3, r3
 800d70a:	1ad3      	subs	r3, r2, r3
 800d70c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d716:	b29b      	uxth	r3, r3
 800d718:	2b00      	cmp	r3, #0
 800d71a:	f000 80ce 	beq.w	800d8ba <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800d71e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d722:	2b00      	cmp	r3, #0
 800d724:	f000 80c9 	beq.w	800d8ba <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d72e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d730:	e853 3f00 	ldrex	r3, [r3]
 800d734:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d738:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d73c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	461a      	mov	r2, r3
 800d746:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d74a:	647b      	str	r3, [r7, #68]	; 0x44
 800d74c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d74e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d750:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d752:	e841 2300 	strex	r3, r2, [r1]
 800d756:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d1e4      	bne.n	800d728 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	3308      	adds	r3, #8
 800d764:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d768:	e853 3f00 	ldrex	r3, [r3]
 800d76c:	623b      	str	r3, [r7, #32]
   return(result);
 800d76e:	6a3b      	ldr	r3, [r7, #32]
 800d770:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d774:	f023 0301 	bic.w	r3, r3, #1
 800d778:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	3308      	adds	r3, #8
 800d782:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d786:	633a      	str	r2, [r7, #48]	; 0x30
 800d788:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d78a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d78c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d78e:	e841 2300 	strex	r3, r2, [r1]
 800d792:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d796:	2b00      	cmp	r3, #0
 800d798:	d1e1      	bne.n	800d75e <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	2220      	movs	r2, #32
 800d79e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7b4:	693b      	ldr	r3, [r7, #16]
 800d7b6:	e853 3f00 	ldrex	r3, [r3]
 800d7ba:	60fb      	str	r3, [r7, #12]
   return(result);
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	f023 0310 	bic.w	r3, r3, #16
 800d7c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	461a      	mov	r2, r3
 800d7cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d7d0:	61fb      	str	r3, [r7, #28]
 800d7d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7d4:	69b9      	ldr	r1, [r7, #24]
 800d7d6:	69fa      	ldr	r2, [r7, #28]
 800d7d8:	e841 2300 	strex	r3, r2, [r1]
 800d7dc:	617b      	str	r3, [r7, #20]
   return(result);
 800d7de:	697b      	ldr	r3, [r7, #20]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d1e4      	bne.n	800d7ae <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d7e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d7e8:	4619      	mov	r1, r3
 800d7ea:	6878      	ldr	r0, [r7, #4]
 800d7ec:	f000 f88a 	bl	800d904 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d7f0:	e063      	b.n	800d8ba <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d7f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d7f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d00e      	beq.n	800d81c <HAL_UART_IRQHandler+0x584>
 800d7fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d806:	2b00      	cmp	r3, #0
 800d808:	d008      	beq.n	800d81c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d812:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d814:	6878      	ldr	r0, [r7, #4]
 800d816:	f000 fe85 	bl	800e524 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d81a:	e051      	b.n	800d8c0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d81c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d824:	2b00      	cmp	r3, #0
 800d826:	d014      	beq.n	800d852 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d82c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d830:	2b00      	cmp	r3, #0
 800d832:	d105      	bne.n	800d840 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d834:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d838:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d008      	beq.n	800d852 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d844:	2b00      	cmp	r3, #0
 800d846:	d03a      	beq.n	800d8be <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d84c:	6878      	ldr	r0, [r7, #4]
 800d84e:	4798      	blx	r3
    }
    return;
 800d850:	e035      	b.n	800d8be <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d009      	beq.n	800d872 <HAL_UART_IRQHandler+0x5da>
 800d85e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d866:	2b00      	cmp	r3, #0
 800d868:	d003      	beq.n	800d872 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800d86a:	6878      	ldr	r0, [r7, #4]
 800d86c:	f000 fe2f 	bl	800e4ce <UART_EndTransmit_IT>
    return;
 800d870:	e026      	b.n	800d8c0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d876:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d009      	beq.n	800d892 <HAL_UART_IRQHandler+0x5fa>
 800d87e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d882:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d886:	2b00      	cmp	r3, #0
 800d888:	d003      	beq.n	800d892 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d88a:	6878      	ldr	r0, [r7, #4]
 800d88c:	f000 fe5e 	bl	800e54c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d890:	e016      	b.n	800d8c0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d896:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d010      	beq.n	800d8c0 <HAL_UART_IRQHandler+0x628>
 800d89e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	da0c      	bge.n	800d8c0 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d8a6:	6878      	ldr	r0, [r7, #4]
 800d8a8:	f000 fe46 	bl	800e538 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d8ac:	e008      	b.n	800d8c0 <HAL_UART_IRQHandler+0x628>
      return;
 800d8ae:	bf00      	nop
 800d8b0:	e006      	b.n	800d8c0 <HAL_UART_IRQHandler+0x628>
    return;
 800d8b2:	bf00      	nop
 800d8b4:	e004      	b.n	800d8c0 <HAL_UART_IRQHandler+0x628>
      return;
 800d8b6:	bf00      	nop
 800d8b8:	e002      	b.n	800d8c0 <HAL_UART_IRQHandler+0x628>
      return;
 800d8ba:	bf00      	nop
 800d8bc:	e000      	b.n	800d8c0 <HAL_UART_IRQHandler+0x628>
    return;
 800d8be:	bf00      	nop
  }
}
 800d8c0:	37e8      	adds	r7, #232	; 0xe8
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	bd80      	pop	{r7, pc}
 800d8c6:	bf00      	nop

0800d8c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d8c8:	b480      	push	{r7}
 800d8ca:	b083      	sub	sp, #12
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d8d0:	bf00      	nop
 800d8d2:	370c      	adds	r7, #12
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8da:	4770      	bx	lr

0800d8dc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d8dc:	b480      	push	{r7}
 800d8de:	b083      	sub	sp, #12
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800d8e4:	bf00      	nop
 800d8e6:	370c      	adds	r7, #12
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ee:	4770      	bx	lr

0800d8f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d8f0:	b480      	push	{r7}
 800d8f2:	b083      	sub	sp, #12
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d8f8:	bf00      	nop
 800d8fa:	370c      	adds	r7, #12
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d902:	4770      	bx	lr

0800d904 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d904:	b480      	push	{r7}
 800d906:	b083      	sub	sp, #12
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
 800d90c:	460b      	mov	r3, r1
 800d90e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d910:	bf00      	nop
 800d912:	370c      	adds	r7, #12
 800d914:	46bd      	mov	sp, r7
 800d916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91a:	4770      	bx	lr

0800d91c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d91c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d920:	b08c      	sub	sp, #48	; 0x30
 800d922:	af00      	add	r7, sp, #0
 800d924:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d926:	2300      	movs	r3, #0
 800d928:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d92c:	697b      	ldr	r3, [r7, #20]
 800d92e:	689a      	ldr	r2, [r3, #8]
 800d930:	697b      	ldr	r3, [r7, #20]
 800d932:	691b      	ldr	r3, [r3, #16]
 800d934:	431a      	orrs	r2, r3
 800d936:	697b      	ldr	r3, [r7, #20]
 800d938:	695b      	ldr	r3, [r3, #20]
 800d93a:	431a      	orrs	r2, r3
 800d93c:	697b      	ldr	r3, [r7, #20]
 800d93e:	69db      	ldr	r3, [r3, #28]
 800d940:	4313      	orrs	r3, r2
 800d942:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d944:	697b      	ldr	r3, [r7, #20]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	681a      	ldr	r2, [r3, #0]
 800d94a:	4bab      	ldr	r3, [pc, #684]	; (800dbf8 <UART_SetConfig+0x2dc>)
 800d94c:	4013      	ands	r3, r2
 800d94e:	697a      	ldr	r2, [r7, #20]
 800d950:	6812      	ldr	r2, [r2, #0]
 800d952:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d954:	430b      	orrs	r3, r1
 800d956:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d958:	697b      	ldr	r3, [r7, #20]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	685b      	ldr	r3, [r3, #4]
 800d95e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d962:	697b      	ldr	r3, [r7, #20]
 800d964:	68da      	ldr	r2, [r3, #12]
 800d966:	697b      	ldr	r3, [r7, #20]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	430a      	orrs	r2, r1
 800d96c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d96e:	697b      	ldr	r3, [r7, #20]
 800d970:	699b      	ldr	r3, [r3, #24]
 800d972:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d974:	697b      	ldr	r3, [r7, #20]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	4aa0      	ldr	r2, [pc, #640]	; (800dbfc <UART_SetConfig+0x2e0>)
 800d97a:	4293      	cmp	r3, r2
 800d97c:	d004      	beq.n	800d988 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d97e:	697b      	ldr	r3, [r7, #20]
 800d980:	6a1b      	ldr	r3, [r3, #32]
 800d982:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d984:	4313      	orrs	r3, r2
 800d986:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d988:	697b      	ldr	r3, [r7, #20]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	689b      	ldr	r3, [r3, #8]
 800d98e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800d992:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800d996:	697a      	ldr	r2, [r7, #20]
 800d998:	6812      	ldr	r2, [r2, #0]
 800d99a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d99c:	430b      	orrs	r3, r1
 800d99e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d9a0:	697b      	ldr	r3, [r7, #20]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9a6:	f023 010f 	bic.w	r1, r3, #15
 800d9aa:	697b      	ldr	r3, [r7, #20]
 800d9ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d9ae:	697b      	ldr	r3, [r7, #20]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	430a      	orrs	r2, r1
 800d9b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d9b6:	697b      	ldr	r3, [r7, #20]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	4a91      	ldr	r2, [pc, #580]	; (800dc00 <UART_SetConfig+0x2e4>)
 800d9bc:	4293      	cmp	r3, r2
 800d9be:	d125      	bne.n	800da0c <UART_SetConfig+0xf0>
 800d9c0:	4b90      	ldr	r3, [pc, #576]	; (800dc04 <UART_SetConfig+0x2e8>)
 800d9c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d9c6:	f003 0303 	and.w	r3, r3, #3
 800d9ca:	2b03      	cmp	r3, #3
 800d9cc:	d81a      	bhi.n	800da04 <UART_SetConfig+0xe8>
 800d9ce:	a201      	add	r2, pc, #4	; (adr r2, 800d9d4 <UART_SetConfig+0xb8>)
 800d9d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9d4:	0800d9e5 	.word	0x0800d9e5
 800d9d8:	0800d9f5 	.word	0x0800d9f5
 800d9dc:	0800d9ed 	.word	0x0800d9ed
 800d9e0:	0800d9fd 	.word	0x0800d9fd
 800d9e4:	2301      	movs	r3, #1
 800d9e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d9ea:	e0d6      	b.n	800db9a <UART_SetConfig+0x27e>
 800d9ec:	2302      	movs	r3, #2
 800d9ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d9f2:	e0d2      	b.n	800db9a <UART_SetConfig+0x27e>
 800d9f4:	2304      	movs	r3, #4
 800d9f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d9fa:	e0ce      	b.n	800db9a <UART_SetConfig+0x27e>
 800d9fc:	2308      	movs	r3, #8
 800d9fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800da02:	e0ca      	b.n	800db9a <UART_SetConfig+0x27e>
 800da04:	2310      	movs	r3, #16
 800da06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800da0a:	e0c6      	b.n	800db9a <UART_SetConfig+0x27e>
 800da0c:	697b      	ldr	r3, [r7, #20]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	4a7d      	ldr	r2, [pc, #500]	; (800dc08 <UART_SetConfig+0x2ec>)
 800da12:	4293      	cmp	r3, r2
 800da14:	d138      	bne.n	800da88 <UART_SetConfig+0x16c>
 800da16:	4b7b      	ldr	r3, [pc, #492]	; (800dc04 <UART_SetConfig+0x2e8>)
 800da18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da1c:	f003 030c 	and.w	r3, r3, #12
 800da20:	2b0c      	cmp	r3, #12
 800da22:	d82d      	bhi.n	800da80 <UART_SetConfig+0x164>
 800da24:	a201      	add	r2, pc, #4	; (adr r2, 800da2c <UART_SetConfig+0x110>)
 800da26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da2a:	bf00      	nop
 800da2c:	0800da61 	.word	0x0800da61
 800da30:	0800da81 	.word	0x0800da81
 800da34:	0800da81 	.word	0x0800da81
 800da38:	0800da81 	.word	0x0800da81
 800da3c:	0800da71 	.word	0x0800da71
 800da40:	0800da81 	.word	0x0800da81
 800da44:	0800da81 	.word	0x0800da81
 800da48:	0800da81 	.word	0x0800da81
 800da4c:	0800da69 	.word	0x0800da69
 800da50:	0800da81 	.word	0x0800da81
 800da54:	0800da81 	.word	0x0800da81
 800da58:	0800da81 	.word	0x0800da81
 800da5c:	0800da79 	.word	0x0800da79
 800da60:	2300      	movs	r3, #0
 800da62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800da66:	e098      	b.n	800db9a <UART_SetConfig+0x27e>
 800da68:	2302      	movs	r3, #2
 800da6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800da6e:	e094      	b.n	800db9a <UART_SetConfig+0x27e>
 800da70:	2304      	movs	r3, #4
 800da72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800da76:	e090      	b.n	800db9a <UART_SetConfig+0x27e>
 800da78:	2308      	movs	r3, #8
 800da7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800da7e:	e08c      	b.n	800db9a <UART_SetConfig+0x27e>
 800da80:	2310      	movs	r3, #16
 800da82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800da86:	e088      	b.n	800db9a <UART_SetConfig+0x27e>
 800da88:	697b      	ldr	r3, [r7, #20]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	4a5f      	ldr	r2, [pc, #380]	; (800dc0c <UART_SetConfig+0x2f0>)
 800da8e:	4293      	cmp	r3, r2
 800da90:	d125      	bne.n	800dade <UART_SetConfig+0x1c2>
 800da92:	4b5c      	ldr	r3, [pc, #368]	; (800dc04 <UART_SetConfig+0x2e8>)
 800da94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da98:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800da9c:	2b30      	cmp	r3, #48	; 0x30
 800da9e:	d016      	beq.n	800dace <UART_SetConfig+0x1b2>
 800daa0:	2b30      	cmp	r3, #48	; 0x30
 800daa2:	d818      	bhi.n	800dad6 <UART_SetConfig+0x1ba>
 800daa4:	2b20      	cmp	r3, #32
 800daa6:	d00a      	beq.n	800dabe <UART_SetConfig+0x1a2>
 800daa8:	2b20      	cmp	r3, #32
 800daaa:	d814      	bhi.n	800dad6 <UART_SetConfig+0x1ba>
 800daac:	2b00      	cmp	r3, #0
 800daae:	d002      	beq.n	800dab6 <UART_SetConfig+0x19a>
 800dab0:	2b10      	cmp	r3, #16
 800dab2:	d008      	beq.n	800dac6 <UART_SetConfig+0x1aa>
 800dab4:	e00f      	b.n	800dad6 <UART_SetConfig+0x1ba>
 800dab6:	2300      	movs	r3, #0
 800dab8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dabc:	e06d      	b.n	800db9a <UART_SetConfig+0x27e>
 800dabe:	2302      	movs	r3, #2
 800dac0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dac4:	e069      	b.n	800db9a <UART_SetConfig+0x27e>
 800dac6:	2304      	movs	r3, #4
 800dac8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dacc:	e065      	b.n	800db9a <UART_SetConfig+0x27e>
 800dace:	2308      	movs	r3, #8
 800dad0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dad4:	e061      	b.n	800db9a <UART_SetConfig+0x27e>
 800dad6:	2310      	movs	r3, #16
 800dad8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dadc:	e05d      	b.n	800db9a <UART_SetConfig+0x27e>
 800dade:	697b      	ldr	r3, [r7, #20]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	4a4b      	ldr	r2, [pc, #300]	; (800dc10 <UART_SetConfig+0x2f4>)
 800dae4:	4293      	cmp	r3, r2
 800dae6:	d125      	bne.n	800db34 <UART_SetConfig+0x218>
 800dae8:	4b46      	ldr	r3, [pc, #280]	; (800dc04 <UART_SetConfig+0x2e8>)
 800daea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800daee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800daf2:	2bc0      	cmp	r3, #192	; 0xc0
 800daf4:	d016      	beq.n	800db24 <UART_SetConfig+0x208>
 800daf6:	2bc0      	cmp	r3, #192	; 0xc0
 800daf8:	d818      	bhi.n	800db2c <UART_SetConfig+0x210>
 800dafa:	2b80      	cmp	r3, #128	; 0x80
 800dafc:	d00a      	beq.n	800db14 <UART_SetConfig+0x1f8>
 800dafe:	2b80      	cmp	r3, #128	; 0x80
 800db00:	d814      	bhi.n	800db2c <UART_SetConfig+0x210>
 800db02:	2b00      	cmp	r3, #0
 800db04:	d002      	beq.n	800db0c <UART_SetConfig+0x1f0>
 800db06:	2b40      	cmp	r3, #64	; 0x40
 800db08:	d008      	beq.n	800db1c <UART_SetConfig+0x200>
 800db0a:	e00f      	b.n	800db2c <UART_SetConfig+0x210>
 800db0c:	2300      	movs	r3, #0
 800db0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800db12:	e042      	b.n	800db9a <UART_SetConfig+0x27e>
 800db14:	2302      	movs	r3, #2
 800db16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800db1a:	e03e      	b.n	800db9a <UART_SetConfig+0x27e>
 800db1c:	2304      	movs	r3, #4
 800db1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800db22:	e03a      	b.n	800db9a <UART_SetConfig+0x27e>
 800db24:	2308      	movs	r3, #8
 800db26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800db2a:	e036      	b.n	800db9a <UART_SetConfig+0x27e>
 800db2c:	2310      	movs	r3, #16
 800db2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800db32:	e032      	b.n	800db9a <UART_SetConfig+0x27e>
 800db34:	697b      	ldr	r3, [r7, #20]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	4a30      	ldr	r2, [pc, #192]	; (800dbfc <UART_SetConfig+0x2e0>)
 800db3a:	4293      	cmp	r3, r2
 800db3c:	d12a      	bne.n	800db94 <UART_SetConfig+0x278>
 800db3e:	4b31      	ldr	r3, [pc, #196]	; (800dc04 <UART_SetConfig+0x2e8>)
 800db40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800db48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800db4c:	d01a      	beq.n	800db84 <UART_SetConfig+0x268>
 800db4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800db52:	d81b      	bhi.n	800db8c <UART_SetConfig+0x270>
 800db54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800db58:	d00c      	beq.n	800db74 <UART_SetConfig+0x258>
 800db5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800db5e:	d815      	bhi.n	800db8c <UART_SetConfig+0x270>
 800db60:	2b00      	cmp	r3, #0
 800db62:	d003      	beq.n	800db6c <UART_SetConfig+0x250>
 800db64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800db68:	d008      	beq.n	800db7c <UART_SetConfig+0x260>
 800db6a:	e00f      	b.n	800db8c <UART_SetConfig+0x270>
 800db6c:	2300      	movs	r3, #0
 800db6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800db72:	e012      	b.n	800db9a <UART_SetConfig+0x27e>
 800db74:	2302      	movs	r3, #2
 800db76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800db7a:	e00e      	b.n	800db9a <UART_SetConfig+0x27e>
 800db7c:	2304      	movs	r3, #4
 800db7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800db82:	e00a      	b.n	800db9a <UART_SetConfig+0x27e>
 800db84:	2308      	movs	r3, #8
 800db86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800db8a:	e006      	b.n	800db9a <UART_SetConfig+0x27e>
 800db8c:	2310      	movs	r3, #16
 800db8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800db92:	e002      	b.n	800db9a <UART_SetConfig+0x27e>
 800db94:	2310      	movs	r3, #16
 800db96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800db9a:	697b      	ldr	r3, [r7, #20]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	4a17      	ldr	r2, [pc, #92]	; (800dbfc <UART_SetConfig+0x2e0>)
 800dba0:	4293      	cmp	r3, r2
 800dba2:	f040 80a8 	bne.w	800dcf6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800dba6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dbaa:	2b08      	cmp	r3, #8
 800dbac:	d834      	bhi.n	800dc18 <UART_SetConfig+0x2fc>
 800dbae:	a201      	add	r2, pc, #4	; (adr r2, 800dbb4 <UART_SetConfig+0x298>)
 800dbb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbb4:	0800dbd9 	.word	0x0800dbd9
 800dbb8:	0800dc19 	.word	0x0800dc19
 800dbbc:	0800dbe1 	.word	0x0800dbe1
 800dbc0:	0800dc19 	.word	0x0800dc19
 800dbc4:	0800dbe7 	.word	0x0800dbe7
 800dbc8:	0800dc19 	.word	0x0800dc19
 800dbcc:	0800dc19 	.word	0x0800dc19
 800dbd0:	0800dc19 	.word	0x0800dc19
 800dbd4:	0800dbef 	.word	0x0800dbef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dbd8:	f7fc fca0 	bl	800a51c <HAL_RCC_GetPCLK1Freq>
 800dbdc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800dbde:	e021      	b.n	800dc24 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800dbe0:	4b0c      	ldr	r3, [pc, #48]	; (800dc14 <UART_SetConfig+0x2f8>)
 800dbe2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800dbe4:	e01e      	b.n	800dc24 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800dbe6:	f7fc fc2d 	bl	800a444 <HAL_RCC_GetSysClockFreq>
 800dbea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800dbec:	e01a      	b.n	800dc24 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dbee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dbf2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800dbf4:	e016      	b.n	800dc24 <UART_SetConfig+0x308>
 800dbf6:	bf00      	nop
 800dbf8:	cfff69f3 	.word	0xcfff69f3
 800dbfc:	40008000 	.word	0x40008000
 800dc00:	40013800 	.word	0x40013800
 800dc04:	40021000 	.word	0x40021000
 800dc08:	40004400 	.word	0x40004400
 800dc0c:	40004800 	.word	0x40004800
 800dc10:	40004c00 	.word	0x40004c00
 800dc14:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800dc18:	2300      	movs	r3, #0
 800dc1a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800dc1c:	2301      	movs	r3, #1
 800dc1e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800dc22:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800dc24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	f000 812a 	beq.w	800de80 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800dc2c:	697b      	ldr	r3, [r7, #20]
 800dc2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc30:	4a9e      	ldr	r2, [pc, #632]	; (800deac <UART_SetConfig+0x590>)
 800dc32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dc36:	461a      	mov	r2, r3
 800dc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc3a:	fbb3 f3f2 	udiv	r3, r3, r2
 800dc3e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dc40:	697b      	ldr	r3, [r7, #20]
 800dc42:	685a      	ldr	r2, [r3, #4]
 800dc44:	4613      	mov	r3, r2
 800dc46:	005b      	lsls	r3, r3, #1
 800dc48:	4413      	add	r3, r2
 800dc4a:	69ba      	ldr	r2, [r7, #24]
 800dc4c:	429a      	cmp	r2, r3
 800dc4e:	d305      	bcc.n	800dc5c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800dc50:	697b      	ldr	r3, [r7, #20]
 800dc52:	685b      	ldr	r3, [r3, #4]
 800dc54:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dc56:	69ba      	ldr	r2, [r7, #24]
 800dc58:	429a      	cmp	r2, r3
 800dc5a:	d903      	bls.n	800dc64 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800dc5c:	2301      	movs	r3, #1
 800dc5e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800dc62:	e10d      	b.n	800de80 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dc64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc66:	2200      	movs	r2, #0
 800dc68:	60bb      	str	r3, [r7, #8]
 800dc6a:	60fa      	str	r2, [r7, #12]
 800dc6c:	697b      	ldr	r3, [r7, #20]
 800dc6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc70:	4a8e      	ldr	r2, [pc, #568]	; (800deac <UART_SetConfig+0x590>)
 800dc72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dc76:	b29b      	uxth	r3, r3
 800dc78:	2200      	movs	r2, #0
 800dc7a:	603b      	str	r3, [r7, #0]
 800dc7c:	607a      	str	r2, [r7, #4]
 800dc7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc82:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800dc86:	f7f3 f827 	bl	8000cd8 <__aeabi_uldivmod>
 800dc8a:	4602      	mov	r2, r0
 800dc8c:	460b      	mov	r3, r1
 800dc8e:	4610      	mov	r0, r2
 800dc90:	4619      	mov	r1, r3
 800dc92:	f04f 0200 	mov.w	r2, #0
 800dc96:	f04f 0300 	mov.w	r3, #0
 800dc9a:	020b      	lsls	r3, r1, #8
 800dc9c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800dca0:	0202      	lsls	r2, r0, #8
 800dca2:	6979      	ldr	r1, [r7, #20]
 800dca4:	6849      	ldr	r1, [r1, #4]
 800dca6:	0849      	lsrs	r1, r1, #1
 800dca8:	2000      	movs	r0, #0
 800dcaa:	460c      	mov	r4, r1
 800dcac:	4605      	mov	r5, r0
 800dcae:	eb12 0804 	adds.w	r8, r2, r4
 800dcb2:	eb43 0905 	adc.w	r9, r3, r5
 800dcb6:	697b      	ldr	r3, [r7, #20]
 800dcb8:	685b      	ldr	r3, [r3, #4]
 800dcba:	2200      	movs	r2, #0
 800dcbc:	469a      	mov	sl, r3
 800dcbe:	4693      	mov	fp, r2
 800dcc0:	4652      	mov	r2, sl
 800dcc2:	465b      	mov	r3, fp
 800dcc4:	4640      	mov	r0, r8
 800dcc6:	4649      	mov	r1, r9
 800dcc8:	f7f3 f806 	bl	8000cd8 <__aeabi_uldivmod>
 800dccc:	4602      	mov	r2, r0
 800dcce:	460b      	mov	r3, r1
 800dcd0:	4613      	mov	r3, r2
 800dcd2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800dcd4:	6a3b      	ldr	r3, [r7, #32]
 800dcd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dcda:	d308      	bcc.n	800dcee <UART_SetConfig+0x3d2>
 800dcdc:	6a3b      	ldr	r3, [r7, #32]
 800dcde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dce2:	d204      	bcs.n	800dcee <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800dce4:	697b      	ldr	r3, [r7, #20]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	6a3a      	ldr	r2, [r7, #32]
 800dcea:	60da      	str	r2, [r3, #12]
 800dcec:	e0c8      	b.n	800de80 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800dcee:	2301      	movs	r3, #1
 800dcf0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800dcf4:	e0c4      	b.n	800de80 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dcf6:	697b      	ldr	r3, [r7, #20]
 800dcf8:	69db      	ldr	r3, [r3, #28]
 800dcfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dcfe:	d167      	bne.n	800ddd0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800dd00:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dd04:	2b08      	cmp	r3, #8
 800dd06:	d828      	bhi.n	800dd5a <UART_SetConfig+0x43e>
 800dd08:	a201      	add	r2, pc, #4	; (adr r2, 800dd10 <UART_SetConfig+0x3f4>)
 800dd0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd0e:	bf00      	nop
 800dd10:	0800dd35 	.word	0x0800dd35
 800dd14:	0800dd3d 	.word	0x0800dd3d
 800dd18:	0800dd45 	.word	0x0800dd45
 800dd1c:	0800dd5b 	.word	0x0800dd5b
 800dd20:	0800dd4b 	.word	0x0800dd4b
 800dd24:	0800dd5b 	.word	0x0800dd5b
 800dd28:	0800dd5b 	.word	0x0800dd5b
 800dd2c:	0800dd5b 	.word	0x0800dd5b
 800dd30:	0800dd53 	.word	0x0800dd53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dd34:	f7fc fbf2 	bl	800a51c <HAL_RCC_GetPCLK1Freq>
 800dd38:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800dd3a:	e014      	b.n	800dd66 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dd3c:	f7fc fc04 	bl	800a548 <HAL_RCC_GetPCLK2Freq>
 800dd40:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800dd42:	e010      	b.n	800dd66 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800dd44:	4b5a      	ldr	r3, [pc, #360]	; (800deb0 <UART_SetConfig+0x594>)
 800dd46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800dd48:	e00d      	b.n	800dd66 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800dd4a:	f7fc fb7b 	bl	800a444 <HAL_RCC_GetSysClockFreq>
 800dd4e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800dd50:	e009      	b.n	800dd66 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dd52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dd56:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800dd58:	e005      	b.n	800dd66 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800dd5e:	2301      	movs	r3, #1
 800dd60:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800dd64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800dd66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	f000 8089 	beq.w	800de80 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dd6e:	697b      	ldr	r3, [r7, #20]
 800dd70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd72:	4a4e      	ldr	r2, [pc, #312]	; (800deac <UART_SetConfig+0x590>)
 800dd74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dd78:	461a      	mov	r2, r3
 800dd7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd7c:	fbb3 f3f2 	udiv	r3, r3, r2
 800dd80:	005a      	lsls	r2, r3, #1
 800dd82:	697b      	ldr	r3, [r7, #20]
 800dd84:	685b      	ldr	r3, [r3, #4]
 800dd86:	085b      	lsrs	r3, r3, #1
 800dd88:	441a      	add	r2, r3
 800dd8a:	697b      	ldr	r3, [r7, #20]
 800dd8c:	685b      	ldr	r3, [r3, #4]
 800dd8e:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd92:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dd94:	6a3b      	ldr	r3, [r7, #32]
 800dd96:	2b0f      	cmp	r3, #15
 800dd98:	d916      	bls.n	800ddc8 <UART_SetConfig+0x4ac>
 800dd9a:	6a3b      	ldr	r3, [r7, #32]
 800dd9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dda0:	d212      	bcs.n	800ddc8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800dda2:	6a3b      	ldr	r3, [r7, #32]
 800dda4:	b29b      	uxth	r3, r3
 800dda6:	f023 030f 	bic.w	r3, r3, #15
 800ddaa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ddac:	6a3b      	ldr	r3, [r7, #32]
 800ddae:	085b      	lsrs	r3, r3, #1
 800ddb0:	b29b      	uxth	r3, r3
 800ddb2:	f003 0307 	and.w	r3, r3, #7
 800ddb6:	b29a      	uxth	r2, r3
 800ddb8:	8bfb      	ldrh	r3, [r7, #30]
 800ddba:	4313      	orrs	r3, r2
 800ddbc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800ddbe:	697b      	ldr	r3, [r7, #20]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	8bfa      	ldrh	r2, [r7, #30]
 800ddc4:	60da      	str	r2, [r3, #12]
 800ddc6:	e05b      	b.n	800de80 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800ddc8:	2301      	movs	r3, #1
 800ddca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ddce:	e057      	b.n	800de80 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ddd0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ddd4:	2b08      	cmp	r3, #8
 800ddd6:	d828      	bhi.n	800de2a <UART_SetConfig+0x50e>
 800ddd8:	a201      	add	r2, pc, #4	; (adr r2, 800dde0 <UART_SetConfig+0x4c4>)
 800ddda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddde:	bf00      	nop
 800dde0:	0800de05 	.word	0x0800de05
 800dde4:	0800de0d 	.word	0x0800de0d
 800dde8:	0800de15 	.word	0x0800de15
 800ddec:	0800de2b 	.word	0x0800de2b
 800ddf0:	0800de1b 	.word	0x0800de1b
 800ddf4:	0800de2b 	.word	0x0800de2b
 800ddf8:	0800de2b 	.word	0x0800de2b
 800ddfc:	0800de2b 	.word	0x0800de2b
 800de00:	0800de23 	.word	0x0800de23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800de04:	f7fc fb8a 	bl	800a51c <HAL_RCC_GetPCLK1Freq>
 800de08:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800de0a:	e014      	b.n	800de36 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800de0c:	f7fc fb9c 	bl	800a548 <HAL_RCC_GetPCLK2Freq>
 800de10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800de12:	e010      	b.n	800de36 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800de14:	4b26      	ldr	r3, [pc, #152]	; (800deb0 <UART_SetConfig+0x594>)
 800de16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800de18:	e00d      	b.n	800de36 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800de1a:	f7fc fb13 	bl	800a444 <HAL_RCC_GetSysClockFreq>
 800de1e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800de20:	e009      	b.n	800de36 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800de22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800de26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800de28:	e005      	b.n	800de36 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800de2a:	2300      	movs	r3, #0
 800de2c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800de2e:	2301      	movs	r3, #1
 800de30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800de34:	bf00      	nop
    }

    if (pclk != 0U)
 800de36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d021      	beq.n	800de80 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800de3c:	697b      	ldr	r3, [r7, #20]
 800de3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de40:	4a1a      	ldr	r2, [pc, #104]	; (800deac <UART_SetConfig+0x590>)
 800de42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de46:	461a      	mov	r2, r3
 800de48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de4a:	fbb3 f2f2 	udiv	r2, r3, r2
 800de4e:	697b      	ldr	r3, [r7, #20]
 800de50:	685b      	ldr	r3, [r3, #4]
 800de52:	085b      	lsrs	r3, r3, #1
 800de54:	441a      	add	r2, r3
 800de56:	697b      	ldr	r3, [r7, #20]
 800de58:	685b      	ldr	r3, [r3, #4]
 800de5a:	fbb2 f3f3 	udiv	r3, r2, r3
 800de5e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800de60:	6a3b      	ldr	r3, [r7, #32]
 800de62:	2b0f      	cmp	r3, #15
 800de64:	d909      	bls.n	800de7a <UART_SetConfig+0x55e>
 800de66:	6a3b      	ldr	r3, [r7, #32]
 800de68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de6c:	d205      	bcs.n	800de7a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800de6e:	6a3b      	ldr	r3, [r7, #32]
 800de70:	b29a      	uxth	r2, r3
 800de72:	697b      	ldr	r3, [r7, #20]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	60da      	str	r2, [r3, #12]
 800de78:	e002      	b.n	800de80 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800de7a:	2301      	movs	r3, #1
 800de7c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800de80:	697b      	ldr	r3, [r7, #20]
 800de82:	2201      	movs	r2, #1
 800de84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800de88:	697b      	ldr	r3, [r7, #20]
 800de8a:	2201      	movs	r2, #1
 800de8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800de90:	697b      	ldr	r3, [r7, #20]
 800de92:	2200      	movs	r2, #0
 800de94:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800de96:	697b      	ldr	r3, [r7, #20]
 800de98:	2200      	movs	r2, #0
 800de9a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800de9c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800dea0:	4618      	mov	r0, r3
 800dea2:	3730      	adds	r7, #48	; 0x30
 800dea4:	46bd      	mov	sp, r7
 800dea6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800deaa:	bf00      	nop
 800deac:	080125b4 	.word	0x080125b4
 800deb0:	00f42400 	.word	0x00f42400

0800deb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800deb4:	b480      	push	{r7}
 800deb6:	b083      	sub	sp, #12
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dec0:	f003 0301 	and.w	r3, r3, #1
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d00a      	beq.n	800dede <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	685b      	ldr	r3, [r3, #4]
 800dece:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	430a      	orrs	r2, r1
 800dedc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dee2:	f003 0302 	and.w	r3, r3, #2
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d00a      	beq.n	800df00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	685b      	ldr	r3, [r3, #4]
 800def0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	430a      	orrs	r2, r1
 800defe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df04:	f003 0304 	and.w	r3, r3, #4
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d00a      	beq.n	800df22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	685b      	ldr	r3, [r3, #4]
 800df12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	430a      	orrs	r2, r1
 800df20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df26:	f003 0308 	and.w	r3, r3, #8
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d00a      	beq.n	800df44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	685b      	ldr	r3, [r3, #4]
 800df34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	430a      	orrs	r2, r1
 800df42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df48:	f003 0310 	and.w	r3, r3, #16
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d00a      	beq.n	800df66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	689b      	ldr	r3, [r3, #8]
 800df56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	430a      	orrs	r2, r1
 800df64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df6a:	f003 0320 	and.w	r3, r3, #32
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d00a      	beq.n	800df88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	689b      	ldr	r3, [r3, #8]
 800df78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	430a      	orrs	r2, r1
 800df86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df90:	2b00      	cmp	r3, #0
 800df92:	d01a      	beq.n	800dfca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	685b      	ldr	r3, [r3, #4]
 800df9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	430a      	orrs	r2, r1
 800dfa8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dfae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dfb2:	d10a      	bne.n	800dfca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	685b      	ldr	r3, [r3, #4]
 800dfba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	430a      	orrs	r2, r1
 800dfc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d00a      	beq.n	800dfec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	685b      	ldr	r3, [r3, #4]
 800dfdc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	430a      	orrs	r2, r1
 800dfea:	605a      	str	r2, [r3, #4]
  }
}
 800dfec:	bf00      	nop
 800dfee:	370c      	adds	r7, #12
 800dff0:	46bd      	mov	sp, r7
 800dff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff6:	4770      	bx	lr

0800dff8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b086      	sub	sp, #24
 800dffc:	af02      	add	r7, sp, #8
 800dffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	2200      	movs	r2, #0
 800e004:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e008:	f7f7 feb0 	bl	8005d6c <HAL_GetTick>
 800e00c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	f003 0308 	and.w	r3, r3, #8
 800e018:	2b08      	cmp	r3, #8
 800e01a:	d10e      	bne.n	800e03a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e01c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e020:	9300      	str	r3, [sp, #0]
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	2200      	movs	r2, #0
 800e026:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e02a:	6878      	ldr	r0, [r7, #4]
 800e02c:	f000 f82f 	bl	800e08e <UART_WaitOnFlagUntilTimeout>
 800e030:	4603      	mov	r3, r0
 800e032:	2b00      	cmp	r3, #0
 800e034:	d001      	beq.n	800e03a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e036:	2303      	movs	r3, #3
 800e038:	e025      	b.n	800e086 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	f003 0304 	and.w	r3, r3, #4
 800e044:	2b04      	cmp	r3, #4
 800e046:	d10e      	bne.n	800e066 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e048:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e04c:	9300      	str	r3, [sp, #0]
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	2200      	movs	r2, #0
 800e052:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e056:	6878      	ldr	r0, [r7, #4]
 800e058:	f000 f819 	bl	800e08e <UART_WaitOnFlagUntilTimeout>
 800e05c:	4603      	mov	r3, r0
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d001      	beq.n	800e066 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e062:	2303      	movs	r3, #3
 800e064:	e00f      	b.n	800e086 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	2220      	movs	r2, #32
 800e06a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	2220      	movs	r2, #32
 800e072:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	2200      	movs	r2, #0
 800e07a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2200      	movs	r2, #0
 800e080:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e084:	2300      	movs	r3, #0
}
 800e086:	4618      	mov	r0, r3
 800e088:	3710      	adds	r7, #16
 800e08a:	46bd      	mov	sp, r7
 800e08c:	bd80      	pop	{r7, pc}

0800e08e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e08e:	b580      	push	{r7, lr}
 800e090:	b09c      	sub	sp, #112	; 0x70
 800e092:	af00      	add	r7, sp, #0
 800e094:	60f8      	str	r0, [r7, #12]
 800e096:	60b9      	str	r1, [r7, #8]
 800e098:	603b      	str	r3, [r7, #0]
 800e09a:	4613      	mov	r3, r2
 800e09c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e09e:	e0a9      	b.n	800e1f4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e0a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e0a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0a6:	f000 80a5 	beq.w	800e1f4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e0aa:	f7f7 fe5f 	bl	8005d6c <HAL_GetTick>
 800e0ae:	4602      	mov	r2, r0
 800e0b0:	683b      	ldr	r3, [r7, #0]
 800e0b2:	1ad3      	subs	r3, r2, r3
 800e0b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e0b6:	429a      	cmp	r2, r3
 800e0b8:	d302      	bcc.n	800e0c0 <UART_WaitOnFlagUntilTimeout+0x32>
 800e0ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d140      	bne.n	800e142 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0c8:	e853 3f00 	ldrex	r3, [r3]
 800e0cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e0ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e0d4:	667b      	str	r3, [r7, #100]	; 0x64
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	461a      	mov	r2, r3
 800e0dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e0de:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e0e0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e0e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e0e6:	e841 2300 	strex	r3, r2, [r1]
 800e0ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e0ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d1e6      	bne.n	800e0c0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	3308      	adds	r3, #8
 800e0f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0fc:	e853 3f00 	ldrex	r3, [r3]
 800e100:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e104:	f023 0301 	bic.w	r3, r3, #1
 800e108:	663b      	str	r3, [r7, #96]	; 0x60
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	3308      	adds	r3, #8
 800e110:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e112:	64ba      	str	r2, [r7, #72]	; 0x48
 800e114:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e116:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e118:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e11a:	e841 2300 	strex	r3, r2, [r1]
 800e11e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e122:	2b00      	cmp	r3, #0
 800e124:	d1e5      	bne.n	800e0f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	2220      	movs	r2, #32
 800e12a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	2220      	movs	r2, #32
 800e132:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	2200      	movs	r2, #0
 800e13a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800e13e:	2303      	movs	r3, #3
 800e140:	e069      	b.n	800e216 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	f003 0304 	and.w	r3, r3, #4
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d051      	beq.n	800e1f4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	69db      	ldr	r3, [r3, #28]
 800e156:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e15a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e15e:	d149      	bne.n	800e1f4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e168:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e172:	e853 3f00 	ldrex	r3, [r3]
 800e176:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e17a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e17e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	461a      	mov	r2, r3
 800e186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e188:	637b      	str	r3, [r7, #52]	; 0x34
 800e18a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e18c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e18e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e190:	e841 2300 	strex	r3, r2, [r1]
 800e194:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d1e6      	bne.n	800e16a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	3308      	adds	r3, #8
 800e1a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1a4:	697b      	ldr	r3, [r7, #20]
 800e1a6:	e853 3f00 	ldrex	r3, [r3]
 800e1aa:	613b      	str	r3, [r7, #16]
   return(result);
 800e1ac:	693b      	ldr	r3, [r7, #16]
 800e1ae:	f023 0301 	bic.w	r3, r3, #1
 800e1b2:	66bb      	str	r3, [r7, #104]	; 0x68
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	3308      	adds	r3, #8
 800e1ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e1bc:	623a      	str	r2, [r7, #32]
 800e1be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1c0:	69f9      	ldr	r1, [r7, #28]
 800e1c2:	6a3a      	ldr	r2, [r7, #32]
 800e1c4:	e841 2300 	strex	r3, r2, [r1]
 800e1c8:	61bb      	str	r3, [r7, #24]
   return(result);
 800e1ca:	69bb      	ldr	r3, [r7, #24]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d1e5      	bne.n	800e19c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	2220      	movs	r2, #32
 800e1d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	2220      	movs	r2, #32
 800e1dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	2220      	movs	r2, #32
 800e1e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e1f0:	2303      	movs	r3, #3
 800e1f2:	e010      	b.n	800e216 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	69da      	ldr	r2, [r3, #28]
 800e1fa:	68bb      	ldr	r3, [r7, #8]
 800e1fc:	4013      	ands	r3, r2
 800e1fe:	68ba      	ldr	r2, [r7, #8]
 800e200:	429a      	cmp	r2, r3
 800e202:	bf0c      	ite	eq
 800e204:	2301      	moveq	r3, #1
 800e206:	2300      	movne	r3, #0
 800e208:	b2db      	uxtb	r3, r3
 800e20a:	461a      	mov	r2, r3
 800e20c:	79fb      	ldrb	r3, [r7, #7]
 800e20e:	429a      	cmp	r2, r3
 800e210:	f43f af46 	beq.w	800e0a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e214:	2300      	movs	r3, #0
}
 800e216:	4618      	mov	r0, r3
 800e218:	3770      	adds	r7, #112	; 0x70
 800e21a:	46bd      	mov	sp, r7
 800e21c:	bd80      	pop	{r7, pc}

0800e21e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e21e:	b480      	push	{r7}
 800e220:	b08f      	sub	sp, #60	; 0x3c
 800e222:	af00      	add	r7, sp, #0
 800e224:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e22c:	6a3b      	ldr	r3, [r7, #32]
 800e22e:	e853 3f00 	ldrex	r3, [r3]
 800e232:	61fb      	str	r3, [r7, #28]
   return(result);
 800e234:	69fb      	ldr	r3, [r7, #28]
 800e236:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e23a:	637b      	str	r3, [r7, #52]	; 0x34
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	461a      	mov	r2, r3
 800e242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e244:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e246:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e248:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e24a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e24c:	e841 2300 	strex	r3, r2, [r1]
 800e250:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e254:	2b00      	cmp	r3, #0
 800e256:	d1e6      	bne.n	800e226 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	3308      	adds	r3, #8
 800e25e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	e853 3f00 	ldrex	r3, [r3]
 800e266:	60bb      	str	r3, [r7, #8]
   return(result);
 800e268:	68bb      	ldr	r3, [r7, #8]
 800e26a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e26e:	633b      	str	r3, [r7, #48]	; 0x30
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	3308      	adds	r3, #8
 800e276:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e278:	61ba      	str	r2, [r7, #24]
 800e27a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e27c:	6979      	ldr	r1, [r7, #20]
 800e27e:	69ba      	ldr	r2, [r7, #24]
 800e280:	e841 2300 	strex	r3, r2, [r1]
 800e284:	613b      	str	r3, [r7, #16]
   return(result);
 800e286:	693b      	ldr	r3, [r7, #16]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d1e5      	bne.n	800e258 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	2220      	movs	r2, #32
 800e290:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800e294:	bf00      	nop
 800e296:	373c      	adds	r7, #60	; 0x3c
 800e298:	46bd      	mov	sp, r7
 800e29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29e:	4770      	bx	lr

0800e2a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e2a0:	b480      	push	{r7}
 800e2a2:	b095      	sub	sp, #84	; 0x54
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2b0:	e853 3f00 	ldrex	r3, [r3]
 800e2b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e2bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	461a      	mov	r2, r3
 800e2c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2c6:	643b      	str	r3, [r7, #64]	; 0x40
 800e2c8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e2cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e2ce:	e841 2300 	strex	r3, r2, [r1]
 800e2d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d1e6      	bne.n	800e2a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	3308      	adds	r3, #8
 800e2e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2e2:	6a3b      	ldr	r3, [r7, #32]
 800e2e4:	e853 3f00 	ldrex	r3, [r3]
 800e2e8:	61fb      	str	r3, [r7, #28]
   return(result);
 800e2ea:	69fb      	ldr	r3, [r7, #28]
 800e2ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e2f0:	f023 0301 	bic.w	r3, r3, #1
 800e2f4:	64bb      	str	r3, [r7, #72]	; 0x48
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	3308      	adds	r3, #8
 800e2fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e2fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e300:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e302:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e304:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e306:	e841 2300 	strex	r3, r2, [r1]
 800e30a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d1e3      	bne.n	800e2da <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e316:	2b01      	cmp	r3, #1
 800e318:	d118      	bne.n	800e34c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	e853 3f00 	ldrex	r3, [r3]
 800e326:	60bb      	str	r3, [r7, #8]
   return(result);
 800e328:	68bb      	ldr	r3, [r7, #8]
 800e32a:	f023 0310 	bic.w	r3, r3, #16
 800e32e:	647b      	str	r3, [r7, #68]	; 0x44
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	461a      	mov	r2, r3
 800e336:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e338:	61bb      	str	r3, [r7, #24]
 800e33a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e33c:	6979      	ldr	r1, [r7, #20]
 800e33e:	69ba      	ldr	r2, [r7, #24]
 800e340:	e841 2300 	strex	r3, r2, [r1]
 800e344:	613b      	str	r3, [r7, #16]
   return(result);
 800e346:	693b      	ldr	r3, [r7, #16]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d1e6      	bne.n	800e31a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	2220      	movs	r2, #32
 800e350:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	2200      	movs	r2, #0
 800e358:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	2200      	movs	r2, #0
 800e35e:	671a      	str	r2, [r3, #112]	; 0x70
}
 800e360:	bf00      	nop
 800e362:	3754      	adds	r7, #84	; 0x54
 800e364:	46bd      	mov	sp, r7
 800e366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36a:	4770      	bx	lr

0800e36c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b090      	sub	sp, #64	; 0x40
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e378:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	f003 0320 	and.w	r3, r3, #32
 800e384:	2b00      	cmp	r3, #0
 800e386:	d137      	bne.n	800e3f8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800e388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e38a:	2200      	movs	r2, #0
 800e38c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	3308      	adds	r3, #8
 800e396:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e39a:	e853 3f00 	ldrex	r3, [r3]
 800e39e:	623b      	str	r3, [r7, #32]
   return(result);
 800e3a0:	6a3b      	ldr	r3, [r7, #32]
 800e3a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e3a6:	63bb      	str	r3, [r7, #56]	; 0x38
 800e3a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	3308      	adds	r3, #8
 800e3ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e3b0:	633a      	str	r2, [r7, #48]	; 0x30
 800e3b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e3b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e3b8:	e841 2300 	strex	r3, r2, [r1]
 800e3bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e3be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d1e5      	bne.n	800e390 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e3c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3ca:	693b      	ldr	r3, [r7, #16]
 800e3cc:	e853 3f00 	ldrex	r3, [r3]
 800e3d0:	60fb      	str	r3, [r7, #12]
   return(result);
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e3d8:	637b      	str	r3, [r7, #52]	; 0x34
 800e3da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	461a      	mov	r2, r3
 800e3e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3e2:	61fb      	str	r3, [r7, #28]
 800e3e4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3e6:	69b9      	ldr	r1, [r7, #24]
 800e3e8:	69fa      	ldr	r2, [r7, #28]
 800e3ea:	e841 2300 	strex	r3, r2, [r1]
 800e3ee:	617b      	str	r3, [r7, #20]
   return(result);
 800e3f0:	697b      	ldr	r3, [r7, #20]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d1e6      	bne.n	800e3c4 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e3f6:	e002      	b.n	800e3fe <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800e3f8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e3fa:	f7ff fa65 	bl	800d8c8 <HAL_UART_TxCpltCallback>
}
 800e3fe:	bf00      	nop
 800e400:	3740      	adds	r7, #64	; 0x40
 800e402:	46bd      	mov	sp, r7
 800e404:	bd80      	pop	{r7, pc}

0800e406 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e406:	b580      	push	{r7, lr}
 800e408:	b084      	sub	sp, #16
 800e40a:	af00      	add	r7, sp, #0
 800e40c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e412:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e414:	68f8      	ldr	r0, [r7, #12]
 800e416:	f7ff fa61 	bl	800d8dc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e41a:	bf00      	nop
 800e41c:	3710      	adds	r7, #16
 800e41e:	46bd      	mov	sp, r7
 800e420:	bd80      	pop	{r7, pc}

0800e422 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e422:	b580      	push	{r7, lr}
 800e424:	b086      	sub	sp, #24
 800e426:	af00      	add	r7, sp, #0
 800e428:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e42e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e430:	697b      	ldr	r3, [r7, #20]
 800e432:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e436:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e438:	697b      	ldr	r3, [r7, #20]
 800e43a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e43e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e440:	697b      	ldr	r3, [r7, #20]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	689b      	ldr	r3, [r3, #8]
 800e446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e44a:	2b80      	cmp	r3, #128	; 0x80
 800e44c:	d109      	bne.n	800e462 <UART_DMAError+0x40>
 800e44e:	693b      	ldr	r3, [r7, #16]
 800e450:	2b21      	cmp	r3, #33	; 0x21
 800e452:	d106      	bne.n	800e462 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e454:	697b      	ldr	r3, [r7, #20]
 800e456:	2200      	movs	r2, #0
 800e458:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800e45c:	6978      	ldr	r0, [r7, #20]
 800e45e:	f7ff fede 	bl	800e21e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e462:	697b      	ldr	r3, [r7, #20]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	689b      	ldr	r3, [r3, #8]
 800e468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e46c:	2b40      	cmp	r3, #64	; 0x40
 800e46e:	d109      	bne.n	800e484 <UART_DMAError+0x62>
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	2b22      	cmp	r3, #34	; 0x22
 800e474:	d106      	bne.n	800e484 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e476:	697b      	ldr	r3, [r7, #20]
 800e478:	2200      	movs	r2, #0
 800e47a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800e47e:	6978      	ldr	r0, [r7, #20]
 800e480:	f7ff ff0e 	bl	800e2a0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e484:	697b      	ldr	r3, [r7, #20]
 800e486:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e48a:	f043 0210 	orr.w	r2, r3, #16
 800e48e:	697b      	ldr	r3, [r7, #20]
 800e490:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e494:	6978      	ldr	r0, [r7, #20]
 800e496:	f7ff fa2b 	bl	800d8f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e49a:	bf00      	nop
 800e49c:	3718      	adds	r7, #24
 800e49e:	46bd      	mov	sp, r7
 800e4a0:	bd80      	pop	{r7, pc}

0800e4a2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e4a2:	b580      	push	{r7, lr}
 800e4a4:	b084      	sub	sp, #16
 800e4a6:	af00      	add	r7, sp, #0
 800e4a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e4c0:	68f8      	ldr	r0, [r7, #12]
 800e4c2:	f7ff fa15 	bl	800d8f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e4c6:	bf00      	nop
 800e4c8:	3710      	adds	r7, #16
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	bd80      	pop	{r7, pc}

0800e4ce <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e4ce:	b580      	push	{r7, lr}
 800e4d0:	b088      	sub	sp, #32
 800e4d2:	af00      	add	r7, sp, #0
 800e4d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	e853 3f00 	ldrex	r3, [r3]
 800e4e2:	60bb      	str	r3, [r7, #8]
   return(result);
 800e4e4:	68bb      	ldr	r3, [r7, #8]
 800e4e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e4ea:	61fb      	str	r3, [r7, #28]
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	461a      	mov	r2, r3
 800e4f2:	69fb      	ldr	r3, [r7, #28]
 800e4f4:	61bb      	str	r3, [r7, #24]
 800e4f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4f8:	6979      	ldr	r1, [r7, #20]
 800e4fa:	69ba      	ldr	r2, [r7, #24]
 800e4fc:	e841 2300 	strex	r3, r2, [r1]
 800e500:	613b      	str	r3, [r7, #16]
   return(result);
 800e502:	693b      	ldr	r3, [r7, #16]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d1e6      	bne.n	800e4d6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	2220      	movs	r2, #32
 800e50c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	2200      	movs	r2, #0
 800e514:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e516:	6878      	ldr	r0, [r7, #4]
 800e518:	f7ff f9d6 	bl	800d8c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e51c:	bf00      	nop
 800e51e:	3720      	adds	r7, #32
 800e520:	46bd      	mov	sp, r7
 800e522:	bd80      	pop	{r7, pc}

0800e524 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e524:	b480      	push	{r7}
 800e526:	b083      	sub	sp, #12
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e52c:	bf00      	nop
 800e52e:	370c      	adds	r7, #12
 800e530:	46bd      	mov	sp, r7
 800e532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e536:	4770      	bx	lr

0800e538 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e538:	b480      	push	{r7}
 800e53a:	b083      	sub	sp, #12
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e540:	bf00      	nop
 800e542:	370c      	adds	r7, #12
 800e544:	46bd      	mov	sp, r7
 800e546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e54a:	4770      	bx	lr

0800e54c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e54c:	b480      	push	{r7}
 800e54e:	b083      	sub	sp, #12
 800e550:	af00      	add	r7, sp, #0
 800e552:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e554:	bf00      	nop
 800e556:	370c      	adds	r7, #12
 800e558:	46bd      	mov	sp, r7
 800e55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55e:	4770      	bx	lr

0800e560 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e560:	b480      	push	{r7}
 800e562:	b085      	sub	sp, #20
 800e564:	af00      	add	r7, sp, #0
 800e566:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e56e:	2b01      	cmp	r3, #1
 800e570:	d101      	bne.n	800e576 <HAL_UARTEx_DisableFifoMode+0x16>
 800e572:	2302      	movs	r3, #2
 800e574:	e027      	b.n	800e5c6 <HAL_UARTEx_DisableFifoMode+0x66>
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	2201      	movs	r2, #1
 800e57a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	2224      	movs	r2, #36	; 0x24
 800e582:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	681a      	ldr	r2, [r3, #0]
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	f022 0201 	bic.w	r2, r2, #1
 800e59c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e5a4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	2200      	movs	r2, #0
 800e5aa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	68fa      	ldr	r2, [r7, #12]
 800e5b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	2220      	movs	r2, #32
 800e5b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	2200      	movs	r2, #0
 800e5c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e5c4:	2300      	movs	r3, #0
}
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	3714      	adds	r7, #20
 800e5ca:	46bd      	mov	sp, r7
 800e5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d0:	4770      	bx	lr

0800e5d2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e5d2:	b580      	push	{r7, lr}
 800e5d4:	b084      	sub	sp, #16
 800e5d6:	af00      	add	r7, sp, #0
 800e5d8:	6078      	str	r0, [r7, #4]
 800e5da:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e5e2:	2b01      	cmp	r3, #1
 800e5e4:	d101      	bne.n	800e5ea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e5e6:	2302      	movs	r3, #2
 800e5e8:	e02d      	b.n	800e646 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	2201      	movs	r2, #1
 800e5ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	2224      	movs	r2, #36	; 0x24
 800e5f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	681a      	ldr	r2, [r3, #0]
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	f022 0201 	bic.w	r2, r2, #1
 800e610:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	689b      	ldr	r3, [r3, #8]
 800e618:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	683a      	ldr	r2, [r7, #0]
 800e622:	430a      	orrs	r2, r1
 800e624:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e626:	6878      	ldr	r0, [r7, #4]
 800e628:	f000 f850 	bl	800e6cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	68fa      	ldr	r2, [r7, #12]
 800e632:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	2220      	movs	r2, #32
 800e638:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	2200      	movs	r2, #0
 800e640:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e644:	2300      	movs	r3, #0
}
 800e646:	4618      	mov	r0, r3
 800e648:	3710      	adds	r7, #16
 800e64a:	46bd      	mov	sp, r7
 800e64c:	bd80      	pop	{r7, pc}

0800e64e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e64e:	b580      	push	{r7, lr}
 800e650:	b084      	sub	sp, #16
 800e652:	af00      	add	r7, sp, #0
 800e654:	6078      	str	r0, [r7, #4]
 800e656:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e65e:	2b01      	cmp	r3, #1
 800e660:	d101      	bne.n	800e666 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e662:	2302      	movs	r3, #2
 800e664:	e02d      	b.n	800e6c2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	2201      	movs	r2, #1
 800e66a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	2224      	movs	r2, #36	; 0x24
 800e672:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	681a      	ldr	r2, [r3, #0]
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	f022 0201 	bic.w	r2, r2, #1
 800e68c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	689b      	ldr	r3, [r3, #8]
 800e694:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	683a      	ldr	r2, [r7, #0]
 800e69e:	430a      	orrs	r2, r1
 800e6a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e6a2:	6878      	ldr	r0, [r7, #4]
 800e6a4:	f000 f812 	bl	800e6cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	68fa      	ldr	r2, [r7, #12]
 800e6ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	2220      	movs	r2, #32
 800e6b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	2200      	movs	r2, #0
 800e6bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e6c0:	2300      	movs	r3, #0
}
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	3710      	adds	r7, #16
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	bd80      	pop	{r7, pc}
	...

0800e6cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e6cc:	b480      	push	{r7}
 800e6ce:	b085      	sub	sp, #20
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d108      	bne.n	800e6ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	2201      	movs	r2, #1
 800e6e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	2201      	movs	r2, #1
 800e6e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e6ec:	e031      	b.n	800e752 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e6ee:	2308      	movs	r3, #8
 800e6f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e6f2:	2308      	movs	r3, #8
 800e6f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	689b      	ldr	r3, [r3, #8]
 800e6fc:	0e5b      	lsrs	r3, r3, #25
 800e6fe:	b2db      	uxtb	r3, r3
 800e700:	f003 0307 	and.w	r3, r3, #7
 800e704:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	689b      	ldr	r3, [r3, #8]
 800e70c:	0f5b      	lsrs	r3, r3, #29
 800e70e:	b2db      	uxtb	r3, r3
 800e710:	f003 0307 	and.w	r3, r3, #7
 800e714:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e716:	7bbb      	ldrb	r3, [r7, #14]
 800e718:	7b3a      	ldrb	r2, [r7, #12]
 800e71a:	4911      	ldr	r1, [pc, #68]	; (800e760 <UARTEx_SetNbDataToProcess+0x94>)
 800e71c:	5c8a      	ldrb	r2, [r1, r2]
 800e71e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e722:	7b3a      	ldrb	r2, [r7, #12]
 800e724:	490f      	ldr	r1, [pc, #60]	; (800e764 <UARTEx_SetNbDataToProcess+0x98>)
 800e726:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e728:	fb93 f3f2 	sdiv	r3, r3, r2
 800e72c:	b29a      	uxth	r2, r3
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e734:	7bfb      	ldrb	r3, [r7, #15]
 800e736:	7b7a      	ldrb	r2, [r7, #13]
 800e738:	4909      	ldr	r1, [pc, #36]	; (800e760 <UARTEx_SetNbDataToProcess+0x94>)
 800e73a:	5c8a      	ldrb	r2, [r1, r2]
 800e73c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e740:	7b7a      	ldrb	r2, [r7, #13]
 800e742:	4908      	ldr	r1, [pc, #32]	; (800e764 <UARTEx_SetNbDataToProcess+0x98>)
 800e744:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e746:	fb93 f3f2 	sdiv	r3, r3, r2
 800e74a:	b29a      	uxth	r2, r3
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e752:	bf00      	nop
 800e754:	3714      	adds	r7, #20
 800e756:	46bd      	mov	sp, r7
 800e758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75c:	4770      	bx	lr
 800e75e:	bf00      	nop
 800e760:	080125cc 	.word	0x080125cc
 800e764:	080125d4 	.word	0x080125d4

0800e768 <__cvt>:
 800e768:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e76c:	ec55 4b10 	vmov	r4, r5, d0
 800e770:	2d00      	cmp	r5, #0
 800e772:	460e      	mov	r6, r1
 800e774:	4619      	mov	r1, r3
 800e776:	462b      	mov	r3, r5
 800e778:	bfbb      	ittet	lt
 800e77a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e77e:	461d      	movlt	r5, r3
 800e780:	2300      	movge	r3, #0
 800e782:	232d      	movlt	r3, #45	; 0x2d
 800e784:	700b      	strb	r3, [r1, #0]
 800e786:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e788:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e78c:	4691      	mov	r9, r2
 800e78e:	f023 0820 	bic.w	r8, r3, #32
 800e792:	bfbc      	itt	lt
 800e794:	4622      	movlt	r2, r4
 800e796:	4614      	movlt	r4, r2
 800e798:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e79c:	d005      	beq.n	800e7aa <__cvt+0x42>
 800e79e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e7a2:	d100      	bne.n	800e7a6 <__cvt+0x3e>
 800e7a4:	3601      	adds	r6, #1
 800e7a6:	2102      	movs	r1, #2
 800e7a8:	e000      	b.n	800e7ac <__cvt+0x44>
 800e7aa:	2103      	movs	r1, #3
 800e7ac:	ab03      	add	r3, sp, #12
 800e7ae:	9301      	str	r3, [sp, #4]
 800e7b0:	ab02      	add	r3, sp, #8
 800e7b2:	9300      	str	r3, [sp, #0]
 800e7b4:	ec45 4b10 	vmov	d0, r4, r5
 800e7b8:	4653      	mov	r3, sl
 800e7ba:	4632      	mov	r2, r6
 800e7bc:	f000 fea0 	bl	800f500 <_dtoa_r>
 800e7c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e7c4:	4607      	mov	r7, r0
 800e7c6:	d102      	bne.n	800e7ce <__cvt+0x66>
 800e7c8:	f019 0f01 	tst.w	r9, #1
 800e7cc:	d022      	beq.n	800e814 <__cvt+0xac>
 800e7ce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e7d2:	eb07 0906 	add.w	r9, r7, r6
 800e7d6:	d110      	bne.n	800e7fa <__cvt+0x92>
 800e7d8:	783b      	ldrb	r3, [r7, #0]
 800e7da:	2b30      	cmp	r3, #48	; 0x30
 800e7dc:	d10a      	bne.n	800e7f4 <__cvt+0x8c>
 800e7de:	2200      	movs	r2, #0
 800e7e0:	2300      	movs	r3, #0
 800e7e2:	4620      	mov	r0, r4
 800e7e4:	4629      	mov	r1, r5
 800e7e6:	f7f2 f997 	bl	8000b18 <__aeabi_dcmpeq>
 800e7ea:	b918      	cbnz	r0, 800e7f4 <__cvt+0x8c>
 800e7ec:	f1c6 0601 	rsb	r6, r6, #1
 800e7f0:	f8ca 6000 	str.w	r6, [sl]
 800e7f4:	f8da 3000 	ldr.w	r3, [sl]
 800e7f8:	4499      	add	r9, r3
 800e7fa:	2200      	movs	r2, #0
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	4620      	mov	r0, r4
 800e800:	4629      	mov	r1, r5
 800e802:	f7f2 f989 	bl	8000b18 <__aeabi_dcmpeq>
 800e806:	b108      	cbz	r0, 800e80c <__cvt+0xa4>
 800e808:	f8cd 900c 	str.w	r9, [sp, #12]
 800e80c:	2230      	movs	r2, #48	; 0x30
 800e80e:	9b03      	ldr	r3, [sp, #12]
 800e810:	454b      	cmp	r3, r9
 800e812:	d307      	bcc.n	800e824 <__cvt+0xbc>
 800e814:	9b03      	ldr	r3, [sp, #12]
 800e816:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e818:	1bdb      	subs	r3, r3, r7
 800e81a:	4638      	mov	r0, r7
 800e81c:	6013      	str	r3, [r2, #0]
 800e81e:	b004      	add	sp, #16
 800e820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e824:	1c59      	adds	r1, r3, #1
 800e826:	9103      	str	r1, [sp, #12]
 800e828:	701a      	strb	r2, [r3, #0]
 800e82a:	e7f0      	b.n	800e80e <__cvt+0xa6>

0800e82c <__exponent>:
 800e82c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e82e:	4603      	mov	r3, r0
 800e830:	2900      	cmp	r1, #0
 800e832:	bfb8      	it	lt
 800e834:	4249      	neglt	r1, r1
 800e836:	f803 2b02 	strb.w	r2, [r3], #2
 800e83a:	bfb4      	ite	lt
 800e83c:	222d      	movlt	r2, #45	; 0x2d
 800e83e:	222b      	movge	r2, #43	; 0x2b
 800e840:	2909      	cmp	r1, #9
 800e842:	7042      	strb	r2, [r0, #1]
 800e844:	dd2a      	ble.n	800e89c <__exponent+0x70>
 800e846:	f10d 0207 	add.w	r2, sp, #7
 800e84a:	4617      	mov	r7, r2
 800e84c:	260a      	movs	r6, #10
 800e84e:	4694      	mov	ip, r2
 800e850:	fb91 f5f6 	sdiv	r5, r1, r6
 800e854:	fb06 1415 	mls	r4, r6, r5, r1
 800e858:	3430      	adds	r4, #48	; 0x30
 800e85a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800e85e:	460c      	mov	r4, r1
 800e860:	2c63      	cmp	r4, #99	; 0x63
 800e862:	f102 32ff 	add.w	r2, r2, #4294967295
 800e866:	4629      	mov	r1, r5
 800e868:	dcf1      	bgt.n	800e84e <__exponent+0x22>
 800e86a:	3130      	adds	r1, #48	; 0x30
 800e86c:	f1ac 0402 	sub.w	r4, ip, #2
 800e870:	f802 1c01 	strb.w	r1, [r2, #-1]
 800e874:	1c41      	adds	r1, r0, #1
 800e876:	4622      	mov	r2, r4
 800e878:	42ba      	cmp	r2, r7
 800e87a:	d30a      	bcc.n	800e892 <__exponent+0x66>
 800e87c:	f10d 0209 	add.w	r2, sp, #9
 800e880:	eba2 020c 	sub.w	r2, r2, ip
 800e884:	42bc      	cmp	r4, r7
 800e886:	bf88      	it	hi
 800e888:	2200      	movhi	r2, #0
 800e88a:	4413      	add	r3, r2
 800e88c:	1a18      	subs	r0, r3, r0
 800e88e:	b003      	add	sp, #12
 800e890:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e892:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e896:	f801 5f01 	strb.w	r5, [r1, #1]!
 800e89a:	e7ed      	b.n	800e878 <__exponent+0x4c>
 800e89c:	2330      	movs	r3, #48	; 0x30
 800e89e:	3130      	adds	r1, #48	; 0x30
 800e8a0:	7083      	strb	r3, [r0, #2]
 800e8a2:	70c1      	strb	r1, [r0, #3]
 800e8a4:	1d03      	adds	r3, r0, #4
 800e8a6:	e7f1      	b.n	800e88c <__exponent+0x60>

0800e8a8 <_printf_float>:
 800e8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8ac:	ed2d 8b02 	vpush	{d8}
 800e8b0:	b08d      	sub	sp, #52	; 0x34
 800e8b2:	460c      	mov	r4, r1
 800e8b4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e8b8:	4616      	mov	r6, r2
 800e8ba:	461f      	mov	r7, r3
 800e8bc:	4605      	mov	r5, r0
 800e8be:	f000 fd0f 	bl	800f2e0 <_localeconv_r>
 800e8c2:	f8d0 a000 	ldr.w	sl, [r0]
 800e8c6:	4650      	mov	r0, sl
 800e8c8:	f7f1 fcfa 	bl	80002c0 <strlen>
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	930a      	str	r3, [sp, #40]	; 0x28
 800e8d0:	6823      	ldr	r3, [r4, #0]
 800e8d2:	9305      	str	r3, [sp, #20]
 800e8d4:	f8d8 3000 	ldr.w	r3, [r8]
 800e8d8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e8dc:	3307      	adds	r3, #7
 800e8de:	f023 0307 	bic.w	r3, r3, #7
 800e8e2:	f103 0208 	add.w	r2, r3, #8
 800e8e6:	f8c8 2000 	str.w	r2, [r8]
 800e8ea:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e8ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e8f2:	9307      	str	r3, [sp, #28]
 800e8f4:	f8cd 8018 	str.w	r8, [sp, #24]
 800e8f8:	ee08 0a10 	vmov	s16, r0
 800e8fc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800e900:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e904:	4b9e      	ldr	r3, [pc, #632]	; (800eb80 <_printf_float+0x2d8>)
 800e906:	f04f 32ff 	mov.w	r2, #4294967295
 800e90a:	f7f2 f937 	bl	8000b7c <__aeabi_dcmpun>
 800e90e:	bb88      	cbnz	r0, 800e974 <_printf_float+0xcc>
 800e910:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e914:	4b9a      	ldr	r3, [pc, #616]	; (800eb80 <_printf_float+0x2d8>)
 800e916:	f04f 32ff 	mov.w	r2, #4294967295
 800e91a:	f7f2 f911 	bl	8000b40 <__aeabi_dcmple>
 800e91e:	bb48      	cbnz	r0, 800e974 <_printf_float+0xcc>
 800e920:	2200      	movs	r2, #0
 800e922:	2300      	movs	r3, #0
 800e924:	4640      	mov	r0, r8
 800e926:	4649      	mov	r1, r9
 800e928:	f7f2 f900 	bl	8000b2c <__aeabi_dcmplt>
 800e92c:	b110      	cbz	r0, 800e934 <_printf_float+0x8c>
 800e92e:	232d      	movs	r3, #45	; 0x2d
 800e930:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e934:	4a93      	ldr	r2, [pc, #588]	; (800eb84 <_printf_float+0x2dc>)
 800e936:	4b94      	ldr	r3, [pc, #592]	; (800eb88 <_printf_float+0x2e0>)
 800e938:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e93c:	bf94      	ite	ls
 800e93e:	4690      	movls	r8, r2
 800e940:	4698      	movhi	r8, r3
 800e942:	2303      	movs	r3, #3
 800e944:	6123      	str	r3, [r4, #16]
 800e946:	9b05      	ldr	r3, [sp, #20]
 800e948:	f023 0304 	bic.w	r3, r3, #4
 800e94c:	6023      	str	r3, [r4, #0]
 800e94e:	f04f 0900 	mov.w	r9, #0
 800e952:	9700      	str	r7, [sp, #0]
 800e954:	4633      	mov	r3, r6
 800e956:	aa0b      	add	r2, sp, #44	; 0x2c
 800e958:	4621      	mov	r1, r4
 800e95a:	4628      	mov	r0, r5
 800e95c:	f000 f9da 	bl	800ed14 <_printf_common>
 800e960:	3001      	adds	r0, #1
 800e962:	f040 8090 	bne.w	800ea86 <_printf_float+0x1de>
 800e966:	f04f 30ff 	mov.w	r0, #4294967295
 800e96a:	b00d      	add	sp, #52	; 0x34
 800e96c:	ecbd 8b02 	vpop	{d8}
 800e970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e974:	4642      	mov	r2, r8
 800e976:	464b      	mov	r3, r9
 800e978:	4640      	mov	r0, r8
 800e97a:	4649      	mov	r1, r9
 800e97c:	f7f2 f8fe 	bl	8000b7c <__aeabi_dcmpun>
 800e980:	b140      	cbz	r0, 800e994 <_printf_float+0xec>
 800e982:	464b      	mov	r3, r9
 800e984:	2b00      	cmp	r3, #0
 800e986:	bfbc      	itt	lt
 800e988:	232d      	movlt	r3, #45	; 0x2d
 800e98a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e98e:	4a7f      	ldr	r2, [pc, #508]	; (800eb8c <_printf_float+0x2e4>)
 800e990:	4b7f      	ldr	r3, [pc, #508]	; (800eb90 <_printf_float+0x2e8>)
 800e992:	e7d1      	b.n	800e938 <_printf_float+0x90>
 800e994:	6863      	ldr	r3, [r4, #4]
 800e996:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e99a:	9206      	str	r2, [sp, #24]
 800e99c:	1c5a      	adds	r2, r3, #1
 800e99e:	d13f      	bne.n	800ea20 <_printf_float+0x178>
 800e9a0:	2306      	movs	r3, #6
 800e9a2:	6063      	str	r3, [r4, #4]
 800e9a4:	9b05      	ldr	r3, [sp, #20]
 800e9a6:	6861      	ldr	r1, [r4, #4]
 800e9a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	9303      	str	r3, [sp, #12]
 800e9b0:	ab0a      	add	r3, sp, #40	; 0x28
 800e9b2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e9b6:	ab09      	add	r3, sp, #36	; 0x24
 800e9b8:	ec49 8b10 	vmov	d0, r8, r9
 800e9bc:	9300      	str	r3, [sp, #0]
 800e9be:	6022      	str	r2, [r4, #0]
 800e9c0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e9c4:	4628      	mov	r0, r5
 800e9c6:	f7ff fecf 	bl	800e768 <__cvt>
 800e9ca:	9b06      	ldr	r3, [sp, #24]
 800e9cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e9ce:	2b47      	cmp	r3, #71	; 0x47
 800e9d0:	4680      	mov	r8, r0
 800e9d2:	d108      	bne.n	800e9e6 <_printf_float+0x13e>
 800e9d4:	1cc8      	adds	r0, r1, #3
 800e9d6:	db02      	blt.n	800e9de <_printf_float+0x136>
 800e9d8:	6863      	ldr	r3, [r4, #4]
 800e9da:	4299      	cmp	r1, r3
 800e9dc:	dd41      	ble.n	800ea62 <_printf_float+0x1ba>
 800e9de:	f1ab 0302 	sub.w	r3, fp, #2
 800e9e2:	fa5f fb83 	uxtb.w	fp, r3
 800e9e6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e9ea:	d820      	bhi.n	800ea2e <_printf_float+0x186>
 800e9ec:	3901      	subs	r1, #1
 800e9ee:	465a      	mov	r2, fp
 800e9f0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e9f4:	9109      	str	r1, [sp, #36]	; 0x24
 800e9f6:	f7ff ff19 	bl	800e82c <__exponent>
 800e9fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e9fc:	1813      	adds	r3, r2, r0
 800e9fe:	2a01      	cmp	r2, #1
 800ea00:	4681      	mov	r9, r0
 800ea02:	6123      	str	r3, [r4, #16]
 800ea04:	dc02      	bgt.n	800ea0c <_printf_float+0x164>
 800ea06:	6822      	ldr	r2, [r4, #0]
 800ea08:	07d2      	lsls	r2, r2, #31
 800ea0a:	d501      	bpl.n	800ea10 <_printf_float+0x168>
 800ea0c:	3301      	adds	r3, #1
 800ea0e:	6123      	str	r3, [r4, #16]
 800ea10:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d09c      	beq.n	800e952 <_printf_float+0xaa>
 800ea18:	232d      	movs	r3, #45	; 0x2d
 800ea1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ea1e:	e798      	b.n	800e952 <_printf_float+0xaa>
 800ea20:	9a06      	ldr	r2, [sp, #24]
 800ea22:	2a47      	cmp	r2, #71	; 0x47
 800ea24:	d1be      	bne.n	800e9a4 <_printf_float+0xfc>
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d1bc      	bne.n	800e9a4 <_printf_float+0xfc>
 800ea2a:	2301      	movs	r3, #1
 800ea2c:	e7b9      	b.n	800e9a2 <_printf_float+0xfa>
 800ea2e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ea32:	d118      	bne.n	800ea66 <_printf_float+0x1be>
 800ea34:	2900      	cmp	r1, #0
 800ea36:	6863      	ldr	r3, [r4, #4]
 800ea38:	dd0b      	ble.n	800ea52 <_printf_float+0x1aa>
 800ea3a:	6121      	str	r1, [r4, #16]
 800ea3c:	b913      	cbnz	r3, 800ea44 <_printf_float+0x19c>
 800ea3e:	6822      	ldr	r2, [r4, #0]
 800ea40:	07d0      	lsls	r0, r2, #31
 800ea42:	d502      	bpl.n	800ea4a <_printf_float+0x1a2>
 800ea44:	3301      	adds	r3, #1
 800ea46:	440b      	add	r3, r1
 800ea48:	6123      	str	r3, [r4, #16]
 800ea4a:	65a1      	str	r1, [r4, #88]	; 0x58
 800ea4c:	f04f 0900 	mov.w	r9, #0
 800ea50:	e7de      	b.n	800ea10 <_printf_float+0x168>
 800ea52:	b913      	cbnz	r3, 800ea5a <_printf_float+0x1b2>
 800ea54:	6822      	ldr	r2, [r4, #0]
 800ea56:	07d2      	lsls	r2, r2, #31
 800ea58:	d501      	bpl.n	800ea5e <_printf_float+0x1b6>
 800ea5a:	3302      	adds	r3, #2
 800ea5c:	e7f4      	b.n	800ea48 <_printf_float+0x1a0>
 800ea5e:	2301      	movs	r3, #1
 800ea60:	e7f2      	b.n	800ea48 <_printf_float+0x1a0>
 800ea62:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ea66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea68:	4299      	cmp	r1, r3
 800ea6a:	db05      	blt.n	800ea78 <_printf_float+0x1d0>
 800ea6c:	6823      	ldr	r3, [r4, #0]
 800ea6e:	6121      	str	r1, [r4, #16]
 800ea70:	07d8      	lsls	r0, r3, #31
 800ea72:	d5ea      	bpl.n	800ea4a <_printf_float+0x1a2>
 800ea74:	1c4b      	adds	r3, r1, #1
 800ea76:	e7e7      	b.n	800ea48 <_printf_float+0x1a0>
 800ea78:	2900      	cmp	r1, #0
 800ea7a:	bfd4      	ite	le
 800ea7c:	f1c1 0202 	rsble	r2, r1, #2
 800ea80:	2201      	movgt	r2, #1
 800ea82:	4413      	add	r3, r2
 800ea84:	e7e0      	b.n	800ea48 <_printf_float+0x1a0>
 800ea86:	6823      	ldr	r3, [r4, #0]
 800ea88:	055a      	lsls	r2, r3, #21
 800ea8a:	d407      	bmi.n	800ea9c <_printf_float+0x1f4>
 800ea8c:	6923      	ldr	r3, [r4, #16]
 800ea8e:	4642      	mov	r2, r8
 800ea90:	4631      	mov	r1, r6
 800ea92:	4628      	mov	r0, r5
 800ea94:	47b8      	blx	r7
 800ea96:	3001      	adds	r0, #1
 800ea98:	d12c      	bne.n	800eaf4 <_printf_float+0x24c>
 800ea9a:	e764      	b.n	800e966 <_printf_float+0xbe>
 800ea9c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800eaa0:	f240 80e0 	bls.w	800ec64 <_printf_float+0x3bc>
 800eaa4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800eaa8:	2200      	movs	r2, #0
 800eaaa:	2300      	movs	r3, #0
 800eaac:	f7f2 f834 	bl	8000b18 <__aeabi_dcmpeq>
 800eab0:	2800      	cmp	r0, #0
 800eab2:	d034      	beq.n	800eb1e <_printf_float+0x276>
 800eab4:	4a37      	ldr	r2, [pc, #220]	; (800eb94 <_printf_float+0x2ec>)
 800eab6:	2301      	movs	r3, #1
 800eab8:	4631      	mov	r1, r6
 800eaba:	4628      	mov	r0, r5
 800eabc:	47b8      	blx	r7
 800eabe:	3001      	adds	r0, #1
 800eac0:	f43f af51 	beq.w	800e966 <_printf_float+0xbe>
 800eac4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eac8:	429a      	cmp	r2, r3
 800eaca:	db02      	blt.n	800ead2 <_printf_float+0x22a>
 800eacc:	6823      	ldr	r3, [r4, #0]
 800eace:	07d8      	lsls	r0, r3, #31
 800ead0:	d510      	bpl.n	800eaf4 <_printf_float+0x24c>
 800ead2:	ee18 3a10 	vmov	r3, s16
 800ead6:	4652      	mov	r2, sl
 800ead8:	4631      	mov	r1, r6
 800eada:	4628      	mov	r0, r5
 800eadc:	47b8      	blx	r7
 800eade:	3001      	adds	r0, #1
 800eae0:	f43f af41 	beq.w	800e966 <_printf_float+0xbe>
 800eae4:	f04f 0800 	mov.w	r8, #0
 800eae8:	f104 091a 	add.w	r9, r4, #26
 800eaec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eaee:	3b01      	subs	r3, #1
 800eaf0:	4543      	cmp	r3, r8
 800eaf2:	dc09      	bgt.n	800eb08 <_printf_float+0x260>
 800eaf4:	6823      	ldr	r3, [r4, #0]
 800eaf6:	079b      	lsls	r3, r3, #30
 800eaf8:	f100 8107 	bmi.w	800ed0a <_printf_float+0x462>
 800eafc:	68e0      	ldr	r0, [r4, #12]
 800eafe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb00:	4298      	cmp	r0, r3
 800eb02:	bfb8      	it	lt
 800eb04:	4618      	movlt	r0, r3
 800eb06:	e730      	b.n	800e96a <_printf_float+0xc2>
 800eb08:	2301      	movs	r3, #1
 800eb0a:	464a      	mov	r2, r9
 800eb0c:	4631      	mov	r1, r6
 800eb0e:	4628      	mov	r0, r5
 800eb10:	47b8      	blx	r7
 800eb12:	3001      	adds	r0, #1
 800eb14:	f43f af27 	beq.w	800e966 <_printf_float+0xbe>
 800eb18:	f108 0801 	add.w	r8, r8, #1
 800eb1c:	e7e6      	b.n	800eaec <_printf_float+0x244>
 800eb1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	dc39      	bgt.n	800eb98 <_printf_float+0x2f0>
 800eb24:	4a1b      	ldr	r2, [pc, #108]	; (800eb94 <_printf_float+0x2ec>)
 800eb26:	2301      	movs	r3, #1
 800eb28:	4631      	mov	r1, r6
 800eb2a:	4628      	mov	r0, r5
 800eb2c:	47b8      	blx	r7
 800eb2e:	3001      	adds	r0, #1
 800eb30:	f43f af19 	beq.w	800e966 <_printf_float+0xbe>
 800eb34:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800eb38:	4313      	orrs	r3, r2
 800eb3a:	d102      	bne.n	800eb42 <_printf_float+0x29a>
 800eb3c:	6823      	ldr	r3, [r4, #0]
 800eb3e:	07d9      	lsls	r1, r3, #31
 800eb40:	d5d8      	bpl.n	800eaf4 <_printf_float+0x24c>
 800eb42:	ee18 3a10 	vmov	r3, s16
 800eb46:	4652      	mov	r2, sl
 800eb48:	4631      	mov	r1, r6
 800eb4a:	4628      	mov	r0, r5
 800eb4c:	47b8      	blx	r7
 800eb4e:	3001      	adds	r0, #1
 800eb50:	f43f af09 	beq.w	800e966 <_printf_float+0xbe>
 800eb54:	f04f 0900 	mov.w	r9, #0
 800eb58:	f104 0a1a 	add.w	sl, r4, #26
 800eb5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb5e:	425b      	negs	r3, r3
 800eb60:	454b      	cmp	r3, r9
 800eb62:	dc01      	bgt.n	800eb68 <_printf_float+0x2c0>
 800eb64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb66:	e792      	b.n	800ea8e <_printf_float+0x1e6>
 800eb68:	2301      	movs	r3, #1
 800eb6a:	4652      	mov	r2, sl
 800eb6c:	4631      	mov	r1, r6
 800eb6e:	4628      	mov	r0, r5
 800eb70:	47b8      	blx	r7
 800eb72:	3001      	adds	r0, #1
 800eb74:	f43f aef7 	beq.w	800e966 <_printf_float+0xbe>
 800eb78:	f109 0901 	add.w	r9, r9, #1
 800eb7c:	e7ee      	b.n	800eb5c <_printf_float+0x2b4>
 800eb7e:	bf00      	nop
 800eb80:	7fefffff 	.word	0x7fefffff
 800eb84:	080125dc 	.word	0x080125dc
 800eb88:	080125e0 	.word	0x080125e0
 800eb8c:	080125e4 	.word	0x080125e4
 800eb90:	080125e8 	.word	0x080125e8
 800eb94:	080125ec 	.word	0x080125ec
 800eb98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eb9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800eb9c:	429a      	cmp	r2, r3
 800eb9e:	bfa8      	it	ge
 800eba0:	461a      	movge	r2, r3
 800eba2:	2a00      	cmp	r2, #0
 800eba4:	4691      	mov	r9, r2
 800eba6:	dc37      	bgt.n	800ec18 <_printf_float+0x370>
 800eba8:	f04f 0b00 	mov.w	fp, #0
 800ebac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ebb0:	f104 021a 	add.w	r2, r4, #26
 800ebb4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ebb6:	9305      	str	r3, [sp, #20]
 800ebb8:	eba3 0309 	sub.w	r3, r3, r9
 800ebbc:	455b      	cmp	r3, fp
 800ebbe:	dc33      	bgt.n	800ec28 <_printf_float+0x380>
 800ebc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ebc4:	429a      	cmp	r2, r3
 800ebc6:	db3b      	blt.n	800ec40 <_printf_float+0x398>
 800ebc8:	6823      	ldr	r3, [r4, #0]
 800ebca:	07da      	lsls	r2, r3, #31
 800ebcc:	d438      	bmi.n	800ec40 <_printf_float+0x398>
 800ebce:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ebd2:	eba2 0903 	sub.w	r9, r2, r3
 800ebd6:	9b05      	ldr	r3, [sp, #20]
 800ebd8:	1ad2      	subs	r2, r2, r3
 800ebda:	4591      	cmp	r9, r2
 800ebdc:	bfa8      	it	ge
 800ebde:	4691      	movge	r9, r2
 800ebe0:	f1b9 0f00 	cmp.w	r9, #0
 800ebe4:	dc35      	bgt.n	800ec52 <_printf_float+0x3aa>
 800ebe6:	f04f 0800 	mov.w	r8, #0
 800ebea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ebee:	f104 0a1a 	add.w	sl, r4, #26
 800ebf2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ebf6:	1a9b      	subs	r3, r3, r2
 800ebf8:	eba3 0309 	sub.w	r3, r3, r9
 800ebfc:	4543      	cmp	r3, r8
 800ebfe:	f77f af79 	ble.w	800eaf4 <_printf_float+0x24c>
 800ec02:	2301      	movs	r3, #1
 800ec04:	4652      	mov	r2, sl
 800ec06:	4631      	mov	r1, r6
 800ec08:	4628      	mov	r0, r5
 800ec0a:	47b8      	blx	r7
 800ec0c:	3001      	adds	r0, #1
 800ec0e:	f43f aeaa 	beq.w	800e966 <_printf_float+0xbe>
 800ec12:	f108 0801 	add.w	r8, r8, #1
 800ec16:	e7ec      	b.n	800ebf2 <_printf_float+0x34a>
 800ec18:	4613      	mov	r3, r2
 800ec1a:	4631      	mov	r1, r6
 800ec1c:	4642      	mov	r2, r8
 800ec1e:	4628      	mov	r0, r5
 800ec20:	47b8      	blx	r7
 800ec22:	3001      	adds	r0, #1
 800ec24:	d1c0      	bne.n	800eba8 <_printf_float+0x300>
 800ec26:	e69e      	b.n	800e966 <_printf_float+0xbe>
 800ec28:	2301      	movs	r3, #1
 800ec2a:	4631      	mov	r1, r6
 800ec2c:	4628      	mov	r0, r5
 800ec2e:	9205      	str	r2, [sp, #20]
 800ec30:	47b8      	blx	r7
 800ec32:	3001      	adds	r0, #1
 800ec34:	f43f ae97 	beq.w	800e966 <_printf_float+0xbe>
 800ec38:	9a05      	ldr	r2, [sp, #20]
 800ec3a:	f10b 0b01 	add.w	fp, fp, #1
 800ec3e:	e7b9      	b.n	800ebb4 <_printf_float+0x30c>
 800ec40:	ee18 3a10 	vmov	r3, s16
 800ec44:	4652      	mov	r2, sl
 800ec46:	4631      	mov	r1, r6
 800ec48:	4628      	mov	r0, r5
 800ec4a:	47b8      	blx	r7
 800ec4c:	3001      	adds	r0, #1
 800ec4e:	d1be      	bne.n	800ebce <_printf_float+0x326>
 800ec50:	e689      	b.n	800e966 <_printf_float+0xbe>
 800ec52:	9a05      	ldr	r2, [sp, #20]
 800ec54:	464b      	mov	r3, r9
 800ec56:	4442      	add	r2, r8
 800ec58:	4631      	mov	r1, r6
 800ec5a:	4628      	mov	r0, r5
 800ec5c:	47b8      	blx	r7
 800ec5e:	3001      	adds	r0, #1
 800ec60:	d1c1      	bne.n	800ebe6 <_printf_float+0x33e>
 800ec62:	e680      	b.n	800e966 <_printf_float+0xbe>
 800ec64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ec66:	2a01      	cmp	r2, #1
 800ec68:	dc01      	bgt.n	800ec6e <_printf_float+0x3c6>
 800ec6a:	07db      	lsls	r3, r3, #31
 800ec6c:	d53a      	bpl.n	800ece4 <_printf_float+0x43c>
 800ec6e:	2301      	movs	r3, #1
 800ec70:	4642      	mov	r2, r8
 800ec72:	4631      	mov	r1, r6
 800ec74:	4628      	mov	r0, r5
 800ec76:	47b8      	blx	r7
 800ec78:	3001      	adds	r0, #1
 800ec7a:	f43f ae74 	beq.w	800e966 <_printf_float+0xbe>
 800ec7e:	ee18 3a10 	vmov	r3, s16
 800ec82:	4652      	mov	r2, sl
 800ec84:	4631      	mov	r1, r6
 800ec86:	4628      	mov	r0, r5
 800ec88:	47b8      	blx	r7
 800ec8a:	3001      	adds	r0, #1
 800ec8c:	f43f ae6b 	beq.w	800e966 <_printf_float+0xbe>
 800ec90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ec94:	2200      	movs	r2, #0
 800ec96:	2300      	movs	r3, #0
 800ec98:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800ec9c:	f7f1 ff3c 	bl	8000b18 <__aeabi_dcmpeq>
 800eca0:	b9d8      	cbnz	r0, 800ecda <_printf_float+0x432>
 800eca2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800eca6:	f108 0201 	add.w	r2, r8, #1
 800ecaa:	4631      	mov	r1, r6
 800ecac:	4628      	mov	r0, r5
 800ecae:	47b8      	blx	r7
 800ecb0:	3001      	adds	r0, #1
 800ecb2:	d10e      	bne.n	800ecd2 <_printf_float+0x42a>
 800ecb4:	e657      	b.n	800e966 <_printf_float+0xbe>
 800ecb6:	2301      	movs	r3, #1
 800ecb8:	4652      	mov	r2, sl
 800ecba:	4631      	mov	r1, r6
 800ecbc:	4628      	mov	r0, r5
 800ecbe:	47b8      	blx	r7
 800ecc0:	3001      	adds	r0, #1
 800ecc2:	f43f ae50 	beq.w	800e966 <_printf_float+0xbe>
 800ecc6:	f108 0801 	add.w	r8, r8, #1
 800ecca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eccc:	3b01      	subs	r3, #1
 800ecce:	4543      	cmp	r3, r8
 800ecd0:	dcf1      	bgt.n	800ecb6 <_printf_float+0x40e>
 800ecd2:	464b      	mov	r3, r9
 800ecd4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ecd8:	e6da      	b.n	800ea90 <_printf_float+0x1e8>
 800ecda:	f04f 0800 	mov.w	r8, #0
 800ecde:	f104 0a1a 	add.w	sl, r4, #26
 800ece2:	e7f2      	b.n	800ecca <_printf_float+0x422>
 800ece4:	2301      	movs	r3, #1
 800ece6:	4642      	mov	r2, r8
 800ece8:	e7df      	b.n	800ecaa <_printf_float+0x402>
 800ecea:	2301      	movs	r3, #1
 800ecec:	464a      	mov	r2, r9
 800ecee:	4631      	mov	r1, r6
 800ecf0:	4628      	mov	r0, r5
 800ecf2:	47b8      	blx	r7
 800ecf4:	3001      	adds	r0, #1
 800ecf6:	f43f ae36 	beq.w	800e966 <_printf_float+0xbe>
 800ecfa:	f108 0801 	add.w	r8, r8, #1
 800ecfe:	68e3      	ldr	r3, [r4, #12]
 800ed00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ed02:	1a5b      	subs	r3, r3, r1
 800ed04:	4543      	cmp	r3, r8
 800ed06:	dcf0      	bgt.n	800ecea <_printf_float+0x442>
 800ed08:	e6f8      	b.n	800eafc <_printf_float+0x254>
 800ed0a:	f04f 0800 	mov.w	r8, #0
 800ed0e:	f104 0919 	add.w	r9, r4, #25
 800ed12:	e7f4      	b.n	800ecfe <_printf_float+0x456>

0800ed14 <_printf_common>:
 800ed14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed18:	4616      	mov	r6, r2
 800ed1a:	4699      	mov	r9, r3
 800ed1c:	688a      	ldr	r2, [r1, #8]
 800ed1e:	690b      	ldr	r3, [r1, #16]
 800ed20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ed24:	4293      	cmp	r3, r2
 800ed26:	bfb8      	it	lt
 800ed28:	4613      	movlt	r3, r2
 800ed2a:	6033      	str	r3, [r6, #0]
 800ed2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ed30:	4607      	mov	r7, r0
 800ed32:	460c      	mov	r4, r1
 800ed34:	b10a      	cbz	r2, 800ed3a <_printf_common+0x26>
 800ed36:	3301      	adds	r3, #1
 800ed38:	6033      	str	r3, [r6, #0]
 800ed3a:	6823      	ldr	r3, [r4, #0]
 800ed3c:	0699      	lsls	r1, r3, #26
 800ed3e:	bf42      	ittt	mi
 800ed40:	6833      	ldrmi	r3, [r6, #0]
 800ed42:	3302      	addmi	r3, #2
 800ed44:	6033      	strmi	r3, [r6, #0]
 800ed46:	6825      	ldr	r5, [r4, #0]
 800ed48:	f015 0506 	ands.w	r5, r5, #6
 800ed4c:	d106      	bne.n	800ed5c <_printf_common+0x48>
 800ed4e:	f104 0a19 	add.w	sl, r4, #25
 800ed52:	68e3      	ldr	r3, [r4, #12]
 800ed54:	6832      	ldr	r2, [r6, #0]
 800ed56:	1a9b      	subs	r3, r3, r2
 800ed58:	42ab      	cmp	r3, r5
 800ed5a:	dc26      	bgt.n	800edaa <_printf_common+0x96>
 800ed5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ed60:	1e13      	subs	r3, r2, #0
 800ed62:	6822      	ldr	r2, [r4, #0]
 800ed64:	bf18      	it	ne
 800ed66:	2301      	movne	r3, #1
 800ed68:	0692      	lsls	r2, r2, #26
 800ed6a:	d42b      	bmi.n	800edc4 <_printf_common+0xb0>
 800ed6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ed70:	4649      	mov	r1, r9
 800ed72:	4638      	mov	r0, r7
 800ed74:	47c0      	blx	r8
 800ed76:	3001      	adds	r0, #1
 800ed78:	d01e      	beq.n	800edb8 <_printf_common+0xa4>
 800ed7a:	6823      	ldr	r3, [r4, #0]
 800ed7c:	6922      	ldr	r2, [r4, #16]
 800ed7e:	f003 0306 	and.w	r3, r3, #6
 800ed82:	2b04      	cmp	r3, #4
 800ed84:	bf02      	ittt	eq
 800ed86:	68e5      	ldreq	r5, [r4, #12]
 800ed88:	6833      	ldreq	r3, [r6, #0]
 800ed8a:	1aed      	subeq	r5, r5, r3
 800ed8c:	68a3      	ldr	r3, [r4, #8]
 800ed8e:	bf0c      	ite	eq
 800ed90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ed94:	2500      	movne	r5, #0
 800ed96:	4293      	cmp	r3, r2
 800ed98:	bfc4      	itt	gt
 800ed9a:	1a9b      	subgt	r3, r3, r2
 800ed9c:	18ed      	addgt	r5, r5, r3
 800ed9e:	2600      	movs	r6, #0
 800eda0:	341a      	adds	r4, #26
 800eda2:	42b5      	cmp	r5, r6
 800eda4:	d11a      	bne.n	800eddc <_printf_common+0xc8>
 800eda6:	2000      	movs	r0, #0
 800eda8:	e008      	b.n	800edbc <_printf_common+0xa8>
 800edaa:	2301      	movs	r3, #1
 800edac:	4652      	mov	r2, sl
 800edae:	4649      	mov	r1, r9
 800edb0:	4638      	mov	r0, r7
 800edb2:	47c0      	blx	r8
 800edb4:	3001      	adds	r0, #1
 800edb6:	d103      	bne.n	800edc0 <_printf_common+0xac>
 800edb8:	f04f 30ff 	mov.w	r0, #4294967295
 800edbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edc0:	3501      	adds	r5, #1
 800edc2:	e7c6      	b.n	800ed52 <_printf_common+0x3e>
 800edc4:	18e1      	adds	r1, r4, r3
 800edc6:	1c5a      	adds	r2, r3, #1
 800edc8:	2030      	movs	r0, #48	; 0x30
 800edca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800edce:	4422      	add	r2, r4
 800edd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800edd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800edd8:	3302      	adds	r3, #2
 800edda:	e7c7      	b.n	800ed6c <_printf_common+0x58>
 800eddc:	2301      	movs	r3, #1
 800edde:	4622      	mov	r2, r4
 800ede0:	4649      	mov	r1, r9
 800ede2:	4638      	mov	r0, r7
 800ede4:	47c0      	blx	r8
 800ede6:	3001      	adds	r0, #1
 800ede8:	d0e6      	beq.n	800edb8 <_printf_common+0xa4>
 800edea:	3601      	adds	r6, #1
 800edec:	e7d9      	b.n	800eda2 <_printf_common+0x8e>
	...

0800edf0 <_printf_i>:
 800edf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800edf4:	7e0f      	ldrb	r7, [r1, #24]
 800edf6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800edf8:	2f78      	cmp	r7, #120	; 0x78
 800edfa:	4691      	mov	r9, r2
 800edfc:	4680      	mov	r8, r0
 800edfe:	460c      	mov	r4, r1
 800ee00:	469a      	mov	sl, r3
 800ee02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ee06:	d807      	bhi.n	800ee18 <_printf_i+0x28>
 800ee08:	2f62      	cmp	r7, #98	; 0x62
 800ee0a:	d80a      	bhi.n	800ee22 <_printf_i+0x32>
 800ee0c:	2f00      	cmp	r7, #0
 800ee0e:	f000 80d4 	beq.w	800efba <_printf_i+0x1ca>
 800ee12:	2f58      	cmp	r7, #88	; 0x58
 800ee14:	f000 80c0 	beq.w	800ef98 <_printf_i+0x1a8>
 800ee18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ee1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ee20:	e03a      	b.n	800ee98 <_printf_i+0xa8>
 800ee22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ee26:	2b15      	cmp	r3, #21
 800ee28:	d8f6      	bhi.n	800ee18 <_printf_i+0x28>
 800ee2a:	a101      	add	r1, pc, #4	; (adr r1, 800ee30 <_printf_i+0x40>)
 800ee2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ee30:	0800ee89 	.word	0x0800ee89
 800ee34:	0800ee9d 	.word	0x0800ee9d
 800ee38:	0800ee19 	.word	0x0800ee19
 800ee3c:	0800ee19 	.word	0x0800ee19
 800ee40:	0800ee19 	.word	0x0800ee19
 800ee44:	0800ee19 	.word	0x0800ee19
 800ee48:	0800ee9d 	.word	0x0800ee9d
 800ee4c:	0800ee19 	.word	0x0800ee19
 800ee50:	0800ee19 	.word	0x0800ee19
 800ee54:	0800ee19 	.word	0x0800ee19
 800ee58:	0800ee19 	.word	0x0800ee19
 800ee5c:	0800efa1 	.word	0x0800efa1
 800ee60:	0800eec9 	.word	0x0800eec9
 800ee64:	0800ef5b 	.word	0x0800ef5b
 800ee68:	0800ee19 	.word	0x0800ee19
 800ee6c:	0800ee19 	.word	0x0800ee19
 800ee70:	0800efc3 	.word	0x0800efc3
 800ee74:	0800ee19 	.word	0x0800ee19
 800ee78:	0800eec9 	.word	0x0800eec9
 800ee7c:	0800ee19 	.word	0x0800ee19
 800ee80:	0800ee19 	.word	0x0800ee19
 800ee84:	0800ef63 	.word	0x0800ef63
 800ee88:	682b      	ldr	r3, [r5, #0]
 800ee8a:	1d1a      	adds	r2, r3, #4
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	602a      	str	r2, [r5, #0]
 800ee90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ee94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ee98:	2301      	movs	r3, #1
 800ee9a:	e09f      	b.n	800efdc <_printf_i+0x1ec>
 800ee9c:	6820      	ldr	r0, [r4, #0]
 800ee9e:	682b      	ldr	r3, [r5, #0]
 800eea0:	0607      	lsls	r7, r0, #24
 800eea2:	f103 0104 	add.w	r1, r3, #4
 800eea6:	6029      	str	r1, [r5, #0]
 800eea8:	d501      	bpl.n	800eeae <_printf_i+0xbe>
 800eeaa:	681e      	ldr	r6, [r3, #0]
 800eeac:	e003      	b.n	800eeb6 <_printf_i+0xc6>
 800eeae:	0646      	lsls	r6, r0, #25
 800eeb0:	d5fb      	bpl.n	800eeaa <_printf_i+0xba>
 800eeb2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800eeb6:	2e00      	cmp	r6, #0
 800eeb8:	da03      	bge.n	800eec2 <_printf_i+0xd2>
 800eeba:	232d      	movs	r3, #45	; 0x2d
 800eebc:	4276      	negs	r6, r6
 800eebe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eec2:	485a      	ldr	r0, [pc, #360]	; (800f02c <_printf_i+0x23c>)
 800eec4:	230a      	movs	r3, #10
 800eec6:	e012      	b.n	800eeee <_printf_i+0xfe>
 800eec8:	682b      	ldr	r3, [r5, #0]
 800eeca:	6820      	ldr	r0, [r4, #0]
 800eecc:	1d19      	adds	r1, r3, #4
 800eece:	6029      	str	r1, [r5, #0]
 800eed0:	0605      	lsls	r5, r0, #24
 800eed2:	d501      	bpl.n	800eed8 <_printf_i+0xe8>
 800eed4:	681e      	ldr	r6, [r3, #0]
 800eed6:	e002      	b.n	800eede <_printf_i+0xee>
 800eed8:	0641      	lsls	r1, r0, #25
 800eeda:	d5fb      	bpl.n	800eed4 <_printf_i+0xe4>
 800eedc:	881e      	ldrh	r6, [r3, #0]
 800eede:	4853      	ldr	r0, [pc, #332]	; (800f02c <_printf_i+0x23c>)
 800eee0:	2f6f      	cmp	r7, #111	; 0x6f
 800eee2:	bf0c      	ite	eq
 800eee4:	2308      	moveq	r3, #8
 800eee6:	230a      	movne	r3, #10
 800eee8:	2100      	movs	r1, #0
 800eeea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800eeee:	6865      	ldr	r5, [r4, #4]
 800eef0:	60a5      	str	r5, [r4, #8]
 800eef2:	2d00      	cmp	r5, #0
 800eef4:	bfa2      	ittt	ge
 800eef6:	6821      	ldrge	r1, [r4, #0]
 800eef8:	f021 0104 	bicge.w	r1, r1, #4
 800eefc:	6021      	strge	r1, [r4, #0]
 800eefe:	b90e      	cbnz	r6, 800ef04 <_printf_i+0x114>
 800ef00:	2d00      	cmp	r5, #0
 800ef02:	d04b      	beq.n	800ef9c <_printf_i+0x1ac>
 800ef04:	4615      	mov	r5, r2
 800ef06:	fbb6 f1f3 	udiv	r1, r6, r3
 800ef0a:	fb03 6711 	mls	r7, r3, r1, r6
 800ef0e:	5dc7      	ldrb	r7, [r0, r7]
 800ef10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ef14:	4637      	mov	r7, r6
 800ef16:	42bb      	cmp	r3, r7
 800ef18:	460e      	mov	r6, r1
 800ef1a:	d9f4      	bls.n	800ef06 <_printf_i+0x116>
 800ef1c:	2b08      	cmp	r3, #8
 800ef1e:	d10b      	bne.n	800ef38 <_printf_i+0x148>
 800ef20:	6823      	ldr	r3, [r4, #0]
 800ef22:	07de      	lsls	r6, r3, #31
 800ef24:	d508      	bpl.n	800ef38 <_printf_i+0x148>
 800ef26:	6923      	ldr	r3, [r4, #16]
 800ef28:	6861      	ldr	r1, [r4, #4]
 800ef2a:	4299      	cmp	r1, r3
 800ef2c:	bfde      	ittt	le
 800ef2e:	2330      	movle	r3, #48	; 0x30
 800ef30:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ef34:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ef38:	1b52      	subs	r2, r2, r5
 800ef3a:	6122      	str	r2, [r4, #16]
 800ef3c:	f8cd a000 	str.w	sl, [sp]
 800ef40:	464b      	mov	r3, r9
 800ef42:	aa03      	add	r2, sp, #12
 800ef44:	4621      	mov	r1, r4
 800ef46:	4640      	mov	r0, r8
 800ef48:	f7ff fee4 	bl	800ed14 <_printf_common>
 800ef4c:	3001      	adds	r0, #1
 800ef4e:	d14a      	bne.n	800efe6 <_printf_i+0x1f6>
 800ef50:	f04f 30ff 	mov.w	r0, #4294967295
 800ef54:	b004      	add	sp, #16
 800ef56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef5a:	6823      	ldr	r3, [r4, #0]
 800ef5c:	f043 0320 	orr.w	r3, r3, #32
 800ef60:	6023      	str	r3, [r4, #0]
 800ef62:	4833      	ldr	r0, [pc, #204]	; (800f030 <_printf_i+0x240>)
 800ef64:	2778      	movs	r7, #120	; 0x78
 800ef66:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ef6a:	6823      	ldr	r3, [r4, #0]
 800ef6c:	6829      	ldr	r1, [r5, #0]
 800ef6e:	061f      	lsls	r7, r3, #24
 800ef70:	f851 6b04 	ldr.w	r6, [r1], #4
 800ef74:	d402      	bmi.n	800ef7c <_printf_i+0x18c>
 800ef76:	065f      	lsls	r7, r3, #25
 800ef78:	bf48      	it	mi
 800ef7a:	b2b6      	uxthmi	r6, r6
 800ef7c:	07df      	lsls	r7, r3, #31
 800ef7e:	bf48      	it	mi
 800ef80:	f043 0320 	orrmi.w	r3, r3, #32
 800ef84:	6029      	str	r1, [r5, #0]
 800ef86:	bf48      	it	mi
 800ef88:	6023      	strmi	r3, [r4, #0]
 800ef8a:	b91e      	cbnz	r6, 800ef94 <_printf_i+0x1a4>
 800ef8c:	6823      	ldr	r3, [r4, #0]
 800ef8e:	f023 0320 	bic.w	r3, r3, #32
 800ef92:	6023      	str	r3, [r4, #0]
 800ef94:	2310      	movs	r3, #16
 800ef96:	e7a7      	b.n	800eee8 <_printf_i+0xf8>
 800ef98:	4824      	ldr	r0, [pc, #144]	; (800f02c <_printf_i+0x23c>)
 800ef9a:	e7e4      	b.n	800ef66 <_printf_i+0x176>
 800ef9c:	4615      	mov	r5, r2
 800ef9e:	e7bd      	b.n	800ef1c <_printf_i+0x12c>
 800efa0:	682b      	ldr	r3, [r5, #0]
 800efa2:	6826      	ldr	r6, [r4, #0]
 800efa4:	6961      	ldr	r1, [r4, #20]
 800efa6:	1d18      	adds	r0, r3, #4
 800efa8:	6028      	str	r0, [r5, #0]
 800efaa:	0635      	lsls	r5, r6, #24
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	d501      	bpl.n	800efb4 <_printf_i+0x1c4>
 800efb0:	6019      	str	r1, [r3, #0]
 800efb2:	e002      	b.n	800efba <_printf_i+0x1ca>
 800efb4:	0670      	lsls	r0, r6, #25
 800efb6:	d5fb      	bpl.n	800efb0 <_printf_i+0x1c0>
 800efb8:	8019      	strh	r1, [r3, #0]
 800efba:	2300      	movs	r3, #0
 800efbc:	6123      	str	r3, [r4, #16]
 800efbe:	4615      	mov	r5, r2
 800efc0:	e7bc      	b.n	800ef3c <_printf_i+0x14c>
 800efc2:	682b      	ldr	r3, [r5, #0]
 800efc4:	1d1a      	adds	r2, r3, #4
 800efc6:	602a      	str	r2, [r5, #0]
 800efc8:	681d      	ldr	r5, [r3, #0]
 800efca:	6862      	ldr	r2, [r4, #4]
 800efcc:	2100      	movs	r1, #0
 800efce:	4628      	mov	r0, r5
 800efd0:	f7f1 f926 	bl	8000220 <memchr>
 800efd4:	b108      	cbz	r0, 800efda <_printf_i+0x1ea>
 800efd6:	1b40      	subs	r0, r0, r5
 800efd8:	6060      	str	r0, [r4, #4]
 800efda:	6863      	ldr	r3, [r4, #4]
 800efdc:	6123      	str	r3, [r4, #16]
 800efde:	2300      	movs	r3, #0
 800efe0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800efe4:	e7aa      	b.n	800ef3c <_printf_i+0x14c>
 800efe6:	6923      	ldr	r3, [r4, #16]
 800efe8:	462a      	mov	r2, r5
 800efea:	4649      	mov	r1, r9
 800efec:	4640      	mov	r0, r8
 800efee:	47d0      	blx	sl
 800eff0:	3001      	adds	r0, #1
 800eff2:	d0ad      	beq.n	800ef50 <_printf_i+0x160>
 800eff4:	6823      	ldr	r3, [r4, #0]
 800eff6:	079b      	lsls	r3, r3, #30
 800eff8:	d413      	bmi.n	800f022 <_printf_i+0x232>
 800effa:	68e0      	ldr	r0, [r4, #12]
 800effc:	9b03      	ldr	r3, [sp, #12]
 800effe:	4298      	cmp	r0, r3
 800f000:	bfb8      	it	lt
 800f002:	4618      	movlt	r0, r3
 800f004:	e7a6      	b.n	800ef54 <_printf_i+0x164>
 800f006:	2301      	movs	r3, #1
 800f008:	4632      	mov	r2, r6
 800f00a:	4649      	mov	r1, r9
 800f00c:	4640      	mov	r0, r8
 800f00e:	47d0      	blx	sl
 800f010:	3001      	adds	r0, #1
 800f012:	d09d      	beq.n	800ef50 <_printf_i+0x160>
 800f014:	3501      	adds	r5, #1
 800f016:	68e3      	ldr	r3, [r4, #12]
 800f018:	9903      	ldr	r1, [sp, #12]
 800f01a:	1a5b      	subs	r3, r3, r1
 800f01c:	42ab      	cmp	r3, r5
 800f01e:	dcf2      	bgt.n	800f006 <_printf_i+0x216>
 800f020:	e7eb      	b.n	800effa <_printf_i+0x20a>
 800f022:	2500      	movs	r5, #0
 800f024:	f104 0619 	add.w	r6, r4, #25
 800f028:	e7f5      	b.n	800f016 <_printf_i+0x226>
 800f02a:	bf00      	nop
 800f02c:	080125ee 	.word	0x080125ee
 800f030:	080125ff 	.word	0x080125ff

0800f034 <std>:
 800f034:	2300      	movs	r3, #0
 800f036:	b510      	push	{r4, lr}
 800f038:	4604      	mov	r4, r0
 800f03a:	e9c0 3300 	strd	r3, r3, [r0]
 800f03e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f042:	6083      	str	r3, [r0, #8]
 800f044:	8181      	strh	r1, [r0, #12]
 800f046:	6643      	str	r3, [r0, #100]	; 0x64
 800f048:	81c2      	strh	r2, [r0, #14]
 800f04a:	6183      	str	r3, [r0, #24]
 800f04c:	4619      	mov	r1, r3
 800f04e:	2208      	movs	r2, #8
 800f050:	305c      	adds	r0, #92	; 0x5c
 800f052:	f000 f93d 	bl	800f2d0 <memset>
 800f056:	4b0d      	ldr	r3, [pc, #52]	; (800f08c <std+0x58>)
 800f058:	6263      	str	r3, [r4, #36]	; 0x24
 800f05a:	4b0d      	ldr	r3, [pc, #52]	; (800f090 <std+0x5c>)
 800f05c:	62a3      	str	r3, [r4, #40]	; 0x28
 800f05e:	4b0d      	ldr	r3, [pc, #52]	; (800f094 <std+0x60>)
 800f060:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f062:	4b0d      	ldr	r3, [pc, #52]	; (800f098 <std+0x64>)
 800f064:	6323      	str	r3, [r4, #48]	; 0x30
 800f066:	4b0d      	ldr	r3, [pc, #52]	; (800f09c <std+0x68>)
 800f068:	6224      	str	r4, [r4, #32]
 800f06a:	429c      	cmp	r4, r3
 800f06c:	d006      	beq.n	800f07c <std+0x48>
 800f06e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800f072:	4294      	cmp	r4, r2
 800f074:	d002      	beq.n	800f07c <std+0x48>
 800f076:	33d0      	adds	r3, #208	; 0xd0
 800f078:	429c      	cmp	r4, r3
 800f07a:	d105      	bne.n	800f088 <std+0x54>
 800f07c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f084:	f000 b9a0 	b.w	800f3c8 <__retarget_lock_init_recursive>
 800f088:	bd10      	pop	{r4, pc}
 800f08a:	bf00      	nop
 800f08c:	0800f1b9 	.word	0x0800f1b9
 800f090:	0800f1db 	.word	0x0800f1db
 800f094:	0800f213 	.word	0x0800f213
 800f098:	0800f237 	.word	0x0800f237
 800f09c:	20002098 	.word	0x20002098

0800f0a0 <stdio_exit_handler>:
 800f0a0:	4a02      	ldr	r2, [pc, #8]	; (800f0ac <stdio_exit_handler+0xc>)
 800f0a2:	4903      	ldr	r1, [pc, #12]	; (800f0b0 <stdio_exit_handler+0x10>)
 800f0a4:	4803      	ldr	r0, [pc, #12]	; (800f0b4 <stdio_exit_handler+0x14>)
 800f0a6:	f000 b869 	b.w	800f17c <_fwalk_sglue>
 800f0aa:	bf00      	nop
 800f0ac:	20000564 	.word	0x20000564
 800f0b0:	08010d99 	.word	0x08010d99
 800f0b4:	20000570 	.word	0x20000570

0800f0b8 <cleanup_stdio>:
 800f0b8:	6841      	ldr	r1, [r0, #4]
 800f0ba:	4b0c      	ldr	r3, [pc, #48]	; (800f0ec <cleanup_stdio+0x34>)
 800f0bc:	4299      	cmp	r1, r3
 800f0be:	b510      	push	{r4, lr}
 800f0c0:	4604      	mov	r4, r0
 800f0c2:	d001      	beq.n	800f0c8 <cleanup_stdio+0x10>
 800f0c4:	f001 fe68 	bl	8010d98 <_fflush_r>
 800f0c8:	68a1      	ldr	r1, [r4, #8]
 800f0ca:	4b09      	ldr	r3, [pc, #36]	; (800f0f0 <cleanup_stdio+0x38>)
 800f0cc:	4299      	cmp	r1, r3
 800f0ce:	d002      	beq.n	800f0d6 <cleanup_stdio+0x1e>
 800f0d0:	4620      	mov	r0, r4
 800f0d2:	f001 fe61 	bl	8010d98 <_fflush_r>
 800f0d6:	68e1      	ldr	r1, [r4, #12]
 800f0d8:	4b06      	ldr	r3, [pc, #24]	; (800f0f4 <cleanup_stdio+0x3c>)
 800f0da:	4299      	cmp	r1, r3
 800f0dc:	d004      	beq.n	800f0e8 <cleanup_stdio+0x30>
 800f0de:	4620      	mov	r0, r4
 800f0e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f0e4:	f001 be58 	b.w	8010d98 <_fflush_r>
 800f0e8:	bd10      	pop	{r4, pc}
 800f0ea:	bf00      	nop
 800f0ec:	20002098 	.word	0x20002098
 800f0f0:	20002100 	.word	0x20002100
 800f0f4:	20002168 	.word	0x20002168

0800f0f8 <global_stdio_init.part.0>:
 800f0f8:	b510      	push	{r4, lr}
 800f0fa:	4b0b      	ldr	r3, [pc, #44]	; (800f128 <global_stdio_init.part.0+0x30>)
 800f0fc:	4c0b      	ldr	r4, [pc, #44]	; (800f12c <global_stdio_init.part.0+0x34>)
 800f0fe:	4a0c      	ldr	r2, [pc, #48]	; (800f130 <global_stdio_init.part.0+0x38>)
 800f100:	601a      	str	r2, [r3, #0]
 800f102:	4620      	mov	r0, r4
 800f104:	2200      	movs	r2, #0
 800f106:	2104      	movs	r1, #4
 800f108:	f7ff ff94 	bl	800f034 <std>
 800f10c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f110:	2201      	movs	r2, #1
 800f112:	2109      	movs	r1, #9
 800f114:	f7ff ff8e 	bl	800f034 <std>
 800f118:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800f11c:	2202      	movs	r2, #2
 800f11e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f122:	2112      	movs	r1, #18
 800f124:	f7ff bf86 	b.w	800f034 <std>
 800f128:	200021d0 	.word	0x200021d0
 800f12c:	20002098 	.word	0x20002098
 800f130:	0800f0a1 	.word	0x0800f0a1

0800f134 <__sfp_lock_acquire>:
 800f134:	4801      	ldr	r0, [pc, #4]	; (800f13c <__sfp_lock_acquire+0x8>)
 800f136:	f000 b948 	b.w	800f3ca <__retarget_lock_acquire_recursive>
 800f13a:	bf00      	nop
 800f13c:	200021d9 	.word	0x200021d9

0800f140 <__sfp_lock_release>:
 800f140:	4801      	ldr	r0, [pc, #4]	; (800f148 <__sfp_lock_release+0x8>)
 800f142:	f000 b943 	b.w	800f3cc <__retarget_lock_release_recursive>
 800f146:	bf00      	nop
 800f148:	200021d9 	.word	0x200021d9

0800f14c <__sinit>:
 800f14c:	b510      	push	{r4, lr}
 800f14e:	4604      	mov	r4, r0
 800f150:	f7ff fff0 	bl	800f134 <__sfp_lock_acquire>
 800f154:	6a23      	ldr	r3, [r4, #32]
 800f156:	b11b      	cbz	r3, 800f160 <__sinit+0x14>
 800f158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f15c:	f7ff bff0 	b.w	800f140 <__sfp_lock_release>
 800f160:	4b04      	ldr	r3, [pc, #16]	; (800f174 <__sinit+0x28>)
 800f162:	6223      	str	r3, [r4, #32]
 800f164:	4b04      	ldr	r3, [pc, #16]	; (800f178 <__sinit+0x2c>)
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d1f5      	bne.n	800f158 <__sinit+0xc>
 800f16c:	f7ff ffc4 	bl	800f0f8 <global_stdio_init.part.0>
 800f170:	e7f2      	b.n	800f158 <__sinit+0xc>
 800f172:	bf00      	nop
 800f174:	0800f0b9 	.word	0x0800f0b9
 800f178:	200021d0 	.word	0x200021d0

0800f17c <_fwalk_sglue>:
 800f17c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f180:	4607      	mov	r7, r0
 800f182:	4688      	mov	r8, r1
 800f184:	4614      	mov	r4, r2
 800f186:	2600      	movs	r6, #0
 800f188:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f18c:	f1b9 0901 	subs.w	r9, r9, #1
 800f190:	d505      	bpl.n	800f19e <_fwalk_sglue+0x22>
 800f192:	6824      	ldr	r4, [r4, #0]
 800f194:	2c00      	cmp	r4, #0
 800f196:	d1f7      	bne.n	800f188 <_fwalk_sglue+0xc>
 800f198:	4630      	mov	r0, r6
 800f19a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f19e:	89ab      	ldrh	r3, [r5, #12]
 800f1a0:	2b01      	cmp	r3, #1
 800f1a2:	d907      	bls.n	800f1b4 <_fwalk_sglue+0x38>
 800f1a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f1a8:	3301      	adds	r3, #1
 800f1aa:	d003      	beq.n	800f1b4 <_fwalk_sglue+0x38>
 800f1ac:	4629      	mov	r1, r5
 800f1ae:	4638      	mov	r0, r7
 800f1b0:	47c0      	blx	r8
 800f1b2:	4306      	orrs	r6, r0
 800f1b4:	3568      	adds	r5, #104	; 0x68
 800f1b6:	e7e9      	b.n	800f18c <_fwalk_sglue+0x10>

0800f1b8 <__sread>:
 800f1b8:	b510      	push	{r4, lr}
 800f1ba:	460c      	mov	r4, r1
 800f1bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1c0:	f000 f8b4 	bl	800f32c <_read_r>
 800f1c4:	2800      	cmp	r0, #0
 800f1c6:	bfab      	itete	ge
 800f1c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f1ca:	89a3      	ldrhlt	r3, [r4, #12]
 800f1cc:	181b      	addge	r3, r3, r0
 800f1ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f1d2:	bfac      	ite	ge
 800f1d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800f1d6:	81a3      	strhlt	r3, [r4, #12]
 800f1d8:	bd10      	pop	{r4, pc}

0800f1da <__swrite>:
 800f1da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1de:	461f      	mov	r7, r3
 800f1e0:	898b      	ldrh	r3, [r1, #12]
 800f1e2:	05db      	lsls	r3, r3, #23
 800f1e4:	4605      	mov	r5, r0
 800f1e6:	460c      	mov	r4, r1
 800f1e8:	4616      	mov	r6, r2
 800f1ea:	d505      	bpl.n	800f1f8 <__swrite+0x1e>
 800f1ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1f0:	2302      	movs	r3, #2
 800f1f2:	2200      	movs	r2, #0
 800f1f4:	f000 f888 	bl	800f308 <_lseek_r>
 800f1f8:	89a3      	ldrh	r3, [r4, #12]
 800f1fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f1fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f202:	81a3      	strh	r3, [r4, #12]
 800f204:	4632      	mov	r2, r6
 800f206:	463b      	mov	r3, r7
 800f208:	4628      	mov	r0, r5
 800f20a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f20e:	f000 b89f 	b.w	800f350 <_write_r>

0800f212 <__sseek>:
 800f212:	b510      	push	{r4, lr}
 800f214:	460c      	mov	r4, r1
 800f216:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f21a:	f000 f875 	bl	800f308 <_lseek_r>
 800f21e:	1c43      	adds	r3, r0, #1
 800f220:	89a3      	ldrh	r3, [r4, #12]
 800f222:	bf15      	itete	ne
 800f224:	6560      	strne	r0, [r4, #84]	; 0x54
 800f226:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f22a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f22e:	81a3      	strheq	r3, [r4, #12]
 800f230:	bf18      	it	ne
 800f232:	81a3      	strhne	r3, [r4, #12]
 800f234:	bd10      	pop	{r4, pc}

0800f236 <__sclose>:
 800f236:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f23a:	f000 b855 	b.w	800f2e8 <_close_r>

0800f23e <_vsniprintf_r>:
 800f23e:	b530      	push	{r4, r5, lr}
 800f240:	4614      	mov	r4, r2
 800f242:	2c00      	cmp	r4, #0
 800f244:	b09b      	sub	sp, #108	; 0x6c
 800f246:	4605      	mov	r5, r0
 800f248:	461a      	mov	r2, r3
 800f24a:	da05      	bge.n	800f258 <_vsniprintf_r+0x1a>
 800f24c:	238b      	movs	r3, #139	; 0x8b
 800f24e:	6003      	str	r3, [r0, #0]
 800f250:	f04f 30ff 	mov.w	r0, #4294967295
 800f254:	b01b      	add	sp, #108	; 0x6c
 800f256:	bd30      	pop	{r4, r5, pc}
 800f258:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f25c:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f260:	bf14      	ite	ne
 800f262:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f266:	4623      	moveq	r3, r4
 800f268:	9302      	str	r3, [sp, #8]
 800f26a:	9305      	str	r3, [sp, #20]
 800f26c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f270:	9100      	str	r1, [sp, #0]
 800f272:	9104      	str	r1, [sp, #16]
 800f274:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f278:	4669      	mov	r1, sp
 800f27a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800f27c:	f001 fc08 	bl	8010a90 <_svfiprintf_r>
 800f280:	1c43      	adds	r3, r0, #1
 800f282:	bfbc      	itt	lt
 800f284:	238b      	movlt	r3, #139	; 0x8b
 800f286:	602b      	strlt	r3, [r5, #0]
 800f288:	2c00      	cmp	r4, #0
 800f28a:	d0e3      	beq.n	800f254 <_vsniprintf_r+0x16>
 800f28c:	9b00      	ldr	r3, [sp, #0]
 800f28e:	2200      	movs	r2, #0
 800f290:	701a      	strb	r2, [r3, #0]
 800f292:	e7df      	b.n	800f254 <_vsniprintf_r+0x16>

0800f294 <vsniprintf>:
 800f294:	b507      	push	{r0, r1, r2, lr}
 800f296:	9300      	str	r3, [sp, #0]
 800f298:	4613      	mov	r3, r2
 800f29a:	460a      	mov	r2, r1
 800f29c:	4601      	mov	r1, r0
 800f29e:	4803      	ldr	r0, [pc, #12]	; (800f2ac <vsniprintf+0x18>)
 800f2a0:	6800      	ldr	r0, [r0, #0]
 800f2a2:	f7ff ffcc 	bl	800f23e <_vsniprintf_r>
 800f2a6:	b003      	add	sp, #12
 800f2a8:	f85d fb04 	ldr.w	pc, [sp], #4
 800f2ac:	200005bc 	.word	0x200005bc

0800f2b0 <memcmp>:
 800f2b0:	b510      	push	{r4, lr}
 800f2b2:	3901      	subs	r1, #1
 800f2b4:	4402      	add	r2, r0
 800f2b6:	4290      	cmp	r0, r2
 800f2b8:	d101      	bne.n	800f2be <memcmp+0xe>
 800f2ba:	2000      	movs	r0, #0
 800f2bc:	e005      	b.n	800f2ca <memcmp+0x1a>
 800f2be:	7803      	ldrb	r3, [r0, #0]
 800f2c0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f2c4:	42a3      	cmp	r3, r4
 800f2c6:	d001      	beq.n	800f2cc <memcmp+0x1c>
 800f2c8:	1b18      	subs	r0, r3, r4
 800f2ca:	bd10      	pop	{r4, pc}
 800f2cc:	3001      	adds	r0, #1
 800f2ce:	e7f2      	b.n	800f2b6 <memcmp+0x6>

0800f2d0 <memset>:
 800f2d0:	4402      	add	r2, r0
 800f2d2:	4603      	mov	r3, r0
 800f2d4:	4293      	cmp	r3, r2
 800f2d6:	d100      	bne.n	800f2da <memset+0xa>
 800f2d8:	4770      	bx	lr
 800f2da:	f803 1b01 	strb.w	r1, [r3], #1
 800f2de:	e7f9      	b.n	800f2d4 <memset+0x4>

0800f2e0 <_localeconv_r>:
 800f2e0:	4800      	ldr	r0, [pc, #0]	; (800f2e4 <_localeconv_r+0x4>)
 800f2e2:	4770      	bx	lr
 800f2e4:	200006b0 	.word	0x200006b0

0800f2e8 <_close_r>:
 800f2e8:	b538      	push	{r3, r4, r5, lr}
 800f2ea:	4d06      	ldr	r5, [pc, #24]	; (800f304 <_close_r+0x1c>)
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	4604      	mov	r4, r0
 800f2f0:	4608      	mov	r0, r1
 800f2f2:	602b      	str	r3, [r5, #0]
 800f2f4:	f7f6 f935 	bl	8005562 <_close>
 800f2f8:	1c43      	adds	r3, r0, #1
 800f2fa:	d102      	bne.n	800f302 <_close_r+0x1a>
 800f2fc:	682b      	ldr	r3, [r5, #0]
 800f2fe:	b103      	cbz	r3, 800f302 <_close_r+0x1a>
 800f300:	6023      	str	r3, [r4, #0]
 800f302:	bd38      	pop	{r3, r4, r5, pc}
 800f304:	200021d4 	.word	0x200021d4

0800f308 <_lseek_r>:
 800f308:	b538      	push	{r3, r4, r5, lr}
 800f30a:	4d07      	ldr	r5, [pc, #28]	; (800f328 <_lseek_r+0x20>)
 800f30c:	4604      	mov	r4, r0
 800f30e:	4608      	mov	r0, r1
 800f310:	4611      	mov	r1, r2
 800f312:	2200      	movs	r2, #0
 800f314:	602a      	str	r2, [r5, #0]
 800f316:	461a      	mov	r2, r3
 800f318:	f7f6 f94a 	bl	80055b0 <_lseek>
 800f31c:	1c43      	adds	r3, r0, #1
 800f31e:	d102      	bne.n	800f326 <_lseek_r+0x1e>
 800f320:	682b      	ldr	r3, [r5, #0]
 800f322:	b103      	cbz	r3, 800f326 <_lseek_r+0x1e>
 800f324:	6023      	str	r3, [r4, #0]
 800f326:	bd38      	pop	{r3, r4, r5, pc}
 800f328:	200021d4 	.word	0x200021d4

0800f32c <_read_r>:
 800f32c:	b538      	push	{r3, r4, r5, lr}
 800f32e:	4d07      	ldr	r5, [pc, #28]	; (800f34c <_read_r+0x20>)
 800f330:	4604      	mov	r4, r0
 800f332:	4608      	mov	r0, r1
 800f334:	4611      	mov	r1, r2
 800f336:	2200      	movs	r2, #0
 800f338:	602a      	str	r2, [r5, #0]
 800f33a:	461a      	mov	r2, r3
 800f33c:	f7f6 f8d8 	bl	80054f0 <_read>
 800f340:	1c43      	adds	r3, r0, #1
 800f342:	d102      	bne.n	800f34a <_read_r+0x1e>
 800f344:	682b      	ldr	r3, [r5, #0]
 800f346:	b103      	cbz	r3, 800f34a <_read_r+0x1e>
 800f348:	6023      	str	r3, [r4, #0]
 800f34a:	bd38      	pop	{r3, r4, r5, pc}
 800f34c:	200021d4 	.word	0x200021d4

0800f350 <_write_r>:
 800f350:	b538      	push	{r3, r4, r5, lr}
 800f352:	4d07      	ldr	r5, [pc, #28]	; (800f370 <_write_r+0x20>)
 800f354:	4604      	mov	r4, r0
 800f356:	4608      	mov	r0, r1
 800f358:	4611      	mov	r1, r2
 800f35a:	2200      	movs	r2, #0
 800f35c:	602a      	str	r2, [r5, #0]
 800f35e:	461a      	mov	r2, r3
 800f360:	f7f6 f8e3 	bl	800552a <_write>
 800f364:	1c43      	adds	r3, r0, #1
 800f366:	d102      	bne.n	800f36e <_write_r+0x1e>
 800f368:	682b      	ldr	r3, [r5, #0]
 800f36a:	b103      	cbz	r3, 800f36e <_write_r+0x1e>
 800f36c:	6023      	str	r3, [r4, #0]
 800f36e:	bd38      	pop	{r3, r4, r5, pc}
 800f370:	200021d4 	.word	0x200021d4

0800f374 <__errno>:
 800f374:	4b01      	ldr	r3, [pc, #4]	; (800f37c <__errno+0x8>)
 800f376:	6818      	ldr	r0, [r3, #0]
 800f378:	4770      	bx	lr
 800f37a:	bf00      	nop
 800f37c:	200005bc 	.word	0x200005bc

0800f380 <__libc_init_array>:
 800f380:	b570      	push	{r4, r5, r6, lr}
 800f382:	4d0d      	ldr	r5, [pc, #52]	; (800f3b8 <__libc_init_array+0x38>)
 800f384:	4c0d      	ldr	r4, [pc, #52]	; (800f3bc <__libc_init_array+0x3c>)
 800f386:	1b64      	subs	r4, r4, r5
 800f388:	10a4      	asrs	r4, r4, #2
 800f38a:	2600      	movs	r6, #0
 800f38c:	42a6      	cmp	r6, r4
 800f38e:	d109      	bne.n	800f3a4 <__libc_init_array+0x24>
 800f390:	4d0b      	ldr	r5, [pc, #44]	; (800f3c0 <__libc_init_array+0x40>)
 800f392:	4c0c      	ldr	r4, [pc, #48]	; (800f3c4 <__libc_init_array+0x44>)
 800f394:	f003 f812 	bl	80123bc <_init>
 800f398:	1b64      	subs	r4, r4, r5
 800f39a:	10a4      	asrs	r4, r4, #2
 800f39c:	2600      	movs	r6, #0
 800f39e:	42a6      	cmp	r6, r4
 800f3a0:	d105      	bne.n	800f3ae <__libc_init_array+0x2e>
 800f3a2:	bd70      	pop	{r4, r5, r6, pc}
 800f3a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800f3a8:	4798      	blx	r3
 800f3aa:	3601      	adds	r6, #1
 800f3ac:	e7ee      	b.n	800f38c <__libc_init_array+0xc>
 800f3ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800f3b2:	4798      	blx	r3
 800f3b4:	3601      	adds	r6, #1
 800f3b6:	e7f2      	b.n	800f39e <__libc_init_array+0x1e>
 800f3b8:	08012d38 	.word	0x08012d38
 800f3bc:	08012d38 	.word	0x08012d38
 800f3c0:	08012d38 	.word	0x08012d38
 800f3c4:	08012d3c 	.word	0x08012d3c

0800f3c8 <__retarget_lock_init_recursive>:
 800f3c8:	4770      	bx	lr

0800f3ca <__retarget_lock_acquire_recursive>:
 800f3ca:	4770      	bx	lr

0800f3cc <__retarget_lock_release_recursive>:
 800f3cc:	4770      	bx	lr

0800f3ce <memcpy>:
 800f3ce:	440a      	add	r2, r1
 800f3d0:	4291      	cmp	r1, r2
 800f3d2:	f100 33ff 	add.w	r3, r0, #4294967295
 800f3d6:	d100      	bne.n	800f3da <memcpy+0xc>
 800f3d8:	4770      	bx	lr
 800f3da:	b510      	push	{r4, lr}
 800f3dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f3e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f3e4:	4291      	cmp	r1, r2
 800f3e6:	d1f9      	bne.n	800f3dc <memcpy+0xe>
 800f3e8:	bd10      	pop	{r4, pc}

0800f3ea <quorem>:
 800f3ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3ee:	6903      	ldr	r3, [r0, #16]
 800f3f0:	690c      	ldr	r4, [r1, #16]
 800f3f2:	42a3      	cmp	r3, r4
 800f3f4:	4607      	mov	r7, r0
 800f3f6:	db7e      	blt.n	800f4f6 <quorem+0x10c>
 800f3f8:	3c01      	subs	r4, #1
 800f3fa:	f101 0814 	add.w	r8, r1, #20
 800f3fe:	f100 0514 	add.w	r5, r0, #20
 800f402:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f406:	9301      	str	r3, [sp, #4]
 800f408:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f40c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f410:	3301      	adds	r3, #1
 800f412:	429a      	cmp	r2, r3
 800f414:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f418:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f41c:	fbb2 f6f3 	udiv	r6, r2, r3
 800f420:	d331      	bcc.n	800f486 <quorem+0x9c>
 800f422:	f04f 0e00 	mov.w	lr, #0
 800f426:	4640      	mov	r0, r8
 800f428:	46ac      	mov	ip, r5
 800f42a:	46f2      	mov	sl, lr
 800f42c:	f850 2b04 	ldr.w	r2, [r0], #4
 800f430:	b293      	uxth	r3, r2
 800f432:	fb06 e303 	mla	r3, r6, r3, lr
 800f436:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f43a:	0c1a      	lsrs	r2, r3, #16
 800f43c:	b29b      	uxth	r3, r3
 800f43e:	ebaa 0303 	sub.w	r3, sl, r3
 800f442:	f8dc a000 	ldr.w	sl, [ip]
 800f446:	fa13 f38a 	uxtah	r3, r3, sl
 800f44a:	fb06 220e 	mla	r2, r6, lr, r2
 800f44e:	9300      	str	r3, [sp, #0]
 800f450:	9b00      	ldr	r3, [sp, #0]
 800f452:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f456:	b292      	uxth	r2, r2
 800f458:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f45c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f460:	f8bd 3000 	ldrh.w	r3, [sp]
 800f464:	4581      	cmp	r9, r0
 800f466:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f46a:	f84c 3b04 	str.w	r3, [ip], #4
 800f46e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f472:	d2db      	bcs.n	800f42c <quorem+0x42>
 800f474:	f855 300b 	ldr.w	r3, [r5, fp]
 800f478:	b92b      	cbnz	r3, 800f486 <quorem+0x9c>
 800f47a:	9b01      	ldr	r3, [sp, #4]
 800f47c:	3b04      	subs	r3, #4
 800f47e:	429d      	cmp	r5, r3
 800f480:	461a      	mov	r2, r3
 800f482:	d32c      	bcc.n	800f4de <quorem+0xf4>
 800f484:	613c      	str	r4, [r7, #16]
 800f486:	4638      	mov	r0, r7
 800f488:	f001 f9a8 	bl	80107dc <__mcmp>
 800f48c:	2800      	cmp	r0, #0
 800f48e:	db22      	blt.n	800f4d6 <quorem+0xec>
 800f490:	3601      	adds	r6, #1
 800f492:	4629      	mov	r1, r5
 800f494:	2000      	movs	r0, #0
 800f496:	f858 2b04 	ldr.w	r2, [r8], #4
 800f49a:	f8d1 c000 	ldr.w	ip, [r1]
 800f49e:	b293      	uxth	r3, r2
 800f4a0:	1ac3      	subs	r3, r0, r3
 800f4a2:	0c12      	lsrs	r2, r2, #16
 800f4a4:	fa13 f38c 	uxtah	r3, r3, ip
 800f4a8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800f4ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f4b0:	b29b      	uxth	r3, r3
 800f4b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f4b6:	45c1      	cmp	r9, r8
 800f4b8:	f841 3b04 	str.w	r3, [r1], #4
 800f4bc:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f4c0:	d2e9      	bcs.n	800f496 <quorem+0xac>
 800f4c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f4c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f4ca:	b922      	cbnz	r2, 800f4d6 <quorem+0xec>
 800f4cc:	3b04      	subs	r3, #4
 800f4ce:	429d      	cmp	r5, r3
 800f4d0:	461a      	mov	r2, r3
 800f4d2:	d30a      	bcc.n	800f4ea <quorem+0x100>
 800f4d4:	613c      	str	r4, [r7, #16]
 800f4d6:	4630      	mov	r0, r6
 800f4d8:	b003      	add	sp, #12
 800f4da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4de:	6812      	ldr	r2, [r2, #0]
 800f4e0:	3b04      	subs	r3, #4
 800f4e2:	2a00      	cmp	r2, #0
 800f4e4:	d1ce      	bne.n	800f484 <quorem+0x9a>
 800f4e6:	3c01      	subs	r4, #1
 800f4e8:	e7c9      	b.n	800f47e <quorem+0x94>
 800f4ea:	6812      	ldr	r2, [r2, #0]
 800f4ec:	3b04      	subs	r3, #4
 800f4ee:	2a00      	cmp	r2, #0
 800f4f0:	d1f0      	bne.n	800f4d4 <quorem+0xea>
 800f4f2:	3c01      	subs	r4, #1
 800f4f4:	e7eb      	b.n	800f4ce <quorem+0xe4>
 800f4f6:	2000      	movs	r0, #0
 800f4f8:	e7ee      	b.n	800f4d8 <quorem+0xee>
 800f4fa:	0000      	movs	r0, r0
 800f4fc:	0000      	movs	r0, r0
	...

0800f500 <_dtoa_r>:
 800f500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f504:	ed2d 8b04 	vpush	{d8-d9}
 800f508:	69c5      	ldr	r5, [r0, #28]
 800f50a:	b093      	sub	sp, #76	; 0x4c
 800f50c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f510:	ec57 6b10 	vmov	r6, r7, d0
 800f514:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f518:	9107      	str	r1, [sp, #28]
 800f51a:	4604      	mov	r4, r0
 800f51c:	920a      	str	r2, [sp, #40]	; 0x28
 800f51e:	930d      	str	r3, [sp, #52]	; 0x34
 800f520:	b975      	cbnz	r5, 800f540 <_dtoa_r+0x40>
 800f522:	2010      	movs	r0, #16
 800f524:	f000 fe2a 	bl	801017c <malloc>
 800f528:	4602      	mov	r2, r0
 800f52a:	61e0      	str	r0, [r4, #28]
 800f52c:	b920      	cbnz	r0, 800f538 <_dtoa_r+0x38>
 800f52e:	4bae      	ldr	r3, [pc, #696]	; (800f7e8 <_dtoa_r+0x2e8>)
 800f530:	21ef      	movs	r1, #239	; 0xef
 800f532:	48ae      	ldr	r0, [pc, #696]	; (800f7ec <_dtoa_r+0x2ec>)
 800f534:	f001 fc82 	bl	8010e3c <__assert_func>
 800f538:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f53c:	6005      	str	r5, [r0, #0]
 800f53e:	60c5      	str	r5, [r0, #12]
 800f540:	69e3      	ldr	r3, [r4, #28]
 800f542:	6819      	ldr	r1, [r3, #0]
 800f544:	b151      	cbz	r1, 800f55c <_dtoa_r+0x5c>
 800f546:	685a      	ldr	r2, [r3, #4]
 800f548:	604a      	str	r2, [r1, #4]
 800f54a:	2301      	movs	r3, #1
 800f54c:	4093      	lsls	r3, r2
 800f54e:	608b      	str	r3, [r1, #8]
 800f550:	4620      	mov	r0, r4
 800f552:	f000 ff07 	bl	8010364 <_Bfree>
 800f556:	69e3      	ldr	r3, [r4, #28]
 800f558:	2200      	movs	r2, #0
 800f55a:	601a      	str	r2, [r3, #0]
 800f55c:	1e3b      	subs	r3, r7, #0
 800f55e:	bfbb      	ittet	lt
 800f560:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f564:	9303      	strlt	r3, [sp, #12]
 800f566:	2300      	movge	r3, #0
 800f568:	2201      	movlt	r2, #1
 800f56a:	bfac      	ite	ge
 800f56c:	f8c8 3000 	strge.w	r3, [r8]
 800f570:	f8c8 2000 	strlt.w	r2, [r8]
 800f574:	4b9e      	ldr	r3, [pc, #632]	; (800f7f0 <_dtoa_r+0x2f0>)
 800f576:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800f57a:	ea33 0308 	bics.w	r3, r3, r8
 800f57e:	d11b      	bne.n	800f5b8 <_dtoa_r+0xb8>
 800f580:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f582:	f242 730f 	movw	r3, #9999	; 0x270f
 800f586:	6013      	str	r3, [r2, #0]
 800f588:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800f58c:	4333      	orrs	r3, r6
 800f58e:	f000 8593 	beq.w	80100b8 <_dtoa_r+0xbb8>
 800f592:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f594:	b963      	cbnz	r3, 800f5b0 <_dtoa_r+0xb0>
 800f596:	4b97      	ldr	r3, [pc, #604]	; (800f7f4 <_dtoa_r+0x2f4>)
 800f598:	e027      	b.n	800f5ea <_dtoa_r+0xea>
 800f59a:	4b97      	ldr	r3, [pc, #604]	; (800f7f8 <_dtoa_r+0x2f8>)
 800f59c:	9300      	str	r3, [sp, #0]
 800f59e:	3308      	adds	r3, #8
 800f5a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f5a2:	6013      	str	r3, [r2, #0]
 800f5a4:	9800      	ldr	r0, [sp, #0]
 800f5a6:	b013      	add	sp, #76	; 0x4c
 800f5a8:	ecbd 8b04 	vpop	{d8-d9}
 800f5ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5b0:	4b90      	ldr	r3, [pc, #576]	; (800f7f4 <_dtoa_r+0x2f4>)
 800f5b2:	9300      	str	r3, [sp, #0]
 800f5b4:	3303      	adds	r3, #3
 800f5b6:	e7f3      	b.n	800f5a0 <_dtoa_r+0xa0>
 800f5b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f5bc:	2200      	movs	r2, #0
 800f5be:	ec51 0b17 	vmov	r0, r1, d7
 800f5c2:	eeb0 8a47 	vmov.f32	s16, s14
 800f5c6:	eef0 8a67 	vmov.f32	s17, s15
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	f7f1 faa4 	bl	8000b18 <__aeabi_dcmpeq>
 800f5d0:	4681      	mov	r9, r0
 800f5d2:	b160      	cbz	r0, 800f5ee <_dtoa_r+0xee>
 800f5d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f5d6:	2301      	movs	r3, #1
 800f5d8:	6013      	str	r3, [r2, #0]
 800f5da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	f000 8568 	beq.w	80100b2 <_dtoa_r+0xbb2>
 800f5e2:	4b86      	ldr	r3, [pc, #536]	; (800f7fc <_dtoa_r+0x2fc>)
 800f5e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f5e6:	6013      	str	r3, [r2, #0]
 800f5e8:	3b01      	subs	r3, #1
 800f5ea:	9300      	str	r3, [sp, #0]
 800f5ec:	e7da      	b.n	800f5a4 <_dtoa_r+0xa4>
 800f5ee:	aa10      	add	r2, sp, #64	; 0x40
 800f5f0:	a911      	add	r1, sp, #68	; 0x44
 800f5f2:	4620      	mov	r0, r4
 800f5f4:	eeb0 0a48 	vmov.f32	s0, s16
 800f5f8:	eef0 0a68 	vmov.f32	s1, s17
 800f5fc:	f001 f994 	bl	8010928 <__d2b>
 800f600:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800f604:	4682      	mov	sl, r0
 800f606:	2d00      	cmp	r5, #0
 800f608:	d07f      	beq.n	800f70a <_dtoa_r+0x20a>
 800f60a:	ee18 3a90 	vmov	r3, s17
 800f60e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f612:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800f616:	ec51 0b18 	vmov	r0, r1, d8
 800f61a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f61e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f622:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800f626:	4619      	mov	r1, r3
 800f628:	2200      	movs	r2, #0
 800f62a:	4b75      	ldr	r3, [pc, #468]	; (800f800 <_dtoa_r+0x300>)
 800f62c:	f7f0 fe54 	bl	80002d8 <__aeabi_dsub>
 800f630:	a367      	add	r3, pc, #412	; (adr r3, 800f7d0 <_dtoa_r+0x2d0>)
 800f632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f636:	f7f1 f807 	bl	8000648 <__aeabi_dmul>
 800f63a:	a367      	add	r3, pc, #412	; (adr r3, 800f7d8 <_dtoa_r+0x2d8>)
 800f63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f640:	f7f0 fe4c 	bl	80002dc <__adddf3>
 800f644:	4606      	mov	r6, r0
 800f646:	4628      	mov	r0, r5
 800f648:	460f      	mov	r7, r1
 800f64a:	f7f0 ff93 	bl	8000574 <__aeabi_i2d>
 800f64e:	a364      	add	r3, pc, #400	; (adr r3, 800f7e0 <_dtoa_r+0x2e0>)
 800f650:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f654:	f7f0 fff8 	bl	8000648 <__aeabi_dmul>
 800f658:	4602      	mov	r2, r0
 800f65a:	460b      	mov	r3, r1
 800f65c:	4630      	mov	r0, r6
 800f65e:	4639      	mov	r1, r7
 800f660:	f7f0 fe3c 	bl	80002dc <__adddf3>
 800f664:	4606      	mov	r6, r0
 800f666:	460f      	mov	r7, r1
 800f668:	f7f1 fa9e 	bl	8000ba8 <__aeabi_d2iz>
 800f66c:	2200      	movs	r2, #0
 800f66e:	4683      	mov	fp, r0
 800f670:	2300      	movs	r3, #0
 800f672:	4630      	mov	r0, r6
 800f674:	4639      	mov	r1, r7
 800f676:	f7f1 fa59 	bl	8000b2c <__aeabi_dcmplt>
 800f67a:	b148      	cbz	r0, 800f690 <_dtoa_r+0x190>
 800f67c:	4658      	mov	r0, fp
 800f67e:	f7f0 ff79 	bl	8000574 <__aeabi_i2d>
 800f682:	4632      	mov	r2, r6
 800f684:	463b      	mov	r3, r7
 800f686:	f7f1 fa47 	bl	8000b18 <__aeabi_dcmpeq>
 800f68a:	b908      	cbnz	r0, 800f690 <_dtoa_r+0x190>
 800f68c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f690:	f1bb 0f16 	cmp.w	fp, #22
 800f694:	d857      	bhi.n	800f746 <_dtoa_r+0x246>
 800f696:	4b5b      	ldr	r3, [pc, #364]	; (800f804 <_dtoa_r+0x304>)
 800f698:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6a0:	ec51 0b18 	vmov	r0, r1, d8
 800f6a4:	f7f1 fa42 	bl	8000b2c <__aeabi_dcmplt>
 800f6a8:	2800      	cmp	r0, #0
 800f6aa:	d04e      	beq.n	800f74a <_dtoa_r+0x24a>
 800f6ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	930c      	str	r3, [sp, #48]	; 0x30
 800f6b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f6b6:	1b5b      	subs	r3, r3, r5
 800f6b8:	1e5a      	subs	r2, r3, #1
 800f6ba:	bf45      	ittet	mi
 800f6bc:	f1c3 0301 	rsbmi	r3, r3, #1
 800f6c0:	9305      	strmi	r3, [sp, #20]
 800f6c2:	2300      	movpl	r3, #0
 800f6c4:	2300      	movmi	r3, #0
 800f6c6:	9206      	str	r2, [sp, #24]
 800f6c8:	bf54      	ite	pl
 800f6ca:	9305      	strpl	r3, [sp, #20]
 800f6cc:	9306      	strmi	r3, [sp, #24]
 800f6ce:	f1bb 0f00 	cmp.w	fp, #0
 800f6d2:	db3c      	blt.n	800f74e <_dtoa_r+0x24e>
 800f6d4:	9b06      	ldr	r3, [sp, #24]
 800f6d6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800f6da:	445b      	add	r3, fp
 800f6dc:	9306      	str	r3, [sp, #24]
 800f6de:	2300      	movs	r3, #0
 800f6e0:	9308      	str	r3, [sp, #32]
 800f6e2:	9b07      	ldr	r3, [sp, #28]
 800f6e4:	2b09      	cmp	r3, #9
 800f6e6:	d868      	bhi.n	800f7ba <_dtoa_r+0x2ba>
 800f6e8:	2b05      	cmp	r3, #5
 800f6ea:	bfc4      	itt	gt
 800f6ec:	3b04      	subgt	r3, #4
 800f6ee:	9307      	strgt	r3, [sp, #28]
 800f6f0:	9b07      	ldr	r3, [sp, #28]
 800f6f2:	f1a3 0302 	sub.w	r3, r3, #2
 800f6f6:	bfcc      	ite	gt
 800f6f8:	2500      	movgt	r5, #0
 800f6fa:	2501      	movle	r5, #1
 800f6fc:	2b03      	cmp	r3, #3
 800f6fe:	f200 8085 	bhi.w	800f80c <_dtoa_r+0x30c>
 800f702:	e8df f003 	tbb	[pc, r3]
 800f706:	3b2e      	.short	0x3b2e
 800f708:	5839      	.short	0x5839
 800f70a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f70e:	441d      	add	r5, r3
 800f710:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f714:	2b20      	cmp	r3, #32
 800f716:	bfc1      	itttt	gt
 800f718:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f71c:	fa08 f803 	lslgt.w	r8, r8, r3
 800f720:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800f724:	fa26 f303 	lsrgt.w	r3, r6, r3
 800f728:	bfd6      	itet	le
 800f72a:	f1c3 0320 	rsble	r3, r3, #32
 800f72e:	ea48 0003 	orrgt.w	r0, r8, r3
 800f732:	fa06 f003 	lslle.w	r0, r6, r3
 800f736:	f7f0 ff0d 	bl	8000554 <__aeabi_ui2d>
 800f73a:	2201      	movs	r2, #1
 800f73c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800f740:	3d01      	subs	r5, #1
 800f742:	920e      	str	r2, [sp, #56]	; 0x38
 800f744:	e76f      	b.n	800f626 <_dtoa_r+0x126>
 800f746:	2301      	movs	r3, #1
 800f748:	e7b3      	b.n	800f6b2 <_dtoa_r+0x1b2>
 800f74a:	900c      	str	r0, [sp, #48]	; 0x30
 800f74c:	e7b2      	b.n	800f6b4 <_dtoa_r+0x1b4>
 800f74e:	9b05      	ldr	r3, [sp, #20]
 800f750:	eba3 030b 	sub.w	r3, r3, fp
 800f754:	9305      	str	r3, [sp, #20]
 800f756:	f1cb 0300 	rsb	r3, fp, #0
 800f75a:	9308      	str	r3, [sp, #32]
 800f75c:	2300      	movs	r3, #0
 800f75e:	930b      	str	r3, [sp, #44]	; 0x2c
 800f760:	e7bf      	b.n	800f6e2 <_dtoa_r+0x1e2>
 800f762:	2300      	movs	r3, #0
 800f764:	9309      	str	r3, [sp, #36]	; 0x24
 800f766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f768:	2b00      	cmp	r3, #0
 800f76a:	dc52      	bgt.n	800f812 <_dtoa_r+0x312>
 800f76c:	2301      	movs	r3, #1
 800f76e:	9301      	str	r3, [sp, #4]
 800f770:	9304      	str	r3, [sp, #16]
 800f772:	461a      	mov	r2, r3
 800f774:	920a      	str	r2, [sp, #40]	; 0x28
 800f776:	e00b      	b.n	800f790 <_dtoa_r+0x290>
 800f778:	2301      	movs	r3, #1
 800f77a:	e7f3      	b.n	800f764 <_dtoa_r+0x264>
 800f77c:	2300      	movs	r3, #0
 800f77e:	9309      	str	r3, [sp, #36]	; 0x24
 800f780:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f782:	445b      	add	r3, fp
 800f784:	9301      	str	r3, [sp, #4]
 800f786:	3301      	adds	r3, #1
 800f788:	2b01      	cmp	r3, #1
 800f78a:	9304      	str	r3, [sp, #16]
 800f78c:	bfb8      	it	lt
 800f78e:	2301      	movlt	r3, #1
 800f790:	69e0      	ldr	r0, [r4, #28]
 800f792:	2100      	movs	r1, #0
 800f794:	2204      	movs	r2, #4
 800f796:	f102 0614 	add.w	r6, r2, #20
 800f79a:	429e      	cmp	r6, r3
 800f79c:	d93d      	bls.n	800f81a <_dtoa_r+0x31a>
 800f79e:	6041      	str	r1, [r0, #4]
 800f7a0:	4620      	mov	r0, r4
 800f7a2:	f000 fd9f 	bl	80102e4 <_Balloc>
 800f7a6:	9000      	str	r0, [sp, #0]
 800f7a8:	2800      	cmp	r0, #0
 800f7aa:	d139      	bne.n	800f820 <_dtoa_r+0x320>
 800f7ac:	4b16      	ldr	r3, [pc, #88]	; (800f808 <_dtoa_r+0x308>)
 800f7ae:	4602      	mov	r2, r0
 800f7b0:	f240 11af 	movw	r1, #431	; 0x1af
 800f7b4:	e6bd      	b.n	800f532 <_dtoa_r+0x32>
 800f7b6:	2301      	movs	r3, #1
 800f7b8:	e7e1      	b.n	800f77e <_dtoa_r+0x27e>
 800f7ba:	2501      	movs	r5, #1
 800f7bc:	2300      	movs	r3, #0
 800f7be:	9307      	str	r3, [sp, #28]
 800f7c0:	9509      	str	r5, [sp, #36]	; 0x24
 800f7c2:	f04f 33ff 	mov.w	r3, #4294967295
 800f7c6:	9301      	str	r3, [sp, #4]
 800f7c8:	9304      	str	r3, [sp, #16]
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	2312      	movs	r3, #18
 800f7ce:	e7d1      	b.n	800f774 <_dtoa_r+0x274>
 800f7d0:	636f4361 	.word	0x636f4361
 800f7d4:	3fd287a7 	.word	0x3fd287a7
 800f7d8:	8b60c8b3 	.word	0x8b60c8b3
 800f7dc:	3fc68a28 	.word	0x3fc68a28
 800f7e0:	509f79fb 	.word	0x509f79fb
 800f7e4:	3fd34413 	.word	0x3fd34413
 800f7e8:	0801261d 	.word	0x0801261d
 800f7ec:	08012634 	.word	0x08012634
 800f7f0:	7ff00000 	.word	0x7ff00000
 800f7f4:	08012619 	.word	0x08012619
 800f7f8:	08012610 	.word	0x08012610
 800f7fc:	080125ed 	.word	0x080125ed
 800f800:	3ff80000 	.word	0x3ff80000
 800f804:	08012720 	.word	0x08012720
 800f808:	0801268c 	.word	0x0801268c
 800f80c:	2301      	movs	r3, #1
 800f80e:	9309      	str	r3, [sp, #36]	; 0x24
 800f810:	e7d7      	b.n	800f7c2 <_dtoa_r+0x2c2>
 800f812:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f814:	9301      	str	r3, [sp, #4]
 800f816:	9304      	str	r3, [sp, #16]
 800f818:	e7ba      	b.n	800f790 <_dtoa_r+0x290>
 800f81a:	3101      	adds	r1, #1
 800f81c:	0052      	lsls	r2, r2, #1
 800f81e:	e7ba      	b.n	800f796 <_dtoa_r+0x296>
 800f820:	69e3      	ldr	r3, [r4, #28]
 800f822:	9a00      	ldr	r2, [sp, #0]
 800f824:	601a      	str	r2, [r3, #0]
 800f826:	9b04      	ldr	r3, [sp, #16]
 800f828:	2b0e      	cmp	r3, #14
 800f82a:	f200 80a8 	bhi.w	800f97e <_dtoa_r+0x47e>
 800f82e:	2d00      	cmp	r5, #0
 800f830:	f000 80a5 	beq.w	800f97e <_dtoa_r+0x47e>
 800f834:	f1bb 0f00 	cmp.w	fp, #0
 800f838:	dd38      	ble.n	800f8ac <_dtoa_r+0x3ac>
 800f83a:	4bc0      	ldr	r3, [pc, #768]	; (800fb3c <_dtoa_r+0x63c>)
 800f83c:	f00b 020f 	and.w	r2, fp, #15
 800f840:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f844:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800f848:	e9d3 6700 	ldrd	r6, r7, [r3]
 800f84c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800f850:	d019      	beq.n	800f886 <_dtoa_r+0x386>
 800f852:	4bbb      	ldr	r3, [pc, #748]	; (800fb40 <_dtoa_r+0x640>)
 800f854:	ec51 0b18 	vmov	r0, r1, d8
 800f858:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f85c:	f7f1 f81e 	bl	800089c <__aeabi_ddiv>
 800f860:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f864:	f008 080f 	and.w	r8, r8, #15
 800f868:	2503      	movs	r5, #3
 800f86a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800fb40 <_dtoa_r+0x640>
 800f86e:	f1b8 0f00 	cmp.w	r8, #0
 800f872:	d10a      	bne.n	800f88a <_dtoa_r+0x38a>
 800f874:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f878:	4632      	mov	r2, r6
 800f87a:	463b      	mov	r3, r7
 800f87c:	f7f1 f80e 	bl	800089c <__aeabi_ddiv>
 800f880:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f884:	e02b      	b.n	800f8de <_dtoa_r+0x3de>
 800f886:	2502      	movs	r5, #2
 800f888:	e7ef      	b.n	800f86a <_dtoa_r+0x36a>
 800f88a:	f018 0f01 	tst.w	r8, #1
 800f88e:	d008      	beq.n	800f8a2 <_dtoa_r+0x3a2>
 800f890:	4630      	mov	r0, r6
 800f892:	4639      	mov	r1, r7
 800f894:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f898:	f7f0 fed6 	bl	8000648 <__aeabi_dmul>
 800f89c:	3501      	adds	r5, #1
 800f89e:	4606      	mov	r6, r0
 800f8a0:	460f      	mov	r7, r1
 800f8a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f8a6:	f109 0908 	add.w	r9, r9, #8
 800f8aa:	e7e0      	b.n	800f86e <_dtoa_r+0x36e>
 800f8ac:	f000 809f 	beq.w	800f9ee <_dtoa_r+0x4ee>
 800f8b0:	f1cb 0600 	rsb	r6, fp, #0
 800f8b4:	4ba1      	ldr	r3, [pc, #644]	; (800fb3c <_dtoa_r+0x63c>)
 800f8b6:	4fa2      	ldr	r7, [pc, #648]	; (800fb40 <_dtoa_r+0x640>)
 800f8b8:	f006 020f 	and.w	r2, r6, #15
 800f8bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8c4:	ec51 0b18 	vmov	r0, r1, d8
 800f8c8:	f7f0 febe 	bl	8000648 <__aeabi_dmul>
 800f8cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f8d0:	1136      	asrs	r6, r6, #4
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	2502      	movs	r5, #2
 800f8d6:	2e00      	cmp	r6, #0
 800f8d8:	d17e      	bne.n	800f9d8 <_dtoa_r+0x4d8>
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d1d0      	bne.n	800f880 <_dtoa_r+0x380>
 800f8de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f8e0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	f000 8084 	beq.w	800f9f2 <_dtoa_r+0x4f2>
 800f8ea:	4b96      	ldr	r3, [pc, #600]	; (800fb44 <_dtoa_r+0x644>)
 800f8ec:	2200      	movs	r2, #0
 800f8ee:	4640      	mov	r0, r8
 800f8f0:	4649      	mov	r1, r9
 800f8f2:	f7f1 f91b 	bl	8000b2c <__aeabi_dcmplt>
 800f8f6:	2800      	cmp	r0, #0
 800f8f8:	d07b      	beq.n	800f9f2 <_dtoa_r+0x4f2>
 800f8fa:	9b04      	ldr	r3, [sp, #16]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d078      	beq.n	800f9f2 <_dtoa_r+0x4f2>
 800f900:	9b01      	ldr	r3, [sp, #4]
 800f902:	2b00      	cmp	r3, #0
 800f904:	dd39      	ble.n	800f97a <_dtoa_r+0x47a>
 800f906:	4b90      	ldr	r3, [pc, #576]	; (800fb48 <_dtoa_r+0x648>)
 800f908:	2200      	movs	r2, #0
 800f90a:	4640      	mov	r0, r8
 800f90c:	4649      	mov	r1, r9
 800f90e:	f7f0 fe9b 	bl	8000648 <__aeabi_dmul>
 800f912:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f916:	9e01      	ldr	r6, [sp, #4]
 800f918:	f10b 37ff 	add.w	r7, fp, #4294967295
 800f91c:	3501      	adds	r5, #1
 800f91e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f922:	4628      	mov	r0, r5
 800f924:	f7f0 fe26 	bl	8000574 <__aeabi_i2d>
 800f928:	4642      	mov	r2, r8
 800f92a:	464b      	mov	r3, r9
 800f92c:	f7f0 fe8c 	bl	8000648 <__aeabi_dmul>
 800f930:	4b86      	ldr	r3, [pc, #536]	; (800fb4c <_dtoa_r+0x64c>)
 800f932:	2200      	movs	r2, #0
 800f934:	f7f0 fcd2 	bl	80002dc <__adddf3>
 800f938:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f93c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f940:	9303      	str	r3, [sp, #12]
 800f942:	2e00      	cmp	r6, #0
 800f944:	d158      	bne.n	800f9f8 <_dtoa_r+0x4f8>
 800f946:	4b82      	ldr	r3, [pc, #520]	; (800fb50 <_dtoa_r+0x650>)
 800f948:	2200      	movs	r2, #0
 800f94a:	4640      	mov	r0, r8
 800f94c:	4649      	mov	r1, r9
 800f94e:	f7f0 fcc3 	bl	80002d8 <__aeabi_dsub>
 800f952:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f956:	4680      	mov	r8, r0
 800f958:	4689      	mov	r9, r1
 800f95a:	f7f1 f905 	bl	8000b68 <__aeabi_dcmpgt>
 800f95e:	2800      	cmp	r0, #0
 800f960:	f040 8296 	bne.w	800fe90 <_dtoa_r+0x990>
 800f964:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f968:	4640      	mov	r0, r8
 800f96a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f96e:	4649      	mov	r1, r9
 800f970:	f7f1 f8dc 	bl	8000b2c <__aeabi_dcmplt>
 800f974:	2800      	cmp	r0, #0
 800f976:	f040 8289 	bne.w	800fe8c <_dtoa_r+0x98c>
 800f97a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f97e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f980:	2b00      	cmp	r3, #0
 800f982:	f2c0 814e 	blt.w	800fc22 <_dtoa_r+0x722>
 800f986:	f1bb 0f0e 	cmp.w	fp, #14
 800f98a:	f300 814a 	bgt.w	800fc22 <_dtoa_r+0x722>
 800f98e:	4b6b      	ldr	r3, [pc, #428]	; (800fb3c <_dtoa_r+0x63c>)
 800f990:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f994:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f998:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	f280 80dc 	bge.w	800fb58 <_dtoa_r+0x658>
 800f9a0:	9b04      	ldr	r3, [sp, #16]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	f300 80d8 	bgt.w	800fb58 <_dtoa_r+0x658>
 800f9a8:	f040 826f 	bne.w	800fe8a <_dtoa_r+0x98a>
 800f9ac:	4b68      	ldr	r3, [pc, #416]	; (800fb50 <_dtoa_r+0x650>)
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	4640      	mov	r0, r8
 800f9b2:	4649      	mov	r1, r9
 800f9b4:	f7f0 fe48 	bl	8000648 <__aeabi_dmul>
 800f9b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f9bc:	f7f1 f8ca 	bl	8000b54 <__aeabi_dcmpge>
 800f9c0:	9e04      	ldr	r6, [sp, #16]
 800f9c2:	4637      	mov	r7, r6
 800f9c4:	2800      	cmp	r0, #0
 800f9c6:	f040 8245 	bne.w	800fe54 <_dtoa_r+0x954>
 800f9ca:	9d00      	ldr	r5, [sp, #0]
 800f9cc:	2331      	movs	r3, #49	; 0x31
 800f9ce:	f805 3b01 	strb.w	r3, [r5], #1
 800f9d2:	f10b 0b01 	add.w	fp, fp, #1
 800f9d6:	e241      	b.n	800fe5c <_dtoa_r+0x95c>
 800f9d8:	07f2      	lsls	r2, r6, #31
 800f9da:	d505      	bpl.n	800f9e8 <_dtoa_r+0x4e8>
 800f9dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f9e0:	f7f0 fe32 	bl	8000648 <__aeabi_dmul>
 800f9e4:	3501      	adds	r5, #1
 800f9e6:	2301      	movs	r3, #1
 800f9e8:	1076      	asrs	r6, r6, #1
 800f9ea:	3708      	adds	r7, #8
 800f9ec:	e773      	b.n	800f8d6 <_dtoa_r+0x3d6>
 800f9ee:	2502      	movs	r5, #2
 800f9f0:	e775      	b.n	800f8de <_dtoa_r+0x3de>
 800f9f2:	9e04      	ldr	r6, [sp, #16]
 800f9f4:	465f      	mov	r7, fp
 800f9f6:	e792      	b.n	800f91e <_dtoa_r+0x41e>
 800f9f8:	9900      	ldr	r1, [sp, #0]
 800f9fa:	4b50      	ldr	r3, [pc, #320]	; (800fb3c <_dtoa_r+0x63c>)
 800f9fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fa00:	4431      	add	r1, r6
 800fa02:	9102      	str	r1, [sp, #8]
 800fa04:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fa06:	eeb0 9a47 	vmov.f32	s18, s14
 800fa0a:	eef0 9a67 	vmov.f32	s19, s15
 800fa0e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800fa12:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fa16:	2900      	cmp	r1, #0
 800fa18:	d044      	beq.n	800faa4 <_dtoa_r+0x5a4>
 800fa1a:	494e      	ldr	r1, [pc, #312]	; (800fb54 <_dtoa_r+0x654>)
 800fa1c:	2000      	movs	r0, #0
 800fa1e:	f7f0 ff3d 	bl	800089c <__aeabi_ddiv>
 800fa22:	ec53 2b19 	vmov	r2, r3, d9
 800fa26:	f7f0 fc57 	bl	80002d8 <__aeabi_dsub>
 800fa2a:	9d00      	ldr	r5, [sp, #0]
 800fa2c:	ec41 0b19 	vmov	d9, r0, r1
 800fa30:	4649      	mov	r1, r9
 800fa32:	4640      	mov	r0, r8
 800fa34:	f7f1 f8b8 	bl	8000ba8 <__aeabi_d2iz>
 800fa38:	4606      	mov	r6, r0
 800fa3a:	f7f0 fd9b 	bl	8000574 <__aeabi_i2d>
 800fa3e:	4602      	mov	r2, r0
 800fa40:	460b      	mov	r3, r1
 800fa42:	4640      	mov	r0, r8
 800fa44:	4649      	mov	r1, r9
 800fa46:	f7f0 fc47 	bl	80002d8 <__aeabi_dsub>
 800fa4a:	3630      	adds	r6, #48	; 0x30
 800fa4c:	f805 6b01 	strb.w	r6, [r5], #1
 800fa50:	ec53 2b19 	vmov	r2, r3, d9
 800fa54:	4680      	mov	r8, r0
 800fa56:	4689      	mov	r9, r1
 800fa58:	f7f1 f868 	bl	8000b2c <__aeabi_dcmplt>
 800fa5c:	2800      	cmp	r0, #0
 800fa5e:	d164      	bne.n	800fb2a <_dtoa_r+0x62a>
 800fa60:	4642      	mov	r2, r8
 800fa62:	464b      	mov	r3, r9
 800fa64:	4937      	ldr	r1, [pc, #220]	; (800fb44 <_dtoa_r+0x644>)
 800fa66:	2000      	movs	r0, #0
 800fa68:	f7f0 fc36 	bl	80002d8 <__aeabi_dsub>
 800fa6c:	ec53 2b19 	vmov	r2, r3, d9
 800fa70:	f7f1 f85c 	bl	8000b2c <__aeabi_dcmplt>
 800fa74:	2800      	cmp	r0, #0
 800fa76:	f040 80b6 	bne.w	800fbe6 <_dtoa_r+0x6e6>
 800fa7a:	9b02      	ldr	r3, [sp, #8]
 800fa7c:	429d      	cmp	r5, r3
 800fa7e:	f43f af7c 	beq.w	800f97a <_dtoa_r+0x47a>
 800fa82:	4b31      	ldr	r3, [pc, #196]	; (800fb48 <_dtoa_r+0x648>)
 800fa84:	ec51 0b19 	vmov	r0, r1, d9
 800fa88:	2200      	movs	r2, #0
 800fa8a:	f7f0 fddd 	bl	8000648 <__aeabi_dmul>
 800fa8e:	4b2e      	ldr	r3, [pc, #184]	; (800fb48 <_dtoa_r+0x648>)
 800fa90:	ec41 0b19 	vmov	d9, r0, r1
 800fa94:	2200      	movs	r2, #0
 800fa96:	4640      	mov	r0, r8
 800fa98:	4649      	mov	r1, r9
 800fa9a:	f7f0 fdd5 	bl	8000648 <__aeabi_dmul>
 800fa9e:	4680      	mov	r8, r0
 800faa0:	4689      	mov	r9, r1
 800faa2:	e7c5      	b.n	800fa30 <_dtoa_r+0x530>
 800faa4:	ec51 0b17 	vmov	r0, r1, d7
 800faa8:	f7f0 fdce 	bl	8000648 <__aeabi_dmul>
 800faac:	9b02      	ldr	r3, [sp, #8]
 800faae:	9d00      	ldr	r5, [sp, #0]
 800fab0:	930f      	str	r3, [sp, #60]	; 0x3c
 800fab2:	ec41 0b19 	vmov	d9, r0, r1
 800fab6:	4649      	mov	r1, r9
 800fab8:	4640      	mov	r0, r8
 800faba:	f7f1 f875 	bl	8000ba8 <__aeabi_d2iz>
 800fabe:	4606      	mov	r6, r0
 800fac0:	f7f0 fd58 	bl	8000574 <__aeabi_i2d>
 800fac4:	3630      	adds	r6, #48	; 0x30
 800fac6:	4602      	mov	r2, r0
 800fac8:	460b      	mov	r3, r1
 800faca:	4640      	mov	r0, r8
 800facc:	4649      	mov	r1, r9
 800face:	f7f0 fc03 	bl	80002d8 <__aeabi_dsub>
 800fad2:	f805 6b01 	strb.w	r6, [r5], #1
 800fad6:	9b02      	ldr	r3, [sp, #8]
 800fad8:	429d      	cmp	r5, r3
 800fada:	4680      	mov	r8, r0
 800fadc:	4689      	mov	r9, r1
 800fade:	f04f 0200 	mov.w	r2, #0
 800fae2:	d124      	bne.n	800fb2e <_dtoa_r+0x62e>
 800fae4:	4b1b      	ldr	r3, [pc, #108]	; (800fb54 <_dtoa_r+0x654>)
 800fae6:	ec51 0b19 	vmov	r0, r1, d9
 800faea:	f7f0 fbf7 	bl	80002dc <__adddf3>
 800faee:	4602      	mov	r2, r0
 800faf0:	460b      	mov	r3, r1
 800faf2:	4640      	mov	r0, r8
 800faf4:	4649      	mov	r1, r9
 800faf6:	f7f1 f837 	bl	8000b68 <__aeabi_dcmpgt>
 800fafa:	2800      	cmp	r0, #0
 800fafc:	d173      	bne.n	800fbe6 <_dtoa_r+0x6e6>
 800fafe:	ec53 2b19 	vmov	r2, r3, d9
 800fb02:	4914      	ldr	r1, [pc, #80]	; (800fb54 <_dtoa_r+0x654>)
 800fb04:	2000      	movs	r0, #0
 800fb06:	f7f0 fbe7 	bl	80002d8 <__aeabi_dsub>
 800fb0a:	4602      	mov	r2, r0
 800fb0c:	460b      	mov	r3, r1
 800fb0e:	4640      	mov	r0, r8
 800fb10:	4649      	mov	r1, r9
 800fb12:	f7f1 f80b 	bl	8000b2c <__aeabi_dcmplt>
 800fb16:	2800      	cmp	r0, #0
 800fb18:	f43f af2f 	beq.w	800f97a <_dtoa_r+0x47a>
 800fb1c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800fb1e:	1e6b      	subs	r3, r5, #1
 800fb20:	930f      	str	r3, [sp, #60]	; 0x3c
 800fb22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fb26:	2b30      	cmp	r3, #48	; 0x30
 800fb28:	d0f8      	beq.n	800fb1c <_dtoa_r+0x61c>
 800fb2a:	46bb      	mov	fp, r7
 800fb2c:	e04a      	b.n	800fbc4 <_dtoa_r+0x6c4>
 800fb2e:	4b06      	ldr	r3, [pc, #24]	; (800fb48 <_dtoa_r+0x648>)
 800fb30:	f7f0 fd8a 	bl	8000648 <__aeabi_dmul>
 800fb34:	4680      	mov	r8, r0
 800fb36:	4689      	mov	r9, r1
 800fb38:	e7bd      	b.n	800fab6 <_dtoa_r+0x5b6>
 800fb3a:	bf00      	nop
 800fb3c:	08012720 	.word	0x08012720
 800fb40:	080126f8 	.word	0x080126f8
 800fb44:	3ff00000 	.word	0x3ff00000
 800fb48:	40240000 	.word	0x40240000
 800fb4c:	401c0000 	.word	0x401c0000
 800fb50:	40140000 	.word	0x40140000
 800fb54:	3fe00000 	.word	0x3fe00000
 800fb58:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800fb5c:	9d00      	ldr	r5, [sp, #0]
 800fb5e:	4642      	mov	r2, r8
 800fb60:	464b      	mov	r3, r9
 800fb62:	4630      	mov	r0, r6
 800fb64:	4639      	mov	r1, r7
 800fb66:	f7f0 fe99 	bl	800089c <__aeabi_ddiv>
 800fb6a:	f7f1 f81d 	bl	8000ba8 <__aeabi_d2iz>
 800fb6e:	9001      	str	r0, [sp, #4]
 800fb70:	f7f0 fd00 	bl	8000574 <__aeabi_i2d>
 800fb74:	4642      	mov	r2, r8
 800fb76:	464b      	mov	r3, r9
 800fb78:	f7f0 fd66 	bl	8000648 <__aeabi_dmul>
 800fb7c:	4602      	mov	r2, r0
 800fb7e:	460b      	mov	r3, r1
 800fb80:	4630      	mov	r0, r6
 800fb82:	4639      	mov	r1, r7
 800fb84:	f7f0 fba8 	bl	80002d8 <__aeabi_dsub>
 800fb88:	9e01      	ldr	r6, [sp, #4]
 800fb8a:	9f04      	ldr	r7, [sp, #16]
 800fb8c:	3630      	adds	r6, #48	; 0x30
 800fb8e:	f805 6b01 	strb.w	r6, [r5], #1
 800fb92:	9e00      	ldr	r6, [sp, #0]
 800fb94:	1bae      	subs	r6, r5, r6
 800fb96:	42b7      	cmp	r7, r6
 800fb98:	4602      	mov	r2, r0
 800fb9a:	460b      	mov	r3, r1
 800fb9c:	d134      	bne.n	800fc08 <_dtoa_r+0x708>
 800fb9e:	f7f0 fb9d 	bl	80002dc <__adddf3>
 800fba2:	4642      	mov	r2, r8
 800fba4:	464b      	mov	r3, r9
 800fba6:	4606      	mov	r6, r0
 800fba8:	460f      	mov	r7, r1
 800fbaa:	f7f0 ffdd 	bl	8000b68 <__aeabi_dcmpgt>
 800fbae:	b9c8      	cbnz	r0, 800fbe4 <_dtoa_r+0x6e4>
 800fbb0:	4642      	mov	r2, r8
 800fbb2:	464b      	mov	r3, r9
 800fbb4:	4630      	mov	r0, r6
 800fbb6:	4639      	mov	r1, r7
 800fbb8:	f7f0 ffae 	bl	8000b18 <__aeabi_dcmpeq>
 800fbbc:	b110      	cbz	r0, 800fbc4 <_dtoa_r+0x6c4>
 800fbbe:	9b01      	ldr	r3, [sp, #4]
 800fbc0:	07db      	lsls	r3, r3, #31
 800fbc2:	d40f      	bmi.n	800fbe4 <_dtoa_r+0x6e4>
 800fbc4:	4651      	mov	r1, sl
 800fbc6:	4620      	mov	r0, r4
 800fbc8:	f000 fbcc 	bl	8010364 <_Bfree>
 800fbcc:	2300      	movs	r3, #0
 800fbce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fbd0:	702b      	strb	r3, [r5, #0]
 800fbd2:	f10b 0301 	add.w	r3, fp, #1
 800fbd6:	6013      	str	r3, [r2, #0]
 800fbd8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	f43f ace2 	beq.w	800f5a4 <_dtoa_r+0xa4>
 800fbe0:	601d      	str	r5, [r3, #0]
 800fbe2:	e4df      	b.n	800f5a4 <_dtoa_r+0xa4>
 800fbe4:	465f      	mov	r7, fp
 800fbe6:	462b      	mov	r3, r5
 800fbe8:	461d      	mov	r5, r3
 800fbea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fbee:	2a39      	cmp	r2, #57	; 0x39
 800fbf0:	d106      	bne.n	800fc00 <_dtoa_r+0x700>
 800fbf2:	9a00      	ldr	r2, [sp, #0]
 800fbf4:	429a      	cmp	r2, r3
 800fbf6:	d1f7      	bne.n	800fbe8 <_dtoa_r+0x6e8>
 800fbf8:	9900      	ldr	r1, [sp, #0]
 800fbfa:	2230      	movs	r2, #48	; 0x30
 800fbfc:	3701      	adds	r7, #1
 800fbfe:	700a      	strb	r2, [r1, #0]
 800fc00:	781a      	ldrb	r2, [r3, #0]
 800fc02:	3201      	adds	r2, #1
 800fc04:	701a      	strb	r2, [r3, #0]
 800fc06:	e790      	b.n	800fb2a <_dtoa_r+0x62a>
 800fc08:	4ba3      	ldr	r3, [pc, #652]	; (800fe98 <_dtoa_r+0x998>)
 800fc0a:	2200      	movs	r2, #0
 800fc0c:	f7f0 fd1c 	bl	8000648 <__aeabi_dmul>
 800fc10:	2200      	movs	r2, #0
 800fc12:	2300      	movs	r3, #0
 800fc14:	4606      	mov	r6, r0
 800fc16:	460f      	mov	r7, r1
 800fc18:	f7f0 ff7e 	bl	8000b18 <__aeabi_dcmpeq>
 800fc1c:	2800      	cmp	r0, #0
 800fc1e:	d09e      	beq.n	800fb5e <_dtoa_r+0x65e>
 800fc20:	e7d0      	b.n	800fbc4 <_dtoa_r+0x6c4>
 800fc22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fc24:	2a00      	cmp	r2, #0
 800fc26:	f000 80ca 	beq.w	800fdbe <_dtoa_r+0x8be>
 800fc2a:	9a07      	ldr	r2, [sp, #28]
 800fc2c:	2a01      	cmp	r2, #1
 800fc2e:	f300 80ad 	bgt.w	800fd8c <_dtoa_r+0x88c>
 800fc32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fc34:	2a00      	cmp	r2, #0
 800fc36:	f000 80a5 	beq.w	800fd84 <_dtoa_r+0x884>
 800fc3a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fc3e:	9e08      	ldr	r6, [sp, #32]
 800fc40:	9d05      	ldr	r5, [sp, #20]
 800fc42:	9a05      	ldr	r2, [sp, #20]
 800fc44:	441a      	add	r2, r3
 800fc46:	9205      	str	r2, [sp, #20]
 800fc48:	9a06      	ldr	r2, [sp, #24]
 800fc4a:	2101      	movs	r1, #1
 800fc4c:	441a      	add	r2, r3
 800fc4e:	4620      	mov	r0, r4
 800fc50:	9206      	str	r2, [sp, #24]
 800fc52:	f000 fc3d 	bl	80104d0 <__i2b>
 800fc56:	4607      	mov	r7, r0
 800fc58:	b165      	cbz	r5, 800fc74 <_dtoa_r+0x774>
 800fc5a:	9b06      	ldr	r3, [sp, #24]
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	dd09      	ble.n	800fc74 <_dtoa_r+0x774>
 800fc60:	42ab      	cmp	r3, r5
 800fc62:	9a05      	ldr	r2, [sp, #20]
 800fc64:	bfa8      	it	ge
 800fc66:	462b      	movge	r3, r5
 800fc68:	1ad2      	subs	r2, r2, r3
 800fc6a:	9205      	str	r2, [sp, #20]
 800fc6c:	9a06      	ldr	r2, [sp, #24]
 800fc6e:	1aed      	subs	r5, r5, r3
 800fc70:	1ad3      	subs	r3, r2, r3
 800fc72:	9306      	str	r3, [sp, #24]
 800fc74:	9b08      	ldr	r3, [sp, #32]
 800fc76:	b1f3      	cbz	r3, 800fcb6 <_dtoa_r+0x7b6>
 800fc78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	f000 80a3 	beq.w	800fdc6 <_dtoa_r+0x8c6>
 800fc80:	2e00      	cmp	r6, #0
 800fc82:	dd10      	ble.n	800fca6 <_dtoa_r+0x7a6>
 800fc84:	4639      	mov	r1, r7
 800fc86:	4632      	mov	r2, r6
 800fc88:	4620      	mov	r0, r4
 800fc8a:	f000 fce1 	bl	8010650 <__pow5mult>
 800fc8e:	4652      	mov	r2, sl
 800fc90:	4601      	mov	r1, r0
 800fc92:	4607      	mov	r7, r0
 800fc94:	4620      	mov	r0, r4
 800fc96:	f000 fc31 	bl	80104fc <__multiply>
 800fc9a:	4651      	mov	r1, sl
 800fc9c:	4680      	mov	r8, r0
 800fc9e:	4620      	mov	r0, r4
 800fca0:	f000 fb60 	bl	8010364 <_Bfree>
 800fca4:	46c2      	mov	sl, r8
 800fca6:	9b08      	ldr	r3, [sp, #32]
 800fca8:	1b9a      	subs	r2, r3, r6
 800fcaa:	d004      	beq.n	800fcb6 <_dtoa_r+0x7b6>
 800fcac:	4651      	mov	r1, sl
 800fcae:	4620      	mov	r0, r4
 800fcb0:	f000 fcce 	bl	8010650 <__pow5mult>
 800fcb4:	4682      	mov	sl, r0
 800fcb6:	2101      	movs	r1, #1
 800fcb8:	4620      	mov	r0, r4
 800fcba:	f000 fc09 	bl	80104d0 <__i2b>
 800fcbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	4606      	mov	r6, r0
 800fcc4:	f340 8081 	ble.w	800fdca <_dtoa_r+0x8ca>
 800fcc8:	461a      	mov	r2, r3
 800fcca:	4601      	mov	r1, r0
 800fccc:	4620      	mov	r0, r4
 800fcce:	f000 fcbf 	bl	8010650 <__pow5mult>
 800fcd2:	9b07      	ldr	r3, [sp, #28]
 800fcd4:	2b01      	cmp	r3, #1
 800fcd6:	4606      	mov	r6, r0
 800fcd8:	dd7a      	ble.n	800fdd0 <_dtoa_r+0x8d0>
 800fcda:	f04f 0800 	mov.w	r8, #0
 800fcde:	6933      	ldr	r3, [r6, #16]
 800fce0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800fce4:	6918      	ldr	r0, [r3, #16]
 800fce6:	f000 fba5 	bl	8010434 <__hi0bits>
 800fcea:	f1c0 0020 	rsb	r0, r0, #32
 800fcee:	9b06      	ldr	r3, [sp, #24]
 800fcf0:	4418      	add	r0, r3
 800fcf2:	f010 001f 	ands.w	r0, r0, #31
 800fcf6:	f000 8094 	beq.w	800fe22 <_dtoa_r+0x922>
 800fcfa:	f1c0 0320 	rsb	r3, r0, #32
 800fcfe:	2b04      	cmp	r3, #4
 800fd00:	f340 8085 	ble.w	800fe0e <_dtoa_r+0x90e>
 800fd04:	9b05      	ldr	r3, [sp, #20]
 800fd06:	f1c0 001c 	rsb	r0, r0, #28
 800fd0a:	4403      	add	r3, r0
 800fd0c:	9305      	str	r3, [sp, #20]
 800fd0e:	9b06      	ldr	r3, [sp, #24]
 800fd10:	4403      	add	r3, r0
 800fd12:	4405      	add	r5, r0
 800fd14:	9306      	str	r3, [sp, #24]
 800fd16:	9b05      	ldr	r3, [sp, #20]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	dd05      	ble.n	800fd28 <_dtoa_r+0x828>
 800fd1c:	4651      	mov	r1, sl
 800fd1e:	461a      	mov	r2, r3
 800fd20:	4620      	mov	r0, r4
 800fd22:	f000 fcef 	bl	8010704 <__lshift>
 800fd26:	4682      	mov	sl, r0
 800fd28:	9b06      	ldr	r3, [sp, #24]
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	dd05      	ble.n	800fd3a <_dtoa_r+0x83a>
 800fd2e:	4631      	mov	r1, r6
 800fd30:	461a      	mov	r2, r3
 800fd32:	4620      	mov	r0, r4
 800fd34:	f000 fce6 	bl	8010704 <__lshift>
 800fd38:	4606      	mov	r6, r0
 800fd3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d072      	beq.n	800fe26 <_dtoa_r+0x926>
 800fd40:	4631      	mov	r1, r6
 800fd42:	4650      	mov	r0, sl
 800fd44:	f000 fd4a 	bl	80107dc <__mcmp>
 800fd48:	2800      	cmp	r0, #0
 800fd4a:	da6c      	bge.n	800fe26 <_dtoa_r+0x926>
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	4651      	mov	r1, sl
 800fd50:	220a      	movs	r2, #10
 800fd52:	4620      	mov	r0, r4
 800fd54:	f000 fb28 	bl	80103a8 <__multadd>
 800fd58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd5a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fd5e:	4682      	mov	sl, r0
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	f000 81b0 	beq.w	80100c6 <_dtoa_r+0xbc6>
 800fd66:	2300      	movs	r3, #0
 800fd68:	4639      	mov	r1, r7
 800fd6a:	220a      	movs	r2, #10
 800fd6c:	4620      	mov	r0, r4
 800fd6e:	f000 fb1b 	bl	80103a8 <__multadd>
 800fd72:	9b01      	ldr	r3, [sp, #4]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	4607      	mov	r7, r0
 800fd78:	f300 8096 	bgt.w	800fea8 <_dtoa_r+0x9a8>
 800fd7c:	9b07      	ldr	r3, [sp, #28]
 800fd7e:	2b02      	cmp	r3, #2
 800fd80:	dc59      	bgt.n	800fe36 <_dtoa_r+0x936>
 800fd82:	e091      	b.n	800fea8 <_dtoa_r+0x9a8>
 800fd84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fd86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fd8a:	e758      	b.n	800fc3e <_dtoa_r+0x73e>
 800fd8c:	9b04      	ldr	r3, [sp, #16]
 800fd8e:	1e5e      	subs	r6, r3, #1
 800fd90:	9b08      	ldr	r3, [sp, #32]
 800fd92:	42b3      	cmp	r3, r6
 800fd94:	bfbf      	itttt	lt
 800fd96:	9b08      	ldrlt	r3, [sp, #32]
 800fd98:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800fd9a:	9608      	strlt	r6, [sp, #32]
 800fd9c:	1af3      	sublt	r3, r6, r3
 800fd9e:	bfb4      	ite	lt
 800fda0:	18d2      	addlt	r2, r2, r3
 800fda2:	1b9e      	subge	r6, r3, r6
 800fda4:	9b04      	ldr	r3, [sp, #16]
 800fda6:	bfbc      	itt	lt
 800fda8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800fdaa:	2600      	movlt	r6, #0
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	bfb7      	itett	lt
 800fdb0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800fdb4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800fdb8:	1a9d      	sublt	r5, r3, r2
 800fdba:	2300      	movlt	r3, #0
 800fdbc:	e741      	b.n	800fc42 <_dtoa_r+0x742>
 800fdbe:	9e08      	ldr	r6, [sp, #32]
 800fdc0:	9d05      	ldr	r5, [sp, #20]
 800fdc2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800fdc4:	e748      	b.n	800fc58 <_dtoa_r+0x758>
 800fdc6:	9a08      	ldr	r2, [sp, #32]
 800fdc8:	e770      	b.n	800fcac <_dtoa_r+0x7ac>
 800fdca:	9b07      	ldr	r3, [sp, #28]
 800fdcc:	2b01      	cmp	r3, #1
 800fdce:	dc19      	bgt.n	800fe04 <_dtoa_r+0x904>
 800fdd0:	9b02      	ldr	r3, [sp, #8]
 800fdd2:	b9bb      	cbnz	r3, 800fe04 <_dtoa_r+0x904>
 800fdd4:	9b03      	ldr	r3, [sp, #12]
 800fdd6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fdda:	b99b      	cbnz	r3, 800fe04 <_dtoa_r+0x904>
 800fddc:	9b03      	ldr	r3, [sp, #12]
 800fdde:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fde2:	0d1b      	lsrs	r3, r3, #20
 800fde4:	051b      	lsls	r3, r3, #20
 800fde6:	b183      	cbz	r3, 800fe0a <_dtoa_r+0x90a>
 800fde8:	9b05      	ldr	r3, [sp, #20]
 800fdea:	3301      	adds	r3, #1
 800fdec:	9305      	str	r3, [sp, #20]
 800fdee:	9b06      	ldr	r3, [sp, #24]
 800fdf0:	3301      	adds	r3, #1
 800fdf2:	9306      	str	r3, [sp, #24]
 800fdf4:	f04f 0801 	mov.w	r8, #1
 800fdf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	f47f af6f 	bne.w	800fcde <_dtoa_r+0x7de>
 800fe00:	2001      	movs	r0, #1
 800fe02:	e774      	b.n	800fcee <_dtoa_r+0x7ee>
 800fe04:	f04f 0800 	mov.w	r8, #0
 800fe08:	e7f6      	b.n	800fdf8 <_dtoa_r+0x8f8>
 800fe0a:	4698      	mov	r8, r3
 800fe0c:	e7f4      	b.n	800fdf8 <_dtoa_r+0x8f8>
 800fe0e:	d082      	beq.n	800fd16 <_dtoa_r+0x816>
 800fe10:	9a05      	ldr	r2, [sp, #20]
 800fe12:	331c      	adds	r3, #28
 800fe14:	441a      	add	r2, r3
 800fe16:	9205      	str	r2, [sp, #20]
 800fe18:	9a06      	ldr	r2, [sp, #24]
 800fe1a:	441a      	add	r2, r3
 800fe1c:	441d      	add	r5, r3
 800fe1e:	9206      	str	r2, [sp, #24]
 800fe20:	e779      	b.n	800fd16 <_dtoa_r+0x816>
 800fe22:	4603      	mov	r3, r0
 800fe24:	e7f4      	b.n	800fe10 <_dtoa_r+0x910>
 800fe26:	9b04      	ldr	r3, [sp, #16]
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	dc37      	bgt.n	800fe9c <_dtoa_r+0x99c>
 800fe2c:	9b07      	ldr	r3, [sp, #28]
 800fe2e:	2b02      	cmp	r3, #2
 800fe30:	dd34      	ble.n	800fe9c <_dtoa_r+0x99c>
 800fe32:	9b04      	ldr	r3, [sp, #16]
 800fe34:	9301      	str	r3, [sp, #4]
 800fe36:	9b01      	ldr	r3, [sp, #4]
 800fe38:	b963      	cbnz	r3, 800fe54 <_dtoa_r+0x954>
 800fe3a:	4631      	mov	r1, r6
 800fe3c:	2205      	movs	r2, #5
 800fe3e:	4620      	mov	r0, r4
 800fe40:	f000 fab2 	bl	80103a8 <__multadd>
 800fe44:	4601      	mov	r1, r0
 800fe46:	4606      	mov	r6, r0
 800fe48:	4650      	mov	r0, sl
 800fe4a:	f000 fcc7 	bl	80107dc <__mcmp>
 800fe4e:	2800      	cmp	r0, #0
 800fe50:	f73f adbb 	bgt.w	800f9ca <_dtoa_r+0x4ca>
 800fe54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe56:	9d00      	ldr	r5, [sp, #0]
 800fe58:	ea6f 0b03 	mvn.w	fp, r3
 800fe5c:	f04f 0800 	mov.w	r8, #0
 800fe60:	4631      	mov	r1, r6
 800fe62:	4620      	mov	r0, r4
 800fe64:	f000 fa7e 	bl	8010364 <_Bfree>
 800fe68:	2f00      	cmp	r7, #0
 800fe6a:	f43f aeab 	beq.w	800fbc4 <_dtoa_r+0x6c4>
 800fe6e:	f1b8 0f00 	cmp.w	r8, #0
 800fe72:	d005      	beq.n	800fe80 <_dtoa_r+0x980>
 800fe74:	45b8      	cmp	r8, r7
 800fe76:	d003      	beq.n	800fe80 <_dtoa_r+0x980>
 800fe78:	4641      	mov	r1, r8
 800fe7a:	4620      	mov	r0, r4
 800fe7c:	f000 fa72 	bl	8010364 <_Bfree>
 800fe80:	4639      	mov	r1, r7
 800fe82:	4620      	mov	r0, r4
 800fe84:	f000 fa6e 	bl	8010364 <_Bfree>
 800fe88:	e69c      	b.n	800fbc4 <_dtoa_r+0x6c4>
 800fe8a:	2600      	movs	r6, #0
 800fe8c:	4637      	mov	r7, r6
 800fe8e:	e7e1      	b.n	800fe54 <_dtoa_r+0x954>
 800fe90:	46bb      	mov	fp, r7
 800fe92:	4637      	mov	r7, r6
 800fe94:	e599      	b.n	800f9ca <_dtoa_r+0x4ca>
 800fe96:	bf00      	nop
 800fe98:	40240000 	.word	0x40240000
 800fe9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	f000 80c8 	beq.w	8010034 <_dtoa_r+0xb34>
 800fea4:	9b04      	ldr	r3, [sp, #16]
 800fea6:	9301      	str	r3, [sp, #4]
 800fea8:	2d00      	cmp	r5, #0
 800feaa:	dd05      	ble.n	800feb8 <_dtoa_r+0x9b8>
 800feac:	4639      	mov	r1, r7
 800feae:	462a      	mov	r2, r5
 800feb0:	4620      	mov	r0, r4
 800feb2:	f000 fc27 	bl	8010704 <__lshift>
 800feb6:	4607      	mov	r7, r0
 800feb8:	f1b8 0f00 	cmp.w	r8, #0
 800febc:	d05b      	beq.n	800ff76 <_dtoa_r+0xa76>
 800febe:	6879      	ldr	r1, [r7, #4]
 800fec0:	4620      	mov	r0, r4
 800fec2:	f000 fa0f 	bl	80102e4 <_Balloc>
 800fec6:	4605      	mov	r5, r0
 800fec8:	b928      	cbnz	r0, 800fed6 <_dtoa_r+0x9d6>
 800feca:	4b83      	ldr	r3, [pc, #524]	; (80100d8 <_dtoa_r+0xbd8>)
 800fecc:	4602      	mov	r2, r0
 800fece:	f240 21ef 	movw	r1, #751	; 0x2ef
 800fed2:	f7ff bb2e 	b.w	800f532 <_dtoa_r+0x32>
 800fed6:	693a      	ldr	r2, [r7, #16]
 800fed8:	3202      	adds	r2, #2
 800feda:	0092      	lsls	r2, r2, #2
 800fedc:	f107 010c 	add.w	r1, r7, #12
 800fee0:	300c      	adds	r0, #12
 800fee2:	f7ff fa74 	bl	800f3ce <memcpy>
 800fee6:	2201      	movs	r2, #1
 800fee8:	4629      	mov	r1, r5
 800feea:	4620      	mov	r0, r4
 800feec:	f000 fc0a 	bl	8010704 <__lshift>
 800fef0:	9b00      	ldr	r3, [sp, #0]
 800fef2:	3301      	adds	r3, #1
 800fef4:	9304      	str	r3, [sp, #16]
 800fef6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fefa:	4413      	add	r3, r2
 800fefc:	9308      	str	r3, [sp, #32]
 800fefe:	9b02      	ldr	r3, [sp, #8]
 800ff00:	f003 0301 	and.w	r3, r3, #1
 800ff04:	46b8      	mov	r8, r7
 800ff06:	9306      	str	r3, [sp, #24]
 800ff08:	4607      	mov	r7, r0
 800ff0a:	9b04      	ldr	r3, [sp, #16]
 800ff0c:	4631      	mov	r1, r6
 800ff0e:	3b01      	subs	r3, #1
 800ff10:	4650      	mov	r0, sl
 800ff12:	9301      	str	r3, [sp, #4]
 800ff14:	f7ff fa69 	bl	800f3ea <quorem>
 800ff18:	4641      	mov	r1, r8
 800ff1a:	9002      	str	r0, [sp, #8]
 800ff1c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ff20:	4650      	mov	r0, sl
 800ff22:	f000 fc5b 	bl	80107dc <__mcmp>
 800ff26:	463a      	mov	r2, r7
 800ff28:	9005      	str	r0, [sp, #20]
 800ff2a:	4631      	mov	r1, r6
 800ff2c:	4620      	mov	r0, r4
 800ff2e:	f000 fc71 	bl	8010814 <__mdiff>
 800ff32:	68c2      	ldr	r2, [r0, #12]
 800ff34:	4605      	mov	r5, r0
 800ff36:	bb02      	cbnz	r2, 800ff7a <_dtoa_r+0xa7a>
 800ff38:	4601      	mov	r1, r0
 800ff3a:	4650      	mov	r0, sl
 800ff3c:	f000 fc4e 	bl	80107dc <__mcmp>
 800ff40:	4602      	mov	r2, r0
 800ff42:	4629      	mov	r1, r5
 800ff44:	4620      	mov	r0, r4
 800ff46:	9209      	str	r2, [sp, #36]	; 0x24
 800ff48:	f000 fa0c 	bl	8010364 <_Bfree>
 800ff4c:	9b07      	ldr	r3, [sp, #28]
 800ff4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ff50:	9d04      	ldr	r5, [sp, #16]
 800ff52:	ea43 0102 	orr.w	r1, r3, r2
 800ff56:	9b06      	ldr	r3, [sp, #24]
 800ff58:	4319      	orrs	r1, r3
 800ff5a:	d110      	bne.n	800ff7e <_dtoa_r+0xa7e>
 800ff5c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ff60:	d029      	beq.n	800ffb6 <_dtoa_r+0xab6>
 800ff62:	9b05      	ldr	r3, [sp, #20]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	dd02      	ble.n	800ff6e <_dtoa_r+0xa6e>
 800ff68:	9b02      	ldr	r3, [sp, #8]
 800ff6a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800ff6e:	9b01      	ldr	r3, [sp, #4]
 800ff70:	f883 9000 	strb.w	r9, [r3]
 800ff74:	e774      	b.n	800fe60 <_dtoa_r+0x960>
 800ff76:	4638      	mov	r0, r7
 800ff78:	e7ba      	b.n	800fef0 <_dtoa_r+0x9f0>
 800ff7a:	2201      	movs	r2, #1
 800ff7c:	e7e1      	b.n	800ff42 <_dtoa_r+0xa42>
 800ff7e:	9b05      	ldr	r3, [sp, #20]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	db04      	blt.n	800ff8e <_dtoa_r+0xa8e>
 800ff84:	9907      	ldr	r1, [sp, #28]
 800ff86:	430b      	orrs	r3, r1
 800ff88:	9906      	ldr	r1, [sp, #24]
 800ff8a:	430b      	orrs	r3, r1
 800ff8c:	d120      	bne.n	800ffd0 <_dtoa_r+0xad0>
 800ff8e:	2a00      	cmp	r2, #0
 800ff90:	dded      	ble.n	800ff6e <_dtoa_r+0xa6e>
 800ff92:	4651      	mov	r1, sl
 800ff94:	2201      	movs	r2, #1
 800ff96:	4620      	mov	r0, r4
 800ff98:	f000 fbb4 	bl	8010704 <__lshift>
 800ff9c:	4631      	mov	r1, r6
 800ff9e:	4682      	mov	sl, r0
 800ffa0:	f000 fc1c 	bl	80107dc <__mcmp>
 800ffa4:	2800      	cmp	r0, #0
 800ffa6:	dc03      	bgt.n	800ffb0 <_dtoa_r+0xab0>
 800ffa8:	d1e1      	bne.n	800ff6e <_dtoa_r+0xa6e>
 800ffaa:	f019 0f01 	tst.w	r9, #1
 800ffae:	d0de      	beq.n	800ff6e <_dtoa_r+0xa6e>
 800ffb0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ffb4:	d1d8      	bne.n	800ff68 <_dtoa_r+0xa68>
 800ffb6:	9a01      	ldr	r2, [sp, #4]
 800ffb8:	2339      	movs	r3, #57	; 0x39
 800ffba:	7013      	strb	r3, [r2, #0]
 800ffbc:	462b      	mov	r3, r5
 800ffbe:	461d      	mov	r5, r3
 800ffc0:	3b01      	subs	r3, #1
 800ffc2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ffc6:	2a39      	cmp	r2, #57	; 0x39
 800ffc8:	d06c      	beq.n	80100a4 <_dtoa_r+0xba4>
 800ffca:	3201      	adds	r2, #1
 800ffcc:	701a      	strb	r2, [r3, #0]
 800ffce:	e747      	b.n	800fe60 <_dtoa_r+0x960>
 800ffd0:	2a00      	cmp	r2, #0
 800ffd2:	dd07      	ble.n	800ffe4 <_dtoa_r+0xae4>
 800ffd4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ffd8:	d0ed      	beq.n	800ffb6 <_dtoa_r+0xab6>
 800ffda:	9a01      	ldr	r2, [sp, #4]
 800ffdc:	f109 0301 	add.w	r3, r9, #1
 800ffe0:	7013      	strb	r3, [r2, #0]
 800ffe2:	e73d      	b.n	800fe60 <_dtoa_r+0x960>
 800ffe4:	9b04      	ldr	r3, [sp, #16]
 800ffe6:	9a08      	ldr	r2, [sp, #32]
 800ffe8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800ffec:	4293      	cmp	r3, r2
 800ffee:	d043      	beq.n	8010078 <_dtoa_r+0xb78>
 800fff0:	4651      	mov	r1, sl
 800fff2:	2300      	movs	r3, #0
 800fff4:	220a      	movs	r2, #10
 800fff6:	4620      	mov	r0, r4
 800fff8:	f000 f9d6 	bl	80103a8 <__multadd>
 800fffc:	45b8      	cmp	r8, r7
 800fffe:	4682      	mov	sl, r0
 8010000:	f04f 0300 	mov.w	r3, #0
 8010004:	f04f 020a 	mov.w	r2, #10
 8010008:	4641      	mov	r1, r8
 801000a:	4620      	mov	r0, r4
 801000c:	d107      	bne.n	801001e <_dtoa_r+0xb1e>
 801000e:	f000 f9cb 	bl	80103a8 <__multadd>
 8010012:	4680      	mov	r8, r0
 8010014:	4607      	mov	r7, r0
 8010016:	9b04      	ldr	r3, [sp, #16]
 8010018:	3301      	adds	r3, #1
 801001a:	9304      	str	r3, [sp, #16]
 801001c:	e775      	b.n	800ff0a <_dtoa_r+0xa0a>
 801001e:	f000 f9c3 	bl	80103a8 <__multadd>
 8010022:	4639      	mov	r1, r7
 8010024:	4680      	mov	r8, r0
 8010026:	2300      	movs	r3, #0
 8010028:	220a      	movs	r2, #10
 801002a:	4620      	mov	r0, r4
 801002c:	f000 f9bc 	bl	80103a8 <__multadd>
 8010030:	4607      	mov	r7, r0
 8010032:	e7f0      	b.n	8010016 <_dtoa_r+0xb16>
 8010034:	9b04      	ldr	r3, [sp, #16]
 8010036:	9301      	str	r3, [sp, #4]
 8010038:	9d00      	ldr	r5, [sp, #0]
 801003a:	4631      	mov	r1, r6
 801003c:	4650      	mov	r0, sl
 801003e:	f7ff f9d4 	bl	800f3ea <quorem>
 8010042:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010046:	9b00      	ldr	r3, [sp, #0]
 8010048:	f805 9b01 	strb.w	r9, [r5], #1
 801004c:	1aea      	subs	r2, r5, r3
 801004e:	9b01      	ldr	r3, [sp, #4]
 8010050:	4293      	cmp	r3, r2
 8010052:	dd07      	ble.n	8010064 <_dtoa_r+0xb64>
 8010054:	4651      	mov	r1, sl
 8010056:	2300      	movs	r3, #0
 8010058:	220a      	movs	r2, #10
 801005a:	4620      	mov	r0, r4
 801005c:	f000 f9a4 	bl	80103a8 <__multadd>
 8010060:	4682      	mov	sl, r0
 8010062:	e7ea      	b.n	801003a <_dtoa_r+0xb3a>
 8010064:	9b01      	ldr	r3, [sp, #4]
 8010066:	2b00      	cmp	r3, #0
 8010068:	bfc8      	it	gt
 801006a:	461d      	movgt	r5, r3
 801006c:	9b00      	ldr	r3, [sp, #0]
 801006e:	bfd8      	it	le
 8010070:	2501      	movle	r5, #1
 8010072:	441d      	add	r5, r3
 8010074:	f04f 0800 	mov.w	r8, #0
 8010078:	4651      	mov	r1, sl
 801007a:	2201      	movs	r2, #1
 801007c:	4620      	mov	r0, r4
 801007e:	f000 fb41 	bl	8010704 <__lshift>
 8010082:	4631      	mov	r1, r6
 8010084:	4682      	mov	sl, r0
 8010086:	f000 fba9 	bl	80107dc <__mcmp>
 801008a:	2800      	cmp	r0, #0
 801008c:	dc96      	bgt.n	800ffbc <_dtoa_r+0xabc>
 801008e:	d102      	bne.n	8010096 <_dtoa_r+0xb96>
 8010090:	f019 0f01 	tst.w	r9, #1
 8010094:	d192      	bne.n	800ffbc <_dtoa_r+0xabc>
 8010096:	462b      	mov	r3, r5
 8010098:	461d      	mov	r5, r3
 801009a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801009e:	2a30      	cmp	r2, #48	; 0x30
 80100a0:	d0fa      	beq.n	8010098 <_dtoa_r+0xb98>
 80100a2:	e6dd      	b.n	800fe60 <_dtoa_r+0x960>
 80100a4:	9a00      	ldr	r2, [sp, #0]
 80100a6:	429a      	cmp	r2, r3
 80100a8:	d189      	bne.n	800ffbe <_dtoa_r+0xabe>
 80100aa:	f10b 0b01 	add.w	fp, fp, #1
 80100ae:	2331      	movs	r3, #49	; 0x31
 80100b0:	e796      	b.n	800ffe0 <_dtoa_r+0xae0>
 80100b2:	4b0a      	ldr	r3, [pc, #40]	; (80100dc <_dtoa_r+0xbdc>)
 80100b4:	f7ff ba99 	b.w	800f5ea <_dtoa_r+0xea>
 80100b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	f47f aa6d 	bne.w	800f59a <_dtoa_r+0x9a>
 80100c0:	4b07      	ldr	r3, [pc, #28]	; (80100e0 <_dtoa_r+0xbe0>)
 80100c2:	f7ff ba92 	b.w	800f5ea <_dtoa_r+0xea>
 80100c6:	9b01      	ldr	r3, [sp, #4]
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	dcb5      	bgt.n	8010038 <_dtoa_r+0xb38>
 80100cc:	9b07      	ldr	r3, [sp, #28]
 80100ce:	2b02      	cmp	r3, #2
 80100d0:	f73f aeb1 	bgt.w	800fe36 <_dtoa_r+0x936>
 80100d4:	e7b0      	b.n	8010038 <_dtoa_r+0xb38>
 80100d6:	bf00      	nop
 80100d8:	0801268c 	.word	0x0801268c
 80100dc:	080125ec 	.word	0x080125ec
 80100e0:	08012610 	.word	0x08012610

080100e4 <_free_r>:
 80100e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80100e6:	2900      	cmp	r1, #0
 80100e8:	d044      	beq.n	8010174 <_free_r+0x90>
 80100ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80100ee:	9001      	str	r0, [sp, #4]
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	f1a1 0404 	sub.w	r4, r1, #4
 80100f6:	bfb8      	it	lt
 80100f8:	18e4      	addlt	r4, r4, r3
 80100fa:	f000 f8e7 	bl	80102cc <__malloc_lock>
 80100fe:	4a1e      	ldr	r2, [pc, #120]	; (8010178 <_free_r+0x94>)
 8010100:	9801      	ldr	r0, [sp, #4]
 8010102:	6813      	ldr	r3, [r2, #0]
 8010104:	b933      	cbnz	r3, 8010114 <_free_r+0x30>
 8010106:	6063      	str	r3, [r4, #4]
 8010108:	6014      	str	r4, [r2, #0]
 801010a:	b003      	add	sp, #12
 801010c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010110:	f000 b8e2 	b.w	80102d8 <__malloc_unlock>
 8010114:	42a3      	cmp	r3, r4
 8010116:	d908      	bls.n	801012a <_free_r+0x46>
 8010118:	6825      	ldr	r5, [r4, #0]
 801011a:	1961      	adds	r1, r4, r5
 801011c:	428b      	cmp	r3, r1
 801011e:	bf01      	itttt	eq
 8010120:	6819      	ldreq	r1, [r3, #0]
 8010122:	685b      	ldreq	r3, [r3, #4]
 8010124:	1949      	addeq	r1, r1, r5
 8010126:	6021      	streq	r1, [r4, #0]
 8010128:	e7ed      	b.n	8010106 <_free_r+0x22>
 801012a:	461a      	mov	r2, r3
 801012c:	685b      	ldr	r3, [r3, #4]
 801012e:	b10b      	cbz	r3, 8010134 <_free_r+0x50>
 8010130:	42a3      	cmp	r3, r4
 8010132:	d9fa      	bls.n	801012a <_free_r+0x46>
 8010134:	6811      	ldr	r1, [r2, #0]
 8010136:	1855      	adds	r5, r2, r1
 8010138:	42a5      	cmp	r5, r4
 801013a:	d10b      	bne.n	8010154 <_free_r+0x70>
 801013c:	6824      	ldr	r4, [r4, #0]
 801013e:	4421      	add	r1, r4
 8010140:	1854      	adds	r4, r2, r1
 8010142:	42a3      	cmp	r3, r4
 8010144:	6011      	str	r1, [r2, #0]
 8010146:	d1e0      	bne.n	801010a <_free_r+0x26>
 8010148:	681c      	ldr	r4, [r3, #0]
 801014a:	685b      	ldr	r3, [r3, #4]
 801014c:	6053      	str	r3, [r2, #4]
 801014e:	440c      	add	r4, r1
 8010150:	6014      	str	r4, [r2, #0]
 8010152:	e7da      	b.n	801010a <_free_r+0x26>
 8010154:	d902      	bls.n	801015c <_free_r+0x78>
 8010156:	230c      	movs	r3, #12
 8010158:	6003      	str	r3, [r0, #0]
 801015a:	e7d6      	b.n	801010a <_free_r+0x26>
 801015c:	6825      	ldr	r5, [r4, #0]
 801015e:	1961      	adds	r1, r4, r5
 8010160:	428b      	cmp	r3, r1
 8010162:	bf04      	itt	eq
 8010164:	6819      	ldreq	r1, [r3, #0]
 8010166:	685b      	ldreq	r3, [r3, #4]
 8010168:	6063      	str	r3, [r4, #4]
 801016a:	bf04      	itt	eq
 801016c:	1949      	addeq	r1, r1, r5
 801016e:	6021      	streq	r1, [r4, #0]
 8010170:	6054      	str	r4, [r2, #4]
 8010172:	e7ca      	b.n	801010a <_free_r+0x26>
 8010174:	b003      	add	sp, #12
 8010176:	bd30      	pop	{r4, r5, pc}
 8010178:	200021dc 	.word	0x200021dc

0801017c <malloc>:
 801017c:	4b02      	ldr	r3, [pc, #8]	; (8010188 <malloc+0xc>)
 801017e:	4601      	mov	r1, r0
 8010180:	6818      	ldr	r0, [r3, #0]
 8010182:	f000 b823 	b.w	80101cc <_malloc_r>
 8010186:	bf00      	nop
 8010188:	200005bc 	.word	0x200005bc

0801018c <sbrk_aligned>:
 801018c:	b570      	push	{r4, r5, r6, lr}
 801018e:	4e0e      	ldr	r6, [pc, #56]	; (80101c8 <sbrk_aligned+0x3c>)
 8010190:	460c      	mov	r4, r1
 8010192:	6831      	ldr	r1, [r6, #0]
 8010194:	4605      	mov	r5, r0
 8010196:	b911      	cbnz	r1, 801019e <sbrk_aligned+0x12>
 8010198:	f000 fe40 	bl	8010e1c <_sbrk_r>
 801019c:	6030      	str	r0, [r6, #0]
 801019e:	4621      	mov	r1, r4
 80101a0:	4628      	mov	r0, r5
 80101a2:	f000 fe3b 	bl	8010e1c <_sbrk_r>
 80101a6:	1c43      	adds	r3, r0, #1
 80101a8:	d00a      	beq.n	80101c0 <sbrk_aligned+0x34>
 80101aa:	1cc4      	adds	r4, r0, #3
 80101ac:	f024 0403 	bic.w	r4, r4, #3
 80101b0:	42a0      	cmp	r0, r4
 80101b2:	d007      	beq.n	80101c4 <sbrk_aligned+0x38>
 80101b4:	1a21      	subs	r1, r4, r0
 80101b6:	4628      	mov	r0, r5
 80101b8:	f000 fe30 	bl	8010e1c <_sbrk_r>
 80101bc:	3001      	adds	r0, #1
 80101be:	d101      	bne.n	80101c4 <sbrk_aligned+0x38>
 80101c0:	f04f 34ff 	mov.w	r4, #4294967295
 80101c4:	4620      	mov	r0, r4
 80101c6:	bd70      	pop	{r4, r5, r6, pc}
 80101c8:	200021e0 	.word	0x200021e0

080101cc <_malloc_r>:
 80101cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80101d0:	1ccd      	adds	r5, r1, #3
 80101d2:	f025 0503 	bic.w	r5, r5, #3
 80101d6:	3508      	adds	r5, #8
 80101d8:	2d0c      	cmp	r5, #12
 80101da:	bf38      	it	cc
 80101dc:	250c      	movcc	r5, #12
 80101de:	2d00      	cmp	r5, #0
 80101e0:	4607      	mov	r7, r0
 80101e2:	db01      	blt.n	80101e8 <_malloc_r+0x1c>
 80101e4:	42a9      	cmp	r1, r5
 80101e6:	d905      	bls.n	80101f4 <_malloc_r+0x28>
 80101e8:	230c      	movs	r3, #12
 80101ea:	603b      	str	r3, [r7, #0]
 80101ec:	2600      	movs	r6, #0
 80101ee:	4630      	mov	r0, r6
 80101f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80102c8 <_malloc_r+0xfc>
 80101f8:	f000 f868 	bl	80102cc <__malloc_lock>
 80101fc:	f8d8 3000 	ldr.w	r3, [r8]
 8010200:	461c      	mov	r4, r3
 8010202:	bb5c      	cbnz	r4, 801025c <_malloc_r+0x90>
 8010204:	4629      	mov	r1, r5
 8010206:	4638      	mov	r0, r7
 8010208:	f7ff ffc0 	bl	801018c <sbrk_aligned>
 801020c:	1c43      	adds	r3, r0, #1
 801020e:	4604      	mov	r4, r0
 8010210:	d155      	bne.n	80102be <_malloc_r+0xf2>
 8010212:	f8d8 4000 	ldr.w	r4, [r8]
 8010216:	4626      	mov	r6, r4
 8010218:	2e00      	cmp	r6, #0
 801021a:	d145      	bne.n	80102a8 <_malloc_r+0xdc>
 801021c:	2c00      	cmp	r4, #0
 801021e:	d048      	beq.n	80102b2 <_malloc_r+0xe6>
 8010220:	6823      	ldr	r3, [r4, #0]
 8010222:	4631      	mov	r1, r6
 8010224:	4638      	mov	r0, r7
 8010226:	eb04 0903 	add.w	r9, r4, r3
 801022a:	f000 fdf7 	bl	8010e1c <_sbrk_r>
 801022e:	4581      	cmp	r9, r0
 8010230:	d13f      	bne.n	80102b2 <_malloc_r+0xe6>
 8010232:	6821      	ldr	r1, [r4, #0]
 8010234:	1a6d      	subs	r5, r5, r1
 8010236:	4629      	mov	r1, r5
 8010238:	4638      	mov	r0, r7
 801023a:	f7ff ffa7 	bl	801018c <sbrk_aligned>
 801023e:	3001      	adds	r0, #1
 8010240:	d037      	beq.n	80102b2 <_malloc_r+0xe6>
 8010242:	6823      	ldr	r3, [r4, #0]
 8010244:	442b      	add	r3, r5
 8010246:	6023      	str	r3, [r4, #0]
 8010248:	f8d8 3000 	ldr.w	r3, [r8]
 801024c:	2b00      	cmp	r3, #0
 801024e:	d038      	beq.n	80102c2 <_malloc_r+0xf6>
 8010250:	685a      	ldr	r2, [r3, #4]
 8010252:	42a2      	cmp	r2, r4
 8010254:	d12b      	bne.n	80102ae <_malloc_r+0xe2>
 8010256:	2200      	movs	r2, #0
 8010258:	605a      	str	r2, [r3, #4]
 801025a:	e00f      	b.n	801027c <_malloc_r+0xb0>
 801025c:	6822      	ldr	r2, [r4, #0]
 801025e:	1b52      	subs	r2, r2, r5
 8010260:	d41f      	bmi.n	80102a2 <_malloc_r+0xd6>
 8010262:	2a0b      	cmp	r2, #11
 8010264:	d917      	bls.n	8010296 <_malloc_r+0xca>
 8010266:	1961      	adds	r1, r4, r5
 8010268:	42a3      	cmp	r3, r4
 801026a:	6025      	str	r5, [r4, #0]
 801026c:	bf18      	it	ne
 801026e:	6059      	strne	r1, [r3, #4]
 8010270:	6863      	ldr	r3, [r4, #4]
 8010272:	bf08      	it	eq
 8010274:	f8c8 1000 	streq.w	r1, [r8]
 8010278:	5162      	str	r2, [r4, r5]
 801027a:	604b      	str	r3, [r1, #4]
 801027c:	4638      	mov	r0, r7
 801027e:	f104 060b 	add.w	r6, r4, #11
 8010282:	f000 f829 	bl	80102d8 <__malloc_unlock>
 8010286:	f026 0607 	bic.w	r6, r6, #7
 801028a:	1d23      	adds	r3, r4, #4
 801028c:	1af2      	subs	r2, r6, r3
 801028e:	d0ae      	beq.n	80101ee <_malloc_r+0x22>
 8010290:	1b9b      	subs	r3, r3, r6
 8010292:	50a3      	str	r3, [r4, r2]
 8010294:	e7ab      	b.n	80101ee <_malloc_r+0x22>
 8010296:	42a3      	cmp	r3, r4
 8010298:	6862      	ldr	r2, [r4, #4]
 801029a:	d1dd      	bne.n	8010258 <_malloc_r+0x8c>
 801029c:	f8c8 2000 	str.w	r2, [r8]
 80102a0:	e7ec      	b.n	801027c <_malloc_r+0xb0>
 80102a2:	4623      	mov	r3, r4
 80102a4:	6864      	ldr	r4, [r4, #4]
 80102a6:	e7ac      	b.n	8010202 <_malloc_r+0x36>
 80102a8:	4634      	mov	r4, r6
 80102aa:	6876      	ldr	r6, [r6, #4]
 80102ac:	e7b4      	b.n	8010218 <_malloc_r+0x4c>
 80102ae:	4613      	mov	r3, r2
 80102b0:	e7cc      	b.n	801024c <_malloc_r+0x80>
 80102b2:	230c      	movs	r3, #12
 80102b4:	603b      	str	r3, [r7, #0]
 80102b6:	4638      	mov	r0, r7
 80102b8:	f000 f80e 	bl	80102d8 <__malloc_unlock>
 80102bc:	e797      	b.n	80101ee <_malloc_r+0x22>
 80102be:	6025      	str	r5, [r4, #0]
 80102c0:	e7dc      	b.n	801027c <_malloc_r+0xb0>
 80102c2:	605b      	str	r3, [r3, #4]
 80102c4:	deff      	udf	#255	; 0xff
 80102c6:	bf00      	nop
 80102c8:	200021dc 	.word	0x200021dc

080102cc <__malloc_lock>:
 80102cc:	4801      	ldr	r0, [pc, #4]	; (80102d4 <__malloc_lock+0x8>)
 80102ce:	f7ff b87c 	b.w	800f3ca <__retarget_lock_acquire_recursive>
 80102d2:	bf00      	nop
 80102d4:	200021d8 	.word	0x200021d8

080102d8 <__malloc_unlock>:
 80102d8:	4801      	ldr	r0, [pc, #4]	; (80102e0 <__malloc_unlock+0x8>)
 80102da:	f7ff b877 	b.w	800f3cc <__retarget_lock_release_recursive>
 80102de:	bf00      	nop
 80102e0:	200021d8 	.word	0x200021d8

080102e4 <_Balloc>:
 80102e4:	b570      	push	{r4, r5, r6, lr}
 80102e6:	69c6      	ldr	r6, [r0, #28]
 80102e8:	4604      	mov	r4, r0
 80102ea:	460d      	mov	r5, r1
 80102ec:	b976      	cbnz	r6, 801030c <_Balloc+0x28>
 80102ee:	2010      	movs	r0, #16
 80102f0:	f7ff ff44 	bl	801017c <malloc>
 80102f4:	4602      	mov	r2, r0
 80102f6:	61e0      	str	r0, [r4, #28]
 80102f8:	b920      	cbnz	r0, 8010304 <_Balloc+0x20>
 80102fa:	4b18      	ldr	r3, [pc, #96]	; (801035c <_Balloc+0x78>)
 80102fc:	4818      	ldr	r0, [pc, #96]	; (8010360 <_Balloc+0x7c>)
 80102fe:	216b      	movs	r1, #107	; 0x6b
 8010300:	f000 fd9c 	bl	8010e3c <__assert_func>
 8010304:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010308:	6006      	str	r6, [r0, #0]
 801030a:	60c6      	str	r6, [r0, #12]
 801030c:	69e6      	ldr	r6, [r4, #28]
 801030e:	68f3      	ldr	r3, [r6, #12]
 8010310:	b183      	cbz	r3, 8010334 <_Balloc+0x50>
 8010312:	69e3      	ldr	r3, [r4, #28]
 8010314:	68db      	ldr	r3, [r3, #12]
 8010316:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801031a:	b9b8      	cbnz	r0, 801034c <_Balloc+0x68>
 801031c:	2101      	movs	r1, #1
 801031e:	fa01 f605 	lsl.w	r6, r1, r5
 8010322:	1d72      	adds	r2, r6, #5
 8010324:	0092      	lsls	r2, r2, #2
 8010326:	4620      	mov	r0, r4
 8010328:	f000 fda6 	bl	8010e78 <_calloc_r>
 801032c:	b160      	cbz	r0, 8010348 <_Balloc+0x64>
 801032e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010332:	e00e      	b.n	8010352 <_Balloc+0x6e>
 8010334:	2221      	movs	r2, #33	; 0x21
 8010336:	2104      	movs	r1, #4
 8010338:	4620      	mov	r0, r4
 801033a:	f000 fd9d 	bl	8010e78 <_calloc_r>
 801033e:	69e3      	ldr	r3, [r4, #28]
 8010340:	60f0      	str	r0, [r6, #12]
 8010342:	68db      	ldr	r3, [r3, #12]
 8010344:	2b00      	cmp	r3, #0
 8010346:	d1e4      	bne.n	8010312 <_Balloc+0x2e>
 8010348:	2000      	movs	r0, #0
 801034a:	bd70      	pop	{r4, r5, r6, pc}
 801034c:	6802      	ldr	r2, [r0, #0]
 801034e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010352:	2300      	movs	r3, #0
 8010354:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010358:	e7f7      	b.n	801034a <_Balloc+0x66>
 801035a:	bf00      	nop
 801035c:	0801261d 	.word	0x0801261d
 8010360:	0801269d 	.word	0x0801269d

08010364 <_Bfree>:
 8010364:	b570      	push	{r4, r5, r6, lr}
 8010366:	69c6      	ldr	r6, [r0, #28]
 8010368:	4605      	mov	r5, r0
 801036a:	460c      	mov	r4, r1
 801036c:	b976      	cbnz	r6, 801038c <_Bfree+0x28>
 801036e:	2010      	movs	r0, #16
 8010370:	f7ff ff04 	bl	801017c <malloc>
 8010374:	4602      	mov	r2, r0
 8010376:	61e8      	str	r0, [r5, #28]
 8010378:	b920      	cbnz	r0, 8010384 <_Bfree+0x20>
 801037a:	4b09      	ldr	r3, [pc, #36]	; (80103a0 <_Bfree+0x3c>)
 801037c:	4809      	ldr	r0, [pc, #36]	; (80103a4 <_Bfree+0x40>)
 801037e:	218f      	movs	r1, #143	; 0x8f
 8010380:	f000 fd5c 	bl	8010e3c <__assert_func>
 8010384:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010388:	6006      	str	r6, [r0, #0]
 801038a:	60c6      	str	r6, [r0, #12]
 801038c:	b13c      	cbz	r4, 801039e <_Bfree+0x3a>
 801038e:	69eb      	ldr	r3, [r5, #28]
 8010390:	6862      	ldr	r2, [r4, #4]
 8010392:	68db      	ldr	r3, [r3, #12]
 8010394:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010398:	6021      	str	r1, [r4, #0]
 801039a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801039e:	bd70      	pop	{r4, r5, r6, pc}
 80103a0:	0801261d 	.word	0x0801261d
 80103a4:	0801269d 	.word	0x0801269d

080103a8 <__multadd>:
 80103a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103ac:	690d      	ldr	r5, [r1, #16]
 80103ae:	4607      	mov	r7, r0
 80103b0:	460c      	mov	r4, r1
 80103b2:	461e      	mov	r6, r3
 80103b4:	f101 0c14 	add.w	ip, r1, #20
 80103b8:	2000      	movs	r0, #0
 80103ba:	f8dc 3000 	ldr.w	r3, [ip]
 80103be:	b299      	uxth	r1, r3
 80103c0:	fb02 6101 	mla	r1, r2, r1, r6
 80103c4:	0c1e      	lsrs	r6, r3, #16
 80103c6:	0c0b      	lsrs	r3, r1, #16
 80103c8:	fb02 3306 	mla	r3, r2, r6, r3
 80103cc:	b289      	uxth	r1, r1
 80103ce:	3001      	adds	r0, #1
 80103d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80103d4:	4285      	cmp	r5, r0
 80103d6:	f84c 1b04 	str.w	r1, [ip], #4
 80103da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80103de:	dcec      	bgt.n	80103ba <__multadd+0x12>
 80103e0:	b30e      	cbz	r6, 8010426 <__multadd+0x7e>
 80103e2:	68a3      	ldr	r3, [r4, #8]
 80103e4:	42ab      	cmp	r3, r5
 80103e6:	dc19      	bgt.n	801041c <__multadd+0x74>
 80103e8:	6861      	ldr	r1, [r4, #4]
 80103ea:	4638      	mov	r0, r7
 80103ec:	3101      	adds	r1, #1
 80103ee:	f7ff ff79 	bl	80102e4 <_Balloc>
 80103f2:	4680      	mov	r8, r0
 80103f4:	b928      	cbnz	r0, 8010402 <__multadd+0x5a>
 80103f6:	4602      	mov	r2, r0
 80103f8:	4b0c      	ldr	r3, [pc, #48]	; (801042c <__multadd+0x84>)
 80103fa:	480d      	ldr	r0, [pc, #52]	; (8010430 <__multadd+0x88>)
 80103fc:	21ba      	movs	r1, #186	; 0xba
 80103fe:	f000 fd1d 	bl	8010e3c <__assert_func>
 8010402:	6922      	ldr	r2, [r4, #16]
 8010404:	3202      	adds	r2, #2
 8010406:	f104 010c 	add.w	r1, r4, #12
 801040a:	0092      	lsls	r2, r2, #2
 801040c:	300c      	adds	r0, #12
 801040e:	f7fe ffde 	bl	800f3ce <memcpy>
 8010412:	4621      	mov	r1, r4
 8010414:	4638      	mov	r0, r7
 8010416:	f7ff ffa5 	bl	8010364 <_Bfree>
 801041a:	4644      	mov	r4, r8
 801041c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010420:	3501      	adds	r5, #1
 8010422:	615e      	str	r6, [r3, #20]
 8010424:	6125      	str	r5, [r4, #16]
 8010426:	4620      	mov	r0, r4
 8010428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801042c:	0801268c 	.word	0x0801268c
 8010430:	0801269d 	.word	0x0801269d

08010434 <__hi0bits>:
 8010434:	0c03      	lsrs	r3, r0, #16
 8010436:	041b      	lsls	r3, r3, #16
 8010438:	b9d3      	cbnz	r3, 8010470 <__hi0bits+0x3c>
 801043a:	0400      	lsls	r0, r0, #16
 801043c:	2310      	movs	r3, #16
 801043e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010442:	bf04      	itt	eq
 8010444:	0200      	lsleq	r0, r0, #8
 8010446:	3308      	addeq	r3, #8
 8010448:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801044c:	bf04      	itt	eq
 801044e:	0100      	lsleq	r0, r0, #4
 8010450:	3304      	addeq	r3, #4
 8010452:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010456:	bf04      	itt	eq
 8010458:	0080      	lsleq	r0, r0, #2
 801045a:	3302      	addeq	r3, #2
 801045c:	2800      	cmp	r0, #0
 801045e:	db05      	blt.n	801046c <__hi0bits+0x38>
 8010460:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010464:	f103 0301 	add.w	r3, r3, #1
 8010468:	bf08      	it	eq
 801046a:	2320      	moveq	r3, #32
 801046c:	4618      	mov	r0, r3
 801046e:	4770      	bx	lr
 8010470:	2300      	movs	r3, #0
 8010472:	e7e4      	b.n	801043e <__hi0bits+0xa>

08010474 <__lo0bits>:
 8010474:	6803      	ldr	r3, [r0, #0]
 8010476:	f013 0207 	ands.w	r2, r3, #7
 801047a:	d00c      	beq.n	8010496 <__lo0bits+0x22>
 801047c:	07d9      	lsls	r1, r3, #31
 801047e:	d422      	bmi.n	80104c6 <__lo0bits+0x52>
 8010480:	079a      	lsls	r2, r3, #30
 8010482:	bf49      	itett	mi
 8010484:	085b      	lsrmi	r3, r3, #1
 8010486:	089b      	lsrpl	r3, r3, #2
 8010488:	6003      	strmi	r3, [r0, #0]
 801048a:	2201      	movmi	r2, #1
 801048c:	bf5c      	itt	pl
 801048e:	6003      	strpl	r3, [r0, #0]
 8010490:	2202      	movpl	r2, #2
 8010492:	4610      	mov	r0, r2
 8010494:	4770      	bx	lr
 8010496:	b299      	uxth	r1, r3
 8010498:	b909      	cbnz	r1, 801049e <__lo0bits+0x2a>
 801049a:	0c1b      	lsrs	r3, r3, #16
 801049c:	2210      	movs	r2, #16
 801049e:	b2d9      	uxtb	r1, r3
 80104a0:	b909      	cbnz	r1, 80104a6 <__lo0bits+0x32>
 80104a2:	3208      	adds	r2, #8
 80104a4:	0a1b      	lsrs	r3, r3, #8
 80104a6:	0719      	lsls	r1, r3, #28
 80104a8:	bf04      	itt	eq
 80104aa:	091b      	lsreq	r3, r3, #4
 80104ac:	3204      	addeq	r2, #4
 80104ae:	0799      	lsls	r1, r3, #30
 80104b0:	bf04      	itt	eq
 80104b2:	089b      	lsreq	r3, r3, #2
 80104b4:	3202      	addeq	r2, #2
 80104b6:	07d9      	lsls	r1, r3, #31
 80104b8:	d403      	bmi.n	80104c2 <__lo0bits+0x4e>
 80104ba:	085b      	lsrs	r3, r3, #1
 80104bc:	f102 0201 	add.w	r2, r2, #1
 80104c0:	d003      	beq.n	80104ca <__lo0bits+0x56>
 80104c2:	6003      	str	r3, [r0, #0]
 80104c4:	e7e5      	b.n	8010492 <__lo0bits+0x1e>
 80104c6:	2200      	movs	r2, #0
 80104c8:	e7e3      	b.n	8010492 <__lo0bits+0x1e>
 80104ca:	2220      	movs	r2, #32
 80104cc:	e7e1      	b.n	8010492 <__lo0bits+0x1e>
	...

080104d0 <__i2b>:
 80104d0:	b510      	push	{r4, lr}
 80104d2:	460c      	mov	r4, r1
 80104d4:	2101      	movs	r1, #1
 80104d6:	f7ff ff05 	bl	80102e4 <_Balloc>
 80104da:	4602      	mov	r2, r0
 80104dc:	b928      	cbnz	r0, 80104ea <__i2b+0x1a>
 80104de:	4b05      	ldr	r3, [pc, #20]	; (80104f4 <__i2b+0x24>)
 80104e0:	4805      	ldr	r0, [pc, #20]	; (80104f8 <__i2b+0x28>)
 80104e2:	f240 1145 	movw	r1, #325	; 0x145
 80104e6:	f000 fca9 	bl	8010e3c <__assert_func>
 80104ea:	2301      	movs	r3, #1
 80104ec:	6144      	str	r4, [r0, #20]
 80104ee:	6103      	str	r3, [r0, #16]
 80104f0:	bd10      	pop	{r4, pc}
 80104f2:	bf00      	nop
 80104f4:	0801268c 	.word	0x0801268c
 80104f8:	0801269d 	.word	0x0801269d

080104fc <__multiply>:
 80104fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010500:	4691      	mov	r9, r2
 8010502:	690a      	ldr	r2, [r1, #16]
 8010504:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010508:	429a      	cmp	r2, r3
 801050a:	bfb8      	it	lt
 801050c:	460b      	movlt	r3, r1
 801050e:	460c      	mov	r4, r1
 8010510:	bfbc      	itt	lt
 8010512:	464c      	movlt	r4, r9
 8010514:	4699      	movlt	r9, r3
 8010516:	6927      	ldr	r7, [r4, #16]
 8010518:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801051c:	68a3      	ldr	r3, [r4, #8]
 801051e:	6861      	ldr	r1, [r4, #4]
 8010520:	eb07 060a 	add.w	r6, r7, sl
 8010524:	42b3      	cmp	r3, r6
 8010526:	b085      	sub	sp, #20
 8010528:	bfb8      	it	lt
 801052a:	3101      	addlt	r1, #1
 801052c:	f7ff feda 	bl	80102e4 <_Balloc>
 8010530:	b930      	cbnz	r0, 8010540 <__multiply+0x44>
 8010532:	4602      	mov	r2, r0
 8010534:	4b44      	ldr	r3, [pc, #272]	; (8010648 <__multiply+0x14c>)
 8010536:	4845      	ldr	r0, [pc, #276]	; (801064c <__multiply+0x150>)
 8010538:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801053c:	f000 fc7e 	bl	8010e3c <__assert_func>
 8010540:	f100 0514 	add.w	r5, r0, #20
 8010544:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010548:	462b      	mov	r3, r5
 801054a:	2200      	movs	r2, #0
 801054c:	4543      	cmp	r3, r8
 801054e:	d321      	bcc.n	8010594 <__multiply+0x98>
 8010550:	f104 0314 	add.w	r3, r4, #20
 8010554:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010558:	f109 0314 	add.w	r3, r9, #20
 801055c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010560:	9202      	str	r2, [sp, #8]
 8010562:	1b3a      	subs	r2, r7, r4
 8010564:	3a15      	subs	r2, #21
 8010566:	f022 0203 	bic.w	r2, r2, #3
 801056a:	3204      	adds	r2, #4
 801056c:	f104 0115 	add.w	r1, r4, #21
 8010570:	428f      	cmp	r7, r1
 8010572:	bf38      	it	cc
 8010574:	2204      	movcc	r2, #4
 8010576:	9201      	str	r2, [sp, #4]
 8010578:	9a02      	ldr	r2, [sp, #8]
 801057a:	9303      	str	r3, [sp, #12]
 801057c:	429a      	cmp	r2, r3
 801057e:	d80c      	bhi.n	801059a <__multiply+0x9e>
 8010580:	2e00      	cmp	r6, #0
 8010582:	dd03      	ble.n	801058c <__multiply+0x90>
 8010584:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010588:	2b00      	cmp	r3, #0
 801058a:	d05b      	beq.n	8010644 <__multiply+0x148>
 801058c:	6106      	str	r6, [r0, #16]
 801058e:	b005      	add	sp, #20
 8010590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010594:	f843 2b04 	str.w	r2, [r3], #4
 8010598:	e7d8      	b.n	801054c <__multiply+0x50>
 801059a:	f8b3 a000 	ldrh.w	sl, [r3]
 801059e:	f1ba 0f00 	cmp.w	sl, #0
 80105a2:	d024      	beq.n	80105ee <__multiply+0xf2>
 80105a4:	f104 0e14 	add.w	lr, r4, #20
 80105a8:	46a9      	mov	r9, r5
 80105aa:	f04f 0c00 	mov.w	ip, #0
 80105ae:	f85e 2b04 	ldr.w	r2, [lr], #4
 80105b2:	f8d9 1000 	ldr.w	r1, [r9]
 80105b6:	fa1f fb82 	uxth.w	fp, r2
 80105ba:	b289      	uxth	r1, r1
 80105bc:	fb0a 110b 	mla	r1, sl, fp, r1
 80105c0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80105c4:	f8d9 2000 	ldr.w	r2, [r9]
 80105c8:	4461      	add	r1, ip
 80105ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80105ce:	fb0a c20b 	mla	r2, sl, fp, ip
 80105d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80105d6:	b289      	uxth	r1, r1
 80105d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80105dc:	4577      	cmp	r7, lr
 80105de:	f849 1b04 	str.w	r1, [r9], #4
 80105e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80105e6:	d8e2      	bhi.n	80105ae <__multiply+0xb2>
 80105e8:	9a01      	ldr	r2, [sp, #4]
 80105ea:	f845 c002 	str.w	ip, [r5, r2]
 80105ee:	9a03      	ldr	r2, [sp, #12]
 80105f0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80105f4:	3304      	adds	r3, #4
 80105f6:	f1b9 0f00 	cmp.w	r9, #0
 80105fa:	d021      	beq.n	8010640 <__multiply+0x144>
 80105fc:	6829      	ldr	r1, [r5, #0]
 80105fe:	f104 0c14 	add.w	ip, r4, #20
 8010602:	46ae      	mov	lr, r5
 8010604:	f04f 0a00 	mov.w	sl, #0
 8010608:	f8bc b000 	ldrh.w	fp, [ip]
 801060c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010610:	fb09 220b 	mla	r2, r9, fp, r2
 8010614:	4452      	add	r2, sl
 8010616:	b289      	uxth	r1, r1
 8010618:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801061c:	f84e 1b04 	str.w	r1, [lr], #4
 8010620:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010624:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010628:	f8be 1000 	ldrh.w	r1, [lr]
 801062c:	fb09 110a 	mla	r1, r9, sl, r1
 8010630:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8010634:	4567      	cmp	r7, ip
 8010636:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801063a:	d8e5      	bhi.n	8010608 <__multiply+0x10c>
 801063c:	9a01      	ldr	r2, [sp, #4]
 801063e:	50a9      	str	r1, [r5, r2]
 8010640:	3504      	adds	r5, #4
 8010642:	e799      	b.n	8010578 <__multiply+0x7c>
 8010644:	3e01      	subs	r6, #1
 8010646:	e79b      	b.n	8010580 <__multiply+0x84>
 8010648:	0801268c 	.word	0x0801268c
 801064c:	0801269d 	.word	0x0801269d

08010650 <__pow5mult>:
 8010650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010654:	4615      	mov	r5, r2
 8010656:	f012 0203 	ands.w	r2, r2, #3
 801065a:	4606      	mov	r6, r0
 801065c:	460f      	mov	r7, r1
 801065e:	d007      	beq.n	8010670 <__pow5mult+0x20>
 8010660:	4c25      	ldr	r4, [pc, #148]	; (80106f8 <__pow5mult+0xa8>)
 8010662:	3a01      	subs	r2, #1
 8010664:	2300      	movs	r3, #0
 8010666:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801066a:	f7ff fe9d 	bl	80103a8 <__multadd>
 801066e:	4607      	mov	r7, r0
 8010670:	10ad      	asrs	r5, r5, #2
 8010672:	d03d      	beq.n	80106f0 <__pow5mult+0xa0>
 8010674:	69f4      	ldr	r4, [r6, #28]
 8010676:	b97c      	cbnz	r4, 8010698 <__pow5mult+0x48>
 8010678:	2010      	movs	r0, #16
 801067a:	f7ff fd7f 	bl	801017c <malloc>
 801067e:	4602      	mov	r2, r0
 8010680:	61f0      	str	r0, [r6, #28]
 8010682:	b928      	cbnz	r0, 8010690 <__pow5mult+0x40>
 8010684:	4b1d      	ldr	r3, [pc, #116]	; (80106fc <__pow5mult+0xac>)
 8010686:	481e      	ldr	r0, [pc, #120]	; (8010700 <__pow5mult+0xb0>)
 8010688:	f240 11b3 	movw	r1, #435	; 0x1b3
 801068c:	f000 fbd6 	bl	8010e3c <__assert_func>
 8010690:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010694:	6004      	str	r4, [r0, #0]
 8010696:	60c4      	str	r4, [r0, #12]
 8010698:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801069c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80106a0:	b94c      	cbnz	r4, 80106b6 <__pow5mult+0x66>
 80106a2:	f240 2171 	movw	r1, #625	; 0x271
 80106a6:	4630      	mov	r0, r6
 80106a8:	f7ff ff12 	bl	80104d0 <__i2b>
 80106ac:	2300      	movs	r3, #0
 80106ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80106b2:	4604      	mov	r4, r0
 80106b4:	6003      	str	r3, [r0, #0]
 80106b6:	f04f 0900 	mov.w	r9, #0
 80106ba:	07eb      	lsls	r3, r5, #31
 80106bc:	d50a      	bpl.n	80106d4 <__pow5mult+0x84>
 80106be:	4639      	mov	r1, r7
 80106c0:	4622      	mov	r2, r4
 80106c2:	4630      	mov	r0, r6
 80106c4:	f7ff ff1a 	bl	80104fc <__multiply>
 80106c8:	4639      	mov	r1, r7
 80106ca:	4680      	mov	r8, r0
 80106cc:	4630      	mov	r0, r6
 80106ce:	f7ff fe49 	bl	8010364 <_Bfree>
 80106d2:	4647      	mov	r7, r8
 80106d4:	106d      	asrs	r5, r5, #1
 80106d6:	d00b      	beq.n	80106f0 <__pow5mult+0xa0>
 80106d8:	6820      	ldr	r0, [r4, #0]
 80106da:	b938      	cbnz	r0, 80106ec <__pow5mult+0x9c>
 80106dc:	4622      	mov	r2, r4
 80106de:	4621      	mov	r1, r4
 80106e0:	4630      	mov	r0, r6
 80106e2:	f7ff ff0b 	bl	80104fc <__multiply>
 80106e6:	6020      	str	r0, [r4, #0]
 80106e8:	f8c0 9000 	str.w	r9, [r0]
 80106ec:	4604      	mov	r4, r0
 80106ee:	e7e4      	b.n	80106ba <__pow5mult+0x6a>
 80106f0:	4638      	mov	r0, r7
 80106f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80106f6:	bf00      	nop
 80106f8:	080127e8 	.word	0x080127e8
 80106fc:	0801261d 	.word	0x0801261d
 8010700:	0801269d 	.word	0x0801269d

08010704 <__lshift>:
 8010704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010708:	460c      	mov	r4, r1
 801070a:	6849      	ldr	r1, [r1, #4]
 801070c:	6923      	ldr	r3, [r4, #16]
 801070e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010712:	68a3      	ldr	r3, [r4, #8]
 8010714:	4607      	mov	r7, r0
 8010716:	4691      	mov	r9, r2
 8010718:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801071c:	f108 0601 	add.w	r6, r8, #1
 8010720:	42b3      	cmp	r3, r6
 8010722:	db0b      	blt.n	801073c <__lshift+0x38>
 8010724:	4638      	mov	r0, r7
 8010726:	f7ff fddd 	bl	80102e4 <_Balloc>
 801072a:	4605      	mov	r5, r0
 801072c:	b948      	cbnz	r0, 8010742 <__lshift+0x3e>
 801072e:	4602      	mov	r2, r0
 8010730:	4b28      	ldr	r3, [pc, #160]	; (80107d4 <__lshift+0xd0>)
 8010732:	4829      	ldr	r0, [pc, #164]	; (80107d8 <__lshift+0xd4>)
 8010734:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8010738:	f000 fb80 	bl	8010e3c <__assert_func>
 801073c:	3101      	adds	r1, #1
 801073e:	005b      	lsls	r3, r3, #1
 8010740:	e7ee      	b.n	8010720 <__lshift+0x1c>
 8010742:	2300      	movs	r3, #0
 8010744:	f100 0114 	add.w	r1, r0, #20
 8010748:	f100 0210 	add.w	r2, r0, #16
 801074c:	4618      	mov	r0, r3
 801074e:	4553      	cmp	r3, sl
 8010750:	db33      	blt.n	80107ba <__lshift+0xb6>
 8010752:	6920      	ldr	r0, [r4, #16]
 8010754:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010758:	f104 0314 	add.w	r3, r4, #20
 801075c:	f019 091f 	ands.w	r9, r9, #31
 8010760:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010764:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010768:	d02b      	beq.n	80107c2 <__lshift+0xbe>
 801076a:	f1c9 0e20 	rsb	lr, r9, #32
 801076e:	468a      	mov	sl, r1
 8010770:	2200      	movs	r2, #0
 8010772:	6818      	ldr	r0, [r3, #0]
 8010774:	fa00 f009 	lsl.w	r0, r0, r9
 8010778:	4310      	orrs	r0, r2
 801077a:	f84a 0b04 	str.w	r0, [sl], #4
 801077e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010782:	459c      	cmp	ip, r3
 8010784:	fa22 f20e 	lsr.w	r2, r2, lr
 8010788:	d8f3      	bhi.n	8010772 <__lshift+0x6e>
 801078a:	ebac 0304 	sub.w	r3, ip, r4
 801078e:	3b15      	subs	r3, #21
 8010790:	f023 0303 	bic.w	r3, r3, #3
 8010794:	3304      	adds	r3, #4
 8010796:	f104 0015 	add.w	r0, r4, #21
 801079a:	4584      	cmp	ip, r0
 801079c:	bf38      	it	cc
 801079e:	2304      	movcc	r3, #4
 80107a0:	50ca      	str	r2, [r1, r3]
 80107a2:	b10a      	cbz	r2, 80107a8 <__lshift+0xa4>
 80107a4:	f108 0602 	add.w	r6, r8, #2
 80107a8:	3e01      	subs	r6, #1
 80107aa:	4638      	mov	r0, r7
 80107ac:	612e      	str	r6, [r5, #16]
 80107ae:	4621      	mov	r1, r4
 80107b0:	f7ff fdd8 	bl	8010364 <_Bfree>
 80107b4:	4628      	mov	r0, r5
 80107b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80107be:	3301      	adds	r3, #1
 80107c0:	e7c5      	b.n	801074e <__lshift+0x4a>
 80107c2:	3904      	subs	r1, #4
 80107c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80107c8:	f841 2f04 	str.w	r2, [r1, #4]!
 80107cc:	459c      	cmp	ip, r3
 80107ce:	d8f9      	bhi.n	80107c4 <__lshift+0xc0>
 80107d0:	e7ea      	b.n	80107a8 <__lshift+0xa4>
 80107d2:	bf00      	nop
 80107d4:	0801268c 	.word	0x0801268c
 80107d8:	0801269d 	.word	0x0801269d

080107dc <__mcmp>:
 80107dc:	b530      	push	{r4, r5, lr}
 80107de:	6902      	ldr	r2, [r0, #16]
 80107e0:	690c      	ldr	r4, [r1, #16]
 80107e2:	1b12      	subs	r2, r2, r4
 80107e4:	d10e      	bne.n	8010804 <__mcmp+0x28>
 80107e6:	f100 0314 	add.w	r3, r0, #20
 80107ea:	3114      	adds	r1, #20
 80107ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80107f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80107f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80107f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80107fc:	42a5      	cmp	r5, r4
 80107fe:	d003      	beq.n	8010808 <__mcmp+0x2c>
 8010800:	d305      	bcc.n	801080e <__mcmp+0x32>
 8010802:	2201      	movs	r2, #1
 8010804:	4610      	mov	r0, r2
 8010806:	bd30      	pop	{r4, r5, pc}
 8010808:	4283      	cmp	r3, r0
 801080a:	d3f3      	bcc.n	80107f4 <__mcmp+0x18>
 801080c:	e7fa      	b.n	8010804 <__mcmp+0x28>
 801080e:	f04f 32ff 	mov.w	r2, #4294967295
 8010812:	e7f7      	b.n	8010804 <__mcmp+0x28>

08010814 <__mdiff>:
 8010814:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010818:	460c      	mov	r4, r1
 801081a:	4606      	mov	r6, r0
 801081c:	4611      	mov	r1, r2
 801081e:	4620      	mov	r0, r4
 8010820:	4690      	mov	r8, r2
 8010822:	f7ff ffdb 	bl	80107dc <__mcmp>
 8010826:	1e05      	subs	r5, r0, #0
 8010828:	d110      	bne.n	801084c <__mdiff+0x38>
 801082a:	4629      	mov	r1, r5
 801082c:	4630      	mov	r0, r6
 801082e:	f7ff fd59 	bl	80102e4 <_Balloc>
 8010832:	b930      	cbnz	r0, 8010842 <__mdiff+0x2e>
 8010834:	4b3a      	ldr	r3, [pc, #232]	; (8010920 <__mdiff+0x10c>)
 8010836:	4602      	mov	r2, r0
 8010838:	f240 2137 	movw	r1, #567	; 0x237
 801083c:	4839      	ldr	r0, [pc, #228]	; (8010924 <__mdiff+0x110>)
 801083e:	f000 fafd 	bl	8010e3c <__assert_func>
 8010842:	2301      	movs	r3, #1
 8010844:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010848:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801084c:	bfa4      	itt	ge
 801084e:	4643      	movge	r3, r8
 8010850:	46a0      	movge	r8, r4
 8010852:	4630      	mov	r0, r6
 8010854:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010858:	bfa6      	itte	ge
 801085a:	461c      	movge	r4, r3
 801085c:	2500      	movge	r5, #0
 801085e:	2501      	movlt	r5, #1
 8010860:	f7ff fd40 	bl	80102e4 <_Balloc>
 8010864:	b920      	cbnz	r0, 8010870 <__mdiff+0x5c>
 8010866:	4b2e      	ldr	r3, [pc, #184]	; (8010920 <__mdiff+0x10c>)
 8010868:	4602      	mov	r2, r0
 801086a:	f240 2145 	movw	r1, #581	; 0x245
 801086e:	e7e5      	b.n	801083c <__mdiff+0x28>
 8010870:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010874:	6926      	ldr	r6, [r4, #16]
 8010876:	60c5      	str	r5, [r0, #12]
 8010878:	f104 0914 	add.w	r9, r4, #20
 801087c:	f108 0514 	add.w	r5, r8, #20
 8010880:	f100 0e14 	add.w	lr, r0, #20
 8010884:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010888:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801088c:	f108 0210 	add.w	r2, r8, #16
 8010890:	46f2      	mov	sl, lr
 8010892:	2100      	movs	r1, #0
 8010894:	f859 3b04 	ldr.w	r3, [r9], #4
 8010898:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801089c:	fa11 f88b 	uxtah	r8, r1, fp
 80108a0:	b299      	uxth	r1, r3
 80108a2:	0c1b      	lsrs	r3, r3, #16
 80108a4:	eba8 0801 	sub.w	r8, r8, r1
 80108a8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80108ac:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80108b0:	fa1f f888 	uxth.w	r8, r8
 80108b4:	1419      	asrs	r1, r3, #16
 80108b6:	454e      	cmp	r6, r9
 80108b8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80108bc:	f84a 3b04 	str.w	r3, [sl], #4
 80108c0:	d8e8      	bhi.n	8010894 <__mdiff+0x80>
 80108c2:	1b33      	subs	r3, r6, r4
 80108c4:	3b15      	subs	r3, #21
 80108c6:	f023 0303 	bic.w	r3, r3, #3
 80108ca:	3304      	adds	r3, #4
 80108cc:	3415      	adds	r4, #21
 80108ce:	42a6      	cmp	r6, r4
 80108d0:	bf38      	it	cc
 80108d2:	2304      	movcc	r3, #4
 80108d4:	441d      	add	r5, r3
 80108d6:	4473      	add	r3, lr
 80108d8:	469e      	mov	lr, r3
 80108da:	462e      	mov	r6, r5
 80108dc:	4566      	cmp	r6, ip
 80108de:	d30e      	bcc.n	80108fe <__mdiff+0xea>
 80108e0:	f10c 0203 	add.w	r2, ip, #3
 80108e4:	1b52      	subs	r2, r2, r5
 80108e6:	f022 0203 	bic.w	r2, r2, #3
 80108ea:	3d03      	subs	r5, #3
 80108ec:	45ac      	cmp	ip, r5
 80108ee:	bf38      	it	cc
 80108f0:	2200      	movcc	r2, #0
 80108f2:	4413      	add	r3, r2
 80108f4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80108f8:	b17a      	cbz	r2, 801091a <__mdiff+0x106>
 80108fa:	6107      	str	r7, [r0, #16]
 80108fc:	e7a4      	b.n	8010848 <__mdiff+0x34>
 80108fe:	f856 8b04 	ldr.w	r8, [r6], #4
 8010902:	fa11 f288 	uxtah	r2, r1, r8
 8010906:	1414      	asrs	r4, r2, #16
 8010908:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801090c:	b292      	uxth	r2, r2
 801090e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010912:	f84e 2b04 	str.w	r2, [lr], #4
 8010916:	1421      	asrs	r1, r4, #16
 8010918:	e7e0      	b.n	80108dc <__mdiff+0xc8>
 801091a:	3f01      	subs	r7, #1
 801091c:	e7ea      	b.n	80108f4 <__mdiff+0xe0>
 801091e:	bf00      	nop
 8010920:	0801268c 	.word	0x0801268c
 8010924:	0801269d 	.word	0x0801269d

08010928 <__d2b>:
 8010928:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801092c:	460f      	mov	r7, r1
 801092e:	2101      	movs	r1, #1
 8010930:	ec59 8b10 	vmov	r8, r9, d0
 8010934:	4616      	mov	r6, r2
 8010936:	f7ff fcd5 	bl	80102e4 <_Balloc>
 801093a:	4604      	mov	r4, r0
 801093c:	b930      	cbnz	r0, 801094c <__d2b+0x24>
 801093e:	4602      	mov	r2, r0
 8010940:	4b24      	ldr	r3, [pc, #144]	; (80109d4 <__d2b+0xac>)
 8010942:	4825      	ldr	r0, [pc, #148]	; (80109d8 <__d2b+0xb0>)
 8010944:	f240 310f 	movw	r1, #783	; 0x30f
 8010948:	f000 fa78 	bl	8010e3c <__assert_func>
 801094c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010950:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010954:	bb2d      	cbnz	r5, 80109a2 <__d2b+0x7a>
 8010956:	9301      	str	r3, [sp, #4]
 8010958:	f1b8 0300 	subs.w	r3, r8, #0
 801095c:	d026      	beq.n	80109ac <__d2b+0x84>
 801095e:	4668      	mov	r0, sp
 8010960:	9300      	str	r3, [sp, #0]
 8010962:	f7ff fd87 	bl	8010474 <__lo0bits>
 8010966:	e9dd 1200 	ldrd	r1, r2, [sp]
 801096a:	b1e8      	cbz	r0, 80109a8 <__d2b+0x80>
 801096c:	f1c0 0320 	rsb	r3, r0, #32
 8010970:	fa02 f303 	lsl.w	r3, r2, r3
 8010974:	430b      	orrs	r3, r1
 8010976:	40c2      	lsrs	r2, r0
 8010978:	6163      	str	r3, [r4, #20]
 801097a:	9201      	str	r2, [sp, #4]
 801097c:	9b01      	ldr	r3, [sp, #4]
 801097e:	61a3      	str	r3, [r4, #24]
 8010980:	2b00      	cmp	r3, #0
 8010982:	bf14      	ite	ne
 8010984:	2202      	movne	r2, #2
 8010986:	2201      	moveq	r2, #1
 8010988:	6122      	str	r2, [r4, #16]
 801098a:	b1bd      	cbz	r5, 80109bc <__d2b+0x94>
 801098c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010990:	4405      	add	r5, r0
 8010992:	603d      	str	r5, [r7, #0]
 8010994:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010998:	6030      	str	r0, [r6, #0]
 801099a:	4620      	mov	r0, r4
 801099c:	b003      	add	sp, #12
 801099e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80109a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80109a6:	e7d6      	b.n	8010956 <__d2b+0x2e>
 80109a8:	6161      	str	r1, [r4, #20]
 80109aa:	e7e7      	b.n	801097c <__d2b+0x54>
 80109ac:	a801      	add	r0, sp, #4
 80109ae:	f7ff fd61 	bl	8010474 <__lo0bits>
 80109b2:	9b01      	ldr	r3, [sp, #4]
 80109b4:	6163      	str	r3, [r4, #20]
 80109b6:	3020      	adds	r0, #32
 80109b8:	2201      	movs	r2, #1
 80109ba:	e7e5      	b.n	8010988 <__d2b+0x60>
 80109bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80109c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80109c4:	6038      	str	r0, [r7, #0]
 80109c6:	6918      	ldr	r0, [r3, #16]
 80109c8:	f7ff fd34 	bl	8010434 <__hi0bits>
 80109cc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80109d0:	e7e2      	b.n	8010998 <__d2b+0x70>
 80109d2:	bf00      	nop
 80109d4:	0801268c 	.word	0x0801268c
 80109d8:	0801269d 	.word	0x0801269d

080109dc <__ssputs_r>:
 80109dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109e0:	688e      	ldr	r6, [r1, #8]
 80109e2:	461f      	mov	r7, r3
 80109e4:	42be      	cmp	r6, r7
 80109e6:	680b      	ldr	r3, [r1, #0]
 80109e8:	4682      	mov	sl, r0
 80109ea:	460c      	mov	r4, r1
 80109ec:	4690      	mov	r8, r2
 80109ee:	d82c      	bhi.n	8010a4a <__ssputs_r+0x6e>
 80109f0:	898a      	ldrh	r2, [r1, #12]
 80109f2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80109f6:	d026      	beq.n	8010a46 <__ssputs_r+0x6a>
 80109f8:	6965      	ldr	r5, [r4, #20]
 80109fa:	6909      	ldr	r1, [r1, #16]
 80109fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010a00:	eba3 0901 	sub.w	r9, r3, r1
 8010a04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010a08:	1c7b      	adds	r3, r7, #1
 8010a0a:	444b      	add	r3, r9
 8010a0c:	106d      	asrs	r5, r5, #1
 8010a0e:	429d      	cmp	r5, r3
 8010a10:	bf38      	it	cc
 8010a12:	461d      	movcc	r5, r3
 8010a14:	0553      	lsls	r3, r2, #21
 8010a16:	d527      	bpl.n	8010a68 <__ssputs_r+0x8c>
 8010a18:	4629      	mov	r1, r5
 8010a1a:	f7ff fbd7 	bl	80101cc <_malloc_r>
 8010a1e:	4606      	mov	r6, r0
 8010a20:	b360      	cbz	r0, 8010a7c <__ssputs_r+0xa0>
 8010a22:	6921      	ldr	r1, [r4, #16]
 8010a24:	464a      	mov	r2, r9
 8010a26:	f7fe fcd2 	bl	800f3ce <memcpy>
 8010a2a:	89a3      	ldrh	r3, [r4, #12]
 8010a2c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010a34:	81a3      	strh	r3, [r4, #12]
 8010a36:	6126      	str	r6, [r4, #16]
 8010a38:	6165      	str	r5, [r4, #20]
 8010a3a:	444e      	add	r6, r9
 8010a3c:	eba5 0509 	sub.w	r5, r5, r9
 8010a40:	6026      	str	r6, [r4, #0]
 8010a42:	60a5      	str	r5, [r4, #8]
 8010a44:	463e      	mov	r6, r7
 8010a46:	42be      	cmp	r6, r7
 8010a48:	d900      	bls.n	8010a4c <__ssputs_r+0x70>
 8010a4a:	463e      	mov	r6, r7
 8010a4c:	6820      	ldr	r0, [r4, #0]
 8010a4e:	4632      	mov	r2, r6
 8010a50:	4641      	mov	r1, r8
 8010a52:	f000 f9c9 	bl	8010de8 <memmove>
 8010a56:	68a3      	ldr	r3, [r4, #8]
 8010a58:	1b9b      	subs	r3, r3, r6
 8010a5a:	60a3      	str	r3, [r4, #8]
 8010a5c:	6823      	ldr	r3, [r4, #0]
 8010a5e:	4433      	add	r3, r6
 8010a60:	6023      	str	r3, [r4, #0]
 8010a62:	2000      	movs	r0, #0
 8010a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a68:	462a      	mov	r2, r5
 8010a6a:	f000 fa2d 	bl	8010ec8 <_realloc_r>
 8010a6e:	4606      	mov	r6, r0
 8010a70:	2800      	cmp	r0, #0
 8010a72:	d1e0      	bne.n	8010a36 <__ssputs_r+0x5a>
 8010a74:	6921      	ldr	r1, [r4, #16]
 8010a76:	4650      	mov	r0, sl
 8010a78:	f7ff fb34 	bl	80100e4 <_free_r>
 8010a7c:	230c      	movs	r3, #12
 8010a7e:	f8ca 3000 	str.w	r3, [sl]
 8010a82:	89a3      	ldrh	r3, [r4, #12]
 8010a84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a88:	81a3      	strh	r3, [r4, #12]
 8010a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8010a8e:	e7e9      	b.n	8010a64 <__ssputs_r+0x88>

08010a90 <_svfiprintf_r>:
 8010a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a94:	4698      	mov	r8, r3
 8010a96:	898b      	ldrh	r3, [r1, #12]
 8010a98:	061b      	lsls	r3, r3, #24
 8010a9a:	b09d      	sub	sp, #116	; 0x74
 8010a9c:	4607      	mov	r7, r0
 8010a9e:	460d      	mov	r5, r1
 8010aa0:	4614      	mov	r4, r2
 8010aa2:	d50e      	bpl.n	8010ac2 <_svfiprintf_r+0x32>
 8010aa4:	690b      	ldr	r3, [r1, #16]
 8010aa6:	b963      	cbnz	r3, 8010ac2 <_svfiprintf_r+0x32>
 8010aa8:	2140      	movs	r1, #64	; 0x40
 8010aaa:	f7ff fb8f 	bl	80101cc <_malloc_r>
 8010aae:	6028      	str	r0, [r5, #0]
 8010ab0:	6128      	str	r0, [r5, #16]
 8010ab2:	b920      	cbnz	r0, 8010abe <_svfiprintf_r+0x2e>
 8010ab4:	230c      	movs	r3, #12
 8010ab6:	603b      	str	r3, [r7, #0]
 8010ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8010abc:	e0d0      	b.n	8010c60 <_svfiprintf_r+0x1d0>
 8010abe:	2340      	movs	r3, #64	; 0x40
 8010ac0:	616b      	str	r3, [r5, #20]
 8010ac2:	2300      	movs	r3, #0
 8010ac4:	9309      	str	r3, [sp, #36]	; 0x24
 8010ac6:	2320      	movs	r3, #32
 8010ac8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010acc:	f8cd 800c 	str.w	r8, [sp, #12]
 8010ad0:	2330      	movs	r3, #48	; 0x30
 8010ad2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010c78 <_svfiprintf_r+0x1e8>
 8010ad6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010ada:	f04f 0901 	mov.w	r9, #1
 8010ade:	4623      	mov	r3, r4
 8010ae0:	469a      	mov	sl, r3
 8010ae2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010ae6:	b10a      	cbz	r2, 8010aec <_svfiprintf_r+0x5c>
 8010ae8:	2a25      	cmp	r2, #37	; 0x25
 8010aea:	d1f9      	bne.n	8010ae0 <_svfiprintf_r+0x50>
 8010aec:	ebba 0b04 	subs.w	fp, sl, r4
 8010af0:	d00b      	beq.n	8010b0a <_svfiprintf_r+0x7a>
 8010af2:	465b      	mov	r3, fp
 8010af4:	4622      	mov	r2, r4
 8010af6:	4629      	mov	r1, r5
 8010af8:	4638      	mov	r0, r7
 8010afa:	f7ff ff6f 	bl	80109dc <__ssputs_r>
 8010afe:	3001      	adds	r0, #1
 8010b00:	f000 80a9 	beq.w	8010c56 <_svfiprintf_r+0x1c6>
 8010b04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010b06:	445a      	add	r2, fp
 8010b08:	9209      	str	r2, [sp, #36]	; 0x24
 8010b0a:	f89a 3000 	ldrb.w	r3, [sl]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	f000 80a1 	beq.w	8010c56 <_svfiprintf_r+0x1c6>
 8010b14:	2300      	movs	r3, #0
 8010b16:	f04f 32ff 	mov.w	r2, #4294967295
 8010b1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010b1e:	f10a 0a01 	add.w	sl, sl, #1
 8010b22:	9304      	str	r3, [sp, #16]
 8010b24:	9307      	str	r3, [sp, #28]
 8010b26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010b2a:	931a      	str	r3, [sp, #104]	; 0x68
 8010b2c:	4654      	mov	r4, sl
 8010b2e:	2205      	movs	r2, #5
 8010b30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b34:	4850      	ldr	r0, [pc, #320]	; (8010c78 <_svfiprintf_r+0x1e8>)
 8010b36:	f7ef fb73 	bl	8000220 <memchr>
 8010b3a:	9a04      	ldr	r2, [sp, #16]
 8010b3c:	b9d8      	cbnz	r0, 8010b76 <_svfiprintf_r+0xe6>
 8010b3e:	06d0      	lsls	r0, r2, #27
 8010b40:	bf44      	itt	mi
 8010b42:	2320      	movmi	r3, #32
 8010b44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010b48:	0711      	lsls	r1, r2, #28
 8010b4a:	bf44      	itt	mi
 8010b4c:	232b      	movmi	r3, #43	; 0x2b
 8010b4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010b52:	f89a 3000 	ldrb.w	r3, [sl]
 8010b56:	2b2a      	cmp	r3, #42	; 0x2a
 8010b58:	d015      	beq.n	8010b86 <_svfiprintf_r+0xf6>
 8010b5a:	9a07      	ldr	r2, [sp, #28]
 8010b5c:	4654      	mov	r4, sl
 8010b5e:	2000      	movs	r0, #0
 8010b60:	f04f 0c0a 	mov.w	ip, #10
 8010b64:	4621      	mov	r1, r4
 8010b66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010b6a:	3b30      	subs	r3, #48	; 0x30
 8010b6c:	2b09      	cmp	r3, #9
 8010b6e:	d94d      	bls.n	8010c0c <_svfiprintf_r+0x17c>
 8010b70:	b1b0      	cbz	r0, 8010ba0 <_svfiprintf_r+0x110>
 8010b72:	9207      	str	r2, [sp, #28]
 8010b74:	e014      	b.n	8010ba0 <_svfiprintf_r+0x110>
 8010b76:	eba0 0308 	sub.w	r3, r0, r8
 8010b7a:	fa09 f303 	lsl.w	r3, r9, r3
 8010b7e:	4313      	orrs	r3, r2
 8010b80:	9304      	str	r3, [sp, #16]
 8010b82:	46a2      	mov	sl, r4
 8010b84:	e7d2      	b.n	8010b2c <_svfiprintf_r+0x9c>
 8010b86:	9b03      	ldr	r3, [sp, #12]
 8010b88:	1d19      	adds	r1, r3, #4
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	9103      	str	r1, [sp, #12]
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	bfbb      	ittet	lt
 8010b92:	425b      	neglt	r3, r3
 8010b94:	f042 0202 	orrlt.w	r2, r2, #2
 8010b98:	9307      	strge	r3, [sp, #28]
 8010b9a:	9307      	strlt	r3, [sp, #28]
 8010b9c:	bfb8      	it	lt
 8010b9e:	9204      	strlt	r2, [sp, #16]
 8010ba0:	7823      	ldrb	r3, [r4, #0]
 8010ba2:	2b2e      	cmp	r3, #46	; 0x2e
 8010ba4:	d10c      	bne.n	8010bc0 <_svfiprintf_r+0x130>
 8010ba6:	7863      	ldrb	r3, [r4, #1]
 8010ba8:	2b2a      	cmp	r3, #42	; 0x2a
 8010baa:	d134      	bne.n	8010c16 <_svfiprintf_r+0x186>
 8010bac:	9b03      	ldr	r3, [sp, #12]
 8010bae:	1d1a      	adds	r2, r3, #4
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	9203      	str	r2, [sp, #12]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	bfb8      	it	lt
 8010bb8:	f04f 33ff 	movlt.w	r3, #4294967295
 8010bbc:	3402      	adds	r4, #2
 8010bbe:	9305      	str	r3, [sp, #20]
 8010bc0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8010c88 <_svfiprintf_r+0x1f8>
 8010bc4:	7821      	ldrb	r1, [r4, #0]
 8010bc6:	2203      	movs	r2, #3
 8010bc8:	4650      	mov	r0, sl
 8010bca:	f7ef fb29 	bl	8000220 <memchr>
 8010bce:	b138      	cbz	r0, 8010be0 <_svfiprintf_r+0x150>
 8010bd0:	9b04      	ldr	r3, [sp, #16]
 8010bd2:	eba0 000a 	sub.w	r0, r0, sl
 8010bd6:	2240      	movs	r2, #64	; 0x40
 8010bd8:	4082      	lsls	r2, r0
 8010bda:	4313      	orrs	r3, r2
 8010bdc:	3401      	adds	r4, #1
 8010bde:	9304      	str	r3, [sp, #16]
 8010be0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010be4:	4825      	ldr	r0, [pc, #148]	; (8010c7c <_svfiprintf_r+0x1ec>)
 8010be6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010bea:	2206      	movs	r2, #6
 8010bec:	f7ef fb18 	bl	8000220 <memchr>
 8010bf0:	2800      	cmp	r0, #0
 8010bf2:	d038      	beq.n	8010c66 <_svfiprintf_r+0x1d6>
 8010bf4:	4b22      	ldr	r3, [pc, #136]	; (8010c80 <_svfiprintf_r+0x1f0>)
 8010bf6:	bb1b      	cbnz	r3, 8010c40 <_svfiprintf_r+0x1b0>
 8010bf8:	9b03      	ldr	r3, [sp, #12]
 8010bfa:	3307      	adds	r3, #7
 8010bfc:	f023 0307 	bic.w	r3, r3, #7
 8010c00:	3308      	adds	r3, #8
 8010c02:	9303      	str	r3, [sp, #12]
 8010c04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c06:	4433      	add	r3, r6
 8010c08:	9309      	str	r3, [sp, #36]	; 0x24
 8010c0a:	e768      	b.n	8010ade <_svfiprintf_r+0x4e>
 8010c0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8010c10:	460c      	mov	r4, r1
 8010c12:	2001      	movs	r0, #1
 8010c14:	e7a6      	b.n	8010b64 <_svfiprintf_r+0xd4>
 8010c16:	2300      	movs	r3, #0
 8010c18:	3401      	adds	r4, #1
 8010c1a:	9305      	str	r3, [sp, #20]
 8010c1c:	4619      	mov	r1, r3
 8010c1e:	f04f 0c0a 	mov.w	ip, #10
 8010c22:	4620      	mov	r0, r4
 8010c24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010c28:	3a30      	subs	r2, #48	; 0x30
 8010c2a:	2a09      	cmp	r2, #9
 8010c2c:	d903      	bls.n	8010c36 <_svfiprintf_r+0x1a6>
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d0c6      	beq.n	8010bc0 <_svfiprintf_r+0x130>
 8010c32:	9105      	str	r1, [sp, #20]
 8010c34:	e7c4      	b.n	8010bc0 <_svfiprintf_r+0x130>
 8010c36:	fb0c 2101 	mla	r1, ip, r1, r2
 8010c3a:	4604      	mov	r4, r0
 8010c3c:	2301      	movs	r3, #1
 8010c3e:	e7f0      	b.n	8010c22 <_svfiprintf_r+0x192>
 8010c40:	ab03      	add	r3, sp, #12
 8010c42:	9300      	str	r3, [sp, #0]
 8010c44:	462a      	mov	r2, r5
 8010c46:	4b0f      	ldr	r3, [pc, #60]	; (8010c84 <_svfiprintf_r+0x1f4>)
 8010c48:	a904      	add	r1, sp, #16
 8010c4a:	4638      	mov	r0, r7
 8010c4c:	f7fd fe2c 	bl	800e8a8 <_printf_float>
 8010c50:	1c42      	adds	r2, r0, #1
 8010c52:	4606      	mov	r6, r0
 8010c54:	d1d6      	bne.n	8010c04 <_svfiprintf_r+0x174>
 8010c56:	89ab      	ldrh	r3, [r5, #12]
 8010c58:	065b      	lsls	r3, r3, #25
 8010c5a:	f53f af2d 	bmi.w	8010ab8 <_svfiprintf_r+0x28>
 8010c5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010c60:	b01d      	add	sp, #116	; 0x74
 8010c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c66:	ab03      	add	r3, sp, #12
 8010c68:	9300      	str	r3, [sp, #0]
 8010c6a:	462a      	mov	r2, r5
 8010c6c:	4b05      	ldr	r3, [pc, #20]	; (8010c84 <_svfiprintf_r+0x1f4>)
 8010c6e:	a904      	add	r1, sp, #16
 8010c70:	4638      	mov	r0, r7
 8010c72:	f7fe f8bd 	bl	800edf0 <_printf_i>
 8010c76:	e7eb      	b.n	8010c50 <_svfiprintf_r+0x1c0>
 8010c78:	080127f4 	.word	0x080127f4
 8010c7c:	080127fe 	.word	0x080127fe
 8010c80:	0800e8a9 	.word	0x0800e8a9
 8010c84:	080109dd 	.word	0x080109dd
 8010c88:	080127fa 	.word	0x080127fa

08010c8c <__sflush_r>:
 8010c8c:	898a      	ldrh	r2, [r1, #12]
 8010c8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c92:	4605      	mov	r5, r0
 8010c94:	0710      	lsls	r0, r2, #28
 8010c96:	460c      	mov	r4, r1
 8010c98:	d458      	bmi.n	8010d4c <__sflush_r+0xc0>
 8010c9a:	684b      	ldr	r3, [r1, #4]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	dc05      	bgt.n	8010cac <__sflush_r+0x20>
 8010ca0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	dc02      	bgt.n	8010cac <__sflush_r+0x20>
 8010ca6:	2000      	movs	r0, #0
 8010ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010cae:	2e00      	cmp	r6, #0
 8010cb0:	d0f9      	beq.n	8010ca6 <__sflush_r+0x1a>
 8010cb2:	2300      	movs	r3, #0
 8010cb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010cb8:	682f      	ldr	r7, [r5, #0]
 8010cba:	6a21      	ldr	r1, [r4, #32]
 8010cbc:	602b      	str	r3, [r5, #0]
 8010cbe:	d032      	beq.n	8010d26 <__sflush_r+0x9a>
 8010cc0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010cc2:	89a3      	ldrh	r3, [r4, #12]
 8010cc4:	075a      	lsls	r2, r3, #29
 8010cc6:	d505      	bpl.n	8010cd4 <__sflush_r+0x48>
 8010cc8:	6863      	ldr	r3, [r4, #4]
 8010cca:	1ac0      	subs	r0, r0, r3
 8010ccc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010cce:	b10b      	cbz	r3, 8010cd4 <__sflush_r+0x48>
 8010cd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010cd2:	1ac0      	subs	r0, r0, r3
 8010cd4:	2300      	movs	r3, #0
 8010cd6:	4602      	mov	r2, r0
 8010cd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010cda:	6a21      	ldr	r1, [r4, #32]
 8010cdc:	4628      	mov	r0, r5
 8010cde:	47b0      	blx	r6
 8010ce0:	1c43      	adds	r3, r0, #1
 8010ce2:	89a3      	ldrh	r3, [r4, #12]
 8010ce4:	d106      	bne.n	8010cf4 <__sflush_r+0x68>
 8010ce6:	6829      	ldr	r1, [r5, #0]
 8010ce8:	291d      	cmp	r1, #29
 8010cea:	d82b      	bhi.n	8010d44 <__sflush_r+0xb8>
 8010cec:	4a29      	ldr	r2, [pc, #164]	; (8010d94 <__sflush_r+0x108>)
 8010cee:	410a      	asrs	r2, r1
 8010cf0:	07d6      	lsls	r6, r2, #31
 8010cf2:	d427      	bmi.n	8010d44 <__sflush_r+0xb8>
 8010cf4:	2200      	movs	r2, #0
 8010cf6:	6062      	str	r2, [r4, #4]
 8010cf8:	04d9      	lsls	r1, r3, #19
 8010cfa:	6922      	ldr	r2, [r4, #16]
 8010cfc:	6022      	str	r2, [r4, #0]
 8010cfe:	d504      	bpl.n	8010d0a <__sflush_r+0x7e>
 8010d00:	1c42      	adds	r2, r0, #1
 8010d02:	d101      	bne.n	8010d08 <__sflush_r+0x7c>
 8010d04:	682b      	ldr	r3, [r5, #0]
 8010d06:	b903      	cbnz	r3, 8010d0a <__sflush_r+0x7e>
 8010d08:	6560      	str	r0, [r4, #84]	; 0x54
 8010d0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010d0c:	602f      	str	r7, [r5, #0]
 8010d0e:	2900      	cmp	r1, #0
 8010d10:	d0c9      	beq.n	8010ca6 <__sflush_r+0x1a>
 8010d12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010d16:	4299      	cmp	r1, r3
 8010d18:	d002      	beq.n	8010d20 <__sflush_r+0x94>
 8010d1a:	4628      	mov	r0, r5
 8010d1c:	f7ff f9e2 	bl	80100e4 <_free_r>
 8010d20:	2000      	movs	r0, #0
 8010d22:	6360      	str	r0, [r4, #52]	; 0x34
 8010d24:	e7c0      	b.n	8010ca8 <__sflush_r+0x1c>
 8010d26:	2301      	movs	r3, #1
 8010d28:	4628      	mov	r0, r5
 8010d2a:	47b0      	blx	r6
 8010d2c:	1c41      	adds	r1, r0, #1
 8010d2e:	d1c8      	bne.n	8010cc2 <__sflush_r+0x36>
 8010d30:	682b      	ldr	r3, [r5, #0]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d0c5      	beq.n	8010cc2 <__sflush_r+0x36>
 8010d36:	2b1d      	cmp	r3, #29
 8010d38:	d001      	beq.n	8010d3e <__sflush_r+0xb2>
 8010d3a:	2b16      	cmp	r3, #22
 8010d3c:	d101      	bne.n	8010d42 <__sflush_r+0xb6>
 8010d3e:	602f      	str	r7, [r5, #0]
 8010d40:	e7b1      	b.n	8010ca6 <__sflush_r+0x1a>
 8010d42:	89a3      	ldrh	r3, [r4, #12]
 8010d44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d48:	81a3      	strh	r3, [r4, #12]
 8010d4a:	e7ad      	b.n	8010ca8 <__sflush_r+0x1c>
 8010d4c:	690f      	ldr	r7, [r1, #16]
 8010d4e:	2f00      	cmp	r7, #0
 8010d50:	d0a9      	beq.n	8010ca6 <__sflush_r+0x1a>
 8010d52:	0793      	lsls	r3, r2, #30
 8010d54:	680e      	ldr	r6, [r1, #0]
 8010d56:	bf08      	it	eq
 8010d58:	694b      	ldreq	r3, [r1, #20]
 8010d5a:	600f      	str	r7, [r1, #0]
 8010d5c:	bf18      	it	ne
 8010d5e:	2300      	movne	r3, #0
 8010d60:	eba6 0807 	sub.w	r8, r6, r7
 8010d64:	608b      	str	r3, [r1, #8]
 8010d66:	f1b8 0f00 	cmp.w	r8, #0
 8010d6a:	dd9c      	ble.n	8010ca6 <__sflush_r+0x1a>
 8010d6c:	6a21      	ldr	r1, [r4, #32]
 8010d6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010d70:	4643      	mov	r3, r8
 8010d72:	463a      	mov	r2, r7
 8010d74:	4628      	mov	r0, r5
 8010d76:	47b0      	blx	r6
 8010d78:	2800      	cmp	r0, #0
 8010d7a:	dc06      	bgt.n	8010d8a <__sflush_r+0xfe>
 8010d7c:	89a3      	ldrh	r3, [r4, #12]
 8010d7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d82:	81a3      	strh	r3, [r4, #12]
 8010d84:	f04f 30ff 	mov.w	r0, #4294967295
 8010d88:	e78e      	b.n	8010ca8 <__sflush_r+0x1c>
 8010d8a:	4407      	add	r7, r0
 8010d8c:	eba8 0800 	sub.w	r8, r8, r0
 8010d90:	e7e9      	b.n	8010d66 <__sflush_r+0xda>
 8010d92:	bf00      	nop
 8010d94:	dfbffffe 	.word	0xdfbffffe

08010d98 <_fflush_r>:
 8010d98:	b538      	push	{r3, r4, r5, lr}
 8010d9a:	690b      	ldr	r3, [r1, #16]
 8010d9c:	4605      	mov	r5, r0
 8010d9e:	460c      	mov	r4, r1
 8010da0:	b913      	cbnz	r3, 8010da8 <_fflush_r+0x10>
 8010da2:	2500      	movs	r5, #0
 8010da4:	4628      	mov	r0, r5
 8010da6:	bd38      	pop	{r3, r4, r5, pc}
 8010da8:	b118      	cbz	r0, 8010db2 <_fflush_r+0x1a>
 8010daa:	6a03      	ldr	r3, [r0, #32]
 8010dac:	b90b      	cbnz	r3, 8010db2 <_fflush_r+0x1a>
 8010dae:	f7fe f9cd 	bl	800f14c <__sinit>
 8010db2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d0f3      	beq.n	8010da2 <_fflush_r+0xa>
 8010dba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010dbc:	07d0      	lsls	r0, r2, #31
 8010dbe:	d404      	bmi.n	8010dca <_fflush_r+0x32>
 8010dc0:	0599      	lsls	r1, r3, #22
 8010dc2:	d402      	bmi.n	8010dca <_fflush_r+0x32>
 8010dc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010dc6:	f7fe fb00 	bl	800f3ca <__retarget_lock_acquire_recursive>
 8010dca:	4628      	mov	r0, r5
 8010dcc:	4621      	mov	r1, r4
 8010dce:	f7ff ff5d 	bl	8010c8c <__sflush_r>
 8010dd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010dd4:	07da      	lsls	r2, r3, #31
 8010dd6:	4605      	mov	r5, r0
 8010dd8:	d4e4      	bmi.n	8010da4 <_fflush_r+0xc>
 8010dda:	89a3      	ldrh	r3, [r4, #12]
 8010ddc:	059b      	lsls	r3, r3, #22
 8010dde:	d4e1      	bmi.n	8010da4 <_fflush_r+0xc>
 8010de0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010de2:	f7fe faf3 	bl	800f3cc <__retarget_lock_release_recursive>
 8010de6:	e7dd      	b.n	8010da4 <_fflush_r+0xc>

08010de8 <memmove>:
 8010de8:	4288      	cmp	r0, r1
 8010dea:	b510      	push	{r4, lr}
 8010dec:	eb01 0402 	add.w	r4, r1, r2
 8010df0:	d902      	bls.n	8010df8 <memmove+0x10>
 8010df2:	4284      	cmp	r4, r0
 8010df4:	4623      	mov	r3, r4
 8010df6:	d807      	bhi.n	8010e08 <memmove+0x20>
 8010df8:	1e43      	subs	r3, r0, #1
 8010dfa:	42a1      	cmp	r1, r4
 8010dfc:	d008      	beq.n	8010e10 <memmove+0x28>
 8010dfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010e02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010e06:	e7f8      	b.n	8010dfa <memmove+0x12>
 8010e08:	4402      	add	r2, r0
 8010e0a:	4601      	mov	r1, r0
 8010e0c:	428a      	cmp	r2, r1
 8010e0e:	d100      	bne.n	8010e12 <memmove+0x2a>
 8010e10:	bd10      	pop	{r4, pc}
 8010e12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010e16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010e1a:	e7f7      	b.n	8010e0c <memmove+0x24>

08010e1c <_sbrk_r>:
 8010e1c:	b538      	push	{r3, r4, r5, lr}
 8010e1e:	4d06      	ldr	r5, [pc, #24]	; (8010e38 <_sbrk_r+0x1c>)
 8010e20:	2300      	movs	r3, #0
 8010e22:	4604      	mov	r4, r0
 8010e24:	4608      	mov	r0, r1
 8010e26:	602b      	str	r3, [r5, #0]
 8010e28:	f7f4 fbd0 	bl	80055cc <_sbrk>
 8010e2c:	1c43      	adds	r3, r0, #1
 8010e2e:	d102      	bne.n	8010e36 <_sbrk_r+0x1a>
 8010e30:	682b      	ldr	r3, [r5, #0]
 8010e32:	b103      	cbz	r3, 8010e36 <_sbrk_r+0x1a>
 8010e34:	6023      	str	r3, [r4, #0]
 8010e36:	bd38      	pop	{r3, r4, r5, pc}
 8010e38:	200021d4 	.word	0x200021d4

08010e3c <__assert_func>:
 8010e3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010e3e:	4614      	mov	r4, r2
 8010e40:	461a      	mov	r2, r3
 8010e42:	4b09      	ldr	r3, [pc, #36]	; (8010e68 <__assert_func+0x2c>)
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	4605      	mov	r5, r0
 8010e48:	68d8      	ldr	r0, [r3, #12]
 8010e4a:	b14c      	cbz	r4, 8010e60 <__assert_func+0x24>
 8010e4c:	4b07      	ldr	r3, [pc, #28]	; (8010e6c <__assert_func+0x30>)
 8010e4e:	9100      	str	r1, [sp, #0]
 8010e50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010e54:	4906      	ldr	r1, [pc, #24]	; (8010e70 <__assert_func+0x34>)
 8010e56:	462b      	mov	r3, r5
 8010e58:	f000 f872 	bl	8010f40 <fiprintf>
 8010e5c:	f000 f882 	bl	8010f64 <abort>
 8010e60:	4b04      	ldr	r3, [pc, #16]	; (8010e74 <__assert_func+0x38>)
 8010e62:	461c      	mov	r4, r3
 8010e64:	e7f3      	b.n	8010e4e <__assert_func+0x12>
 8010e66:	bf00      	nop
 8010e68:	200005bc 	.word	0x200005bc
 8010e6c:	0801280f 	.word	0x0801280f
 8010e70:	0801281c 	.word	0x0801281c
 8010e74:	0801284a 	.word	0x0801284a

08010e78 <_calloc_r>:
 8010e78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010e7a:	fba1 2402 	umull	r2, r4, r1, r2
 8010e7e:	b94c      	cbnz	r4, 8010e94 <_calloc_r+0x1c>
 8010e80:	4611      	mov	r1, r2
 8010e82:	9201      	str	r2, [sp, #4]
 8010e84:	f7ff f9a2 	bl	80101cc <_malloc_r>
 8010e88:	9a01      	ldr	r2, [sp, #4]
 8010e8a:	4605      	mov	r5, r0
 8010e8c:	b930      	cbnz	r0, 8010e9c <_calloc_r+0x24>
 8010e8e:	4628      	mov	r0, r5
 8010e90:	b003      	add	sp, #12
 8010e92:	bd30      	pop	{r4, r5, pc}
 8010e94:	220c      	movs	r2, #12
 8010e96:	6002      	str	r2, [r0, #0]
 8010e98:	2500      	movs	r5, #0
 8010e9a:	e7f8      	b.n	8010e8e <_calloc_r+0x16>
 8010e9c:	4621      	mov	r1, r4
 8010e9e:	f7fe fa17 	bl	800f2d0 <memset>
 8010ea2:	e7f4      	b.n	8010e8e <_calloc_r+0x16>

08010ea4 <__ascii_mbtowc>:
 8010ea4:	b082      	sub	sp, #8
 8010ea6:	b901      	cbnz	r1, 8010eaa <__ascii_mbtowc+0x6>
 8010ea8:	a901      	add	r1, sp, #4
 8010eaa:	b142      	cbz	r2, 8010ebe <__ascii_mbtowc+0x1a>
 8010eac:	b14b      	cbz	r3, 8010ec2 <__ascii_mbtowc+0x1e>
 8010eae:	7813      	ldrb	r3, [r2, #0]
 8010eb0:	600b      	str	r3, [r1, #0]
 8010eb2:	7812      	ldrb	r2, [r2, #0]
 8010eb4:	1e10      	subs	r0, r2, #0
 8010eb6:	bf18      	it	ne
 8010eb8:	2001      	movne	r0, #1
 8010eba:	b002      	add	sp, #8
 8010ebc:	4770      	bx	lr
 8010ebe:	4610      	mov	r0, r2
 8010ec0:	e7fb      	b.n	8010eba <__ascii_mbtowc+0x16>
 8010ec2:	f06f 0001 	mvn.w	r0, #1
 8010ec6:	e7f8      	b.n	8010eba <__ascii_mbtowc+0x16>

08010ec8 <_realloc_r>:
 8010ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ecc:	4680      	mov	r8, r0
 8010ece:	4614      	mov	r4, r2
 8010ed0:	460e      	mov	r6, r1
 8010ed2:	b921      	cbnz	r1, 8010ede <_realloc_r+0x16>
 8010ed4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010ed8:	4611      	mov	r1, r2
 8010eda:	f7ff b977 	b.w	80101cc <_malloc_r>
 8010ede:	b92a      	cbnz	r2, 8010eec <_realloc_r+0x24>
 8010ee0:	f7ff f900 	bl	80100e4 <_free_r>
 8010ee4:	4625      	mov	r5, r4
 8010ee6:	4628      	mov	r0, r5
 8010ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010eec:	f000 f841 	bl	8010f72 <_malloc_usable_size_r>
 8010ef0:	4284      	cmp	r4, r0
 8010ef2:	4607      	mov	r7, r0
 8010ef4:	d802      	bhi.n	8010efc <_realloc_r+0x34>
 8010ef6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010efa:	d812      	bhi.n	8010f22 <_realloc_r+0x5a>
 8010efc:	4621      	mov	r1, r4
 8010efe:	4640      	mov	r0, r8
 8010f00:	f7ff f964 	bl	80101cc <_malloc_r>
 8010f04:	4605      	mov	r5, r0
 8010f06:	2800      	cmp	r0, #0
 8010f08:	d0ed      	beq.n	8010ee6 <_realloc_r+0x1e>
 8010f0a:	42bc      	cmp	r4, r7
 8010f0c:	4622      	mov	r2, r4
 8010f0e:	4631      	mov	r1, r6
 8010f10:	bf28      	it	cs
 8010f12:	463a      	movcs	r2, r7
 8010f14:	f7fe fa5b 	bl	800f3ce <memcpy>
 8010f18:	4631      	mov	r1, r6
 8010f1a:	4640      	mov	r0, r8
 8010f1c:	f7ff f8e2 	bl	80100e4 <_free_r>
 8010f20:	e7e1      	b.n	8010ee6 <_realloc_r+0x1e>
 8010f22:	4635      	mov	r5, r6
 8010f24:	e7df      	b.n	8010ee6 <_realloc_r+0x1e>

08010f26 <__ascii_wctomb>:
 8010f26:	b149      	cbz	r1, 8010f3c <__ascii_wctomb+0x16>
 8010f28:	2aff      	cmp	r2, #255	; 0xff
 8010f2a:	bf85      	ittet	hi
 8010f2c:	238a      	movhi	r3, #138	; 0x8a
 8010f2e:	6003      	strhi	r3, [r0, #0]
 8010f30:	700a      	strbls	r2, [r1, #0]
 8010f32:	f04f 30ff 	movhi.w	r0, #4294967295
 8010f36:	bf98      	it	ls
 8010f38:	2001      	movls	r0, #1
 8010f3a:	4770      	bx	lr
 8010f3c:	4608      	mov	r0, r1
 8010f3e:	4770      	bx	lr

08010f40 <fiprintf>:
 8010f40:	b40e      	push	{r1, r2, r3}
 8010f42:	b503      	push	{r0, r1, lr}
 8010f44:	4601      	mov	r1, r0
 8010f46:	ab03      	add	r3, sp, #12
 8010f48:	4805      	ldr	r0, [pc, #20]	; (8010f60 <fiprintf+0x20>)
 8010f4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f4e:	6800      	ldr	r0, [r0, #0]
 8010f50:	9301      	str	r3, [sp, #4]
 8010f52:	f000 f83f 	bl	8010fd4 <_vfiprintf_r>
 8010f56:	b002      	add	sp, #8
 8010f58:	f85d eb04 	ldr.w	lr, [sp], #4
 8010f5c:	b003      	add	sp, #12
 8010f5e:	4770      	bx	lr
 8010f60:	200005bc 	.word	0x200005bc

08010f64 <abort>:
 8010f64:	b508      	push	{r3, lr}
 8010f66:	2006      	movs	r0, #6
 8010f68:	f000 fa0c 	bl	8011384 <raise>
 8010f6c:	2001      	movs	r0, #1
 8010f6e:	f7f4 fab5 	bl	80054dc <_exit>

08010f72 <_malloc_usable_size_r>:
 8010f72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010f76:	1f18      	subs	r0, r3, #4
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	bfbc      	itt	lt
 8010f7c:	580b      	ldrlt	r3, [r1, r0]
 8010f7e:	18c0      	addlt	r0, r0, r3
 8010f80:	4770      	bx	lr

08010f82 <__sfputc_r>:
 8010f82:	6893      	ldr	r3, [r2, #8]
 8010f84:	3b01      	subs	r3, #1
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	b410      	push	{r4}
 8010f8a:	6093      	str	r3, [r2, #8]
 8010f8c:	da08      	bge.n	8010fa0 <__sfputc_r+0x1e>
 8010f8e:	6994      	ldr	r4, [r2, #24]
 8010f90:	42a3      	cmp	r3, r4
 8010f92:	db01      	blt.n	8010f98 <__sfputc_r+0x16>
 8010f94:	290a      	cmp	r1, #10
 8010f96:	d103      	bne.n	8010fa0 <__sfputc_r+0x1e>
 8010f98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f9c:	f000 b934 	b.w	8011208 <__swbuf_r>
 8010fa0:	6813      	ldr	r3, [r2, #0]
 8010fa2:	1c58      	adds	r0, r3, #1
 8010fa4:	6010      	str	r0, [r2, #0]
 8010fa6:	7019      	strb	r1, [r3, #0]
 8010fa8:	4608      	mov	r0, r1
 8010faa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010fae:	4770      	bx	lr

08010fb0 <__sfputs_r>:
 8010fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fb2:	4606      	mov	r6, r0
 8010fb4:	460f      	mov	r7, r1
 8010fb6:	4614      	mov	r4, r2
 8010fb8:	18d5      	adds	r5, r2, r3
 8010fba:	42ac      	cmp	r4, r5
 8010fbc:	d101      	bne.n	8010fc2 <__sfputs_r+0x12>
 8010fbe:	2000      	movs	r0, #0
 8010fc0:	e007      	b.n	8010fd2 <__sfputs_r+0x22>
 8010fc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010fc6:	463a      	mov	r2, r7
 8010fc8:	4630      	mov	r0, r6
 8010fca:	f7ff ffda 	bl	8010f82 <__sfputc_r>
 8010fce:	1c43      	adds	r3, r0, #1
 8010fd0:	d1f3      	bne.n	8010fba <__sfputs_r+0xa>
 8010fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010fd4 <_vfiprintf_r>:
 8010fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fd8:	460d      	mov	r5, r1
 8010fda:	b09d      	sub	sp, #116	; 0x74
 8010fdc:	4614      	mov	r4, r2
 8010fde:	4698      	mov	r8, r3
 8010fe0:	4606      	mov	r6, r0
 8010fe2:	b118      	cbz	r0, 8010fec <_vfiprintf_r+0x18>
 8010fe4:	6a03      	ldr	r3, [r0, #32]
 8010fe6:	b90b      	cbnz	r3, 8010fec <_vfiprintf_r+0x18>
 8010fe8:	f7fe f8b0 	bl	800f14c <__sinit>
 8010fec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010fee:	07d9      	lsls	r1, r3, #31
 8010ff0:	d405      	bmi.n	8010ffe <_vfiprintf_r+0x2a>
 8010ff2:	89ab      	ldrh	r3, [r5, #12]
 8010ff4:	059a      	lsls	r2, r3, #22
 8010ff6:	d402      	bmi.n	8010ffe <_vfiprintf_r+0x2a>
 8010ff8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010ffa:	f7fe f9e6 	bl	800f3ca <__retarget_lock_acquire_recursive>
 8010ffe:	89ab      	ldrh	r3, [r5, #12]
 8011000:	071b      	lsls	r3, r3, #28
 8011002:	d501      	bpl.n	8011008 <_vfiprintf_r+0x34>
 8011004:	692b      	ldr	r3, [r5, #16]
 8011006:	b99b      	cbnz	r3, 8011030 <_vfiprintf_r+0x5c>
 8011008:	4629      	mov	r1, r5
 801100a:	4630      	mov	r0, r6
 801100c:	f000 f93a 	bl	8011284 <__swsetup_r>
 8011010:	b170      	cbz	r0, 8011030 <_vfiprintf_r+0x5c>
 8011012:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011014:	07dc      	lsls	r4, r3, #31
 8011016:	d504      	bpl.n	8011022 <_vfiprintf_r+0x4e>
 8011018:	f04f 30ff 	mov.w	r0, #4294967295
 801101c:	b01d      	add	sp, #116	; 0x74
 801101e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011022:	89ab      	ldrh	r3, [r5, #12]
 8011024:	0598      	lsls	r0, r3, #22
 8011026:	d4f7      	bmi.n	8011018 <_vfiprintf_r+0x44>
 8011028:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801102a:	f7fe f9cf 	bl	800f3cc <__retarget_lock_release_recursive>
 801102e:	e7f3      	b.n	8011018 <_vfiprintf_r+0x44>
 8011030:	2300      	movs	r3, #0
 8011032:	9309      	str	r3, [sp, #36]	; 0x24
 8011034:	2320      	movs	r3, #32
 8011036:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801103a:	f8cd 800c 	str.w	r8, [sp, #12]
 801103e:	2330      	movs	r3, #48	; 0x30
 8011040:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80111f4 <_vfiprintf_r+0x220>
 8011044:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011048:	f04f 0901 	mov.w	r9, #1
 801104c:	4623      	mov	r3, r4
 801104e:	469a      	mov	sl, r3
 8011050:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011054:	b10a      	cbz	r2, 801105a <_vfiprintf_r+0x86>
 8011056:	2a25      	cmp	r2, #37	; 0x25
 8011058:	d1f9      	bne.n	801104e <_vfiprintf_r+0x7a>
 801105a:	ebba 0b04 	subs.w	fp, sl, r4
 801105e:	d00b      	beq.n	8011078 <_vfiprintf_r+0xa4>
 8011060:	465b      	mov	r3, fp
 8011062:	4622      	mov	r2, r4
 8011064:	4629      	mov	r1, r5
 8011066:	4630      	mov	r0, r6
 8011068:	f7ff ffa2 	bl	8010fb0 <__sfputs_r>
 801106c:	3001      	adds	r0, #1
 801106e:	f000 80a9 	beq.w	80111c4 <_vfiprintf_r+0x1f0>
 8011072:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011074:	445a      	add	r2, fp
 8011076:	9209      	str	r2, [sp, #36]	; 0x24
 8011078:	f89a 3000 	ldrb.w	r3, [sl]
 801107c:	2b00      	cmp	r3, #0
 801107e:	f000 80a1 	beq.w	80111c4 <_vfiprintf_r+0x1f0>
 8011082:	2300      	movs	r3, #0
 8011084:	f04f 32ff 	mov.w	r2, #4294967295
 8011088:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801108c:	f10a 0a01 	add.w	sl, sl, #1
 8011090:	9304      	str	r3, [sp, #16]
 8011092:	9307      	str	r3, [sp, #28]
 8011094:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011098:	931a      	str	r3, [sp, #104]	; 0x68
 801109a:	4654      	mov	r4, sl
 801109c:	2205      	movs	r2, #5
 801109e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110a2:	4854      	ldr	r0, [pc, #336]	; (80111f4 <_vfiprintf_r+0x220>)
 80110a4:	f7ef f8bc 	bl	8000220 <memchr>
 80110a8:	9a04      	ldr	r2, [sp, #16]
 80110aa:	b9d8      	cbnz	r0, 80110e4 <_vfiprintf_r+0x110>
 80110ac:	06d1      	lsls	r1, r2, #27
 80110ae:	bf44      	itt	mi
 80110b0:	2320      	movmi	r3, #32
 80110b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80110b6:	0713      	lsls	r3, r2, #28
 80110b8:	bf44      	itt	mi
 80110ba:	232b      	movmi	r3, #43	; 0x2b
 80110bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80110c0:	f89a 3000 	ldrb.w	r3, [sl]
 80110c4:	2b2a      	cmp	r3, #42	; 0x2a
 80110c6:	d015      	beq.n	80110f4 <_vfiprintf_r+0x120>
 80110c8:	9a07      	ldr	r2, [sp, #28]
 80110ca:	4654      	mov	r4, sl
 80110cc:	2000      	movs	r0, #0
 80110ce:	f04f 0c0a 	mov.w	ip, #10
 80110d2:	4621      	mov	r1, r4
 80110d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80110d8:	3b30      	subs	r3, #48	; 0x30
 80110da:	2b09      	cmp	r3, #9
 80110dc:	d94d      	bls.n	801117a <_vfiprintf_r+0x1a6>
 80110de:	b1b0      	cbz	r0, 801110e <_vfiprintf_r+0x13a>
 80110e0:	9207      	str	r2, [sp, #28]
 80110e2:	e014      	b.n	801110e <_vfiprintf_r+0x13a>
 80110e4:	eba0 0308 	sub.w	r3, r0, r8
 80110e8:	fa09 f303 	lsl.w	r3, r9, r3
 80110ec:	4313      	orrs	r3, r2
 80110ee:	9304      	str	r3, [sp, #16]
 80110f0:	46a2      	mov	sl, r4
 80110f2:	e7d2      	b.n	801109a <_vfiprintf_r+0xc6>
 80110f4:	9b03      	ldr	r3, [sp, #12]
 80110f6:	1d19      	adds	r1, r3, #4
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	9103      	str	r1, [sp, #12]
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	bfbb      	ittet	lt
 8011100:	425b      	neglt	r3, r3
 8011102:	f042 0202 	orrlt.w	r2, r2, #2
 8011106:	9307      	strge	r3, [sp, #28]
 8011108:	9307      	strlt	r3, [sp, #28]
 801110a:	bfb8      	it	lt
 801110c:	9204      	strlt	r2, [sp, #16]
 801110e:	7823      	ldrb	r3, [r4, #0]
 8011110:	2b2e      	cmp	r3, #46	; 0x2e
 8011112:	d10c      	bne.n	801112e <_vfiprintf_r+0x15a>
 8011114:	7863      	ldrb	r3, [r4, #1]
 8011116:	2b2a      	cmp	r3, #42	; 0x2a
 8011118:	d134      	bne.n	8011184 <_vfiprintf_r+0x1b0>
 801111a:	9b03      	ldr	r3, [sp, #12]
 801111c:	1d1a      	adds	r2, r3, #4
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	9203      	str	r2, [sp, #12]
 8011122:	2b00      	cmp	r3, #0
 8011124:	bfb8      	it	lt
 8011126:	f04f 33ff 	movlt.w	r3, #4294967295
 801112a:	3402      	adds	r4, #2
 801112c:	9305      	str	r3, [sp, #20]
 801112e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8011204 <_vfiprintf_r+0x230>
 8011132:	7821      	ldrb	r1, [r4, #0]
 8011134:	2203      	movs	r2, #3
 8011136:	4650      	mov	r0, sl
 8011138:	f7ef f872 	bl	8000220 <memchr>
 801113c:	b138      	cbz	r0, 801114e <_vfiprintf_r+0x17a>
 801113e:	9b04      	ldr	r3, [sp, #16]
 8011140:	eba0 000a 	sub.w	r0, r0, sl
 8011144:	2240      	movs	r2, #64	; 0x40
 8011146:	4082      	lsls	r2, r0
 8011148:	4313      	orrs	r3, r2
 801114a:	3401      	adds	r4, #1
 801114c:	9304      	str	r3, [sp, #16]
 801114e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011152:	4829      	ldr	r0, [pc, #164]	; (80111f8 <_vfiprintf_r+0x224>)
 8011154:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011158:	2206      	movs	r2, #6
 801115a:	f7ef f861 	bl	8000220 <memchr>
 801115e:	2800      	cmp	r0, #0
 8011160:	d03f      	beq.n	80111e2 <_vfiprintf_r+0x20e>
 8011162:	4b26      	ldr	r3, [pc, #152]	; (80111fc <_vfiprintf_r+0x228>)
 8011164:	bb1b      	cbnz	r3, 80111ae <_vfiprintf_r+0x1da>
 8011166:	9b03      	ldr	r3, [sp, #12]
 8011168:	3307      	adds	r3, #7
 801116a:	f023 0307 	bic.w	r3, r3, #7
 801116e:	3308      	adds	r3, #8
 8011170:	9303      	str	r3, [sp, #12]
 8011172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011174:	443b      	add	r3, r7
 8011176:	9309      	str	r3, [sp, #36]	; 0x24
 8011178:	e768      	b.n	801104c <_vfiprintf_r+0x78>
 801117a:	fb0c 3202 	mla	r2, ip, r2, r3
 801117e:	460c      	mov	r4, r1
 8011180:	2001      	movs	r0, #1
 8011182:	e7a6      	b.n	80110d2 <_vfiprintf_r+0xfe>
 8011184:	2300      	movs	r3, #0
 8011186:	3401      	adds	r4, #1
 8011188:	9305      	str	r3, [sp, #20]
 801118a:	4619      	mov	r1, r3
 801118c:	f04f 0c0a 	mov.w	ip, #10
 8011190:	4620      	mov	r0, r4
 8011192:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011196:	3a30      	subs	r2, #48	; 0x30
 8011198:	2a09      	cmp	r2, #9
 801119a:	d903      	bls.n	80111a4 <_vfiprintf_r+0x1d0>
 801119c:	2b00      	cmp	r3, #0
 801119e:	d0c6      	beq.n	801112e <_vfiprintf_r+0x15a>
 80111a0:	9105      	str	r1, [sp, #20]
 80111a2:	e7c4      	b.n	801112e <_vfiprintf_r+0x15a>
 80111a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80111a8:	4604      	mov	r4, r0
 80111aa:	2301      	movs	r3, #1
 80111ac:	e7f0      	b.n	8011190 <_vfiprintf_r+0x1bc>
 80111ae:	ab03      	add	r3, sp, #12
 80111b0:	9300      	str	r3, [sp, #0]
 80111b2:	462a      	mov	r2, r5
 80111b4:	4b12      	ldr	r3, [pc, #72]	; (8011200 <_vfiprintf_r+0x22c>)
 80111b6:	a904      	add	r1, sp, #16
 80111b8:	4630      	mov	r0, r6
 80111ba:	f7fd fb75 	bl	800e8a8 <_printf_float>
 80111be:	4607      	mov	r7, r0
 80111c0:	1c78      	adds	r0, r7, #1
 80111c2:	d1d6      	bne.n	8011172 <_vfiprintf_r+0x19e>
 80111c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80111c6:	07d9      	lsls	r1, r3, #31
 80111c8:	d405      	bmi.n	80111d6 <_vfiprintf_r+0x202>
 80111ca:	89ab      	ldrh	r3, [r5, #12]
 80111cc:	059a      	lsls	r2, r3, #22
 80111ce:	d402      	bmi.n	80111d6 <_vfiprintf_r+0x202>
 80111d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80111d2:	f7fe f8fb 	bl	800f3cc <__retarget_lock_release_recursive>
 80111d6:	89ab      	ldrh	r3, [r5, #12]
 80111d8:	065b      	lsls	r3, r3, #25
 80111da:	f53f af1d 	bmi.w	8011018 <_vfiprintf_r+0x44>
 80111de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80111e0:	e71c      	b.n	801101c <_vfiprintf_r+0x48>
 80111e2:	ab03      	add	r3, sp, #12
 80111e4:	9300      	str	r3, [sp, #0]
 80111e6:	462a      	mov	r2, r5
 80111e8:	4b05      	ldr	r3, [pc, #20]	; (8011200 <_vfiprintf_r+0x22c>)
 80111ea:	a904      	add	r1, sp, #16
 80111ec:	4630      	mov	r0, r6
 80111ee:	f7fd fdff 	bl	800edf0 <_printf_i>
 80111f2:	e7e4      	b.n	80111be <_vfiprintf_r+0x1ea>
 80111f4:	080127f4 	.word	0x080127f4
 80111f8:	080127fe 	.word	0x080127fe
 80111fc:	0800e8a9 	.word	0x0800e8a9
 8011200:	08010fb1 	.word	0x08010fb1
 8011204:	080127fa 	.word	0x080127fa

08011208 <__swbuf_r>:
 8011208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801120a:	460e      	mov	r6, r1
 801120c:	4614      	mov	r4, r2
 801120e:	4605      	mov	r5, r0
 8011210:	b118      	cbz	r0, 801121a <__swbuf_r+0x12>
 8011212:	6a03      	ldr	r3, [r0, #32]
 8011214:	b90b      	cbnz	r3, 801121a <__swbuf_r+0x12>
 8011216:	f7fd ff99 	bl	800f14c <__sinit>
 801121a:	69a3      	ldr	r3, [r4, #24]
 801121c:	60a3      	str	r3, [r4, #8]
 801121e:	89a3      	ldrh	r3, [r4, #12]
 8011220:	071a      	lsls	r2, r3, #28
 8011222:	d525      	bpl.n	8011270 <__swbuf_r+0x68>
 8011224:	6923      	ldr	r3, [r4, #16]
 8011226:	b31b      	cbz	r3, 8011270 <__swbuf_r+0x68>
 8011228:	6823      	ldr	r3, [r4, #0]
 801122a:	6922      	ldr	r2, [r4, #16]
 801122c:	1a98      	subs	r0, r3, r2
 801122e:	6963      	ldr	r3, [r4, #20]
 8011230:	b2f6      	uxtb	r6, r6
 8011232:	4283      	cmp	r3, r0
 8011234:	4637      	mov	r7, r6
 8011236:	dc04      	bgt.n	8011242 <__swbuf_r+0x3a>
 8011238:	4621      	mov	r1, r4
 801123a:	4628      	mov	r0, r5
 801123c:	f7ff fdac 	bl	8010d98 <_fflush_r>
 8011240:	b9e0      	cbnz	r0, 801127c <__swbuf_r+0x74>
 8011242:	68a3      	ldr	r3, [r4, #8]
 8011244:	3b01      	subs	r3, #1
 8011246:	60a3      	str	r3, [r4, #8]
 8011248:	6823      	ldr	r3, [r4, #0]
 801124a:	1c5a      	adds	r2, r3, #1
 801124c:	6022      	str	r2, [r4, #0]
 801124e:	701e      	strb	r6, [r3, #0]
 8011250:	6962      	ldr	r2, [r4, #20]
 8011252:	1c43      	adds	r3, r0, #1
 8011254:	429a      	cmp	r2, r3
 8011256:	d004      	beq.n	8011262 <__swbuf_r+0x5a>
 8011258:	89a3      	ldrh	r3, [r4, #12]
 801125a:	07db      	lsls	r3, r3, #31
 801125c:	d506      	bpl.n	801126c <__swbuf_r+0x64>
 801125e:	2e0a      	cmp	r6, #10
 8011260:	d104      	bne.n	801126c <__swbuf_r+0x64>
 8011262:	4621      	mov	r1, r4
 8011264:	4628      	mov	r0, r5
 8011266:	f7ff fd97 	bl	8010d98 <_fflush_r>
 801126a:	b938      	cbnz	r0, 801127c <__swbuf_r+0x74>
 801126c:	4638      	mov	r0, r7
 801126e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011270:	4621      	mov	r1, r4
 8011272:	4628      	mov	r0, r5
 8011274:	f000 f806 	bl	8011284 <__swsetup_r>
 8011278:	2800      	cmp	r0, #0
 801127a:	d0d5      	beq.n	8011228 <__swbuf_r+0x20>
 801127c:	f04f 37ff 	mov.w	r7, #4294967295
 8011280:	e7f4      	b.n	801126c <__swbuf_r+0x64>
	...

08011284 <__swsetup_r>:
 8011284:	b538      	push	{r3, r4, r5, lr}
 8011286:	4b2a      	ldr	r3, [pc, #168]	; (8011330 <__swsetup_r+0xac>)
 8011288:	4605      	mov	r5, r0
 801128a:	6818      	ldr	r0, [r3, #0]
 801128c:	460c      	mov	r4, r1
 801128e:	b118      	cbz	r0, 8011298 <__swsetup_r+0x14>
 8011290:	6a03      	ldr	r3, [r0, #32]
 8011292:	b90b      	cbnz	r3, 8011298 <__swsetup_r+0x14>
 8011294:	f7fd ff5a 	bl	800f14c <__sinit>
 8011298:	89a3      	ldrh	r3, [r4, #12]
 801129a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801129e:	0718      	lsls	r0, r3, #28
 80112a0:	d422      	bmi.n	80112e8 <__swsetup_r+0x64>
 80112a2:	06d9      	lsls	r1, r3, #27
 80112a4:	d407      	bmi.n	80112b6 <__swsetup_r+0x32>
 80112a6:	2309      	movs	r3, #9
 80112a8:	602b      	str	r3, [r5, #0]
 80112aa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80112ae:	81a3      	strh	r3, [r4, #12]
 80112b0:	f04f 30ff 	mov.w	r0, #4294967295
 80112b4:	e034      	b.n	8011320 <__swsetup_r+0x9c>
 80112b6:	0758      	lsls	r0, r3, #29
 80112b8:	d512      	bpl.n	80112e0 <__swsetup_r+0x5c>
 80112ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80112bc:	b141      	cbz	r1, 80112d0 <__swsetup_r+0x4c>
 80112be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80112c2:	4299      	cmp	r1, r3
 80112c4:	d002      	beq.n	80112cc <__swsetup_r+0x48>
 80112c6:	4628      	mov	r0, r5
 80112c8:	f7fe ff0c 	bl	80100e4 <_free_r>
 80112cc:	2300      	movs	r3, #0
 80112ce:	6363      	str	r3, [r4, #52]	; 0x34
 80112d0:	89a3      	ldrh	r3, [r4, #12]
 80112d2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80112d6:	81a3      	strh	r3, [r4, #12]
 80112d8:	2300      	movs	r3, #0
 80112da:	6063      	str	r3, [r4, #4]
 80112dc:	6923      	ldr	r3, [r4, #16]
 80112de:	6023      	str	r3, [r4, #0]
 80112e0:	89a3      	ldrh	r3, [r4, #12]
 80112e2:	f043 0308 	orr.w	r3, r3, #8
 80112e6:	81a3      	strh	r3, [r4, #12]
 80112e8:	6923      	ldr	r3, [r4, #16]
 80112ea:	b94b      	cbnz	r3, 8011300 <__swsetup_r+0x7c>
 80112ec:	89a3      	ldrh	r3, [r4, #12]
 80112ee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80112f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80112f6:	d003      	beq.n	8011300 <__swsetup_r+0x7c>
 80112f8:	4621      	mov	r1, r4
 80112fa:	4628      	mov	r0, r5
 80112fc:	f000 f884 	bl	8011408 <__smakebuf_r>
 8011300:	89a0      	ldrh	r0, [r4, #12]
 8011302:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011306:	f010 0301 	ands.w	r3, r0, #1
 801130a:	d00a      	beq.n	8011322 <__swsetup_r+0x9e>
 801130c:	2300      	movs	r3, #0
 801130e:	60a3      	str	r3, [r4, #8]
 8011310:	6963      	ldr	r3, [r4, #20]
 8011312:	425b      	negs	r3, r3
 8011314:	61a3      	str	r3, [r4, #24]
 8011316:	6923      	ldr	r3, [r4, #16]
 8011318:	b943      	cbnz	r3, 801132c <__swsetup_r+0xa8>
 801131a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801131e:	d1c4      	bne.n	80112aa <__swsetup_r+0x26>
 8011320:	bd38      	pop	{r3, r4, r5, pc}
 8011322:	0781      	lsls	r1, r0, #30
 8011324:	bf58      	it	pl
 8011326:	6963      	ldrpl	r3, [r4, #20]
 8011328:	60a3      	str	r3, [r4, #8]
 801132a:	e7f4      	b.n	8011316 <__swsetup_r+0x92>
 801132c:	2000      	movs	r0, #0
 801132e:	e7f7      	b.n	8011320 <__swsetup_r+0x9c>
 8011330:	200005bc 	.word	0x200005bc

08011334 <_raise_r>:
 8011334:	291f      	cmp	r1, #31
 8011336:	b538      	push	{r3, r4, r5, lr}
 8011338:	4604      	mov	r4, r0
 801133a:	460d      	mov	r5, r1
 801133c:	d904      	bls.n	8011348 <_raise_r+0x14>
 801133e:	2316      	movs	r3, #22
 8011340:	6003      	str	r3, [r0, #0]
 8011342:	f04f 30ff 	mov.w	r0, #4294967295
 8011346:	bd38      	pop	{r3, r4, r5, pc}
 8011348:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801134a:	b112      	cbz	r2, 8011352 <_raise_r+0x1e>
 801134c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011350:	b94b      	cbnz	r3, 8011366 <_raise_r+0x32>
 8011352:	4620      	mov	r0, r4
 8011354:	f000 f830 	bl	80113b8 <_getpid_r>
 8011358:	462a      	mov	r2, r5
 801135a:	4601      	mov	r1, r0
 801135c:	4620      	mov	r0, r4
 801135e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011362:	f000 b817 	b.w	8011394 <_kill_r>
 8011366:	2b01      	cmp	r3, #1
 8011368:	d00a      	beq.n	8011380 <_raise_r+0x4c>
 801136a:	1c59      	adds	r1, r3, #1
 801136c:	d103      	bne.n	8011376 <_raise_r+0x42>
 801136e:	2316      	movs	r3, #22
 8011370:	6003      	str	r3, [r0, #0]
 8011372:	2001      	movs	r0, #1
 8011374:	e7e7      	b.n	8011346 <_raise_r+0x12>
 8011376:	2400      	movs	r4, #0
 8011378:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801137c:	4628      	mov	r0, r5
 801137e:	4798      	blx	r3
 8011380:	2000      	movs	r0, #0
 8011382:	e7e0      	b.n	8011346 <_raise_r+0x12>

08011384 <raise>:
 8011384:	4b02      	ldr	r3, [pc, #8]	; (8011390 <raise+0xc>)
 8011386:	4601      	mov	r1, r0
 8011388:	6818      	ldr	r0, [r3, #0]
 801138a:	f7ff bfd3 	b.w	8011334 <_raise_r>
 801138e:	bf00      	nop
 8011390:	200005bc 	.word	0x200005bc

08011394 <_kill_r>:
 8011394:	b538      	push	{r3, r4, r5, lr}
 8011396:	4d07      	ldr	r5, [pc, #28]	; (80113b4 <_kill_r+0x20>)
 8011398:	2300      	movs	r3, #0
 801139a:	4604      	mov	r4, r0
 801139c:	4608      	mov	r0, r1
 801139e:	4611      	mov	r1, r2
 80113a0:	602b      	str	r3, [r5, #0]
 80113a2:	f7f4 f88b 	bl	80054bc <_kill>
 80113a6:	1c43      	adds	r3, r0, #1
 80113a8:	d102      	bne.n	80113b0 <_kill_r+0x1c>
 80113aa:	682b      	ldr	r3, [r5, #0]
 80113ac:	b103      	cbz	r3, 80113b0 <_kill_r+0x1c>
 80113ae:	6023      	str	r3, [r4, #0]
 80113b0:	bd38      	pop	{r3, r4, r5, pc}
 80113b2:	bf00      	nop
 80113b4:	200021d4 	.word	0x200021d4

080113b8 <_getpid_r>:
 80113b8:	f7f4 b878 	b.w	80054ac <_getpid>

080113bc <__swhatbuf_r>:
 80113bc:	b570      	push	{r4, r5, r6, lr}
 80113be:	460c      	mov	r4, r1
 80113c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80113c4:	2900      	cmp	r1, #0
 80113c6:	b096      	sub	sp, #88	; 0x58
 80113c8:	4615      	mov	r5, r2
 80113ca:	461e      	mov	r6, r3
 80113cc:	da0d      	bge.n	80113ea <__swhatbuf_r+0x2e>
 80113ce:	89a3      	ldrh	r3, [r4, #12]
 80113d0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80113d4:	f04f 0100 	mov.w	r1, #0
 80113d8:	bf0c      	ite	eq
 80113da:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80113de:	2340      	movne	r3, #64	; 0x40
 80113e0:	2000      	movs	r0, #0
 80113e2:	6031      	str	r1, [r6, #0]
 80113e4:	602b      	str	r3, [r5, #0]
 80113e6:	b016      	add	sp, #88	; 0x58
 80113e8:	bd70      	pop	{r4, r5, r6, pc}
 80113ea:	466a      	mov	r2, sp
 80113ec:	f000 f848 	bl	8011480 <_fstat_r>
 80113f0:	2800      	cmp	r0, #0
 80113f2:	dbec      	blt.n	80113ce <__swhatbuf_r+0x12>
 80113f4:	9901      	ldr	r1, [sp, #4]
 80113f6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80113fa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80113fe:	4259      	negs	r1, r3
 8011400:	4159      	adcs	r1, r3
 8011402:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011406:	e7eb      	b.n	80113e0 <__swhatbuf_r+0x24>

08011408 <__smakebuf_r>:
 8011408:	898b      	ldrh	r3, [r1, #12]
 801140a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801140c:	079d      	lsls	r5, r3, #30
 801140e:	4606      	mov	r6, r0
 8011410:	460c      	mov	r4, r1
 8011412:	d507      	bpl.n	8011424 <__smakebuf_r+0x1c>
 8011414:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011418:	6023      	str	r3, [r4, #0]
 801141a:	6123      	str	r3, [r4, #16]
 801141c:	2301      	movs	r3, #1
 801141e:	6163      	str	r3, [r4, #20]
 8011420:	b002      	add	sp, #8
 8011422:	bd70      	pop	{r4, r5, r6, pc}
 8011424:	ab01      	add	r3, sp, #4
 8011426:	466a      	mov	r2, sp
 8011428:	f7ff ffc8 	bl	80113bc <__swhatbuf_r>
 801142c:	9900      	ldr	r1, [sp, #0]
 801142e:	4605      	mov	r5, r0
 8011430:	4630      	mov	r0, r6
 8011432:	f7fe fecb 	bl	80101cc <_malloc_r>
 8011436:	b948      	cbnz	r0, 801144c <__smakebuf_r+0x44>
 8011438:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801143c:	059a      	lsls	r2, r3, #22
 801143e:	d4ef      	bmi.n	8011420 <__smakebuf_r+0x18>
 8011440:	f023 0303 	bic.w	r3, r3, #3
 8011444:	f043 0302 	orr.w	r3, r3, #2
 8011448:	81a3      	strh	r3, [r4, #12]
 801144a:	e7e3      	b.n	8011414 <__smakebuf_r+0xc>
 801144c:	89a3      	ldrh	r3, [r4, #12]
 801144e:	6020      	str	r0, [r4, #0]
 8011450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011454:	81a3      	strh	r3, [r4, #12]
 8011456:	9b00      	ldr	r3, [sp, #0]
 8011458:	6163      	str	r3, [r4, #20]
 801145a:	9b01      	ldr	r3, [sp, #4]
 801145c:	6120      	str	r0, [r4, #16]
 801145e:	b15b      	cbz	r3, 8011478 <__smakebuf_r+0x70>
 8011460:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011464:	4630      	mov	r0, r6
 8011466:	f000 f81d 	bl	80114a4 <_isatty_r>
 801146a:	b128      	cbz	r0, 8011478 <__smakebuf_r+0x70>
 801146c:	89a3      	ldrh	r3, [r4, #12]
 801146e:	f023 0303 	bic.w	r3, r3, #3
 8011472:	f043 0301 	orr.w	r3, r3, #1
 8011476:	81a3      	strh	r3, [r4, #12]
 8011478:	89a3      	ldrh	r3, [r4, #12]
 801147a:	431d      	orrs	r5, r3
 801147c:	81a5      	strh	r5, [r4, #12]
 801147e:	e7cf      	b.n	8011420 <__smakebuf_r+0x18>

08011480 <_fstat_r>:
 8011480:	b538      	push	{r3, r4, r5, lr}
 8011482:	4d07      	ldr	r5, [pc, #28]	; (80114a0 <_fstat_r+0x20>)
 8011484:	2300      	movs	r3, #0
 8011486:	4604      	mov	r4, r0
 8011488:	4608      	mov	r0, r1
 801148a:	4611      	mov	r1, r2
 801148c:	602b      	str	r3, [r5, #0]
 801148e:	f7f4 f874 	bl	800557a <_fstat>
 8011492:	1c43      	adds	r3, r0, #1
 8011494:	d102      	bne.n	801149c <_fstat_r+0x1c>
 8011496:	682b      	ldr	r3, [r5, #0]
 8011498:	b103      	cbz	r3, 801149c <_fstat_r+0x1c>
 801149a:	6023      	str	r3, [r4, #0]
 801149c:	bd38      	pop	{r3, r4, r5, pc}
 801149e:	bf00      	nop
 80114a0:	200021d4 	.word	0x200021d4

080114a4 <_isatty_r>:
 80114a4:	b538      	push	{r3, r4, r5, lr}
 80114a6:	4d06      	ldr	r5, [pc, #24]	; (80114c0 <_isatty_r+0x1c>)
 80114a8:	2300      	movs	r3, #0
 80114aa:	4604      	mov	r4, r0
 80114ac:	4608      	mov	r0, r1
 80114ae:	602b      	str	r3, [r5, #0]
 80114b0:	f7f4 f873 	bl	800559a <_isatty>
 80114b4:	1c43      	adds	r3, r0, #1
 80114b6:	d102      	bne.n	80114be <_isatty_r+0x1a>
 80114b8:	682b      	ldr	r3, [r5, #0]
 80114ba:	b103      	cbz	r3, 80114be <_isatty_r+0x1a>
 80114bc:	6023      	str	r3, [r4, #0]
 80114be:	bd38      	pop	{r3, r4, r5, pc}
 80114c0:	200021d4 	.word	0x200021d4

080114c4 <fmod>:
 80114c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114c6:	ed2d 8b02 	vpush	{d8}
 80114ca:	ec57 6b10 	vmov	r6, r7, d0
 80114ce:	ec55 4b11 	vmov	r4, r5, d1
 80114d2:	f000 f971 	bl	80117b8 <__ieee754_fmod>
 80114d6:	4622      	mov	r2, r4
 80114d8:	462b      	mov	r3, r5
 80114da:	4630      	mov	r0, r6
 80114dc:	4639      	mov	r1, r7
 80114de:	eeb0 8a40 	vmov.f32	s16, s0
 80114e2:	eef0 8a60 	vmov.f32	s17, s1
 80114e6:	f7ef fb49 	bl	8000b7c <__aeabi_dcmpun>
 80114ea:	b990      	cbnz	r0, 8011512 <fmod+0x4e>
 80114ec:	2200      	movs	r2, #0
 80114ee:	2300      	movs	r3, #0
 80114f0:	4620      	mov	r0, r4
 80114f2:	4629      	mov	r1, r5
 80114f4:	f7ef fb10 	bl	8000b18 <__aeabi_dcmpeq>
 80114f8:	b158      	cbz	r0, 8011512 <fmod+0x4e>
 80114fa:	f7fd ff3b 	bl	800f374 <__errno>
 80114fe:	2321      	movs	r3, #33	; 0x21
 8011500:	6003      	str	r3, [r0, #0]
 8011502:	2200      	movs	r2, #0
 8011504:	2300      	movs	r3, #0
 8011506:	4610      	mov	r0, r2
 8011508:	4619      	mov	r1, r3
 801150a:	f7ef f9c7 	bl	800089c <__aeabi_ddiv>
 801150e:	ec41 0b18 	vmov	d8, r0, r1
 8011512:	eeb0 0a48 	vmov.f32	s0, s16
 8011516:	eef0 0a68 	vmov.f32	s1, s17
 801151a:	ecbd 8b02 	vpop	{d8}
 801151e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011520 <sqrt>:
 8011520:	b538      	push	{r3, r4, r5, lr}
 8011522:	ed2d 8b02 	vpush	{d8}
 8011526:	ec55 4b10 	vmov	r4, r5, d0
 801152a:	f000 f86b 	bl	8011604 <__ieee754_sqrt>
 801152e:	4622      	mov	r2, r4
 8011530:	462b      	mov	r3, r5
 8011532:	4620      	mov	r0, r4
 8011534:	4629      	mov	r1, r5
 8011536:	eeb0 8a40 	vmov.f32	s16, s0
 801153a:	eef0 8a60 	vmov.f32	s17, s1
 801153e:	f7ef fb1d 	bl	8000b7c <__aeabi_dcmpun>
 8011542:	b990      	cbnz	r0, 801156a <sqrt+0x4a>
 8011544:	2200      	movs	r2, #0
 8011546:	2300      	movs	r3, #0
 8011548:	4620      	mov	r0, r4
 801154a:	4629      	mov	r1, r5
 801154c:	f7ef faee 	bl	8000b2c <__aeabi_dcmplt>
 8011550:	b158      	cbz	r0, 801156a <sqrt+0x4a>
 8011552:	f7fd ff0f 	bl	800f374 <__errno>
 8011556:	2321      	movs	r3, #33	; 0x21
 8011558:	6003      	str	r3, [r0, #0]
 801155a:	2200      	movs	r2, #0
 801155c:	2300      	movs	r3, #0
 801155e:	4610      	mov	r0, r2
 8011560:	4619      	mov	r1, r3
 8011562:	f7ef f99b 	bl	800089c <__aeabi_ddiv>
 8011566:	ec41 0b18 	vmov	d8, r0, r1
 801156a:	eeb0 0a48 	vmov.f32	s0, s16
 801156e:	eef0 0a68 	vmov.f32	s1, s17
 8011572:	ecbd 8b02 	vpop	{d8}
 8011576:	bd38      	pop	{r3, r4, r5, pc}

08011578 <sinf>:
 8011578:	ee10 3a10 	vmov	r3, s0
 801157c:	b507      	push	{r0, r1, r2, lr}
 801157e:	4a1f      	ldr	r2, [pc, #124]	; (80115fc <sinf+0x84>)
 8011580:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011584:	4293      	cmp	r3, r2
 8011586:	dc07      	bgt.n	8011598 <sinf+0x20>
 8011588:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8011600 <sinf+0x88>
 801158c:	2000      	movs	r0, #0
 801158e:	b003      	add	sp, #12
 8011590:	f85d eb04 	ldr.w	lr, [sp], #4
 8011594:	f000 ba7c 	b.w	8011a90 <__kernel_sinf>
 8011598:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801159c:	db04      	blt.n	80115a8 <sinf+0x30>
 801159e:	ee30 0a40 	vsub.f32	s0, s0, s0
 80115a2:	b003      	add	sp, #12
 80115a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80115a8:	4668      	mov	r0, sp
 80115aa:	f000 fab9 	bl	8011b20 <__ieee754_rem_pio2f>
 80115ae:	f000 0003 	and.w	r0, r0, #3
 80115b2:	2801      	cmp	r0, #1
 80115b4:	d00a      	beq.n	80115cc <sinf+0x54>
 80115b6:	2802      	cmp	r0, #2
 80115b8:	d00f      	beq.n	80115da <sinf+0x62>
 80115ba:	b9c0      	cbnz	r0, 80115ee <sinf+0x76>
 80115bc:	eddd 0a01 	vldr	s1, [sp, #4]
 80115c0:	ed9d 0a00 	vldr	s0, [sp]
 80115c4:	2001      	movs	r0, #1
 80115c6:	f000 fa63 	bl	8011a90 <__kernel_sinf>
 80115ca:	e7ea      	b.n	80115a2 <sinf+0x2a>
 80115cc:	eddd 0a01 	vldr	s1, [sp, #4]
 80115d0:	ed9d 0a00 	vldr	s0, [sp]
 80115d4:	f000 f9fe 	bl	80119d4 <__kernel_cosf>
 80115d8:	e7e3      	b.n	80115a2 <sinf+0x2a>
 80115da:	eddd 0a01 	vldr	s1, [sp, #4]
 80115de:	ed9d 0a00 	vldr	s0, [sp]
 80115e2:	2001      	movs	r0, #1
 80115e4:	f000 fa54 	bl	8011a90 <__kernel_sinf>
 80115e8:	eeb1 0a40 	vneg.f32	s0, s0
 80115ec:	e7d9      	b.n	80115a2 <sinf+0x2a>
 80115ee:	eddd 0a01 	vldr	s1, [sp, #4]
 80115f2:	ed9d 0a00 	vldr	s0, [sp]
 80115f6:	f000 f9ed 	bl	80119d4 <__kernel_cosf>
 80115fa:	e7f5      	b.n	80115e8 <sinf+0x70>
 80115fc:	3f490fd8 	.word	0x3f490fd8
 8011600:	00000000 	.word	0x00000000

08011604 <__ieee754_sqrt>:
 8011604:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011608:	ec55 4b10 	vmov	r4, r5, d0
 801160c:	4e67      	ldr	r6, [pc, #412]	; (80117ac <__ieee754_sqrt+0x1a8>)
 801160e:	43ae      	bics	r6, r5
 8011610:	ee10 0a10 	vmov	r0, s0
 8011614:	ee10 2a10 	vmov	r2, s0
 8011618:	4629      	mov	r1, r5
 801161a:	462b      	mov	r3, r5
 801161c:	d10d      	bne.n	801163a <__ieee754_sqrt+0x36>
 801161e:	f7ef f813 	bl	8000648 <__aeabi_dmul>
 8011622:	4602      	mov	r2, r0
 8011624:	460b      	mov	r3, r1
 8011626:	4620      	mov	r0, r4
 8011628:	4629      	mov	r1, r5
 801162a:	f7ee fe57 	bl	80002dc <__adddf3>
 801162e:	4604      	mov	r4, r0
 8011630:	460d      	mov	r5, r1
 8011632:	ec45 4b10 	vmov	d0, r4, r5
 8011636:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801163a:	2d00      	cmp	r5, #0
 801163c:	dc0b      	bgt.n	8011656 <__ieee754_sqrt+0x52>
 801163e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011642:	4326      	orrs	r6, r4
 8011644:	d0f5      	beq.n	8011632 <__ieee754_sqrt+0x2e>
 8011646:	b135      	cbz	r5, 8011656 <__ieee754_sqrt+0x52>
 8011648:	f7ee fe46 	bl	80002d8 <__aeabi_dsub>
 801164c:	4602      	mov	r2, r0
 801164e:	460b      	mov	r3, r1
 8011650:	f7ef f924 	bl	800089c <__aeabi_ddiv>
 8011654:	e7eb      	b.n	801162e <__ieee754_sqrt+0x2a>
 8011656:	1509      	asrs	r1, r1, #20
 8011658:	f000 808d 	beq.w	8011776 <__ieee754_sqrt+0x172>
 801165c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011660:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8011664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011668:	07c9      	lsls	r1, r1, #31
 801166a:	bf5c      	itt	pl
 801166c:	005b      	lslpl	r3, r3, #1
 801166e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8011672:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011676:	bf58      	it	pl
 8011678:	0052      	lslpl	r2, r2, #1
 801167a:	2500      	movs	r5, #0
 801167c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8011680:	1076      	asrs	r6, r6, #1
 8011682:	0052      	lsls	r2, r2, #1
 8011684:	f04f 0e16 	mov.w	lr, #22
 8011688:	46ac      	mov	ip, r5
 801168a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801168e:	eb0c 0001 	add.w	r0, ip, r1
 8011692:	4298      	cmp	r0, r3
 8011694:	bfde      	ittt	le
 8011696:	1a1b      	suble	r3, r3, r0
 8011698:	eb00 0c01 	addle.w	ip, r0, r1
 801169c:	186d      	addle	r5, r5, r1
 801169e:	005b      	lsls	r3, r3, #1
 80116a0:	f1be 0e01 	subs.w	lr, lr, #1
 80116a4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80116a8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80116ac:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80116b0:	d1ed      	bne.n	801168e <__ieee754_sqrt+0x8a>
 80116b2:	4674      	mov	r4, lr
 80116b4:	2720      	movs	r7, #32
 80116b6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80116ba:	4563      	cmp	r3, ip
 80116bc:	eb01 000e 	add.w	r0, r1, lr
 80116c0:	dc02      	bgt.n	80116c8 <__ieee754_sqrt+0xc4>
 80116c2:	d113      	bne.n	80116ec <__ieee754_sqrt+0xe8>
 80116c4:	4290      	cmp	r0, r2
 80116c6:	d811      	bhi.n	80116ec <__ieee754_sqrt+0xe8>
 80116c8:	2800      	cmp	r0, #0
 80116ca:	eb00 0e01 	add.w	lr, r0, r1
 80116ce:	da57      	bge.n	8011780 <__ieee754_sqrt+0x17c>
 80116d0:	f1be 0f00 	cmp.w	lr, #0
 80116d4:	db54      	blt.n	8011780 <__ieee754_sqrt+0x17c>
 80116d6:	f10c 0801 	add.w	r8, ip, #1
 80116da:	eba3 030c 	sub.w	r3, r3, ip
 80116de:	4290      	cmp	r0, r2
 80116e0:	bf88      	it	hi
 80116e2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80116e6:	1a12      	subs	r2, r2, r0
 80116e8:	440c      	add	r4, r1
 80116ea:	46c4      	mov	ip, r8
 80116ec:	005b      	lsls	r3, r3, #1
 80116ee:	3f01      	subs	r7, #1
 80116f0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80116f4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80116f8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80116fc:	d1dd      	bne.n	80116ba <__ieee754_sqrt+0xb6>
 80116fe:	4313      	orrs	r3, r2
 8011700:	d01b      	beq.n	801173a <__ieee754_sqrt+0x136>
 8011702:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80117b0 <__ieee754_sqrt+0x1ac>
 8011706:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80117b4 <__ieee754_sqrt+0x1b0>
 801170a:	e9da 0100 	ldrd	r0, r1, [sl]
 801170e:	e9db 2300 	ldrd	r2, r3, [fp]
 8011712:	f7ee fde1 	bl	80002d8 <__aeabi_dsub>
 8011716:	e9da 8900 	ldrd	r8, r9, [sl]
 801171a:	4602      	mov	r2, r0
 801171c:	460b      	mov	r3, r1
 801171e:	4640      	mov	r0, r8
 8011720:	4649      	mov	r1, r9
 8011722:	f7ef fa0d 	bl	8000b40 <__aeabi_dcmple>
 8011726:	b140      	cbz	r0, 801173a <__ieee754_sqrt+0x136>
 8011728:	f1b4 3fff 	cmp.w	r4, #4294967295
 801172c:	e9da 0100 	ldrd	r0, r1, [sl]
 8011730:	e9db 2300 	ldrd	r2, r3, [fp]
 8011734:	d126      	bne.n	8011784 <__ieee754_sqrt+0x180>
 8011736:	3501      	adds	r5, #1
 8011738:	463c      	mov	r4, r7
 801173a:	106a      	asrs	r2, r5, #1
 801173c:	0863      	lsrs	r3, r4, #1
 801173e:	07e9      	lsls	r1, r5, #31
 8011740:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8011744:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8011748:	bf48      	it	mi
 801174a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801174e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8011752:	461c      	mov	r4, r3
 8011754:	e76d      	b.n	8011632 <__ieee754_sqrt+0x2e>
 8011756:	0ad3      	lsrs	r3, r2, #11
 8011758:	3815      	subs	r0, #21
 801175a:	0552      	lsls	r2, r2, #21
 801175c:	2b00      	cmp	r3, #0
 801175e:	d0fa      	beq.n	8011756 <__ieee754_sqrt+0x152>
 8011760:	02dc      	lsls	r4, r3, #11
 8011762:	d50a      	bpl.n	801177a <__ieee754_sqrt+0x176>
 8011764:	f1c1 0420 	rsb	r4, r1, #32
 8011768:	fa22 f404 	lsr.w	r4, r2, r4
 801176c:	1e4d      	subs	r5, r1, #1
 801176e:	408a      	lsls	r2, r1
 8011770:	4323      	orrs	r3, r4
 8011772:	1b41      	subs	r1, r0, r5
 8011774:	e772      	b.n	801165c <__ieee754_sqrt+0x58>
 8011776:	4608      	mov	r0, r1
 8011778:	e7f0      	b.n	801175c <__ieee754_sqrt+0x158>
 801177a:	005b      	lsls	r3, r3, #1
 801177c:	3101      	adds	r1, #1
 801177e:	e7ef      	b.n	8011760 <__ieee754_sqrt+0x15c>
 8011780:	46e0      	mov	r8, ip
 8011782:	e7aa      	b.n	80116da <__ieee754_sqrt+0xd6>
 8011784:	f7ee fdaa 	bl	80002dc <__adddf3>
 8011788:	e9da 8900 	ldrd	r8, r9, [sl]
 801178c:	4602      	mov	r2, r0
 801178e:	460b      	mov	r3, r1
 8011790:	4640      	mov	r0, r8
 8011792:	4649      	mov	r1, r9
 8011794:	f7ef f9ca 	bl	8000b2c <__aeabi_dcmplt>
 8011798:	b120      	cbz	r0, 80117a4 <__ieee754_sqrt+0x1a0>
 801179a:	1ca0      	adds	r0, r4, #2
 801179c:	bf08      	it	eq
 801179e:	3501      	addeq	r5, #1
 80117a0:	3402      	adds	r4, #2
 80117a2:	e7ca      	b.n	801173a <__ieee754_sqrt+0x136>
 80117a4:	3401      	adds	r4, #1
 80117a6:	f024 0401 	bic.w	r4, r4, #1
 80117aa:	e7c6      	b.n	801173a <__ieee754_sqrt+0x136>
 80117ac:	7ff00000 	.word	0x7ff00000
 80117b0:	20000730 	.word	0x20000730
 80117b4:	20000738 	.word	0x20000738

080117b8 <__ieee754_fmod>:
 80117b8:	ec53 2b11 	vmov	r2, r3, d1
 80117bc:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 80117c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80117c4:	ea5c 0402 	orrs.w	r4, ip, r2
 80117c8:	ec51 0b10 	vmov	r0, r1, d0
 80117cc:	ee11 7a10 	vmov	r7, s2
 80117d0:	ee11 ea10 	vmov	lr, s2
 80117d4:	461e      	mov	r6, r3
 80117d6:	d00c      	beq.n	80117f2 <__ieee754_fmod+0x3a>
 80117d8:	4c78      	ldr	r4, [pc, #480]	; (80119bc <__ieee754_fmod+0x204>)
 80117da:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 80117de:	45a0      	cmp	r8, r4
 80117e0:	4689      	mov	r9, r1
 80117e2:	dc06      	bgt.n	80117f2 <__ieee754_fmod+0x3a>
 80117e4:	4254      	negs	r4, r2
 80117e6:	4d76      	ldr	r5, [pc, #472]	; (80119c0 <__ieee754_fmod+0x208>)
 80117e8:	4314      	orrs	r4, r2
 80117ea:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 80117ee:	42ac      	cmp	r4, r5
 80117f0:	d909      	bls.n	8011806 <__ieee754_fmod+0x4e>
 80117f2:	f7ee ff29 	bl	8000648 <__aeabi_dmul>
 80117f6:	4602      	mov	r2, r0
 80117f8:	460b      	mov	r3, r1
 80117fa:	f7ef f84f 	bl	800089c <__aeabi_ddiv>
 80117fe:	ec41 0b10 	vmov	d0, r0, r1
 8011802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011806:	45e0      	cmp	r8, ip
 8011808:	ee10 aa10 	vmov	sl, s0
 801180c:	ee10 4a10 	vmov	r4, s0
 8011810:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8011814:	dc09      	bgt.n	801182a <__ieee754_fmod+0x72>
 8011816:	dbf2      	blt.n	80117fe <__ieee754_fmod+0x46>
 8011818:	4290      	cmp	r0, r2
 801181a:	d3f0      	bcc.n	80117fe <__ieee754_fmod+0x46>
 801181c:	d105      	bne.n	801182a <__ieee754_fmod+0x72>
 801181e:	4b69      	ldr	r3, [pc, #420]	; (80119c4 <__ieee754_fmod+0x20c>)
 8011820:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 8011824:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011828:	e7e9      	b.n	80117fe <__ieee754_fmod+0x46>
 801182a:	4a65      	ldr	r2, [pc, #404]	; (80119c0 <__ieee754_fmod+0x208>)
 801182c:	ea19 0f02 	tst.w	r9, r2
 8011830:	d148      	bne.n	80118c4 <__ieee754_fmod+0x10c>
 8011832:	f1b8 0f00 	cmp.w	r8, #0
 8011836:	d13d      	bne.n	80118b4 <__ieee754_fmod+0xfc>
 8011838:	4963      	ldr	r1, [pc, #396]	; (80119c8 <__ieee754_fmod+0x210>)
 801183a:	4653      	mov	r3, sl
 801183c:	2b00      	cmp	r3, #0
 801183e:	dc36      	bgt.n	80118ae <__ieee754_fmod+0xf6>
 8011840:	4216      	tst	r6, r2
 8011842:	d14f      	bne.n	80118e4 <__ieee754_fmod+0x12c>
 8011844:	f1bc 0f00 	cmp.w	ip, #0
 8011848:	d144      	bne.n	80118d4 <__ieee754_fmod+0x11c>
 801184a:	4a5f      	ldr	r2, [pc, #380]	; (80119c8 <__ieee754_fmod+0x210>)
 801184c:	463b      	mov	r3, r7
 801184e:	2b00      	cmp	r3, #0
 8011850:	dc3d      	bgt.n	80118ce <__ieee754_fmod+0x116>
 8011852:	485e      	ldr	r0, [pc, #376]	; (80119cc <__ieee754_fmod+0x214>)
 8011854:	4281      	cmp	r1, r0
 8011856:	db4a      	blt.n	80118ee <__ieee754_fmod+0x136>
 8011858:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801185c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011860:	485a      	ldr	r0, [pc, #360]	; (80119cc <__ieee754_fmod+0x214>)
 8011862:	4282      	cmp	r2, r0
 8011864:	db57      	blt.n	8011916 <__ieee754_fmod+0x15e>
 8011866:	f3c6 0613 	ubfx	r6, r6, #0, #20
 801186a:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 801186e:	1a89      	subs	r1, r1, r2
 8011870:	1b98      	subs	r0, r3, r6
 8011872:	eba4 070e 	sub.w	r7, r4, lr
 8011876:	2900      	cmp	r1, #0
 8011878:	d162      	bne.n	8011940 <__ieee754_fmod+0x188>
 801187a:	4574      	cmp	r4, lr
 801187c:	bf38      	it	cc
 801187e:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8011882:	2800      	cmp	r0, #0
 8011884:	bfa4      	itt	ge
 8011886:	463c      	movge	r4, r7
 8011888:	4603      	movge	r3, r0
 801188a:	ea53 0104 	orrs.w	r1, r3, r4
 801188e:	d0c6      	beq.n	801181e <__ieee754_fmod+0x66>
 8011890:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011894:	db69      	blt.n	801196a <__ieee754_fmod+0x1b2>
 8011896:	494d      	ldr	r1, [pc, #308]	; (80119cc <__ieee754_fmod+0x214>)
 8011898:	428a      	cmp	r2, r1
 801189a:	db6c      	blt.n	8011976 <__ieee754_fmod+0x1be>
 801189c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80118a0:	432b      	orrs	r3, r5
 80118a2:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 80118a6:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80118aa:	4620      	mov	r0, r4
 80118ac:	e7a7      	b.n	80117fe <__ieee754_fmod+0x46>
 80118ae:	3901      	subs	r1, #1
 80118b0:	005b      	lsls	r3, r3, #1
 80118b2:	e7c3      	b.n	801183c <__ieee754_fmod+0x84>
 80118b4:	4945      	ldr	r1, [pc, #276]	; (80119cc <__ieee754_fmod+0x214>)
 80118b6:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	ddc0      	ble.n	8011840 <__ieee754_fmod+0x88>
 80118be:	3901      	subs	r1, #1
 80118c0:	005b      	lsls	r3, r3, #1
 80118c2:	e7fa      	b.n	80118ba <__ieee754_fmod+0x102>
 80118c4:	ea4f 5128 	mov.w	r1, r8, asr #20
 80118c8:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80118cc:	e7b8      	b.n	8011840 <__ieee754_fmod+0x88>
 80118ce:	3a01      	subs	r2, #1
 80118d0:	005b      	lsls	r3, r3, #1
 80118d2:	e7bc      	b.n	801184e <__ieee754_fmod+0x96>
 80118d4:	4a3d      	ldr	r2, [pc, #244]	; (80119cc <__ieee754_fmod+0x214>)
 80118d6:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 80118da:	2b00      	cmp	r3, #0
 80118dc:	ddb9      	ble.n	8011852 <__ieee754_fmod+0x9a>
 80118de:	3a01      	subs	r2, #1
 80118e0:	005b      	lsls	r3, r3, #1
 80118e2:	e7fa      	b.n	80118da <__ieee754_fmod+0x122>
 80118e4:	ea4f 522c 	mov.w	r2, ip, asr #20
 80118e8:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80118ec:	e7b1      	b.n	8011852 <__ieee754_fmod+0x9a>
 80118ee:	1a40      	subs	r0, r0, r1
 80118f0:	281f      	cmp	r0, #31
 80118f2:	dc0a      	bgt.n	801190a <__ieee754_fmod+0x152>
 80118f4:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 80118f8:	fa08 f800 	lsl.w	r8, r8, r0
 80118fc:	fa2a f303 	lsr.w	r3, sl, r3
 8011900:	ea43 0308 	orr.w	r3, r3, r8
 8011904:	fa0a f400 	lsl.w	r4, sl, r0
 8011908:	e7aa      	b.n	8011860 <__ieee754_fmod+0xa8>
 801190a:	4b31      	ldr	r3, [pc, #196]	; (80119d0 <__ieee754_fmod+0x218>)
 801190c:	1a5b      	subs	r3, r3, r1
 801190e:	fa0a f303 	lsl.w	r3, sl, r3
 8011912:	2400      	movs	r4, #0
 8011914:	e7a4      	b.n	8011860 <__ieee754_fmod+0xa8>
 8011916:	1a80      	subs	r0, r0, r2
 8011918:	281f      	cmp	r0, #31
 801191a:	dc0a      	bgt.n	8011932 <__ieee754_fmod+0x17a>
 801191c:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 8011920:	fa0c fc00 	lsl.w	ip, ip, r0
 8011924:	fa27 f606 	lsr.w	r6, r7, r6
 8011928:	ea46 060c 	orr.w	r6, r6, ip
 801192c:	fa07 fe00 	lsl.w	lr, r7, r0
 8011930:	e79d      	b.n	801186e <__ieee754_fmod+0xb6>
 8011932:	4e27      	ldr	r6, [pc, #156]	; (80119d0 <__ieee754_fmod+0x218>)
 8011934:	1ab6      	subs	r6, r6, r2
 8011936:	fa07 f606 	lsl.w	r6, r7, r6
 801193a:	f04f 0e00 	mov.w	lr, #0
 801193e:	e796      	b.n	801186e <__ieee754_fmod+0xb6>
 8011940:	4574      	cmp	r4, lr
 8011942:	bf38      	it	cc
 8011944:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8011948:	2800      	cmp	r0, #0
 801194a:	da05      	bge.n	8011958 <__ieee754_fmod+0x1a0>
 801194c:	0fe0      	lsrs	r0, r4, #31
 801194e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8011952:	0064      	lsls	r4, r4, #1
 8011954:	3901      	subs	r1, #1
 8011956:	e78b      	b.n	8011870 <__ieee754_fmod+0xb8>
 8011958:	ea50 0307 	orrs.w	r3, r0, r7
 801195c:	f43f af5f 	beq.w	801181e <__ieee754_fmod+0x66>
 8011960:	0ffb      	lsrs	r3, r7, #31
 8011962:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8011966:	007c      	lsls	r4, r7, #1
 8011968:	e7f4      	b.n	8011954 <__ieee754_fmod+0x19c>
 801196a:	0fe1      	lsrs	r1, r4, #31
 801196c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8011970:	0064      	lsls	r4, r4, #1
 8011972:	3a01      	subs	r2, #1
 8011974:	e78c      	b.n	8011890 <__ieee754_fmod+0xd8>
 8011976:	1a89      	subs	r1, r1, r2
 8011978:	2914      	cmp	r1, #20
 801197a:	dc0a      	bgt.n	8011992 <__ieee754_fmod+0x1da>
 801197c:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8011980:	fa03 f202 	lsl.w	r2, r3, r2
 8011984:	40cc      	lsrs	r4, r1
 8011986:	4322      	orrs	r2, r4
 8011988:	410b      	asrs	r3, r1
 801198a:	ea43 0105 	orr.w	r1, r3, r5
 801198e:	4610      	mov	r0, r2
 8011990:	e735      	b.n	80117fe <__ieee754_fmod+0x46>
 8011992:	291f      	cmp	r1, #31
 8011994:	dc07      	bgt.n	80119a6 <__ieee754_fmod+0x1ee>
 8011996:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 801199a:	40cc      	lsrs	r4, r1
 801199c:	fa03 f202 	lsl.w	r2, r3, r2
 80119a0:	4322      	orrs	r2, r4
 80119a2:	462b      	mov	r3, r5
 80119a4:	e7f1      	b.n	801198a <__ieee754_fmod+0x1d2>
 80119a6:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 80119aa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80119ae:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 80119b2:	32e2      	adds	r2, #226	; 0xe2
 80119b4:	fa43 f202 	asr.w	r2, r3, r2
 80119b8:	e7f3      	b.n	80119a2 <__ieee754_fmod+0x1ea>
 80119ba:	bf00      	nop
 80119bc:	7fefffff 	.word	0x7fefffff
 80119c0:	7ff00000 	.word	0x7ff00000
 80119c4:	08012950 	.word	0x08012950
 80119c8:	fffffbed 	.word	0xfffffbed
 80119cc:	fffffc02 	.word	0xfffffc02
 80119d0:	fffffbe2 	.word	0xfffffbe2

080119d4 <__kernel_cosf>:
 80119d4:	ee10 3a10 	vmov	r3, s0
 80119d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80119dc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80119e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80119e4:	da05      	bge.n	80119f2 <__kernel_cosf+0x1e>
 80119e6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80119ea:	ee17 2a90 	vmov	r2, s15
 80119ee:	2a00      	cmp	r2, #0
 80119f0:	d03b      	beq.n	8011a6a <__kernel_cosf+0x96>
 80119f2:	ee20 7a00 	vmul.f32	s14, s0, s0
 80119f6:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8011a70 <__kernel_cosf+0x9c>
 80119fa:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8011a74 <__kernel_cosf+0xa0>
 80119fe:	4a1e      	ldr	r2, [pc, #120]	; (8011a78 <__kernel_cosf+0xa4>)
 8011a00:	eea7 6a27 	vfma.f32	s12, s14, s15
 8011a04:	4293      	cmp	r3, r2
 8011a06:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8011a7c <__kernel_cosf+0xa8>
 8011a0a:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011a0e:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8011a80 <__kernel_cosf+0xac>
 8011a12:	eea7 6a87 	vfma.f32	s12, s15, s14
 8011a16:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8011a84 <__kernel_cosf+0xb0>
 8011a1a:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011a1e:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8011a88 <__kernel_cosf+0xb4>
 8011a22:	eea7 6a87 	vfma.f32	s12, s15, s14
 8011a26:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8011a2a:	ee26 6a07 	vmul.f32	s12, s12, s14
 8011a2e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011a32:	eee7 0a06 	vfma.f32	s1, s14, s12
 8011a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011a3a:	dc04      	bgt.n	8011a46 <__kernel_cosf+0x72>
 8011a3c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8011a40:	ee36 0ae7 	vsub.f32	s0, s13, s15
 8011a44:	4770      	bx	lr
 8011a46:	4a11      	ldr	r2, [pc, #68]	; (8011a8c <__kernel_cosf+0xb8>)
 8011a48:	4293      	cmp	r3, r2
 8011a4a:	bfda      	itte	le
 8011a4c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8011a50:	ee07 3a10 	vmovle	s14, r3
 8011a54:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8011a58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011a5c:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8011a60:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8011a64:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011a68:	4770      	bx	lr
 8011a6a:	eeb0 0a66 	vmov.f32	s0, s13
 8011a6e:	4770      	bx	lr
 8011a70:	ad47d74e 	.word	0xad47d74e
 8011a74:	310f74f6 	.word	0x310f74f6
 8011a78:	3e999999 	.word	0x3e999999
 8011a7c:	b493f27c 	.word	0xb493f27c
 8011a80:	37d00d01 	.word	0x37d00d01
 8011a84:	bab60b61 	.word	0xbab60b61
 8011a88:	3d2aaaab 	.word	0x3d2aaaab
 8011a8c:	3f480000 	.word	0x3f480000

08011a90 <__kernel_sinf>:
 8011a90:	ee10 3a10 	vmov	r3, s0
 8011a94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011a98:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8011a9c:	da04      	bge.n	8011aa8 <__kernel_sinf+0x18>
 8011a9e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8011aa2:	ee17 3a90 	vmov	r3, s15
 8011aa6:	b35b      	cbz	r3, 8011b00 <__kernel_sinf+0x70>
 8011aa8:	ee20 7a00 	vmul.f32	s14, s0, s0
 8011aac:	eddf 7a15 	vldr	s15, [pc, #84]	; 8011b04 <__kernel_sinf+0x74>
 8011ab0:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8011b08 <__kernel_sinf+0x78>
 8011ab4:	eea7 6a27 	vfma.f32	s12, s14, s15
 8011ab8:	eddf 7a14 	vldr	s15, [pc, #80]	; 8011b0c <__kernel_sinf+0x7c>
 8011abc:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011ac0:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8011b10 <__kernel_sinf+0x80>
 8011ac4:	eea7 6a87 	vfma.f32	s12, s15, s14
 8011ac8:	eddf 7a12 	vldr	s15, [pc, #72]	; 8011b14 <__kernel_sinf+0x84>
 8011acc:	ee60 6a07 	vmul.f32	s13, s0, s14
 8011ad0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011ad4:	b930      	cbnz	r0, 8011ae4 <__kernel_sinf+0x54>
 8011ad6:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8011b18 <__kernel_sinf+0x88>
 8011ada:	eea7 6a27 	vfma.f32	s12, s14, s15
 8011ade:	eea6 0a26 	vfma.f32	s0, s12, s13
 8011ae2:	4770      	bx	lr
 8011ae4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8011ae8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8011aec:	eee0 7a86 	vfma.f32	s15, s1, s12
 8011af0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8011af4:	eddf 7a09 	vldr	s15, [pc, #36]	; 8011b1c <__kernel_sinf+0x8c>
 8011af8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8011afc:	ee30 0a60 	vsub.f32	s0, s0, s1
 8011b00:	4770      	bx	lr
 8011b02:	bf00      	nop
 8011b04:	2f2ec9d3 	.word	0x2f2ec9d3
 8011b08:	b2d72f34 	.word	0xb2d72f34
 8011b0c:	3638ef1b 	.word	0x3638ef1b
 8011b10:	b9500d01 	.word	0xb9500d01
 8011b14:	3c088889 	.word	0x3c088889
 8011b18:	be2aaaab 	.word	0xbe2aaaab
 8011b1c:	3e2aaaab 	.word	0x3e2aaaab

08011b20 <__ieee754_rem_pio2f>:
 8011b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b22:	ee10 6a10 	vmov	r6, s0
 8011b26:	4b86      	ldr	r3, [pc, #536]	; (8011d40 <__ieee754_rem_pio2f+0x220>)
 8011b28:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8011b2c:	429d      	cmp	r5, r3
 8011b2e:	b087      	sub	sp, #28
 8011b30:	4604      	mov	r4, r0
 8011b32:	dc05      	bgt.n	8011b40 <__ieee754_rem_pio2f+0x20>
 8011b34:	2300      	movs	r3, #0
 8011b36:	ed80 0a00 	vstr	s0, [r0]
 8011b3a:	6043      	str	r3, [r0, #4]
 8011b3c:	2000      	movs	r0, #0
 8011b3e:	e020      	b.n	8011b82 <__ieee754_rem_pio2f+0x62>
 8011b40:	4b80      	ldr	r3, [pc, #512]	; (8011d44 <__ieee754_rem_pio2f+0x224>)
 8011b42:	429d      	cmp	r5, r3
 8011b44:	dc38      	bgt.n	8011bb8 <__ieee754_rem_pio2f+0x98>
 8011b46:	2e00      	cmp	r6, #0
 8011b48:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8011d48 <__ieee754_rem_pio2f+0x228>
 8011b4c:	4b7f      	ldr	r3, [pc, #508]	; (8011d4c <__ieee754_rem_pio2f+0x22c>)
 8011b4e:	f025 050f 	bic.w	r5, r5, #15
 8011b52:	dd18      	ble.n	8011b86 <__ieee754_rem_pio2f+0x66>
 8011b54:	429d      	cmp	r5, r3
 8011b56:	ee70 7a47 	vsub.f32	s15, s0, s14
 8011b5a:	bf09      	itett	eq
 8011b5c:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8011d50 <__ieee754_rem_pio2f+0x230>
 8011b60:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8011d54 <__ieee754_rem_pio2f+0x234>
 8011b64:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8011b68:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8011d58 <__ieee754_rem_pio2f+0x238>
 8011b6c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8011b70:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011b74:	edc0 6a00 	vstr	s13, [r0]
 8011b78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011b7c:	edc0 7a01 	vstr	s15, [r0, #4]
 8011b80:	2001      	movs	r0, #1
 8011b82:	b007      	add	sp, #28
 8011b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b86:	429d      	cmp	r5, r3
 8011b88:	ee70 7a07 	vadd.f32	s15, s0, s14
 8011b8c:	bf09      	itett	eq
 8011b8e:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8011d50 <__ieee754_rem_pio2f+0x230>
 8011b92:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8011d54 <__ieee754_rem_pio2f+0x234>
 8011b96:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8011b9a:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8011d58 <__ieee754_rem_pio2f+0x238>
 8011b9e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8011ba2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011ba6:	edc0 6a00 	vstr	s13, [r0]
 8011baa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011bae:	edc0 7a01 	vstr	s15, [r0, #4]
 8011bb2:	f04f 30ff 	mov.w	r0, #4294967295
 8011bb6:	e7e4      	b.n	8011b82 <__ieee754_rem_pio2f+0x62>
 8011bb8:	4b68      	ldr	r3, [pc, #416]	; (8011d5c <__ieee754_rem_pio2f+0x23c>)
 8011bba:	429d      	cmp	r5, r3
 8011bbc:	dc71      	bgt.n	8011ca2 <__ieee754_rem_pio2f+0x182>
 8011bbe:	f000 f8db 	bl	8011d78 <fabsf>
 8011bc2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8011d60 <__ieee754_rem_pio2f+0x240>
 8011bc6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011bca:	eee0 7a07 	vfma.f32	s15, s0, s14
 8011bce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011bd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8011bd6:	ee17 0a90 	vmov	r0, s15
 8011bda:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8011d48 <__ieee754_rem_pio2f+0x228>
 8011bde:	eea7 0a67 	vfms.f32	s0, s14, s15
 8011be2:	281f      	cmp	r0, #31
 8011be4:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8011d54 <__ieee754_rem_pio2f+0x234>
 8011be8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011bec:	eeb1 6a47 	vneg.f32	s12, s14
 8011bf0:	ee70 6a67 	vsub.f32	s13, s0, s15
 8011bf4:	ee16 2a90 	vmov	r2, s13
 8011bf8:	dc1c      	bgt.n	8011c34 <__ieee754_rem_pio2f+0x114>
 8011bfa:	495a      	ldr	r1, [pc, #360]	; (8011d64 <__ieee754_rem_pio2f+0x244>)
 8011bfc:	1e47      	subs	r7, r0, #1
 8011bfe:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8011c02:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8011c06:	428b      	cmp	r3, r1
 8011c08:	d014      	beq.n	8011c34 <__ieee754_rem_pio2f+0x114>
 8011c0a:	6022      	str	r2, [r4, #0]
 8011c0c:	ed94 7a00 	vldr	s14, [r4]
 8011c10:	ee30 0a47 	vsub.f32	s0, s0, s14
 8011c14:	2e00      	cmp	r6, #0
 8011c16:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011c1a:	ed84 0a01 	vstr	s0, [r4, #4]
 8011c1e:	dab0      	bge.n	8011b82 <__ieee754_rem_pio2f+0x62>
 8011c20:	eeb1 7a47 	vneg.f32	s14, s14
 8011c24:	eeb1 0a40 	vneg.f32	s0, s0
 8011c28:	ed84 7a00 	vstr	s14, [r4]
 8011c2c:	ed84 0a01 	vstr	s0, [r4, #4]
 8011c30:	4240      	negs	r0, r0
 8011c32:	e7a6      	b.n	8011b82 <__ieee754_rem_pio2f+0x62>
 8011c34:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8011c38:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 8011c3c:	2908      	cmp	r1, #8
 8011c3e:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8011c42:	dde2      	ble.n	8011c0a <__ieee754_rem_pio2f+0xea>
 8011c44:	eddf 5a42 	vldr	s11, [pc, #264]	; 8011d50 <__ieee754_rem_pio2f+0x230>
 8011c48:	eef0 6a40 	vmov.f32	s13, s0
 8011c4c:	eee6 6a25 	vfma.f32	s13, s12, s11
 8011c50:	ee70 7a66 	vsub.f32	s15, s0, s13
 8011c54:	eee6 7a25 	vfma.f32	s15, s12, s11
 8011c58:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8011d58 <__ieee754_rem_pio2f+0x238>
 8011c5c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8011c60:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8011c64:	ee15 2a90 	vmov	r2, s11
 8011c68:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8011c6c:	1a5b      	subs	r3, r3, r1
 8011c6e:	2b19      	cmp	r3, #25
 8011c70:	dc04      	bgt.n	8011c7c <__ieee754_rem_pio2f+0x15c>
 8011c72:	edc4 5a00 	vstr	s11, [r4]
 8011c76:	eeb0 0a66 	vmov.f32	s0, s13
 8011c7a:	e7c7      	b.n	8011c0c <__ieee754_rem_pio2f+0xec>
 8011c7c:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8011d68 <__ieee754_rem_pio2f+0x248>
 8011c80:	eeb0 0a66 	vmov.f32	s0, s13
 8011c84:	eea6 0a25 	vfma.f32	s0, s12, s11
 8011c88:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8011c8c:	eddf 6a37 	vldr	s13, [pc, #220]	; 8011d6c <__ieee754_rem_pio2f+0x24c>
 8011c90:	eee6 7a25 	vfma.f32	s15, s12, s11
 8011c94:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8011c98:	ee30 7a67 	vsub.f32	s14, s0, s15
 8011c9c:	ed84 7a00 	vstr	s14, [r4]
 8011ca0:	e7b4      	b.n	8011c0c <__ieee754_rem_pio2f+0xec>
 8011ca2:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8011ca6:	db06      	blt.n	8011cb6 <__ieee754_rem_pio2f+0x196>
 8011ca8:	ee70 7a40 	vsub.f32	s15, s0, s0
 8011cac:	edc0 7a01 	vstr	s15, [r0, #4]
 8011cb0:	edc0 7a00 	vstr	s15, [r0]
 8011cb4:	e742      	b.n	8011b3c <__ieee754_rem_pio2f+0x1c>
 8011cb6:	15ea      	asrs	r2, r5, #23
 8011cb8:	3a86      	subs	r2, #134	; 0x86
 8011cba:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8011cbe:	ee07 3a90 	vmov	s15, r3
 8011cc2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8011cc6:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8011d70 <__ieee754_rem_pio2f+0x250>
 8011cca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011cce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011cd2:	ed8d 7a03 	vstr	s14, [sp, #12]
 8011cd6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011cda:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8011cde:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011ce2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011ce6:	ed8d 7a04 	vstr	s14, [sp, #16]
 8011cea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011cee:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cf6:	edcd 7a05 	vstr	s15, [sp, #20]
 8011cfa:	d11e      	bne.n	8011d3a <__ieee754_rem_pio2f+0x21a>
 8011cfc:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8011d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d04:	bf14      	ite	ne
 8011d06:	2302      	movne	r3, #2
 8011d08:	2301      	moveq	r3, #1
 8011d0a:	491a      	ldr	r1, [pc, #104]	; (8011d74 <__ieee754_rem_pio2f+0x254>)
 8011d0c:	9101      	str	r1, [sp, #4]
 8011d0e:	2102      	movs	r1, #2
 8011d10:	9100      	str	r1, [sp, #0]
 8011d12:	a803      	add	r0, sp, #12
 8011d14:	4621      	mov	r1, r4
 8011d16:	f000 f837 	bl	8011d88 <__kernel_rem_pio2f>
 8011d1a:	2e00      	cmp	r6, #0
 8011d1c:	f6bf af31 	bge.w	8011b82 <__ieee754_rem_pio2f+0x62>
 8011d20:	edd4 7a00 	vldr	s15, [r4]
 8011d24:	eef1 7a67 	vneg.f32	s15, s15
 8011d28:	edc4 7a00 	vstr	s15, [r4]
 8011d2c:	edd4 7a01 	vldr	s15, [r4, #4]
 8011d30:	eef1 7a67 	vneg.f32	s15, s15
 8011d34:	edc4 7a01 	vstr	s15, [r4, #4]
 8011d38:	e77a      	b.n	8011c30 <__ieee754_rem_pio2f+0x110>
 8011d3a:	2303      	movs	r3, #3
 8011d3c:	e7e5      	b.n	8011d0a <__ieee754_rem_pio2f+0x1ea>
 8011d3e:	bf00      	nop
 8011d40:	3f490fd8 	.word	0x3f490fd8
 8011d44:	4016cbe3 	.word	0x4016cbe3
 8011d48:	3fc90f80 	.word	0x3fc90f80
 8011d4c:	3fc90fd0 	.word	0x3fc90fd0
 8011d50:	37354400 	.word	0x37354400
 8011d54:	37354443 	.word	0x37354443
 8011d58:	2e85a308 	.word	0x2e85a308
 8011d5c:	43490f80 	.word	0x43490f80
 8011d60:	3f22f984 	.word	0x3f22f984
 8011d64:	08012960 	.word	0x08012960
 8011d68:	2e85a300 	.word	0x2e85a300
 8011d6c:	248d3132 	.word	0x248d3132
 8011d70:	43800000 	.word	0x43800000
 8011d74:	080129e0 	.word	0x080129e0

08011d78 <fabsf>:
 8011d78:	ee10 3a10 	vmov	r3, s0
 8011d7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011d80:	ee00 3a10 	vmov	s0, r3
 8011d84:	4770      	bx	lr
	...

08011d88 <__kernel_rem_pio2f>:
 8011d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d8c:	ed2d 8b04 	vpush	{d8-d9}
 8011d90:	b0d9      	sub	sp, #356	; 0x164
 8011d92:	4688      	mov	r8, r1
 8011d94:	9002      	str	r0, [sp, #8]
 8011d96:	49b8      	ldr	r1, [pc, #736]	; (8012078 <__kernel_rem_pio2f+0x2f0>)
 8011d98:	9866      	ldr	r0, [sp, #408]	; 0x198
 8011d9a:	9301      	str	r3, [sp, #4]
 8011d9c:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8011da0:	9901      	ldr	r1, [sp, #4]
 8011da2:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 8011da4:	f101 3bff 	add.w	fp, r1, #4294967295
 8011da8:	1d11      	adds	r1, r2, #4
 8011daa:	db25      	blt.n	8011df8 <__kernel_rem_pio2f+0x70>
 8011dac:	1ed0      	subs	r0, r2, #3
 8011dae:	bf48      	it	mi
 8011db0:	1d10      	addmi	r0, r2, #4
 8011db2:	10c0      	asrs	r0, r0, #3
 8011db4:	1c45      	adds	r5, r0, #1
 8011db6:	00e9      	lsls	r1, r5, #3
 8011db8:	eba0 070b 	sub.w	r7, r0, fp
 8011dbc:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8012088 <__kernel_rem_pio2f+0x300>
 8011dc0:	9103      	str	r1, [sp, #12]
 8011dc2:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8011dc6:	eb0a 0c0b 	add.w	ip, sl, fp
 8011dca:	ae1c      	add	r6, sp, #112	; 0x70
 8011dcc:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 8011dd0:	2400      	movs	r4, #0
 8011dd2:	4564      	cmp	r4, ip
 8011dd4:	dd12      	ble.n	8011dfc <__kernel_rem_pio2f+0x74>
 8011dd6:	9901      	ldr	r1, [sp, #4]
 8011dd8:	ac1c      	add	r4, sp, #112	; 0x70
 8011dda:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8011dde:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8011de2:	f04f 0c00 	mov.w	ip, #0
 8011de6:	45d4      	cmp	ip, sl
 8011de8:	dc27      	bgt.n	8011e3a <__kernel_rem_pio2f+0xb2>
 8011dea:	f8dd e008 	ldr.w	lr, [sp, #8]
 8011dee:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8012088 <__kernel_rem_pio2f+0x300>
 8011df2:	4627      	mov	r7, r4
 8011df4:	2600      	movs	r6, #0
 8011df6:	e016      	b.n	8011e26 <__kernel_rem_pio2f+0x9e>
 8011df8:	2000      	movs	r0, #0
 8011dfa:	e7db      	b.n	8011db4 <__kernel_rem_pio2f+0x2c>
 8011dfc:	42e7      	cmn	r7, r4
 8011dfe:	bf5d      	ittte	pl
 8011e00:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 8011e04:	ee07 1a90 	vmovpl	s15, r1
 8011e08:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8011e0c:	eef0 7a47 	vmovmi.f32	s15, s14
 8011e10:	ece6 7a01 	vstmia	r6!, {s15}
 8011e14:	3401      	adds	r4, #1
 8011e16:	e7dc      	b.n	8011dd2 <__kernel_rem_pio2f+0x4a>
 8011e18:	ecfe 6a01 	vldmia	lr!, {s13}
 8011e1c:	ed97 7a00 	vldr	s14, [r7]
 8011e20:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011e24:	3601      	adds	r6, #1
 8011e26:	455e      	cmp	r6, fp
 8011e28:	f1a7 0704 	sub.w	r7, r7, #4
 8011e2c:	ddf4      	ble.n	8011e18 <__kernel_rem_pio2f+0x90>
 8011e2e:	ece9 7a01 	vstmia	r9!, {s15}
 8011e32:	f10c 0c01 	add.w	ip, ip, #1
 8011e36:	3404      	adds	r4, #4
 8011e38:	e7d5      	b.n	8011de6 <__kernel_rem_pio2f+0x5e>
 8011e3a:	a908      	add	r1, sp, #32
 8011e3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011e40:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8011e44:	eddf 8a8f 	vldr	s17, [pc, #572]	; 8012084 <__kernel_rem_pio2f+0x2fc>
 8011e48:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 8012080 <__kernel_rem_pio2f+0x2f8>
 8011e4c:	9105      	str	r1, [sp, #20]
 8011e4e:	9304      	str	r3, [sp, #16]
 8011e50:	4656      	mov	r6, sl
 8011e52:	00b3      	lsls	r3, r6, #2
 8011e54:	9306      	str	r3, [sp, #24]
 8011e56:	ab58      	add	r3, sp, #352	; 0x160
 8011e58:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8011e5c:	ac08      	add	r4, sp, #32
 8011e5e:	ab44      	add	r3, sp, #272	; 0x110
 8011e60:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8011e64:	46a4      	mov	ip, r4
 8011e66:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8011e6a:	4637      	mov	r7, r6
 8011e6c:	2f00      	cmp	r7, #0
 8011e6e:	f1a0 0004 	sub.w	r0, r0, #4
 8011e72:	dc4a      	bgt.n	8011f0a <__kernel_rem_pio2f+0x182>
 8011e74:	4628      	mov	r0, r5
 8011e76:	9207      	str	r2, [sp, #28]
 8011e78:	f000 f9f8 	bl	801226c <scalbnf>
 8011e7c:	eeb0 8a40 	vmov.f32	s16, s0
 8011e80:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8011e84:	ee28 0a00 	vmul.f32	s0, s16, s0
 8011e88:	f000 fa56 	bl	8012338 <floorf>
 8011e8c:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8011e90:	eea0 8a67 	vfms.f32	s16, s0, s15
 8011e94:	2d00      	cmp	r5, #0
 8011e96:	9a07      	ldr	r2, [sp, #28]
 8011e98:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8011e9c:	ee17 9a90 	vmov	r9, s15
 8011ea0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011ea4:	ee38 8a67 	vsub.f32	s16, s16, s15
 8011ea8:	dd41      	ble.n	8011f2e <__kernel_rem_pio2f+0x1a6>
 8011eaa:	f106 3cff 	add.w	ip, r6, #4294967295
 8011eae:	ab08      	add	r3, sp, #32
 8011eb0:	f1c5 0e08 	rsb	lr, r5, #8
 8011eb4:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8011eb8:	fa47 f00e 	asr.w	r0, r7, lr
 8011ebc:	4481      	add	r9, r0
 8011ebe:	fa00 f00e 	lsl.w	r0, r0, lr
 8011ec2:	1a3f      	subs	r7, r7, r0
 8011ec4:	f1c5 0007 	rsb	r0, r5, #7
 8011ec8:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8011ecc:	4107      	asrs	r7, r0
 8011ece:	2f00      	cmp	r7, #0
 8011ed0:	dd3c      	ble.n	8011f4c <__kernel_rem_pio2f+0x1c4>
 8011ed2:	f04f 0e00 	mov.w	lr, #0
 8011ed6:	f109 0901 	add.w	r9, r9, #1
 8011eda:	4671      	mov	r1, lr
 8011edc:	4576      	cmp	r6, lr
 8011ede:	dc67      	bgt.n	8011fb0 <__kernel_rem_pio2f+0x228>
 8011ee0:	2d00      	cmp	r5, #0
 8011ee2:	dd03      	ble.n	8011eec <__kernel_rem_pio2f+0x164>
 8011ee4:	2d01      	cmp	r5, #1
 8011ee6:	d074      	beq.n	8011fd2 <__kernel_rem_pio2f+0x24a>
 8011ee8:	2d02      	cmp	r5, #2
 8011eea:	d07b      	beq.n	8011fe4 <__kernel_rem_pio2f+0x25c>
 8011eec:	2f02      	cmp	r7, #2
 8011eee:	d12d      	bne.n	8011f4c <__kernel_rem_pio2f+0x1c4>
 8011ef0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8011ef4:	ee30 8a48 	vsub.f32	s16, s0, s16
 8011ef8:	b341      	cbz	r1, 8011f4c <__kernel_rem_pio2f+0x1c4>
 8011efa:	4628      	mov	r0, r5
 8011efc:	9207      	str	r2, [sp, #28]
 8011efe:	f000 f9b5 	bl	801226c <scalbnf>
 8011f02:	9a07      	ldr	r2, [sp, #28]
 8011f04:	ee38 8a40 	vsub.f32	s16, s16, s0
 8011f08:	e020      	b.n	8011f4c <__kernel_rem_pio2f+0x1c4>
 8011f0a:	ee60 7a28 	vmul.f32	s15, s0, s17
 8011f0e:	3f01      	subs	r7, #1
 8011f10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011f14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011f18:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8011f1c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8011f20:	ecac 0a01 	vstmia	ip!, {s0}
 8011f24:	ed90 0a00 	vldr	s0, [r0]
 8011f28:	ee37 0a80 	vadd.f32	s0, s15, s0
 8011f2c:	e79e      	b.n	8011e6c <__kernel_rem_pio2f+0xe4>
 8011f2e:	d105      	bne.n	8011f3c <__kernel_rem_pio2f+0x1b4>
 8011f30:	1e70      	subs	r0, r6, #1
 8011f32:	ab08      	add	r3, sp, #32
 8011f34:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8011f38:	11ff      	asrs	r7, r7, #7
 8011f3a:	e7c8      	b.n	8011ece <__kernel_rem_pio2f+0x146>
 8011f3c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011f40:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8011f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f48:	da30      	bge.n	8011fac <__kernel_rem_pio2f+0x224>
 8011f4a:	2700      	movs	r7, #0
 8011f4c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8011f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f54:	f040 809a 	bne.w	801208c <__kernel_rem_pio2f+0x304>
 8011f58:	1e74      	subs	r4, r6, #1
 8011f5a:	46a4      	mov	ip, r4
 8011f5c:	2100      	movs	r1, #0
 8011f5e:	45d4      	cmp	ip, sl
 8011f60:	da47      	bge.n	8011ff2 <__kernel_rem_pio2f+0x26a>
 8011f62:	2900      	cmp	r1, #0
 8011f64:	d063      	beq.n	801202e <__kernel_rem_pio2f+0x2a6>
 8011f66:	ab08      	add	r3, sp, #32
 8011f68:	3d08      	subs	r5, #8
 8011f6a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d07f      	beq.n	8012072 <__kernel_rem_pio2f+0x2ea>
 8011f72:	4628      	mov	r0, r5
 8011f74:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8011f78:	f000 f978 	bl	801226c <scalbnf>
 8011f7c:	1c63      	adds	r3, r4, #1
 8011f7e:	aa44      	add	r2, sp, #272	; 0x110
 8011f80:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8012084 <__kernel_rem_pio2f+0x2fc>
 8011f84:	0099      	lsls	r1, r3, #2
 8011f86:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8011f8a:	4623      	mov	r3, r4
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	f280 80ad 	bge.w	80120ec <__kernel_rem_pio2f+0x364>
 8011f92:	4623      	mov	r3, r4
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	f2c0 80cb 	blt.w	8012130 <__kernel_rem_pio2f+0x3a8>
 8011f9a:	aa44      	add	r2, sp, #272	; 0x110
 8011f9c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8011fa0:	4e36      	ldr	r6, [pc, #216]	; (801207c <__kernel_rem_pio2f+0x2f4>)
 8011fa2:	eddf 7a39 	vldr	s15, [pc, #228]	; 8012088 <__kernel_rem_pio2f+0x300>
 8011fa6:	2000      	movs	r0, #0
 8011fa8:	1ae2      	subs	r2, r4, r3
 8011faa:	e0b6      	b.n	801211a <__kernel_rem_pio2f+0x392>
 8011fac:	2702      	movs	r7, #2
 8011fae:	e790      	b.n	8011ed2 <__kernel_rem_pio2f+0x14a>
 8011fb0:	6820      	ldr	r0, [r4, #0]
 8011fb2:	b949      	cbnz	r1, 8011fc8 <__kernel_rem_pio2f+0x240>
 8011fb4:	b118      	cbz	r0, 8011fbe <__kernel_rem_pio2f+0x236>
 8011fb6:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8011fba:	6020      	str	r0, [r4, #0]
 8011fbc:	2001      	movs	r0, #1
 8011fbe:	f10e 0e01 	add.w	lr, lr, #1
 8011fc2:	3404      	adds	r4, #4
 8011fc4:	4601      	mov	r1, r0
 8011fc6:	e789      	b.n	8011edc <__kernel_rem_pio2f+0x154>
 8011fc8:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8011fcc:	6020      	str	r0, [r4, #0]
 8011fce:	4608      	mov	r0, r1
 8011fd0:	e7f5      	b.n	8011fbe <__kernel_rem_pio2f+0x236>
 8011fd2:	1e74      	subs	r4, r6, #1
 8011fd4:	ab08      	add	r3, sp, #32
 8011fd6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011fda:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8011fde:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011fe2:	e783      	b.n	8011eec <__kernel_rem_pio2f+0x164>
 8011fe4:	1e74      	subs	r4, r6, #1
 8011fe6:	ab08      	add	r3, sp, #32
 8011fe8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011fec:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8011ff0:	e7f5      	b.n	8011fde <__kernel_rem_pio2f+0x256>
 8011ff2:	ab08      	add	r3, sp, #32
 8011ff4:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8011ff8:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011ffc:	4301      	orrs	r1, r0
 8011ffe:	e7ae      	b.n	8011f5e <__kernel_rem_pio2f+0x1d6>
 8012000:	3001      	adds	r0, #1
 8012002:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 8012006:	2f00      	cmp	r7, #0
 8012008:	d0fa      	beq.n	8012000 <__kernel_rem_pio2f+0x278>
 801200a:	9b06      	ldr	r3, [sp, #24]
 801200c:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8012010:	eb0d 0403 	add.w	r4, sp, r3
 8012014:	9b01      	ldr	r3, [sp, #4]
 8012016:	18f7      	adds	r7, r6, r3
 8012018:	ab1c      	add	r3, sp, #112	; 0x70
 801201a:	f106 0c01 	add.w	ip, r6, #1
 801201e:	3c4c      	subs	r4, #76	; 0x4c
 8012020:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012024:	4430      	add	r0, r6
 8012026:	4560      	cmp	r0, ip
 8012028:	da04      	bge.n	8012034 <__kernel_rem_pio2f+0x2ac>
 801202a:	4606      	mov	r6, r0
 801202c:	e711      	b.n	8011e52 <__kernel_rem_pio2f+0xca>
 801202e:	9c05      	ldr	r4, [sp, #20]
 8012030:	2001      	movs	r0, #1
 8012032:	e7e6      	b.n	8012002 <__kernel_rem_pio2f+0x27a>
 8012034:	9b04      	ldr	r3, [sp, #16]
 8012036:	f8dd e008 	ldr.w	lr, [sp, #8]
 801203a:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801203e:	9306      	str	r3, [sp, #24]
 8012040:	ee07 3a90 	vmov	s15, r3
 8012044:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012048:	2600      	movs	r6, #0
 801204a:	ece7 7a01 	vstmia	r7!, {s15}
 801204e:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8012088 <__kernel_rem_pio2f+0x300>
 8012052:	46b9      	mov	r9, r7
 8012054:	455e      	cmp	r6, fp
 8012056:	dd04      	ble.n	8012062 <__kernel_rem_pio2f+0x2da>
 8012058:	ece4 7a01 	vstmia	r4!, {s15}
 801205c:	f10c 0c01 	add.w	ip, ip, #1
 8012060:	e7e1      	b.n	8012026 <__kernel_rem_pio2f+0x29e>
 8012062:	ecfe 6a01 	vldmia	lr!, {s13}
 8012066:	ed39 7a01 	vldmdb	r9!, {s14}
 801206a:	3601      	adds	r6, #1
 801206c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012070:	e7f0      	b.n	8012054 <__kernel_rem_pio2f+0x2cc>
 8012072:	3c01      	subs	r4, #1
 8012074:	e777      	b.n	8011f66 <__kernel_rem_pio2f+0x1de>
 8012076:	bf00      	nop
 8012078:	08012d24 	.word	0x08012d24
 801207c:	08012cf8 	.word	0x08012cf8
 8012080:	43800000 	.word	0x43800000
 8012084:	3b800000 	.word	0x3b800000
 8012088:	00000000 	.word	0x00000000
 801208c:	9b03      	ldr	r3, [sp, #12]
 801208e:	eeb0 0a48 	vmov.f32	s0, s16
 8012092:	1a98      	subs	r0, r3, r2
 8012094:	f000 f8ea 	bl	801226c <scalbnf>
 8012098:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8012080 <__kernel_rem_pio2f+0x2f8>
 801209c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80120a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120a4:	db19      	blt.n	80120da <__kernel_rem_pio2f+0x352>
 80120a6:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8012084 <__kernel_rem_pio2f+0x2fc>
 80120aa:	ee60 7a27 	vmul.f32	s15, s0, s15
 80120ae:	aa08      	add	r2, sp, #32
 80120b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80120b4:	1c74      	adds	r4, r6, #1
 80120b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80120ba:	3508      	adds	r5, #8
 80120bc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80120c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80120c4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80120c8:	ee10 3a10 	vmov	r3, s0
 80120cc:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80120d0:	ee17 3a90 	vmov	r3, s15
 80120d4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80120d8:	e74b      	b.n	8011f72 <__kernel_rem_pio2f+0x1ea>
 80120da:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80120de:	aa08      	add	r2, sp, #32
 80120e0:	ee10 3a10 	vmov	r3, s0
 80120e4:	4634      	mov	r4, r6
 80120e6:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80120ea:	e742      	b.n	8011f72 <__kernel_rem_pio2f+0x1ea>
 80120ec:	a808      	add	r0, sp, #32
 80120ee:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80120f2:	9001      	str	r0, [sp, #4]
 80120f4:	ee07 0a90 	vmov	s15, r0
 80120f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80120fc:	3b01      	subs	r3, #1
 80120fe:	ee67 7a80 	vmul.f32	s15, s15, s0
 8012102:	ee20 0a07 	vmul.f32	s0, s0, s14
 8012106:	ed62 7a01 	vstmdb	r2!, {s15}
 801210a:	e73f      	b.n	8011f8c <__kernel_rem_pio2f+0x204>
 801210c:	ecf6 6a01 	vldmia	r6!, {s13}
 8012110:	ecb5 7a01 	vldmia	r5!, {s14}
 8012114:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012118:	3001      	adds	r0, #1
 801211a:	4550      	cmp	r0, sl
 801211c:	dc01      	bgt.n	8012122 <__kernel_rem_pio2f+0x39a>
 801211e:	4290      	cmp	r0, r2
 8012120:	ddf4      	ble.n	801210c <__kernel_rem_pio2f+0x384>
 8012122:	a858      	add	r0, sp, #352	; 0x160
 8012124:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8012128:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 801212c:	3b01      	subs	r3, #1
 801212e:	e731      	b.n	8011f94 <__kernel_rem_pio2f+0x20c>
 8012130:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8012132:	2b02      	cmp	r3, #2
 8012134:	dc09      	bgt.n	801214a <__kernel_rem_pio2f+0x3c2>
 8012136:	2b00      	cmp	r3, #0
 8012138:	dc2b      	bgt.n	8012192 <__kernel_rem_pio2f+0x40a>
 801213a:	d044      	beq.n	80121c6 <__kernel_rem_pio2f+0x43e>
 801213c:	f009 0007 	and.w	r0, r9, #7
 8012140:	b059      	add	sp, #356	; 0x164
 8012142:	ecbd 8b04 	vpop	{d8-d9}
 8012146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801214a:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801214c:	2b03      	cmp	r3, #3
 801214e:	d1f5      	bne.n	801213c <__kernel_rem_pio2f+0x3b4>
 8012150:	aa30      	add	r2, sp, #192	; 0xc0
 8012152:	1f0b      	subs	r3, r1, #4
 8012154:	4413      	add	r3, r2
 8012156:	461a      	mov	r2, r3
 8012158:	4620      	mov	r0, r4
 801215a:	2800      	cmp	r0, #0
 801215c:	f1a2 0204 	sub.w	r2, r2, #4
 8012160:	dc52      	bgt.n	8012208 <__kernel_rem_pio2f+0x480>
 8012162:	4622      	mov	r2, r4
 8012164:	2a01      	cmp	r2, #1
 8012166:	f1a3 0304 	sub.w	r3, r3, #4
 801216a:	dc5d      	bgt.n	8012228 <__kernel_rem_pio2f+0x4a0>
 801216c:	ab30      	add	r3, sp, #192	; 0xc0
 801216e:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8012088 <__kernel_rem_pio2f+0x300>
 8012172:	440b      	add	r3, r1
 8012174:	2c01      	cmp	r4, #1
 8012176:	dc67      	bgt.n	8012248 <__kernel_rem_pio2f+0x4c0>
 8012178:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801217c:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8012180:	2f00      	cmp	r7, #0
 8012182:	d167      	bne.n	8012254 <__kernel_rem_pio2f+0x4cc>
 8012184:	edc8 6a00 	vstr	s13, [r8]
 8012188:	ed88 7a01 	vstr	s14, [r8, #4]
 801218c:	edc8 7a02 	vstr	s15, [r8, #8]
 8012190:	e7d4      	b.n	801213c <__kernel_rem_pio2f+0x3b4>
 8012192:	ab30      	add	r3, sp, #192	; 0xc0
 8012194:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 8012088 <__kernel_rem_pio2f+0x300>
 8012198:	440b      	add	r3, r1
 801219a:	4622      	mov	r2, r4
 801219c:	2a00      	cmp	r2, #0
 801219e:	da24      	bge.n	80121ea <__kernel_rem_pio2f+0x462>
 80121a0:	b34f      	cbz	r7, 80121f6 <__kernel_rem_pio2f+0x46e>
 80121a2:	eef1 7a47 	vneg.f32	s15, s14
 80121a6:	edc8 7a00 	vstr	s15, [r8]
 80121aa:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 80121ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80121b2:	aa31      	add	r2, sp, #196	; 0xc4
 80121b4:	2301      	movs	r3, #1
 80121b6:	429c      	cmp	r4, r3
 80121b8:	da20      	bge.n	80121fc <__kernel_rem_pio2f+0x474>
 80121ba:	b10f      	cbz	r7, 80121c0 <__kernel_rem_pio2f+0x438>
 80121bc:	eef1 7a67 	vneg.f32	s15, s15
 80121c0:	edc8 7a01 	vstr	s15, [r8, #4]
 80121c4:	e7ba      	b.n	801213c <__kernel_rem_pio2f+0x3b4>
 80121c6:	ab30      	add	r3, sp, #192	; 0xc0
 80121c8:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 8012088 <__kernel_rem_pio2f+0x300>
 80121cc:	440b      	add	r3, r1
 80121ce:	2c00      	cmp	r4, #0
 80121d0:	da05      	bge.n	80121de <__kernel_rem_pio2f+0x456>
 80121d2:	b10f      	cbz	r7, 80121d8 <__kernel_rem_pio2f+0x450>
 80121d4:	eef1 7a67 	vneg.f32	s15, s15
 80121d8:	edc8 7a00 	vstr	s15, [r8]
 80121dc:	e7ae      	b.n	801213c <__kernel_rem_pio2f+0x3b4>
 80121de:	ed33 7a01 	vldmdb	r3!, {s14}
 80121e2:	3c01      	subs	r4, #1
 80121e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80121e8:	e7f1      	b.n	80121ce <__kernel_rem_pio2f+0x446>
 80121ea:	ed73 7a01 	vldmdb	r3!, {s15}
 80121ee:	3a01      	subs	r2, #1
 80121f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80121f4:	e7d2      	b.n	801219c <__kernel_rem_pio2f+0x414>
 80121f6:	eef0 7a47 	vmov.f32	s15, s14
 80121fa:	e7d4      	b.n	80121a6 <__kernel_rem_pio2f+0x41e>
 80121fc:	ecb2 7a01 	vldmia	r2!, {s14}
 8012200:	3301      	adds	r3, #1
 8012202:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012206:	e7d6      	b.n	80121b6 <__kernel_rem_pio2f+0x42e>
 8012208:	edd2 7a00 	vldr	s15, [r2]
 801220c:	edd2 6a01 	vldr	s13, [r2, #4]
 8012210:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8012214:	3801      	subs	r0, #1
 8012216:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801221a:	ed82 7a00 	vstr	s14, [r2]
 801221e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012222:	edc2 7a01 	vstr	s15, [r2, #4]
 8012226:	e798      	b.n	801215a <__kernel_rem_pio2f+0x3d2>
 8012228:	edd3 7a00 	vldr	s15, [r3]
 801222c:	edd3 6a01 	vldr	s13, [r3, #4]
 8012230:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8012234:	3a01      	subs	r2, #1
 8012236:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801223a:	ed83 7a00 	vstr	s14, [r3]
 801223e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012242:	edc3 7a01 	vstr	s15, [r3, #4]
 8012246:	e78d      	b.n	8012164 <__kernel_rem_pio2f+0x3dc>
 8012248:	ed33 7a01 	vldmdb	r3!, {s14}
 801224c:	3c01      	subs	r4, #1
 801224e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012252:	e78f      	b.n	8012174 <__kernel_rem_pio2f+0x3ec>
 8012254:	eef1 6a66 	vneg.f32	s13, s13
 8012258:	eeb1 7a47 	vneg.f32	s14, s14
 801225c:	edc8 6a00 	vstr	s13, [r8]
 8012260:	ed88 7a01 	vstr	s14, [r8, #4]
 8012264:	eef1 7a67 	vneg.f32	s15, s15
 8012268:	e790      	b.n	801218c <__kernel_rem_pio2f+0x404>
 801226a:	bf00      	nop

0801226c <scalbnf>:
 801226c:	ee10 3a10 	vmov	r3, s0
 8012270:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8012274:	d02b      	beq.n	80122ce <scalbnf+0x62>
 8012276:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801227a:	d302      	bcc.n	8012282 <scalbnf+0x16>
 801227c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012280:	4770      	bx	lr
 8012282:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8012286:	d123      	bne.n	80122d0 <scalbnf+0x64>
 8012288:	4b24      	ldr	r3, [pc, #144]	; (801231c <scalbnf+0xb0>)
 801228a:	eddf 7a25 	vldr	s15, [pc, #148]	; 8012320 <scalbnf+0xb4>
 801228e:	4298      	cmp	r0, r3
 8012290:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012294:	db17      	blt.n	80122c6 <scalbnf+0x5a>
 8012296:	ee10 3a10 	vmov	r3, s0
 801229a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801229e:	3a19      	subs	r2, #25
 80122a0:	f24c 3150 	movw	r1, #50000	; 0xc350
 80122a4:	4288      	cmp	r0, r1
 80122a6:	dd15      	ble.n	80122d4 <scalbnf+0x68>
 80122a8:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8012324 <scalbnf+0xb8>
 80122ac:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8012328 <scalbnf+0xbc>
 80122b0:	ee10 3a10 	vmov	r3, s0
 80122b4:	eeb0 7a67 	vmov.f32	s14, s15
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	bfb8      	it	lt
 80122bc:	eef0 7a66 	vmovlt.f32	s15, s13
 80122c0:	ee27 0a87 	vmul.f32	s0, s15, s14
 80122c4:	4770      	bx	lr
 80122c6:	eddf 7a19 	vldr	s15, [pc, #100]	; 801232c <scalbnf+0xc0>
 80122ca:	ee27 0a80 	vmul.f32	s0, s15, s0
 80122ce:	4770      	bx	lr
 80122d0:	0dd2      	lsrs	r2, r2, #23
 80122d2:	e7e5      	b.n	80122a0 <scalbnf+0x34>
 80122d4:	4410      	add	r0, r2
 80122d6:	28fe      	cmp	r0, #254	; 0xfe
 80122d8:	dce6      	bgt.n	80122a8 <scalbnf+0x3c>
 80122da:	2800      	cmp	r0, #0
 80122dc:	dd06      	ble.n	80122ec <scalbnf+0x80>
 80122de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80122e2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80122e6:	ee00 3a10 	vmov	s0, r3
 80122ea:	4770      	bx	lr
 80122ec:	f110 0f16 	cmn.w	r0, #22
 80122f0:	da09      	bge.n	8012306 <scalbnf+0x9a>
 80122f2:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801232c <scalbnf+0xc0>
 80122f6:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8012330 <scalbnf+0xc4>
 80122fa:	ee10 3a10 	vmov	r3, s0
 80122fe:	eeb0 7a67 	vmov.f32	s14, s15
 8012302:	2b00      	cmp	r3, #0
 8012304:	e7d9      	b.n	80122ba <scalbnf+0x4e>
 8012306:	3019      	adds	r0, #25
 8012308:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801230c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8012310:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8012334 <scalbnf+0xc8>
 8012314:	ee07 3a90 	vmov	s15, r3
 8012318:	e7d7      	b.n	80122ca <scalbnf+0x5e>
 801231a:	bf00      	nop
 801231c:	ffff3cb0 	.word	0xffff3cb0
 8012320:	4c000000 	.word	0x4c000000
 8012324:	7149f2ca 	.word	0x7149f2ca
 8012328:	f149f2ca 	.word	0xf149f2ca
 801232c:	0da24260 	.word	0x0da24260
 8012330:	8da24260 	.word	0x8da24260
 8012334:	33000000 	.word	0x33000000

08012338 <floorf>:
 8012338:	ee10 3a10 	vmov	r3, s0
 801233c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012340:	3a7f      	subs	r2, #127	; 0x7f
 8012342:	2a16      	cmp	r2, #22
 8012344:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8012348:	dc2a      	bgt.n	80123a0 <floorf+0x68>
 801234a:	2a00      	cmp	r2, #0
 801234c:	da11      	bge.n	8012372 <floorf+0x3a>
 801234e:	eddf 7a18 	vldr	s15, [pc, #96]	; 80123b0 <floorf+0x78>
 8012352:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012356:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801235a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801235e:	dd05      	ble.n	801236c <floorf+0x34>
 8012360:	2b00      	cmp	r3, #0
 8012362:	da23      	bge.n	80123ac <floorf+0x74>
 8012364:	4a13      	ldr	r2, [pc, #76]	; (80123b4 <floorf+0x7c>)
 8012366:	2900      	cmp	r1, #0
 8012368:	bf18      	it	ne
 801236a:	4613      	movne	r3, r2
 801236c:	ee00 3a10 	vmov	s0, r3
 8012370:	4770      	bx	lr
 8012372:	4911      	ldr	r1, [pc, #68]	; (80123b8 <floorf+0x80>)
 8012374:	4111      	asrs	r1, r2
 8012376:	420b      	tst	r3, r1
 8012378:	d0fa      	beq.n	8012370 <floorf+0x38>
 801237a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80123b0 <floorf+0x78>
 801237e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012382:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801238a:	ddef      	ble.n	801236c <floorf+0x34>
 801238c:	2b00      	cmp	r3, #0
 801238e:	bfbe      	ittt	lt
 8012390:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8012394:	fa40 f202 	asrlt.w	r2, r0, r2
 8012398:	189b      	addlt	r3, r3, r2
 801239a:	ea23 0301 	bic.w	r3, r3, r1
 801239e:	e7e5      	b.n	801236c <floorf+0x34>
 80123a0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80123a4:	d3e4      	bcc.n	8012370 <floorf+0x38>
 80123a6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80123aa:	4770      	bx	lr
 80123ac:	2300      	movs	r3, #0
 80123ae:	e7dd      	b.n	801236c <floorf+0x34>
 80123b0:	7149f2ca 	.word	0x7149f2ca
 80123b4:	bf800000 	.word	0xbf800000
 80123b8:	007fffff 	.word	0x007fffff

080123bc <_init>:
 80123bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123be:	bf00      	nop
 80123c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80123c2:	bc08      	pop	{r3}
 80123c4:	469e      	mov	lr, r3
 80123c6:	4770      	bx	lr

080123c8 <_fini>:
 80123c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123ca:	bf00      	nop
 80123cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80123ce:	bc08      	pop	{r3}
 80123d0:	469e      	mov	lr, r3
 80123d2:	4770      	bx	lr
