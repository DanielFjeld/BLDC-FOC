
CUBEMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad54  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800af2c  0800af2c  0001af2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af7c  0800af7c  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800af7c  0800af7c  0001af7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af84  0800af84  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af84  0800af84  0001af84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af88  0800af88  0001af88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  0800af8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007dc  200000d0  0800b05c  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008ac  0800b05c  000208ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021c03  00000000  00000000  00020143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004571  00000000  00000000  00041d46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ba8  00000000  00000000  000462b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000154d  00000000  00000000  00047e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000243ac  00000000  00000000  000493ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025cd4  00000000  00000000  0006d759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6789  00000000  00000000  0009342d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000074dc  00000000  00000000  00179bb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00181094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000d0 	.word	0x200000d0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800af14 	.word	0x0800af14

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000d4 	.word	0x200000d4
 8000214:	0800af14 	.word	0x0800af14

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <Current_IRQ>:




//-------------------IRQ handlers---------------------
void Current_IRQ(Current* ptr){
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]

    if(ptr != NULL)memcpy(&IRQ_Current, ptr, sizeof(Current));
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d008      	beq.n	8000534 <Current_IRQ+0x20>
 8000522:	2210      	movs	r2, #16
 8000524:	6879      	ldr	r1, [r7, #4]
 8000526:	4805      	ldr	r0, [pc, #20]	; (800053c <Current_IRQ+0x28>)
 8000528:	f00a fce6 	bl	800aef8 <memcpy>
    else return;
    Current_Callback_flag = 1;
 800052c:	4b04      	ldr	r3, [pc, #16]	; (8000540 <Current_IRQ+0x2c>)
 800052e:	2201      	movs	r2, #1
 8000530:	701a      	strb	r2, [r3, #0]
 8000532:	e000      	b.n	8000536 <Current_IRQ+0x22>
    else return;
 8000534:	bf00      	nop
}
 8000536:	3708      	adds	r7, #8
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	200000f8 	.word	0x200000f8
 8000540:	200000ec 	.word	0x200000ec

08000544 <Can_RX_Status_IRQ>:
void Encoders_IRQ(Encoders* ptr){
	memcpy(&IRQ_Encoders, ptr, sizeof(Encoders));
}

//-------------------CAN RX------------------------
void Can_RX_Status_IRQ(CAN_Status* ptr){
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
	memcpy(&Status, ptr, sizeof(CAN_Status));
 800054c:	220c      	movs	r2, #12
 800054e:	6879      	ldr	r1, [r7, #4]
 8000550:	4803      	ldr	r0, [pc, #12]	; (8000560 <Can_RX_Status_IRQ+0x1c>)
 8000552:	f00a fcd1 	bl	800aef8 <memcpy>

}
 8000556:	bf00      	nop
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	20000120 	.word	0x20000120

08000564 <check_value>:
	.max = 10,
	.min = 0
};

//check value OK
LIMITS_t check_value(CAN_LIMITS* ptr, float value){
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
 800056c:	ed87 0a00 	vstr	s0, [r7]
	if(value >= ptr->max_error || value <= ptr->min_error) return LIMIT_ERROR;			//error
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	edd3 7a05 	vldr	s15, [r3, #20]
 8000576:	ed97 7a00 	vldr	s14, [r7]
 800057a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800057e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000582:	da09      	bge.n	8000598 <check_value+0x34>
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	edd3 7a02 	vldr	s15, [r3, #8]
 800058a:	ed97 7a00 	vldr	s14, [r7]
 800058e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000596:	d801      	bhi.n	800059c <check_value+0x38>
 8000598:	2302      	movs	r3, #2
 800059a:	e016      	b.n	80005ca <check_value+0x66>
	if(value >= ptr->max_warning || value <= ptr->min_warning) return LIMIT_WARNING;	//warning
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	edd3 7a04 	vldr	s15, [r3, #16]
 80005a2:	ed97 7a00 	vldr	s14, [r7]
 80005a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80005aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005ae:	da09      	bge.n	80005c4 <check_value+0x60>
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80005b6:	ed97 7a00 	vldr	s14, [r7]
 80005ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80005be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005c2:	d801      	bhi.n	80005c8 <check_value+0x64>
 80005c4:	2301      	movs	r3, #1
 80005c6:	e000      	b.n	80005ca <check_value+0x66>
	return LIMIT_OK;																	//OK
 80005c8:	2300      	movs	r3, #0
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr

080005d6 <Limit>:
float Limit(CAN_LIMITS* ptr, float value){
 80005d6:	b480      	push	{r7}
 80005d8:	b083      	sub	sp, #12
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
 80005de:	ed87 0a00 	vstr	s0, [r7]
	if(value > ptr->max)return ptr->max;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	edd3 7a03 	vldr	s15, [r3, #12]
 80005e8:	ed97 7a00 	vldr	s14, [r7]
 80005ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80005f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005f4:	dd02      	ble.n	80005fc <Limit+0x26>
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	68db      	ldr	r3, [r3, #12]
 80005fa:	e00d      	b.n	8000618 <Limit+0x42>
	if(value < ptr->min)return ptr->min;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	edd3 7a00 	vldr	s15, [r3]
 8000602:	ed97 7a00 	vldr	s14, [r7]
 8000606:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800060a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800060e:	d502      	bpl.n	8000616 <Limit+0x40>
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	e000      	b.n	8000618 <Limit+0x42>
	return value;
 8000616:	683b      	ldr	r3, [r7, #0]
}
 8000618:	ee07 3a90 	vmov	s15, r3
 800061c:	eeb0 0a67 	vmov.f32	s0, s15
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
	...

0800062c <BLDC_main>:

//------------------------MAIN-------------------------
void BLDC_main(void){
 800062c:	b590      	push	{r4, r7, lr}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
	//----------------PID---------
	SetSampleTime(&Current_PID, 40); //40us = 25kHz
 8000632:	2128      	movs	r1, #40	; 0x28
 8000634:	48c0      	ldr	r0, [pc, #768]	; (8000938 <BLDC_main+0x30c>)
 8000636:	f000 fdb1 	bl	800119c <SetSampleTime>
	SetTunings(&Current_PID, 0.005f, 10.0f, 0.0f, 1);
 800063a:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800063e:	ed9f 1abf 	vldr	s2, [pc, #764]	; 800093c <BLDC_main+0x310>
 8000642:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8000646:	ed9f 0abe 	vldr	s0, [pc, #760]	; 8000940 <BLDC_main+0x314>
 800064a:	48bb      	ldr	r0, [pc, #748]	; (8000938 <BLDC_main+0x30c>)
 800064c:	f000 fcec 	bl	8001028 <SetTunings>
	SetOutputLimits(&Current_PID, 0, 10);
 8000650:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8000654:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 800093c <BLDC_main+0x310>
 8000658:	48b7      	ldr	r0, [pc, #732]	; (8000938 <BLDC_main+0x30c>)
 800065a:	f000 fdd3 	bl	8001204 <SetOutputLimits>
	SetControllerDirection(&Current_PID, DIRECT);
 800065e:	2100      	movs	r1, #0
 8000660:	48b5      	ldr	r0, [pc, #724]	; (8000938 <BLDC_main+0x30c>)
 8000662:	f000 fe7f 	bl	8001364 <SetControllerDirection>
	SetMode(&Current_PID,  AUTOMATIC);
 8000666:	2101      	movs	r1, #1
 8000668:	48b3      	ldr	r0, [pc, #716]	; (8000938 <BLDC_main+0x30c>)
 800066a:	f000 fe27 	bl	80012bc <SetMode>
	Initialize(&Current_PID);
 800066e:	48b2      	ldr	r0, [pc, #712]	; (8000938 <BLDC_main+0x30c>)
 8000670:	f000 fe46 	bl	8001300 <Initialize>

	SetSampleTime(&Velocity_PID, 100); //100s = 10kHz
 8000674:	2164      	movs	r1, #100	; 0x64
 8000676:	48b3      	ldr	r0, [pc, #716]	; (8000944 <BLDC_main+0x318>)
 8000678:	f000 fd90 	bl	800119c <SetSampleTime>
	SetTunings(&Velocity_PID, 1.0f, 0.1f, 0.0f, 1);
 800067c:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8000680:	ed9f 1aae 	vldr	s2, [pc, #696]	; 800093c <BLDC_main+0x310>
 8000684:	eddf 0ab0 	vldr	s1, [pc, #704]	; 8000948 <BLDC_main+0x31c>
 8000688:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800068c:	48ad      	ldr	r0, [pc, #692]	; (8000944 <BLDC_main+0x318>)
 800068e:	f000 fccb 	bl	8001028 <SetTunings>
	SetOutputLimits(&Velocity_PID, 0, 10);
 8000692:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8000696:	ed9f 0aa9 	vldr	s0, [pc, #676]	; 800093c <BLDC_main+0x310>
 800069a:	48aa      	ldr	r0, [pc, #680]	; (8000944 <BLDC_main+0x318>)
 800069c:	f000 fdb2 	bl	8001204 <SetOutputLimits>
	SetControllerDirection(&Velocity_PID, DIRECT);
 80006a0:	2100      	movs	r1, #0
 80006a2:	48a8      	ldr	r0, [pc, #672]	; (8000944 <BLDC_main+0x318>)
 80006a4:	f000 fe5e 	bl	8001364 <SetControllerDirection>
	SetMode(&Velocity_PID,  AUTOMATIC);
 80006a8:	2101      	movs	r1, #1
 80006aa:	48a6      	ldr	r0, [pc, #664]	; (8000944 <BLDC_main+0x318>)
 80006ac:	f000 fe06 	bl	80012bc <SetMode>
	Initialize(&Velocity_PID);
 80006b0:	48a4      	ldr	r0, [pc, #656]	; (8000944 <BLDC_main+0x318>)
 80006b2:	f000 fe25 	bl	8001300 <Initialize>


	SetSampleTime(&Angle_PID, 100); //100s = 10kHz
 80006b6:	2164      	movs	r1, #100	; 0x64
 80006b8:	48a4      	ldr	r0, [pc, #656]	; (800094c <BLDC_main+0x320>)
 80006ba:	f000 fd6f 	bl	800119c <SetSampleTime>
	SetTunings(&Angle_PID, 1.0f, 0.0f, 0.0f, 1);
 80006be:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80006c2:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 800093c <BLDC_main+0x310>
 80006c6:	eddf 0a9d 	vldr	s1, [pc, #628]	; 800093c <BLDC_main+0x310>
 80006ca:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80006ce:	489f      	ldr	r0, [pc, #636]	; (800094c <BLDC_main+0x320>)
 80006d0:	f000 fcaa 	bl	8001028 <SetTunings>
	SetOutputLimits(&Angle_PID, 0, 10);
 80006d4:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 80006d8:	ed9f 0a98 	vldr	s0, [pc, #608]	; 800093c <BLDC_main+0x310>
 80006dc:	489b      	ldr	r0, [pc, #620]	; (800094c <BLDC_main+0x320>)
 80006de:	f000 fd91 	bl	8001204 <SetOutputLimits>
	SetControllerDirection(&Angle_PID, DIRECT);
 80006e2:	2100      	movs	r1, #0
 80006e4:	4899      	ldr	r0, [pc, #612]	; (800094c <BLDC_main+0x320>)
 80006e6:	f000 fe3d 	bl	8001364 <SetControllerDirection>
	SetMode(&Angle_PID,  AUTOMATIC);
 80006ea:	2101      	movs	r1, #1
 80006ec:	4897      	ldr	r0, [pc, #604]	; (800094c <BLDC_main+0x320>)
 80006ee:	f000 fde5 	bl	80012bc <SetMode>
	Initialize(&Angle_PID);
 80006f2:	4896      	ldr	r0, [pc, #600]	; (800094c <BLDC_main+0x320>)
 80006f4:	f000 fe04 	bl	8001300 <Initialize>

	//setup encoder
	//encoder_init((void*)&Encoders_IRQ);

	//setup current
	current_init((void*)&Current_IRQ);
 80006f8:	4895      	ldr	r0, [pc, #596]	; (8000950 <BLDC_main+0x324>)
 80006fa:	f001 f829 	bl	8001750 <current_init>
	//setup temperature and voltage
	//temp_volt_init((void*)&Voltage_Temp_IRQ);

	//setup CAN
	//-----------------CAN----------------------
	FDCAN_addCallback(&hfdcan1, (CAN_STATUS_ID << 8) 		| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_Status_IRQ);
 80006fe:	4a95      	ldr	r2, [pc, #596]	; (8000954 <BLDC_main+0x328>)
 8000700:	2136      	movs	r1, #54	; 0x36
 8000702:	4895      	ldr	r0, [pc, #596]	; (8000958 <BLDC_main+0x32c>)
 8000704:	f001 f906 	bl	8001914 <FDCAN_addCallback>
//	FDCAN_addCallback(&hfdcan1, (CAN_LIMITS_ID << 8) 		| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_Limits_IRQ);
//	FDCAN_addCallback(&hfdcan1, (CAN_PID_CURRENT_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_PID_Current_IRQ);
//	FDCAN_addCallback(&hfdcan1, (CAN_PID_VELOCITY_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_PID_Velocity_IRQ);
//	FDCAN_addCallback(&hfdcan1, (CAN_PID_ANGLE_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_PID_Angle_IRQ);

	FDCAN_Start(&hfdcan1);
 8000708:	4893      	ldr	r0, [pc, #588]	; (8000958 <BLDC_main+0x32c>)
 800070a:	f001 f8e7 	bl	80018dc <FDCAN_Start>

	//--------------setup PWM------------------
	CTRL_init_PWM();
 800070e:	f000 fa33 	bl	8000b78 <CTRL_init_PWM>


	while(1){

		//check if flag has been set indicating new current measurements
		while(!Current_Callback_flag);
 8000712:	bf00      	nop
 8000714:	4b91      	ldr	r3, [pc, #580]	; (800095c <BLDC_main+0x330>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d0fb      	beq.n	8000714 <BLDC_main+0xe8>
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
 800071c:	2201      	movs	r2, #1
 800071e:	2140      	movs	r1, #64	; 0x40
 8000720:	488f      	ldr	r0, [pc, #572]	; (8000960 <BLDC_main+0x334>)
 8000722:	f006 fa71 	bl	8006c08 <HAL_GPIO_WritePin>
		Current_Callback_flag = 0;
 8000726:	4b8d      	ldr	r3, [pc, #564]	; (800095c <BLDC_main+0x330>)
 8000728:	2200      	movs	r2, #0
 800072a:	701a      	strb	r2, [r3, #0]

		//time keepers
		timing_CAN_feedback++;
 800072c:	4b8d      	ldr	r3, [pc, #564]	; (8000964 <BLDC_main+0x338>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	3301      	adds	r3, #1
 8000732:	4a8c      	ldr	r2, [pc, #560]	; (8000964 <BLDC_main+0x338>)
 8000734:	6013      	str	r3, [r2, #0]

		//reset warnings
		uint32_t warning = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	607b      	str	r3, [r7, #4]



		//-------------------check warning and error--------------------------- 6us
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
 800073a:	2201      	movs	r2, #1
 800073c:	2140      	movs	r1, #64	; 0x40
 800073e:	4888      	ldr	r0, [pc, #544]	; (8000960 <BLDC_main+0x334>)
 8000740:	f006 fa62 	bl	8006c08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
 8000744:	2200      	movs	r2, #0
 8000746:	2140      	movs	r1, #64	; 0x40
 8000748:	4885      	ldr	r0, [pc, #532]	; (8000960 <BLDC_main+0x334>)
 800074a:	f006 fa5d 	bl	8006c08 <HAL_GPIO_WritePin>

		LIMITS_t Limit_callback;

		Limit_callback = check_value(&LIMIT_Current, (float)IRQ_Current.Current_DC);
 800074e:	4b86      	ldr	r3, [pc, #536]	; (8000968 <BLDC_main+0x33c>)
 8000750:	68db      	ldr	r3, [r3, #12]
 8000752:	ee07 3a90 	vmov	s15, r3
 8000756:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800075a:	eeb0 0a67 	vmov.f32	s0, s15
 800075e:	4883      	ldr	r0, [pc, #524]	; (800096c <BLDC_main+0x340>)
 8000760:	f7ff ff00 	bl	8000564 <check_value>
 8000764:	4603      	mov	r3, r0
 8000766:	70fb      	strb	r3, [r7, #3]
		warning |= (Limit_callback&1)      << 0; //warning
 8000768:	78fb      	ldrb	r3, [r7, #3]
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	4313      	orrs	r3, r2
 8000772:	607b      	str	r3, [r7, #4]
		error   |= ((Limit_callback&2)>>1) << 0; //error
 8000774:	78fb      	ldrb	r3, [r7, #3]
 8000776:	105b      	asrs	r3, r3, #1
 8000778:	f003 0201 	and.w	r2, r3, #1
 800077c:	4b7c      	ldr	r3, [pc, #496]	; (8000970 <BLDC_main+0x344>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4313      	orrs	r3, r2
 8000782:	4a7b      	ldr	r2, [pc, #492]	; (8000970 <BLDC_main+0x344>)
 8000784:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_Encoder_1, (float)IRQ_Encoders.Encoder1_pos);
 8000786:	4b7b      	ldr	r3, [pc, #492]	; (8000974 <BLDC_main+0x348>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	ee07 3a90 	vmov	s15, r3
 800078e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000792:	eeb0 0a67 	vmov.f32	s0, s15
 8000796:	4878      	ldr	r0, [pc, #480]	; (8000978 <BLDC_main+0x34c>)
 8000798:	f7ff fee4 	bl	8000564 <check_value>
 800079c:	4603      	mov	r3, r0
 800079e:	70fb      	strb	r3, [r7, #3]
		warning |= (Limit_callback&1)      << 1; //warning
 80007a0:	78fb      	ldrb	r3, [r7, #3]
 80007a2:	005b      	lsls	r3, r3, #1
 80007a4:	f003 0302 	and.w	r3, r3, #2
 80007a8:	687a      	ldr	r2, [r7, #4]
 80007aa:	4313      	orrs	r3, r2
 80007ac:	607b      	str	r3, [r7, #4]
		error   |= ((Limit_callback&2)>>1) << 1; //error
 80007ae:	78fb      	ldrb	r3, [r7, #3]
 80007b0:	f003 0202 	and.w	r2, r3, #2
 80007b4:	4b6e      	ldr	r3, [pc, #440]	; (8000970 <BLDC_main+0x344>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4313      	orrs	r3, r2
 80007ba:	4a6d      	ldr	r2, [pc, #436]	; (8000970 <BLDC_main+0x344>)
 80007bc:	6013      	str	r3, [r2, #0]

		Limit_callback= check_value(&LIMIT_Encoder_2, (float)IRQ_Encoders.Encoder2_pos);
 80007be:	4b6d      	ldr	r3, [pc, #436]	; (8000974 <BLDC_main+0x348>)
 80007c0:	685b      	ldr	r3, [r3, #4]
 80007c2:	ee07 3a90 	vmov	s15, r3
 80007c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007ca:	eeb0 0a67 	vmov.f32	s0, s15
 80007ce:	486b      	ldr	r0, [pc, #428]	; (800097c <BLDC_main+0x350>)
 80007d0:	f7ff fec8 	bl	8000564 <check_value>
 80007d4:	4603      	mov	r3, r0
 80007d6:	70fb      	strb	r3, [r7, #3]
		warning |= (Limit_callback&1)      << 2; //warning
 80007d8:	78fb      	ldrb	r3, [r7, #3]
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	f003 0304 	and.w	r3, r3, #4
 80007e0:	687a      	ldr	r2, [r7, #4]
 80007e2:	4313      	orrs	r3, r2
 80007e4:	607b      	str	r3, [r7, #4]
		error   |= ((Limit_callback&2)>>1) << 2; //error
 80007e6:	78fb      	ldrb	r3, [r7, #3]
 80007e8:	105b      	asrs	r3, r3, #1
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	f003 0204 	and.w	r2, r3, #4
 80007f0:	4b5f      	ldr	r3, [pc, #380]	; (8000970 <BLDC_main+0x344>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4313      	orrs	r3, r2
 80007f6:	4a5e      	ldr	r2, [pc, #376]	; (8000970 <BLDC_main+0x344>)
 80007f8:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_Velocity, (float)IRQ_Encoders.Velocity);
 80007fa:	4b5e      	ldr	r3, [pc, #376]	; (8000974 <BLDC_main+0x348>)
 80007fc:	68db      	ldr	r3, [r3, #12]
 80007fe:	ee07 3a90 	vmov	s15, r3
 8000802:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000806:	eeb0 0a67 	vmov.f32	s0, s15
 800080a:	485d      	ldr	r0, [pc, #372]	; (8000980 <BLDC_main+0x354>)
 800080c:	f7ff feaa 	bl	8000564 <check_value>
 8000810:	4603      	mov	r3, r0
 8000812:	70fb      	strb	r3, [r7, #3]
		warning |= (Limit_callback&1)      << 3; //warning
 8000814:	78fb      	ldrb	r3, [r7, #3]
 8000816:	00db      	lsls	r3, r3, #3
 8000818:	f003 0308 	and.w	r3, r3, #8
 800081c:	687a      	ldr	r2, [r7, #4]
 800081e:	4313      	orrs	r3, r2
 8000820:	607b      	str	r3, [r7, #4]
		error   |= ((Limit_callback&2)>>1) << 3; //error
 8000822:	78fb      	ldrb	r3, [r7, #3]
 8000824:	105b      	asrs	r3, r3, #1
 8000826:	00db      	lsls	r3, r3, #3
 8000828:	f003 0208 	and.w	r2, r3, #8
 800082c:	4b50      	ldr	r3, [pc, #320]	; (8000970 <BLDC_main+0x344>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4313      	orrs	r3, r2
 8000832:	4a4f      	ldr	r2, [pc, #316]	; (8000970 <BLDC_main+0x344>)
 8000834:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_V_AUX, (float)IRQ_Voltage_Temp.V_aux);
 8000836:	4b53      	ldr	r3, [pc, #332]	; (8000984 <BLDC_main+0x358>)
 8000838:	889b      	ldrh	r3, [r3, #4]
 800083a:	ee07 3a90 	vmov	s15, r3
 800083e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000842:	eeb0 0a67 	vmov.f32	s0, s15
 8000846:	4850      	ldr	r0, [pc, #320]	; (8000988 <BLDC_main+0x35c>)
 8000848:	f7ff fe8c 	bl	8000564 <check_value>
 800084c:	4603      	mov	r3, r0
 800084e:	70fb      	strb	r3, [r7, #3]
		warning |= (Limit_callback&1)      << 4; //warning
 8000850:	78fb      	ldrb	r3, [r7, #3]
 8000852:	011b      	lsls	r3, r3, #4
 8000854:	f003 0310 	and.w	r3, r3, #16
 8000858:	687a      	ldr	r2, [r7, #4]
 800085a:	4313      	orrs	r3, r2
 800085c:	607b      	str	r3, [r7, #4]
		error   |= ((Limit_callback&2)>>1) << 4; //error
 800085e:	78fb      	ldrb	r3, [r7, #3]
 8000860:	105b      	asrs	r3, r3, #1
 8000862:	011b      	lsls	r3, r3, #4
 8000864:	f003 0210 	and.w	r2, r3, #16
 8000868:	4b41      	ldr	r3, [pc, #260]	; (8000970 <BLDC_main+0x344>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4313      	orrs	r3, r2
 800086e:	4a40      	ldr	r2, [pc, #256]	; (8000970 <BLDC_main+0x344>)
 8000870:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_V_BAT, (float)IRQ_Voltage_Temp.V_aux);
 8000872:	4b44      	ldr	r3, [pc, #272]	; (8000984 <BLDC_main+0x358>)
 8000874:	889b      	ldrh	r3, [r3, #4]
 8000876:	ee07 3a90 	vmov	s15, r3
 800087a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800087e:	eeb0 0a67 	vmov.f32	s0, s15
 8000882:	4842      	ldr	r0, [pc, #264]	; (800098c <BLDC_main+0x360>)
 8000884:	f7ff fe6e 	bl	8000564 <check_value>
 8000888:	4603      	mov	r3, r0
 800088a:	70fb      	strb	r3, [r7, #3]
		warning |= (Limit_callback&1)      << 5; //warning
 800088c:	78fb      	ldrb	r3, [r7, #3]
 800088e:	015b      	lsls	r3, r3, #5
 8000890:	f003 0320 	and.w	r3, r3, #32
 8000894:	687a      	ldr	r2, [r7, #4]
 8000896:	4313      	orrs	r3, r2
 8000898:	607b      	str	r3, [r7, #4]
		error   |= ((Limit_callback&2)>>1) << 5; //error
 800089a:	78fb      	ldrb	r3, [r7, #3]
 800089c:	105b      	asrs	r3, r3, #1
 800089e:	015b      	lsls	r3, r3, #5
 80008a0:	f003 0220 	and.w	r2, r3, #32
 80008a4:	4b32      	ldr	r3, [pc, #200]	; (8000970 <BLDC_main+0x344>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4313      	orrs	r3, r2
 80008aa:	4a31      	ldr	r2, [pc, #196]	; (8000970 <BLDC_main+0x344>)
 80008ac:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_temp, (float)IRQ_Voltage_Temp.Temp_NTC1);
 80008ae:	4b35      	ldr	r3, [pc, #212]	; (8000984 <BLDC_main+0x358>)
 80008b0:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80008b4:	ee07 3a90 	vmov	s15, r3
 80008b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008bc:	eeb0 0a67 	vmov.f32	s0, s15
 80008c0:	4833      	ldr	r0, [pc, #204]	; (8000990 <BLDC_main+0x364>)
 80008c2:	f7ff fe4f 	bl	8000564 <check_value>
 80008c6:	4603      	mov	r3, r0
 80008c8:	70fb      	strb	r3, [r7, #3]
		warning |= (Limit_callback&1)      << 6; //warning
 80008ca:	78fb      	ldrb	r3, [r7, #3]
 80008cc:	019b      	lsls	r3, r3, #6
 80008ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008d2:	687a      	ldr	r2, [r7, #4]
 80008d4:	4313      	orrs	r3, r2
 80008d6:	607b      	str	r3, [r7, #4]
		error   |= ((Limit_callback&2)>>1) << 6; //error
 80008d8:	78fb      	ldrb	r3, [r7, #3]
 80008da:	105b      	asrs	r3, r3, #1
 80008dc:	019b      	lsls	r3, r3, #6
 80008de:	f003 0240 	and.w	r2, r3, #64	; 0x40
 80008e2:	4b23      	ldr	r3, [pc, #140]	; (8000970 <BLDC_main+0x344>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4313      	orrs	r3, r2
 80008e8:	4a21      	ldr	r2, [pc, #132]	; (8000970 <BLDC_main+0x344>)
 80008ea:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_temp, (float)IRQ_Voltage_Temp.Temp_NTC2);
 80008ec:	4b25      	ldr	r3, [pc, #148]	; (8000984 <BLDC_main+0x358>)
 80008ee:	f993 3007 	ldrsb.w	r3, [r3, #7]
 80008f2:	ee07 3a90 	vmov	s15, r3
 80008f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008fa:	eeb0 0a67 	vmov.f32	s0, s15
 80008fe:	4824      	ldr	r0, [pc, #144]	; (8000990 <BLDC_main+0x364>)
 8000900:	f7ff fe30 	bl	8000564 <check_value>
 8000904:	4603      	mov	r3, r0
 8000906:	70fb      	strb	r3, [r7, #3]
		warning |= (Limit_callback&1)      << 7; //warning
 8000908:	78fb      	ldrb	r3, [r7, #3]
 800090a:	01db      	lsls	r3, r3, #7
 800090c:	b2db      	uxtb	r3, r3
 800090e:	687a      	ldr	r2, [r7, #4]
 8000910:	4313      	orrs	r3, r2
 8000912:	607b      	str	r3, [r7, #4]
		error   |= ((Limit_callback&2)>>1) << 7; //error
 8000914:	78fb      	ldrb	r3, [r7, #3]
 8000916:	105b      	asrs	r3, r3, #1
 8000918:	01db      	lsls	r3, r3, #7
 800091a:	b2da      	uxtb	r2, r3
 800091c:	4b14      	ldr	r3, [pc, #80]	; (8000970 <BLDC_main+0x344>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4313      	orrs	r3, r2
 8000922:	4a13      	ldr	r2, [pc, #76]	; (8000970 <BLDC_main+0x344>)
 8000924:	6013      	str	r3, [r2, #0]


		//------------------calculate PID----------------------- 6.52us
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
 8000926:	2201      	movs	r2, #1
 8000928:	2140      	movs	r1, #64	; 0x40
 800092a:	480d      	ldr	r0, [pc, #52]	; (8000960 <BLDC_main+0x334>)
 800092c:	f006 f96c 	bl	8006c08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
 8000930:	2200      	movs	r2, #0
 8000932:	2140      	movs	r1, #64	; 0x40
 8000934:	e02e      	b.n	8000994 <BLDC_main+0x368>
 8000936:	bf00      	nop
 8000938:	2000016c 	.word	0x2000016c
 800093c:	00000000 	.word	0x00000000
 8000940:	3ba3d70a 	.word	0x3ba3d70a
 8000944:	200001ac 	.word	0x200001ac
 8000948:	3dcccccd 	.word	0x3dcccccd
 800094c:	200001ec 	.word	0x200001ec
 8000950:	08000515 	.word	0x08000515
 8000954:	08000545 	.word	0x08000545
 8000958:	20000474 	.word	0x20000474
 800095c:	200000ec 	.word	0x200000ec
 8000960:	48000800 	.word	0x48000800
 8000964:	200000f0 	.word	0x200000f0
 8000968:	200000f8 	.word	0x200000f8
 800096c:	20000090 	.word	0x20000090
 8000970:	200000f4 	.word	0x200000f4
 8000974:	20000110 	.word	0x20000110
 8000978:	20000000 	.word	0x20000000
 800097c:	20000018 	.word	0x20000018
 8000980:	200000a8 	.word	0x200000a8
 8000984:	20000108 	.word	0x20000108
 8000988:	20000048 	.word	0x20000048
 800098c:	20000030 	.word	0x20000030
 8000990:	20000060 	.word	0x20000060
 8000994:	4868      	ldr	r0, [pc, #416]	; (8000b38 <BLDC_main+0x50c>)
 8000996:	f006 f937 	bl	8006c08 <HAL_GPIO_WritePin>

		Angle_PID.Input = (float)IRQ_Encoders.Calculated_pos;
 800099a:	4b68      	ldr	r3, [pc, #416]	; (8000b3c <BLDC_main+0x510>)
 800099c:	689b      	ldr	r3, [r3, #8]
 800099e:	ee07 3a90 	vmov	s15, r3
 80009a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009a6:	4b66      	ldr	r3, [pc, #408]	; (8000b40 <BLDC_main+0x514>)
 80009a8:	edc3 7a00 	vstr	s15, [r3]
		Velocity_PID.Input = (float)IRQ_Encoders.Velocity;
 80009ac:	4b63      	ldr	r3, [pc, #396]	; (8000b3c <BLDC_main+0x510>)
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	ee07 3a90 	vmov	s15, r3
 80009b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009b8:	4b62      	ldr	r3, [pc, #392]	; (8000b44 <BLDC_main+0x518>)
 80009ba:	edc3 7a00 	vstr	s15, [r3]
		Current_PID.Input = (float)IRQ_Current.Current_DC;
 80009be:	4b62      	ldr	r3, [pc, #392]	; (8000b48 <BLDC_main+0x51c>)
 80009c0:	68db      	ldr	r3, [r3, #12]
 80009c2:	ee07 3a90 	vmov	s15, r3
 80009c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009ca:	4b60      	ldr	r3, [pc, #384]	; (8000b4c <BLDC_main+0x520>)
 80009cc:	edc3 7a00 	vstr	s15, [r3]

		Angle_PID.Setpoint = Limit(&LIMIT_Encoder_2, Status.setpoint);
 80009d0:	4b5f      	ldr	r3, [pc, #380]	; (8000b50 <BLDC_main+0x524>)
 80009d2:	689b      	ldr	r3, [r3, #8]
 80009d4:	ee07 3a90 	vmov	s15, r3
 80009d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009dc:	eeb0 0a67 	vmov.f32	s0, s15
 80009e0:	485c      	ldr	r0, [pc, #368]	; (8000b54 <BLDC_main+0x528>)
 80009e2:	f7ff fdf8 	bl	80005d6 <Limit>
 80009e6:	eef0 7a40 	vmov.f32	s15, s0
 80009ea:	4b55      	ldr	r3, [pc, #340]	; (8000b40 <BLDC_main+0x514>)
 80009ec:	edc3 7a02 	vstr	s15, [r3, #8]
		Compute(&Angle_PID);
 80009f0:	4853      	ldr	r0, [pc, #332]	; (8000b40 <BLDC_main+0x514>)
 80009f2:	f000 fa67 	bl	8000ec4 <Compute>

		Velocity_PID.Setpoint =  Limit(&LIMIT_Velocity, Angle_PID.Output);
 80009f6:	4b52      	ldr	r3, [pc, #328]	; (8000b40 <BLDC_main+0x514>)
 80009f8:	edd3 7a01 	vldr	s15, [r3, #4]
 80009fc:	eeb0 0a67 	vmov.f32	s0, s15
 8000a00:	4855      	ldr	r0, [pc, #340]	; (8000b58 <BLDC_main+0x52c>)
 8000a02:	f7ff fde8 	bl	80005d6 <Limit>
 8000a06:	eef0 7a40 	vmov.f32	s15, s0
 8000a0a:	4b4e      	ldr	r3, [pc, #312]	; (8000b44 <BLDC_main+0x518>)
 8000a0c:	edc3 7a02 	vstr	s15, [r3, #8]
		Compute(&Velocity_PID);
 8000a10:	484c      	ldr	r0, [pc, #304]	; (8000b44 <BLDC_main+0x518>)
 8000a12:	f000 fa57 	bl	8000ec4 <Compute>

		Current_PID.Setpoint = Limit(&LIMIT_Current, Velocity_PID.Output);
 8000a16:	4b4b      	ldr	r3, [pc, #300]	; (8000b44 <BLDC_main+0x518>)
 8000a18:	edd3 7a01 	vldr	s15, [r3, #4]
 8000a1c:	eeb0 0a67 	vmov.f32	s0, s15
 8000a20:	484e      	ldr	r0, [pc, #312]	; (8000b5c <BLDC_main+0x530>)
 8000a22:	f7ff fdd8 	bl	80005d6 <Limit>
 8000a26:	eef0 7a40 	vmov.f32	s15, s0
 8000a2a:	4b48      	ldr	r3, [pc, #288]	; (8000b4c <BLDC_main+0x520>)
 8000a2c:	edc3 7a02 	vstr	s15, [r3, #8]
		Compute(&Current_PID);
 8000a30:	4846      	ldr	r0, [pc, #280]	; (8000b4c <BLDC_main+0x520>)
 8000a32:	f000 fa47 	bl	8000ec4 <Compute>

		//-----------------set PWM--------------------- 3.12us
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
 8000a36:	2201      	movs	r2, #1
 8000a38:	2140      	movs	r1, #64	; 0x40
 8000a3a:	483f      	ldr	r0, [pc, #252]	; (8000b38 <BLDC_main+0x50c>)
 8000a3c:	f006 f8e4 	bl	8006c08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
 8000a40:	2200      	movs	r2, #0
 8000a42:	2140      	movs	r1, #64	; 0x40
 8000a44:	483c      	ldr	r0, [pc, #240]	; (8000b38 <BLDC_main+0x50c>)
 8000a46:	f006 f8df 	bl	8006c08 <HAL_GPIO_WritePin>
		if(error){
 8000a4a:	4b45      	ldr	r3, [pc, #276]	; (8000b60 <BLDC_main+0x534>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d004      	beq.n	8000a5c <BLDC_main+0x430>
			shutoff();
 8000a52:	f000 fa03 	bl	8000e5c <shutoff>
			shutdown();
 8000a56:	f000 fa13 	bl	8000e80 <shutdown>
 8000a5a:	e01d      	b.n	8000a98 <BLDC_main+0x46c>
		}
		else{
			inverter((IRQ_Encoders.Encoder1_pos+90000)/1000, (uint16_t)Limit(&LIMIT_V_motor, Velocity_PID.Output));
 8000a5c:	4b37      	ldr	r3, [pc, #220]	; (8000b3c <BLDC_main+0x510>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
 8000a64:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8000a68:	4a3e      	ldr	r2, [pc, #248]	; (8000b64 <BLDC_main+0x538>)
 8000a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a6e:	099b      	lsrs	r3, r3, #6
 8000a70:	b29c      	uxth	r4, r3
 8000a72:	4b34      	ldr	r3, [pc, #208]	; (8000b44 <BLDC_main+0x518>)
 8000a74:	edd3 7a01 	vldr	s15, [r3, #4]
 8000a78:	eeb0 0a67 	vmov.f32	s0, s15
 8000a7c:	483a      	ldr	r0, [pc, #232]	; (8000b68 <BLDC_main+0x53c>)
 8000a7e:	f7ff fdaa 	bl	80005d6 <Limit>
 8000a82:	eef0 7a40 	vmov.f32	s15, s0
 8000a86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a8a:	ee17 3a90 	vmov	r3, s15
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	4619      	mov	r1, r3
 8000a92:	4620      	mov	r0, r4
 8000a94:	f000 f8bc 	bl	8000c10 <inverter>
		}


		//--------------send can message------------------
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
 8000a98:	2201      	movs	r2, #1
 8000a9a:	2140      	movs	r1, #64	; 0x40
 8000a9c:	4826      	ldr	r0, [pc, #152]	; (8000b38 <BLDC_main+0x50c>)
 8000a9e:	f006 f8b3 	bl	8006c08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2140      	movs	r1, #64	; 0x40
 8000aa6:	4824      	ldr	r0, [pc, #144]	; (8000b38 <BLDC_main+0x50c>)
 8000aa8:	f006 f8ae 	bl	8006c08 <HAL_GPIO_WritePin>
		if(timing_CAN_feedback == 25*5){ //every 5ms
 8000aac:	4b2f      	ldr	r3, [pc, #188]	; (8000b6c <BLDC_main+0x540>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2b7d      	cmp	r3, #125	; 0x7d
 8000ab2:	d114      	bne.n	8000ade <BLDC_main+0x4b2>
			timing_CAN_feedback = 0;
 8000ab4:	4b2d      	ldr	r3, [pc, #180]	; (8000b6c <BLDC_main+0x540>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
			Feedback.Status_warning = warning;
 8000aba:	4a2d      	ldr	r2, [pc, #180]	; (8000b70 <BLDC_main+0x544>)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6053      	str	r3, [r2, #4]
			Feedback.Status_faults = error;
 8000ac0:	4b27      	ldr	r3, [pc, #156]	; (8000b60 <BLDC_main+0x534>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a2a      	ldr	r2, [pc, #168]	; (8000b70 <BLDC_main+0x544>)
 8000ac6:	6093      	str	r3, [r2, #8]
			Feedback.Current_DC = IRQ_Current.Current_DC;
 8000ac8:	4b1f      	ldr	r3, [pc, #124]	; (8000b48 <BLDC_main+0x51c>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	461a      	mov	r2, r3
 8000ace:	4b28      	ldr	r3, [pc, #160]	; (8000b70 <BLDC_main+0x544>)
 8000ad0:	62da      	str	r2, [r3, #44]	; 0x2c
			FDCAN_sendData(&hfdcan1, (CAN_FEEDBACK_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (uint8_t*)&Feedback);
 8000ad2:	4a27      	ldr	r2, [pc, #156]	; (8000b70 <BLDC_main+0x544>)
 8000ad4:	f240 4136 	movw	r1, #1078	; 0x436
 8000ad8:	4826      	ldr	r0, [pc, #152]	; (8000b74 <BLDC_main+0x548>)
 8000ada:	f000 ff57 	bl	800198c <FDCAN_sendData>
		}

		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
 8000ade:	2201      	movs	r2, #1
 8000ae0:	2140      	movs	r1, #64	; 0x40
 8000ae2:	4815      	ldr	r0, [pc, #84]	; (8000b38 <BLDC_main+0x50c>)
 8000ae4:	f006 f890 	bl	8006c08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2140      	movs	r1, #64	; 0x40
 8000aec:	4812      	ldr	r0, [pc, #72]	; (8000b38 <BLDC_main+0x50c>)
 8000aee:	f006 f88b 	bl	8006c08 <HAL_GPIO_WritePin>

		//----------------set status LEDs---------------------
		if(error)HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 1);
 8000af2:	4b1b      	ldr	r3, [pc, #108]	; (8000b60 <BLDC_main+0x534>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d007      	beq.n	8000b0a <BLDC_main+0x4de>
 8000afa:	2201      	movs	r2, #1
 8000afc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b04:	f006 f880 	bl	8006c08 <HAL_GPIO_WritePin>
 8000b08:	e006      	b.n	8000b18 <BLDC_main+0x4ec>
		else HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 0);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b14:	f006 f878 	bl	8006c08 <HAL_GPIO_WritePin>
		if(warning)HAL_GPIO_WritePin(WARNING_LED_GPIO_Port, WARNING_LED_Pin, 1);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d005      	beq.n	8000b2a <BLDC_main+0x4fe>
 8000b1e:	2201      	movs	r2, #1
 8000b20:	2180      	movs	r1, #128	; 0x80
 8000b22:	4805      	ldr	r0, [pc, #20]	; (8000b38 <BLDC_main+0x50c>)
 8000b24:	f006 f870 	bl	8006c08 <HAL_GPIO_WritePin>
 8000b28:	e5f3      	b.n	8000712 <BLDC_main+0xe6>
		else HAL_GPIO_WritePin(WARNING_LED_GPIO_Port, WARNING_LED_Pin, 0);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2180      	movs	r1, #128	; 0x80
 8000b2e:	4802      	ldr	r0, [pc, #8]	; (8000b38 <BLDC_main+0x50c>)
 8000b30:	f006 f86a 	bl	8006c08 <HAL_GPIO_WritePin>
	while(1){
 8000b34:	e5ed      	b.n	8000712 <BLDC_main+0xe6>
 8000b36:	bf00      	nop
 8000b38:	48000800 	.word	0x48000800
 8000b3c:	20000110 	.word	0x20000110
 8000b40:	200001ec 	.word	0x200001ec
 8000b44:	200001ac 	.word	0x200001ac
 8000b48:	200000f8 	.word	0x200000f8
 8000b4c:	2000016c 	.word	0x2000016c
 8000b50:	20000120 	.word	0x20000120
 8000b54:	20000018 	.word	0x20000018
 8000b58:	200000a8 	.word	0x200000a8
 8000b5c:	20000090 	.word	0x20000090
 8000b60:	200000f4 	.word	0x200000f4
 8000b64:	10624dd3 	.word	0x10624dd3
 8000b68:	20000078 	.word	0x20000078
 8000b6c:	200000f0 	.word	0x200000f0
 8000b70:	2000012c 	.word	0x2000012c
 8000b74:	20000474 	.word	0x20000474

08000b78 <CTRL_init_PWM>:
//	CTRL_attr.priority = 8;
//	CTRL_thread_id = osThreadNew((void *)CTRL_thread, NULL, &CTRL_attr);
}

//thread
void CTRL_init_PWM(void){
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) Error_Handler(); //error
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	4821      	ldr	r0, [pc, #132]	; (8000c04 <CTRL_init_PWM+0x8c>)
 8000b80:	f007 fb7e 	bl	8008280 <HAL_TIM_PWM_Start>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <CTRL_init_PWM+0x16>
 8000b8a:	f001 fc59 	bl	8002440 <Error_Handler>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) Error_Handler(); //error
 8000b8e:	2100      	movs	r1, #0
 8000b90:	481c      	ldr	r0, [pc, #112]	; (8000c04 <CTRL_init_PWM+0x8c>)
 8000b92:	f008 fd13 	bl	80095bc <HAL_TIMEx_PWMN_Start>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <CTRL_init_PWM+0x28>
 8000b9c:	f001 fc50 	bl	8002440 <Error_Handler>

	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK) Error_Handler(); //error
 8000ba0:	2104      	movs	r1, #4
 8000ba2:	4818      	ldr	r0, [pc, #96]	; (8000c04 <CTRL_init_PWM+0x8c>)
 8000ba4:	f007 fb6c 	bl	8008280 <HAL_TIM_PWM_Start>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <CTRL_init_PWM+0x3a>
 8000bae:	f001 fc47 	bl	8002440 <Error_Handler>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2) != HAL_OK) Error_Handler(); //error
 8000bb2:	2104      	movs	r1, #4
 8000bb4:	4813      	ldr	r0, [pc, #76]	; (8000c04 <CTRL_init_PWM+0x8c>)
 8000bb6:	f008 fd01 	bl	80095bc <HAL_TIMEx_PWMN_Start>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <CTRL_init_PWM+0x4c>
 8000bc0:	f001 fc3e 	bl	8002440 <Error_Handler>

	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3) != HAL_OK) Error_Handler(); //error
 8000bc4:	2108      	movs	r1, #8
 8000bc6:	480f      	ldr	r0, [pc, #60]	; (8000c04 <CTRL_init_PWM+0x8c>)
 8000bc8:	f007 fb5a 	bl	8008280 <HAL_TIM_PWM_Start>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <CTRL_init_PWM+0x5e>
 8000bd2:	f001 fc35 	bl	8002440 <Error_Handler>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3) != HAL_OK) Error_Handler(); //error
 8000bd6:	2108      	movs	r1, #8
 8000bd8:	480a      	ldr	r0, [pc, #40]	; (8000c04 <CTRL_init_PWM+0x8c>)
 8000bda:	f008 fcef 	bl	80095bc <HAL_TIMEx_PWMN_Start>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <CTRL_init_PWM+0x70>
 8000be4:	f001 fc2c 	bl	8002440 <Error_Handler>

	TIM1->CCR1 = 0;
 8000be8:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <CTRL_init_PWM+0x90>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 8000bee:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <CTRL_init_PWM+0x90>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 8000bf4:	4b04      	ldr	r3, [pc, #16]	; (8000c08 <CTRL_init_PWM+0x90>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	63da      	str	r2, [r3, #60]	; 0x3c

	HAL_TIM_Base_Start_IT(&htim3);
 8000bfa:	4804      	ldr	r0, [pc, #16]	; (8000c0c <CTRL_init_PWM+0x94>)
 8000bfc:	f007 fa74 	bl	80080e8 <HAL_TIM_Base_Start_IT>
}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000720 	.word	0x20000720
 8000c08:	40012c00 	.word	0x40012c00
 8000c0c:	2000076c 	.word	0x2000076c

08000c10 <inverter>:
//sin(θ◦) ≈ 4θ(180 − θ) 40500 − θ(180 − θ);
//float _sin(float deg){
//	return (4*deg*(180-deg)/(40500 - deg*(180-deg)));
//}

void inverter(uint16_t angle, uint16_t voltage){
 8000c10:	b480      	push	{r7}
 8000c12:	b089      	sub	sp, #36	; 0x24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	460a      	mov	r2, r1
 8000c1a:	80fb      	strh	r3, [r7, #6]
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	80bb      	strh	r3, [r7, #4]

	angle = angle%360;
 8000c20:	88fb      	ldrh	r3, [r7, #6]
 8000c22:	08da      	lsrs	r2, r3, #3
 8000c24:	4987      	ldr	r1, [pc, #540]	; (8000e44 <inverter+0x234>)
 8000c26:	fba1 1202 	umull	r1, r2, r1, r2
 8000c2a:	0892      	lsrs	r2, r2, #2
 8000c2c:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8000c30:	fb01 f202 	mul.w	r2, r1, r2
 8000c34:	1a9b      	subs	r3, r3, r2
 8000c36:	80fb      	strh	r3, [r7, #6]
	uint32_t compare_M1 = 0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61fb      	str	r3, [r7, #28]
	uint32_t compare_M2 = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61bb      	str	r3, [r7, #24]
	uint32_t compare_M3 = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]

	float deg = (float)(angle%60);
 8000c44:	88fa      	ldrh	r2, [r7, #6]
 8000c46:	4b80      	ldr	r3, [pc, #512]	; (8000e48 <inverter+0x238>)
 8000c48:	fba3 1302 	umull	r1, r3, r3, r2
 8000c4c:	0959      	lsrs	r1, r3, #5
 8000c4e:	460b      	mov	r3, r1
 8000c50:	011b      	lsls	r3, r3, #4
 8000c52:	1a5b      	subs	r3, r3, r1
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	1ad3      	subs	r3, r2, r3
 8000c58:	b29b      	uxth	r3, r3
 8000c5a:	ee07 3a90 	vmov	s15, r3
 8000c5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c62:	edc7 7a04 	vstr	s15, [r7, #16]
	//uint32_t T1 = (uint32_t )(duty_max*duty*((240-4*deg)*(120-deg)/(40500 - (60-deg)*(120-deg))) ); //*pi/180
	uint16_t T1 = (uint16_t)(voltage*(float)( 4*(60-deg)*(180-(60-deg))/(40500 - (60-deg)*(180-(60-deg))))); //*pi/180
 8000c66:	88bb      	ldrh	r3, [r7, #4]
 8000c68:	ee07 3a90 	vmov	s15, r3
 8000c6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c70:	eddf 6a76 	vldr	s13, [pc, #472]	; 8000e4c <inverter+0x23c>
 8000c74:	edd7 7a04 	vldr	s15, [r7, #16]
 8000c78:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000c7c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8000c80:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000c84:	ed9f 6a71 	vldr	s12, [pc, #452]	; 8000e4c <inverter+0x23c>
 8000c88:	edd7 7a04 	vldr	s15, [r7, #16]
 8000c8c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000c90:	ed9f 6a6f 	vldr	s12, [pc, #444]	; 8000e50 <inverter+0x240>
 8000c94:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000c98:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8000c9c:	eddf 6a6b 	vldr	s13, [pc, #428]	; 8000e4c <inverter+0x23c>
 8000ca0:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ca4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000ca8:	eddf 5a68 	vldr	s11, [pc, #416]	; 8000e4c <inverter+0x23c>
 8000cac:	edd7 7a04 	vldr	s15, [r7, #16]
 8000cb0:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8000cb4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8000e50 <inverter+0x240>
 8000cb8:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8000cbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000cc0:	eddf 6a64 	vldr	s13, [pc, #400]	; 8000e54 <inverter+0x244>
 8000cc4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000cc8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000ccc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cd4:	ee17 3a90 	vmov	r3, s15
 8000cd8:	81fb      	strh	r3, [r7, #14]
	uint16_t T2 = (uint16_t)(voltage*(float)(4*deg*(180-deg)/(40500 - deg*(180-deg))) );
 8000cda:	88bb      	ldrh	r3, [r7, #4]
 8000cdc:	ee07 3a90 	vmov	s15, r3
 8000ce0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ce4:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ce8:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8000cec:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000cf0:	ed9f 6a57 	vldr	s12, [pc, #348]	; 8000e50 <inverter+0x240>
 8000cf4:	edd7 7a04 	vldr	s15, [r7, #16]
 8000cf8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000cfc:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8000d00:	eddf 6a53 	vldr	s13, [pc, #332]	; 8000e50 <inverter+0x240>
 8000d04:	edd7 7a04 	vldr	s15, [r7, #16]
 8000d08:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000d0c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000d10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d14:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8000e54 <inverter+0x244>
 8000d18:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000d1c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000d20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d28:	ee17 3a90 	vmov	r3, s15
 8000d2c:	81bb      	strh	r3, [r7, #12]
	uint16_t T0 = (duty_max-T1-T2)/2;
 8000d2e:	89fb      	ldrh	r3, [r7, #14]
 8000d30:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8000d34:	3303      	adds	r3, #3
 8000d36:	89ba      	ldrh	r2, [r7, #12]
 8000d38:	1a9b      	subs	r3, r3, r2
 8000d3a:	0fda      	lsrs	r2, r3, #31
 8000d3c:	4413      	add	r3, r2
 8000d3e:	105b      	asrs	r3, r3, #1
 8000d40:	817b      	strh	r3, [r7, #10]

	if(angle >= 0 && angle < 60){
 8000d42:	88fb      	ldrh	r3, [r7, #6]
 8000d44:	2b3b      	cmp	r3, #59	; 0x3b
 8000d46:	d80c      	bhi.n	8000d62 <inverter+0x152>
		compare_M1 = T0;
 8000d48:	897b      	ldrh	r3, [r7, #10]
 8000d4a:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0+T2;
 8000d4c:	897a      	ldrh	r2, [r7, #10]
 8000d4e:	89bb      	ldrh	r3, [r7, #12]
 8000d50:	4413      	add	r3, r2
 8000d52:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0+T1+T2;
 8000d54:	897a      	ldrh	r2, [r7, #10]
 8000d56:	89fb      	ldrh	r3, [r7, #14]
 8000d58:	441a      	add	r2, r3
 8000d5a:	89bb      	ldrh	r3, [r7, #12]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	617b      	str	r3, [r7, #20]
 8000d60:	e060      	b.n	8000e24 <inverter+0x214>
		}
	else if(angle >= 60 && angle < 120){
 8000d62:	88fb      	ldrh	r3, [r7, #6]
 8000d64:	2b3b      	cmp	r3, #59	; 0x3b
 8000d66:	d90f      	bls.n	8000d88 <inverter+0x178>
 8000d68:	88fb      	ldrh	r3, [r7, #6]
 8000d6a:	2b77      	cmp	r3, #119	; 0x77
 8000d6c:	d80c      	bhi.n	8000d88 <inverter+0x178>
		compare_M1 = T0;
 8000d6e:	897b      	ldrh	r3, [r7, #10]
 8000d70:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0+T1+T2;
 8000d72:	897a      	ldrh	r2, [r7, #10]
 8000d74:	89fb      	ldrh	r3, [r7, #14]
 8000d76:	441a      	add	r2, r3
 8000d78:	89bb      	ldrh	r3, [r7, #12]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0+T1;
 8000d7e:	897a      	ldrh	r2, [r7, #10]
 8000d80:	89fb      	ldrh	r3, [r7, #14]
 8000d82:	4413      	add	r3, r2
 8000d84:	617b      	str	r3, [r7, #20]
 8000d86:	e04d      	b.n	8000e24 <inverter+0x214>
		}
	else if(angle >= 120 && angle < 180){
 8000d88:	88fb      	ldrh	r3, [r7, #6]
 8000d8a:	2b77      	cmp	r3, #119	; 0x77
 8000d8c:	d90f      	bls.n	8000dae <inverter+0x19e>
 8000d8e:	88fb      	ldrh	r3, [r7, #6]
 8000d90:	2bb3      	cmp	r3, #179	; 0xb3
 8000d92:	d80c      	bhi.n	8000dae <inverter+0x19e>
		compare_M1 = T0+T2;
 8000d94:	897a      	ldrh	r2, [r7, #10]
 8000d96:	89bb      	ldrh	r3, [r7, #12]
 8000d98:	4413      	add	r3, r2
 8000d9a:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0+T1+T2;
 8000d9c:	897a      	ldrh	r2, [r7, #10]
 8000d9e:	89fb      	ldrh	r3, [r7, #14]
 8000da0:	441a      	add	r2, r3
 8000da2:	89bb      	ldrh	r3, [r7, #12]
 8000da4:	4413      	add	r3, r2
 8000da6:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0;
 8000da8:	897b      	ldrh	r3, [r7, #10]
 8000daa:	617b      	str	r3, [r7, #20]
 8000dac:	e03a      	b.n	8000e24 <inverter+0x214>
		}
	else if(angle >= 180 && angle < 240){
 8000dae:	88fb      	ldrh	r3, [r7, #6]
 8000db0:	2bb3      	cmp	r3, #179	; 0xb3
 8000db2:	d90f      	bls.n	8000dd4 <inverter+0x1c4>
 8000db4:	88fb      	ldrh	r3, [r7, #6]
 8000db6:	2bef      	cmp	r3, #239	; 0xef
 8000db8:	d80c      	bhi.n	8000dd4 <inverter+0x1c4>
		compare_M1 = T0+T1+T2;
 8000dba:	897a      	ldrh	r2, [r7, #10]
 8000dbc:	89fb      	ldrh	r3, [r7, #14]
 8000dbe:	441a      	add	r2, r3
 8000dc0:	89bb      	ldrh	r3, [r7, #12]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0+T1;
 8000dc6:	897a      	ldrh	r2, [r7, #10]
 8000dc8:	89fb      	ldrh	r3, [r7, #14]
 8000dca:	4413      	add	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0;
 8000dce:	897b      	ldrh	r3, [r7, #10]
 8000dd0:	617b      	str	r3, [r7, #20]
 8000dd2:	e027      	b.n	8000e24 <inverter+0x214>
		}
	else if(angle >= 240 && angle < 300){
 8000dd4:	88fb      	ldrh	r3, [r7, #6]
 8000dd6:	2bef      	cmp	r3, #239	; 0xef
 8000dd8:	d910      	bls.n	8000dfc <inverter+0x1ec>
 8000dda:	88fb      	ldrh	r3, [r7, #6]
 8000ddc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000de0:	d20c      	bcs.n	8000dfc <inverter+0x1ec>
		compare_M1 = T0+T1+T2;
 8000de2:	897a      	ldrh	r2, [r7, #10]
 8000de4:	89fb      	ldrh	r3, [r7, #14]
 8000de6:	441a      	add	r2, r3
 8000de8:	89bb      	ldrh	r3, [r7, #12]
 8000dea:	4413      	add	r3, r2
 8000dec:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0;
 8000dee:	897b      	ldrh	r3, [r7, #10]
 8000df0:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0+T2;
 8000df2:	897a      	ldrh	r2, [r7, #10]
 8000df4:	89bb      	ldrh	r3, [r7, #12]
 8000df6:	4413      	add	r3, r2
 8000df8:	617b      	str	r3, [r7, #20]
 8000dfa:	e013      	b.n	8000e24 <inverter+0x214>
		}
	else if(angle >= 300 && angle < 360){
 8000dfc:	88fb      	ldrh	r3, [r7, #6]
 8000dfe:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000e02:	d30f      	bcc.n	8000e24 <inverter+0x214>
 8000e04:	88fb      	ldrh	r3, [r7, #6]
 8000e06:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8000e0a:	d20b      	bcs.n	8000e24 <inverter+0x214>
		compare_M1 = T0+T1;
 8000e0c:	897a      	ldrh	r2, [r7, #10]
 8000e0e:	89fb      	ldrh	r3, [r7, #14]
 8000e10:	4413      	add	r3, r2
 8000e12:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0;
 8000e14:	897b      	ldrh	r3, [r7, #10]
 8000e16:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0+T1+T2;
 8000e18:	897a      	ldrh	r2, [r7, #10]
 8000e1a:	89fb      	ldrh	r3, [r7, #14]
 8000e1c:	441a      	add	r2, r3
 8000e1e:	89bb      	ldrh	r3, [r7, #12]
 8000e20:	4413      	add	r3, r2
 8000e22:	617b      	str	r3, [r7, #20]
		}

	//PrintServerPrintf("OK %d %d %d %d\r\n", (uint32_t)(compare_M1), (uint32_t)(compare_M2), (uint32_t)(compare_M3), (int32_t)angle);
	TIM1->CCR1 = compare_M1;
 8000e24:	4a0c      	ldr	r2, [pc, #48]	; (8000e58 <inverter+0x248>)
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2 = compare_M2;
 8000e2a:	4a0b      	ldr	r2, [pc, #44]	; (8000e58 <inverter+0x248>)
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1->CCR3 = compare_M3;
 8000e30:	4a09      	ldr	r2, [pc, #36]	; (8000e58 <inverter+0x248>)
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000e36:	bf00      	nop
 8000e38:	3724      	adds	r7, #36	; 0x24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	16c16c17 	.word	0x16c16c17
 8000e48:	88888889 	.word	0x88888889
 8000e4c:	42700000 	.word	0x42700000
 8000e50:	43340000 	.word	0x43340000
 8000e54:	471e3400 	.word	0x471e3400
 8000e58:	40012c00 	.word	0x40012c00

08000e5c <shutoff>:
void shutoff(void){
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
	TIM1->CCR1 = 0;
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <shutoff+0x20>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 8000e66:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <shutoff+0x20>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 8000e6c:	4b03      	ldr	r3, [pc, #12]	; (8000e7c <shutoff+0x20>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	63da      	str	r2, [r3, #60]	; 0x3c

}
 8000e72:	bf00      	nop
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	40012c00 	.word	0x40012c00

08000e80 <shutdown>:
void shutdown(void){
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1); //error
 8000e84:	2100      	movs	r1, #0
 8000e86:	480e      	ldr	r0, [pc, #56]	; (8000ec0 <shutdown+0x40>)
 8000e88:	f007 fafa 	bl	8008480 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1); //error
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	480c      	ldr	r0, [pc, #48]	; (8000ec0 <shutdown+0x40>)
 8000e90:	f008 fc48 	bl	8009724 <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2); //error
 8000e94:	2104      	movs	r1, #4
 8000e96:	480a      	ldr	r0, [pc, #40]	; (8000ec0 <shutdown+0x40>)
 8000e98:	f007 faf2 	bl	8008480 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2); //error
 8000e9c:	2104      	movs	r1, #4
 8000e9e:	4808      	ldr	r0, [pc, #32]	; (8000ec0 <shutdown+0x40>)
 8000ea0:	f008 fc40 	bl	8009724 <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3); //error
 8000ea4:	2108      	movs	r1, #8
 8000ea6:	4806      	ldr	r0, [pc, #24]	; (8000ec0 <shutdown+0x40>)
 8000ea8:	f007 faea 	bl	8008480 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3); //error
 8000eac:	2108      	movs	r1, #8
 8000eae:	4804      	ldr	r0, [pc, #16]	; (8000ec0 <shutdown+0x40>)
 8000eb0:	f008 fc38 	bl	8009724 <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_Base_Stop(&htim1);
 8000eb4:	4802      	ldr	r0, [pc, #8]	; (8000ec0 <shutdown+0x40>)
 8000eb6:	f007 f8ef 	bl	8008098 <HAL_TIM_Base_Stop>
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000720 	.word	0x20000720

08000ec4 <Compute>:
#include "PID.h"

#include <stdio.h>

void Compute(PID_instance *val)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
	if(!val->inAuto) return;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	f000 80a2 	beq.w	800101c <Compute+0x158>
	/*Compute all the working error variables*/
	float error = val->Setpoint - val->Input;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	ed93 7a02 	vldr	s14, [r3, #8]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	edd3 7a00 	vldr	s15, [r3]
 8000ee4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ee8:	edc7 7a03 	vstr	s15, [r7, #12]
	float dInput = (val->Input - val->lastInput);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	ed93 7a00 	vldr	s14, [r3]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	edd3 7a04 	vldr	s15, [r3, #16]
 8000ef8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000efc:	edc7 7a02 	vstr	s15, [r7, #8]
	val->outputSum+= (val->ki * error);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	ed93 7a03 	vldr	s14, [r3, #12]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	edd3 6a06 	vldr	s13, [r3, #24]
 8000f0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	edc3 7a03 	vstr	s15, [r3, #12]

	/*Add Proportional on Measurement, if P_ON_M is specified*/
	if(val->pOnM) val->outputSum-= val->pOnMKp * dInput;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d00e      	beq.n	8000f46 <Compute+0x82>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	ed93 7a03 	vldr	s14, [r3, #12]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8000f34:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	edc3 7a03 	vstr	s15, [r3, #12]

	if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	ed93 7a03 	vldr	s14, [r3, #12]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000f52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f5a:	dd04      	ble.n	8000f66 <Compute+0xa2>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	60da      	str	r2, [r3, #12]
 8000f64:	e00e      	b.n	8000f84 <Compute+0xc0>
	else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	ed93 7a03 	vldr	s14, [r3, #12]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	edd3 7a08 	vldr	s15, [r3, #32]
 8000f72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f7a:	d503      	bpl.n	8000f84 <Compute+0xc0>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6a1a      	ldr	r2, [r3, #32]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	60da      	str	r2, [r3, #12]

	/*Add Proportional on Error, if P_ON_E is specified*/
	if(val->pOnE) val->Output = val->pOnEKp * error;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d00a      	beq.n	8000fa4 <Compute+0xe0>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8000f94:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	edc3 7a01 	vstr	s15, [r3, #4]
 8000fa2:	e003      	b.n	8000fac <Compute+0xe8>
	else val->Output = 0;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f04f 0200 	mov.w	r2, #0
 8000faa:	605a      	str	r2, [r3, #4]

	/*Compute Rest of PID Output*/
	val->Output += val->outputSum - val->kd * dInput;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	ed93 7a01 	vldr	s14, [r3, #4]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	edd3 6a03 	vldr	s13, [r3, #12]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	ed93 6a07 	vldr	s12, [r3, #28]
 8000fbe:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fc2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000fc6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000fca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	edc3 7a01 	vstr	s15, [r3, #4]

	if(val->Output > val->outMax) val->Output = val->outMax;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	ed93 7a01 	vldr	s14, [r3, #4]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000fe0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fe8:	dd04      	ble.n	8000ff4 <Compute+0x130>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	e00e      	b.n	8001012 <Compute+0x14e>
	else if(val->Output < val->outMin) val->Output = val->outMin;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	ed93 7a01 	vldr	s14, [r3, #4]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	edd3 7a08 	vldr	s15, [r3, #32]
 8001000:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001008:	d503      	bpl.n	8001012 <Compute+0x14e>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6a1a      	ldr	r2, [r3, #32]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	605a      	str	r2, [r3, #4]

	/*Remember some variables for next time*/
	val->lastInput = val->Input;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	611a      	str	r2, [r3, #16]
 800101a:	e000      	b.n	800101e <Compute+0x15a>
	if(!val->inAuto) return;
 800101c:	bf00      	nop
}
 800101e:	3714      	adds	r7, #20
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <SetTunings>:

void SetTunings(PID_instance *val, float Kp, float Ki, float Kd, float pOn)
{
 8001028:	b480      	push	{r7}
 800102a:	b089      	sub	sp, #36	; 0x24
 800102c:	af00      	add	r7, sp, #0
 800102e:	6178      	str	r0, [r7, #20]
 8001030:	ed87 0a04 	vstr	s0, [r7, #16]
 8001034:	edc7 0a03 	vstr	s1, [r7, #12]
 8001038:	ed87 1a02 	vstr	s2, [r7, #8]
 800103c:	edc7 1a01 	vstr	s3, [r7, #4]
   if (Kp<0 || Ki<0|| Kd<0 || pOn<0 || pOn>1) return;
 8001040:	edd7 7a04 	vldr	s15, [r7, #16]
 8001044:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800104c:	f100 809b 	bmi.w	8001186 <SetTunings+0x15e>
 8001050:	edd7 7a03 	vldr	s15, [r7, #12]
 8001054:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800105c:	f100 8093 	bmi.w	8001186 <SetTunings+0x15e>
 8001060:	edd7 7a02 	vldr	s15, [r7, #8]
 8001064:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800106c:	f100 808b 	bmi.w	8001186 <SetTunings+0x15e>
 8001070:	edd7 7a01 	vldr	s15, [r7, #4]
 8001074:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800107c:	f100 8083 	bmi.w	8001186 <SetTunings+0x15e>
 8001080:	edd7 7a01 	vldr	s15, [r7, #4]
 8001084:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001088:	eef4 7ac7 	vcmpe.f32	s15, s14
 800108c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001090:	dc79      	bgt.n	8001186 <SetTunings+0x15e>

   val->pOnE = pOn>0; //some p on error is desired;
 8001092:	edd7 7a01 	vldr	s15, [r7, #4]
 8001096:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800109a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800109e:	bfcc      	ite	gt
 80010a0:	2301      	movgt	r3, #1
 80010a2:	2300      	movle	r3, #0
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	461a      	mov	r2, r3
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
   val->pOnM = pOn<1; //some p on measurement is desired;
 80010ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80010b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80010b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010be:	bf4c      	ite	mi
 80010c0:	2301      	movmi	r3, #1
 80010c2:	2300      	movpl	r3, #0
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	461a      	mov	r2, r3
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

   float SampleTimeInSec = ((float)val->SampleTime)/1000000;
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d2:	ee07 3a90 	vmov	s15, r3
 80010d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010da:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8001194 <SetTunings+0x16c>
 80010de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010e2:	edc7 7a07 	vstr	s15, [r7, #28]
   val->kp = Kp;
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	615a      	str	r2, [r3, #20]
   val->ki = Ki * SampleTimeInSec;
 80010ec:	ed97 7a03 	vldr	s14, [r7, #12]
 80010f0:	edd7 7a07 	vldr	s15, [r7, #28]
 80010f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	edc3 7a06 	vstr	s15, [r3, #24]
   val->kd = Kd / SampleTimeInSec;
 80010fe:	edd7 6a02 	vldr	s13, [r7, #8]
 8001102:	ed97 7a07 	vldr	s14, [r7, #28]
 8001106:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	edc3 7a07 	vstr	s15, [r3, #28]

  if(val->controllerDirection ==REVERSE)
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001114:	2b01      	cmp	r3, #1
 8001116:	d11d      	bne.n	8001154 <SetTunings+0x12c>
   {
	  val->kp = (0 - val->kp);
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	edd3 7a05 	vldr	s15, [r3, #20]
 800111e:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001198 <SetTunings+0x170>
 8001122:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	edc3 7a05 	vstr	s15, [r3, #20]
	  val->ki = (0 - val->ki);
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001132:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001198 <SetTunings+0x170>
 8001136:	ee77 7a67 	vsub.f32	s15, s14, s15
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	edc3 7a06 	vstr	s15, [r3, #24]
	  val->kd = (0 - val->kd);
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	edd3 7a07 	vldr	s15, [r3, #28]
 8001146:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001198 <SetTunings+0x170>
 800114a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	edc3 7a07 	vstr	s15, [r3, #28]
   }

  val->pOnEKp = pOn * val->kp;
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	ed93 7a05 	vldr	s14, [r3, #20]
 800115a:	edd7 7a01 	vldr	s15, [r7, #4]
 800115e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
  val->pOnMKp = (1 - pOn) * val->kp;
 8001168:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800116c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001170:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	edd3 7a05 	vldr	s15, [r3, #20]
 800117a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 8001184:	e000      	b.n	8001188 <SetTunings+0x160>
   if (Kp<0 || Ki<0|| Kd<0 || pOn<0 || pOn>1) return;
 8001186:	bf00      	nop
}
 8001188:	3724      	adds	r7, #36	; 0x24
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	49742400 	.word	0x49742400
 8001198:	00000000 	.word	0x00000000

0800119c <SetSampleTime>:

void SetSampleTime(PID_instance *val, int NewSampleTime)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
   if (NewSampleTime > 0)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	dd25      	ble.n	80011f8 <SetSampleTime+0x5c>
   {
      float ratio  = (float)NewSampleTime
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	ee07 3a90 	vmov	s15, r3
 80011b2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
                      / (float)val->SampleTime;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ba:	ee07 3a90 	vmov	s15, r3
 80011be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
      float ratio  = (float)NewSampleTime
 80011c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011c6:	edc7 7a03 	vstr	s15, [r7, #12]
      val->ki *= ratio;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	ed93 7a06 	vldr	s14, [r3, #24]
 80011d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80011d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	edc3 7a06 	vstr	s15, [r3, #24]
      val->kd /= ratio;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	edd3 6a07 	vldr	s13, [r3, #28]
 80011e4:	ed97 7a03 	vldr	s14, [r7, #12]
 80011e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	edc3 7a07 	vstr	s15, [r3, #28]
      val->SampleTime = (unsigned long)NewSampleTime;
 80011f2:	683a      	ldr	r2, [r7, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	629a      	str	r2, [r3, #40]	; 0x28
   }
}
 80011f8:	bf00      	nop
 80011fa:	3714      	adds	r7, #20
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <SetOutputLimits>:

void SetOutputLimits(PID_instance *val, float Min, float Max)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001210:	edc7 0a01 	vstr	s1, [r7, #4]
   if(Min > Max) return;
 8001214:	ed97 7a02 	vldr	s14, [r7, #8]
 8001218:	edd7 7a01 	vldr	s15, [r7, #4]
 800121c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001224:	dc44      	bgt.n	80012b0 <SetOutputLimits+0xac>
   val->outMin = Min;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	68ba      	ldr	r2, [r7, #8]
 800122a:	621a      	str	r2, [r3, #32]
   val->outMax = Max;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	625a      	str	r2, [r3, #36]	; 0x24

   if(val->Output > val->outMax) val->Output = val->outMax;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	ed93 7a01 	vldr	s14, [r3, #4]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800123e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001246:	dd04      	ble.n	8001252 <SetOutputLimits+0x4e>
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	e00e      	b.n	8001270 <SetOutputLimits+0x6c>
   else if(val->Output < val->outMin) val->Output = val->outMin;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	ed93 7a01 	vldr	s14, [r3, #4]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	edd3 7a08 	vldr	s15, [r3, #32]
 800125e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001266:	d503      	bpl.n	8001270 <SetOutputLimits+0x6c>
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	6a1a      	ldr	r2, [r3, #32]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	605a      	str	r2, [r3, #4]

   if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	ed93 7a03 	vldr	s14, [r3, #12]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800127c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001284:	dd04      	ble.n	8001290 <SetOutputLimits+0x8c>
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	e010      	b.n	80012b2 <SetOutputLimits+0xae>
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	ed93 7a03 	vldr	s14, [r3, #12]
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	edd3 7a08 	vldr	s15, [r3, #32]
 800129c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a4:	d505      	bpl.n	80012b2 <SetOutputLimits+0xae>
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	6a1a      	ldr	r2, [r3, #32]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	e000      	b.n	80012b2 <SetOutputLimits+0xae>
   if(Min > Max) return;
 80012b0:	bf00      	nop
}
 80012b2:	3714      	adds	r7, #20
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <SetMode>:

void SetMode(PID_instance *val, int Mode)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
    uint8_t newAuto = (Mode == AUTOMATIC);
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	bf0c      	ite	eq
 80012cc:	2301      	moveq	r3, #1
 80012ce:	2300      	movne	r3, #0
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	73fb      	strb	r3, [r7, #15]
    if(newAuto == !val->inAuto)
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 80012dc:	2a00      	cmp	r2, #0
 80012de:	bf0c      	ite	eq
 80012e0:	2201      	moveq	r2, #1
 80012e2:	2200      	movne	r2, #0
 80012e4:	b2d2      	uxtb	r2, r2
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d102      	bne.n	80012f0 <SetMode+0x34>
    {  /*we just went from manual to auto*/
        Initialize(val);
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f000 f808 	bl	8001300 <Initialize>
    }
    val->inAuto = newAuto;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	7bfa      	ldrb	r2, [r7, #15]
 80012f4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 80012f8:	bf00      	nop
 80012fa:	3710      	adds	r7, #16
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <Initialize>:

void Initialize(PID_instance *val)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
	val->lastInput = val->Input;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	611a      	str	r2, [r3, #16]
	val->outputSum = val->Output;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685a      	ldr	r2, [r3, #4]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	60da      	str	r2, [r3, #12]
   if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	ed93 7a03 	vldr	s14, [r3, #12]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001324:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800132c:	dd04      	ble.n	8001338 <Initialize+0x38>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	60da      	str	r2, [r3, #12]
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
}
 8001336:	e00f      	b.n	8001358 <Initialize+0x58>
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	ed93 7a03 	vldr	s14, [r3, #12]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	edd3 7a08 	vldr	s15, [r3, #32]
 8001344:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800134c:	d400      	bmi.n	8001350 <Initialize+0x50>
}
 800134e:	e003      	b.n	8001358 <Initialize+0x58>
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a1a      	ldr	r2, [r3, #32]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	60da      	str	r2, [r3, #12]
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <SetControllerDirection>:

void SetControllerDirection(PID_instance *val, int Direction)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
	val->controllerDirection = Direction;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	683a      	ldr	r2, [r7, #0]
 8001372:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <ADC_CAL_init>:
Current data;

#define Vref 3000
#define ADC_RES 4095

int32_t ADC_CAL_init(ADC_HandleTypeDef *hadc){
 8001380:	b580      	push	{r7, lr}
 8001382:	b094      	sub	sp, #80	; 0x50
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef HAL_status;
	ADC_HandleTypeDef *adc_handle_CAL;

	//check if pointer is NULL
	if(hadc == NULL)return -1; //null pointer error
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d102      	bne.n	8001394 <ADC_CAL_init+0x14>
 800138e:	f04f 33ff 	mov.w	r3, #4294967295
 8001392:	e1c6      	b.n	8001722 <ADC_CAL_init+0x3a2>

	//copy pointer
	adc_handle_CAL = hadc;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	64bb      	str	r3, [r7, #72]	; 0x48

	//do a calibration
	HAL_status = HAL_ADCEx_Calibration_Start(adc_handle_CAL, ADC_SINGLE_ENDED);
 8001398:	217f      	movs	r1, #127	; 0x7f
 800139a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800139c:	f003 fd74 	bl	8004e88 <HAL_ADCEx_Calibration_Start>
 80013a0:	4603      	mov	r3, r0
 80013a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (HAL_status != HAL_OK)return -2; //ADC calibration failed
 80013a6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d002      	beq.n	80013b4 <ADC_CAL_init+0x34>
 80013ae:	f06f 0301 	mvn.w	r3, #1
 80013b2:	e1b6      	b.n	8001722 <ADC_CAL_init+0x3a2>

	//start ADC
	uint16_t calibrating = number_of_calibration_points;
 80013b4:	f242 7310 	movw	r3, #10000	; 0x2710
 80013b8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	volatile uint32_t Voltage_offset_temp[3] = {0};
 80013bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = {0};
 80013c8:	f107 0308 	add.w	r3, r7, #8
 80013cc:	2220      	movs	r2, #32
 80013ce:	2100      	movs	r1, #0
 80013d0:	4618      	mov	r0, r3
 80013d2:	f009 fd65 	bl	800aea0 <memset>
	while(calibrating){
 80013d6:	e19c      	b.n	8001712 <ADC_CAL_init+0x392>
		sConfig.Channel = ADC_CHANNEL_0;
 80013d8:	2301      	movs	r3, #1
 80013da:	60bb      	str	r3, [r7, #8]
		HAL_status = HAL_ADC_ConfigChannel(adc_handle_CAL, &sConfig); // required for code to sample both channels, why?
 80013dc:	f107 0308 	add.w	r3, r7, #8
 80013e0:	4619      	mov	r1, r3
 80013e2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80013e4:	f002 fefc 	bl	80041e0 <HAL_ADC_ConfigChannel>
 80013e8:	4603      	mov	r3, r0
 80013ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -3; //ADC start failed
 80013ee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d002      	beq.n	80013fc <ADC_CAL_init+0x7c>
 80013f6:	f06f 0302 	mvn.w	r3, #2
 80013fa:	e192      	b.n	8001722 <ADC_CAL_init+0x3a2>
		HAL_status = HAL_ADC_Start(adc_handle_CAL);
 80013fc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80013fe:	f002 fa2d 	bl	800385c <HAL_ADC_Start>
 8001402:	4603      	mov	r3, r0
 8001404:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -3; //ADC start failed
 8001408:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800140c:	2b00      	cmp	r3, #0
 800140e:	d002      	beq.n	8001416 <ADC_CAL_init+0x96>
 8001410:	f06f 0302 	mvn.w	r3, #2
 8001414:	e185      	b.n	8001722 <ADC_CAL_init+0x3a2>
		//whait until the ADC has gotten the value
		HAL_status = HAL_ADC_PollForConversion(adc_handle_CAL, 1000);
 8001416:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800141a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800141c:	f002 fb0e 	bl	8003a3c <HAL_ADC_PollForConversion>
 8001420:	4603      	mov	r3, r0
 8001422:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status == HAL_TIMEOUT)return -4; //ADC timeout
 8001426:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800142a:	2b03      	cmp	r3, #3
 800142c:	d102      	bne.n	8001434 <ADC_CAL_init+0xb4>
 800142e:	f06f 0303 	mvn.w	r3, #3
 8001432:	e176      	b.n	8001722 <ADC_CAL_init+0x3a2>
		if (HAL_status != HAL_OK)return -5; //ADC failed
 8001434:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001438:	2b00      	cmp	r3, #0
 800143a:	d002      	beq.n	8001442 <ADC_CAL_init+0xc2>
 800143c:	f06f 0304 	mvn.w	r3, #4
 8001440:	e16f      	b.n	8001722 <ADC_CAL_init+0x3a2>
		uint32_t M3_raw = HAL_ADC_GetValue(adc_handle_CAL);
 8001442:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001444:	f002 fc86 	bl	8003d54 <HAL_ADC_GetValue>
 8001448:	6438      	str	r0, [r7, #64]	; 0x40
		HAL_status = HAL_ADC_Stop(adc_handle_CAL);
 800144a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800144c:	f002 fac2 	bl	80039d4 <HAL_ADC_Stop>
 8001450:	4603      	mov	r3, r0
 8001452:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -6; //ADC start failed
 8001456:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800145a:	2b00      	cmp	r3, #0
 800145c:	d002      	beq.n	8001464 <ADC_CAL_init+0xe4>
 800145e:	f06f 0305 	mvn.w	r3, #5
 8001462:	e15e      	b.n	8001722 <ADC_CAL_init+0x3a2>

		sConfig.Channel = ADC_CHANNEL_1;
 8001464:	4bb1      	ldr	r3, [pc, #708]	; (800172c <ADC_CAL_init+0x3ac>)
 8001466:	60bb      	str	r3, [r7, #8]
		HAL_status = HAL_ADC_ConfigChannel(adc_handle_CAL, &sConfig); // required for code to sample both channels, why?
 8001468:	f107 0308 	add.w	r3, r7, #8
 800146c:	4619      	mov	r1, r3
 800146e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001470:	f002 feb6 	bl	80041e0 <HAL_ADC_ConfigChannel>
 8001474:	4603      	mov	r3, r0
 8001476:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -3; //ADC start failed
 800147a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800147e:	2b00      	cmp	r3, #0
 8001480:	d002      	beq.n	8001488 <ADC_CAL_init+0x108>
 8001482:	f06f 0302 	mvn.w	r3, #2
 8001486:	e14c      	b.n	8001722 <ADC_CAL_init+0x3a2>
		HAL_status = HAL_ADC_Start(adc_handle_CAL);
 8001488:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800148a:	f002 f9e7 	bl	800385c <HAL_ADC_Start>
 800148e:	4603      	mov	r3, r0
 8001490:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -3; //ADC start failed
 8001494:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001498:	2b00      	cmp	r3, #0
 800149a:	d002      	beq.n	80014a2 <ADC_CAL_init+0x122>
 800149c:	f06f 0302 	mvn.w	r3, #2
 80014a0:	e13f      	b.n	8001722 <ADC_CAL_init+0x3a2>
		//whait until the ADC has gotten the value
		HAL_status = HAL_ADC_PollForConversion(adc_handle_CAL, 1000);
 80014a2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80014a6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80014a8:	f002 fac8 	bl	8003a3c <HAL_ADC_PollForConversion>
 80014ac:	4603      	mov	r3, r0
 80014ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status == HAL_TIMEOUT)return -4; //ADC timeout
 80014b2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80014b6:	2b03      	cmp	r3, #3
 80014b8:	d102      	bne.n	80014c0 <ADC_CAL_init+0x140>
 80014ba:	f06f 0303 	mvn.w	r3, #3
 80014be:	e130      	b.n	8001722 <ADC_CAL_init+0x3a2>
		if (HAL_status != HAL_OK)return -5; //ADC failed
 80014c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d002      	beq.n	80014ce <ADC_CAL_init+0x14e>
 80014c8:	f06f 0304 	mvn.w	r3, #4
 80014cc:	e129      	b.n	8001722 <ADC_CAL_init+0x3a2>
		uint32_t M2_raw = HAL_ADC_GetValue(adc_handle_CAL);
 80014ce:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80014d0:	f002 fc40 	bl	8003d54 <HAL_ADC_GetValue>
 80014d4:	63f8      	str	r0, [r7, #60]	; 0x3c
		HAL_status = HAL_ADC_Stop(adc_handle_CAL);
 80014d6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80014d8:	f002 fa7c 	bl	80039d4 <HAL_ADC_Stop>
 80014dc:	4603      	mov	r3, r0
 80014de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -6; //ADC start failed
 80014e2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d002      	beq.n	80014f0 <ADC_CAL_init+0x170>
 80014ea:	f06f 0305 	mvn.w	r3, #5
 80014ee:	e118      	b.n	8001722 <ADC_CAL_init+0x3a2>

		sConfig.Channel = ADC_CHANNEL_2;
 80014f0:	4b8f      	ldr	r3, [pc, #572]	; (8001730 <ADC_CAL_init+0x3b0>)
 80014f2:	60bb      	str	r3, [r7, #8]
		HAL_status = HAL_ADC_ConfigChannel(adc_handle_CAL, &sConfig); // required for code to sample both channels, why?
 80014f4:	f107 0308 	add.w	r3, r7, #8
 80014f8:	4619      	mov	r1, r3
 80014fa:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80014fc:	f002 fe70 	bl	80041e0 <HAL_ADC_ConfigChannel>
 8001500:	4603      	mov	r3, r0
 8001502:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -3; //ADC start failed
 8001506:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800150a:	2b00      	cmp	r3, #0
 800150c:	d002      	beq.n	8001514 <ADC_CAL_init+0x194>
 800150e:	f06f 0302 	mvn.w	r3, #2
 8001512:	e106      	b.n	8001722 <ADC_CAL_init+0x3a2>
		HAL_status = HAL_ADC_Start(adc_handle_CAL);
 8001514:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001516:	f002 f9a1 	bl	800385c <HAL_ADC_Start>
 800151a:	4603      	mov	r3, r0
 800151c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -3; //ADC start failed
 8001520:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001524:	2b00      	cmp	r3, #0
 8001526:	d002      	beq.n	800152e <ADC_CAL_init+0x1ae>
 8001528:	f06f 0302 	mvn.w	r3, #2
 800152c:	e0f9      	b.n	8001722 <ADC_CAL_init+0x3a2>
		//whait until the ADC has gotten the value
		HAL_status = HAL_ADC_PollForConversion(adc_handle_CAL, 1000);
 800152e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001532:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001534:	f002 fa82 	bl	8003a3c <HAL_ADC_PollForConversion>
 8001538:	4603      	mov	r3, r0
 800153a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status == HAL_TIMEOUT)return -4; //ADC timeout
 800153e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001542:	2b03      	cmp	r3, #3
 8001544:	d102      	bne.n	800154c <ADC_CAL_init+0x1cc>
 8001546:	f06f 0303 	mvn.w	r3, #3
 800154a:	e0ea      	b.n	8001722 <ADC_CAL_init+0x3a2>
		if (HAL_status != HAL_OK)return -5; //ADC failed
 800154c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001550:	2b00      	cmp	r3, #0
 8001552:	d002      	beq.n	800155a <ADC_CAL_init+0x1da>
 8001554:	f06f 0304 	mvn.w	r3, #4
 8001558:	e0e3      	b.n	8001722 <ADC_CAL_init+0x3a2>
		uint32_t M1_raw = HAL_ADC_GetValue(adc_handle_CAL);
 800155a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800155c:	f002 fbfa 	bl	8003d54 <HAL_ADC_GetValue>
 8001560:	63b8      	str	r0, [r7, #56]	; 0x38
		HAL_status = HAL_ADC_Stop(adc_handle_CAL);
 8001562:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001564:	f002 fa36 	bl	80039d4 <HAL_ADC_Stop>
 8001568:	4603      	mov	r3, r0
 800156a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -6; //ADC start failed
 800156e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001572:	2b00      	cmp	r3, #0
 8001574:	d002      	beq.n	800157c <ADC_CAL_init+0x1fc>
 8001576:	f06f 0305 	mvn.w	r3, #5
 800157a:	e0d2      	b.n	8001722 <ADC_CAL_init+0x3a2>

		sConfig.Channel = ADC_CHANNEL_3;
 800157c:	4b6d      	ldr	r3, [pc, #436]	; (8001734 <ADC_CAL_init+0x3b4>)
 800157e:	60bb      	str	r3, [r7, #8]
		HAL_status = HAL_ADC_ConfigChannel(adc_handle_CAL, &sConfig); // required for code to sample both channels, why?
 8001580:	f107 0308 	add.w	r3, r7, #8
 8001584:	4619      	mov	r1, r3
 8001586:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001588:	f002 fe2a 	bl	80041e0 <HAL_ADC_ConfigChannel>
 800158c:	4603      	mov	r3, r0
 800158e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -3; //ADC start failed
 8001592:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001596:	2b00      	cmp	r3, #0
 8001598:	d002      	beq.n	80015a0 <ADC_CAL_init+0x220>
 800159a:	f06f 0302 	mvn.w	r3, #2
 800159e:	e0c0      	b.n	8001722 <ADC_CAL_init+0x3a2>
		HAL_status = HAL_ADC_Start(adc_handle_CAL);
 80015a0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80015a2:	f002 f95b 	bl	800385c <HAL_ADC_Start>
 80015a6:	4603      	mov	r3, r0
 80015a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -3; //ADC start failed
 80015ac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d002      	beq.n	80015ba <ADC_CAL_init+0x23a>
 80015b4:	f06f 0302 	mvn.w	r3, #2
 80015b8:	e0b3      	b.n	8001722 <ADC_CAL_init+0x3a2>
		//whait until the ADC has gotten the value
		HAL_status = HAL_ADC_PollForConversion(adc_handle_CAL, 1000);
 80015ba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80015be:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80015c0:	f002 fa3c 	bl	8003a3c <HAL_ADC_PollForConversion>
 80015c4:	4603      	mov	r3, r0
 80015c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status == HAL_TIMEOUT)return -4; //ADC timeout
 80015ca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80015ce:	2b03      	cmp	r3, #3
 80015d0:	d102      	bne.n	80015d8 <ADC_CAL_init+0x258>
 80015d2:	f06f 0303 	mvn.w	r3, #3
 80015d6:	e0a4      	b.n	8001722 <ADC_CAL_init+0x3a2>
		if (HAL_status != HAL_OK)return -5; //ADC failed
 80015d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d002      	beq.n	80015e6 <ADC_CAL_init+0x266>
 80015e0:	f06f 0304 	mvn.w	r3, #4
 80015e4:	e09d      	b.n	8001722 <ADC_CAL_init+0x3a2>
		uint32_t vdda_raw = HAL_ADC_GetValue(adc_handle_CAL);
 80015e6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80015e8:	f002 fbb4 	bl	8003d54 <HAL_ADC_GetValue>
 80015ec:	6378      	str	r0, [r7, #52]	; 0x34
		HAL_status = HAL_ADC_Stop(adc_handle_CAL);
 80015ee:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80015f0:	f002 f9f0 	bl	80039d4 <HAL_ADC_Stop>
 80015f4:	4603      	mov	r3, r0
 80015f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (HAL_status != HAL_OK)return -6; //ADC start failed
 80015fa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d002      	beq.n	8001608 <ADC_CAL_init+0x288>
 8001602:	f06f 0305 	mvn.w	r3, #5
 8001606:	e08c      	b.n	8001722 <ADC_CAL_init+0x3a2>
		//get current samples;
		VDDA = (int16_t)3000*(*vrefint)/(vdda_raw/number_of_oversample);
 8001608:	4b4b      	ldr	r3, [pc, #300]	; (8001738 <ADC_CAL_init+0x3b8>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	881b      	ldrh	r3, [r3, #0]
 800160e:	461a      	mov	r2, r3
 8001610:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001614:	fb02 f303 	mul.w	r3, r2, r3
 8001618:	461a      	mov	r2, r3
 800161a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800161c:	091b      	lsrs	r3, r3, #4
 800161e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001622:	b21a      	sxth	r2, r3
 8001624:	4b45      	ldr	r3, [pc, #276]	; (800173c <ADC_CAL_init+0x3bc>)
 8001626:	801a      	strh	r2, [r3, #0]
		Voltage_offset_temp[0] += (int32_t)((M1_raw/number_of_oversample*VDDA)/4095)*153/100; //*153/100
 8001628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800162a:	091b      	lsrs	r3, r3, #4
 800162c:	4a43      	ldr	r2, [pc, #268]	; (800173c <ADC_CAL_init+0x3bc>)
 800162e:	8812      	ldrh	r2, [r2, #0]
 8001630:	b212      	sxth	r2, r2
 8001632:	fb03 f202 	mul.w	r2, r3, r2
 8001636:	4b42      	ldr	r3, [pc, #264]	; (8001740 <ADC_CAL_init+0x3c0>)
 8001638:	fba3 1302 	umull	r1, r3, r3, r2
 800163c:	1ad2      	subs	r2, r2, r3
 800163e:	0852      	lsrs	r2, r2, #1
 8001640:	4413      	add	r3, r2
 8001642:	0adb      	lsrs	r3, r3, #11
 8001644:	461a      	mov	r2, r3
 8001646:	4613      	mov	r3, r2
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	4413      	add	r3, r2
 800164c:	011a      	lsls	r2, r3, #4
 800164e:	4413      	add	r3, r2
 8001650:	4a3c      	ldr	r2, [pc, #240]	; (8001744 <ADC_CAL_init+0x3c4>)
 8001652:	fb82 1203 	smull	r1, r2, r2, r3
 8001656:	1152      	asrs	r2, r2, #5
 8001658:	17db      	asrs	r3, r3, #31
 800165a:	1ad2      	subs	r2, r2, r3
 800165c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800165e:	4413      	add	r3, r2
 8001660:	62bb      	str	r3, [r7, #40]	; 0x28
		Voltage_offset_temp[1] += (int32_t)((M2_raw/number_of_oversample*VDDA)/4095)*153/100;
 8001662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001664:	091b      	lsrs	r3, r3, #4
 8001666:	4a35      	ldr	r2, [pc, #212]	; (800173c <ADC_CAL_init+0x3bc>)
 8001668:	8812      	ldrh	r2, [r2, #0]
 800166a:	b212      	sxth	r2, r2
 800166c:	fb03 f202 	mul.w	r2, r3, r2
 8001670:	4b33      	ldr	r3, [pc, #204]	; (8001740 <ADC_CAL_init+0x3c0>)
 8001672:	fba3 1302 	umull	r1, r3, r3, r2
 8001676:	1ad2      	subs	r2, r2, r3
 8001678:	0852      	lsrs	r2, r2, #1
 800167a:	4413      	add	r3, r2
 800167c:	0adb      	lsrs	r3, r3, #11
 800167e:	461a      	mov	r2, r3
 8001680:	4613      	mov	r3, r2
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	4413      	add	r3, r2
 8001686:	011a      	lsls	r2, r3, #4
 8001688:	4413      	add	r3, r2
 800168a:	4a2e      	ldr	r2, [pc, #184]	; (8001744 <ADC_CAL_init+0x3c4>)
 800168c:	fb82 1203 	smull	r1, r2, r2, r3
 8001690:	1152      	asrs	r2, r2, #5
 8001692:	17db      	asrs	r3, r3, #31
 8001694:	1ad2      	subs	r2, r2, r3
 8001696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001698:	4413      	add	r3, r2
 800169a:	62fb      	str	r3, [r7, #44]	; 0x2c
		Voltage_offset_temp[2] += (int32_t)((M3_raw/number_of_oversample*VDDA)/4095)*153/100;
 800169c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800169e:	091b      	lsrs	r3, r3, #4
 80016a0:	4a26      	ldr	r2, [pc, #152]	; (800173c <ADC_CAL_init+0x3bc>)
 80016a2:	8812      	ldrh	r2, [r2, #0]
 80016a4:	b212      	sxth	r2, r2
 80016a6:	fb03 f202 	mul.w	r2, r3, r2
 80016aa:	4b25      	ldr	r3, [pc, #148]	; (8001740 <ADC_CAL_init+0x3c0>)
 80016ac:	fba3 1302 	umull	r1, r3, r3, r2
 80016b0:	1ad2      	subs	r2, r2, r3
 80016b2:	0852      	lsrs	r2, r2, #1
 80016b4:	4413      	add	r3, r2
 80016b6:	0adb      	lsrs	r3, r3, #11
 80016b8:	461a      	mov	r2, r3
 80016ba:	4613      	mov	r3, r2
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	4413      	add	r3, r2
 80016c0:	011a      	lsls	r2, r3, #4
 80016c2:	4413      	add	r3, r2
 80016c4:	4a1f      	ldr	r2, [pc, #124]	; (8001744 <ADC_CAL_init+0x3c4>)
 80016c6:	fb82 1203 	smull	r1, r2, r2, r3
 80016ca:	1152      	asrs	r2, r2, #5
 80016cc:	17db      	asrs	r3, r3, #31
 80016ce:	1ad2      	subs	r2, r2, r3
 80016d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016d2:	4413      	add	r3, r2
 80016d4:	633b      	str	r3, [r7, #48]	; 0x30

		calibrating--;
 80016d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80016da:	3b01      	subs	r3, #1
 80016dc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

		if(!calibrating){
 80016e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d114      	bne.n	8001712 <ADC_CAL_init+0x392>
			Voltage_offset[0] = Voltage_offset_temp[0]/number_of_calibration_points;
 80016e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ea:	4a17      	ldr	r2, [pc, #92]	; (8001748 <ADC_CAL_init+0x3c8>)
 80016ec:	fba2 2303 	umull	r2, r3, r2, r3
 80016f0:	0b5b      	lsrs	r3, r3, #13
 80016f2:	4a16      	ldr	r2, [pc, #88]	; (800174c <ADC_CAL_init+0x3cc>)
 80016f4:	6013      	str	r3, [r2, #0]
			Voltage_offset[1] = Voltage_offset_temp[1]/number_of_calibration_points;
 80016f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f8:	4a13      	ldr	r2, [pc, #76]	; (8001748 <ADC_CAL_init+0x3c8>)
 80016fa:	fba2 2303 	umull	r2, r3, r2, r3
 80016fe:	0b5b      	lsrs	r3, r3, #13
 8001700:	4a12      	ldr	r2, [pc, #72]	; (800174c <ADC_CAL_init+0x3cc>)
 8001702:	6053      	str	r3, [r2, #4]
			Voltage_offset[2] = Voltage_offset_temp[2]/number_of_calibration_points;
 8001704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001706:	4a10      	ldr	r2, [pc, #64]	; (8001748 <ADC_CAL_init+0x3c8>)
 8001708:	fba2 2303 	umull	r2, r3, r2, r3
 800170c:	0b5b      	lsrs	r3, r3, #13
 800170e:	4a0f      	ldr	r2, [pc, #60]	; (800174c <ADC_CAL_init+0x3cc>)
 8001710:	6093      	str	r3, [r2, #8]
	while(calibrating){
 8001712:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001716:	2b00      	cmp	r3, #0
 8001718:	f47f ae5e 	bne.w	80013d8 <ADC_CAL_init+0x58>
		}
	}
	return VDDA; //success
 800171c:	4b07      	ldr	r3, [pc, #28]	; (800173c <ADC_CAL_init+0x3bc>)
 800171e:	881b      	ldrh	r3, [r3, #0]
 8001720:	b21b      	sxth	r3, r3
}
 8001722:	4618      	mov	r0, r3
 8001724:	3750      	adds	r7, #80	; 0x50
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	04300002 	.word	0x04300002
 8001730:	08600004 	.word	0x08600004
 8001734:	0c900008 	.word	0x0c900008
 8001738:	200000c0 	.word	0x200000c0
 800173c:	20000258 	.word	0x20000258
 8001740:	00100101 	.word	0x00100101
 8001744:	51eb851f 	.word	0x51eb851f
 8001748:	d1b71759 	.word	0xd1b71759
 800174c:	2000024c 	.word	0x2000024c

08001750 <current_init>:

void current_init(Current_Callback __IRQ_callback){
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
	ADC_CAL_init(&hadc1);
 8001758:	4807      	ldr	r0, [pc, #28]	; (8001778 <current_init+0x28>)
 800175a:	f7ff fe11 	bl	8001380 <ADC_CAL_init>

	IRQ_callback = __IRQ_callback;
 800175e:	4a07      	ldr	r2, [pc, #28]	; (800177c <current_init+0x2c>)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6013      	str	r3, [r2, #0]

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_result_DMA, number_of_channels*2);
 8001764:	2208      	movs	r2, #8
 8001766:	4906      	ldr	r1, [pc, #24]	; (8001780 <current_init+0x30>)
 8001768:	4803      	ldr	r0, [pc, #12]	; (8001778 <current_init+0x28>)
 800176a:	f002 fa3f 	bl	8003bec <HAL_ADC_Start_DMA>
}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	200002c4 	.word	0x200002c4
 800177c:	2000025c 	.word	0x2000025c
 8001780:	2000022c 	.word	0x2000022c

08001784 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
	VDDA = (int16_t)3000*(*vrefint)/(adc_result_DMA[3]/number_of_oversample);
 800178c:	4b4b      	ldr	r3, [pc, #300]	; (80018bc <HAL_ADC_ConvHalfCpltCallback+0x138>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	881b      	ldrh	r3, [r3, #0]
 8001792:	461a      	mov	r2, r3
 8001794:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001798:	fb02 f303 	mul.w	r3, r2, r3
 800179c:	461a      	mov	r2, r3
 800179e:	4b48      	ldr	r3, [pc, #288]	; (80018c0 <HAL_ADC_ConvHalfCpltCallback+0x13c>)
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	091b      	lsrs	r3, r3, #4
 80017a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a8:	b21a      	sxth	r2, r3
 80017aa:	4b46      	ldr	r3, [pc, #280]	; (80018c4 <HAL_ADC_ConvHalfCpltCallback+0x140>)
 80017ac:	801a      	strh	r2, [r3, #0]
	data.Current_M1 = -(int32_t)((((adc_result_DMA[2]/number_of_oversample*VDDA)/4095)*153/100)-Voltage_offset[0])*50;
 80017ae:	4b44      	ldr	r3, [pc, #272]	; (80018c0 <HAL_ADC_ConvHalfCpltCallback+0x13c>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	091b      	lsrs	r3, r3, #4
 80017b4:	4a43      	ldr	r2, [pc, #268]	; (80018c4 <HAL_ADC_ConvHalfCpltCallback+0x140>)
 80017b6:	8812      	ldrh	r2, [r2, #0]
 80017b8:	b212      	sxth	r2, r2
 80017ba:	fb03 f202 	mul.w	r2, r3, r2
 80017be:	4b42      	ldr	r3, [pc, #264]	; (80018c8 <HAL_ADC_ConvHalfCpltCallback+0x144>)
 80017c0:	fba3 1302 	umull	r1, r3, r3, r2
 80017c4:	1ad2      	subs	r2, r2, r3
 80017c6:	0852      	lsrs	r2, r2, #1
 80017c8:	4413      	add	r3, r2
 80017ca:	0ada      	lsrs	r2, r3, #11
 80017cc:	4613      	mov	r3, r2
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	4413      	add	r3, r2
 80017d2:	011a      	lsls	r2, r3, #4
 80017d4:	4413      	add	r3, r2
 80017d6:	4a3d      	ldr	r2, [pc, #244]	; (80018cc <HAL_ADC_ConvHalfCpltCallback+0x148>)
 80017d8:	fba2 2303 	umull	r2, r3, r2, r3
 80017dc:	095a      	lsrs	r2, r3, #5
 80017de:	4b3c      	ldr	r3, [pc, #240]	; (80018d0 <HAL_ADC_ConvHalfCpltCallback+0x14c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	461a      	mov	r2, r3
 80017e6:	f06f 0331 	mvn.w	r3, #49	; 0x31
 80017ea:	fb02 f303 	mul.w	r3, r2, r3
 80017ee:	4a39      	ldr	r2, [pc, #228]	; (80018d4 <HAL_ADC_ConvHalfCpltCallback+0x150>)
 80017f0:	6013      	str	r3, [r2, #0]
	data.Current_M2 = -(int32_t)((((adc_result_DMA[1]/number_of_oversample*VDDA)/4095)*153/100)-Voltage_offset[1])*50;
 80017f2:	4b33      	ldr	r3, [pc, #204]	; (80018c0 <HAL_ADC_ConvHalfCpltCallback+0x13c>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	091b      	lsrs	r3, r3, #4
 80017f8:	4a32      	ldr	r2, [pc, #200]	; (80018c4 <HAL_ADC_ConvHalfCpltCallback+0x140>)
 80017fa:	8812      	ldrh	r2, [r2, #0]
 80017fc:	b212      	sxth	r2, r2
 80017fe:	fb03 f202 	mul.w	r2, r3, r2
 8001802:	4b31      	ldr	r3, [pc, #196]	; (80018c8 <HAL_ADC_ConvHalfCpltCallback+0x144>)
 8001804:	fba3 1302 	umull	r1, r3, r3, r2
 8001808:	1ad2      	subs	r2, r2, r3
 800180a:	0852      	lsrs	r2, r2, #1
 800180c:	4413      	add	r3, r2
 800180e:	0ada      	lsrs	r2, r3, #11
 8001810:	4613      	mov	r3, r2
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	4413      	add	r3, r2
 8001816:	011a      	lsls	r2, r3, #4
 8001818:	4413      	add	r3, r2
 800181a:	4a2c      	ldr	r2, [pc, #176]	; (80018cc <HAL_ADC_ConvHalfCpltCallback+0x148>)
 800181c:	fba2 2303 	umull	r2, r3, r2, r3
 8001820:	095a      	lsrs	r2, r3, #5
 8001822:	4b2b      	ldr	r3, [pc, #172]	; (80018d0 <HAL_ADC_ConvHalfCpltCallback+0x14c>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	461a      	mov	r2, r3
 800182a:	f06f 0331 	mvn.w	r3, #49	; 0x31
 800182e:	fb02 f303 	mul.w	r3, r2, r3
 8001832:	4a28      	ldr	r2, [pc, #160]	; (80018d4 <HAL_ADC_ConvHalfCpltCallback+0x150>)
 8001834:	6053      	str	r3, [r2, #4]
	data.Current_M3 = -(int32_t)((((adc_result_DMA[0]/number_of_oversample*VDDA)/4095)*153/100)-Voltage_offset[2])*50;
 8001836:	4b22      	ldr	r3, [pc, #136]	; (80018c0 <HAL_ADC_ConvHalfCpltCallback+0x13c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	091b      	lsrs	r3, r3, #4
 800183c:	4a21      	ldr	r2, [pc, #132]	; (80018c4 <HAL_ADC_ConvHalfCpltCallback+0x140>)
 800183e:	8812      	ldrh	r2, [r2, #0]
 8001840:	b212      	sxth	r2, r2
 8001842:	fb03 f202 	mul.w	r2, r3, r2
 8001846:	4b20      	ldr	r3, [pc, #128]	; (80018c8 <HAL_ADC_ConvHalfCpltCallback+0x144>)
 8001848:	fba3 1302 	umull	r1, r3, r3, r2
 800184c:	1ad2      	subs	r2, r2, r3
 800184e:	0852      	lsrs	r2, r2, #1
 8001850:	4413      	add	r3, r2
 8001852:	0ada      	lsrs	r2, r3, #11
 8001854:	4613      	mov	r3, r2
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	4413      	add	r3, r2
 800185a:	011a      	lsls	r2, r3, #4
 800185c:	4413      	add	r3, r2
 800185e:	4a1b      	ldr	r2, [pc, #108]	; (80018cc <HAL_ADC_ConvHalfCpltCallback+0x148>)
 8001860:	fba2 2303 	umull	r2, r3, r2, r3
 8001864:	095a      	lsrs	r2, r3, #5
 8001866:	4b1a      	ldr	r3, [pc, #104]	; (80018d0 <HAL_ADC_ConvHalfCpltCallback+0x14c>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	461a      	mov	r2, r3
 800186e:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8001872:	fb02 f303 	mul.w	r3, r2, r3
 8001876:	4a17      	ldr	r2, [pc, #92]	; (80018d4 <HAL_ADC_ConvHalfCpltCallback+0x150>)
 8001878:	6093      	str	r3, [r2, #8]
	data.Current_DC = (uint32_t)((abs((int)data.Current_M1)+abs((int)data.Current_M2)+abs((int)data.Current_M3))/2);
 800187a:	4b16      	ldr	r3, [pc, #88]	; (80018d4 <HAL_ADC_ConvHalfCpltCallback+0x150>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001882:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001886:	4b13      	ldr	r3, [pc, #76]	; (80018d4 <HAL_ADC_ConvHalfCpltCallback+0x150>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	bfb8      	it	lt
 800188e:	425b      	neglt	r3, r3
 8001890:	441a      	add	r2, r3
 8001892:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <HAL_ADC_ConvHalfCpltCallback+0x150>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	2b00      	cmp	r3, #0
 8001898:	bfb8      	it	lt
 800189a:	425b      	neglt	r3, r3
 800189c:	4413      	add	r3, r2
 800189e:	0fda      	lsrs	r2, r3, #31
 80018a0:	4413      	add	r3, r2
 80018a2:	105b      	asrs	r3, r3, #1
 80018a4:	461a      	mov	r2, r3
 80018a6:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <HAL_ADC_ConvHalfCpltCallback+0x150>)
 80018a8:	60da      	str	r2, [r3, #12]
	IRQ_callback(&data);
 80018aa:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <HAL_ADC_ConvHalfCpltCallback+0x154>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4809      	ldr	r0, [pc, #36]	; (80018d4 <HAL_ADC_ConvHalfCpltCallback+0x150>)
 80018b0:	4798      	blx	r3
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	200000c0 	.word	0x200000c0
 80018c0:	2000022c 	.word	0x2000022c
 80018c4:	20000258 	.word	0x20000258
 80018c8:	00100101 	.word	0x00100101
 80018cc:	51eb851f 	.word	0x51eb851f
 80018d0:	2000024c 	.word	0x2000024c
 80018d4:	20000260 	.word	0x20000260
 80018d8:	2000025c 	.word	0x2000025c

080018dc <FDCAN_Start>:
/*****************************************************************************/
/** Public API                                                              **/
/*****************************************************************************/

STATUS FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* Start the FDCAN bus */
  if (HAL_FDCAN_Start(hfdcan) != HAL_OK)
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f004 fb6d 	bl	8005fc4 <HAL_FDCAN_Start>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <FDCAN_Start+0x18>
  {
    return FDCAN_STATUS_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e00a      	b.n	800190a <FDCAN_Start+0x2e>
  }

  /* Activate the FIFO interrupt for respective fdcan controller */
  if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80018f4:	2200      	movs	r2, #0
 80018f6:	2101      	movs	r1, #1
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f004 fca9 	bl	8006250 <HAL_FDCAN_ActivateNotification>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <FDCAN_Start+0x2c>
  {
    return FDCAN_STATUS_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e000      	b.n	800190a <FDCAN_Start+0x2e>
  }

  return FDCAN_STATUS_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
	...

08001914 <FDCAN_addCallback>:

STATUS FDCAN_addCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t identifier, FDCANCallback *processData)
{
 8001914:	b480      	push	{r7}
 8001916:	b089      	sub	sp, #36	; 0x24
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
  /* Check if we have space to add a new Callback */
  if (FDCAN_listCallbacksCount >= FDCAN_MAX_CALLBACKS) {
 8001920:	4b18      	ldr	r3, [pc, #96]	; (8001984 <FDCAN_addCallback+0x70>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2b09      	cmp	r3, #9
 8001926:	d901      	bls.n	800192c <FDCAN_addCallback+0x18>
      return FDCAN_STATUS_MAX_LIMIT_REACHED;
 8001928:	2303      	movs	r3, #3
 800192a:	e025      	b.n	8001978 <FDCAN_addCallback+0x64>
  }

  /* Check if identifier already exists */
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 800192c:	2300      	movs	r3, #0
 800192e:	61fb      	str	r3, [r7, #28]
 8001930:	e00c      	b.n	800194c <FDCAN_addCallback+0x38>
      if (FDCAN_listCallbacks[i].identifier == identifier) {
 8001932:	4a15      	ldr	r2, [pc, #84]	; (8001988 <FDCAN_addCallback+0x74>)
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	4413      	add	r3, r2
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	68ba      	ldr	r2, [r7, #8]
 800193e:	429a      	cmp	r2, r3
 8001940:	d101      	bne.n	8001946 <FDCAN_addCallback+0x32>
          return FDCAN_STATUS_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e018      	b.n	8001978 <FDCAN_addCallback+0x64>
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	3301      	adds	r3, #1
 800194a:	61fb      	str	r3, [r7, #28]
 800194c:	4b0d      	ldr	r3, [pc, #52]	; (8001984 <FDCAN_addCallback+0x70>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	69fa      	ldr	r2, [r7, #28]
 8001952:	429a      	cmp	r2, r3
 8001954:	d3ed      	bcc.n	8001932 <FDCAN_addCallback+0x1e>
      }
  }

  /* Add the callback to the list and update the count */
  FDCAN_listCallbacks[FDCAN_listCallbacksCount] = (FDCANCallback_internal_t) {
 8001956:	4b0b      	ldr	r3, [pc, #44]	; (8001984 <FDCAN_addCallback+0x70>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	490a      	ldr	r1, [pc, #40]	; (8001988 <FDCAN_addCallback+0x74>)
 800195e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8001962:	4a09      	ldr	r2, [pc, #36]	; (8001988 <FDCAN_addCallback+0x74>)
 8001964:	00db      	lsls	r3, r3, #3
 8001966:	4413      	add	r3, r2
 8001968:	68ba      	ldr	r2, [r7, #8]
 800196a:	605a      	str	r2, [r3, #4]
      .fp = processData,
      .identifier = identifier
  };
  FDCAN_listCallbacksCount++;
 800196c:	4b05      	ldr	r3, [pc, #20]	; (8001984 <FDCAN_addCallback+0x70>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	3301      	adds	r3, #1
 8001972:	4a04      	ldr	r2, [pc, #16]	; (8001984 <FDCAN_addCallback+0x70>)
 8001974:	6013      	str	r3, [r2, #0]

  return FDCAN_STATUS_OK;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3724      	adds	r7, #36	; 0x24
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	200002c0 	.word	0x200002c0
 8001988:	20000270 	.word	0x20000270

0800198c <FDCAN_sendData>:

STATUS FDCAN_sendData(FDCAN_HandleTypeDef *hfdcan, uint32_t identifier, uint8_t TxData[64])
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08e      	sub	sp, #56	; 0x38
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
  FDCAN_TxHeaderTypeDef TxHeader;

  /* Set the identifier to send */
  TxHeader.Identifier = identifier;
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	617b      	str	r3, [r7, #20]

  /* Set the data length to send */
  TxHeader.DataLength = FDCAN_DLC_BYTES_64;
 800199c:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 80019a0:	623b      	str	r3, [r7, #32]

  /* Set the identifier type to send */
  TxHeader.IdType = FDCAN_STANDARD_ID;
 80019a2:	2300      	movs	r3, #0
 80019a4:	61bb      	str	r3, [r7, #24]

  /* Set the frame type to send */
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80019a6:	2300      	movs	r3, #0
 80019a8:	61fb      	str	r3, [r7, #28]

  /* Set the error state indicator to send */
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80019aa:	2300      	movs	r3, #0
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the bit rate switch to send */
  TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 80019ae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80019b2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set the FD format to send */
  TxHeader.FDFormat = FDCAN_FD_CAN;
 80019b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80019b8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set the Tx event FIFO control to send */
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80019ba:	2300      	movs	r3, #0
 80019bc:	633b      	str	r3, [r7, #48]	; 0x30

  /* Set the message marker to send */
  TxHeader.MessageMarker = 0;
 80019be:	2300      	movs	r3, #0
 80019c0:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set the message to send */
  if (HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &TxHeader, TxData) != HAL_OK)
 80019c2:	f107 0314 	add.w	r3, r7, #20
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	4619      	mov	r1, r3
 80019ca:	68f8      	ldr	r0, [r7, #12]
 80019cc:	f004 fb22 	bl	8006014 <HAL_FDCAN_AddMessageToTxFifoQ>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <FDCAN_sendData+0x4e>
  {
    return FDCAN_STATUS_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e000      	b.n	80019dc <FDCAN_sendData+0x50>
  }

  return FDCAN_STATUS_OK;
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3738      	adds	r7, #56	; 0x38
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <HAL_FDCAN_RxFifo0Callback>:
/** Local function definitions                                              **/
/*****************************************************************************/

/* This function overwrites _weak function definition in STM32 HAL FDCAN driver when linking project*/
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b09e      	sub	sp, #120	; 0x78
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
  FDCAN_RxHeaderTypeDef RxHeader;
  uint8_t RxData[64];

  /* Fetch the CAN message from the FIFO buffer*/
  if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80019ee:	f107 030c 	add.w	r3, r7, #12
 80019f2:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80019f6:	2140      	movs	r1, #64	; 0x40
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f004 fb4f 	bl	800609c <HAL_FDCAN_GetRxMessage>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <HAL_FDCAN_RxFifo0Callback+0x24>
  {
    Error_Handler();
 8001a04:	f000 fd1c 	bl	8002440 <Error_Handler>
  }

  /* check if we have a callback for the identifier */
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 8001a08:	2300      	movs	r3, #0
 8001a0a:	677b      	str	r3, [r7, #116]	; 0x74
 8001a0c:	e012      	b.n	8001a34 <HAL_FDCAN_RxFifo0Callback+0x50>
      if (FDCAN_listCallbacks[i].identifier == RxHeader.Identifier) {
 8001a0e:	4a0e      	ldr	r2, [pc, #56]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x64>)
 8001a10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	4413      	add	r3, r2
 8001a16:	685a      	ldr	r2, [r3, #4]
 8001a18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d107      	bne.n	8001a2e <HAL_FDCAN_RxFifo0Callback+0x4a>
          FDCAN_listCallbacks[i].fp(RxData);
 8001a1e:	4a0a      	ldr	r2, [pc, #40]	; (8001a48 <HAL_FDCAN_RxFifo0Callback+0x64>)
 8001a20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a22:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001a26:	f107 020c 	add.w	r2, r7, #12
 8001a2a:	4610      	mov	r0, r2
 8001a2c:	4798      	blx	r3
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 8001a2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a30:	3301      	adds	r3, #1
 8001a32:	677b      	str	r3, [r7, #116]	; 0x74
 8001a34:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <HAL_FDCAN_RxFifo0Callback+0x68>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d3e7      	bcc.n	8001a0e <HAL_FDCAN_RxFifo0Callback+0x2a>
      }
  }
}
 8001a3e:	bf00      	nop
 8001a40:	bf00      	nop
 8001a42:	3778      	adds	r7, #120	; 0x78
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20000270 	.word	0x20000270
 8001a4c:	200002c0 	.word	0x200002c0

08001a50 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08c      	sub	sp, #48	; 0x30
 8001a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001a56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]
 8001a60:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001a62:	1d3b      	adds	r3, r7, #4
 8001a64:	2220      	movs	r2, #32
 8001a66:	2100      	movs	r1, #0
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f009 fa19 	bl	800aea0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001a6e:	4b4d      	ldr	r3, [pc, #308]	; (8001ba4 <MX_ADC1_Init+0x154>)
 8001a70:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001a74:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001a76:	4b4b      	ldr	r3, [pc, #300]	; (8001ba4 <MX_ADC1_Init+0x154>)
 8001a78:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001a7c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a7e:	4b49      	ldr	r3, [pc, #292]	; (8001ba4 <MX_ADC1_Init+0x154>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a84:	4b47      	ldr	r3, [pc, #284]	; (8001ba4 <MX_ADC1_Init+0x154>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001a8a:	4b46      	ldr	r3, [pc, #280]	; (8001ba4 <MX_ADC1_Init+0x154>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001a90:	4b44      	ldr	r3, [pc, #272]	; (8001ba4 <MX_ADC1_Init+0x154>)
 8001a92:	2201      	movs	r2, #1
 8001a94:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001a96:	4b43      	ldr	r3, [pc, #268]	; (8001ba4 <MX_ADC1_Init+0x154>)
 8001a98:	2208      	movs	r2, #8
 8001a9a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001a9c:	4b41      	ldr	r3, [pc, #260]	; (8001ba4 <MX_ADC1_Init+0x154>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001aa2:	4b40      	ldr	r3, [pc, #256]	; (8001ba4 <MX_ADC1_Init+0x154>)
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 8001aa8:	4b3e      	ldr	r3, [pc, #248]	; (8001ba4 <MX_ADC1_Init+0x154>)
 8001aaa:	2204      	movs	r2, #4
 8001aac:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001aae:	4b3d      	ldr	r3, [pc, #244]	; (8001ba4 <MX_ADC1_Init+0x154>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ab6:	4b3b      	ldr	r3, [pc, #236]	; (8001ba4 <MX_ADC1_Init+0x154>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001abc:	4b39      	ldr	r3, [pc, #228]	; (8001ba4 <MX_ADC1_Init+0x154>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001ac2:	4b38      	ldr	r3, [pc, #224]	; (8001ba4 <MX_ADC1_Init+0x154>)
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001aca:	4b36      	ldr	r3, [pc, #216]	; (8001ba4 <MX_ADC1_Init+0x154>)
 8001acc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ad0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 8001ad2:	4b34      	ldr	r3, [pc, #208]	; (8001ba4 <MX_ADC1_Init+0x154>)
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8001ada:	4b32      	ldr	r3, [pc, #200]	; (8001ba4 <MX_ADC1_Init+0x154>)
 8001adc:	220c      	movs	r2, #12
 8001ade:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 8001ae0:	4b30      	ldr	r3, [pc, #192]	; (8001ba4 <MX_ADC1_Init+0x154>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	649a      	str	r2, [r3, #72]	; 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001ae6:	4b2f      	ldr	r3, [pc, #188]	; (8001ba4 <MX_ADC1_Init+0x154>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001aec:	4b2d      	ldr	r3, [pc, #180]	; (8001ba4 <MX_ADC1_Init+0x154>)
 8001aee:	2201      	movs	r2, #1
 8001af0:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001af2:	482c      	ldr	r0, [pc, #176]	; (8001ba4 <MX_ADC1_Init+0x154>)
 8001af4:	f001 fd28 	bl	8003548 <HAL_ADC_Init>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001afe:	f000 fc9f 	bl	8002440 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001b02:	2300      	movs	r3, #0
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001b06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4825      	ldr	r0, [pc, #148]	; (8001ba4 <MX_ADC1_Init+0x154>)
 8001b0e:	f003 fa4f 	bl	8004fb0 <HAL_ADCEx_MultiModeConfigChannel>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8001b18:	f000 fc92 	bl	8002440 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001b1c:	4b22      	ldr	r3, [pc, #136]	; (8001ba8 <MX_ADC1_Init+0x158>)
 8001b1e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b20:	2306      	movs	r3, #6
 8001b22:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8001b24:	2302      	movs	r3, #2
 8001b26:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001b28:	237f      	movs	r3, #127	; 0x7f
 8001b2a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001b2c:	2304      	movs	r3, #4
 8001b2e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001b30:	2300      	movs	r3, #0
 8001b32:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b34:	1d3b      	adds	r3, r7, #4
 8001b36:	4619      	mov	r1, r3
 8001b38:	481a      	ldr	r0, [pc, #104]	; (8001ba4 <MX_ADC1_Init+0x154>)
 8001b3a:	f002 fb51 	bl	80041e0 <HAL_ADC_ConfigChannel>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8001b44:	f000 fc7c 	bl	8002440 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001b48:	4b18      	ldr	r3, [pc, #96]	; (8001bac <MX_ADC1_Init+0x15c>)
 8001b4a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001b4c:	230c      	movs	r3, #12
 8001b4e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b50:	1d3b      	adds	r3, r7, #4
 8001b52:	4619      	mov	r1, r3
 8001b54:	4813      	ldr	r0, [pc, #76]	; (8001ba4 <MX_ADC1_Init+0x154>)
 8001b56:	f002 fb43 	bl	80041e0 <HAL_ADC_ConfigChannel>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 8001b60:	f000 fc6e 	bl	8002440 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001b64:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <MX_ADC1_Init+0x160>)
 8001b66:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001b68:	2312      	movs	r3, #18
 8001b6a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b6c:	1d3b      	adds	r3, r7, #4
 8001b6e:	4619      	mov	r1, r3
 8001b70:	480c      	ldr	r0, [pc, #48]	; (8001ba4 <MX_ADC1_Init+0x154>)
 8001b72:	f002 fb35 	bl	80041e0 <HAL_ADC_ConfigChannel>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_ADC1_Init+0x130>
  {
    Error_Handler();
 8001b7c:	f000 fc60 	bl	8002440 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001b80:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <MX_ADC1_Init+0x164>)
 8001b82:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001b84:	2318      	movs	r3, #24
 8001b86:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b88:	1d3b      	adds	r3, r7, #4
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4805      	ldr	r0, [pc, #20]	; (8001ba4 <MX_ADC1_Init+0x154>)
 8001b8e:	f002 fb27 	bl	80041e0 <HAL_ADC_ConfigChannel>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_ADC1_Init+0x14c>
  {
    Error_Handler();
 8001b98:	f000 fc52 	bl	8002440 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b9c:	bf00      	nop
 8001b9e:	3730      	adds	r7, #48	; 0x30
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	200002c4 	.word	0x200002c4
 8001ba8:	04300002 	.word	0x04300002
 8001bac:	08600004 	.word	0x08600004
 8001bb0:	0c900008 	.word	0x0c900008
 8001bb4:	cb840000 	.word	0xcb840000

08001bb8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b088      	sub	sp, #32
 8001bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001bbe:	463b      	mov	r3, r7
 8001bc0:	2220      	movs	r2, #32
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f009 f96b 	bl	800aea0 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001bca:	4b2b      	ldr	r3, [pc, #172]	; (8001c78 <MX_ADC2_Init+0xc0>)
 8001bcc:	4a2b      	ldr	r2, [pc, #172]	; (8001c7c <MX_ADC2_Init+0xc4>)
 8001bce:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001bd0:	4b29      	ldr	r3, [pc, #164]	; (8001c78 <MX_ADC2_Init+0xc0>)
 8001bd2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001bd6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001bd8:	4b27      	ldr	r3, [pc, #156]	; (8001c78 <MX_ADC2_Init+0xc0>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bde:	4b26      	ldr	r3, [pc, #152]	; (8001c78 <MX_ADC2_Init+0xc0>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001be4:	4b24      	ldr	r3, [pc, #144]	; (8001c78 <MX_ADC2_Init+0xc0>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001bea:	4b23      	ldr	r3, [pc, #140]	; (8001c78 <MX_ADC2_Init+0xc0>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001bf0:	4b21      	ldr	r3, [pc, #132]	; (8001c78 <MX_ADC2_Init+0xc0>)
 8001bf2:	2204      	movs	r2, #4
 8001bf4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001bf6:	4b20      	ldr	r3, [pc, #128]	; (8001c78 <MX_ADC2_Init+0xc0>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001bfc:	4b1e      	ldr	r3, [pc, #120]	; (8001c78 <MX_ADC2_Init+0xc0>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001c02:	4b1d      	ldr	r3, [pc, #116]	; (8001c78 <MX_ADC2_Init+0xc0>)
 8001c04:	2201      	movs	r2, #1
 8001c06:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001c08:	4b1b      	ldr	r3, [pc, #108]	; (8001c78 <MX_ADC2_Init+0xc0>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c10:	4b19      	ldr	r3, [pc, #100]	; (8001c78 <MX_ADC2_Init+0xc0>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c16:	4b18      	ldr	r3, [pc, #96]	; (8001c78 <MX_ADC2_Init+0xc0>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001c1c:	4b16      	ldr	r3, [pc, #88]	; (8001c78 <MX_ADC2_Init+0xc0>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c24:	4b14      	ldr	r3, [pc, #80]	; (8001c78 <MX_ADC2_Init+0xc0>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001c2a:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <MX_ADC2_Init+0xc0>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001c32:	4811      	ldr	r0, [pc, #68]	; (8001c78 <MX_ADC2_Init+0xc0>)
 8001c34:	f001 fc88 	bl	8003548 <HAL_ADC_Init>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8001c3e:	f000 fbff 	bl	8002440 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001c42:	4b0f      	ldr	r3, [pc, #60]	; (8001c80 <MX_ADC2_Init+0xc8>)
 8001c44:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c46:	2306      	movs	r3, #6
 8001c48:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c4e:	237f      	movs	r3, #127	; 0x7f
 8001c50:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c52:	2304      	movs	r3, #4
 8001c54:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001c56:	2300      	movs	r3, #0
 8001c58:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001c5a:	463b      	mov	r3, r7
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4806      	ldr	r0, [pc, #24]	; (8001c78 <MX_ADC2_Init+0xc0>)
 8001c60:	f002 fabe 	bl	80041e0 <HAL_ADC_ConfigChannel>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8001c6a:	f000 fbe9 	bl	8002440 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001c6e:	bf00      	nop
 8001c70:	3720      	adds	r7, #32
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20000330 	.word	0x20000330
 8001c7c:	50000100 	.word	0x50000100
 8001c80:	36902000 	.word	0x36902000

08001c84 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b09e      	sub	sp, #120	; 0x78
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c8c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	60da      	str	r2, [r3, #12]
 8001c9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c9c:	f107 0320 	add.w	r3, r7, #32
 8001ca0:	2244      	movs	r2, #68	; 0x44
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f009 f8fb 	bl	800aea0 <memset>
  if(adcHandle->Instance==ADC1)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cb2:	d171      	bne.n	8001d98 <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001cb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cb8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001cba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001cbe:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cc0:	f107 0320 	add.w	r3, r7, #32
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f005 fde1 	bl	800788c <HAL_RCCEx_PeriphCLKConfig>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001cd0:	f000 fbb6 	bl	8002440 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001cd4:	4b7a      	ldr	r3, [pc, #488]	; (8001ec0 <HAL_ADC_MspInit+0x23c>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	4a79      	ldr	r2, [pc, #484]	; (8001ec0 <HAL_ADC_MspInit+0x23c>)
 8001cdc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001cde:	4b78      	ldr	r3, [pc, #480]	; (8001ec0 <HAL_ADC_MspInit+0x23c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d10b      	bne.n	8001cfe <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001ce6:	4b77      	ldr	r3, [pc, #476]	; (8001ec4 <HAL_ADC_MspInit+0x240>)
 8001ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cea:	4a76      	ldr	r2, [pc, #472]	; (8001ec4 <HAL_ADC_MspInit+0x240>)
 8001cec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001cf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cf2:	4b74      	ldr	r3, [pc, #464]	; (8001ec4 <HAL_ADC_MspInit+0x240>)
 8001cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cfa:	61fb      	str	r3, [r7, #28]
 8001cfc:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfe:	4b71      	ldr	r3, [pc, #452]	; (8001ec4 <HAL_ADC_MspInit+0x240>)
 8001d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d02:	4a70      	ldr	r2, [pc, #448]	; (8001ec4 <HAL_ADC_MspInit+0x240>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d0a:	4b6e      	ldr	r3, [pc, #440]	; (8001ec4 <HAL_ADC_MspInit+0x240>)
 8001d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	61bb      	str	r3, [r7, #24]
 8001d14:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = CURRENT_ADC_3_Pin|CURRENT_ADC_2_Pin|CURRENT_ADC_1_Pin;
 8001d16:	2307      	movs	r3, #7
 8001d18:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d22:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001d26:	4619      	mov	r1, r3
 8001d28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d2c:	f004 fdea 	bl	8006904 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001d30:	4b65      	ldr	r3, [pc, #404]	; (8001ec8 <HAL_ADC_MspInit+0x244>)
 8001d32:	4a66      	ldr	r2, [pc, #408]	; (8001ecc <HAL_ADC_MspInit+0x248>)
 8001d34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001d36:	4b64      	ldr	r3, [pc, #400]	; (8001ec8 <HAL_ADC_MspInit+0x244>)
 8001d38:	2205      	movs	r2, #5
 8001d3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d3c:	4b62      	ldr	r3, [pc, #392]	; (8001ec8 <HAL_ADC_MspInit+0x244>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d42:	4b61      	ldr	r3, [pc, #388]	; (8001ec8 <HAL_ADC_MspInit+0x244>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001d48:	4b5f      	ldr	r3, [pc, #380]	; (8001ec8 <HAL_ADC_MspInit+0x244>)
 8001d4a:	2280      	movs	r2, #128	; 0x80
 8001d4c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001d4e:	4b5e      	ldr	r3, [pc, #376]	; (8001ec8 <HAL_ADC_MspInit+0x244>)
 8001d50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d54:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001d56:	4b5c      	ldr	r3, [pc, #368]	; (8001ec8 <HAL_ADC_MspInit+0x244>)
 8001d58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d5c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001d5e:	4b5a      	ldr	r3, [pc, #360]	; (8001ec8 <HAL_ADC_MspInit+0x244>)
 8001d60:	2220      	movs	r2, #32
 8001d62:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001d64:	4b58      	ldr	r3, [pc, #352]	; (8001ec8 <HAL_ADC_MspInit+0x244>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d6a:	4857      	ldr	r0, [pc, #348]	; (8001ec8 <HAL_ADC_MspInit+0x244>)
 8001d6c:	f003 fc9e 	bl	80056ac <HAL_DMA_Init>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 8001d76:	f000 fb63 	bl	8002440 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a52      	ldr	r2, [pc, #328]	; (8001ec8 <HAL_ADC_MspInit+0x244>)
 8001d7e:	655a      	str	r2, [r3, #84]	; 0x54
 8001d80:	4a51      	ldr	r2, [pc, #324]	; (8001ec8 <HAL_ADC_MspInit+0x244>)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001d86:	2200      	movs	r2, #0
 8001d88:	2100      	movs	r1, #0
 8001d8a:	2012      	movs	r0, #18
 8001d8c:	f003 fa8f 	bl	80052ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001d90:	2012      	movs	r0, #18
 8001d92:	f003 faa6 	bl	80052e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001d96:	e08f      	b.n	8001eb8 <HAL_ADC_MspInit+0x234>
  else if(adcHandle->Instance==ADC2)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a4c      	ldr	r2, [pc, #304]	; (8001ed0 <HAL_ADC_MspInit+0x24c>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	f040 808a 	bne.w	8001eb8 <HAL_ADC_MspInit+0x234>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001da4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001da8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001daa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001dae:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001db0:	f107 0320 	add.w	r3, r7, #32
 8001db4:	4618      	mov	r0, r3
 8001db6:	f005 fd69 	bl	800788c <HAL_RCCEx_PeriphCLKConfig>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <HAL_ADC_MspInit+0x140>
      Error_Handler();
 8001dc0:	f000 fb3e 	bl	8002440 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001dc4:	4b3e      	ldr	r3, [pc, #248]	; (8001ec0 <HAL_ADC_MspInit+0x23c>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	4a3d      	ldr	r2, [pc, #244]	; (8001ec0 <HAL_ADC_MspInit+0x23c>)
 8001dcc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001dce:	4b3c      	ldr	r3, [pc, #240]	; (8001ec0 <HAL_ADC_MspInit+0x23c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d10b      	bne.n	8001dee <HAL_ADC_MspInit+0x16a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001dd6:	4b3b      	ldr	r3, [pc, #236]	; (8001ec4 <HAL_ADC_MspInit+0x240>)
 8001dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dda:	4a3a      	ldr	r2, [pc, #232]	; (8001ec4 <HAL_ADC_MspInit+0x240>)
 8001ddc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001de0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001de2:	4b38      	ldr	r3, [pc, #224]	; (8001ec4 <HAL_ADC_MspInit+0x240>)
 8001de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dea:	617b      	str	r3, [r7, #20]
 8001dec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dee:	4b35      	ldr	r3, [pc, #212]	; (8001ec4 <HAL_ADC_MspInit+0x240>)
 8001df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df2:	4a34      	ldr	r2, [pc, #208]	; (8001ec4 <HAL_ADC_MspInit+0x240>)
 8001df4:	f043 0301 	orr.w	r3, r3, #1
 8001df8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dfa:	4b32      	ldr	r3, [pc, #200]	; (8001ec4 <HAL_ADC_MspInit+0x240>)
 8001dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	613b      	str	r3, [r7, #16]
 8001e04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e06:	4b2f      	ldr	r3, [pc, #188]	; (8001ec4 <HAL_ADC_MspInit+0x240>)
 8001e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e0a:	4a2e      	ldr	r2, [pc, #184]	; (8001ec4 <HAL_ADC_MspInit+0x240>)
 8001e0c:	f043 0302 	orr.w	r3, r3, #2
 8001e10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e12:	4b2c      	ldr	r3, [pc, #176]	; (8001ec4 <HAL_ADC_MspInit+0x240>)
 8001e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = V_BAT_ADC_Pin|V_AUX_ADC_Pin;
 8001e1e:	2360      	movs	r3, #96	; 0x60
 8001e20:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e22:	2303      	movs	r3, #3
 8001e24:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e2a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001e2e:	4619      	mov	r1, r3
 8001e30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e34:	f004 fd66 	bl	8006904 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC2_NTC1_Pin|ADC2_NTC2_Pin;
 8001e38:	f640 0304 	movw	r3, #2052	; 0x804
 8001e3c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e46:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4821      	ldr	r0, [pc, #132]	; (8001ed4 <HAL_ADC_MspInit+0x250>)
 8001e4e:	f004 fd59 	bl	8006904 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8001e52:	4b21      	ldr	r3, [pc, #132]	; (8001ed8 <HAL_ADC_MspInit+0x254>)
 8001e54:	4a21      	ldr	r2, [pc, #132]	; (8001edc <HAL_ADC_MspInit+0x258>)
 8001e56:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001e58:	4b1f      	ldr	r3, [pc, #124]	; (8001ed8 <HAL_ADC_MspInit+0x254>)
 8001e5a:	2224      	movs	r2, #36	; 0x24
 8001e5c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e5e:	4b1e      	ldr	r3, [pc, #120]	; (8001ed8 <HAL_ADC_MspInit+0x254>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e64:	4b1c      	ldr	r3, [pc, #112]	; (8001ed8 <HAL_ADC_MspInit+0x254>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001e6a:	4b1b      	ldr	r3, [pc, #108]	; (8001ed8 <HAL_ADC_MspInit+0x254>)
 8001e6c:	2280      	movs	r2, #128	; 0x80
 8001e6e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e70:	4b19      	ldr	r3, [pc, #100]	; (8001ed8 <HAL_ADC_MspInit+0x254>)
 8001e72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e76:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e78:	4b17      	ldr	r3, [pc, #92]	; (8001ed8 <HAL_ADC_MspInit+0x254>)
 8001e7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e7e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8001e80:	4b15      	ldr	r3, [pc, #84]	; (8001ed8 <HAL_ADC_MspInit+0x254>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001e86:	4b14      	ldr	r3, [pc, #80]	; (8001ed8 <HAL_ADC_MspInit+0x254>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001e8c:	4812      	ldr	r0, [pc, #72]	; (8001ed8 <HAL_ADC_MspInit+0x254>)
 8001e8e:	f003 fc0d 	bl	80056ac <HAL_DMA_Init>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <HAL_ADC_MspInit+0x218>
      Error_Handler();
 8001e98:	f000 fad2 	bl	8002440 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a0e      	ldr	r2, [pc, #56]	; (8001ed8 <HAL_ADC_MspInit+0x254>)
 8001ea0:	655a      	str	r2, [r3, #84]	; 0x54
 8001ea2:	4a0d      	ldr	r2, [pc, #52]	; (8001ed8 <HAL_ADC_MspInit+0x254>)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	2100      	movs	r1, #0
 8001eac:	2012      	movs	r0, #18
 8001eae:	f003 f9fe 	bl	80052ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001eb2:	2012      	movs	r0, #18
 8001eb4:	f003 fa15 	bl	80052e2 <HAL_NVIC_EnableIRQ>
}
 8001eb8:	bf00      	nop
 8001eba:	3778      	adds	r7, #120	; 0x78
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	2000045c 	.word	0x2000045c
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	2000039c 	.word	0x2000039c
 8001ecc:	40020008 	.word	0x40020008
 8001ed0:	50000100 	.word	0x50000100
 8001ed4:	48000400 	.word	0x48000400
 8001ed8:	200003fc 	.word	0x200003fc
 8001edc:	4002001c 	.word	0x4002001c

08001ee0 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08c      	sub	sp, #48	; 0x30
 8001ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001ee6:	463b      	mov	r3, r7
 8001ee8:	2230      	movs	r2, #48	; 0x30
 8001eea:	2100      	movs	r1, #0
 8001eec:	4618      	mov	r0, r3
 8001eee:	f008 ffd7 	bl	800aea0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001ef2:	4b16      	ldr	r3, [pc, #88]	; (8001f4c <MX_DAC1_Init+0x6c>)
 8001ef4:	4a16      	ldr	r2, [pc, #88]	; (8001f50 <MX_DAC1_Init+0x70>)
 8001ef6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001ef8:	4814      	ldr	r0, [pc, #80]	; (8001f4c <MX_DAC1_Init+0x6c>)
 8001efa:	f003 fa0c 	bl	8005316 <HAL_DAC_Init>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001f04:	f000 fa9c 	bl	8002440 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001f10:	2300      	movs	r3, #0
 8001f12:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001f14:	2300      	movs	r3, #0
 8001f16:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001f20:	2300      	movs	r3, #0
 8001f22:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001f24:	2301      	movs	r3, #1
 8001f26:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001f2c:	463b      	mov	r3, r7
 8001f2e:	2200      	movs	r2, #0
 8001f30:	4619      	mov	r1, r3
 8001f32:	4806      	ldr	r0, [pc, #24]	; (8001f4c <MX_DAC1_Init+0x6c>)
 8001f34:	f003 fa12 	bl	800535c <HAL_DAC_ConfigChannel>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001f3e:	f000 fa7f 	bl	8002440 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001f42:	bf00      	nop
 8001f44:	3730      	adds	r7, #48	; 0x30
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	20000460 	.word	0x20000460
 8001f50:	50000800 	.word	0x50000800

08001f54 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08a      	sub	sp, #40	; 0x28
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5c:	f107 0314 	add.w	r3, r7, #20
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	609a      	str	r2, [r3, #8]
 8001f68:	60da      	str	r2, [r3, #12]
 8001f6a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a15      	ldr	r2, [pc, #84]	; (8001fc8 <HAL_DAC_MspInit+0x74>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d124      	bne.n	8001fc0 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001f76:	4b15      	ldr	r3, [pc, #84]	; (8001fcc <HAL_DAC_MspInit+0x78>)
 8001f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7a:	4a14      	ldr	r2, [pc, #80]	; (8001fcc <HAL_DAC_MspInit+0x78>)
 8001f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f82:	4b12      	ldr	r3, [pc, #72]	; (8001fcc <HAL_DAC_MspInit+0x78>)
 8001f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f8a:	613b      	str	r3, [r7, #16]
 8001f8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f8e:	4b0f      	ldr	r3, [pc, #60]	; (8001fcc <HAL_DAC_MspInit+0x78>)
 8001f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f92:	4a0e      	ldr	r2, [pc, #56]	; (8001fcc <HAL_DAC_MspInit+0x78>)
 8001f94:	f043 0301 	orr.w	r3, r3, #1
 8001f98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f9a:	4b0c      	ldr	r3, [pc, #48]	; (8001fcc <HAL_DAC_MspInit+0x78>)
 8001f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001fa6:	2310      	movs	r3, #16
 8001fa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001faa:	2303      	movs	r3, #3
 8001fac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb2:	f107 0314 	add.w	r3, r7, #20
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fbc:	f004 fca2 	bl	8006904 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8001fc0:	bf00      	nop
 8001fc2:	3728      	adds	r7, #40	; 0x28
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	50000800 	.word	0x50000800
 8001fcc:	40021000 	.word	0x40021000

08001fd0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001fd6:	4b30      	ldr	r3, [pc, #192]	; (8002098 <MX_DMA_Init+0xc8>)
 8001fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fda:	4a2f      	ldr	r2, [pc, #188]	; (8002098 <MX_DMA_Init+0xc8>)
 8001fdc:	f043 0304 	orr.w	r3, r3, #4
 8001fe0:	6493      	str	r3, [r2, #72]	; 0x48
 8001fe2:	4b2d      	ldr	r3, [pc, #180]	; (8002098 <MX_DMA_Init+0xc8>)
 8001fe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fe6:	f003 0304 	and.w	r3, r3, #4
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fee:	4b2a      	ldr	r3, [pc, #168]	; (8002098 <MX_DMA_Init+0xc8>)
 8001ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ff2:	4a29      	ldr	r2, [pc, #164]	; (8002098 <MX_DMA_Init+0xc8>)
 8001ff4:	f043 0301 	orr.w	r3, r3, #1
 8001ff8:	6493      	str	r3, [r2, #72]	; 0x48
 8001ffa:	4b27      	ldr	r3, [pc, #156]	; (8002098 <MX_DMA_Init+0xc8>)
 8001ffc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	60bb      	str	r3, [r7, #8]
 8002004:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002006:	4b24      	ldr	r3, [pc, #144]	; (8002098 <MX_DMA_Init+0xc8>)
 8002008:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800200a:	4a23      	ldr	r2, [pc, #140]	; (8002098 <MX_DMA_Init+0xc8>)
 800200c:	f043 0302 	orr.w	r3, r3, #2
 8002010:	6493      	str	r3, [r2, #72]	; 0x48
 8002012:	4b21      	ldr	r3, [pc, #132]	; (8002098 <MX_DMA_Init+0xc8>)
 8002014:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	607b      	str	r3, [r7, #4]
 800201c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800201e:	2200      	movs	r2, #0
 8002020:	2100      	movs	r1, #0
 8002022:	200b      	movs	r0, #11
 8002024:	f003 f943 	bl	80052ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002028:	200b      	movs	r0, #11
 800202a:	f003 f95a 	bl	80052e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800202e:	2200      	movs	r2, #0
 8002030:	2100      	movs	r1, #0
 8002032:	200c      	movs	r0, #12
 8002034:	f003 f93b 	bl	80052ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002038:	200c      	movs	r0, #12
 800203a:	f003 f952 	bl	80052e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800203e:	2200      	movs	r2, #0
 8002040:	2100      	movs	r1, #0
 8002042:	200d      	movs	r0, #13
 8002044:	f003 f933 	bl	80052ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002048:	200d      	movs	r0, #13
 800204a:	f003 f94a 	bl	80052e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800204e:	2200      	movs	r2, #0
 8002050:	2100      	movs	r1, #0
 8002052:	200e      	movs	r0, #14
 8002054:	f003 f92b 	bl	80052ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002058:	200e      	movs	r0, #14
 800205a:	f003 f942 	bl	80052e2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 800205e:	2200      	movs	r2, #0
 8002060:	2100      	movs	r1, #0
 8002062:	2038      	movs	r0, #56	; 0x38
 8002064:	f003 f923 	bl	80052ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8002068:	2038      	movs	r0, #56	; 0x38
 800206a:	f003 f93a 	bl	80052e2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 800206e:	2200      	movs	r2, #0
 8002070:	2100      	movs	r1, #0
 8002072:	2039      	movs	r0, #57	; 0x39
 8002074:	f003 f91b 	bl	80052ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8002078:	2039      	movs	r0, #57	; 0x39
 800207a:	f003 f932 	bl	80052e2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 800207e:	2200      	movs	r2, #0
 8002080:	2100      	movs	r1, #0
 8002082:	203a      	movs	r0, #58	; 0x3a
 8002084:	f003 f913 	bl	80052ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8002088:	203a      	movs	r0, #58	; 0x3a
 800208a:	f003 f92a 	bl	80052e2 <HAL_NVIC_EnableIRQ>

}
 800208e:	bf00      	nop
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40021000 	.word	0x40021000

0800209c <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80020a0:	4b20      	ldr	r3, [pc, #128]	; (8002124 <MX_FDCAN1_Init+0x88>)
 80020a2:	4a21      	ldr	r2, [pc, #132]	; (8002128 <MX_FDCAN1_Init+0x8c>)
 80020a4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80020a6:	4b1f      	ldr	r3, [pc, #124]	; (8002124 <MX_FDCAN1_Init+0x88>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 80020ac:	4b1d      	ldr	r3, [pc, #116]	; (8002124 <MX_FDCAN1_Init+0x88>)
 80020ae:	f44f 7240 	mov.w	r2, #768	; 0x300
 80020b2:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80020b4:	4b1b      	ldr	r3, [pc, #108]	; (8002124 <MX_FDCAN1_Init+0x88>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80020ba:	4b1a      	ldr	r3, [pc, #104]	; (8002124 <MX_FDCAN1_Init+0x88>)
 80020bc:	2200      	movs	r2, #0
 80020be:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80020c0:	4b18      	ldr	r3, [pc, #96]	; (8002124 <MX_FDCAN1_Init+0x88>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80020c6:	4b17      	ldr	r3, [pc, #92]	; (8002124 <MX_FDCAN1_Init+0x88>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80020cc:	4b15      	ldr	r3, [pc, #84]	; (8002124 <MX_FDCAN1_Init+0x88>)
 80020ce:	2201      	movs	r2, #1
 80020d0:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 13;
 80020d2:	4b14      	ldr	r3, [pc, #80]	; (8002124 <MX_FDCAN1_Init+0x88>)
 80020d4:	220d      	movs	r2, #13
 80020d6:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 86;
 80020d8:	4b12      	ldr	r3, [pc, #72]	; (8002124 <MX_FDCAN1_Init+0x88>)
 80020da:	2256      	movs	r2, #86	; 0x56
 80020dc:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 13;
 80020de:	4b11      	ldr	r3, [pc, #68]	; (8002124 <MX_FDCAN1_Init+0x88>)
 80020e0:	220d      	movs	r2, #13
 80020e2:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 25;
 80020e4:	4b0f      	ldr	r3, [pc, #60]	; (8002124 <MX_FDCAN1_Init+0x88>)
 80020e6:	2219      	movs	r2, #25
 80020e8:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80020ea:	4b0e      	ldr	r3, [pc, #56]	; (8002124 <MX_FDCAN1_Init+0x88>)
 80020ec:	2201      	movs	r2, #1
 80020ee:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 2;
 80020f0:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <MX_FDCAN1_Init+0x88>)
 80020f2:	2202      	movs	r2, #2
 80020f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80020f6:	4b0b      	ldr	r3, [pc, #44]	; (8002124 <MX_FDCAN1_Init+0x88>)
 80020f8:	2201      	movs	r2, #1
 80020fa:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80020fc:	4b09      	ldr	r3, [pc, #36]	; (8002124 <MX_FDCAN1_Init+0x88>)
 80020fe:	2200      	movs	r2, #0
 8002100:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8002102:	4b08      	ldr	r3, [pc, #32]	; (8002124 <MX_FDCAN1_Init+0x88>)
 8002104:	2200      	movs	r2, #0
 8002106:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002108:	4b06      	ldr	r3, [pc, #24]	; (8002124 <MX_FDCAN1_Init+0x88>)
 800210a:	2200      	movs	r2, #0
 800210c:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800210e:	4805      	ldr	r0, [pc, #20]	; (8002124 <MX_FDCAN1_Init+0x88>)
 8002110:	f003 fdfe 	bl	8005d10 <HAL_FDCAN_Init>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 800211a:	f000 f991 	bl	8002440 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	20000474 	.word	0x20000474
 8002128:	40006400 	.word	0x40006400

0800212c <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b09a      	sub	sp, #104	; 0x68
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002134:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	605a      	str	r2, [r3, #4]
 800213e:	609a      	str	r2, [r3, #8]
 8002140:	60da      	str	r2, [r3, #12]
 8002142:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002144:	f107 0310 	add.w	r3, r7, #16
 8002148:	2244      	movs	r2, #68	; 0x44
 800214a:	2100      	movs	r1, #0
 800214c:	4618      	mov	r0, r3
 800214e:	f008 fea7 	bl	800aea0 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a24      	ldr	r2, [pc, #144]	; (80021e8 <HAL_FDCAN_MspInit+0xbc>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d141      	bne.n	80021e0 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800215c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002160:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002162:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002166:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002168:	f107 0310 	add.w	r3, r7, #16
 800216c:	4618      	mov	r0, r3
 800216e:	f005 fb8d 	bl	800788c <HAL_RCCEx_PeriphCLKConfig>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8002178:	f000 f962 	bl	8002440 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800217c:	4b1b      	ldr	r3, [pc, #108]	; (80021ec <HAL_FDCAN_MspInit+0xc0>)
 800217e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002180:	4a1a      	ldr	r2, [pc, #104]	; (80021ec <HAL_FDCAN_MspInit+0xc0>)
 8002182:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002186:	6593      	str	r3, [r2, #88]	; 0x58
 8002188:	4b18      	ldr	r3, [pc, #96]	; (80021ec <HAL_FDCAN_MspInit+0xc0>)
 800218a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002190:	60fb      	str	r3, [r7, #12]
 8002192:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002194:	4b15      	ldr	r3, [pc, #84]	; (80021ec <HAL_FDCAN_MspInit+0xc0>)
 8002196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002198:	4a14      	ldr	r2, [pc, #80]	; (80021ec <HAL_FDCAN_MspInit+0xc0>)
 800219a:	f043 0301 	orr.w	r3, r3, #1
 800219e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021a0:	4b12      	ldr	r3, [pc, #72]	; (80021ec <HAL_FDCAN_MspInit+0xc0>)
 80021a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	60bb      	str	r3, [r7, #8]
 80021aa:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80021ac:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80021b0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b2:	2302      	movs	r3, #2
 80021b4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ba:	2300      	movs	r3, #0
 80021bc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80021be:	2309      	movs	r3, #9
 80021c0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80021c6:	4619      	mov	r1, r3
 80021c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021cc:	f004 fb9a 	bl	8006904 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80021d0:	2200      	movs	r2, #0
 80021d2:	2100      	movs	r1, #0
 80021d4:	2015      	movs	r0, #21
 80021d6:	f003 f86a 	bl	80052ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80021da:	2015      	movs	r0, #21
 80021dc:	f003 f881 	bl	80052e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 80021e0:	bf00      	nop
 80021e2:	3768      	adds	r7, #104	; 0x68
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40006400 	.word	0x40006400
 80021ec:	40021000 	.word	0x40021000

080021f0 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b08a      	sub	sp, #40	; 0x28
 80021f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f6:	f107 0314 	add.w	r3, r7, #20
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	605a      	str	r2, [r3, #4]
 8002200:	609a      	str	r2, [r3, #8]
 8002202:	60da      	str	r2, [r3, #12]
 8002204:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002206:	4b51      	ldr	r3, [pc, #324]	; (800234c <MX_GPIO_Init+0x15c>)
 8002208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800220a:	4a50      	ldr	r2, [pc, #320]	; (800234c <MX_GPIO_Init+0x15c>)
 800220c:	f043 0320 	orr.w	r3, r3, #32
 8002210:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002212:	4b4e      	ldr	r3, [pc, #312]	; (800234c <MX_GPIO_Init+0x15c>)
 8002214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002216:	f003 0320 	and.w	r3, r3, #32
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800221e:	4b4b      	ldr	r3, [pc, #300]	; (800234c <MX_GPIO_Init+0x15c>)
 8002220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002222:	4a4a      	ldr	r2, [pc, #296]	; (800234c <MX_GPIO_Init+0x15c>)
 8002224:	f043 0304 	orr.w	r3, r3, #4
 8002228:	64d3      	str	r3, [r2, #76]	; 0x4c
 800222a:	4b48      	ldr	r3, [pc, #288]	; (800234c <MX_GPIO_Init+0x15c>)
 800222c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800222e:	f003 0304 	and.w	r3, r3, #4
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002236:	4b45      	ldr	r3, [pc, #276]	; (800234c <MX_GPIO_Init+0x15c>)
 8002238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800223a:	4a44      	ldr	r2, [pc, #272]	; (800234c <MX_GPIO_Init+0x15c>)
 800223c:	f043 0301 	orr.w	r3, r3, #1
 8002240:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002242:	4b42      	ldr	r3, [pc, #264]	; (800234c <MX_GPIO_Init+0x15c>)
 8002244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	60bb      	str	r3, [r7, #8]
 800224c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800224e:	4b3f      	ldr	r3, [pc, #252]	; (800234c <MX_GPIO_Init+0x15c>)
 8002250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002252:	4a3e      	ldr	r2, [pc, #248]	; (800234c <MX_GPIO_Init+0x15c>)
 8002254:	f043 0302 	orr.w	r3, r3, #2
 8002258:	64d3      	str	r3, [r2, #76]	; 0x4c
 800225a:	4b3c      	ldr	r3, [pc, #240]	; (800234c <MX_GPIO_Init+0x15c>)
 800225c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	607b      	str	r3, [r7, #4]
 8002264:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002266:	4b39      	ldr	r3, [pc, #228]	; (800234c <MX_GPIO_Init+0x15c>)
 8002268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800226a:	4a38      	ldr	r2, [pc, #224]	; (800234c <MX_GPIO_Init+0x15c>)
 800226c:	f043 0308 	orr.w	r3, r3, #8
 8002270:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002272:	4b36      	ldr	r3, [pc, #216]	; (800234c <MX_GPIO_Init+0x15c>)
 8002274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002276:	f003 0308 	and.w	r3, r3, #8
 800227a:	603b      	str	r3, [r7, #0]
 800227c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RUNNING_LED_Pin|WARNING_LED_Pin, GPIO_PIN_RESET);
 800227e:	2200      	movs	r2, #0
 8002280:	21c0      	movs	r1, #192	; 0xc0
 8002282:	4833      	ldr	r0, [pc, #204]	; (8002350 <MX_GPIO_Init+0x160>)
 8002284:	f004 fcc0 	bl	8006c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, GPIO_PIN_RESET);
 8002288:	2200      	movs	r2, #0
 800228a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800228e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002292:	f004 fcb9 	bl	8006c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, GPIO_PIN_RESET);
 8002296:	2200      	movs	r2, #0
 8002298:	2104      	movs	r1, #4
 800229a:	482e      	ldr	r0, [pc, #184]	; (8002354 <MX_GPIO_Init+0x164>)
 800229c:	f004 fcb4 	bl	8006c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, GPIO_PIN_RESET);
 80022a0:	2200      	movs	r2, #0
 80022a2:	2140      	movs	r1, #64	; 0x40
 80022a4:	482c      	ldr	r0, [pc, #176]	; (8002358 <MX_GPIO_Init+0x168>)
 80022a6:	f004 fcaf 	bl	8006c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RUNNING_LED_Pin|WARNING_LED_Pin;
 80022aa:	23c0      	movs	r3, #192	; 0xc0
 80022ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ae:	2301      	movs	r3, #1
 80022b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b6:	2300      	movs	r3, #0
 80022b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022ba:	f107 0314 	add.w	r3, r7, #20
 80022be:	4619      	mov	r1, r3
 80022c0:	4823      	ldr	r0, [pc, #140]	; (8002350 <MX_GPIO_Init+0x160>)
 80022c2:	f004 fb1f 	bl	8006904 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80022c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022cc:	2302      	movs	r3, #2
 80022ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d0:	2300      	movs	r3, #0
 80022d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d4:	2300      	movs	r3, #0
 80022d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80022d8:	2300      	movs	r3, #0
 80022da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022dc:	f107 0314 	add.w	r3, r7, #20
 80022e0:	4619      	mov	r1, r3
 80022e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022e6:	f004 fb0d 	bl	8006904 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ERROR_LED_Pin;
 80022ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022f0:	2301      	movs	r3, #1
 80022f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f4:	2300      	movs	r3, #0
 80022f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f8:	2300      	movs	r3, #0
 80022fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ERROR_LED_GPIO_Port, &GPIO_InitStruct);
 80022fc:	f107 0314 	add.w	r3, r7, #20
 8002300:	4619      	mov	r1, r3
 8002302:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002306:	f004 fafd 	bl	8006904 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER2_CS_Pin;
 800230a:	2304      	movs	r3, #4
 800230c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800230e:	2301      	movs	r3, #1
 8002310:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002312:	2300      	movs	r3, #0
 8002314:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002316:	2300      	movs	r3, #0
 8002318:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENCODER2_CS_GPIO_Port, &GPIO_InitStruct);
 800231a:	f107 0314 	add.w	r3, r7, #20
 800231e:	4619      	mov	r1, r3
 8002320:	480c      	ldr	r0, [pc, #48]	; (8002354 <MX_GPIO_Init+0x164>)
 8002322:	f004 faef 	bl	8006904 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER1_CS_Pin;
 8002326:	2340      	movs	r3, #64	; 0x40
 8002328:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800232a:	2301      	movs	r3, #1
 800232c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232e:	2300      	movs	r3, #0
 8002330:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002332:	2300      	movs	r3, #0
 8002334:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENCODER1_CS_GPIO_Port, &GPIO_InitStruct);
 8002336:	f107 0314 	add.w	r3, r7, #20
 800233a:	4619      	mov	r1, r3
 800233c:	4806      	ldr	r0, [pc, #24]	; (8002358 <MX_GPIO_Init+0x168>)
 800233e:	f004 fae1 	bl	8006904 <HAL_GPIO_Init>

}
 8002342:	bf00      	nop
 8002344:	3728      	adds	r7, #40	; 0x28
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40021000 	.word	0x40021000
 8002350:	48000800 	.word	0x48000800
 8002354:	48000c00 	.word	0x48000c00
 8002358:	48000400 	.word	0x48000400

0800235c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002360:	f000 fdcd 	bl	8002efe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002364:	f000 f819 	bl	800239a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002368:	f7ff ff42 	bl	80021f0 <MX_GPIO_Init>
  MX_DMA_Init();
 800236c:	f7ff fe30 	bl	8001fd0 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8002370:	f7ff fe94 	bl	800209c <MX_FDCAN1_Init>
  MX_SPI1_Init();
 8002374:	f000 f86a 	bl	800244c <MX_SPI1_Init>
  MX_SPI3_Init();
 8002378:	f000 f8a6 	bl	80024c8 <MX_SPI3_Init>
  MX_TIM1_Init();
 800237c:	f000 fb04 	bl	8002988 <MX_TIM1_Init>
  MX_ADC1_Init();
 8002380:	f7ff fb66 	bl	8001a50 <MX_ADC1_Init>
  MX_ADC2_Init();
 8002384:	f7ff fc18 	bl	8001bb8 <MX_ADC2_Init>
  MX_DAC1_Init();
 8002388:	f7ff fdaa 	bl	8001ee0 <MX_DAC1_Init>
  MX_USART1_UART_Init();
 800238c:	f000 fcb4 	bl	8002cf8 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8002390:	f000 fbc2 	bl	8002b18 <MX_TIM3_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	BLDC_main();
 8002394:	f7fe f94a 	bl	800062c <BLDC_main>
 8002398:	e7fc      	b.n	8002394 <main+0x38>

0800239a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b094      	sub	sp, #80	; 0x50
 800239e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023a0:	f107 0318 	add.w	r3, r7, #24
 80023a4:	2238      	movs	r2, #56	; 0x38
 80023a6:	2100      	movs	r1, #0
 80023a8:	4618      	mov	r0, r3
 80023aa:	f008 fd79 	bl	800aea0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023ae:	1d3b      	adds	r3, r7, #4
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	605a      	str	r2, [r3, #4]
 80023b6:	609a      	str	r2, [r3, #8]
 80023b8:	60da      	str	r2, [r3, #12]
 80023ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80023bc:	2000      	movs	r0, #0
 80023be:	f004 fc3b 	bl	8006c38 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80023c2:	2302      	movs	r3, #2
 80023c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023ca:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023cc:	2340      	movs	r3, #64	; 0x40
 80023ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023d0:	2302      	movs	r3, #2
 80023d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80023d4:	2302      	movs	r3, #2
 80023d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80023d8:	2304      	movs	r3, #4
 80023da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 80023dc:	2350      	movs	r3, #80	; 0x50
 80023de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023e0:	2302      	movs	r3, #2
 80023e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 80023e4:	2308      	movs	r3, #8
 80023e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80023e8:	2302      	movs	r3, #2
 80023ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023ec:	f107 0318 	add.w	r3, r7, #24
 80023f0:	4618      	mov	r0, r3
 80023f2:	f004 fcd5 	bl	8006da0 <HAL_RCC_OscConfig>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80023fc:	f000 f820 	bl	8002440 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002400:	230f      	movs	r3, #15
 8002402:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002404:	2303      	movs	r3, #3
 8002406:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002408:	2300      	movs	r3, #0
 800240a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800240c:	2300      	movs	r3, #0
 800240e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002410:	2300      	movs	r3, #0
 8002412:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002414:	1d3b      	adds	r3, r7, #4
 8002416:	2104      	movs	r1, #4
 8002418:	4618      	mov	r0, r3
 800241a:	f004 ffd9 	bl	80073d0 <HAL_RCC_ClockConfig>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002424:	f000 f80c 	bl	8002440 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_16);
 8002428:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800242c:	f04f 7140 	mov.w	r1, #50331648	; 0x3000000
 8002430:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002434:	f005 f908 	bl	8007648 <HAL_RCC_MCOConfig>
}
 8002438:	bf00      	nop
 800243a:	3750      	adds	r7, #80	; 0x50
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002444:	b672      	cpsid	i
}
 8002446:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002448:	e7fe      	b.n	8002448 <Error_Handler+0x8>
	...

0800244c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi3_rx;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002450:	4b1b      	ldr	r3, [pc, #108]	; (80024c0 <MX_SPI1_Init+0x74>)
 8002452:	4a1c      	ldr	r2, [pc, #112]	; (80024c4 <MX_SPI1_Init+0x78>)
 8002454:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002456:	4b1a      	ldr	r3, [pc, #104]	; (80024c0 <MX_SPI1_Init+0x74>)
 8002458:	f44f 7282 	mov.w	r2, #260	; 0x104
 800245c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800245e:	4b18      	ldr	r3, [pc, #96]	; (80024c0 <MX_SPI1_Init+0x74>)
 8002460:	2200      	movs	r2, #0
 8002462:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002464:	4b16      	ldr	r3, [pc, #88]	; (80024c0 <MX_SPI1_Init+0x74>)
 8002466:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800246a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800246c:	4b14      	ldr	r3, [pc, #80]	; (80024c0 <MX_SPI1_Init+0x74>)
 800246e:	2200      	movs	r2, #0
 8002470:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002472:	4b13      	ldr	r3, [pc, #76]	; (80024c0 <MX_SPI1_Init+0x74>)
 8002474:	2200      	movs	r2, #0
 8002476:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002478:	4b11      	ldr	r3, [pc, #68]	; (80024c0 <MX_SPI1_Init+0x74>)
 800247a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800247e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002480:	4b0f      	ldr	r3, [pc, #60]	; (80024c0 <MX_SPI1_Init+0x74>)
 8002482:	2220      	movs	r2, #32
 8002484:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002486:	4b0e      	ldr	r3, [pc, #56]	; (80024c0 <MX_SPI1_Init+0x74>)
 8002488:	2200      	movs	r2, #0
 800248a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800248c:	4b0c      	ldr	r3, [pc, #48]	; (80024c0 <MX_SPI1_Init+0x74>)
 800248e:	2200      	movs	r2, #0
 8002490:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002492:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <MX_SPI1_Init+0x74>)
 8002494:	2200      	movs	r2, #0
 8002496:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002498:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <MX_SPI1_Init+0x74>)
 800249a:	2207      	movs	r2, #7
 800249c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800249e:	4b08      	ldr	r3, [pc, #32]	; (80024c0 <MX_SPI1_Init+0x74>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80024a4:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <MX_SPI1_Init+0x74>)
 80024a6:	2208      	movs	r2, #8
 80024a8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80024aa:	4805      	ldr	r0, [pc, #20]	; (80024c0 <MX_SPI1_Init+0x74>)
 80024ac:	f005 fbde 	bl	8007c6c <HAL_SPI_Init>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80024b6:	f7ff ffc3 	bl	8002440 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80024ba:	bf00      	nop
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	200004d8 	.word	0x200004d8
 80024c4:	40013000 	.word	0x40013000

080024c8 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80024cc:	4b1b      	ldr	r3, [pc, #108]	; (800253c <MX_SPI3_Init+0x74>)
 80024ce:	4a1c      	ldr	r2, [pc, #112]	; (8002540 <MX_SPI3_Init+0x78>)
 80024d0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80024d2:	4b1a      	ldr	r3, [pc, #104]	; (800253c <MX_SPI3_Init+0x74>)
 80024d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80024d8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80024da:	4b18      	ldr	r3, [pc, #96]	; (800253c <MX_SPI3_Init+0x74>)
 80024dc:	2200      	movs	r2, #0
 80024de:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80024e0:	4b16      	ldr	r3, [pc, #88]	; (800253c <MX_SPI3_Init+0x74>)
 80024e2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80024e6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024e8:	4b14      	ldr	r3, [pc, #80]	; (800253c <MX_SPI3_Init+0x74>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024ee:	4b13      	ldr	r3, [pc, #76]	; (800253c <MX_SPI3_Init+0x74>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80024f4:	4b11      	ldr	r3, [pc, #68]	; (800253c <MX_SPI3_Init+0x74>)
 80024f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024fa:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80024fc:	4b0f      	ldr	r3, [pc, #60]	; (800253c <MX_SPI3_Init+0x74>)
 80024fe:	2220      	movs	r2, #32
 8002500:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002502:	4b0e      	ldr	r3, [pc, #56]	; (800253c <MX_SPI3_Init+0x74>)
 8002504:	2200      	movs	r2, #0
 8002506:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002508:	4b0c      	ldr	r3, [pc, #48]	; (800253c <MX_SPI3_Init+0x74>)
 800250a:	2200      	movs	r2, #0
 800250c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800250e:	4b0b      	ldr	r3, [pc, #44]	; (800253c <MX_SPI3_Init+0x74>)
 8002510:	2200      	movs	r2, #0
 8002512:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002514:	4b09      	ldr	r3, [pc, #36]	; (800253c <MX_SPI3_Init+0x74>)
 8002516:	2207      	movs	r2, #7
 8002518:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800251a:	4b08      	ldr	r3, [pc, #32]	; (800253c <MX_SPI3_Init+0x74>)
 800251c:	2200      	movs	r2, #0
 800251e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002520:	4b06      	ldr	r3, [pc, #24]	; (800253c <MX_SPI3_Init+0x74>)
 8002522:	2208      	movs	r2, #8
 8002524:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002526:	4805      	ldr	r0, [pc, #20]	; (800253c <MX_SPI3_Init+0x74>)
 8002528:	f005 fba0 	bl	8007c6c <HAL_SPI_Init>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8002532:	f7ff ff85 	bl	8002440 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002536:	bf00      	nop
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	2000053c 	.word	0x2000053c
 8002540:	40003c00 	.word	0x40003c00

08002544 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08c      	sub	sp, #48	; 0x30
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800254c:	f107 031c 	add.w	r3, r7, #28
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	605a      	str	r2, [r3, #4]
 8002556:	609a      	str	r2, [r3, #8]
 8002558:	60da      	str	r2, [r3, #12]
 800255a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a89      	ldr	r2, [pc, #548]	; (8002788 <HAL_SPI_MspInit+0x244>)
 8002562:	4293      	cmp	r3, r2
 8002564:	f040 8083 	bne.w	800266e <HAL_SPI_MspInit+0x12a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002568:	4b88      	ldr	r3, [pc, #544]	; (800278c <HAL_SPI_MspInit+0x248>)
 800256a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800256c:	4a87      	ldr	r2, [pc, #540]	; (800278c <HAL_SPI_MspInit+0x248>)
 800256e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002572:	6613      	str	r3, [r2, #96]	; 0x60
 8002574:	4b85      	ldr	r3, [pc, #532]	; (800278c <HAL_SPI_MspInit+0x248>)
 8002576:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002578:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800257c:	61bb      	str	r3, [r7, #24]
 800257e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002580:	4b82      	ldr	r3, [pc, #520]	; (800278c <HAL_SPI_MspInit+0x248>)
 8002582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002584:	4a81      	ldr	r2, [pc, #516]	; (800278c <HAL_SPI_MspInit+0x248>)
 8002586:	f043 0302 	orr.w	r3, r3, #2
 800258a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800258c:	4b7f      	ldr	r3, [pc, #508]	; (800278c <HAL_SPI_MspInit+0x248>)
 800258e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	617b      	str	r3, [r7, #20]
 8002596:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002598:	2338      	movs	r3, #56	; 0x38
 800259a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259c:	2302      	movs	r3, #2
 800259e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a4:	2300      	movs	r3, #0
 80025a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025a8:	2305      	movs	r3, #5
 80025aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ac:	f107 031c 	add.w	r3, r7, #28
 80025b0:	4619      	mov	r1, r3
 80025b2:	4877      	ldr	r0, [pc, #476]	; (8002790 <HAL_SPI_MspInit+0x24c>)
 80025b4:	f004 f9a6 	bl	8006904 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel3;
 80025b8:	4b76      	ldr	r3, [pc, #472]	; (8002794 <HAL_SPI_MspInit+0x250>)
 80025ba:	4a77      	ldr	r2, [pc, #476]	; (8002798 <HAL_SPI_MspInit+0x254>)
 80025bc:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 80025be:	4b75      	ldr	r3, [pc, #468]	; (8002794 <HAL_SPI_MspInit+0x250>)
 80025c0:	220a      	movs	r2, #10
 80025c2:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025c4:	4b73      	ldr	r3, [pc, #460]	; (8002794 <HAL_SPI_MspInit+0x250>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025ca:	4b72      	ldr	r3, [pc, #456]	; (8002794 <HAL_SPI_MspInit+0x250>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80025d0:	4b70      	ldr	r3, [pc, #448]	; (8002794 <HAL_SPI_MspInit+0x250>)
 80025d2:	2280      	movs	r2, #128	; 0x80
 80025d4:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025d6:	4b6f      	ldr	r3, [pc, #444]	; (8002794 <HAL_SPI_MspInit+0x250>)
 80025d8:	2200      	movs	r2, #0
 80025da:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025dc:	4b6d      	ldr	r3, [pc, #436]	; (8002794 <HAL_SPI_MspInit+0x250>)
 80025de:	2200      	movs	r2, #0
 80025e0:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80025e2:	4b6c      	ldr	r3, [pc, #432]	; (8002794 <HAL_SPI_MspInit+0x250>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80025e8:	4b6a      	ldr	r3, [pc, #424]	; (8002794 <HAL_SPI_MspInit+0x250>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80025ee:	4869      	ldr	r0, [pc, #420]	; (8002794 <HAL_SPI_MspInit+0x250>)
 80025f0:	f003 f85c 	bl	80056ac <HAL_DMA_Init>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 80025fa:	f7ff ff21 	bl	8002440 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a64      	ldr	r2, [pc, #400]	; (8002794 <HAL_SPI_MspInit+0x250>)
 8002602:	659a      	str	r2, [r3, #88]	; 0x58
 8002604:	4a63      	ldr	r2, [pc, #396]	; (8002794 <HAL_SPI_MspInit+0x250>)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel4;
 800260a:	4b64      	ldr	r3, [pc, #400]	; (800279c <HAL_SPI_MspInit+0x258>)
 800260c:	4a64      	ldr	r2, [pc, #400]	; (80027a0 <HAL_SPI_MspInit+0x25c>)
 800260e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8002610:	4b62      	ldr	r3, [pc, #392]	; (800279c <HAL_SPI_MspInit+0x258>)
 8002612:	220b      	movs	r2, #11
 8002614:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002616:	4b61      	ldr	r3, [pc, #388]	; (800279c <HAL_SPI_MspInit+0x258>)
 8002618:	2210      	movs	r2, #16
 800261a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800261c:	4b5f      	ldr	r3, [pc, #380]	; (800279c <HAL_SPI_MspInit+0x258>)
 800261e:	2200      	movs	r2, #0
 8002620:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002622:	4b5e      	ldr	r3, [pc, #376]	; (800279c <HAL_SPI_MspInit+0x258>)
 8002624:	2280      	movs	r2, #128	; 0x80
 8002626:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002628:	4b5c      	ldr	r3, [pc, #368]	; (800279c <HAL_SPI_MspInit+0x258>)
 800262a:	2200      	movs	r2, #0
 800262c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800262e:	4b5b      	ldr	r3, [pc, #364]	; (800279c <HAL_SPI_MspInit+0x258>)
 8002630:	2200      	movs	r2, #0
 8002632:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002634:	4b59      	ldr	r3, [pc, #356]	; (800279c <HAL_SPI_MspInit+0x258>)
 8002636:	2200      	movs	r2, #0
 8002638:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800263a:	4b58      	ldr	r3, [pc, #352]	; (800279c <HAL_SPI_MspInit+0x258>)
 800263c:	2200      	movs	r2, #0
 800263e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002640:	4856      	ldr	r0, [pc, #344]	; (800279c <HAL_SPI_MspInit+0x258>)
 8002642:	f003 f833 	bl	80056ac <HAL_DMA_Init>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 800264c:	f7ff fef8 	bl	8002440 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a52      	ldr	r2, [pc, #328]	; (800279c <HAL_SPI_MspInit+0x258>)
 8002654:	655a      	str	r2, [r3, #84]	; 0x54
 8002656:	4a51      	ldr	r2, [pc, #324]	; (800279c <HAL_SPI_MspInit+0x258>)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800265c:	2200      	movs	r2, #0
 800265e:	2100      	movs	r1, #0
 8002660:	2023      	movs	r0, #35	; 0x23
 8002662:	f002 fe24 	bl	80052ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002666:	2023      	movs	r0, #35	; 0x23
 8002668:	f002 fe3b 	bl	80052e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800266c:	e088      	b.n	8002780 <HAL_SPI_MspInit+0x23c>
  else if(spiHandle->Instance==SPI3)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a4c      	ldr	r2, [pc, #304]	; (80027a4 <HAL_SPI_MspInit+0x260>)
 8002674:	4293      	cmp	r3, r2
 8002676:	f040 8083 	bne.w	8002780 <HAL_SPI_MspInit+0x23c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800267a:	4b44      	ldr	r3, [pc, #272]	; (800278c <HAL_SPI_MspInit+0x248>)
 800267c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267e:	4a43      	ldr	r2, [pc, #268]	; (800278c <HAL_SPI_MspInit+0x248>)
 8002680:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002684:	6593      	str	r3, [r2, #88]	; 0x58
 8002686:	4b41      	ldr	r3, [pc, #260]	; (800278c <HAL_SPI_MspInit+0x248>)
 8002688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800268e:	613b      	str	r3, [r7, #16]
 8002690:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002692:	4b3e      	ldr	r3, [pc, #248]	; (800278c <HAL_SPI_MspInit+0x248>)
 8002694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002696:	4a3d      	ldr	r2, [pc, #244]	; (800278c <HAL_SPI_MspInit+0x248>)
 8002698:	f043 0304 	orr.w	r3, r3, #4
 800269c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800269e:	4b3b      	ldr	r3, [pc, #236]	; (800278c <HAL_SPI_MspInit+0x248>)
 80026a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a2:	f003 0304 	and.w	r3, r3, #4
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80026aa:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80026ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b0:	2302      	movs	r3, #2
 80026b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b4:	2300      	movs	r3, #0
 80026b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b8:	2300      	movs	r3, #0
 80026ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80026bc:	2306      	movs	r3, #6
 80026be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026c0:	f107 031c 	add.w	r3, r7, #28
 80026c4:	4619      	mov	r1, r3
 80026c6:	4838      	ldr	r0, [pc, #224]	; (80027a8 <HAL_SPI_MspInit+0x264>)
 80026c8:	f004 f91c 	bl	8006904 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA2_Channel1;
 80026cc:	4b37      	ldr	r3, [pc, #220]	; (80027ac <HAL_SPI_MspInit+0x268>)
 80026ce:	4a38      	ldr	r2, [pc, #224]	; (80027b0 <HAL_SPI_MspInit+0x26c>)
 80026d0:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 80026d2:	4b36      	ldr	r3, [pc, #216]	; (80027ac <HAL_SPI_MspInit+0x268>)
 80026d4:	220e      	movs	r2, #14
 80026d6:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026d8:	4b34      	ldr	r3, [pc, #208]	; (80027ac <HAL_SPI_MspInit+0x268>)
 80026da:	2200      	movs	r2, #0
 80026dc:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026de:	4b33      	ldr	r3, [pc, #204]	; (80027ac <HAL_SPI_MspInit+0x268>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026e4:	4b31      	ldr	r3, [pc, #196]	; (80027ac <HAL_SPI_MspInit+0x268>)
 80026e6:	2280      	movs	r2, #128	; 0x80
 80026e8:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026ea:	4b30      	ldr	r3, [pc, #192]	; (80027ac <HAL_SPI_MspInit+0x268>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026f0:	4b2e      	ldr	r3, [pc, #184]	; (80027ac <HAL_SPI_MspInit+0x268>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 80026f6:	4b2d      	ldr	r3, [pc, #180]	; (80027ac <HAL_SPI_MspInit+0x268>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026fc:	4b2b      	ldr	r3, [pc, #172]	; (80027ac <HAL_SPI_MspInit+0x268>)
 80026fe:	2200      	movs	r2, #0
 8002700:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8002702:	482a      	ldr	r0, [pc, #168]	; (80027ac <HAL_SPI_MspInit+0x268>)
 8002704:	f002 ffd2 	bl	80056ac <HAL_DMA_Init>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <HAL_SPI_MspInit+0x1ce>
      Error_Handler();
 800270e:	f7ff fe97 	bl	8002440 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a25      	ldr	r2, [pc, #148]	; (80027ac <HAL_SPI_MspInit+0x268>)
 8002716:	659a      	str	r2, [r3, #88]	; 0x58
 8002718:	4a24      	ldr	r2, [pc, #144]	; (80027ac <HAL_SPI_MspInit+0x268>)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_spi3_tx.Instance = DMA2_Channel2;
 800271e:	4b25      	ldr	r3, [pc, #148]	; (80027b4 <HAL_SPI_MspInit+0x270>)
 8002720:	4a25      	ldr	r2, [pc, #148]	; (80027b8 <HAL_SPI_MspInit+0x274>)
 8002722:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 8002724:	4b23      	ldr	r3, [pc, #140]	; (80027b4 <HAL_SPI_MspInit+0x270>)
 8002726:	220f      	movs	r2, #15
 8002728:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800272a:	4b22      	ldr	r3, [pc, #136]	; (80027b4 <HAL_SPI_MspInit+0x270>)
 800272c:	2210      	movs	r2, #16
 800272e:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002730:	4b20      	ldr	r3, [pc, #128]	; (80027b4 <HAL_SPI_MspInit+0x270>)
 8002732:	2200      	movs	r2, #0
 8002734:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002736:	4b1f      	ldr	r3, [pc, #124]	; (80027b4 <HAL_SPI_MspInit+0x270>)
 8002738:	2280      	movs	r2, #128	; 0x80
 800273a:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800273c:	4b1d      	ldr	r3, [pc, #116]	; (80027b4 <HAL_SPI_MspInit+0x270>)
 800273e:	2200      	movs	r2, #0
 8002740:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002742:	4b1c      	ldr	r3, [pc, #112]	; (80027b4 <HAL_SPI_MspInit+0x270>)
 8002744:	2200      	movs	r2, #0
 8002746:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8002748:	4b1a      	ldr	r3, [pc, #104]	; (80027b4 <HAL_SPI_MspInit+0x270>)
 800274a:	2200      	movs	r2, #0
 800274c:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800274e:	4b19      	ldr	r3, [pc, #100]	; (80027b4 <HAL_SPI_MspInit+0x270>)
 8002750:	2200      	movs	r2, #0
 8002752:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8002754:	4817      	ldr	r0, [pc, #92]	; (80027b4 <HAL_SPI_MspInit+0x270>)
 8002756:	f002 ffa9 	bl	80056ac <HAL_DMA_Init>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <HAL_SPI_MspInit+0x220>
      Error_Handler();
 8002760:	f7ff fe6e 	bl	8002440 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a13      	ldr	r2, [pc, #76]	; (80027b4 <HAL_SPI_MspInit+0x270>)
 8002768:	655a      	str	r2, [r3, #84]	; 0x54
 800276a:	4a12      	ldr	r2, [pc, #72]	; (80027b4 <HAL_SPI_MspInit+0x270>)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8002770:	2200      	movs	r2, #0
 8002772:	2100      	movs	r1, #0
 8002774:	2033      	movs	r0, #51	; 0x33
 8002776:	f002 fd9a 	bl	80052ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800277a:	2033      	movs	r0, #51	; 0x33
 800277c:	f002 fdb1 	bl	80052e2 <HAL_NVIC_EnableIRQ>
}
 8002780:	bf00      	nop
 8002782:	3730      	adds	r7, #48	; 0x30
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40013000 	.word	0x40013000
 800278c:	40021000 	.word	0x40021000
 8002790:	48000400 	.word	0x48000400
 8002794:	200005a0 	.word	0x200005a0
 8002798:	40020030 	.word	0x40020030
 800279c:	20000600 	.word	0x20000600
 80027a0:	40020044 	.word	0x40020044
 80027a4:	40003c00 	.word	0x40003c00
 80027a8:	48000800 	.word	0x48000800
 80027ac:	20000660 	.word	0x20000660
 80027b0:	40020408 	.word	0x40020408
 80027b4:	200006c0 	.word	0x200006c0
 80027b8:	4002041c 	.word	0x4002041c

080027bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027c2:	4b0f      	ldr	r3, [pc, #60]	; (8002800 <HAL_MspInit+0x44>)
 80027c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027c6:	4a0e      	ldr	r2, [pc, #56]	; (8002800 <HAL_MspInit+0x44>)
 80027c8:	f043 0301 	orr.w	r3, r3, #1
 80027cc:	6613      	str	r3, [r2, #96]	; 0x60
 80027ce:	4b0c      	ldr	r3, [pc, #48]	; (8002800 <HAL_MspInit+0x44>)
 80027d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	607b      	str	r3, [r7, #4]
 80027d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027da:	4b09      	ldr	r3, [pc, #36]	; (8002800 <HAL_MspInit+0x44>)
 80027dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027de:	4a08      	ldr	r2, [pc, #32]	; (8002800 <HAL_MspInit+0x44>)
 80027e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027e4:	6593      	str	r3, [r2, #88]	; 0x58
 80027e6:	4b06      	ldr	r3, [pc, #24]	; (8002800 <HAL_MspInit+0x44>)
 80027e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ee:	603b      	str	r3, [r7, #0]
 80027f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80027f2:	f004 fac5 	bl	8006d80 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027f6:	bf00      	nop
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	40021000 	.word	0x40021000

08002804 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002808:	e7fe      	b.n	8002808 <NMI_Handler+0x4>

0800280a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800280a:	b480      	push	{r7}
 800280c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800280e:	e7fe      	b.n	800280e <HardFault_Handler+0x4>

08002810 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002814:	e7fe      	b.n	8002814 <MemManage_Handler+0x4>

08002816 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002816:	b480      	push	{r7}
 8002818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800281a:	e7fe      	b.n	800281a <BusFault_Handler+0x4>

0800281c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002820:	e7fe      	b.n	8002820 <UsageFault_Handler+0x4>

08002822 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002822:	b480      	push	{r7}
 8002824:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002826:	bf00      	nop
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002834:	bf00      	nop
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr

0800283e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800283e:	b480      	push	{r7}
 8002840:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002842:	bf00      	nop
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002850:	f000 fba8 	bl	8002fa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002854:	bf00      	nop
 8002856:	bd80      	pop	{r7, pc}

08002858 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800285c:	4802      	ldr	r0, [pc, #8]	; (8002868 <DMA1_Channel1_IRQHandler+0x10>)
 800285e:	f003 f908 	bl	8005a72 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002862:	bf00      	nop
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	2000039c 	.word	0x2000039c

0800286c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002870:	4802      	ldr	r0, [pc, #8]	; (800287c <DMA1_Channel2_IRQHandler+0x10>)
 8002872:	f003 f8fe 	bl	8005a72 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002876:	bf00      	nop
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	200003fc 	.word	0x200003fc

08002880 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002884:	4802      	ldr	r0, [pc, #8]	; (8002890 <DMA1_Channel3_IRQHandler+0x10>)
 8002886:	f003 f8f4 	bl	8005a72 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800288a:	bf00      	nop
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	200005a0 	.word	0x200005a0

08002894 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002898:	4802      	ldr	r0, [pc, #8]	; (80028a4 <DMA1_Channel4_IRQHandler+0x10>)
 800289a:	f003 f8ea 	bl	8005a72 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800289e:	bf00      	nop
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	20000600 	.word	0x20000600

080028a8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80028ac:	4803      	ldr	r0, [pc, #12]	; (80028bc <ADC1_2_IRQHandler+0x14>)
 80028ae:	f001 fa5f 	bl	8003d70 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80028b2:	4803      	ldr	r0, [pc, #12]	; (80028c0 <ADC1_2_IRQHandler+0x18>)
 80028b4:	f001 fa5c 	bl	8003d70 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80028b8:	bf00      	nop
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	200002c4 	.word	0x200002c4
 80028c0:	20000330 	.word	0x20000330

080028c4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80028c8:	4802      	ldr	r0, [pc, #8]	; (80028d4 <FDCAN1_IT0_IRQHandler+0x10>)
 80028ca:	f003 fda7 	bl	800641c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80028ce:	bf00      	nop
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	20000474 	.word	0x20000474

080028d8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80028dc:	4802      	ldr	r0, [pc, #8]	; (80028e8 <TIM3_IRQHandler+0x10>)
 80028de:	f005 fe65 	bl	80085ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80028e2:	bf00      	nop
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	2000076c 	.word	0x2000076c

080028ec <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80028f0:	4802      	ldr	r0, [pc, #8]	; (80028fc <SPI1_IRQHandler+0x10>)
 80028f2:	f005 fa67 	bl	8007dc4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80028f6:	bf00      	nop
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	200004d8 	.word	0x200004d8

08002900 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002904:	4802      	ldr	r0, [pc, #8]	; (8002910 <USART1_IRQHandler+0x10>)
 8002906:	f007 f949 	bl	8009b9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800290a:	bf00      	nop
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	200007b8 	.word	0x200007b8

08002914 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8002918:	4802      	ldr	r0, [pc, #8]	; (8002924 <SPI3_IRQHandler+0x10>)
 800291a:	f005 fa53 	bl	8007dc4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800291e:	bf00      	nop
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	2000053c 	.word	0x2000053c

08002928 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 800292c:	4802      	ldr	r0, [pc, #8]	; (8002938 <DMA2_Channel1_IRQHandler+0x10>)
 800292e:	f003 f8a0 	bl	8005a72 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8002932:	bf00      	nop
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	20000660 	.word	0x20000660

0800293c <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8002940:	4802      	ldr	r0, [pc, #8]	; (800294c <DMA2_Channel2_IRQHandler+0x10>)
 8002942:	f003 f896 	bl	8005a72 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8002946:	bf00      	nop
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	200006c0 	.word	0x200006c0

08002950 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002954:	4802      	ldr	r0, [pc, #8]	; (8002960 <DMA2_Channel3_IRQHandler+0x10>)
 8002956:	f003 f88c 	bl	8005a72 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 800295a:	bf00      	nop
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	20000848 	.word	0x20000848

08002964 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002968:	4b06      	ldr	r3, [pc, #24]	; (8002984 <SystemInit+0x20>)
 800296a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296e:	4a05      	ldr	r2, [pc, #20]	; (8002984 <SystemInit+0x20>)
 8002970:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002974:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002978:	bf00      	nop
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	e000ed00 	.word	0xe000ed00

08002988 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b09c      	sub	sp, #112	; 0x70
 800298c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800298e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002992:	2200      	movs	r2, #0
 8002994:	601a      	str	r2, [r3, #0]
 8002996:	605a      	str	r2, [r3, #4]
 8002998:	609a      	str	r2, [r3, #8]
 800299a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800299c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	605a      	str	r2, [r3, #4]
 80029a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	605a      	str	r2, [r3, #4]
 80029b2:	609a      	str	r2, [r3, #8]
 80029b4:	60da      	str	r2, [r3, #12]
 80029b6:	611a      	str	r2, [r3, #16]
 80029b8:	615a      	str	r2, [r3, #20]
 80029ba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80029bc:	1d3b      	adds	r3, r7, #4
 80029be:	2234      	movs	r2, #52	; 0x34
 80029c0:	2100      	movs	r1, #0
 80029c2:	4618      	mov	r0, r3
 80029c4:	f008 fa6c 	bl	800aea0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80029c8:	4b51      	ldr	r3, [pc, #324]	; (8002b10 <MX_TIM1_Init+0x188>)
 80029ca:	4a52      	ldr	r2, [pc, #328]	; (8002b14 <MX_TIM1_Init+0x18c>)
 80029cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80029ce:	4b50      	ldr	r3, [pc, #320]	; (8002b10 <MX_TIM1_Init+0x188>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80029d4:	4b4e      	ldr	r3, [pc, #312]	; (8002b10 <MX_TIM1_Init+0x188>)
 80029d6:	2220      	movs	r2, #32
 80029d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1499;
 80029da:	4b4d      	ldr	r3, [pc, #308]	; (8002b10 <MX_TIM1_Init+0x188>)
 80029dc:	f240 52db 	movw	r2, #1499	; 0x5db
 80029e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029e2:	4b4b      	ldr	r3, [pc, #300]	; (8002b10 <MX_TIM1_Init+0x188>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80029e8:	4b49      	ldr	r3, [pc, #292]	; (8002b10 <MX_TIM1_Init+0x188>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80029ee:	4b48      	ldr	r3, [pc, #288]	; (8002b10 <MX_TIM1_Init+0x188>)
 80029f0:	2280      	movs	r2, #128	; 0x80
 80029f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80029f4:	4846      	ldr	r0, [pc, #280]	; (8002b10 <MX_TIM1_Init+0x188>)
 80029f6:	f005 faf8 	bl	8007fea <HAL_TIM_Base_Init>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002a00:	f7ff fd1e 	bl	8002440 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a08:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002a0a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002a0e:	4619      	mov	r1, r3
 8002a10:	483f      	ldr	r0, [pc, #252]	; (8002b10 <MX_TIM1_Init+0x188>)
 8002a12:	f006 f85f 	bl	8008ad4 <HAL_TIM_ConfigClockSource>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002a1c:	f7ff fd10 	bl	8002440 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002a20:	483b      	ldr	r0, [pc, #236]	; (8002b10 <MX_TIM1_Init+0x188>)
 8002a22:	f005 fbcb 	bl	80081bc <HAL_TIM_PWM_Init>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002a2c:	f7ff fd08 	bl	8002440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a30:	2300      	movs	r3, #0
 8002a32:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002a34:	2300      	movs	r3, #0
 8002a36:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a3c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002a40:	4619      	mov	r1, r3
 8002a42:	4833      	ldr	r0, [pc, #204]	; (8002b10 <MX_TIM1_Init+0x188>)
 8002a44:	f006 fecc 	bl	80097e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002a4e:	f7ff fcf7 	bl	8002440 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a52:	2360      	movs	r3, #96	; 0x60
 8002a54:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8002a56:	2300      	movs	r3, #0
 8002a58:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8002a5e:	2308      	movs	r3, #8
 8002a60:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a62:	2300      	movs	r3, #0
 8002a64:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002a66:	2300      	movs	r3, #0
 8002a68:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a6e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002a72:	2200      	movs	r2, #0
 8002a74:	4619      	mov	r1, r3
 8002a76:	4826      	ldr	r0, [pc, #152]	; (8002b10 <MX_TIM1_Init+0x188>)
 8002a78:	f005 ff18 	bl	80088ac <HAL_TIM_PWM_ConfigChannel>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8002a82:	f7ff fcdd 	bl	8002440 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a86:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002a8a:	2204      	movs	r2, #4
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4820      	ldr	r0, [pc, #128]	; (8002b10 <MX_TIM1_Init+0x188>)
 8002a90:	f005 ff0c 	bl	80088ac <HAL_TIM_PWM_ConfigChannel>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8002a9a:	f7ff fcd1 	bl	8002440 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002a9e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002aa2:	2208      	movs	r2, #8
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	481a      	ldr	r0, [pc, #104]	; (8002b10 <MX_TIM1_Init+0x188>)
 8002aa8:	f005 ff00 	bl	80088ac <HAL_TIM_PWM_ConfigChannel>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8002ab2:	f7ff fcc5 	bl	8002440 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002aba:	2300      	movs	r3, #0
 8002abc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002aca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ace:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002adc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ae0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002aea:	2300      	movs	r3, #0
 8002aec:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002aee:	1d3b      	adds	r3, r7, #4
 8002af0:	4619      	mov	r1, r3
 8002af2:	4807      	ldr	r0, [pc, #28]	; (8002b10 <MX_TIM1_Init+0x188>)
 8002af4:	f006 fef6 	bl	80098e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8002afe:	f7ff fc9f 	bl	8002440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002b02:	4803      	ldr	r0, [pc, #12]	; (8002b10 <MX_TIM1_Init+0x188>)
 8002b04:	f000 f890 	bl	8002c28 <HAL_TIM_MspPostInit>

}
 8002b08:	bf00      	nop
 8002b0a:	3770      	adds	r7, #112	; 0x70
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	20000720 	.word	0x20000720
 8002b14:	40012c00 	.word	0x40012c00

08002b18 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b088      	sub	sp, #32
 8002b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b1e:	f107 0310 	add.w	r3, r7, #16
 8002b22:	2200      	movs	r2, #0
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	605a      	str	r2, [r3, #4]
 8002b28:	609a      	str	r2, [r3, #8]
 8002b2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b2c:	1d3b      	adds	r3, r7, #4
 8002b2e:	2200      	movs	r2, #0
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	605a      	str	r2, [r3, #4]
 8002b34:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b36:	4b1d      	ldr	r3, [pc, #116]	; (8002bac <MX_TIM3_Init+0x94>)
 8002b38:	4a1d      	ldr	r2, [pc, #116]	; (8002bb0 <MX_TIM3_Init+0x98>)
 8002b3a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4;
 8002b3c:	4b1b      	ldr	r3, [pc, #108]	; (8002bac <MX_TIM3_Init+0x94>)
 8002b3e:	2204      	movs	r2, #4
 8002b40:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b42:	4b1a      	ldr	r3, [pc, #104]	; (8002bac <MX_TIM3_Init+0x94>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2999;
 8002b48:	4b18      	ldr	r3, [pc, #96]	; (8002bac <MX_TIM3_Init+0x94>)
 8002b4a:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8002b4e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b50:	4b16      	ldr	r3, [pc, #88]	; (8002bac <MX_TIM3_Init+0x94>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b56:	4b15      	ldr	r3, [pc, #84]	; (8002bac <MX_TIM3_Init+0x94>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002b5c:	4813      	ldr	r0, [pc, #76]	; (8002bac <MX_TIM3_Init+0x94>)
 8002b5e:	f005 fa44 	bl	8007fea <HAL_TIM_Base_Init>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002b68:	f7ff fc6a 	bl	8002440 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b70:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002b72:	f107 0310 	add.w	r3, r7, #16
 8002b76:	4619      	mov	r1, r3
 8002b78:	480c      	ldr	r0, [pc, #48]	; (8002bac <MX_TIM3_Init+0x94>)
 8002b7a:	f005 ffab 	bl	8008ad4 <HAL_TIM_ConfigClockSource>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002b84:	f7ff fc5c 	bl	8002440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b90:	1d3b      	adds	r3, r7, #4
 8002b92:	4619      	mov	r1, r3
 8002b94:	4805      	ldr	r0, [pc, #20]	; (8002bac <MX_TIM3_Init+0x94>)
 8002b96:	f006 fe23 	bl	80097e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002ba0:	f7ff fc4e 	bl	8002440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002ba4:	bf00      	nop
 8002ba6:	3720      	adds	r7, #32
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	2000076c 	.word	0x2000076c
 8002bb0:	40000400 	.word	0x40000400

08002bb4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a16      	ldr	r2, [pc, #88]	; (8002c1c <HAL_TIM_Base_MspInit+0x68>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d10c      	bne.n	8002be0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002bc6:	4b16      	ldr	r3, [pc, #88]	; (8002c20 <HAL_TIM_Base_MspInit+0x6c>)
 8002bc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bca:	4a15      	ldr	r2, [pc, #84]	; (8002c20 <HAL_TIM_Base_MspInit+0x6c>)
 8002bcc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002bd0:	6613      	str	r3, [r2, #96]	; 0x60
 8002bd2:	4b13      	ldr	r3, [pc, #76]	; (8002c20 <HAL_TIM_Base_MspInit+0x6c>)
 8002bd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bda:	60fb      	str	r3, [r7, #12]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002bde:	e018      	b.n	8002c12 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a0f      	ldr	r2, [pc, #60]	; (8002c24 <HAL_TIM_Base_MspInit+0x70>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d113      	bne.n	8002c12 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002bea:	4b0d      	ldr	r3, [pc, #52]	; (8002c20 <HAL_TIM_Base_MspInit+0x6c>)
 8002bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bee:	4a0c      	ldr	r2, [pc, #48]	; (8002c20 <HAL_TIM_Base_MspInit+0x6c>)
 8002bf0:	f043 0302 	orr.w	r3, r3, #2
 8002bf4:	6593      	str	r3, [r2, #88]	; 0x58
 8002bf6:	4b0a      	ldr	r3, [pc, #40]	; (8002c20 <HAL_TIM_Base_MspInit+0x6c>)
 8002bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	60bb      	str	r3, [r7, #8]
 8002c00:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002c02:	2200      	movs	r2, #0
 8002c04:	2100      	movs	r1, #0
 8002c06:	201d      	movs	r0, #29
 8002c08:	f002 fb51 	bl	80052ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002c0c:	201d      	movs	r0, #29
 8002c0e:	f002 fb68 	bl	80052e2 <HAL_NVIC_EnableIRQ>
}
 8002c12:	bf00      	nop
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40012c00 	.word	0x40012c00
 8002c20:	40021000 	.word	0x40021000
 8002c24:	40000400 	.word	0x40000400

08002c28 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b08a      	sub	sp, #40	; 0x28
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c30:	f107 0314 	add.w	r3, r7, #20
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	605a      	str	r2, [r3, #4]
 8002c3a:	609a      	str	r2, [r3, #8]
 8002c3c:	60da      	str	r2, [r3, #12]
 8002c3e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a28      	ldr	r2, [pc, #160]	; (8002ce8 <HAL_TIM_MspPostInit+0xc0>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d149      	bne.n	8002cde <HAL_TIM_MspPostInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c4a:	4b28      	ldr	r3, [pc, #160]	; (8002cec <HAL_TIM_MspPostInit+0xc4>)
 8002c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c4e:	4a27      	ldr	r2, [pc, #156]	; (8002cec <HAL_TIM_MspPostInit+0xc4>)
 8002c50:	f043 0304 	orr.w	r3, r3, #4
 8002c54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c56:	4b25      	ldr	r3, [pc, #148]	; (8002cec <HAL_TIM_MspPostInit+0xc4>)
 8002c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c5a:	f003 0304 	and.w	r3, r3, #4
 8002c5e:	613b      	str	r3, [r7, #16]
 8002c60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c62:	4b22      	ldr	r3, [pc, #136]	; (8002cec <HAL_TIM_MspPostInit+0xc4>)
 8002c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c66:	4a21      	ldr	r2, [pc, #132]	; (8002cec <HAL_TIM_MspPostInit+0xc4>)
 8002c68:	f043 0302 	orr.w	r3, r3, #2
 8002c6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c6e:	4b1f      	ldr	r3, [pc, #124]	; (8002cec <HAL_TIM_MspPostInit+0xc4>)
 8002c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> TIM1_CH3
    PB13     ------> TIM1_CH1N
    PB14     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002c7a:	2307      	movs	r3, #7
 8002c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c7e:	2302      	movs	r3, #2
 8002c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c82:	2300      	movs	r3, #0
 8002c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c86:	2300      	movs	r3, #0
 8002c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c8e:	f107 0314 	add.w	r3, r7, #20
 8002c92:	4619      	mov	r1, r3
 8002c94:	4816      	ldr	r0, [pc, #88]	; (8002cf0 <HAL_TIM_MspPostInit+0xc8>)
 8002c96:	f003 fe35 	bl	8006904 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002c9a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002c9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002cac:	2306      	movs	r3, #6
 8002cae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cb0:	f107 0314 	add.w	r3, r7, #20
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	480f      	ldr	r0, [pc, #60]	; (8002cf4 <HAL_TIM_MspPostInit+0xcc>)
 8002cb8:	f003 fe24 	bl	8006904 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002cbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8002cce:	2304      	movs	r3, #4
 8002cd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cd2:	f107 0314 	add.w	r3, r7, #20
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	4806      	ldr	r0, [pc, #24]	; (8002cf4 <HAL_TIM_MspPostInit+0xcc>)
 8002cda:	f003 fe13 	bl	8006904 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002cde:	bf00      	nop
 8002ce0:	3728      	adds	r7, #40	; 0x28
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	40012c00 	.word	0x40012c00
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	48000800 	.word	0x48000800
 8002cf4:	48000400 	.word	0x48000400

08002cf8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002cfc:	4b22      	ldr	r3, [pc, #136]	; (8002d88 <MX_USART1_UART_Init+0x90>)
 8002cfe:	4a23      	ldr	r2, [pc, #140]	; (8002d8c <MX_USART1_UART_Init+0x94>)
 8002d00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002d02:	4b21      	ldr	r3, [pc, #132]	; (8002d88 <MX_USART1_UART_Init+0x90>)
 8002d04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d0a:	4b1f      	ldr	r3, [pc, #124]	; (8002d88 <MX_USART1_UART_Init+0x90>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d10:	4b1d      	ldr	r3, [pc, #116]	; (8002d88 <MX_USART1_UART_Init+0x90>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d16:	4b1c      	ldr	r3, [pc, #112]	; (8002d88 <MX_USART1_UART_Init+0x90>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d1c:	4b1a      	ldr	r3, [pc, #104]	; (8002d88 <MX_USART1_UART_Init+0x90>)
 8002d1e:	220c      	movs	r2, #12
 8002d20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d22:	4b19      	ldr	r3, [pc, #100]	; (8002d88 <MX_USART1_UART_Init+0x90>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d28:	4b17      	ldr	r3, [pc, #92]	; (8002d88 <MX_USART1_UART_Init+0x90>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d2e:	4b16      	ldr	r3, [pc, #88]	; (8002d88 <MX_USART1_UART_Init+0x90>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d34:	4b14      	ldr	r3, [pc, #80]	; (8002d88 <MX_USART1_UART_Init+0x90>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d3a:	4b13      	ldr	r3, [pc, #76]	; (8002d88 <MX_USART1_UART_Init+0x90>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d40:	4811      	ldr	r0, [pc, #68]	; (8002d88 <MX_USART1_UART_Init+0x90>)
 8002d42:	f006 feda 	bl	8009afa <HAL_UART_Init>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002d4c:	f7ff fb78 	bl	8002440 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d50:	2100      	movs	r1, #0
 8002d52:	480d      	ldr	r0, [pc, #52]	; (8002d88 <MX_USART1_UART_Init+0x90>)
 8002d54:	f007 ffd9 	bl	800ad0a <HAL_UARTEx_SetTxFifoThreshold>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002d5e:	f7ff fb6f 	bl	8002440 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d62:	2100      	movs	r1, #0
 8002d64:	4808      	ldr	r0, [pc, #32]	; (8002d88 <MX_USART1_UART_Init+0x90>)
 8002d66:	f008 f80e 	bl	800ad86 <HAL_UARTEx_SetRxFifoThreshold>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002d70:	f7ff fb66 	bl	8002440 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002d74:	4804      	ldr	r0, [pc, #16]	; (8002d88 <MX_USART1_UART_Init+0x90>)
 8002d76:	f007 ff8f 	bl	800ac98 <HAL_UARTEx_DisableFifoMode>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002d80:	f7ff fb5e 	bl	8002440 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002d84:	bf00      	nop
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	200007b8 	.word	0x200007b8
 8002d8c:	40013800 	.word	0x40013800

08002d90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b09a      	sub	sp, #104	; 0x68
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d98:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	605a      	str	r2, [r3, #4]
 8002da2:	609a      	str	r2, [r3, #8]
 8002da4:	60da      	str	r2, [r3, #12]
 8002da6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002da8:	f107 0310 	add.w	r3, r7, #16
 8002dac:	2244      	movs	r2, #68	; 0x44
 8002dae:	2100      	movs	r1, #0
 8002db0:	4618      	mov	r0, r3
 8002db2:	f008 f875 	bl	800aea0 <memset>
  if(uartHandle->Instance==USART1)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a37      	ldr	r2, [pc, #220]	; (8002e98 <HAL_UART_MspInit+0x108>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d166      	bne.n	8002e8e <HAL_UART_MspInit+0xfe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002dc8:	f107 0310 	add.w	r3, r7, #16
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f004 fd5d 	bl	800788c <HAL_RCCEx_PeriphCLKConfig>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002dd8:	f7ff fb32 	bl	8002440 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ddc:	4b2f      	ldr	r3, [pc, #188]	; (8002e9c <HAL_UART_MspInit+0x10c>)
 8002dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002de0:	4a2e      	ldr	r2, [pc, #184]	; (8002e9c <HAL_UART_MspInit+0x10c>)
 8002de2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002de6:	6613      	str	r3, [r2, #96]	; 0x60
 8002de8:	4b2c      	ldr	r3, [pc, #176]	; (8002e9c <HAL_UART_MspInit+0x10c>)
 8002dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002df4:	4b29      	ldr	r3, [pc, #164]	; (8002e9c <HAL_UART_MspInit+0x10c>)
 8002df6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002df8:	4a28      	ldr	r2, [pc, #160]	; (8002e9c <HAL_UART_MspInit+0x10c>)
 8002dfa:	f043 0304 	orr.w	r3, r3, #4
 8002dfe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e00:	4b26      	ldr	r3, [pc, #152]	; (8002e9c <HAL_UART_MspInit+0x10c>)
 8002e02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e04:	f003 0304 	and.w	r3, r3, #4
 8002e08:	60bb      	str	r3, [r7, #8]
 8002e0a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002e0c:	2330      	movs	r3, #48	; 0x30
 8002e0e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e10:	2302      	movs	r3, #2
 8002e12:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e14:	2300      	movs	r3, #0
 8002e16:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e1c:	2307      	movs	r3, #7
 8002e1e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e20:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002e24:	4619      	mov	r1, r3
 8002e26:	481e      	ldr	r0, [pc, #120]	; (8002ea0 <HAL_UART_MspInit+0x110>)
 8002e28:	f003 fd6c 	bl	8006904 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel3;
 8002e2c:	4b1d      	ldr	r3, [pc, #116]	; (8002ea4 <HAL_UART_MspInit+0x114>)
 8002e2e:	4a1e      	ldr	r2, [pc, #120]	; (8002ea8 <HAL_UART_MspInit+0x118>)
 8002e30:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002e32:	4b1c      	ldr	r3, [pc, #112]	; (8002ea4 <HAL_UART_MspInit+0x114>)
 8002e34:	2219      	movs	r2, #25
 8002e36:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e38:	4b1a      	ldr	r3, [pc, #104]	; (8002ea4 <HAL_UART_MspInit+0x114>)
 8002e3a:	2210      	movs	r2, #16
 8002e3c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e3e:	4b19      	ldr	r3, [pc, #100]	; (8002ea4 <HAL_UART_MspInit+0x114>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e44:	4b17      	ldr	r3, [pc, #92]	; (8002ea4 <HAL_UART_MspInit+0x114>)
 8002e46:	2280      	movs	r2, #128	; 0x80
 8002e48:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e4a:	4b16      	ldr	r3, [pc, #88]	; (8002ea4 <HAL_UART_MspInit+0x114>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e50:	4b14      	ldr	r3, [pc, #80]	; (8002ea4 <HAL_UART_MspInit+0x114>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002e56:	4b13      	ldr	r3, [pc, #76]	; (8002ea4 <HAL_UART_MspInit+0x114>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002e5c:	4b11      	ldr	r3, [pc, #68]	; (8002ea4 <HAL_UART_MspInit+0x114>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002e62:	4810      	ldr	r0, [pc, #64]	; (8002ea4 <HAL_UART_MspInit+0x114>)
 8002e64:	f002 fc22 	bl	80056ac <HAL_DMA_Init>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 8002e6e:	f7ff fae7 	bl	8002440 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a0b      	ldr	r2, [pc, #44]	; (8002ea4 <HAL_UART_MspInit+0x114>)
 8002e76:	679a      	str	r2, [r3, #120]	; 0x78
 8002e78:	4a0a      	ldr	r2, [pc, #40]	; (8002ea4 <HAL_UART_MspInit+0x114>)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002e7e:	2200      	movs	r2, #0
 8002e80:	2100      	movs	r1, #0
 8002e82:	2025      	movs	r0, #37	; 0x25
 8002e84:	f002 fa13 	bl	80052ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002e88:	2025      	movs	r0, #37	; 0x25
 8002e8a:	f002 fa2a 	bl	80052e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002e8e:	bf00      	nop
 8002e90:	3768      	adds	r7, #104	; 0x68
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	40013800 	.word	0x40013800
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	48000800 	.word	0x48000800
 8002ea4:	20000848 	.word	0x20000848
 8002ea8:	40020430 	.word	0x40020430

08002eac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002eac:	480d      	ldr	r0, [pc, #52]	; (8002ee4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002eae:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002eb0:	480d      	ldr	r0, [pc, #52]	; (8002ee8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002eb2:	490e      	ldr	r1, [pc, #56]	; (8002eec <LoopForever+0xa>)
  ldr r2, =_sidata
 8002eb4:	4a0e      	ldr	r2, [pc, #56]	; (8002ef0 <LoopForever+0xe>)
  movs r3, #0
 8002eb6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002eb8:	e002      	b.n	8002ec0 <LoopCopyDataInit>

08002eba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ebc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ebe:	3304      	adds	r3, #4

08002ec0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ec0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ec2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ec4:	d3f9      	bcc.n	8002eba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ec6:	4a0b      	ldr	r2, [pc, #44]	; (8002ef4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ec8:	4c0b      	ldr	r4, [pc, #44]	; (8002ef8 <LoopForever+0x16>)
  movs r3, #0
 8002eca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ecc:	e001      	b.n	8002ed2 <LoopFillZerobss>

08002ece <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ece:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ed0:	3204      	adds	r2, #4

08002ed2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ed2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ed4:	d3fb      	bcc.n	8002ece <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002ed6:	f7ff fd45 	bl	8002964 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002eda:	f007 ffe9 	bl	800aeb0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002ede:	f7ff fa3d 	bl	800235c <main>

08002ee2 <LoopForever>:

LoopForever:
    b LoopForever
 8002ee2:	e7fe      	b.n	8002ee2 <LoopForever>
  ldr   r0, =_estack
 8002ee4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002ee8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002eec:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 8002ef0:	0800af8c 	.word	0x0800af8c
  ldr r2, =_sbss
 8002ef4:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8002ef8:	200008ac 	.word	0x200008ac

08002efc <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002efc:	e7fe      	b.n	8002efc <COMP1_2_3_IRQHandler>

08002efe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b082      	sub	sp, #8
 8002f02:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f04:	2300      	movs	r3, #0
 8002f06:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f08:	2003      	movs	r0, #3
 8002f0a:	f002 f9c5 	bl	8005298 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f0e:	200f      	movs	r0, #15
 8002f10:	f000 f80e 	bl	8002f30 <HAL_InitTick>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d002      	beq.n	8002f20 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	71fb      	strb	r3, [r7, #7]
 8002f1e:	e001      	b.n	8002f24 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f20:	f7ff fc4c 	bl	80027bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f24:	79fb      	ldrb	r3, [r7, #7]

}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
	...

08002f30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002f3c:	4b16      	ldr	r3, [pc, #88]	; (8002f98 <HAL_InitTick+0x68>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d022      	beq.n	8002f8a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002f44:	4b15      	ldr	r3, [pc, #84]	; (8002f9c <HAL_InitTick+0x6c>)
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	4b13      	ldr	r3, [pc, #76]	; (8002f98 <HAL_InitTick+0x68>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002f50:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f002 f9d0 	bl	80052fe <HAL_SYSTICK_Config>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d10f      	bne.n	8002f84 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b0f      	cmp	r3, #15
 8002f68:	d809      	bhi.n	8002f7e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	6879      	ldr	r1, [r7, #4]
 8002f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8002f72:	f002 f99c 	bl	80052ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f76:	4a0a      	ldr	r2, [pc, #40]	; (8002fa0 <HAL_InitTick+0x70>)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6013      	str	r3, [r2, #0]
 8002f7c:	e007      	b.n	8002f8e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	73fb      	strb	r3, [r7, #15]
 8002f82:	e004      	b.n	8002f8e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	73fb      	strb	r3, [r7, #15]
 8002f88:	e001      	b.n	8002f8e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	200000cc 	.word	0x200000cc
 8002f9c:	200000c4 	.word	0x200000c4
 8002fa0:	200000c8 	.word	0x200000c8

08002fa4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fa8:	4b05      	ldr	r3, [pc, #20]	; (8002fc0 <HAL_IncTick+0x1c>)
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	4b05      	ldr	r3, [pc, #20]	; (8002fc4 <HAL_IncTick+0x20>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	4a03      	ldr	r2, [pc, #12]	; (8002fc0 <HAL_IncTick+0x1c>)
 8002fb4:	6013      	str	r3, [r2, #0]
}
 8002fb6:	bf00      	nop
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr
 8002fc0:	200008a8 	.word	0x200008a8
 8002fc4:	200000cc 	.word	0x200000cc

08002fc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  return uwTick;
 8002fcc:	4b03      	ldr	r3, [pc, #12]	; (8002fdc <HAL_GetTick+0x14>)
 8002fce:	681b      	ldr	r3, [r3, #0]
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	200008a8 	.word	0x200008a8

08002fe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fe8:	f7ff ffee 	bl	8002fc8 <HAL_GetTick>
 8002fec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff8:	d004      	beq.n	8003004 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ffa:	4b09      	ldr	r3, [pc, #36]	; (8003020 <HAL_Delay+0x40>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	4413      	add	r3, r2
 8003002:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003004:	bf00      	nop
 8003006:	f7ff ffdf 	bl	8002fc8 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	429a      	cmp	r2, r3
 8003014:	d8f7      	bhi.n	8003006 <HAL_Delay+0x26>
  {
  }
}
 8003016:	bf00      	nop
 8003018:	bf00      	nop
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	200000cc 	.word	0x200000cc

08003024 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	431a      	orrs	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	609a      	str	r2, [r3, #8]
}
 800303e:	bf00      	nop
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr

0800304a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800304a:	b480      	push	{r7}
 800304c:	b083      	sub	sp, #12
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
 8003052:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	431a      	orrs	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	609a      	str	r2, [r3, #8]
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003080:	4618      	mov	r0, r3
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800308c:	b480      	push	{r7}
 800308e:	b087      	sub	sp, #28
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
 8003098:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	3360      	adds	r3, #96	; 0x60
 800309e:	461a      	mov	r2, r3
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4413      	add	r3, r2
 80030a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	4b08      	ldr	r3, [pc, #32]	; (80030d0 <LL_ADC_SetOffset+0x44>)
 80030ae:	4013      	ands	r3, r2
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	4313      	orrs	r3, r2
 80030bc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80030c4:	bf00      	nop
 80030c6:	371c      	adds	r7, #28
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	03fff000 	.word	0x03fff000

080030d4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	3360      	adds	r3, #96	; 0x60
 80030e2:	461a      	mov	r2, r3
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	4413      	add	r3, r2
 80030ea:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003100:	b480      	push	{r7}
 8003102:	b087      	sub	sp, #28
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	3360      	adds	r3, #96	; 0x60
 8003110:	461a      	mov	r2, r3
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	431a      	orrs	r2, r3
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800312a:	bf00      	nop
 800312c:	371c      	adds	r7, #28
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr

08003136 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003136:	b480      	push	{r7}
 8003138:	b087      	sub	sp, #28
 800313a:	af00      	add	r7, sp, #0
 800313c:	60f8      	str	r0, [r7, #12]
 800313e:	60b9      	str	r1, [r7, #8]
 8003140:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	3360      	adds	r3, #96	; 0x60
 8003146:	461a      	mov	r2, r3
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	431a      	orrs	r2, r3
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003160:	bf00      	nop
 8003162:	371c      	adds	r7, #28
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800316c:	b480      	push	{r7}
 800316e:	b087      	sub	sp, #28
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	3360      	adds	r3, #96	; 0x60
 800317c:	461a      	mov	r2, r3
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4413      	add	r3, r2
 8003184:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	431a      	orrs	r2, r3
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003196:	bf00      	nop
 8003198:	371c      	adds	r7, #28
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr

080031a2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b083      	sub	sp, #12
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
 80031aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	695b      	ldr	r3, [r3, #20]
 80031b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	431a      	orrs	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	615a      	str	r2, [r3, #20]
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d101      	bne.n	80031e0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80031dc:	2301      	movs	r3, #1
 80031de:	e000      	b.n	80031e2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr

080031ee <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80031ee:	b480      	push	{r7}
 80031f0:	b087      	sub	sp, #28
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	60f8      	str	r0, [r7, #12]
 80031f6:	60b9      	str	r1, [r7, #8]
 80031f8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	3330      	adds	r3, #48	; 0x30
 80031fe:	461a      	mov	r2, r3
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	0a1b      	lsrs	r3, r3, #8
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	f003 030c 	and.w	r3, r3, #12
 800320a:	4413      	add	r3, r2
 800320c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	f003 031f 	and.w	r3, r3, #31
 8003218:	211f      	movs	r1, #31
 800321a:	fa01 f303 	lsl.w	r3, r1, r3
 800321e:	43db      	mvns	r3, r3
 8003220:	401a      	ands	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	0e9b      	lsrs	r3, r3, #26
 8003226:	f003 011f 	and.w	r1, r3, #31
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	f003 031f 	and.w	r3, r3, #31
 8003230:	fa01 f303 	lsl.w	r3, r1, r3
 8003234:	431a      	orrs	r2, r3
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800323a:	bf00      	nop
 800323c:	371c      	adds	r7, #28
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003246:	b480      	push	{r7}
 8003248:	b083      	sub	sp, #12
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003252:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800325a:	2301      	movs	r3, #1
 800325c:	e000      	b.n	8003260 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800326c:	b480      	push	{r7}
 800326e:	b087      	sub	sp, #28
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	3314      	adds	r3, #20
 800327c:	461a      	mov	r2, r3
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	0e5b      	lsrs	r3, r3, #25
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	f003 0304 	and.w	r3, r3, #4
 8003288:	4413      	add	r3, r2
 800328a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	0d1b      	lsrs	r3, r3, #20
 8003294:	f003 031f 	and.w	r3, r3, #31
 8003298:	2107      	movs	r1, #7
 800329a:	fa01 f303 	lsl.w	r3, r1, r3
 800329e:	43db      	mvns	r3, r3
 80032a0:	401a      	ands	r2, r3
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	0d1b      	lsrs	r3, r3, #20
 80032a6:	f003 031f 	and.w	r3, r3, #31
 80032aa:	6879      	ldr	r1, [r7, #4]
 80032ac:	fa01 f303 	lsl.w	r3, r1, r3
 80032b0:	431a      	orrs	r2, r3
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80032b6:	bf00      	nop
 80032b8:	371c      	adds	r7, #28
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
	...

080032c4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a0f      	ldr	r2, [pc, #60]	; (8003310 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d10a      	bne.n	80032ee <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032e4:	431a      	orrs	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80032ec:	e00a      	b.n	8003304 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032fa:	43db      	mvns	r3, r3
 80032fc:	401a      	ands	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003304:	bf00      	nop
 8003306:	3714      	adds	r7, #20
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr
 8003310:	407f0000 	.word	0x407f0000

08003314 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f003 031f 	and.w	r3, r3, #31
}
 8003324:	4618      	mov	r0, r3
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003340:	4618      	mov	r0, r3
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800335c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	6093      	str	r3, [r2, #8]
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003380:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003384:	d101      	bne.n	800338a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003386:	2301      	movs	r3, #1
 8003388:	e000      	b.n	800338c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80033a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80033ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033d4:	d101      	bne.n	80033da <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80033d6:	2301      	movs	r3, #1
 80033d8:	e000      	b.n	80033dc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80033f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80033fc:	f043 0201 	orr.w	r2, r3, #1
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003420:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003424:	f043 0202 	orr.w	r2, r3, #2
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f003 0301 	and.w	r3, r3, #1
 8003448:	2b01      	cmp	r3, #1
 800344a:	d101      	bne.n	8003450 <LL_ADC_IsEnabled+0x18>
 800344c:	2301      	movs	r3, #1
 800344e:	e000      	b.n	8003452 <LL_ADC_IsEnabled+0x1a>
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800345e:	b480      	push	{r7}
 8003460:	b083      	sub	sp, #12
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b02      	cmp	r3, #2
 8003470:	d101      	bne.n	8003476 <LL_ADC_IsDisableOngoing+0x18>
 8003472:	2301      	movs	r3, #1
 8003474:	e000      	b.n	8003478 <LL_ADC_IsDisableOngoing+0x1a>
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003494:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003498:	f043 0204 	orr.w	r2, r3, #4
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80034bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80034c0:	f043 0210 	orr.w	r2, r3, #16
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f003 0304 	and.w	r3, r3, #4
 80034e4:	2b04      	cmp	r3, #4
 80034e6:	d101      	bne.n	80034ec <LL_ADC_REG_IsConversionOngoing+0x18>
 80034e8:	2301      	movs	r3, #1
 80034ea:	e000      	b.n	80034ee <LL_ADC_REG_IsConversionOngoing+0x1a>
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr

080034fa <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80034fa:	b480      	push	{r7}
 80034fc:	b083      	sub	sp, #12
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800350a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800350e:	f043 0220 	orr.w	r2, r3, #32
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003516:	bf00      	nop
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003522:	b480      	push	{r7}
 8003524:	b083      	sub	sp, #12
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 0308 	and.w	r3, r3, #8
 8003532:	2b08      	cmp	r3, #8
 8003534:	d101      	bne.n	800353a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003536:	2301      	movs	r3, #1
 8003538:	e000      	b.n	800353c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003548:	b590      	push	{r4, r7, lr}
 800354a:	b089      	sub	sp, #36	; 0x24
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003550:	2300      	movs	r3, #0
 8003552:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003554:	2300      	movs	r3, #0
 8003556:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e177      	b.n	8003852 <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800356c:	2b00      	cmp	r3, #0
 800356e:	d109      	bne.n	8003584 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f7fe fb87 	bl	8001c84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4618      	mov	r0, r3
 800358a:	f7ff fef1 	bl	8003370 <LL_ADC_IsDeepPowerDownEnabled>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d004      	beq.n	800359e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4618      	mov	r0, r3
 800359a:	f7ff fed7 	bl	800334c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7ff ff0c 	bl	80033c0 <LL_ADC_IsInternalRegulatorEnabled>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d115      	bne.n	80035da <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7ff fef0 	bl	8003398 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035b8:	4b9c      	ldr	r3, [pc, #624]	; (800382c <HAL_ADC_Init+0x2e4>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	099b      	lsrs	r3, r3, #6
 80035be:	4a9c      	ldr	r2, [pc, #624]	; (8003830 <HAL_ADC_Init+0x2e8>)
 80035c0:	fba2 2303 	umull	r2, r3, r2, r3
 80035c4:	099b      	lsrs	r3, r3, #6
 80035c6:	3301      	adds	r3, #1
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80035cc:	e002      	b.n	80035d4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	3b01      	subs	r3, #1
 80035d2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1f9      	bne.n	80035ce <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4618      	mov	r0, r3
 80035e0:	f7ff feee 	bl	80033c0 <LL_ADC_IsInternalRegulatorEnabled>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10d      	bne.n	8003606 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ee:	f043 0210 	orr.w	r2, r3, #16
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035fa:	f043 0201 	orr.w	r2, r3, #1
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4618      	mov	r0, r3
 800360c:	f7ff ff62 	bl	80034d4 <LL_ADC_REG_IsConversionOngoing>
 8003610:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003616:	f003 0310 	and.w	r3, r3, #16
 800361a:	2b00      	cmp	r3, #0
 800361c:	f040 8110 	bne.w	8003840 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	2b00      	cmp	r3, #0
 8003624:	f040 810c 	bne.w	8003840 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800362c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003630:	f043 0202 	orr.w	r2, r3, #2
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4618      	mov	r0, r3
 800363e:	f7ff fefb 	bl	8003438 <LL_ADC_IsEnabled>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d111      	bne.n	800366c <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003648:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800364c:	f7ff fef4 	bl	8003438 <LL_ADC_IsEnabled>
 8003650:	4604      	mov	r4, r0
 8003652:	4878      	ldr	r0, [pc, #480]	; (8003834 <HAL_ADC_Init+0x2ec>)
 8003654:	f7ff fef0 	bl	8003438 <LL_ADC_IsEnabled>
 8003658:	4603      	mov	r3, r0
 800365a:	4323      	orrs	r3, r4
 800365c:	2b00      	cmp	r3, #0
 800365e:	d105      	bne.n	800366c <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	4619      	mov	r1, r3
 8003666:	4874      	ldr	r0, [pc, #464]	; (8003838 <HAL_ADC_Init+0x2f0>)
 8003668:	f7ff fcdc 	bl	8003024 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	7f5b      	ldrb	r3, [r3, #29]
 8003670:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003676:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800367c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003682:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800368a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800368c:	4313      	orrs	r3, r2
 800368e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003696:	2b01      	cmp	r3, #1
 8003698:	d106      	bne.n	80036a8 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369e:	3b01      	subs	r3, #1
 80036a0:	045b      	lsls	r3, r3, #17
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d009      	beq.n	80036c4 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036bc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68da      	ldr	r2, [r3, #12]
 80036ca:	4b5c      	ldr	r3, [pc, #368]	; (800383c <HAL_ADC_Init+0x2f4>)
 80036cc:	4013      	ands	r3, r2
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	6812      	ldr	r2, [r2, #0]
 80036d2:	69b9      	ldr	r1, [r7, #24]
 80036d4:	430b      	orrs	r3, r1
 80036d6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7ff feee 	bl	80034d4 <LL_ADC_REG_IsConversionOngoing>
 80036f8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4618      	mov	r0, r3
 8003700:	f7ff ff0f 	bl	8003522 <LL_ADC_INJ_IsConversionOngoing>
 8003704:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d16d      	bne.n	80037e8 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d16a      	bne.n	80037e8 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003716:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800371e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003720:	4313      	orrs	r3, r2
 8003722:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800372e:	f023 0302 	bic.w	r3, r3, #2
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	6812      	ldr	r2, [r2, #0]
 8003736:	69b9      	ldr	r1, [r7, #24]
 8003738:	430b      	orrs	r3, r1
 800373a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d017      	beq.n	8003774 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	691a      	ldr	r2, [r3, #16]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003752:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800375c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003760:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	6911      	ldr	r1, [r2, #16]
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	6812      	ldr	r2, [r2, #0]
 800376c:	430b      	orrs	r3, r1
 800376e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003772:	e013      	b.n	800379c <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	691a      	ldr	r2, [r3, #16]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003782:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	6812      	ldr	r2, [r2, #0]
 8003790:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003794:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003798:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d118      	bne.n	80037d8 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80037b0:	f023 0304 	bic.w	r3, r3, #4
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80037bc:	4311      	orrs	r1, r2
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80037c2:	4311      	orrs	r1, r2
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80037c8:	430a      	orrs	r2, r1
 80037ca:	431a      	orrs	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f042 0201 	orr.w	r2, r2, #1
 80037d4:	611a      	str	r2, [r3, #16]
 80037d6:	e007      	b.n	80037e8 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	691a      	ldr	r2, [r3, #16]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 0201 	bic.w	r2, r2, #1
 80037e6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d10c      	bne.n	800380a <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	f023 010f 	bic.w	r1, r3, #15
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	1e5a      	subs	r2, r3, #1
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	430a      	orrs	r2, r1
 8003806:	631a      	str	r2, [r3, #48]	; 0x30
 8003808:	e007      	b.n	800381a <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 020f 	bic.w	r2, r2, #15
 8003818:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800381e:	f023 0303 	bic.w	r3, r3, #3
 8003822:	f043 0201 	orr.w	r2, r3, #1
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	65da      	str	r2, [r3, #92]	; 0x5c
 800382a:	e011      	b.n	8003850 <HAL_ADC_Init+0x308>
 800382c:	200000c4 	.word	0x200000c4
 8003830:	053e2d63 	.word	0x053e2d63
 8003834:	50000100 	.word	0x50000100
 8003838:	50000300 	.word	0x50000300
 800383c:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003844:	f043 0210 	orr.w	r2, r3, #16
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003850:	7ffb      	ldrb	r3, [r7, #31]
}
 8003852:	4618      	mov	r0, r3
 8003854:	3724      	adds	r7, #36	; 0x24
 8003856:	46bd      	mov	sp, r7
 8003858:	bd90      	pop	{r4, r7, pc}
 800385a:	bf00      	nop

0800385c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003864:	4859      	ldr	r0, [pc, #356]	; (80039cc <HAL_ADC_Start+0x170>)
 8003866:	f7ff fd55 	bl	8003314 <LL_ADC_GetMultimode>
 800386a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4618      	mov	r0, r3
 8003872:	f7ff fe2f 	bl	80034d4 <LL_ADC_REG_IsConversionOngoing>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	f040 809f 	bne.w	80039bc <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003884:	2b01      	cmp	r3, #1
 8003886:	d101      	bne.n	800388c <HAL_ADC_Start+0x30>
 8003888:	2302      	movs	r3, #2
 800388a:	e09a      	b.n	80039c2 <HAL_ADC_Start+0x166>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f001 f94f 	bl	8004b38 <ADC_Enable>
 800389a:	4603      	mov	r3, r0
 800389c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800389e:	7dfb      	ldrb	r3, [r7, #23]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f040 8086 	bne.w	80039b2 <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038aa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80038ae:	f023 0301 	bic.w	r3, r3, #1
 80038b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a44      	ldr	r2, [pc, #272]	; (80039d0 <HAL_ADC_Start+0x174>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d002      	beq.n	80038ca <HAL_ADC_Start+0x6e>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	e001      	b.n	80038ce <HAL_ADC_Start+0x72>
 80038ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	6812      	ldr	r2, [r2, #0]
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d002      	beq.n	80038dc <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d105      	bne.n	80038e8 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038e0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038f4:	d106      	bne.n	8003904 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038fa:	f023 0206 	bic.w	r2, r3, #6
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	661a      	str	r2, [r3, #96]	; 0x60
 8003902:	e002      	b.n	800390a <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	221c      	movs	r2, #28
 8003910:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a2c      	ldr	r2, [pc, #176]	; (80039d0 <HAL_ADC_Start+0x174>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d002      	beq.n	800392a <HAL_ADC_Start+0xce>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	e001      	b.n	800392e <HAL_ADC_Start+0xd2>
 800392a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	6812      	ldr	r2, [r2, #0]
 8003932:	4293      	cmp	r3, r2
 8003934:	d008      	beq.n	8003948 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d005      	beq.n	8003948 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	2b05      	cmp	r3, #5
 8003940:	d002      	beq.n	8003948 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	2b09      	cmp	r3, #9
 8003946:	d114      	bne.n	8003972 <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d007      	beq.n	8003966 <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800395a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800395e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4618      	mov	r0, r3
 800396c:	f7ff fd8a 	bl	8003484 <LL_ADC_REG_StartConversion>
 8003970:	e026      	b.n	80039c0 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003976:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a13      	ldr	r2, [pc, #76]	; (80039d0 <HAL_ADC_Start+0x174>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d002      	beq.n	800398e <HAL_ADC_Start+0x132>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	e001      	b.n	8003992 <HAL_ADC_Start+0x136>
 800398e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003992:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00f      	beq.n	80039c0 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80039a8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	65da      	str	r2, [r3, #92]	; 0x5c
 80039b0:	e006      	b.n	80039c0 <HAL_ADC_Start+0x164>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80039ba:	e001      	b.n	80039c0 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80039bc:	2302      	movs	r3, #2
 80039be:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80039c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3718      	adds	r7, #24
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	50000300 	.word	0x50000300
 80039d0:	50000100 	.word	0x50000100

080039d4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d101      	bne.n	80039ea <HAL_ADC_Stop+0x16>
 80039e6:	2302      	movs	r3, #2
 80039e8:	e023      	b.n	8003a32 <HAL_ADC_Stop+0x5e>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80039f2:	2103      	movs	r1, #3
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 ffe3 	bl	80049c0 <ADC_ConversionStop>
 80039fa:	4603      	mov	r3, r0
 80039fc:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80039fe:	7bfb      	ldrb	r3, [r7, #15]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d111      	bne.n	8003a28 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f001 f8f9 	bl	8004bfc <ADC_Disable>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003a0e:	7bfb      	ldrb	r3, [r7, #15]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d109      	bne.n	8003a28 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a18:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003a1c:	f023 0301 	bic.w	r3, r3, #1
 8003a20:	f043 0201 	orr.w	r2, r3, #1
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
	...

08003a3c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b088      	sub	sp, #32
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a46:	4867      	ldr	r0, [pc, #412]	; (8003be4 <HAL_ADC_PollForConversion+0x1a8>)
 8003a48:	f7ff fc64 	bl	8003314 <LL_ADC_GetMultimode>
 8003a4c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	2b08      	cmp	r3, #8
 8003a54:	d102      	bne.n	8003a5c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003a56:	2308      	movs	r3, #8
 8003a58:	61fb      	str	r3, [r7, #28]
 8003a5a:	e02a      	b.n	8003ab2 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d005      	beq.n	8003a6e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	2b05      	cmp	r3, #5
 8003a66:	d002      	beq.n	8003a6e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	2b09      	cmp	r3, #9
 8003a6c:	d111      	bne.n	8003a92 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	f003 0301 	and.w	r3, r3, #1
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d007      	beq.n	8003a8c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a80:	f043 0220 	orr.w	r2, r3, #32
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e0a6      	b.n	8003bda <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003a8c:	2304      	movs	r3, #4
 8003a8e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003a90:	e00f      	b.n	8003ab2 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003a92:	4854      	ldr	r0, [pc, #336]	; (8003be4 <HAL_ADC_PollForConversion+0x1a8>)
 8003a94:	f7ff fc4c 	bl	8003330 <LL_ADC_GetMultiDMATransfer>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d007      	beq.n	8003aae <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa2:	f043 0220 	orr.w	r2, r3, #32
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e095      	b.n	8003bda <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003aae:	2304      	movs	r3, #4
 8003ab0:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003ab2:	f7ff fa89 	bl	8002fc8 <HAL_GetTick>
 8003ab6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003ab8:	e021      	b.n	8003afe <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac0:	d01d      	beq.n	8003afe <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003ac2:	f7ff fa81 	bl	8002fc8 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	683a      	ldr	r2, [r7, #0]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d302      	bcc.n	8003ad8 <HAL_ADC_PollForConversion+0x9c>
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d112      	bne.n	8003afe <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10b      	bne.n	8003afe <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aea:	f043 0204 	orr.w	r2, r3, #4
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e06d      	b.n	8003bda <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	4013      	ands	r3, r2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d0d6      	beq.n	8003aba <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b10:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7ff fb53 	bl	80031c8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d01c      	beq.n	8003b62 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	7f5b      	ldrb	r3, [r3, #29]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d118      	bne.n	8003b62 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0308 	and.w	r3, r3, #8
 8003b3a:	2b08      	cmp	r3, #8
 8003b3c:	d111      	bne.n	8003b62 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d105      	bne.n	8003b62 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b5a:	f043 0201 	orr.w	r2, r3, #1
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a20      	ldr	r2, [pc, #128]	; (8003be8 <HAL_ADC_PollForConversion+0x1ac>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d002      	beq.n	8003b72 <HAL_ADC_PollForConversion+0x136>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	e001      	b.n	8003b76 <HAL_ADC_PollForConversion+0x13a>
 8003b72:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	6812      	ldr	r2, [r2, #0]
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d008      	beq.n	8003b90 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d005      	beq.n	8003b90 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	2b05      	cmp	r3, #5
 8003b88:	d002      	beq.n	8003b90 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	2b09      	cmp	r3, #9
 8003b8e:	d104      	bne.n	8003b9a <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	61bb      	str	r3, [r7, #24]
 8003b98:	e00d      	b.n	8003bb6 <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a12      	ldr	r2, [pc, #72]	; (8003be8 <HAL_ADC_PollForConversion+0x1ac>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d002      	beq.n	8003baa <HAL_ADC_PollForConversion+0x16e>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	e001      	b.n	8003bae <HAL_ADC_PollForConversion+0x172>
 8003baa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003bae:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	2b08      	cmp	r3, #8
 8003bba:	d104      	bne.n	8003bc6 <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2208      	movs	r2, #8
 8003bc2:	601a      	str	r2, [r3, #0]
 8003bc4:	e008      	b.n	8003bd8 <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d103      	bne.n	8003bd8 <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	220c      	movs	r2, #12
 8003bd6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3720      	adds	r7, #32
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	50000300 	.word	0x50000300
 8003be8:	50000100 	.word	0x50000100

08003bec <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003bf8:	4851      	ldr	r0, [pc, #324]	; (8003d40 <HAL_ADC_Start_DMA+0x154>)
 8003bfa:	f7ff fb8b 	bl	8003314 <LL_ADC_GetMultimode>
 8003bfe:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4618      	mov	r0, r3
 8003c06:	f7ff fc65 	bl	80034d4 <LL_ADC_REG_IsConversionOngoing>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f040 808f 	bne.w	8003d30 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d101      	bne.n	8003c20 <HAL_ADC_Start_DMA+0x34>
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	e08a      	b.n	8003d36 <HAL_ADC_Start_DMA+0x14a>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d005      	beq.n	8003c3a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	2b05      	cmp	r3, #5
 8003c32:	d002      	beq.n	8003c3a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	2b09      	cmp	r3, #9
 8003c38:	d173      	bne.n	8003d22 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f000 ff7c 	bl	8004b38 <ADC_Enable>
 8003c40:	4603      	mov	r3, r0
 8003c42:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003c44:	7dfb      	ldrb	r3, [r7, #23]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d166      	bne.n	8003d18 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c4e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c52:	f023 0301 	bic.w	r3, r3, #1
 8003c56:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a38      	ldr	r2, [pc, #224]	; (8003d44 <HAL_ADC_Start_DMA+0x158>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d002      	beq.n	8003c6e <HAL_ADC_Start_DMA+0x82>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	e001      	b.n	8003c72 <HAL_ADC_Start_DMA+0x86>
 8003c6e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	6812      	ldr	r2, [r2, #0]
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d002      	beq.n	8003c80 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d105      	bne.n	8003c8c <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c84:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d006      	beq.n	8003ca6 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c9c:	f023 0206 	bic.w	r2, r3, #6
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	661a      	str	r2, [r3, #96]	; 0x60
 8003ca4:	e002      	b.n	8003cac <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb0:	4a25      	ldr	r2, [pc, #148]	; (8003d48 <HAL_ADC_Start_DMA+0x15c>)
 8003cb2:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb8:	4a24      	ldr	r2, [pc, #144]	; (8003d4c <HAL_ADC_Start_DMA+0x160>)
 8003cba:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc0:	4a23      	ldr	r2, [pc, #140]	; (8003d50 <HAL_ADC_Start_DMA+0x164>)
 8003cc2:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	221c      	movs	r2, #28
 8003cca:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685a      	ldr	r2, [r3, #4]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f042 0210 	orr.w	r2, r2, #16
 8003ce2:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68da      	ldr	r2, [r3, #12]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f042 0201 	orr.w	r2, r2, #1
 8003cf2:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	3340      	adds	r3, #64	; 0x40
 8003cfe:	4619      	mov	r1, r3
 8003d00:	68ba      	ldr	r2, [r7, #8]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f001 fd7a 	bl	80057fc <HAL_DMA_Start_IT>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7ff fbb7 	bl	8003484 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003d16:	e00d      	b.n	8003d34 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8003d20:	e008      	b.n	8003d34 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003d2e:	e001      	b.n	8003d34 <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003d30:	2302      	movs	r3, #2
 8003d32:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003d34:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3718      	adds	r7, #24
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	50000300 	.word	0x50000300
 8003d44:	50000100 	.word	0x50000100
 8003d48:	08004cbb 	.word	0x08004cbb
 8003d4c:	08004d93 	.word	0x08004d93
 8003d50:	08004daf 	.word	0x08004daf

08003d54 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
	...

08003d70 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b08a      	sub	sp, #40	; 0x28
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003d78:	2300      	movs	r3, #0
 8003d7a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d8c:	4883      	ldr	r0, [pc, #524]	; (8003f9c <HAL_ADC_IRQHandler+0x22c>)
 8003d8e:	f7ff fac1 	bl	8003314 <LL_ADC_GetMultimode>
 8003d92:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d017      	beq.n	8003dce <HAL_ADC_IRQHandler+0x5e>
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d012      	beq.n	8003dce <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dac:	f003 0310 	and.w	r3, r3, #16
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d105      	bne.n	8003dc0 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db8:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f001 f8eb 	bl	8004f9c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2202      	movs	r2, #2
 8003dcc:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	f003 0304 	and.w	r3, r3, #4
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d004      	beq.n	8003de2 <HAL_ADC_IRQHandler+0x72>
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	f003 0304 	and.w	r3, r3, #4
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10a      	bne.n	8003df8 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 8085 	beq.w	8003ef8 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	f003 0308 	and.w	r3, r3, #8
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d07f      	beq.n	8003ef8 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dfc:	f003 0310 	and.w	r3, r3, #16
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d105      	bne.n	8003e10 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e08:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7ff f9d7 	bl	80031c8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d064      	beq.n	8003eea <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a5e      	ldr	r2, [pc, #376]	; (8003fa0 <HAL_ADC_IRQHandler+0x230>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d002      	beq.n	8003e30 <HAL_ADC_IRQHandler+0xc0>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	e001      	b.n	8003e34 <HAL_ADC_IRQHandler+0xc4>
 8003e30:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	6812      	ldr	r2, [r2, #0]
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d008      	beq.n	8003e4e <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d005      	beq.n	8003e4e <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	2b05      	cmp	r3, #5
 8003e46:	d002      	beq.n	8003e4e <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	2b09      	cmp	r3, #9
 8003e4c:	d104      	bne.n	8003e58 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	623b      	str	r3, [r7, #32]
 8003e56:	e00d      	b.n	8003e74 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a50      	ldr	r2, [pc, #320]	; (8003fa0 <HAL_ADC_IRQHandler+0x230>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d002      	beq.n	8003e68 <HAL_ADC_IRQHandler+0xf8>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	e001      	b.n	8003e6c <HAL_ADC_IRQHandler+0xfc>
 8003e68:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003e6c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003e74:	6a3b      	ldr	r3, [r7, #32]
 8003e76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d135      	bne.n	8003eea <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0308 	and.w	r3, r3, #8
 8003e88:	2b08      	cmp	r3, #8
 8003e8a:	d12e      	bne.n	8003eea <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7ff fb1f 	bl	80034d4 <LL_ADC_REG_IsConversionOngoing>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d11a      	bne.n	8003ed2 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685a      	ldr	r2, [r3, #4]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 020c 	bic.w	r2, r2, #12
 8003eaa:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ebc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d112      	bne.n	8003eea <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec8:	f043 0201 	orr.w	r2, r3, #1
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ed0:	e00b      	b.n	8003eea <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed6:	f043 0210 	orr.w	r2, r3, #16
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ee2:	f043 0201 	orr.w	r2, r3, #1
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 f95a 	bl	80041a4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	220c      	movs	r2, #12
 8003ef6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	f003 0320 	and.w	r3, r3, #32
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d004      	beq.n	8003f0c <HAL_ADC_IRQHandler+0x19c>
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	f003 0320 	and.w	r3, r3, #32
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d10b      	bne.n	8003f24 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f000 809e 	beq.w	8004054 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	f000 8098 	beq.w	8004054 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f28:	f003 0310 	and.w	r3, r3, #16
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d105      	bne.n	8003f3c <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f34:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7ff f980 	bl	8003246 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003f46:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7ff f93b 	bl	80031c8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003f52:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a11      	ldr	r2, [pc, #68]	; (8003fa0 <HAL_ADC_IRQHandler+0x230>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d002      	beq.n	8003f64 <HAL_ADC_IRQHandler+0x1f4>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	e001      	b.n	8003f68 <HAL_ADC_IRQHandler+0x1f8>
 8003f64:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	6812      	ldr	r2, [r2, #0]
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d008      	beq.n	8003f82 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d005      	beq.n	8003f82 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	2b06      	cmp	r3, #6
 8003f7a:	d002      	beq.n	8003f82 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	2b07      	cmp	r3, #7
 8003f80:	d104      	bne.n	8003f8c <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	623b      	str	r3, [r7, #32]
 8003f8a:	e011      	b.n	8003fb0 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a03      	ldr	r2, [pc, #12]	; (8003fa0 <HAL_ADC_IRQHandler+0x230>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d006      	beq.n	8003fa4 <HAL_ADC_IRQHandler+0x234>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	e005      	b.n	8003fa8 <HAL_ADC_IRQHandler+0x238>
 8003f9c:	50000300 	.word	0x50000300
 8003fa0:	50000100 	.word	0x50000100
 8003fa4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003fa8:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d047      	beq.n	8004046 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003fb6:	6a3b      	ldr	r3, [r7, #32]
 8003fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d007      	beq.n	8003fd0 <HAL_ADC_IRQHandler+0x260>
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d03f      	beq.n	8004046 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003fc6:	6a3b      	ldr	r3, [r7, #32]
 8003fc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d13a      	bne.n	8004046 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fda:	2b40      	cmp	r3, #64	; 0x40
 8003fdc:	d133      	bne.n	8004046 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003fde:	6a3b      	ldr	r3, [r7, #32]
 8003fe0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d12e      	bne.n	8004046 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7ff fa98 	bl	8003522 <LL_ADC_INJ_IsConversionOngoing>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d11a      	bne.n	800402e <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	685a      	ldr	r2, [r3, #4]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004006:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800400c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800401c:	2b00      	cmp	r3, #0
 800401e:	d112      	bne.n	8004046 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004024:	f043 0201 	orr.w	r2, r3, #1
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	65da      	str	r2, [r3, #92]	; 0x5c
 800402c:	e00b      	b.n	8004046 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004032:	f043 0210 	orr.w	r2, r3, #16
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800403e:	f043 0201 	orr.w	r2, r3, #1
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 ff80 	bl	8004f4c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2260      	movs	r2, #96	; 0x60
 8004052:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800405a:	2b00      	cmp	r3, #0
 800405c:	d011      	beq.n	8004082 <HAL_ADC_IRQHandler+0x312>
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00c      	beq.n	8004082 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800406c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 f89f 	bl	80041b8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2280      	movs	r2, #128	; 0x80
 8004080:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004088:	2b00      	cmp	r3, #0
 800408a:	d012      	beq.n	80040b2 <HAL_ADC_IRQHandler+0x342>
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00d      	beq.n	80040b2 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800409a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 ff66 	bl	8004f74 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040b0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d012      	beq.n	80040e2 <HAL_ADC_IRQHandler+0x372>
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00d      	beq.n	80040e2 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 ff58 	bl	8004f88 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040e0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	f003 0310 	and.w	r3, r3, #16
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d036      	beq.n	800415a <HAL_ADC_IRQHandler+0x3ea>
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	f003 0310 	and.w	r3, r3, #16
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d031      	beq.n	800415a <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d102      	bne.n	8004104 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 80040fe:	2301      	movs	r3, #1
 8004100:	627b      	str	r3, [r7, #36]	; 0x24
 8004102:	e014      	b.n	800412e <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d008      	beq.n	800411c <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800410a:	4825      	ldr	r0, [pc, #148]	; (80041a0 <HAL_ADC_IRQHandler+0x430>)
 800410c:	f7ff f910 	bl	8003330 <LL_ADC_GetMultiDMATransfer>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00b      	beq.n	800412e <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8004116:	2301      	movs	r3, #1
 8004118:	627b      	str	r3, [r7, #36]	; 0x24
 800411a:	e008      	b.n	800412e <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800412a:	2301      	movs	r3, #1
 800412c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800412e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004130:	2b01      	cmp	r3, #1
 8004132:	d10e      	bne.n	8004152 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004138:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004144:	f043 0202 	orr.w	r2, r3, #2
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 f83d 	bl	80041cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2210      	movs	r2, #16
 8004158:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004160:	2b00      	cmp	r3, #0
 8004162:	d018      	beq.n	8004196 <HAL_ADC_IRQHandler+0x426>
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800416a:	2b00      	cmp	r3, #0
 800416c:	d013      	beq.n	8004196 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004172:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800417e:	f043 0208 	orr.w	r2, r3, #8
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800418e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f000 fee5 	bl	8004f60 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004196:	bf00      	nop
 8004198:	3728      	adds	r7, #40	; 0x28
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	50000300 	.word	0x50000300

080041a4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b0b6      	sub	sp, #216	; 0xd8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041ea:	2300      	movs	r3, #0
 80041ec:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80041f0:	2300      	movs	r3, #0
 80041f2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d101      	bne.n	8004202 <HAL_ADC_ConfigChannel+0x22>
 80041fe:	2302      	movs	r3, #2
 8004200:	e3c8      	b.n	8004994 <HAL_ADC_ConfigChannel+0x7b4>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2201      	movs	r2, #1
 8004206:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4618      	mov	r0, r3
 8004210:	f7ff f960 	bl	80034d4 <LL_ADC_REG_IsConversionOngoing>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	f040 83ad 	bne.w	8004976 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6818      	ldr	r0, [r3, #0]
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	6859      	ldr	r1, [r3, #4]
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	461a      	mov	r2, r3
 800422a:	f7fe ffe0 	bl	80031ee <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4618      	mov	r0, r3
 8004234:	f7ff f94e 	bl	80034d4 <LL_ADC_REG_IsConversionOngoing>
 8004238:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4618      	mov	r0, r3
 8004242:	f7ff f96e 	bl	8003522 <LL_ADC_INJ_IsConversionOngoing>
 8004246:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800424a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800424e:	2b00      	cmp	r3, #0
 8004250:	f040 81d9 	bne.w	8004606 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004254:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004258:	2b00      	cmp	r3, #0
 800425a:	f040 81d4 	bne.w	8004606 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004266:	d10f      	bne.n	8004288 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6818      	ldr	r0, [r3, #0]
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2200      	movs	r2, #0
 8004272:	4619      	mov	r1, r3
 8004274:	f7fe fffa 	bl	800326c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004280:	4618      	mov	r0, r3
 8004282:	f7fe ff8e 	bl	80031a2 <LL_ADC_SetSamplingTimeCommonConfig>
 8004286:	e00e      	b.n	80042a6 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6818      	ldr	r0, [r3, #0]
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	6819      	ldr	r1, [r3, #0]
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	461a      	mov	r2, r3
 8004296:	f7fe ffe9 	bl	800326c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2100      	movs	r1, #0
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7fe ff7e 	bl	80031a2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	695a      	ldr	r2, [r3, #20]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	08db      	lsrs	r3, r3, #3
 80042b2:	f003 0303 	and.w	r3, r3, #3
 80042b6:	005b      	lsls	r3, r3, #1
 80042b8:	fa02 f303 	lsl.w	r3, r2, r3
 80042bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	2b04      	cmp	r3, #4
 80042c6:	d022      	beq.n	800430e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6818      	ldr	r0, [r3, #0]
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	6919      	ldr	r1, [r3, #16]
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80042d8:	f7fe fed8 	bl	800308c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6818      	ldr	r0, [r3, #0]
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	6919      	ldr	r1, [r3, #16]
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	461a      	mov	r2, r3
 80042ea:	f7fe ff24 	bl	8003136 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6818      	ldr	r0, [r3, #0]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	6919      	ldr	r1, [r3, #16]
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	7f1b      	ldrb	r3, [r3, #28]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d102      	bne.n	8004304 <HAL_ADC_ConfigChannel+0x124>
 80042fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004302:	e000      	b.n	8004306 <HAL_ADC_ConfigChannel+0x126>
 8004304:	2300      	movs	r3, #0
 8004306:	461a      	mov	r2, r3
 8004308:	f7fe ff30 	bl	800316c <LL_ADC_SetOffsetSaturation>
 800430c:	e17b      	b.n	8004606 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2100      	movs	r1, #0
 8004314:	4618      	mov	r0, r3
 8004316:	f7fe fedd 	bl	80030d4 <LL_ADC_GetOffsetChannel>
 800431a:	4603      	mov	r3, r0
 800431c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10a      	bne.n	800433a <HAL_ADC_ConfigChannel+0x15a>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2100      	movs	r1, #0
 800432a:	4618      	mov	r0, r3
 800432c:	f7fe fed2 	bl	80030d4 <LL_ADC_GetOffsetChannel>
 8004330:	4603      	mov	r3, r0
 8004332:	0e9b      	lsrs	r3, r3, #26
 8004334:	f003 021f 	and.w	r2, r3, #31
 8004338:	e01e      	b.n	8004378 <HAL_ADC_ConfigChannel+0x198>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2100      	movs	r1, #0
 8004340:	4618      	mov	r0, r3
 8004342:	f7fe fec7 	bl	80030d4 <LL_ADC_GetOffsetChannel>
 8004346:	4603      	mov	r3, r0
 8004348:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800434c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004350:	fa93 f3a3 	rbit	r3, r3
 8004354:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004358:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800435c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004360:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d101      	bne.n	800436c <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8004368:	2320      	movs	r3, #32
 800436a:	e004      	b.n	8004376 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 800436c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004370:	fab3 f383 	clz	r3, r3
 8004374:	b2db      	uxtb	r3, r3
 8004376:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004380:	2b00      	cmp	r3, #0
 8004382:	d105      	bne.n	8004390 <HAL_ADC_ConfigChannel+0x1b0>
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	0e9b      	lsrs	r3, r3, #26
 800438a:	f003 031f 	and.w	r3, r3, #31
 800438e:	e018      	b.n	80043c2 <HAL_ADC_ConfigChannel+0x1e2>
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004398:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800439c:	fa93 f3a3 	rbit	r3, r3
 80043a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80043a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80043ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d101      	bne.n	80043b8 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80043b4:	2320      	movs	r3, #32
 80043b6:	e004      	b.n	80043c2 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80043b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80043bc:	fab3 f383 	clz	r3, r3
 80043c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d106      	bne.n	80043d4 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2200      	movs	r2, #0
 80043cc:	2100      	movs	r1, #0
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7fe fe96 	bl	8003100 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2101      	movs	r1, #1
 80043da:	4618      	mov	r0, r3
 80043dc:	f7fe fe7a 	bl	80030d4 <LL_ADC_GetOffsetChannel>
 80043e0:	4603      	mov	r3, r0
 80043e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d10a      	bne.n	8004400 <HAL_ADC_ConfigChannel+0x220>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2101      	movs	r1, #1
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7fe fe6f 	bl	80030d4 <LL_ADC_GetOffsetChannel>
 80043f6:	4603      	mov	r3, r0
 80043f8:	0e9b      	lsrs	r3, r3, #26
 80043fa:	f003 021f 	and.w	r2, r3, #31
 80043fe:	e01e      	b.n	800443e <HAL_ADC_ConfigChannel+0x25e>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2101      	movs	r1, #1
 8004406:	4618      	mov	r0, r3
 8004408:	f7fe fe64 	bl	80030d4 <LL_ADC_GetOffsetChannel>
 800440c:	4603      	mov	r3, r0
 800440e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004412:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004416:	fa93 f3a3 	rbit	r3, r3
 800441a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800441e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004422:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004426:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800442a:	2b00      	cmp	r3, #0
 800442c:	d101      	bne.n	8004432 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800442e:	2320      	movs	r3, #32
 8004430:	e004      	b.n	800443c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8004432:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004436:	fab3 f383 	clz	r3, r3
 800443a:	b2db      	uxtb	r3, r3
 800443c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004446:	2b00      	cmp	r3, #0
 8004448:	d105      	bne.n	8004456 <HAL_ADC_ConfigChannel+0x276>
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	0e9b      	lsrs	r3, r3, #26
 8004450:	f003 031f 	and.w	r3, r3, #31
 8004454:	e018      	b.n	8004488 <HAL_ADC_ConfigChannel+0x2a8>
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800445e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004462:	fa93 f3a3 	rbit	r3, r3
 8004466:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800446a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800446e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004472:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800447a:	2320      	movs	r3, #32
 800447c:	e004      	b.n	8004488 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800447e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004482:	fab3 f383 	clz	r3, r3
 8004486:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004488:	429a      	cmp	r2, r3
 800448a:	d106      	bne.n	800449a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2200      	movs	r2, #0
 8004492:	2101      	movs	r1, #1
 8004494:	4618      	mov	r0, r3
 8004496:	f7fe fe33 	bl	8003100 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2102      	movs	r1, #2
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7fe fe17 	bl	80030d4 <LL_ADC_GetOffsetChannel>
 80044a6:	4603      	mov	r3, r0
 80044a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d10a      	bne.n	80044c6 <HAL_ADC_ConfigChannel+0x2e6>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2102      	movs	r1, #2
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7fe fe0c 	bl	80030d4 <LL_ADC_GetOffsetChannel>
 80044bc:	4603      	mov	r3, r0
 80044be:	0e9b      	lsrs	r3, r3, #26
 80044c0:	f003 021f 	and.w	r2, r3, #31
 80044c4:	e01e      	b.n	8004504 <HAL_ADC_ConfigChannel+0x324>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2102      	movs	r1, #2
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7fe fe01 	bl	80030d4 <LL_ADC_GetOffsetChannel>
 80044d2:	4603      	mov	r3, r0
 80044d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044dc:	fa93 f3a3 	rbit	r3, r3
 80044e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80044e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80044ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d101      	bne.n	80044f8 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80044f4:	2320      	movs	r3, #32
 80044f6:	e004      	b.n	8004502 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80044f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80044fc:	fab3 f383 	clz	r3, r3
 8004500:	b2db      	uxtb	r3, r3
 8004502:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800450c:	2b00      	cmp	r3, #0
 800450e:	d105      	bne.n	800451c <HAL_ADC_ConfigChannel+0x33c>
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	0e9b      	lsrs	r3, r3, #26
 8004516:	f003 031f 	and.w	r3, r3, #31
 800451a:	e016      	b.n	800454a <HAL_ADC_ConfigChannel+0x36a>
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004524:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004528:	fa93 f3a3 	rbit	r3, r3
 800452c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800452e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004530:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004534:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004538:	2b00      	cmp	r3, #0
 800453a:	d101      	bne.n	8004540 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 800453c:	2320      	movs	r3, #32
 800453e:	e004      	b.n	800454a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8004540:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004544:	fab3 f383 	clz	r3, r3
 8004548:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800454a:	429a      	cmp	r2, r3
 800454c:	d106      	bne.n	800455c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2200      	movs	r2, #0
 8004554:	2102      	movs	r1, #2
 8004556:	4618      	mov	r0, r3
 8004558:	f7fe fdd2 	bl	8003100 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2103      	movs	r1, #3
 8004562:	4618      	mov	r0, r3
 8004564:	f7fe fdb6 	bl	80030d4 <LL_ADC_GetOffsetChannel>
 8004568:	4603      	mov	r3, r0
 800456a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800456e:	2b00      	cmp	r3, #0
 8004570:	d10a      	bne.n	8004588 <HAL_ADC_ConfigChannel+0x3a8>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2103      	movs	r1, #3
 8004578:	4618      	mov	r0, r3
 800457a:	f7fe fdab 	bl	80030d4 <LL_ADC_GetOffsetChannel>
 800457e:	4603      	mov	r3, r0
 8004580:	0e9b      	lsrs	r3, r3, #26
 8004582:	f003 021f 	and.w	r2, r3, #31
 8004586:	e017      	b.n	80045b8 <HAL_ADC_ConfigChannel+0x3d8>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2103      	movs	r1, #3
 800458e:	4618      	mov	r0, r3
 8004590:	f7fe fda0 	bl	80030d4 <LL_ADC_GetOffsetChannel>
 8004594:	4603      	mov	r3, r0
 8004596:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004598:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800459a:	fa93 f3a3 	rbit	r3, r3
 800459e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80045a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045a2:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80045a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d101      	bne.n	80045ae <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80045aa:	2320      	movs	r3, #32
 80045ac:	e003      	b.n	80045b6 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80045ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045b0:	fab3 f383 	clz	r3, r3
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d105      	bne.n	80045d0 <HAL_ADC_ConfigChannel+0x3f0>
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	0e9b      	lsrs	r3, r3, #26
 80045ca:	f003 031f 	and.w	r3, r3, #31
 80045ce:	e011      	b.n	80045f4 <HAL_ADC_ConfigChannel+0x414>
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045d8:	fa93 f3a3 	rbit	r3, r3
 80045dc:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80045de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80045e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d101      	bne.n	80045ec <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80045e8:	2320      	movs	r3, #32
 80045ea:	e003      	b.n	80045f4 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80045ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045ee:	fab3 f383 	clz	r3, r3
 80045f2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d106      	bne.n	8004606 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2200      	movs	r2, #0
 80045fe:	2103      	movs	r1, #3
 8004600:	4618      	mov	r0, r3
 8004602:	f7fe fd7d 	bl	8003100 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4618      	mov	r0, r3
 800460c:	f7fe ff14 	bl	8003438 <LL_ADC_IsEnabled>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	f040 8140 	bne.w	8004898 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6818      	ldr	r0, [r3, #0]
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	6819      	ldr	r1, [r3, #0]
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	461a      	mov	r2, r3
 8004626:	f7fe fe4d 	bl	80032c4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	4a8f      	ldr	r2, [pc, #572]	; (800486c <HAL_ADC_ConfigChannel+0x68c>)
 8004630:	4293      	cmp	r3, r2
 8004632:	f040 8131 	bne.w	8004898 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004642:	2b00      	cmp	r3, #0
 8004644:	d10b      	bne.n	800465e <HAL_ADC_ConfigChannel+0x47e>
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	0e9b      	lsrs	r3, r3, #26
 800464c:	3301      	adds	r3, #1
 800464e:	f003 031f 	and.w	r3, r3, #31
 8004652:	2b09      	cmp	r3, #9
 8004654:	bf94      	ite	ls
 8004656:	2301      	movls	r3, #1
 8004658:	2300      	movhi	r3, #0
 800465a:	b2db      	uxtb	r3, r3
 800465c:	e019      	b.n	8004692 <HAL_ADC_ConfigChannel+0x4b2>
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004664:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004666:	fa93 f3a3 	rbit	r3, r3
 800466a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800466c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800466e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004670:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004672:	2b00      	cmp	r3, #0
 8004674:	d101      	bne.n	800467a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8004676:	2320      	movs	r3, #32
 8004678:	e003      	b.n	8004682 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800467a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800467c:	fab3 f383 	clz	r3, r3
 8004680:	b2db      	uxtb	r3, r3
 8004682:	3301      	adds	r3, #1
 8004684:	f003 031f 	and.w	r3, r3, #31
 8004688:	2b09      	cmp	r3, #9
 800468a:	bf94      	ite	ls
 800468c:	2301      	movls	r3, #1
 800468e:	2300      	movhi	r3, #0
 8004690:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004692:	2b00      	cmp	r3, #0
 8004694:	d079      	beq.n	800478a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d107      	bne.n	80046b2 <HAL_ADC_ConfigChannel+0x4d2>
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	0e9b      	lsrs	r3, r3, #26
 80046a8:	3301      	adds	r3, #1
 80046aa:	069b      	lsls	r3, r3, #26
 80046ac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046b0:	e015      	b.n	80046de <HAL_ADC_ConfigChannel+0x4fe>
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046ba:	fa93 f3a3 	rbit	r3, r3
 80046be:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80046c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046c2:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80046c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d101      	bne.n	80046ce <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80046ca:	2320      	movs	r3, #32
 80046cc:	e003      	b.n	80046d6 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80046ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046d0:	fab3 f383 	clz	r3, r3
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	3301      	adds	r3, #1
 80046d8:	069b      	lsls	r3, r3, #26
 80046da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d109      	bne.n	80046fe <HAL_ADC_ConfigChannel+0x51e>
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	0e9b      	lsrs	r3, r3, #26
 80046f0:	3301      	adds	r3, #1
 80046f2:	f003 031f 	and.w	r3, r3, #31
 80046f6:	2101      	movs	r1, #1
 80046f8:	fa01 f303 	lsl.w	r3, r1, r3
 80046fc:	e017      	b.n	800472e <HAL_ADC_ConfigChannel+0x54e>
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004706:	fa93 f3a3 	rbit	r3, r3
 800470a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800470c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800470e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004710:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004712:	2b00      	cmp	r3, #0
 8004714:	d101      	bne.n	800471a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8004716:	2320      	movs	r3, #32
 8004718:	e003      	b.n	8004722 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800471a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800471c:	fab3 f383 	clz	r3, r3
 8004720:	b2db      	uxtb	r3, r3
 8004722:	3301      	adds	r3, #1
 8004724:	f003 031f 	and.w	r3, r3, #31
 8004728:	2101      	movs	r1, #1
 800472a:	fa01 f303 	lsl.w	r3, r1, r3
 800472e:	ea42 0103 	orr.w	r1, r2, r3
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10a      	bne.n	8004754 <HAL_ADC_ConfigChannel+0x574>
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	0e9b      	lsrs	r3, r3, #26
 8004744:	3301      	adds	r3, #1
 8004746:	f003 021f 	and.w	r2, r3, #31
 800474a:	4613      	mov	r3, r2
 800474c:	005b      	lsls	r3, r3, #1
 800474e:	4413      	add	r3, r2
 8004750:	051b      	lsls	r3, r3, #20
 8004752:	e018      	b.n	8004786 <HAL_ADC_ConfigChannel+0x5a6>
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800475a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800475c:	fa93 f3a3 	rbit	r3, r3
 8004760:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004764:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004768:	2b00      	cmp	r3, #0
 800476a:	d101      	bne.n	8004770 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 800476c:	2320      	movs	r3, #32
 800476e:	e003      	b.n	8004778 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8004770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004772:	fab3 f383 	clz	r3, r3
 8004776:	b2db      	uxtb	r3, r3
 8004778:	3301      	adds	r3, #1
 800477a:	f003 021f 	and.w	r2, r3, #31
 800477e:	4613      	mov	r3, r2
 8004780:	005b      	lsls	r3, r3, #1
 8004782:	4413      	add	r3, r2
 8004784:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004786:	430b      	orrs	r3, r1
 8004788:	e081      	b.n	800488e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004792:	2b00      	cmp	r3, #0
 8004794:	d107      	bne.n	80047a6 <HAL_ADC_ConfigChannel+0x5c6>
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	0e9b      	lsrs	r3, r3, #26
 800479c:	3301      	adds	r3, #1
 800479e:	069b      	lsls	r3, r3, #26
 80047a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047a4:	e015      	b.n	80047d2 <HAL_ADC_ConfigChannel+0x5f2>
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ae:	fa93 f3a3 	rbit	r3, r3
 80047b2:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80047b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b6:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80047b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d101      	bne.n	80047c2 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80047be:	2320      	movs	r3, #32
 80047c0:	e003      	b.n	80047ca <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80047c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c4:	fab3 f383 	clz	r3, r3
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	3301      	adds	r3, #1
 80047cc:	069b      	lsls	r3, r3, #26
 80047ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d109      	bne.n	80047f2 <HAL_ADC_ConfigChannel+0x612>
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	0e9b      	lsrs	r3, r3, #26
 80047e4:	3301      	adds	r3, #1
 80047e6:	f003 031f 	and.w	r3, r3, #31
 80047ea:	2101      	movs	r1, #1
 80047ec:	fa01 f303 	lsl.w	r3, r1, r3
 80047f0:	e017      	b.n	8004822 <HAL_ADC_ConfigChannel+0x642>
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f8:	6a3b      	ldr	r3, [r7, #32]
 80047fa:	fa93 f3a3 	rbit	r3, r3
 80047fe:	61fb      	str	r3, [r7, #28]
  return result;
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004806:	2b00      	cmp	r3, #0
 8004808:	d101      	bne.n	800480e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800480a:	2320      	movs	r3, #32
 800480c:	e003      	b.n	8004816 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800480e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004810:	fab3 f383 	clz	r3, r3
 8004814:	b2db      	uxtb	r3, r3
 8004816:	3301      	adds	r3, #1
 8004818:	f003 031f 	and.w	r3, r3, #31
 800481c:	2101      	movs	r1, #1
 800481e:	fa01 f303 	lsl.w	r3, r1, r3
 8004822:	ea42 0103 	orr.w	r1, r2, r3
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10d      	bne.n	800484e <HAL_ADC_ConfigChannel+0x66e>
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	0e9b      	lsrs	r3, r3, #26
 8004838:	3301      	adds	r3, #1
 800483a:	f003 021f 	and.w	r2, r3, #31
 800483e:	4613      	mov	r3, r2
 8004840:	005b      	lsls	r3, r3, #1
 8004842:	4413      	add	r3, r2
 8004844:	3b1e      	subs	r3, #30
 8004846:	051b      	lsls	r3, r3, #20
 8004848:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800484c:	e01e      	b.n	800488c <HAL_ADC_ConfigChannel+0x6ac>
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	fa93 f3a3 	rbit	r3, r3
 800485a:	613b      	str	r3, [r7, #16]
  return result;
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d104      	bne.n	8004870 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8004866:	2320      	movs	r3, #32
 8004868:	e006      	b.n	8004878 <HAL_ADC_ConfigChannel+0x698>
 800486a:	bf00      	nop
 800486c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	fab3 f383 	clz	r3, r3
 8004876:	b2db      	uxtb	r3, r3
 8004878:	3301      	adds	r3, #1
 800487a:	f003 021f 	and.w	r2, r3, #31
 800487e:	4613      	mov	r3, r2
 8004880:	005b      	lsls	r3, r3, #1
 8004882:	4413      	add	r3, r2
 8004884:	3b1e      	subs	r3, #30
 8004886:	051b      	lsls	r3, r3, #20
 8004888:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800488c:	430b      	orrs	r3, r1
 800488e:	683a      	ldr	r2, [r7, #0]
 8004890:	6892      	ldr	r2, [r2, #8]
 8004892:	4619      	mov	r1, r3
 8004894:	f7fe fcea 	bl	800326c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	4b3f      	ldr	r3, [pc, #252]	; (800499c <HAL_ADC_ConfigChannel+0x7bc>)
 800489e:	4013      	ands	r3, r2
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d071      	beq.n	8004988 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80048a4:	483e      	ldr	r0, [pc, #248]	; (80049a0 <HAL_ADC_ConfigChannel+0x7c0>)
 80048a6:	f7fe fbe3 	bl	8003070 <LL_ADC_GetCommonPathInternalCh>
 80048aa:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a3c      	ldr	r2, [pc, #240]	; (80049a4 <HAL_ADC_ConfigChannel+0x7c4>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d004      	beq.n	80048c2 <HAL_ADC_ConfigChannel+0x6e2>
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a3a      	ldr	r2, [pc, #232]	; (80049a8 <HAL_ADC_ConfigChannel+0x7c8>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d127      	bne.n	8004912 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80048c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80048c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d121      	bne.n	8004912 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80048d6:	d157      	bne.n	8004988 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80048d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80048dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80048e0:	4619      	mov	r1, r3
 80048e2:	482f      	ldr	r0, [pc, #188]	; (80049a0 <HAL_ADC_ConfigChannel+0x7c0>)
 80048e4:	f7fe fbb1 	bl	800304a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80048e8:	4b30      	ldr	r3, [pc, #192]	; (80049ac <HAL_ADC_ConfigChannel+0x7cc>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	099b      	lsrs	r3, r3, #6
 80048ee:	4a30      	ldr	r2, [pc, #192]	; (80049b0 <HAL_ADC_ConfigChannel+0x7d0>)
 80048f0:	fba2 2303 	umull	r2, r3, r2, r3
 80048f4:	099b      	lsrs	r3, r3, #6
 80048f6:	1c5a      	adds	r2, r3, #1
 80048f8:	4613      	mov	r3, r2
 80048fa:	005b      	lsls	r3, r3, #1
 80048fc:	4413      	add	r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004902:	e002      	b.n	800490a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	3b01      	subs	r3, #1
 8004908:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1f9      	bne.n	8004904 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004910:	e03a      	b.n	8004988 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a27      	ldr	r2, [pc, #156]	; (80049b4 <HAL_ADC_ConfigChannel+0x7d4>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d113      	bne.n	8004944 <HAL_ADC_ConfigChannel+0x764>
 800491c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004920:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d10d      	bne.n	8004944 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a22      	ldr	r2, [pc, #136]	; (80049b8 <HAL_ADC_ConfigChannel+0x7d8>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d02a      	beq.n	8004988 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004932:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004936:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800493a:	4619      	mov	r1, r3
 800493c:	4818      	ldr	r0, [pc, #96]	; (80049a0 <HAL_ADC_ConfigChannel+0x7c0>)
 800493e:	f7fe fb84 	bl	800304a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004942:	e021      	b.n	8004988 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a1c      	ldr	r2, [pc, #112]	; (80049bc <HAL_ADC_ConfigChannel+0x7dc>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d11c      	bne.n	8004988 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800494e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d116      	bne.n	8004988 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a16      	ldr	r2, [pc, #88]	; (80049b8 <HAL_ADC_ConfigChannel+0x7d8>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d011      	beq.n	8004988 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004964:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004968:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800496c:	4619      	mov	r1, r3
 800496e:	480c      	ldr	r0, [pc, #48]	; (80049a0 <HAL_ADC_ConfigChannel+0x7c0>)
 8004970:	f7fe fb6b 	bl	800304a <LL_ADC_SetCommonPathInternalCh>
 8004974:	e008      	b.n	8004988 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800497a:	f043 0220 	orr.w	r2, r3, #32
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004990:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004994:	4618      	mov	r0, r3
 8004996:	37d8      	adds	r7, #216	; 0xd8
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	80080000 	.word	0x80080000
 80049a0:	50000300 	.word	0x50000300
 80049a4:	c3210000 	.word	0xc3210000
 80049a8:	90c00010 	.word	0x90c00010
 80049ac:	200000c4 	.word	0x200000c4
 80049b0:	053e2d63 	.word	0x053e2d63
 80049b4:	c7520000 	.word	0xc7520000
 80049b8:	50000100 	.word	0x50000100
 80049bc:	cb840000 	.word	0xcb840000

080049c0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b088      	sub	sp, #32
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80049ca:	2300      	movs	r3, #0
 80049cc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7fe fd7c 	bl	80034d4 <LL_ADC_REG_IsConversionOngoing>
 80049dc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7fe fd9d 	bl	8003522 <LL_ADC_INJ_IsConversionOngoing>
 80049e8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d103      	bne.n	80049f8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	f000 8098 	beq.w	8004b28 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d02a      	beq.n	8004a5c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	7f5b      	ldrb	r3, [r3, #29]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d126      	bne.n	8004a5c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	7f1b      	ldrb	r3, [r3, #28]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d122      	bne.n	8004a5c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004a16:	2301      	movs	r3, #1
 8004a18:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004a1a:	e014      	b.n	8004a46 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	4a45      	ldr	r2, [pc, #276]	; (8004b34 <ADC_ConversionStop+0x174>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d90d      	bls.n	8004a40 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a28:	f043 0210 	orr.w	r2, r3, #16
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a34:	f043 0201 	orr.w	r2, r3, #1
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e074      	b.n	8004b2a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	3301      	adds	r3, #1
 8004a44:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a50:	2b40      	cmp	r3, #64	; 0x40
 8004a52:	d1e3      	bne.n	8004a1c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2240      	movs	r2, #64	; 0x40
 8004a5a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d014      	beq.n	8004a8c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7fe fd34 	bl	80034d4 <LL_ADC_REG_IsConversionOngoing>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00c      	beq.n	8004a8c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7fe fcf1 	bl	800345e <LL_ADC_IsDisableOngoing>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d104      	bne.n	8004a8c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f7fe fd10 	bl	80034ac <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d014      	beq.n	8004abc <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7fe fd43 	bl	8003522 <LL_ADC_INJ_IsConversionOngoing>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00c      	beq.n	8004abc <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7fe fcd9 	bl	800345e <LL_ADC_IsDisableOngoing>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d104      	bne.n	8004abc <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7fe fd1f 	bl	80034fa <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d005      	beq.n	8004ace <ADC_ConversionStop+0x10e>
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	2b03      	cmp	r3, #3
 8004ac6:	d105      	bne.n	8004ad4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004ac8:	230c      	movs	r3, #12
 8004aca:	617b      	str	r3, [r7, #20]
        break;
 8004acc:	e005      	b.n	8004ada <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004ace:	2308      	movs	r3, #8
 8004ad0:	617b      	str	r3, [r7, #20]
        break;
 8004ad2:	e002      	b.n	8004ada <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004ad4:	2304      	movs	r3, #4
 8004ad6:	617b      	str	r3, [r7, #20]
        break;
 8004ad8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004ada:	f7fe fa75 	bl	8002fc8 <HAL_GetTick>
 8004ade:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004ae0:	e01b      	b.n	8004b1a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004ae2:	f7fe fa71 	bl	8002fc8 <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	2b05      	cmp	r3, #5
 8004aee:	d914      	bls.n	8004b1a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	689a      	ldr	r2, [r3, #8]
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	4013      	ands	r3, r2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00d      	beq.n	8004b1a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b02:	f043 0210 	orr.w	r2, r3, #16
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b0e:	f043 0201 	orr.w	r2, r3, #1
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e007      	b.n	8004b2a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	689a      	ldr	r2, [r3, #8]
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	4013      	ands	r3, r2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1dc      	bne.n	8004ae2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3720      	adds	r7, #32
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	a33fffff 	.word	0xa33fffff

08004b38 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7fe fc77 	bl	8003438 <LL_ADC_IsEnabled>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d14d      	bne.n	8004bec <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	689a      	ldr	r2, [r3, #8]
 8004b56:	4b28      	ldr	r3, [pc, #160]	; (8004bf8 <ADC_Enable+0xc0>)
 8004b58:	4013      	ands	r3, r2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00d      	beq.n	8004b7a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b62:	f043 0210 	orr.w	r2, r3, #16
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b6e:	f043 0201 	orr.w	r2, r3, #1
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e039      	b.n	8004bee <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7fe fc32 	bl	80033e8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004b84:	f7fe fa20 	bl	8002fc8 <HAL_GetTick>
 8004b88:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b8a:	e028      	b.n	8004bde <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7fe fc51 	bl	8003438 <LL_ADC_IsEnabled>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d104      	bne.n	8004ba6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7fe fc21 	bl	80033e8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004ba6:	f7fe fa0f 	bl	8002fc8 <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d914      	bls.n	8004bde <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d00d      	beq.n	8004bde <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc6:	f043 0210 	orr.w	r2, r3, #16
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bd2:	f043 0201 	orr.w	r2, r3, #1
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e007      	b.n	8004bee <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0301 	and.w	r3, r3, #1
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d1cf      	bne.n	8004b8c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3710      	adds	r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	8000003f 	.word	0x8000003f

08004bfc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7fe fc28 	bl	800345e <LL_ADC_IsDisableOngoing>
 8004c0e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7fe fc0f 	bl	8003438 <LL_ADC_IsEnabled>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d047      	beq.n	8004cb0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d144      	bne.n	8004cb0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f003 030d 	and.w	r3, r3, #13
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d10c      	bne.n	8004c4e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f7fe fbe9 	bl	8003410 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2203      	movs	r2, #3
 8004c44:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004c46:	f7fe f9bf 	bl	8002fc8 <HAL_GetTick>
 8004c4a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004c4c:	e029      	b.n	8004ca2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c52:	f043 0210 	orr.w	r2, r3, #16
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c5e:	f043 0201 	orr.w	r2, r3, #1
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e023      	b.n	8004cb2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004c6a:	f7fe f9ad 	bl	8002fc8 <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d914      	bls.n	8004ca2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00d      	beq.n	8004ca2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c8a:	f043 0210 	orr.w	r2, r3, #16
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c96:	f043 0201 	orr.w	r2, r3, #1
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e007      	b.n	8004cb2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f003 0301 	and.w	r3, r3, #1
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1dc      	bne.n	8004c6a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3710      	adds	r7, #16
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b084      	sub	sp, #16
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ccc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d14b      	bne.n	8004d6c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cd8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0308 	and.w	r3, r3, #8
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d021      	beq.n	8004d32 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f7fe fa68 	bl	80031c8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d032      	beq.n	8004d64 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d12b      	bne.n	8004d64 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d10:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d11f      	bne.n	8004d64 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d28:	f043 0201 	orr.w	r2, r3, #1
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d30:	e018      	b.n	8004d64 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	f003 0302 	and.w	r3, r3, #2
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d111      	bne.n	8004d64 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d105      	bne.n	8004d64 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d5c:	f043 0201 	orr.w	r2, r3, #1
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004d64:	68f8      	ldr	r0, [r7, #12]
 8004d66:	f7ff fa1d 	bl	80041a4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004d6a:	e00e      	b.n	8004d8a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d70:	f003 0310 	and.w	r3, r3, #16
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d003      	beq.n	8004d80 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f7ff fa27 	bl	80041cc <HAL_ADC_ErrorCallback>
}
 8004d7e:	e004      	b.n	8004d8a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	4798      	blx	r3
}
 8004d8a:	bf00      	nop
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b084      	sub	sp, #16
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d9e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004da0:	68f8      	ldr	r0, [r7, #12]
 8004da2:	f7fc fcef 	bl	8001784 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004da6:	bf00      	nop
 8004da8:	3710      	adds	r7, #16
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}

08004dae <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004dae:	b580      	push	{r7, lr}
 8004db0:	b084      	sub	sp, #16
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dba:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dc0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dcc:	f043 0204 	orr.w	r2, r3, #4
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	f7ff f9f9 	bl	80041cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004dda:	bf00      	nop
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <LL_ADC_IsEnabled>:
{
 8004de2:	b480      	push	{r7}
 8004de4:	b083      	sub	sp, #12
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f003 0301 	and.w	r3, r3, #1
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d101      	bne.n	8004dfa <LL_ADC_IsEnabled+0x18>
 8004df6:	2301      	movs	r3, #1
 8004df8:	e000      	b.n	8004dfc <LL_ADC_IsEnabled+0x1a>
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <LL_ADC_StartCalibration>:
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004e1a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004e1e:	683a      	ldr	r2, [r7, #0]
 8004e20:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004e24:	4313      	orrs	r3, r2
 8004e26:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	609a      	str	r2, [r3, #8]
}
 8004e2e:	bf00      	nop
 8004e30:	370c      	adds	r7, #12
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr

08004e3a <LL_ADC_IsCalibrationOnGoing>:
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b083      	sub	sp, #12
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e4e:	d101      	bne.n	8004e54 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004e50:	2301      	movs	r3, #1
 8004e52:	e000      	b.n	8004e56 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	370c      	adds	r7, #12
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr

08004e62 <LL_ADC_REG_IsConversionOngoing>:
{
 8004e62:	b480      	push	{r7}
 8004e64:	b083      	sub	sp, #12
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f003 0304 	and.w	r3, r3, #4
 8004e72:	2b04      	cmp	r3, #4
 8004e74:	d101      	bne.n	8004e7a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004e76:	2301      	movs	r3, #1
 8004e78:	e000      	b.n	8004e7c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004e92:	2300      	movs	r3, #0
 8004e94:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d101      	bne.n	8004ea4 <HAL_ADCEx_Calibration_Start+0x1c>
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	e04d      	b.n	8004f40 <HAL_ADCEx_Calibration_Start+0xb8>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f7ff fea5 	bl	8004bfc <ADC_Disable>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004eb6:	7bfb      	ldrb	r3, [r7, #15]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d136      	bne.n	8004f2a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ec0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004ec4:	f023 0302 	bic.w	r3, r3, #2
 8004ec8:	f043 0202 	orr.w	r2, r3, #2
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6839      	ldr	r1, [r7, #0]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7ff ff96 	bl	8004e08 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004edc:	e014      	b.n	8004f08 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	4a18      	ldr	r2, [pc, #96]	; (8004f48 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d90d      	bls.n	8004f08 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ef0:	f023 0312 	bic.w	r3, r3, #18
 8004ef4:	f043 0210 	orr.w	r2, r3, #16
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e01b      	b.n	8004f40 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f7ff ff94 	bl	8004e3a <LL_ADC_IsCalibrationOnGoing>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d1e2      	bne.n	8004ede <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f1c:	f023 0303 	bic.w	r3, r3, #3
 8004f20:	f043 0201 	orr.w	r2, r3, #1
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	65da      	str	r2, [r3, #92]	; 0x5c
 8004f28:	e005      	b.n	8004f36 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f2e:	f043 0210 	orr.w	r2, r3, #16
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3710      	adds	r7, #16
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	0004de01 	.word	0x0004de01

08004f4c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004f68:	bf00      	nop
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004f7c:	bf00      	nop
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004fb0:	b590      	push	{r4, r7, lr}
 8004fb2:	b0a1      	sub	sp, #132	; 0x84
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d101      	bne.n	8004fce <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004fca:	2302      	movs	r3, #2
 8004fcc:	e08b      	b.n	80050e6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004fda:	2300      	movs	r3, #0
 8004fdc:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004fe6:	d102      	bne.n	8004fee <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004fe8:	4b41      	ldr	r3, [pc, #260]	; (80050f0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004fea:	60bb      	str	r3, [r7, #8]
 8004fec:	e001      	b.n	8004ff2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004fee:	2300      	movs	r3, #0
 8004ff0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d10b      	bne.n	8005010 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ffc:	f043 0220 	orr.w	r2, r3, #32
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e06a      	b.n	80050e6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	4618      	mov	r0, r3
 8005014:	f7ff ff25 	bl	8004e62 <LL_ADC_REG_IsConversionOngoing>
 8005018:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4618      	mov	r0, r3
 8005020:	f7ff ff1f 	bl	8004e62 <LL_ADC_REG_IsConversionOngoing>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d14c      	bne.n	80050c4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800502a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800502c:	2b00      	cmp	r3, #0
 800502e:	d149      	bne.n	80050c4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005030:	4b30      	ldr	r3, [pc, #192]	; (80050f4 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8005032:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d028      	beq.n	800508e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800503c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	6859      	ldr	r1, [r3, #4]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800504e:	035b      	lsls	r3, r3, #13
 8005050:	430b      	orrs	r3, r1
 8005052:	431a      	orrs	r2, r3
 8005054:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005056:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005058:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800505c:	f7ff fec1 	bl	8004de2 <LL_ADC_IsEnabled>
 8005060:	4604      	mov	r4, r0
 8005062:	4823      	ldr	r0, [pc, #140]	; (80050f0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005064:	f7ff febd 	bl	8004de2 <LL_ADC_IsEnabled>
 8005068:	4603      	mov	r3, r0
 800506a:	4323      	orrs	r3, r4
 800506c:	2b00      	cmp	r3, #0
 800506e:	d133      	bne.n	80050d8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005070:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005078:	f023 030f 	bic.w	r3, r3, #15
 800507c:	683a      	ldr	r2, [r7, #0]
 800507e:	6811      	ldr	r1, [r2, #0]
 8005080:	683a      	ldr	r2, [r7, #0]
 8005082:	6892      	ldr	r2, [r2, #8]
 8005084:	430a      	orrs	r2, r1
 8005086:	431a      	orrs	r2, r3
 8005088:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800508a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800508c:	e024      	b.n	80050d8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800508e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005096:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005098:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800509a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800509e:	f7ff fea0 	bl	8004de2 <LL_ADC_IsEnabled>
 80050a2:	4604      	mov	r4, r0
 80050a4:	4812      	ldr	r0, [pc, #72]	; (80050f0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80050a6:	f7ff fe9c 	bl	8004de2 <LL_ADC_IsEnabled>
 80050aa:	4603      	mov	r3, r0
 80050ac:	4323      	orrs	r3, r4
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d112      	bne.n	80050d8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80050b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80050ba:	f023 030f 	bic.w	r3, r3, #15
 80050be:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80050c0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80050c2:	e009      	b.n	80050d8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050c8:	f043 0220 	orr.w	r2, r3, #32
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80050d6:	e000      	b.n	80050da <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80050d8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80050e2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3784      	adds	r7, #132	; 0x84
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd90      	pop	{r4, r7, pc}
 80050ee:	bf00      	nop
 80050f0:	50000100 	.word	0x50000100
 80050f4:	50000300 	.word	0x50000300

080050f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f003 0307 	and.w	r3, r3, #7
 8005106:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005108:	4b0c      	ldr	r3, [pc, #48]	; (800513c <__NVIC_SetPriorityGrouping+0x44>)
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005114:	4013      	ands	r3, r2
 8005116:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005120:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005128:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800512a:	4a04      	ldr	r2, [pc, #16]	; (800513c <__NVIC_SetPriorityGrouping+0x44>)
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	60d3      	str	r3, [r2, #12]
}
 8005130:	bf00      	nop
 8005132:	3714      	adds	r7, #20
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr
 800513c:	e000ed00 	.word	0xe000ed00

08005140 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005140:	b480      	push	{r7}
 8005142:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005144:	4b04      	ldr	r3, [pc, #16]	; (8005158 <__NVIC_GetPriorityGrouping+0x18>)
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	0a1b      	lsrs	r3, r3, #8
 800514a:	f003 0307 	and.w	r3, r3, #7
}
 800514e:	4618      	mov	r0, r3
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr
 8005158:	e000ed00 	.word	0xe000ed00

0800515c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	4603      	mov	r3, r0
 8005164:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800516a:	2b00      	cmp	r3, #0
 800516c:	db0b      	blt.n	8005186 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800516e:	79fb      	ldrb	r3, [r7, #7]
 8005170:	f003 021f 	and.w	r2, r3, #31
 8005174:	4907      	ldr	r1, [pc, #28]	; (8005194 <__NVIC_EnableIRQ+0x38>)
 8005176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800517a:	095b      	lsrs	r3, r3, #5
 800517c:	2001      	movs	r0, #1
 800517e:	fa00 f202 	lsl.w	r2, r0, r2
 8005182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005186:	bf00      	nop
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	e000e100 	.word	0xe000e100

08005198 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	4603      	mov	r3, r0
 80051a0:	6039      	str	r1, [r7, #0]
 80051a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	db0a      	blt.n	80051c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	b2da      	uxtb	r2, r3
 80051b0:	490c      	ldr	r1, [pc, #48]	; (80051e4 <__NVIC_SetPriority+0x4c>)
 80051b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051b6:	0112      	lsls	r2, r2, #4
 80051b8:	b2d2      	uxtb	r2, r2
 80051ba:	440b      	add	r3, r1
 80051bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80051c0:	e00a      	b.n	80051d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	b2da      	uxtb	r2, r3
 80051c6:	4908      	ldr	r1, [pc, #32]	; (80051e8 <__NVIC_SetPriority+0x50>)
 80051c8:	79fb      	ldrb	r3, [r7, #7]
 80051ca:	f003 030f 	and.w	r3, r3, #15
 80051ce:	3b04      	subs	r3, #4
 80051d0:	0112      	lsls	r2, r2, #4
 80051d2:	b2d2      	uxtb	r2, r2
 80051d4:	440b      	add	r3, r1
 80051d6:	761a      	strb	r2, [r3, #24]
}
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr
 80051e4:	e000e100 	.word	0xe000e100
 80051e8:	e000ed00 	.word	0xe000ed00

080051ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b089      	sub	sp, #36	; 0x24
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f003 0307 	and.w	r3, r3, #7
 80051fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	f1c3 0307 	rsb	r3, r3, #7
 8005206:	2b04      	cmp	r3, #4
 8005208:	bf28      	it	cs
 800520a:	2304      	movcs	r3, #4
 800520c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	3304      	adds	r3, #4
 8005212:	2b06      	cmp	r3, #6
 8005214:	d902      	bls.n	800521c <NVIC_EncodePriority+0x30>
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	3b03      	subs	r3, #3
 800521a:	e000      	b.n	800521e <NVIC_EncodePriority+0x32>
 800521c:	2300      	movs	r3, #0
 800521e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005220:	f04f 32ff 	mov.w	r2, #4294967295
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	fa02 f303 	lsl.w	r3, r2, r3
 800522a:	43da      	mvns	r2, r3
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	401a      	ands	r2, r3
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005234:	f04f 31ff 	mov.w	r1, #4294967295
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	fa01 f303 	lsl.w	r3, r1, r3
 800523e:	43d9      	mvns	r1, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005244:	4313      	orrs	r3, r2
         );
}
 8005246:	4618      	mov	r0, r3
 8005248:	3724      	adds	r7, #36	; 0x24
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr
	...

08005254 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	3b01      	subs	r3, #1
 8005260:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005264:	d301      	bcc.n	800526a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005266:	2301      	movs	r3, #1
 8005268:	e00f      	b.n	800528a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800526a:	4a0a      	ldr	r2, [pc, #40]	; (8005294 <SysTick_Config+0x40>)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	3b01      	subs	r3, #1
 8005270:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005272:	210f      	movs	r1, #15
 8005274:	f04f 30ff 	mov.w	r0, #4294967295
 8005278:	f7ff ff8e 	bl	8005198 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800527c:	4b05      	ldr	r3, [pc, #20]	; (8005294 <SysTick_Config+0x40>)
 800527e:	2200      	movs	r2, #0
 8005280:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005282:	4b04      	ldr	r3, [pc, #16]	; (8005294 <SysTick_Config+0x40>)
 8005284:	2207      	movs	r2, #7
 8005286:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3708      	adds	r7, #8
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	e000e010 	.word	0xe000e010

08005298 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f7ff ff29 	bl	80050f8 <__NVIC_SetPriorityGrouping>
}
 80052a6:	bf00      	nop
 80052a8:	3708      	adds	r7, #8
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b086      	sub	sp, #24
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	4603      	mov	r3, r0
 80052b6:	60b9      	str	r1, [r7, #8]
 80052b8:	607a      	str	r2, [r7, #4]
 80052ba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80052bc:	f7ff ff40 	bl	8005140 <__NVIC_GetPriorityGrouping>
 80052c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	68b9      	ldr	r1, [r7, #8]
 80052c6:	6978      	ldr	r0, [r7, #20]
 80052c8:	f7ff ff90 	bl	80051ec <NVIC_EncodePriority>
 80052cc:	4602      	mov	r2, r0
 80052ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052d2:	4611      	mov	r1, r2
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7ff ff5f 	bl	8005198 <__NVIC_SetPriority>
}
 80052da:	bf00      	nop
 80052dc:	3718      	adds	r7, #24
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b082      	sub	sp, #8
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	4603      	mov	r3, r0
 80052ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80052ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052f0:	4618      	mov	r0, r3
 80052f2:	f7ff ff33 	bl	800515c <__NVIC_EnableIRQ>
}
 80052f6:	bf00      	nop
 80052f8:	3708      	adds	r7, #8
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}

080052fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80052fe:	b580      	push	{r7, lr}
 8005300:	b082      	sub	sp, #8
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f7ff ffa4 	bl	8005254 <SysTick_Config>
 800530c:	4603      	mov	r3, r0
}
 800530e:	4618      	mov	r0, r3
 8005310:	3708      	adds	r7, #8
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}

08005316 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005316:	b580      	push	{r7, lr}
 8005318:	b082      	sub	sp, #8
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d101      	bne.n	8005328 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e014      	b.n	8005352 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	791b      	ldrb	r3, [r3, #4]
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b00      	cmp	r3, #0
 8005330:	d105      	bne.n	800533e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f7fc fe0b 	bl	8001f54 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2202      	movs	r2, #2
 8005342:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2201      	movs	r2, #1
 800534e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3708      	adds	r7, #8
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
	...

0800535c <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b08a      	sub	sp, #40	; 0x28
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	795b      	ldrb	r3, [r3, #5]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d101      	bne.n	8005374 <HAL_DAC_ConfigChannel+0x18>
 8005370:	2302      	movs	r3, #2
 8005372:	e192      	b.n	800569a <HAL_DAC_ConfigChannel+0x33e>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2201      	movs	r2, #1
 8005378:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2202      	movs	r2, #2
 800537e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	2b04      	cmp	r3, #4
 8005386:	d174      	bne.n	8005472 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005388:	f7fd fe1e 	bl	8002fc8 <HAL_GetTick>
 800538c:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d134      	bne.n	80053fe <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005394:	e011      	b.n	80053ba <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005396:	f7fd fe17 	bl	8002fc8 <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d90a      	bls.n	80053ba <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	f043 0208 	orr.w	r2, r3, #8
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2203      	movs	r2, #3
 80053b4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e16f      	b.n	800569a <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d1e6      	bne.n	8005396 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 80053c8:	2001      	movs	r0, #1
 80053ca:	f7fd fe09 	bl	8002fe0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68ba      	ldr	r2, [r7, #8]
 80053d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80053d6:	641a      	str	r2, [r3, #64]	; 0x40
 80053d8:	e01e      	b.n	8005418 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80053da:	f7fd fdf5 	bl	8002fc8 <HAL_GetTick>
 80053de:	4602      	mov	r2, r0
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d90a      	bls.n	80053fe <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	f043 0208 	orr.w	r2, r3, #8
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2203      	movs	r2, #3
 80053f8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e14d      	b.n	800569a <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005404:	2b00      	cmp	r3, #0
 8005406:	dbe8      	blt.n	80053da <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8005408:	2001      	movs	r0, #1
 800540a:	f7fd fde9 	bl	8002fe0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68ba      	ldr	r2, [r7, #8]
 8005414:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005416:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f003 0310 	and.w	r3, r3, #16
 8005424:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005428:	fa01 f303 	lsl.w	r3, r1, r3
 800542c:	43db      	mvns	r3, r3
 800542e:	ea02 0103 	and.w	r1, r2, r3
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f003 0310 	and.w	r3, r3, #16
 800543c:	409a      	lsls	r2, r3
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	430a      	orrs	r2, r1
 8005444:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f003 0310 	and.w	r3, r3, #16
 8005452:	21ff      	movs	r1, #255	; 0xff
 8005454:	fa01 f303 	lsl.w	r3, r1, r3
 8005458:	43db      	mvns	r3, r3
 800545a:	ea02 0103 	and.w	r1, r2, r3
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f003 0310 	and.w	r3, r3, #16
 8005468:	409a      	lsls	r2, r3
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	430a      	orrs	r2, r1
 8005470:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	69db      	ldr	r3, [r3, #28]
 8005476:	2b01      	cmp	r3, #1
 8005478:	d11d      	bne.n	80054b6 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005480:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f003 0310 	and.w	r3, r3, #16
 8005488:	221f      	movs	r2, #31
 800548a:	fa02 f303 	lsl.w	r3, r2, r3
 800548e:	43db      	mvns	r3, r3
 8005490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005492:	4013      	ands	r3, r2
 8005494:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	6a1b      	ldr	r3, [r3, #32]
 800549a:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f003 0310 	and.w	r3, r3, #16
 80054a2:	69ba      	ldr	r2, [r7, #24]
 80054a4:	fa02 f303 	lsl.w	r3, r2, r3
 80054a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054aa:	4313      	orrs	r3, r2
 80054ac:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054b4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054bc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f003 0310 	and.w	r3, r3, #16
 80054c4:	2207      	movs	r2, #7
 80054c6:	fa02 f303 	lsl.w	r3, r2, r3
 80054ca:	43db      	mvns	r3, r3
 80054cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ce:	4013      	ands	r3, r2
 80054d0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	699b      	ldr	r3, [r3, #24]
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d102      	bne.n	80054e0 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 80054da:	2300      	movs	r3, #0
 80054dc:	623b      	str	r3, [r7, #32]
 80054de:	e00f      	b.n	8005500 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d102      	bne.n	80054ee <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80054e8:	2301      	movs	r3, #1
 80054ea:	623b      	str	r3, [r7, #32]
 80054ec:	e008      	b.n	8005500 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d102      	bne.n	80054fc <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80054f6:	2301      	movs	r3, #1
 80054f8:	623b      	str	r3, [r7, #32]
 80054fa:	e001      	b.n	8005500 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80054fc:	2300      	movs	r3, #0
 80054fe:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	689a      	ldr	r2, [r3, #8]
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	695b      	ldr	r3, [r3, #20]
 8005508:	4313      	orrs	r3, r2
 800550a:	6a3a      	ldr	r2, [r7, #32]
 800550c:	4313      	orrs	r3, r2
 800550e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f003 0310 	and.w	r3, r3, #16
 8005516:	f44f 7280 	mov.w	r2, #256	; 0x100
 800551a:	fa02 f303 	lsl.w	r3, r2, r3
 800551e:	43db      	mvns	r3, r3
 8005520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005522:	4013      	ands	r3, r2
 8005524:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	791b      	ldrb	r3, [r3, #4]
 800552a:	2b01      	cmp	r3, #1
 800552c:	d102      	bne.n	8005534 <HAL_DAC_ConfigChannel+0x1d8>
 800552e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005532:	e000      	b.n	8005536 <HAL_DAC_ConfigChannel+0x1da>
 8005534:	2300      	movs	r3, #0
 8005536:	69ba      	ldr	r2, [r7, #24]
 8005538:	4313      	orrs	r3, r2
 800553a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f003 0310 	and.w	r3, r3, #16
 8005542:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005546:	fa02 f303 	lsl.w	r3, r2, r3
 800554a:	43db      	mvns	r3, r3
 800554c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800554e:	4013      	ands	r3, r2
 8005550:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	795b      	ldrb	r3, [r3, #5]
 8005556:	2b01      	cmp	r3, #1
 8005558:	d102      	bne.n	8005560 <HAL_DAC_ConfigChannel+0x204>
 800555a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800555e:	e000      	b.n	8005562 <HAL_DAC_ConfigChannel+0x206>
 8005560:	2300      	movs	r3, #0
 8005562:	69ba      	ldr	r2, [r7, #24]
 8005564:	4313      	orrs	r3, r2
 8005566:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8005568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800556e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2b02      	cmp	r3, #2
 8005576:	d114      	bne.n	80055a2 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8005578:	f002 f90c 	bl	8007794 <HAL_RCC_GetHCLKFreq>
 800557c:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	4a48      	ldr	r2, [pc, #288]	; (80056a4 <HAL_DAC_ConfigChannel+0x348>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d904      	bls.n	8005590 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8005586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005588:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800558c:	627b      	str	r3, [r7, #36]	; 0x24
 800558e:	e00f      	b.n	80055b0 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	4a45      	ldr	r2, [pc, #276]	; (80056a8 <HAL_DAC_ConfigChannel+0x34c>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d90a      	bls.n	80055ae <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800559e:	627b      	str	r3, [r7, #36]	; 0x24
 80055a0:	e006      	b.n	80055b0 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055a8:	4313      	orrs	r3, r2
 80055aa:	627b      	str	r3, [r7, #36]	; 0x24
 80055ac:	e000      	b.n	80055b0 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80055ae:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f003 0310 	and.w	r3, r3, #16
 80055b6:	69ba      	ldr	r2, [r7, #24]
 80055b8:	fa02 f303 	lsl.w	r3, r2, r3
 80055bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055be:	4313      	orrs	r3, r2
 80055c0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	6819      	ldr	r1, [r3, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f003 0310 	and.w	r3, r3, #16
 80055d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80055da:	fa02 f303 	lsl.w	r3, r2, r3
 80055de:	43da      	mvns	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	400a      	ands	r2, r1
 80055e6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f003 0310 	and.w	r3, r3, #16
 80055f6:	f640 72fe 	movw	r2, #4094	; 0xffe
 80055fa:	fa02 f303 	lsl.w	r3, r2, r3
 80055fe:	43db      	mvns	r3, r3
 8005600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005602:	4013      	ands	r3, r2
 8005604:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f003 0310 	and.w	r3, r3, #16
 8005612:	69ba      	ldr	r2, [r7, #24]
 8005614:	fa02 f303 	lsl.w	r3, r2, r3
 8005618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800561a:	4313      	orrs	r3, r2
 800561c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005624:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	6819      	ldr	r1, [r3, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f003 0310 	and.w	r3, r3, #16
 8005632:	22c0      	movs	r2, #192	; 0xc0
 8005634:	fa02 f303 	lsl.w	r3, r2, r3
 8005638:	43da      	mvns	r2, r3
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	400a      	ands	r2, r1
 8005640:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	089b      	lsrs	r3, r3, #2
 8005648:	f003 030f 	and.w	r3, r3, #15
 800564c:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	089b      	lsrs	r3, r3, #2
 8005654:	021b      	lsls	r3, r3, #8
 8005656:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800565a:	69ba      	ldr	r2, [r7, #24]
 800565c:	4313      	orrs	r3, r2
 800565e:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f003 0310 	and.w	r3, r3, #16
 800566c:	f640 710f 	movw	r1, #3855	; 0xf0f
 8005670:	fa01 f303 	lsl.w	r3, r1, r3
 8005674:	43db      	mvns	r3, r3
 8005676:	ea02 0103 	and.w	r1, r2, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f003 0310 	and.w	r3, r3, #16
 8005680:	69ba      	ldr	r2, [r7, #24]
 8005682:	409a      	lsls	r2, r3
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	430a      	orrs	r2, r1
 800568a:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2201      	movs	r2, #1
 8005690:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3728      	adds	r7, #40	; 0x28
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	09896800 	.word	0x09896800
 80056a8:	04c4b400 	.word	0x04c4b400

080056ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d101      	bne.n	80056be <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e08d      	b.n	80057da <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	461a      	mov	r2, r3
 80056c4:	4b47      	ldr	r3, [pc, #284]	; (80057e4 <HAL_DMA_Init+0x138>)
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d80f      	bhi.n	80056ea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	461a      	mov	r2, r3
 80056d0:	4b45      	ldr	r3, [pc, #276]	; (80057e8 <HAL_DMA_Init+0x13c>)
 80056d2:	4413      	add	r3, r2
 80056d4:	4a45      	ldr	r2, [pc, #276]	; (80057ec <HAL_DMA_Init+0x140>)
 80056d6:	fba2 2303 	umull	r2, r3, r2, r3
 80056da:	091b      	lsrs	r3, r3, #4
 80056dc:	009a      	lsls	r2, r3, #2
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a42      	ldr	r2, [pc, #264]	; (80057f0 <HAL_DMA_Init+0x144>)
 80056e6:	641a      	str	r2, [r3, #64]	; 0x40
 80056e8:	e00e      	b.n	8005708 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	461a      	mov	r2, r3
 80056f0:	4b40      	ldr	r3, [pc, #256]	; (80057f4 <HAL_DMA_Init+0x148>)
 80056f2:	4413      	add	r3, r2
 80056f4:	4a3d      	ldr	r2, [pc, #244]	; (80057ec <HAL_DMA_Init+0x140>)
 80056f6:	fba2 2303 	umull	r2, r3, r2, r3
 80056fa:	091b      	lsrs	r3, r3, #4
 80056fc:	009a      	lsls	r2, r3, #2
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a3c      	ldr	r2, [pc, #240]	; (80057f8 <HAL_DMA_Init+0x14c>)
 8005706:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2202      	movs	r2, #2
 800570c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800571e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005722:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800572c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005738:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005744:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a1b      	ldr	r3, [r3, #32]
 800574a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	4313      	orrs	r3, r2
 8005750:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 fa76 	bl	8005c4c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005768:	d102      	bne.n	8005770 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685a      	ldr	r2, [r3, #4]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005778:	b2d2      	uxtb	r2, r2
 800577a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005784:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d010      	beq.n	80057b0 <HAL_DMA_Init+0x104>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	2b04      	cmp	r3, #4
 8005794:	d80c      	bhi.n	80057b0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 fa96 	bl	8005cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057a0:	2200      	movs	r2, #0
 80057a2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80057ac:	605a      	str	r2, [r3, #4]
 80057ae:	e008      	b.n	80057c2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3710      	adds	r7, #16
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	40020407 	.word	0x40020407
 80057e8:	bffdfff8 	.word	0xbffdfff8
 80057ec:	cccccccd 	.word	0xcccccccd
 80057f0:	40020000 	.word	0x40020000
 80057f4:	bffdfbf8 	.word	0xbffdfbf8
 80057f8:	40020400 	.word	0x40020400

080057fc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b086      	sub	sp, #24
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	607a      	str	r2, [r7, #4]
 8005808:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800580a:	2300      	movs	r3, #0
 800580c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005814:	2b01      	cmp	r3, #1
 8005816:	d101      	bne.n	800581c <HAL_DMA_Start_IT+0x20>
 8005818:	2302      	movs	r3, #2
 800581a:	e066      	b.n	80058ea <HAL_DMA_Start_IT+0xee>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800582a:	b2db      	uxtb	r3, r3
 800582c:	2b01      	cmp	r3, #1
 800582e:	d155      	bne.n	80058dc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2202      	movs	r2, #2
 8005834:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2200      	movs	r2, #0
 800583c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f022 0201 	bic.w	r2, r2, #1
 800584c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	68b9      	ldr	r1, [r7, #8]
 8005854:	68f8      	ldr	r0, [r7, #12]
 8005856:	f000 f9bb 	bl	8005bd0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800585e:	2b00      	cmp	r3, #0
 8005860:	d008      	beq.n	8005874 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f042 020e 	orr.w	r2, r2, #14
 8005870:	601a      	str	r2, [r3, #0]
 8005872:	e00f      	b.n	8005894 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f022 0204 	bic.w	r2, r2, #4
 8005882:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f042 020a 	orr.w	r2, r2, #10
 8005892:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d007      	beq.n	80058b2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058b0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d007      	beq.n	80058ca <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058c8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f042 0201 	orr.w	r2, r2, #1
 80058d8:	601a      	str	r2, [r3, #0]
 80058da:	e005      	b.n	80058e8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80058e4:	2302      	movs	r3, #2
 80058e6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80058e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3718      	adds	r7, #24
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}

080058f2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80058f2:	b480      	push	{r7}
 80058f4:	b085      	sub	sp, #20
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058fa:	2300      	movs	r3, #0
 80058fc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005904:	b2db      	uxtb	r3, r3
 8005906:	2b02      	cmp	r3, #2
 8005908:	d005      	beq.n	8005916 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2204      	movs	r2, #4
 800590e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	73fb      	strb	r3, [r7, #15]
 8005914:	e037      	b.n	8005986 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f022 020e 	bic.w	r2, r2, #14
 8005924:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005930:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005934:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f022 0201 	bic.w	r2, r2, #1
 8005944:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800594a:	f003 021f 	and.w	r2, r3, #31
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005952:	2101      	movs	r1, #1
 8005954:	fa01 f202 	lsl.w	r2, r1, r2
 8005958:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005962:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00c      	beq.n	8005986 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005976:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800597a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005984:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2201      	movs	r2, #1
 800598a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8005996:	7bfb      	ldrb	r3, [r7, #15]
}
 8005998:	4618      	mov	r0, r3
 800599a:	3714      	adds	r7, #20
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059ac:	2300      	movs	r3, #0
 80059ae:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d00d      	beq.n	80059d8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2204      	movs	r2, #4
 80059c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	73fb      	strb	r3, [r7, #15]
 80059d6:	e047      	b.n	8005a68 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f022 020e 	bic.w	r2, r2, #14
 80059e6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f022 0201 	bic.w	r2, r2, #1
 80059f6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a0c:	f003 021f 	and.w	r2, r3, #31
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a14:	2101      	movs	r1, #1
 8005a16:	fa01 f202 	lsl.w	r2, r1, r2
 8005a1a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005a24:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00c      	beq.n	8005a48 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a3c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005a46:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d003      	beq.n	8005a68 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	4798      	blx	r3
    }
  }
  return status;
 8005a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3710      	adds	r7, #16
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}

08005a72 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005a72:	b580      	push	{r7, lr}
 8005a74:	b084      	sub	sp, #16
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a8e:	f003 031f 	and.w	r3, r3, #31
 8005a92:	2204      	movs	r2, #4
 8005a94:	409a      	lsls	r2, r3
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	4013      	ands	r3, r2
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d026      	beq.n	8005aec <HAL_DMA_IRQHandler+0x7a>
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	f003 0304 	and.w	r3, r3, #4
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d021      	beq.n	8005aec <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 0320 	and.w	r3, r3, #32
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d107      	bne.n	8005ac6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f022 0204 	bic.w	r2, r2, #4
 8005ac4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aca:	f003 021f 	and.w	r2, r3, #31
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad2:	2104      	movs	r1, #4
 8005ad4:	fa01 f202 	lsl.w	r2, r1, r2
 8005ad8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d071      	beq.n	8005bc6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005aea:	e06c      	b.n	8005bc6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005af0:	f003 031f 	and.w	r3, r3, #31
 8005af4:	2202      	movs	r2, #2
 8005af6:	409a      	lsls	r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	4013      	ands	r3, r2
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d02e      	beq.n	8005b5e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	f003 0302 	and.w	r3, r3, #2
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d029      	beq.n	8005b5e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 0320 	and.w	r3, r3, #32
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d10b      	bne.n	8005b30 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f022 020a 	bic.w	r2, r2, #10
 8005b26:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b34:	f003 021f 	and.w	r2, r3, #31
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3c:	2102      	movs	r1, #2
 8005b3e:	fa01 f202 	lsl.w	r2, r1, r2
 8005b42:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d038      	beq.n	8005bc6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005b5c:	e033      	b.n	8005bc6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b62:	f003 031f 	and.w	r3, r3, #31
 8005b66:	2208      	movs	r2, #8
 8005b68:	409a      	lsls	r2, r3
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d02a      	beq.n	8005bc8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	f003 0308 	and.w	r3, r3, #8
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d025      	beq.n	8005bc8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f022 020e 	bic.w	r2, r2, #14
 8005b8a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b90:	f003 021f 	and.w	r2, r3, #31
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b98:	2101      	movs	r1, #1
 8005b9a:	fa01 f202 	lsl.w	r2, r1, r2
 8005b9e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d004      	beq.n	8005bc8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005bc6:	bf00      	nop
 8005bc8:	bf00      	nop
}
 8005bca:	3710      	adds	r7, #16
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b085      	sub	sp, #20
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	607a      	str	r2, [r7, #4]
 8005bdc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005be6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d004      	beq.n	8005bfa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005bf8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bfe:	f003 021f 	and.w	r2, r3, #31
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c06:	2101      	movs	r1, #1
 8005c08:	fa01 f202 	lsl.w	r2, r1, r2
 8005c0c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	683a      	ldr	r2, [r7, #0]
 8005c14:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	2b10      	cmp	r3, #16
 8005c1c:	d108      	bne.n	8005c30 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68ba      	ldr	r2, [r7, #8]
 8005c2c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005c2e:	e007      	b.n	8005c40 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68ba      	ldr	r2, [r7, #8]
 8005c36:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	60da      	str	r2, [r3, #12]
}
 8005c40:	bf00      	nop
 8005c42:	3714      	adds	r7, #20
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b087      	sub	sp, #28
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	461a      	mov	r2, r3
 8005c5a:	4b16      	ldr	r3, [pc, #88]	; (8005cb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d802      	bhi.n	8005c66 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005c60:	4b15      	ldr	r3, [pc, #84]	; (8005cb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005c62:	617b      	str	r3, [r7, #20]
 8005c64:	e001      	b.n	8005c6a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8005c66:	4b15      	ldr	r3, [pc, #84]	; (8005cbc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005c68:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	3b08      	subs	r3, #8
 8005c76:	4a12      	ldr	r2, [pc, #72]	; (8005cc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005c78:	fba2 2303 	umull	r2, r3, r2, r3
 8005c7c:	091b      	lsrs	r3, r3, #4
 8005c7e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c84:	089b      	lsrs	r3, r3, #2
 8005c86:	009a      	lsls	r2, r3, #2
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a0b      	ldr	r2, [pc, #44]	; (8005cc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005c96:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f003 031f 	and.w	r3, r3, #31
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	409a      	lsls	r2, r3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005ca6:	bf00      	nop
 8005ca8:	371c      	adds	r7, #28
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	40020407 	.word	0x40020407
 8005cb8:	40020800 	.word	0x40020800
 8005cbc:	40020820 	.word	0x40020820
 8005cc0:	cccccccd 	.word	0xcccccccd
 8005cc4:	40020880 	.word	0x40020880

08005cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b085      	sub	sp, #20
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	4b0b      	ldr	r3, [pc, #44]	; (8005d08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005cdc:	4413      	add	r3, r2
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a08      	ldr	r2, [pc, #32]	; (8005d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005cea:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	f003 031f 	and.w	r3, r3, #31
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	409a      	lsls	r2, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005cfc:	bf00      	nop
 8005cfe:	3714      	adds	r7, #20
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr
 8005d08:	1000823f 	.word	0x1000823f
 8005d0c:	40020940 	.word	0x40020940

08005d10 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d101      	bne.n	8005d22 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e147      	b.n	8005fb2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d106      	bne.n	8005d3c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f7fc f9f8 	bl	800212c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	699a      	ldr	r2, [r3, #24]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f022 0210 	bic.w	r2, r2, #16
 8005d4a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d4c:	f7fd f93c 	bl	8002fc8 <HAL_GetTick>
 8005d50:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005d52:	e012      	b.n	8005d7a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005d54:	f7fd f938 	bl	8002fc8 <HAL_GetTick>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	2b0a      	cmp	r3, #10
 8005d60:	d90b      	bls.n	8005d7a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d66:	f043 0201 	orr.w	r2, r3, #1
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2203      	movs	r2, #3
 8005d72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e11b      	b.n	8005fb2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	699b      	ldr	r3, [r3, #24]
 8005d80:	f003 0308 	and.w	r3, r3, #8
 8005d84:	2b08      	cmp	r3, #8
 8005d86:	d0e5      	beq.n	8005d54 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	699a      	ldr	r2, [r3, #24]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f042 0201 	orr.w	r2, r2, #1
 8005d96:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d98:	f7fd f916 	bl	8002fc8 <HAL_GetTick>
 8005d9c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005d9e:	e012      	b.n	8005dc6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005da0:	f7fd f912 	bl	8002fc8 <HAL_GetTick>
 8005da4:	4602      	mov	r2, r0
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	2b0a      	cmp	r3, #10
 8005dac:	d90b      	bls.n	8005dc6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005db2:	f043 0201 	orr.w	r2, r3, #1
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2203      	movs	r2, #3
 8005dbe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e0f5      	b.n	8005fb2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	699b      	ldr	r3, [r3, #24]
 8005dcc:	f003 0301 	and.w	r3, r3, #1
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d0e5      	beq.n	8005da0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	699a      	ldr	r2, [r3, #24]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f042 0202 	orr.w	r2, r2, #2
 8005de2:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a74      	ldr	r2, [pc, #464]	; (8005fbc <HAL_FDCAN_Init+0x2ac>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d103      	bne.n	8005df6 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8005dee:	4a74      	ldr	r2, [pc, #464]	; (8005fc0 <HAL_FDCAN_Init+0x2b0>)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	7c1b      	ldrb	r3, [r3, #16]
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d108      	bne.n	8005e10 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	699a      	ldr	r2, [r3, #24]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e0c:	619a      	str	r2, [r3, #24]
 8005e0e:	e007      	b.n	8005e20 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	699a      	ldr	r2, [r3, #24]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e1e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	7c5b      	ldrb	r3, [r3, #17]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d108      	bne.n	8005e3a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	699a      	ldr	r2, [r3, #24]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e36:	619a      	str	r2, [r3, #24]
 8005e38:	e007      	b.n	8005e4a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	699a      	ldr	r2, [r3, #24]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005e48:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	7c9b      	ldrb	r3, [r3, #18]
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d108      	bne.n	8005e64 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	699a      	ldr	r2, [r3, #24]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e60:	619a      	str	r2, [r3, #24]
 8005e62:	e007      	b.n	8005e74 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	699a      	ldr	r2, [r3, #24]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005e72:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	699b      	ldr	r3, [r3, #24]
 8005e7a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	689a      	ldr	r2, [r3, #8]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	430a      	orrs	r2, r1
 8005e88:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	699a      	ldr	r2, [r3, #24]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8005e98:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	691a      	ldr	r2, [r3, #16]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f022 0210 	bic.w	r2, r2, #16
 8005ea8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d108      	bne.n	8005ec4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	699a      	ldr	r2, [r3, #24]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f042 0204 	orr.w	r2, r2, #4
 8005ec0:	619a      	str	r2, [r3, #24]
 8005ec2:	e02c      	b.n	8005f1e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d028      	beq.n	8005f1e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d01c      	beq.n	8005f0e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	699a      	ldr	r2, [r3, #24]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005ee2:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	691a      	ldr	r2, [r3, #16]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f042 0210 	orr.w	r2, r2, #16
 8005ef2:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	2b03      	cmp	r3, #3
 8005efa:	d110      	bne.n	8005f1e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	699a      	ldr	r2, [r3, #24]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f042 0220 	orr.w	r2, r2, #32
 8005f0a:	619a      	str	r2, [r3, #24]
 8005f0c:	e007      	b.n	8005f1e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	699a      	ldr	r2, [r3, #24]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f042 0220 	orr.w	r2, r2, #32
 8005f1c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	699b      	ldr	r3, [r3, #24]
 8005f22:	3b01      	subs	r3, #1
 8005f24:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	69db      	ldr	r3, [r3, #28]
 8005f2a:	3b01      	subs	r3, #1
 8005f2c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005f2e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6a1b      	ldr	r3, [r3, #32]
 8005f34:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005f36:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005f46:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005f48:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f52:	d115      	bne.n	8005f80 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f58:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005f62:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f68:	3b01      	subs	r3, #1
 8005f6a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005f6c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f74:	3b01      	subs	r3, #1
 8005f76:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005f7c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005f7e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	430a      	orrs	r2, r1
 8005f92:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 fbe2 	bl	8006760 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3710      	adds	r7, #16
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	40006400 	.word	0x40006400
 8005fc0:	40006500 	.word	0x40006500

08005fc4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d110      	bne.n	8005ffa <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2202      	movs	r2, #2
 8005fdc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	699a      	ldr	r2, [r3, #24]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f022 0201 	bic.w	r2, r2, #1
 8005fee:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	e006      	b.n	8006008 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ffe:	f043 0204 	orr.w	r2, r3, #4
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
  }
}
 8006008:	4618      	mov	r0, r3
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b086      	sub	sp, #24
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006026:	b2db      	uxtb	r3, r3
 8006028:	2b02      	cmp	r3, #2
 800602a:	d12c      	bne.n	8006086 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8006034:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006038:	2b00      	cmp	r3, #0
 800603a:	d007      	beq.n	800604c <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006040:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e023      	b.n	8006094 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8006054:	0c1b      	lsrs	r3, r3, #16
 8006056:	f003 0303 	and.w	r3, r3, #3
 800605a:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	68b9      	ldr	r1, [r7, #8]
 8006062:	68f8      	ldr	r0, [r7, #12]
 8006064:	f000 fbd2 	bl	800680c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2101      	movs	r1, #1
 800606e:	697a      	ldr	r2, [r7, #20]
 8006070:	fa01 f202 	lsl.w	r2, r1, r2
 8006074:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8006078:	2201      	movs	r2, #1
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	409a      	lsls	r2, r3
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8006082:	2300      	movs	r3, #0
 8006084:	e006      	b.n	8006094 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800608a:	f043 0208 	orr.w	r2, r3, #8
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
  }
}
 8006094:	4618      	mov	r0, r3
 8006096:	3718      	adds	r7, #24
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800609c:	b480      	push	{r7}
 800609e:	b08b      	sub	sp, #44	; 0x2c
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	607a      	str	r2, [r7, #4]
 80060a8:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80060b0:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80060b2:	7efb      	ldrb	r3, [r7, #27]
 80060b4:	2b02      	cmp	r3, #2
 80060b6:	f040 80bc 	bne.w	8006232 <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	2b40      	cmp	r3, #64	; 0x40
 80060be:	d121      	bne.n	8006104 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060c8:	f003 030f 	and.w	r3, r3, #15
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d107      	bne.n	80060e0 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	e0af      	b.n	8006240 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060e8:	0a1b      	lsrs	r3, r3, #8
 80060ea:	f003 0303 	and.w	r3, r3, #3
 80060ee:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80060f4:	69fa      	ldr	r2, [r7, #28]
 80060f6:	4613      	mov	r3, r2
 80060f8:	00db      	lsls	r3, r3, #3
 80060fa:	4413      	add	r3, r2
 80060fc:	00db      	lsls	r3, r3, #3
 80060fe:	440b      	add	r3, r1
 8006100:	627b      	str	r3, [r7, #36]	; 0x24
 8006102:	e020      	b.n	8006146 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800610c:	f003 030f 	and.w	r3, r3, #15
 8006110:	2b00      	cmp	r3, #0
 8006112:	d107      	bne.n	8006124 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006118:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e08d      	b.n	8006240 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800612c:	0a1b      	lsrs	r3, r3, #8
 800612e:	f003 0303 	and.w	r3, r3, #3
 8006132:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006138:	69fa      	ldr	r2, [r7, #28]
 800613a:	4613      	mov	r3, r2
 800613c:	00db      	lsls	r3, r3, #3
 800613e:	4413      	add	r3, r2
 8006140:	00db      	lsls	r3, r3, #3
 8006142:	440b      	add	r3, r1
 8006144:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8006146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d107      	bne.n	800616a <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800615a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	0c9b      	lsrs	r3, r3, #18
 8006160:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	601a      	str	r2, [r3, #0]
 8006168:	e005      	b.n	8006176 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800616a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8006176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8006182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800618e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006190:	3304      	adds	r3, #4
 8006192:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8006194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	b29a      	uxth	r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800619e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80061aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80061b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80061c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	0e1b      	lsrs	r3, r3, #24
 80061c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80061d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	0fda      	lsrs	r2, r3, #31
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80061da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061dc:	3304      	adds	r3, #4
 80061de:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80061e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e2:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80061e4:	2300      	movs	r3, #0
 80061e6:	623b      	str	r3, [r7, #32]
 80061e8:	e00a      	b.n	8006200 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80061ea:	697a      	ldr	r2, [r7, #20]
 80061ec:	6a3b      	ldr	r3, [r7, #32]
 80061ee:	441a      	add	r2, r3
 80061f0:	6839      	ldr	r1, [r7, #0]
 80061f2:	6a3b      	ldr	r3, [r7, #32]
 80061f4:	440b      	add	r3, r1
 80061f6:	7812      	ldrb	r2, [r2, #0]
 80061f8:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80061fa:	6a3b      	ldr	r3, [r7, #32]
 80061fc:	3301      	adds	r3, #1
 80061fe:	623b      	str	r3, [r7, #32]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	0c1b      	lsrs	r3, r3, #16
 8006206:	4a11      	ldr	r2, [pc, #68]	; (800624c <HAL_FDCAN_GetRxMessage+0x1b0>)
 8006208:	5cd3      	ldrb	r3, [r2, r3]
 800620a:	461a      	mov	r2, r3
 800620c:	6a3b      	ldr	r3, [r7, #32]
 800620e:	4293      	cmp	r3, r2
 8006210:	d3eb      	bcc.n	80061ea <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	2b40      	cmp	r3, #64	; 0x40
 8006216:	d105      	bne.n	8006224 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	69fa      	ldr	r2, [r7, #28]
 800621e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8006222:	e004      	b.n	800622e <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	69fa      	ldr	r2, [r7, #28]
 800622a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800622e:	2300      	movs	r3, #0
 8006230:	e006      	b.n	8006240 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006236:	f043 0208 	orr.w	r2, r3, #8
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
  }
}
 8006240:	4618      	mov	r0, r3
 8006242:	372c      	adds	r7, #44	; 0x2c
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr
 800624c:	0800af44 	.word	0x0800af44

08006250 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8006250:	b480      	push	{r7}
 8006252:	b087      	sub	sp, #28
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006262:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006264:	7dfb      	ldrb	r3, [r7, #23]
 8006266:	2b01      	cmp	r3, #1
 8006268:	d003      	beq.n	8006272 <HAL_FDCAN_ActivateNotification+0x22>
 800626a:	7dfb      	ldrb	r3, [r7, #23]
 800626c:	2b02      	cmp	r3, #2
 800626e:	f040 80c8 	bne.w	8006402 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006278:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	f003 0307 	and.w	r3, r3, #7
 8006280:	2b00      	cmp	r3, #0
 8006282:	d004      	beq.n	800628e <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	f003 0301 	and.w	r3, r3, #1
 800628a:	2b00      	cmp	r3, #0
 800628c:	d03b      	beq.n	8006306 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8006294:	2b00      	cmp	r3, #0
 8006296:	d004      	beq.n	80062a2 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	f003 0302 	and.w	r3, r3, #2
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d031      	beq.n	8006306 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d004      	beq.n	80062b6 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	f003 0304 	and.w	r3, r3, #4
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d027      	beq.n	8006306 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d004      	beq.n	80062ca <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	f003 0308 	and.w	r3, r3, #8
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d01d      	beq.n	8006306 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d004      	beq.n	80062de <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	f003 0310 	and.w	r3, r3, #16
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d013      	beq.n	8006306 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d004      	beq.n	80062f2 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	f003 0320 	and.w	r3, r3, #32
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d009      	beq.n	8006306 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d00c      	beq.n	8006316 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006302:	2b00      	cmp	r3, #0
 8006304:	d107      	bne.n	8006316 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f042 0201 	orr.w	r2, r2, #1
 8006314:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	f003 0307 	and.w	r3, r3, #7
 800631c:	2b00      	cmp	r3, #0
 800631e:	d004      	beq.n	800632a <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	f003 0301 	and.w	r3, r3, #1
 8006326:	2b00      	cmp	r3, #0
 8006328:	d13b      	bne.n	80063a2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8006330:	2b00      	cmp	r3, #0
 8006332:	d004      	beq.n	800633e <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	f003 0302 	and.w	r3, r3, #2
 800633a:	2b00      	cmp	r3, #0
 800633c:	d131      	bne.n	80063a2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8006344:	2b00      	cmp	r3, #0
 8006346:	d004      	beq.n	8006352 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	f003 0304 	and.w	r3, r3, #4
 800634e:	2b00      	cmp	r3, #0
 8006350:	d127      	bne.n	80063a2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8006358:	2b00      	cmp	r3, #0
 800635a:	d004      	beq.n	8006366 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	f003 0308 	and.w	r3, r3, #8
 8006362:	2b00      	cmp	r3, #0
 8006364:	d11d      	bne.n	80063a2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800636c:	2b00      	cmp	r3, #0
 800636e:	d004      	beq.n	800637a <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	f003 0310 	and.w	r3, r3, #16
 8006376:	2b00      	cmp	r3, #0
 8006378:	d113      	bne.n	80063a2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8006380:	2b00      	cmp	r3, #0
 8006382:	d004      	beq.n	800638e <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	f003 0320 	and.w	r3, r3, #32
 800638a:	2b00      	cmp	r3, #0
 800638c:	d109      	bne.n	80063a2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8006394:	2b00      	cmp	r3, #0
 8006396:	d00c      	beq.n	80063b2 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d007      	beq.n	80063b2 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f042 0202 	orr.w	r2, r2, #2
 80063b0:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d009      	beq.n	80063d0 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	430a      	orrs	r2, r1
 80063cc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d009      	beq.n	80063ee <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	430a      	orrs	r2, r1
 80063ea:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68ba      	ldr	r2, [r7, #8]
 80063fa:	430a      	orrs	r2, r1
 80063fc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 80063fe:	2300      	movs	r3, #0
 8006400:	e006      	b.n	8006410 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006406:	f043 0202 	orr.w	r2, r3, #2
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
  }
}
 8006410:	4618      	mov	r0, r3
 8006412:	371c      	adds	r7, #28
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b08a      	sub	sp, #40	; 0x28
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800642a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800642e:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006438:	4013      	ands	r3, r2
 800643a:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006442:	f003 0307 	and.w	r3, r3, #7
 8006446:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800644e:	6a3a      	ldr	r2, [r7, #32]
 8006450:	4013      	ands	r3, r2
 8006452:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800645a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800645e:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006466:	69fa      	ldr	r2, [r7, #28]
 8006468:	4013      	ands	r3, r2
 800646a:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006472:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8006476:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800647e:	69ba      	ldr	r2, [r7, #24]
 8006480:	4013      	ands	r3, r2
 8006482:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800648a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800648e:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006496:	697a      	ldr	r2, [r7, #20]
 8006498:	4013      	ands	r3, r2
 800649a:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00d      	beq.n	80064c6 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d006      	beq.n	80064c6 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2240      	movs	r2, #64	; 0x40
 80064be:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 f92e 	bl	8006722 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d01b      	beq.n	800650c <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d014      	beq.n	800650c <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80064ea:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064f4:	693a      	ldr	r2, [r7, #16]
 80064f6:	4013      	ands	r3, r2
 80064f8:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006502:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8006504:	6939      	ldr	r1, [r7, #16]
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 f8ec 	bl	80066e4 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800650c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650e:	2b00      	cmp	r3, #0
 8006510:	d007      	beq.n	8006522 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006518:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800651a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 f8b6 	bl	800668e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8006522:	6a3b      	ldr	r3, [r7, #32]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d007      	beq.n	8006538 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	6a3a      	ldr	r2, [r7, #32]
 800652e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8006530:	6a39      	ldr	r1, [r7, #32]
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f7fb fa56 	bl	80019e4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d007      	beq.n	800654e <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	69fa      	ldr	r2, [r7, #28]
 8006544:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8006546:	69f9      	ldr	r1, [r7, #28]
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 f8ab 	bl	80066a4 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006554:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006558:	2b00      	cmp	r3, #0
 800655a:	d00e      	beq.n	800657a <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006562:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006566:	2b00      	cmp	r3, #0
 8006568:	d007      	beq.n	800657a <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006572:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 f8a0 	bl	80066ba <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006584:	2b00      	cmp	r3, #0
 8006586:	d01a      	beq.n	80065be <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800658e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006592:	2b00      	cmp	r3, #0
 8006594:	d013      	beq.n	80065be <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800659e:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	4013      	ands	r3, r2
 80065ac:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	2280      	movs	r2, #128	; 0x80
 80065b4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80065b6:	68f9      	ldr	r1, [r7, #12]
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 f888 	bl	80066ce <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00e      	beq.n	80065ea <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d007      	beq.n	80065ea <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80065e2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 f888 	bl	80066fa <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d00e      	beq.n	8006616 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006602:	2b00      	cmp	r3, #0
 8006604:	d007      	beq.n	8006616 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800660e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 f87c 	bl	800670e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800661c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006620:	2b00      	cmp	r3, #0
 8006622:	d011      	beq.n	8006648 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800662a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800662e:	2b00      	cmp	r3, #0
 8006630:	d00a      	beq.n	8006648 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800663a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006640:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d007      	beq.n	800665e <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	697a      	ldr	r2, [r7, #20]
 8006654:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8006656:	6979      	ldr	r1, [r7, #20]
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 f876 	bl	800674a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d009      	beq.n	8006678 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	69ba      	ldr	r2, [r7, #24]
 800666a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	431a      	orrs	r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800667c:	2b00      	cmp	r3, #0
 800667e:	d002      	beq.n	8006686 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 f858 	bl	8006736 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8006686:	bf00      	nop
 8006688:	3728      	adds	r7, #40	; 0x28
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800668e:	b480      	push	{r7}
 8006690:	b083      	sub	sp, #12
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
 8006696:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8006698:	bf00      	nop
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80066ae:	bf00      	nop
 80066b0:	370c      	adds	r7, #12
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr

080066ba <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80066ba:	b480      	push	{r7}
 80066bc:	b083      	sub	sp, #12
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80066c2:	bf00      	nop
 80066c4:	370c      	adds	r7, #12
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr

080066ce <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80066ce:	b480      	push	{r7}
 80066d0:	b083      	sub	sp, #12
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
 80066d6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80066d8:	bf00      	nop
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b083      	sub	sp, #12
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80066ee:	bf00      	nop
 80066f0:	370c      	adds	r7, #12
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr

080066fa <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80066fa:	b480      	push	{r7}
 80066fc:	b083      	sub	sp, #12
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8006702:	bf00      	nop
 8006704:	370c      	adds	r7, #12
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr

0800670e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800670e:	b480      	push	{r7}
 8006710:	b083      	sub	sp, #12
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8006716:	bf00      	nop
 8006718:	370c      	adds	r7, #12
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr

08006722 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006722:	b480      	push	{r7}
 8006724:	b083      	sub	sp, #12
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800672a:	bf00      	nop
 800672c:	370c      	adds	r7, #12
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr

08006736 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006736:	b480      	push	{r7}
 8006738:	b083      	sub	sp, #12
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800673e:	bf00      	nop
 8006740:	370c      	adds	r7, #12
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr

0800674a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800674a:	b480      	push	{r7}
 800674c:	b083      	sub	sp, #12
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
 8006752:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8006754:	bf00      	nop
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8006768:	4b27      	ldr	r3, [pc, #156]	; (8006808 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 800676a:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	68ba      	ldr	r2, [r7, #8]
 8006770:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800677a:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006782:	041a      	lsls	r2, r3, #16
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	430a      	orrs	r2, r1
 800678a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067a0:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a8:	061a      	lsls	r2, r3, #24
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	430a      	orrs	r2, r1
 80067b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	60fb      	str	r3, [r7, #12]
 80067e0:	e005      	b.n	80067ee <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2200      	movs	r2, #0
 80067e6:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	3304      	adds	r3, #4
 80067ec:	60fb      	str	r3, [r7, #12]
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d3f3      	bcc.n	80067e2 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 80067fa:	bf00      	nop
 80067fc:	bf00      	nop
 80067fe:	3714      	adds	r7, #20
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr
 8006808:	4000a400 	.word	0x4000a400

0800680c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 800680c:	b480      	push	{r7}
 800680e:	b089      	sub	sp, #36	; 0x24
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	607a      	str	r2, [r7, #4]
 8006818:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d10a      	bne.n	8006838 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800682a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006832:	4313      	orrs	r3, r2
 8006834:	61fb      	str	r3, [r7, #28]
 8006836:	e00a      	b.n	800684e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8006840:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8006846:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006848:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800684c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	6a1b      	ldr	r3, [r3, #32]
 8006852:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006858:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800685e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8006864:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800686a:	4313      	orrs	r3, r2
 800686c:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006872:	683a      	ldr	r2, [r7, #0]
 8006874:	4613      	mov	r3, r2
 8006876:	00db      	lsls	r3, r3, #3
 8006878:	4413      	add	r3, r2
 800687a:	00db      	lsls	r3, r3, #3
 800687c:	440b      	add	r3, r1
 800687e:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	69fa      	ldr	r2, [r7, #28]
 8006884:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	3304      	adds	r3, #4
 800688a:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800688c:	69bb      	ldr	r3, [r7, #24]
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	3304      	adds	r3, #4
 8006896:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8006898:	2300      	movs	r3, #0
 800689a:	617b      	str	r3, [r7, #20]
 800689c:	e020      	b.n	80068e0 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	3303      	adds	r3, #3
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	4413      	add	r3, r2
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	3302      	adds	r3, #2
 80068ae:	6879      	ldr	r1, [r7, #4]
 80068b0:	440b      	add	r3, r1
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80068b6:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	3301      	adds	r3, #1
 80068bc:	6879      	ldr	r1, [r7, #4]
 80068be:	440b      	add	r3, r1
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80068c4:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80068c6:	6879      	ldr	r1, [r7, #4]
 80068c8:	697a      	ldr	r2, [r7, #20]
 80068ca:	440a      	add	r2, r1
 80068cc:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80068ce:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	3304      	adds	r3, #4
 80068d8:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	3304      	adds	r3, #4
 80068de:	617b      	str	r3, [r7, #20]
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	0c1b      	lsrs	r3, r3, #16
 80068e6:	4a06      	ldr	r2, [pc, #24]	; (8006900 <FDCAN_CopyMessageToRAM+0xf4>)
 80068e8:	5cd3      	ldrb	r3, [r2, r3]
 80068ea:	461a      	mov	r2, r3
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d3d5      	bcc.n	800689e <FDCAN_CopyMessageToRAM+0x92>
  }
}
 80068f2:	bf00      	nop
 80068f4:	bf00      	nop
 80068f6:	3724      	adds	r7, #36	; 0x24
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr
 8006900:	0800af44 	.word	0x0800af44

08006904 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006904:	b480      	push	{r7}
 8006906:	b087      	sub	sp, #28
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800690e:	2300      	movs	r3, #0
 8006910:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006912:	e15a      	b.n	8006bca <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	2101      	movs	r1, #1
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	fa01 f303 	lsl.w	r3, r1, r3
 8006920:	4013      	ands	r3, r2
 8006922:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2b00      	cmp	r3, #0
 8006928:	f000 814c 	beq.w	8006bc4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	f003 0303 	and.w	r3, r3, #3
 8006934:	2b01      	cmp	r3, #1
 8006936:	d005      	beq.n	8006944 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006940:	2b02      	cmp	r3, #2
 8006942:	d130      	bne.n	80069a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	005b      	lsls	r3, r3, #1
 800694e:	2203      	movs	r2, #3
 8006950:	fa02 f303 	lsl.w	r3, r2, r3
 8006954:	43db      	mvns	r3, r3
 8006956:	693a      	ldr	r2, [r7, #16]
 8006958:	4013      	ands	r3, r2
 800695a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	68da      	ldr	r2, [r3, #12]
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	005b      	lsls	r3, r3, #1
 8006964:	fa02 f303 	lsl.w	r3, r2, r3
 8006968:	693a      	ldr	r2, [r7, #16]
 800696a:	4313      	orrs	r3, r2
 800696c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	693a      	ldr	r2, [r7, #16]
 8006972:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800697a:	2201      	movs	r2, #1
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	fa02 f303 	lsl.w	r3, r2, r3
 8006982:	43db      	mvns	r3, r3
 8006984:	693a      	ldr	r2, [r7, #16]
 8006986:	4013      	ands	r3, r2
 8006988:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	091b      	lsrs	r3, r3, #4
 8006990:	f003 0201 	and.w	r2, r3, #1
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	fa02 f303 	lsl.w	r3, r2, r3
 800699a:	693a      	ldr	r2, [r7, #16]
 800699c:	4313      	orrs	r3, r2
 800699e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	693a      	ldr	r2, [r7, #16]
 80069a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	f003 0303 	and.w	r3, r3, #3
 80069ae:	2b03      	cmp	r3, #3
 80069b0:	d017      	beq.n	80069e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	005b      	lsls	r3, r3, #1
 80069bc:	2203      	movs	r2, #3
 80069be:	fa02 f303 	lsl.w	r3, r2, r3
 80069c2:	43db      	mvns	r3, r3
 80069c4:	693a      	ldr	r2, [r7, #16]
 80069c6:	4013      	ands	r3, r2
 80069c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	689a      	ldr	r2, [r3, #8]
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	005b      	lsls	r3, r3, #1
 80069d2:	fa02 f303 	lsl.w	r3, r2, r3
 80069d6:	693a      	ldr	r2, [r7, #16]
 80069d8:	4313      	orrs	r3, r2
 80069da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	693a      	ldr	r2, [r7, #16]
 80069e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	f003 0303 	and.w	r3, r3, #3
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d123      	bne.n	8006a36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	08da      	lsrs	r2, r3, #3
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	3208      	adds	r2, #8
 80069f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	f003 0307 	and.w	r3, r3, #7
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	220f      	movs	r2, #15
 8006a06:	fa02 f303 	lsl.w	r3, r2, r3
 8006a0a:	43db      	mvns	r3, r3
 8006a0c:	693a      	ldr	r2, [r7, #16]
 8006a0e:	4013      	ands	r3, r2
 8006a10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	691a      	ldr	r2, [r3, #16]
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	f003 0307 	and.w	r3, r3, #7
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a22:	693a      	ldr	r2, [r7, #16]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	08da      	lsrs	r2, r3, #3
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	3208      	adds	r2, #8
 8006a30:	6939      	ldr	r1, [r7, #16]
 8006a32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	005b      	lsls	r3, r3, #1
 8006a40:	2203      	movs	r2, #3
 8006a42:	fa02 f303 	lsl.w	r3, r2, r3
 8006a46:	43db      	mvns	r3, r3
 8006a48:	693a      	ldr	r2, [r7, #16]
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	f003 0203 	and.w	r2, r3, #3
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	005b      	lsls	r3, r3, #1
 8006a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a5e:	693a      	ldr	r2, [r7, #16]
 8006a60:	4313      	orrs	r3, r2
 8006a62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	693a      	ldr	r2, [r7, #16]
 8006a68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	f000 80a6 	beq.w	8006bc4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a78:	4b5b      	ldr	r3, [pc, #364]	; (8006be8 <HAL_GPIO_Init+0x2e4>)
 8006a7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a7c:	4a5a      	ldr	r2, [pc, #360]	; (8006be8 <HAL_GPIO_Init+0x2e4>)
 8006a7e:	f043 0301 	orr.w	r3, r3, #1
 8006a82:	6613      	str	r3, [r2, #96]	; 0x60
 8006a84:	4b58      	ldr	r3, [pc, #352]	; (8006be8 <HAL_GPIO_Init+0x2e4>)
 8006a86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a88:	f003 0301 	and.w	r3, r3, #1
 8006a8c:	60bb      	str	r3, [r7, #8]
 8006a8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006a90:	4a56      	ldr	r2, [pc, #344]	; (8006bec <HAL_GPIO_Init+0x2e8>)
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	089b      	lsrs	r3, r3, #2
 8006a96:	3302      	adds	r3, #2
 8006a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	f003 0303 	and.w	r3, r3, #3
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	220f      	movs	r2, #15
 8006aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8006aac:	43db      	mvns	r3, r3
 8006aae:	693a      	ldr	r2, [r7, #16]
 8006ab0:	4013      	ands	r3, r2
 8006ab2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006aba:	d01f      	beq.n	8006afc <HAL_GPIO_Init+0x1f8>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4a4c      	ldr	r2, [pc, #304]	; (8006bf0 <HAL_GPIO_Init+0x2ec>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d019      	beq.n	8006af8 <HAL_GPIO_Init+0x1f4>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4a4b      	ldr	r2, [pc, #300]	; (8006bf4 <HAL_GPIO_Init+0x2f0>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d013      	beq.n	8006af4 <HAL_GPIO_Init+0x1f0>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a4a      	ldr	r2, [pc, #296]	; (8006bf8 <HAL_GPIO_Init+0x2f4>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d00d      	beq.n	8006af0 <HAL_GPIO_Init+0x1ec>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4a49      	ldr	r2, [pc, #292]	; (8006bfc <HAL_GPIO_Init+0x2f8>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d007      	beq.n	8006aec <HAL_GPIO_Init+0x1e8>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a48      	ldr	r2, [pc, #288]	; (8006c00 <HAL_GPIO_Init+0x2fc>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d101      	bne.n	8006ae8 <HAL_GPIO_Init+0x1e4>
 8006ae4:	2305      	movs	r3, #5
 8006ae6:	e00a      	b.n	8006afe <HAL_GPIO_Init+0x1fa>
 8006ae8:	2306      	movs	r3, #6
 8006aea:	e008      	b.n	8006afe <HAL_GPIO_Init+0x1fa>
 8006aec:	2304      	movs	r3, #4
 8006aee:	e006      	b.n	8006afe <HAL_GPIO_Init+0x1fa>
 8006af0:	2303      	movs	r3, #3
 8006af2:	e004      	b.n	8006afe <HAL_GPIO_Init+0x1fa>
 8006af4:	2302      	movs	r3, #2
 8006af6:	e002      	b.n	8006afe <HAL_GPIO_Init+0x1fa>
 8006af8:	2301      	movs	r3, #1
 8006afa:	e000      	b.n	8006afe <HAL_GPIO_Init+0x1fa>
 8006afc:	2300      	movs	r3, #0
 8006afe:	697a      	ldr	r2, [r7, #20]
 8006b00:	f002 0203 	and.w	r2, r2, #3
 8006b04:	0092      	lsls	r2, r2, #2
 8006b06:	4093      	lsls	r3, r2
 8006b08:	693a      	ldr	r2, [r7, #16]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006b0e:	4937      	ldr	r1, [pc, #220]	; (8006bec <HAL_GPIO_Init+0x2e8>)
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	089b      	lsrs	r3, r3, #2
 8006b14:	3302      	adds	r3, #2
 8006b16:	693a      	ldr	r2, [r7, #16]
 8006b18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006b1c:	4b39      	ldr	r3, [pc, #228]	; (8006c04 <HAL_GPIO_Init+0x300>)
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	43db      	mvns	r3, r3
 8006b26:	693a      	ldr	r2, [r7, #16]
 8006b28:	4013      	ands	r3, r2
 8006b2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d003      	beq.n	8006b40 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006b38:	693a      	ldr	r2, [r7, #16]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006b40:	4a30      	ldr	r2, [pc, #192]	; (8006c04 <HAL_GPIO_Init+0x300>)
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006b46:	4b2f      	ldr	r3, [pc, #188]	; (8006c04 <HAL_GPIO_Init+0x300>)
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	43db      	mvns	r3, r3
 8006b50:	693a      	ldr	r2, [r7, #16]
 8006b52:	4013      	ands	r3, r2
 8006b54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d003      	beq.n	8006b6a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006b62:	693a      	ldr	r2, [r7, #16]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006b6a:	4a26      	ldr	r2, [pc, #152]	; (8006c04 <HAL_GPIO_Init+0x300>)
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006b70:	4b24      	ldr	r3, [pc, #144]	; (8006c04 <HAL_GPIO_Init+0x300>)
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	43db      	mvns	r3, r3
 8006b7a:	693a      	ldr	r2, [r7, #16]
 8006b7c:	4013      	ands	r3, r2
 8006b7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d003      	beq.n	8006b94 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006b8c:	693a      	ldr	r2, [r7, #16]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	4313      	orrs	r3, r2
 8006b92:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006b94:	4a1b      	ldr	r2, [pc, #108]	; (8006c04 <HAL_GPIO_Init+0x300>)
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006b9a:	4b1a      	ldr	r3, [pc, #104]	; (8006c04 <HAL_GPIO_Init+0x300>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	43db      	mvns	r3, r3
 8006ba4:	693a      	ldr	r2, [r7, #16]
 8006ba6:	4013      	ands	r3, r2
 8006ba8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d003      	beq.n	8006bbe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006bb6:	693a      	ldr	r2, [r7, #16]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006bbe:	4a11      	ldr	r2, [pc, #68]	; (8006c04 <HAL_GPIO_Init+0x300>)
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	f47f ae9d 	bne.w	8006914 <HAL_GPIO_Init+0x10>
  }
}
 8006bda:	bf00      	nop
 8006bdc:	bf00      	nop
 8006bde:	371c      	adds	r7, #28
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr
 8006be8:	40021000 	.word	0x40021000
 8006bec:	40010000 	.word	0x40010000
 8006bf0:	48000400 	.word	0x48000400
 8006bf4:	48000800 	.word	0x48000800
 8006bf8:	48000c00 	.word	0x48000c00
 8006bfc:	48001000 	.word	0x48001000
 8006c00:	48001400 	.word	0x48001400
 8006c04:	40010400 	.word	0x40010400

08006c08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	460b      	mov	r3, r1
 8006c12:	807b      	strh	r3, [r7, #2]
 8006c14:	4613      	mov	r3, r2
 8006c16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006c18:	787b      	ldrb	r3, [r7, #1]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d003      	beq.n	8006c26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006c1e:	887a      	ldrh	r2, [r7, #2]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006c24:	e002      	b.n	8006c2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006c26:	887a      	ldrh	r2, [r7, #2]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006c2c:	bf00      	nop
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b085      	sub	sp, #20
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d141      	bne.n	8006cca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006c46:	4b4b      	ldr	r3, [pc, #300]	; (8006d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c52:	d131      	bne.n	8006cb8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006c54:	4b47      	ldr	r3, [pc, #284]	; (8006d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c5a:	4a46      	ldr	r2, [pc, #280]	; (8006d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c60:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006c64:	4b43      	ldr	r3, [pc, #268]	; (8006d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006c6c:	4a41      	ldr	r2, [pc, #260]	; (8006d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c72:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006c74:	4b40      	ldr	r3, [pc, #256]	; (8006d78 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2232      	movs	r2, #50	; 0x32
 8006c7a:	fb02 f303 	mul.w	r3, r2, r3
 8006c7e:	4a3f      	ldr	r2, [pc, #252]	; (8006d7c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006c80:	fba2 2303 	umull	r2, r3, r2, r3
 8006c84:	0c9b      	lsrs	r3, r3, #18
 8006c86:	3301      	adds	r3, #1
 8006c88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006c8a:	e002      	b.n	8006c92 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006c92:	4b38      	ldr	r3, [pc, #224]	; (8006d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c94:	695b      	ldr	r3, [r3, #20]
 8006c96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c9e:	d102      	bne.n	8006ca6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d1f2      	bne.n	8006c8c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006ca6:	4b33      	ldr	r3, [pc, #204]	; (8006d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ca8:	695b      	ldr	r3, [r3, #20]
 8006caa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cb2:	d158      	bne.n	8006d66 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006cb4:	2303      	movs	r3, #3
 8006cb6:	e057      	b.n	8006d68 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006cb8:	4b2e      	ldr	r3, [pc, #184]	; (8006d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cbe:	4a2d      	ldr	r2, [pc, #180]	; (8006d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cc4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006cc8:	e04d      	b.n	8006d66 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cd0:	d141      	bne.n	8006d56 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006cd2:	4b28      	ldr	r3, [pc, #160]	; (8006d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006cda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cde:	d131      	bne.n	8006d44 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006ce0:	4b24      	ldr	r3, [pc, #144]	; (8006d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ce6:	4a23      	ldr	r2, [pc, #140]	; (8006d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ce8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006cf0:	4b20      	ldr	r3, [pc, #128]	; (8006d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006cf8:	4a1e      	ldr	r2, [pc, #120]	; (8006d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006cfe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006d00:	4b1d      	ldr	r3, [pc, #116]	; (8006d78 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	2232      	movs	r2, #50	; 0x32
 8006d06:	fb02 f303 	mul.w	r3, r2, r3
 8006d0a:	4a1c      	ldr	r2, [pc, #112]	; (8006d7c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d10:	0c9b      	lsrs	r3, r3, #18
 8006d12:	3301      	adds	r3, #1
 8006d14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006d16:	e002      	b.n	8006d1e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	3b01      	subs	r3, #1
 8006d1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006d1e:	4b15      	ldr	r3, [pc, #84]	; (8006d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d20:	695b      	ldr	r3, [r3, #20]
 8006d22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d2a:	d102      	bne.n	8006d32 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d1f2      	bne.n	8006d18 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006d32:	4b10      	ldr	r3, [pc, #64]	; (8006d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d34:	695b      	ldr	r3, [r3, #20]
 8006d36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d3e:	d112      	bne.n	8006d66 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006d40:	2303      	movs	r3, #3
 8006d42:	e011      	b.n	8006d68 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006d44:	4b0b      	ldr	r3, [pc, #44]	; (8006d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d4a:	4a0a      	ldr	r2, [pc, #40]	; (8006d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006d54:	e007      	b.n	8006d66 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006d56:	4b07      	ldr	r3, [pc, #28]	; (8006d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006d5e:	4a05      	ldr	r2, [pc, #20]	; (8006d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d60:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006d64:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3714      	adds	r7, #20
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr
 8006d74:	40007000 	.word	0x40007000
 8006d78:	200000c4 	.word	0x200000c4
 8006d7c:	431bde83 	.word	0x431bde83

08006d80 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006d80:	b480      	push	{r7}
 8006d82:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006d84:	4b05      	ldr	r3, [pc, #20]	; (8006d9c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	4a04      	ldr	r2, [pc, #16]	; (8006d9c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006d8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006d8e:	6093      	str	r3, [r2, #8]
}
 8006d90:	bf00      	nop
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	40007000 	.word	0x40007000

08006da0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b088      	sub	sp, #32
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d101      	bne.n	8006db2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	e306      	b.n	80073c0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 0301 	and.w	r3, r3, #1
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d075      	beq.n	8006eaa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006dbe:	4b97      	ldr	r3, [pc, #604]	; (800701c <HAL_RCC_OscConfig+0x27c>)
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	f003 030c 	and.w	r3, r3, #12
 8006dc6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006dc8:	4b94      	ldr	r3, [pc, #592]	; (800701c <HAL_RCC_OscConfig+0x27c>)
 8006dca:	68db      	ldr	r3, [r3, #12]
 8006dcc:	f003 0303 	and.w	r3, r3, #3
 8006dd0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	2b0c      	cmp	r3, #12
 8006dd6:	d102      	bne.n	8006dde <HAL_RCC_OscConfig+0x3e>
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	2b03      	cmp	r3, #3
 8006ddc:	d002      	beq.n	8006de4 <HAL_RCC_OscConfig+0x44>
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	2b08      	cmp	r3, #8
 8006de2:	d10b      	bne.n	8006dfc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006de4:	4b8d      	ldr	r3, [pc, #564]	; (800701c <HAL_RCC_OscConfig+0x27c>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d05b      	beq.n	8006ea8 <HAL_RCC_OscConfig+0x108>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d157      	bne.n	8006ea8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e2e1      	b.n	80073c0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e04:	d106      	bne.n	8006e14 <HAL_RCC_OscConfig+0x74>
 8006e06:	4b85      	ldr	r3, [pc, #532]	; (800701c <HAL_RCC_OscConfig+0x27c>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a84      	ldr	r2, [pc, #528]	; (800701c <HAL_RCC_OscConfig+0x27c>)
 8006e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e10:	6013      	str	r3, [r2, #0]
 8006e12:	e01d      	b.n	8006e50 <HAL_RCC_OscConfig+0xb0>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e1c:	d10c      	bne.n	8006e38 <HAL_RCC_OscConfig+0x98>
 8006e1e:	4b7f      	ldr	r3, [pc, #508]	; (800701c <HAL_RCC_OscConfig+0x27c>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a7e      	ldr	r2, [pc, #504]	; (800701c <HAL_RCC_OscConfig+0x27c>)
 8006e24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e28:	6013      	str	r3, [r2, #0]
 8006e2a:	4b7c      	ldr	r3, [pc, #496]	; (800701c <HAL_RCC_OscConfig+0x27c>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a7b      	ldr	r2, [pc, #492]	; (800701c <HAL_RCC_OscConfig+0x27c>)
 8006e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e34:	6013      	str	r3, [r2, #0]
 8006e36:	e00b      	b.n	8006e50 <HAL_RCC_OscConfig+0xb0>
 8006e38:	4b78      	ldr	r3, [pc, #480]	; (800701c <HAL_RCC_OscConfig+0x27c>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a77      	ldr	r2, [pc, #476]	; (800701c <HAL_RCC_OscConfig+0x27c>)
 8006e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e42:	6013      	str	r3, [r2, #0]
 8006e44:	4b75      	ldr	r3, [pc, #468]	; (800701c <HAL_RCC_OscConfig+0x27c>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a74      	ldr	r2, [pc, #464]	; (800701c <HAL_RCC_OscConfig+0x27c>)
 8006e4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d013      	beq.n	8006e80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e58:	f7fc f8b6 	bl	8002fc8 <HAL_GetTick>
 8006e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006e5e:	e008      	b.n	8006e72 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e60:	f7fc f8b2 	bl	8002fc8 <HAL_GetTick>
 8006e64:	4602      	mov	r2, r0
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	1ad3      	subs	r3, r2, r3
 8006e6a:	2b64      	cmp	r3, #100	; 0x64
 8006e6c:	d901      	bls.n	8006e72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006e6e:	2303      	movs	r3, #3
 8006e70:	e2a6      	b.n	80073c0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006e72:	4b6a      	ldr	r3, [pc, #424]	; (800701c <HAL_RCC_OscConfig+0x27c>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d0f0      	beq.n	8006e60 <HAL_RCC_OscConfig+0xc0>
 8006e7e:	e014      	b.n	8006eaa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e80:	f7fc f8a2 	bl	8002fc8 <HAL_GetTick>
 8006e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006e86:	e008      	b.n	8006e9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e88:	f7fc f89e 	bl	8002fc8 <HAL_GetTick>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	2b64      	cmp	r3, #100	; 0x64
 8006e94:	d901      	bls.n	8006e9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006e96:	2303      	movs	r3, #3
 8006e98:	e292      	b.n	80073c0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006e9a:	4b60      	ldr	r3, [pc, #384]	; (800701c <HAL_RCC_OscConfig+0x27c>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1f0      	bne.n	8006e88 <HAL_RCC_OscConfig+0xe8>
 8006ea6:	e000      	b.n	8006eaa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f003 0302 	and.w	r3, r3, #2
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d075      	beq.n	8006fa2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006eb6:	4b59      	ldr	r3, [pc, #356]	; (800701c <HAL_RCC_OscConfig+0x27c>)
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	f003 030c 	and.w	r3, r3, #12
 8006ebe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006ec0:	4b56      	ldr	r3, [pc, #344]	; (800701c <HAL_RCC_OscConfig+0x27c>)
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	f003 0303 	and.w	r3, r3, #3
 8006ec8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006eca:	69bb      	ldr	r3, [r7, #24]
 8006ecc:	2b0c      	cmp	r3, #12
 8006ece:	d102      	bne.n	8006ed6 <HAL_RCC_OscConfig+0x136>
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d002      	beq.n	8006edc <HAL_RCC_OscConfig+0x13c>
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	2b04      	cmp	r3, #4
 8006eda:	d11f      	bne.n	8006f1c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006edc:	4b4f      	ldr	r3, [pc, #316]	; (800701c <HAL_RCC_OscConfig+0x27c>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d005      	beq.n	8006ef4 <HAL_RCC_OscConfig+0x154>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d101      	bne.n	8006ef4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	e265      	b.n	80073c0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ef4:	4b49      	ldr	r3, [pc, #292]	; (800701c <HAL_RCC_OscConfig+0x27c>)
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	061b      	lsls	r3, r3, #24
 8006f02:	4946      	ldr	r1, [pc, #280]	; (800701c <HAL_RCC_OscConfig+0x27c>)
 8006f04:	4313      	orrs	r3, r2
 8006f06:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006f08:	4b45      	ldr	r3, [pc, #276]	; (8007020 <HAL_RCC_OscConfig+0x280>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f7fc f80f 	bl	8002f30 <HAL_InitTick>
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d043      	beq.n	8006fa0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e251      	b.n	80073c0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d023      	beq.n	8006f6c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f24:	4b3d      	ldr	r3, [pc, #244]	; (800701c <HAL_RCC_OscConfig+0x27c>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a3c      	ldr	r2, [pc, #240]	; (800701c <HAL_RCC_OscConfig+0x27c>)
 8006f2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f30:	f7fc f84a 	bl	8002fc8 <HAL_GetTick>
 8006f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006f36:	e008      	b.n	8006f4a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f38:	f7fc f846 	bl	8002fc8 <HAL_GetTick>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	1ad3      	subs	r3, r2, r3
 8006f42:	2b02      	cmp	r3, #2
 8006f44:	d901      	bls.n	8006f4a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006f46:	2303      	movs	r3, #3
 8006f48:	e23a      	b.n	80073c0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006f4a:	4b34      	ldr	r3, [pc, #208]	; (800701c <HAL_RCC_OscConfig+0x27c>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d0f0      	beq.n	8006f38 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f56:	4b31      	ldr	r3, [pc, #196]	; (800701c <HAL_RCC_OscConfig+0x27c>)
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	691b      	ldr	r3, [r3, #16]
 8006f62:	061b      	lsls	r3, r3, #24
 8006f64:	492d      	ldr	r1, [pc, #180]	; (800701c <HAL_RCC_OscConfig+0x27c>)
 8006f66:	4313      	orrs	r3, r2
 8006f68:	604b      	str	r3, [r1, #4]
 8006f6a:	e01a      	b.n	8006fa2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f6c:	4b2b      	ldr	r3, [pc, #172]	; (800701c <HAL_RCC_OscConfig+0x27c>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a2a      	ldr	r2, [pc, #168]	; (800701c <HAL_RCC_OscConfig+0x27c>)
 8006f72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f78:	f7fc f826 	bl	8002fc8 <HAL_GetTick>
 8006f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006f7e:	e008      	b.n	8006f92 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f80:	f7fc f822 	bl	8002fc8 <HAL_GetTick>
 8006f84:	4602      	mov	r2, r0
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	1ad3      	subs	r3, r2, r3
 8006f8a:	2b02      	cmp	r3, #2
 8006f8c:	d901      	bls.n	8006f92 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006f8e:	2303      	movs	r3, #3
 8006f90:	e216      	b.n	80073c0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006f92:	4b22      	ldr	r3, [pc, #136]	; (800701c <HAL_RCC_OscConfig+0x27c>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d1f0      	bne.n	8006f80 <HAL_RCC_OscConfig+0x1e0>
 8006f9e:	e000      	b.n	8006fa2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006fa0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f003 0308 	and.w	r3, r3, #8
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d041      	beq.n	8007032 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	695b      	ldr	r3, [r3, #20]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d01c      	beq.n	8006ff0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006fb6:	4b19      	ldr	r3, [pc, #100]	; (800701c <HAL_RCC_OscConfig+0x27c>)
 8006fb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fbc:	4a17      	ldr	r2, [pc, #92]	; (800701c <HAL_RCC_OscConfig+0x27c>)
 8006fbe:	f043 0301 	orr.w	r3, r3, #1
 8006fc2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fc6:	f7fb ffff 	bl	8002fc8 <HAL_GetTick>
 8006fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006fcc:	e008      	b.n	8006fe0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006fce:	f7fb fffb 	bl	8002fc8 <HAL_GetTick>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	1ad3      	subs	r3, r2, r3
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d901      	bls.n	8006fe0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	e1ef      	b.n	80073c0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006fe0:	4b0e      	ldr	r3, [pc, #56]	; (800701c <HAL_RCC_OscConfig+0x27c>)
 8006fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fe6:	f003 0302 	and.w	r3, r3, #2
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d0ef      	beq.n	8006fce <HAL_RCC_OscConfig+0x22e>
 8006fee:	e020      	b.n	8007032 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ff0:	4b0a      	ldr	r3, [pc, #40]	; (800701c <HAL_RCC_OscConfig+0x27c>)
 8006ff2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ff6:	4a09      	ldr	r2, [pc, #36]	; (800701c <HAL_RCC_OscConfig+0x27c>)
 8006ff8:	f023 0301 	bic.w	r3, r3, #1
 8006ffc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007000:	f7fb ffe2 	bl	8002fc8 <HAL_GetTick>
 8007004:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007006:	e00d      	b.n	8007024 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007008:	f7fb ffde 	bl	8002fc8 <HAL_GetTick>
 800700c:	4602      	mov	r2, r0
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	1ad3      	subs	r3, r2, r3
 8007012:	2b02      	cmp	r3, #2
 8007014:	d906      	bls.n	8007024 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007016:	2303      	movs	r3, #3
 8007018:	e1d2      	b.n	80073c0 <HAL_RCC_OscConfig+0x620>
 800701a:	bf00      	nop
 800701c:	40021000 	.word	0x40021000
 8007020:	200000c8 	.word	0x200000c8
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007024:	4b8c      	ldr	r3, [pc, #560]	; (8007258 <HAL_RCC_OscConfig+0x4b8>)
 8007026:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800702a:	f003 0302 	and.w	r3, r3, #2
 800702e:	2b00      	cmp	r3, #0
 8007030:	d1ea      	bne.n	8007008 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f003 0304 	and.w	r3, r3, #4
 800703a:	2b00      	cmp	r3, #0
 800703c:	f000 80a6 	beq.w	800718c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007040:	2300      	movs	r3, #0
 8007042:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007044:	4b84      	ldr	r3, [pc, #528]	; (8007258 <HAL_RCC_OscConfig+0x4b8>)
 8007046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800704c:	2b00      	cmp	r3, #0
 800704e:	d101      	bne.n	8007054 <HAL_RCC_OscConfig+0x2b4>
 8007050:	2301      	movs	r3, #1
 8007052:	e000      	b.n	8007056 <HAL_RCC_OscConfig+0x2b6>
 8007054:	2300      	movs	r3, #0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d00d      	beq.n	8007076 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800705a:	4b7f      	ldr	r3, [pc, #508]	; (8007258 <HAL_RCC_OscConfig+0x4b8>)
 800705c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800705e:	4a7e      	ldr	r2, [pc, #504]	; (8007258 <HAL_RCC_OscConfig+0x4b8>)
 8007060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007064:	6593      	str	r3, [r2, #88]	; 0x58
 8007066:	4b7c      	ldr	r3, [pc, #496]	; (8007258 <HAL_RCC_OscConfig+0x4b8>)
 8007068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800706a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800706e:	60fb      	str	r3, [r7, #12]
 8007070:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007072:	2301      	movs	r3, #1
 8007074:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007076:	4b79      	ldr	r3, [pc, #484]	; (800725c <HAL_RCC_OscConfig+0x4bc>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800707e:	2b00      	cmp	r3, #0
 8007080:	d118      	bne.n	80070b4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007082:	4b76      	ldr	r3, [pc, #472]	; (800725c <HAL_RCC_OscConfig+0x4bc>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a75      	ldr	r2, [pc, #468]	; (800725c <HAL_RCC_OscConfig+0x4bc>)
 8007088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800708c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800708e:	f7fb ff9b 	bl	8002fc8 <HAL_GetTick>
 8007092:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007094:	e008      	b.n	80070a8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007096:	f7fb ff97 	bl	8002fc8 <HAL_GetTick>
 800709a:	4602      	mov	r2, r0
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	1ad3      	subs	r3, r2, r3
 80070a0:	2b02      	cmp	r3, #2
 80070a2:	d901      	bls.n	80070a8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80070a4:	2303      	movs	r3, #3
 80070a6:	e18b      	b.n	80073c0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80070a8:	4b6c      	ldr	r3, [pc, #432]	; (800725c <HAL_RCC_OscConfig+0x4bc>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d0f0      	beq.n	8007096 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d108      	bne.n	80070ce <HAL_RCC_OscConfig+0x32e>
 80070bc:	4b66      	ldr	r3, [pc, #408]	; (8007258 <HAL_RCC_OscConfig+0x4b8>)
 80070be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070c2:	4a65      	ldr	r2, [pc, #404]	; (8007258 <HAL_RCC_OscConfig+0x4b8>)
 80070c4:	f043 0301 	orr.w	r3, r3, #1
 80070c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80070cc:	e024      	b.n	8007118 <HAL_RCC_OscConfig+0x378>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	2b05      	cmp	r3, #5
 80070d4:	d110      	bne.n	80070f8 <HAL_RCC_OscConfig+0x358>
 80070d6:	4b60      	ldr	r3, [pc, #384]	; (8007258 <HAL_RCC_OscConfig+0x4b8>)
 80070d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070dc:	4a5e      	ldr	r2, [pc, #376]	; (8007258 <HAL_RCC_OscConfig+0x4b8>)
 80070de:	f043 0304 	orr.w	r3, r3, #4
 80070e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80070e6:	4b5c      	ldr	r3, [pc, #368]	; (8007258 <HAL_RCC_OscConfig+0x4b8>)
 80070e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070ec:	4a5a      	ldr	r2, [pc, #360]	; (8007258 <HAL_RCC_OscConfig+0x4b8>)
 80070ee:	f043 0301 	orr.w	r3, r3, #1
 80070f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80070f6:	e00f      	b.n	8007118 <HAL_RCC_OscConfig+0x378>
 80070f8:	4b57      	ldr	r3, [pc, #348]	; (8007258 <HAL_RCC_OscConfig+0x4b8>)
 80070fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070fe:	4a56      	ldr	r2, [pc, #344]	; (8007258 <HAL_RCC_OscConfig+0x4b8>)
 8007100:	f023 0301 	bic.w	r3, r3, #1
 8007104:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007108:	4b53      	ldr	r3, [pc, #332]	; (8007258 <HAL_RCC_OscConfig+0x4b8>)
 800710a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800710e:	4a52      	ldr	r2, [pc, #328]	; (8007258 <HAL_RCC_OscConfig+0x4b8>)
 8007110:	f023 0304 	bic.w	r3, r3, #4
 8007114:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d016      	beq.n	800714e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007120:	f7fb ff52 	bl	8002fc8 <HAL_GetTick>
 8007124:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007126:	e00a      	b.n	800713e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007128:	f7fb ff4e 	bl	8002fc8 <HAL_GetTick>
 800712c:	4602      	mov	r2, r0
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	1ad3      	subs	r3, r2, r3
 8007132:	f241 3288 	movw	r2, #5000	; 0x1388
 8007136:	4293      	cmp	r3, r2
 8007138:	d901      	bls.n	800713e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800713a:	2303      	movs	r3, #3
 800713c:	e140      	b.n	80073c0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800713e:	4b46      	ldr	r3, [pc, #280]	; (8007258 <HAL_RCC_OscConfig+0x4b8>)
 8007140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007144:	f003 0302 	and.w	r3, r3, #2
 8007148:	2b00      	cmp	r3, #0
 800714a:	d0ed      	beq.n	8007128 <HAL_RCC_OscConfig+0x388>
 800714c:	e015      	b.n	800717a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800714e:	f7fb ff3b 	bl	8002fc8 <HAL_GetTick>
 8007152:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007154:	e00a      	b.n	800716c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007156:	f7fb ff37 	bl	8002fc8 <HAL_GetTick>
 800715a:	4602      	mov	r2, r0
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	1ad3      	subs	r3, r2, r3
 8007160:	f241 3288 	movw	r2, #5000	; 0x1388
 8007164:	4293      	cmp	r3, r2
 8007166:	d901      	bls.n	800716c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007168:	2303      	movs	r3, #3
 800716a:	e129      	b.n	80073c0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800716c:	4b3a      	ldr	r3, [pc, #232]	; (8007258 <HAL_RCC_OscConfig+0x4b8>)
 800716e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007172:	f003 0302 	and.w	r3, r3, #2
 8007176:	2b00      	cmp	r3, #0
 8007178:	d1ed      	bne.n	8007156 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800717a:	7ffb      	ldrb	r3, [r7, #31]
 800717c:	2b01      	cmp	r3, #1
 800717e:	d105      	bne.n	800718c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007180:	4b35      	ldr	r3, [pc, #212]	; (8007258 <HAL_RCC_OscConfig+0x4b8>)
 8007182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007184:	4a34      	ldr	r2, [pc, #208]	; (8007258 <HAL_RCC_OscConfig+0x4b8>)
 8007186:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800718a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f003 0320 	and.w	r3, r3, #32
 8007194:	2b00      	cmp	r3, #0
 8007196:	d03c      	beq.n	8007212 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	699b      	ldr	r3, [r3, #24]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d01c      	beq.n	80071da <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80071a0:	4b2d      	ldr	r3, [pc, #180]	; (8007258 <HAL_RCC_OscConfig+0x4b8>)
 80071a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80071a6:	4a2c      	ldr	r2, [pc, #176]	; (8007258 <HAL_RCC_OscConfig+0x4b8>)
 80071a8:	f043 0301 	orr.w	r3, r3, #1
 80071ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071b0:	f7fb ff0a 	bl	8002fc8 <HAL_GetTick>
 80071b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80071b6:	e008      	b.n	80071ca <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80071b8:	f7fb ff06 	bl	8002fc8 <HAL_GetTick>
 80071bc:	4602      	mov	r2, r0
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	2b02      	cmp	r3, #2
 80071c4:	d901      	bls.n	80071ca <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80071c6:	2303      	movs	r3, #3
 80071c8:	e0fa      	b.n	80073c0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80071ca:	4b23      	ldr	r3, [pc, #140]	; (8007258 <HAL_RCC_OscConfig+0x4b8>)
 80071cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80071d0:	f003 0302 	and.w	r3, r3, #2
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d0ef      	beq.n	80071b8 <HAL_RCC_OscConfig+0x418>
 80071d8:	e01b      	b.n	8007212 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80071da:	4b1f      	ldr	r3, [pc, #124]	; (8007258 <HAL_RCC_OscConfig+0x4b8>)
 80071dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80071e0:	4a1d      	ldr	r2, [pc, #116]	; (8007258 <HAL_RCC_OscConfig+0x4b8>)
 80071e2:	f023 0301 	bic.w	r3, r3, #1
 80071e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071ea:	f7fb feed 	bl	8002fc8 <HAL_GetTick>
 80071ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80071f0:	e008      	b.n	8007204 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80071f2:	f7fb fee9 	bl	8002fc8 <HAL_GetTick>
 80071f6:	4602      	mov	r2, r0
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	1ad3      	subs	r3, r2, r3
 80071fc:	2b02      	cmp	r3, #2
 80071fe:	d901      	bls.n	8007204 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007200:	2303      	movs	r3, #3
 8007202:	e0dd      	b.n	80073c0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007204:	4b14      	ldr	r3, [pc, #80]	; (8007258 <HAL_RCC_OscConfig+0x4b8>)
 8007206:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800720a:	f003 0302 	and.w	r3, r3, #2
 800720e:	2b00      	cmp	r3, #0
 8007210:	d1ef      	bne.n	80071f2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	69db      	ldr	r3, [r3, #28]
 8007216:	2b00      	cmp	r3, #0
 8007218:	f000 80d1 	beq.w	80073be <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800721c:	4b0e      	ldr	r3, [pc, #56]	; (8007258 <HAL_RCC_OscConfig+0x4b8>)
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	f003 030c 	and.w	r3, r3, #12
 8007224:	2b0c      	cmp	r3, #12
 8007226:	f000 808b 	beq.w	8007340 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	69db      	ldr	r3, [r3, #28]
 800722e:	2b02      	cmp	r3, #2
 8007230:	d15e      	bne.n	80072f0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007232:	4b09      	ldr	r3, [pc, #36]	; (8007258 <HAL_RCC_OscConfig+0x4b8>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a08      	ldr	r2, [pc, #32]	; (8007258 <HAL_RCC_OscConfig+0x4b8>)
 8007238:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800723c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800723e:	f7fb fec3 	bl	8002fc8 <HAL_GetTick>
 8007242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007244:	e00c      	b.n	8007260 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007246:	f7fb febf 	bl	8002fc8 <HAL_GetTick>
 800724a:	4602      	mov	r2, r0
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	1ad3      	subs	r3, r2, r3
 8007250:	2b02      	cmp	r3, #2
 8007252:	d905      	bls.n	8007260 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007254:	2303      	movs	r3, #3
 8007256:	e0b3      	b.n	80073c0 <HAL_RCC_OscConfig+0x620>
 8007258:	40021000 	.word	0x40021000
 800725c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007260:	4b59      	ldr	r3, [pc, #356]	; (80073c8 <HAL_RCC_OscConfig+0x628>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007268:	2b00      	cmp	r3, #0
 800726a:	d1ec      	bne.n	8007246 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800726c:	4b56      	ldr	r3, [pc, #344]	; (80073c8 <HAL_RCC_OscConfig+0x628>)
 800726e:	68da      	ldr	r2, [r3, #12]
 8007270:	4b56      	ldr	r3, [pc, #344]	; (80073cc <HAL_RCC_OscConfig+0x62c>)
 8007272:	4013      	ands	r3, r2
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	6a11      	ldr	r1, [r2, #32]
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800727c:	3a01      	subs	r2, #1
 800727e:	0112      	lsls	r2, r2, #4
 8007280:	4311      	orrs	r1, r2
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007286:	0212      	lsls	r2, r2, #8
 8007288:	4311      	orrs	r1, r2
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800728e:	0852      	lsrs	r2, r2, #1
 8007290:	3a01      	subs	r2, #1
 8007292:	0552      	lsls	r2, r2, #21
 8007294:	4311      	orrs	r1, r2
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800729a:	0852      	lsrs	r2, r2, #1
 800729c:	3a01      	subs	r2, #1
 800729e:	0652      	lsls	r2, r2, #25
 80072a0:	4311      	orrs	r1, r2
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80072a6:	06d2      	lsls	r2, r2, #27
 80072a8:	430a      	orrs	r2, r1
 80072aa:	4947      	ldr	r1, [pc, #284]	; (80073c8 <HAL_RCC_OscConfig+0x628>)
 80072ac:	4313      	orrs	r3, r2
 80072ae:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80072b0:	4b45      	ldr	r3, [pc, #276]	; (80073c8 <HAL_RCC_OscConfig+0x628>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a44      	ldr	r2, [pc, #272]	; (80073c8 <HAL_RCC_OscConfig+0x628>)
 80072b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80072ba:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80072bc:	4b42      	ldr	r3, [pc, #264]	; (80073c8 <HAL_RCC_OscConfig+0x628>)
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	4a41      	ldr	r2, [pc, #260]	; (80073c8 <HAL_RCC_OscConfig+0x628>)
 80072c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80072c6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072c8:	f7fb fe7e 	bl	8002fc8 <HAL_GetTick>
 80072cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80072ce:	e008      	b.n	80072e2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072d0:	f7fb fe7a 	bl	8002fc8 <HAL_GetTick>
 80072d4:	4602      	mov	r2, r0
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	1ad3      	subs	r3, r2, r3
 80072da:	2b02      	cmp	r3, #2
 80072dc:	d901      	bls.n	80072e2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80072de:	2303      	movs	r3, #3
 80072e0:	e06e      	b.n	80073c0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80072e2:	4b39      	ldr	r3, [pc, #228]	; (80073c8 <HAL_RCC_OscConfig+0x628>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d0f0      	beq.n	80072d0 <HAL_RCC_OscConfig+0x530>
 80072ee:	e066      	b.n	80073be <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072f0:	4b35      	ldr	r3, [pc, #212]	; (80073c8 <HAL_RCC_OscConfig+0x628>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a34      	ldr	r2, [pc, #208]	; (80073c8 <HAL_RCC_OscConfig+0x628>)
 80072f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072fa:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80072fc:	4b32      	ldr	r3, [pc, #200]	; (80073c8 <HAL_RCC_OscConfig+0x628>)
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	4a31      	ldr	r2, [pc, #196]	; (80073c8 <HAL_RCC_OscConfig+0x628>)
 8007302:	f023 0303 	bic.w	r3, r3, #3
 8007306:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007308:	4b2f      	ldr	r3, [pc, #188]	; (80073c8 <HAL_RCC_OscConfig+0x628>)
 800730a:	68db      	ldr	r3, [r3, #12]
 800730c:	4a2e      	ldr	r2, [pc, #184]	; (80073c8 <HAL_RCC_OscConfig+0x628>)
 800730e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007312:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007316:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007318:	f7fb fe56 	bl	8002fc8 <HAL_GetTick>
 800731c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800731e:	e008      	b.n	8007332 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007320:	f7fb fe52 	bl	8002fc8 <HAL_GetTick>
 8007324:	4602      	mov	r2, r0
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	1ad3      	subs	r3, r2, r3
 800732a:	2b02      	cmp	r3, #2
 800732c:	d901      	bls.n	8007332 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800732e:	2303      	movs	r3, #3
 8007330:	e046      	b.n	80073c0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007332:	4b25      	ldr	r3, [pc, #148]	; (80073c8 <HAL_RCC_OscConfig+0x628>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800733a:	2b00      	cmp	r3, #0
 800733c:	d1f0      	bne.n	8007320 <HAL_RCC_OscConfig+0x580>
 800733e:	e03e      	b.n	80073be <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	69db      	ldr	r3, [r3, #28]
 8007344:	2b01      	cmp	r3, #1
 8007346:	d101      	bne.n	800734c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8007348:	2301      	movs	r3, #1
 800734a:	e039      	b.n	80073c0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800734c:	4b1e      	ldr	r3, [pc, #120]	; (80073c8 <HAL_RCC_OscConfig+0x628>)
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	f003 0203 	and.w	r2, r3, #3
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a1b      	ldr	r3, [r3, #32]
 800735c:	429a      	cmp	r2, r3
 800735e:	d12c      	bne.n	80073ba <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800736a:	3b01      	subs	r3, #1
 800736c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800736e:	429a      	cmp	r2, r3
 8007370:	d123      	bne.n	80073ba <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800737c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800737e:	429a      	cmp	r2, r3
 8007380:	d11b      	bne.n	80073ba <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800738c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800738e:	429a      	cmp	r2, r3
 8007390:	d113      	bne.n	80073ba <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800739c:	085b      	lsrs	r3, r3, #1
 800739e:	3b01      	subs	r3, #1
 80073a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d109      	bne.n	80073ba <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073b0:	085b      	lsrs	r3, r3, #1
 80073b2:	3b01      	subs	r3, #1
 80073b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d001      	beq.n	80073be <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	e000      	b.n	80073c0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80073be:	2300      	movs	r3, #0
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3720      	adds	r7, #32
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	40021000 	.word	0x40021000
 80073cc:	019f800c 	.word	0x019f800c

080073d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b086      	sub	sp, #24
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80073da:	2300      	movs	r3, #0
 80073dc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d101      	bne.n	80073e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80073e4:	2301      	movs	r3, #1
 80073e6:	e11e      	b.n	8007626 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80073e8:	4b91      	ldr	r3, [pc, #580]	; (8007630 <HAL_RCC_ClockConfig+0x260>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 030f 	and.w	r3, r3, #15
 80073f0:	683a      	ldr	r2, [r7, #0]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d910      	bls.n	8007418 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073f6:	4b8e      	ldr	r3, [pc, #568]	; (8007630 <HAL_RCC_ClockConfig+0x260>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f023 020f 	bic.w	r2, r3, #15
 80073fe:	498c      	ldr	r1, [pc, #560]	; (8007630 <HAL_RCC_ClockConfig+0x260>)
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	4313      	orrs	r3, r2
 8007404:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007406:	4b8a      	ldr	r3, [pc, #552]	; (8007630 <HAL_RCC_ClockConfig+0x260>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f003 030f 	and.w	r3, r3, #15
 800740e:	683a      	ldr	r2, [r7, #0]
 8007410:	429a      	cmp	r2, r3
 8007412:	d001      	beq.n	8007418 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	e106      	b.n	8007626 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f003 0301 	and.w	r3, r3, #1
 8007420:	2b00      	cmp	r3, #0
 8007422:	d073      	beq.n	800750c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	2b03      	cmp	r3, #3
 800742a:	d129      	bne.n	8007480 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800742c:	4b81      	ldr	r3, [pc, #516]	; (8007634 <HAL_RCC_ClockConfig+0x264>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007434:	2b00      	cmp	r3, #0
 8007436:	d101      	bne.n	800743c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	e0f4      	b.n	8007626 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800743c:	f000 f9e2 	bl	8007804 <RCC_GetSysClockFreqFromPLLSource>
 8007440:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	4a7c      	ldr	r2, [pc, #496]	; (8007638 <HAL_RCC_ClockConfig+0x268>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d93f      	bls.n	80074ca <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800744a:	4b7a      	ldr	r3, [pc, #488]	; (8007634 <HAL_RCC_ClockConfig+0x264>)
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007452:	2b00      	cmp	r3, #0
 8007454:	d009      	beq.n	800746a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800745e:	2b00      	cmp	r3, #0
 8007460:	d033      	beq.n	80074ca <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007466:	2b00      	cmp	r3, #0
 8007468:	d12f      	bne.n	80074ca <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800746a:	4b72      	ldr	r3, [pc, #456]	; (8007634 <HAL_RCC_ClockConfig+0x264>)
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007472:	4a70      	ldr	r2, [pc, #448]	; (8007634 <HAL_RCC_ClockConfig+0x264>)
 8007474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007478:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800747a:	2380      	movs	r3, #128	; 0x80
 800747c:	617b      	str	r3, [r7, #20]
 800747e:	e024      	b.n	80074ca <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	2b02      	cmp	r3, #2
 8007486:	d107      	bne.n	8007498 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007488:	4b6a      	ldr	r3, [pc, #424]	; (8007634 <HAL_RCC_ClockConfig+0x264>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007490:	2b00      	cmp	r3, #0
 8007492:	d109      	bne.n	80074a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	e0c6      	b.n	8007626 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007498:	4b66      	ldr	r3, [pc, #408]	; (8007634 <HAL_RCC_ClockConfig+0x264>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d101      	bne.n	80074a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80074a4:	2301      	movs	r3, #1
 80074a6:	e0be      	b.n	8007626 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80074a8:	f000 f914 	bl	80076d4 <HAL_RCC_GetSysClockFreq>
 80074ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	4a61      	ldr	r2, [pc, #388]	; (8007638 <HAL_RCC_ClockConfig+0x268>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d909      	bls.n	80074ca <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80074b6:	4b5f      	ldr	r3, [pc, #380]	; (8007634 <HAL_RCC_ClockConfig+0x264>)
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074be:	4a5d      	ldr	r2, [pc, #372]	; (8007634 <HAL_RCC_ClockConfig+0x264>)
 80074c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074c4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80074c6:	2380      	movs	r3, #128	; 0x80
 80074c8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80074ca:	4b5a      	ldr	r3, [pc, #360]	; (8007634 <HAL_RCC_ClockConfig+0x264>)
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	f023 0203 	bic.w	r2, r3, #3
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	4957      	ldr	r1, [pc, #348]	; (8007634 <HAL_RCC_ClockConfig+0x264>)
 80074d8:	4313      	orrs	r3, r2
 80074da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074dc:	f7fb fd74 	bl	8002fc8 <HAL_GetTick>
 80074e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074e2:	e00a      	b.n	80074fa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074e4:	f7fb fd70 	bl	8002fc8 <HAL_GetTick>
 80074e8:	4602      	mov	r2, r0
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	1ad3      	subs	r3, r2, r3
 80074ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d901      	bls.n	80074fa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80074f6:	2303      	movs	r3, #3
 80074f8:	e095      	b.n	8007626 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074fa:	4b4e      	ldr	r3, [pc, #312]	; (8007634 <HAL_RCC_ClockConfig+0x264>)
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	f003 020c 	and.w	r2, r3, #12
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	429a      	cmp	r2, r3
 800750a:	d1eb      	bne.n	80074e4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f003 0302 	and.w	r3, r3, #2
 8007514:	2b00      	cmp	r3, #0
 8007516:	d023      	beq.n	8007560 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f003 0304 	and.w	r3, r3, #4
 8007520:	2b00      	cmp	r3, #0
 8007522:	d005      	beq.n	8007530 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007524:	4b43      	ldr	r3, [pc, #268]	; (8007634 <HAL_RCC_ClockConfig+0x264>)
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	4a42      	ldr	r2, [pc, #264]	; (8007634 <HAL_RCC_ClockConfig+0x264>)
 800752a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800752e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 0308 	and.w	r3, r3, #8
 8007538:	2b00      	cmp	r3, #0
 800753a:	d007      	beq.n	800754c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800753c:	4b3d      	ldr	r3, [pc, #244]	; (8007634 <HAL_RCC_ClockConfig+0x264>)
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007544:	4a3b      	ldr	r2, [pc, #236]	; (8007634 <HAL_RCC_ClockConfig+0x264>)
 8007546:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800754a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800754c:	4b39      	ldr	r3, [pc, #228]	; (8007634 <HAL_RCC_ClockConfig+0x264>)
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	4936      	ldr	r1, [pc, #216]	; (8007634 <HAL_RCC_ClockConfig+0x264>)
 800755a:	4313      	orrs	r3, r2
 800755c:	608b      	str	r3, [r1, #8]
 800755e:	e008      	b.n	8007572 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	2b80      	cmp	r3, #128	; 0x80
 8007564:	d105      	bne.n	8007572 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007566:	4b33      	ldr	r3, [pc, #204]	; (8007634 <HAL_RCC_ClockConfig+0x264>)
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	4a32      	ldr	r2, [pc, #200]	; (8007634 <HAL_RCC_ClockConfig+0x264>)
 800756c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007570:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007572:	4b2f      	ldr	r3, [pc, #188]	; (8007630 <HAL_RCC_ClockConfig+0x260>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f003 030f 	and.w	r3, r3, #15
 800757a:	683a      	ldr	r2, [r7, #0]
 800757c:	429a      	cmp	r2, r3
 800757e:	d21d      	bcs.n	80075bc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007580:	4b2b      	ldr	r3, [pc, #172]	; (8007630 <HAL_RCC_ClockConfig+0x260>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f023 020f 	bic.w	r2, r3, #15
 8007588:	4929      	ldr	r1, [pc, #164]	; (8007630 <HAL_RCC_ClockConfig+0x260>)
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	4313      	orrs	r3, r2
 800758e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007590:	f7fb fd1a 	bl	8002fc8 <HAL_GetTick>
 8007594:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007596:	e00a      	b.n	80075ae <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007598:	f7fb fd16 	bl	8002fc8 <HAL_GetTick>
 800759c:	4602      	mov	r2, r0
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d901      	bls.n	80075ae <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80075aa:	2303      	movs	r3, #3
 80075ac:	e03b      	b.n	8007626 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075ae:	4b20      	ldr	r3, [pc, #128]	; (8007630 <HAL_RCC_ClockConfig+0x260>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f003 030f 	and.w	r3, r3, #15
 80075b6:	683a      	ldr	r2, [r7, #0]
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d1ed      	bne.n	8007598 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f003 0304 	and.w	r3, r3, #4
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d008      	beq.n	80075da <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80075c8:	4b1a      	ldr	r3, [pc, #104]	; (8007634 <HAL_RCC_ClockConfig+0x264>)
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	68db      	ldr	r3, [r3, #12]
 80075d4:	4917      	ldr	r1, [pc, #92]	; (8007634 <HAL_RCC_ClockConfig+0x264>)
 80075d6:	4313      	orrs	r3, r2
 80075d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f003 0308 	and.w	r3, r3, #8
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d009      	beq.n	80075fa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80075e6:	4b13      	ldr	r3, [pc, #76]	; (8007634 <HAL_RCC_ClockConfig+0x264>)
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	691b      	ldr	r3, [r3, #16]
 80075f2:	00db      	lsls	r3, r3, #3
 80075f4:	490f      	ldr	r1, [pc, #60]	; (8007634 <HAL_RCC_ClockConfig+0x264>)
 80075f6:	4313      	orrs	r3, r2
 80075f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80075fa:	f000 f86b 	bl	80076d4 <HAL_RCC_GetSysClockFreq>
 80075fe:	4602      	mov	r2, r0
 8007600:	4b0c      	ldr	r3, [pc, #48]	; (8007634 <HAL_RCC_ClockConfig+0x264>)
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	091b      	lsrs	r3, r3, #4
 8007606:	f003 030f 	and.w	r3, r3, #15
 800760a:	490c      	ldr	r1, [pc, #48]	; (800763c <HAL_RCC_ClockConfig+0x26c>)
 800760c:	5ccb      	ldrb	r3, [r1, r3]
 800760e:	f003 031f 	and.w	r3, r3, #31
 8007612:	fa22 f303 	lsr.w	r3, r2, r3
 8007616:	4a0a      	ldr	r2, [pc, #40]	; (8007640 <HAL_RCC_ClockConfig+0x270>)
 8007618:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800761a:	4b0a      	ldr	r3, [pc, #40]	; (8007644 <HAL_RCC_ClockConfig+0x274>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4618      	mov	r0, r3
 8007620:	f7fb fc86 	bl	8002f30 <HAL_InitTick>
 8007624:	4603      	mov	r3, r0
}
 8007626:	4618      	mov	r0, r3
 8007628:	3718      	adds	r7, #24
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	bf00      	nop
 8007630:	40022000 	.word	0x40022000
 8007634:	40021000 	.word	0x40021000
 8007638:	04c4b400 	.word	0x04c4b400
 800763c:	0800af2c 	.word	0x0800af2c
 8007640:	200000c4 	.word	0x200000c4
 8007644:	200000c8 	.word	0x200000c8

08007648 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b08c      	sub	sp, #48	; 0x30
 800764c:	af00      	add	r7, sp, #0
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	60b9      	str	r1, [r7, #8]
 8007652:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 8007654:	2302      	movs	r3, #2
 8007656:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8007658:	2303      	movs	r3, #3
 800765a:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 800765c:	2300      	movs	r3, #0
 800765e:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007666:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	0c1b      	lsrs	r3, r3, #16
 800766c:	f003 030f 	and.w	r3, r3, #15
 8007670:	f503 1390 	add.w	r3, r3, #1179648	; 0x120000
 8007674:	029b      	lsls	r3, r3, #10
 8007676:	62bb      	str	r3, [r7, #40]	; 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	0c1b      	lsrs	r3, r3, #16
 800767c:	f003 030f 	and.w	r3, r3, #15
 8007680:	627b      	str	r3, [r7, #36]	; 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 8007682:	4b13      	ldr	r3, [pc, #76]	; (80076d0 <HAL_RCC_MCOConfig+0x88>)
 8007684:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007686:	2101      	movs	r1, #1
 8007688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768a:	fa01 f303 	lsl.w	r3, r1, r3
 800768e:	4910      	ldr	r1, [pc, #64]	; (80076d0 <HAL_RCC_MCOConfig+0x88>)
 8007690:	4313      	orrs	r3, r2
 8007692:	64cb      	str	r3, [r1, #76]	; 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	b29b      	uxth	r3, r3
 8007698:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	0d1b      	lsrs	r3, r3, #20
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 80076a2:	f107 0310 	add.w	r3, r7, #16
 80076a6:	4619      	mov	r1, r3
 80076a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076aa:	f7ff f92b 	bl	8006904 <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 80076ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d109      	bne.n	80076c8 <HAL_RCC_MCOConfig+0x80>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 80076b4:	4b06      	ldr	r3, [pc, #24]	; (80076d0 <HAL_RCC_MCOConfig+0x88>)
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80076bc:	68b9      	ldr	r1, [r7, #8]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	430b      	orrs	r3, r1
 80076c2:	4903      	ldr	r1, [pc, #12]	; (80076d0 <HAL_RCC_MCOConfig+0x88>)
 80076c4:	4313      	orrs	r3, r2
 80076c6:	608b      	str	r3, [r1, #8]
  }
}
 80076c8:	bf00      	nop
 80076ca:	3730      	adds	r7, #48	; 0x30
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	40021000 	.word	0x40021000

080076d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b087      	sub	sp, #28
 80076d8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80076da:	4b2c      	ldr	r3, [pc, #176]	; (800778c <HAL_RCC_GetSysClockFreq+0xb8>)
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	f003 030c 	and.w	r3, r3, #12
 80076e2:	2b04      	cmp	r3, #4
 80076e4:	d102      	bne.n	80076ec <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80076e6:	4b2a      	ldr	r3, [pc, #168]	; (8007790 <HAL_RCC_GetSysClockFreq+0xbc>)
 80076e8:	613b      	str	r3, [r7, #16]
 80076ea:	e047      	b.n	800777c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80076ec:	4b27      	ldr	r3, [pc, #156]	; (800778c <HAL_RCC_GetSysClockFreq+0xb8>)
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	f003 030c 	and.w	r3, r3, #12
 80076f4:	2b08      	cmp	r3, #8
 80076f6:	d102      	bne.n	80076fe <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80076f8:	4b25      	ldr	r3, [pc, #148]	; (8007790 <HAL_RCC_GetSysClockFreq+0xbc>)
 80076fa:	613b      	str	r3, [r7, #16]
 80076fc:	e03e      	b.n	800777c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80076fe:	4b23      	ldr	r3, [pc, #140]	; (800778c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	f003 030c 	and.w	r3, r3, #12
 8007706:	2b0c      	cmp	r3, #12
 8007708:	d136      	bne.n	8007778 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800770a:	4b20      	ldr	r3, [pc, #128]	; (800778c <HAL_RCC_GetSysClockFreq+0xb8>)
 800770c:	68db      	ldr	r3, [r3, #12]
 800770e:	f003 0303 	and.w	r3, r3, #3
 8007712:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007714:	4b1d      	ldr	r3, [pc, #116]	; (800778c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007716:	68db      	ldr	r3, [r3, #12]
 8007718:	091b      	lsrs	r3, r3, #4
 800771a:	f003 030f 	and.w	r3, r3, #15
 800771e:	3301      	adds	r3, #1
 8007720:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2b03      	cmp	r3, #3
 8007726:	d10c      	bne.n	8007742 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007728:	4a19      	ldr	r2, [pc, #100]	; (8007790 <HAL_RCC_GetSysClockFreq+0xbc>)
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007730:	4a16      	ldr	r2, [pc, #88]	; (800778c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007732:	68d2      	ldr	r2, [r2, #12]
 8007734:	0a12      	lsrs	r2, r2, #8
 8007736:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800773a:	fb02 f303 	mul.w	r3, r2, r3
 800773e:	617b      	str	r3, [r7, #20]
      break;
 8007740:	e00c      	b.n	800775c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007742:	4a13      	ldr	r2, [pc, #76]	; (8007790 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	fbb2 f3f3 	udiv	r3, r2, r3
 800774a:	4a10      	ldr	r2, [pc, #64]	; (800778c <HAL_RCC_GetSysClockFreq+0xb8>)
 800774c:	68d2      	ldr	r2, [r2, #12]
 800774e:	0a12      	lsrs	r2, r2, #8
 8007750:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007754:	fb02 f303 	mul.w	r3, r2, r3
 8007758:	617b      	str	r3, [r7, #20]
      break;
 800775a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800775c:	4b0b      	ldr	r3, [pc, #44]	; (800778c <HAL_RCC_GetSysClockFreq+0xb8>)
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	0e5b      	lsrs	r3, r3, #25
 8007762:	f003 0303 	and.w	r3, r3, #3
 8007766:	3301      	adds	r3, #1
 8007768:	005b      	lsls	r3, r3, #1
 800776a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800776c:	697a      	ldr	r2, [r7, #20]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	fbb2 f3f3 	udiv	r3, r2, r3
 8007774:	613b      	str	r3, [r7, #16]
 8007776:	e001      	b.n	800777c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007778:	2300      	movs	r3, #0
 800777a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800777c:	693b      	ldr	r3, [r7, #16]
}
 800777e:	4618      	mov	r0, r3
 8007780:	371c      	adds	r7, #28
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop
 800778c:	40021000 	.word	0x40021000
 8007790:	00f42400 	.word	0x00f42400

08007794 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007794:	b480      	push	{r7}
 8007796:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007798:	4b03      	ldr	r3, [pc, #12]	; (80077a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800779a:	681b      	ldr	r3, [r3, #0]
}
 800779c:	4618      	mov	r0, r3
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr
 80077a6:	bf00      	nop
 80077a8:	200000c4 	.word	0x200000c4

080077ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80077b0:	f7ff fff0 	bl	8007794 <HAL_RCC_GetHCLKFreq>
 80077b4:	4602      	mov	r2, r0
 80077b6:	4b06      	ldr	r3, [pc, #24]	; (80077d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	0a1b      	lsrs	r3, r3, #8
 80077bc:	f003 0307 	and.w	r3, r3, #7
 80077c0:	4904      	ldr	r1, [pc, #16]	; (80077d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80077c2:	5ccb      	ldrb	r3, [r1, r3]
 80077c4:	f003 031f 	and.w	r3, r3, #31
 80077c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	bd80      	pop	{r7, pc}
 80077d0:	40021000 	.word	0x40021000
 80077d4:	0800af3c 	.word	0x0800af3c

080077d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80077dc:	f7ff ffda 	bl	8007794 <HAL_RCC_GetHCLKFreq>
 80077e0:	4602      	mov	r2, r0
 80077e2:	4b06      	ldr	r3, [pc, #24]	; (80077fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	0adb      	lsrs	r3, r3, #11
 80077e8:	f003 0307 	and.w	r3, r3, #7
 80077ec:	4904      	ldr	r1, [pc, #16]	; (8007800 <HAL_RCC_GetPCLK2Freq+0x28>)
 80077ee:	5ccb      	ldrb	r3, [r1, r3]
 80077f0:	f003 031f 	and.w	r3, r3, #31
 80077f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	bd80      	pop	{r7, pc}
 80077fc:	40021000 	.word	0x40021000
 8007800:	0800af3c 	.word	0x0800af3c

08007804 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007804:	b480      	push	{r7}
 8007806:	b087      	sub	sp, #28
 8007808:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800780a:	4b1e      	ldr	r3, [pc, #120]	; (8007884 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	f003 0303 	and.w	r3, r3, #3
 8007812:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007814:	4b1b      	ldr	r3, [pc, #108]	; (8007884 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	091b      	lsrs	r3, r3, #4
 800781a:	f003 030f 	and.w	r3, r3, #15
 800781e:	3301      	adds	r3, #1
 8007820:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	2b03      	cmp	r3, #3
 8007826:	d10c      	bne.n	8007842 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007828:	4a17      	ldr	r2, [pc, #92]	; (8007888 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007830:	4a14      	ldr	r2, [pc, #80]	; (8007884 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007832:	68d2      	ldr	r2, [r2, #12]
 8007834:	0a12      	lsrs	r2, r2, #8
 8007836:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800783a:	fb02 f303 	mul.w	r3, r2, r3
 800783e:	617b      	str	r3, [r7, #20]
    break;
 8007840:	e00c      	b.n	800785c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007842:	4a11      	ldr	r2, [pc, #68]	; (8007888 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	fbb2 f3f3 	udiv	r3, r2, r3
 800784a:	4a0e      	ldr	r2, [pc, #56]	; (8007884 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800784c:	68d2      	ldr	r2, [r2, #12]
 800784e:	0a12      	lsrs	r2, r2, #8
 8007850:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007854:	fb02 f303 	mul.w	r3, r2, r3
 8007858:	617b      	str	r3, [r7, #20]
    break;
 800785a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800785c:	4b09      	ldr	r3, [pc, #36]	; (8007884 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	0e5b      	lsrs	r3, r3, #25
 8007862:	f003 0303 	and.w	r3, r3, #3
 8007866:	3301      	adds	r3, #1
 8007868:	005b      	lsls	r3, r3, #1
 800786a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800786c:	697a      	ldr	r2, [r7, #20]
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	fbb2 f3f3 	udiv	r3, r2, r3
 8007874:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007876:	687b      	ldr	r3, [r7, #4]
}
 8007878:	4618      	mov	r0, r3
 800787a:	371c      	adds	r7, #28
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr
 8007884:	40021000 	.word	0x40021000
 8007888:	00f42400 	.word	0x00f42400

0800788c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b086      	sub	sp, #24
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007894:	2300      	movs	r3, #0
 8007896:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007898:	2300      	movs	r3, #0
 800789a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	f000 8098 	beq.w	80079da <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80078aa:	2300      	movs	r3, #0
 80078ac:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80078ae:	4b43      	ldr	r3, [pc, #268]	; (80079bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d10d      	bne.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80078ba:	4b40      	ldr	r3, [pc, #256]	; (80079bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078be:	4a3f      	ldr	r2, [pc, #252]	; (80079bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078c4:	6593      	str	r3, [r2, #88]	; 0x58
 80078c6:	4b3d      	ldr	r3, [pc, #244]	; (80079bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078ce:	60bb      	str	r3, [r7, #8]
 80078d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80078d2:	2301      	movs	r3, #1
 80078d4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80078d6:	4b3a      	ldr	r3, [pc, #232]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a39      	ldr	r2, [pc, #228]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80078dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80078e2:	f7fb fb71 	bl	8002fc8 <HAL_GetTick>
 80078e6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80078e8:	e009      	b.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078ea:	f7fb fb6d 	bl	8002fc8 <HAL_GetTick>
 80078ee:	4602      	mov	r2, r0
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	1ad3      	subs	r3, r2, r3
 80078f4:	2b02      	cmp	r3, #2
 80078f6:	d902      	bls.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80078f8:	2303      	movs	r3, #3
 80078fa:	74fb      	strb	r3, [r7, #19]
        break;
 80078fc:	e005      	b.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80078fe:	4b30      	ldr	r3, [pc, #192]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007906:	2b00      	cmp	r3, #0
 8007908:	d0ef      	beq.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800790a:	7cfb      	ldrb	r3, [r7, #19]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d159      	bne.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007910:	4b2a      	ldr	r3, [pc, #168]	; (80079bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800791a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d01e      	beq.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007926:	697a      	ldr	r2, [r7, #20]
 8007928:	429a      	cmp	r2, r3
 800792a:	d019      	beq.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800792c:	4b23      	ldr	r3, [pc, #140]	; (80079bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800792e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007932:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007936:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007938:	4b20      	ldr	r3, [pc, #128]	; (80079bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800793a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800793e:	4a1f      	ldr	r2, [pc, #124]	; (80079bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007944:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007948:	4b1c      	ldr	r3, [pc, #112]	; (80079bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800794a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800794e:	4a1b      	ldr	r2, [pc, #108]	; (80079bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007950:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007954:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007958:	4a18      	ldr	r2, [pc, #96]	; (80079bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	f003 0301 	and.w	r3, r3, #1
 8007966:	2b00      	cmp	r3, #0
 8007968:	d016      	beq.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800796a:	f7fb fb2d 	bl	8002fc8 <HAL_GetTick>
 800796e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007970:	e00b      	b.n	800798a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007972:	f7fb fb29 	bl	8002fc8 <HAL_GetTick>
 8007976:	4602      	mov	r2, r0
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	1ad3      	subs	r3, r2, r3
 800797c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007980:	4293      	cmp	r3, r2
 8007982:	d902      	bls.n	800798a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007984:	2303      	movs	r3, #3
 8007986:	74fb      	strb	r3, [r7, #19]
            break;
 8007988:	e006      	b.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800798a:	4b0c      	ldr	r3, [pc, #48]	; (80079bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800798c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007990:	f003 0302 	and.w	r3, r3, #2
 8007994:	2b00      	cmp	r3, #0
 8007996:	d0ec      	beq.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007998:	7cfb      	ldrb	r3, [r7, #19]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d10b      	bne.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800799e:	4b07      	ldr	r3, [pc, #28]	; (80079bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ac:	4903      	ldr	r1, [pc, #12]	; (80079bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079ae:	4313      	orrs	r3, r2
 80079b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80079b4:	e008      	b.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80079b6:	7cfb      	ldrb	r3, [r7, #19]
 80079b8:	74bb      	strb	r3, [r7, #18]
 80079ba:	e005      	b.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80079bc:	40021000 	.word	0x40021000
 80079c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079c4:	7cfb      	ldrb	r3, [r7, #19]
 80079c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80079c8:	7c7b      	ldrb	r3, [r7, #17]
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d105      	bne.n	80079da <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80079ce:	4ba6      	ldr	r3, [pc, #664]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079d2:	4aa5      	ldr	r2, [pc, #660]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f003 0301 	and.w	r3, r3, #1
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d00a      	beq.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80079e6:	4ba0      	ldr	r3, [pc, #640]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079ec:	f023 0203 	bic.w	r2, r3, #3
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	499c      	ldr	r1, [pc, #624]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079f6:	4313      	orrs	r3, r2
 80079f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f003 0302 	and.w	r3, r3, #2
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d00a      	beq.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007a08:	4b97      	ldr	r3, [pc, #604]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a0e:	f023 020c 	bic.w	r2, r3, #12
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	4994      	ldr	r1, [pc, #592]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f003 0304 	and.w	r3, r3, #4
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d00a      	beq.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007a2a:	4b8f      	ldr	r3, [pc, #572]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a30:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	498b      	ldr	r1, [pc, #556]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f003 0308 	and.w	r3, r3, #8
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d00a      	beq.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007a4c:	4b86      	ldr	r3, [pc, #536]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a52:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	691b      	ldr	r3, [r3, #16]
 8007a5a:	4983      	ldr	r1, [pc, #524]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f003 0320 	and.w	r3, r3, #32
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d00a      	beq.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007a6e:	4b7e      	ldr	r3, [pc, #504]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a74:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	695b      	ldr	r3, [r3, #20]
 8007a7c:	497a      	ldr	r1, [pc, #488]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d00a      	beq.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007a90:	4b75      	ldr	r3, [pc, #468]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a96:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	699b      	ldr	r3, [r3, #24]
 8007a9e:	4972      	ldr	r1, [pc, #456]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d00a      	beq.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007ab2:	4b6d      	ldr	r3, [pc, #436]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ab8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	69db      	ldr	r3, [r3, #28]
 8007ac0:	4969      	ldr	r1, [pc, #420]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d00a      	beq.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007ad4:	4b64      	ldr	r3, [pc, #400]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ada:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6a1b      	ldr	r3, [r3, #32]
 8007ae2:	4961      	ldr	r1, [pc, #388]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d00a      	beq.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007af6:	4b5c      	ldr	r3, [pc, #368]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007afc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b04:	4958      	ldr	r1, [pc, #352]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b06:	4313      	orrs	r3, r2
 8007b08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d015      	beq.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007b18:	4b53      	ldr	r3, [pc, #332]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b26:	4950      	ldr	r1, [pc, #320]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b36:	d105      	bne.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b38:	4b4b      	ldr	r3, [pc, #300]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	4a4a      	ldr	r2, [pc, #296]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b42:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d015      	beq.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007b50:	4b45      	ldr	r3, [pc, #276]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b56:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b5e:	4942      	ldr	r1, [pc, #264]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b60:	4313      	orrs	r3, r2
 8007b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b6e:	d105      	bne.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b70:	4b3d      	ldr	r3, [pc, #244]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	4a3c      	ldr	r2, [pc, #240]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b7a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d015      	beq.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007b88:	4b37      	ldr	r3, [pc, #220]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b8e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b96:	4934      	ldr	r1, [pc, #208]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ba2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007ba6:	d105      	bne.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ba8:	4b2f      	ldr	r3, [pc, #188]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007baa:	68db      	ldr	r3, [r3, #12]
 8007bac:	4a2e      	ldr	r2, [pc, #184]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007bae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007bb2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d015      	beq.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007bc0:	4b29      	ldr	r3, [pc, #164]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bc6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bce:	4926      	ldr	r1, [pc, #152]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007bde:	d105      	bne.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007be0:	4b21      	ldr	r3, [pc, #132]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007be2:	68db      	ldr	r3, [r3, #12]
 8007be4:	4a20      	ldr	r2, [pc, #128]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007be6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007bea:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d015      	beq.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007bf8:	4b1b      	ldr	r3, [pc, #108]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bfe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c06:	4918      	ldr	r1, [pc, #96]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c16:	d105      	bne.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c18:	4b13      	ldr	r3, [pc, #76]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	4a12      	ldr	r2, [pc, #72]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c22:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d015      	beq.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007c30:	4b0d      	ldr	r3, [pc, #52]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c36:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c3e:	490a      	ldr	r1, [pc, #40]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c40:	4313      	orrs	r3, r2
 8007c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c4e:	d105      	bne.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007c50:	4b05      	ldr	r3, [pc, #20]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c52:	68db      	ldr	r3, [r3, #12]
 8007c54:	4a04      	ldr	r2, [pc, #16]	; (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c5a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007c5c:	7cbb      	ldrb	r3, [r7, #18]
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3718      	adds	r7, #24
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
 8007c66:	bf00      	nop
 8007c68:	40021000 	.word	0x40021000

08007c6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d101      	bne.n	8007c7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e09d      	b.n	8007dba <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d108      	bne.n	8007c98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c8e:	d009      	beq.n	8007ca4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	61da      	str	r2, [r3, #28]
 8007c96:	e005      	b.n	8007ca4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d106      	bne.n	8007cc4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f7fa fc40 	bl	8002544 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2202      	movs	r2, #2
 8007cc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cda:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	68db      	ldr	r3, [r3, #12]
 8007ce0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007ce4:	d902      	bls.n	8007cec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	60fb      	str	r3, [r7, #12]
 8007cea:	e002      	b.n	8007cf2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007cec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007cf0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	68db      	ldr	r3, [r3, #12]
 8007cf6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007cfa:	d007      	beq.n	8007d0c <HAL_SPI_Init+0xa0>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007d04:	d002      	beq.n	8007d0c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007d1c:	431a      	orrs	r2, r3
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	691b      	ldr	r3, [r3, #16]
 8007d22:	f003 0302 	and.w	r3, r3, #2
 8007d26:	431a      	orrs	r2, r3
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	695b      	ldr	r3, [r3, #20]
 8007d2c:	f003 0301 	and.w	r3, r3, #1
 8007d30:	431a      	orrs	r2, r3
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	699b      	ldr	r3, [r3, #24]
 8007d36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d3a:	431a      	orrs	r2, r3
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	69db      	ldr	r3, [r3, #28]
 8007d40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d44:	431a      	orrs	r2, r3
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6a1b      	ldr	r3, [r3, #32]
 8007d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d4e:	ea42 0103 	orr.w	r1, r2, r3
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d56:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	430a      	orrs	r2, r1
 8007d60:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	699b      	ldr	r3, [r3, #24]
 8007d66:	0c1b      	lsrs	r3, r3, #16
 8007d68:	f003 0204 	and.w	r2, r3, #4
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d70:	f003 0310 	and.w	r3, r3, #16
 8007d74:	431a      	orrs	r2, r3
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d7a:	f003 0308 	and.w	r3, r3, #8
 8007d7e:	431a      	orrs	r2, r3
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	68db      	ldr	r3, [r3, #12]
 8007d84:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007d88:	ea42 0103 	orr.w	r1, r2, r3
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	430a      	orrs	r2, r1
 8007d98:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	69da      	ldr	r2, [r3, #28]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007da8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2200      	movs	r2, #0
 8007dae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2201      	movs	r2, #1
 8007db4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007db8:	2300      	movs	r3, #0
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3710      	adds	r7, #16
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
	...

08007dc4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b088      	sub	sp, #32
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007ddc:	69bb      	ldr	r3, [r7, #24]
 8007dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d10e      	bne.n	8007e04 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007de6:	69bb      	ldr	r3, [r7, #24]
 8007de8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d009      	beq.n	8007e04 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007df0:	69fb      	ldr	r3, [r7, #28]
 8007df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d004      	beq.n	8007e04 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	4798      	blx	r3
    return;
 8007e02:	e0ce      	b.n	8007fa2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007e04:	69bb      	ldr	r3, [r7, #24]
 8007e06:	f003 0302 	and.w	r3, r3, #2
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d009      	beq.n	8007e22 <HAL_SPI_IRQHandler+0x5e>
 8007e0e:	69fb      	ldr	r3, [r7, #28]
 8007e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d004      	beq.n	8007e22 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	4798      	blx	r3
    return;
 8007e20:	e0bf      	b.n	8007fa2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007e22:	69bb      	ldr	r3, [r7, #24]
 8007e24:	f003 0320 	and.w	r3, r3, #32
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d10a      	bne.n	8007e42 <HAL_SPI_IRQHandler+0x7e>
 8007e2c:	69bb      	ldr	r3, [r7, #24]
 8007e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d105      	bne.n	8007e42 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007e36:	69bb      	ldr	r3, [r7, #24]
 8007e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	f000 80b0 	beq.w	8007fa2 <HAL_SPI_IRQHandler+0x1de>
 8007e42:	69fb      	ldr	r3, [r7, #28]
 8007e44:	f003 0320 	and.w	r3, r3, #32
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	f000 80aa 	beq.w	8007fa2 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007e4e:	69bb      	ldr	r3, [r7, #24]
 8007e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d023      	beq.n	8007ea0 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	2b03      	cmp	r3, #3
 8007e62:	d011      	beq.n	8007e88 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e68:	f043 0204 	orr.w	r2, r3, #4
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e70:	2300      	movs	r3, #0
 8007e72:	617b      	str	r3, [r7, #20]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	68db      	ldr	r3, [r3, #12]
 8007e7a:	617b      	str	r3, [r7, #20]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	617b      	str	r3, [r7, #20]
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	e00b      	b.n	8007ea0 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e88:	2300      	movs	r3, #0
 8007e8a:	613b      	str	r3, [r7, #16]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	68db      	ldr	r3, [r3, #12]
 8007e92:	613b      	str	r3, [r7, #16]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	613b      	str	r3, [r7, #16]
 8007e9c:	693b      	ldr	r3, [r7, #16]
        return;
 8007e9e:	e080      	b.n	8007fa2 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	f003 0320 	and.w	r3, r3, #32
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d014      	beq.n	8007ed4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007eae:	f043 0201 	orr.w	r2, r3, #1
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	60fb      	str	r3, [r7, #12]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	60fb      	str	r3, [r7, #12]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ed0:	601a      	str	r2, [r3, #0]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007ed4:	69bb      	ldr	r3, [r7, #24]
 8007ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d00c      	beq.n	8007ef8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ee2:	f043 0208 	orr.w	r2, r3, #8
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007eea:	2300      	movs	r3, #0
 8007eec:	60bb      	str	r3, [r7, #8]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	60bb      	str	r3, [r7, #8]
 8007ef6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d04f      	beq.n	8007fa0 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	685a      	ldr	r2, [r3, #4]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007f0e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2201      	movs	r2, #1
 8007f14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007f18:	69fb      	ldr	r3, [r7, #28]
 8007f1a:	f003 0302 	and.w	r3, r3, #2
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d104      	bne.n	8007f2c <HAL_SPI_IRQHandler+0x168>
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	f003 0301 	and.w	r3, r3, #1
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d034      	beq.n	8007f96 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	685a      	ldr	r2, [r3, #4]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f022 0203 	bic.w	r2, r2, #3
 8007f3a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d011      	beq.n	8007f68 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f48:	4a17      	ldr	r2, [pc, #92]	; (8007fa8 <HAL_SPI_IRQHandler+0x1e4>)
 8007f4a:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f50:	4618      	mov	r0, r3
 8007f52:	f7fd fd27 	bl	80059a4 <HAL_DMA_Abort_IT>
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d005      	beq.n	8007f68 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f60:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d016      	beq.n	8007f9e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f74:	4a0c      	ldr	r2, [pc, #48]	; (8007fa8 <HAL_SPI_IRQHandler+0x1e4>)
 8007f76:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f7fd fd11 	bl	80059a4 <HAL_DMA_Abort_IT>
 8007f82:	4603      	mov	r3, r0
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d00a      	beq.n	8007f9e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f8c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8007f94:	e003      	b.n	8007f9e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 f808 	bl	8007fac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007f9c:	e000      	b.n	8007fa0 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8007f9e:	bf00      	nop
    return;
 8007fa0:	bf00      	nop
  }
}
 8007fa2:	3720      	adds	r7, #32
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}
 8007fa8:	08007fc1 	.word	0x08007fc1

08007fac <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b083      	sub	sp, #12
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007fb4:	bf00      	nop
 8007fb6:	370c      	adds	r7, #12
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr

08007fc0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fcc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007fdc:	68f8      	ldr	r0, [r7, #12]
 8007fde:	f7ff ffe5 	bl	8007fac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007fe2:	bf00      	nop
 8007fe4:	3710      	adds	r7, #16
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b082      	sub	sp, #8
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d101      	bne.n	8007ffc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	e049      	b.n	8008090 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008002:	b2db      	uxtb	r3, r3
 8008004:	2b00      	cmp	r3, #0
 8008006:	d106      	bne.n	8008016 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2200      	movs	r2, #0
 800800c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f7fa fdcf 	bl	8002bb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2202      	movs	r2, #2
 800801a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	3304      	adds	r3, #4
 8008026:	4619      	mov	r1, r3
 8008028:	4610      	mov	r0, r2
 800802a:	f000 fe7f 	bl	8008d2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2201      	movs	r2, #1
 8008032:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2201      	movs	r2, #1
 800803a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2201      	movs	r2, #1
 8008042:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2201      	movs	r2, #1
 800804a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2201      	movs	r2, #1
 8008052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2201      	movs	r2, #1
 800805a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2201      	movs	r2, #1
 8008062:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2201      	movs	r2, #1
 800806a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2201      	movs	r2, #1
 8008072:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2201      	movs	r2, #1
 800807a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2201      	movs	r2, #1
 8008082:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2201      	movs	r2, #1
 800808a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800808e:	2300      	movs	r3, #0
}
 8008090:	4618      	mov	r0, r3
 8008092:	3708      	adds	r7, #8
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8008098:	b480      	push	{r7}
 800809a:	b083      	sub	sp, #12
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	6a1a      	ldr	r2, [r3, #32]
 80080a6:	f241 1311 	movw	r3, #4369	; 0x1111
 80080aa:	4013      	ands	r3, r2
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d10f      	bne.n	80080d0 <HAL_TIM_Base_Stop+0x38>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	6a1a      	ldr	r2, [r3, #32]
 80080b6:	f244 4344 	movw	r3, #17476	; 0x4444
 80080ba:	4013      	ands	r3, r2
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d107      	bne.n	80080d0 <HAL_TIM_Base_Stop+0x38>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	681a      	ldr	r2, [r3, #0]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f022 0201 	bic.w	r2, r2, #1
 80080ce:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2201      	movs	r2, #1
 80080d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80080d8:	2300      	movs	r3, #0
}
 80080da:	4618      	mov	r0, r3
 80080dc:	370c      	adds	r7, #12
 80080de:	46bd      	mov	sp, r7
 80080e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e4:	4770      	bx	lr
	...

080080e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b085      	sub	sp, #20
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080f6:	b2db      	uxtb	r3, r3
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d001      	beq.n	8008100 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80080fc:	2301      	movs	r3, #1
 80080fe:	e04a      	b.n	8008196 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2202      	movs	r2, #2
 8008104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	68da      	ldr	r2, [r3, #12]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f042 0201 	orr.w	r2, r2, #1
 8008116:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a21      	ldr	r2, [pc, #132]	; (80081a4 <HAL_TIM_Base_Start_IT+0xbc>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d018      	beq.n	8008154 <HAL_TIM_Base_Start_IT+0x6c>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800812a:	d013      	beq.n	8008154 <HAL_TIM_Base_Start_IT+0x6c>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a1d      	ldr	r2, [pc, #116]	; (80081a8 <HAL_TIM_Base_Start_IT+0xc0>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d00e      	beq.n	8008154 <HAL_TIM_Base_Start_IT+0x6c>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a1c      	ldr	r2, [pc, #112]	; (80081ac <HAL_TIM_Base_Start_IT+0xc4>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d009      	beq.n	8008154 <HAL_TIM_Base_Start_IT+0x6c>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a1a      	ldr	r2, [pc, #104]	; (80081b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d004      	beq.n	8008154 <HAL_TIM_Base_Start_IT+0x6c>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a19      	ldr	r2, [pc, #100]	; (80081b4 <HAL_TIM_Base_Start_IT+0xcc>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d115      	bne.n	8008180 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	689a      	ldr	r2, [r3, #8]
 800815a:	4b17      	ldr	r3, [pc, #92]	; (80081b8 <HAL_TIM_Base_Start_IT+0xd0>)
 800815c:	4013      	ands	r3, r2
 800815e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2b06      	cmp	r3, #6
 8008164:	d015      	beq.n	8008192 <HAL_TIM_Base_Start_IT+0xaa>
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800816c:	d011      	beq.n	8008192 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	681a      	ldr	r2, [r3, #0]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f042 0201 	orr.w	r2, r2, #1
 800817c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800817e:	e008      	b.n	8008192 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	681a      	ldr	r2, [r3, #0]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f042 0201 	orr.w	r2, r2, #1
 800818e:	601a      	str	r2, [r3, #0]
 8008190:	e000      	b.n	8008194 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008192:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008194:	2300      	movs	r3, #0
}
 8008196:	4618      	mov	r0, r3
 8008198:	3714      	adds	r7, #20
 800819a:	46bd      	mov	sp, r7
 800819c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a0:	4770      	bx	lr
 80081a2:	bf00      	nop
 80081a4:	40012c00 	.word	0x40012c00
 80081a8:	40000400 	.word	0x40000400
 80081ac:	40000800 	.word	0x40000800
 80081b0:	40013400 	.word	0x40013400
 80081b4:	40014000 	.word	0x40014000
 80081b8:	00010007 	.word	0x00010007

080081bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b082      	sub	sp, #8
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d101      	bne.n	80081ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80081ca:	2301      	movs	r3, #1
 80081cc:	e049      	b.n	8008262 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d106      	bne.n	80081e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2200      	movs	r2, #0
 80081de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 f841 	bl	800826a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2202      	movs	r2, #2
 80081ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	3304      	adds	r3, #4
 80081f8:	4619      	mov	r1, r3
 80081fa:	4610      	mov	r0, r2
 80081fc:	f000 fd96 	bl	8008d2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2201      	movs	r2, #1
 800820c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2201      	movs	r2, #1
 8008214:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2201      	movs	r2, #1
 800821c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2201      	movs	r2, #1
 8008224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2201      	movs	r2, #1
 800822c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2201      	movs	r2, #1
 8008234:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2201      	movs	r2, #1
 800823c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2201      	movs	r2, #1
 8008244:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2201      	movs	r2, #1
 800824c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2201      	movs	r2, #1
 8008254:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2201      	movs	r2, #1
 800825c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008260:	2300      	movs	r3, #0
}
 8008262:	4618      	mov	r0, r3
 8008264:	3708      	adds	r7, #8
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}

0800826a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800826a:	b480      	push	{r7}
 800826c:	b083      	sub	sp, #12
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008272:	bf00      	nop
 8008274:	370c      	adds	r7, #12
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr
	...

08008280 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b084      	sub	sp, #16
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d109      	bne.n	80082a4 <HAL_TIM_PWM_Start+0x24>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008296:	b2db      	uxtb	r3, r3
 8008298:	2b01      	cmp	r3, #1
 800829a:	bf14      	ite	ne
 800829c:	2301      	movne	r3, #1
 800829e:	2300      	moveq	r3, #0
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	e03c      	b.n	800831e <HAL_TIM_PWM_Start+0x9e>
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	2b04      	cmp	r3, #4
 80082a8:	d109      	bne.n	80082be <HAL_TIM_PWM_Start+0x3e>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	bf14      	ite	ne
 80082b6:	2301      	movne	r3, #1
 80082b8:	2300      	moveq	r3, #0
 80082ba:	b2db      	uxtb	r3, r3
 80082bc:	e02f      	b.n	800831e <HAL_TIM_PWM_Start+0x9e>
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	2b08      	cmp	r3, #8
 80082c2:	d109      	bne.n	80082d8 <HAL_TIM_PWM_Start+0x58>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	bf14      	ite	ne
 80082d0:	2301      	movne	r3, #1
 80082d2:	2300      	moveq	r3, #0
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	e022      	b.n	800831e <HAL_TIM_PWM_Start+0x9e>
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	2b0c      	cmp	r3, #12
 80082dc:	d109      	bne.n	80082f2 <HAL_TIM_PWM_Start+0x72>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	bf14      	ite	ne
 80082ea:	2301      	movne	r3, #1
 80082ec:	2300      	moveq	r3, #0
 80082ee:	b2db      	uxtb	r3, r3
 80082f0:	e015      	b.n	800831e <HAL_TIM_PWM_Start+0x9e>
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	2b10      	cmp	r3, #16
 80082f6:	d109      	bne.n	800830c <HAL_TIM_PWM_Start+0x8c>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80082fe:	b2db      	uxtb	r3, r3
 8008300:	2b01      	cmp	r3, #1
 8008302:	bf14      	ite	ne
 8008304:	2301      	movne	r3, #1
 8008306:	2300      	moveq	r3, #0
 8008308:	b2db      	uxtb	r3, r3
 800830a:	e008      	b.n	800831e <HAL_TIM_PWM_Start+0x9e>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008312:	b2db      	uxtb	r3, r3
 8008314:	2b01      	cmp	r3, #1
 8008316:	bf14      	ite	ne
 8008318:	2301      	movne	r3, #1
 800831a:	2300      	moveq	r3, #0
 800831c:	b2db      	uxtb	r3, r3
 800831e:	2b00      	cmp	r3, #0
 8008320:	d001      	beq.n	8008326 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	e097      	b.n	8008456 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d104      	bne.n	8008336 <HAL_TIM_PWM_Start+0xb6>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2202      	movs	r2, #2
 8008330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008334:	e023      	b.n	800837e <HAL_TIM_PWM_Start+0xfe>
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	2b04      	cmp	r3, #4
 800833a:	d104      	bne.n	8008346 <HAL_TIM_PWM_Start+0xc6>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2202      	movs	r2, #2
 8008340:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008344:	e01b      	b.n	800837e <HAL_TIM_PWM_Start+0xfe>
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	2b08      	cmp	r3, #8
 800834a:	d104      	bne.n	8008356 <HAL_TIM_PWM_Start+0xd6>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2202      	movs	r2, #2
 8008350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008354:	e013      	b.n	800837e <HAL_TIM_PWM_Start+0xfe>
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	2b0c      	cmp	r3, #12
 800835a:	d104      	bne.n	8008366 <HAL_TIM_PWM_Start+0xe6>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2202      	movs	r2, #2
 8008360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008364:	e00b      	b.n	800837e <HAL_TIM_PWM_Start+0xfe>
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	2b10      	cmp	r3, #16
 800836a:	d104      	bne.n	8008376 <HAL_TIM_PWM_Start+0xf6>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2202      	movs	r2, #2
 8008370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008374:	e003      	b.n	800837e <HAL_TIM_PWM_Start+0xfe>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2202      	movs	r2, #2
 800837a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2201      	movs	r2, #1
 8008384:	6839      	ldr	r1, [r7, #0]
 8008386:	4618      	mov	r0, r3
 8008388:	f001 f8f2 	bl	8009570 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a33      	ldr	r2, [pc, #204]	; (8008460 <HAL_TIM_PWM_Start+0x1e0>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d013      	beq.n	80083be <HAL_TIM_PWM_Start+0x13e>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a32      	ldr	r2, [pc, #200]	; (8008464 <HAL_TIM_PWM_Start+0x1e4>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d00e      	beq.n	80083be <HAL_TIM_PWM_Start+0x13e>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a30      	ldr	r2, [pc, #192]	; (8008468 <HAL_TIM_PWM_Start+0x1e8>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d009      	beq.n	80083be <HAL_TIM_PWM_Start+0x13e>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a2f      	ldr	r2, [pc, #188]	; (800846c <HAL_TIM_PWM_Start+0x1ec>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d004      	beq.n	80083be <HAL_TIM_PWM_Start+0x13e>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a2d      	ldr	r2, [pc, #180]	; (8008470 <HAL_TIM_PWM_Start+0x1f0>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d101      	bne.n	80083c2 <HAL_TIM_PWM_Start+0x142>
 80083be:	2301      	movs	r3, #1
 80083c0:	e000      	b.n	80083c4 <HAL_TIM_PWM_Start+0x144>
 80083c2:	2300      	movs	r3, #0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d007      	beq.n	80083d8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80083d6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a20      	ldr	r2, [pc, #128]	; (8008460 <HAL_TIM_PWM_Start+0x1e0>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d018      	beq.n	8008414 <HAL_TIM_PWM_Start+0x194>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083ea:	d013      	beq.n	8008414 <HAL_TIM_PWM_Start+0x194>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a20      	ldr	r2, [pc, #128]	; (8008474 <HAL_TIM_PWM_Start+0x1f4>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d00e      	beq.n	8008414 <HAL_TIM_PWM_Start+0x194>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a1f      	ldr	r2, [pc, #124]	; (8008478 <HAL_TIM_PWM_Start+0x1f8>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d009      	beq.n	8008414 <HAL_TIM_PWM_Start+0x194>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a17      	ldr	r2, [pc, #92]	; (8008464 <HAL_TIM_PWM_Start+0x1e4>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d004      	beq.n	8008414 <HAL_TIM_PWM_Start+0x194>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a16      	ldr	r2, [pc, #88]	; (8008468 <HAL_TIM_PWM_Start+0x1e8>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d115      	bne.n	8008440 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	689a      	ldr	r2, [r3, #8]
 800841a:	4b18      	ldr	r3, [pc, #96]	; (800847c <HAL_TIM_PWM_Start+0x1fc>)
 800841c:	4013      	ands	r3, r2
 800841e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2b06      	cmp	r3, #6
 8008424:	d015      	beq.n	8008452 <HAL_TIM_PWM_Start+0x1d2>
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800842c:	d011      	beq.n	8008452 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f042 0201 	orr.w	r2, r2, #1
 800843c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800843e:	e008      	b.n	8008452 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	681a      	ldr	r2, [r3, #0]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f042 0201 	orr.w	r2, r2, #1
 800844e:	601a      	str	r2, [r3, #0]
 8008450:	e000      	b.n	8008454 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008452:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008454:	2300      	movs	r3, #0
}
 8008456:	4618      	mov	r0, r3
 8008458:	3710      	adds	r7, #16
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
 800845e:	bf00      	nop
 8008460:	40012c00 	.word	0x40012c00
 8008464:	40013400 	.word	0x40013400
 8008468:	40014000 	.word	0x40014000
 800846c:	40014400 	.word	0x40014400
 8008470:	40014800 	.word	0x40014800
 8008474:	40000400 	.word	0x40000400
 8008478:	40000800 	.word	0x40000800
 800847c:	00010007 	.word	0x00010007

08008480 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b082      	sub	sp, #8
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	2200      	movs	r2, #0
 8008490:	6839      	ldr	r1, [r7, #0]
 8008492:	4618      	mov	r0, r3
 8008494:	f001 f86c 	bl	8009570 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a3e      	ldr	r2, [pc, #248]	; (8008598 <HAL_TIM_PWM_Stop+0x118>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d013      	beq.n	80084ca <HAL_TIM_PWM_Stop+0x4a>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4a3d      	ldr	r2, [pc, #244]	; (800859c <HAL_TIM_PWM_Stop+0x11c>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d00e      	beq.n	80084ca <HAL_TIM_PWM_Stop+0x4a>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a3b      	ldr	r2, [pc, #236]	; (80085a0 <HAL_TIM_PWM_Stop+0x120>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d009      	beq.n	80084ca <HAL_TIM_PWM_Stop+0x4a>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a3a      	ldr	r2, [pc, #232]	; (80085a4 <HAL_TIM_PWM_Stop+0x124>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d004      	beq.n	80084ca <HAL_TIM_PWM_Stop+0x4a>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a38      	ldr	r2, [pc, #224]	; (80085a8 <HAL_TIM_PWM_Stop+0x128>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d101      	bne.n	80084ce <HAL_TIM_PWM_Stop+0x4e>
 80084ca:	2301      	movs	r3, #1
 80084cc:	e000      	b.n	80084d0 <HAL_TIM_PWM_Stop+0x50>
 80084ce:	2300      	movs	r3, #0
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d017      	beq.n	8008504 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	6a1a      	ldr	r2, [r3, #32]
 80084da:	f241 1311 	movw	r3, #4369	; 0x1111
 80084de:	4013      	ands	r3, r2
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d10f      	bne.n	8008504 <HAL_TIM_PWM_Stop+0x84>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	6a1a      	ldr	r2, [r3, #32]
 80084ea:	f244 4344 	movw	r3, #17476	; 0x4444
 80084ee:	4013      	ands	r3, r2
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d107      	bne.n	8008504 <HAL_TIM_PWM_Stop+0x84>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008502:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	6a1a      	ldr	r2, [r3, #32]
 800850a:	f241 1311 	movw	r3, #4369	; 0x1111
 800850e:	4013      	ands	r3, r2
 8008510:	2b00      	cmp	r3, #0
 8008512:	d10f      	bne.n	8008534 <HAL_TIM_PWM_Stop+0xb4>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	6a1a      	ldr	r2, [r3, #32]
 800851a:	f244 4344 	movw	r3, #17476	; 0x4444
 800851e:	4013      	ands	r3, r2
 8008520:	2b00      	cmp	r3, #0
 8008522:	d107      	bne.n	8008534 <HAL_TIM_PWM_Stop+0xb4>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	681a      	ldr	r2, [r3, #0]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f022 0201 	bic.w	r2, r2, #1
 8008532:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d104      	bne.n	8008544 <HAL_TIM_PWM_Stop+0xc4>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2201      	movs	r2, #1
 800853e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008542:	e023      	b.n	800858c <HAL_TIM_PWM_Stop+0x10c>
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	2b04      	cmp	r3, #4
 8008548:	d104      	bne.n	8008554 <HAL_TIM_PWM_Stop+0xd4>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2201      	movs	r2, #1
 800854e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008552:	e01b      	b.n	800858c <HAL_TIM_PWM_Stop+0x10c>
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	2b08      	cmp	r3, #8
 8008558:	d104      	bne.n	8008564 <HAL_TIM_PWM_Stop+0xe4>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2201      	movs	r2, #1
 800855e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008562:	e013      	b.n	800858c <HAL_TIM_PWM_Stop+0x10c>
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	2b0c      	cmp	r3, #12
 8008568:	d104      	bne.n	8008574 <HAL_TIM_PWM_Stop+0xf4>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2201      	movs	r2, #1
 800856e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008572:	e00b      	b.n	800858c <HAL_TIM_PWM_Stop+0x10c>
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	2b10      	cmp	r3, #16
 8008578:	d104      	bne.n	8008584 <HAL_TIM_PWM_Stop+0x104>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2201      	movs	r2, #1
 800857e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008582:	e003      	b.n	800858c <HAL_TIM_PWM_Stop+0x10c>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2201      	movs	r2, #1
 8008588:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800858c:	2300      	movs	r3, #0
}
 800858e:	4618      	mov	r0, r3
 8008590:	3708      	adds	r7, #8
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop
 8008598:	40012c00 	.word	0x40012c00
 800859c:	40013400 	.word	0x40013400
 80085a0:	40014000 	.word	0x40014000
 80085a4:	40014400 	.word	0x40014400
 80085a8:	40014800 	.word	0x40014800

080085ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b082      	sub	sp, #8
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	691b      	ldr	r3, [r3, #16]
 80085ba:	f003 0302 	and.w	r3, r3, #2
 80085be:	2b02      	cmp	r3, #2
 80085c0:	d122      	bne.n	8008608 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	68db      	ldr	r3, [r3, #12]
 80085c8:	f003 0302 	and.w	r3, r3, #2
 80085cc:	2b02      	cmp	r3, #2
 80085ce:	d11b      	bne.n	8008608 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f06f 0202 	mvn.w	r2, #2
 80085d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2201      	movs	r2, #1
 80085de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	699b      	ldr	r3, [r3, #24]
 80085e6:	f003 0303 	and.w	r3, r3, #3
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d003      	beq.n	80085f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 fb7e 	bl	8008cf0 <HAL_TIM_IC_CaptureCallback>
 80085f4:	e005      	b.n	8008602 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f000 fb70 	bl	8008cdc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 fb81 	bl	8008d04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2200      	movs	r2, #0
 8008606:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	691b      	ldr	r3, [r3, #16]
 800860e:	f003 0304 	and.w	r3, r3, #4
 8008612:	2b04      	cmp	r3, #4
 8008614:	d122      	bne.n	800865c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	68db      	ldr	r3, [r3, #12]
 800861c:	f003 0304 	and.w	r3, r3, #4
 8008620:	2b04      	cmp	r3, #4
 8008622:	d11b      	bne.n	800865c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f06f 0204 	mvn.w	r2, #4
 800862c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2202      	movs	r2, #2
 8008632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	699b      	ldr	r3, [r3, #24]
 800863a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800863e:	2b00      	cmp	r3, #0
 8008640:	d003      	beq.n	800864a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f000 fb54 	bl	8008cf0 <HAL_TIM_IC_CaptureCallback>
 8008648:	e005      	b.n	8008656 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 fb46 	bl	8008cdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 fb57 	bl	8008d04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2200      	movs	r2, #0
 800865a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	691b      	ldr	r3, [r3, #16]
 8008662:	f003 0308 	and.w	r3, r3, #8
 8008666:	2b08      	cmp	r3, #8
 8008668:	d122      	bne.n	80086b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	68db      	ldr	r3, [r3, #12]
 8008670:	f003 0308 	and.w	r3, r3, #8
 8008674:	2b08      	cmp	r3, #8
 8008676:	d11b      	bne.n	80086b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f06f 0208 	mvn.w	r2, #8
 8008680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2204      	movs	r2, #4
 8008686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	69db      	ldr	r3, [r3, #28]
 800868e:	f003 0303 	and.w	r3, r3, #3
 8008692:	2b00      	cmp	r3, #0
 8008694:	d003      	beq.n	800869e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 fb2a 	bl	8008cf0 <HAL_TIM_IC_CaptureCallback>
 800869c:	e005      	b.n	80086aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 fb1c 	bl	8008cdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f000 fb2d 	bl	8008d04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2200      	movs	r2, #0
 80086ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	691b      	ldr	r3, [r3, #16]
 80086b6:	f003 0310 	and.w	r3, r3, #16
 80086ba:	2b10      	cmp	r3, #16
 80086bc:	d122      	bne.n	8008704 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	68db      	ldr	r3, [r3, #12]
 80086c4:	f003 0310 	and.w	r3, r3, #16
 80086c8:	2b10      	cmp	r3, #16
 80086ca:	d11b      	bne.n	8008704 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f06f 0210 	mvn.w	r2, #16
 80086d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2208      	movs	r2, #8
 80086da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	69db      	ldr	r3, [r3, #28]
 80086e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d003      	beq.n	80086f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 fb00 	bl	8008cf0 <HAL_TIM_IC_CaptureCallback>
 80086f0:	e005      	b.n	80086fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 faf2 	bl	8008cdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 fb03 	bl	8008d04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2200      	movs	r2, #0
 8008702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	691b      	ldr	r3, [r3, #16]
 800870a:	f003 0301 	and.w	r3, r3, #1
 800870e:	2b01      	cmp	r3, #1
 8008710:	d10e      	bne.n	8008730 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	68db      	ldr	r3, [r3, #12]
 8008718:	f003 0301 	and.w	r3, r3, #1
 800871c:	2b01      	cmp	r3, #1
 800871e:	d107      	bne.n	8008730 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f06f 0201 	mvn.w	r2, #1
 8008728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 facc 	bl	8008cc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	691b      	ldr	r3, [r3, #16]
 8008736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800873a:	2b80      	cmp	r3, #128	; 0x80
 800873c:	d10e      	bne.n	800875c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	68db      	ldr	r3, [r3, #12]
 8008744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008748:	2b80      	cmp	r3, #128	; 0x80
 800874a:	d107      	bne.n	800875c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f001 f96e 	bl	8009a38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	691b      	ldr	r3, [r3, #16]
 8008762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008766:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800876a:	d10e      	bne.n	800878a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	68db      	ldr	r3, [r3, #12]
 8008772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008776:	2b80      	cmp	r3, #128	; 0x80
 8008778:	d107      	bne.n	800878a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008782:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f001 f961 	bl	8009a4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	691b      	ldr	r3, [r3, #16]
 8008790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008794:	2b40      	cmp	r3, #64	; 0x40
 8008796:	d10e      	bne.n	80087b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	68db      	ldr	r3, [r3, #12]
 800879e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087a2:	2b40      	cmp	r3, #64	; 0x40
 80087a4:	d107      	bne.n	80087b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80087ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 fab1 	bl	8008d18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	691b      	ldr	r3, [r3, #16]
 80087bc:	f003 0320 	and.w	r3, r3, #32
 80087c0:	2b20      	cmp	r3, #32
 80087c2:	d10e      	bne.n	80087e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	68db      	ldr	r3, [r3, #12]
 80087ca:	f003 0320 	and.w	r3, r3, #32
 80087ce:	2b20      	cmp	r3, #32
 80087d0:	d107      	bne.n	80087e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f06f 0220 	mvn.w	r2, #32
 80087da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f001 f921 	bl	8009a24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	691b      	ldr	r3, [r3, #16]
 80087e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80087ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087f0:	d10f      	bne.n	8008812 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80087fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008800:	d107      	bne.n	8008812 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800880a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f001 f927 	bl	8009a60 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	691b      	ldr	r3, [r3, #16]
 8008818:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800881c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008820:	d10f      	bne.n	8008842 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	68db      	ldr	r3, [r3, #12]
 8008828:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800882c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008830:	d107      	bne.n	8008842 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800883a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f001 f919 	bl	8009a74 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	691b      	ldr	r3, [r3, #16]
 8008848:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800884c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008850:	d10f      	bne.n	8008872 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	68db      	ldr	r3, [r3, #12]
 8008858:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800885c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008860:	d107      	bne.n	8008872 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800886a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f001 f90b 	bl	8009a88 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	691b      	ldr	r3, [r3, #16]
 8008878:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800887c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008880:	d10f      	bne.n	80088a2 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800888c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008890:	d107      	bne.n	80088a2 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800889a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f001 f8fd 	bl	8009a9c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80088a2:	bf00      	nop
 80088a4:	3708      	adds	r7, #8
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
	...

080088ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b086      	sub	sp, #24
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	60f8      	str	r0, [r7, #12]
 80088b4:	60b9      	str	r1, [r7, #8]
 80088b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80088b8:	2300      	movs	r3, #0
 80088ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088c2:	2b01      	cmp	r3, #1
 80088c4:	d101      	bne.n	80088ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80088c6:	2302      	movs	r3, #2
 80088c8:	e0ff      	b.n	8008aca <HAL_TIM_PWM_ConfigChannel+0x21e>
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2201      	movs	r2, #1
 80088ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2b14      	cmp	r3, #20
 80088d6:	f200 80f0 	bhi.w	8008aba <HAL_TIM_PWM_ConfigChannel+0x20e>
 80088da:	a201      	add	r2, pc, #4	; (adr r2, 80088e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80088dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088e0:	08008935 	.word	0x08008935
 80088e4:	08008abb 	.word	0x08008abb
 80088e8:	08008abb 	.word	0x08008abb
 80088ec:	08008abb 	.word	0x08008abb
 80088f0:	08008975 	.word	0x08008975
 80088f4:	08008abb 	.word	0x08008abb
 80088f8:	08008abb 	.word	0x08008abb
 80088fc:	08008abb 	.word	0x08008abb
 8008900:	080089b7 	.word	0x080089b7
 8008904:	08008abb 	.word	0x08008abb
 8008908:	08008abb 	.word	0x08008abb
 800890c:	08008abb 	.word	0x08008abb
 8008910:	080089f7 	.word	0x080089f7
 8008914:	08008abb 	.word	0x08008abb
 8008918:	08008abb 	.word	0x08008abb
 800891c:	08008abb 	.word	0x08008abb
 8008920:	08008a39 	.word	0x08008a39
 8008924:	08008abb 	.word	0x08008abb
 8008928:	08008abb 	.word	0x08008abb
 800892c:	08008abb 	.word	0x08008abb
 8008930:	08008a79 	.word	0x08008a79
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	68b9      	ldr	r1, [r7, #8]
 800893a:	4618      	mov	r0, r3
 800893c:	f000 fa86 	bl	8008e4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	699a      	ldr	r2, [r3, #24]
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f042 0208 	orr.w	r2, r2, #8
 800894e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	699a      	ldr	r2, [r3, #24]
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f022 0204 	bic.w	r2, r2, #4
 800895e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	6999      	ldr	r1, [r3, #24]
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	691a      	ldr	r2, [r3, #16]
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	430a      	orrs	r2, r1
 8008970:	619a      	str	r2, [r3, #24]
      break;
 8008972:	e0a5      	b.n	8008ac0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	68b9      	ldr	r1, [r7, #8]
 800897a:	4618      	mov	r0, r3
 800897c:	f000 faf6 	bl	8008f6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	699a      	ldr	r2, [r3, #24]
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800898e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	699a      	ldr	r2, [r3, #24]
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800899e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	6999      	ldr	r1, [r3, #24]
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	691b      	ldr	r3, [r3, #16]
 80089aa:	021a      	lsls	r2, r3, #8
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	430a      	orrs	r2, r1
 80089b2:	619a      	str	r2, [r3, #24]
      break;
 80089b4:	e084      	b.n	8008ac0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	68b9      	ldr	r1, [r7, #8]
 80089bc:	4618      	mov	r0, r3
 80089be:	f000 fb5f 	bl	8009080 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	69da      	ldr	r2, [r3, #28]
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f042 0208 	orr.w	r2, r2, #8
 80089d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	69da      	ldr	r2, [r3, #28]
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f022 0204 	bic.w	r2, r2, #4
 80089e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	69d9      	ldr	r1, [r3, #28]
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	691a      	ldr	r2, [r3, #16]
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	430a      	orrs	r2, r1
 80089f2:	61da      	str	r2, [r3, #28]
      break;
 80089f4:	e064      	b.n	8008ac0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	68b9      	ldr	r1, [r7, #8]
 80089fc:	4618      	mov	r0, r3
 80089fe:	f000 fbc7 	bl	8009190 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	69da      	ldr	r2, [r3, #28]
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	69da      	ldr	r2, [r3, #28]
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	69d9      	ldr	r1, [r3, #28]
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	691b      	ldr	r3, [r3, #16]
 8008a2c:	021a      	lsls	r2, r3, #8
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	430a      	orrs	r2, r1
 8008a34:	61da      	str	r2, [r3, #28]
      break;
 8008a36:	e043      	b.n	8008ac0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	68b9      	ldr	r1, [r7, #8]
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f000 fc30 	bl	80092a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f042 0208 	orr.w	r2, r2, #8
 8008a52:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f022 0204 	bic.w	r2, r2, #4
 8008a62:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	691a      	ldr	r2, [r3, #16]
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	430a      	orrs	r2, r1
 8008a74:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8008a76:	e023      	b.n	8008ac0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	68b9      	ldr	r1, [r7, #8]
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f000 fc74 	bl	800936c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a92:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008aa2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	691b      	ldr	r3, [r3, #16]
 8008aae:	021a      	lsls	r2, r3, #8
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	430a      	orrs	r2, r1
 8008ab6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8008ab8:	e002      	b.n	8008ac0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008aba:	2301      	movs	r3, #1
 8008abc:	75fb      	strb	r3, [r7, #23]
      break;
 8008abe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008ac8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3718      	adds	r7, #24
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}
 8008ad2:	bf00      	nop

08008ad4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d101      	bne.n	8008af0 <HAL_TIM_ConfigClockSource+0x1c>
 8008aec:	2302      	movs	r3, #2
 8008aee:	e0de      	b.n	8008cae <HAL_TIM_ConfigClockSource+0x1da>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2201      	movs	r2, #1
 8008af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2202      	movs	r2, #2
 8008afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	689b      	ldr	r3, [r3, #8]
 8008b06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8008b0e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008b12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	68ba      	ldr	r2, [r7, #8]
 8008b22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a63      	ldr	r2, [pc, #396]	; (8008cb8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	f000 80a9 	beq.w	8008c82 <HAL_TIM_ConfigClockSource+0x1ae>
 8008b30:	4a61      	ldr	r2, [pc, #388]	; (8008cb8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	f200 80ae 	bhi.w	8008c94 <HAL_TIM_ConfigClockSource+0x1c0>
 8008b38:	4a60      	ldr	r2, [pc, #384]	; (8008cbc <HAL_TIM_ConfigClockSource+0x1e8>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	f000 80a1 	beq.w	8008c82 <HAL_TIM_ConfigClockSource+0x1ae>
 8008b40:	4a5e      	ldr	r2, [pc, #376]	; (8008cbc <HAL_TIM_ConfigClockSource+0x1e8>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	f200 80a6 	bhi.w	8008c94 <HAL_TIM_ConfigClockSource+0x1c0>
 8008b48:	4a5d      	ldr	r2, [pc, #372]	; (8008cc0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	f000 8099 	beq.w	8008c82 <HAL_TIM_ConfigClockSource+0x1ae>
 8008b50:	4a5b      	ldr	r2, [pc, #364]	; (8008cc0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	f200 809e 	bhi.w	8008c94 <HAL_TIM_ConfigClockSource+0x1c0>
 8008b58:	4a5a      	ldr	r2, [pc, #360]	; (8008cc4 <HAL_TIM_ConfigClockSource+0x1f0>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	f000 8091 	beq.w	8008c82 <HAL_TIM_ConfigClockSource+0x1ae>
 8008b60:	4a58      	ldr	r2, [pc, #352]	; (8008cc4 <HAL_TIM_ConfigClockSource+0x1f0>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	f200 8096 	bhi.w	8008c94 <HAL_TIM_ConfigClockSource+0x1c0>
 8008b68:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008b6c:	f000 8089 	beq.w	8008c82 <HAL_TIM_ConfigClockSource+0x1ae>
 8008b70:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008b74:	f200 808e 	bhi.w	8008c94 <HAL_TIM_ConfigClockSource+0x1c0>
 8008b78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b7c:	d03e      	beq.n	8008bfc <HAL_TIM_ConfigClockSource+0x128>
 8008b7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b82:	f200 8087 	bhi.w	8008c94 <HAL_TIM_ConfigClockSource+0x1c0>
 8008b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b8a:	f000 8086 	beq.w	8008c9a <HAL_TIM_ConfigClockSource+0x1c6>
 8008b8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b92:	d87f      	bhi.n	8008c94 <HAL_TIM_ConfigClockSource+0x1c0>
 8008b94:	2b70      	cmp	r3, #112	; 0x70
 8008b96:	d01a      	beq.n	8008bce <HAL_TIM_ConfigClockSource+0xfa>
 8008b98:	2b70      	cmp	r3, #112	; 0x70
 8008b9a:	d87b      	bhi.n	8008c94 <HAL_TIM_ConfigClockSource+0x1c0>
 8008b9c:	2b60      	cmp	r3, #96	; 0x60
 8008b9e:	d050      	beq.n	8008c42 <HAL_TIM_ConfigClockSource+0x16e>
 8008ba0:	2b60      	cmp	r3, #96	; 0x60
 8008ba2:	d877      	bhi.n	8008c94 <HAL_TIM_ConfigClockSource+0x1c0>
 8008ba4:	2b50      	cmp	r3, #80	; 0x50
 8008ba6:	d03c      	beq.n	8008c22 <HAL_TIM_ConfigClockSource+0x14e>
 8008ba8:	2b50      	cmp	r3, #80	; 0x50
 8008baa:	d873      	bhi.n	8008c94 <HAL_TIM_ConfigClockSource+0x1c0>
 8008bac:	2b40      	cmp	r3, #64	; 0x40
 8008bae:	d058      	beq.n	8008c62 <HAL_TIM_ConfigClockSource+0x18e>
 8008bb0:	2b40      	cmp	r3, #64	; 0x40
 8008bb2:	d86f      	bhi.n	8008c94 <HAL_TIM_ConfigClockSource+0x1c0>
 8008bb4:	2b30      	cmp	r3, #48	; 0x30
 8008bb6:	d064      	beq.n	8008c82 <HAL_TIM_ConfigClockSource+0x1ae>
 8008bb8:	2b30      	cmp	r3, #48	; 0x30
 8008bba:	d86b      	bhi.n	8008c94 <HAL_TIM_ConfigClockSource+0x1c0>
 8008bbc:	2b20      	cmp	r3, #32
 8008bbe:	d060      	beq.n	8008c82 <HAL_TIM_ConfigClockSource+0x1ae>
 8008bc0:	2b20      	cmp	r3, #32
 8008bc2:	d867      	bhi.n	8008c94 <HAL_TIM_ConfigClockSource+0x1c0>
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d05c      	beq.n	8008c82 <HAL_TIM_ConfigClockSource+0x1ae>
 8008bc8:	2b10      	cmp	r3, #16
 8008bca:	d05a      	beq.n	8008c82 <HAL_TIM_ConfigClockSource+0x1ae>
 8008bcc:	e062      	b.n	8008c94 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6818      	ldr	r0, [r3, #0]
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	6899      	ldr	r1, [r3, #8]
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	685a      	ldr	r2, [r3, #4]
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	68db      	ldr	r3, [r3, #12]
 8008bde:	f000 fca7 	bl	8009530 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008bf0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	68ba      	ldr	r2, [r7, #8]
 8008bf8:	609a      	str	r2, [r3, #8]
      break;
 8008bfa:	e04f      	b.n	8008c9c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6818      	ldr	r0, [r3, #0]
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	6899      	ldr	r1, [r3, #8]
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	685a      	ldr	r2, [r3, #4]
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	68db      	ldr	r3, [r3, #12]
 8008c0c:	f000 fc90 	bl	8009530 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	689a      	ldr	r2, [r3, #8]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008c1e:	609a      	str	r2, [r3, #8]
      break;
 8008c20:	e03c      	b.n	8008c9c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6818      	ldr	r0, [r3, #0]
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	6859      	ldr	r1, [r3, #4]
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	68db      	ldr	r3, [r3, #12]
 8008c2e:	461a      	mov	r2, r3
 8008c30:	f000 fc02 	bl	8009438 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	2150      	movs	r1, #80	; 0x50
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f000 fc5b 	bl	80094f6 <TIM_ITRx_SetConfig>
      break;
 8008c40:	e02c      	b.n	8008c9c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6818      	ldr	r0, [r3, #0]
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	6859      	ldr	r1, [r3, #4]
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	68db      	ldr	r3, [r3, #12]
 8008c4e:	461a      	mov	r2, r3
 8008c50:	f000 fc21 	bl	8009496 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	2160      	movs	r1, #96	; 0x60
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f000 fc4b 	bl	80094f6 <TIM_ITRx_SetConfig>
      break;
 8008c60:	e01c      	b.n	8008c9c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6818      	ldr	r0, [r3, #0]
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	6859      	ldr	r1, [r3, #4]
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	68db      	ldr	r3, [r3, #12]
 8008c6e:	461a      	mov	r2, r3
 8008c70:	f000 fbe2 	bl	8009438 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	2140      	movs	r1, #64	; 0x40
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f000 fc3b 	bl	80094f6 <TIM_ITRx_SetConfig>
      break;
 8008c80:	e00c      	b.n	8008c9c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681a      	ldr	r2, [r3, #0]
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	4610      	mov	r0, r2
 8008c8e:	f000 fc32 	bl	80094f6 <TIM_ITRx_SetConfig>
      break;
 8008c92:	e003      	b.n	8008c9c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8008c94:	2301      	movs	r3, #1
 8008c96:	73fb      	strb	r3, [r7, #15]
      break;
 8008c98:	e000      	b.n	8008c9c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8008c9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3710      	adds	r7, #16
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}
 8008cb6:	bf00      	nop
 8008cb8:	00100070 	.word	0x00100070
 8008cbc:	00100040 	.word	0x00100040
 8008cc0:	00100030 	.word	0x00100030
 8008cc4:	00100020 	.word	0x00100020

08008cc8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b083      	sub	sp, #12
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008cd0:	bf00      	nop
 8008cd2:	370c      	adds	r7, #12
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr

08008cdc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b083      	sub	sp, #12
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008ce4:	bf00      	nop
 8008ce6:	370c      	adds	r7, #12
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr

08008cf0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b083      	sub	sp, #12
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008cf8:	bf00      	nop
 8008cfa:	370c      	adds	r7, #12
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr

08008d04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b083      	sub	sp, #12
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008d0c:	bf00      	nop
 8008d0e:	370c      	adds	r7, #12
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr

08008d18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b083      	sub	sp, #12
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008d20:	bf00      	nop
 8008d22:	370c      	adds	r7, #12
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr

08008d2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b085      	sub	sp, #20
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	4a3c      	ldr	r2, [pc, #240]	; (8008e30 <TIM_Base_SetConfig+0x104>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d00f      	beq.n	8008d64 <TIM_Base_SetConfig+0x38>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d4a:	d00b      	beq.n	8008d64 <TIM_Base_SetConfig+0x38>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	4a39      	ldr	r2, [pc, #228]	; (8008e34 <TIM_Base_SetConfig+0x108>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d007      	beq.n	8008d64 <TIM_Base_SetConfig+0x38>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	4a38      	ldr	r2, [pc, #224]	; (8008e38 <TIM_Base_SetConfig+0x10c>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d003      	beq.n	8008d64 <TIM_Base_SetConfig+0x38>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	4a37      	ldr	r2, [pc, #220]	; (8008e3c <TIM_Base_SetConfig+0x110>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d108      	bne.n	8008d76 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	685b      	ldr	r3, [r3, #4]
 8008d70:	68fa      	ldr	r2, [r7, #12]
 8008d72:	4313      	orrs	r3, r2
 8008d74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	4a2d      	ldr	r2, [pc, #180]	; (8008e30 <TIM_Base_SetConfig+0x104>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d01b      	beq.n	8008db6 <TIM_Base_SetConfig+0x8a>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d84:	d017      	beq.n	8008db6 <TIM_Base_SetConfig+0x8a>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	4a2a      	ldr	r2, [pc, #168]	; (8008e34 <TIM_Base_SetConfig+0x108>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d013      	beq.n	8008db6 <TIM_Base_SetConfig+0x8a>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	4a29      	ldr	r2, [pc, #164]	; (8008e38 <TIM_Base_SetConfig+0x10c>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d00f      	beq.n	8008db6 <TIM_Base_SetConfig+0x8a>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	4a28      	ldr	r2, [pc, #160]	; (8008e3c <TIM_Base_SetConfig+0x110>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d00b      	beq.n	8008db6 <TIM_Base_SetConfig+0x8a>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	4a27      	ldr	r2, [pc, #156]	; (8008e40 <TIM_Base_SetConfig+0x114>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d007      	beq.n	8008db6 <TIM_Base_SetConfig+0x8a>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	4a26      	ldr	r2, [pc, #152]	; (8008e44 <TIM_Base_SetConfig+0x118>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d003      	beq.n	8008db6 <TIM_Base_SetConfig+0x8a>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	4a25      	ldr	r2, [pc, #148]	; (8008e48 <TIM_Base_SetConfig+0x11c>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d108      	bne.n	8008dc8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008dbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	68db      	ldr	r3, [r3, #12]
 8008dc2:	68fa      	ldr	r2, [r7, #12]
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	695b      	ldr	r3, [r3, #20]
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	68fa      	ldr	r2, [r7, #12]
 8008dda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	689a      	ldr	r2, [r3, #8]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	4a10      	ldr	r2, [pc, #64]	; (8008e30 <TIM_Base_SetConfig+0x104>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d00f      	beq.n	8008e14 <TIM_Base_SetConfig+0xe8>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	4a11      	ldr	r2, [pc, #68]	; (8008e3c <TIM_Base_SetConfig+0x110>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d00b      	beq.n	8008e14 <TIM_Base_SetConfig+0xe8>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	4a10      	ldr	r2, [pc, #64]	; (8008e40 <TIM_Base_SetConfig+0x114>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d007      	beq.n	8008e14 <TIM_Base_SetConfig+0xe8>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	4a0f      	ldr	r2, [pc, #60]	; (8008e44 <TIM_Base_SetConfig+0x118>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d003      	beq.n	8008e14 <TIM_Base_SetConfig+0xe8>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	4a0e      	ldr	r2, [pc, #56]	; (8008e48 <TIM_Base_SetConfig+0x11c>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d103      	bne.n	8008e1c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	691a      	ldr	r2, [r3, #16]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	615a      	str	r2, [r3, #20]
}
 8008e22:	bf00      	nop
 8008e24:	3714      	adds	r7, #20
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr
 8008e2e:	bf00      	nop
 8008e30:	40012c00 	.word	0x40012c00
 8008e34:	40000400 	.word	0x40000400
 8008e38:	40000800 	.word	0x40000800
 8008e3c:	40013400 	.word	0x40013400
 8008e40:	40014000 	.word	0x40014000
 8008e44:	40014400 	.word	0x40014400
 8008e48:	40014800 	.word	0x40014800

08008e4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b087      	sub	sp, #28
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6a1b      	ldr	r3, [r3, #32]
 8008e5a:	f023 0201 	bic.w	r2, r3, #1
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6a1b      	ldr	r3, [r3, #32]
 8008e66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	685b      	ldr	r3, [r3, #4]
 8008e6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	699b      	ldr	r3, [r3, #24]
 8008e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f023 0303 	bic.w	r3, r3, #3
 8008e86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	68fa      	ldr	r2, [r7, #12]
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	f023 0302 	bic.w	r3, r3, #2
 8008e98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	689b      	ldr	r3, [r3, #8]
 8008e9e:	697a      	ldr	r2, [r7, #20]
 8008ea0:	4313      	orrs	r3, r2
 8008ea2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	4a2c      	ldr	r2, [pc, #176]	; (8008f58 <TIM_OC1_SetConfig+0x10c>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d00f      	beq.n	8008ecc <TIM_OC1_SetConfig+0x80>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	4a2b      	ldr	r2, [pc, #172]	; (8008f5c <TIM_OC1_SetConfig+0x110>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d00b      	beq.n	8008ecc <TIM_OC1_SetConfig+0x80>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	4a2a      	ldr	r2, [pc, #168]	; (8008f60 <TIM_OC1_SetConfig+0x114>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d007      	beq.n	8008ecc <TIM_OC1_SetConfig+0x80>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	4a29      	ldr	r2, [pc, #164]	; (8008f64 <TIM_OC1_SetConfig+0x118>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d003      	beq.n	8008ecc <TIM_OC1_SetConfig+0x80>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	4a28      	ldr	r2, [pc, #160]	; (8008f68 <TIM_OC1_SetConfig+0x11c>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d10c      	bne.n	8008ee6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	f023 0308 	bic.w	r3, r3, #8
 8008ed2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	68db      	ldr	r3, [r3, #12]
 8008ed8:	697a      	ldr	r2, [r7, #20]
 8008eda:	4313      	orrs	r3, r2
 8008edc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	f023 0304 	bic.w	r3, r3, #4
 8008ee4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	4a1b      	ldr	r2, [pc, #108]	; (8008f58 <TIM_OC1_SetConfig+0x10c>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d00f      	beq.n	8008f0e <TIM_OC1_SetConfig+0xc2>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	4a1a      	ldr	r2, [pc, #104]	; (8008f5c <TIM_OC1_SetConfig+0x110>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d00b      	beq.n	8008f0e <TIM_OC1_SetConfig+0xc2>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	4a19      	ldr	r2, [pc, #100]	; (8008f60 <TIM_OC1_SetConfig+0x114>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d007      	beq.n	8008f0e <TIM_OC1_SetConfig+0xc2>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	4a18      	ldr	r2, [pc, #96]	; (8008f64 <TIM_OC1_SetConfig+0x118>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d003      	beq.n	8008f0e <TIM_OC1_SetConfig+0xc2>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	4a17      	ldr	r2, [pc, #92]	; (8008f68 <TIM_OC1_SetConfig+0x11c>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d111      	bne.n	8008f32 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008f1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	695b      	ldr	r3, [r3, #20]
 8008f22:	693a      	ldr	r2, [r7, #16]
 8008f24:	4313      	orrs	r3, r2
 8008f26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	699b      	ldr	r3, [r3, #24]
 8008f2c:	693a      	ldr	r2, [r7, #16]
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	693a      	ldr	r2, [r7, #16]
 8008f36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	68fa      	ldr	r2, [r7, #12]
 8008f3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	685a      	ldr	r2, [r3, #4]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	697a      	ldr	r2, [r7, #20]
 8008f4a:	621a      	str	r2, [r3, #32]
}
 8008f4c:	bf00      	nop
 8008f4e:	371c      	adds	r7, #28
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr
 8008f58:	40012c00 	.word	0x40012c00
 8008f5c:	40013400 	.word	0x40013400
 8008f60:	40014000 	.word	0x40014000
 8008f64:	40014400 	.word	0x40014400
 8008f68:	40014800 	.word	0x40014800

08008f6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b087      	sub	sp, #28
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6a1b      	ldr	r3, [r3, #32]
 8008f7a:	f023 0210 	bic.w	r2, r3, #16
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6a1b      	ldr	r3, [r3, #32]
 8008f86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	699b      	ldr	r3, [r3, #24]
 8008f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008f9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	021b      	lsls	r3, r3, #8
 8008fae:	68fa      	ldr	r2, [r7, #12]
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	f023 0320 	bic.w	r3, r3, #32
 8008fba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	011b      	lsls	r3, r3, #4
 8008fc2:	697a      	ldr	r2, [r7, #20]
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	4a28      	ldr	r2, [pc, #160]	; (800906c <TIM_OC2_SetConfig+0x100>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d003      	beq.n	8008fd8 <TIM_OC2_SetConfig+0x6c>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	4a27      	ldr	r2, [pc, #156]	; (8009070 <TIM_OC2_SetConfig+0x104>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d10d      	bne.n	8008ff4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008fde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	68db      	ldr	r3, [r3, #12]
 8008fe4:	011b      	lsls	r3, r3, #4
 8008fe6:	697a      	ldr	r2, [r7, #20]
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ff2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	4a1d      	ldr	r2, [pc, #116]	; (800906c <TIM_OC2_SetConfig+0x100>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d00f      	beq.n	800901c <TIM_OC2_SetConfig+0xb0>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	4a1c      	ldr	r2, [pc, #112]	; (8009070 <TIM_OC2_SetConfig+0x104>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d00b      	beq.n	800901c <TIM_OC2_SetConfig+0xb0>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	4a1b      	ldr	r2, [pc, #108]	; (8009074 <TIM_OC2_SetConfig+0x108>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d007      	beq.n	800901c <TIM_OC2_SetConfig+0xb0>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	4a1a      	ldr	r2, [pc, #104]	; (8009078 <TIM_OC2_SetConfig+0x10c>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d003      	beq.n	800901c <TIM_OC2_SetConfig+0xb0>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	4a19      	ldr	r2, [pc, #100]	; (800907c <TIM_OC2_SetConfig+0x110>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d113      	bne.n	8009044 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009022:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800902a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	695b      	ldr	r3, [r3, #20]
 8009030:	009b      	lsls	r3, r3, #2
 8009032:	693a      	ldr	r2, [r7, #16]
 8009034:	4313      	orrs	r3, r2
 8009036:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	699b      	ldr	r3, [r3, #24]
 800903c:	009b      	lsls	r3, r3, #2
 800903e:	693a      	ldr	r2, [r7, #16]
 8009040:	4313      	orrs	r3, r2
 8009042:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	693a      	ldr	r2, [r7, #16]
 8009048:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	68fa      	ldr	r2, [r7, #12]
 800904e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	685a      	ldr	r2, [r3, #4]
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	697a      	ldr	r2, [r7, #20]
 800905c:	621a      	str	r2, [r3, #32]
}
 800905e:	bf00      	nop
 8009060:	371c      	adds	r7, #28
 8009062:	46bd      	mov	sp, r7
 8009064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009068:	4770      	bx	lr
 800906a:	bf00      	nop
 800906c:	40012c00 	.word	0x40012c00
 8009070:	40013400 	.word	0x40013400
 8009074:	40014000 	.word	0x40014000
 8009078:	40014400 	.word	0x40014400
 800907c:	40014800 	.word	0x40014800

08009080 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009080:	b480      	push	{r7}
 8009082:	b087      	sub	sp, #28
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6a1b      	ldr	r3, [r3, #32]
 800908e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6a1b      	ldr	r3, [r3, #32]
 800909a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	69db      	ldr	r3, [r3, #28]
 80090a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f023 0303 	bic.w	r3, r3, #3
 80090ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	68fa      	ldr	r2, [r7, #12]
 80090c2:	4313      	orrs	r3, r2
 80090c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80090cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	689b      	ldr	r3, [r3, #8]
 80090d2:	021b      	lsls	r3, r3, #8
 80090d4:	697a      	ldr	r2, [r7, #20]
 80090d6:	4313      	orrs	r3, r2
 80090d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	4a27      	ldr	r2, [pc, #156]	; (800917c <TIM_OC3_SetConfig+0xfc>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d003      	beq.n	80090ea <TIM_OC3_SetConfig+0x6a>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	4a26      	ldr	r2, [pc, #152]	; (8009180 <TIM_OC3_SetConfig+0x100>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d10d      	bne.n	8009106 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80090f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	68db      	ldr	r3, [r3, #12]
 80090f6:	021b      	lsls	r3, r3, #8
 80090f8:	697a      	ldr	r2, [r7, #20]
 80090fa:	4313      	orrs	r3, r2
 80090fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009104:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	4a1c      	ldr	r2, [pc, #112]	; (800917c <TIM_OC3_SetConfig+0xfc>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d00f      	beq.n	800912e <TIM_OC3_SetConfig+0xae>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	4a1b      	ldr	r2, [pc, #108]	; (8009180 <TIM_OC3_SetConfig+0x100>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d00b      	beq.n	800912e <TIM_OC3_SetConfig+0xae>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	4a1a      	ldr	r2, [pc, #104]	; (8009184 <TIM_OC3_SetConfig+0x104>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d007      	beq.n	800912e <TIM_OC3_SetConfig+0xae>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	4a19      	ldr	r2, [pc, #100]	; (8009188 <TIM_OC3_SetConfig+0x108>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d003      	beq.n	800912e <TIM_OC3_SetConfig+0xae>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	4a18      	ldr	r2, [pc, #96]	; (800918c <TIM_OC3_SetConfig+0x10c>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d113      	bne.n	8009156 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009134:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800913c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	695b      	ldr	r3, [r3, #20]
 8009142:	011b      	lsls	r3, r3, #4
 8009144:	693a      	ldr	r2, [r7, #16]
 8009146:	4313      	orrs	r3, r2
 8009148:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	699b      	ldr	r3, [r3, #24]
 800914e:	011b      	lsls	r3, r3, #4
 8009150:	693a      	ldr	r2, [r7, #16]
 8009152:	4313      	orrs	r3, r2
 8009154:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	693a      	ldr	r2, [r7, #16]
 800915a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	68fa      	ldr	r2, [r7, #12]
 8009160:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	685a      	ldr	r2, [r3, #4]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	697a      	ldr	r2, [r7, #20]
 800916e:	621a      	str	r2, [r3, #32]
}
 8009170:	bf00      	nop
 8009172:	371c      	adds	r7, #28
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr
 800917c:	40012c00 	.word	0x40012c00
 8009180:	40013400 	.word	0x40013400
 8009184:	40014000 	.word	0x40014000
 8009188:	40014400 	.word	0x40014400
 800918c:	40014800 	.word	0x40014800

08009190 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009190:	b480      	push	{r7}
 8009192:	b087      	sub	sp, #28
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
 8009198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6a1b      	ldr	r3, [r3, #32]
 800919e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6a1b      	ldr	r3, [r3, #32]
 80091aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	69db      	ldr	r3, [r3, #28]
 80091b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80091be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	021b      	lsls	r3, r3, #8
 80091d2:	68fa      	ldr	r2, [r7, #12]
 80091d4:	4313      	orrs	r3, r2
 80091d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80091de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	689b      	ldr	r3, [r3, #8]
 80091e4:	031b      	lsls	r3, r3, #12
 80091e6:	697a      	ldr	r2, [r7, #20]
 80091e8:	4313      	orrs	r3, r2
 80091ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	4a28      	ldr	r2, [pc, #160]	; (8009290 <TIM_OC4_SetConfig+0x100>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d003      	beq.n	80091fc <TIM_OC4_SetConfig+0x6c>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	4a27      	ldr	r2, [pc, #156]	; (8009294 <TIM_OC4_SetConfig+0x104>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d10d      	bne.n	8009218 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009202:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	68db      	ldr	r3, [r3, #12]
 8009208:	031b      	lsls	r3, r3, #12
 800920a:	697a      	ldr	r2, [r7, #20]
 800920c:	4313      	orrs	r3, r2
 800920e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009216:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	4a1d      	ldr	r2, [pc, #116]	; (8009290 <TIM_OC4_SetConfig+0x100>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d00f      	beq.n	8009240 <TIM_OC4_SetConfig+0xb0>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	4a1c      	ldr	r2, [pc, #112]	; (8009294 <TIM_OC4_SetConfig+0x104>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d00b      	beq.n	8009240 <TIM_OC4_SetConfig+0xb0>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	4a1b      	ldr	r2, [pc, #108]	; (8009298 <TIM_OC4_SetConfig+0x108>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d007      	beq.n	8009240 <TIM_OC4_SetConfig+0xb0>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	4a1a      	ldr	r2, [pc, #104]	; (800929c <TIM_OC4_SetConfig+0x10c>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d003      	beq.n	8009240 <TIM_OC4_SetConfig+0xb0>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	4a19      	ldr	r2, [pc, #100]	; (80092a0 <TIM_OC4_SetConfig+0x110>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d113      	bne.n	8009268 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009246:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800924e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	695b      	ldr	r3, [r3, #20]
 8009254:	019b      	lsls	r3, r3, #6
 8009256:	693a      	ldr	r2, [r7, #16]
 8009258:	4313      	orrs	r3, r2
 800925a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	699b      	ldr	r3, [r3, #24]
 8009260:	019b      	lsls	r3, r3, #6
 8009262:	693a      	ldr	r2, [r7, #16]
 8009264:	4313      	orrs	r3, r2
 8009266:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	693a      	ldr	r2, [r7, #16]
 800926c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	68fa      	ldr	r2, [r7, #12]
 8009272:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	685a      	ldr	r2, [r3, #4]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	697a      	ldr	r2, [r7, #20]
 8009280:	621a      	str	r2, [r3, #32]
}
 8009282:	bf00      	nop
 8009284:	371c      	adds	r7, #28
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr
 800928e:	bf00      	nop
 8009290:	40012c00 	.word	0x40012c00
 8009294:	40013400 	.word	0x40013400
 8009298:	40014000 	.word	0x40014000
 800929c:	40014400 	.word	0x40014400
 80092a0:	40014800 	.word	0x40014800

080092a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b087      	sub	sp, #28
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6a1b      	ldr	r3, [r3, #32]
 80092b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6a1b      	ldr	r3, [r3, #32]
 80092be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80092d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	68fa      	ldr	r2, [r7, #12]
 80092de:	4313      	orrs	r3, r2
 80092e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80092e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	689b      	ldr	r3, [r3, #8]
 80092ee:	041b      	lsls	r3, r3, #16
 80092f0:	693a      	ldr	r2, [r7, #16]
 80092f2:	4313      	orrs	r3, r2
 80092f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	4a17      	ldr	r2, [pc, #92]	; (8009358 <TIM_OC5_SetConfig+0xb4>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d00f      	beq.n	800931e <TIM_OC5_SetConfig+0x7a>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	4a16      	ldr	r2, [pc, #88]	; (800935c <TIM_OC5_SetConfig+0xb8>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d00b      	beq.n	800931e <TIM_OC5_SetConfig+0x7a>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	4a15      	ldr	r2, [pc, #84]	; (8009360 <TIM_OC5_SetConfig+0xbc>)
 800930a:	4293      	cmp	r3, r2
 800930c:	d007      	beq.n	800931e <TIM_OC5_SetConfig+0x7a>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	4a14      	ldr	r2, [pc, #80]	; (8009364 <TIM_OC5_SetConfig+0xc0>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d003      	beq.n	800931e <TIM_OC5_SetConfig+0x7a>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	4a13      	ldr	r2, [pc, #76]	; (8009368 <TIM_OC5_SetConfig+0xc4>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d109      	bne.n	8009332 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009324:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	695b      	ldr	r3, [r3, #20]
 800932a:	021b      	lsls	r3, r3, #8
 800932c:	697a      	ldr	r2, [r7, #20]
 800932e:	4313      	orrs	r3, r2
 8009330:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	697a      	ldr	r2, [r7, #20]
 8009336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	68fa      	ldr	r2, [r7, #12]
 800933c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	685a      	ldr	r2, [r3, #4]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	693a      	ldr	r2, [r7, #16]
 800934a:	621a      	str	r2, [r3, #32]
}
 800934c:	bf00      	nop
 800934e:	371c      	adds	r7, #28
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr
 8009358:	40012c00 	.word	0x40012c00
 800935c:	40013400 	.word	0x40013400
 8009360:	40014000 	.word	0x40014000
 8009364:	40014400 	.word	0x40014400
 8009368:	40014800 	.word	0x40014800

0800936c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800936c:	b480      	push	{r7}
 800936e:	b087      	sub	sp, #28
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6a1b      	ldr	r3, [r3, #32]
 800937a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6a1b      	ldr	r3, [r3, #32]
 8009386:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	685b      	ldr	r3, [r3, #4]
 800938c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800939a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800939e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	021b      	lsls	r3, r3, #8
 80093a6:	68fa      	ldr	r2, [r7, #12]
 80093a8:	4313      	orrs	r3, r2
 80093aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80093b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	689b      	ldr	r3, [r3, #8]
 80093b8:	051b      	lsls	r3, r3, #20
 80093ba:	693a      	ldr	r2, [r7, #16]
 80093bc:	4313      	orrs	r3, r2
 80093be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	4a18      	ldr	r2, [pc, #96]	; (8009424 <TIM_OC6_SetConfig+0xb8>)
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d00f      	beq.n	80093e8 <TIM_OC6_SetConfig+0x7c>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	4a17      	ldr	r2, [pc, #92]	; (8009428 <TIM_OC6_SetConfig+0xbc>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d00b      	beq.n	80093e8 <TIM_OC6_SetConfig+0x7c>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	4a16      	ldr	r2, [pc, #88]	; (800942c <TIM_OC6_SetConfig+0xc0>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d007      	beq.n	80093e8 <TIM_OC6_SetConfig+0x7c>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	4a15      	ldr	r2, [pc, #84]	; (8009430 <TIM_OC6_SetConfig+0xc4>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d003      	beq.n	80093e8 <TIM_OC6_SetConfig+0x7c>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	4a14      	ldr	r2, [pc, #80]	; (8009434 <TIM_OC6_SetConfig+0xc8>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d109      	bne.n	80093fc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80093ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	695b      	ldr	r3, [r3, #20]
 80093f4:	029b      	lsls	r3, r3, #10
 80093f6:	697a      	ldr	r2, [r7, #20]
 80093f8:	4313      	orrs	r3, r2
 80093fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	697a      	ldr	r2, [r7, #20]
 8009400:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	68fa      	ldr	r2, [r7, #12]
 8009406:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	685a      	ldr	r2, [r3, #4]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	693a      	ldr	r2, [r7, #16]
 8009414:	621a      	str	r2, [r3, #32]
}
 8009416:	bf00      	nop
 8009418:	371c      	adds	r7, #28
 800941a:	46bd      	mov	sp, r7
 800941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009420:	4770      	bx	lr
 8009422:	bf00      	nop
 8009424:	40012c00 	.word	0x40012c00
 8009428:	40013400 	.word	0x40013400
 800942c:	40014000 	.word	0x40014000
 8009430:	40014400 	.word	0x40014400
 8009434:	40014800 	.word	0x40014800

08009438 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009438:	b480      	push	{r7}
 800943a:	b087      	sub	sp, #28
 800943c:	af00      	add	r7, sp, #0
 800943e:	60f8      	str	r0, [r7, #12]
 8009440:	60b9      	str	r1, [r7, #8]
 8009442:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	6a1b      	ldr	r3, [r3, #32]
 8009448:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	6a1b      	ldr	r3, [r3, #32]
 800944e:	f023 0201 	bic.w	r2, r3, #1
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	699b      	ldr	r3, [r3, #24]
 800945a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009462:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	011b      	lsls	r3, r3, #4
 8009468:	693a      	ldr	r2, [r7, #16]
 800946a:	4313      	orrs	r3, r2
 800946c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	f023 030a 	bic.w	r3, r3, #10
 8009474:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009476:	697a      	ldr	r2, [r7, #20]
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	4313      	orrs	r3, r2
 800947c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	693a      	ldr	r2, [r7, #16]
 8009482:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	697a      	ldr	r2, [r7, #20]
 8009488:	621a      	str	r2, [r3, #32]
}
 800948a:	bf00      	nop
 800948c:	371c      	adds	r7, #28
 800948e:	46bd      	mov	sp, r7
 8009490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009494:	4770      	bx	lr

08009496 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009496:	b480      	push	{r7}
 8009498:	b087      	sub	sp, #28
 800949a:	af00      	add	r7, sp, #0
 800949c:	60f8      	str	r0, [r7, #12]
 800949e:	60b9      	str	r1, [r7, #8]
 80094a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	6a1b      	ldr	r3, [r3, #32]
 80094a6:	f023 0210 	bic.w	r2, r3, #16
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	699b      	ldr	r3, [r3, #24]
 80094b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	6a1b      	ldr	r3, [r3, #32]
 80094b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80094c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	031b      	lsls	r3, r3, #12
 80094c6:	697a      	ldr	r2, [r7, #20]
 80094c8:	4313      	orrs	r3, r2
 80094ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80094d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	011b      	lsls	r3, r3, #4
 80094d8:	693a      	ldr	r2, [r7, #16]
 80094da:	4313      	orrs	r3, r2
 80094dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	697a      	ldr	r2, [r7, #20]
 80094e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	693a      	ldr	r2, [r7, #16]
 80094e8:	621a      	str	r2, [r3, #32]
}
 80094ea:	bf00      	nop
 80094ec:	371c      	adds	r7, #28
 80094ee:	46bd      	mov	sp, r7
 80094f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f4:	4770      	bx	lr

080094f6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80094f6:	b480      	push	{r7}
 80094f8:	b085      	sub	sp, #20
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	6078      	str	r0, [r7, #4]
 80094fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	689b      	ldr	r3, [r3, #8]
 8009504:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800950c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009510:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009512:	683a      	ldr	r2, [r7, #0]
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	4313      	orrs	r3, r2
 8009518:	f043 0307 	orr.w	r3, r3, #7
 800951c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	68fa      	ldr	r2, [r7, #12]
 8009522:	609a      	str	r2, [r3, #8]
}
 8009524:	bf00      	nop
 8009526:	3714      	adds	r7, #20
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr

08009530 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009530:	b480      	push	{r7}
 8009532:	b087      	sub	sp, #28
 8009534:	af00      	add	r7, sp, #0
 8009536:	60f8      	str	r0, [r7, #12]
 8009538:	60b9      	str	r1, [r7, #8]
 800953a:	607a      	str	r2, [r7, #4]
 800953c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	689b      	ldr	r3, [r3, #8]
 8009542:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800954a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	021a      	lsls	r2, r3, #8
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	431a      	orrs	r2, r3
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	4313      	orrs	r3, r2
 8009558:	697a      	ldr	r2, [r7, #20]
 800955a:	4313      	orrs	r3, r2
 800955c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	697a      	ldr	r2, [r7, #20]
 8009562:	609a      	str	r2, [r3, #8]
}
 8009564:	bf00      	nop
 8009566:	371c      	adds	r7, #28
 8009568:	46bd      	mov	sp, r7
 800956a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956e:	4770      	bx	lr

08009570 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009570:	b480      	push	{r7}
 8009572:	b087      	sub	sp, #28
 8009574:	af00      	add	r7, sp, #0
 8009576:	60f8      	str	r0, [r7, #12]
 8009578:	60b9      	str	r1, [r7, #8]
 800957a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	f003 031f 	and.w	r3, r3, #31
 8009582:	2201      	movs	r2, #1
 8009584:	fa02 f303 	lsl.w	r3, r2, r3
 8009588:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	6a1a      	ldr	r2, [r3, #32]
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	43db      	mvns	r3, r3
 8009592:	401a      	ands	r2, r3
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	6a1a      	ldr	r2, [r3, #32]
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	f003 031f 	and.w	r3, r3, #31
 80095a2:	6879      	ldr	r1, [r7, #4]
 80095a4:	fa01 f303 	lsl.w	r3, r1, r3
 80095a8:	431a      	orrs	r2, r3
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	621a      	str	r2, [r3, #32]
}
 80095ae:	bf00      	nop
 80095b0:	371c      	adds	r7, #28
 80095b2:	46bd      	mov	sp, r7
 80095b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b8:	4770      	bx	lr
	...

080095bc <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b084      	sub	sp, #16
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d109      	bne.n	80095e0 <HAL_TIMEx_PWMN_Start+0x24>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80095d2:	b2db      	uxtb	r3, r3
 80095d4:	2b01      	cmp	r3, #1
 80095d6:	bf14      	ite	ne
 80095d8:	2301      	movne	r3, #1
 80095da:	2300      	moveq	r3, #0
 80095dc:	b2db      	uxtb	r3, r3
 80095de:	e022      	b.n	8009626 <HAL_TIMEx_PWMN_Start+0x6a>
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	2b04      	cmp	r3, #4
 80095e4:	d109      	bne.n	80095fa <HAL_TIMEx_PWMN_Start+0x3e>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80095ec:	b2db      	uxtb	r3, r3
 80095ee:	2b01      	cmp	r3, #1
 80095f0:	bf14      	ite	ne
 80095f2:	2301      	movne	r3, #1
 80095f4:	2300      	moveq	r3, #0
 80095f6:	b2db      	uxtb	r3, r3
 80095f8:	e015      	b.n	8009626 <HAL_TIMEx_PWMN_Start+0x6a>
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	2b08      	cmp	r3, #8
 80095fe:	d109      	bne.n	8009614 <HAL_TIMEx_PWMN_Start+0x58>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009606:	b2db      	uxtb	r3, r3
 8009608:	2b01      	cmp	r3, #1
 800960a:	bf14      	ite	ne
 800960c:	2301      	movne	r3, #1
 800960e:	2300      	moveq	r3, #0
 8009610:	b2db      	uxtb	r3, r3
 8009612:	e008      	b.n	8009626 <HAL_TIMEx_PWMN_Start+0x6a>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800961a:	b2db      	uxtb	r3, r3
 800961c:	2b01      	cmp	r3, #1
 800961e:	bf14      	ite	ne
 8009620:	2301      	movne	r3, #1
 8009622:	2300      	moveq	r3, #0
 8009624:	b2db      	uxtb	r3, r3
 8009626:	2b00      	cmp	r3, #0
 8009628:	d001      	beq.n	800962e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800962a:	2301      	movs	r3, #1
 800962c:	e069      	b.n	8009702 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d104      	bne.n	800963e <HAL_TIMEx_PWMN_Start+0x82>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2202      	movs	r2, #2
 8009638:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800963c:	e013      	b.n	8009666 <HAL_TIMEx_PWMN_Start+0xaa>
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	2b04      	cmp	r3, #4
 8009642:	d104      	bne.n	800964e <HAL_TIMEx_PWMN_Start+0x92>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2202      	movs	r2, #2
 8009648:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800964c:	e00b      	b.n	8009666 <HAL_TIMEx_PWMN_Start+0xaa>
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	2b08      	cmp	r3, #8
 8009652:	d104      	bne.n	800965e <HAL_TIMEx_PWMN_Start+0xa2>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2202      	movs	r2, #2
 8009658:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800965c:	e003      	b.n	8009666 <HAL_TIMEx_PWMN_Start+0xaa>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2202      	movs	r2, #2
 8009662:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	2204      	movs	r2, #4
 800966c:	6839      	ldr	r1, [r7, #0]
 800966e:	4618      	mov	r0, r3
 8009670:	f000 fa1e 	bl	8009ab0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009682:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4a20      	ldr	r2, [pc, #128]	; (800970c <HAL_TIMEx_PWMN_Start+0x150>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d018      	beq.n	80096c0 <HAL_TIMEx_PWMN_Start+0x104>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009696:	d013      	beq.n	80096c0 <HAL_TIMEx_PWMN_Start+0x104>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4a1c      	ldr	r2, [pc, #112]	; (8009710 <HAL_TIMEx_PWMN_Start+0x154>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d00e      	beq.n	80096c0 <HAL_TIMEx_PWMN_Start+0x104>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4a1b      	ldr	r2, [pc, #108]	; (8009714 <HAL_TIMEx_PWMN_Start+0x158>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d009      	beq.n	80096c0 <HAL_TIMEx_PWMN_Start+0x104>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	4a19      	ldr	r2, [pc, #100]	; (8009718 <HAL_TIMEx_PWMN_Start+0x15c>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d004      	beq.n	80096c0 <HAL_TIMEx_PWMN_Start+0x104>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4a18      	ldr	r2, [pc, #96]	; (800971c <HAL_TIMEx_PWMN_Start+0x160>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d115      	bne.n	80096ec <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	689a      	ldr	r2, [r3, #8]
 80096c6:	4b16      	ldr	r3, [pc, #88]	; (8009720 <HAL_TIMEx_PWMN_Start+0x164>)
 80096c8:	4013      	ands	r3, r2
 80096ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	2b06      	cmp	r3, #6
 80096d0:	d015      	beq.n	80096fe <HAL_TIMEx_PWMN_Start+0x142>
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096d8:	d011      	beq.n	80096fe <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	681a      	ldr	r2, [r3, #0]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f042 0201 	orr.w	r2, r2, #1
 80096e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096ea:	e008      	b.n	80096fe <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	681a      	ldr	r2, [r3, #0]
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f042 0201 	orr.w	r2, r2, #1
 80096fa:	601a      	str	r2, [r3, #0]
 80096fc:	e000      	b.n	8009700 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009700:	2300      	movs	r3, #0
}
 8009702:	4618      	mov	r0, r3
 8009704:	3710      	adds	r7, #16
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}
 800970a:	bf00      	nop
 800970c:	40012c00 	.word	0x40012c00
 8009710:	40000400 	.word	0x40000400
 8009714:	40000800 	.word	0x40000800
 8009718:	40013400 	.word	0x40013400
 800971c:	40014000 	.word	0x40014000
 8009720:	00010007 	.word	0x00010007

08009724 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b082      	sub	sp, #8
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	2200      	movs	r2, #0
 8009734:	6839      	ldr	r1, [r7, #0]
 8009736:	4618      	mov	r0, r3
 8009738:	f000 f9ba 	bl	8009ab0 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	6a1a      	ldr	r2, [r3, #32]
 8009742:	f241 1311 	movw	r3, #4369	; 0x1111
 8009746:	4013      	ands	r3, r2
 8009748:	2b00      	cmp	r3, #0
 800974a:	d10f      	bne.n	800976c <HAL_TIMEx_PWMN_Stop+0x48>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	6a1a      	ldr	r2, [r3, #32]
 8009752:	f244 4344 	movw	r3, #17476	; 0x4444
 8009756:	4013      	ands	r3, r2
 8009758:	2b00      	cmp	r3, #0
 800975a:	d107      	bne.n	800976c <HAL_TIMEx_PWMN_Stop+0x48>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800976a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	6a1a      	ldr	r2, [r3, #32]
 8009772:	f241 1311 	movw	r3, #4369	; 0x1111
 8009776:	4013      	ands	r3, r2
 8009778:	2b00      	cmp	r3, #0
 800977a:	d10f      	bne.n	800979c <HAL_TIMEx_PWMN_Stop+0x78>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	6a1a      	ldr	r2, [r3, #32]
 8009782:	f244 4344 	movw	r3, #17476	; 0x4444
 8009786:	4013      	ands	r3, r2
 8009788:	2b00      	cmp	r3, #0
 800978a:	d107      	bne.n	800979c <HAL_TIMEx_PWMN_Stop+0x78>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	681a      	ldr	r2, [r3, #0]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f022 0201 	bic.w	r2, r2, #1
 800979a:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d104      	bne.n	80097ac <HAL_TIMEx_PWMN_Stop+0x88>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2201      	movs	r2, #1
 80097a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097aa:	e013      	b.n	80097d4 <HAL_TIMEx_PWMN_Stop+0xb0>
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	2b04      	cmp	r3, #4
 80097b0:	d104      	bne.n	80097bc <HAL_TIMEx_PWMN_Stop+0x98>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2201      	movs	r2, #1
 80097b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80097ba:	e00b      	b.n	80097d4 <HAL_TIMEx_PWMN_Stop+0xb0>
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	2b08      	cmp	r3, #8
 80097c0:	d104      	bne.n	80097cc <HAL_TIMEx_PWMN_Stop+0xa8>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2201      	movs	r2, #1
 80097c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80097ca:	e003      	b.n	80097d4 <HAL_TIMEx_PWMN_Stop+0xb0>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2201      	movs	r2, #1
 80097d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 80097d4:	2300      	movs	r3, #0
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3708      	adds	r7, #8
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
	...

080097e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b085      	sub	sp, #20
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097f0:	2b01      	cmp	r3, #1
 80097f2:	d101      	bne.n	80097f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80097f4:	2302      	movs	r3, #2
 80097f6:	e065      	b.n	80098c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2201      	movs	r2, #1
 80097fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2202      	movs	r2, #2
 8009804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	685b      	ldr	r3, [r3, #4]
 800980e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	689b      	ldr	r3, [r3, #8]
 8009816:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4a2c      	ldr	r2, [pc, #176]	; (80098d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d004      	beq.n	800982c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4a2b      	ldr	r2, [pc, #172]	; (80098d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d108      	bne.n	800983e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009832:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	68fa      	ldr	r2, [r7, #12]
 800983a:	4313      	orrs	r3, r2
 800983c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009844:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009848:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	68fa      	ldr	r2, [r7, #12]
 8009850:	4313      	orrs	r3, r2
 8009852:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	68fa      	ldr	r2, [r7, #12]
 800985a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4a1b      	ldr	r2, [pc, #108]	; (80098d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d018      	beq.n	8009898 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800986e:	d013      	beq.n	8009898 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4a18      	ldr	r2, [pc, #96]	; (80098d8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d00e      	beq.n	8009898 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	4a17      	ldr	r2, [pc, #92]	; (80098dc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d009      	beq.n	8009898 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4a12      	ldr	r2, [pc, #72]	; (80098d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d004      	beq.n	8009898 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	4a13      	ldr	r2, [pc, #76]	; (80098e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d10c      	bne.n	80098b2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800989e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	689b      	ldr	r3, [r3, #8]
 80098a4:	68ba      	ldr	r2, [r7, #8]
 80098a6:	4313      	orrs	r3, r2
 80098a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	68ba      	ldr	r2, [r7, #8]
 80098b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2201      	movs	r2, #1
 80098b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2200      	movs	r2, #0
 80098be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80098c2:	2300      	movs	r3, #0
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3714      	adds	r7, #20
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr
 80098d0:	40012c00 	.word	0x40012c00
 80098d4:	40013400 	.word	0x40013400
 80098d8:	40000400 	.word	0x40000400
 80098dc:	40000800 	.word	0x40000800
 80098e0:	40014000 	.word	0x40014000

080098e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b085      	sub	sp, #20
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
 80098ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80098ee:	2300      	movs	r3, #0
 80098f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098f8:	2b01      	cmp	r3, #1
 80098fa:	d101      	bne.n	8009900 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80098fc:	2302      	movs	r3, #2
 80098fe:	e087      	b.n	8009a10 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2201      	movs	r2, #1
 8009904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	68db      	ldr	r3, [r3, #12]
 8009912:	4313      	orrs	r3, r2
 8009914:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	689b      	ldr	r3, [r3, #8]
 8009920:	4313      	orrs	r3, r2
 8009922:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	685b      	ldr	r3, [r3, #4]
 800992e:	4313      	orrs	r3, r2
 8009930:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4313      	orrs	r3, r2
 800993e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	691b      	ldr	r3, [r3, #16]
 800994a:	4313      	orrs	r3, r2
 800994c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	695b      	ldr	r3, [r3, #20]
 8009958:	4313      	orrs	r3, r2
 800995a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009966:	4313      	orrs	r3, r2
 8009968:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	699b      	ldr	r3, [r3, #24]
 8009974:	041b      	lsls	r3, r3, #16
 8009976:	4313      	orrs	r3, r2
 8009978:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4a27      	ldr	r2, [pc, #156]	; (8009a1c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d004      	beq.n	800998e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4a25      	ldr	r2, [pc, #148]	; (8009a20 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800998a:	4293      	cmp	r3, r2
 800998c:	d106      	bne.n	800999c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	69db      	ldr	r3, [r3, #28]
 8009998:	4313      	orrs	r3, r2
 800999a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a1e      	ldr	r2, [pc, #120]	; (8009a1c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d004      	beq.n	80099b0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4a1d      	ldr	r2, [pc, #116]	; (8009a20 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d126      	bne.n	80099fe <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ba:	051b      	lsls	r3, r3, #20
 80099bc:	4313      	orrs	r3, r2
 80099be:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	6a1b      	ldr	r3, [r3, #32]
 80099ca:	4313      	orrs	r3, r2
 80099cc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099d8:	4313      	orrs	r3, r2
 80099da:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a0e      	ldr	r2, [pc, #56]	; (8009a1c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d004      	beq.n	80099f0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4a0d      	ldr	r2, [pc, #52]	; (8009a20 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d106      	bne.n	80099fe <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099fa:	4313      	orrs	r3, r2
 80099fc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	68fa      	ldr	r2, [r7, #12]
 8009a04:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009a0e:	2300      	movs	r3, #0
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3714      	adds	r7, #20
 8009a14:	46bd      	mov	sp, r7
 8009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1a:	4770      	bx	lr
 8009a1c:	40012c00 	.word	0x40012c00
 8009a20:	40013400 	.word	0x40013400

08009a24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b083      	sub	sp, #12
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009a2c:	bf00      	nop
 8009a2e:	370c      	adds	r7, #12
 8009a30:	46bd      	mov	sp, r7
 8009a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a36:	4770      	bx	lr

08009a38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b083      	sub	sp, #12
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009a40:	bf00      	nop
 8009a42:	370c      	adds	r7, #12
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr

08009a4c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b083      	sub	sp, #12
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009a54:	bf00      	nop
 8009a56:	370c      	adds	r7, #12
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr

08009a60 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b083      	sub	sp, #12
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009a68:	bf00      	nop
 8009a6a:	370c      	adds	r7, #12
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr

08009a74 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b083      	sub	sp, #12
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009a7c:	bf00      	nop
 8009a7e:	370c      	adds	r7, #12
 8009a80:	46bd      	mov	sp, r7
 8009a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a86:	4770      	bx	lr

08009a88 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b083      	sub	sp, #12
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009a90:	bf00      	nop
 8009a92:	370c      	adds	r7, #12
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr

08009a9c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b083      	sub	sp, #12
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009aa4:	bf00      	nop
 8009aa6:	370c      	adds	r7, #12
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr

08009ab0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b087      	sub	sp, #28
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	60f8      	str	r0, [r7, #12]
 8009ab8:	60b9      	str	r1, [r7, #8]
 8009aba:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	f003 031f 	and.w	r3, r3, #31
 8009ac2:	2204      	movs	r2, #4
 8009ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ac8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	6a1a      	ldr	r2, [r3, #32]
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	43db      	mvns	r3, r3
 8009ad2:	401a      	ands	r2, r3
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	6a1a      	ldr	r2, [r3, #32]
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	f003 031f 	and.w	r3, r3, #31
 8009ae2:	6879      	ldr	r1, [r7, #4]
 8009ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8009ae8:	431a      	orrs	r2, r3
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	621a      	str	r2, [r3, #32]
}
 8009aee:	bf00      	nop
 8009af0:	371c      	adds	r7, #28
 8009af2:	46bd      	mov	sp, r7
 8009af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af8:	4770      	bx	lr

08009afa <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009afa:	b580      	push	{r7, lr}
 8009afc:	b082      	sub	sp, #8
 8009afe:	af00      	add	r7, sp, #0
 8009b00:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d101      	bne.n	8009b0c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b08:	2301      	movs	r3, #1
 8009b0a:	e042      	b.n	8009b92 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d106      	bne.n	8009b24 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f7f9 f936 	bl	8002d90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2224      	movs	r2, #36	; 0x24
 8009b28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	681a      	ldr	r2, [r3, #0]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f022 0201 	bic.w	r2, r2, #1
 8009b3a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f000 fb65 	bl	800a20c <UART_SetConfig>
 8009b42:	4603      	mov	r3, r0
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	d101      	bne.n	8009b4c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009b48:	2301      	movs	r3, #1
 8009b4a:	e022      	b.n	8009b92 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d002      	beq.n	8009b5a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f000 fe25 	bl	800a7a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	685a      	ldr	r2, [r3, #4]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009b68:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	689a      	ldr	r2, [r3, #8]
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009b78:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	681a      	ldr	r2, [r3, #0]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f042 0201 	orr.w	r2, r2, #1
 8009b88:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 feac 	bl	800a8e8 <UART_CheckIdleState>
 8009b90:	4603      	mov	r3, r0
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3708      	adds	r7, #8
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
	...

08009b9c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b0ba      	sub	sp, #232	; 0xe8
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	69db      	ldr	r3, [r3, #28]
 8009baa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	689b      	ldr	r3, [r3, #8]
 8009bbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009bc2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009bc6:	f640 030f 	movw	r3, #2063	; 0x80f
 8009bca:	4013      	ands	r3, r2
 8009bcc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009bd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d11b      	bne.n	8009c10 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bdc:	f003 0320 	and.w	r3, r3, #32
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d015      	beq.n	8009c10 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009be4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009be8:	f003 0320 	and.w	r3, r3, #32
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d105      	bne.n	8009bfc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009bf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d009      	beq.n	8009c10 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	f000 82d6 	beq.w	800a1b2 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	4798      	blx	r3
      }
      return;
 8009c0e:	e2d0      	b.n	800a1b2 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009c10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	f000 811f 	beq.w	8009e58 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009c1a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009c1e:	4b8b      	ldr	r3, [pc, #556]	; (8009e4c <HAL_UART_IRQHandler+0x2b0>)
 8009c20:	4013      	ands	r3, r2
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d106      	bne.n	8009c34 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009c26:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009c2a:	4b89      	ldr	r3, [pc, #548]	; (8009e50 <HAL_UART_IRQHandler+0x2b4>)
 8009c2c:	4013      	ands	r3, r2
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	f000 8112 	beq.w	8009e58 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009c34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c38:	f003 0301 	and.w	r3, r3, #1
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d011      	beq.n	8009c64 <HAL_UART_IRQHandler+0xc8>
 8009c40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d00b      	beq.n	8009c64 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	2201      	movs	r2, #1
 8009c52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c5a:	f043 0201 	orr.w	r2, r3, #1
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c68:	f003 0302 	and.w	r3, r3, #2
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d011      	beq.n	8009c94 <HAL_UART_IRQHandler+0xf8>
 8009c70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c74:	f003 0301 	and.w	r3, r3, #1
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d00b      	beq.n	8009c94 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	2202      	movs	r2, #2
 8009c82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c8a:	f043 0204 	orr.w	r2, r3, #4
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c98:	f003 0304 	and.w	r3, r3, #4
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d011      	beq.n	8009cc4 <HAL_UART_IRQHandler+0x128>
 8009ca0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ca4:	f003 0301 	and.w	r3, r3, #1
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d00b      	beq.n	8009cc4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	2204      	movs	r2, #4
 8009cb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009cba:	f043 0202 	orr.w	r2, r3, #2
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009cc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cc8:	f003 0308 	and.w	r3, r3, #8
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d017      	beq.n	8009d00 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009cd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009cd4:	f003 0320 	and.w	r3, r3, #32
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d105      	bne.n	8009ce8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009cdc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009ce0:	4b5a      	ldr	r3, [pc, #360]	; (8009e4c <HAL_UART_IRQHandler+0x2b0>)
 8009ce2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d00b      	beq.n	8009d00 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	2208      	movs	r2, #8
 8009cee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009cf6:	f043 0208 	orr.w	r2, r3, #8
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009d00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d012      	beq.n	8009d32 <HAL_UART_IRQHandler+0x196>
 8009d0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d00c      	beq.n	8009d32 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009d20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d28:	f043 0220 	orr.w	r2, r3, #32
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	f000 823c 	beq.w	800a1b6 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d42:	f003 0320 	and.w	r3, r3, #32
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d013      	beq.n	8009d72 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009d4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d4e:	f003 0320 	and.w	r3, r3, #32
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d105      	bne.n	8009d62 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009d56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d007      	beq.n	8009d72 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d003      	beq.n	8009d72 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	689b      	ldr	r3, [r3, #8]
 8009d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d86:	2b40      	cmp	r3, #64	; 0x40
 8009d88:	d005      	beq.n	8009d96 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009d8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009d8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d04f      	beq.n	8009e36 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f000 feb9 	bl	800ab0e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	689b      	ldr	r3, [r3, #8]
 8009da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009da6:	2b40      	cmp	r3, #64	; 0x40
 8009da8:	d141      	bne.n	8009e2e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	3308      	adds	r3, #8
 8009db0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009db4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009db8:	e853 3f00 	ldrex	r3, [r3]
 8009dbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009dc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009dc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009dc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	3308      	adds	r3, #8
 8009dd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009dd6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009dda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009de2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009de6:	e841 2300 	strex	r3, r2, [r1]
 8009dea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009dee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d1d9      	bne.n	8009daa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d013      	beq.n	8009e26 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e02:	4a14      	ldr	r2, [pc, #80]	; (8009e54 <HAL_UART_IRQHandler+0x2b8>)
 8009e04:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f7fb fdca 	bl	80059a4 <HAL_DMA_Abort_IT>
 8009e10:	4603      	mov	r3, r0
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d017      	beq.n	8009e46 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e1c:	687a      	ldr	r2, [r7, #4]
 8009e1e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8009e20:	4610      	mov	r0, r2
 8009e22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e24:	e00f      	b.n	8009e46 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f000 f9da 	bl	800a1e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e2c:	e00b      	b.n	8009e46 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f000 f9d6 	bl	800a1e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e34:	e007      	b.n	8009e46 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f000 f9d2 	bl	800a1e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8009e44:	e1b7      	b.n	800a1b6 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e46:	bf00      	nop
    return;
 8009e48:	e1b5      	b.n	800a1b6 <HAL_UART_IRQHandler+0x61a>
 8009e4a:	bf00      	nop
 8009e4c:	10000001 	.word	0x10000001
 8009e50:	04000120 	.word	0x04000120
 8009e54:	0800abdb 	.word	0x0800abdb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e5c:	2b01      	cmp	r3, #1
 8009e5e:	f040 814a 	bne.w	800a0f6 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e66:	f003 0310 	and.w	r3, r3, #16
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	f000 8143 	beq.w	800a0f6 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e74:	f003 0310 	and.w	r3, r3, #16
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	f000 813c 	beq.w	800a0f6 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	2210      	movs	r2, #16
 8009e84:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	689b      	ldr	r3, [r3, #8]
 8009e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e90:	2b40      	cmp	r3, #64	; 0x40
 8009e92:	f040 80b5 	bne.w	800a000 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	685b      	ldr	r3, [r3, #4]
 8009e9e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009ea2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	f000 8187 	beq.w	800a1ba <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009eb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	f080 817f 	bcs.w	800a1ba <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009ec2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f003 0320 	and.w	r3, r3, #32
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	f040 8086 	bne.w	8009fe4 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ee0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009ee4:	e853 3f00 	ldrex	r3, [r3]
 8009ee8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009eec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009ef0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ef4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	461a      	mov	r2, r3
 8009efe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009f02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009f06:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009f0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009f12:	e841 2300 	strex	r3, r2, [r1]
 8009f16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009f1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d1da      	bne.n	8009ed8 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	3308      	adds	r3, #8
 8009f28:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009f2c:	e853 3f00 	ldrex	r3, [r3]
 8009f30:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009f32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009f34:	f023 0301 	bic.w	r3, r3, #1
 8009f38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	3308      	adds	r3, #8
 8009f42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009f46:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009f4a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f4c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009f4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009f52:	e841 2300 	strex	r3, r2, [r1]
 8009f56:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009f58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d1e1      	bne.n	8009f22 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	3308      	adds	r3, #8
 8009f64:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009f68:	e853 3f00 	ldrex	r3, [r3]
 8009f6c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009f6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009f70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	3308      	adds	r3, #8
 8009f7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009f82:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009f84:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f86:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009f88:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009f8a:	e841 2300 	strex	r3, r2, [r1]
 8009f8e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009f90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d1e3      	bne.n	8009f5e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2220      	movs	r2, #32
 8009f9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009faa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fac:	e853 3f00 	ldrex	r3, [r3]
 8009fb0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009fb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009fb4:	f023 0310 	bic.w	r3, r3, #16
 8009fb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	461a      	mov	r2, r3
 8009fc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009fc6:	65bb      	str	r3, [r7, #88]	; 0x58
 8009fc8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009fcc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009fce:	e841 2300 	strex	r3, r2, [r1]
 8009fd2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009fd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d1e4      	bne.n	8009fa4 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f7fb fc87 	bl	80058f2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ff0:	b29b      	uxth	r3, r3
 8009ff2:	1ad3      	subs	r3, r2, r3
 8009ff4:	b29b      	uxth	r3, r3
 8009ff6:	4619      	mov	r1, r3
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f000 f8fb 	bl	800a1f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009ffe:	e0dc      	b.n	800a1ba <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a00c:	b29b      	uxth	r3, r3
 800a00e:	1ad3      	subs	r3, r2, r3
 800a010:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a01a:	b29b      	uxth	r3, r3
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	f000 80ce 	beq.w	800a1be <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800a022:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a026:	2b00      	cmp	r3, #0
 800a028:	f000 80c9 	beq.w	800a1be <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a034:	e853 3f00 	ldrex	r3, [r3]
 800a038:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a03a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a03c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a040:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	461a      	mov	r2, r3
 800a04a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a04e:	647b      	str	r3, [r7, #68]	; 0x44
 800a050:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a052:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a054:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a056:	e841 2300 	strex	r3, r2, [r1]
 800a05a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a05c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d1e4      	bne.n	800a02c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	3308      	adds	r3, #8
 800a068:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a06c:	e853 3f00 	ldrex	r3, [r3]
 800a070:	623b      	str	r3, [r7, #32]
   return(result);
 800a072:	6a3b      	ldr	r3, [r7, #32]
 800a074:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a078:	f023 0301 	bic.w	r3, r3, #1
 800a07c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	3308      	adds	r3, #8
 800a086:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a08a:	633a      	str	r2, [r7, #48]	; 0x30
 800a08c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a08e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a092:	e841 2300 	strex	r3, r2, [r1]
 800a096:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d1e1      	bne.n	800a062 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2220      	movs	r2, #32
 800a0a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	e853 3f00 	ldrex	r3, [r3]
 800a0be:	60fb      	str	r3, [r7, #12]
   return(result);
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	f023 0310 	bic.w	r3, r3, #16
 800a0c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	461a      	mov	r2, r3
 800a0d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a0d4:	61fb      	str	r3, [r7, #28]
 800a0d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0d8:	69b9      	ldr	r1, [r7, #24]
 800a0da:	69fa      	ldr	r2, [r7, #28]
 800a0dc:	e841 2300 	strex	r3, r2, [r1]
 800a0e0:	617b      	str	r3, [r7, #20]
   return(result);
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d1e4      	bne.n	800a0b2 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a0e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f000 f880 	bl	800a1f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a0f4:	e063      	b.n	800a1be <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a0f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d00e      	beq.n	800a120 <HAL_UART_IRQHandler+0x584>
 800a102:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d008      	beq.n	800a120 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a116:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f000 fd9f 	bl	800ac5c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a11e:	e051      	b.n	800a1c4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d014      	beq.n	800a156 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a12c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a134:	2b00      	cmp	r3, #0
 800a136:	d105      	bne.n	800a144 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a138:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a13c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a140:	2b00      	cmp	r3, #0
 800a142:	d008      	beq.n	800a156 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d03a      	beq.n	800a1c2 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	4798      	blx	r3
    }
    return;
 800a154:	e035      	b.n	800a1c2 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a15a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d009      	beq.n	800a176 <HAL_UART_IRQHandler+0x5da>
 800a162:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d003      	beq.n	800a176 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f000 fd49 	bl	800ac06 <UART_EndTransmit_IT>
    return;
 800a174:	e026      	b.n	800a1c4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a17a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d009      	beq.n	800a196 <HAL_UART_IRQHandler+0x5fa>
 800a182:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a186:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d003      	beq.n	800a196 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f000 fd78 	bl	800ac84 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a194:	e016      	b.n	800a1c4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a19a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d010      	beq.n	800a1c4 <HAL_UART_IRQHandler+0x628>
 800a1a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	da0c      	bge.n	800a1c4 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f000 fd60 	bl	800ac70 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a1b0:	e008      	b.n	800a1c4 <HAL_UART_IRQHandler+0x628>
      return;
 800a1b2:	bf00      	nop
 800a1b4:	e006      	b.n	800a1c4 <HAL_UART_IRQHandler+0x628>
    return;
 800a1b6:	bf00      	nop
 800a1b8:	e004      	b.n	800a1c4 <HAL_UART_IRQHandler+0x628>
      return;
 800a1ba:	bf00      	nop
 800a1bc:	e002      	b.n	800a1c4 <HAL_UART_IRQHandler+0x628>
      return;
 800a1be:	bf00      	nop
 800a1c0:	e000      	b.n	800a1c4 <HAL_UART_IRQHandler+0x628>
    return;
 800a1c2:	bf00      	nop
  }
}
 800a1c4:	37e8      	adds	r7, #232	; 0xe8
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}
 800a1ca:	bf00      	nop

0800a1cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b083      	sub	sp, #12
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a1d4:	bf00      	nop
 800a1d6:	370c      	adds	r7, #12
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1de:	4770      	bx	lr

0800a1e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b083      	sub	sp, #12
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a1e8:	bf00      	nop
 800a1ea:	370c      	adds	r7, #12
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f2:	4770      	bx	lr

0800a1f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b083      	sub	sp, #12
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	460b      	mov	r3, r1
 800a1fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a200:	bf00      	nop
 800a202:	370c      	adds	r7, #12
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr

0800a20c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a20c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a210:	b08c      	sub	sp, #48	; 0x30
 800a212:	af00      	add	r7, sp, #0
 800a214:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a216:	2300      	movs	r3, #0
 800a218:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	689a      	ldr	r2, [r3, #8]
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	691b      	ldr	r3, [r3, #16]
 800a224:	431a      	orrs	r2, r3
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	695b      	ldr	r3, [r3, #20]
 800a22a:	431a      	orrs	r2, r3
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	69db      	ldr	r3, [r3, #28]
 800a230:	4313      	orrs	r3, r2
 800a232:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	681a      	ldr	r2, [r3, #0]
 800a23a:	4bab      	ldr	r3, [pc, #684]	; (800a4e8 <UART_SetConfig+0x2dc>)
 800a23c:	4013      	ands	r3, r2
 800a23e:	697a      	ldr	r2, [r7, #20]
 800a240:	6812      	ldr	r2, [r2, #0]
 800a242:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a244:	430b      	orrs	r3, r1
 800a246:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	68da      	ldr	r2, [r3, #12]
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	430a      	orrs	r2, r1
 800a25c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	699b      	ldr	r3, [r3, #24]
 800a262:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	4aa0      	ldr	r2, [pc, #640]	; (800a4ec <UART_SetConfig+0x2e0>)
 800a26a:	4293      	cmp	r3, r2
 800a26c:	d004      	beq.n	800a278 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	6a1b      	ldr	r3, [r3, #32]
 800a272:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a274:	4313      	orrs	r3, r2
 800a276:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	689b      	ldr	r3, [r3, #8]
 800a27e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800a282:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800a286:	697a      	ldr	r2, [r7, #20]
 800a288:	6812      	ldr	r2, [r2, #0]
 800a28a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a28c:	430b      	orrs	r3, r1
 800a28e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a290:	697b      	ldr	r3, [r7, #20]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a296:	f023 010f 	bic.w	r1, r3, #15
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	430a      	orrs	r2, r1
 800a2a4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	4a91      	ldr	r2, [pc, #580]	; (800a4f0 <UART_SetConfig+0x2e4>)
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	d125      	bne.n	800a2fc <UART_SetConfig+0xf0>
 800a2b0:	4b90      	ldr	r3, [pc, #576]	; (800a4f4 <UART_SetConfig+0x2e8>)
 800a2b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2b6:	f003 0303 	and.w	r3, r3, #3
 800a2ba:	2b03      	cmp	r3, #3
 800a2bc:	d81a      	bhi.n	800a2f4 <UART_SetConfig+0xe8>
 800a2be:	a201      	add	r2, pc, #4	; (adr r2, 800a2c4 <UART_SetConfig+0xb8>)
 800a2c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2c4:	0800a2d5 	.word	0x0800a2d5
 800a2c8:	0800a2e5 	.word	0x0800a2e5
 800a2cc:	0800a2dd 	.word	0x0800a2dd
 800a2d0:	0800a2ed 	.word	0x0800a2ed
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a2da:	e0d6      	b.n	800a48a <UART_SetConfig+0x27e>
 800a2dc:	2302      	movs	r3, #2
 800a2de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a2e2:	e0d2      	b.n	800a48a <UART_SetConfig+0x27e>
 800a2e4:	2304      	movs	r3, #4
 800a2e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a2ea:	e0ce      	b.n	800a48a <UART_SetConfig+0x27e>
 800a2ec:	2308      	movs	r3, #8
 800a2ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a2f2:	e0ca      	b.n	800a48a <UART_SetConfig+0x27e>
 800a2f4:	2310      	movs	r3, #16
 800a2f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a2fa:	e0c6      	b.n	800a48a <UART_SetConfig+0x27e>
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	4a7d      	ldr	r2, [pc, #500]	; (800a4f8 <UART_SetConfig+0x2ec>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d138      	bne.n	800a378 <UART_SetConfig+0x16c>
 800a306:	4b7b      	ldr	r3, [pc, #492]	; (800a4f4 <UART_SetConfig+0x2e8>)
 800a308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a30c:	f003 030c 	and.w	r3, r3, #12
 800a310:	2b0c      	cmp	r3, #12
 800a312:	d82d      	bhi.n	800a370 <UART_SetConfig+0x164>
 800a314:	a201      	add	r2, pc, #4	; (adr r2, 800a31c <UART_SetConfig+0x110>)
 800a316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a31a:	bf00      	nop
 800a31c:	0800a351 	.word	0x0800a351
 800a320:	0800a371 	.word	0x0800a371
 800a324:	0800a371 	.word	0x0800a371
 800a328:	0800a371 	.word	0x0800a371
 800a32c:	0800a361 	.word	0x0800a361
 800a330:	0800a371 	.word	0x0800a371
 800a334:	0800a371 	.word	0x0800a371
 800a338:	0800a371 	.word	0x0800a371
 800a33c:	0800a359 	.word	0x0800a359
 800a340:	0800a371 	.word	0x0800a371
 800a344:	0800a371 	.word	0x0800a371
 800a348:	0800a371 	.word	0x0800a371
 800a34c:	0800a369 	.word	0x0800a369
 800a350:	2300      	movs	r3, #0
 800a352:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a356:	e098      	b.n	800a48a <UART_SetConfig+0x27e>
 800a358:	2302      	movs	r3, #2
 800a35a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a35e:	e094      	b.n	800a48a <UART_SetConfig+0x27e>
 800a360:	2304      	movs	r3, #4
 800a362:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a366:	e090      	b.n	800a48a <UART_SetConfig+0x27e>
 800a368:	2308      	movs	r3, #8
 800a36a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a36e:	e08c      	b.n	800a48a <UART_SetConfig+0x27e>
 800a370:	2310      	movs	r3, #16
 800a372:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a376:	e088      	b.n	800a48a <UART_SetConfig+0x27e>
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	4a5f      	ldr	r2, [pc, #380]	; (800a4fc <UART_SetConfig+0x2f0>)
 800a37e:	4293      	cmp	r3, r2
 800a380:	d125      	bne.n	800a3ce <UART_SetConfig+0x1c2>
 800a382:	4b5c      	ldr	r3, [pc, #368]	; (800a4f4 <UART_SetConfig+0x2e8>)
 800a384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a388:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a38c:	2b30      	cmp	r3, #48	; 0x30
 800a38e:	d016      	beq.n	800a3be <UART_SetConfig+0x1b2>
 800a390:	2b30      	cmp	r3, #48	; 0x30
 800a392:	d818      	bhi.n	800a3c6 <UART_SetConfig+0x1ba>
 800a394:	2b20      	cmp	r3, #32
 800a396:	d00a      	beq.n	800a3ae <UART_SetConfig+0x1a2>
 800a398:	2b20      	cmp	r3, #32
 800a39a:	d814      	bhi.n	800a3c6 <UART_SetConfig+0x1ba>
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d002      	beq.n	800a3a6 <UART_SetConfig+0x19a>
 800a3a0:	2b10      	cmp	r3, #16
 800a3a2:	d008      	beq.n	800a3b6 <UART_SetConfig+0x1aa>
 800a3a4:	e00f      	b.n	800a3c6 <UART_SetConfig+0x1ba>
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a3ac:	e06d      	b.n	800a48a <UART_SetConfig+0x27e>
 800a3ae:	2302      	movs	r3, #2
 800a3b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a3b4:	e069      	b.n	800a48a <UART_SetConfig+0x27e>
 800a3b6:	2304      	movs	r3, #4
 800a3b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a3bc:	e065      	b.n	800a48a <UART_SetConfig+0x27e>
 800a3be:	2308      	movs	r3, #8
 800a3c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a3c4:	e061      	b.n	800a48a <UART_SetConfig+0x27e>
 800a3c6:	2310      	movs	r3, #16
 800a3c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a3cc:	e05d      	b.n	800a48a <UART_SetConfig+0x27e>
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	4a4b      	ldr	r2, [pc, #300]	; (800a500 <UART_SetConfig+0x2f4>)
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d125      	bne.n	800a424 <UART_SetConfig+0x218>
 800a3d8:	4b46      	ldr	r3, [pc, #280]	; (800a4f4 <UART_SetConfig+0x2e8>)
 800a3da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a3e2:	2bc0      	cmp	r3, #192	; 0xc0
 800a3e4:	d016      	beq.n	800a414 <UART_SetConfig+0x208>
 800a3e6:	2bc0      	cmp	r3, #192	; 0xc0
 800a3e8:	d818      	bhi.n	800a41c <UART_SetConfig+0x210>
 800a3ea:	2b80      	cmp	r3, #128	; 0x80
 800a3ec:	d00a      	beq.n	800a404 <UART_SetConfig+0x1f8>
 800a3ee:	2b80      	cmp	r3, #128	; 0x80
 800a3f0:	d814      	bhi.n	800a41c <UART_SetConfig+0x210>
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d002      	beq.n	800a3fc <UART_SetConfig+0x1f0>
 800a3f6:	2b40      	cmp	r3, #64	; 0x40
 800a3f8:	d008      	beq.n	800a40c <UART_SetConfig+0x200>
 800a3fa:	e00f      	b.n	800a41c <UART_SetConfig+0x210>
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a402:	e042      	b.n	800a48a <UART_SetConfig+0x27e>
 800a404:	2302      	movs	r3, #2
 800a406:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a40a:	e03e      	b.n	800a48a <UART_SetConfig+0x27e>
 800a40c:	2304      	movs	r3, #4
 800a40e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a412:	e03a      	b.n	800a48a <UART_SetConfig+0x27e>
 800a414:	2308      	movs	r3, #8
 800a416:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a41a:	e036      	b.n	800a48a <UART_SetConfig+0x27e>
 800a41c:	2310      	movs	r3, #16
 800a41e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a422:	e032      	b.n	800a48a <UART_SetConfig+0x27e>
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	4a30      	ldr	r2, [pc, #192]	; (800a4ec <UART_SetConfig+0x2e0>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d12a      	bne.n	800a484 <UART_SetConfig+0x278>
 800a42e:	4b31      	ldr	r3, [pc, #196]	; (800a4f4 <UART_SetConfig+0x2e8>)
 800a430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a434:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a438:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a43c:	d01a      	beq.n	800a474 <UART_SetConfig+0x268>
 800a43e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a442:	d81b      	bhi.n	800a47c <UART_SetConfig+0x270>
 800a444:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a448:	d00c      	beq.n	800a464 <UART_SetConfig+0x258>
 800a44a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a44e:	d815      	bhi.n	800a47c <UART_SetConfig+0x270>
 800a450:	2b00      	cmp	r3, #0
 800a452:	d003      	beq.n	800a45c <UART_SetConfig+0x250>
 800a454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a458:	d008      	beq.n	800a46c <UART_SetConfig+0x260>
 800a45a:	e00f      	b.n	800a47c <UART_SetConfig+0x270>
 800a45c:	2300      	movs	r3, #0
 800a45e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a462:	e012      	b.n	800a48a <UART_SetConfig+0x27e>
 800a464:	2302      	movs	r3, #2
 800a466:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a46a:	e00e      	b.n	800a48a <UART_SetConfig+0x27e>
 800a46c:	2304      	movs	r3, #4
 800a46e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a472:	e00a      	b.n	800a48a <UART_SetConfig+0x27e>
 800a474:	2308      	movs	r3, #8
 800a476:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a47a:	e006      	b.n	800a48a <UART_SetConfig+0x27e>
 800a47c:	2310      	movs	r3, #16
 800a47e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a482:	e002      	b.n	800a48a <UART_SetConfig+0x27e>
 800a484:	2310      	movs	r3, #16
 800a486:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	4a17      	ldr	r2, [pc, #92]	; (800a4ec <UART_SetConfig+0x2e0>)
 800a490:	4293      	cmp	r3, r2
 800a492:	f040 80a8 	bne.w	800a5e6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a496:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a49a:	2b08      	cmp	r3, #8
 800a49c:	d834      	bhi.n	800a508 <UART_SetConfig+0x2fc>
 800a49e:	a201      	add	r2, pc, #4	; (adr r2, 800a4a4 <UART_SetConfig+0x298>)
 800a4a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4a4:	0800a4c9 	.word	0x0800a4c9
 800a4a8:	0800a509 	.word	0x0800a509
 800a4ac:	0800a4d1 	.word	0x0800a4d1
 800a4b0:	0800a509 	.word	0x0800a509
 800a4b4:	0800a4d7 	.word	0x0800a4d7
 800a4b8:	0800a509 	.word	0x0800a509
 800a4bc:	0800a509 	.word	0x0800a509
 800a4c0:	0800a509 	.word	0x0800a509
 800a4c4:	0800a4df 	.word	0x0800a4df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a4c8:	f7fd f970 	bl	80077ac <HAL_RCC_GetPCLK1Freq>
 800a4cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a4ce:	e021      	b.n	800a514 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a4d0:	4b0c      	ldr	r3, [pc, #48]	; (800a504 <UART_SetConfig+0x2f8>)
 800a4d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a4d4:	e01e      	b.n	800a514 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a4d6:	f7fd f8fd 	bl	80076d4 <HAL_RCC_GetSysClockFreq>
 800a4da:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a4dc:	e01a      	b.n	800a514 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a4de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a4e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a4e4:	e016      	b.n	800a514 <UART_SetConfig+0x308>
 800a4e6:	bf00      	nop
 800a4e8:	cfff69f3 	.word	0xcfff69f3
 800a4ec:	40008000 	.word	0x40008000
 800a4f0:	40013800 	.word	0x40013800
 800a4f4:	40021000 	.word	0x40021000
 800a4f8:	40004400 	.word	0x40004400
 800a4fc:	40004800 	.word	0x40004800
 800a500:	40004c00 	.word	0x40004c00
 800a504:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800a508:	2300      	movs	r3, #0
 800a50a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a50c:	2301      	movs	r3, #1
 800a50e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a512:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a516:	2b00      	cmp	r3, #0
 800a518:	f000 812a 	beq.w	800a770 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a520:	4a9e      	ldr	r2, [pc, #632]	; (800a79c <UART_SetConfig+0x590>)
 800a522:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a526:	461a      	mov	r2, r3
 800a528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a52a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a52e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	685a      	ldr	r2, [r3, #4]
 800a534:	4613      	mov	r3, r2
 800a536:	005b      	lsls	r3, r3, #1
 800a538:	4413      	add	r3, r2
 800a53a:	69ba      	ldr	r2, [r7, #24]
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d305      	bcc.n	800a54c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a540:	697b      	ldr	r3, [r7, #20]
 800a542:	685b      	ldr	r3, [r3, #4]
 800a544:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a546:	69ba      	ldr	r2, [r7, #24]
 800a548:	429a      	cmp	r2, r3
 800a54a:	d903      	bls.n	800a554 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800a54c:	2301      	movs	r3, #1
 800a54e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a552:	e10d      	b.n	800a770 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a556:	2200      	movs	r2, #0
 800a558:	60bb      	str	r3, [r7, #8]
 800a55a:	60fa      	str	r2, [r7, #12]
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a560:	4a8e      	ldr	r2, [pc, #568]	; (800a79c <UART_SetConfig+0x590>)
 800a562:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a566:	b29b      	uxth	r3, r3
 800a568:	2200      	movs	r2, #0
 800a56a:	603b      	str	r3, [r7, #0]
 800a56c:	607a      	str	r2, [r7, #4]
 800a56e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a572:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a576:	f7f5 fe4f 	bl	8000218 <__aeabi_uldivmod>
 800a57a:	4602      	mov	r2, r0
 800a57c:	460b      	mov	r3, r1
 800a57e:	4610      	mov	r0, r2
 800a580:	4619      	mov	r1, r3
 800a582:	f04f 0200 	mov.w	r2, #0
 800a586:	f04f 0300 	mov.w	r3, #0
 800a58a:	020b      	lsls	r3, r1, #8
 800a58c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a590:	0202      	lsls	r2, r0, #8
 800a592:	6979      	ldr	r1, [r7, #20]
 800a594:	6849      	ldr	r1, [r1, #4]
 800a596:	0849      	lsrs	r1, r1, #1
 800a598:	2000      	movs	r0, #0
 800a59a:	460c      	mov	r4, r1
 800a59c:	4605      	mov	r5, r0
 800a59e:	eb12 0804 	adds.w	r8, r2, r4
 800a5a2:	eb43 0905 	adc.w	r9, r3, r5
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	685b      	ldr	r3, [r3, #4]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	469a      	mov	sl, r3
 800a5ae:	4693      	mov	fp, r2
 800a5b0:	4652      	mov	r2, sl
 800a5b2:	465b      	mov	r3, fp
 800a5b4:	4640      	mov	r0, r8
 800a5b6:	4649      	mov	r1, r9
 800a5b8:	f7f5 fe2e 	bl	8000218 <__aeabi_uldivmod>
 800a5bc:	4602      	mov	r2, r0
 800a5be:	460b      	mov	r3, r1
 800a5c0:	4613      	mov	r3, r2
 800a5c2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a5c4:	6a3b      	ldr	r3, [r7, #32]
 800a5c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a5ca:	d308      	bcc.n	800a5de <UART_SetConfig+0x3d2>
 800a5cc:	6a3b      	ldr	r3, [r7, #32]
 800a5ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5d2:	d204      	bcs.n	800a5de <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	6a3a      	ldr	r2, [r7, #32]
 800a5da:	60da      	str	r2, [r3, #12]
 800a5dc:	e0c8      	b.n	800a770 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800a5de:	2301      	movs	r3, #1
 800a5e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a5e4:	e0c4      	b.n	800a770 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	69db      	ldr	r3, [r3, #28]
 800a5ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5ee:	d167      	bne.n	800a6c0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800a5f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a5f4:	2b08      	cmp	r3, #8
 800a5f6:	d828      	bhi.n	800a64a <UART_SetConfig+0x43e>
 800a5f8:	a201      	add	r2, pc, #4	; (adr r2, 800a600 <UART_SetConfig+0x3f4>)
 800a5fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5fe:	bf00      	nop
 800a600:	0800a625 	.word	0x0800a625
 800a604:	0800a62d 	.word	0x0800a62d
 800a608:	0800a635 	.word	0x0800a635
 800a60c:	0800a64b 	.word	0x0800a64b
 800a610:	0800a63b 	.word	0x0800a63b
 800a614:	0800a64b 	.word	0x0800a64b
 800a618:	0800a64b 	.word	0x0800a64b
 800a61c:	0800a64b 	.word	0x0800a64b
 800a620:	0800a643 	.word	0x0800a643
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a624:	f7fd f8c2 	bl	80077ac <HAL_RCC_GetPCLK1Freq>
 800a628:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a62a:	e014      	b.n	800a656 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a62c:	f7fd f8d4 	bl	80077d8 <HAL_RCC_GetPCLK2Freq>
 800a630:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a632:	e010      	b.n	800a656 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a634:	4b5a      	ldr	r3, [pc, #360]	; (800a7a0 <UART_SetConfig+0x594>)
 800a636:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a638:	e00d      	b.n	800a656 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a63a:	f7fd f84b 	bl	80076d4 <HAL_RCC_GetSysClockFreq>
 800a63e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a640:	e009      	b.n	800a656 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a642:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a646:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a648:	e005      	b.n	800a656 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800a64a:	2300      	movs	r3, #0
 800a64c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a64e:	2301      	movs	r3, #1
 800a650:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a654:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a658:	2b00      	cmp	r3, #0
 800a65a:	f000 8089 	beq.w	800a770 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a65e:	697b      	ldr	r3, [r7, #20]
 800a660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a662:	4a4e      	ldr	r2, [pc, #312]	; (800a79c <UART_SetConfig+0x590>)
 800a664:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a668:	461a      	mov	r2, r3
 800a66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a66c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a670:	005a      	lsls	r2, r3, #1
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	685b      	ldr	r3, [r3, #4]
 800a676:	085b      	lsrs	r3, r3, #1
 800a678:	441a      	add	r2, r3
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	685b      	ldr	r3, [r3, #4]
 800a67e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a682:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a684:	6a3b      	ldr	r3, [r7, #32]
 800a686:	2b0f      	cmp	r3, #15
 800a688:	d916      	bls.n	800a6b8 <UART_SetConfig+0x4ac>
 800a68a:	6a3b      	ldr	r3, [r7, #32]
 800a68c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a690:	d212      	bcs.n	800a6b8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a692:	6a3b      	ldr	r3, [r7, #32]
 800a694:	b29b      	uxth	r3, r3
 800a696:	f023 030f 	bic.w	r3, r3, #15
 800a69a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a69c:	6a3b      	ldr	r3, [r7, #32]
 800a69e:	085b      	lsrs	r3, r3, #1
 800a6a0:	b29b      	uxth	r3, r3
 800a6a2:	f003 0307 	and.w	r3, r3, #7
 800a6a6:	b29a      	uxth	r2, r3
 800a6a8:	8bfb      	ldrh	r3, [r7, #30]
 800a6aa:	4313      	orrs	r3, r2
 800a6ac:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	8bfa      	ldrh	r2, [r7, #30]
 800a6b4:	60da      	str	r2, [r3, #12]
 800a6b6:	e05b      	b.n	800a770 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a6be:	e057      	b.n	800a770 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a6c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a6c4:	2b08      	cmp	r3, #8
 800a6c6:	d828      	bhi.n	800a71a <UART_SetConfig+0x50e>
 800a6c8:	a201      	add	r2, pc, #4	; (adr r2, 800a6d0 <UART_SetConfig+0x4c4>)
 800a6ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6ce:	bf00      	nop
 800a6d0:	0800a6f5 	.word	0x0800a6f5
 800a6d4:	0800a6fd 	.word	0x0800a6fd
 800a6d8:	0800a705 	.word	0x0800a705
 800a6dc:	0800a71b 	.word	0x0800a71b
 800a6e0:	0800a70b 	.word	0x0800a70b
 800a6e4:	0800a71b 	.word	0x0800a71b
 800a6e8:	0800a71b 	.word	0x0800a71b
 800a6ec:	0800a71b 	.word	0x0800a71b
 800a6f0:	0800a713 	.word	0x0800a713
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a6f4:	f7fd f85a 	bl	80077ac <HAL_RCC_GetPCLK1Freq>
 800a6f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a6fa:	e014      	b.n	800a726 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a6fc:	f7fd f86c 	bl	80077d8 <HAL_RCC_GetPCLK2Freq>
 800a700:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a702:	e010      	b.n	800a726 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a704:	4b26      	ldr	r3, [pc, #152]	; (800a7a0 <UART_SetConfig+0x594>)
 800a706:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a708:	e00d      	b.n	800a726 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a70a:	f7fc ffe3 	bl	80076d4 <HAL_RCC_GetSysClockFreq>
 800a70e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a710:	e009      	b.n	800a726 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a712:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a716:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a718:	e005      	b.n	800a726 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800a71a:	2300      	movs	r3, #0
 800a71c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a71e:	2301      	movs	r3, #1
 800a720:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a724:	bf00      	nop
    }

    if (pclk != 0U)
 800a726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d021      	beq.n	800a770 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a730:	4a1a      	ldr	r2, [pc, #104]	; (800a79c <UART_SetConfig+0x590>)
 800a732:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a736:	461a      	mov	r2, r3
 800a738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a73a:	fbb3 f2f2 	udiv	r2, r3, r2
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	685b      	ldr	r3, [r3, #4]
 800a742:	085b      	lsrs	r3, r3, #1
 800a744:	441a      	add	r2, r3
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a74e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a750:	6a3b      	ldr	r3, [r7, #32]
 800a752:	2b0f      	cmp	r3, #15
 800a754:	d909      	bls.n	800a76a <UART_SetConfig+0x55e>
 800a756:	6a3b      	ldr	r3, [r7, #32]
 800a758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a75c:	d205      	bcs.n	800a76a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a75e:	6a3b      	ldr	r3, [r7, #32]
 800a760:	b29a      	uxth	r2, r3
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	60da      	str	r2, [r3, #12]
 800a768:	e002      	b.n	800a770 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800a76a:	2301      	movs	r3, #1
 800a76c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	2201      	movs	r2, #1
 800a774:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a778:	697b      	ldr	r3, [r7, #20]
 800a77a:	2201      	movs	r2, #1
 800a77c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a780:	697b      	ldr	r3, [r7, #20]
 800a782:	2200      	movs	r2, #0
 800a784:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	2200      	movs	r2, #0
 800a78a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a78c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800a790:	4618      	mov	r0, r3
 800a792:	3730      	adds	r7, #48	; 0x30
 800a794:	46bd      	mov	sp, r7
 800a796:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a79a:	bf00      	nop
 800a79c:	0800af54 	.word	0x0800af54
 800a7a0:	00f42400 	.word	0x00f42400

0800a7a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b083      	sub	sp, #12
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7b0:	f003 0301 	and.w	r3, r3, #1
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d00a      	beq.n	800a7ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	685b      	ldr	r3, [r3, #4]
 800a7be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	430a      	orrs	r2, r1
 800a7cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7d2:	f003 0302 	and.w	r3, r3, #2
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d00a      	beq.n	800a7f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	685b      	ldr	r3, [r3, #4]
 800a7e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	430a      	orrs	r2, r1
 800a7ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7f4:	f003 0304 	and.w	r3, r3, #4
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d00a      	beq.n	800a812 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	685b      	ldr	r3, [r3, #4]
 800a802:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	430a      	orrs	r2, r1
 800a810:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a816:	f003 0308 	and.w	r3, r3, #8
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d00a      	beq.n	800a834 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	430a      	orrs	r2, r1
 800a832:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a838:	f003 0310 	and.w	r3, r3, #16
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d00a      	beq.n	800a856 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	689b      	ldr	r3, [r3, #8]
 800a846:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	430a      	orrs	r2, r1
 800a854:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a85a:	f003 0320 	and.w	r3, r3, #32
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d00a      	beq.n	800a878 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	689b      	ldr	r3, [r3, #8]
 800a868:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	430a      	orrs	r2, r1
 800a876:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a87c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a880:	2b00      	cmp	r3, #0
 800a882:	d01a      	beq.n	800a8ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	685b      	ldr	r3, [r3, #4]
 800a88a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	430a      	orrs	r2, r1
 800a898:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a89e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a8a2:	d10a      	bne.n	800a8ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	685b      	ldr	r3, [r3, #4]
 800a8aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	430a      	orrs	r2, r1
 800a8b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d00a      	beq.n	800a8dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	685b      	ldr	r3, [r3, #4]
 800a8cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	430a      	orrs	r2, r1
 800a8da:	605a      	str	r2, [r3, #4]
  }
}
 800a8dc:	bf00      	nop
 800a8de:	370c      	adds	r7, #12
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e6:	4770      	bx	lr

0800a8e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b086      	sub	sp, #24
 800a8ec:	af02      	add	r7, sp, #8
 800a8ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a8f8:	f7f8 fb66 	bl	8002fc8 <HAL_GetTick>
 800a8fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f003 0308 	and.w	r3, r3, #8
 800a908:	2b08      	cmp	r3, #8
 800a90a:	d10e      	bne.n	800a92a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a90c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a910:	9300      	str	r3, [sp, #0]
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	2200      	movs	r2, #0
 800a916:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f000 f82f 	bl	800a97e <UART_WaitOnFlagUntilTimeout>
 800a920:	4603      	mov	r3, r0
 800a922:	2b00      	cmp	r3, #0
 800a924:	d001      	beq.n	800a92a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a926:	2303      	movs	r3, #3
 800a928:	e025      	b.n	800a976 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f003 0304 	and.w	r3, r3, #4
 800a934:	2b04      	cmp	r3, #4
 800a936:	d10e      	bne.n	800a956 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a938:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a93c:	9300      	str	r3, [sp, #0]
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	2200      	movs	r2, #0
 800a942:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f000 f819 	bl	800a97e <UART_WaitOnFlagUntilTimeout>
 800a94c:	4603      	mov	r3, r0
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d001      	beq.n	800a956 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a952:	2303      	movs	r3, #3
 800a954:	e00f      	b.n	800a976 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2220      	movs	r2, #32
 800a95a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2220      	movs	r2, #32
 800a962:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2200      	movs	r2, #0
 800a96a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2200      	movs	r2, #0
 800a970:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a974:	2300      	movs	r3, #0
}
 800a976:	4618      	mov	r0, r3
 800a978:	3710      	adds	r7, #16
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}

0800a97e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a97e:	b580      	push	{r7, lr}
 800a980:	b09c      	sub	sp, #112	; 0x70
 800a982:	af00      	add	r7, sp, #0
 800a984:	60f8      	str	r0, [r7, #12]
 800a986:	60b9      	str	r1, [r7, #8]
 800a988:	603b      	str	r3, [r7, #0]
 800a98a:	4613      	mov	r3, r2
 800a98c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a98e:	e0a9      	b.n	800aae4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a990:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a992:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a996:	f000 80a5 	beq.w	800aae4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a99a:	f7f8 fb15 	bl	8002fc8 <HAL_GetTick>
 800a99e:	4602      	mov	r2, r0
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	1ad3      	subs	r3, r2, r3
 800a9a4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a9a6:	429a      	cmp	r2, r3
 800a9a8:	d302      	bcc.n	800a9b0 <UART_WaitOnFlagUntilTimeout+0x32>
 800a9aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d140      	bne.n	800aa32 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9b8:	e853 3f00 	ldrex	r3, [r3]
 800a9bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a9be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a9c4:	667b      	str	r3, [r7, #100]	; 0x64
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a9d0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a9d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a9d6:	e841 2300 	strex	r3, r2, [r1]
 800a9da:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a9dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d1e6      	bne.n	800a9b0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	3308      	adds	r3, #8
 800a9e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9ec:	e853 3f00 	ldrex	r3, [r3]
 800a9f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a9f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9f4:	f023 0301 	bic.w	r3, r3, #1
 800a9f8:	663b      	str	r3, [r7, #96]	; 0x60
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	3308      	adds	r3, #8
 800aa00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aa02:	64ba      	str	r2, [r7, #72]	; 0x48
 800aa04:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aa08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa0a:	e841 2300 	strex	r3, r2, [r1]
 800aa0e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800aa10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d1e5      	bne.n	800a9e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	2220      	movs	r2, #32
 800aa1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2220      	movs	r2, #32
 800aa22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800aa2e:	2303      	movs	r3, #3
 800aa30:	e069      	b.n	800ab06 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f003 0304 	and.w	r3, r3, #4
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d051      	beq.n	800aae4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	69db      	ldr	r3, [r3, #28]
 800aa46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aa4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa4e:	d149      	bne.n	800aae4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aa58:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa62:	e853 3f00 	ldrex	r3, [r3]
 800aa66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aa68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa6a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aa6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	461a      	mov	r2, r3
 800aa76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa78:	637b      	str	r3, [r7, #52]	; 0x34
 800aa7a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aa7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa80:	e841 2300 	strex	r3, r2, [r1]
 800aa84:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800aa86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d1e6      	bne.n	800aa5a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	3308      	adds	r3, #8
 800aa92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	e853 3f00 	ldrex	r3, [r3]
 800aa9a:	613b      	str	r3, [r7, #16]
   return(result);
 800aa9c:	693b      	ldr	r3, [r7, #16]
 800aa9e:	f023 0301 	bic.w	r3, r3, #1
 800aaa2:	66bb      	str	r3, [r7, #104]	; 0x68
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	3308      	adds	r3, #8
 800aaaa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800aaac:	623a      	str	r2, [r7, #32]
 800aaae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aab0:	69f9      	ldr	r1, [r7, #28]
 800aab2:	6a3a      	ldr	r2, [r7, #32]
 800aab4:	e841 2300 	strex	r3, r2, [r1]
 800aab8:	61bb      	str	r3, [r7, #24]
   return(result);
 800aaba:	69bb      	ldr	r3, [r7, #24]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d1e5      	bne.n	800aa8c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	2220      	movs	r2, #32
 800aac4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	2220      	movs	r2, #32
 800aacc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	2220      	movs	r2, #32
 800aad4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	2200      	movs	r2, #0
 800aadc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800aae0:	2303      	movs	r3, #3
 800aae2:	e010      	b.n	800ab06 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	69da      	ldr	r2, [r3, #28]
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	4013      	ands	r3, r2
 800aaee:	68ba      	ldr	r2, [r7, #8]
 800aaf0:	429a      	cmp	r2, r3
 800aaf2:	bf0c      	ite	eq
 800aaf4:	2301      	moveq	r3, #1
 800aaf6:	2300      	movne	r3, #0
 800aaf8:	b2db      	uxtb	r3, r3
 800aafa:	461a      	mov	r2, r3
 800aafc:	79fb      	ldrb	r3, [r7, #7]
 800aafe:	429a      	cmp	r2, r3
 800ab00:	f43f af46 	beq.w	800a990 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ab04:	2300      	movs	r3, #0
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	3770      	adds	r7, #112	; 0x70
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}

0800ab0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ab0e:	b480      	push	{r7}
 800ab10:	b095      	sub	sp, #84	; 0x54
 800ab12:	af00      	add	r7, sp, #0
 800ab14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab1e:	e853 3f00 	ldrex	r3, [r3]
 800ab22:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ab24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ab2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	461a      	mov	r2, r3
 800ab32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab34:	643b      	str	r3, [r7, #64]	; 0x40
 800ab36:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ab3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ab3c:	e841 2300 	strex	r3, r2, [r1]
 800ab40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ab42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d1e6      	bne.n	800ab16 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	3308      	adds	r3, #8
 800ab4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab50:	6a3b      	ldr	r3, [r7, #32]
 800ab52:	e853 3f00 	ldrex	r3, [r3]
 800ab56:	61fb      	str	r3, [r7, #28]
   return(result);
 800ab58:	69fb      	ldr	r3, [r7, #28]
 800ab5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ab5e:	f023 0301 	bic.w	r3, r3, #1
 800ab62:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	3308      	adds	r3, #8
 800ab6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ab6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ab6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ab72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab74:	e841 2300 	strex	r3, r2, [r1]
 800ab78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ab7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d1e3      	bne.n	800ab48 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab84:	2b01      	cmp	r3, #1
 800ab86:	d118      	bne.n	800abba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	e853 3f00 	ldrex	r3, [r3]
 800ab94:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	f023 0310 	bic.w	r3, r3, #16
 800ab9c:	647b      	str	r3, [r7, #68]	; 0x44
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	461a      	mov	r2, r3
 800aba4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aba6:	61bb      	str	r3, [r7, #24]
 800aba8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abaa:	6979      	ldr	r1, [r7, #20]
 800abac:	69ba      	ldr	r2, [r7, #24]
 800abae:	e841 2300 	strex	r3, r2, [r1]
 800abb2:	613b      	str	r3, [r7, #16]
   return(result);
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d1e6      	bne.n	800ab88 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2220      	movs	r2, #32
 800abbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2200      	movs	r2, #0
 800abc6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2200      	movs	r2, #0
 800abcc:	671a      	str	r2, [r3, #112]	; 0x70
}
 800abce:	bf00      	nop
 800abd0:	3754      	adds	r7, #84	; 0x54
 800abd2:	46bd      	mov	sp, r7
 800abd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd8:	4770      	bx	lr

0800abda <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800abda:	b580      	push	{r7, lr}
 800abdc:	b084      	sub	sp, #16
 800abde:	af00      	add	r7, sp, #0
 800abe0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abe6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	2200      	movs	r2, #0
 800abec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	2200      	movs	r2, #0
 800abf4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800abf8:	68f8      	ldr	r0, [r7, #12]
 800abfa:	f7ff faf1 	bl	800a1e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800abfe:	bf00      	nop
 800ac00:	3710      	adds	r7, #16
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}

0800ac06 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ac06:	b580      	push	{r7, lr}
 800ac08:	b088      	sub	sp, #32
 800ac0a:	af00      	add	r7, sp, #0
 800ac0c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	e853 3f00 	ldrex	r3, [r3]
 800ac1a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac22:	61fb      	str	r3, [r7, #28]
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	461a      	mov	r2, r3
 800ac2a:	69fb      	ldr	r3, [r7, #28]
 800ac2c:	61bb      	str	r3, [r7, #24]
 800ac2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac30:	6979      	ldr	r1, [r7, #20]
 800ac32:	69ba      	ldr	r2, [r7, #24]
 800ac34:	e841 2300 	strex	r3, r2, [r1]
 800ac38:	613b      	str	r3, [r7, #16]
   return(result);
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d1e6      	bne.n	800ac0e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2220      	movs	r2, #32
 800ac44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f7ff fabc 	bl	800a1cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac54:	bf00      	nop
 800ac56:	3720      	adds	r7, #32
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}

0800ac5c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b083      	sub	sp, #12
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ac64:	bf00      	nop
 800ac66:	370c      	adds	r7, #12
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6e:	4770      	bx	lr

0800ac70 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ac70:	b480      	push	{r7}
 800ac72:	b083      	sub	sp, #12
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ac78:	bf00      	nop
 800ac7a:	370c      	adds	r7, #12
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac82:	4770      	bx	lr

0800ac84 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ac84:	b480      	push	{r7}
 800ac86:	b083      	sub	sp, #12
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ac8c:	bf00      	nop
 800ac8e:	370c      	adds	r7, #12
 800ac90:	46bd      	mov	sp, r7
 800ac92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac96:	4770      	bx	lr

0800ac98 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ac98:	b480      	push	{r7}
 800ac9a:	b085      	sub	sp, #20
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aca6:	2b01      	cmp	r3, #1
 800aca8:	d101      	bne.n	800acae <HAL_UARTEx_DisableFifoMode+0x16>
 800acaa:	2302      	movs	r3, #2
 800acac:	e027      	b.n	800acfe <HAL_UARTEx_DisableFifoMode+0x66>
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2201      	movs	r2, #1
 800acb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2224      	movs	r2, #36	; 0x24
 800acba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	681a      	ldr	r2, [r3, #0]
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f022 0201 	bic.w	r2, r2, #1
 800acd4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800acdc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2200      	movs	r2, #0
 800ace2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	68fa      	ldr	r2, [r7, #12]
 800acea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2220      	movs	r2, #32
 800acf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2200      	movs	r2, #0
 800acf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800acfc:	2300      	movs	r3, #0
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3714      	adds	r7, #20
 800ad02:	46bd      	mov	sp, r7
 800ad04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad08:	4770      	bx	lr

0800ad0a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ad0a:	b580      	push	{r7, lr}
 800ad0c:	b084      	sub	sp, #16
 800ad0e:	af00      	add	r7, sp, #0
 800ad10:	6078      	str	r0, [r7, #4]
 800ad12:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ad1a:	2b01      	cmp	r3, #1
 800ad1c:	d101      	bne.n	800ad22 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ad1e:	2302      	movs	r3, #2
 800ad20:	e02d      	b.n	800ad7e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2201      	movs	r2, #1
 800ad26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2224      	movs	r2, #36	; 0x24
 800ad2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	681a      	ldr	r2, [r3, #0]
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	f022 0201 	bic.w	r2, r2, #1
 800ad48:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	689b      	ldr	r3, [r3, #8]
 800ad50:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	683a      	ldr	r2, [r7, #0]
 800ad5a:	430a      	orrs	r2, r1
 800ad5c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f000 f850 	bl	800ae04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	68fa      	ldr	r2, [r7, #12]
 800ad6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2220      	movs	r2, #32
 800ad70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2200      	movs	r2, #0
 800ad78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ad7c:	2300      	movs	r3, #0
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3710      	adds	r7, #16
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}

0800ad86 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ad86:	b580      	push	{r7, lr}
 800ad88:	b084      	sub	sp, #16
 800ad8a:	af00      	add	r7, sp, #0
 800ad8c:	6078      	str	r0, [r7, #4]
 800ad8e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ad96:	2b01      	cmp	r3, #1
 800ad98:	d101      	bne.n	800ad9e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ad9a:	2302      	movs	r3, #2
 800ad9c:	e02d      	b.n	800adfa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2201      	movs	r2, #1
 800ada2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2224      	movs	r2, #36	; 0x24
 800adaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	681a      	ldr	r2, [r3, #0]
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f022 0201 	bic.w	r2, r2, #1
 800adc4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	689b      	ldr	r3, [r3, #8]
 800adcc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	683a      	ldr	r2, [r7, #0]
 800add6:	430a      	orrs	r2, r1
 800add8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f000 f812 	bl	800ae04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	68fa      	ldr	r2, [r7, #12]
 800ade6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2220      	movs	r2, #32
 800adec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2200      	movs	r2, #0
 800adf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800adf8:	2300      	movs	r3, #0
}
 800adfa:	4618      	mov	r0, r3
 800adfc:	3710      	adds	r7, #16
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}
	...

0800ae04 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ae04:	b480      	push	{r7}
 800ae06:	b085      	sub	sp, #20
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d108      	bne.n	800ae26 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2201      	movs	r2, #1
 800ae18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2201      	movs	r2, #1
 800ae20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ae24:	e031      	b.n	800ae8a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ae26:	2308      	movs	r3, #8
 800ae28:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ae2a:	2308      	movs	r3, #8
 800ae2c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	689b      	ldr	r3, [r3, #8]
 800ae34:	0e5b      	lsrs	r3, r3, #25
 800ae36:	b2db      	uxtb	r3, r3
 800ae38:	f003 0307 	and.w	r3, r3, #7
 800ae3c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	689b      	ldr	r3, [r3, #8]
 800ae44:	0f5b      	lsrs	r3, r3, #29
 800ae46:	b2db      	uxtb	r3, r3
 800ae48:	f003 0307 	and.w	r3, r3, #7
 800ae4c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ae4e:	7bbb      	ldrb	r3, [r7, #14]
 800ae50:	7b3a      	ldrb	r2, [r7, #12]
 800ae52:	4911      	ldr	r1, [pc, #68]	; (800ae98 <UARTEx_SetNbDataToProcess+0x94>)
 800ae54:	5c8a      	ldrb	r2, [r1, r2]
 800ae56:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ae5a:	7b3a      	ldrb	r2, [r7, #12]
 800ae5c:	490f      	ldr	r1, [pc, #60]	; (800ae9c <UARTEx_SetNbDataToProcess+0x98>)
 800ae5e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ae60:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae64:	b29a      	uxth	r2, r3
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ae6c:	7bfb      	ldrb	r3, [r7, #15]
 800ae6e:	7b7a      	ldrb	r2, [r7, #13]
 800ae70:	4909      	ldr	r1, [pc, #36]	; (800ae98 <UARTEx_SetNbDataToProcess+0x94>)
 800ae72:	5c8a      	ldrb	r2, [r1, r2]
 800ae74:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ae78:	7b7a      	ldrb	r2, [r7, #13]
 800ae7a:	4908      	ldr	r1, [pc, #32]	; (800ae9c <UARTEx_SetNbDataToProcess+0x98>)
 800ae7c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ae7e:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae82:	b29a      	uxth	r2, r3
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ae8a:	bf00      	nop
 800ae8c:	3714      	adds	r7, #20
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae94:	4770      	bx	lr
 800ae96:	bf00      	nop
 800ae98:	0800af6c 	.word	0x0800af6c
 800ae9c:	0800af74 	.word	0x0800af74

0800aea0 <memset>:
 800aea0:	4402      	add	r2, r0
 800aea2:	4603      	mov	r3, r0
 800aea4:	4293      	cmp	r3, r2
 800aea6:	d100      	bne.n	800aeaa <memset+0xa>
 800aea8:	4770      	bx	lr
 800aeaa:	f803 1b01 	strb.w	r1, [r3], #1
 800aeae:	e7f9      	b.n	800aea4 <memset+0x4>

0800aeb0 <__libc_init_array>:
 800aeb0:	b570      	push	{r4, r5, r6, lr}
 800aeb2:	4d0d      	ldr	r5, [pc, #52]	; (800aee8 <__libc_init_array+0x38>)
 800aeb4:	4c0d      	ldr	r4, [pc, #52]	; (800aeec <__libc_init_array+0x3c>)
 800aeb6:	1b64      	subs	r4, r4, r5
 800aeb8:	10a4      	asrs	r4, r4, #2
 800aeba:	2600      	movs	r6, #0
 800aebc:	42a6      	cmp	r6, r4
 800aebe:	d109      	bne.n	800aed4 <__libc_init_array+0x24>
 800aec0:	4d0b      	ldr	r5, [pc, #44]	; (800aef0 <__libc_init_array+0x40>)
 800aec2:	4c0c      	ldr	r4, [pc, #48]	; (800aef4 <__libc_init_array+0x44>)
 800aec4:	f000 f826 	bl	800af14 <_init>
 800aec8:	1b64      	subs	r4, r4, r5
 800aeca:	10a4      	asrs	r4, r4, #2
 800aecc:	2600      	movs	r6, #0
 800aece:	42a6      	cmp	r6, r4
 800aed0:	d105      	bne.n	800aede <__libc_init_array+0x2e>
 800aed2:	bd70      	pop	{r4, r5, r6, pc}
 800aed4:	f855 3b04 	ldr.w	r3, [r5], #4
 800aed8:	4798      	blx	r3
 800aeda:	3601      	adds	r6, #1
 800aedc:	e7ee      	b.n	800aebc <__libc_init_array+0xc>
 800aede:	f855 3b04 	ldr.w	r3, [r5], #4
 800aee2:	4798      	blx	r3
 800aee4:	3601      	adds	r6, #1
 800aee6:	e7f2      	b.n	800aece <__libc_init_array+0x1e>
 800aee8:	0800af84 	.word	0x0800af84
 800aeec:	0800af84 	.word	0x0800af84
 800aef0:	0800af84 	.word	0x0800af84
 800aef4:	0800af88 	.word	0x0800af88

0800aef8 <memcpy>:
 800aef8:	440a      	add	r2, r1
 800aefa:	4291      	cmp	r1, r2
 800aefc:	f100 33ff 	add.w	r3, r0, #4294967295
 800af00:	d100      	bne.n	800af04 <memcpy+0xc>
 800af02:	4770      	bx	lr
 800af04:	b510      	push	{r4, lr}
 800af06:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af0e:	4291      	cmp	r1, r2
 800af10:	d1f9      	bne.n	800af06 <memcpy+0xe>
 800af12:	bd10      	pop	{r4, pc}

0800af14 <_init>:
 800af14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af16:	bf00      	nop
 800af18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af1a:	bc08      	pop	{r3}
 800af1c:	469e      	mov	lr, r3
 800af1e:	4770      	bx	lr

0800af20 <_fini>:
 800af20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af22:	bf00      	nop
 800af24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af26:	bc08      	pop	{r3}
 800af28:	469e      	mov	lr, r3
 800af2a:	4770      	bx	lr
