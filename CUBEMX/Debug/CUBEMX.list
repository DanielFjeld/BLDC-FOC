
CUBEMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a5c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  08009c40  08009c40  00019c40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a024  0800a024  00020234  2**0
                  CONTENTS
  4 .ARM          00000008  0800a024  0800a024  0001a024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a02c  0800a02c  00020234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a02c  0800a02c  0001a02c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a030  0800a030  0001a030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  0800a034  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c48  20000238  0800a268  00020238  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000e80  0800a268  00020e80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002f746  00000000  00000000  000202a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005d8d  00000000  00000000  0004f9ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c48  00000000  00000000  00055780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001894  00000000  00000000  000573c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026fa8  00000000  00000000  00058c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00035a24  00000000  00000000  0007fc04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eb2b9  00000000  00000000  000b5628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005c34  00000000  00000000  001a08e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00012fe1  00000000  00000000  001a6518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  001b94f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000238 	.word	0x20000238
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009c24 	.word	0x08009c24

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000023c 	.word	0x2000023c
 800021c:	08009c24 	.word	0x08009c24

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <BLDC_main>:
	return atan;
}

//------------------------MAIN-------------------------
Flash *storage;
void BLDC_main(void){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	f5ad 7d5c 	sub.w	sp, sp, #880	; 0x370
 8000efa:	af00      	add	r7, sp, #0

	Flash_init();
 8000efc:	f000 f9b0 	bl	8001260 <Flash_init>
	storage = Flash_get_values();
 8000f00:	f000 f9d2 	bl	80012a8 <Flash_get_values>
 8000f04:	4603      	mov	r3, r0
 8000f06:	4a0f      	ldr	r2, [pc, #60]	; (8000f44 <BLDC_main+0x50>)
 8000f08:	6013      	str	r3, [r2, #0]
	uint32_t *ptr_test = (uint32_t*)Flash_get_values();
 8000f0a:	f000 f9cd 	bl	80012a8 <Flash_get_values>
 8000f0e:	f8c7 036c 	str.w	r0, [r7, #876]	; 0x36c


	PrintServerPrintf("\n\rE 0x%x 0x%x\n\r", ptr_test[0], ptr_test);
 8000f12:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	480a      	ldr	r0, [pc, #40]	; (8000f48 <BLDC_main+0x54>)
 8000f20:	f000 f9cc 	bl	80012bc <PrintServerPrintf>
	//
	HAL_Delay(10);
 8000f24:	200a      	movs	r0, #10
 8000f26:	f001 fbdf 	bl	80026e8 <HAL_Delay>
	Flash_save(NULL);
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	f000 f9a6 	bl	800127c <Flash_save>

	PrintServerPrintf("\n\rA 0x%x 0x%x\n\r", ptr_test[0], ptr_test);
 8000f30:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4803      	ldr	r0, [pc, #12]	; (8000f4c <BLDC_main+0x58>)
 8000f3e:	f000 f9bd 	bl	80012bc <PrintServerPrintf>

	while(1);
 8000f42:	e7fe      	b.n	8000f42 <BLDC_main+0x4e>
 8000f44:	20000254 	.word	0x20000254
 8000f48:	08009c40 	.word	0x08009c40
 8000f4c:	08009c50 	.word	0x08009c50

08000f50 <HAL_SPI_TxRxCpltCallback>:
uint8_t velocity_index = 0;
float velocity_array[velocity_lpf_size] = {0};


void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef * hspi)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) {
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4a6d      	ldr	r2, [pc, #436]	; (8001110 <HAL_SPI_TxRxCpltCallback+0x1c0>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	f040 80b0 	bne.w	80010c2 <HAL_SPI_TxRxCpltCallback+0x172>
		HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 1);
 8000f62:	2201      	movs	r2, #1
 8000f64:	2140      	movs	r1, #64	; 0x40
 8000f66:	486b      	ldr	r0, [pc, #428]	; (8001114 <HAL_SPI_TxRxCpltCallback+0x1c4>)
 8000f68:	f003 f976 	bl	8004258 <HAL_GPIO_WritePin>
		data_encoders.Calculated_pos = SPI1_rx_buff[0]; //(SPI1_rx_buff[3] << 8) | (SPI1_rx_buff[2]);
 8000f6c:	4b6a      	ldr	r3, [pc, #424]	; (8001118 <HAL_SPI_TxRxCpltCallback+0x1c8>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	461a      	mov	r2, r3
 8000f72:	4b6a      	ldr	r3, [pc, #424]	; (800111c <HAL_SPI_TxRxCpltCallback+0x1cc>)
 8000f74:	611a      	str	r2, [r3, #16]
		data_encoders.Encoder1_pos = (uint32_t)(((uint32_t)(SPI1_rx_buff[0] << 6) | (SPI1_rx_buff[1] >> 2)) * 5625) >> 8;
 8000f76:	4b68      	ldr	r3, [pc, #416]	; (8001118 <HAL_SPI_TxRxCpltCallback+0x1c8>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	019b      	lsls	r3, r3, #6
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	4b66      	ldr	r3, [pc, #408]	; (8001118 <HAL_SPI_TxRxCpltCallback+0x1c8>)
 8000f80:	785b      	ldrb	r3, [r3, #1]
 8000f82:	089b      	lsrs	r3, r3, #2
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	4313      	orrs	r3, r2
 8000f88:	f241 52f9 	movw	r2, #5625	; 0x15f9
 8000f8c:	fb02 f303 	mul.w	r3, r2, r3
 8000f90:	0a1b      	lsrs	r3, r3, #8
 8000f92:	4a62      	ldr	r2, [pc, #392]	; (800111c <HAL_SPI_TxRxCpltCallback+0x1cc>)
 8000f94:	6013      	str	r3, [r2, #0]
		data_encoders.Encoder1_pos_raw = (uint32_t)(SPI1_rx_buff[0] << 6) | (SPI1_rx_buff[1] >> 2);
 8000f96:	4b60      	ldr	r3, [pc, #384]	; (8001118 <HAL_SPI_TxRxCpltCallback+0x1c8>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	019b      	lsls	r3, r3, #6
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4b5e      	ldr	r3, [pc, #376]	; (8001118 <HAL_SPI_TxRxCpltCallback+0x1c8>)
 8000fa0:	785b      	ldrb	r3, [r3, #1]
 8000fa2:	089b      	lsrs	r3, r3, #2
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	4a5c      	ldr	r2, [pc, #368]	; (800111c <HAL_SPI_TxRxCpltCallback+0x1cc>)
 8000faa:	6093      	str	r3, [r2, #8]

		float velocity_temp;
		if(((int32_t)data_encoders.Encoder1_pos - last_pos) > 180000)velocity_temp = ((int32_t)data_encoders.Encoder1_pos-last_pos - 360000);
 8000fac:	4b5b      	ldr	r3, [pc, #364]	; (800111c <HAL_SPI_TxRxCpltCallback+0x1cc>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4b5b      	ldr	r3, [pc, #364]	; (8001120 <HAL_SPI_TxRxCpltCallback+0x1d0>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	4a5a      	ldr	r2, [pc, #360]	; (8001124 <HAL_SPI_TxRxCpltCallback+0x1d4>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	dd10      	ble.n	8000fe0 <HAL_SPI_TxRxCpltCallback+0x90>
 8000fbe:	4b57      	ldr	r3, [pc, #348]	; (800111c <HAL_SPI_TxRxCpltCallback+0x1cc>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	4b56      	ldr	r3, [pc, #344]	; (8001120 <HAL_SPI_TxRxCpltCallback+0x1d0>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	f5a3 23af 	sub.w	r3, r3, #358400	; 0x57800
 8000fce:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 8000fd2:	ee07 3a90 	vmov	s15, r3
 8000fd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fda:	edc7 7a03 	vstr	s15, [r7, #12]
 8000fde:	e025      	b.n	800102c <HAL_SPI_TxRxCpltCallback+0xdc>
		else if(((int32_t)data_encoders.Encoder1_pos - last_pos) < -180000)velocity_temp = ((int32_t)data_encoders.Encoder1_pos-last_pos + 360000);
 8000fe0:	4b4e      	ldr	r3, [pc, #312]	; (800111c <HAL_SPI_TxRxCpltCallback+0x1cc>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4b4e      	ldr	r3, [pc, #312]	; (8001120 <HAL_SPI_TxRxCpltCallback+0x1d0>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	4a4e      	ldr	r2, [pc, #312]	; (8001128 <HAL_SPI_TxRxCpltCallback+0x1d8>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	da10      	bge.n	8001014 <HAL_SPI_TxRxCpltCallback+0xc4>
 8000ff2:	4b4a      	ldr	r3, [pc, #296]	; (800111c <HAL_SPI_TxRxCpltCallback+0x1cc>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	4b49      	ldr	r3, [pc, #292]	; (8001120 <HAL_SPI_TxRxCpltCallback+0x1d0>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	f503 23af 	add.w	r3, r3, #358400	; 0x57800
 8001002:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8001006:	ee07 3a90 	vmov	s15, r3
 800100a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800100e:	edc7 7a03 	vstr	s15, [r7, #12]
 8001012:	e00b      	b.n	800102c <HAL_SPI_TxRxCpltCallback+0xdc>
		else velocity_temp = ((int32_t)data_encoders.Encoder1_pos-last_pos);
 8001014:	4b41      	ldr	r3, [pc, #260]	; (800111c <HAL_SPI_TxRxCpltCallback+0x1cc>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	461a      	mov	r2, r3
 800101a:	4b41      	ldr	r3, [pc, #260]	; (8001120 <HAL_SPI_TxRxCpltCallback+0x1d0>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	ee07 3a90 	vmov	s15, r3
 8001024:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001028:	edc7 7a03 	vstr	s15, [r7, #12]
		last_pos = (int32_t)data_encoders.Encoder1_pos;
 800102c:	4b3b      	ldr	r3, [pc, #236]	; (800111c <HAL_SPI_TxRxCpltCallback+0x1cc>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	461a      	mov	r2, r3
 8001032:	4b3b      	ldr	r3, [pc, #236]	; (8001120 <HAL_SPI_TxRxCpltCallback+0x1d0>)
 8001034:	601a      	str	r2, [r3, #0]

		velocity_accumulate += velocity_temp;
 8001036:	4b3d      	ldr	r3, [pc, #244]	; (800112c <HAL_SPI_TxRxCpltCallback+0x1dc>)
 8001038:	ed93 7a00 	vldr	s14, [r3]
 800103c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001040:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001044:	4b39      	ldr	r3, [pc, #228]	; (800112c <HAL_SPI_TxRxCpltCallback+0x1dc>)
 8001046:	edc3 7a00 	vstr	s15, [r3]
		velocity_accumulate -= velocity_array[velocity_index];
 800104a:	4b38      	ldr	r3, [pc, #224]	; (800112c <HAL_SPI_TxRxCpltCallback+0x1dc>)
 800104c:	ed93 7a00 	vldr	s14, [r3]
 8001050:	4b37      	ldr	r3, [pc, #220]	; (8001130 <HAL_SPI_TxRxCpltCallback+0x1e0>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	4a37      	ldr	r2, [pc, #220]	; (8001134 <HAL_SPI_TxRxCpltCallback+0x1e4>)
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	4413      	add	r3, r2
 800105a:	edd3 7a00 	vldr	s15, [r3]
 800105e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001062:	4b32      	ldr	r3, [pc, #200]	; (800112c <HAL_SPI_TxRxCpltCallback+0x1dc>)
 8001064:	edc3 7a00 	vstr	s15, [r3]
		velocity_array[velocity_index] = velocity_temp;
 8001068:	4b31      	ldr	r3, [pc, #196]	; (8001130 <HAL_SPI_TxRxCpltCallback+0x1e0>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	4a31      	ldr	r2, [pc, #196]	; (8001134 <HAL_SPI_TxRxCpltCallback+0x1e4>)
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	4413      	add	r3, r2
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	601a      	str	r2, [r3, #0]
		velocity_index++;
 8001076:	4b2e      	ldr	r3, [pc, #184]	; (8001130 <HAL_SPI_TxRxCpltCallback+0x1e0>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	3301      	adds	r3, #1
 800107c:	b2da      	uxtb	r2, r3
 800107e:	4b2c      	ldr	r3, [pc, #176]	; (8001130 <HAL_SPI_TxRxCpltCallback+0x1e0>)
 8001080:	701a      	strb	r2, [r3, #0]
		if (velocity_index == velocity_lpf_size)velocity_index = 0;
 8001082:	4b2b      	ldr	r3, [pc, #172]	; (8001130 <HAL_SPI_TxRxCpltCallback+0x1e0>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b64      	cmp	r3, #100	; 0x64
 8001088:	d102      	bne.n	8001090 <HAL_SPI_TxRxCpltCallback+0x140>
 800108a:	4b29      	ldr	r3, [pc, #164]	; (8001130 <HAL_SPI_TxRxCpltCallback+0x1e0>)
 800108c:	2200      	movs	r2, #0
 800108e:	701a      	strb	r2, [r3, #0]

		data_encoders.Velocity = (int32_t)((velocity_accumulate*10000.0f*60.0f)/360.0f/velocity_lpf_size);
 8001090:	4b26      	ldr	r3, [pc, #152]	; (800112c <HAL_SPI_TxRxCpltCallback+0x1dc>)
 8001092:	edd3 7a00 	vldr	s15, [r3]
 8001096:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001138 <HAL_SPI_TxRxCpltCallback+0x1e8>
 800109a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800109e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800113c <HAL_SPI_TxRxCpltCallback+0x1ec>
 80010a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010a6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001140 <HAL_SPI_TxRxCpltCallback+0x1f0>
 80010aa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010ae:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001144 <HAL_SPI_TxRxCpltCallback+0x1f4>
 80010b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010ba:	ee17 2a90 	vmov	r2, s15
 80010be:	4b17      	ldr	r3, [pc, #92]	; (800111c <HAL_SPI_TxRxCpltCallback+0x1cc>)
 80010c0:	615a      	str	r2, [r3, #20]
	}
	if (hspi == &hspi3) {
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a20      	ldr	r2, [pc, #128]	; (8001148 <HAL_SPI_TxRxCpltCallback+0x1f8>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d11a      	bne.n	8001100 <HAL_SPI_TxRxCpltCallback+0x1b0>
		HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 1);
 80010ca:	2201      	movs	r2, #1
 80010cc:	2104      	movs	r1, #4
 80010ce:	481f      	ldr	r0, [pc, #124]	; (800114c <HAL_SPI_TxRxCpltCallback+0x1fc>)
 80010d0:	f003 f8c2 	bl	8004258 <HAL_GPIO_WritePin>
		data_encoders.Encoder2_temp_x10 = (SPI3_rx_buff[3] << 8) | (SPI3_rx_buff[2]);
 80010d4:	4b1e      	ldr	r3, [pc, #120]	; (8001150 <HAL_SPI_TxRxCpltCallback+0x200>)
 80010d6:	78db      	ldrb	r3, [r3, #3]
 80010d8:	021b      	lsls	r3, r3, #8
 80010da:	b21a      	sxth	r2, r3
 80010dc:	4b1c      	ldr	r3, [pc, #112]	; (8001150 <HAL_SPI_TxRxCpltCallback+0x200>)
 80010de:	789b      	ldrb	r3, [r3, #2]
 80010e0:	b21b      	sxth	r3, r3
 80010e2:	4313      	orrs	r3, r2
 80010e4:	b21a      	sxth	r2, r3
 80010e6:	4b0d      	ldr	r3, [pc, #52]	; (800111c <HAL_SPI_TxRxCpltCallback+0x1cc>)
 80010e8:	835a      	strh	r2, [r3, #26]
		data_encoders.Encoder2_pos = (SPI3_rx_buff[0] << 6) | (SPI3_rx_buff[1] >> 2);
 80010ea:	4b19      	ldr	r3, [pc, #100]	; (8001150 <HAL_SPI_TxRxCpltCallback+0x200>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	019b      	lsls	r3, r3, #6
 80010f0:	4a17      	ldr	r2, [pc, #92]	; (8001150 <HAL_SPI_TxRxCpltCallback+0x200>)
 80010f2:	7852      	ldrb	r2, [r2, #1]
 80010f4:	0892      	lsrs	r2, r2, #2
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	4313      	orrs	r3, r2
 80010fa:	461a      	mov	r2, r3
 80010fc:	4b07      	ldr	r3, [pc, #28]	; (800111c <HAL_SPI_TxRxCpltCallback+0x1cc>)
 80010fe:	605a      	str	r2, [r3, #4]

	}
	//data_encoders.Calculated_pos = 10;

	Encoders_IRQ_callback(&data_encoders);
 8001100:	4b14      	ldr	r3, [pc, #80]	; (8001154 <HAL_SPI_TxRxCpltCallback+0x204>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4805      	ldr	r0, [pc, #20]	; (800111c <HAL_SPI_TxRxCpltCallback+0x1cc>)
 8001106:	4798      	blx	r3
}
 8001108:	bf00      	nop
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000adc 	.word	0x20000adc
 8001114:	48000400 	.word	0x48000400
 8001118:	20000260 	.word	0x20000260
 800111c:	2000027c 	.word	0x2000027c
 8001120:	2000029c 	.word	0x2000029c
 8001124:	0002bf20 	.word	0x0002bf20
 8001128:	fffd40e0 	.word	0xfffd40e0
 800112c:	20000298 	.word	0x20000298
 8001130:	200002a0 	.word	0x200002a0
 8001134:	200002a4 	.word	0x200002a4
 8001138:	461c4000 	.word	0x461c4000
 800113c:	42700000 	.word	0x42700000
 8001140:	43b40000 	.word	0x43b40000
 8001144:	42c80000 	.word	0x42c80000
 8001148:	20000b40 	.word	0x20000b40
 800114c:	48000c00 	.word	0x48000c00
 8001150:	20000270 	.word	0x20000270
 8001154:	20000278 	.word	0x20000278

08001158 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 0);
 8001160:	2200      	movs	r2, #0
 8001162:	2140      	movs	r1, #64	; 0x40
 8001164:	480b      	ldr	r0, [pc, #44]	; (8001194 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001166:	f003 f877 	bl	8004258 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 0);
 800116a:	2200      	movs	r2, #0
 800116c:	2104      	movs	r1, #4
 800116e:	480a      	ldr	r0, [pc, #40]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001170:	f003 f872 	bl	8004258 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA(&hspi1, SPI1_tx_buff, SPI1_rx_buff, ORBIS_SPI_SIZE);
 8001174:	2305      	movs	r3, #5
 8001176:	4a09      	ldr	r2, [pc, #36]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001178:	4909      	ldr	r1, [pc, #36]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800117a:	480a      	ldr	r0, [pc, #40]	; (80011a4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800117c:	f004 f86a 	bl	8005254 <HAL_SPI_TransmitReceive_DMA>
	HAL_SPI_TransmitReceive_DMA(&hspi3, SPI3_tx_buff, SPI3_rx_buff, ORBIS_SPI_SIZE);
 8001180:	2305      	movs	r3, #5
 8001182:	4a09      	ldr	r2, [pc, #36]	; (80011a8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001184:	4909      	ldr	r1, [pc, #36]	; (80011ac <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001186:	480a      	ldr	r0, [pc, #40]	; (80011b0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001188:	f004 f864 	bl	8005254 <HAL_SPI_TransmitReceive_DMA>
}
 800118c:	bf00      	nop
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	48000400 	.word	0x48000400
 8001198:	48000c00 	.word	0x48000c00
 800119c:	20000260 	.word	0x20000260
 80011a0:	20000258 	.word	0x20000258
 80011a4:	20000adc 	.word	0x20000adc
 80011a8:	20000270 	.word	0x20000270
 80011ac:	20000268 	.word	0x20000268
 80011b0:	20000b40 	.word	0x20000b40

080011b4 <flash_read>:
		.Current_limit = 10.0f //ampere
};

uint64_t test_data[2] = {0};

uint32_t flash_read(uint32_t address){
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
    return (uint32_t*)address;
 80011bc:	687b      	ldr	r3, [r7, #4]
}
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <flash_write>:

void flash_write(uint32_t page, uint64_t data[], uint32_t size){
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b08c      	sub	sp, #48	; 0x30
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	60f8      	str	r0, [r7, #12]
 80011d2:	60b9      	str	r1, [r7, #8]
 80011d4:	607a      	str	r2, [r7, #4]
	HAL_Delay(1000);
 80011d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011da:	f001 fa85 	bl	80026e8 <HAL_Delay>
	uint32_t PageError;
	FLASH_EraseInitTypeDef pEraseInit = {
 80011de:	2300      	movs	r3, #0
 80011e0:	617b      	str	r3, [r7, #20]
 80011e2:	2301      	movs	r3, #1
 80011e4:	61bb      	str	r3, [r7, #24]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	61fb      	str	r3, [r7, #28]
 80011ea:	2301      	movs	r3, #1
 80011ec:	623b      	str	r3, [r7, #32]
			.Page = page,
			.TypeErase = FLASH_TYPEERASE_PAGES
	};


	HAL_FLASH_Unlock();
 80011ee:	f002 fd91 	bl	8003d14 <HAL_FLASH_Unlock>

	HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 80011f2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	4611      	mov	r1, r2
 80011fc:	4618      	mov	r0, r3
 80011fe:	f002 fe7b 	bl	8003ef8 <HAL_FLASHEx_Erase>
//	FLASH_PageErase(page, FLASH_BANK_1);
	HAL_FLASH_Lock();
 8001202:	f002 fd9b 	bl	8003d3c <HAL_FLASH_Lock>

	HAL_Delay(1000);
 8001206:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800120a:	f001 fa6d 	bl	80026e8 <HAL_Delay>

    HAL_FLASH_Unlock();
 800120e:	f002 fd81 	bl	8003d14 <HAL_FLASH_Unlock>
    for(int i = 0; i < size/sizeof(uint64_t); i++){
 8001212:	2300      	movs	r3, #0
 8001214:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001216:	e014      	b.n	8001242 <flash_write+0x78>
    	uint32_t address = FLASH_BASE + PAGE_SIZE*page + i*sizeof(uint64_t);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800121e:	021a      	lsls	r2, r3, #8
 8001220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001222:	4413      	add	r3, r2
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	62bb      	str	r3, [r7, #40]	; 0x28
    	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,address, data[i]);
 8001228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	68ba      	ldr	r2, [r7, #8]
 800122e:	4413      	add	r3, r2
 8001230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001234:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001236:	2000      	movs	r0, #0
 8001238:	f002 fdbc 	bl	8003db4 <HAL_FLASH_Program>
    for(int i = 0; i < size/sizeof(uint64_t); i++){
 800123c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800123e:	3301      	adds	r3, #1
 8001240:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	08da      	lsrs	r2, r3, #3
 8001246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001248:	429a      	cmp	r2, r3
 800124a:	d8e5      	bhi.n	8001218 <flash_write+0x4e>
    }
    HAL_FLASH_Lock();
 800124c:	f002 fd76 	bl	8003d3c <HAL_FLASH_Lock>
    HAL_Delay(1000);
 8001250:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001254:	f001 fa48 	bl	80026e8 <HAL_Delay>
}
 8001258:	bf00      	nop
 800125a:	3730      	adds	r7, #48	; 0x30
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <Flash_init>:

void Flash_init(){
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
	ptr = &RAM;
 8001264:	4b03      	ldr	r3, [pc, #12]	; (8001274 <Flash_init+0x14>)
 8001266:	4a04      	ldr	r2, [pc, #16]	; (8001278 <Flash_init+0x18>)
 8001268:	601a      	str	r2, [r3, #0]
}
 800126a:	bf00      	nop
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	20000434 	.word	0x20000434
 8001278:	20000000 	.word	0x20000000

0800127c <Flash_save>:

void Flash_save(Flash *data){
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	test_data[1] = 0x0a0a;
 8001284:	4907      	ldr	r1, [pc, #28]	; (80012a4 <Flash_save+0x28>)
 8001286:	f640 220a 	movw	r2, #2570	; 0xa0a
 800128a:	f04f 0300 	mov.w	r3, #0
 800128e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	flash_write(PAGE_NUMBER, test_data, sizeof(test_data));
 8001292:	2210      	movs	r2, #16
 8001294:	4903      	ldr	r1, [pc, #12]	; (80012a4 <Flash_save+0x28>)
 8001296:	203f      	movs	r0, #63	; 0x3f
 8001298:	f7ff ff97 	bl	80011ca <flash_write>
}
 800129c:	bf00      	nop
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000438 	.word	0x20000438

080012a8 <Flash_get_values>:

Flash *Flash_get_values(){
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
	return flash_read(FLASH_BASE + PAGE_SIZE*PAGE_NUMBER);
 80012ac:	4802      	ldr	r0, [pc, #8]	; (80012b8 <Flash_get_values+0x10>)
 80012ae:	f7ff ff81 	bl	80011b4 <flash_read>
 80012b2:	4603      	mov	r3, r0
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	0801f800 	.word	0x0801f800

080012bc <PrintServerPrintf>:
/* For convenience, define a pointer to UART handle */
UART_HandleTypeDef *uart_handle_p = &huart1;

volatile uint8_t buff[PRINT_BUFFER_SIZE];
void PrintServerPrintf(const char *fmt, ...)
{
 80012bc:	b40f      	push	{r0, r1, r2, r3}
 80012be:	b590      	push	{r4, r7, lr}
 80012c0:	b083      	sub	sp, #12
 80012c2:	af00      	add	r7, sp, #0
/* local variable to store the final text string to be sent to UART */

/* va_list is a type to hold information about variable arguments */
va_list args;
/* va_start must be called before accessing variable argument list */
va_start(args, fmt);
 80012c4:	f107 031c 	add.w	r3, r7, #28
 80012c8:	607b      	str	r3, [r7, #4]
*
* The vsnprintf() function converts each entry in the argument list
* according to the corresponding format specifier in format. The format has
* the same form and function as the format string for the printf()
* function. */
vsnprintf((char *)buff, PRINT_BUFFER_SIZE, fmt, args);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012d2:	480b      	ldr	r0, [pc, #44]	; (8001300 <PrintServerPrintf+0x44>)
 80012d4:	f006 fb9e 	bl	8007a14 <vsniprintf>
/* va_end should be executed before the function returns whenever
* va_start has been previously used in that function */
va_end(args);
HAL_UART_Transmit_DMA(uart_handle_p, (uint8_t *)buff, strlen((char *)buff));
 80012d8:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <PrintServerPrintf+0x48>)
 80012da:	681c      	ldr	r4, [r3, #0]
 80012dc:	4808      	ldr	r0, [pc, #32]	; (8001300 <PrintServerPrintf+0x44>)
 80012de:	f7fe ffef 	bl	80002c0 <strlen>
 80012e2:	4603      	mov	r3, r0
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	461a      	mov	r2, r3
 80012e8:	4905      	ldr	r1, [pc, #20]	; (8001300 <PrintServerPrintf+0x44>)
 80012ea:	4620      	mov	r0, r4
 80012ec:	f005 f802 	bl	80062f4 <HAL_UART_Transmit_DMA>
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80012fa:	b004      	add	sp, #16
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	20000448 	.word	0x20000448
 8001304:	20000038 	.word	0x20000038

08001308 <HAL_ADC_ConvCpltCallback>:
		VT_data.V_Bat = (VT_adc_result_DMA[2]/number_of_VT_oversample*VDDA*34)/ADC_RES;
		VT_data.V_aux = (VT_adc_result_DMA[3]/number_of_VT_oversample*VDDA*57)/ADC_RES/10;
		VT_IRQ_callback(&VT_data);
	}
}
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1 && !calibrating){
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4a76      	ldr	r2, [pc, #472]	; (80014ec <HAL_ADC_ConvCpltCallback+0x1e4>)
 8001314:	4293      	cmp	r3, r2
 8001316:	f040 808f 	bne.w	8001438 <HAL_ADC_ConvCpltCallback+0x130>
 800131a:	4b75      	ldr	r3, [pc, #468]	; (80014f0 <HAL_ADC_ConvCpltCallback+0x1e8>)
 800131c:	881b      	ldrh	r3, [r3, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	f040 808a 	bne.w	8001438 <HAL_ADC_ConvCpltCallback+0x130>
		VDDA = (int16_t)3000*(*vrefint)/(adc_result_DMA[7]/number_of_oversample);
 8001324:	4b73      	ldr	r3, [pc, #460]	; (80014f4 <HAL_ADC_ConvCpltCallback+0x1ec>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	881b      	ldrh	r3, [r3, #0]
 800132a:	461a      	mov	r2, r3
 800132c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001330:	fb02 f303 	mul.w	r3, r2, r3
 8001334:	461a      	mov	r2, r3
 8001336:	4b70      	ldr	r3, [pc, #448]	; (80014f8 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	091b      	lsrs	r3, r3, #4
 800133c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001340:	b21a      	sxth	r2, r3
 8001342:	4b6e      	ldr	r3, [pc, #440]	; (80014fc <HAL_ADC_ConvCpltCallback+0x1f4>)
 8001344:	801a      	strh	r2, [r3, #0]
		data.Current_M1 = -(int32_t)(((((int32_t)adc_result_DMA[6]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[0])*50;
 8001346:	4b6e      	ldr	r3, [pc, #440]	; (8001500 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4619      	mov	r1, r3
 800134c:	4b6a      	ldr	r3, [pc, #424]	; (80014f8 <HAL_ADC_ConvCpltCallback+0x1f0>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	2b00      	cmp	r3, #0
 8001352:	da00      	bge.n	8001356 <HAL_ADC_ConvCpltCallback+0x4e>
 8001354:	330f      	adds	r3, #15
 8001356:	111b      	asrs	r3, r3, #4
 8001358:	461a      	mov	r2, r3
 800135a:	4b68      	ldr	r3, [pc, #416]	; (80014fc <HAL_ADC_ConvCpltCallback+0x1f4>)
 800135c:	881b      	ldrh	r3, [r3, #0]
 800135e:	b21b      	sxth	r3, r3
 8001360:	fb02 f303 	mul.w	r3, r2, r3
 8001364:	4a67      	ldr	r2, [pc, #412]	; (8001504 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8001366:	fb82 0203 	smull	r0, r2, r2, r3
 800136a:	441a      	add	r2, r3
 800136c:	12d2      	asrs	r2, r2, #11
 800136e:	17db      	asrs	r3, r3, #31
 8001370:	1ad2      	subs	r2, r2, r3
 8001372:	4613      	mov	r3, r2
 8001374:	00db      	lsls	r3, r3, #3
 8001376:	4413      	add	r3, r2
 8001378:	011a      	lsls	r2, r3, #4
 800137a:	4413      	add	r3, r2
 800137c:	4a62      	ldr	r2, [pc, #392]	; (8001508 <HAL_ADC_ConvCpltCallback+0x200>)
 800137e:	fb82 0203 	smull	r0, r2, r2, r3
 8001382:	1152      	asrs	r2, r2, #5
 8001384:	17db      	asrs	r3, r3, #31
 8001386:	1a9b      	subs	r3, r3, r2
 8001388:	440b      	add	r3, r1
 800138a:	2232      	movs	r2, #50	; 0x32
 800138c:	fb02 f303 	mul.w	r3, r2, r3
 8001390:	4a5e      	ldr	r2, [pc, #376]	; (800150c <HAL_ADC_ConvCpltCallback+0x204>)
 8001392:	6013      	str	r3, [r2, #0]
		data.Current_M2 = -(int32_t)(((((int32_t)adc_result_DMA[5]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[1])*50;
 8001394:	4b5a      	ldr	r3, [pc, #360]	; (8001500 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	4619      	mov	r1, r3
 800139a:	4b57      	ldr	r3, [pc, #348]	; (80014f8 <HAL_ADC_ConvCpltCallback+0x1f0>)
 800139c:	695b      	ldr	r3, [r3, #20]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	da00      	bge.n	80013a4 <HAL_ADC_ConvCpltCallback+0x9c>
 80013a2:	330f      	adds	r3, #15
 80013a4:	111b      	asrs	r3, r3, #4
 80013a6:	461a      	mov	r2, r3
 80013a8:	4b54      	ldr	r3, [pc, #336]	; (80014fc <HAL_ADC_ConvCpltCallback+0x1f4>)
 80013aa:	881b      	ldrh	r3, [r3, #0]
 80013ac:	b21b      	sxth	r3, r3
 80013ae:	fb02 f303 	mul.w	r3, r2, r3
 80013b2:	4a54      	ldr	r2, [pc, #336]	; (8001504 <HAL_ADC_ConvCpltCallback+0x1fc>)
 80013b4:	fb82 0203 	smull	r0, r2, r2, r3
 80013b8:	441a      	add	r2, r3
 80013ba:	12d2      	asrs	r2, r2, #11
 80013bc:	17db      	asrs	r3, r3, #31
 80013be:	1ad2      	subs	r2, r2, r3
 80013c0:	4613      	mov	r3, r2
 80013c2:	00db      	lsls	r3, r3, #3
 80013c4:	4413      	add	r3, r2
 80013c6:	011a      	lsls	r2, r3, #4
 80013c8:	4413      	add	r3, r2
 80013ca:	4a4f      	ldr	r2, [pc, #316]	; (8001508 <HAL_ADC_ConvCpltCallback+0x200>)
 80013cc:	fb82 0203 	smull	r0, r2, r2, r3
 80013d0:	1152      	asrs	r2, r2, #5
 80013d2:	17db      	asrs	r3, r3, #31
 80013d4:	1a9b      	subs	r3, r3, r2
 80013d6:	440b      	add	r3, r1
 80013d8:	2232      	movs	r2, #50	; 0x32
 80013da:	fb02 f303 	mul.w	r3, r2, r3
 80013de:	4a4b      	ldr	r2, [pc, #300]	; (800150c <HAL_ADC_ConvCpltCallback+0x204>)
 80013e0:	6053      	str	r3, [r2, #4]
		data.Current_M3 = -(int32_t)(((((int32_t)adc_result_DMA[4]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[2])*50;
 80013e2:	4b47      	ldr	r3, [pc, #284]	; (8001500 <HAL_ADC_ConvCpltCallback+0x1f8>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	4619      	mov	r1, r3
 80013e8:	4b43      	ldr	r3, [pc, #268]	; (80014f8 <HAL_ADC_ConvCpltCallback+0x1f0>)
 80013ea:	691b      	ldr	r3, [r3, #16]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	da00      	bge.n	80013f2 <HAL_ADC_ConvCpltCallback+0xea>
 80013f0:	330f      	adds	r3, #15
 80013f2:	111b      	asrs	r3, r3, #4
 80013f4:	461a      	mov	r2, r3
 80013f6:	4b41      	ldr	r3, [pc, #260]	; (80014fc <HAL_ADC_ConvCpltCallback+0x1f4>)
 80013f8:	881b      	ldrh	r3, [r3, #0]
 80013fa:	b21b      	sxth	r3, r3
 80013fc:	fb02 f303 	mul.w	r3, r2, r3
 8001400:	4a40      	ldr	r2, [pc, #256]	; (8001504 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8001402:	fb82 0203 	smull	r0, r2, r2, r3
 8001406:	441a      	add	r2, r3
 8001408:	12d2      	asrs	r2, r2, #11
 800140a:	17db      	asrs	r3, r3, #31
 800140c:	1ad2      	subs	r2, r2, r3
 800140e:	4613      	mov	r3, r2
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	4413      	add	r3, r2
 8001414:	011a      	lsls	r2, r3, #4
 8001416:	4413      	add	r3, r2
 8001418:	4a3b      	ldr	r2, [pc, #236]	; (8001508 <HAL_ADC_ConvCpltCallback+0x200>)
 800141a:	fb82 0203 	smull	r0, r2, r2, r3
 800141e:	1152      	asrs	r2, r2, #5
 8001420:	17db      	asrs	r3, r3, #31
 8001422:	1a9b      	subs	r3, r3, r2
 8001424:	440b      	add	r3, r1
 8001426:	2232      	movs	r2, #50	; 0x32
 8001428:	fb02 f303 	mul.w	r3, r2, r3
 800142c:	4a37      	ldr	r2, [pc, #220]	; (800150c <HAL_ADC_ConvCpltCallback+0x204>)
 800142e:	6093      	str	r3, [r2, #8]
//		data.Current_DC = ((abs((int)data.Current_M1)+abs((int)data.Current_M2)+abs((int)data.Current_M3))/2);
		Curent_IRQ_callback(&data);
 8001430:	4b37      	ldr	r3, [pc, #220]	; (8001510 <HAL_ADC_ConvCpltCallback+0x208>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4835      	ldr	r0, [pc, #212]	; (800150c <HAL_ADC_ConvCpltCallback+0x204>)
 8001436:	4798      	blx	r3
	}
	if (hadc == &hadc2){
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4a36      	ldr	r2, [pc, #216]	; (8001514 <HAL_ADC_ConvCpltCallback+0x20c>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d151      	bne.n	80014e4 <HAL_ADC_ConvCpltCallback+0x1dc>
		VT_data.Temp_NTC1 = (VT_adc_result_DMA[4]/number_of_VT_oversample*VDDA)/ADC_RES;
 8001440:	4b35      	ldr	r3, [pc, #212]	; (8001518 <HAL_ADC_ConvCpltCallback+0x210>)
 8001442:	691b      	ldr	r3, [r3, #16]
 8001444:	091b      	lsrs	r3, r3, #4
 8001446:	4a2d      	ldr	r2, [pc, #180]	; (80014fc <HAL_ADC_ConvCpltCallback+0x1f4>)
 8001448:	8812      	ldrh	r2, [r2, #0]
 800144a:	b212      	sxth	r2, r2
 800144c:	fb03 f202 	mul.w	r2, r3, r2
 8001450:	4b32      	ldr	r3, [pc, #200]	; (800151c <HAL_ADC_ConvCpltCallback+0x214>)
 8001452:	fba3 1302 	umull	r1, r3, r3, r2
 8001456:	1ad2      	subs	r2, r2, r3
 8001458:	0852      	lsrs	r2, r2, #1
 800145a:	4413      	add	r3, r2
 800145c:	0adb      	lsrs	r3, r3, #11
 800145e:	b25a      	sxtb	r2, r3
 8001460:	4b2f      	ldr	r3, [pc, #188]	; (8001520 <HAL_ADC_ConvCpltCallback+0x218>)
 8001462:	719a      	strb	r2, [r3, #6]
		VT_data.Temp_NTC2 = (VT_adc_result_DMA[5]/number_of_VT_oversample*VDDA)/ADC_RES;
 8001464:	4b2c      	ldr	r3, [pc, #176]	; (8001518 <HAL_ADC_ConvCpltCallback+0x210>)
 8001466:	695b      	ldr	r3, [r3, #20]
 8001468:	091b      	lsrs	r3, r3, #4
 800146a:	4a24      	ldr	r2, [pc, #144]	; (80014fc <HAL_ADC_ConvCpltCallback+0x1f4>)
 800146c:	8812      	ldrh	r2, [r2, #0]
 800146e:	b212      	sxth	r2, r2
 8001470:	fb03 f202 	mul.w	r2, r3, r2
 8001474:	4b29      	ldr	r3, [pc, #164]	; (800151c <HAL_ADC_ConvCpltCallback+0x214>)
 8001476:	fba3 1302 	umull	r1, r3, r3, r2
 800147a:	1ad2      	subs	r2, r2, r3
 800147c:	0852      	lsrs	r2, r2, #1
 800147e:	4413      	add	r3, r2
 8001480:	0adb      	lsrs	r3, r3, #11
 8001482:	b25a      	sxtb	r2, r3
 8001484:	4b26      	ldr	r3, [pc, #152]	; (8001520 <HAL_ADC_ConvCpltCallback+0x218>)
 8001486:	71da      	strb	r2, [r3, #7]
		VT_data.V_Bat = (VT_adc_result_DMA[6]/number_of_VT_oversample*VDDA*34)/ADC_RES;
 8001488:	4b23      	ldr	r3, [pc, #140]	; (8001518 <HAL_ADC_ConvCpltCallback+0x210>)
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	091b      	lsrs	r3, r3, #4
 800148e:	4a1b      	ldr	r2, [pc, #108]	; (80014fc <HAL_ADC_ConvCpltCallback+0x1f4>)
 8001490:	8812      	ldrh	r2, [r2, #0]
 8001492:	b212      	sxth	r2, r2
 8001494:	fb03 f202 	mul.w	r2, r3, r2
 8001498:	4613      	mov	r3, r2
 800149a:	011b      	lsls	r3, r3, #4
 800149c:	4413      	add	r3, r2
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	461a      	mov	r2, r3
 80014a2:	4b1e      	ldr	r3, [pc, #120]	; (800151c <HAL_ADC_ConvCpltCallback+0x214>)
 80014a4:	fba3 1302 	umull	r1, r3, r3, r2
 80014a8:	1ad2      	subs	r2, r2, r3
 80014aa:	0852      	lsrs	r2, r2, #1
 80014ac:	4413      	add	r3, r2
 80014ae:	0adb      	lsrs	r3, r3, #11
 80014b0:	4a1b      	ldr	r2, [pc, #108]	; (8001520 <HAL_ADC_ConvCpltCallback+0x218>)
 80014b2:	6013      	str	r3, [r2, #0]
		VT_data.V_aux = (VT_adc_result_DMA[7]/number_of_VT_oversample*VDDA*57)/ADC_RES/10;
 80014b4:	4b18      	ldr	r3, [pc, #96]	; (8001518 <HAL_ADC_ConvCpltCallback+0x210>)
 80014b6:	69db      	ldr	r3, [r3, #28]
 80014b8:	091b      	lsrs	r3, r3, #4
 80014ba:	4a10      	ldr	r2, [pc, #64]	; (80014fc <HAL_ADC_ConvCpltCallback+0x1f4>)
 80014bc:	8812      	ldrh	r2, [r2, #0]
 80014be:	b212      	sxth	r2, r2
 80014c0:	fb03 f202 	mul.w	r2, r3, r2
 80014c4:	4613      	mov	r3, r2
 80014c6:	00db      	lsls	r3, r3, #3
 80014c8:	1a9b      	subs	r3, r3, r2
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	4413      	add	r3, r2
 80014ce:	4a15      	ldr	r2, [pc, #84]	; (8001524 <HAL_ADC_ConvCpltCallback+0x21c>)
 80014d0:	fba2 2303 	umull	r2, r3, r2, r3
 80014d4:	0bdb      	lsrs	r3, r3, #15
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	4b11      	ldr	r3, [pc, #68]	; (8001520 <HAL_ADC_ConvCpltCallback+0x218>)
 80014da:	809a      	strh	r2, [r3, #4]
		VT_IRQ_callback(&VT_data);
 80014dc:	4b12      	ldr	r3, [pc, #72]	; (8001528 <HAL_ADC_ConvCpltCallback+0x220>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	480f      	ldr	r0, [pc, #60]	; (8001520 <HAL_ADC_ConvCpltCallback+0x218>)
 80014e2:	4798      	blx	r3
	}
}
 80014e4:	bf00      	nop
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20000714 	.word	0x20000714
 80014f0:	200006b8 	.word	0x200006b8
 80014f4:	2000003c 	.word	0x2000003c
 80014f8:	20000648 	.word	0x20000648
 80014fc:	20000694 	.word	0x20000694
 8001500:	20000688 	.word	0x20000688
 8001504:	80080081 	.word	0x80080081
 8001508:	51eb851f 	.word	0x51eb851f
 800150c:	2000069c 	.word	0x2000069c
 8001510:	20000698 	.word	0x20000698
 8001514:	20000780 	.word	0x20000780
 8001518:	20000668 	.word	0x20000668
 800151c:	00100101 	.word	0x00100101
 8001520:	200006b0 	.word	0x200006b0
 8001524:	ccd99a67 	.word	0xccd99a67
 8001528:	200006ac 	.word	0x200006ac

0800152c <HAL_FDCAN_RxFifo0Callback>:
/** Local function definitions                                              **/
/*****************************************************************************/

/* This function overwrites _weak function definition in STM32 HAL FDCAN driver when linking project*/
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b09e      	sub	sp, #120	; 0x78
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  FDCAN_RxHeaderTypeDef RxHeader;
  uint8_t RxData[64];

  /* Fetch the CAN message from the FIFO buffer*/
  if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8001536:	f107 030c 	add.w	r3, r7, #12
 800153a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800153e:	2140      	movs	r1, #64	; 0x40
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f002 fa71 	bl	8003a28 <HAL_FDCAN_GetRxMessage>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <HAL_FDCAN_RxFifo0Callback+0x24>
  {
    Error_Handler();
 800154c:	f000 fc51 	bl	8001df2 <Error_Handler>
  }

  /* check if we have a callback for the identifier */
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 8001550:	2300      	movs	r3, #0
 8001552:	677b      	str	r3, [r7, #116]	; 0x74
 8001554:	e012      	b.n	800157c <HAL_FDCAN_RxFifo0Callback+0x50>
      if (FDCAN_listCallbacks[i].identifier == RxHeader.Identifier) {
 8001556:	4a0e      	ldr	r2, [pc, #56]	; (8001590 <HAL_FDCAN_RxFifo0Callback+0x64>)
 8001558:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	4413      	add	r3, r2
 800155e:	685a      	ldr	r2, [r3, #4]
 8001560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001562:	429a      	cmp	r2, r3
 8001564:	d107      	bne.n	8001576 <HAL_FDCAN_RxFifo0Callback+0x4a>
          FDCAN_listCallbacks[i].fp(RxData);
 8001566:	4a0a      	ldr	r2, [pc, #40]	; (8001590 <HAL_FDCAN_RxFifo0Callback+0x64>)
 8001568:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800156a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800156e:	f107 020c 	add.w	r2, r7, #12
 8001572:	4610      	mov	r0, r2
 8001574:	4798      	blx	r3
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 8001576:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001578:	3301      	adds	r3, #1
 800157a:	677b      	str	r3, [r7, #116]	; 0x74
 800157c:	4b05      	ldr	r3, [pc, #20]	; (8001594 <HAL_FDCAN_RxFifo0Callback+0x68>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001582:	429a      	cmp	r2, r3
 8001584:	d3e7      	bcc.n	8001556 <HAL_FDCAN_RxFifo0Callback+0x2a>
      }
  }
}
 8001586:	bf00      	nop
 8001588:	bf00      	nop
 800158a:	3778      	adds	r7, #120	; 0x78
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	200006bc 	.word	0x200006bc
 8001594:	2000070c 	.word	0x2000070c

08001598 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001598:	b510      	push	{r4, lr}
 800159a:	b08c      	sub	sp, #48	; 0x30

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800159c:	2400      	movs	r4, #0
 800159e:	9409      	str	r4, [sp, #36]	; 0x24
 80015a0:	940a      	str	r4, [sp, #40]	; 0x28
 80015a2:	940b      	str	r4, [sp, #44]	; 0x2c
  ADC_ChannelConfTypeDef sConfig = {0};
 80015a4:	2220      	movs	r2, #32
 80015a6:	4621      	mov	r1, r4
 80015a8:	a801      	add	r0, sp, #4
 80015aa:	f006 fa41 	bl	8007a30 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80015ae:	4837      	ldr	r0, [pc, #220]	; (800168c <MX_ADC1_Init+0xf4>)
 80015b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80015b4:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015b6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80015ba:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015bc:	6084      	str	r4, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015be:	60c4      	str	r4, [r0, #12]
  hadc1.Init.GainCompensation = 0;
 80015c0:	6104      	str	r4, [r0, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80015c2:	2301      	movs	r3, #1
 80015c4:	6143      	str	r3, [r0, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80015c6:	2208      	movs	r2, #8
 80015c8:	6182      	str	r2, [r0, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80015ca:	7704      	strb	r4, [r0, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80015cc:	7743      	strb	r3, [r0, #29]
  hadc1.Init.NbrOfConversion = 4;
 80015ce:	2204      	movs	r2, #4
 80015d0:	6202      	str	r2, [r0, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015d2:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015d6:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015d8:	6304      	str	r4, [r0, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80015da:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80015de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015e2:	63c2      	str	r2, [r0, #60]	; 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 80015e4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 80015e8:	220c      	movs	r2, #12
 80015ea:	6442      	str	r2, [r0, #68]	; 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 80015ec:	6484      	str	r4, [r0, #72]	; 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80015ee:	64c4      	str	r4, [r0, #76]	; 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80015f0:	6503      	str	r3, [r0, #80]	; 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015f2:	f001 f88d 	bl	8002710 <HAL_ADC_Init>
 80015f6:	2800      	cmp	r0, #0
 80015f8:	d135      	bne.n	8001666 <MX_ADC1_Init+0xce>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80015fa:	2300      	movs	r3, #0
 80015fc:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80015fe:	a909      	add	r1, sp, #36	; 0x24
 8001600:	4822      	ldr	r0, [pc, #136]	; (800168c <MX_ADC1_Init+0xf4>)
 8001602:	f001 fd45 	bl	8003090 <HAL_ADCEx_MultiModeConfigChannel>
 8001606:	2800      	cmp	r0, #0
 8001608:	d130      	bne.n	800166c <MX_ADC1_Init+0xd4>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800160a:	4b21      	ldr	r3, [pc, #132]	; (8001690 <MX_ADC1_Init+0xf8>)
 800160c:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800160e:	2306      	movs	r3, #6
 8001610:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8001612:	2303      	movs	r3, #3
 8001614:	9303      	str	r3, [sp, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001616:	237f      	movs	r3, #127	; 0x7f
 8001618:	9304      	str	r3, [sp, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800161a:	2304      	movs	r3, #4
 800161c:	9305      	str	r3, [sp, #20]
  sConfig.Offset = 0;
 800161e:	2300      	movs	r3, #0
 8001620:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001622:	a901      	add	r1, sp, #4
 8001624:	4819      	ldr	r0, [pc, #100]	; (800168c <MX_ADC1_Init+0xf4>)
 8001626:	f001 facb 	bl	8002bc0 <HAL_ADC_ConfigChannel>
 800162a:	bb10      	cbnz	r0, 8001672 <MX_ADC1_Init+0xda>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800162c:	4b19      	ldr	r3, [pc, #100]	; (8001694 <MX_ADC1_Init+0xfc>)
 800162e:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001630:	230c      	movs	r3, #12
 8001632:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001634:	a901      	add	r1, sp, #4
 8001636:	4815      	ldr	r0, [pc, #84]	; (800168c <MX_ADC1_Init+0xf4>)
 8001638:	f001 fac2 	bl	8002bc0 <HAL_ADC_ConfigChannel>
 800163c:	b9e0      	cbnz	r0, 8001678 <MX_ADC1_Init+0xe0>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800163e:	4b16      	ldr	r3, [pc, #88]	; (8001698 <MX_ADC1_Init+0x100>)
 8001640:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001642:	2312      	movs	r3, #18
 8001644:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001646:	a901      	add	r1, sp, #4
 8001648:	4810      	ldr	r0, [pc, #64]	; (800168c <MX_ADC1_Init+0xf4>)
 800164a:	f001 fab9 	bl	8002bc0 <HAL_ADC_ConfigChannel>
 800164e:	b9b0      	cbnz	r0, 800167e <MX_ADC1_Init+0xe6>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001650:	4b12      	ldr	r3, [pc, #72]	; (800169c <MX_ADC1_Init+0x104>)
 8001652:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001654:	2318      	movs	r3, #24
 8001656:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001658:	a901      	add	r1, sp, #4
 800165a:	480c      	ldr	r0, [pc, #48]	; (800168c <MX_ADC1_Init+0xf4>)
 800165c:	f001 fab0 	bl	8002bc0 <HAL_ADC_ConfigChannel>
 8001660:	b980      	cbnz	r0, 8001684 <MX_ADC1_Init+0xec>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001662:	b00c      	add	sp, #48	; 0x30
 8001664:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001666:	f000 fbc4 	bl	8001df2 <Error_Handler>
 800166a:	e7c6      	b.n	80015fa <MX_ADC1_Init+0x62>
    Error_Handler();
 800166c:	f000 fbc1 	bl	8001df2 <Error_Handler>
 8001670:	e7cb      	b.n	800160a <MX_ADC1_Init+0x72>
    Error_Handler();
 8001672:	f000 fbbe 	bl	8001df2 <Error_Handler>
 8001676:	e7d9      	b.n	800162c <MX_ADC1_Init+0x94>
    Error_Handler();
 8001678:	f000 fbbb 	bl	8001df2 <Error_Handler>
 800167c:	e7df      	b.n	800163e <MX_ADC1_Init+0xa6>
    Error_Handler();
 800167e:	f000 fbb8 	bl	8001df2 <Error_Handler>
 8001682:	e7e5      	b.n	8001650 <MX_ADC1_Init+0xb8>
    Error_Handler();
 8001684:	f000 fbb5 	bl	8001df2 <Error_Handler>
}
 8001688:	e7eb      	b.n	8001662 <MX_ADC1_Init+0xca>
 800168a:	bf00      	nop
 800168c:	20000714 	.word	0x20000714
 8001690:	04300002 	.word	0x04300002
 8001694:	08600004 	.word	0x08600004
 8001698:	0c900008 	.word	0x0c900008
 800169c:	cb840000 	.word	0xcb840000

080016a0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80016a0:	b500      	push	{lr}
 80016a2:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016a4:	2220      	movs	r2, #32
 80016a6:	2100      	movs	r1, #0
 80016a8:	4668      	mov	r0, sp
 80016aa:	f006 f9c1 	bl	8007a30 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80016ae:	4832      	ldr	r0, [pc, #200]	; (8001778 <MX_ADC2_Init+0xd8>)
 80016b0:	4b32      	ldr	r3, [pc, #200]	; (800177c <MX_ADC2_Init+0xdc>)
 80016b2:	6003      	str	r3, [r0, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80016b4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80016b8:	6043      	str	r3, [r0, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80016ba:	2300      	movs	r3, #0
 80016bc:	6083      	str	r3, [r0, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016be:	60c3      	str	r3, [r0, #12]
  hadc2.Init.GainCompensation = 0;
 80016c0:	6103      	str	r3, [r0, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80016c2:	2201      	movs	r2, #1
 80016c4:	6142      	str	r2, [r0, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016c6:	2104      	movs	r1, #4
 80016c8:	6181      	str	r1, [r0, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80016ca:	7703      	strb	r3, [r0, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80016cc:	7742      	strb	r2, [r0, #29]
  hadc2.Init.NbrOfConversion = 4;
 80016ce:	6201      	str	r1, [r0, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80016d0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016d4:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016d6:	6303      	str	r3, [r0, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80016d8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80016dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016e0:	63c1      	str	r1, [r0, #60]	; 0x3c
  hadc2.Init.OversamplingMode = ENABLE;
 80016e2:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  hadc2.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 80016e6:	210c      	movs	r1, #12
 80016e8:	6441      	str	r1, [r0, #68]	; 0x44
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 80016ea:	6483      	str	r3, [r0, #72]	; 0x48
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80016ec:	64c3      	str	r3, [r0, #76]	; 0x4c
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80016ee:	6502      	str	r2, [r0, #80]	; 0x50
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80016f0:	f001 f80e 	bl	8002710 <HAL_ADC_Init>
 80016f4:	2800      	cmp	r0, #0
 80016f6:	d130      	bne.n	800175a <MX_ADC2_Init+0xba>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80016f8:	4b21      	ldr	r3, [pc, #132]	; (8001780 <MX_ADC2_Init+0xe0>)
 80016fa:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016fc:	2306      	movs	r3, #6
 80016fe:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001700:	2307      	movs	r3, #7
 8001702:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001704:	237f      	movs	r3, #127	; 0x7f
 8001706:	9303      	str	r3, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001708:	2304      	movs	r3, #4
 800170a:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 0;
 800170c:	2300      	movs	r3, #0
 800170e:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001710:	4669      	mov	r1, sp
 8001712:	4819      	ldr	r0, [pc, #100]	; (8001778 <MX_ADC2_Init+0xd8>)
 8001714:	f001 fa54 	bl	8002bc0 <HAL_ADC_ConfigChannel>
 8001718:	bb10      	cbnz	r0, 8001760 <MX_ADC2_Init+0xc0>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800171a:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <MX_ADC2_Init+0xe4>)
 800171c:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800171e:	230c      	movs	r3, #12
 8001720:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001722:	2300      	movs	r3, #0
 8001724:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001726:	4669      	mov	r1, sp
 8001728:	4813      	ldr	r0, [pc, #76]	; (8001778 <MX_ADC2_Init+0xd8>)
 800172a:	f001 fa49 	bl	8002bc0 <HAL_ADC_ConfigChannel>
 800172e:	b9d0      	cbnz	r0, 8001766 <MX_ADC2_Init+0xc6>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001730:	4b15      	ldr	r3, [pc, #84]	; (8001788 <MX_ADC2_Init+0xe8>)
 8001732:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001734:	2312      	movs	r3, #18
 8001736:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001738:	4669      	mov	r1, sp
 800173a:	480f      	ldr	r0, [pc, #60]	; (8001778 <MX_ADC2_Init+0xd8>)
 800173c:	f001 fa40 	bl	8002bc0 <HAL_ADC_ConfigChannel>
 8001740:	b9a0      	cbnz	r0, 800176c <MX_ADC2_Init+0xcc>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001742:	4b12      	ldr	r3, [pc, #72]	; (800178c <MX_ADC2_Init+0xec>)
 8001744:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001746:	2318      	movs	r3, #24
 8001748:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800174a:	4669      	mov	r1, sp
 800174c:	480a      	ldr	r0, [pc, #40]	; (8001778 <MX_ADC2_Init+0xd8>)
 800174e:	f001 fa37 	bl	8002bc0 <HAL_ADC_ConfigChannel>
 8001752:	b970      	cbnz	r0, 8001772 <MX_ADC2_Init+0xd2>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001754:	b009      	add	sp, #36	; 0x24
 8001756:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800175a:	f000 fb4a 	bl	8001df2 <Error_Handler>
 800175e:	e7cb      	b.n	80016f8 <MX_ADC2_Init+0x58>
    Error_Handler();
 8001760:	f000 fb47 	bl	8001df2 <Error_Handler>
 8001764:	e7d9      	b.n	800171a <MX_ADC2_Init+0x7a>
    Error_Handler();
 8001766:	f000 fb44 	bl	8001df2 <Error_Handler>
 800176a:	e7e1      	b.n	8001730 <MX_ADC2_Init+0x90>
    Error_Handler();
 800176c:	f000 fb41 	bl	8001df2 <Error_Handler>
 8001770:	e7e7      	b.n	8001742 <MX_ADC2_Init+0xa2>
    Error_Handler();
 8001772:	f000 fb3e 	bl	8001df2 <Error_Handler>
}
 8001776:	e7ed      	b.n	8001754 <MX_ADC2_Init+0xb4>
 8001778:	20000780 	.word	0x20000780
 800177c:	50000100 	.word	0x50000100
 8001780:	32601000 	.word	0x32601000
 8001784:	3ac04000 	.word	0x3ac04000
 8001788:	36902000 	.word	0x36902000
 800178c:	0c900008 	.word	0x0c900008

08001790 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001790:	b570      	push	{r4, r5, r6, lr}
 8001792:	b09c      	sub	sp, #112	; 0x70
 8001794:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001796:	2100      	movs	r1, #0
 8001798:	9117      	str	r1, [sp, #92]	; 0x5c
 800179a:	9118      	str	r1, [sp, #96]	; 0x60
 800179c:	9119      	str	r1, [sp, #100]	; 0x64
 800179e:	911a      	str	r1, [sp, #104]	; 0x68
 80017a0:	911b      	str	r1, [sp, #108]	; 0x6c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017a2:	2244      	movs	r2, #68	; 0x44
 80017a4:	a806      	add	r0, sp, #24
 80017a6:	f006 f943 	bl	8007a30 <memset>
  if(adcHandle->Instance==ADC1)
 80017aa:	6823      	ldr	r3, [r4, #0]
 80017ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017b0:	d004      	beq.n	80017bc <HAL_ADC_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC2)
 80017b2:	4a63      	ldr	r2, [pc, #396]	; (8001940 <HAL_ADC_MspInit+0x1b0>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d059      	beq.n	800186c <HAL_ADC_MspInit+0xdc>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80017b8:	b01c      	add	sp, #112	; 0x70
 80017ba:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80017bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017c0:	9306      	str	r3, [sp, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80017c2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80017c6:	9315      	str	r3, [sp, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017c8:	a806      	add	r0, sp, #24
 80017ca:	f003 f9fd 	bl	8004bc8 <HAL_RCCEx_PeriphCLKConfig>
 80017ce:	2800      	cmp	r0, #0
 80017d0:	d13b      	bne.n	800184a <HAL_ADC_MspInit+0xba>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80017d2:	4a5c      	ldr	r2, [pc, #368]	; (8001944 <HAL_ADC_MspInit+0x1b4>)
 80017d4:	6813      	ldr	r3, [r2, #0]
 80017d6:	3301      	adds	r3, #1
 80017d8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d038      	beq.n	8001850 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017de:	4b5a      	ldr	r3, [pc, #360]	; (8001948 <HAL_ADC_MspInit+0x1b8>)
 80017e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017e2:	f042 0201 	orr.w	r2, r2, #1
 80017e6:	64da      	str	r2, [r3, #76]	; 0x4c
 80017e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	9302      	str	r3, [sp, #8]
 80017f0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = CURRENT_ADC_3_Pin|CURRENT_ADC_2_Pin|CURRENT_ADC_1_Pin;
 80017f2:	2307      	movs	r3, #7
 80017f4:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017f6:	2303      	movs	r3, #3
 80017f8:	9318      	str	r3, [sp, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2500      	movs	r5, #0
 80017fc:	9519      	str	r5, [sp, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fe:	a917      	add	r1, sp, #92	; 0x5c
 8001800:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001804:	f002 fc44 	bl	8004090 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8001808:	4850      	ldr	r0, [pc, #320]	; (800194c <HAL_ADC_MspInit+0x1bc>)
 800180a:	4b51      	ldr	r3, [pc, #324]	; (8001950 <HAL_ADC_MspInit+0x1c0>)
 800180c:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800180e:	2305      	movs	r3, #5
 8001810:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001812:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001814:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001816:	2380      	movs	r3, #128	; 0x80
 8001818:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800181a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800181e:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001820:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001824:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001826:	2320      	movs	r3, #32
 8001828:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800182a:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800182c:	f001 fe5e 	bl	80034ec <HAL_DMA_Init>
 8001830:	b9c8      	cbnz	r0, 8001866 <HAL_ADC_MspInit+0xd6>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001832:	4b46      	ldr	r3, [pc, #280]	; (800194c <HAL_ADC_MspInit+0x1bc>)
 8001834:	6563      	str	r3, [r4, #84]	; 0x54
 8001836:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001838:	2200      	movs	r2, #0
 800183a:	4611      	mov	r1, r2
 800183c:	2012      	movs	r0, #18
 800183e:	f001 fcaf 	bl	80031a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001842:	2012      	movs	r0, #18
 8001844:	f001 fce2 	bl	800320c <HAL_NVIC_EnableIRQ>
 8001848:	e7b6      	b.n	80017b8 <HAL_ADC_MspInit+0x28>
      Error_Handler();
 800184a:	f000 fad2 	bl	8001df2 <Error_Handler>
 800184e:	e7c0      	b.n	80017d2 <HAL_ADC_MspInit+0x42>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001850:	4b3d      	ldr	r3, [pc, #244]	; (8001948 <HAL_ADC_MspInit+0x1b8>)
 8001852:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001854:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001858:	64da      	str	r2, [r3, #76]	; 0x4c
 800185a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001860:	9301      	str	r3, [sp, #4]
 8001862:	9b01      	ldr	r3, [sp, #4]
 8001864:	e7bb      	b.n	80017de <HAL_ADC_MspInit+0x4e>
      Error_Handler();
 8001866:	f000 fac4 	bl	8001df2 <Error_Handler>
 800186a:	e7e2      	b.n	8001832 <HAL_ADC_MspInit+0xa2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800186c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001870:	9306      	str	r3, [sp, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001872:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001876:	9315      	str	r3, [sp, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001878:	a806      	add	r0, sp, #24
 800187a:	f003 f9a5 	bl	8004bc8 <HAL_RCCEx_PeriphCLKConfig>
 800187e:	2800      	cmp	r0, #0
 8001880:	d14d      	bne.n	800191e <HAL_ADC_MspInit+0x18e>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001882:	4a30      	ldr	r2, [pc, #192]	; (8001944 <HAL_ADC_MspInit+0x1b4>)
 8001884:	6813      	ldr	r3, [r2, #0]
 8001886:	3301      	adds	r3, #1
 8001888:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800188a:	2b01      	cmp	r3, #1
 800188c:	d04a      	beq.n	8001924 <HAL_ADC_MspInit+0x194>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800188e:	4b2e      	ldr	r3, [pc, #184]	; (8001948 <HAL_ADC_MspInit+0x1b8>)
 8001890:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001892:	f042 0201 	orr.w	r2, r2, #1
 8001896:	64da      	str	r2, [r3, #76]	; 0x4c
 8001898:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800189a:	f002 0201 	and.w	r2, r2, #1
 800189e:	9204      	str	r2, [sp, #16]
 80018a0:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018a4:	f042 0202 	orr.w	r2, r2, #2
 80018a8:	64da      	str	r2, [r3, #76]	; 0x4c
 80018aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	9305      	str	r3, [sp, #20]
 80018b2:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = V_BAT_ADC_Pin|V_AUX_ADC_Pin;
 80018b4:	2360      	movs	r3, #96	; 0x60
 80018b6:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018b8:	2603      	movs	r6, #3
 80018ba:	9618      	str	r6, [sp, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2500      	movs	r5, #0
 80018be:	9519      	str	r5, [sp, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c0:	a917      	add	r1, sp, #92	; 0x5c
 80018c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018c6:	f002 fbe3 	bl	8004090 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC2_NTC1_Pin|ADC2_NTC2_Pin;
 80018ca:	f640 0304 	movw	r3, #2052	; 0x804
 80018ce:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018d0:	9618      	str	r6, [sp, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	9519      	str	r5, [sp, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d4:	a917      	add	r1, sp, #92	; 0x5c
 80018d6:	481f      	ldr	r0, [pc, #124]	; (8001954 <HAL_ADC_MspInit+0x1c4>)
 80018d8:	f002 fbda 	bl	8004090 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 80018dc:	481e      	ldr	r0, [pc, #120]	; (8001958 <HAL_ADC_MspInit+0x1c8>)
 80018de:	4b1f      	ldr	r3, [pc, #124]	; (800195c <HAL_ADC_MspInit+0x1cc>)
 80018e0:	6003      	str	r3, [r0, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80018e2:	2324      	movs	r3, #36	; 0x24
 80018e4:	6043      	str	r3, [r0, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018e6:	6085      	str	r5, [r0, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80018e8:	60c5      	str	r5, [r0, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80018ea:	2380      	movs	r3, #128	; 0x80
 80018ec:	6103      	str	r3, [r0, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80018ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018f2:	6143      	str	r3, [r0, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80018f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018f8:	6183      	str	r3, [r0, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80018fa:	2320      	movs	r3, #32
 80018fc:	61c3      	str	r3, [r0, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80018fe:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001900:	f001 fdf4 	bl	80034ec <HAL_DMA_Init>
 8001904:	b9c8      	cbnz	r0, 800193a <HAL_ADC_MspInit+0x1aa>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001906:	4b14      	ldr	r3, [pc, #80]	; (8001958 <HAL_ADC_MspInit+0x1c8>)
 8001908:	6563      	str	r3, [r4, #84]	; 0x54
 800190a:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800190c:	2200      	movs	r2, #0
 800190e:	4611      	mov	r1, r2
 8001910:	2012      	movs	r0, #18
 8001912:	f001 fc45 	bl	80031a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001916:	2012      	movs	r0, #18
 8001918:	f001 fc78 	bl	800320c <HAL_NVIC_EnableIRQ>
}
 800191c:	e74c      	b.n	80017b8 <HAL_ADC_MspInit+0x28>
      Error_Handler();
 800191e:	f000 fa68 	bl	8001df2 <Error_Handler>
 8001922:	e7ae      	b.n	8001882 <HAL_ADC_MspInit+0xf2>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001924:	4b08      	ldr	r3, [pc, #32]	; (8001948 <HAL_ADC_MspInit+0x1b8>)
 8001926:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001928:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800192c:	64da      	str	r2, [r3, #76]	; 0x4c
 800192e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001930:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001934:	9303      	str	r3, [sp, #12]
 8001936:	9b03      	ldr	r3, [sp, #12]
 8001938:	e7a9      	b.n	800188e <HAL_ADC_MspInit+0xfe>
      Error_Handler();
 800193a:	f000 fa5a 	bl	8001df2 <Error_Handler>
 800193e:	e7e2      	b.n	8001906 <HAL_ADC_MspInit+0x176>
 8001940:	50000100 	.word	0x50000100
 8001944:	20000710 	.word	0x20000710
 8001948:	40021000 	.word	0x40021000
 800194c:	200007ec 	.word	0x200007ec
 8001950:	40020008 	.word	0x40020008
 8001954:	48000400 	.word	0x48000400
 8001958:	2000084c 	.word	0x2000084c
 800195c:	4002001c 	.word	0x4002001c

08001960 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8001960:	b500      	push	{lr}
 8001962:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001964:	2230      	movs	r2, #48	; 0x30
 8001966:	2100      	movs	r1, #0
 8001968:	4668      	mov	r0, sp
 800196a:	f006 f861 	bl	8007a30 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800196e:	4810      	ldr	r0, [pc, #64]	; (80019b0 <MX_DAC1_Init+0x50>)
 8001970:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <MX_DAC1_Init+0x54>)
 8001972:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001974:	f001 fc6c 	bl	8003250 <HAL_DAC_Init>
 8001978:	b9a0      	cbnz	r0, 80019a4 <MX_DAC1_Init+0x44>
    Error_Handler();
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800197a:	2200      	movs	r2, #0
 800197c:	9200      	str	r2, [sp, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800197e:	f88d 2004 	strb.w	r2, [sp, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001982:	f88d 2005 	strb.w	r2, [sp, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001986:	9202      	str	r2, [sp, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001988:	9203      	str	r2, [sp, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800198a:	9204      	str	r2, [sp, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800198c:	9205      	str	r2, [sp, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800198e:	2301      	movs	r3, #1
 8001990:	9306      	str	r3, [sp, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001992:	9207      	str	r2, [sp, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001994:	4669      	mov	r1, sp
 8001996:	4806      	ldr	r0, [pc, #24]	; (80019b0 <MX_DAC1_Init+0x50>)
 8001998:	f001 fc6c 	bl	8003274 <HAL_DAC_ConfigChannel>
 800199c:	b928      	cbnz	r0, 80019aa <MX_DAC1_Init+0x4a>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800199e:	b00d      	add	sp, #52	; 0x34
 80019a0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80019a4:	f000 fa25 	bl	8001df2 <Error_Handler>
 80019a8:	e7e7      	b.n	800197a <MX_DAC1_Init+0x1a>
    Error_Handler();
 80019aa:	f000 fa22 	bl	8001df2 <Error_Handler>
}
 80019ae:	e7f6      	b.n	800199e <MX_DAC1_Init+0x3e>
 80019b0:	200008ac 	.word	0x200008ac
 80019b4:	50000800 	.word	0x50000800

080019b8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80019b8:	b500      	push	{lr}
 80019ba:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019bc:	2300      	movs	r3, #0
 80019be:	9303      	str	r3, [sp, #12]
 80019c0:	9304      	str	r3, [sp, #16]
 80019c2:	9305      	str	r3, [sp, #20]
 80019c4:	9306      	str	r3, [sp, #24]
 80019c6:	9307      	str	r3, [sp, #28]
  if(dacHandle->Instance==DAC1)
 80019c8:	6802      	ldr	r2, [r0, #0]
 80019ca:	4b13      	ldr	r3, [pc, #76]	; (8001a18 <HAL_DAC_MspInit+0x60>)
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d002      	beq.n	80019d6 <HAL_DAC_MspInit+0x1e>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80019d0:	b009      	add	sp, #36	; 0x24
 80019d2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_DAC1_CLK_ENABLE();
 80019d6:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 80019da:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80019de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019e0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80019e4:	64da      	str	r2, [r3, #76]	; 0x4c
 80019e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019e8:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 80019ec:	9201      	str	r2, [sp, #4]
 80019ee:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019f2:	f042 0201 	orr.w	r2, r2, #1
 80019f6:	64da      	str	r2, [r3, #76]	; 0x4c
 80019f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	9302      	str	r3, [sp, #8]
 8001a00:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a02:	2310      	movs	r3, #16
 8001a04:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a06:	2303      	movs	r3, #3
 8001a08:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0a:	a903      	add	r1, sp, #12
 8001a0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a10:	f002 fb3e 	bl	8004090 <HAL_GPIO_Init>
}
 8001a14:	e7dc      	b.n	80019d0 <HAL_DAC_MspInit+0x18>
 8001a16:	bf00      	nop
 8001a18:	50000800 	.word	0x50000800

08001a1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001a1c:	b500      	push	{lr}
 8001a1e:	b085      	sub	sp, #20

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001a20:	4b2b      	ldr	r3, [pc, #172]	; (8001ad0 <MX_DMA_Init+0xb4>)
 8001a22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001a24:	f042 0204 	orr.w	r2, r2, #4
 8001a28:	649a      	str	r2, [r3, #72]	; 0x48
 8001a2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001a2c:	f002 0204 	and.w	r2, r2, #4
 8001a30:	9201      	str	r2, [sp, #4]
 8001a32:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001a36:	f042 0201 	orr.w	r2, r2, #1
 8001a3a:	649a      	str	r2, [r3, #72]	; 0x48
 8001a3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001a3e:	f002 0201 	and.w	r2, r2, #1
 8001a42:	9202      	str	r2, [sp, #8]
 8001a44:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a46:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001a48:	f042 0202 	orr.w	r2, r2, #2
 8001a4c:	649a      	str	r2, [r3, #72]	; 0x48
 8001a4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	9303      	str	r3, [sp, #12]
 8001a56:	9b03      	ldr	r3, [sp, #12]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	4611      	mov	r1, r2
 8001a5c:	200b      	movs	r0, #11
 8001a5e:	f001 fb9f 	bl	80031a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001a62:	200b      	movs	r0, #11
 8001a64:	f001 fbd2 	bl	800320c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	4611      	mov	r1, r2
 8001a6c:	200c      	movs	r0, #12
 8001a6e:	f001 fb97 	bl	80031a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001a72:	200c      	movs	r0, #12
 8001a74:	f001 fbca 	bl	800320c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001a78:	2200      	movs	r2, #0
 8001a7a:	4611      	mov	r1, r2
 8001a7c:	200d      	movs	r0, #13
 8001a7e:	f001 fb8f 	bl	80031a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001a82:	200d      	movs	r0, #13
 8001a84:	f001 fbc2 	bl	800320c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	4611      	mov	r1, r2
 8001a8c:	200e      	movs	r0, #14
 8001a8e:	f001 fb87 	bl	80031a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001a92:	200e      	movs	r0, #14
 8001a94:	f001 fbba 	bl	800320c <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	4611      	mov	r1, r2
 8001a9c:	2038      	movs	r0, #56	; 0x38
 8001a9e:	f001 fb7f 	bl	80031a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8001aa2:	2038      	movs	r0, #56	; 0x38
 8001aa4:	f001 fbb2 	bl	800320c <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	4611      	mov	r1, r2
 8001aac:	2039      	movs	r0, #57	; 0x39
 8001aae:	f001 fb77 	bl	80031a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8001ab2:	2039      	movs	r0, #57	; 0x39
 8001ab4:	f001 fbaa 	bl	800320c <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8001ab8:	2200      	movs	r2, #0
 8001aba:	4611      	mov	r1, r2
 8001abc:	203a      	movs	r0, #58	; 0x3a
 8001abe:	f001 fb6f 	bl	80031a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8001ac2:	203a      	movs	r0, #58	; 0x3a
 8001ac4:	f001 fba2 	bl	800320c <HAL_NVIC_EnableIRQ>

}
 8001ac8:	b005      	add	sp, #20
 8001aca:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ace:	bf00      	nop
 8001ad0:	40021000 	.word	0x40021000

08001ad4 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001ad4:	b510      	push	{r4, lr}
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001ad6:	4811      	ldr	r0, [pc, #68]	; (8001b1c <MX_FDCAN1_Init+0x48>)
 8001ad8:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <MX_FDCAN1_Init+0x4c>)
 8001ada:	6003      	str	r3, [r0, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001adc:	2300      	movs	r3, #0
 8001ade:	6043      	str	r3, [r0, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8001ae0:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001ae4:	6082      	str	r2, [r0, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001ae6:	60c3      	str	r3, [r0, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001ae8:	7403      	strb	r3, [r0, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001aea:	7443      	strb	r3, [r0, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001aec:	7483      	strb	r3, [r0, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8001aee:	2201      	movs	r2, #1
 8001af0:	6142      	str	r2, [r0, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 7;
 8001af2:	2107      	movs	r1, #7
 8001af4:	6181      	str	r1, [r0, #24]
  hfdcan1.Init.NominalTimeSeg1 = 42;
 8001af6:	242a      	movs	r4, #42	; 0x2a
 8001af8:	61c4      	str	r4, [r0, #28]
  hfdcan1.Init.NominalTimeSeg2 = 7;
 8001afa:	6201      	str	r1, [r0, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001afc:	6242      	str	r2, [r0, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 9;
 8001afe:	2209      	movs	r2, #9
 8001b00:	6282      	str	r2, [r0, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 8001b02:	210a      	movs	r1, #10
 8001b04:	62c1      	str	r1, [r0, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 9;
 8001b06:	6302      	str	r2, [r0, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8001b08:	6343      	str	r3, [r0, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001b0a:	6383      	str	r3, [r0, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001b0c:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001b0e:	f001 fe85 	bl	800381c <HAL_FDCAN_Init>
 8001b12:	b900      	cbnz	r0, 8001b16 <MX_FDCAN1_Init+0x42>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001b14:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001b16:	f000 f96c 	bl	8001df2 <Error_Handler>
}
 8001b1a:	e7fb      	b.n	8001b14 <MX_FDCAN1_Init+0x40>
 8001b1c:	200008c0 	.word	0x200008c0
 8001b20:	40006400 	.word	0x40006400

08001b24 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001b24:	b510      	push	{r4, lr}
 8001b26:	b098      	sub	sp, #96	; 0x60
 8001b28:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	9113      	str	r1, [sp, #76]	; 0x4c
 8001b2e:	9114      	str	r1, [sp, #80]	; 0x50
 8001b30:	9115      	str	r1, [sp, #84]	; 0x54
 8001b32:	9116      	str	r1, [sp, #88]	; 0x58
 8001b34:	9117      	str	r1, [sp, #92]	; 0x5c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b36:	2244      	movs	r2, #68	; 0x44
 8001b38:	a802      	add	r0, sp, #8
 8001b3a:	f005 ff79 	bl	8007a30 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8001b3e:	6822      	ldr	r2, [r4, #0]
 8001b40:	4b1e      	ldr	r3, [pc, #120]	; (8001bbc <HAL_FDCAN_MspInit+0x98>)
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d001      	beq.n	8001b4a <HAL_FDCAN_MspInit+0x26>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8001b46:	b018      	add	sp, #96	; 0x60
 8001b48:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001b4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b4e:	9302      	str	r3, [sp, #8]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001b50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b54:	930e      	str	r3, [sp, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b56:	a802      	add	r0, sp, #8
 8001b58:	f003 f836 	bl	8004bc8 <HAL_RCCEx_PeriphCLKConfig>
 8001b5c:	bb50      	cbnz	r0, 8001bb4 <HAL_FDCAN_MspInit+0x90>
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001b5e:	4b18      	ldr	r3, [pc, #96]	; (8001bc0 <HAL_FDCAN_MspInit+0x9c>)
 8001b60:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b62:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001b66:	659a      	str	r2, [r3, #88]	; 0x58
 8001b68:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b6a:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8001b6e:	9200      	str	r2, [sp, #0]
 8001b70:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b74:	f042 0201 	orr.w	r2, r2, #1
 8001b78:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	9301      	str	r3, [sp, #4]
 8001b82:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001b84:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b88:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2400      	movs	r4, #0
 8001b90:	9415      	str	r4, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b92:	9416      	str	r4, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001b94:	2309      	movs	r3, #9
 8001b96:	9317      	str	r3, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b98:	a913      	add	r1, sp, #76	; 0x4c
 8001b9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b9e:	f002 fa77 	bl	8004090 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001ba2:	4622      	mov	r2, r4
 8001ba4:	4621      	mov	r1, r4
 8001ba6:	2015      	movs	r0, #21
 8001ba8:	f001 fafa 	bl	80031a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001bac:	2015      	movs	r0, #21
 8001bae:	f001 fb2d 	bl	800320c <HAL_NVIC_EnableIRQ>
}
 8001bb2:	e7c8      	b.n	8001b46 <HAL_FDCAN_MspInit+0x22>
      Error_Handler();
 8001bb4:	f000 f91d 	bl	8001df2 <Error_Handler>
 8001bb8:	e7d1      	b.n	8001b5e <HAL_FDCAN_MspInit+0x3a>
 8001bba:	bf00      	nop
 8001bbc:	40006400 	.word	0x40006400
 8001bc0:	40021000 	.word	0x40021000

08001bc4 <MX_FMAC_Init>:

FMAC_HandleTypeDef hfmac;

/* FMAC init function */
void MX_FMAC_Init(void)
{
 8001bc4:	b508      	push	{r3, lr}
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 8001bc6:	4805      	ldr	r0, [pc, #20]	; (8001bdc <MX_FMAC_Init+0x18>)
 8001bc8:	4b05      	ldr	r3, [pc, #20]	; (8001be0 <MX_FMAC_Init+0x1c>)
 8001bca:	6003      	str	r3, [r0, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 8001bcc:	f002 fa30 	bl	8004030 <HAL_FMAC_Init>
 8001bd0:	b900      	cbnz	r0, 8001bd4 <MX_FMAC_Init+0x10>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 8001bd2:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001bd4:	f000 f90d 	bl	8001df2 <Error_Handler>
}
 8001bd8:	e7fb      	b.n	8001bd2 <MX_FMAC_Init+0xe>
 8001bda:	bf00      	nop
 8001bdc:	20000924 	.word	0x20000924
 8001be0:	40021400 	.word	0x40021400

08001be4 <HAL_FMAC_MspInit>:

void HAL_FMAC_MspInit(FMAC_HandleTypeDef* fmacHandle)
{

  if(fmacHandle->Instance==FMAC)
 8001be4:	6802      	ldr	r2, [r0, #0]
 8001be6:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <HAL_FMAC_MspInit+0x28>)
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d000      	beq.n	8001bee <HAL_FMAC_MspInit+0xa>
 8001bec:	4770      	bx	lr
{
 8001bee:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* FMAC clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 8001bf0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001bf4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001bf6:	f042 0210 	orr.w	r2, r2, #16
 8001bfa:	649a      	str	r2, [r3, #72]	; 0x48
 8001bfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bfe:	f003 0310 	and.w	r3, r3, #16
 8001c02:	9301      	str	r3, [sp, #4]
 8001c04:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }
}
 8001c06:	b002      	add	sp, #8
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	40021400 	.word	0x40021400

08001c10 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 8001c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c14:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c16:	2400      	movs	r4, #0
 8001c18:	9405      	str	r4, [sp, #20]
 8001c1a:	9406      	str	r4, [sp, #24]
 8001c1c:	9407      	str	r4, [sp, #28]
 8001c1e:	9408      	str	r4, [sp, #32]
 8001c20:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c22:	4b3f      	ldr	r3, [pc, #252]	; (8001d20 <MX_GPIO_Init+0x110>)
 8001c24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c26:	f042 0220 	orr.w	r2, r2, #32
 8001c2a:	64da      	str	r2, [r3, #76]	; 0x4c
 8001c2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c2e:	f002 0220 	and.w	r2, r2, #32
 8001c32:	9200      	str	r2, [sp, #0]
 8001c34:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c38:	f042 0204 	orr.w	r2, r2, #4
 8001c3c:	64da      	str	r2, [r3, #76]	; 0x4c
 8001c3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c40:	f002 0204 	and.w	r2, r2, #4
 8001c44:	9201      	str	r2, [sp, #4]
 8001c46:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c4a:	f042 0201 	orr.w	r2, r2, #1
 8001c4e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001c50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c52:	f002 0201 	and.w	r2, r2, #1
 8001c56:	9202      	str	r2, [sp, #8]
 8001c58:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c5c:	f042 0202 	orr.w	r2, r2, #2
 8001c60:	64da      	str	r2, [r3, #76]	; 0x4c
 8001c62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c64:	f002 0202 	and.w	r2, r2, #2
 8001c68:	9203      	str	r2, [sp, #12]
 8001c6a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c6e:	f042 0208 	orr.w	r2, r2, #8
 8001c72:	64da      	str	r2, [r3, #76]	; 0x4c
 8001c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c76:	f003 0308 	and.w	r3, r3, #8
 8001c7a:	9304      	str	r3, [sp, #16]
 8001c7c:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RUNNING_LED_Pin|WARNING_LED_Pin, GPIO_PIN_RESET);
 8001c7e:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8001d2c <MX_GPIO_Init+0x11c>
 8001c82:	4622      	mov	r2, r4
 8001c84:	21c0      	movs	r1, #192	; 0xc0
 8001c86:	4640      	mov	r0, r8
 8001c88:	f002 fae6 	bl	8004258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, GPIO_PIN_RESET);
 8001c8c:	4622      	mov	r2, r4
 8001c8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c96:	f002 fadf 	bl	8004258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, GPIO_PIN_RESET);
 8001c9a:	4f22      	ldr	r7, [pc, #136]	; (8001d24 <MX_GPIO_Init+0x114>)
 8001c9c:	4622      	mov	r2, r4
 8001c9e:	2104      	movs	r1, #4
 8001ca0:	4638      	mov	r0, r7
 8001ca2:	f002 fad9 	bl	8004258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, GPIO_PIN_RESET);
 8001ca6:	4e20      	ldr	r6, [pc, #128]	; (8001d28 <MX_GPIO_Init+0x118>)
 8001ca8:	4622      	mov	r2, r4
 8001caa:	2140      	movs	r1, #64	; 0x40
 8001cac:	4630      	mov	r0, r6
 8001cae:	f002 fad3 	bl	8004258 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RUNNING_LED_Pin|WARNING_LED_Pin;
 8001cb2:	23c0      	movs	r3, #192	; 0xc0
 8001cb4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cb6:	2501      	movs	r5, #1
 8001cb8:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cbc:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cbe:	a905      	add	r1, sp, #20
 8001cc0:	4640      	mov	r0, r8
 8001cc2:	f002 f9e5 	bl	8004090 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001cc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cca:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd2:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001cd4:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd6:	a905      	add	r1, sp, #20
 8001cd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cdc:	f002 f9d8 	bl	8004090 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ERROR_LED_Pin;
 8001ce0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ce4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce6:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce8:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cea:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(ERROR_LED_GPIO_Port, &GPIO_InitStruct);
 8001cec:	a905      	add	r1, sp, #20
 8001cee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cf2:	f002 f9cd 	bl	8004090 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER2_CS_Pin;
 8001cf6:	2304      	movs	r3, #4
 8001cf8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cfa:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfc:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfe:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(ENCODER2_CS_GPIO_Port, &GPIO_InitStruct);
 8001d00:	a905      	add	r1, sp, #20
 8001d02:	4638      	mov	r0, r7
 8001d04:	f002 f9c4 	bl	8004090 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER1_CS_Pin;
 8001d08:	2340      	movs	r3, #64	; 0x40
 8001d0a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d0c:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d10:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(ENCODER1_CS_GPIO_Port, &GPIO_InitStruct);
 8001d12:	a905      	add	r1, sp, #20
 8001d14:	4630      	mov	r0, r6
 8001d16:	f002 f9bb 	bl	8004090 <HAL_GPIO_Init>

}
 8001d1a:	b00a      	add	sp, #40	; 0x28
 8001d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d20:	40021000 	.word	0x40021000
 8001d24:	48000c00 	.word	0x48000c00
 8001d28:	48000400 	.word	0x48000400
 8001d2c:	48000800 	.word	0x48000800

08001d30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d30:	b500      	push	{lr}
 8001d32:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d34:	2238      	movs	r2, #56	; 0x38
 8001d36:	2100      	movs	r1, #0
 8001d38:	a806      	add	r0, sp, #24
 8001d3a:	f005 fe79 	bl	8007a30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d3e:	2000      	movs	r0, #0
 8001d40:	9001      	str	r0, [sp, #4]
 8001d42:	9002      	str	r0, [sp, #8]
 8001d44:	9003      	str	r0, [sp, #12]
 8001d46:	9004      	str	r0, [sp, #16]
 8001d48:	9005      	str	r0, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001d4a:	f002 fa8b 	bl	8004264 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d56:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d58:	2240      	movs	r2, #64	; 0x40
 8001d5a:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d5c:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d5e:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001d60:	2204      	movs	r2, #4
 8001d62:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001d64:	2250      	movs	r2, #80	; 0x50
 8001d66:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d68:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8001d6a:	2208      	movs	r2, #8
 8001d6c:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001d6e:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d70:	a806      	add	r0, sp, #24
 8001d72:	f002 fb09 	bl	8004388 <HAL_RCC_OscConfig>
 8001d76:	b9c0      	cbnz	r0, 8001daa <SystemClock_Config+0x7a>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d78:	230f      	movs	r3, #15
 8001d7a:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d80:	2300      	movs	r3, #0
 8001d82:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d84:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d86:	9305      	str	r3, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001d88:	2104      	movs	r1, #4
 8001d8a:	eb0d 0001 	add.w	r0, sp, r1
 8001d8e:	f002 fdd3 	bl	8004938 <HAL_RCC_ClockConfig>
 8001d92:	b960      	cbnz	r0, 8001dae <SystemClock_Config+0x7e>
  {
    Error_Handler();
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_16);
 8001d94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d98:	f04f 7140 	mov.w	r1, #50331648	; 0x3000000
 8001d9c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001da0:	f002 fd68 	bl	8004874 <HAL_RCC_MCOConfig>
}
 8001da4:	b015      	add	sp, #84	; 0x54
 8001da6:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001daa:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dac:	e7fe      	b.n	8001dac <SystemClock_Config+0x7c>
 8001dae:	b672      	cpsid	i
 8001db0:	e7fe      	b.n	8001db0 <SystemClock_Config+0x80>

08001db2 <main>:
{
 8001db2:	b508      	push	{r3, lr}
  HAL_Init();
 8001db4:	f000 fc76 	bl	80026a4 <HAL_Init>
  SystemClock_Config();
 8001db8:	f7ff ffba 	bl	8001d30 <SystemClock_Config>
  MX_GPIO_Init();
 8001dbc:	f7ff ff28 	bl	8001c10 <MX_GPIO_Init>
  MX_DMA_Init();
 8001dc0:	f7ff fe2c 	bl	8001a1c <MX_DMA_Init>
  MX_FDCAN1_Init();
 8001dc4:	f7ff fe86 	bl	8001ad4 <MX_FDCAN1_Init>
  MX_SPI1_Init();
 8001dc8:	f000 f816 	bl	8001df8 <MX_SPI1_Init>
  MX_SPI3_Init();
 8001dcc:	f000 f83a 	bl	8001e44 <MX_SPI3_Init>
  MX_TIM1_Init();
 8001dd0:	f000 fae4 	bl	800239c <MX_TIM1_Init>
  MX_ADC1_Init();
 8001dd4:	f7ff fbe0 	bl	8001598 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001dd8:	f7ff fc62 	bl	80016a0 <MX_ADC2_Init>
  MX_DAC1_Init();
 8001ddc:	f7ff fdc0 	bl	8001960 <MX_DAC1_Init>
  MX_USART1_UART_Init();
 8001de0:	f000 fb72 	bl	80024c8 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8001de4:	f000 fa24 	bl	8002230 <MX_TIM3_Init>
  MX_FMAC_Init();
 8001de8:	f7ff feec 	bl	8001bc4 <MX_FMAC_Init>
	BLDC_main();
 8001dec:	f7ff f882 	bl	8000ef4 <BLDC_main>
  while (1)
 8001df0:	e7fc      	b.n	8001dec <main+0x3a>

08001df2 <Error_Handler>:
 8001df2:	b672      	cpsid	i
  while (1)
 8001df4:	e7fe      	b.n	8001df4 <Error_Handler+0x2>
	...

08001df8 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi3_rx;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001df8:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001dfa:	4810      	ldr	r0, [pc, #64]	; (8001e3c <MX_SPI1_Init+0x44>)
 8001dfc:	4b10      	ldr	r3, [pc, #64]	; (8001e40 <MX_SPI1_Init+0x48>)
 8001dfe:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e00:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001e04:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e06:	2300      	movs	r3, #0
 8001e08:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e0a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001e0e:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e10:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001e12:	2201      	movs	r2, #1
 8001e14:	6142      	str	r2, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e1a:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001e1c:	2228      	movs	r2, #40	; 0x28
 8001e1e:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e20:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e22:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e24:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001e26:	2207      	movs	r2, #7
 8001e28:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e2a:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001e2c:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e2e:	f003 f99f 	bl	8005170 <HAL_SPI_Init>
 8001e32:	b900      	cbnz	r0, 8001e36 <MX_SPI1_Init+0x3e>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e34:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001e36:	f7ff ffdc 	bl	8001df2 <Error_Handler>
}
 8001e3a:	e7fb      	b.n	8001e34 <MX_SPI1_Init+0x3c>
 8001e3c:	20000adc 	.word	0x20000adc
 8001e40:	40013000 	.word	0x40013000

08001e44 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001e44:	b508      	push	{r3, lr}
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001e46:	4810      	ldr	r0, [pc, #64]	; (8001e88 <MX_SPI3_Init+0x44>)
 8001e48:	4b10      	ldr	r3, [pc, #64]	; (8001e8c <MX_SPI3_Init+0x48>)
 8001e4a:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001e4c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001e50:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001e52:	2300      	movs	r3, #0
 8001e54:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e56:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001e5a:	60c2      	str	r2, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e5c:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001e5e:	2201      	movs	r2, #1
 8001e60:	6142      	str	r2, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001e62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e66:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001e68:	2228      	movs	r2, #40	; 0x28
 8001e6a:	61c2      	str	r2, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e6c:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e6e:	6243      	str	r3, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e70:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001e72:	2207      	movs	r2, #7
 8001e74:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e76:	6303      	str	r3, [r0, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001e78:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001e7a:	f003 f979 	bl	8005170 <HAL_SPI_Init>
 8001e7e:	b900      	cbnz	r0, 8001e82 <MX_SPI3_Init+0x3e>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001e80:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001e82:	f7ff ffb6 	bl	8001df2 <Error_Handler>
}
 8001e86:	e7fb      	b.n	8001e80 <MX_SPI3_Init+0x3c>
 8001e88:	20000b40 	.word	0x20000b40
 8001e8c:	40003c00 	.word	0x40003c00

08001e90 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e90:	b510      	push	{r4, lr}
 8001e92:	b08a      	sub	sp, #40	; 0x28
 8001e94:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e96:	2300      	movs	r3, #0
 8001e98:	9305      	str	r3, [sp, #20]
 8001e9a:	9306      	str	r3, [sp, #24]
 8001e9c:	9307      	str	r3, [sp, #28]
 8001e9e:	9308      	str	r3, [sp, #32]
 8001ea0:	9309      	str	r3, [sp, #36]	; 0x24
  if(spiHandle->Instance==SPI1)
 8001ea2:	6803      	ldr	r3, [r0, #0]
 8001ea4:	4a59      	ldr	r2, [pc, #356]	; (800200c <HAL_SPI_MspInit+0x17c>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d004      	beq.n	8001eb4 <HAL_SPI_MspInit+0x24>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI3)
 8001eaa:	4a59      	ldr	r2, [pc, #356]	; (8002010 <HAL_SPI_MspInit+0x180>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d056      	beq.n	8001f5e <HAL_SPI_MspInit+0xce>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001eb0:	b00a      	add	sp, #40	; 0x28
 8001eb2:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001eb4:	4b57      	ldr	r3, [pc, #348]	; (8002014 <HAL_SPI_MspInit+0x184>)
 8001eb6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001eb8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001ebc:	661a      	str	r2, [r3, #96]	; 0x60
 8001ebe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ec0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001ec4:	9201      	str	r2, [sp, #4]
 8001ec6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001eca:	f042 0202 	orr.w	r2, r2, #2
 8001ece:	64da      	str	r2, [r3, #76]	; 0x4c
 8001ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	9302      	str	r3, [sp, #8]
 8001ed8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001eda:	2338      	movs	r3, #56	; 0x38
 8001edc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ee2:	2305      	movs	r3, #5
 8001ee4:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee6:	a905      	add	r1, sp, #20
 8001ee8:	484b      	ldr	r0, [pc, #300]	; (8002018 <HAL_SPI_MspInit+0x188>)
 8001eea:	f002 f8d1 	bl	8004090 <HAL_GPIO_Init>
    hdma_spi1_rx.Instance = DMA1_Channel3;
 8001eee:	484b      	ldr	r0, [pc, #300]	; (800201c <HAL_SPI_MspInit+0x18c>)
 8001ef0:	4b4b      	ldr	r3, [pc, #300]	; (8002020 <HAL_SPI_MspInit+0x190>)
 8001ef2:	6003      	str	r3, [r0, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8001ef4:	230a      	movs	r3, #10
 8001ef6:	6043      	str	r3, [r0, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	6083      	str	r3, [r0, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001efc:	60c3      	str	r3, [r0, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001efe:	2280      	movs	r2, #128	; 0x80
 8001f00:	6102      	str	r2, [r0, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f02:	6143      	str	r3, [r0, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f04:	6183      	str	r3, [r0, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001f06:	61c3      	str	r3, [r0, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f08:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001f0a:	f001 faef 	bl	80034ec <HAL_DMA_Init>
 8001f0e:	bb00      	cbnz	r0, 8001f52 <HAL_SPI_MspInit+0xc2>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001f10:	4b42      	ldr	r3, [pc, #264]	; (800201c <HAL_SPI_MspInit+0x18c>)
 8001f12:	65a3      	str	r3, [r4, #88]	; 0x58
 8001f14:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_spi1_tx.Instance = DMA1_Channel4;
 8001f16:	4843      	ldr	r0, [pc, #268]	; (8002024 <HAL_SPI_MspInit+0x194>)
 8001f18:	4b43      	ldr	r3, [pc, #268]	; (8002028 <HAL_SPI_MspInit+0x198>)
 8001f1a:	6003      	str	r3, [r0, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001f1c:	230b      	movs	r3, #11
 8001f1e:	6043      	str	r3, [r0, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f20:	2310      	movs	r3, #16
 8001f22:	6083      	str	r3, [r0, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f24:	2300      	movs	r3, #0
 8001f26:	60c3      	str	r3, [r0, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f28:	2280      	movs	r2, #128	; 0x80
 8001f2a:	6102      	str	r2, [r0, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f2c:	6143      	str	r3, [r0, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f2e:	6183      	str	r3, [r0, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001f30:	61c3      	str	r3, [r0, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f32:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001f34:	f001 fada 	bl	80034ec <HAL_DMA_Init>
 8001f38:	b970      	cbnz	r0, 8001f58 <HAL_SPI_MspInit+0xc8>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001f3a:	4b3a      	ldr	r3, [pc, #232]	; (8002024 <HAL_SPI_MspInit+0x194>)
 8001f3c:	6563      	str	r3, [r4, #84]	; 0x54
 8001f3e:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001f40:	2200      	movs	r2, #0
 8001f42:	4611      	mov	r1, r2
 8001f44:	2023      	movs	r0, #35	; 0x23
 8001f46:	f001 f92b 	bl	80031a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001f4a:	2023      	movs	r0, #35	; 0x23
 8001f4c:	f001 f95e 	bl	800320c <HAL_NVIC_EnableIRQ>
 8001f50:	e7ae      	b.n	8001eb0 <HAL_SPI_MspInit+0x20>
      Error_Handler();
 8001f52:	f7ff ff4e 	bl	8001df2 <Error_Handler>
 8001f56:	e7db      	b.n	8001f10 <HAL_SPI_MspInit+0x80>
      Error_Handler();
 8001f58:	f7ff ff4b 	bl	8001df2 <Error_Handler>
 8001f5c:	e7ed      	b.n	8001f3a <HAL_SPI_MspInit+0xaa>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001f5e:	4b2d      	ldr	r3, [pc, #180]	; (8002014 <HAL_SPI_MspInit+0x184>)
 8001f60:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001f62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f66:	659a      	str	r2, [r3, #88]	; 0x58
 8001f68:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001f6a:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8001f6e:	9203      	str	r2, [sp, #12]
 8001f70:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f74:	f042 0204 	orr.w	r2, r2, #4
 8001f78:	64da      	str	r2, [r3, #76]	; 0x4c
 8001f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	9304      	str	r3, [sp, #16]
 8001f82:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001f84:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001f88:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001f8e:	2306      	movs	r3, #6
 8001f90:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f92:	a905      	add	r1, sp, #20
 8001f94:	4825      	ldr	r0, [pc, #148]	; (800202c <HAL_SPI_MspInit+0x19c>)
 8001f96:	f002 f87b 	bl	8004090 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA2_Channel1;
 8001f9a:	4825      	ldr	r0, [pc, #148]	; (8002030 <HAL_SPI_MspInit+0x1a0>)
 8001f9c:	4b25      	ldr	r3, [pc, #148]	; (8002034 <HAL_SPI_MspInit+0x1a4>)
 8001f9e:	6003      	str	r3, [r0, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 8001fa0:	230e      	movs	r3, #14
 8001fa2:	6043      	str	r3, [r0, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	6083      	str	r3, [r0, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fa8:	60c3      	str	r3, [r0, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001faa:	2280      	movs	r2, #128	; 0x80
 8001fac:	6102      	str	r2, [r0, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fae:	6143      	str	r3, [r0, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fb0:	6183      	str	r3, [r0, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8001fb2:	61c3      	str	r3, [r0, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001fb4:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8001fb6:	f001 fa99 	bl	80034ec <HAL_DMA_Init>
 8001fba:	bb00      	cbnz	r0, 8001ffe <HAL_SPI_MspInit+0x16e>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 8001fbc:	4b1c      	ldr	r3, [pc, #112]	; (8002030 <HAL_SPI_MspInit+0x1a0>)
 8001fbe:	65a3      	str	r3, [r4, #88]	; 0x58
 8001fc0:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_spi3_tx.Instance = DMA2_Channel2;
 8001fc2:	481d      	ldr	r0, [pc, #116]	; (8002038 <HAL_SPI_MspInit+0x1a8>)
 8001fc4:	4b1d      	ldr	r3, [pc, #116]	; (800203c <HAL_SPI_MspInit+0x1ac>)
 8001fc6:	6003      	str	r3, [r0, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 8001fc8:	230f      	movs	r3, #15
 8001fca:	6043      	str	r3, [r0, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fcc:	2310      	movs	r3, #16
 8001fce:	6083      	str	r3, [r0, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	60c3      	str	r3, [r0, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001fd4:	2280      	movs	r2, #128	; 0x80
 8001fd6:	6102      	str	r2, [r0, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fd8:	6143      	str	r3, [r0, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fda:	6183      	str	r3, [r0, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8001fdc:	61c3      	str	r3, [r0, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001fde:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001fe0:	f001 fa84 	bl	80034ec <HAL_DMA_Init>
 8001fe4:	b970      	cbnz	r0, 8002004 <HAL_SPI_MspInit+0x174>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8001fe6:	4b14      	ldr	r3, [pc, #80]	; (8002038 <HAL_SPI_MspInit+0x1a8>)
 8001fe8:	6563      	str	r3, [r4, #84]	; 0x54
 8001fea:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001fec:	2200      	movs	r2, #0
 8001fee:	4611      	mov	r1, r2
 8001ff0:	2033      	movs	r0, #51	; 0x33
 8001ff2:	f001 f8d5 	bl	80031a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001ff6:	2033      	movs	r0, #51	; 0x33
 8001ff8:	f001 f908 	bl	800320c <HAL_NVIC_EnableIRQ>
}
 8001ffc:	e758      	b.n	8001eb0 <HAL_SPI_MspInit+0x20>
      Error_Handler();
 8001ffe:	f7ff fef8 	bl	8001df2 <Error_Handler>
 8002002:	e7db      	b.n	8001fbc <HAL_SPI_MspInit+0x12c>
      Error_Handler();
 8002004:	f7ff fef5 	bl	8001df2 <Error_Handler>
 8002008:	e7ed      	b.n	8001fe6 <HAL_SPI_MspInit+0x156>
 800200a:	bf00      	nop
 800200c:	40013000 	.word	0x40013000
 8002010:	40003c00 	.word	0x40003c00
 8002014:	40021000 	.word	0x40021000
 8002018:	48000400 	.word	0x48000400
 800201c:	2000095c 	.word	0x2000095c
 8002020:	40020030 	.word	0x40020030
 8002024:	200009bc 	.word	0x200009bc
 8002028:	40020044 	.word	0x40020044
 800202c:	48000800 	.word	0x48000800
 8002030:	20000a1c 	.word	0x20000a1c
 8002034:	40020408 	.word	0x40020408
 8002038:	20000a7c 	.word	0x20000a7c
 800203c:	4002041c 	.word	0x4002041c

08002040 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002040:	b500      	push	{lr}
 8002042:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002044:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <HAL_MspInit+0x34>)
 8002046:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002048:	f042 0201 	orr.w	r2, r2, #1
 800204c:	661a      	str	r2, [r3, #96]	; 0x60
 800204e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002050:	f002 0201 	and.w	r2, r2, #1
 8002054:	9200      	str	r2, [sp, #0]
 8002056:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002058:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800205a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800205e:	659a      	str	r2, [r3, #88]	; 0x58
 8002060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002066:	9301      	str	r3, [sp, #4]
 8002068:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800206a:	f002 f985 	bl	8004378 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800206e:	b003      	add	sp, #12
 8002070:	f85d fb04 	ldr.w	pc, [sp], #4
 8002074:	40021000 	.word	0x40021000

08002078 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002078:	e7fe      	b.n	8002078 <NMI_Handler>

0800207a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800207a:	e7fe      	b.n	800207a <HardFault_Handler>

0800207c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800207c:	e7fe      	b.n	800207c <MemManage_Handler>

0800207e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800207e:	e7fe      	b.n	800207e <BusFault_Handler>

08002080 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002080:	e7fe      	b.n	8002080 <UsageFault_Handler>

08002082 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002082:	4770      	bx	lr

08002084 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002084:	4770      	bx	lr

08002086 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002086:	4770      	bx	lr

08002088 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002088:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800208a:	f000 fb1b 	bl	80026c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800208e:	bd08      	pop	{r3, pc}

08002090 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002090:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002092:	4802      	ldr	r0, [pc, #8]	; (800209c <DMA1_Channel1_IRQHandler+0xc>)
 8002094:	f001 fb5f 	bl	8003756 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002098:	bd08      	pop	{r3, pc}
 800209a:	bf00      	nop
 800209c:	200007ec 	.word	0x200007ec

080020a0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80020a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80020a2:	4802      	ldr	r0, [pc, #8]	; (80020ac <DMA1_Channel2_IRQHandler+0xc>)
 80020a4:	f001 fb57 	bl	8003756 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80020a8:	bd08      	pop	{r3, pc}
 80020aa:	bf00      	nop
 80020ac:	2000084c 	.word	0x2000084c

080020b0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80020b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80020b2:	4802      	ldr	r0, [pc, #8]	; (80020bc <DMA1_Channel3_IRQHandler+0xc>)
 80020b4:	f001 fb4f 	bl	8003756 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80020b8:	bd08      	pop	{r3, pc}
 80020ba:	bf00      	nop
 80020bc:	2000095c 	.word	0x2000095c

080020c0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80020c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80020c2:	4802      	ldr	r0, [pc, #8]	; (80020cc <DMA1_Channel4_IRQHandler+0xc>)
 80020c4:	f001 fb47 	bl	8003756 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80020c8:	bd08      	pop	{r3, pc}
 80020ca:	bf00      	nop
 80020cc:	200009bc 	.word	0x200009bc

080020d0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80020d0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80020d2:	4803      	ldr	r0, [pc, #12]	; (80020e0 <ADC1_2_IRQHandler+0x10>)
 80020d4:	f000 fc34 	bl	8002940 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80020d8:	4802      	ldr	r0, [pc, #8]	; (80020e4 <ADC1_2_IRQHandler+0x14>)
 80020da:	f000 fc31 	bl	8002940 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80020de:	bd08      	pop	{r3, pc}
 80020e0:	20000714 	.word	0x20000714
 80020e4:	20000780 	.word	0x20000780

080020e8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80020e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80020ea:	4802      	ldr	r0, [pc, #8]	; (80020f4 <FDCAN1_IT0_IRQHandler+0xc>)
 80020ec:	f001 fd2e 	bl	8003b4c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80020f0:	bd08      	pop	{r3, pc}
 80020f2:	bf00      	nop
 80020f4:	200008c0 	.word	0x200008c0

080020f8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80020f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80020fa:	4802      	ldr	r0, [pc, #8]	; (8002104 <TIM3_IRQHandler+0xc>)
 80020fc:	f003 fc2b 	bl	8005956 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002100:	bd08      	pop	{r3, pc}
 8002102:	bf00      	nop
 8002104:	20000bf4 	.word	0x20000bf4

08002108 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002108:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800210a:	4802      	ldr	r0, [pc, #8]	; (8002114 <SPI1_IRQHandler+0xc>)
 800210c:	f003 fa32 	bl	8005574 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002110:	bd08      	pop	{r3, pc}
 8002112:	bf00      	nop
 8002114:	20000adc 	.word	0x20000adc

08002118 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002118:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800211a:	4802      	ldr	r0, [pc, #8]	; (8002124 <USART1_IRQHandler+0xc>)
 800211c:	f004 f9ac 	bl	8006478 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002120:	bd08      	pop	{r3, pc}
 8002122:	bf00      	nop
 8002124:	20000ca0 	.word	0x20000ca0

08002128 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002128:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800212a:	4802      	ldr	r0, [pc, #8]	; (8002134 <SPI3_IRQHandler+0xc>)
 800212c:	f003 fa22 	bl	8005574 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8002130:	bd08      	pop	{r3, pc}
 8002132:	bf00      	nop
 8002134:	20000b40 	.word	0x20000b40

08002138 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8002138:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 800213a:	4802      	ldr	r0, [pc, #8]	; (8002144 <DMA2_Channel1_IRQHandler+0xc>)
 800213c:	f001 fb0b 	bl	8003756 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8002140:	bd08      	pop	{r3, pc}
 8002142:	bf00      	nop
 8002144:	20000a1c 	.word	0x20000a1c

08002148 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8002148:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 800214a:	4802      	ldr	r0, [pc, #8]	; (8002154 <DMA2_Channel2_IRQHandler+0xc>)
 800214c:	f001 fb03 	bl	8003756 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8002150:	bd08      	pop	{r3, pc}
 8002152:	bf00      	nop
 8002154:	20000a7c 	.word	0x20000a7c

08002158 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8002158:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800215a:	4802      	ldr	r0, [pc, #8]	; (8002164 <DMA2_Channel3_IRQHandler+0xc>)
 800215c:	f001 fafb 	bl	8003756 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8002160:	bd08      	pop	{r3, pc}
 8002162:	bf00      	nop
 8002164:	20000c40 	.word	0x20000c40

08002168 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8002168:	2001      	movs	r0, #1
 800216a:	4770      	bx	lr

0800216c <_kill>:

int _kill(int pid, int sig)
{
 800216c:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800216e:	f005 fcb1 	bl	8007ad4 <__errno>
 8002172:	2316      	movs	r3, #22
 8002174:	6003      	str	r3, [r0, #0]
  return -1;
}
 8002176:	f04f 30ff 	mov.w	r0, #4294967295
 800217a:	bd08      	pop	{r3, pc}

0800217c <_exit>:

void _exit (int status)
{
 800217c:	b508      	push	{r3, lr}
  errno = EINVAL;
 800217e:	f005 fca9 	bl	8007ad4 <__errno>
 8002182:	2316      	movs	r3, #22
 8002184:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8002186:	e7fe      	b.n	8002186 <_exit+0xa>

08002188 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002188:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800218a:	1e16      	subs	r6, r2, #0
 800218c:	dd07      	ble.n	800219e <_read+0x16>
 800218e:	460c      	mov	r4, r1
 8002190:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8002192:	f3af 8000 	nop.w
 8002196:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800219a:	42a5      	cmp	r5, r4
 800219c:	d1f9      	bne.n	8002192 <_read+0xa>
  }

  return len;
}
 800219e:	4630      	mov	r0, r6
 80021a0:	bd70      	pop	{r4, r5, r6, pc}

080021a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021a2:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a4:	1e16      	subs	r6, r2, #0
 80021a6:	dd07      	ble.n	80021b8 <_write+0x16>
 80021a8:	460c      	mov	r4, r1
 80021aa:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 80021ac:	f814 0b01 	ldrb.w	r0, [r4], #1
 80021b0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021b4:	42a5      	cmp	r5, r4
 80021b6:	d1f9      	bne.n	80021ac <_write+0xa>
  }
  return len;
}
 80021b8:	4630      	mov	r0, r6
 80021ba:	bd70      	pop	{r4, r5, r6, pc}

080021bc <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80021bc:	f04f 30ff 	mov.w	r0, #4294967295
 80021c0:	4770      	bx	lr

080021c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80021c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021c6:	604b      	str	r3, [r1, #4]
  return 0;
}
 80021c8:	2000      	movs	r0, #0
 80021ca:	4770      	bx	lr

080021cc <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80021cc:	2001      	movs	r0, #1
 80021ce:	4770      	bx	lr

080021d0 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80021d0:	2000      	movs	r0, #0
 80021d2:	4770      	bx	lr

080021d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021d4:	b508      	push	{r3, lr}
 80021d6:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021d8:	4a0c      	ldr	r2, [pc, #48]	; (800220c <_sbrk+0x38>)
 80021da:	6812      	ldr	r2, [r2, #0]
 80021dc:	b152      	cbz	r2, 80021f4 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021de:	4a0b      	ldr	r2, [pc, #44]	; (800220c <_sbrk+0x38>)
 80021e0:	6810      	ldr	r0, [r2, #0]
 80021e2:	4403      	add	r3, r0
 80021e4:	4a0a      	ldr	r2, [pc, #40]	; (8002210 <_sbrk+0x3c>)
 80021e6:	490b      	ldr	r1, [pc, #44]	; (8002214 <_sbrk+0x40>)
 80021e8:	1a52      	subs	r2, r2, r1
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d806      	bhi.n	80021fc <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80021ee:	4a07      	ldr	r2, [pc, #28]	; (800220c <_sbrk+0x38>)
 80021f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80021f2:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 80021f4:	4a05      	ldr	r2, [pc, #20]	; (800220c <_sbrk+0x38>)
 80021f6:	4908      	ldr	r1, [pc, #32]	; (8002218 <_sbrk+0x44>)
 80021f8:	6011      	str	r1, [r2, #0]
 80021fa:	e7f0      	b.n	80021de <_sbrk+0xa>
    errno = ENOMEM;
 80021fc:	f005 fc6a 	bl	8007ad4 <__errno>
 8002200:	230c      	movs	r3, #12
 8002202:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002204:	f04f 30ff 	mov.w	r0, #4294967295
 8002208:	e7f3      	b.n	80021f2 <_sbrk+0x1e>
 800220a:	bf00      	nop
 800220c:	20000ba4 	.word	0x20000ba4
 8002210:	20008000 	.word	0x20008000
 8002214:	00000400 	.word	0x00000400
 8002218:	20000e80 	.word	0x20000e80

0800221c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800221c:	4a03      	ldr	r2, [pc, #12]	; (800222c <SystemInit+0x10>)
 800221e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002222:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002226:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800222a:	4770      	bx	lr
 800222c:	e000ed00 	.word	0xe000ed00

08002230 <MX_TIM3_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002230:	b500      	push	{lr}
 8002232:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002234:	2300      	movs	r3, #0
 8002236:	9304      	str	r3, [sp, #16]
 8002238:	9305      	str	r3, [sp, #20]
 800223a:	9306      	str	r3, [sp, #24]
 800223c:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800223e:	9301      	str	r3, [sp, #4]
 8002240:	9302      	str	r3, [sp, #8]
 8002242:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002244:	4815      	ldr	r0, [pc, #84]	; (800229c <MX_TIM3_Init+0x6c>)
 8002246:	4a16      	ldr	r2, [pc, #88]	; (80022a0 <MX_TIM3_Init+0x70>)
 8002248:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 3;
 800224a:	2203      	movs	r2, #3
 800224c:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800224e:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 3999;
 8002250:	f640 729f 	movw	r2, #3999	; 0xf9f
 8002254:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002256:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002258:	2380      	movs	r3, #128	; 0x80
 800225a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800225c:	f003 fd24 	bl	8005ca8 <HAL_TIM_Base_Init>
 8002260:	b990      	cbnz	r0, 8002288 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002262:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002266:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002268:	a904      	add	r1, sp, #16
 800226a:	480c      	ldr	r0, [pc, #48]	; (800229c <MX_TIM3_Init+0x6c>)
 800226c:	f003 fe70 	bl	8005f50 <HAL_TIM_ConfigClockSource>
 8002270:	b968      	cbnz	r0, 800228e <MX_TIM3_Init+0x5e>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002272:	2300      	movs	r3, #0
 8002274:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002276:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002278:	a901      	add	r1, sp, #4
 800227a:	4808      	ldr	r0, [pc, #32]	; (800229c <MX_TIM3_Init+0x6c>)
 800227c:	f003 ff42 	bl	8006104 <HAL_TIMEx_MasterConfigSynchronization>
 8002280:	b940      	cbnz	r0, 8002294 <MX_TIM3_Init+0x64>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002282:	b009      	add	sp, #36	; 0x24
 8002284:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002288:	f7ff fdb3 	bl	8001df2 <Error_Handler>
 800228c:	e7e9      	b.n	8002262 <MX_TIM3_Init+0x32>
    Error_Handler();
 800228e:	f7ff fdb0 	bl	8001df2 <Error_Handler>
 8002292:	e7ee      	b.n	8002272 <MX_TIM3_Init+0x42>
    Error_Handler();
 8002294:	f7ff fdad 	bl	8001df2 <Error_Handler>
}
 8002298:	e7f3      	b.n	8002282 <MX_TIM3_Init+0x52>
 800229a:	bf00      	nop
 800229c:	20000bf4 	.word	0x20000bf4
 80022a0:	40000400 	.word	0x40000400

080022a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022a4:	b500      	push	{lr}
 80022a6:	b083      	sub	sp, #12

  if(tim_baseHandle->Instance==TIM1)
 80022a8:	6803      	ldr	r3, [r0, #0]
 80022aa:	4a13      	ldr	r2, [pc, #76]	; (80022f8 <HAL_TIM_Base_MspInit+0x54>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d005      	beq.n	80022bc <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM3)
 80022b0:	4a12      	ldr	r2, [pc, #72]	; (80022fc <HAL_TIM_Base_MspInit+0x58>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d00d      	beq.n	80022d2 <HAL_TIM_Base_MspInit+0x2e>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80022b6:	b003      	add	sp, #12
 80022b8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022bc:	4b10      	ldr	r3, [pc, #64]	; (8002300 <HAL_TIM_Base_MspInit+0x5c>)
 80022be:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022c4:	661a      	str	r2, [r3, #96]	; 0x60
 80022c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022cc:	9300      	str	r3, [sp, #0]
 80022ce:	9b00      	ldr	r3, [sp, #0]
 80022d0:	e7f1      	b.n	80022b6 <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022d2:	4b0b      	ldr	r3, [pc, #44]	; (8002300 <HAL_TIM_Base_MspInit+0x5c>)
 80022d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80022d6:	f042 0202 	orr.w	r2, r2, #2
 80022da:	659a      	str	r2, [r3, #88]	; 0x58
 80022dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	9301      	str	r3, [sp, #4]
 80022e4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80022e6:	2200      	movs	r2, #0
 80022e8:	4611      	mov	r1, r2
 80022ea:	201d      	movs	r0, #29
 80022ec:	f000 ff58 	bl	80031a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80022f0:	201d      	movs	r0, #29
 80022f2:	f000 ff8b 	bl	800320c <HAL_NVIC_EnableIRQ>
}
 80022f6:	e7de      	b.n	80022b6 <HAL_TIM_Base_MspInit+0x12>
 80022f8:	40012c00 	.word	0x40012c00
 80022fc:	40000400 	.word	0x40000400
 8002300:	40021000 	.word	0x40021000

08002304 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002304:	b570      	push	{r4, r5, r6, lr}
 8002306:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002308:	2300      	movs	r3, #0
 800230a:	9303      	str	r3, [sp, #12]
 800230c:	9304      	str	r3, [sp, #16]
 800230e:	9305      	str	r3, [sp, #20]
 8002310:	9306      	str	r3, [sp, #24]
 8002312:	9307      	str	r3, [sp, #28]
  if(timHandle->Instance==TIM1)
 8002314:	6802      	ldr	r2, [r0, #0]
 8002316:	4b1e      	ldr	r3, [pc, #120]	; (8002390 <HAL_TIM_MspPostInit+0x8c>)
 8002318:	429a      	cmp	r2, r3
 800231a:	d001      	beq.n	8002320 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800231c:	b008      	add	sp, #32
 800231e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002320:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8002324:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002326:	f042 0204 	orr.w	r2, r2, #4
 800232a:	64da      	str	r2, [r3, #76]	; 0x4c
 800232c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800232e:	f002 0204 	and.w	r2, r2, #4
 8002332:	9201      	str	r2, [sp, #4]
 8002334:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002336:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002338:	f042 0202 	orr.w	r2, r2, #2
 800233c:	64da      	str	r2, [r3, #76]	; 0x4c
 800233e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	9302      	str	r3, [sp, #8]
 8002346:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002348:	2307      	movs	r3, #7
 800234a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234c:	2502      	movs	r5, #2
 800234e:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002350:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002352:	a903      	add	r1, sp, #12
 8002354:	480f      	ldr	r0, [pc, #60]	; (8002394 <HAL_TIM_MspPostInit+0x90>)
 8002356:	f001 fe9b 	bl	8004090 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800235a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800235e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002360:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002362:	2400      	movs	r4, #0
 8002364:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002366:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002368:	2306      	movs	r3, #6
 800236a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800236c:	4e0a      	ldr	r6, [pc, #40]	; (8002398 <HAL_TIM_MspPostInit+0x94>)
 800236e:	a903      	add	r1, sp, #12
 8002370:	4630      	mov	r0, r6
 8002372:	f001 fe8d 	bl	8004090 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002376:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800237a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237c:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237e:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002380:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8002382:	2304      	movs	r3, #4
 8002384:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002386:	a903      	add	r1, sp, #12
 8002388:	4630      	mov	r0, r6
 800238a:	f001 fe81 	bl	8004090 <HAL_GPIO_Init>
}
 800238e:	e7c5      	b.n	800231c <HAL_TIM_MspPostInit+0x18>
 8002390:	40012c00 	.word	0x40012c00
 8002394:	48000800 	.word	0x48000800
 8002398:	48000400 	.word	0x48000400

0800239c <MX_TIM1_Init>:
{
 800239c:	b510      	push	{r4, lr}
 800239e:	b09c      	sub	sp, #112	; 0x70
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023a0:	2400      	movs	r4, #0
 80023a2:	9418      	str	r4, [sp, #96]	; 0x60
 80023a4:	9419      	str	r4, [sp, #100]	; 0x64
 80023a6:	941a      	str	r4, [sp, #104]	; 0x68
 80023a8:	941b      	str	r4, [sp, #108]	; 0x6c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023aa:	9415      	str	r4, [sp, #84]	; 0x54
 80023ac:	9416      	str	r4, [sp, #88]	; 0x58
 80023ae:	9417      	str	r4, [sp, #92]	; 0x5c
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023b0:	940e      	str	r4, [sp, #56]	; 0x38
 80023b2:	940f      	str	r4, [sp, #60]	; 0x3c
 80023b4:	9410      	str	r4, [sp, #64]	; 0x40
 80023b6:	9411      	str	r4, [sp, #68]	; 0x44
 80023b8:	9412      	str	r4, [sp, #72]	; 0x48
 80023ba:	9413      	str	r4, [sp, #76]	; 0x4c
 80023bc:	9414      	str	r4, [sp, #80]	; 0x50
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80023be:	2234      	movs	r2, #52	; 0x34
 80023c0:	4621      	mov	r1, r4
 80023c2:	a801      	add	r0, sp, #4
 80023c4:	f005 fb34 	bl	8007a30 <memset>
  htim1.Instance = TIM1;
 80023c8:	483d      	ldr	r0, [pc, #244]	; (80024c0 <MX_TIM1_Init+0x124>)
 80023ca:	4b3e      	ldr	r3, [pc, #248]	; (80024c4 <MX_TIM1_Init+0x128>)
 80023cc:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 80023ce:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80023d0:	2320      	movs	r3, #32
 80023d2:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 1499;
 80023d4:	f240 53db 	movw	r3, #1499	; 0x5db
 80023d8:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023da:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 80023dc:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80023de:	2380      	movs	r3, #128	; 0x80
 80023e0:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80023e2:	f003 fc61 	bl	8005ca8 <HAL_TIM_Base_Init>
 80023e6:	2800      	cmp	r0, #0
 80023e8:	d151      	bne.n	800248e <MX_TIM1_Init+0xf2>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023ee:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80023f0:	a918      	add	r1, sp, #96	; 0x60
 80023f2:	4833      	ldr	r0, [pc, #204]	; (80024c0 <MX_TIM1_Init+0x124>)
 80023f4:	f003 fdac 	bl	8005f50 <HAL_TIM_ConfigClockSource>
 80023f8:	2800      	cmp	r0, #0
 80023fa:	d14b      	bne.n	8002494 <MX_TIM1_Init+0xf8>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80023fc:	4830      	ldr	r0, [pc, #192]	; (80024c0 <MX_TIM1_Init+0x124>)
 80023fe:	f003 fc83 	bl	8005d08 <HAL_TIM_PWM_Init>
 8002402:	2800      	cmp	r0, #0
 8002404:	d149      	bne.n	800249a <MX_TIM1_Init+0xfe>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002406:	2300      	movs	r3, #0
 8002408:	9315      	str	r3, [sp, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800240a:	9316      	str	r3, [sp, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800240c:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800240e:	a915      	add	r1, sp, #84	; 0x54
 8002410:	482b      	ldr	r0, [pc, #172]	; (80024c0 <MX_TIM1_Init+0x124>)
 8002412:	f003 fe77 	bl	8006104 <HAL_TIMEx_MasterConfigSynchronization>
 8002416:	2800      	cmp	r0, #0
 8002418:	d142      	bne.n	80024a0 <MX_TIM1_Init+0x104>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800241a:	2360      	movs	r3, #96	; 0x60
 800241c:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800241e:	2200      	movs	r2, #0
 8002420:	920f      	str	r2, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002422:	2302      	movs	r3, #2
 8002424:	9310      	str	r3, [sp, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8002426:	2308      	movs	r3, #8
 8002428:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800242a:	9212      	str	r2, [sp, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800242c:	9213      	str	r2, [sp, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800242e:	9214      	str	r2, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002430:	a90e      	add	r1, sp, #56	; 0x38
 8002432:	4823      	ldr	r0, [pc, #140]	; (80024c0 <MX_TIM1_Init+0x124>)
 8002434:	f003 fce2 	bl	8005dfc <HAL_TIM_PWM_ConfigChannel>
 8002438:	2800      	cmp	r0, #0
 800243a:	d134      	bne.n	80024a6 <MX_TIM1_Init+0x10a>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800243c:	2204      	movs	r2, #4
 800243e:	a90e      	add	r1, sp, #56	; 0x38
 8002440:	481f      	ldr	r0, [pc, #124]	; (80024c0 <MX_TIM1_Init+0x124>)
 8002442:	f003 fcdb 	bl	8005dfc <HAL_TIM_PWM_ConfigChannel>
 8002446:	2800      	cmp	r0, #0
 8002448:	d130      	bne.n	80024ac <MX_TIM1_Init+0x110>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800244a:	2208      	movs	r2, #8
 800244c:	a90e      	add	r1, sp, #56	; 0x38
 800244e:	481c      	ldr	r0, [pc, #112]	; (80024c0 <MX_TIM1_Init+0x124>)
 8002450:	f003 fcd4 	bl	8005dfc <HAL_TIM_PWM_ConfigChannel>
 8002454:	bb68      	cbnz	r0, 80024b2 <MX_TIM1_Init+0x116>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002456:	2300      	movs	r3, #0
 8002458:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800245a:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800245c:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800245e:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002460:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002462:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002466:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002468:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800246a:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800246c:	9309      	str	r3, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800246e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002472:	920a      	str	r2, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002474:	930b      	str	r3, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002476:	930c      	str	r3, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002478:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800247a:	a901      	add	r1, sp, #4
 800247c:	4810      	ldr	r0, [pc, #64]	; (80024c0 <MX_TIM1_Init+0x124>)
 800247e:	f003 fe8b 	bl	8006198 <HAL_TIMEx_ConfigBreakDeadTime>
 8002482:	b9c8      	cbnz	r0, 80024b8 <MX_TIM1_Init+0x11c>
  HAL_TIM_MspPostInit(&htim1);
 8002484:	480e      	ldr	r0, [pc, #56]	; (80024c0 <MX_TIM1_Init+0x124>)
 8002486:	f7ff ff3d 	bl	8002304 <HAL_TIM_MspPostInit>
}
 800248a:	b01c      	add	sp, #112	; 0x70
 800248c:	bd10      	pop	{r4, pc}
    Error_Handler();
 800248e:	f7ff fcb0 	bl	8001df2 <Error_Handler>
 8002492:	e7aa      	b.n	80023ea <MX_TIM1_Init+0x4e>
    Error_Handler();
 8002494:	f7ff fcad 	bl	8001df2 <Error_Handler>
 8002498:	e7b0      	b.n	80023fc <MX_TIM1_Init+0x60>
    Error_Handler();
 800249a:	f7ff fcaa 	bl	8001df2 <Error_Handler>
 800249e:	e7b2      	b.n	8002406 <MX_TIM1_Init+0x6a>
    Error_Handler();
 80024a0:	f7ff fca7 	bl	8001df2 <Error_Handler>
 80024a4:	e7b9      	b.n	800241a <MX_TIM1_Init+0x7e>
    Error_Handler();
 80024a6:	f7ff fca4 	bl	8001df2 <Error_Handler>
 80024aa:	e7c7      	b.n	800243c <MX_TIM1_Init+0xa0>
    Error_Handler();
 80024ac:	f7ff fca1 	bl	8001df2 <Error_Handler>
 80024b0:	e7cb      	b.n	800244a <MX_TIM1_Init+0xae>
    Error_Handler();
 80024b2:	f7ff fc9e 	bl	8001df2 <Error_Handler>
 80024b6:	e7ce      	b.n	8002456 <MX_TIM1_Init+0xba>
    Error_Handler();
 80024b8:	f7ff fc9b 	bl	8001df2 <Error_Handler>
 80024bc:	e7e2      	b.n	8002484 <MX_TIM1_Init+0xe8>
 80024be:	bf00      	nop
 80024c0:	20000ba8 	.word	0x20000ba8
 80024c4:	40012c00 	.word	0x40012c00

080024c8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80024c8:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80024ca:	4817      	ldr	r0, [pc, #92]	; (8002528 <MX_USART1_UART_Init+0x60>)
 80024cc:	4b17      	ldr	r3, [pc, #92]	; (800252c <MX_USART1_UART_Init+0x64>)
 80024ce:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 921600;
 80024d0:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
 80024d4:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024d6:	2300      	movs	r3, #0
 80024d8:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80024da:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80024dc:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80024de:	220c      	movs	r2, #12
 80024e0:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024e2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024e4:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024e6:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80024e8:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024ea:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80024ec:	f004 fc36 	bl	8006d5c <HAL_UART_Init>
 80024f0:	b970      	cbnz	r0, 8002510 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024f2:	2100      	movs	r1, #0
 80024f4:	480c      	ldr	r0, [pc, #48]	; (8002528 <MX_USART1_UART_Init+0x60>)
 80024f6:	f004 fcad 	bl	8006e54 <HAL_UARTEx_SetTxFifoThreshold>
 80024fa:	b960      	cbnz	r0, 8002516 <MX_USART1_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024fc:	2100      	movs	r1, #0
 80024fe:	480a      	ldr	r0, [pc, #40]	; (8002528 <MX_USART1_UART_Init+0x60>)
 8002500:	f004 fccd 	bl	8006e9e <HAL_UARTEx_SetRxFifoThreshold>
 8002504:	b950      	cbnz	r0, 800251c <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002506:	4808      	ldr	r0, [pc, #32]	; (8002528 <MX_USART1_UART_Init+0x60>)
 8002508:	f004 fc85 	bl	8006e16 <HAL_UARTEx_DisableFifoMode>
 800250c:	b948      	cbnz	r0, 8002522 <MX_USART1_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800250e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002510:	f7ff fc6f 	bl	8001df2 <Error_Handler>
 8002514:	e7ed      	b.n	80024f2 <MX_USART1_UART_Init+0x2a>
    Error_Handler();
 8002516:	f7ff fc6c 	bl	8001df2 <Error_Handler>
 800251a:	e7ef      	b.n	80024fc <MX_USART1_UART_Init+0x34>
    Error_Handler();
 800251c:	f7ff fc69 	bl	8001df2 <Error_Handler>
 8002520:	e7f1      	b.n	8002506 <MX_USART1_UART_Init+0x3e>
    Error_Handler();
 8002522:	f7ff fc66 	bl	8001df2 <Error_Handler>
}
 8002526:	e7f2      	b.n	800250e <MX_USART1_UART_Init+0x46>
 8002528:	20000ca0 	.word	0x20000ca0
 800252c:	40013800 	.word	0x40013800

08002530 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002530:	b530      	push	{r4, r5, lr}
 8002532:	b099      	sub	sp, #100	; 0x64
 8002534:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002536:	2100      	movs	r1, #0
 8002538:	9113      	str	r1, [sp, #76]	; 0x4c
 800253a:	9114      	str	r1, [sp, #80]	; 0x50
 800253c:	9115      	str	r1, [sp, #84]	; 0x54
 800253e:	9116      	str	r1, [sp, #88]	; 0x58
 8002540:	9117      	str	r1, [sp, #92]	; 0x5c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002542:	2244      	movs	r2, #68	; 0x44
 8002544:	a802      	add	r0, sp, #8
 8002546:	f005 fa73 	bl	8007a30 <memset>
  if(uartHandle->Instance==USART1)
 800254a:	6822      	ldr	r2, [r4, #0]
 800254c:	4b27      	ldr	r3, [pc, #156]	; (80025ec <HAL_UART_MspInit+0xbc>)
 800254e:	429a      	cmp	r2, r3
 8002550:	d001      	beq.n	8002556 <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002552:	b019      	add	sp, #100	; 0x64
 8002554:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002556:	2301      	movs	r3, #1
 8002558:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800255a:	a802      	add	r0, sp, #8
 800255c:	f002 fb34 	bl	8004bc8 <HAL_RCCEx_PeriphCLKConfig>
 8002560:	2800      	cmp	r0, #0
 8002562:	d13c      	bne.n	80025de <HAL_UART_MspInit+0xae>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002564:	4b22      	ldr	r3, [pc, #136]	; (80025f0 <HAL_UART_MspInit+0xc0>)
 8002566:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002568:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800256c:	661a      	str	r2, [r3, #96]	; 0x60
 800256e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002570:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002574:	9200      	str	r2, [sp, #0]
 8002576:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002578:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800257a:	f042 0204 	orr.w	r2, r2, #4
 800257e:	64da      	str	r2, [r3, #76]	; 0x4c
 8002580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002582:	f003 0304 	and.w	r3, r3, #4
 8002586:	9301      	str	r3, [sp, #4]
 8002588:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800258a:	2330      	movs	r3, #48	; 0x30
 800258c:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258e:	2302      	movs	r3, #2
 8002590:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002592:	2500      	movs	r5, #0
 8002594:	9515      	str	r5, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002596:	9516      	str	r5, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002598:	2307      	movs	r3, #7
 800259a:	9317      	str	r3, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800259c:	a913      	add	r1, sp, #76	; 0x4c
 800259e:	4815      	ldr	r0, [pc, #84]	; (80025f4 <HAL_UART_MspInit+0xc4>)
 80025a0:	f001 fd76 	bl	8004090 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Channel3;
 80025a4:	4814      	ldr	r0, [pc, #80]	; (80025f8 <HAL_UART_MspInit+0xc8>)
 80025a6:	4b15      	ldr	r3, [pc, #84]	; (80025fc <HAL_UART_MspInit+0xcc>)
 80025a8:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80025aa:	2319      	movs	r3, #25
 80025ac:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025ae:	2310      	movs	r3, #16
 80025b0:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025b2:	60c5      	str	r5, [r0, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025b4:	2380      	movs	r3, #128	; 0x80
 80025b6:	6103      	str	r3, [r0, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025b8:	6145      	str	r5, [r0, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025ba:	6185      	str	r5, [r0, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80025bc:	61c5      	str	r5, [r0, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80025be:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80025c0:	f000 ff94 	bl	80034ec <HAL_DMA_Init>
 80025c4:	b970      	cbnz	r0, 80025e4 <HAL_UART_MspInit+0xb4>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80025c6:	4b0c      	ldr	r3, [pc, #48]	; (80025f8 <HAL_UART_MspInit+0xc8>)
 80025c8:	67a3      	str	r3, [r4, #120]	; 0x78
 80025ca:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80025cc:	2200      	movs	r2, #0
 80025ce:	4611      	mov	r1, r2
 80025d0:	2025      	movs	r0, #37	; 0x25
 80025d2:	f000 fde5 	bl	80031a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80025d6:	2025      	movs	r0, #37	; 0x25
 80025d8:	f000 fe18 	bl	800320c <HAL_NVIC_EnableIRQ>
}
 80025dc:	e7b9      	b.n	8002552 <HAL_UART_MspInit+0x22>
      Error_Handler();
 80025de:	f7ff fc08 	bl	8001df2 <Error_Handler>
 80025e2:	e7bf      	b.n	8002564 <HAL_UART_MspInit+0x34>
      Error_Handler();
 80025e4:	f7ff fc05 	bl	8001df2 <Error_Handler>
 80025e8:	e7ed      	b.n	80025c6 <HAL_UART_MspInit+0x96>
 80025ea:	bf00      	nop
 80025ec:	40013800 	.word	0x40013800
 80025f0:	40021000 	.word	0x40021000
 80025f4:	48000800 	.word	0x48000800
 80025f8:	20000c40 	.word	0x20000c40
 80025fc:	40020430 	.word	0x40020430

08002600 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002600:	480d      	ldr	r0, [pc, #52]	; (8002638 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002602:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002604:	480d      	ldr	r0, [pc, #52]	; (800263c <LoopForever+0x6>)
  ldr r1, =_edata
 8002606:	490e      	ldr	r1, [pc, #56]	; (8002640 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002608:	4a0e      	ldr	r2, [pc, #56]	; (8002644 <LoopForever+0xe>)
  movs r3, #0
 800260a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800260c:	e002      	b.n	8002614 <LoopCopyDataInit>

0800260e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800260e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002612:	3304      	adds	r3, #4

08002614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002618:	d3f9      	bcc.n	800260e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800261a:	4a0b      	ldr	r2, [pc, #44]	; (8002648 <LoopForever+0x12>)
  ldr r4, =_ebss
 800261c:	4c0b      	ldr	r4, [pc, #44]	; (800264c <LoopForever+0x16>)
  movs r3, #0
 800261e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002620:	e001      	b.n	8002626 <LoopFillZerobss>

08002622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002624:	3204      	adds	r2, #4

08002626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002628:	d3fb      	bcc.n	8002622 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800262a:	f7ff fdf7 	bl	800221c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800262e:	f005 fa57 	bl	8007ae0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002632:	f7ff fbbe 	bl	8001db2 <main>

08002636 <LoopForever>:

LoopForever:
    b LoopForever
 8002636:	e7fe      	b.n	8002636 <LoopForever>
  ldr   r0, =_estack
 8002638:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800263c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002640:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 8002644:	0800a034 	.word	0x0800a034
  ldr r2, =_sbss
 8002648:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 800264c:	20000e80 	.word	0x20000e80

08002650 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002650:	e7fe      	b.n	8002650 <COMP1_2_3_IRQHandler>
	...

08002654 <HAL_InitTick>:
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8002654:	4b10      	ldr	r3, [pc, #64]	; (8002698 <HAL_InitTick+0x44>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	b90b      	cbnz	r3, 800265e <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 800265a:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 800265c:	4770      	bx	lr
{
 800265e:	b510      	push	{r4, lr}
 8002660:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002662:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002666:	fbb0 f3f3 	udiv	r3, r0, r3
 800266a:	4a0c      	ldr	r2, [pc, #48]	; (800269c <HAL_InitTick+0x48>)
 800266c:	6810      	ldr	r0, [r2, #0]
 800266e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002672:	f000 fdd9 	bl	8003228 <HAL_SYSTICK_Config>
 8002676:	b968      	cbnz	r0, 8002694 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002678:	2c0f      	cmp	r4, #15
 800267a:	d901      	bls.n	8002680 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 800267c:	2001      	movs	r0, #1
 800267e:	e00a      	b.n	8002696 <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002680:	2200      	movs	r2, #0
 8002682:	4621      	mov	r1, r4
 8002684:	f04f 30ff 	mov.w	r0, #4294967295
 8002688:	f000 fd8a 	bl	80031a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800268c:	4b04      	ldr	r3, [pc, #16]	; (80026a0 <HAL_InitTick+0x4c>)
 800268e:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8002690:	2000      	movs	r0, #0
 8002692:	e000      	b.n	8002696 <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8002694:	2001      	movs	r0, #1
}
 8002696:	bd10      	pop	{r4, pc}
 8002698:	20000044 	.word	0x20000044
 800269c:	20000040 	.word	0x20000040
 80026a0:	20000048 	.word	0x20000048

080026a4 <HAL_Init>:
{
 80026a4:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026a6:	2003      	movs	r0, #3
 80026a8:	f000 fd68 	bl	800317c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026ac:	200f      	movs	r0, #15
 80026ae:	f7ff ffd1 	bl	8002654 <HAL_InitTick>
 80026b2:	b110      	cbz	r0, 80026ba <HAL_Init+0x16>
    status = HAL_ERROR;
 80026b4:	2401      	movs	r4, #1
}
 80026b6:	4620      	mov	r0, r4
 80026b8:	bd10      	pop	{r4, pc}
 80026ba:	4604      	mov	r4, r0
    HAL_MspInit();
 80026bc:	f7ff fcc0 	bl	8002040 <HAL_MspInit>
 80026c0:	e7f9      	b.n	80026b6 <HAL_Init+0x12>
	...

080026c4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80026c4:	4a03      	ldr	r2, [pc, #12]	; (80026d4 <HAL_IncTick+0x10>)
 80026c6:	6813      	ldr	r3, [r2, #0]
 80026c8:	4903      	ldr	r1, [pc, #12]	; (80026d8 <HAL_IncTick+0x14>)
 80026ca:	6809      	ldr	r1, [r1, #0]
 80026cc:	440b      	add	r3, r1
 80026ce:	6013      	str	r3, [r2, #0]
}
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	20000d30 	.word	0x20000d30
 80026d8:	20000044 	.word	0x20000044

080026dc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80026dc:	4b01      	ldr	r3, [pc, #4]	; (80026e4 <HAL_GetTick+0x8>)
 80026de:	6818      	ldr	r0, [r3, #0]
}
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	20000d30 	.word	0x20000d30

080026e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026e8:	b538      	push	{r3, r4, r5, lr}
 80026ea:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80026ec:	f7ff fff6 	bl	80026dc <HAL_GetTick>
 80026f0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026f2:	f1b4 3fff 	cmp.w	r4, #4294967295
 80026f6:	d002      	beq.n	80026fe <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80026f8:	4b04      	ldr	r3, [pc, #16]	; (800270c <HAL_Delay+0x24>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026fe:	f7ff ffed 	bl	80026dc <HAL_GetTick>
 8002702:	1b40      	subs	r0, r0, r5
 8002704:	42a0      	cmp	r0, r4
 8002706:	d3fa      	bcc.n	80026fe <HAL_Delay+0x16>
  {
  }
}
 8002708:	bd38      	pop	{r3, r4, r5, pc}
 800270a:	bf00      	nop
 800270c:	20000044 	.word	0x20000044

08002710 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002710:	b530      	push	{r4, r5, lr}
 8002712:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002714:	2300      	movs	r3, #0
 8002716:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002718:	2800      	cmp	r0, #0
 800271a:	f000 8104 	beq.w	8002926 <HAL_ADC_Init+0x216>
 800271e:	4604      	mov	r4, r0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002720:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 80c0 	beq.w	80028a8 <HAL_ADC_Init+0x198>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002728:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8002730:	d005      	beq.n	800273e <HAL_ADC_Init+0x2e>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
 8002738:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800273c:	609a      	str	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800273e:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002740:	6893      	ldr	r3, [r2, #8]
 8002742:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002746:	d119      	bne.n	800277c <HAL_ADC_Init+0x6c>
  MODIFY_REG(ADCx->CR,
 8002748:	6893      	ldr	r3, [r2, #8]
 800274a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800274e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002756:	6093      	str	r3, [r2, #8]
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002758:	4b74      	ldr	r3, [pc, #464]	; (800292c <HAL_ADC_Init+0x21c>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	099b      	lsrs	r3, r3, #6
 800275e:	4a74      	ldr	r2, [pc, #464]	; (8002930 <HAL_ADC_Init+0x220>)
 8002760:	fba2 2303 	umull	r2, r3, r2, r3
 8002764:	099b      	lsrs	r3, r3, #6
 8002766:	3301      	adds	r3, #1
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800276c:	9b01      	ldr	r3, [sp, #4]
 800276e:	b12b      	cbz	r3, 800277c <HAL_ADC_Init+0x6c>
    {
      wait_loop_index--;
 8002770:	9b01      	ldr	r3, [sp, #4]
 8002772:	3b01      	subs	r3, #1
 8002774:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002776:	9b01      	ldr	r3, [sp, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1f9      	bne.n	8002770 <HAL_ADC_Init+0x60>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800277c:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800277e:	688b      	ldr	r3, [r1, #8]
 8002780:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002784:	f040 8097 	bne.w	80028b6 <HAL_ADC_Init+0x1a6>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002788:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800278a:	f043 0310 	orr.w	r3, r3, #16
 800278e:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002790:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002792:	f043 0301 	orr.w	r3, r3, #1
 8002796:	6623      	str	r3, [r4, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002798:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800279a:	688a      	ldr	r2, [r1, #8]
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800279c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800279e:	f003 0310 	and.w	r3, r3, #16
 80027a2:	f002 0204 	and.w	r2, r2, #4
 80027a6:	4313      	orrs	r3, r2
 80027a8:	f040 80b6 	bne.w	8002918 <HAL_ADC_Init+0x208>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027ac:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80027ae:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80027b2:	f043 0302 	orr.w	r3, r3, #2
 80027b6:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027b8:	688b      	ldr	r3, [r1, #8]
 80027ba:	f013 0f01 	tst.w	r3, #1
 80027be:	d110      	bne.n	80027e2 <HAL_ADC_Init+0xd2>
 80027c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80027c4:	689a      	ldr	r2, [r3, #8]
 80027c6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80027ca:	689b      	ldr	r3, [r3, #8]
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	f013 0f01 	tst.w	r3, #1
 80027d2:	d106      	bne.n	80027e2 <HAL_ADC_Init+0xd2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80027d4:	4a57      	ldr	r2, [pc, #348]	; (8002934 <HAL_ADC_Init+0x224>)
 80027d6:	6893      	ldr	r3, [r2, #8]
 80027d8:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80027dc:	6861      	ldr	r1, [r4, #4]
 80027de:	430b      	orrs	r3, r1
 80027e0:	6093      	str	r3, [r2, #8]
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80027e2:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 80027e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80027e8:	68e1      	ldr	r1, [r4, #12]
 80027ea:	430b      	orrs	r3, r1
 80027ec:	68a1      	ldr	r1, [r4, #8]
 80027ee:	430b      	orrs	r3, r1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027f0:	7f61      	ldrb	r1, [r4, #29]
                hadc->Init.DataAlign                                                   |
 80027f2:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027fa:	2a01      	cmp	r2, #1
 80027fc:	d05d      	beq.n	80028ba <HAL_ADC_Init+0x1aa>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027fe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002800:	b122      	cbz	r2, 800280c <HAL_ADC_Init+0xfc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002802:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002806:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002808:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800280a:	4313      	orrs	r3, r2
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800280c:	6821      	ldr	r1, [r4, #0]
 800280e:	68cd      	ldr	r5, [r1, #12]
 8002810:	4a49      	ldr	r2, [pc, #292]	; (8002938 <HAL_ADC_Init+0x228>)
 8002812:	402a      	ands	r2, r5
 8002814:	431a      	orrs	r2, r3
 8002816:	60ca      	str	r2, [r1, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002818:	6822      	ldr	r2, [r4, #0]
 800281a:	6913      	ldr	r3, [r2, #16]
 800281c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002820:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002822:	430b      	orrs	r3, r1
 8002824:	6113      	str	r3, [r2, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002826:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002828:	688a      	ldr	r2, [r1, #8]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800282a:	688b      	ldr	r3, [r1, #8]
 800282c:	f003 0308 	and.w	r3, r3, #8
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002830:	f002 0204 	and.w	r2, r2, #4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002834:	4313      	orrs	r3, r2
 8002836:	d128      	bne.n	800288a <HAL_ADC_Init+0x17a>
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002838:	68ca      	ldr	r2, [r1, #12]
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800283a:	7f25      	ldrb	r5, [r4, #28]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800283c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8002840:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002842:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002846:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800284a:	f022 0202 	bic.w	r2, r2, #2
 800284e:	4313      	orrs	r3, r2
 8002850:	60cb      	str	r3, [r1, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002852:	6923      	ldr	r3, [r4, #16]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d035      	beq.n	80028c4 <HAL_ADC_Init+0x1b4>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002858:	6822      	ldr	r2, [r4, #0]
 800285a:	6913      	ldr	r3, [r2, #16]
 800285c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002860:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002862:	6822      	ldr	r2, [r4, #0]
 8002864:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8002868:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800286c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002870:	6921      	ldr	r1, [r4, #16]
 8002872:	430b      	orrs	r3, r1
 8002874:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002878:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800287c:	2b01      	cmp	r3, #1
 800287e:	d030      	beq.n	80028e2 <HAL_ADC_Init+0x1d2>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002880:	6822      	ldr	r2, [r4, #0]
 8002882:	6913      	ldr	r3, [r2, #16]
 8002884:	f023 0301 	bic.w	r3, r3, #1
 8002888:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800288a:	6963      	ldr	r3, [r4, #20]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d03a      	beq.n	8002906 <HAL_ADC_Init+0x1f6>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002890:	6822      	ldr	r2, [r4, #0]
 8002892:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002894:	f023 030f 	bic.w	r3, r3, #15
 8002898:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800289a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800289c:	f023 0303 	bic.w	r3, r3, #3
 80028a0:	f043 0301 	orr.w	r3, r3, #1
 80028a4:	65e3      	str	r3, [r4, #92]	; 0x5c
 80028a6:	e03c      	b.n	8002922 <HAL_ADC_Init+0x212>
    HAL_ADC_MspInit(hadc);
 80028a8:	f7fe ff72 	bl	8001790 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80028ac:	2300      	movs	r3, #0
 80028ae:	6623      	str	r3, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 80028b0:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 80028b4:	e738      	b.n	8002728 <HAL_ADC_Init+0x18>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028b6:	2000      	movs	r0, #0
 80028b8:	e76f      	b.n	800279a <HAL_ADC_Init+0x8a>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80028ba:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80028bc:	3a01      	subs	r2, #1
 80028be:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80028c2:	e79c      	b.n	80027fe <HAL_ADC_Init+0xee>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80028c4:	6822      	ldr	r2, [r4, #0]
 80028c6:	6913      	ldr	r3, [r2, #16]
 80028c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028cc:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80028ce:	6822      	ldr	r2, [r4, #0]
 80028d0:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 80028d4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80028d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028dc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80028e0:	e7ca      	b.n	8002878 <HAL_ADC_Init+0x168>
        MODIFY_REG(hadc->Instance->CFGR2,
 80028e2:	6821      	ldr	r1, [r4, #0]
 80028e4:	690a      	ldr	r2, [r1, #16]
 80028e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80028e8:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80028ea:	432b      	orrs	r3, r5
 80028ec:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 80028f0:	f022 0204 	bic.w	r2, r2, #4
 80028f4:	4313      	orrs	r3, r2
 80028f6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80028f8:	4313      	orrs	r3, r2
 80028fa:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80028fc:	4313      	orrs	r3, r2
 80028fe:	f043 0301 	orr.w	r3, r3, #1
 8002902:	610b      	str	r3, [r1, #16]
 8002904:	e7c1      	b.n	800288a <HAL_ADC_Init+0x17a>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002906:	6821      	ldr	r1, [r4, #0]
 8002908:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800290a:	6a23      	ldr	r3, [r4, #32]
 800290c:	3b01      	subs	r3, #1
 800290e:	f022 020f 	bic.w	r2, r2, #15
 8002912:	4313      	orrs	r3, r2
 8002914:	630b      	str	r3, [r1, #48]	; 0x30
 8002916:	e7c0      	b.n	800289a <HAL_ADC_Init+0x18a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002918:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800291a:	f043 0310 	orr.w	r3, r3, #16
 800291e:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002920:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 8002922:	b003      	add	sp, #12
 8002924:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8002926:	2001      	movs	r0, #1
 8002928:	e7fb      	b.n	8002922 <HAL_ADC_Init+0x212>
 800292a:	bf00      	nop
 800292c:	20000040 	.word	0x20000040
 8002930:	053e2d63 	.word	0x053e2d63
 8002934:	50000300 	.word	0x50000300
 8002938:	fff04007 	.word	0xfff04007

0800293c <HAL_ADC_LevelOutOfWindowCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800293c:	4770      	bx	lr

0800293e <HAL_ADC_ErrorCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800293e:	4770      	bx	lr

08002940 <HAL_ADC_IRQHandler>:
{
 8002940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002942:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002944:	6803      	ldr	r3, [r0, #0]
 8002946:	681f      	ldr	r7, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002948:	685d      	ldr	r5, [r3, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800294a:	4b9b      	ldr	r3, [pc, #620]	; (8002bb8 <HAL_ADC_IRQHandler+0x278>)
 800294c:	689e      	ldr	r6, [r3, #8]
 800294e:	f006 061f 	and.w	r6, r6, #31
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002952:	f017 0f02 	tst.w	r7, #2
 8002956:	d010      	beq.n	800297a <HAL_ADC_IRQHandler+0x3a>
 8002958:	f015 0f02 	tst.w	r5, #2
 800295c:	d00d      	beq.n	800297a <HAL_ADC_IRQHandler+0x3a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800295e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8002960:	f013 0f10 	tst.w	r3, #16
 8002964:	d103      	bne.n	800296e <HAL_ADC_IRQHandler+0x2e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002966:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8002968:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800296c:	65c3      	str	r3, [r0, #92]	; 0x5c
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800296e:	4620      	mov	r0, r4
 8002970:	f000 fb8c 	bl	800308c <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002974:	6823      	ldr	r3, [r4, #0]
 8002976:	2202      	movs	r2, #2
 8002978:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800297a:	f017 0f04 	tst.w	r7, #4
 800297e:	d002      	beq.n	8002986 <HAL_ADC_IRQHandler+0x46>
 8002980:	f015 0f04 	tst.w	r5, #4
 8002984:	d105      	bne.n	8002992 <HAL_ADC_IRQHandler+0x52>
 8002986:	f017 0f08 	tst.w	r7, #8
 800298a:	d03e      	beq.n	8002a0a <HAL_ADC_IRQHandler+0xca>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800298c:	f015 0f08 	tst.w	r5, #8
 8002990:	d03b      	beq.n	8002a0a <HAL_ADC_IRQHandler+0xca>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002992:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002994:	f013 0f10 	tst.w	r3, #16
 8002998:	d103      	bne.n	80029a2 <HAL_ADC_IRQHandler+0x62>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800299a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800299c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029a0:	65e3      	str	r3, [r4, #92]	; 0x5c
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80029a2:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80029a4:	68da      	ldr	r2, [r3, #12]
 80029a6:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80029aa:	d128      	bne.n	80029fe <HAL_ADC_IRQHandler+0xbe>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80029ac:	4a83      	ldr	r2, [pc, #524]	; (8002bbc <HAL_ADC_IRQHandler+0x27c>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	f000 80f6 	beq.w	8002ba0 <HAL_ADC_IRQHandler+0x260>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80029b4:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80029b6:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 80029ba:	d120      	bne.n	80029fe <HAL_ADC_IRQHandler+0xbe>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	f012 0f08 	tst.w	r2, #8
 80029c2:	d01c      	beq.n	80029fe <HAL_ADC_IRQHandler+0xbe>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029c4:	689a      	ldr	r2, [r3, #8]
 80029c6:	f012 0f04 	tst.w	r2, #4
 80029ca:	d110      	bne.n	80029ee <HAL_ADC_IRQHandler+0xae>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	f022 020c 	bic.w	r2, r2, #12
 80029d2:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029d4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80029d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029da:	65e3      	str	r3, [r4, #92]	; 0x5c
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80029dc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80029de:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80029e2:	d10c      	bne.n	80029fe <HAL_ADC_IRQHandler+0xbe>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029e4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80029e6:	f043 0301 	orr.w	r3, r3, #1
 80029ea:	65e3      	str	r3, [r4, #92]	; 0x5c
 80029ec:	e007      	b.n	80029fe <HAL_ADC_IRQHandler+0xbe>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ee:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80029f0:	f043 0310 	orr.w	r3, r3, #16
 80029f4:	65e3      	str	r3, [r4, #92]	; 0x5c
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029f6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80029f8:	f043 0301 	orr.w	r3, r3, #1
 80029fc:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADC_ConvCpltCallback(hadc);
 80029fe:	4620      	mov	r0, r4
 8002a00:	f7fe fc82 	bl	8001308 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002a04:	6823      	ldr	r3, [r4, #0]
 8002a06:	220c      	movs	r2, #12
 8002a08:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002a0a:	f017 0f20 	tst.w	r7, #32
 8002a0e:	d002      	beq.n	8002a16 <HAL_ADC_IRQHandler+0xd6>
 8002a10:	f015 0f20 	tst.w	r5, #32
 8002a14:	d105      	bne.n	8002a22 <HAL_ADC_IRQHandler+0xe2>
 8002a16:	f017 0f40 	tst.w	r7, #64	; 0x40
 8002a1a:	d048      	beq.n	8002aae <HAL_ADC_IRQHandler+0x16e>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002a1c:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002a20:	d045      	beq.n	8002aae <HAL_ADC_IRQHandler+0x16e>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a22:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002a24:	f013 0f10 	tst.w	r3, #16
 8002a28:	d103      	bne.n	8002a32 <HAL_ADC_IRQHandler+0xf2>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002a2a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002a2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a30:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002a32:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002a34:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a36:	f402 72c0 	and.w	r2, r2, #384	; 0x180
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002a3a:	68d8      	ldr	r0, [r3, #12]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a3c:	495f      	ldr	r1, [pc, #380]	; (8002bbc <HAL_ADC_IRQHandler+0x27c>)
 8002a3e:	428b      	cmp	r3, r1
 8002a40:	f000 80a4 	beq.w	8002b8c <HAL_ADC_IRQHandler+0x24c>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002a44:	68d9      	ldr	r1, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002a46:	bb62      	cbnz	r2, 8002aa2 <HAL_ADC_IRQHandler+0x162>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002a48:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
 8002a4c:	d005      	beq.n	8002a5a <HAL_ADC_IRQHandler+0x11a>
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002a4e:	f401 5200 	and.w	r2, r1, #8192	; 0x2000
 8002a52:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002a56:	4302      	orrs	r2, r0
 8002a58:	d123      	bne.n	8002aa2 <HAL_ADC_IRQHandler+0x162>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002a60:	d01f      	beq.n	8002aa2 <HAL_ADC_IRQHandler+0x162>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002a62:	f411 1f00 	tst.w	r1, #2097152	; 0x200000
 8002a66:	d11c      	bne.n	8002aa2 <HAL_ADC_IRQHandler+0x162>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002a68:	689a      	ldr	r2, [r3, #8]
 8002a6a:	f012 0f08 	tst.w	r2, #8
 8002a6e:	d110      	bne.n	8002a92 <HAL_ADC_IRQHandler+0x152>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002a70:	685a      	ldr	r2, [r3, #4]
 8002a72:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a76:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002a78:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002a7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a7e:	65e3      	str	r3, [r4, #92]	; 0x5c
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002a80:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002a82:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002a86:	d10c      	bne.n	8002aa2 <HAL_ADC_IRQHandler+0x162>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a88:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002a8a:	f043 0301 	orr.w	r3, r3, #1
 8002a8e:	65e3      	str	r3, [r4, #92]	; 0x5c
 8002a90:	e007      	b.n	8002aa2 <HAL_ADC_IRQHandler+0x162>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a92:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002a94:	f043 0310 	orr.w	r3, r3, #16
 8002a98:	65e3      	str	r3, [r4, #92]	; 0x5c
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a9a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002a9c:	f043 0301 	orr.w	r3, r3, #1
 8002aa0:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002aa2:	4620      	mov	r0, r4
 8002aa4:	f000 faee 	bl	8003084 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002aa8:	6823      	ldr	r3, [r4, #0]
 8002aaa:	2260      	movs	r2, #96	; 0x60
 8002aac:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002aae:	f017 0f80 	tst.w	r7, #128	; 0x80
 8002ab2:	d002      	beq.n	8002aba <HAL_ADC_IRQHandler+0x17a>
 8002ab4:	f015 0f80 	tst.w	r5, #128	; 0x80
 8002ab8:	d12f      	bne.n	8002b1a <HAL_ADC_IRQHandler+0x1da>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002aba:	f417 7f80 	tst.w	r7, #256	; 0x100
 8002abe:	d002      	beq.n	8002ac6 <HAL_ADC_IRQHandler+0x186>
 8002ac0:	f415 7f80 	tst.w	r5, #256	; 0x100
 8002ac4:	d134      	bne.n	8002b30 <HAL_ADC_IRQHandler+0x1f0>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002ac6:	f417 7f00 	tst.w	r7, #512	; 0x200
 8002aca:	d002      	beq.n	8002ad2 <HAL_ADC_IRQHandler+0x192>
 8002acc:	f415 7f00 	tst.w	r5, #512	; 0x200
 8002ad0:	d13a      	bne.n	8002b48 <HAL_ADC_IRQHandler+0x208>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002ad2:	f017 0f10 	tst.w	r7, #16
 8002ad6:	d019      	beq.n	8002b0c <HAL_ADC_IRQHandler+0x1cc>
 8002ad8:	f015 0f10 	tst.w	r5, #16
 8002adc:	d016      	beq.n	8002b0c <HAL_ADC_IRQHandler+0x1cc>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002ade:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002ae0:	b133      	cbz	r3, 8002af0 <HAL_ADC_IRQHandler+0x1b0>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002ae2:	2e00      	cmp	r6, #0
 8002ae4:	d03c      	beq.n	8002b60 <HAL_ADC_IRQHandler+0x220>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002ae6:	4b34      	ldr	r3, [pc, #208]	; (8002bb8 <HAL_ADC_IRQHandler+0x278>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002aea:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 8002aee:	d00a      	beq.n	8002b06 <HAL_ADC_IRQHandler+0x1c6>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002af0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002af2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002af6:	65e3      	str	r3, [r4, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002af8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002afa:	f043 0302 	orr.w	r3, r3, #2
 8002afe:	6623      	str	r3, [r4, #96]	; 0x60
      HAL_ADC_ErrorCallback(hadc);
 8002b00:	4620      	mov	r0, r4
 8002b02:	f7ff ff1c 	bl	800293e <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002b06:	6823      	ldr	r3, [r4, #0]
 8002b08:	2210      	movs	r2, #16
 8002b0a:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002b0c:	f417 6f80 	tst.w	r7, #1024	; 0x400
 8002b10:	d002      	beq.n	8002b18 <HAL_ADC_IRQHandler+0x1d8>
 8002b12:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8002b16:	d129      	bne.n	8002b6c <HAL_ADC_IRQHandler+0x22c>
}
 8002b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002b1a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b20:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002b22:	4620      	mov	r0, r4
 8002b24:	f7ff ff0a 	bl	800293c <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002b28:	6823      	ldr	r3, [r4, #0]
 8002b2a:	2280      	movs	r2, #128	; 0x80
 8002b2c:	601a      	str	r2, [r3, #0]
 8002b2e:	e7c4      	b.n	8002aba <HAL_ADC_IRQHandler+0x17a>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002b30:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002b32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b36:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002b38:	4620      	mov	r0, r4
 8002b3a:	f000 faa5 	bl	8003088 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002b3e:	6823      	ldr	r3, [r4, #0]
 8002b40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b44:	601a      	str	r2, [r3, #0]
 8002b46:	e7be      	b.n	8002ac6 <HAL_ADC_IRQHandler+0x186>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002b48:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002b4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b4e:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002b50:	4620      	mov	r0, r4
 8002b52:	f000 fa9a 	bl	800308a <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002b56:	6823      	ldr	r3, [r4, #0]
 8002b58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	e7b8      	b.n	8002ad2 <HAL_ADC_IRQHandler+0x192>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002b60:	6823      	ldr	r3, [r4, #0]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	f013 0f01 	tst.w	r3, #1
 8002b68:	d0cd      	beq.n	8002b06 <HAL_ADC_IRQHandler+0x1c6>
 8002b6a:	e7c1      	b.n	8002af0 <HAL_ADC_IRQHandler+0x1b0>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002b6c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002b6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b72:	65e3      	str	r3, [r4, #92]	; 0x5c
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002b74:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002b76:	f043 0308 	orr.w	r3, r3, #8
 8002b7a:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002b7c:	6823      	ldr	r3, [r4, #0]
 8002b7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b82:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002b84:	4620      	mov	r0, r4
 8002b86:	f000 fa7e 	bl	8003086 <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 8002b8a:	e7c5      	b.n	8002b18 <HAL_ADC_IRQHandler+0x1d8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b8c:	21c1      	movs	r1, #193	; 0xc1
 8002b8e:	40f1      	lsrs	r1, r6
 8002b90:	f011 0f01 	tst.w	r1, #1
 8002b94:	f47f af56 	bne.w	8002a44 <HAL_ADC_IRQHandler+0x104>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002b98:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8002b9c:	68c9      	ldr	r1, [r1, #12]
 8002b9e:	e752      	b.n	8002a46 <HAL_ADC_IRQHandler+0x106>
 8002ba0:	f240 2221 	movw	r2, #545	; 0x221
 8002ba4:	40f2      	lsrs	r2, r6
 8002ba6:	f012 0f01 	tst.w	r2, #1
 8002baa:	f47f af03 	bne.w	80029b4 <HAL_ADC_IRQHandler+0x74>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002bae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002bb2:	68d2      	ldr	r2, [r2, #12]
 8002bb4:	e6ff      	b.n	80029b6 <HAL_ADC_IRQHandler+0x76>
 8002bb6:	bf00      	nop
 8002bb8:	50000300 	.word	0x50000300
 8002bbc:	50000100 	.word	0x50000100

08002bc0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bc2:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	9201      	str	r2, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bc8:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 8002bcc:	2a01      	cmp	r2, #1
 8002bce:	f000 8241 	beq.w	8003054 <HAL_ADC_ConfigChannel+0x494>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bda:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002bdc:	6890      	ldr	r0, [r2, #8]
 8002bde:	f010 0f04 	tst.w	r0, #4
 8002be2:	d009      	beq.n	8002bf8 <HAL_ADC_ConfigChannel+0x38>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002be4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002be6:	f042 0220 	orr.w	r2, r2, #32
 8002bea:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002bec:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8002bf4:	b003      	add	sp, #12
 8002bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002bf8:	6848      	ldr	r0, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002bfa:	ea4f 1e90 	mov.w	lr, r0, lsr #6
 8002bfe:	f00e 0e0c 	and.w	lr, lr, #12
 8002c02:	3230      	adds	r2, #48	; 0x30
  MODIFY_REG(*preg,
 8002c04:	f852 400e 	ldr.w	r4, [r2, lr]
 8002c08:	f000 0c1f 	and.w	ip, r0, #31
 8002c0c:	6808      	ldr	r0, [r1, #0]
 8002c0e:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8002c12:	fa00 f00c 	lsl.w	r0, r0, ip
 8002c16:	251f      	movs	r5, #31
 8002c18:	fa05 fc0c 	lsl.w	ip, r5, ip
 8002c1c:	ea24 0c0c 	bic.w	ip, r4, ip
 8002c20:	ea40 000c 	orr.w	r0, r0, ip
 8002c24:	f842 000e 	str.w	r0, [r2, lr]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c28:	681c      	ldr	r4, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c2a:	68a0      	ldr	r0, [r4, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c2c:	68a2      	ldr	r2, [r4, #8]
 8002c2e:	f002 0208 	and.w	r2, r2, #8
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c32:	f000 0004 	and.w	r0, r0, #4
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c36:	4302      	orrs	r2, r0
 8002c38:	d14f      	bne.n	8002cda <HAL_ADC_ConfigChannel+0x11a>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002c3a:	688a      	ldr	r2, [r1, #8]
 8002c3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8002c40:	f000 808b 	beq.w	8002d5a <HAL_ADC_ConfigChannel+0x19a>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002c44:	680d      	ldr	r5, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002c46:	ea4f 5cd5 	mov.w	ip, r5, lsr #23
 8002c4a:	f00c 0c04 	and.w	ip, ip, #4
 8002c4e:	3414      	adds	r4, #20
  MODIFY_REG(*preg,
 8002c50:	f854 000c 	ldr.w	r0, [r4, ip]
 8002c54:	f3c5 5504 	ubfx	r5, r5, #20, #5
 8002c58:	2607      	movs	r6, #7
 8002c5a:	40ae      	lsls	r6, r5
 8002c5c:	ea20 0006 	bic.w	r0, r0, r6
 8002c60:	40aa      	lsls	r2, r5
 8002c62:	4302      	orrs	r2, r0
 8002c64:	f844 200c 	str.w	r2, [r4, ip]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002c68:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002c6a:	6942      	ldr	r2, [r0, #20]
 8002c6c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c70:	6142      	str	r2, [r0, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002c72:	694a      	ldr	r2, [r1, #20]
 8002c74:	681c      	ldr	r4, [r3, #0]
 8002c76:	68e0      	ldr	r0, [r4, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002c78:	690d      	ldr	r5, [r1, #16]
 8002c7a:	2d04      	cmp	r5, #4
 8002c7c:	f000 8081 	beq.w	8002d82 <HAL_ADC_ConfigChannel+0x1c2>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c80:	3460      	adds	r4, #96	; 0x60
  MODIFY_REG(*preg,
 8002c82:	f854 7025 	ldr.w	r7, [r4, r5, lsl #2]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002c86:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8002c8a:	0040      	lsls	r0, r0, #1
 8002c8c:	4082      	lsls	r2, r0
 8002c8e:	6808      	ldr	r0, [r1, #0]
 8002c90:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8002c94:	4eaa      	ldr	r6, [pc, #680]	; (8002f40 <HAL_ADC_ConfigChannel+0x380>)
 8002c96:	403e      	ands	r6, r7
 8002c98:	4330      	orrs	r0, r6
 8002c9a:	4302      	orrs	r2, r0
 8002c9c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002ca0:	f844 2025 	str.w	r2, [r4, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ca4:	690c      	ldr	r4, [r1, #16]
 8002ca6:	6818      	ldr	r0, [r3, #0]
 8002ca8:	3060      	adds	r0, #96	; 0x60
  MODIFY_REG(*preg,
 8002caa:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
 8002cae:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002cb2:	698d      	ldr	r5, [r1, #24]
 8002cb4:	432a      	orrs	r2, r5
 8002cb6:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cba:	690d      	ldr	r5, [r1, #16]
 8002cbc:	6818      	ldr	r0, [r3, #0]
 8002cbe:	3060      	adds	r0, #96	; 0x60
  MODIFY_REG(*preg,
 8002cc0:	f850 2025 	ldr.w	r2, [r0, r5, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002cc4:	7f0c      	ldrb	r4, [r1, #28]
 8002cc6:	2c01      	cmp	r4, #1
 8002cc8:	bf14      	ite	ne
 8002cca:	2400      	movne	r4, #0
 8002ccc:	2401      	moveq	r4, #1
 8002cce:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8002cd2:	ea42 6244 	orr.w	r2, r2, r4, lsl #25
 8002cd6:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cda:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002cdc:	6890      	ldr	r0, [r2, #8]
 8002cde:	f010 0f01 	tst.w	r0, #1
 8002ce2:	d112      	bne.n	8002d0a <HAL_ADC_ConfigChannel+0x14a>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002ce4:	6808      	ldr	r0, [r1, #0]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002ce6:	68cd      	ldr	r5, [r1, #12]
 8002ce8:	4c96      	ldr	r4, [pc, #600]	; (8002f44 <HAL_ADC_ConfigChannel+0x384>)
 8002cea:	42a5      	cmp	r5, r4
    SET_BIT(ADCx->DIFSEL,
 8002cec:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8002cf0:	f3c0 0012 	ubfx	r0, r0, #0, #19
 8002cf4:	bf0c      	ite	eq
 8002cf6:	4320      	orreq	r0, r4
    CLEAR_BIT(ADCx->DIFSEL,
 8002cf8:	ea24 0000 	bicne.w	r0, r4, r0
 8002cfc:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002d00:	68c8      	ldr	r0, [r1, #12]
 8002d02:	4a90      	ldr	r2, [pc, #576]	; (8002f44 <HAL_ADC_ConfigChannel+0x384>)
 8002d04:	4290      	cmp	r0, r2
 8002d06:	f000 80d3 	beq.w	8002eb0 <HAL_ADC_ConfigChannel+0x2f0>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002d0a:	680a      	ldr	r2, [r1, #0]
 8002d0c:	498e      	ldr	r1, [pc, #568]	; (8002f48 <HAL_ADC_ConfigChannel+0x388>)
 8002d0e:	420a      	tst	r2, r1
 8002d10:	f000 8192 	beq.w	8003038 <HAL_ADC_ConfigChannel+0x478>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002d14:	498d      	ldr	r1, [pc, #564]	; (8002f4c <HAL_ADC_ConfigChannel+0x38c>)
 8002d16:	6889      	ldr	r1, [r1, #8]
 8002d18:	f001 74e0 	and.w	r4, r1, #29360128	; 0x1c00000
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002d1c:	488c      	ldr	r0, [pc, #560]	; (8002f50 <HAL_ADC_ConfigChannel+0x390>)
 8002d1e:	4282      	cmp	r2, r0
 8002d20:	f000 819a 	beq.w	8003058 <HAL_ADC_ConfigChannel+0x498>
 8002d24:	488b      	ldr	r0, [pc, #556]	; (8002f54 <HAL_ADC_ConfigChannel+0x394>)
 8002d26:	4282      	cmp	r2, r0
 8002d28:	f000 8196 	beq.w	8003058 <HAL_ADC_ConfigChannel+0x498>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d2c:	488a      	ldr	r0, [pc, #552]	; (8002f58 <HAL_ADC_ConfigChannel+0x398>)
 8002d2e:	4282      	cmp	r2, r0
 8002d30:	f040 816e 	bne.w	8003010 <HAL_ADC_ConfigChannel+0x450>
 8002d34:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
 8002d38:	f040 8182 	bne.w	8003040 <HAL_ADC_ConfigChannel+0x480>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d3c:	6819      	ldr	r1, [r3, #0]
 8002d3e:	4a87      	ldr	r2, [pc, #540]	; (8002f5c <HAL_ADC_ConfigChannel+0x39c>)
 8002d40:	4291      	cmp	r1, r2
 8002d42:	f000 817f 	beq.w	8003044 <HAL_ADC_ConfigChannel+0x484>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002d46:	4981      	ldr	r1, [pc, #516]	; (8002f4c <HAL_ADC_ConfigChannel+0x38c>)
 8002d48:	688a      	ldr	r2, [r1, #8]
 8002d4a:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002d4e:	4322      	orrs	r2, r4
 8002d50:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002d54:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d56:	2000      	movs	r0, #0
}
 8002d58:	e749      	b.n	8002bee <HAL_ADC_ConfigChannel+0x2e>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002d5a:	6808      	ldr	r0, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002d5c:	0dc2      	lsrs	r2, r0, #23
 8002d5e:	f002 0204 	and.w	r2, r2, #4
 8002d62:	3414      	adds	r4, #20
  MODIFY_REG(*preg,
 8002d64:	58a5      	ldr	r5, [r4, r2]
 8002d66:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8002d6a:	2607      	movs	r6, #7
 8002d6c:	fa06 f000 	lsl.w	r0, r6, r0
 8002d70:	ea25 0000 	bic.w	r0, r5, r0
 8002d74:	50a0      	str	r0, [r4, r2]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002d76:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002d78:	6942      	ldr	r2, [r0, #20]
 8002d7a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002d7e:	6142      	str	r2, [r0, #20]
}
 8002d80:	e777      	b.n	8002c72 <HAL_ADC_ConfigChannel+0xb2>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002d82:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002d84:	6e20      	ldr	r0, [r4, #96]	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d86:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d8a:	680a      	ldr	r2, [r1, #0]
 8002d8c:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8002d90:	bb5d      	cbnz	r5, 8002dea <HAL_ADC_ConfigChannel+0x22a>
 8002d92:	f3c2 6584 	ubfx	r5, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d96:	42a8      	cmp	r0, r5
 8002d98:	d057      	beq.n	8002e4a <HAL_ADC_ConfigChannel+0x28a>
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d9a:	f104 0564 	add.w	r5, r4, #100	; 0x64
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002d9e:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002da0:	6e60      	ldr	r0, [r4, #100]	; 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002da2:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002da6:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002daa:	4282      	cmp	r2, r0
 8002dac:	d05e      	beq.n	8002e6c <HAL_ADC_ConfigChannel+0x2ac>
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	f102 0468 	add.w	r4, r2, #104	; 0x68
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002db4:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8002db6:	6e90      	ldr	r0, [r2, #104]	; 0x68
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002db8:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002dbc:	680a      	ldr	r2, [r1, #0]
 8002dbe:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002dc2:	4282      	cmp	r2, r0
 8002dc4:	d063      	beq.n	8002e8e <HAL_ADC_ConfigChannel+0x2ce>
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	f102 046c 	add.w	r4, r2, #108	; 0x6c
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002dcc:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8002dce:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002dd0:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002dd4:	680a      	ldr	r2, [r1, #0]
 8002dd6:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002dda:	4282      	cmp	r2, r0
 8002ddc:	f47f af7d 	bne.w	8002cda <HAL_ADC_ConfigChannel+0x11a>
  MODIFY_REG(*preg,
 8002de0:	6822      	ldr	r2, [r4, #0]
 8002de2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002de6:	6022      	str	r2, [r4, #0]
}
 8002de8:	e777      	b.n	8002cda <HAL_ADC_ConfigChannel+0x11a>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dea:	fa92 f5a2 	rbit	r5, r2
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002dee:	b11d      	cbz	r5, 8002df8 <HAL_ADC_ConfigChannel+0x238>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8002df0:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002df4:	42a8      	cmp	r0, r5
 8002df6:	d028      	beq.n	8002e4a <HAL_ADC_ConfigChannel+0x28a>
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002df8:	f104 0564 	add.w	r5, r4, #100	; 0x64
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002dfc:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002dfe:	6e60      	ldr	r0, [r4, #100]	; 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e00:	f3c0 6084 	ubfx	r0, r0, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e04:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8002e08:	b11a      	cbz	r2, 8002e12 <HAL_ADC_ConfigChannel+0x252>
  return __builtin_clz(value);
 8002e0a:	fab2 f282 	clz	r2, r2
 8002e0e:	4282      	cmp	r2, r0
 8002e10:	d02c      	beq.n	8002e6c <HAL_ADC_ConfigChannel+0x2ac>
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	f102 0468 	add.w	r4, r2, #104	; 0x68
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002e18:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8002e1a:	6e90      	ldr	r0, [r2, #104]	; 0x68
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e1c:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e20:	680a      	ldr	r2, [r1, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e22:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8002e26:	b11a      	cbz	r2, 8002e30 <HAL_ADC_ConfigChannel+0x270>
  return __builtin_clz(value);
 8002e28:	fab2 f282 	clz	r2, r2
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e2c:	4282      	cmp	r2, r0
 8002e2e:	d02e      	beq.n	8002e8e <HAL_ADC_ConfigChannel+0x2ce>
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	f102 046c 	add.w	r4, r2, #108	; 0x6c
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002e36:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8002e38:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e3a:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e3e:	680a      	ldr	r2, [r1, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e40:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8002e44:	fab2 f282 	clz	r2, r2
 8002e48:	e7c7      	b.n	8002dda <HAL_ADC_ConfigChannel+0x21a>
  MODIFY_REG(*preg,
 8002e4a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002e4c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e50:	6622      	str	r2, [r4, #96]	; 0x60
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	f102 0564 	add.w	r5, r2, #100	; 0x64
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002e58:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8002e5a:	6e50      	ldr	r0, [r2, #100]	; 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e5c:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e60:	680a      	ldr	r2, [r1, #0]
 8002e62:	f3c2 0412 	ubfx	r4, r2, #0, #19
 8002e66:	2c00      	cmp	r4, #0
 8002e68:	d1cc      	bne.n	8002e04 <HAL_ADC_ConfigChannel+0x244>
 8002e6a:	e79c      	b.n	8002da6 <HAL_ADC_ConfigChannel+0x1e6>
  MODIFY_REG(*preg,
 8002e6c:	682a      	ldr	r2, [r5, #0]
 8002e6e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e72:	602a      	str	r2, [r5, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	f102 0468 	add.w	r4, r2, #104	; 0x68
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002e7a:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8002e7c:	6e90      	ldr	r0, [r2, #104]	; 0x68
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e7e:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e82:	680a      	ldr	r2, [r1, #0]
 8002e84:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8002e88:	2d00      	cmp	r5, #0
 8002e8a:	d1ca      	bne.n	8002e22 <HAL_ADC_ConfigChannel+0x262>
 8002e8c:	e797      	b.n	8002dbe <HAL_ADC_ConfigChannel+0x1fe>
  MODIFY_REG(*preg,
 8002e8e:	6822      	ldr	r2, [r4, #0]
 8002e90:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e94:	6022      	str	r2, [r4, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	f102 046c 	add.w	r4, r2, #108	; 0x6c
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002e9c:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8002e9e:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ea0:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ea4:	680a      	ldr	r2, [r1, #0]
 8002ea6:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8002eaa:	2d00      	cmp	r5, #0
 8002eac:	d1c8      	bne.n	8002e40 <HAL_ADC_ConfigChannel+0x280>
 8002eae:	e792      	b.n	8002dd6 <HAL_ADC_ConfigChannel+0x216>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002eb0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002eb2:	680a      	ldr	r2, [r1, #0]
 8002eb4:	f3c2 0412 	ubfx	r4, r2, #0, #19
 8002eb8:	b9bc      	cbnz	r4, 8002eea <HAL_ADC_ConfigChannel+0x32a>
 8002eba:	0e94      	lsrs	r4, r2, #26
 8002ebc:	3401      	adds	r4, #1
 8002ebe:	f004 051f 	and.w	r5, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ec2:	2d09      	cmp	r5, #9
 8002ec4:	d94c      	bls.n	8002f60 <HAL_ADC_ConfigChannel+0x3a0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ec6:	0e94      	lsrs	r4, r2, #26
 8002ec8:	3401      	adds	r4, #1
 8002eca:	f004 021f 	and.w	r2, r4, #31
 8002ece:	06a4      	lsls	r4, r4, #26
 8002ed0:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8002ed4:	2501      	movs	r5, #1
 8002ed6:	4095      	lsls	r5, r2
 8002ed8:	432c      	orrs	r4, r5
 8002eda:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002ede:	3a1e      	subs	r2, #30
 8002ee0:	0512      	lsls	r2, r2, #20
 8002ee2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ee6:	4322      	orrs	r2, r4
 8002ee8:	e044      	b.n	8002f74 <HAL_ADC_ConfigChannel+0x3b4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eea:	fa92 f4a2 	rbit	r4, r2
  if (value == 0U)
 8002eee:	2c00      	cmp	r4, #0
 8002ef0:	d053      	beq.n	8002f9a <HAL_ADC_ConfigChannel+0x3da>
  return __builtin_clz(value);
 8002ef2:	fab4 f484 	clz	r4, r4
 8002ef6:	3401      	adds	r4, #1
 8002ef8:	f004 041f 	and.w	r4, r4, #31
 8002efc:	2c09      	cmp	r4, #9
 8002efe:	d94c      	bls.n	8002f9a <HAL_ADC_ConfigChannel+0x3da>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f00:	fa92 f5a2 	rbit	r5, r2
  return __builtin_clz(value);
 8002f04:	fab5 f585 	clz	r5, r5
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f08:	3501      	adds	r5, #1
 8002f0a:	06ad      	lsls	r5, r5, #26
 8002f0c:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f10:	fa92 f6a2 	rbit	r6, r2
  return __builtin_clz(value);
 8002f14:	fab6 f686 	clz	r6, r6
 8002f18:	3601      	adds	r6, #1
 8002f1a:	f006 061f 	and.w	r6, r6, #31
 8002f1e:	2401      	movs	r4, #1
 8002f20:	40b4      	lsls	r4, r6
 8002f22:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f24:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8002f28:	fab2 f282 	clz	r2, r2
 8002f2c:	3201      	adds	r2, #1
 8002f2e:	f002 021f 	and.w	r2, r2, #31
 8002f32:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002f36:	3a1e      	subs	r2, #30
 8002f38:	0512      	lsls	r2, r2, #20
 8002f3a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002f3e:	e7d2      	b.n	8002ee6 <HAL_ADC_ConfigChannel+0x326>
 8002f40:	03fff000 	.word	0x03fff000
 8002f44:	407f0000 	.word	0x407f0000
 8002f48:	80080000 	.word	0x80080000
 8002f4c:	50000300 	.word	0x50000300
 8002f50:	c3210000 	.word	0xc3210000
 8002f54:	90c00010 	.word	0x90c00010
 8002f58:	c7520000 	.word	0xc7520000
 8002f5c:	50000100 	.word	0x50000100
 8002f60:	06a4      	lsls	r4, r4, #26
 8002f62:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8002f66:	2201      	movs	r2, #1
 8002f68:	40aa      	lsls	r2, r5
 8002f6a:	4314      	orrs	r4, r2
 8002f6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002f70:	052a      	lsls	r2, r5, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f72:	4322      	orrs	r2, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002f74:	0dd5      	lsrs	r5, r2, #23
 8002f76:	f005 0504 	and.w	r5, r5, #4
 8002f7a:	3014      	adds	r0, #20
  MODIFY_REG(*preg,
 8002f7c:	5944      	ldr	r4, [r0, r5]
 8002f7e:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8002f82:	f04f 0c07 	mov.w	ip, #7
 8002f86:	fa0c fc02 	lsl.w	ip, ip, r2
 8002f8a:	ea24 040c 	bic.w	r4, r4, ip
 8002f8e:	688e      	ldr	r6, [r1, #8]
 8002f90:	fa06 f202 	lsl.w	r2, r6, r2
 8002f94:	4322      	orrs	r2, r4
 8002f96:	5142      	str	r2, [r0, r5]
}
 8002f98:	e6b7      	b.n	8002d0a <HAL_ADC_ConfigChannel+0x14a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9a:	fa92 f5a2 	rbit	r5, r2
  return __builtin_clz(value);
 8002f9e:	fab5 f585 	clz	r5, r5
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002fa2:	3501      	adds	r5, #1
 8002fa4:	06ad      	lsls	r5, r5, #26
 8002fa6:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002faa:	fa92 f6a2 	rbit	r6, r2
  return __builtin_clz(value);
 8002fae:	fab6 f686 	clz	r6, r6
 8002fb2:	3601      	adds	r6, #1
 8002fb4:	f006 061f 	and.w	r6, r6, #31
 8002fb8:	2401      	movs	r4, #1
 8002fba:	40b4      	lsls	r4, r6
 8002fbc:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fbe:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8002fc2:	fab2 f282 	clz	r2, r2
 8002fc6:	3201      	adds	r2, #1
 8002fc8:	f002 021f 	and.w	r2, r2, #31
 8002fcc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002fd0:	0512      	lsls	r2, r2, #20
 8002fd2:	e7ce      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x3b2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002fd4:	4926      	ldr	r1, [pc, #152]	; (8003070 <HAL_ADC_ConfigChannel+0x4b0>)
 8002fd6:	688a      	ldr	r2, [r1, #8]
 8002fd8:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002fdc:	4322      	orrs	r2, r4
 8002fde:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002fe2:	608a      	str	r2, [r1, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fe4:	4a23      	ldr	r2, [pc, #140]	; (8003074 <HAL_ADC_ConfigChannel+0x4b4>)
 8002fe6:	6812      	ldr	r2, [r2, #0]
 8002fe8:	0992      	lsrs	r2, r2, #6
 8002fea:	4923      	ldr	r1, [pc, #140]	; (8003078 <HAL_ADC_ConfigChannel+0x4b8>)
 8002fec:	fba1 1202 	umull	r1, r2, r1, r2
 8002ff0:	0992      	lsrs	r2, r2, #6
 8002ff2:	3201      	adds	r2, #1
 8002ff4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002ff8:	0092      	lsls	r2, r2, #2
 8002ffa:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8002ffc:	9a01      	ldr	r2, [sp, #4]
 8002ffe:	b1ea      	cbz	r2, 800303c <HAL_ADC_ConfigChannel+0x47c>
            wait_loop_index--;
 8003000:	9a01      	ldr	r2, [sp, #4]
 8003002:	3a01      	subs	r2, #1
 8003004:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003006:	9a01      	ldr	r2, [sp, #4]
 8003008:	2a00      	cmp	r2, #0
 800300a:	d1f9      	bne.n	8003000 <HAL_ADC_ConfigChannel+0x440>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800300c:	2000      	movs	r0, #0
 800300e:	e5ee      	b.n	8002bee <HAL_ADC_ConfigChannel+0x2e>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003010:	481a      	ldr	r0, [pc, #104]	; (800307c <HAL_ADC_ConfigChannel+0x4bc>)
 8003012:	4282      	cmp	r2, r0
 8003014:	d118      	bne.n	8003048 <HAL_ADC_ConfigChannel+0x488>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003016:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 800301a:	d117      	bne.n	800304c <HAL_ADC_ConfigChannel+0x48c>
        if (ADC_VREFINT_INSTANCE(hadc))
 800301c:	6819      	ldr	r1, [r3, #0]
 800301e:	4a18      	ldr	r2, [pc, #96]	; (8003080 <HAL_ADC_ConfigChannel+0x4c0>)
 8003020:	4291      	cmp	r1, r2
 8003022:	d015      	beq.n	8003050 <HAL_ADC_ConfigChannel+0x490>
 8003024:	4912      	ldr	r1, [pc, #72]	; (8003070 <HAL_ADC_ConfigChannel+0x4b0>)
 8003026:	688a      	ldr	r2, [r1, #8]
 8003028:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800302c:	4322      	orrs	r2, r4
 800302e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003032:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003034:	2000      	movs	r0, #0
}
 8003036:	e5da      	b.n	8002bee <HAL_ADC_ConfigChannel+0x2e>
 8003038:	2000      	movs	r0, #0
 800303a:	e5d8      	b.n	8002bee <HAL_ADC_ConfigChannel+0x2e>
 800303c:	2000      	movs	r0, #0
 800303e:	e5d6      	b.n	8002bee <HAL_ADC_ConfigChannel+0x2e>
 8003040:	2000      	movs	r0, #0
 8003042:	e5d4      	b.n	8002bee <HAL_ADC_ConfigChannel+0x2e>
 8003044:	2000      	movs	r0, #0
 8003046:	e5d2      	b.n	8002bee <HAL_ADC_ConfigChannel+0x2e>
 8003048:	2000      	movs	r0, #0
 800304a:	e5d0      	b.n	8002bee <HAL_ADC_ConfigChannel+0x2e>
 800304c:	2000      	movs	r0, #0
 800304e:	e5ce      	b.n	8002bee <HAL_ADC_ConfigChannel+0x2e>
 8003050:	2000      	movs	r0, #0
 8003052:	e5cc      	b.n	8002bee <HAL_ADC_ConfigChannel+0x2e>
  __HAL_LOCK(hadc);
 8003054:	2002      	movs	r0, #2
 8003056:	e5cd      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x34>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003058:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
 800305c:	d105      	bne.n	800306a <HAL_ADC_ConfigChannel+0x4aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8003064:	d0b6      	beq.n	8002fd4 <HAL_ADC_ConfigChannel+0x414>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003066:	2000      	movs	r0, #0
 8003068:	e5c1      	b.n	8002bee <HAL_ADC_ConfigChannel+0x2e>
 800306a:	2000      	movs	r0, #0
 800306c:	e5bf      	b.n	8002bee <HAL_ADC_ConfigChannel+0x2e>
 800306e:	bf00      	nop
 8003070:	50000300 	.word	0x50000300
 8003074:	20000040 	.word	0x20000040
 8003078:	053e2d63 	.word	0x053e2d63
 800307c:	cb840000 	.word	0xcb840000
 8003080:	50000100 	.word	0x50000100

08003084 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003084:	4770      	bx	lr

08003086 <HAL_ADCEx_InjectedQueueOverflowCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003086:	4770      	bx	lr

08003088 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003088:	4770      	bx	lr

0800308a <HAL_ADCEx_LevelOutOfWindow3Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800308a:	4770      	bx	lr

0800308c <HAL_ADCEx_EndOfSamplingCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800308c:	4770      	bx	lr
	...

08003090 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003090:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 8003094:	2a01      	cmp	r2, #1
 8003096:	d03d      	beq.n	8003114 <HAL_ADCEx_MultiModeConfigChannel+0x84>
{
 8003098:	b410      	push	{r4}
 800309a:	b09d      	sub	sp, #116	; 0x74
 800309c:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 800309e:	2201      	movs	r2, #1
 80030a0:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80030a4:	2200      	movs	r2, #0
 80030a6:	9218      	str	r2, [sp, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80030a8:	9219      	str	r2, [sp, #100]	; 0x64

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80030aa:	6802      	ldr	r2, [r0, #0]
 80030ac:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80030b0:	d032      	beq.n	8003118 <HAL_ADCEx_MultiModeConfigChannel+0x88>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030b2:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80030b4:	f042 0220 	orr.w	r2, r2, #32
 80030b8:	65c2      	str	r2, [r0, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80030ba:	2200      	movs	r2, #0
 80030bc:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58

    return HAL_ERROR;
 80030c0:	2001      	movs	r0, #1
 80030c2:	e01f      	b.n	8003104 <HAL_ADCEx_MultiModeConfigChannel+0x74>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80030c4:	492b      	ldr	r1, [pc, #172]	; (8003174 <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
 80030c6:	688a      	ldr	r2, [r1, #8]
 80030c8:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80030cc:	608a      	str	r2, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80030d2:	6891      	ldr	r1, [r2, #8]
 80030d4:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80030d8:	6892      	ldr	r2, [r2, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030da:	430a      	orrs	r2, r1
 80030dc:	f012 0f01 	tst.w	r2, #1
 80030e0:	d116      	bne.n	8003110 <HAL_ADCEx_MultiModeConfigChannel+0x80>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80030e2:	4924      	ldr	r1, [pc, #144]	; (8003174 <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
 80030e4:	688a      	ldr	r2, [r1, #8]
 80030e6:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 80030ea:	f022 020f 	bic.w	r2, r2, #15
 80030ee:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030f0:	2000      	movs	r0, #0
 80030f2:	e004      	b.n	80030fe <HAL_ADCEx_MultiModeConfigChannel+0x6e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80030f6:	f042 0220 	orr.w	r2, r2, #32
 80030fa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80030fc:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8003104:	b01d      	add	sp, #116	; 0x74
 8003106:	f85d 4b04 	ldr.w	r4, [sp], #4
 800310a:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800310c:	2000      	movs	r0, #0
 800310e:	e7f6      	b.n	80030fe <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8003110:	2000      	movs	r0, #0
 8003112:	e7f4      	b.n	80030fe <HAL_ADCEx_MultiModeConfigChannel+0x6e>
  __HAL_LOCK(hadc);
 8003114:	2002      	movs	r0, #2
}
 8003116:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003118:	4a17      	ldr	r2, [pc, #92]	; (8003178 <HAL_ADCEx_MultiModeConfigChannel+0xe8>)
 800311a:	6890      	ldr	r0, [r2, #8]
 800311c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003120:	6892      	ldr	r2, [r2, #8]
 8003122:	4302      	orrs	r2, r0
 8003124:	f012 0f04 	tst.w	r2, #4
 8003128:	d1e4      	bne.n	80030f4 <HAL_ADCEx_MultiModeConfigChannel+0x64>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800312a:	680a      	ldr	r2, [r1, #0]
 800312c:	2a00      	cmp	r2, #0
 800312e:	d0c9      	beq.n	80030c4 <HAL_ADCEx_MultiModeConfigChannel+0x34>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003130:	4810      	ldr	r0, [pc, #64]	; (8003174 <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
 8003132:	6882      	ldr	r2, [r0, #8]
 8003134:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003138:	684c      	ldr	r4, [r1, #4]
 800313a:	4322      	orrs	r2, r4
 800313c:	f893 c038 	ldrb.w	ip, [r3, #56]	; 0x38
 8003140:	ea42 324c 	orr.w	r2, r2, ip, lsl #13
 8003144:	6082      	str	r2, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003146:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800314a:	6890      	ldr	r0, [r2, #8]
 800314c:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8003150:	6892      	ldr	r2, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003152:	4302      	orrs	r2, r0
 8003154:	f012 0f01 	tst.w	r2, #1
 8003158:	d1d8      	bne.n	800310c <HAL_ADCEx_MultiModeConfigChannel+0x7c>
        MODIFY_REG(tmpADC_Common->CCR,
 800315a:	4c06      	ldr	r4, [pc, #24]	; (8003174 <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
 800315c:	68a0      	ldr	r0, [r4, #8]
 800315e:	680a      	ldr	r2, [r1, #0]
 8003160:	6889      	ldr	r1, [r1, #8]
 8003162:	430a      	orrs	r2, r1
 8003164:	f420 6171 	bic.w	r1, r0, #3856	; 0xf10
 8003168:	f021 010f 	bic.w	r1, r1, #15
 800316c:	430a      	orrs	r2, r1
 800316e:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003170:	2000      	movs	r0, #0
 8003172:	e7c4      	b.n	80030fe <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8003174:	50000300 	.word	0x50000300
 8003178:	50000100 	.word	0x50000100

0800317c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800317c:	4907      	ldr	r1, [pc, #28]	; (800319c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800317e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003180:	0203      	lsls	r3, r0, #8
 8003182:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003186:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800318a:	0412      	lsls	r2, r2, #16
 800318c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800318e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003190:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003198:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800319a:	4770      	bx	lr
 800319c:	e000ed00 	.word	0xe000ed00

080031a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031a0:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031a2:	4b18      	ldr	r3, [pc, #96]	; (8003204 <HAL_NVIC_SetPriority+0x64>)
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031aa:	f1c3 0c07 	rsb	ip, r3, #7
 80031ae:	f1bc 0f04 	cmp.w	ip, #4
 80031b2:	bf28      	it	cs
 80031b4:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031b8:	f103 0e04 	add.w	lr, r3, #4
 80031bc:	f1be 0f06 	cmp.w	lr, #6
 80031c0:	bf8c      	ite	hi
 80031c2:	3b03      	subhi	r3, #3
 80031c4:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031c6:	f04f 3eff 	mov.w	lr, #4294967295
 80031ca:	fa0e fc0c 	lsl.w	ip, lr, ip
 80031ce:	ea21 010c 	bic.w	r1, r1, ip
 80031d2:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031d4:	fa0e fe03 	lsl.w	lr, lr, r3
 80031d8:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031dc:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 80031de:	2800      	cmp	r0, #0
 80031e0:	db09      	blt.n	80031f6 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031e2:	0109      	lsls	r1, r1, #4
 80031e4:	b2c9      	uxtb	r1, r1
 80031e6:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80031ea:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80031ee:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80031f2:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031f6:	f000 000f 	and.w	r0, r0, #15
 80031fa:	0109      	lsls	r1, r1, #4
 80031fc:	b2c9      	uxtb	r1, r1
 80031fe:	4b02      	ldr	r3, [pc, #8]	; (8003208 <HAL_NVIC_SetPriority+0x68>)
 8003200:	5419      	strb	r1, [r3, r0]
 8003202:	e7f6      	b.n	80031f2 <HAL_NVIC_SetPriority+0x52>
 8003204:	e000ed00 	.word	0xe000ed00
 8003208:	e000ed14 	.word	0xe000ed14

0800320c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800320c:	2800      	cmp	r0, #0
 800320e:	db07      	blt.n	8003220 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003210:	0941      	lsrs	r1, r0, #5
 8003212:	f000 001f 	and.w	r0, r0, #31
 8003216:	2301      	movs	r3, #1
 8003218:	4083      	lsls	r3, r0
 800321a:	4a02      	ldr	r2, [pc, #8]	; (8003224 <HAL_NVIC_EnableIRQ+0x18>)
 800321c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	e000e100 	.word	0xe000e100

08003228 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003228:	3801      	subs	r0, #1
 800322a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800322e:	d20b      	bcs.n	8003248 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003230:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003234:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003236:	4a05      	ldr	r2, [pc, #20]	; (800324c <HAL_SYSTICK_Config+0x24>)
 8003238:	21f0      	movs	r1, #240	; 0xf0
 800323a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800323e:	2000      	movs	r0, #0
 8003240:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003242:	2207      	movs	r2, #7
 8003244:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003246:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003248:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800324a:	4770      	bx	lr
 800324c:	e000ed00 	.word	0xe000ed00

08003250 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8003250:	b170      	cbz	r0, 8003270 <HAL_DAC_Init+0x20>
{
 8003252:	b510      	push	{r4, lr}
 8003254:	4604      	mov	r4, r0
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003256:	7903      	ldrb	r3, [r0, #4]
 8003258:	b133      	cbz	r3, 8003268 <HAL_DAC_Init+0x18>
    HAL_DAC_MspInit(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800325a:	2302      	movs	r3, #2
 800325c:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800325e:	2000      	movs	r0, #0
 8003260:	6120      	str	r0, [r4, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003262:	2301      	movs	r3, #1
 8003264:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
}
 8003266:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8003268:	7143      	strb	r3, [r0, #5]
    HAL_DAC_MspInit(hdac);
 800326a:	f7fe fba5 	bl	80019b8 <HAL_DAC_MspInit>
 800326e:	e7f4      	b.n	800325a <HAL_DAC_Init+0xa>
    return HAL_ERROR;
 8003270:	2001      	movs	r0, #1
}
 8003272:	4770      	bx	lr

08003274 <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003274:	7943      	ldrb	r3, [r0, #5]
 8003276:	2b01      	cmp	r3, #1
 8003278:	f000 80e8 	beq.w	800344c <HAL_DAC_ConfigChannel+0x1d8>
{
 800327c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003280:	4604      	mov	r4, r0
 8003282:	460e      	mov	r6, r1
 8003284:	4615      	mov	r5, r2
  __HAL_LOCK(hdac);
 8003286:	2301      	movs	r3, #1
 8003288:	7143      	strb	r3, [r0, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800328a:	2302      	movs	r3, #2
 800328c:	7103      	strb	r3, [r0, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800328e:	688b      	ldr	r3, [r1, #8]
 8003290:	2b04      	cmp	r3, #4
 8003292:	d071      	beq.n	8003378 <HAL_DAC_ConfigChannel+0x104>
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003294:	69f3      	ldr	r3, [r6, #28]
 8003296:	2b01      	cmp	r3, #1
 8003298:	f000 80b8 	beq.w	800340c <HAL_DAC_ConfigChannel+0x198>
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800329c:	6823      	ldr	r3, [r4, #0]
 800329e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80032a0:	f005 0510 	and.w	r5, r5, #16
 80032a4:	2207      	movs	r2, #7
 80032a6:	40aa      	lsls	r2, r5
 80032a8:	43d2      	mvns	r2, r2
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80032aa:	69b1      	ldr	r1, [r6, #24]
 80032ac:	2901      	cmp	r1, #1
 80032ae:	f000 80ba 	beq.w	8003426 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = 0x00000000UL;
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80032b2:	2902      	cmp	r1, #2
 80032b4:	f000 80b9 	beq.w	800342a <HAL_DAC_ConfigChannel+0x1b6>
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80032b8:	6971      	ldr	r1, [r6, #20]
 80032ba:	fab1 f181 	clz	r1, r1
 80032be:	0949      	lsrs	r1, r1, #5
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80032c0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80032c4:	40a8      	lsls	r0, r5
 80032c6:	ea23 0300 	bic.w	r3, r3, r0
 80032ca:	4013      	ands	r3, r2
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80032cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032d0:	40aa      	lsls	r2, r5
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80032d2:	ea23 0302 	bic.w	r3, r3, r2
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80032d6:	7932      	ldrb	r2, [r6, #4]
 80032d8:	2a01      	cmp	r2, #1
 80032da:	bf14      	ite	ne
 80032dc:	2200      	movne	r2, #0
 80032de:	2201      	moveq	r2, #1
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80032e0:	68b7      	ldr	r7, [r6, #8]
 80032e2:	6970      	ldr	r0, [r6, #20]
 80032e4:	4307      	orrs	r7, r0
 80032e6:	ea47 2702 	orr.w	r7, r7, r2, lsl #8
 80032ea:	7972      	ldrb	r2, [r6, #5]
 80032ec:	2a01      	cmp	r2, #1
 80032ee:	bf14      	ite	ne
 80032f0:	2200      	movne	r2, #0
 80032f2:	2201      	moveq	r2, #1
 80032f4:	ea47 2742 	orr.w	r7, r7, r2, lsl #9
 80032f8:	430f      	orrs	r7, r1
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80032fa:	f423 4840 	bic.w	r8, r3, #49152	; 0xc000
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80032fe:	6833      	ldr	r3, [r6, #0]
 8003300:	2b02      	cmp	r3, #2
 8003302:	f000 8094 	beq.w	800342e <HAL_DAC_ConfigChannel+0x1ba>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003306:	ea48 0803 	orr.w	r8, r8, r3
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800330a:	40af      	lsls	r7, r5
 800330c:	ea47 0708 	orr.w	r7, r7, r8
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003310:	6823      	ldr	r3, [r4, #0]
 8003312:	63df      	str	r7, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003314:	6821      	ldr	r1, [r4, #0]
 8003316:	680b      	ldr	r3, [r1, #0]
 8003318:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800331c:	40aa      	lsls	r2, r5
 800331e:	ea23 0302 	bic.w	r3, r3, r2
 8003322:	600b      	str	r3, [r1, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003324:	6821      	ldr	r1, [r4, #0]
 8003326:	680a      	ldr	r2, [r1, #0]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003328:	f640 73fe 	movw	r3, #4094	; 0xffe
 800332c:	40ab      	lsls	r3, r5
 800332e:	ea22 0203 	bic.w	r2, r2, r3
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003332:	68f3      	ldr	r3, [r6, #12]
 8003334:	40ab      	lsls	r3, r5
 8003336:	4313      	orrs	r3, r2
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003338:	600b      	str	r3, [r1, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800333a:	6821      	ldr	r1, [r4, #0]
 800333c:	680b      	ldr	r3, [r1, #0]
 800333e:	22c0      	movs	r2, #192	; 0xc0
 8003340:	40aa      	lsls	r2, r5
 8003342:	ea23 0302 	bic.w	r3, r3, r2
 8003346:	600b      	str	r3, [r1, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003348:	68f3      	ldr	r3, [r6, #12]
 800334a:	f3c3 0183 	ubfx	r1, r3, #2, #4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800334e:	6820      	ldr	r0, [r4, #0]
 8003350:	6e02      	ldr	r2, [r0, #96]	; 0x60
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003352:	6933      	ldr	r3, [r6, #16]
 8003354:	019b      	lsls	r3, r3, #6
 8003356:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800335a:	430b      	orrs	r3, r1
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800335c:	40ab      	lsls	r3, r5
 800335e:	f640 710f 	movw	r1, #3855	; 0xf0f
 8003362:	40a9      	lsls	r1, r5
 8003364:	ea22 0201 	bic.w	r2, r2, r1
 8003368:	4313      	orrs	r3, r2
 800336a:	6603      	str	r3, [r0, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800336c:	2301      	movs	r3, #1
 800336e:	7123      	strb	r3, [r4, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003370:	2000      	movs	r0, #0
 8003372:	7160      	strb	r0, [r4, #5]

  /* Return function status */
  return HAL_OK;
}
 8003374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tickstart = HAL_GetTick();
 8003378:	f7ff f9b0 	bl	80026dc <HAL_GetTick>
 800337c:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 800337e:	b17d      	cbz	r5, 80033a0 <HAL_DAC_ConfigChannel+0x12c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003380:	6823      	ldr	r3, [r4, #0]
 8003382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003384:	2b00      	cmp	r3, #0
 8003386:	da3a      	bge.n	80033fe <HAL_DAC_ConfigChannel+0x18a>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003388:	f7ff f9a8 	bl	80026dc <HAL_GetTick>
 800338c:	1bc0      	subs	r0, r0, r7
 800338e:	2801      	cmp	r0, #1
 8003390:	d9f6      	bls.n	8003380 <HAL_DAC_ConfigChannel+0x10c>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003392:	6923      	ldr	r3, [r4, #16]
 8003394:	f043 0308 	orr.w	r3, r3, #8
 8003398:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800339a:	2003      	movs	r0, #3
 800339c:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
 800339e:	e7e9      	b.n	8003374 <HAL_DAC_ConfigChannel+0x100>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80033a0:	6823      	ldr	r3, [r4, #0]
 80033a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80033a8:	d00b      	beq.n	80033c2 <HAL_DAC_ConfigChannel+0x14e>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80033aa:	f7ff f997 	bl	80026dc <HAL_GetTick>
 80033ae:	1bc0      	subs	r0, r0, r7
 80033b0:	2801      	cmp	r0, #1
 80033b2:	d9f5      	bls.n	80033a0 <HAL_DAC_ConfigChannel+0x12c>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80033b4:	6923      	ldr	r3, [r4, #16]
 80033b6:	f043 0308 	orr.w	r3, r3, #8
 80033ba:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80033bc:	2003      	movs	r0, #3
 80033be:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
 80033c0:	e7d8      	b.n	8003374 <HAL_DAC_ConfigChannel+0x100>
      HAL_Delay(1);
 80033c2:	2001      	movs	r0, #1
 80033c4:	f7ff f990 	bl	80026e8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80033c8:	6823      	ldr	r3, [r4, #0]
 80033ca:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80033cc:	641a      	str	r2, [r3, #64]	; 0x40
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80033ce:	6820      	ldr	r0, [r4, #0]
 80033d0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80033d2:	f005 0210 	and.w	r2, r5, #16
 80033d6:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80033da:	4091      	lsls	r1, r2
 80033dc:	ea23 0301 	bic.w	r3, r3, r1
 80033e0:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 80033e2:	4091      	lsls	r1, r2
 80033e4:	430b      	orrs	r3, r1
 80033e6:	6483      	str	r3, [r0, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80033e8:	6820      	ldr	r0, [r4, #0]
 80033ea:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80033ec:	21ff      	movs	r1, #255	; 0xff
 80033ee:	4091      	lsls	r1, r2
 80033f0:	ea23 0301 	bic.w	r3, r3, r1
 80033f4:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 80033f6:	4091      	lsls	r1, r2
 80033f8:	430b      	orrs	r3, r1
 80033fa:	64c3      	str	r3, [r0, #76]	; 0x4c
 80033fc:	e74a      	b.n	8003294 <HAL_DAC_ConfigChannel+0x20>
      HAL_Delay(1U);
 80033fe:	2001      	movs	r0, #1
 8003400:	f7ff f972 	bl	80026e8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003404:	6823      	ldr	r3, [r4, #0]
 8003406:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8003408:	645a      	str	r2, [r3, #68]	; 0x44
 800340a:	e7e0      	b.n	80033ce <HAL_DAC_ConfigChannel+0x15a>
    tmpreg1 = hdac->Instance->CCR;
 800340c:	6821      	ldr	r1, [r4, #0]
 800340e:	6b8a      	ldr	r2, [r1, #56]	; 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003410:	f005 0010 	and.w	r0, r5, #16
 8003414:	231f      	movs	r3, #31
 8003416:	4083      	lsls	r3, r0
 8003418:	ea22 0203 	bic.w	r2, r2, r3
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800341c:	6a33      	ldr	r3, [r6, #32]
 800341e:	4083      	lsls	r3, r0
 8003420:	4313      	orrs	r3, r2
    hdac->Instance->CCR = tmpreg1;
 8003422:	638b      	str	r3, [r1, #56]	; 0x38
 8003424:	e73a      	b.n	800329c <HAL_DAC_ConfigChannel+0x28>
    connectOnChip = 0x00000000UL;
 8003426:	2100      	movs	r1, #0
 8003428:	e74a      	b.n	80032c0 <HAL_DAC_ConfigChannel+0x4c>
    connectOnChip = DAC_MCR_MODE1_0;
 800342a:	2101      	movs	r1, #1
 800342c:	e748      	b.n	80032c0 <HAL_DAC_ConfigChannel+0x4c>
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800342e:	f001 fba1 	bl	8004b74 <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003432:	4b07      	ldr	r3, [pc, #28]	; (8003450 <HAL_DAC_ConfigChannel+0x1dc>)
 8003434:	4298      	cmp	r0, r3
 8003436:	d902      	bls.n	800343e <HAL_DAC_ConfigChannel+0x1ca>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003438:	f448 4800 	orr.w	r8, r8, #32768	; 0x8000
 800343c:	e765      	b.n	800330a <HAL_DAC_ConfigChannel+0x96>
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800343e:	4b05      	ldr	r3, [pc, #20]	; (8003454 <HAL_DAC_ConfigChannel+0x1e0>)
 8003440:	4298      	cmp	r0, r3
 8003442:	f67f af62 	bls.w	800330a <HAL_DAC_ConfigChannel+0x96>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003446:	f448 4880 	orr.w	r8, r8, #16384	; 0x4000
 800344a:	e75e      	b.n	800330a <HAL_DAC_ConfigChannel+0x96>
  __HAL_LOCK(hdac);
 800344c:	2002      	movs	r0, #2
}
 800344e:	4770      	bx	lr
 8003450:	09896800 	.word	0x09896800
 8003454:	04c4b400 	.word	0x04c4b400

08003458 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003458:	b430      	push	{r4, r5}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800345a:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 800345c:	6d05      	ldr	r5, [r0, #80]	; 0x50
 800345e:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003460:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8003462:	b114      	cbz	r4, 800346a <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003464:	6d84      	ldr	r4, [r0, #88]	; 0x58
 8003466:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8003468:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800346a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800346c:	f004 0c1f 	and.w	ip, r4, #31
 8003470:	2401      	movs	r4, #1
 8003472:	fa04 f40c 	lsl.w	r4, r4, ip
 8003476:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8003478:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800347a:	6804      	ldr	r4, [r0, #0]
 800347c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800347e:	6883      	ldr	r3, [r0, #8]
 8003480:	2b10      	cmp	r3, #16
 8003482:	d005      	beq.n	8003490 <DMA_SetConfig+0x38>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003484:	6803      	ldr	r3, [r0, #0]
 8003486:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003488:	6803      	ldr	r3, [r0, #0]
 800348a:	60da      	str	r2, [r3, #12]
  }
}
 800348c:	bc30      	pop	{r4, r5}
 800348e:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8003490:	6803      	ldr	r3, [r0, #0]
 8003492:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003494:	6803      	ldr	r3, [r0, #0]
 8003496:	60d9      	str	r1, [r3, #12]
 8003498:	e7f8      	b.n	800348c <DMA_SetConfig+0x34>
	...

0800349c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800349c:	b410      	push	{r4}
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800349e:	6803      	ldr	r3, [r0, #0]
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80034a0:	4c0d      	ldr	r4, [pc, #52]	; (80034d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>)
 80034a2:	4a0e      	ldr	r2, [pc, #56]	; (80034dc <DMA_CalcDMAMUXChannelBaseAndMask+0x40>)
 80034a4:	490e      	ldr	r1, [pc, #56]	; (80034e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 80034a6:	42a3      	cmp	r3, r4
 80034a8:	bf88      	it	hi
 80034aa:	460a      	movhi	r2, r1
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80034ac:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80034ae:	f021 0103 	bic.w	r1, r1, #3
 80034b2:	440a      	add	r2, r1
 80034b4:	6482      	str	r2, [r0, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80034b6:	4a0b      	ldr	r2, [pc, #44]	; (80034e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x48>)
 80034b8:	64c2      	str	r2, [r0, #76]	; 0x4c
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	3b08      	subs	r3, #8
 80034be:	4a0a      	ldr	r2, [pc, #40]	; (80034e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x4c>)
 80034c0:	fba2 2303 	umull	r2, r3, r2, r3
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80034c4:	f3c3 1304 	ubfx	r3, r3, #4, #5
 80034c8:	2201      	movs	r2, #1
 80034ca:	fa02 f303 	lsl.w	r3, r2, r3
 80034ce:	6503      	str	r3, [r0, #80]	; 0x50
}
 80034d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	40020407 	.word	0x40020407
 80034dc:	40020800 	.word	0x40020800
 80034e0:	40020820 	.word	0x40020820
 80034e4:	40020880 	.word	0x40020880
 80034e8:	cccccccd 	.word	0xcccccccd

080034ec <HAL_DMA_Init>:
  if (hdma == NULL)
 80034ec:	2800      	cmp	r0, #0
 80034ee:	d060      	beq.n	80035b2 <HAL_DMA_Init+0xc6>
{
 80034f0:	b510      	push	{r4, lr}
 80034f2:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80034f4:	6802      	ldr	r2, [r0, #0]
 80034f6:	4b30      	ldr	r3, [pc, #192]	; (80035b8 <HAL_DMA_Init+0xcc>)
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d83f      	bhi.n	800357c <HAL_DMA_Init+0x90>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80034fc:	4b2f      	ldr	r3, [pc, #188]	; (80035bc <HAL_DMA_Init+0xd0>)
 80034fe:	4413      	add	r3, r2
 8003500:	492f      	ldr	r1, [pc, #188]	; (80035c0 <HAL_DMA_Init+0xd4>)
 8003502:	fba1 1303 	umull	r1, r3, r1, r3
 8003506:	091b      	lsrs	r3, r3, #4
 8003508:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA1;
 800350a:	492e      	ldr	r1, [pc, #184]	; (80035c4 <HAL_DMA_Init+0xd8>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800350c:	6463      	str	r3, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800350e:	6421      	str	r1, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8003510:	2302      	movs	r3, #2
 8003512:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp = hdma->Instance->CCR;
 8003516:	6811      	ldr	r1, [r2, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003518:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 800351c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmp |=  hdma->Init.Direction        |
 8003520:	68a3      	ldr	r3, [r4, #8]
 8003522:	68e0      	ldr	r0, [r4, #12]
 8003524:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003526:	6920      	ldr	r0, [r4, #16]
 8003528:	4303      	orrs	r3, r0
 800352a:	6960      	ldr	r0, [r4, #20]
 800352c:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800352e:	69a0      	ldr	r0, [r4, #24]
 8003530:	4303      	orrs	r3, r0
 8003532:	69e0      	ldr	r0, [r4, #28]
 8003534:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8003536:	6a20      	ldr	r0, [r4, #32]
 8003538:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 800353a:	430b      	orrs	r3, r1
  hdma->Instance->CCR = tmp;
 800353c:	6013      	str	r3, [r2, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800353e:	4620      	mov	r0, r4
 8003540:	f7ff ffac 	bl	800349c <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003544:	68a3      	ldr	r3, [r4, #8]
 8003546:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800354a:	bf04      	itt	eq
 800354c:	2300      	moveq	r3, #0
 800354e:	6063      	streq	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003550:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003552:	7922      	ldrb	r2, [r4, #4]
 8003554:	601a      	str	r2, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003556:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003558:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800355a:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800355c:	6863      	ldr	r3, [r4, #4]
 800355e:	1e5a      	subs	r2, r3, #1
 8003560:	2a03      	cmp	r2, #3
 8003562:	d914      	bls.n	800358e <HAL_DMA_Init+0xa2>
    hdma->DMAmuxRequestGen = 0U;
 8003564:	2300      	movs	r3, #0
 8003566:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003568:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800356a:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800356c:	2000      	movs	r0, #0
 800356e:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 8003570:	2301      	movs	r3, #1
 8003572:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  hdma->Lock = HAL_UNLOCKED;
 8003576:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 800357a:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800357c:	4b12      	ldr	r3, [pc, #72]	; (80035c8 <HAL_DMA_Init+0xdc>)
 800357e:	4413      	add	r3, r2
 8003580:	490f      	ldr	r1, [pc, #60]	; (80035c0 <HAL_DMA_Init+0xd4>)
 8003582:	fba1 1303 	umull	r1, r3, r1, r3
 8003586:	091b      	lsrs	r3, r3, #4
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	4910      	ldr	r1, [pc, #64]	; (80035cc <HAL_DMA_Init+0xe0>)
 800358c:	e7be      	b.n	800350c <HAL_DMA_Init+0x20>
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800358e:	b2db      	uxtb	r3, r3

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003590:	4a0f      	ldr	r2, [pc, #60]	; (80035d0 <HAL_DMA_Init+0xe4>)
 8003592:	441a      	add	r2, r3
 8003594:	0092      	lsls	r2, r2, #2
 8003596:	6562      	str	r2, [r4, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003598:	490e      	ldr	r1, [pc, #56]	; (80035d4 <HAL_DMA_Init+0xe8>)
 800359a:	65a1      	str	r1, [r4, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800359c:	3b01      	subs	r3, #1
 800359e:	2101      	movs	r1, #1
 80035a0:	fa01 f303 	lsl.w	r3, r1, r3
 80035a4:	65e3      	str	r3, [r4, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80035a6:	2300      	movs	r3, #0
 80035a8:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80035ac:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80035ae:	605a      	str	r2, [r3, #4]
 80035b0:	e7dc      	b.n	800356c <HAL_DMA_Init+0x80>
    return HAL_ERROR;
 80035b2:	2001      	movs	r0, #1
}
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	40020407 	.word	0x40020407
 80035bc:	bffdfff8 	.word	0xbffdfff8
 80035c0:	cccccccd 	.word	0xcccccccd
 80035c4:	40020000 	.word	0x40020000
 80035c8:	bffdfbf8 	.word	0xbffdfbf8
 80035cc:	40020400 	.word	0x40020400
 80035d0:	1000823f 	.word	0x1000823f
 80035d4:	40020940 	.word	0x40020940

080035d8 <HAL_DMA_Start_IT>:
{
 80035d8:	b538      	push	{r3, r4, r5, lr}
 80035da:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 80035dc:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 80035e0:	2801      	cmp	r0, #1
 80035e2:	d041      	beq.n	8003668 <HAL_DMA_Start_IT+0x90>
 80035e4:	2001      	movs	r0, #1
 80035e6:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 80035ea:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 80035ee:	b2c0      	uxtb	r0, r0
 80035f0:	2801      	cmp	r0, #1
 80035f2:	d004      	beq.n	80035fe <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);
 80035f4:	2300      	movs	r3, #0
 80035f6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_BUSY;
 80035fa:	2002      	movs	r0, #2
}
 80035fc:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80035fe:	2002      	movs	r0, #2
 8003600:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003604:	2000      	movs	r0, #0
 8003606:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8003608:	6825      	ldr	r5, [r4, #0]
 800360a:	6828      	ldr	r0, [r5, #0]
 800360c:	f020 0001 	bic.w	r0, r0, #1
 8003610:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003612:	4620      	mov	r0, r4
 8003614:	f7ff ff20 	bl	8003458 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8003618:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800361a:	b1d3      	cbz	r3, 8003652 <HAL_DMA_Start_IT+0x7a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800361c:	6822      	ldr	r2, [r4, #0]
 800361e:	6813      	ldr	r3, [r2, #0]
 8003620:	f043 030e 	orr.w	r3, r3, #14
 8003624:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003626:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800362e:	d003      	beq.n	8003638 <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003636:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8003638:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800363a:	b11b      	cbz	r3, 8003644 <HAL_DMA_Start_IT+0x6c>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003642:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8003644:	6822      	ldr	r2, [r4, #0]
 8003646:	6813      	ldr	r3, [r2, #0]
 8003648:	f043 0301 	orr.w	r3, r3, #1
 800364c:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800364e:	2000      	movs	r0, #0
 8003650:	e7d4      	b.n	80035fc <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003652:	6822      	ldr	r2, [r4, #0]
 8003654:	6813      	ldr	r3, [r2, #0]
 8003656:	f023 0304 	bic.w	r3, r3, #4
 800365a:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800365c:	6822      	ldr	r2, [r4, #0]
 800365e:	6813      	ldr	r3, [r2, #0]
 8003660:	f043 030a 	orr.w	r3, r3, #10
 8003664:	6013      	str	r3, [r2, #0]
 8003666:	e7de      	b.n	8003626 <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 8003668:	2002      	movs	r0, #2
 800366a:	e7c7      	b.n	80035fc <HAL_DMA_Start_IT+0x24>

0800366c <HAL_DMA_Abort>:
{
 800366c:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800366e:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8003672:	b2d2      	uxtb	r2, r2
 8003674:	2a02      	cmp	r2, #2
 8003676:	d009      	beq.n	800368c <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003678:	2204      	movs	r2, #4
 800367a:	63c2      	str	r2, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 800367c:	2001      	movs	r0, #1
  hdma->State = HAL_DMA_STATE_READY;
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 800368a:	4770      	bx	lr
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800368c:	6801      	ldr	r1, [r0, #0]
 800368e:	680a      	ldr	r2, [r1, #0]
 8003690:	f022 020e 	bic.w	r2, r2, #14
 8003694:	600a      	str	r2, [r1, #0]
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003696:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003698:	680a      	ldr	r2, [r1, #0]
 800369a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800369e:	600a      	str	r2, [r1, #0]
     __HAL_DMA_DISABLE(hdma);
 80036a0:	6801      	ldr	r1, [r0, #0]
 80036a2:	680a      	ldr	r2, [r1, #0]
 80036a4:	f022 0201 	bic.w	r2, r2, #1
 80036a8:	600a      	str	r2, [r1, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80036aa:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80036ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036ae:	f002 011f 	and.w	r1, r2, #31
 80036b2:	2201      	movs	r2, #1
 80036b4:	408a      	lsls	r2, r1
 80036b6:	6042      	str	r2, [r0, #4]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036ba:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80036bc:	6051      	str	r1, [r2, #4]
     if (hdma->DMAmuxRequestGen != 0U)
 80036be:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036c0:	b142      	cbz	r2, 80036d4 <HAL_DMA_Abort+0x68>
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80036c2:	6811      	ldr	r1, [r2, #0]
 80036c4:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80036c8:	6011      	str	r1, [r2, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036ca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80036cc:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80036ce:	6051      	str	r1, [r2, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036d0:	2000      	movs	r0, #0
 80036d2:	e7d4      	b.n	800367e <HAL_DMA_Abort+0x12>
 80036d4:	2000      	movs	r0, #0
 80036d6:	e7d2      	b.n	800367e <HAL_DMA_Abort+0x12>

080036d8 <HAL_DMA_Abort_IT>:
{
 80036d8:	b508      	push	{r3, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 80036da:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d009      	beq.n	80036f8 <HAL_DMA_Abort_IT+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036e4:	2304      	movs	r3, #4
 80036e6:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80036e8:	2301      	movs	r3, #1
 80036ea:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80036ee:	2200      	movs	r2, #0
 80036f0:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    status = HAL_ERROR;
 80036f4:	4618      	mov	r0, r3
}
 80036f6:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036f8:	6802      	ldr	r2, [r0, #0]
 80036fa:	6813      	ldr	r3, [r2, #0]
 80036fc:	f023 030e 	bic.w	r3, r3, #14
 8003700:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003702:	6802      	ldr	r2, [r0, #0]
 8003704:	6813      	ldr	r3, [r2, #0]
 8003706:	f023 0301 	bic.w	r3, r3, #1
 800370a:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800370c:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800370e:	6813      	ldr	r3, [r2, #0]
 8003710:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003714:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003716:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003718:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800371a:	f003 021f 	and.w	r2, r3, #31
 800371e:	2301      	movs	r3, #1
 8003720:	4093      	lsls	r3, r2
 8003722:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003724:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003726:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8003728:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 800372a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800372c:	b133      	cbz	r3, 800373c <HAL_DMA_Abort_IT+0x64>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003734:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003736:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003738:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800373a:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800373c:	2301      	movs	r3, #1
 800373e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003742:	2300      	movs	r3, #0
 8003744:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8003748:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800374a:	b113      	cbz	r3, 8003752 <HAL_DMA_Abort_IT+0x7a>
      hdma->XferAbortCallback(hdma);
 800374c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800374e:	2000      	movs	r0, #0
 8003750:	e7d1      	b.n	80036f6 <HAL_DMA_Abort_IT+0x1e>
 8003752:	2000      	movs	r0, #0
 8003754:	e7cf      	b.n	80036f6 <HAL_DMA_Abort_IT+0x1e>

08003756 <HAL_DMA_IRQHandler>:
{
 8003756:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003758:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800375a:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800375c:	6804      	ldr	r4, [r0, #0]
 800375e:	6825      	ldr	r5, [r4, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003760:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003762:	f003 031f 	and.w	r3, r3, #31
 8003766:	2204      	movs	r2, #4
 8003768:	409a      	lsls	r2, r3
 800376a:	420a      	tst	r2, r1
 800376c:	d015      	beq.n	800379a <HAL_DMA_IRQHandler+0x44>
 800376e:	f015 0f04 	tst.w	r5, #4
 8003772:	d012      	beq.n	800379a <HAL_DMA_IRQHandler+0x44>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003774:	6823      	ldr	r3, [r4, #0]
 8003776:	f013 0f20 	tst.w	r3, #32
 800377a:	d103      	bne.n	8003784 <HAL_DMA_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800377c:	6823      	ldr	r3, [r4, #0]
 800377e:	f023 0304 	bic.w	r3, r3, #4
 8003782:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003784:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003786:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003788:	f003 021f 	and.w	r2, r3, #31
 800378c:	2304      	movs	r3, #4
 800378e:	4093      	lsls	r3, r2
 8003790:	604b      	str	r3, [r1, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8003792:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003794:	b103      	cbz	r3, 8003798 <HAL_DMA_IRQHandler+0x42>
      hdma->XferHalfCpltCallback(hdma);
 8003796:	4798      	blx	r3
}
 8003798:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800379a:	2202      	movs	r2, #2
 800379c:	409a      	lsls	r2, r3
 800379e:	420a      	tst	r2, r1
 80037a0:	d01c      	beq.n	80037dc <HAL_DMA_IRQHandler+0x86>
           && (0U != (source_it & DMA_IT_TC)))
 80037a2:	f015 0f02 	tst.w	r5, #2
 80037a6:	d019      	beq.n	80037dc <HAL_DMA_IRQHandler+0x86>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037a8:	6823      	ldr	r3, [r4, #0]
 80037aa:	f013 0f20 	tst.w	r3, #32
 80037ae:	d106      	bne.n	80037be <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80037b0:	6823      	ldr	r3, [r4, #0]
 80037b2:	f023 030a 	bic.w	r3, r3, #10
 80037b6:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80037b8:	2301      	movs	r3, #1
 80037ba:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80037be:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80037c0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80037c2:	f003 021f 	and.w	r2, r3, #31
 80037c6:	2302      	movs	r3, #2
 80037c8:	4093      	lsls	r3, r2
 80037ca:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 80037cc:	2300      	movs	r3, #0
 80037ce:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 80037d2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d0df      	beq.n	8003798 <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 80037d8:	4798      	blx	r3
 80037da:	e7dd      	b.n	8003798 <HAL_DMA_IRQHandler+0x42>
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80037dc:	2208      	movs	r2, #8
 80037de:	fa02 f303 	lsl.w	r3, r2, r3
 80037e2:	420b      	tst	r3, r1
 80037e4:	d0d8      	beq.n	8003798 <HAL_DMA_IRQHandler+0x42>
           && (0U != (source_it & DMA_IT_TE)))
 80037e6:	f015 0f08 	tst.w	r5, #8
 80037ea:	d0d5      	beq.n	8003798 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037ec:	6823      	ldr	r3, [r4, #0]
 80037ee:	f023 030e 	bic.w	r3, r3, #14
 80037f2:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80037f4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80037f6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80037f8:	f003 031f 	and.w	r3, r3, #31
 80037fc:	2201      	movs	r2, #1
 80037fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003802:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003804:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8003806:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800380a:	2300      	movs	r3, #0
 800380c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8003810:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003812:	2b00      	cmp	r3, #0
 8003814:	d0c0      	beq.n	8003798 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8003816:	4798      	blx	r3
  return;
 8003818:	e7be      	b.n	8003798 <HAL_DMA_IRQHandler+0x42>
	...

0800381c <HAL_FDCAN_Init>:
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800381c:	2800      	cmp	r0, #0
 800381e:	f000 80f9 	beq.w	8003a14 <HAL_FDCAN_Init+0x1f8>
{
 8003822:	b538      	push	{r3, r4, r5, lr}
 8003824:	4604      	mov	r4, r0

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003826:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 800382a:	b1d3      	cbz	r3, 8003862 <HAL_FDCAN_Init+0x46>
    HAL_FDCAN_MspInit(hfdcan);
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800382c:	6822      	ldr	r2, [r4, #0]
 800382e:	6993      	ldr	r3, [r2, #24]
 8003830:	f023 0310 	bic.w	r3, r3, #16
 8003834:	6193      	str	r3, [r2, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003836:	f7fe ff51 	bl	80026dc <HAL_GetTick>
 800383a:	4605      	mov	r5, r0

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800383c:	6823      	ldr	r3, [r4, #0]
 800383e:	699a      	ldr	r2, [r3, #24]
 8003840:	f012 0f08 	tst.w	r2, #8
 8003844:	d012      	beq.n	800386c <HAL_FDCAN_Init+0x50>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003846:	f7fe ff49 	bl	80026dc <HAL_GetTick>
 800384a:	1b40      	subs	r0, r0, r5
 800384c:	280a      	cmp	r0, #10
 800384e:	d9f5      	bls.n	800383c <HAL_FDCAN_Init+0x20>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003850:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003852:	f043 0301 	orr.w	r3, r3, #1
 8003856:	6623      	str	r3, [r4, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003858:	2303      	movs	r3, #3
 800385a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c

      return HAL_ERROR;
 800385e:	2001      	movs	r0, #1
  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8003860:	bd38      	pop	{r3, r4, r5, pc}
    hfdcan->Lock = HAL_UNLOCKED;
 8003862:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    HAL_FDCAN_MspInit(hfdcan);
 8003866:	f7fe f95d 	bl	8001b24 <HAL_FDCAN_MspInit>
 800386a:	e7df      	b.n	800382c <HAL_FDCAN_Init+0x10>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800386c:	699a      	ldr	r2, [r3, #24]
 800386e:	f042 0201 	orr.w	r2, r2, #1
 8003872:	619a      	str	r2, [r3, #24]
  tickstart = HAL_GetTick();
 8003874:	f7fe ff32 	bl	80026dc <HAL_GetTick>
 8003878:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800387a:	6823      	ldr	r3, [r4, #0]
 800387c:	699a      	ldr	r2, [r3, #24]
 800387e:	f012 0f01 	tst.w	r2, #1
 8003882:	d10d      	bne.n	80038a0 <HAL_FDCAN_Init+0x84>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003884:	f7fe ff2a 	bl	80026dc <HAL_GetTick>
 8003888:	1b40      	subs	r0, r0, r5
 800388a:	280a      	cmp	r0, #10
 800388c:	d9f5      	bls.n	800387a <HAL_FDCAN_Init+0x5e>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800388e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003890:	f043 0301 	orr.w	r3, r3, #1
 8003894:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003896:	2303      	movs	r3, #3
 8003898:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 800389c:	2001      	movs	r0, #1
 800389e:	e7df      	b.n	8003860 <HAL_FDCAN_Init+0x44>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80038a0:	699a      	ldr	r2, [r3, #24]
 80038a2:	f042 0202 	orr.w	r2, r2, #2
 80038a6:	619a      	str	r2, [r3, #24]
  if (hfdcan->Instance == FDCAN1)
 80038a8:	6822      	ldr	r2, [r4, #0]
 80038aa:	4b5b      	ldr	r3, [pc, #364]	; (8003a18 <HAL_FDCAN_Init+0x1fc>)
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d047      	beq.n	8003940 <HAL_FDCAN_Init+0x124>
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80038b0:	7c23      	ldrb	r3, [r4, #16]
 80038b2:	2b01      	cmp	r3, #1
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80038b4:	6822      	ldr	r2, [r4, #0]
 80038b6:	6993      	ldr	r3, [r2, #24]
 80038b8:	bf0c      	ite	eq
 80038ba:	f023 0340 	biceq.w	r3, r3, #64	; 0x40
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80038be:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 80038c2:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.TransmitPause == ENABLE)
 80038c4:	7c63      	ldrb	r3, [r4, #17]
 80038c6:	2b01      	cmp	r3, #1
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80038c8:	6822      	ldr	r2, [r4, #0]
 80038ca:	6993      	ldr	r3, [r2, #24]
 80038cc:	bf0c      	ite	eq
 80038ce:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80038d2:	f423 4380 	bicne.w	r3, r3, #16384	; 0x4000
 80038d6:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.ProtocolException == ENABLE)
 80038d8:	7ca3      	ldrb	r3, [r4, #18]
 80038da:	2b01      	cmp	r3, #1
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80038dc:	6822      	ldr	r2, [r4, #0]
 80038de:	6993      	ldr	r3, [r2, #24]
 80038e0:	bf0c      	ite	eq
 80038e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80038e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80038ea:	6193      	str	r3, [r2, #24]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80038ec:	6822      	ldr	r2, [r4, #0]
 80038ee:	6993      	ldr	r3, [r2, #24]
 80038f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038f4:	68a1      	ldr	r1, [r4, #8]
 80038f6:	430b      	orrs	r3, r1
 80038f8:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80038fa:	6822      	ldr	r2, [r4, #0]
 80038fc:	6993      	ldr	r3, [r2, #24]
 80038fe:	f023 03a4 	bic.w	r3, r3, #164	; 0xa4
 8003902:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003904:	6822      	ldr	r2, [r4, #0]
 8003906:	6913      	ldr	r3, [r2, #16]
 8003908:	f023 0310 	bic.w	r3, r3, #16
 800390c:	6113      	str	r3, [r2, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800390e:	68e3      	ldr	r3, [r4, #12]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d01b      	beq.n	800394c <HAL_FDCAN_Init+0x130>
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003914:	b1fb      	cbz	r3, 8003956 <HAL_FDCAN_Init+0x13a>
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003916:	2b02      	cmp	r3, #2
 8003918:	d065      	beq.n	80039e6 <HAL_FDCAN_Init+0x1ca>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800391a:	6822      	ldr	r2, [r4, #0]
 800391c:	6993      	ldr	r3, [r2, #24]
 800391e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003922:	6193      	str	r3, [r2, #24]
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003924:	6822      	ldr	r2, [r4, #0]
 8003926:	6913      	ldr	r3, [r2, #16]
 8003928:	f043 0310 	orr.w	r3, r3, #16
 800392c:	6113      	str	r3, [r2, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800392e:	68e3      	ldr	r3, [r4, #12]
 8003930:	2b03      	cmp	r3, #3
 8003932:	d110      	bne.n	8003956 <HAL_FDCAN_Init+0x13a>
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003934:	6822      	ldr	r2, [r4, #0]
 8003936:	6993      	ldr	r3, [r2, #24]
 8003938:	f043 0320 	orr.w	r3, r3, #32
 800393c:	6193      	str	r3, [r2, #24]
 800393e:	e00a      	b.n	8003956 <HAL_FDCAN_Init+0x13a>
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003940:	6862      	ldr	r2, [r4, #4]
 8003942:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8003946:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 800394a:	e7b1      	b.n	80038b0 <HAL_FDCAN_Init+0x94>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800394c:	6822      	ldr	r2, [r4, #0]
 800394e:	6993      	ldr	r3, [r2, #24]
 8003950:	f043 0304 	orr.w	r3, r3, #4
 8003954:	6193      	str	r3, [r2, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003956:	6822      	ldr	r2, [r4, #0]
 8003958:	69a3      	ldr	r3, [r4, #24]
 800395a:	1e59      	subs	r1, r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800395c:	69e3      	ldr	r3, [r4, #28]
 800395e:	3b01      	subs	r3, #1
 8003960:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003962:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003966:	6a21      	ldr	r1, [r4, #32]
 8003968:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800396a:	430b      	orrs	r3, r1
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800396c:	6961      	ldr	r1, [r4, #20]
 800396e:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003970:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003974:	61d3      	str	r3, [r2, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003976:	68a3      	ldr	r3, [r4, #8]
 8003978:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800397c:	d039      	beq.n	80039f2 <HAL_FDCAN_Init+0x1d6>
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800397e:	6822      	ldr	r2, [r4, #0]
 8003980:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8003984:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003986:	430b      	orrs	r3, r1
 8003988:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800398c:	4b23      	ldr	r3, [pc, #140]	; (8003a1c <HAL_FDCAN_Init+0x200>)
 800398e:	6423      	str	r3, [r4, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003990:	6821      	ldr	r1, [r4, #0]
 8003992:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
 8003996:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003998:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800399c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80039a0:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80039a4:	4a1e      	ldr	r2, [pc, #120]	; (8003a20 <HAL_FDCAN_Init+0x204>)
 80039a6:	6462      	str	r2, [r4, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80039a8:	6821      	ldr	r1, [r4, #0]
 80039aa:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
 80039ae:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80039b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039b4:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 80039b8:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80039bc:	4a19      	ldr	r2, [pc, #100]	; (8003a24 <HAL_FDCAN_Init+0x208>)
 80039be:	64a2      	str	r2, [r4, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80039c0:	32d8      	adds	r2, #216	; 0xd8
 80039c2:	64e2      	str	r2, [r4, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80039c4:	32d8      	adds	r2, #216	; 0xd8
 80039c6:	6522      	str	r2, [r4, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80039c8:	3218      	adds	r2, #24
 80039ca:	6562      	str	r2, [r4, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80039cc:	2100      	movs	r1, #0
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80039ce:	32d8      	adds	r2, #216	; 0xd8
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80039d0:	f843 1b04 	str.w	r1, [r3], #4
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d1fb      	bne.n	80039d0 <HAL_FDCAN_Init+0x1b4>
  hfdcan->LatestTxFifoQRequest = 0U;
 80039d8:	2000      	movs	r0, #0
 80039da:	65a0      	str	r0, [r4, #88]	; 0x58
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80039dc:	6620      	str	r0, [r4, #96]	; 0x60
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80039de:	2301      	movs	r3, #1
 80039e0:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return HAL_OK;
 80039e4:	e73c      	b.n	8003860 <HAL_FDCAN_Init+0x44>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80039e6:	6822      	ldr	r2, [r4, #0]
 80039e8:	6993      	ldr	r3, [r2, #24]
 80039ea:	f043 0320 	orr.w	r3, r3, #32
 80039ee:	6193      	str	r3, [r2, #24]
 80039f0:	e7b1      	b.n	8003956 <HAL_FDCAN_Init+0x13a>
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80039f2:	6822      	ldr	r2, [r4, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80039f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80039f6:	1e59      	subs	r1, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80039f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80039fa:	3b01      	subs	r3, #1
 80039fc:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80039fe:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003a02:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003a04:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003a06:	430b      	orrs	r3, r1
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003a08:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003a0a:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003a0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003a10:	60d3      	str	r3, [r2, #12]
 8003a12:	e7b4      	b.n	800397e <HAL_FDCAN_Init+0x162>
    return HAL_ERROR;
 8003a14:	2001      	movs	r0, #1
}
 8003a16:	4770      	bx	lr
 8003a18:	40006400 	.word	0x40006400
 8003a1c:	4000a400 	.word	0x4000a400
 8003a20:	4000a470 	.word	0x4000a470
 8003a24:	4000a4b0 	.word	0x4000a4b0

08003a28 <HAL_FDCAN_GetRxMessage>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003a28:	f890 c05c 	ldrb.w	ip, [r0, #92]	; 0x5c
 8003a2c:	fa5f fc8c 	uxtb.w	ip, ip
  if (state == HAL_FDCAN_STATE_BUSY)
 8003a30:	f1bc 0f02 	cmp.w	ip, #2
 8003a34:	d177      	bne.n	8003b26 <HAL_FDCAN_GetRxMessage+0xfe>
{
 8003a36:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003a38:	2940      	cmp	r1, #64	; 0x40
 8003a3a:	d00b      	beq.n	8003a54 <HAL_FDCAN_GetRxMessage+0x2c>
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8003a3c:	6804      	ldr	r4, [r0, #0]
 8003a3e:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
 8003a42:	f015 0f0f 	tst.w	r5, #15
 8003a46:	d11b      	bne.n	8003a80 <HAL_FDCAN_GetRxMessage+0x58>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003a48:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8003a4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a4e:	6603      	str	r3, [r0, #96]	; 0x60
        return HAL_ERROR;
 8003a50:	2001      	movs	r0, #1
 8003a52:	e063      	b.n	8003b1c <HAL_FDCAN_GetRxMessage+0xf4>
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8003a54:	6804      	ldr	r4, [r0, #0]
 8003a56:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 8003a5a:	f015 0f0f 	tst.w	r5, #15
 8003a5e:	d105      	bne.n	8003a6c <HAL_FDCAN_GetRxMessage+0x44>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003a60:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8003a62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a66:	6603      	str	r3, [r0, #96]	; 0x60
        return HAL_ERROR;
 8003a68:	2001      	movs	r0, #1
 8003a6a:	e057      	b.n	8003b1c <HAL_FDCAN_GetRxMessage+0xf4>
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8003a6c:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
 8003a70:	f3c7 2701 	ubfx	r7, r7, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8003a74:	eb07 04c7 	add.w	r4, r7, r7, lsl #3
 8003a78:	6c86      	ldr	r6, [r0, #72]	; 0x48
 8003a7a:	eb06 06c4 	add.w	r6, r6, r4, lsl #3
 8003a7e:	e008      	b.n	8003a92 <HAL_FDCAN_GetRxMessage+0x6a>
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8003a80:	f8d4 7098 	ldr.w	r7, [r4, #152]	; 0x98
 8003a84:	f3c7 2701 	ubfx	r7, r7, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8003a88:	eb07 04c7 	add.w	r4, r7, r7, lsl #3
 8003a8c:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
 8003a8e:	eb06 06c4 	add.w	r6, r6, r4, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8003a92:	6834      	ldr	r4, [r6, #0]
 8003a94:	f004 4480 	and.w	r4, r4, #1073741824	; 0x40000000
 8003a98:	6054      	str	r4, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003a9a:	2c00      	cmp	r4, #0
 8003a9c:	d13f      	bne.n	8003b1e <HAL_FDCAN_GetRxMessage+0xf6>
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8003a9e:	6834      	ldr	r4, [r6, #0]
 8003aa0:	f3c4 448a 	ubfx	r4, r4, #18, #11
 8003aa4:	6014      	str	r4, [r2, #0]
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8003aa6:	6834      	ldr	r4, [r6, #0]
 8003aa8:	f004 5400 	and.w	r4, r4, #536870912	; 0x20000000
 8003aac:	6094      	str	r4, [r2, #8]
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003aae:	6834      	ldr	r4, [r6, #0]
 8003ab0:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
 8003ab4:	6114      	str	r4, [r2, #16]
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003ab6:	88b4      	ldrh	r4, [r6, #4]
 8003ab8:	61d4      	str	r4, [r2, #28]
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8003aba:	6874      	ldr	r4, [r6, #4]
 8003abc:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 8003ac0:	60d4      	str	r4, [r2, #12]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8003ac2:	6875      	ldr	r5, [r6, #4]
 8003ac4:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
 8003ac8:	6155      	str	r5, [r2, #20]
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8003aca:	6875      	ldr	r5, [r6, #4]
 8003acc:	f405 1500 	and.w	r5, r5, #2097152	; 0x200000
 8003ad0:	6195      	str	r5, [r2, #24]
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8003ad2:	79f5      	ldrb	r5, [r6, #7]
 8003ad4:	f005 057f 	and.w	r5, r5, #127	; 0x7f
 8003ad8:	6215      	str	r5, [r2, #32]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8003ada:	6875      	ldr	r5, [r6, #4]
 8003adc:	0fed      	lsrs	r5, r5, #31
 8003ade:	6255      	str	r5, [r2, #36]	; 0x24
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8003ae0:	0c24      	lsrs	r4, r4, #16
 8003ae2:	4d14      	ldr	r5, [pc, #80]	; (8003b34 <HAL_FDCAN_GetRxMessage+0x10c>)
 8003ae4:	5d2c      	ldrb	r4, [r5, r4]
 8003ae6:	b18c      	cbz	r4, 8003b0c <HAL_FDCAN_GetRxMessage+0xe4>
 8003ae8:	1df5      	adds	r5, r6, #7
 8003aea:	3b01      	subs	r3, #1
 8003aec:	4c11      	ldr	r4, [pc, #68]	; (8003b34 <HAL_FDCAN_GetRxMessage+0x10c>)
      pRxData[ByteCounter] = pData[ByteCounter];
 8003aee:	46ac      	mov	ip, r5
 8003af0:	f815 ef01 	ldrb.w	lr, [r5, #1]!
 8003af4:	f803 ef01 	strb.w	lr, [r3, #1]!
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8003af8:	f8b2 e00e 	ldrh.w	lr, [r2, #14]
 8003afc:	f814 e00e 	ldrb.w	lr, [r4, lr]
 8003b00:	f1ac 0c06 	sub.w	ip, ip, #6
 8003b04:	ebac 0c06 	sub.w	ip, ip, r6
 8003b08:	45e6      	cmp	lr, ip
 8003b0a:	d8f0      	bhi.n	8003aee <HAL_FDCAN_GetRxMessage+0xc6>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003b0c:	2940      	cmp	r1, #64	; 0x40
      hfdcan->Instance->RXF0A = GetIndex;
 8003b0e:	6803      	ldr	r3, [r0, #0]
 8003b10:	bf0c      	ite	eq
 8003b12:	f8c3 7094 	streq.w	r7, [r3, #148]	; 0x94
      hfdcan->Instance->RXF1A = GetIndex;
 8003b16:	f8c3 709c 	strne.w	r7, [r3, #156]	; 0x9c
    return HAL_OK;
 8003b1a:	2000      	movs	r0, #0
}
 8003b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003b1e:	6834      	ldr	r4, [r6, #0]
 8003b20:	f024 4460 	bic.w	r4, r4, #3758096384	; 0xe0000000
 8003b24:	e7be      	b.n	8003aa4 <HAL_FDCAN_GetRxMessage+0x7c>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003b26:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8003b28:	f043 0308 	orr.w	r3, r3, #8
 8003b2c:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8003b2e:	2001      	movs	r0, #1
}
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	08009c78 	.word	0x08009c78

08003b38 <HAL_FDCAN_TxEventFifoCallback>:
}
 8003b38:	4770      	bx	lr

08003b3a <HAL_FDCAN_RxFifo1Callback>:
}
 8003b3a:	4770      	bx	lr

08003b3c <HAL_FDCAN_TxFifoEmptyCallback>:
}
 8003b3c:	4770      	bx	lr

08003b3e <HAL_FDCAN_TxBufferCompleteCallback>:
}
 8003b3e:	4770      	bx	lr

08003b40 <HAL_FDCAN_TxBufferAbortCallback>:
}
 8003b40:	4770      	bx	lr

08003b42 <HAL_FDCAN_TimestampWraparoundCallback>:
}
 8003b42:	4770      	bx	lr

08003b44 <HAL_FDCAN_TimeoutOccurredCallback>:
}
 8003b44:	4770      	bx	lr

08003b46 <HAL_FDCAN_HighPriorityMessageCallback>:
}
 8003b46:	4770      	bx	lr

08003b48 <HAL_FDCAN_ErrorCallback>:
}
 8003b48:	4770      	bx	lr

08003b4a <HAL_FDCAN_ErrorStatusCallback>:
}
 8003b4a:	4770      	bx	lr

08003b4c <HAL_FDCAN_IRQHandler>:
{
 8003b4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b50:	4604      	mov	r4, r0
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003b52:	6803      	ldr	r3, [r0, #0]
 8003b54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003b56:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003b58:	ea02 0901 	and.w	r9, r2, r1
 8003b5c:	f409 59e0 	and.w	r9, r9, #7168	; 0x1c00
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003b60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003b62:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003b64:	ea02 0801 	and.w	r8, r2, r1
 8003b68:	f008 0807 	and.w	r8, r8, #7
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8003b6c:	6d1f      	ldr	r7, [r3, #80]	; 0x50
  RxFifo1ITs &= hfdcan->Instance->IE;
 8003b6e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b70:	4017      	ands	r7, r2
 8003b72:	f007 0738 	and.w	r7, r7, #56	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8003b76:	6d1d      	ldr	r5, [r3, #80]	; 0x50
  Errors &= hfdcan->Instance->IE;
 8003b78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b7a:	4015      	ands	r5, r2
 8003b7c:	f405 0571 	and.w	r5, r5, #15794176	; 0xf10000
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8003b80:	6d1e      	ldr	r6, [r3, #80]	; 0x50
  ErrorStatusITs &= hfdcan->Instance->IE;
 8003b82:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b84:	4016      	ands	r6, r2
 8003b86:	f406 2660 	and.w	r6, r6, #917504	; 0xe0000
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8003b8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b8c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003b90:	d003      	beq.n	8003b9a <HAL_FDCAN_IRQHandler+0x4e>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8003b92:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b94:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003b98:	d151      	bne.n	8003c3e <HAL_FDCAN_IRQHandler+0xf2>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8003b9a:	6823      	ldr	r3, [r4, #0]
 8003b9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b9e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003ba2:	d003      	beq.n	8003bac <HAL_FDCAN_IRQHandler+0x60>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003ba4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ba6:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003baa:	d14d      	bne.n	8003c48 <HAL_FDCAN_IRQHandler+0xfc>
  if (TxEventFifoITs != 0U)
 8003bac:	f1b9 0f00 	cmp.w	r9, #0
 8003bb0:	d156      	bne.n	8003c60 <HAL_FDCAN_IRQHandler+0x114>
  if (RxFifo0ITs != 0U)
 8003bb2:	f1b8 0f00 	cmp.w	r8, #0
 8003bb6:	d15b      	bne.n	8003c70 <HAL_FDCAN_IRQHandler+0x124>
  if (RxFifo1ITs != 0U)
 8003bb8:	2f00      	cmp	r7, #0
 8003bba:	d161      	bne.n	8003c80 <HAL_FDCAN_IRQHandler+0x134>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8003bbc:	6823      	ldr	r3, [r4, #0]
 8003bbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003bc0:	f412 7f00 	tst.w	r2, #512	; 0x200
 8003bc4:	d003      	beq.n	8003bce <HAL_FDCAN_IRQHandler+0x82>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8003bc6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bc8:	f412 7f00 	tst.w	r2, #512	; 0x200
 8003bcc:	d15f      	bne.n	8003c8e <HAL_FDCAN_IRQHandler+0x142>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8003bce:	6823      	ldr	r3, [r4, #0]
 8003bd0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003bd2:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003bd6:	d003      	beq.n	8003be0 <HAL_FDCAN_IRQHandler+0x94>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8003bd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bda:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003bde:	d15d      	bne.n	8003c9c <HAL_FDCAN_IRQHandler+0x150>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8003be0:	6823      	ldr	r3, [r4, #0]
 8003be2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003be4:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8003be8:	d003      	beq.n	8003bf2 <HAL_FDCAN_IRQHandler+0xa6>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8003bea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bec:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8003bf0:	d15f      	bne.n	8003cb2 <HAL_FDCAN_IRQHandler+0x166>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8003bf2:	6823      	ldr	r3, [r4, #0]
 8003bf4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003bf6:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8003bfa:	d003      	beq.n	8003c04 <HAL_FDCAN_IRQHandler+0xb8>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8003bfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bfe:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8003c02:	d15d      	bne.n	8003cc0 <HAL_FDCAN_IRQHandler+0x174>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8003c04:	6823      	ldr	r3, [r4, #0]
 8003c06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c08:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8003c0c:	d00a      	beq.n	8003c24 <HAL_FDCAN_IRQHandler+0xd8>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8003c0e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c10:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8003c14:	d006      	beq.n	8003c24 <HAL_FDCAN_IRQHandler+0xd8>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8003c16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003c1a:	651a      	str	r2, [r3, #80]	; 0x50
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8003c1c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003c1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c22:	6623      	str	r3, [r4, #96]	; 0x60
  if (ErrorStatusITs != 0U)
 8003c24:	2e00      	cmp	r6, #0
 8003c26:	d152      	bne.n	8003cce <HAL_FDCAN_IRQHandler+0x182>
  if (Errors != 0U)
 8003c28:	b125      	cbz	r5, 8003c34 <HAL_FDCAN_IRQHandler+0xe8>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8003c2a:	6823      	ldr	r3, [r4, #0]
 8003c2c:	651d      	str	r5, [r3, #80]	; 0x50
    hfdcan->ErrorCode |= Errors;
 8003c2e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003c30:	432b      	orrs	r3, r5
 8003c32:	6623      	str	r3, [r4, #96]	; 0x60
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8003c34:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d150      	bne.n	8003cdc <HAL_FDCAN_IRQHandler+0x190>
}
 8003c3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8003c3e:	2240      	movs	r2, #64	; 0x40
 8003c40:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8003c42:	f7ff ff80 	bl	8003b46 <HAL_FDCAN_HighPriorityMessageCallback>
 8003c46:	e7a8      	b.n	8003b9a <HAL_FDCAN_IRQHandler+0x4e>
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8003c48:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003c4c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8003c50:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003c54:	6518      	str	r0, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8003c56:	4011      	ands	r1, r2
 8003c58:	4620      	mov	r0, r4
 8003c5a:	f7ff ff71 	bl	8003b40 <HAL_FDCAN_TxBufferAbortCallback>
 8003c5e:	e7a5      	b.n	8003bac <HAL_FDCAN_IRQHandler+0x60>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8003c60:	6823      	ldr	r3, [r4, #0]
 8003c62:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8003c66:	4649      	mov	r1, r9
 8003c68:	4620      	mov	r0, r4
 8003c6a:	f7ff ff65 	bl	8003b38 <HAL_FDCAN_TxEventFifoCallback>
 8003c6e:	e7a0      	b.n	8003bb2 <HAL_FDCAN_IRQHandler+0x66>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003c70:	6823      	ldr	r3, [r4, #0]
 8003c72:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003c76:	4641      	mov	r1, r8
 8003c78:	4620      	mov	r0, r4
 8003c7a:	f7fd fc57 	bl	800152c <HAL_FDCAN_RxFifo0Callback>
 8003c7e:	e79b      	b.n	8003bb8 <HAL_FDCAN_IRQHandler+0x6c>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8003c80:	6823      	ldr	r3, [r4, #0]
 8003c82:	651f      	str	r7, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8003c84:	4639      	mov	r1, r7
 8003c86:	4620      	mov	r0, r4
 8003c88:	f7ff ff57 	bl	8003b3a <HAL_FDCAN_RxFifo1Callback>
 8003c8c:	e796      	b.n	8003bbc <HAL_FDCAN_IRQHandler+0x70>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8003c8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c92:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8003c94:	4620      	mov	r0, r4
 8003c96:	f7ff ff51 	bl	8003b3c <HAL_FDCAN_TxFifoEmptyCallback>
 8003c9a:	e798      	b.n	8003bce <HAL_FDCAN_IRQHandler+0x82>
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8003c9c:	f8d3 10d4 	ldr.w	r1, [r3, #212]	; 0xd4
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8003ca0:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8003ca4:	2080      	movs	r0, #128	; 0x80
 8003ca6:	6518      	str	r0, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8003ca8:	4011      	ands	r1, r2
 8003caa:	4620      	mov	r0, r4
 8003cac:	f7ff ff47 	bl	8003b3e <HAL_FDCAN_TxBufferCompleteCallback>
 8003cb0:	e796      	b.n	8003be0 <HAL_FDCAN_IRQHandler+0x94>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8003cb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003cb6:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8003cb8:	4620      	mov	r0, r4
 8003cba:	f7ff ff42 	bl	8003b42 <HAL_FDCAN_TimestampWraparoundCallback>
 8003cbe:	e798      	b.n	8003bf2 <HAL_FDCAN_IRQHandler+0xa6>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8003cc0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003cc4:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8003cc6:	4620      	mov	r0, r4
 8003cc8:	f7ff ff3c 	bl	8003b44 <HAL_FDCAN_TimeoutOccurredCallback>
 8003ccc:	e79a      	b.n	8003c04 <HAL_FDCAN_IRQHandler+0xb8>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8003cce:	6823      	ldr	r3, [r4, #0]
 8003cd0:	651e      	str	r6, [r3, #80]	; 0x50
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8003cd2:	4631      	mov	r1, r6
 8003cd4:	4620      	mov	r0, r4
 8003cd6:	f7ff ff38 	bl	8003b4a <HAL_FDCAN_ErrorStatusCallback>
 8003cda:	e7a5      	b.n	8003c28 <HAL_FDCAN_IRQHandler+0xdc>
    HAL_FDCAN_ErrorCallback(hfdcan);
 8003cdc:	4620      	mov	r0, r4
 8003cde:	f7ff ff33 	bl	8003b48 <HAL_FDCAN_ErrorCallback>
}
 8003ce2:	e7aa      	b.n	8003c3a <HAL_FDCAN_IRQHandler+0xee>

08003ce4 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8003ce4:	b510      	push	{r4, lr}
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
  uint32_t *dest_addr = (uint32_t *)Address;
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8003ce6:	460b      	mov	r3, r1

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8003ce8:	4c09      	ldr	r4, [pc, #36]	; (8003d10 <FLASH_Program_Fast+0x2c>)
 8003cea:	6962      	ldr	r2, [r4, #20]
 8003cec:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003cf0:	6162      	str	r2, [r4, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cf2:	f3ef 8e10 	mrs	lr, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003cf6:	b672      	cpsid	i
 8003cf8:	f501 7c80 	add.w	ip, r1, #256	; 0x100
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8003cfc:	1a41      	subs	r1, r0, r1
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	505a      	str	r2, [r3, r1]
    dest_addr++;
    src_addr++;
 8003d02:	3304      	adds	r3, #4
    row_index--;
  }
  while (row_index != 0U);
 8003d04:	4563      	cmp	r3, ip
 8003d06:	d1fa      	bne.n	8003cfe <FLASH_Program_Fast+0x1a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d08:	f38e 8810 	msr	PRIMASK, lr

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8003d0c:	bd10      	pop	{r4, pc}
 8003d0e:	bf00      	nop
 8003d10:	40022000 	.word	0x40022000

08003d14 <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003d14:	4b07      	ldr	r3, [pc, #28]	; (8003d34 <HAL_FLASH_Unlock+0x20>)
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	db01      	blt.n	8003d20 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8003d1c:	2000      	movs	r0, #0
}
 8003d1e:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003d20:	4b04      	ldr	r3, [pc, #16]	; (8003d34 <HAL_FLASH_Unlock+0x20>)
 8003d22:	4a05      	ldr	r2, [pc, #20]	; (8003d38 <HAL_FLASH_Unlock+0x24>)
 8003d24:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003d26:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8003d2a:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003d2c:	6958      	ldr	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8003d2e:	0fc0      	lsrs	r0, r0, #31
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	40022000 	.word	0x40022000
 8003d38:	45670123 	.word	0x45670123

08003d3c <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003d3c:	4b04      	ldr	r3, [pc, #16]	; (8003d50 <HAL_FLASH_Lock+0x14>)
 8003d3e:	695a      	ldr	r2, [r3, #20]
 8003d40:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003d44:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003d46:	6958      	ldr	r0, [r3, #20]
}
 8003d48:	43c0      	mvns	r0, r0
 8003d4a:	0fc0      	lsrs	r0, r0, #31
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	40022000 	.word	0x40022000

08003d54 <FLASH_WaitForLastOperation>:
{
 8003d54:	b570      	push	{r4, r5, r6, lr}
 8003d56:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8003d58:	f7fe fcc0 	bl	80026dc <HAL_GetTick>
 8003d5c:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003d5e:	4e13      	ldr	r6, [pc, #76]	; (8003dac <FLASH_WaitForLastOperation+0x58>)
 8003d60:	6933      	ldr	r3, [r6, #16]
 8003d62:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003d66:	d006      	beq.n	8003d76 <FLASH_WaitForLastOperation+0x22>
    if ((HAL_GetTick() - tickstart) > Timeout)
 8003d68:	f7fe fcb8 	bl	80026dc <HAL_GetTick>
 8003d6c:	1b00      	subs	r0, r0, r4
 8003d6e:	42a8      	cmp	r0, r5
 8003d70:	d9f6      	bls.n	8003d60 <FLASH_WaitForLastOperation+0xc>
      return HAL_TIMEOUT;
 8003d72:	2003      	movs	r0, #3
}
 8003d74:	bd70      	pop	{r4, r5, r6, pc}
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8003d76:	4b0d      	ldr	r3, [pc, #52]	; (8003dac <FLASH_WaitForLastOperation+0x58>)
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  if (error != 0u)
 8003d7e:	4013      	ands	r3, r2
 8003d80:	d109      	bne.n	8003d96 <FLASH_WaitForLastOperation+0x42>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003d82:	4b0a      	ldr	r3, [pc, #40]	; (8003dac <FLASH_WaitForLastOperation+0x58>)
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	f013 0f01 	tst.w	r3, #1
 8003d8a:	d00c      	beq.n	8003da6 <FLASH_WaitForLastOperation+0x52>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003d8c:	4b07      	ldr	r3, [pc, #28]	; (8003dac <FLASH_WaitForLastOperation+0x58>)
 8003d8e:	2201      	movs	r2, #1
 8003d90:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8003d92:	2000      	movs	r0, #0
 8003d94:	e7ee      	b.n	8003d74 <FLASH_WaitForLastOperation+0x20>
    pFlash.ErrorCode |= error;
 8003d96:	4906      	ldr	r1, [pc, #24]	; (8003db0 <FLASH_WaitForLastOperation+0x5c>)
 8003d98:	684a      	ldr	r2, [r1, #4]
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	604a      	str	r2, [r1, #4]
    __HAL_FLASH_CLEAR_FLAG(error);
 8003d9e:	4a03      	ldr	r2, [pc, #12]	; (8003dac <FLASH_WaitForLastOperation+0x58>)
 8003da0:	6113      	str	r3, [r2, #16]
    return HAL_ERROR;
 8003da2:	2001      	movs	r0, #1
 8003da4:	e7e6      	b.n	8003d74 <FLASH_WaitForLastOperation+0x20>
  return HAL_OK;
 8003da6:	2000      	movs	r0, #0
 8003da8:	e7e4      	b.n	8003d74 <FLASH_WaitForLastOperation+0x20>
 8003daa:	bf00      	nop
 8003dac:	40022000 	.word	0x40022000
 8003db0:	2000004c 	.word	0x2000004c

08003db4 <HAL_FLASH_Program>:
{
 8003db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003db6:	4616      	mov	r6, r2
  __HAL_LOCK(&pFlash);
 8003db8:	4a21      	ldr	r2, [pc, #132]	; (8003e40 <HAL_FLASH_Program+0x8c>)
 8003dba:	7812      	ldrb	r2, [r2, #0]
 8003dbc:	2a01      	cmp	r2, #1
 8003dbe:	d03c      	beq.n	8003e3a <HAL_FLASH_Program+0x86>
 8003dc0:	4604      	mov	r4, r0
 8003dc2:	460d      	mov	r5, r1
 8003dc4:	461f      	mov	r7, r3
 8003dc6:	4b1e      	ldr	r3, [pc, #120]	; (8003e40 <HAL_FLASH_Program+0x8c>)
 8003dc8:	2201      	movs	r2, #1
 8003dca:	701a      	strb	r2, [r3, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003dcc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003dd0:	f7ff ffc0 	bl	8003d54 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8003dd4:	b9e8      	cbnz	r0, 8003e12 <HAL_FLASH_Program+0x5e>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003dd6:	4b1a      	ldr	r3, [pc, #104]	; (8003e40 <HAL_FLASH_Program+0x8c>)
 8003dd8:	6058      	str	r0, [r3, #4]
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8003dda:	b13c      	cbz	r4, 8003dec <HAL_FLASH_Program+0x38>
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8003ddc:	1e63      	subs	r3, r4, #1
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d91b      	bls.n	8003e1a <HAL_FLASH_Program+0x66>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003de2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003de6:	f7ff ffb5 	bl	8003d54 <FLASH_WaitForLastOperation>
    if (prog_bit != 0U)
 8003dea:	e012      	b.n	8003e12 <HAL_FLASH_Program+0x5e>
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003dec:	4a15      	ldr	r2, [pc, #84]	; (8003e44 <HAL_FLASH_Program+0x90>)
 8003dee:	6953      	ldr	r3, [r2, #20]
 8003df0:	f043 0301 	orr.w	r3, r3, #1
 8003df4:	6153      	str	r3, [r2, #20]
  *(uint32_t *)Address = (uint32_t)Data;
 8003df6:	602e      	str	r6, [r5, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8003df8:	f3bf 8f6f 	isb	sy
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8003dfc:	606f      	str	r7, [r5, #4]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003dfe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e02:	f7ff ffa7 	bl	8003d54 <FLASH_WaitForLastOperation>
      prog_bit = FLASH_CR_PG;
 8003e06:	2401      	movs	r4, #1
      CLEAR_BIT(FLASH->CR, prog_bit);
 8003e08:	4a0e      	ldr	r2, [pc, #56]	; (8003e44 <HAL_FLASH_Program+0x90>)
 8003e0a:	6953      	ldr	r3, [r2, #20]
 8003e0c:	ea23 0304 	bic.w	r3, r3, r4
 8003e10:	6153      	str	r3, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 8003e12:	4b0b      	ldr	r3, [pc, #44]	; (8003e40 <HAL_FLASH_Program+0x8c>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	701a      	strb	r2, [r3, #0]
}
 8003e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8003e1a:	4631      	mov	r1, r6
 8003e1c:	4628      	mov	r0, r5
 8003e1e:	f7ff ff61 	bl	8003ce4 <FLASH_Program_Fast>
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8003e22:	2c02      	cmp	r4, #2
 8003e24:	bf14      	ite	ne
 8003e26:	2400      	movne	r4, #0
 8003e28:	2401      	moveq	r4, #1
 8003e2a:	04a4      	lsls	r4, r4, #18
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003e2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e30:	f7ff ff90 	bl	8003d54 <FLASH_WaitForLastOperation>
    if (prog_bit != 0U)
 8003e34:	2c00      	cmp	r4, #0
 8003e36:	d1e7      	bne.n	8003e08 <HAL_FLASH_Program+0x54>
 8003e38:	e7eb      	b.n	8003e12 <HAL_FLASH_Program+0x5e>
  __HAL_LOCK(&pFlash);
 8003e3a:	2002      	movs	r0, #2
 8003e3c:	e7ec      	b.n	8003e18 <HAL_FLASH_Program+0x64>
 8003e3e:	bf00      	nop
 8003e40:	2000004c 	.word	0x2000004c
 8003e44:	40022000 	.word	0x40022000

08003e48 <FLASH_MassErase>:
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8003e48:	f010 0f01 	tst.w	r0, #1
 8003e4c:	d004      	beq.n	8003e58 <FLASH_MassErase+0x10>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8003e4e:	4a05      	ldr	r2, [pc, #20]	; (8003e64 <FLASH_MassErase+0x1c>)
 8003e50:	6953      	ldr	r3, [r2, #20]
 8003e52:	f043 0304 	orr.w	r3, r3, #4
 8003e56:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003e58:	4a02      	ldr	r2, [pc, #8]	; (8003e64 <FLASH_MassErase+0x1c>)
 8003e5a:	6953      	ldr	r3, [r2, #20]
 8003e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e60:	6153      	str	r3, [r2, #20]
}
 8003e62:	4770      	bx	lr
 8003e64:	40022000 	.word	0x40022000

08003e68 <FLASH_PageErase>:
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8003e68:	4b08      	ldr	r3, [pc, #32]	; (8003e8c <FLASH_PageErase+0x24>)
 8003e6a:	695a      	ldr	r2, [r3, #20]
 8003e6c:	00c0      	lsls	r0, r0, #3
 8003e6e:	f400 60ff 	and.w	r0, r0, #2040	; 0x7f8
 8003e72:	f422 72fc 	bic.w	r2, r2, #504	; 0x1f8
 8003e76:	4310      	orrs	r0, r2
 8003e78:	6158      	str	r0, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003e7a:	695a      	ldr	r2, [r3, #20]
 8003e7c:	f042 0202 	orr.w	r2, r2, #2
 8003e80:	615a      	str	r2, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003e82:	695a      	ldr	r2, [r3, #20]
 8003e84:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003e88:	615a      	str	r2, [r3, #20]
}
 8003e8a:	4770      	bx	lr
 8003e8c:	40022000 	.word	0x40022000

08003e90 <FLASH_FlushCaches>:
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8003e90:	4b17      	ldr	r3, [pc, #92]	; (8003ef0 <FLASH_FlushCaches+0x60>)
 8003e92:	7f1a      	ldrb	r2, [r3, #28]
 8003e94:	b2d3      	uxtb	r3, r2

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8003e96:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 8003e9a:	2a01      	cmp	r2, #1
 8003e9c:	d007      	beq.n	8003eae <FLASH_FlushCaches+0x1e>
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8003e9e:	3b02      	subs	r3, #2
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d915      	bls.n	8003ed2 <FLASH_FlushCaches+0x42>
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003ea6:	4b12      	ldr	r3, [pc, #72]	; (8003ef0 <FLASH_FlushCaches+0x60>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	771a      	strb	r2, [r3, #28]
}
 8003eac:	4770      	bx	lr
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003eae:	4a11      	ldr	r2, [pc, #68]	; (8003ef4 <FLASH_FlushCaches+0x64>)
 8003eb0:	6811      	ldr	r1, [r2, #0]
 8003eb2:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8003eb6:	6011      	str	r1, [r2, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003eb8:	6811      	ldr	r1, [r2, #0]
 8003eba:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8003ebe:	6011      	str	r1, [r2, #0]
 8003ec0:	6811      	ldr	r1, [r2, #0]
 8003ec2:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8003ec6:	6011      	str	r1, [r2, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ec8:	6811      	ldr	r1, [r2, #0]
 8003eca:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003ece:	6011      	str	r1, [r2, #0]
 8003ed0:	e7e5      	b.n	8003e9e <FLASH_FlushCaches+0xe>
    __HAL_FLASH_DATA_CACHE_RESET();
 8003ed2:	4b08      	ldr	r3, [pc, #32]	; (8003ef4 <FLASH_FlushCaches+0x64>)
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003eda:	601a      	str	r2, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ee2:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003eea:	601a      	str	r2, [r3, #0]
 8003eec:	e7db      	b.n	8003ea6 <FLASH_FlushCaches+0x16>
 8003eee:	bf00      	nop
 8003ef0:	2000004c 	.word	0x2000004c
 8003ef4:	40022000 	.word	0x40022000

08003ef8 <HAL_FLASHEx_Erase>:
{
 8003ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 8003efc:	4b3b      	ldr	r3, [pc, #236]	; (8003fec <HAL_FLASHEx_Erase+0xf4>)
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d06f      	beq.n	8003fe4 <HAL_FLASHEx_Erase+0xec>
 8003f04:	4604      	mov	r4, r0
 8003f06:	460f      	mov	r7, r1
 8003f08:	4b38      	ldr	r3, [pc, #224]	; (8003fec <HAL_FLASHEx_Erase+0xf4>)
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	701a      	strb	r2, [r3, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003f0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f12:	f7ff ff1f 	bl	8003d54 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8003f16:	4681      	mov	r9, r0
 8003f18:	2800      	cmp	r0, #0
 8003f1a:	d15d      	bne.n	8003fd8 <HAL_FLASHEx_Erase+0xe0>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003f1c:	4b33      	ldr	r3, [pc, #204]	; (8003fec <HAL_FLASHEx_Erase+0xf4>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	605a      	str	r2, [r3, #4]
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8003f22:	4b33      	ldr	r3, [pc, #204]	; (8003ff0 <HAL_FLASHEx_Erase+0xf8>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003f2a:	d032      	beq.n	8003f92 <HAL_FLASHEx_Erase+0x9a>
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003f2c:	4b30      	ldr	r3, [pc, #192]	; (8003ff0 <HAL_FLASHEx_Erase+0xf8>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003f34:	d029      	beq.n	8003f8a <HAL_FLASHEx_Erase+0x92>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8003f36:	4a2e      	ldr	r2, [pc, #184]	; (8003ff0 <HAL_FLASHEx_Erase+0xf8>)
 8003f38:	6813      	ldr	r3, [r2, #0]
 8003f3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f3e:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8003f40:	4b2a      	ldr	r3, [pc, #168]	; (8003fec <HAL_FLASHEx_Erase+0xf4>)
 8003f42:	2203      	movs	r2, #3
 8003f44:	771a      	strb	r2, [r3, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003f46:	6823      	ldr	r3, [r4, #0]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d034      	beq.n	8003fb6 <HAL_FLASHEx_Erase+0xbe>
      *PageError = 0xFFFFFFFFU;
 8003f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f50:	603b      	str	r3, [r7, #0]
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003f52:	68a5      	ldr	r5, [r4, #8]
 8003f54:	68e3      	ldr	r3, [r4, #12]
 8003f56:	442b      	add	r3, r5
 8003f58:	429d      	cmp	r5, r3
 8003f5a:	d23b      	bcs.n	8003fd4 <HAL_FLASHEx_Erase+0xdc>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003f5c:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8003f60:	4e23      	ldr	r6, [pc, #140]	; (8003ff0 <HAL_FLASHEx_Erase+0xf8>)
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8003f62:	6861      	ldr	r1, [r4, #4]
 8003f64:	4628      	mov	r0, r5
 8003f66:	f7ff ff7f 	bl	8003e68 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003f6a:	4640      	mov	r0, r8
 8003f6c:	f7ff fef2 	bl	8003d54 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8003f70:	6973      	ldr	r3, [r6, #20]
 8003f72:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 8003f76:	6173      	str	r3, [r6, #20]
        if (status != HAL_OK)
 8003f78:	4681      	mov	r9, r0
 8003f7a:	bb50      	cbnz	r0, 8003fd2 <HAL_FLASHEx_Erase+0xda>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003f7c:	3501      	adds	r5, #1
 8003f7e:	68a3      	ldr	r3, [r4, #8]
 8003f80:	68e2      	ldr	r2, [r4, #12]
 8003f82:	4413      	add	r3, r2
 8003f84:	42ab      	cmp	r3, r5
 8003f86:	d8ec      	bhi.n	8003f62 <HAL_FLASHEx_Erase+0x6a>
 8003f88:	e024      	b.n	8003fd4 <HAL_FLASHEx_Erase+0xdc>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8003f8a:	4b18      	ldr	r3, [pc, #96]	; (8003fec <HAL_FLASHEx_Erase+0xf4>)
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	771a      	strb	r2, [r3, #28]
 8003f90:	e7d9      	b.n	8003f46 <HAL_FLASHEx_Erase+0x4e>
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003f92:	4b17      	ldr	r3, [pc, #92]	; (8003ff0 <HAL_FLASHEx_Erase+0xf8>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003f9a:	d008      	beq.n	8003fae <HAL_FLASHEx_Erase+0xb6>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8003f9c:	4a14      	ldr	r2, [pc, #80]	; (8003ff0 <HAL_FLASHEx_Erase+0xf8>)
 8003f9e:	6813      	ldr	r3, [r2, #0]
 8003fa0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fa4:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8003fa6:	4b11      	ldr	r3, [pc, #68]	; (8003fec <HAL_FLASHEx_Erase+0xf4>)
 8003fa8:	2202      	movs	r2, #2
 8003faa:	771a      	strb	r2, [r3, #28]
 8003fac:	e7cb      	b.n	8003f46 <HAL_FLASHEx_Erase+0x4e>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003fae:	4b0f      	ldr	r3, [pc, #60]	; (8003fec <HAL_FLASHEx_Erase+0xf4>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	771a      	strb	r2, [r3, #28]
 8003fb4:	e7c7      	b.n	8003f46 <HAL_FLASHEx_Erase+0x4e>
      FLASH_MassErase(pEraseInit->Banks);
 8003fb6:	6860      	ldr	r0, [r4, #4]
 8003fb8:	f7ff ff46 	bl	8003e48 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003fbc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003fc0:	f7ff fec8 	bl	8003d54 <FLASH_WaitForLastOperation>
 8003fc4:	4681      	mov	r9, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8003fc6:	4a0a      	ldr	r2, [pc, #40]	; (8003ff0 <HAL_FLASHEx_Erase+0xf8>)
 8003fc8:	6953      	ldr	r3, [r2, #20]
 8003fca:	f023 0304 	bic.w	r3, r3, #4
 8003fce:	6153      	str	r3, [r2, #20]
 8003fd0:	e000      	b.n	8003fd4 <HAL_FLASHEx_Erase+0xdc>
          *PageError = page_index;
 8003fd2:	603d      	str	r5, [r7, #0]
    FLASH_FlushCaches();
 8003fd4:	f7ff ff5c 	bl	8003e90 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8003fd8:	4b04      	ldr	r3, [pc, #16]	; (8003fec <HAL_FLASHEx_Erase+0xf4>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	701a      	strb	r2, [r3, #0]
}
 8003fde:	4648      	mov	r0, r9
 8003fe0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(&pFlash);
 8003fe4:	f04f 0902 	mov.w	r9, #2
 8003fe8:	e7f9      	b.n	8003fde <HAL_FLASHEx_Erase+0xe6>
 8003fea:	bf00      	nop
 8003fec:	2000004c 	.word	0x2000004c
 8003ff0:	40022000 	.word	0x40022000

08003ff4 <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8003ff4:	b538      	push	{r3, r4, r5, lr}
 8003ff6:	4604      	mov	r4, r0
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ff8:	f7fe fb70 	bl	80026dc <HAL_GetTick>
 8003ffc:	4605      	mov	r5, r0

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8003ffe:	6822      	ldr	r2, [r4, #0]
 8004000:	6913      	ldr	r3, [r2, #16]
 8004002:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004006:	6113      	str	r3, [r2, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8004008:	6823      	ldr	r3, [r4, #0]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004010:	d00b      	beq.n	800402a <FMAC_Reset+0x36>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8004012:	f7fe fb63 	bl	80026dc <HAL_GetTick>
 8004016:	1b40      	subs	r0, r0, r5
 8004018:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 800401c:	d9f4      	bls.n	8004008 <FMAC_Reset+0x14>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 800401e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004024:	6363      	str	r3, [r4, #52]	; 0x34
      return HAL_ERROR;
 8004026:	2001      	movs	r0, #1
 8004028:	e001      	b.n	800402e <FMAC_Reset+0x3a>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 800402a:	2000      	movs	r0, #0
 800402c:	6360      	str	r0, [r4, #52]	; 0x34
  return HAL_OK;
}
 800402e:	bd38      	pop	{r3, r4, r5, pc}

08004030 <HAL_FMAC_Init>:
  if (hfmac == NULL)
 8004030:	b360      	cbz	r0, 800408c <HAL_FMAC_Init+0x5c>
{
 8004032:	b510      	push	{r4, lr}
 8004034:	4604      	mov	r4, r0
  if (hfmac->State == HAL_FMAC_STATE_RESET)
 8004036:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 800403a:	b1d3      	cbz	r3, 8004072 <HAL_FMAC_Init+0x42>
  hfmac->FilterParam = 0U;
 800403c:	2300      	movs	r3, #0
 800403e:	6063      	str	r3, [r4, #4]
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
  hfmac->pInput = NULL;
 8004040:	60e3      	str	r3, [r4, #12]
  hfmac->pInputSize = NULL;
 8004042:	6163      	str	r3, [r4, #20]
  hfmac->InputCurrentSize = 0U;
 8004044:	8223      	strh	r3, [r4, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8004046:	2220      	movs	r2, #32
 8004048:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
  hfmac->pOutput = NULL;
 800404c:	61a3      	str	r3, [r4, #24]
  hfmac->pOutputSize = NULL;
 800404e:	6223      	str	r3, [r4, #32]
  hfmac->OutputCurrentSize = 0U;
 8004050:	83a3      	strh	r3, [r4, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8004052:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 8004056:	4620      	mov	r0, r4
 8004058:	f7ff ffcc 	bl	8003ff4 <FMAC_Reset>
 800405c:	2801      	cmp	r0, #1
 800405e:	d00d      	beq.n	800407c <HAL_FMAC_Init+0x4c>
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8004060:	2000      	movs	r0, #0
 8004062:	6360      	str	r0, [r4, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8004064:	2320      	movs	r3, #32
 8004066:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  __HAL_UNLOCK(hfmac);
 800406a:	2300      	movs	r3, #0
 800406c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 8004070:	bd10      	pop	{r4, pc}
    hfmac->Lock = HAL_UNLOCKED;
 8004072:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    HAL_FMAC_MspInit(hfmac);
 8004076:	f7fd fdb5 	bl	8001be4 <HAL_FMAC_MspInit>
 800407a:	e7df      	b.n	800403c <HAL_FMAC_Init+0xc>
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 800407c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800407e:	f043 0310 	orr.w	r3, r3, #16
 8004082:	6363      	str	r3, [r4, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8004084:	23a0      	movs	r3, #160	; 0xa0
 8004086:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    status = HAL_ERROR;
 800408a:	e7ee      	b.n	800406a <HAL_FMAC_Init+0x3a>
    return HAL_ERROR;
 800408c:	2001      	movs	r0, #1
}
 800408e:	4770      	bx	lr

08004090 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004090:	680b      	ldr	r3, [r1, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	f000 80d6 	beq.w	8004244 <HAL_GPIO_Init+0x1b4>
{
 8004098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800409c:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0U)
 800409e:	f04f 0c00 	mov.w	ip, #0
  uint32_t position = 0x00U;
 80040a2:	4662      	mov	r2, ip
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80040a4:	2501      	movs	r5, #1
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80040a6:	f04f 0e03 	mov.w	lr, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040aa:	4c67      	ldr	r4, [pc, #412]	; (8004248 <HAL_GPIO_Init+0x1b8>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80040ac:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004254 <HAL_GPIO_Init+0x1c4>
 80040b0:	e047      	b.n	8004142 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 80040b2:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80040b4:	fa0e fa0c 	lsl.w	sl, lr, ip
 80040b8:	ea23 0a0a 	bic.w	sl, r3, sl
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040bc:	68cb      	ldr	r3, [r1, #12]
 80040be:	fa03 f30c 	lsl.w	r3, r3, ip
 80040c2:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->OSPEEDR = temp;
 80040c6:	6083      	str	r3, [r0, #8]
        temp = GPIOx->OTYPER;
 80040c8:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80040ca:	ea23 0707 	bic.w	r7, r3, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040ce:	684b      	ldr	r3, [r1, #4]
 80040d0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80040d4:	4093      	lsls	r3, r2
 80040d6:	433b      	orrs	r3, r7
        GPIOx->OTYPER = temp;
 80040d8:	6043      	str	r3, [r0, #4]
 80040da:	e03d      	b.n	8004158 <HAL_GPIO_Init+0xc8>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80040dc:	2700      	movs	r7, #0
 80040de:	fa07 f70b 	lsl.w	r7, r7, fp
 80040e2:	ea47 070a 	orr.w	r7, r7, sl
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040e6:	609f      	str	r7, [r3, #8]
        temp = EXTI->RTSR1;
 80040e8:	68a3      	ldr	r3, [r4, #8]
        temp &= ~(iocurrent);
 80040ea:	ea6f 0709 	mvn.w	r7, r9
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040ee:	684e      	ldr	r6, [r1, #4]
 80040f0:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~(iocurrent);
 80040f4:	bf0c      	ite	eq
 80040f6:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 80040f8:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->RTSR1 = temp;
 80040fc:	60a3      	str	r3, [r4, #8]

        temp = EXTI->FTSR1;
 80040fe:	68e3      	ldr	r3, [r4, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004100:	684e      	ldr	r6, [r1, #4]
 8004102:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8004106:	bf0c      	ite	eq
 8004108:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 800410a:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->FTSR1 = temp;
 800410e:	60e3      	str	r3, [r4, #12]

        temp = EXTI->EMR1;
 8004110:	6863      	ldr	r3, [r4, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004112:	684e      	ldr	r6, [r1, #4]
 8004114:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        temp &= ~(iocurrent);
 8004118:	bf0c      	ite	eq
 800411a:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 800411c:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->EMR1 = temp;
 8004120:	6063      	str	r3, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004122:	6823      	ldr	r3, [r4, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004124:	684e      	ldr	r6, [r1, #4]
 8004126:	f416 3f80 	tst.w	r6, #65536	; 0x10000
        temp &= ~(iocurrent);
 800412a:	bf0c      	ite	eq
 800412c:	401f      	andeq	r7, r3
        {
          temp |= iocurrent;
 800412e:	ea49 0703 	orrne.w	r7, r9, r3
        }
        EXTI->IMR1 = temp;
 8004132:	6027      	str	r7, [r4, #0]
      }
    }

    position++;
 8004134:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004136:	680b      	ldr	r3, [r1, #0]
 8004138:	f10c 0c02 	add.w	ip, ip, #2
 800413c:	fa33 f702 	lsrs.w	r7, r3, r2
 8004140:	d07d      	beq.n	800423e <HAL_GPIO_Init+0x1ae>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004142:	fa05 f702 	lsl.w	r7, r5, r2
    if (iocurrent != 0x00u)
 8004146:	ea17 0903 	ands.w	r9, r7, r3
 800414a:	d0f3      	beq.n	8004134 <HAL_GPIO_Init+0xa4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800414c:	684b      	ldr	r3, [r1, #4]
 800414e:	f003 0303 	and.w	r3, r3, #3
 8004152:	3b01      	subs	r3, #1
 8004154:	2b01      	cmp	r3, #1
 8004156:	d9ac      	bls.n	80040b2 <HAL_GPIO_Init+0x22>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004158:	684b      	ldr	r3, [r1, #4]
 800415a:	f003 0303 	and.w	r3, r3, #3
 800415e:	2b03      	cmp	r3, #3
 8004160:	d022      	beq.n	80041a8 <HAL_GPIO_Init+0x118>
        temp = GPIOx->PUPDR;
 8004162:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004164:	fa0e f30c 	lsl.w	r3, lr, ip
 8004168:	ea27 0703 	bic.w	r7, r7, r3
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800416c:	688b      	ldr	r3, [r1, #8]
 800416e:	fa03 f30c 	lsl.w	r3, r3, ip
 8004172:	433b      	orrs	r3, r7
        GPIOx->PUPDR = temp;
 8004174:	60c3      	str	r3, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004176:	684b      	ldr	r3, [r1, #4]
 8004178:	f003 0303 	and.w	r3, r3, #3
 800417c:	2b02      	cmp	r3, #2
 800417e:	d113      	bne.n	80041a8 <HAL_GPIO_Init+0x118>
        temp = GPIOx->AFR[position >> 3U];
 8004180:	08d7      	lsrs	r7, r2, #3
 8004182:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8004186:	f8d7 a020 	ldr.w	sl, [r7, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800418a:	f002 0b07 	and.w	fp, r2, #7
 800418e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8004192:	230f      	movs	r3, #15
 8004194:	fa03 f30b 	lsl.w	r3, r3, fp
 8004198:	ea2a 0a03 	bic.w	sl, sl, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800419c:	690b      	ldr	r3, [r1, #16]
 800419e:	fa03 f30b 	lsl.w	r3, r3, fp
 80041a2:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3U] = temp;
 80041a6:	623b      	str	r3, [r7, #32]
      temp = GPIOx->MODER;
 80041a8:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80041aa:	fa0e f30c 	lsl.w	r3, lr, ip
 80041ae:	ea27 0703 	bic.w	r7, r7, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041b2:	684b      	ldr	r3, [r1, #4]
 80041b4:	f003 0303 	and.w	r3, r3, #3
 80041b8:	fa03 f30c 	lsl.w	r3, r3, ip
 80041bc:	433b      	orrs	r3, r7
      GPIOx->MODER = temp;
 80041be:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80041c0:	684b      	ldr	r3, [r1, #4]
 80041c2:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 80041c6:	d0b5      	beq.n	8004134 <HAL_GPIO_Init+0xa4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041c8:	4e20      	ldr	r6, [pc, #128]	; (800424c <HAL_GPIO_Init+0x1bc>)
 80041ca:	6e33      	ldr	r3, [r6, #96]	; 0x60
 80041cc:	f043 0301 	orr.w	r3, r3, #1
 80041d0:	6633      	str	r3, [r6, #96]	; 0x60
 80041d2:	6e33      	ldr	r3, [r6, #96]	; 0x60
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	9301      	str	r3, [sp, #4]
 80041da:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80041dc:	f022 0303 	bic.w	r3, r2, #3
 80041e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80041e4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80041e8:	f8d3 a008 	ldr.w	sl, [r3, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80041ec:	f002 0b03 	and.w	fp, r2, #3
 80041f0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80041f4:	270f      	movs	r7, #15
 80041f6:	fa07 f70b 	lsl.w	r7, r7, fp
 80041fa:	ea2a 0a07 	bic.w	sl, sl, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80041fe:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8004202:	f43f af6b 	beq.w	80040dc <HAL_GPIO_Init+0x4c>
 8004206:	4540      	cmp	r0, r8
 8004208:	d011      	beq.n	800422e <HAL_GPIO_Init+0x19e>
 800420a:	4e11      	ldr	r6, [pc, #68]	; (8004250 <HAL_GPIO_Init+0x1c0>)
 800420c:	42b0      	cmp	r0, r6
 800420e:	d010      	beq.n	8004232 <HAL_GPIO_Init+0x1a2>
 8004210:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004214:	42b0      	cmp	r0, r6
 8004216:	d00e      	beq.n	8004236 <HAL_GPIO_Init+0x1a6>
 8004218:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800421c:	42b0      	cmp	r0, r6
 800421e:	d00c      	beq.n	800423a <HAL_GPIO_Init+0x1aa>
 8004220:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004224:	42b0      	cmp	r0, r6
 8004226:	bf0c      	ite	eq
 8004228:	2705      	moveq	r7, #5
 800422a:	2706      	movne	r7, #6
 800422c:	e757      	b.n	80040de <HAL_GPIO_Init+0x4e>
 800422e:	462f      	mov	r7, r5
 8004230:	e755      	b.n	80040de <HAL_GPIO_Init+0x4e>
 8004232:	2702      	movs	r7, #2
 8004234:	e753      	b.n	80040de <HAL_GPIO_Init+0x4e>
 8004236:	4677      	mov	r7, lr
 8004238:	e751      	b.n	80040de <HAL_GPIO_Init+0x4e>
 800423a:	2704      	movs	r7, #4
 800423c:	e74f      	b.n	80040de <HAL_GPIO_Init+0x4e>
  }
}
 800423e:	b003      	add	sp, #12
 8004240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	40010400 	.word	0x40010400
 800424c:	40021000 	.word	0x40021000
 8004250:	48000800 	.word	0x48000800
 8004254:	48000400 	.word	0x48000400

08004258 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004258:	b10a      	cbz	r2, 800425e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800425a:	6181      	str	r1, [r0, #24]
 800425c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800425e:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8004260:	4770      	bx	lr
	...

08004264 <HAL_PWREx_ControlVoltageScaling>:
{
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004264:	2800      	cmp	r0, #0
 8004266:	d13a      	bne.n	80042de <HAL_PWREx_ControlVoltageScaling+0x7a>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004268:	4b40      	ldr	r3, [pc, #256]	; (800436c <HAL_PWREx_ControlVoltageScaling+0x108>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004270:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004274:	d008      	beq.n	8004288 <HAL_PWREx_ControlVoltageScaling+0x24>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004276:	4a3d      	ldr	r2, [pc, #244]	; (800436c <HAL_PWREx_ControlVoltageScaling+0x108>)
 8004278:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800427c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004280:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004284:	2000      	movs	r0, #0
 8004286:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004288:	4a38      	ldr	r2, [pc, #224]	; (800436c <HAL_PWREx_ControlVoltageScaling+0x108>)
 800428a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800428e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004292:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004296:	6813      	ldr	r3, [r2, #0]
 8004298:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800429c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042a0:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80042a2:	4b33      	ldr	r3, [pc, #204]	; (8004370 <HAL_PWREx_ControlVoltageScaling+0x10c>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2132      	movs	r1, #50	; 0x32
 80042a8:	fb01 f303 	mul.w	r3, r1, r3
 80042ac:	4931      	ldr	r1, [pc, #196]	; (8004374 <HAL_PWREx_ControlVoltageScaling+0x110>)
 80042ae:	fba1 1303 	umull	r1, r3, r1, r3
 80042b2:	0c9b      	lsrs	r3, r3, #18
 80042b4:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042b6:	6952      	ldr	r2, [r2, #20]
 80042b8:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80042bc:	d007      	beq.n	80042ce <HAL_PWREx_ControlVoltageScaling+0x6a>
 80042be:	492b      	ldr	r1, [pc, #172]	; (800436c <HAL_PWREx_ControlVoltageScaling+0x108>)
        wait_loop_index--;
 80042c0:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042c2:	694a      	ldr	r2, [r1, #20]
 80042c4:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80042c8:	d001      	beq.n	80042ce <HAL_PWREx_ControlVoltageScaling+0x6a>
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1f8      	bne.n	80042c0 <HAL_PWREx_ControlVoltageScaling+0x5c>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80042ce:	4b27      	ldr	r3, [pc, #156]	; (800436c <HAL_PWREx_ControlVoltageScaling+0x108>)
 80042d0:	695b      	ldr	r3, [r3, #20]
        return HAL_TIMEOUT;
 80042d2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80042d6:	bf0c      	ite	eq
 80042d8:	2000      	moveq	r0, #0
 80042da:	2003      	movne	r0, #3
 80042dc:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042de:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80042e2:	d008      	beq.n	80042f6 <HAL_PWREx_ControlVoltageScaling+0x92>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80042e4:	4a21      	ldr	r2, [pc, #132]	; (800436c <HAL_PWREx_ControlVoltageScaling+0x108>)
 80042e6:	6813      	ldr	r3, [r2, #0]
 80042e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042f0:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80042f2:	2000      	movs	r0, #0
}
 80042f4:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80042f6:	4b1d      	ldr	r3, [pc, #116]	; (800436c <HAL_PWREx_ControlVoltageScaling+0x108>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80042fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004302:	d008      	beq.n	8004316 <HAL_PWREx_ControlVoltageScaling+0xb2>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004304:	4a19      	ldr	r2, [pc, #100]	; (800436c <HAL_PWREx_ControlVoltageScaling+0x108>)
 8004306:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800430a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800430e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  return HAL_OK;
 8004312:	2000      	movs	r0, #0
 8004314:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004316:	4a15      	ldr	r2, [pc, #84]	; (800436c <HAL_PWREx_ControlVoltageScaling+0x108>)
 8004318:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800431c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004320:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004324:	6813      	ldr	r3, [r2, #0]
 8004326:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800432a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800432e:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004330:	4b0f      	ldr	r3, [pc, #60]	; (8004370 <HAL_PWREx_ControlVoltageScaling+0x10c>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2132      	movs	r1, #50	; 0x32
 8004336:	fb01 f303 	mul.w	r3, r1, r3
 800433a:	490e      	ldr	r1, [pc, #56]	; (8004374 <HAL_PWREx_ControlVoltageScaling+0x110>)
 800433c:	fba1 1303 	umull	r1, r3, r1, r3
 8004340:	0c9b      	lsrs	r3, r3, #18
 8004342:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004344:	6952      	ldr	r2, [r2, #20]
 8004346:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800434a:	d007      	beq.n	800435c <HAL_PWREx_ControlVoltageScaling+0xf8>
 800434c:	4907      	ldr	r1, [pc, #28]	; (800436c <HAL_PWREx_ControlVoltageScaling+0x108>)
        wait_loop_index--;
 800434e:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004350:	694a      	ldr	r2, [r1, #20]
 8004352:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004356:	d001      	beq.n	800435c <HAL_PWREx_ControlVoltageScaling+0xf8>
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1f8      	bne.n	800434e <HAL_PWREx_ControlVoltageScaling+0xea>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800435c:	4b03      	ldr	r3, [pc, #12]	; (800436c <HAL_PWREx_ControlVoltageScaling+0x108>)
 800435e:	695b      	ldr	r3, [r3, #20]
        return HAL_TIMEOUT;
 8004360:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004364:	bf0c      	ite	eq
 8004366:	2000      	moveq	r0, #0
 8004368:	2003      	movne	r0, #3
 800436a:	4770      	bx	lr
 800436c:	40007000 	.word	0x40007000
 8004370:	20000040 	.word	0x20000040
 8004374:	431bde83 	.word	0x431bde83

08004378 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004378:	4a02      	ldr	r2, [pc, #8]	; (8004384 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 800437a:	6893      	ldr	r3, [r2, #8]
 800437c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004380:	6093      	str	r3, [r2, #8]
}
 8004382:	4770      	bx	lr
 8004384:	40007000 	.word	0x40007000

08004388 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004388:	2800      	cmp	r0, #0
 800438a:	f000 8257 	beq.w	800483c <HAL_RCC_OscConfig+0x4b4>
{
 800438e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004396:	6803      	ldr	r3, [r0, #0]
 8004398:	f013 0f01 	tst.w	r3, #1
 800439c:	d037      	beq.n	800440e <HAL_RCC_OscConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800439e:	4aa5      	ldr	r2, [pc, #660]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 80043a0:	6893      	ldr	r3, [r2, #8]
 80043a2:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043a6:	68d2      	ldr	r2, [r2, #12]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80043a8:	2b0c      	cmp	r3, #12
 80043aa:	d023      	beq.n	80043f4 <HAL_RCC_OscConfig+0x6c>
 80043ac:	2b08      	cmp	r3, #8
 80043ae:	d025      	beq.n	80043fc <HAL_RCC_OscConfig+0x74>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043b0:	6863      	ldr	r3, [r4, #4]
 80043b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043b6:	d04e      	beq.n	8004456 <HAL_RCC_OscConfig+0xce>
 80043b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043bc:	d051      	beq.n	8004462 <HAL_RCC_OscConfig+0xda>
 80043be:	4b9d      	ldr	r3, [pc, #628]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80043c6:	601a      	str	r2, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80043ce:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043d0:	6863      	ldr	r3, [r4, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d052      	beq.n	800447c <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d6:	f7fe f981 	bl	80026dc <HAL_GetTick>
 80043da:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043dc:	4e95      	ldr	r6, [pc, #596]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 80043de:	6833      	ldr	r3, [r6, #0]
 80043e0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80043e4:	d113      	bne.n	800440e <HAL_RCC_OscConfig+0x86>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043e6:	f7fe f979 	bl	80026dc <HAL_GetTick>
 80043ea:	1b40      	subs	r0, r0, r5
 80043ec:	2864      	cmp	r0, #100	; 0x64
 80043ee:	d9f6      	bls.n	80043de <HAL_RCC_OscConfig+0x56>
          {
            return HAL_TIMEOUT;
 80043f0:	2003      	movs	r0, #3
 80043f2:	e22c      	b.n	800484e <HAL_RCC_OscConfig+0x4c6>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043f4:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80043f8:	2a03      	cmp	r2, #3
 80043fa:	d1d9      	bne.n	80043b0 <HAL_RCC_OscConfig+0x28>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043fc:	4b8d      	ldr	r3, [pc, #564]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004404:	d003      	beq.n	800440e <HAL_RCC_OscConfig+0x86>
 8004406:	6863      	ldr	r3, [r4, #4]
 8004408:	2b00      	cmp	r3, #0
 800440a:	f000 8219 	beq.w	8004840 <HAL_RCC_OscConfig+0x4b8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800440e:	6823      	ldr	r3, [r4, #0]
 8004410:	f013 0f02 	tst.w	r3, #2
 8004414:	d05d      	beq.n	80044d2 <HAL_RCC_OscConfig+0x14a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004416:	4a87      	ldr	r2, [pc, #540]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 8004418:	6893      	ldr	r3, [r2, #8]
 800441a:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800441e:	68d2      	ldr	r2, [r2, #12]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004420:	2b0c      	cmp	r3, #12
 8004422:	d03a      	beq.n	800449a <HAL_RCC_OscConfig+0x112>
 8004424:	2b04      	cmp	r3, #4
 8004426:	d03c      	beq.n	80044a2 <HAL_RCC_OscConfig+0x11a>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004428:	68e3      	ldr	r3, [r4, #12]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d077      	beq.n	800451e <HAL_RCC_OscConfig+0x196>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800442e:	4a81      	ldr	r2, [pc, #516]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 8004430:	6813      	ldr	r3, [r2, #0]
 8004432:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004436:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004438:	f7fe f950 	bl	80026dc <HAL_GetTick>
 800443c:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800443e:	4e7d      	ldr	r6, [pc, #500]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 8004440:	6833      	ldr	r3, [r6, #0]
 8004442:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004446:	d161      	bne.n	800450c <HAL_RCC_OscConfig+0x184>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004448:	f7fe f948 	bl	80026dc <HAL_GetTick>
 800444c:	1b40      	subs	r0, r0, r5
 800444e:	2802      	cmp	r0, #2
 8004450:	d9f6      	bls.n	8004440 <HAL_RCC_OscConfig+0xb8>
          {
            return HAL_TIMEOUT;
 8004452:	2003      	movs	r0, #3
 8004454:	e1fb      	b.n	800484e <HAL_RCC_OscConfig+0x4c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004456:	4a77      	ldr	r2, [pc, #476]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 8004458:	6813      	ldr	r3, [r2, #0]
 800445a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800445e:	6013      	str	r3, [r2, #0]
 8004460:	e7b6      	b.n	80043d0 <HAL_RCC_OscConfig+0x48>
 8004462:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004466:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004470:	601a      	str	r2, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004478:	601a      	str	r2, [r3, #0]
 800447a:	e7a9      	b.n	80043d0 <HAL_RCC_OscConfig+0x48>
        tickstart = HAL_GetTick();
 800447c:	f7fe f92e 	bl	80026dc <HAL_GetTick>
 8004480:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004482:	4e6c      	ldr	r6, [pc, #432]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 8004484:	6833      	ldr	r3, [r6, #0]
 8004486:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800448a:	d0c0      	beq.n	800440e <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800448c:	f7fe f926 	bl	80026dc <HAL_GetTick>
 8004490:	1b40      	subs	r0, r0, r5
 8004492:	2864      	cmp	r0, #100	; 0x64
 8004494:	d9f6      	bls.n	8004484 <HAL_RCC_OscConfig+0xfc>
            return HAL_TIMEOUT;
 8004496:	2003      	movs	r0, #3
 8004498:	e1d9      	b.n	800484e <HAL_RCC_OscConfig+0x4c6>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800449a:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800449e:	2a02      	cmp	r2, #2
 80044a0:	d1c2      	bne.n	8004428 <HAL_RCC_OscConfig+0xa0>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044a2:	4b64      	ldr	r3, [pc, #400]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80044aa:	d003      	beq.n	80044b4 <HAL_RCC_OscConfig+0x12c>
 80044ac:	68e3      	ldr	r3, [r4, #12]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f000 81c8 	beq.w	8004844 <HAL_RCC_OscConfig+0x4bc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044b4:	4a5f      	ldr	r2, [pc, #380]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 80044b6:	6853      	ldr	r3, [r2, #4]
 80044b8:	6921      	ldr	r1, [r4, #16]
 80044ba:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80044be:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80044c2:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80044c4:	4b5c      	ldr	r3, [pc, #368]	; (8004638 <HAL_RCC_OscConfig+0x2b0>)
 80044c6:	6818      	ldr	r0, [r3, #0]
 80044c8:	f7fe f8c4 	bl	8002654 <HAL_InitTick>
 80044cc:	2800      	cmp	r0, #0
 80044ce:	f040 81bb 	bne.w	8004848 <HAL_RCC_OscConfig+0x4c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044d2:	6823      	ldr	r3, [r4, #0]
 80044d4:	f013 0f08 	tst.w	r3, #8
 80044d8:	d04c      	beq.n	8004574 <HAL_RCC_OscConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044da:	6963      	ldr	r3, [r4, #20]
 80044dc:	b39b      	cbz	r3, 8004546 <HAL_RCC_OscConfig+0x1be>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044de:	4a55      	ldr	r2, [pc, #340]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 80044e0:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80044e4:	f043 0301 	orr.w	r3, r3, #1
 80044e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ec:	f7fe f8f6 	bl	80026dc <HAL_GetTick>
 80044f0:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044f2:	4e50      	ldr	r6, [pc, #320]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 80044f4:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 80044f8:	f013 0f02 	tst.w	r3, #2
 80044fc:	d13a      	bne.n	8004574 <HAL_RCC_OscConfig+0x1ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044fe:	f7fe f8ed 	bl	80026dc <HAL_GetTick>
 8004502:	1b40      	subs	r0, r0, r5
 8004504:	2802      	cmp	r0, #2
 8004506:	d9f5      	bls.n	80044f4 <HAL_RCC_OscConfig+0x16c>
        {
          return HAL_TIMEOUT;
 8004508:	2003      	movs	r0, #3
 800450a:	e1a0      	b.n	800484e <HAL_RCC_OscConfig+0x4c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800450c:	4a49      	ldr	r2, [pc, #292]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 800450e:	6853      	ldr	r3, [r2, #4]
 8004510:	6921      	ldr	r1, [r4, #16]
 8004512:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004516:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800451a:	6053      	str	r3, [r2, #4]
 800451c:	e7d9      	b.n	80044d2 <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_HSI_DISABLE();
 800451e:	4a45      	ldr	r2, [pc, #276]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 8004520:	6813      	ldr	r3, [r2, #0]
 8004522:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004526:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004528:	f7fe f8d8 	bl	80026dc <HAL_GetTick>
 800452c:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800452e:	4e41      	ldr	r6, [pc, #260]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 8004530:	6833      	ldr	r3, [r6, #0]
 8004532:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004536:	d0cc      	beq.n	80044d2 <HAL_RCC_OscConfig+0x14a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004538:	f7fe f8d0 	bl	80026dc <HAL_GetTick>
 800453c:	1b40      	subs	r0, r0, r5
 800453e:	2802      	cmp	r0, #2
 8004540:	d9f6      	bls.n	8004530 <HAL_RCC_OscConfig+0x1a8>
            return HAL_TIMEOUT;
 8004542:	2003      	movs	r0, #3
 8004544:	e183      	b.n	800484e <HAL_RCC_OscConfig+0x4c6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004546:	4a3b      	ldr	r2, [pc, #236]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 8004548:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800454c:	f023 0301 	bic.w	r3, r3, #1
 8004550:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004554:	f7fe f8c2 	bl	80026dc <HAL_GetTick>
 8004558:	4605      	mov	r5, r0

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800455a:	4e36      	ldr	r6, [pc, #216]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 800455c:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8004560:	f013 0f02 	tst.w	r3, #2
 8004564:	d006      	beq.n	8004574 <HAL_RCC_OscConfig+0x1ec>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004566:	f7fe f8b9 	bl	80026dc <HAL_GetTick>
 800456a:	1b40      	subs	r0, r0, r5
 800456c:	2802      	cmp	r0, #2
 800456e:	d9f5      	bls.n	800455c <HAL_RCC_OscConfig+0x1d4>
        {
          return HAL_TIMEOUT;
 8004570:	2003      	movs	r0, #3
 8004572:	e16c      	b.n	800484e <HAL_RCC_OscConfig+0x4c6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004574:	6823      	ldr	r3, [r4, #0]
 8004576:	f013 0f04 	tst.w	r3, #4
 800457a:	f000 8082 	beq.w	8004682 <HAL_RCC_OscConfig+0x2fa>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800457e:	4b2d      	ldr	r3, [pc, #180]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 8004580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004582:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004586:	d136      	bne.n	80045f6 <HAL_RCC_OscConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004588:	4b2a      	ldr	r3, [pc, #168]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 800458a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800458c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004590:	659a      	str	r2, [r3, #88]	; 0x58
 8004592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004598:	9301      	str	r3, [sp, #4]
 800459a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800459c:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800459e:	4b27      	ldr	r3, [pc, #156]	; (800463c <HAL_RCC_OscConfig+0x2b4>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80045a6:	d028      	beq.n	80045fa <HAL_RCC_OscConfig+0x272>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045a8:	68a3      	ldr	r3, [r4, #8]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d039      	beq.n	8004622 <HAL_RCC_OscConfig+0x29a>
 80045ae:	2b05      	cmp	r3, #5
 80045b0:	d046      	beq.n	8004640 <HAL_RCC_OscConfig+0x2b8>
 80045b2:	4b20      	ldr	r3, [pc, #128]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 80045b4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80045b8:	f022 0201 	bic.w	r2, r2, #1
 80045bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80045c0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80045c4:	f022 0204 	bic.w	r2, r2, #4
 80045c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045cc:	68a3      	ldr	r3, [r4, #8]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d044      	beq.n	800465c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045d2:	f7fe f883 	bl	80026dc <HAL_GetTick>
 80045d6:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045d8:	4f16      	ldr	r7, [pc, #88]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045da:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80045e2:	f013 0f02 	tst.w	r3, #2
 80045e6:	d14b      	bne.n	8004680 <HAL_RCC_OscConfig+0x2f8>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045e8:	f7fe f878 	bl	80026dc <HAL_GetTick>
 80045ec:	1b80      	subs	r0, r0, r6
 80045ee:	4540      	cmp	r0, r8
 80045f0:	d9f5      	bls.n	80045de <HAL_RCC_OscConfig+0x256>
        {
          return HAL_TIMEOUT;
 80045f2:	2003      	movs	r0, #3
 80045f4:	e12b      	b.n	800484e <HAL_RCC_OscConfig+0x4c6>
    FlagStatus       pwrclkchanged = RESET;
 80045f6:	2500      	movs	r5, #0
 80045f8:	e7d1      	b.n	800459e <HAL_RCC_OscConfig+0x216>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045fa:	4a10      	ldr	r2, [pc, #64]	; (800463c <HAL_RCC_OscConfig+0x2b4>)
 80045fc:	6813      	ldr	r3, [r2, #0]
 80045fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004602:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004604:	f7fe f86a 	bl	80026dc <HAL_GetTick>
 8004608:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800460a:	4f0c      	ldr	r7, [pc, #48]	; (800463c <HAL_RCC_OscConfig+0x2b4>)
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004612:	d1c9      	bne.n	80045a8 <HAL_RCC_OscConfig+0x220>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004614:	f7fe f862 	bl	80026dc <HAL_GetTick>
 8004618:	1b80      	subs	r0, r0, r6
 800461a:	2802      	cmp	r0, #2
 800461c:	d9f6      	bls.n	800460c <HAL_RCC_OscConfig+0x284>
          return HAL_TIMEOUT;
 800461e:	2003      	movs	r0, #3
 8004620:	e115      	b.n	800484e <HAL_RCC_OscConfig+0x4c6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004622:	4a04      	ldr	r2, [pc, #16]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 8004624:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004628:	f043 0301 	orr.w	r3, r3, #1
 800462c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004630:	e7cc      	b.n	80045cc <HAL_RCC_OscConfig+0x244>
 8004632:	bf00      	nop
 8004634:	40021000 	.word	0x40021000
 8004638:	20000048 	.word	0x20000048
 800463c:	40007000 	.word	0x40007000
 8004640:	4b8a      	ldr	r3, [pc, #552]	; (800486c <HAL_RCC_OscConfig+0x4e4>)
 8004642:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004646:	f042 0204 	orr.w	r2, r2, #4
 800464a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800464e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004652:	f042 0201 	orr.w	r2, r2, #1
 8004656:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800465a:	e7b7      	b.n	80045cc <HAL_RCC_OscConfig+0x244>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800465c:	f7fe f83e 	bl	80026dc <HAL_GetTick>
 8004660:	4606      	mov	r6, r0

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004662:	4f82      	ldr	r7, [pc, #520]	; (800486c <HAL_RCC_OscConfig+0x4e4>)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004664:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004668:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800466c:	f013 0f02 	tst.w	r3, #2
 8004670:	d006      	beq.n	8004680 <HAL_RCC_OscConfig+0x2f8>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004672:	f7fe f833 	bl	80026dc <HAL_GetTick>
 8004676:	1b80      	subs	r0, r0, r6
 8004678:	4540      	cmp	r0, r8
 800467a:	d9f5      	bls.n	8004668 <HAL_RCC_OscConfig+0x2e0>
        {
          return HAL_TIMEOUT;
 800467c:	2003      	movs	r0, #3
 800467e:	e0e6      	b.n	800484e <HAL_RCC_OscConfig+0x4c6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004680:	b9e5      	cbnz	r5, 80046bc <HAL_RCC_OscConfig+0x334>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004682:	6823      	ldr	r3, [r4, #0]
 8004684:	f013 0f20 	tst.w	r3, #32
 8004688:	d035      	beq.n	80046f6 <HAL_RCC_OscConfig+0x36e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800468a:	69a3      	ldr	r3, [r4, #24]
 800468c:	b1e3      	cbz	r3, 80046c8 <HAL_RCC_OscConfig+0x340>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800468e:	4a77      	ldr	r2, [pc, #476]	; (800486c <HAL_RCC_OscConfig+0x4e4>)
 8004690:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8004694:	f043 0301 	orr.w	r3, r3, #1
 8004698:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800469c:	f7fe f81e 	bl	80026dc <HAL_GetTick>
 80046a0:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80046a2:	4e72      	ldr	r6, [pc, #456]	; (800486c <HAL_RCC_OscConfig+0x4e4>)
 80046a4:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 80046a8:	f013 0f02 	tst.w	r3, #2
 80046ac:	d123      	bne.n	80046f6 <HAL_RCC_OscConfig+0x36e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046ae:	f7fe f815 	bl	80026dc <HAL_GetTick>
 80046b2:	1b40      	subs	r0, r0, r5
 80046b4:	2802      	cmp	r0, #2
 80046b6:	d9f5      	bls.n	80046a4 <HAL_RCC_OscConfig+0x31c>
        {
          return HAL_TIMEOUT;
 80046b8:	2003      	movs	r0, #3
 80046ba:	e0c8      	b.n	800484e <HAL_RCC_OscConfig+0x4c6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80046bc:	4a6b      	ldr	r2, [pc, #428]	; (800486c <HAL_RCC_OscConfig+0x4e4>)
 80046be:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80046c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046c4:	6593      	str	r3, [r2, #88]	; 0x58
 80046c6:	e7dc      	b.n	8004682 <HAL_RCC_OscConfig+0x2fa>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80046c8:	4a68      	ldr	r2, [pc, #416]	; (800486c <HAL_RCC_OscConfig+0x4e4>)
 80046ca:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 80046ce:	f023 0301 	bic.w	r3, r3, #1
 80046d2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046d6:	f7fe f801 	bl	80026dc <HAL_GetTick>
 80046da:	4605      	mov	r5, r0

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80046dc:	4e63      	ldr	r6, [pc, #396]	; (800486c <HAL_RCC_OscConfig+0x4e4>)
 80046de:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 80046e2:	f013 0f02 	tst.w	r3, #2
 80046e6:	d006      	beq.n	80046f6 <HAL_RCC_OscConfig+0x36e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046e8:	f7fd fff8 	bl	80026dc <HAL_GetTick>
 80046ec:	1b40      	subs	r0, r0, r5
 80046ee:	2802      	cmp	r0, #2
 80046f0:	d9f5      	bls.n	80046de <HAL_RCC_OscConfig+0x356>
        {
          return HAL_TIMEOUT;
 80046f2:	2003      	movs	r0, #3
 80046f4:	e0ab      	b.n	800484e <HAL_RCC_OscConfig+0x4c6>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80046f6:	69e3      	ldr	r3, [r4, #28]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f000 80a7 	beq.w	800484c <HAL_RCC_OscConfig+0x4c4>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046fe:	4a5b      	ldr	r2, [pc, #364]	; (800486c <HAL_RCC_OscConfig+0x4e4>)
 8004700:	6892      	ldr	r2, [r2, #8]
 8004702:	f002 020c 	and.w	r2, r2, #12
 8004706:	2a0c      	cmp	r2, #12
 8004708:	d069      	beq.n	80047de <HAL_RCC_OscConfig+0x456>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800470a:	2b02      	cmp	r3, #2
 800470c:	d01d      	beq.n	800474a <HAL_RCC_OscConfig+0x3c2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800470e:	4b57      	ldr	r3, [pc, #348]	; (800486c <HAL_RCC_OscConfig+0x4e4>)
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004716:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004718:	68da      	ldr	r2, [r3, #12]
 800471a:	f022 0203 	bic.w	r2, r2, #3
 800471e:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004720:	68da      	ldr	r2, [r3, #12]
 8004722:	f022 7288 	bic.w	r2, r2, #17825792	; 0x1100000
 8004726:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800472a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800472c:	f7fd ffd6 	bl	80026dc <HAL_GetTick>
 8004730:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004732:	4d4e      	ldr	r5, [pc, #312]	; (800486c <HAL_RCC_OscConfig+0x4e4>)
 8004734:	682b      	ldr	r3, [r5, #0]
 8004736:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800473a:	d04e      	beq.n	80047da <HAL_RCC_OscConfig+0x452>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800473c:	f7fd ffce 	bl	80026dc <HAL_GetTick>
 8004740:	1b00      	subs	r0, r0, r4
 8004742:	2802      	cmp	r0, #2
 8004744:	d9f6      	bls.n	8004734 <HAL_RCC_OscConfig+0x3ac>
          {
            return HAL_TIMEOUT;
 8004746:	2003      	movs	r0, #3
 8004748:	e081      	b.n	800484e <HAL_RCC_OscConfig+0x4c6>
        __HAL_RCC_PLL_DISABLE();
 800474a:	4a48      	ldr	r2, [pc, #288]	; (800486c <HAL_RCC_OscConfig+0x4e4>)
 800474c:	6813      	ldr	r3, [r2, #0]
 800474e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004752:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004754:	f7fd ffc2 	bl	80026dc <HAL_GetTick>
 8004758:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800475a:	4e44      	ldr	r6, [pc, #272]	; (800486c <HAL_RCC_OscConfig+0x4e4>)
 800475c:	6833      	ldr	r3, [r6, #0]
 800475e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004762:	d006      	beq.n	8004772 <HAL_RCC_OscConfig+0x3ea>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004764:	f7fd ffba 	bl	80026dc <HAL_GetTick>
 8004768:	1b40      	subs	r0, r0, r5
 800476a:	2802      	cmp	r0, #2
 800476c:	d9f6      	bls.n	800475c <HAL_RCC_OscConfig+0x3d4>
            return HAL_TIMEOUT;
 800476e:	2003      	movs	r0, #3
 8004770:	e06d      	b.n	800484e <HAL_RCC_OscConfig+0x4c6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004772:	4a3e      	ldr	r2, [pc, #248]	; (800486c <HAL_RCC_OscConfig+0x4e4>)
 8004774:	68d1      	ldr	r1, [r2, #12]
 8004776:	4b3e      	ldr	r3, [pc, #248]	; (8004870 <HAL_RCC_OscConfig+0x4e8>)
 8004778:	400b      	ands	r3, r1
 800477a:	6a21      	ldr	r1, [r4, #32]
 800477c:	430b      	orrs	r3, r1
 800477e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004780:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004784:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004786:	ea43 63c1 	orr.w	r3, r3, r1, lsl #27
 800478a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800478c:	3901      	subs	r1, #1
 800478e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8004792:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004794:	0849      	lsrs	r1, r1, #1
 8004796:	3901      	subs	r1, #1
 8004798:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 800479c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800479e:	0849      	lsrs	r1, r1, #1
 80047a0:	3901      	subs	r1, #1
 80047a2:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 80047a6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 80047a8:	6813      	ldr	r3, [r2, #0]
 80047aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047ae:	6013      	str	r3, [r2, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047b0:	68d3      	ldr	r3, [r2, #12]
 80047b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047b6:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 80047b8:	f7fd ff90 	bl	80026dc <HAL_GetTick>
 80047bc:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047be:	4d2b      	ldr	r5, [pc, #172]	; (800486c <HAL_RCC_OscConfig+0x4e4>)
 80047c0:	682b      	ldr	r3, [r5, #0]
 80047c2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80047c6:	d106      	bne.n	80047d6 <HAL_RCC_OscConfig+0x44e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047c8:	f7fd ff88 	bl	80026dc <HAL_GetTick>
 80047cc:	1b00      	subs	r0, r0, r4
 80047ce:	2802      	cmp	r0, #2
 80047d0:	d9f6      	bls.n	80047c0 <HAL_RCC_OscConfig+0x438>
            return HAL_TIMEOUT;
 80047d2:	2003      	movs	r0, #3
 80047d4:	e03b      	b.n	800484e <HAL_RCC_OscConfig+0x4c6>
      }
    }
  }
  }

  return HAL_OK;
 80047d6:	2000      	movs	r0, #0
 80047d8:	e039      	b.n	800484e <HAL_RCC_OscConfig+0x4c6>
 80047da:	2000      	movs	r0, #0
 80047dc:	e037      	b.n	800484e <HAL_RCC_OscConfig+0x4c6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d038      	beq.n	8004854 <HAL_RCC_OscConfig+0x4cc>
      temp_pllckcfg = RCC->PLLCFGR;
 80047e2:	4b22      	ldr	r3, [pc, #136]	; (800486c <HAL_RCC_OscConfig+0x4e4>)
 80047e4:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047e6:	f003 0103 	and.w	r1, r3, #3
 80047ea:	6a22      	ldr	r2, [r4, #32]
 80047ec:	4291      	cmp	r1, r2
 80047ee:	d133      	bne.n	8004858 <HAL_RCC_OscConfig+0x4d0>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80047f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80047f4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80047f6:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047f8:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80047fc:	d12e      	bne.n	800485c <HAL_RCC_OscConfig+0x4d4>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80047fe:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004802:	6aa1      	ldr	r1, [r4, #40]	; 0x28
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004804:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8004808:	d12a      	bne.n	8004860 <HAL_RCC_OscConfig+0x4d8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800480a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800480e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004810:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8004814:	d126      	bne.n	8004864 <HAL_RCC_OscConfig+0x4dc>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004816:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 800481a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800481c:	0852      	lsrs	r2, r2, #1
 800481e:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004820:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8004824:	d120      	bne.n	8004868 <HAL_RCC_OscConfig+0x4e0>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004826:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004828:	0852      	lsrs	r2, r2, #1
 800482a:	3a01      	subs	r2, #1
 800482c:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004830:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
    return HAL_ERROR;
 8004834:	bf14      	ite	ne
 8004836:	2001      	movne	r0, #1
 8004838:	2000      	moveq	r0, #0
 800483a:	e008      	b.n	800484e <HAL_RCC_OscConfig+0x4c6>
 800483c:	2001      	movs	r0, #1
}
 800483e:	4770      	bx	lr
        return HAL_ERROR;
 8004840:	2001      	movs	r0, #1
 8004842:	e004      	b.n	800484e <HAL_RCC_OscConfig+0x4c6>
        return HAL_ERROR;
 8004844:	2001      	movs	r0, #1
 8004846:	e002      	b.n	800484e <HAL_RCC_OscConfig+0x4c6>
          return HAL_ERROR;
 8004848:	2001      	movs	r0, #1
 800484a:	e000      	b.n	800484e <HAL_RCC_OscConfig+0x4c6>
  return HAL_OK;
 800484c:	2000      	movs	r0, #0
}
 800484e:	b002      	add	sp, #8
 8004850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8004854:	2001      	movs	r0, #1
 8004856:	e7fa      	b.n	800484e <HAL_RCC_OscConfig+0x4c6>
        return HAL_ERROR;
 8004858:	2001      	movs	r0, #1
 800485a:	e7f8      	b.n	800484e <HAL_RCC_OscConfig+0x4c6>
 800485c:	2001      	movs	r0, #1
 800485e:	e7f6      	b.n	800484e <HAL_RCC_OscConfig+0x4c6>
 8004860:	2001      	movs	r0, #1
 8004862:	e7f4      	b.n	800484e <HAL_RCC_OscConfig+0x4c6>
 8004864:	2001      	movs	r0, #1
 8004866:	e7f2      	b.n	800484e <HAL_RCC_OscConfig+0x4c6>
 8004868:	2001      	movs	r0, #1
 800486a:	e7f0      	b.n	800484e <HAL_RCC_OscConfig+0x4c6>
 800486c:	40021000 	.word	0x40021000
 8004870:	019f800c 	.word	0x019f800c

08004874 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004874:	b570      	push	{r4, r5, r6, lr}
 8004876:	b086      	sub	sp, #24
 8004878:	4604      	mov	r4, r0
 800487a:	460d      	mov	r5, r1
 800487c:	4616      	mov	r6, r2

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 800487e:	2302      	movs	r3, #2
 8004880:	9302      	str	r3, [sp, #8]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8004882:	2303      	movs	r3, #3
 8004884:	9304      	str	r3, [sp, #16]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 8004886:	2300      	movs	r3, #0
 8004888:	9303      	str	r3, [sp, #12]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 800488a:	f3c0 4003 	ubfx	r0, r0, #16, #4

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 800488e:	4a0f      	ldr	r2, [pc, #60]	; (80048cc <HAL_RCC_MCOConfig+0x58>)
 8004890:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8004892:	2301      	movs	r3, #1
 8004894:	4083      	lsls	r3, r0
 8004896:	430b      	orrs	r3, r1
 8004898:	64d3      	str	r3, [r2, #76]	; 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 800489a:	b2a3      	uxth	r3, r4
 800489c:	9301      	str	r3, [sp, #4]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 800489e:	f3c4 5307 	ubfx	r3, r4, #20, #8
 80048a2:	9305      	str	r3, [sp, #20]
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 80048a4:	f500 1090 	add.w	r0, r0, #1179648	; 0x120000
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 80048a8:	a901      	add	r1, sp, #4
 80048aa:	0280      	lsls	r0, r0, #10
 80048ac:	f7ff fbf0 	bl	8004090 <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 80048b0:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 80048b4:	d107      	bne.n	80048c6 <HAL_RCC_MCOConfig+0x52>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 80048b6:	4b05      	ldr	r3, [pc, #20]	; (80048cc <HAL_RCC_MCOConfig+0x58>)
 80048b8:	6899      	ldr	r1, [r3, #8]
 80048ba:	f021 41fe 	bic.w	r1, r1, #2130706432	; 0x7f000000
 80048be:	ea41 0206 	orr.w	r2, r1, r6
 80048c2:	432a      	orrs	r2, r5
 80048c4:	609a      	str	r2, [r3, #8]
  }
}
 80048c6:	b006      	add	sp, #24
 80048c8:	bd70      	pop	{r4, r5, r6, pc}
 80048ca:	bf00      	nop
 80048cc:	40021000 	.word	0x40021000

080048d0 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80048d0:	4b17      	ldr	r3, [pc, #92]	; (8004930 <HAL_RCC_GetSysClockFreq+0x60>)
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f003 030c 	and.w	r3, r3, #12
 80048d8:	2b04      	cmp	r3, #4
 80048da:	d025      	beq.n	8004928 <HAL_RCC_GetSysClockFreq+0x58>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80048dc:	4b14      	ldr	r3, [pc, #80]	; (8004930 <HAL_RCC_GetSysClockFreq+0x60>)
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f003 030c 	and.w	r3, r3, #12
 80048e4:	2b08      	cmp	r3, #8
 80048e6:	d021      	beq.n	800492c <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80048e8:	4b11      	ldr	r3, [pc, #68]	; (8004930 <HAL_RCC_GetSysClockFreq+0x60>)
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f003 030c 	and.w	r3, r3, #12
 80048f0:	2b0c      	cmp	r3, #12
 80048f2:	d001      	beq.n	80048f8 <HAL_RCC_GetSysClockFreq+0x28>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 80048f4:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 80048f6:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80048f8:	4b0d      	ldr	r3, [pc, #52]	; (8004930 <HAL_RCC_GetSysClockFreq+0x60>)
 80048fa:	68da      	ldr	r2, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004902:	3301      	adds	r3, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004904:	4a0a      	ldr	r2, [pc, #40]	; (8004930 <HAL_RCC_GetSysClockFreq+0x60>)
 8004906:	68d0      	ldr	r0, [r2, #12]
 8004908:	f3c0 2006 	ubfx	r0, r0, #8, #7
 800490c:	4a09      	ldr	r2, [pc, #36]	; (8004934 <HAL_RCC_GetSysClockFreq+0x64>)
 800490e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004912:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004916:	4b06      	ldr	r3, [pc, #24]	; (8004930 <HAL_RCC_GetSysClockFreq+0x60>)
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	f3c3 6341 	ubfx	r3, r3, #25, #2
 800491e:	3301      	adds	r3, #1
 8004920:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8004922:	fbb0 f0f3 	udiv	r0, r0, r3
 8004926:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8004928:	4802      	ldr	r0, [pc, #8]	; (8004934 <HAL_RCC_GetSysClockFreq+0x64>)
 800492a:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 800492c:	4801      	ldr	r0, [pc, #4]	; (8004934 <HAL_RCC_GetSysClockFreq+0x64>)
 800492e:	4770      	bx	lr
 8004930:	40021000 	.word	0x40021000
 8004934:	00f42400 	.word	0x00f42400

08004938 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8004938:	2800      	cmp	r0, #0
 800493a:	f000 80b9 	beq.w	8004ab0 <HAL_RCC_ClockConfig+0x178>
{
 800493e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004942:	460c      	mov	r4, r1
 8004944:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004946:	4b84      	ldr	r3, [pc, #528]	; (8004b58 <HAL_RCC_ClockConfig+0x220>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 030f 	and.w	r3, r3, #15
 800494e:	428b      	cmp	r3, r1
 8004950:	d20b      	bcs.n	800496a <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004952:	4a81      	ldr	r2, [pc, #516]	; (8004b58 <HAL_RCC_ClockConfig+0x220>)
 8004954:	6813      	ldr	r3, [r2, #0]
 8004956:	f023 030f 	bic.w	r3, r3, #15
 800495a:	430b      	orrs	r3, r1
 800495c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800495e:	6813      	ldr	r3, [r2, #0]
 8004960:	f003 030f 	and.w	r3, r3, #15
 8004964:	428b      	cmp	r3, r1
 8004966:	f040 80a5 	bne.w	8004ab4 <HAL_RCC_ClockConfig+0x17c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800496a:	682b      	ldr	r3, [r5, #0]
 800496c:	f013 0f01 	tst.w	r3, #1
 8004970:	f000 80a4 	beq.w	8004abc <HAL_RCC_ClockConfig+0x184>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004974:	686a      	ldr	r2, [r5, #4]
 8004976:	2a03      	cmp	r2, #3
 8004978:	d030      	beq.n	80049dc <HAL_RCC_ClockConfig+0xa4>
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800497a:	2a02      	cmp	r2, #2
 800497c:	d063      	beq.n	8004a46 <HAL_RCC_ClockConfig+0x10e>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800497e:	4b77      	ldr	r3, [pc, #476]	; (8004b5c <HAL_RCC_ClockConfig+0x224>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004986:	f000 8097 	beq.w	8004ab8 <HAL_RCC_ClockConfig+0x180>
      pllfreq = HAL_RCC_GetSysClockFreq();
 800498a:	f7ff ffa1 	bl	80048d0 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 800498e:	4b74      	ldr	r3, [pc, #464]	; (8004b60 <HAL_RCC_ClockConfig+0x228>)
 8004990:	4298      	cmp	r0, r3
 8004992:	d965      	bls.n	8004a60 <HAL_RCC_ClockConfig+0x128>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004994:	4a71      	ldr	r2, [pc, #452]	; (8004b5c <HAL_RCC_ClockConfig+0x224>)
 8004996:	6893      	ldr	r3, [r2, #8]
 8004998:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800499c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049a0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80049a2:	f04f 0980 	mov.w	r9, #128	; 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80049a6:	4a6d      	ldr	r2, [pc, #436]	; (8004b5c <HAL_RCC_ClockConfig+0x224>)
 80049a8:	6893      	ldr	r3, [r2, #8]
 80049aa:	f023 0303 	bic.w	r3, r3, #3
 80049ae:	6869      	ldr	r1, [r5, #4]
 80049b0:	430b      	orrs	r3, r1
 80049b2:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80049b4:	f7fd fe92 	bl	80026dc <HAL_GetTick>
 80049b8:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ba:	4f68      	ldr	r7, [pc, #416]	; (8004b5c <HAL_RCC_ClockConfig+0x224>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049bc:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	f003 030c 	and.w	r3, r3, #12
 80049c6:	686a      	ldr	r2, [r5, #4]
 80049c8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80049cc:	d04b      	beq.n	8004a66 <HAL_RCC_ClockConfig+0x12e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049ce:	f7fd fe85 	bl	80026dc <HAL_GetTick>
 80049d2:	1b80      	subs	r0, r0, r6
 80049d4:	4540      	cmp	r0, r8
 80049d6:	d9f3      	bls.n	80049c0 <HAL_RCC_ClockConfig+0x88>
        return HAL_TIMEOUT;
 80049d8:	2003      	movs	r0, #3
 80049da:	e0ba      	b.n	8004b52 <HAL_RCC_ClockConfig+0x21a>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049dc:	4a5f      	ldr	r2, [pc, #380]	; (8004b5c <HAL_RCC_ClockConfig+0x224>)
 80049de:	6812      	ldr	r2, [r2, #0]
 80049e0:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80049e4:	d101      	bne.n	80049ea <HAL_RCC_ClockConfig+0xb2>
        return HAL_ERROR;
 80049e6:	2001      	movs	r0, #1
 80049e8:	e0b3      	b.n	8004b52 <HAL_RCC_ClockConfig+0x21a>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80049ea:	495c      	ldr	r1, [pc, #368]	; (8004b5c <HAL_RCC_ClockConfig+0x224>)
 80049ec:	68ca      	ldr	r2, [r1, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80049ee:	68c9      	ldr	r1, [r1, #12]
 80049f0:	f3c1 1103 	ubfx	r1, r1, #4, #4
 80049f4:	3101      	adds	r1, #1
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80049f6:	4a59      	ldr	r2, [pc, #356]	; (8004b5c <HAL_RCC_ClockConfig+0x224>)
 80049f8:	68d2      	ldr	r2, [r2, #12]
 80049fa:	f3c2 2206 	ubfx	r2, r2, #8, #7
 80049fe:	4859      	ldr	r0, [pc, #356]	; (8004b64 <HAL_RCC_ClockConfig+0x22c>)
 8004a00:	fbb0 f1f1 	udiv	r1, r0, r1
 8004a04:	fb01 f202 	mul.w	r2, r1, r2
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a08:	4954      	ldr	r1, [pc, #336]	; (8004b5c <HAL_RCC_ClockConfig+0x224>)
 8004a0a:	68c9      	ldr	r1, [r1, #12]
 8004a0c:	f3c1 6141 	ubfx	r1, r1, #25, #2
 8004a10:	3101      	adds	r1, #1
 8004a12:	0049      	lsls	r1, r1, #1
  sysclockfreq = pllvco/pllr;
 8004a14:	fbb2 f2f1 	udiv	r2, r2, r1
      if(pllfreq > 80000000U)
 8004a18:	4951      	ldr	r1, [pc, #324]	; (8004b60 <HAL_RCC_ClockConfig+0x228>)
 8004a1a:	428a      	cmp	r2, r1
 8004a1c:	d91a      	bls.n	8004a54 <HAL_RCC_ClockConfig+0x11c>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004a1e:	4a4f      	ldr	r2, [pc, #316]	; (8004b5c <HAL_RCC_ClockConfig+0x224>)
 8004a20:	6892      	ldr	r2, [r2, #8]
 8004a22:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 8004a26:	d004      	beq.n	8004a32 <HAL_RCC_ClockConfig+0xfa>
 8004a28:	f013 0902 	ands.w	r9, r3, #2
 8004a2c:	d0bb      	beq.n	80049a6 <HAL_RCC_ClockConfig+0x6e>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004a2e:	68ab      	ldr	r3, [r5, #8]
 8004a30:	b99b      	cbnz	r3, 8004a5a <HAL_RCC_ClockConfig+0x122>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004a32:	4a4a      	ldr	r2, [pc, #296]	; (8004b5c <HAL_RCC_ClockConfig+0x224>)
 8004a34:	6893      	ldr	r3, [r2, #8]
 8004a36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a3e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004a40:	f04f 0980 	mov.w	r9, #128	; 0x80
 8004a44:	e7af      	b.n	80049a6 <HAL_RCC_ClockConfig+0x6e>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a46:	4b45      	ldr	r3, [pc, #276]	; (8004b5c <HAL_RCC_ClockConfig+0x224>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004a4e:	d19c      	bne.n	800498a <HAL_RCC_ClockConfig+0x52>
          return HAL_ERROR;
 8004a50:	2001      	movs	r0, #1
 8004a52:	e07e      	b.n	8004b52 <HAL_RCC_ClockConfig+0x21a>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004a54:	f04f 0900 	mov.w	r9, #0
 8004a58:	e7a5      	b.n	80049a6 <HAL_RCC_ClockConfig+0x6e>
 8004a5a:	f04f 0900 	mov.w	r9, #0
 8004a5e:	e7a2      	b.n	80049a6 <HAL_RCC_ClockConfig+0x6e>
 8004a60:	f04f 0900 	mov.w	r9, #0
 8004a64:	e79f      	b.n	80049a6 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a66:	682b      	ldr	r3, [r5, #0]
 8004a68:	f013 0f02 	tst.w	r3, #2
 8004a6c:	d129      	bne.n	8004ac2 <HAL_RCC_ClockConfig+0x18a>
    if(hpre == RCC_SYSCLK_DIV2)
 8004a6e:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 8004a72:	d140      	bne.n	8004af6 <HAL_RCC_ClockConfig+0x1be>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004a74:	4a39      	ldr	r2, [pc, #228]	; (8004b5c <HAL_RCC_ClockConfig+0x224>)
 8004a76:	6893      	ldr	r3, [r2, #8]
 8004a78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a7c:	6093      	str	r3, [r2, #8]
 8004a7e:	e03a      	b.n	8004af6 <HAL_RCC_ClockConfig+0x1be>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a80:	4a35      	ldr	r2, [pc, #212]	; (8004b58 <HAL_RCC_ClockConfig+0x220>)
 8004a82:	6813      	ldr	r3, [r2, #0]
 8004a84:	f023 030f 	bic.w	r3, r3, #15
 8004a88:	4323      	orrs	r3, r4
 8004a8a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004a8c:	f7fd fe26 	bl	80026dc <HAL_GetTick>
 8004a90:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a92:	4f31      	ldr	r7, [pc, #196]	; (8004b58 <HAL_RCC_ClockConfig+0x220>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a94:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	f003 030f 	and.w	r3, r3, #15
 8004a9e:	42a3      	cmp	r3, r4
 8004aa0:	d02f      	beq.n	8004b02 <HAL_RCC_ClockConfig+0x1ca>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004aa2:	f7fd fe1b 	bl	80026dc <HAL_GetTick>
 8004aa6:	1b80      	subs	r0, r0, r6
 8004aa8:	4540      	cmp	r0, r8
 8004aaa:	d9f5      	bls.n	8004a98 <HAL_RCC_ClockConfig+0x160>
        return HAL_TIMEOUT;
 8004aac:	2003      	movs	r0, #3
 8004aae:	e050      	b.n	8004b52 <HAL_RCC_ClockConfig+0x21a>
    return HAL_ERROR;
 8004ab0:	2001      	movs	r0, #1
}
 8004ab2:	4770      	bx	lr
      return HAL_ERROR;
 8004ab4:	2001      	movs	r0, #1
 8004ab6:	e04c      	b.n	8004b52 <HAL_RCC_ClockConfig+0x21a>
          return HAL_ERROR;
 8004ab8:	2001      	movs	r0, #1
 8004aba:	e04a      	b.n	8004b52 <HAL_RCC_ClockConfig+0x21a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004abc:	f013 0f02 	tst.w	r3, #2
 8004ac0:	d019      	beq.n	8004af6 <HAL_RCC_ClockConfig+0x1be>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ac2:	f013 0f04 	tst.w	r3, #4
 8004ac6:	d004      	beq.n	8004ad2 <HAL_RCC_ClockConfig+0x19a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ac8:	4a24      	ldr	r2, [pc, #144]	; (8004b5c <HAL_RCC_ClockConfig+0x224>)
 8004aca:	6893      	ldr	r3, [r2, #8]
 8004acc:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004ad0:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ad2:	682b      	ldr	r3, [r5, #0]
 8004ad4:	f013 0f08 	tst.w	r3, #8
 8004ad8:	d006      	beq.n	8004ae8 <HAL_RCC_ClockConfig+0x1b0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004ada:	4a20      	ldr	r2, [pc, #128]	; (8004b5c <HAL_RCC_ClockConfig+0x224>)
 8004adc:	6893      	ldr	r3, [r2, #8]
 8004ade:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004ae2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004ae6:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ae8:	4a1c      	ldr	r2, [pc, #112]	; (8004b5c <HAL_RCC_ClockConfig+0x224>)
 8004aea:	6893      	ldr	r3, [r2, #8]
 8004aec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004af0:	68a9      	ldr	r1, [r5, #8]
 8004af2:	430b      	orrs	r3, r1
 8004af4:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004af6:	4b18      	ldr	r3, [pc, #96]	; (8004b58 <HAL_RCC_ClockConfig+0x220>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 030f 	and.w	r3, r3, #15
 8004afe:	42a3      	cmp	r3, r4
 8004b00:	d8be      	bhi.n	8004a80 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b02:	682b      	ldr	r3, [r5, #0]
 8004b04:	f013 0f04 	tst.w	r3, #4
 8004b08:	d006      	beq.n	8004b18 <HAL_RCC_ClockConfig+0x1e0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b0a:	4a14      	ldr	r2, [pc, #80]	; (8004b5c <HAL_RCC_ClockConfig+0x224>)
 8004b0c:	6893      	ldr	r3, [r2, #8]
 8004b0e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004b12:	68e9      	ldr	r1, [r5, #12]
 8004b14:	430b      	orrs	r3, r1
 8004b16:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b18:	682b      	ldr	r3, [r5, #0]
 8004b1a:	f013 0f08 	tst.w	r3, #8
 8004b1e:	d007      	beq.n	8004b30 <HAL_RCC_ClockConfig+0x1f8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b20:	4a0e      	ldr	r2, [pc, #56]	; (8004b5c <HAL_RCC_ClockConfig+0x224>)
 8004b22:	6893      	ldr	r3, [r2, #8]
 8004b24:	6929      	ldr	r1, [r5, #16]
 8004b26:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004b2a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004b2e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b30:	f7ff fece 	bl	80048d0 <HAL_RCC_GetSysClockFreq>
 8004b34:	4b09      	ldr	r3, [pc, #36]	; (8004b5c <HAL_RCC_ClockConfig+0x224>)
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004b3c:	4a0a      	ldr	r2, [pc, #40]	; (8004b68 <HAL_RCC_ClockConfig+0x230>)
 8004b3e:	5cd3      	ldrb	r3, [r2, r3]
 8004b40:	f003 031f 	and.w	r3, r3, #31
 8004b44:	40d8      	lsrs	r0, r3
 8004b46:	4b09      	ldr	r3, [pc, #36]	; (8004b6c <HAL_RCC_ClockConfig+0x234>)
 8004b48:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8004b4a:	4b09      	ldr	r3, [pc, #36]	; (8004b70 <HAL_RCC_ClockConfig+0x238>)
 8004b4c:	6818      	ldr	r0, [r3, #0]
 8004b4e:	f7fd fd81 	bl	8002654 <HAL_InitTick>
}
 8004b52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b56:	bf00      	nop
 8004b58:	40022000 	.word	0x40022000
 8004b5c:	40021000 	.word	0x40021000
 8004b60:	04c4b400 	.word	0x04c4b400
 8004b64:	00f42400 	.word	0x00f42400
 8004b68:	08009c60 	.word	0x08009c60
 8004b6c:	20000040 	.word	0x20000040
 8004b70:	20000048 	.word	0x20000048

08004b74 <HAL_RCC_GetHCLKFreq>:
}
 8004b74:	4b01      	ldr	r3, [pc, #4]	; (8004b7c <HAL_RCC_GetHCLKFreq+0x8>)
 8004b76:	6818      	ldr	r0, [r3, #0]
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	20000040 	.word	0x20000040

08004b80 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004b80:	4b05      	ldr	r3, [pc, #20]	; (8004b98 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004b88:	4a04      	ldr	r2, [pc, #16]	; (8004b9c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004b8a:	5cd3      	ldrb	r3, [r2, r3]
 8004b8c:	f003 031f 	and.w	r3, r3, #31
 8004b90:	4a03      	ldr	r2, [pc, #12]	; (8004ba0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b92:	6810      	ldr	r0, [r2, #0]
}
 8004b94:	40d8      	lsrs	r0, r3
 8004b96:	4770      	bx	lr
 8004b98:	40021000 	.word	0x40021000
 8004b9c:	08009c70 	.word	0x08009c70
 8004ba0:	20000040 	.word	0x20000040

08004ba4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ba4:	4b05      	ldr	r3, [pc, #20]	; (8004bbc <HAL_RCC_GetPCLK2Freq+0x18>)
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004bac:	4a04      	ldr	r2, [pc, #16]	; (8004bc0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004bae:	5cd3      	ldrb	r3, [r2, r3]
 8004bb0:	f003 031f 	and.w	r3, r3, #31
 8004bb4:	4a03      	ldr	r2, [pc, #12]	; (8004bc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bb6:	6810      	ldr	r0, [r2, #0]
}
 8004bb8:	40d8      	lsrs	r0, r3
 8004bba:	4770      	bx	lr
 8004bbc:	40021000 	.word	0x40021000
 8004bc0:	08009c70 	.word	0x08009c70
 8004bc4:	20000040 	.word	0x20000040

08004bc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bcc:	b082      	sub	sp, #8
 8004bce:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004bd0:	6803      	ldr	r3, [r0, #0]
 8004bd2:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8004bd6:	d059      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bd8:	4bab      	ldr	r3, [pc, #684]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bdc:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004be0:	d125      	bne.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004be2:	4ba9      	ldr	r3, [pc, #676]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004be4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004be6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004bea:	659a      	str	r2, [r3, #88]	; 0x58
 8004bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bf2:	9301      	str	r3, [sp, #4]
 8004bf4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004bf6:	2701      	movs	r7, #1
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bf8:	4aa4      	ldr	r2, [pc, #656]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004bfa:	6813      	ldr	r3, [r2, #0]
 8004bfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c00:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c02:	f7fd fd6b 	bl	80026dc <HAL_GetTick>
 8004c06:	4605      	mov	r5, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c08:	4ea0      	ldr	r6, [pc, #640]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004c0a:	6833      	ldr	r3, [r6, #0]
 8004c0c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004c10:	f040 813e 	bne.w	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c14:	f7fd fd62 	bl	80026dc <HAL_GetTick>
 8004c18:	1b40      	subs	r0, r0, r5
 8004c1a:	2802      	cmp	r0, #2
 8004c1c:	d9f5      	bls.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        ret = HAL_TIMEOUT;
 8004c1e:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c20:	b3af      	cbz	r7, 8004c8e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c22:	4a99      	ldr	r2, [pc, #612]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004c24:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004c26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c2a:	6593      	str	r3, [r2, #88]	; 0x58
 8004c2c:	e02f      	b.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    FlagStatus       pwrclkchanged = RESET;
 8004c2e:	2700      	movs	r7, #0
 8004c30:	e7e2      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x30>
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c32:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d012      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x96>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c38:	4a93      	ldr	r2, [pc, #588]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004c3a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004c3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c42:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8004c46:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8004c4a:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c4e:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8004c52:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8004c56:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8004c5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c5e:	f013 0f01 	tst.w	r3, #1
 8004c62:	f000 811c 	beq.w	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
        tickstart = HAL_GetTick();
 8004c66:	f7fd fd39 	bl	80026dc <HAL_GetTick>
 8004c6a:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c6c:	4e86      	ldr	r6, [pc, #536]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c6e:	f241 3888 	movw	r8, #5000	; 0x1388
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c72:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8004c76:	f013 0f02 	tst.w	r3, #2
 8004c7a:	f040 8110 	bne.w	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c7e:	f7fd fd2d 	bl	80026dc <HAL_GetTick>
 8004c82:	1b40      	subs	r0, r0, r5
 8004c84:	4540      	cmp	r0, r8
 8004c86:	d9f4      	bls.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0xaa>
            ret = HAL_TIMEOUT;
 8004c88:	2003      	movs	r0, #3
 8004c8a:	e7c9      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x58>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c8c:	2000      	movs	r0, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c8e:	6823      	ldr	r3, [r4, #0]
 8004c90:	f013 0f01 	tst.w	r3, #1
 8004c94:	d008      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c96:	4a7c      	ldr	r2, [pc, #496]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004c98:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004c9c:	f023 0303 	bic.w	r3, r3, #3
 8004ca0:	6861      	ldr	r1, [r4, #4]
 8004ca2:	430b      	orrs	r3, r1
 8004ca4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ca8:	6823      	ldr	r3, [r4, #0]
 8004caa:	f013 0f02 	tst.w	r3, #2
 8004cae:	d008      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004cb0:	4a75      	ldr	r2, [pc, #468]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004cb2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004cb6:	f023 030c 	bic.w	r3, r3, #12
 8004cba:	68a1      	ldr	r1, [r4, #8]
 8004cbc:	430b      	orrs	r3, r1
 8004cbe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004cc2:	6823      	ldr	r3, [r4, #0]
 8004cc4:	f013 0f04 	tst.w	r3, #4
 8004cc8:	d008      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004cca:	4a6f      	ldr	r2, [pc, #444]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004ccc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004cd0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004cd4:	68e1      	ldr	r1, [r4, #12]
 8004cd6:	430b      	orrs	r3, r1
 8004cd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004cdc:	6823      	ldr	r3, [r4, #0]
 8004cde:	f013 0f08 	tst.w	r3, #8
 8004ce2:	d008      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ce4:	4a68      	ldr	r2, [pc, #416]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004ce6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004cea:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004cee:	6921      	ldr	r1, [r4, #16]
 8004cf0:	430b      	orrs	r3, r1
 8004cf2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cf6:	6823      	ldr	r3, [r4, #0]
 8004cf8:	f013 0f20 	tst.w	r3, #32
 8004cfc:	d008      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004cfe:	4a62      	ldr	r2, [pc, #392]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004d00:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004d04:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004d08:	6961      	ldr	r1, [r4, #20]
 8004d0a:	430b      	orrs	r3, r1
 8004d0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d10:	6823      	ldr	r3, [r4, #0]
 8004d12:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004d16:	d008      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d18:	4a5b      	ldr	r2, [pc, #364]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004d1a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004d1e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004d22:	69a1      	ldr	r1, [r4, #24]
 8004d24:	430b      	orrs	r3, r1
 8004d26:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d2a:	6823      	ldr	r3, [r4, #0]
 8004d2c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004d30:	d008      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d32:	4a55      	ldr	r2, [pc, #340]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004d34:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004d38:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004d3c:	69e1      	ldr	r1, [r4, #28]
 8004d3e:	430b      	orrs	r3, r1
 8004d40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d44:	6823      	ldr	r3, [r4, #0]
 8004d46:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004d4a:	d008      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d4c:	4a4e      	ldr	r2, [pc, #312]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004d4e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004d52:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004d56:	6a21      	ldr	r1, [r4, #32]
 8004d58:	430b      	orrs	r3, r1
 8004d5a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d5e:	6823      	ldr	r3, [r4, #0]
 8004d60:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004d64:	d008      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d66:	4a48      	ldr	r2, [pc, #288]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004d68:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004d6c:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8004d70:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004d72:	430b      	orrs	r3, r1
 8004d74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004d78:	6823      	ldr	r3, [r4, #0]
 8004d7a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004d7e:	d00c      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d80:	4a41      	ldr	r2, [pc, #260]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004d82:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004d86:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004d8a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004d8c:	430b      	orrs	r3, r1
 8004d8e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004d92:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004d94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d98:	d057      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x282>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004d9a:	6823      	ldr	r3, [r4, #0]
 8004d9c:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004da0:	d00c      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004da2:	4a39      	ldr	r2, [pc, #228]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004da4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004da8:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004dac:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004dae:	430b      	orrs	r3, r1
 8004db0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004db4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004db6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dba:	d04b      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004dbc:	6823      	ldr	r3, [r4, #0]
 8004dbe:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8004dc2:	d00c      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004dc4:	4a30      	ldr	r2, [pc, #192]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004dc6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004dca:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8004dce:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004dd0:	430b      	orrs	r3, r1
 8004dd2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004dd6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004dd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ddc:	d03f      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x296>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004dde:	6823      	ldr	r3, [r4, #0]
 8004de0:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004de4:	d00c      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004de6:	4a28      	ldr	r2, [pc, #160]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004de8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004dec:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004df0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004df2:	430b      	orrs	r3, r1
 8004df4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004df8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004dfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dfe:	d033      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e00:	6823      	ldr	r3, [r4, #0]
 8004e02:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004e06:	d00c      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e08:	4a1f      	ldr	r2, [pc, #124]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004e0a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004e0e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004e12:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004e14:	430b      	orrs	r3, r1
 8004e16:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004e1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e20:	d027      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004e22:	6823      	ldr	r3, [r4, #0]
 8004e24:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004e28:	d00c      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004e2a:	4a17      	ldr	r2, [pc, #92]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004e2c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004e30:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8004e34:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004e36:	430b      	orrs	r3, r1
 8004e38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004e3c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004e3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e42:	d01b      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  }

#endif /* QUADSPI */

  return status;
}
 8004e44:	b002      	add	sp, #8
 8004e46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e4a:	68d3      	ldr	r3, [r2, #12]
 8004e4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e50:	60d3      	str	r3, [r2, #12]
 8004e52:	e7a2      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e54:	68d3      	ldr	r3, [r2, #12]
 8004e56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e5a:	60d3      	str	r3, [r2, #12]
 8004e5c:	e7ae      	b.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e5e:	68d3      	ldr	r3, [r2, #12]
 8004e60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e64:	60d3      	str	r3, [r2, #12]
 8004e66:	e7ba      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x216>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e68:	68d3      	ldr	r3, [r2, #12]
 8004e6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e6e:	60d3      	str	r3, [r2, #12]
 8004e70:	e7c6      	b.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x238>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e72:	68d3      	ldr	r3, [r2, #12]
 8004e74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e78:	60d3      	str	r3, [r2, #12]
 8004e7a:	e7d2      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004e7c:	68d3      	ldr	r3, [r2, #12]
 8004e7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e82:	60d3      	str	r3, [r2, #12]
  return status;
 8004e84:	e7de      	b.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004e86:	bf00      	nop
 8004e88:	40021000 	.word	0x40021000
 8004e8c:	40007000 	.word	0x40007000
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e90:	4b08      	ldr	r3, [pc, #32]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e96:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004e9a:	f47f aeca 	bne.w	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x6a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e9e:	4a05      	ldr	r2, [pc, #20]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004ea0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004ea4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ea8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004eaa:	430b      	orrs	r3, r1
 8004eac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004eb0:	2000      	movs	r0, #0
 8004eb2:	e6b5      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8004eb4:	40021000 	.word	0x40021000

08004eb8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ebc:	b082      	sub	sp, #8
 8004ebe:	4681      	mov	r9, r0
 8004ec0:	460f      	mov	r7, r1
 8004ec2:	4616      	mov	r6, r2
 8004ec4:	461d      	mov	r5, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ec6:	f7fd fc09 	bl	80026dc <HAL_GetTick>
 8004eca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ecc:	442b      	add	r3, r5
 8004ece:	eba3 0800 	sub.w	r8, r3, r0
  tmp_tickstart = HAL_GetTick();
 8004ed2:	f7fd fc03 	bl	80026dc <HAL_GetTick>
 8004ed6:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004ed8:	4b2c      	ldr	r3, [pc, #176]	; (8004f8c <SPI_WaitFlagStateUntilTimeout+0xd4>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8004ee0:	fb08 f303 	mul.w	r3, r8, r3
 8004ee4:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ee6:	f8d9 2000 	ldr.w	r2, [r9]
 8004eea:	6894      	ldr	r4, [r2, #8]
 8004eec:	ea37 0404 	bics.w	r4, r7, r4
 8004ef0:	bf0c      	ite	eq
 8004ef2:	2301      	moveq	r3, #1
 8004ef4:	2300      	movne	r3, #0
 8004ef6:	42b3      	cmp	r3, r6
 8004ef8:	d044      	beq.n	8004f84 <SPI_WaitFlagStateUntilTimeout+0xcc>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004efa:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004efe:	d0f4      	beq.n	8004eea <SPI_WaitFlagStateUntilTimeout+0x32>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f00:	f7fd fbec 	bl	80026dc <HAL_GetTick>
 8004f04:	eba0 000a 	sub.w	r0, r0, sl
 8004f08:	4540      	cmp	r0, r8
 8004f0a:	d207      	bcs.n	8004f1c <SPI_WaitFlagStateUntilTimeout+0x64>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f0c:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	bf08      	it	eq
 8004f12:	4698      	moveq	r8, r3
      }
      count--;
 8004f14:	9b01      	ldr	r3, [sp, #4]
 8004f16:	3b01      	subs	r3, #1
 8004f18:	9301      	str	r3, [sp, #4]
 8004f1a:	e7e4      	b.n	8004ee6 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f1c:	f8d9 2000 	ldr.w	r2, [r9]
 8004f20:	6853      	ldr	r3, [r2, #4]
 8004f22:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8004f26:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f28:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004f2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f30:	d00c      	beq.n	8004f4c <SPI_WaitFlagStateUntilTimeout+0x94>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f32:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 8004f36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f3a:	d016      	beq.n	8004f6a <SPI_WaitFlagStateUntilTimeout+0xb2>
        hspi->State = HAL_SPI_STATE_READY;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	f889 305d 	strb.w	r3, [r9, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8004f42:	2300      	movs	r3, #0
 8004f44:	f889 305c 	strb.w	r3, [r9, #92]	; 0x5c
        return HAL_TIMEOUT;
 8004f48:	2003      	movs	r0, #3
 8004f4a:	e01c      	b.n	8004f86 <SPI_WaitFlagStateUntilTimeout+0xce>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f4c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8004f50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f54:	d002      	beq.n	8004f5c <SPI_WaitFlagStateUntilTimeout+0xa4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f5a:	d1ea      	bne.n	8004f32 <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 8004f5c:	f8d9 2000 	ldr.w	r2, [r9]
 8004f60:	6813      	ldr	r3, [r2, #0]
 8004f62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f66:	6013      	str	r3, [r2, #0]
 8004f68:	e7e3      	b.n	8004f32 <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 8004f6a:	f8d9 2000 	ldr.w	r2, [r9]
 8004f6e:	6813      	ldr	r3, [r2, #0]
 8004f70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f74:	6013      	str	r3, [r2, #0]
 8004f76:	f8d9 2000 	ldr.w	r2, [r9]
 8004f7a:	6813      	ldr	r3, [r2, #0]
 8004f7c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004f80:	6013      	str	r3, [r2, #0]
 8004f82:	e7db      	b.n	8004f3c <SPI_WaitFlagStateUntilTimeout+0x84>
    }
  }

  return HAL_OK;
 8004f84:	2000      	movs	r0, #0
}
 8004f86:	b002      	add	sp, #8
 8004f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f8c:	20000040 	.word	0x20000040

08004f90 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f94:	b082      	sub	sp, #8
 8004f96:	4680      	mov	r8, r0
 8004f98:	460c      	mov	r4, r1
 8004f9a:	4615      	mov	r5, r2
 8004f9c:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	f88d 3003 	strb.w	r3, [sp, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004fa4:	f7fd fb9a 	bl	80026dc <HAL_GetTick>
 8004fa8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8004faa:	4437      	add	r7, r6
 8004fac:	1a3f      	subs	r7, r7, r0
  tmp_tickstart = HAL_GetTick();
 8004fae:	f7fd fb95 	bl	80026dc <HAL_GetTick>
 8004fb2:	4681      	mov	r9, r0

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004fb4:	f8d8 a000 	ldr.w	sl, [r8]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004fb8:	4b33      	ldr	r3, [pc, #204]	; (8005088 <SPI_WaitFifoStateUntilTimeout+0xf8>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004fc0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8004fc4:	0d1b      	lsrs	r3, r3, #20
 8004fc6:	fb07 f303 	mul.w	r3, r7, r3
 8004fca:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8004fcc:	f8d8 2000 	ldr.w	r2, [r8]
 8004fd0:	e002      	b.n	8004fd8 <SPI_WaitFifoStateUntilTimeout+0x48>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 8004fd2:	f1b6 3fff 	cmp.w	r6, #4294967295
 8004fd6:	d111      	bne.n	8004ffc <SPI_WaitFifoStateUntilTimeout+0x6c>
  while ((hspi->Instance->SR & Fifo) != State)
 8004fd8:	6893      	ldr	r3, [r2, #8]
 8004fda:	ea03 0c04 	and.w	ip, r3, r4
 8004fde:	45ac      	cmp	ip, r5
 8004fe0:	d04e      	beq.n	8005080 <SPI_WaitFifoStateUntilTimeout+0xf0>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004fe2:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 8004fe6:	d1f4      	bne.n	8004fd2 <SPI_WaitFifoStateUntilTimeout+0x42>
 8004fe8:	2d00      	cmp	r5, #0
 8004fea:	d1f2      	bne.n	8004fd2 <SPI_WaitFifoStateUntilTimeout+0x42>
      tmpreg8 = *ptmpreg8;
 8004fec:	f89a 300c 	ldrb.w	r3, [sl, #12]
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 8004ff6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004ffa:	e7ea      	b.n	8004fd2 <SPI_WaitFifoStateUntilTimeout+0x42>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ffc:	f7fd fb6e 	bl	80026dc <HAL_GetTick>
 8005000:	eba0 0009 	sub.w	r0, r0, r9
 8005004:	42b8      	cmp	r0, r7
 8005006:	d207      	bcs.n	8005018 <SPI_WaitFifoStateUntilTimeout+0x88>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005008:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 800500a:	2b00      	cmp	r3, #0
 800500c:	bf08      	it	eq
 800500e:	461f      	moveq	r7, r3
      }
      count--;
 8005010:	9b01      	ldr	r3, [sp, #4]
 8005012:	3b01      	subs	r3, #1
 8005014:	9301      	str	r3, [sp, #4]
 8005016:	e7d9      	b.n	8004fcc <SPI_WaitFifoStateUntilTimeout+0x3c>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005018:	f8d8 2000 	ldr.w	r2, [r8]
 800501c:	6853      	ldr	r3, [r2, #4]
 800501e:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8005022:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005024:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005028:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800502c:	d00c      	beq.n	8005048 <SPI_WaitFifoStateUntilTimeout+0xb8>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800502e:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 8005032:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005036:	d016      	beq.n	8005066 <SPI_WaitFifoStateUntilTimeout+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8005038:	2301      	movs	r3, #1
 800503a:	f888 305d 	strb.w	r3, [r8, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800503e:	2300      	movs	r3, #0
 8005040:	f888 305c 	strb.w	r3, [r8, #92]	; 0x5c
        return HAL_TIMEOUT;
 8005044:	2003      	movs	r0, #3
 8005046:	e01c      	b.n	8005082 <SPI_WaitFifoStateUntilTimeout+0xf2>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005048:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800504c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005050:	d002      	beq.n	8005058 <SPI_WaitFifoStateUntilTimeout+0xc8>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005056:	d1ea      	bne.n	800502e <SPI_WaitFifoStateUntilTimeout+0x9e>
          __HAL_SPI_DISABLE(hspi);
 8005058:	f8d8 2000 	ldr.w	r2, [r8]
 800505c:	6813      	ldr	r3, [r2, #0]
 800505e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005062:	6013      	str	r3, [r2, #0]
 8005064:	e7e3      	b.n	800502e <SPI_WaitFifoStateUntilTimeout+0x9e>
          SPI_RESET_CRC(hspi);
 8005066:	f8d8 2000 	ldr.w	r2, [r8]
 800506a:	6813      	ldr	r3, [r2, #0]
 800506c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005070:	6013      	str	r3, [r2, #0]
 8005072:	f8d8 2000 	ldr.w	r2, [r8]
 8005076:	6813      	ldr	r3, [r2, #0]
 8005078:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800507c:	6013      	str	r3, [r2, #0]
 800507e:	e7db      	b.n	8005038 <SPI_WaitFifoStateUntilTimeout+0xa8>
    }
  }

  return HAL_OK;
 8005080:	2000      	movs	r0, #0
}
 8005082:	b002      	add	sp, #8
 8005084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005088:	20000040 	.word	0x20000040

0800508c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800508c:	b570      	push	{r4, r5, r6, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	4604      	mov	r4, r0
 8005092:	460d      	mov	r5, r1
 8005094:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005096:	9200      	str	r2, [sp, #0]
 8005098:	460b      	mov	r3, r1
 800509a:	2200      	movs	r2, #0
 800509c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80050a0:	f7ff ff76 	bl	8004f90 <SPI_WaitFifoStateUntilTimeout>
 80050a4:	b9b0      	cbnz	r0, 80050d4 <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050a6:	9600      	str	r6, [sp, #0]
 80050a8:	462b      	mov	r3, r5
 80050aa:	2200      	movs	r2, #0
 80050ac:	2180      	movs	r1, #128	; 0x80
 80050ae:	4620      	mov	r0, r4
 80050b0:	f7ff ff02 	bl	8004eb8 <SPI_WaitFlagStateUntilTimeout>
 80050b4:	b9a8      	cbnz	r0, 80050e2 <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80050b6:	9600      	str	r6, [sp, #0]
 80050b8:	462b      	mov	r3, r5
 80050ba:	2200      	movs	r2, #0
 80050bc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80050c0:	4620      	mov	r0, r4
 80050c2:	f7ff ff65 	bl	8004f90 <SPI_WaitFifoStateUntilTimeout>
 80050c6:	b150      	cbz	r0, 80050de <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050c8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80050ca:	f043 0320 	orr.w	r3, r3, #32
 80050ce:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80050d0:	2003      	movs	r0, #3
 80050d2:	e004      	b.n	80050de <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050d4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80050d6:	f043 0320 	orr.w	r3, r3, #32
 80050da:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80050dc:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 80050de:	b002      	add	sp, #8
 80050e0:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050e2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80050e4:	f043 0320 	orr.w	r3, r3, #32
 80050e8:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80050ea:	2003      	movs	r0, #3
 80050ec:	e7f7      	b.n	80050de <SPI_EndRxTxTransaction+0x52>

080050ee <SPI_EndRxTransaction>:
{
 80050ee:	b570      	push	{r4, r5, r6, lr}
 80050f0:	b082      	sub	sp, #8
 80050f2:	4604      	mov	r4, r0
 80050f4:	460d      	mov	r5, r1
 80050f6:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050f8:	6843      	ldr	r3, [r0, #4]
 80050fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050fe:	d00d      	beq.n	800511c <SPI_EndRxTransaction+0x2e>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005100:	9600      	str	r6, [sp, #0]
 8005102:	462b      	mov	r3, r5
 8005104:	2200      	movs	r2, #0
 8005106:	2180      	movs	r1, #128	; 0x80
 8005108:	4620      	mov	r0, r4
 800510a:	f7ff fed5 	bl	8004eb8 <SPI_WaitFlagStateUntilTimeout>
 800510e:	b990      	cbnz	r0, 8005136 <SPI_EndRxTransaction+0x48>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005110:	6863      	ldr	r3, [r4, #4]
 8005112:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005116:	d014      	beq.n	8005142 <SPI_EndRxTransaction+0x54>
}
 8005118:	b002      	add	sp, #8
 800511a:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800511c:	6883      	ldr	r3, [r0, #8]
 800511e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005122:	d002      	beq.n	800512a <SPI_EndRxTransaction+0x3c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005124:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005128:	d1ea      	bne.n	8005100 <SPI_EndRxTransaction+0x12>
    __HAL_SPI_DISABLE(hspi);
 800512a:	6822      	ldr	r2, [r4, #0]
 800512c:	6813      	ldr	r3, [r2, #0]
 800512e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005132:	6013      	str	r3, [r2, #0]
 8005134:	e7e4      	b.n	8005100 <SPI_EndRxTransaction+0x12>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005136:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005138:	f043 0320 	orr.w	r3, r3, #32
 800513c:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800513e:	2003      	movs	r0, #3
 8005140:	e7ea      	b.n	8005118 <SPI_EndRxTransaction+0x2a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005142:	68a3      	ldr	r3, [r4, #8]
 8005144:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005148:	d002      	beq.n	8005150 <SPI_EndRxTransaction+0x62>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800514a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800514e:	d1e3      	bne.n	8005118 <SPI_EndRxTransaction+0x2a>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005150:	9600      	str	r6, [sp, #0]
 8005152:	462b      	mov	r3, r5
 8005154:	2200      	movs	r2, #0
 8005156:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800515a:	4620      	mov	r0, r4
 800515c:	f7ff ff18 	bl	8004f90 <SPI_WaitFifoStateUntilTimeout>
 8005160:	2800      	cmp	r0, #0
 8005162:	d0d9      	beq.n	8005118 <SPI_EndRxTransaction+0x2a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005164:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005166:	f043 0320 	orr.w	r3, r3, #32
 800516a:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 800516c:	2003      	movs	r0, #3
 800516e:	e7d3      	b.n	8005118 <SPI_EndRxTransaction+0x2a>

08005170 <HAL_SPI_Init>:
  if (hspi == NULL)
 8005170:	2800      	cmp	r0, #0
 8005172:	d06d      	beq.n	8005250 <HAL_SPI_Init+0xe0>
{
 8005174:	b510      	push	{r4, lr}
 8005176:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005178:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800517a:	b933      	cbnz	r3, 800518a <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800517c:	6843      	ldr	r3, [r0, #4]
 800517e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005182:	d005      	beq.n	8005190 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005184:	2300      	movs	r3, #0
 8005186:	61c3      	str	r3, [r0, #28]
 8005188:	e002      	b.n	8005190 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800518a:	2300      	movs	r3, #0
 800518c:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800518e:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005190:	2300      	movs	r3, #0
 8005192:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005194:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8005198:	2b00      	cmp	r3, #0
 800519a:	d053      	beq.n	8005244 <HAL_SPI_Init+0xd4>
  hspi->State = HAL_SPI_STATE_BUSY;
 800519c:	2302      	movs	r3, #2
 800519e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80051a2:	6822      	ldr	r2, [r4, #0]
 80051a4:	6813      	ldr	r3, [r2, #0]
 80051a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051aa:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051ac:	68e3      	ldr	r3, [r4, #12]
 80051ae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80051b2:	bf8c      	ite	hi
 80051b4:	2100      	movhi	r1, #0
 80051b6:	2101      	movls	r1, #1
 80051b8:	0309      	lsls	r1, r1, #12
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80051ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051be:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051c2:	bf1c      	itt	ne
 80051c4:	2300      	movne	r3, #0
 80051c6:	62a3      	strne	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051c8:	6822      	ldr	r2, [r4, #0]
 80051ca:	6863      	ldr	r3, [r4, #4]
 80051cc:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80051d0:	68a0      	ldr	r0, [r4, #8]
 80051d2:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 80051d6:	4303      	orrs	r3, r0
 80051d8:	6920      	ldr	r0, [r4, #16]
 80051da:	f000 0002 	and.w	r0, r0, #2
 80051de:	4303      	orrs	r3, r0
 80051e0:	6960      	ldr	r0, [r4, #20]
 80051e2:	f000 0001 	and.w	r0, r0, #1
 80051e6:	4303      	orrs	r3, r0
 80051e8:	69a0      	ldr	r0, [r4, #24]
 80051ea:	f400 7000 	and.w	r0, r0, #512	; 0x200
 80051ee:	4303      	orrs	r3, r0
 80051f0:	69e0      	ldr	r0, [r4, #28]
 80051f2:	f000 0038 	and.w	r0, r0, #56	; 0x38
 80051f6:	4303      	orrs	r3, r0
 80051f8:	6a20      	ldr	r0, [r4, #32]
 80051fa:	f000 0080 	and.w	r0, r0, #128	; 0x80
 80051fe:	4303      	orrs	r3, r0
 8005200:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005202:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 8005206:	4303      	orrs	r3, r0
 8005208:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800520a:	6822      	ldr	r2, [r4, #0]
 800520c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800520e:	f003 0310 	and.w	r3, r3, #16
 8005212:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005214:	f000 0008 	and.w	r0, r0, #8
 8005218:	4303      	orrs	r3, r0
 800521a:	68e0      	ldr	r0, [r4, #12]
 800521c:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
 8005220:	4303      	orrs	r3, r0
 8005222:	8b60      	ldrh	r0, [r4, #26]
 8005224:	f000 0004 	and.w	r0, r0, #4
 8005228:	4303      	orrs	r3, r0
 800522a:	430b      	orrs	r3, r1
 800522c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800522e:	6822      	ldr	r2, [r4, #0]
 8005230:	69d3      	ldr	r3, [r2, #28]
 8005232:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005236:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005238:	2000      	movs	r0, #0
 800523a:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800523c:	2301      	movs	r3, #1
 800523e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8005242:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8005244:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8005248:	4620      	mov	r0, r4
 800524a:	f7fc fe21 	bl	8001e90 <HAL_SPI_MspInit>
 800524e:	e7a5      	b.n	800519c <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8005250:	2001      	movs	r0, #1
}
 8005252:	4770      	bx	lr

08005254 <HAL_SPI_TransmitReceive_DMA>:
{
 8005254:	b538      	push	{r3, r4, r5, lr}
 8005256:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8005258:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 800525c:	2801      	cmp	r0, #1
 800525e:	f000 80f7 	beq.w	8005450 <HAL_SPI_TransmitReceive_DMA+0x1fc>
 8005262:	2001      	movs	r0, #1
 8005264:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
  tmp_state           = hspi->State;
 8005268:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 800526c:	b2c0      	uxtb	r0, r0
  tmp_mode            = hspi->Init.Mode;
 800526e:	6865      	ldr	r5, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8005270:	2801      	cmp	r0, #1
 8005272:	d00a      	beq.n	800528a <HAL_SPI_TransmitReceive_DMA+0x36>
 8005274:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
 8005278:	f040 80db 	bne.w	8005432 <HAL_SPI_TransmitReceive_DMA+0x1de>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800527c:	68a5      	ldr	r5, [r4, #8]
 800527e:	2d00      	cmp	r5, #0
 8005280:	f040 80dc 	bne.w	800543c <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8005284:	2804      	cmp	r0, #4
 8005286:	f040 80db 	bne.w	8005440 <HAL_SPI_TransmitReceive_DMA+0x1ec>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800528a:	2900      	cmp	r1, #0
 800528c:	f000 80da 	beq.w	8005444 <HAL_SPI_TransmitReceive_DMA+0x1f0>
 8005290:	2a00      	cmp	r2, #0
 8005292:	f000 80d9 	beq.w	8005448 <HAL_SPI_TransmitReceive_DMA+0x1f4>
 8005296:	2b00      	cmp	r3, #0
 8005298:	f000 80d8 	beq.w	800544c <HAL_SPI_TransmitReceive_DMA+0x1f8>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800529c:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 80052a0:	b2c0      	uxtb	r0, r0
 80052a2:	2804      	cmp	r0, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80052a4:	bf1c      	itt	ne
 80052a6:	2005      	movne	r0, #5
 80052a8:	f884 005d 	strbne.w	r0, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052ac:	2000      	movs	r0, #0
 80052ae:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80052b0:	63a1      	str	r1, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80052b2:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80052b4:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80052b6:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80052b8:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 80052bc:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->RxISR       = NULL;
 80052c0:	64e0      	str	r0, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80052c2:	6520      	str	r0, [r4, #80]	; 0x50
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80052c4:	6822      	ldr	r2, [r4, #0]
 80052c6:	6853      	ldr	r3, [r2, #4]
 80052c8:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80052cc:	6053      	str	r3, [r2, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80052ce:	68e3      	ldr	r3, [r4, #12]
 80052d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80052d4:	d928      	bls.n	8005328 <HAL_SPI_TransmitReceive_DMA+0xd4>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80052d6:	6822      	ldr	r2, [r4, #0]
 80052d8:	6853      	ldr	r3, [r2, #4]
 80052da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052de:	6053      	str	r3, [r2, #4]
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80052e0:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	2b04      	cmp	r3, #4
 80052e8:	d069      	beq.n	80053be <HAL_SPI_TransmitReceive_DMA+0x16a>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80052ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80052ec:	4a59      	ldr	r2, [pc, #356]	; (8005454 <HAL_SPI_TransmitReceive_DMA+0x200>)
 80052ee:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80052f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80052f2:	4a59      	ldr	r2, [pc, #356]	; (8005458 <HAL_SPI_TransmitReceive_DMA+0x204>)
 80052f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80052f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80052f8:	4a58      	ldr	r2, [pc, #352]	; (800545c <HAL_SPI_TransmitReceive_DMA+0x208>)
 80052fa:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmarx->XferAbortCallback = NULL;
 80052fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80052fe:	2200      	movs	r2, #0
 8005300:	639a      	str	r2, [r3, #56]	; 0x38
                                 hspi->RxXferCount))
 8005302:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005306:	6821      	ldr	r1, [r4, #0]
 8005308:	b29b      	uxth	r3, r3
 800530a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800530c:	310c      	adds	r1, #12
 800530e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005310:	f7fe f962 	bl	80035d8 <HAL_DMA_Start_IT>
 8005314:	2800      	cmp	r0, #0
 8005316:	d059      	beq.n	80053cc <HAL_SPI_TransmitReceive_DMA+0x178>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005318:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800531a:	f043 0310 	orr.w	r3, r3, #16
 800531e:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 8005320:	2001      	movs	r0, #1
 8005322:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
    goto error;
 8005326:	e085      	b.n	8005434 <HAL_SPI_TransmitReceive_DMA+0x1e0>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005328:	6822      	ldr	r2, [r4, #0]
 800532a:	6853      	ldr	r3, [r2, #4]
 800532c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005330:	6053      	str	r3, [r2, #4]
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005332:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800533a:	d01a      	beq.n	8005372 <HAL_SPI_TransmitReceive_DMA+0x11e>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800533c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800533e:	699b      	ldr	r3, [r3, #24]
 8005340:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005344:	d1cc      	bne.n	80052e0 <HAL_SPI_TransmitReceive_DMA+0x8c>
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005346:	6822      	ldr	r2, [r4, #0]
 8005348:	6853      	ldr	r3, [r2, #4]
 800534a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800534e:	6053      	str	r3, [r2, #4]
      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8005350:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005354:	f013 0f01 	tst.w	r3, #1
 8005358:	d124      	bne.n	80053a4 <HAL_SPI_TransmitReceive_DMA+0x150>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800535a:	6822      	ldr	r2, [r4, #0]
 800535c:	6853      	ldr	r3, [r2, #4]
 800535e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005362:	6053      	str	r3, [r2, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8005364:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005368:	f3c3 034e 	ubfx	r3, r3, #1, #15
 800536c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8005370:	e7b6      	b.n	80052e0 <HAL_SPI_TransmitReceive_DMA+0x8c>
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8005372:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8005374:	f013 0f01 	tst.w	r3, #1
 8005378:	d109      	bne.n	800538e <HAL_SPI_TransmitReceive_DMA+0x13a>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800537a:	6822      	ldr	r2, [r4, #0]
 800537c:	6853      	ldr	r3, [r2, #4]
 800537e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005382:	6053      	str	r3, [r2, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8005384:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005386:	f3c3 034e 	ubfx	r3, r3, #1, #15
 800538a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800538c:	e7d6      	b.n	800533c <HAL_SPI_TransmitReceive_DMA+0xe8>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800538e:	6822      	ldr	r2, [r4, #0]
 8005390:	6853      	ldr	r3, [r2, #4]
 8005392:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005396:	6053      	str	r3, [r2, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8005398:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800539a:	f3c3 034e 	ubfx	r3, r3, #1, #15
 800539e:	3301      	adds	r3, #1
 80053a0:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80053a2:	e7cb      	b.n	800533c <HAL_SPI_TransmitReceive_DMA+0xe8>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80053a4:	6822      	ldr	r2, [r4, #0]
 80053a6:	6853      	ldr	r3, [r2, #4]
 80053a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80053ac:	6053      	str	r3, [r2, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80053ae:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80053b2:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80053b6:	3301      	adds	r3, #1
 80053b8:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 80053bc:	e790      	b.n	80052e0 <HAL_SPI_TransmitReceive_DMA+0x8c>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80053be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80053c0:	4a27      	ldr	r2, [pc, #156]	; (8005460 <HAL_SPI_TransmitReceive_DMA+0x20c>)
 80053c2:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80053c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80053c6:	4a27      	ldr	r2, [pc, #156]	; (8005464 <HAL_SPI_TransmitReceive_DMA+0x210>)
 80053c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80053ca:	e794      	b.n	80052f6 <HAL_SPI_TransmitReceive_DMA+0xa2>
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80053cc:	6822      	ldr	r2, [r4, #0]
 80053ce:	6853      	ldr	r3, [r2, #4]
 80053d0:	f043 0301 	orr.w	r3, r3, #1
 80053d4:	6053      	str	r3, [r2, #4]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80053d6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80053d8:	2300      	movs	r3, #0
 80053da:	6313      	str	r3, [r2, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 80053dc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80053de:	62d3      	str	r3, [r2, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80053e0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80053e2:	6353      	str	r3, [r2, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 80053e4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80053e6:	6393      	str	r3, [r2, #56]	; 0x38
                                 hspi->TxXferCount))
 80053e8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80053ea:	6822      	ldr	r2, [r4, #0]
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	320c      	adds	r2, #12
 80053f0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80053f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80053f4:	f7fe f8f0 	bl	80035d8 <HAL_DMA_Start_IT>
 80053f8:	b998      	cbnz	r0, 8005422 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053fa:	6823      	ldr	r3, [r4, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005402:	d103      	bne.n	800540c <HAL_SPI_TransmitReceive_DMA+0x1b8>
    __HAL_SPI_ENABLE(hspi);
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800540a:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800540c:	6822      	ldr	r2, [r4, #0]
 800540e:	6853      	ldr	r3, [r2, #4]
 8005410:	f043 0320 	orr.w	r3, r3, #32
 8005414:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005416:	6822      	ldr	r2, [r4, #0]
 8005418:	6853      	ldr	r3, [r2, #4]
 800541a:	f043 0302 	orr.w	r3, r3, #2
 800541e:	6053      	str	r3, [r2, #4]
 8005420:	e008      	b.n	8005434 <HAL_SPI_TransmitReceive_DMA+0x1e0>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005422:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005424:	f043 0310 	orr.w	r3, r3, #16
 8005428:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 800542a:	2001      	movs	r0, #1
 800542c:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
    goto error;
 8005430:	e000      	b.n	8005434 <HAL_SPI_TransmitReceive_DMA+0x1e0>
    errorcode = HAL_BUSY;
 8005432:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 8005434:	2300      	movs	r3, #0
 8005436:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800543a:	bd38      	pop	{r3, r4, r5, pc}
    errorcode = HAL_BUSY;
 800543c:	2002      	movs	r0, #2
 800543e:	e7f9      	b.n	8005434 <HAL_SPI_TransmitReceive_DMA+0x1e0>
 8005440:	2002      	movs	r0, #2
 8005442:	e7f7      	b.n	8005434 <HAL_SPI_TransmitReceive_DMA+0x1e0>
    errorcode = HAL_ERROR;
 8005444:	2001      	movs	r0, #1
 8005446:	e7f5      	b.n	8005434 <HAL_SPI_TransmitReceive_DMA+0x1e0>
 8005448:	2001      	movs	r0, #1
 800544a:	e7f3      	b.n	8005434 <HAL_SPI_TransmitReceive_DMA+0x1e0>
 800544c:	2001      	movs	r0, #1
 800544e:	e7f1      	b.n	8005434 <HAL_SPI_TransmitReceive_DMA+0x1e0>
  __HAL_LOCK(hspi);
 8005450:	2002      	movs	r0, #2
 8005452:	e7f2      	b.n	800543a <HAL_SPI_TransmitReceive_DMA+0x1e6>
 8005454:	08005479 	.word	0x08005479
 8005458:	08005517 	.word	0x08005517
 800545c:	08005485 	.word	0x08005485
 8005460:	0800546d 	.word	0x0800546d
 8005464:	080054a7 	.word	0x080054a7

08005468 <HAL_SPI_RxCpltCallback>:
}
 8005468:	4770      	bx	lr

0800546a <HAL_SPI_RxHalfCpltCallback>:
}
 800546a:	4770      	bx	lr

0800546c <SPI_DMAHalfReceiveCplt>:
{
 800546c:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 800546e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8005470:	f7ff fffb 	bl	800546a <HAL_SPI_RxHalfCpltCallback>
}
 8005474:	bd08      	pop	{r3, pc}

08005476 <HAL_SPI_TxRxHalfCpltCallback>:
}
 8005476:	4770      	bx	lr

08005478 <SPI_DMAHalfTransmitReceiveCplt>:
{
 8005478:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800547a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800547c:	f7ff fffb 	bl	8005476 <HAL_SPI_TxRxHalfCpltCallback>
}
 8005480:	bd08      	pop	{r3, pc}

08005482 <HAL_SPI_ErrorCallback>:
}
 8005482:	4770      	bx	lr

08005484 <SPI_DMAError>:
{
 8005484:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005486:	6a80      	ldr	r0, [r0, #40]	; 0x28
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005488:	6802      	ldr	r2, [r0, #0]
 800548a:	6853      	ldr	r3, [r2, #4]
 800548c:	f023 0303 	bic.w	r3, r3, #3
 8005490:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005492:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8005494:	f043 0310 	orr.w	r3, r3, #16
 8005498:	6603      	str	r3, [r0, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800549a:	2301      	movs	r3, #1
 800549c:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  HAL_SPI_ErrorCallback(hspi);
 80054a0:	f7ff ffef 	bl	8005482 <HAL_SPI_ErrorCallback>
}
 80054a4:	bd08      	pop	{r3, pc}

080054a6 <SPI_DMAReceiveCplt>:
{
 80054a6:	b538      	push	{r3, r4, r5, lr}
 80054a8:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80054aa:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 80054ac:	f7fd f916 	bl	80026dc <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80054b0:	682b      	ldr	r3, [r5, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f013 0f20 	tst.w	r3, #32
 80054b8:	d11f      	bne.n	80054fa <SPI_DMAReceiveCplt+0x54>
 80054ba:	4602      	mov	r2, r0
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80054bc:	6821      	ldr	r1, [r4, #0]
 80054be:	684b      	ldr	r3, [r1, #4]
 80054c0:	f023 0320 	bic.w	r3, r3, #32
 80054c4:	604b      	str	r3, [r1, #4]
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80054c6:	68a3      	ldr	r3, [r4, #8]
 80054c8:	b91b      	cbnz	r3, 80054d2 <SPI_DMAReceiveCplt+0x2c>
 80054ca:	6863      	ldr	r3, [r4, #4]
 80054cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054d0:	d017      	beq.n	8005502 <SPI_DMAReceiveCplt+0x5c>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80054d2:	6821      	ldr	r1, [r4, #0]
 80054d4:	684b      	ldr	r3, [r1, #4]
 80054d6:	f023 0301 	bic.w	r3, r3, #1
 80054da:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80054dc:	2164      	movs	r1, #100	; 0x64
 80054de:	4620      	mov	r0, r4
 80054e0:	f7ff fe05 	bl	80050ee <SPI_EndRxTransaction>
 80054e4:	b108      	cbz	r0, 80054ea <SPI_DMAReceiveCplt+0x44>
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054e6:	2320      	movs	r3, #32
 80054e8:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->RxXferCount = 0U;
 80054ea:	2300      	movs	r3, #0
 80054ec:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80054f0:	2301      	movs	r3, #1
 80054f2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054f6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80054f8:	b94b      	cbnz	r3, 800550e <SPI_DMAReceiveCplt+0x68>
  HAL_SPI_RxCpltCallback(hspi);
 80054fa:	4620      	mov	r0, r4
 80054fc:	f7ff ffb4 	bl	8005468 <HAL_SPI_RxCpltCallback>
}
 8005500:	bd38      	pop	{r3, r4, r5, pc}
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005502:	6821      	ldr	r1, [r4, #0]
 8005504:	684b      	ldr	r3, [r1, #4]
 8005506:	f023 0303 	bic.w	r3, r3, #3
 800550a:	604b      	str	r3, [r1, #4]
 800550c:	e7e6      	b.n	80054dc <SPI_DMAReceiveCplt+0x36>
      HAL_SPI_ErrorCallback(hspi);
 800550e:	4620      	mov	r0, r4
 8005510:	f7ff ffb7 	bl	8005482 <HAL_SPI_ErrorCallback>
      return;
 8005514:	e7f4      	b.n	8005500 <SPI_DMAReceiveCplt+0x5a>

08005516 <SPI_DMATransmitReceiveCplt>:
{
 8005516:	b538      	push	{r3, r4, r5, lr}
 8005518:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800551a:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 800551c:	f7fd f8de 	bl	80026dc <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005520:	682b      	ldr	r3, [r5, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f013 0f20 	tst.w	r3, #32
 8005528:	d11c      	bne.n	8005564 <SPI_DMATransmitReceiveCplt+0x4e>
 800552a:	4602      	mov	r2, r0
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800552c:	6821      	ldr	r1, [r4, #0]
 800552e:	684b      	ldr	r3, [r1, #4]
 8005530:	f023 0320 	bic.w	r3, r3, #32
 8005534:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005536:	2164      	movs	r1, #100	; 0x64
 8005538:	4620      	mov	r0, r4
 800553a:	f7ff fda7 	bl	800508c <SPI_EndRxTxTransaction>
 800553e:	b118      	cbz	r0, 8005548 <SPI_DMATransmitReceiveCplt+0x32>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005540:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005542:	f043 0320 	orr.w	r3, r3, #32
 8005546:	6623      	str	r3, [r4, #96]	; 0x60
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005548:	6822      	ldr	r2, [r4, #0]
 800554a:	6853      	ldr	r3, [r2, #4]
 800554c:	f023 0303 	bic.w	r3, r3, #3
 8005550:	6053      	str	r3, [r2, #4]
    hspi->TxXferCount = 0U;
 8005552:	2300      	movs	r3, #0
 8005554:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8005556:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800555a:	2301      	movs	r3, #1
 800555c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005560:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005562:	b91b      	cbnz	r3, 800556c <SPI_DMATransmitReceiveCplt+0x56>
  HAL_SPI_TxRxCpltCallback(hspi);
 8005564:	4620      	mov	r0, r4
 8005566:	f7fb fcf3 	bl	8000f50 <HAL_SPI_TxRxCpltCallback>
}
 800556a:	bd38      	pop	{r3, r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 800556c:	4620      	mov	r0, r4
 800556e:	f7ff ff88 	bl	8005482 <HAL_SPI_ErrorCallback>
      return;
 8005572:	e7fa      	b.n	800556a <SPI_DMATransmitReceiveCplt+0x54>

08005574 <HAL_SPI_IRQHandler>:
{
 8005574:	b510      	push	{r4, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 800557a:	6802      	ldr	r2, [r0, #0]
 800557c:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 800557e:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005580:	f003 0041 	and.w	r0, r3, #65	; 0x41
 8005584:	2801      	cmp	r0, #1
 8005586:	d067      	beq.n	8005658 <HAL_SPI_IRQHandler+0xe4>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005588:	f013 0f02 	tst.w	r3, #2
 800558c:	d002      	beq.n	8005594 <HAL_SPI_IRQHandler+0x20>
 800558e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005592:	d168      	bne.n	8005666 <HAL_SPI_IRQHandler+0xf2>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005594:	f413 7fb0 	tst.w	r3, #352	; 0x160
 8005598:	d068      	beq.n	800566c <HAL_SPI_IRQHandler+0xf8>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800559a:	f011 0f20 	tst.w	r1, #32
 800559e:	d065      	beq.n	800566c <HAL_SPI_IRQHandler+0xf8>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80055a0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80055a4:	d00f      	beq.n	80055c6 <HAL_SPI_IRQHandler+0x52>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80055a6:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 80055aa:	b2c0      	uxtb	r0, r0
 80055ac:	2803      	cmp	r0, #3
 80055ae:	d05f      	beq.n	8005670 <HAL_SPI_IRQHandler+0xfc>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80055b0:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80055b2:	f040 0004 	orr.w	r0, r0, #4
 80055b6:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055b8:	2000      	movs	r0, #0
 80055ba:	9000      	str	r0, [sp, #0]
 80055bc:	68d0      	ldr	r0, [r2, #12]
 80055be:	9000      	str	r0, [sp, #0]
 80055c0:	6890      	ldr	r0, [r2, #8]
 80055c2:	9000      	str	r0, [sp, #0]
 80055c4:	9800      	ldr	r0, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80055c6:	f013 0f20 	tst.w	r3, #32
 80055ca:	d00c      	beq.n	80055e6 <HAL_SPI_IRQHandler+0x72>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80055cc:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80055ce:	f040 0001 	orr.w	r0, r0, #1
 80055d2:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80055d4:	2000      	movs	r0, #0
 80055d6:	9002      	str	r0, [sp, #8]
 80055d8:	6890      	ldr	r0, [r2, #8]
 80055da:	9002      	str	r0, [sp, #8]
 80055dc:	6810      	ldr	r0, [r2, #0]
 80055de:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 80055e2:	6010      	str	r0, [r2, #0]
 80055e4:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80055e6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80055ea:	d009      	beq.n	8005600 <HAL_SPI_IRQHandler+0x8c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80055ec:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80055ee:	f043 0308 	orr.w	r3, r3, #8
 80055f2:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80055f4:	2300      	movs	r3, #0
 80055f6:	9303      	str	r3, [sp, #12]
 80055f8:	6823      	ldr	r3, [r4, #0]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	9303      	str	r3, [sp, #12]
 80055fe:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005600:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005602:	2b00      	cmp	r3, #0
 8005604:	d032      	beq.n	800566c <HAL_SPI_IRQHandler+0xf8>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005606:	6822      	ldr	r2, [r4, #0]
 8005608:	6853      	ldr	r3, [r2, #4]
 800560a:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800560e:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8005610:	2301      	movs	r3, #1
 8005612:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005616:	f011 0f03 	tst.w	r1, #3
 800561a:	d031      	beq.n	8005680 <HAL_SPI_IRQHandler+0x10c>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800561c:	6822      	ldr	r2, [r4, #0]
 800561e:	6853      	ldr	r3, [r2, #4]
 8005620:	f023 0303 	bic.w	r3, r3, #3
 8005624:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 8005626:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005628:	b14b      	cbz	r3, 800563e <HAL_SPI_IRQHandler+0xca>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800562a:	4a17      	ldr	r2, [pc, #92]	; (8005688 <HAL_SPI_IRQHandler+0x114>)
 800562c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800562e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005630:	f7fe f852 	bl	80036d8 <HAL_DMA_Abort_IT>
 8005634:	b118      	cbz	r0, 800563e <HAL_SPI_IRQHandler+0xca>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005636:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005638:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800563c:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800563e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005640:	b1a3      	cbz	r3, 800566c <HAL_SPI_IRQHandler+0xf8>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005642:	4a11      	ldr	r2, [pc, #68]	; (8005688 <HAL_SPI_IRQHandler+0x114>)
 8005644:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005646:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005648:	f7fe f846 	bl	80036d8 <HAL_DMA_Abort_IT>
 800564c:	b170      	cbz	r0, 800566c <HAL_SPI_IRQHandler+0xf8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800564e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005650:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005654:	6623      	str	r3, [r4, #96]	; 0x60
 8005656:	e009      	b.n	800566c <HAL_SPI_IRQHandler+0xf8>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005658:	f011 0f40 	tst.w	r1, #64	; 0x40
 800565c:	d094      	beq.n	8005588 <HAL_SPI_IRQHandler+0x14>
    hspi->RxISR(hspi);
 800565e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005660:	4620      	mov	r0, r4
 8005662:	4798      	blx	r3
    return;
 8005664:	e002      	b.n	800566c <HAL_SPI_IRQHandler+0xf8>
    hspi->TxISR(hspi);
 8005666:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005668:	4620      	mov	r0, r4
 800566a:	4798      	blx	r3
}
 800566c:	b004      	add	sp, #16
 800566e:	bd10      	pop	{r4, pc}
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005670:	2300      	movs	r3, #0
 8005672:	9301      	str	r3, [sp, #4]
 8005674:	68d3      	ldr	r3, [r2, #12]
 8005676:	9301      	str	r3, [sp, #4]
 8005678:	6893      	ldr	r3, [r2, #8]
 800567a:	9301      	str	r3, [sp, #4]
 800567c:	9b01      	ldr	r3, [sp, #4]
        return;
 800567e:	e7f5      	b.n	800566c <HAL_SPI_IRQHandler+0xf8>
        HAL_SPI_ErrorCallback(hspi);
 8005680:	4620      	mov	r0, r4
 8005682:	f7ff fefe 	bl	8005482 <HAL_SPI_ErrorCallback>
 8005686:	e7f1      	b.n	800566c <HAL_SPI_IRQHandler+0xf8>
 8005688:	0800568d 	.word	0x0800568d

0800568c <SPI_DMAAbortOnError>:
{
 800568c:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800568e:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 8005690:	2300      	movs	r3, #0
 8005692:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8005696:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 8005698:	f7ff fef3 	bl	8005482 <HAL_SPI_ErrorCallback>
}
 800569c:	bd08      	pop	{r3, pc}
	...

080056a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056a0:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056a2:	6a03      	ldr	r3, [r0, #32]
 80056a4:	f023 0301 	bic.w	r3, r3, #1
 80056a8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056aa:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056ac:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056ae:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056b0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80056b4:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056b8:	680c      	ldr	r4, [r1, #0]
 80056ba:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056bc:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056c0:	688c      	ldr	r4, [r1, #8]
 80056c2:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056c4:	4c21      	ldr	r4, [pc, #132]	; (800574c <TIM_OC1_SetConfig+0xac>)
 80056c6:	42a0      	cmp	r0, r4
 80056c8:	d02a      	beq.n	8005720 <TIM_OC1_SetConfig+0x80>
 80056ca:	4d21      	ldr	r5, [pc, #132]	; (8005750 <TIM_OC1_SetConfig+0xb0>)
 80056cc:	42a8      	cmp	r0, r5
 80056ce:	d019      	beq.n	8005704 <TIM_OC1_SetConfig+0x64>
 80056d0:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
 80056d4:	42a0      	cmp	r0, r4
 80056d6:	d01c      	beq.n	8005712 <TIM_OC1_SetConfig+0x72>
 80056d8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80056dc:	42a0      	cmp	r0, r4
 80056de:	d00a      	beq.n	80056f6 <TIM_OC1_SetConfig+0x56>
 80056e0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80056e4:	42a0      	cmp	r0, r4
 80056e6:	d129      	bne.n	800573c <TIM_OC1_SetConfig+0x9c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056e8:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056ec:	68cc      	ldr	r4, [r1, #12]
 80056ee:	4323      	orrs	r3, r4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056f0:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056f4:	e01a      	b.n	800572c <TIM_OC1_SetConfig+0x8c>
    tmpccer &= ~TIM_CCER_CC1NP;
 80056f6:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80056fa:	68cc      	ldr	r4, [r1, #12]
 80056fc:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 80056fe:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005702:	e013      	b.n	800572c <TIM_OC1_SetConfig+0x8c>
    tmpccer &= ~TIM_CCER_CC1NP;
 8005704:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8005708:	68cc      	ldr	r4, [r1, #12]
 800570a:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 800570c:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005710:	e00c      	b.n	800572c <TIM_OC1_SetConfig+0x8c>
    tmpccer &= ~TIM_CCER_CC1NP;
 8005712:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8005716:	68cc      	ldr	r4, [r1, #12]
 8005718:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 800571a:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800571e:	e005      	b.n	800572c <TIM_OC1_SetConfig+0x8c>
    tmpccer &= ~TIM_CCER_CC1NP;
 8005720:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8005724:	68cc      	ldr	r4, [r1, #12]
 8005726:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 8005728:	f023 0304 	bic.w	r3, r3, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800572c:	f426 7440 	bic.w	r4, r6, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005730:	694d      	ldr	r5, [r1, #20]
 8005732:	698e      	ldr	r6, [r1, #24]
 8005734:	ea45 0c06 	orr.w	ip, r5, r6
 8005738:	ea4c 0604 	orr.w	r6, ip, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800573c:	6046      	str	r6, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800573e:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005740:	684a      	ldr	r2, [r1, #4]
 8005742:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005744:	6203      	str	r3, [r0, #32]
}
 8005746:	bc70      	pop	{r4, r5, r6}
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	40012c00 	.word	0x40012c00
 8005750:	40013400 	.word	0x40013400

08005754 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005754:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005756:	6a03      	ldr	r3, [r0, #32]
 8005758:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800575c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800575e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005760:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005762:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005764:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005768:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800576c:	680c      	ldr	r4, [r1, #0]
 800576e:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005770:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005774:	688c      	ldr	r4, [r1, #8]
 8005776:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800577a:	4c18      	ldr	r4, [pc, #96]	; (80057dc <TIM_OC3_SetConfig+0x88>)
 800577c:	42a0      	cmp	r0, r4
 800577e:	d017      	beq.n	80057b0 <TIM_OC3_SetConfig+0x5c>
 8005780:	4d17      	ldr	r5, [pc, #92]	; (80057e0 <TIM_OC3_SetConfig+0x8c>)
 8005782:	42a8      	cmp	r0, r5
 8005784:	d00c      	beq.n	80057a0 <TIM_OC3_SetConfig+0x4c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005786:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
 800578a:	42a0      	cmp	r0, r4
 800578c:	d017      	beq.n	80057be <TIM_OC3_SetConfig+0x6a>
 800578e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005792:	42a0      	cmp	r0, r4
 8005794:	d013      	beq.n	80057be <TIM_OC3_SetConfig+0x6a>
 8005796:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800579a:	42a0      	cmp	r0, r4
 800579c:	d117      	bne.n	80057ce <TIM_OC3_SetConfig+0x7a>
 800579e:	e00e      	b.n	80057be <TIM_OC3_SetConfig+0x6a>
    tmpccer &= ~TIM_CCER_CC3NP;
 80057a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80057a4:	68cc      	ldr	r4, [r1, #12]
 80057a6:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80057aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057ae:	e006      	b.n	80057be <TIM_OC3_SetConfig+0x6a>
    tmpccer &= ~TIM_CCER_CC3NP;
 80057b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80057b4:	68cc      	ldr	r4, [r1, #12]
 80057b6:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80057ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80057be:	f426 5440 	bic.w	r4, r6, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057c2:	694d      	ldr	r5, [r1, #20]
 80057c4:	698e      	ldr	r6, [r1, #24]
 80057c6:	ea45 0c06 	orr.w	ip, r5, r6
 80057ca:	ea44 160c 	orr.w	r6, r4, ip, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057ce:	6046      	str	r6, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057d0:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057d2:	684a      	ldr	r2, [r1, #4]
 80057d4:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057d6:	6203      	str	r3, [r0, #32]
}
 80057d8:	bc70      	pop	{r4, r5, r6}
 80057da:	4770      	bx	lr
 80057dc:	40012c00 	.word	0x40012c00
 80057e0:	40013400 	.word	0x40013400

080057e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057e4:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057e6:	6a03      	ldr	r3, [r0, #32]
 80057e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057ec:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ee:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057f0:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057f2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057f4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80057f8:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057fc:	680c      	ldr	r4, [r1, #0]
 80057fe:	ea42 2204 	orr.w	r2, r2, r4, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005802:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005806:	688c      	ldr	r4, [r1, #8]
 8005808:	ea43 3304 	orr.w	r3, r3, r4, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800580c:	4c18      	ldr	r4, [pc, #96]	; (8005870 <TIM_OC4_SetConfig+0x8c>)
 800580e:	42a0      	cmp	r0, r4
 8005810:	d017      	beq.n	8005842 <TIM_OC4_SetConfig+0x5e>
 8005812:	4d18      	ldr	r5, [pc, #96]	; (8005874 <TIM_OC4_SetConfig+0x90>)
 8005814:	42a8      	cmp	r0, r5
 8005816:	d00c      	beq.n	8005832 <TIM_OC4_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005818:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
 800581c:	42a0      	cmp	r0, r4
 800581e:	d017      	beq.n	8005850 <TIM_OC4_SetConfig+0x6c>
 8005820:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005824:	42a0      	cmp	r0, r4
 8005826:	d013      	beq.n	8005850 <TIM_OC4_SetConfig+0x6c>
 8005828:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800582c:	42a0      	cmp	r0, r4
 800582e:	d117      	bne.n	8005860 <TIM_OC4_SetConfig+0x7c>
 8005830:	e00e      	b.n	8005850 <TIM_OC4_SetConfig+0x6c>
    tmpccer &= ~TIM_CCER_CC4NP;
 8005832:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005836:	68cc      	ldr	r4, [r1, #12]
 8005838:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 800583c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005840:	e006      	b.n	8005850 <TIM_OC4_SetConfig+0x6c>
    tmpccer &= ~TIM_CCER_CC4NP;
 8005842:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005846:	68cc      	ldr	r4, [r1, #12]
 8005848:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 800584c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005850:	f426 4440 	bic.w	r4, r6, #49152	; 0xc000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005854:	694d      	ldr	r5, [r1, #20]
 8005856:	698e      	ldr	r6, [r1, #24]
 8005858:	ea45 0c06 	orr.w	ip, r5, r6
 800585c:	ea44 168c 	orr.w	r6, r4, ip, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005860:	6046      	str	r6, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005862:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005864:	684a      	ldr	r2, [r1, #4]
 8005866:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005868:	6203      	str	r3, [r0, #32]
}
 800586a:	bc70      	pop	{r4, r5, r6}
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop
 8005870:	40012c00 	.word	0x40012c00
 8005874:	40013400 	.word	0x40013400

08005878 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005878:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800587a:	6a03      	ldr	r3, [r0, #32]
 800587c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005880:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005882:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005884:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005886:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005888:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800588c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005890:	680d      	ldr	r5, [r1, #0]
 8005892:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005894:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005898:	688d      	ldr	r5, [r1, #8]
 800589a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800589e:	4d0f      	ldr	r5, [pc, #60]	; (80058dc <TIM_OC5_SetConfig+0x64>)
 80058a0:	42a8      	cmp	r0, r5
 80058a2:	d00f      	beq.n	80058c4 <TIM_OC5_SetConfig+0x4c>
 80058a4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80058a8:	42a8      	cmp	r0, r5
 80058aa:	d00b      	beq.n	80058c4 <TIM_OC5_SetConfig+0x4c>
 80058ac:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80058b0:	42a8      	cmp	r0, r5
 80058b2:	d007      	beq.n	80058c4 <TIM_OC5_SetConfig+0x4c>
 80058b4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80058b8:	42a8      	cmp	r0, r5
 80058ba:	d003      	beq.n	80058c4 <TIM_OC5_SetConfig+0x4c>
 80058bc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80058c0:	42a8      	cmp	r0, r5
 80058c2:	d104      	bne.n	80058ce <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80058c4:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80058c8:	694d      	ldr	r5, [r1, #20]
 80058ca:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058ce:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80058d0:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80058d2:	684a      	ldr	r2, [r1, #4]
 80058d4:	6482      	str	r2, [r0, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058d6:	6203      	str	r3, [r0, #32]
}
 80058d8:	bc30      	pop	{r4, r5}
 80058da:	4770      	bx	lr
 80058dc:	40012c00 	.word	0x40012c00

080058e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80058e0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80058e2:	6a03      	ldr	r3, [r0, #32]
 80058e4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80058e8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ea:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058ec:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80058ee:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80058f0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80058f4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058f8:	680d      	ldr	r5, [r1, #0]
 80058fa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80058fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005902:	688d      	ldr	r5, [r1, #8]
 8005904:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005908:	4d0f      	ldr	r5, [pc, #60]	; (8005948 <TIM_OC6_SetConfig+0x68>)
 800590a:	42a8      	cmp	r0, r5
 800590c:	d00f      	beq.n	800592e <TIM_OC6_SetConfig+0x4e>
 800590e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005912:	42a8      	cmp	r0, r5
 8005914:	d00b      	beq.n	800592e <TIM_OC6_SetConfig+0x4e>
 8005916:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800591a:	42a8      	cmp	r0, r5
 800591c:	d007      	beq.n	800592e <TIM_OC6_SetConfig+0x4e>
 800591e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005922:	42a8      	cmp	r0, r5
 8005924:	d003      	beq.n	800592e <TIM_OC6_SetConfig+0x4e>
 8005926:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800592a:	42a8      	cmp	r0, r5
 800592c:	d104      	bne.n	8005938 <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800592e:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005932:	694d      	ldr	r5, [r1, #20]
 8005934:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005938:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800593a:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800593c:	684a      	ldr	r2, [r1, #4]
 800593e:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005940:	6203      	str	r3, [r0, #32]
}
 8005942:	bc30      	pop	{r4, r5}
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	40012c00 	.word	0x40012c00

0800594c <HAL_TIM_PWM_MspInit>:
}
 800594c:	4770      	bx	lr

0800594e <HAL_TIM_OC_DelayElapsedCallback>:
}
 800594e:	4770      	bx	lr

08005950 <HAL_TIM_IC_CaptureCallback>:
}
 8005950:	4770      	bx	lr

08005952 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8005952:	4770      	bx	lr

08005954 <HAL_TIM_TriggerCallback>:
}
 8005954:	4770      	bx	lr

08005956 <HAL_TIM_IRQHandler>:
{
 8005956:	b510      	push	{r4, lr}
 8005958:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800595a:	6803      	ldr	r3, [r0, #0]
 800595c:	691a      	ldr	r2, [r3, #16]
 800595e:	f012 0f02 	tst.w	r2, #2
 8005962:	d012      	beq.n	800598a <HAL_TIM_IRQHandler+0x34>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005964:	68da      	ldr	r2, [r3, #12]
 8005966:	f012 0f02 	tst.w	r2, #2
 800596a:	d00e      	beq.n	800598a <HAL_TIM_IRQHandler+0x34>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800596c:	f06f 0202 	mvn.w	r2, #2
 8005970:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005972:	2301      	movs	r3, #1
 8005974:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005976:	6803      	ldr	r3, [r0, #0]
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	f013 0f03 	tst.w	r3, #3
 800597e:	f000 809f 	beq.w	8005ac0 <HAL_TIM_IRQHandler+0x16a>
          HAL_TIM_IC_CaptureCallback(htim);
 8005982:	f7ff ffe5 	bl	8005950 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005986:	2300      	movs	r3, #0
 8005988:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800598a:	6823      	ldr	r3, [r4, #0]
 800598c:	691a      	ldr	r2, [r3, #16]
 800598e:	f012 0f04 	tst.w	r2, #4
 8005992:	d013      	beq.n	80059bc <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005994:	68da      	ldr	r2, [r3, #12]
 8005996:	f012 0f04 	tst.w	r2, #4
 800599a:	d00f      	beq.n	80059bc <HAL_TIM_IRQHandler+0x66>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800599c:	f06f 0204 	mvn.w	r2, #4
 80059a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059a2:	2302      	movs	r3, #2
 80059a4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059a6:	6823      	ldr	r3, [r4, #0]
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	f413 7f40 	tst.w	r3, #768	; 0x300
 80059ae:	f000 808d 	beq.w	8005acc <HAL_TIM_IRQHandler+0x176>
        HAL_TIM_IC_CaptureCallback(htim);
 80059b2:	4620      	mov	r0, r4
 80059b4:	f7ff ffcc 	bl	8005950 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059b8:	2300      	movs	r3, #0
 80059ba:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80059bc:	6823      	ldr	r3, [r4, #0]
 80059be:	691a      	ldr	r2, [r3, #16]
 80059c0:	f012 0f08 	tst.w	r2, #8
 80059c4:	d012      	beq.n	80059ec <HAL_TIM_IRQHandler+0x96>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80059c6:	68da      	ldr	r2, [r3, #12]
 80059c8:	f012 0f08 	tst.w	r2, #8
 80059cc:	d00e      	beq.n	80059ec <HAL_TIM_IRQHandler+0x96>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80059ce:	f06f 0208 	mvn.w	r2, #8
 80059d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059d4:	2304      	movs	r3, #4
 80059d6:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059d8:	6823      	ldr	r3, [r4, #0]
 80059da:	69db      	ldr	r3, [r3, #28]
 80059dc:	f013 0f03 	tst.w	r3, #3
 80059e0:	d07b      	beq.n	8005ada <HAL_TIM_IRQHandler+0x184>
        HAL_TIM_IC_CaptureCallback(htim);
 80059e2:	4620      	mov	r0, r4
 80059e4:	f7ff ffb4 	bl	8005950 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059e8:	2300      	movs	r3, #0
 80059ea:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80059ec:	6823      	ldr	r3, [r4, #0]
 80059ee:	691a      	ldr	r2, [r3, #16]
 80059f0:	f012 0f10 	tst.w	r2, #16
 80059f4:	d012      	beq.n	8005a1c <HAL_TIM_IRQHandler+0xc6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80059f6:	68da      	ldr	r2, [r3, #12]
 80059f8:	f012 0f10 	tst.w	r2, #16
 80059fc:	d00e      	beq.n	8005a1c <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80059fe:	f06f 0210 	mvn.w	r2, #16
 8005a02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a04:	2308      	movs	r3, #8
 8005a06:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a08:	6823      	ldr	r3, [r4, #0]
 8005a0a:	69db      	ldr	r3, [r3, #28]
 8005a0c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8005a10:	d06a      	beq.n	8005ae8 <HAL_TIM_IRQHandler+0x192>
        HAL_TIM_IC_CaptureCallback(htim);
 8005a12:	4620      	mov	r0, r4
 8005a14:	f7ff ff9c 	bl	8005950 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a1c:	6823      	ldr	r3, [r4, #0]
 8005a1e:	691a      	ldr	r2, [r3, #16]
 8005a20:	f012 0f01 	tst.w	r2, #1
 8005a24:	d003      	beq.n	8005a2e <HAL_TIM_IRQHandler+0xd8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a26:	68da      	ldr	r2, [r3, #12]
 8005a28:	f012 0f01 	tst.w	r2, #1
 8005a2c:	d163      	bne.n	8005af6 <HAL_TIM_IRQHandler+0x1a0>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a2e:	6823      	ldr	r3, [r4, #0]
 8005a30:	691a      	ldr	r2, [r3, #16]
 8005a32:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005a36:	d003      	beq.n	8005a40 <HAL_TIM_IRQHandler+0xea>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a38:	68da      	ldr	r2, [r3, #12]
 8005a3a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005a3e:	d161      	bne.n	8005b04 <HAL_TIM_IRQHandler+0x1ae>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005a40:	6823      	ldr	r3, [r4, #0]
 8005a42:	691a      	ldr	r2, [r3, #16]
 8005a44:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005a48:	d003      	beq.n	8005a52 <HAL_TIM_IRQHandler+0xfc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a4a:	68da      	ldr	r2, [r3, #12]
 8005a4c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005a50:	d15f      	bne.n	8005b12 <HAL_TIM_IRQHandler+0x1bc>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a52:	6823      	ldr	r3, [r4, #0]
 8005a54:	691a      	ldr	r2, [r3, #16]
 8005a56:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005a5a:	d003      	beq.n	8005a64 <HAL_TIM_IRQHandler+0x10e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a5c:	68da      	ldr	r2, [r3, #12]
 8005a5e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005a62:	d15d      	bne.n	8005b20 <HAL_TIM_IRQHandler+0x1ca>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a64:	6823      	ldr	r3, [r4, #0]
 8005a66:	691a      	ldr	r2, [r3, #16]
 8005a68:	f012 0f20 	tst.w	r2, #32
 8005a6c:	d003      	beq.n	8005a76 <HAL_TIM_IRQHandler+0x120>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a6e:	68da      	ldr	r2, [r3, #12]
 8005a70:	f012 0f20 	tst.w	r2, #32
 8005a74:	d15b      	bne.n	8005b2e <HAL_TIM_IRQHandler+0x1d8>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005a76:	6823      	ldr	r3, [r4, #0]
 8005a78:	691a      	ldr	r2, [r3, #16]
 8005a7a:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 8005a7e:	d003      	beq.n	8005a88 <HAL_TIM_IRQHandler+0x132>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005a80:	68da      	ldr	r2, [r3, #12]
 8005a82:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 8005a86:	d159      	bne.n	8005b3c <HAL_TIM_IRQHandler+0x1e6>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005a88:	6823      	ldr	r3, [r4, #0]
 8005a8a:	691a      	ldr	r2, [r3, #16]
 8005a8c:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 8005a90:	d003      	beq.n	8005a9a <HAL_TIM_IRQHandler+0x144>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005a92:	68da      	ldr	r2, [r3, #12]
 8005a94:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 8005a98:	d157      	bne.n	8005b4a <HAL_TIM_IRQHandler+0x1f4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8005a9a:	6823      	ldr	r3, [r4, #0]
 8005a9c:	691a      	ldr	r2, [r3, #16]
 8005a9e:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8005aa2:	d003      	beq.n	8005aac <HAL_TIM_IRQHandler+0x156>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8005aa4:	68da      	ldr	r2, [r3, #12]
 8005aa6:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8005aaa:	d155      	bne.n	8005b58 <HAL_TIM_IRQHandler+0x202>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8005aac:	6823      	ldr	r3, [r4, #0]
 8005aae:	691a      	ldr	r2, [r3, #16]
 8005ab0:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
 8005ab4:	d003      	beq.n	8005abe <HAL_TIM_IRQHandler+0x168>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8005ab6:	68da      	ldr	r2, [r3, #12]
 8005ab8:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
 8005abc:	d153      	bne.n	8005b66 <HAL_TIM_IRQHandler+0x210>
}
 8005abe:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ac0:	f7ff ff45 	bl	800594e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ac4:	4620      	mov	r0, r4
 8005ac6:	f7ff ff44 	bl	8005952 <HAL_TIM_PWM_PulseFinishedCallback>
 8005aca:	e75c      	b.n	8005986 <HAL_TIM_IRQHandler+0x30>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005acc:	4620      	mov	r0, r4
 8005ace:	f7ff ff3e 	bl	800594e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ad2:	4620      	mov	r0, r4
 8005ad4:	f7ff ff3d 	bl	8005952 <HAL_TIM_PWM_PulseFinishedCallback>
 8005ad8:	e76e      	b.n	80059b8 <HAL_TIM_IRQHandler+0x62>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ada:	4620      	mov	r0, r4
 8005adc:	f7ff ff37 	bl	800594e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ae0:	4620      	mov	r0, r4
 8005ae2:	f7ff ff36 	bl	8005952 <HAL_TIM_PWM_PulseFinishedCallback>
 8005ae6:	e77f      	b.n	80059e8 <HAL_TIM_IRQHandler+0x92>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ae8:	4620      	mov	r0, r4
 8005aea:	f7ff ff30 	bl	800594e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aee:	4620      	mov	r0, r4
 8005af0:	f7ff ff2f 	bl	8005952 <HAL_TIM_PWM_PulseFinishedCallback>
 8005af4:	e790      	b.n	8005a18 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005af6:	f06f 0201 	mvn.w	r2, #1
 8005afa:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005afc:	4620      	mov	r0, r4
 8005afe:	f7fb fb2b 	bl	8001158 <HAL_TIM_PeriodElapsedCallback>
 8005b02:	e794      	b.n	8005a2e <HAL_TIM_IRQHandler+0xd8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b08:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005b0a:	4620      	mov	r0, r4
 8005b0c:	f000 fba7 	bl	800625e <HAL_TIMEx_BreakCallback>
 8005b10:	e796      	b.n	8005a40 <HAL_TIM_IRQHandler+0xea>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005b12:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005b16:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8005b18:	4620      	mov	r0, r4
 8005b1a:	f000 fba1 	bl	8006260 <HAL_TIMEx_Break2Callback>
 8005b1e:	e798      	b.n	8005a52 <HAL_TIM_IRQHandler+0xfc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b24:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005b26:	4620      	mov	r0, r4
 8005b28:	f7ff ff14 	bl	8005954 <HAL_TIM_TriggerCallback>
 8005b2c:	e79a      	b.n	8005a64 <HAL_TIM_IRQHandler+0x10e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b2e:	f06f 0220 	mvn.w	r2, #32
 8005b32:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8005b34:	4620      	mov	r0, r4
 8005b36:	f000 fb91 	bl	800625c <HAL_TIMEx_CommutCallback>
 8005b3a:	e79c      	b.n	8005a76 <HAL_TIM_IRQHandler+0x120>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005b3c:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005b40:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005b42:	4620      	mov	r0, r4
 8005b44:	f000 fb8d 	bl	8006262 <HAL_TIMEx_EncoderIndexCallback>
 8005b48:	e79e      	b.n	8005a88 <HAL_TIM_IRQHandler+0x132>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8005b4a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005b4e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005b50:	4620      	mov	r0, r4
 8005b52:	f000 fb87 	bl	8006264 <HAL_TIMEx_DirectionChangeCallback>
 8005b56:	e7a0      	b.n	8005a9a <HAL_TIM_IRQHandler+0x144>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8005b58:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005b5c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_IndexErrorCallback(htim);
 8005b5e:	4620      	mov	r0, r4
 8005b60:	f000 fb81 	bl	8006266 <HAL_TIMEx_IndexErrorCallback>
 8005b64:	e7a2      	b.n	8005aac <HAL_TIM_IRQHandler+0x156>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8005b66:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005b6a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005b6c:	4620      	mov	r0, r4
 8005b6e:	f000 fb7b 	bl	8006268 <HAL_TIMEx_TransitionErrorCallback>
}
 8005b72:	e7a4      	b.n	8005abe <HAL_TIM_IRQHandler+0x168>

08005b74 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8005b74:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b76:	4a4b      	ldr	r2, [pc, #300]	; (8005ca4 <TIM_Base_SetConfig+0x130>)
 8005b78:	4290      	cmp	r0, r2
 8005b7a:	d04f      	beq.n	8005c1c <TIM_Base_SetConfig+0xa8>
 8005b7c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005b80:	d074      	beq.n	8005c6c <TIM_Base_SetConfig+0xf8>
 8005b82:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005b86:	4290      	cmp	r0, r2
 8005b88:	f000 8087 	beq.w	8005c9a <TIM_Base_SetConfig+0x126>
 8005b8c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b90:	4290      	cmp	r0, r2
 8005b92:	d07d      	beq.n	8005c90 <TIM_Base_SetConfig+0x11c>
 8005b94:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8005b98:	4290      	cmp	r0, r2
 8005b9a:	d055      	beq.n	8005c48 <TIM_Base_SetConfig+0xd4>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b9c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8005ba0:	4290      	cmp	r0, r2
 8005ba2:	d011      	beq.n	8005bc8 <TIM_Base_SetConfig+0x54>
 8005ba4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ba8:	4290      	cmp	r0, r2
 8005baa:	d01b      	beq.n	8005be4 <TIM_Base_SetConfig+0x70>
 8005bac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005bb0:	4290      	cmp	r0, r2
 8005bb2:	d025      	beq.n	8005c00 <TIM_Base_SetConfig+0x8c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bb8:	694a      	ldr	r2, [r1, #20]
 8005bba:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005bbc:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bbe:	688b      	ldr	r3, [r1, #8]
 8005bc0:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005bc2:	680b      	ldr	r3, [r1, #0]
 8005bc4:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bc6:	e03c      	b.n	8005c42 <TIM_Base_SetConfig+0xce>
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bcc:	68ca      	ldr	r2, [r1, #12]
 8005bce:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bd4:	694a      	ldr	r2, [r1, #20]
 8005bd6:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005bd8:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bda:	688b      	ldr	r3, [r1, #8]
 8005bdc:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005bde:	680b      	ldr	r3, [r1, #0]
 8005be0:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005be2:	e02c      	b.n	8005c3e <TIM_Base_SetConfig+0xca>
    tmpcr1 &= ~TIM_CR1_CKD;
 8005be4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005be8:	68ca      	ldr	r2, [r1, #12]
 8005bea:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bf0:	694a      	ldr	r2, [r1, #20]
 8005bf2:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005bf4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bf6:	688b      	ldr	r3, [r1, #8]
 8005bf8:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005bfa:	680b      	ldr	r3, [r1, #0]
 8005bfc:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bfe:	e01e      	b.n	8005c3e <TIM_Base_SetConfig+0xca>
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c04:	68ca      	ldr	r2, [r1, #12]
 8005c06:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c0c:	694a      	ldr	r2, [r1, #20]
 8005c0e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005c10:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c12:	688b      	ldr	r3, [r1, #8]
 8005c14:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005c16:	680b      	ldr	r3, [r1, #0]
 8005c18:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c1a:	e010      	b.n	8005c3e <TIM_Base_SetConfig+0xca>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005c20:	684a      	ldr	r2, [r1, #4]
 8005c22:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c28:	68ca      	ldr	r2, [r1, #12]
 8005c2a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c30:	694a      	ldr	r2, [r1, #20]
 8005c32:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005c34:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c36:	688b      	ldr	r3, [r1, #8]
 8005c38:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005c3a:	680b      	ldr	r3, [r1, #0]
 8005c3c:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005c3e:	690b      	ldr	r3, [r1, #16]
 8005c40:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8005c42:	2301      	movs	r3, #1
 8005c44:	6143      	str	r3, [r0, #20]
}
 8005c46:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005c4c:	684a      	ldr	r2, [r1, #4]
 8005c4e:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c54:	68ca      	ldr	r2, [r1, #12]
 8005c56:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c5c:	694a      	ldr	r2, [r1, #20]
 8005c5e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005c60:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c62:	688b      	ldr	r3, [r1, #8]
 8005c64:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005c66:	680b      	ldr	r3, [r1, #0]
 8005c68:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c6a:	e7e8      	b.n	8005c3e <TIM_Base_SetConfig+0xca>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005c70:	684a      	ldr	r2, [r1, #4]
 8005c72:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c78:	68ca      	ldr	r2, [r1, #12]
 8005c7a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c80:	694a      	ldr	r2, [r1, #20]
 8005c82:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005c84:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c86:	688b      	ldr	r3, [r1, #8]
 8005c88:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005c8a:	680b      	ldr	r3, [r1, #0]
 8005c8c:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c8e:	e7d8      	b.n	8005c42 <TIM_Base_SetConfig+0xce>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005c94:	684a      	ldr	r2, [r1, #4]
 8005c96:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c98:	e7ec      	b.n	8005c74 <TIM_Base_SetConfig+0x100>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005c9e:	684a      	ldr	r2, [r1, #4]
 8005ca0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ca2:	e7e7      	b.n	8005c74 <TIM_Base_SetConfig+0x100>
 8005ca4:	40012c00 	.word	0x40012c00

08005ca8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8005ca8:	b360      	cbz	r0, 8005d04 <HAL_TIM_Base_Init+0x5c>
{
 8005caa:	b510      	push	{r4, lr}
 8005cac:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005cae:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005cb2:	b313      	cbz	r3, 8005cfa <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8005cb4:	2302      	movs	r3, #2
 8005cb6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cba:	4621      	mov	r1, r4
 8005cbc:	f851 0b04 	ldr.w	r0, [r1], #4
 8005cc0:	f7ff ff58 	bl	8005b74 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cca:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005cce:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005cd2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005cd6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005cda:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005cde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ce2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005ce6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005cea:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8005cee:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005cf2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005cf6:	2000      	movs	r0, #0
}
 8005cf8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005cfa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005cfe:	f7fc fad1 	bl	80022a4 <HAL_TIM_Base_MspInit>
 8005d02:	e7d7      	b.n	8005cb4 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8005d04:	2001      	movs	r0, #1
}
 8005d06:	4770      	bx	lr

08005d08 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8005d08:	b360      	cbz	r0, 8005d64 <HAL_TIM_PWM_Init+0x5c>
{
 8005d0a:	b510      	push	{r4, lr}
 8005d0c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005d0e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005d12:	b313      	cbz	r3, 8005d5a <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8005d14:	2302      	movs	r3, #2
 8005d16:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d1a:	4621      	mov	r1, r4
 8005d1c:	f851 0b04 	ldr.w	r0, [r1], #4
 8005d20:	f7ff ff28 	bl	8005b74 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d24:	2301      	movs	r3, #1
 8005d26:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d2a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005d2e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005d32:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005d36:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005d3a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d42:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005d46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d4a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8005d4e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005d52:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005d56:	2000      	movs	r0, #0
}
 8005d58:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005d5a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005d5e:	f7ff fdf5 	bl	800594c <HAL_TIM_PWM_MspInit>
 8005d62:	e7d7      	b.n	8005d14 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8005d64:	2001      	movs	r0, #1
}
 8005d66:	4770      	bx	lr

08005d68 <TIM_OC2_SetConfig>:
{
 8005d68:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d6a:	6a03      	ldr	r3, [r0, #32]
 8005d6c:	f023 0310 	bic.w	r3, r3, #16
 8005d70:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8005d72:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8005d74:	6846      	ldr	r6, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005d76:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d78:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005d7c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d80:	680c      	ldr	r4, [r1, #0]
 8005d82:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8005d86:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d8a:	688c      	ldr	r4, [r1, #8]
 8005d8c:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d90:	4c18      	ldr	r4, [pc, #96]	; (8005df4 <TIM_OC2_SetConfig+0x8c>)
 8005d92:	42a0      	cmp	r0, r4
 8005d94:	d017      	beq.n	8005dc6 <TIM_OC2_SetConfig+0x5e>
 8005d96:	4d18      	ldr	r5, [pc, #96]	; (8005df8 <TIM_OC2_SetConfig+0x90>)
 8005d98:	42a8      	cmp	r0, r5
 8005d9a:	d00c      	beq.n	8005db6 <TIM_OC2_SetConfig+0x4e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d9c:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
 8005da0:	42a0      	cmp	r0, r4
 8005da2:	d017      	beq.n	8005dd4 <TIM_OC2_SetConfig+0x6c>
 8005da4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005da8:	42a0      	cmp	r0, r4
 8005daa:	d013      	beq.n	8005dd4 <TIM_OC2_SetConfig+0x6c>
 8005dac:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005db0:	42a0      	cmp	r0, r4
 8005db2:	d117      	bne.n	8005de4 <TIM_OC2_SetConfig+0x7c>
 8005db4:	e00e      	b.n	8005dd4 <TIM_OC2_SetConfig+0x6c>
    tmpccer &= ~TIM_CCER_CC2NP;
 8005db6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005dba:	68cc      	ldr	r4, [r1, #12]
 8005dbc:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8005dc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dc4:	e006      	b.n	8005dd4 <TIM_OC2_SetConfig+0x6c>
    tmpccer &= ~TIM_CCER_CC2NP;
 8005dc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005dca:	68cc      	ldr	r4, [r1, #12]
 8005dcc:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8005dd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005dd4:	f426 6440 	bic.w	r4, r6, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005dd8:	694d      	ldr	r5, [r1, #20]
 8005dda:	698e      	ldr	r6, [r1, #24]
 8005ddc:	ea45 0c06 	orr.w	ip, r5, r6
 8005de0:	ea44 068c 	orr.w	r6, r4, ip, lsl #2
  TIMx->CR2 = tmpcr2;
 8005de4:	6046      	str	r6, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005de6:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005de8:	684a      	ldr	r2, [r1, #4]
 8005dea:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005dec:	6203      	str	r3, [r0, #32]
}
 8005dee:	bc70      	pop	{r4, r5, r6}
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	40012c00 	.word	0x40012c00
 8005df8:	40013400 	.word	0x40013400

08005dfc <HAL_TIM_PWM_ConfigChannel>:
{
 8005dfc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8005dfe:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	f000 8095 	beq.w	8005f32 <HAL_TIM_PWM_ConfigChannel+0x136>
 8005e08:	4604      	mov	r4, r0
 8005e0a:	460d      	mov	r5, r1
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8005e12:	2a14      	cmp	r2, #20
 8005e14:	f200 8088 	bhi.w	8005f28 <HAL_TIM_PWM_ConfigChannel+0x12c>
 8005e18:	e8df f002 	tbb	[pc, r2]
 8005e1c:	8686860b 	.word	0x8686860b
 8005e20:	8686861f 	.word	0x8686861f
 8005e24:	86868634 	.word	0x86868634
 8005e28:	86868648 	.word	0x86868648
 8005e2c:	8686865d 	.word	0x8686865d
 8005e30:	71          	.byte	0x71
 8005e31:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e32:	6800      	ldr	r0, [r0, #0]
 8005e34:	f7ff fc34 	bl	80056a0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e38:	6822      	ldr	r2, [r4, #0]
 8005e3a:	6993      	ldr	r3, [r2, #24]
 8005e3c:	f043 0308 	orr.w	r3, r3, #8
 8005e40:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e42:	6822      	ldr	r2, [r4, #0]
 8005e44:	6993      	ldr	r3, [r2, #24]
 8005e46:	f023 0304 	bic.w	r3, r3, #4
 8005e4a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e4c:	6822      	ldr	r2, [r4, #0]
 8005e4e:	6993      	ldr	r3, [r2, #24]
 8005e50:	6929      	ldr	r1, [r5, #16]
 8005e52:	430b      	orrs	r3, r1
 8005e54:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8005e56:	2000      	movs	r0, #0
      break;
 8005e58:	e067      	b.n	8005f2a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e5a:	6800      	ldr	r0, [r0, #0]
 8005e5c:	f7ff ff84 	bl	8005d68 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e60:	6822      	ldr	r2, [r4, #0]
 8005e62:	6993      	ldr	r3, [r2, #24]
 8005e64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005e68:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e6a:	6822      	ldr	r2, [r4, #0]
 8005e6c:	6993      	ldr	r3, [r2, #24]
 8005e6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e72:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e74:	6822      	ldr	r2, [r4, #0]
 8005e76:	6993      	ldr	r3, [r2, #24]
 8005e78:	6929      	ldr	r1, [r5, #16]
 8005e7a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005e7e:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8005e80:	2000      	movs	r0, #0
      break;
 8005e82:	e052      	b.n	8005f2a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e84:	6800      	ldr	r0, [r0, #0]
 8005e86:	f7ff fc65 	bl	8005754 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e8a:	6822      	ldr	r2, [r4, #0]
 8005e8c:	69d3      	ldr	r3, [r2, #28]
 8005e8e:	f043 0308 	orr.w	r3, r3, #8
 8005e92:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e94:	6822      	ldr	r2, [r4, #0]
 8005e96:	69d3      	ldr	r3, [r2, #28]
 8005e98:	f023 0304 	bic.w	r3, r3, #4
 8005e9c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e9e:	6822      	ldr	r2, [r4, #0]
 8005ea0:	69d3      	ldr	r3, [r2, #28]
 8005ea2:	6929      	ldr	r1, [r5, #16]
 8005ea4:	430b      	orrs	r3, r1
 8005ea6:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8005ea8:	2000      	movs	r0, #0
      break;
 8005eaa:	e03e      	b.n	8005f2a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005eac:	6800      	ldr	r0, [r0, #0]
 8005eae:	f7ff fc99 	bl	80057e4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005eb2:	6822      	ldr	r2, [r4, #0]
 8005eb4:	69d3      	ldr	r3, [r2, #28]
 8005eb6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005eba:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ebc:	6822      	ldr	r2, [r4, #0]
 8005ebe:	69d3      	ldr	r3, [r2, #28]
 8005ec0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ec4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ec6:	6822      	ldr	r2, [r4, #0]
 8005ec8:	69d3      	ldr	r3, [r2, #28]
 8005eca:	6929      	ldr	r1, [r5, #16]
 8005ecc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005ed0:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8005ed2:	2000      	movs	r0, #0
      break;
 8005ed4:	e029      	b.n	8005f2a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005ed6:	6800      	ldr	r0, [r0, #0]
 8005ed8:	f7ff fcce 	bl	8005878 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005edc:	6822      	ldr	r2, [r4, #0]
 8005ede:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005ee0:	f043 0308 	orr.w	r3, r3, #8
 8005ee4:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005ee6:	6822      	ldr	r2, [r4, #0]
 8005ee8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005eea:	f023 0304 	bic.w	r3, r3, #4
 8005eee:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005ef0:	6822      	ldr	r2, [r4, #0]
 8005ef2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005ef4:	6929      	ldr	r1, [r5, #16]
 8005ef6:	430b      	orrs	r3, r1
 8005ef8:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 8005efa:	2000      	movs	r0, #0
      break;
 8005efc:	e015      	b.n	8005f2a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005efe:	6800      	ldr	r0, [r0, #0]
 8005f00:	f7ff fcee 	bl	80058e0 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005f04:	6822      	ldr	r2, [r4, #0]
 8005f06:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005f08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005f0c:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005f0e:	6822      	ldr	r2, [r4, #0]
 8005f10:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005f12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f16:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005f18:	6822      	ldr	r2, [r4, #0]
 8005f1a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005f1c:	6929      	ldr	r1, [r5, #16]
 8005f1e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005f22:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 8005f24:	2000      	movs	r0, #0
      break;
 8005f26:	e000      	b.n	8005f2a <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 8005f28:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005f30:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8005f32:	2002      	movs	r0, #2
 8005f34:	e7fc      	b.n	8005f30 <HAL_TIM_PWM_ConfigChannel+0x134>

08005f36 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f36:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f38:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f3a:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f3e:	430a      	orrs	r2, r1
 8005f40:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8005f44:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f48:	6082      	str	r2, [r0, #8]
}
 8005f4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <HAL_TIM_ConfigClockSource>:
{
 8005f50:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8005f52:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	f000 80cc 	beq.w	80060f4 <HAL_TIM_ConfigClockSource+0x1a4>
 8005f5c:	4604      	mov	r4, r0
 8005f5e:	2301      	movs	r3, #1
 8005f60:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005f64:	2302      	movs	r3, #2
 8005f66:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8005f6a:	6802      	ldr	r2, [r0, #0]
 8005f6c:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f6e:	4b62      	ldr	r3, [pc, #392]	; (80060f8 <HAL_TIM_ConfigClockSource+0x1a8>)
 8005f70:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8005f72:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8005f74:	6808      	ldr	r0, [r1, #0]
 8005f76:	2870      	cmp	r0, #112	; 0x70
 8005f78:	f000 8083 	beq.w	8006082 <HAL_TIM_ConfigClockSource+0x132>
 8005f7c:	d851      	bhi.n	8006022 <HAL_TIM_ConfigClockSource+0xd2>
 8005f7e:	2850      	cmp	r0, #80	; 0x50
 8005f80:	f000 8099 	beq.w	80060b6 <HAL_TIM_ConfigClockSource+0x166>
 8005f84:	d91f      	bls.n	8005fc6 <HAL_TIM_ConfigClockSource+0x76>
 8005f86:	2860      	cmp	r0, #96	; 0x60
 8005f88:	d149      	bne.n	800601e <HAL_TIM_ConfigClockSource+0xce>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f8a:	6823      	ldr	r3, [r4, #0]
 8005f8c:	6848      	ldr	r0, [r1, #4]
 8005f8e:	68cd      	ldr	r5, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f90:	6a1a      	ldr	r2, [r3, #32]
 8005f92:	f022 0210 	bic.w	r2, r2, #16
 8005f96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f98:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8005f9a:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f9c:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005fa0:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fa4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fa8:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8005fac:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fae:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005fb0:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8005fb2:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fb4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005fb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fbc:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8005fc0:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005fc2:	2000      	movs	r0, #0
}
 8005fc4:	e042      	b.n	800604c <HAL_TIM_ConfigClockSource+0xfc>
  switch (sClockSourceConfig->ClockSource)
 8005fc6:	2840      	cmp	r0, #64	; 0x40
 8005fc8:	d11c      	bne.n	8006004 <HAL_TIM_ConfigClockSource+0xb4>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fca:	6823      	ldr	r3, [r4, #0]
 8005fcc:	6848      	ldr	r0, [r1, #4]
 8005fce:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8005fd0:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fd2:	6a1a      	ldr	r2, [r3, #32]
 8005fd4:	f022 0201 	bic.w	r2, r2, #1
 8005fd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fda:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fdc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fe0:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fe4:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8005fe8:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8005fea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fec:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005fee:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8005ff0:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ff2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ffa:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8005ffe:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006000:	2000      	movs	r0, #0
}
 8006002:	e023      	b.n	800604c <HAL_TIM_ConfigClockSource+0xfc>
  switch (sClockSourceConfig->ClockSource)
 8006004:	d874      	bhi.n	80060f0 <HAL_TIM_ConfigClockSource+0x1a0>
 8006006:	2820      	cmp	r0, #32
 8006008:	d02f      	beq.n	800606a <HAL_TIM_ConfigClockSource+0x11a>
 800600a:	d903      	bls.n	8006014 <HAL_TIM_ConfigClockSource+0xc4>
 800600c:	2830      	cmp	r0, #48	; 0x30
 800600e:	d02c      	beq.n	800606a <HAL_TIM_ConfigClockSource+0x11a>
 8006010:	2001      	movs	r0, #1
 8006012:	e01b      	b.n	800604c <HAL_TIM_ConfigClockSource+0xfc>
 8006014:	f030 0310 	bics.w	r3, r0, #16
 8006018:	d027      	beq.n	800606a <HAL_TIM_ConfigClockSource+0x11a>
 800601a:	2001      	movs	r0, #1
 800601c:	e016      	b.n	800604c <HAL_TIM_ConfigClockSource+0xfc>
 800601e:	2001      	movs	r0, #1
 8006020:	e014      	b.n	800604c <HAL_TIM_ConfigClockSource+0xfc>
 8006022:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8006026:	d039      	beq.n	800609c <HAL_TIM_ConfigClockSource+0x14c>
 8006028:	d90c      	bls.n	8006044 <HAL_TIM_ConfigClockSource+0xf4>
 800602a:	4a34      	ldr	r2, [pc, #208]	; (80060fc <HAL_TIM_ConfigClockSource+0x1ac>)
 800602c:	4290      	cmp	r0, r2
 800602e:	d01c      	beq.n	800606a <HAL_TIM_ConfigClockSource+0x11a>
 8006030:	d913      	bls.n	800605a <HAL_TIM_ConfigClockSource+0x10a>
 8006032:	4a33      	ldr	r2, [pc, #204]	; (8006100 <HAL_TIM_ConfigClockSource+0x1b0>)
 8006034:	4290      	cmp	r0, r2
 8006036:	d018      	beq.n	800606a <HAL_TIM_ConfigClockSource+0x11a>
 8006038:	3230      	adds	r2, #48	; 0x30
 800603a:	4290      	cmp	r0, r2
 800603c:	bf18      	it	ne
 800603e:	2001      	movne	r0, #1
 8006040:	d013      	beq.n	800606a <HAL_TIM_ConfigClockSource+0x11a>
 8006042:	e003      	b.n	800604c <HAL_TIM_ConfigClockSource+0xfc>
  HAL_StatusTypeDef status = HAL_OK;
 8006044:	f5b0 5080 	subs.w	r0, r0, #4096	; 0x1000
 8006048:	bf18      	it	ne
 800604a:	2001      	movne	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 800604c:	2301      	movs	r3, #1
 800604e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006052:	2300      	movs	r3, #0
 8006054:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8006058:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 800605a:	f1b0 1f10 	cmp.w	r0, #1048592	; 0x100010
 800605e:	d004      	beq.n	800606a <HAL_TIM_ConfigClockSource+0x11a>
 8006060:	3a10      	subs	r2, #16
 8006062:	4290      	cmp	r0, r2
 8006064:	bf18      	it	ne
 8006066:	2001      	movne	r0, #1
 8006068:	d1f0      	bne.n	800604c <HAL_TIM_ConfigClockSource+0xfc>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800606a:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800606c:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800606e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8006072:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006076:	4302      	orrs	r2, r0
 8006078:	f042 0207 	orr.w	r2, r2, #7
  TIMx->SMCR = tmpsmcr;
 800607c:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800607e:	2000      	movs	r0, #0
}
 8006080:	e7e4      	b.n	800604c <HAL_TIM_ConfigClockSource+0xfc>
      TIM_ETR_SetConfig(htim->Instance,
 8006082:	68cb      	ldr	r3, [r1, #12]
 8006084:	684a      	ldr	r2, [r1, #4]
 8006086:	6889      	ldr	r1, [r1, #8]
 8006088:	6820      	ldr	r0, [r4, #0]
 800608a:	f7ff ff54 	bl	8005f36 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800608e:	6822      	ldr	r2, [r4, #0]
 8006090:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006092:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8006096:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006098:	2000      	movs	r0, #0
      break;
 800609a:	e7d7      	b.n	800604c <HAL_TIM_ConfigClockSource+0xfc>
      TIM_ETR_SetConfig(htim->Instance,
 800609c:	68cb      	ldr	r3, [r1, #12]
 800609e:	684a      	ldr	r2, [r1, #4]
 80060a0:	6889      	ldr	r1, [r1, #8]
 80060a2:	6820      	ldr	r0, [r4, #0]
 80060a4:	f7ff ff47 	bl	8005f36 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060a8:	6822      	ldr	r2, [r4, #0]
 80060aa:	6893      	ldr	r3, [r2, #8]
 80060ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80060b0:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80060b2:	2000      	movs	r0, #0
      break;
 80060b4:	e7ca      	b.n	800604c <HAL_TIM_ConfigClockSource+0xfc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060b6:	6823      	ldr	r3, [r4, #0]
 80060b8:	6848      	ldr	r0, [r1, #4]
 80060ba:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80060bc:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060be:	6a1a      	ldr	r2, [r3, #32]
 80060c0:	f022 0201 	bic.w	r2, r2, #1
 80060c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060c6:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060c8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060cc:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060d0:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80060d4:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 80060d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060d8:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80060da:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80060dc:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80060de:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80060e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060e6:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80060ea:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80060ec:	2000      	movs	r0, #0
}
 80060ee:	e7ad      	b.n	800604c <HAL_TIM_ConfigClockSource+0xfc>
  switch (sClockSourceConfig->ClockSource)
 80060f0:	2001      	movs	r0, #1
 80060f2:	e7ab      	b.n	800604c <HAL_TIM_ConfigClockSource+0xfc>
  __HAL_LOCK(htim);
 80060f4:	2002      	movs	r0, #2
 80060f6:	e7af      	b.n	8006058 <HAL_TIM_ConfigClockSource+0x108>
 80060f8:	ffce0088 	.word	0xffce0088
 80060fc:	00100030 	.word	0x00100030
 8006100:	00100040 	.word	0x00100040

08006104 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006104:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8006108:	2a01      	cmp	r2, #1
 800610a:	d040      	beq.n	800618e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
{
 800610c:	b430      	push	{r4, r5}
 800610e:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8006110:	2201      	movs	r2, #1
 8006112:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006116:	2202      	movs	r2, #2
 8006118:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800611c:	6800      	ldr	r0, [r0, #0]
 800611e:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006120:	6884      	ldr	r4, [r0, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006122:	4d1c      	ldr	r5, [pc, #112]	; (8006194 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 8006124:	42a8      	cmp	r0, r5
 8006126:	d003      	beq.n	8006130 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
 8006128:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800612c:	42a8      	cmp	r0, r5
 800612e:	d103      	bne.n	8006138 <HAL_TIMEx_MasterConfigSynchronization+0x34>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006130:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006134:	684d      	ldr	r5, [r1, #4]
 8006136:	432a      	orrs	r2, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006138:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800613c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006140:	680d      	ldr	r5, [r1, #0]
 8006142:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006144:	6042      	str	r2, [r0, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	4812      	ldr	r0, [pc, #72]	; (8006194 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 800614a:	4282      	cmp	r2, r0
 800614c:	d012      	beq.n	8006174 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800614e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8006152:	d00f      	beq.n	8006174 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8006154:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 8006158:	4282      	cmp	r2, r0
 800615a:	d00b      	beq.n	8006174 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800615c:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8006160:	4282      	cmp	r2, r0
 8006162:	d007      	beq.n	8006174 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8006164:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 8006168:	4282      	cmp	r2, r0
 800616a:	d003      	beq.n	8006174 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800616c:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 8006170:	4282      	cmp	r2, r0
 8006172:	d104      	bne.n	800617e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006174:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006178:	6889      	ldr	r1, [r1, #8]
 800617a:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800617c:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800617e:	2201      	movs	r2, #1
 8006180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006184:	2000      	movs	r0, #0
 8006186:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c

  return HAL_OK;
}
 800618a:	bc30      	pop	{r4, r5}
 800618c:	4770      	bx	lr
  __HAL_LOCK(htim);
 800618e:	2002      	movs	r0, #2
}
 8006190:	4770      	bx	lr
 8006192:	bf00      	nop
 8006194:	40012c00 	.word	0x40012c00

08006198 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006198:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800619c:	2b01      	cmp	r3, #1
 800619e:	d031      	beq.n	8006204 <HAL_TIMEx_ConfigBreakDeadTime+0x6c>
{
 80061a0:	b410      	push	{r4}
 80061a2:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 80061a4:	2301      	movs	r3, #1
 80061a6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80061aa:	68cb      	ldr	r3, [r1, #12]
 80061ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061b0:	6888      	ldr	r0, [r1, #8]
 80061b2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80061b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061b8:	6848      	ldr	r0, [r1, #4]
 80061ba:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80061bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061c0:	6808      	ldr	r0, [r1, #0]
 80061c2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80061c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061c8:	6908      	ldr	r0, [r1, #16]
 80061ca:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80061cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061d0:	6948      	ldr	r0, [r1, #20]
 80061d2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80061d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061d8:	6b08      	ldr	r0, [r1, #48]	; 0x30
 80061da:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80061dc:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80061e0:	6988      	ldr	r0, [r1, #24]
 80061e2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80061e6:	6810      	ldr	r0, [r2, #0]
 80061e8:	4c1b      	ldr	r4, [pc, #108]	; (8006258 <HAL_TIMEx_ConfigBreakDeadTime+0xc0>)
 80061ea:	42a0      	cmp	r0, r4
 80061ec:	d00c      	beq.n	8006208 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
 80061ee:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80061f2:	42a0      	cmp	r0, r4
 80061f4:	d01e      	beq.n	8006234 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80061f6:	6443      	str	r3, [r0, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80061f8:	2000      	movs	r0, #0
 80061fa:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c

  return HAL_OK;
}
 80061fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006202:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006204:	2002      	movs	r0, #2
}
 8006206:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006208:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800620c:	69cc      	ldr	r4, [r1, #28]
 800620e:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006210:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006214:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8006216:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800621a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800621e:	6a0c      	ldr	r4, [r1, #32]
 8006220:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006222:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006226:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8006228:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800622a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800622e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8006230:	430b      	orrs	r3, r1
 8006232:	e7e0      	b.n	80061f6 <HAL_TIMEx_ConfigBreakDeadTime+0x5e>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006234:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006238:	69cc      	ldr	r4, [r1, #28]
 800623a:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800623c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006240:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8006242:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006246:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800624a:	6a0c      	ldr	r4, [r1, #32]
 800624c:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800624e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006252:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8006254:	4323      	orrs	r3, r4
    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006256:	e7e8      	b.n	800622a <HAL_TIMEx_ConfigBreakDeadTime+0x92>
 8006258:	40012c00 	.word	0x40012c00

0800625c <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800625c:	4770      	bx	lr

0800625e <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800625e:	4770      	bx	lr

08006260 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006260:	4770      	bx	lr

08006262 <HAL_TIMEx_EncoderIndexCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006262:	4770      	bx	lr

08006264 <HAL_TIMEx_DirectionChangeCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006264:	4770      	bx	lr

08006266 <HAL_TIMEx_IndexErrorCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006266:	4770      	bx	lr

08006268 <HAL_TIMEx_TransitionErrorCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006268:	4770      	bx	lr

0800626a <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800626a:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626c:	e852 3f00 	ldrex	r3, [r2]
 8006270:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006274:	e842 3100 	strex	r1, r3, [r2]
 8006278:	2900      	cmp	r1, #0
 800627a:	d1f6      	bne.n	800626a <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800627c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800627e:	f102 0308 	add.w	r3, r2, #8
 8006282:	e853 3f00 	ldrex	r3, [r3]
 8006286:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800628a:	3208      	adds	r2, #8
 800628c:	e842 3100 	strex	r1, r3, [r2]
 8006290:	2900      	cmp	r1, #0
 8006292:	d1f3      	bne.n	800627c <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006294:	2320      	movs	r3, #32
 8006296:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
}
 800629a:	4770      	bx	lr

0800629c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800629c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629e:	e852 3f00 	ldrex	r3, [r2]
 80062a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a6:	e842 3100 	strex	r1, r3, [r2]
 80062aa:	2900      	cmp	r1, #0
 80062ac:	d1f6      	bne.n	800629c <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80062ae:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b0:	f102 0308 	add.w	r3, r2, #8
 80062b4:	e853 3f00 	ldrex	r3, [r3]
 80062b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062bc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c0:	3208      	adds	r2, #8
 80062c2:	e842 3100 	strex	r1, r3, [r2]
 80062c6:	2900      	cmp	r1, #0
 80062c8:	d1f1      	bne.n	80062ae <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062ca:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d006      	beq.n	80062de <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062d0:	2320      	movs	r3, #32
 80062d2:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062d6:	2300      	movs	r3, #0
 80062d8:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80062da:	6703      	str	r3, [r0, #112]	; 0x70
}
 80062dc:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062de:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e0:	e852 3f00 	ldrex	r3, [r2]
 80062e4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e8:	e842 3100 	strex	r1, r3, [r2]
 80062ec:	2900      	cmp	r1, #0
 80062ee:	d1f6      	bne.n	80062de <UART_EndRxTransfer+0x42>
 80062f0:	e7ee      	b.n	80062d0 <UART_EndRxTransfer+0x34>
	...

080062f4 <HAL_UART_Transmit_DMA>:
{
 80062f4:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80062f6:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 80062fa:	2a20      	cmp	r2, #32
 80062fc:	d14a      	bne.n	8006394 <HAL_UART_Transmit_DMA+0xa0>
{
 80062fe:	b510      	push	{r4, lr}
 8006300:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8006302:	2900      	cmp	r1, #0
 8006304:	d048      	beq.n	8006398 <HAL_UART_Transmit_DMA+0xa4>
 8006306:	2b00      	cmp	r3, #0
 8006308:	d048      	beq.n	800639c <HAL_UART_Transmit_DMA+0xa8>
    __HAL_LOCK(huart);
 800630a:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800630e:	2a01      	cmp	r2, #1
 8006310:	d046      	beq.n	80063a0 <HAL_UART_Transmit_DMA+0xac>
 8006312:	2201      	movs	r2, #1
 8006314:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
    huart->pTxBuffPtr  = pData;
 8006318:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 800631a:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 800631e:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006322:	2200      	movs	r2, #0
 8006324:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006328:	2221      	movs	r2, #33	; 0x21
 800632a:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    if (huart->hdmatx != NULL)
 800632e:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8006330:	b1e2      	cbz	r2, 800636c <HAL_UART_Transmit_DMA+0x78>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006332:	491c      	ldr	r1, [pc, #112]	; (80063a4 <HAL_UART_Transmit_DMA+0xb0>)
 8006334:	62d1      	str	r1, [r2, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006336:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8006338:	491b      	ldr	r1, [pc, #108]	; (80063a8 <HAL_UART_Transmit_DMA+0xb4>)
 800633a:	6311      	str	r1, [r2, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800633c:	6f82      	ldr	r2, [r0, #120]	; 0x78
 800633e:	491b      	ldr	r1, [pc, #108]	; (80063ac <HAL_UART_Transmit_DMA+0xb8>)
 8006340:	6351      	str	r1, [r2, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 8006342:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8006344:	2100      	movs	r1, #0
 8006346:	6391      	str	r1, [r2, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006348:	6802      	ldr	r2, [r0, #0]
 800634a:	3228      	adds	r2, #40	; 0x28
 800634c:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800634e:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8006350:	f7fd f942 	bl	80035d8 <HAL_DMA_Start_IT>
 8006354:	b150      	cbz	r0, 800636c <HAL_UART_Transmit_DMA+0x78>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006356:	2310      	movs	r3, #16
 8006358:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 800635c:	2300      	movs	r3, #0
 800635e:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 8006362:	2320      	movs	r3, #32
 8006364:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        return HAL_ERROR;
 8006368:	2001      	movs	r0, #1
 800636a:	e012      	b.n	8006392 <HAL_UART_Transmit_DMA+0x9e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800636c:	6823      	ldr	r3, [r4, #0]
 800636e:	2240      	movs	r2, #64	; 0x40
 8006370:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 8006372:	2300      	movs	r3, #0
 8006374:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006378:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637a:	f102 0308 	add.w	r3, r2, #8
 800637e:	e853 3f00 	ldrex	r3, [r3]
 8006382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006386:	3208      	adds	r2, #8
 8006388:	e842 3100 	strex	r1, r3, [r2]
 800638c:	2900      	cmp	r1, #0
 800638e:	d1f3      	bne.n	8006378 <HAL_UART_Transmit_DMA+0x84>
    return HAL_OK;
 8006390:	2000      	movs	r0, #0
}
 8006392:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8006394:	2002      	movs	r0, #2
}
 8006396:	4770      	bx	lr
      return HAL_ERROR;
 8006398:	2001      	movs	r0, #1
 800639a:	e7fa      	b.n	8006392 <HAL_UART_Transmit_DMA+0x9e>
 800639c:	2001      	movs	r0, #1
 800639e:	e7f8      	b.n	8006392 <HAL_UART_Transmit_DMA+0x9e>
    __HAL_LOCK(huart);
 80063a0:	2002      	movs	r0, #2
 80063a2:	e7f6      	b.n	8006392 <HAL_UART_Transmit_DMA+0x9e>
 80063a4:	080063b3 	.word	0x080063b3
 80063a8:	080063fd 	.word	0x080063fd
 80063ac:	08006409 	.word	0x08006409

080063b0 <HAL_UART_TxCpltCallback>:
}
 80063b0:	4770      	bx	lr

080063b2 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80063b2:	b508      	push	{r3, lr}
 80063b4:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80063b6:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f013 0f20 	tst.w	r3, #32
 80063c0:	d118      	bne.n	80063f4 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 80063c2:	2300      	movs	r3, #0
 80063c4:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80063c8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ca:	f102 0308 	add.w	r3, r2, #8
 80063ce:	e853 3f00 	ldrex	r3, [r3]
 80063d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d6:	3208      	adds	r2, #8
 80063d8:	e842 3100 	strex	r1, r3, [r2]
 80063dc:	2900      	cmp	r1, #0
 80063de:	d1f3      	bne.n	80063c8 <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80063e0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e2:	e852 3f00 	ldrex	r3, [r2]
 80063e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ea:	e842 3100 	strex	r1, r3, [r2]
 80063ee:	2900      	cmp	r1, #0
 80063f0:	d1f6      	bne.n	80063e0 <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80063f2:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80063f4:	f7ff ffdc 	bl	80063b0 <HAL_UART_TxCpltCallback>
}
 80063f8:	e7fb      	b.n	80063f2 <UART_DMATransmitCplt+0x40>

080063fa <HAL_UART_TxHalfCpltCallback>:
}
 80063fa:	4770      	bx	lr

080063fc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80063fc:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80063fe:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8006400:	f7ff fffb 	bl	80063fa <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006404:	bd08      	pop	{r3, pc}

08006406 <HAL_UART_ErrorCallback>:
}
 8006406:	4770      	bx	lr

08006408 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006408:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800640a:	6a84      	ldr	r4, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800640c:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006410:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006414:	6823      	ldr	r3, [r4, #0]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	f013 0f80 	tst.w	r3, #128	; 0x80
 800641c:	d001      	beq.n	8006422 <UART_DMAError+0x1a>
 800641e:	2a21      	cmp	r2, #33	; 0x21
 8006420:	d010      	beq.n	8006444 <UART_DMAError+0x3c>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006422:	6823      	ldr	r3, [r4, #0]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	f013 0f40 	tst.w	r3, #64	; 0x40
 800642a:	d001      	beq.n	8006430 <UART_DMAError+0x28>
 800642c:	2d22      	cmp	r5, #34	; 0x22
 800642e:	d010      	beq.n	8006452 <UART_DMAError+0x4a>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006430:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006434:	f043 0310 	orr.w	r3, r3, #16
 8006438:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800643c:	4620      	mov	r0, r4
 800643e:	f7ff ffe2 	bl	8006406 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006442:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 8006444:	2300      	movs	r3, #0
 8006446:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800644a:	4620      	mov	r0, r4
 800644c:	f7ff ff0d 	bl	800626a <UART_EndTxTransfer>
 8006450:	e7e7      	b.n	8006422 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 8006452:	2300      	movs	r3, #0
 8006454:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8006458:	4620      	mov	r0, r4
 800645a:	f7ff ff1f 	bl	800629c <UART_EndRxTransfer>
 800645e:	e7e7      	b.n	8006430 <UART_DMAError+0x28>

08006460 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006460:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006462:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8006464:	2300      	movs	r3, #0
 8006466:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800646a:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800646e:	f7ff ffca 	bl	8006406 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006472:	bd08      	pop	{r3, pc}

08006474 <HAL_UARTEx_RxEventCallback>:
}
 8006474:	4770      	bx	lr
	...

08006478 <HAL_UART_IRQHandler>:
{
 8006478:	b570      	push	{r4, r5, r6, lr}
 800647a:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800647c:	6802      	ldr	r2, [r0, #0]
 800647e:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006480:	6811      	ldr	r1, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006482:	6890      	ldr	r0, [r2, #8]
  if (errorflags == 0U)
 8006484:	f640 0c0f 	movw	ip, #2063	; 0x80f
 8006488:	ea13 0f0c 	tst.w	r3, ip
 800648c:	d10e      	bne.n	80064ac <HAL_UART_IRQHandler+0x34>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800648e:	f013 0f20 	tst.w	r3, #32
 8006492:	d014      	beq.n	80064be <HAL_UART_IRQHandler+0x46>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006494:	f001 0c20 	and.w	ip, r1, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006498:	f000 5580 	and.w	r5, r0, #268435456	; 0x10000000
 800649c:	ea5c 0c05 	orrs.w	ip, ip, r5
 80064a0:	d00d      	beq.n	80064be <HAL_UART_IRQHandler+0x46>
      if (huart->RxISR != NULL)
 80064a2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80064a4:	b3a3      	cbz	r3, 8006510 <HAL_UART_IRQHandler+0x98>
        huart->RxISR(huart);
 80064a6:	4620      	mov	r0, r4
 80064a8:	4798      	blx	r3
 80064aa:	e031      	b.n	8006510 <HAL_UART_IRQHandler+0x98>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80064ac:	4db5      	ldr	r5, [pc, #724]	; (8006784 <HAL_UART_IRQHandler+0x30c>)
 80064ae:	4005      	ands	r5, r0
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80064b0:	f8df c2d8 	ldr.w	ip, [pc, #728]	; 800678c <HAL_UART_IRQHandler+0x314>
 80064b4:	ea01 0c0c 	and.w	ip, r1, ip
 80064b8:	ea5c 0c05 	orrs.w	ip, ip, r5
 80064bc:	d129      	bne.n	8006512 <HAL_UART_IRQHandler+0x9a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064be:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 80064c0:	2d01      	cmp	r5, #1
 80064c2:	f000 80c0 	beq.w	8006646 <HAL_UART_IRQHandler+0x1ce>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80064c6:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80064ca:	d003      	beq.n	80064d4 <HAL_UART_IRQHandler+0x5c>
 80064cc:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 80064d0:	f040 8151 	bne.w	8006776 <HAL_UART_IRQHandler+0x2fe>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80064d4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80064d8:	d006      	beq.n	80064e8 <HAL_UART_IRQHandler+0x70>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80064da:	f001 0280 	and.w	r2, r1, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80064de:	f400 0000 	and.w	r0, r0, #8388608	; 0x800000
 80064e2:	4302      	orrs	r2, r0
 80064e4:	f040 8154 	bne.w	8006790 <HAL_UART_IRQHandler+0x318>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80064e8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80064ec:	d003      	beq.n	80064f6 <HAL_UART_IRQHandler+0x7e>
 80064ee:	f011 0f40 	tst.w	r1, #64	; 0x40
 80064f2:	f040 8154 	bne.w	800679e <HAL_UART_IRQHandler+0x326>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80064f6:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80064fa:	d003      	beq.n	8006504 <HAL_UART_IRQHandler+0x8c>
 80064fc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8006500:	f040 815f 	bne.w	80067c2 <HAL_UART_IRQHandler+0x34a>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006504:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8006508:	d002      	beq.n	8006510 <HAL_UART_IRQHandler+0x98>
 800650a:	2900      	cmp	r1, #0
 800650c:	f2c0 815d 	blt.w	80067ca <HAL_UART_IRQHandler+0x352>
}
 8006510:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006512:	f013 0f01 	tst.w	r3, #1
 8006516:	d009      	beq.n	800652c <HAL_UART_IRQHandler+0xb4>
 8006518:	f411 7f80 	tst.w	r1, #256	; 0x100
 800651c:	d006      	beq.n	800652c <HAL_UART_IRQHandler+0xb4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800651e:	2601      	movs	r6, #1
 8006520:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006522:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8006526:	4332      	orrs	r2, r6
 8006528:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800652c:	f013 0f02 	tst.w	r3, #2
 8006530:	d00f      	beq.n	8006552 <HAL_UART_IRQHandler+0xda>
 8006532:	f010 0f01 	tst.w	r0, #1
 8006536:	d01b      	beq.n	8006570 <HAL_UART_IRQHandler+0xf8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006538:	6822      	ldr	r2, [r4, #0]
 800653a:	2602      	movs	r6, #2
 800653c:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800653e:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8006542:	f042 0204 	orr.w	r2, r2, #4
 8006546:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800654a:	f013 0f04 	tst.w	r3, #4
 800654e:	d106      	bne.n	800655e <HAL_UART_IRQHandler+0xe6>
 8006550:	e00e      	b.n	8006570 <HAL_UART_IRQHandler+0xf8>
 8006552:	f013 0f04 	tst.w	r3, #4
 8006556:	d00b      	beq.n	8006570 <HAL_UART_IRQHandler+0xf8>
 8006558:	f010 0f01 	tst.w	r0, #1
 800655c:	d008      	beq.n	8006570 <HAL_UART_IRQHandler+0xf8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800655e:	6822      	ldr	r2, [r4, #0]
 8006560:	2604      	movs	r6, #4
 8006562:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006564:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8006568:	f042 0202 	orr.w	r2, r2, #2
 800656c:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006570:	f013 0f08 	tst.w	r3, #8
 8006574:	d00b      	beq.n	800658e <HAL_UART_IRQHandler+0x116>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006576:	f001 0220 	and.w	r2, r1, #32
 800657a:	432a      	orrs	r2, r5
 800657c:	d007      	beq.n	800658e <HAL_UART_IRQHandler+0x116>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800657e:	6822      	ldr	r2, [r4, #0]
 8006580:	2508      	movs	r5, #8
 8006582:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006584:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8006588:	432a      	orrs	r2, r5
 800658a:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800658e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8006592:	d00c      	beq.n	80065ae <HAL_UART_IRQHandler+0x136>
 8006594:	f011 6f80 	tst.w	r1, #67108864	; 0x4000000
 8006598:	d009      	beq.n	80065ae <HAL_UART_IRQHandler+0x136>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800659a:	6822      	ldr	r2, [r4, #0]
 800659c:	f44f 6500 	mov.w	r5, #2048	; 0x800
 80065a0:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80065a2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80065a6:	f042 0220 	orr.w	r2, r2, #32
 80065aa:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065ae:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80065b2:	2a00      	cmp	r2, #0
 80065b4:	d0ac      	beq.n	8006510 <HAL_UART_IRQHandler+0x98>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80065b6:	f013 0f20 	tst.w	r3, #32
 80065ba:	d009      	beq.n	80065d0 <HAL_UART_IRQHandler+0x158>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80065bc:	f001 0120 	and.w	r1, r1, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80065c0:	f000 5080 	and.w	r0, r0, #268435456	; 0x10000000
 80065c4:	4301      	orrs	r1, r0
 80065c6:	d003      	beq.n	80065d0 <HAL_UART_IRQHandler+0x158>
        if (huart->RxISR != NULL)
 80065c8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80065ca:	b10b      	cbz	r3, 80065d0 <HAL_UART_IRQHandler+0x158>
          huart->RxISR(huart);
 80065cc:	4620      	mov	r0, r4
 80065ce:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 80065d0:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80065d4:	6823      	ldr	r3, [r4, #0]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80065dc:	f002 0228 	and.w	r2, r2, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80065e0:	4313      	orrs	r3, r2
 80065e2:	d029      	beq.n	8006638 <HAL_UART_IRQHandler+0x1c0>
        UART_EndRxTransfer(huart);
 80065e4:	4620      	mov	r0, r4
 80065e6:	f7ff fe59 	bl	800629c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065ea:	6823      	ldr	r3, [r4, #0]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	f013 0f40 	tst.w	r3, #64	; 0x40
 80065f2:	d01d      	beq.n	8006630 <HAL_UART_IRQHandler+0x1b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065f4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f6:	f102 0308 	add.w	r3, r2, #8
 80065fa:	e853 3f00 	ldrex	r3, [r3]
 80065fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006602:	3208      	adds	r2, #8
 8006604:	e842 3100 	strex	r1, r3, [r2]
 8006608:	2900      	cmp	r1, #0
 800660a:	d1f3      	bne.n	80065f4 <HAL_UART_IRQHandler+0x17c>
          if (huart->hdmarx != NULL)
 800660c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800660e:	b15b      	cbz	r3, 8006628 <HAL_UART_IRQHandler+0x1b0>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006610:	4a5d      	ldr	r2, [pc, #372]	; (8006788 <HAL_UART_IRQHandler+0x310>)
 8006612:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006614:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8006616:	f7fd f85f 	bl	80036d8 <HAL_DMA_Abort_IT>
 800661a:	2800      	cmp	r0, #0
 800661c:	f43f af78 	beq.w	8006510 <HAL_UART_IRQHandler+0x98>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006620:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8006622:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006624:	4798      	blx	r3
 8006626:	e773      	b.n	8006510 <HAL_UART_IRQHandler+0x98>
            HAL_UART_ErrorCallback(huart);
 8006628:	4620      	mov	r0, r4
 800662a:	f7ff feec 	bl	8006406 <HAL_UART_ErrorCallback>
 800662e:	e76f      	b.n	8006510 <HAL_UART_IRQHandler+0x98>
          HAL_UART_ErrorCallback(huart);
 8006630:	4620      	mov	r0, r4
 8006632:	f7ff fee8 	bl	8006406 <HAL_UART_ErrorCallback>
 8006636:	e76b      	b.n	8006510 <HAL_UART_IRQHandler+0x98>
        HAL_UART_ErrorCallback(huart);
 8006638:	4620      	mov	r0, r4
 800663a:	f7ff fee4 	bl	8006406 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800663e:	2300      	movs	r3, #0
 8006640:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8006644:	e764      	b.n	8006510 <HAL_UART_IRQHandler+0x98>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006646:	f013 0f10 	tst.w	r3, #16
 800664a:	f43f af3c 	beq.w	80064c6 <HAL_UART_IRQHandler+0x4e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800664e:	f011 0f10 	tst.w	r1, #16
 8006652:	f43f af38 	beq.w	80064c6 <HAL_UART_IRQHandler+0x4e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006656:	2310      	movs	r3, #16
 8006658:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800665a:	6823      	ldr	r3, [r4, #0]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006662:	d04e      	beq.n	8006702 <HAL_UART_IRQHandler+0x28a>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006664:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8006666:	6813      	ldr	r3, [r2, #0]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 800666c:	2b00      	cmp	r3, #0
 800666e:	f43f af4f 	beq.w	8006510 <HAL_UART_IRQHandler+0x98>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006672:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8006676:	4299      	cmp	r1, r3
 8006678:	f67f af4a 	bls.w	8006510 <HAL_UART_IRQHandler+0x98>
        huart->RxXferCount = nb_remaining_rx_data;
 800667c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006680:	6813      	ldr	r3, [r2, #0]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f013 0f20 	tst.w	r3, #32
 8006688:	d131      	bne.n	80066ee <HAL_UART_IRQHandler+0x276>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800668a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800668c:	e852 3f00 	ldrex	r3, [r2]
 8006690:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006694:	e842 3100 	strex	r1, r3, [r2]
 8006698:	2900      	cmp	r1, #0
 800669a:	d1f6      	bne.n	800668a <HAL_UART_IRQHandler+0x212>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800669c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669e:	f102 0308 	add.w	r3, r2, #8
 80066a2:	e853 3f00 	ldrex	r3, [r3]
 80066a6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066aa:	3208      	adds	r2, #8
 80066ac:	e842 3100 	strex	r1, r3, [r2]
 80066b0:	2900      	cmp	r1, #0
 80066b2:	d1f3      	bne.n	800669c <HAL_UART_IRQHandler+0x224>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066b4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b6:	f102 0308 	add.w	r3, r2, #8
 80066ba:	e853 3f00 	ldrex	r3, [r3]
 80066be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c2:	3208      	adds	r2, #8
 80066c4:	e842 3100 	strex	r1, r3, [r2]
 80066c8:	2900      	cmp	r1, #0
 80066ca:	d1f3      	bne.n	80066b4 <HAL_UART_IRQHandler+0x23c>
          huart->RxState = HAL_UART_STATE_READY;
 80066cc:	2320      	movs	r3, #32
 80066ce:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066d2:	2300      	movs	r3, #0
 80066d4:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066d6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d8:	e852 3f00 	ldrex	r3, [r2]
 80066dc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e0:	e842 3100 	strex	r1, r3, [r2]
 80066e4:	2900      	cmp	r1, #0
 80066e6:	d1f6      	bne.n	80066d6 <HAL_UART_IRQHandler+0x25e>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80066e8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80066ea:	f7fc ffbf 	bl	800366c <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80066ee:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80066f2:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80066f6:	1ac9      	subs	r1, r1, r3
 80066f8:	b289      	uxth	r1, r1
 80066fa:	4620      	mov	r0, r4
 80066fc:	f7ff feba 	bl	8006474 <HAL_UARTEx_RxEventCallback>
 8006700:	e706      	b.n	8006510 <HAL_UART_IRQHandler+0x98>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006702:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006706:	b29a      	uxth	r2, r3
      if ((huart->RxXferCount > 0U)
 8006708:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800670c:	b29b      	uxth	r3, r3
 800670e:	2b00      	cmp	r3, #0
 8006710:	f43f aefe 	beq.w	8006510 <HAL_UART_IRQHandler+0x98>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006714:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8006718:	1a89      	subs	r1, r1, r2
 800671a:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800671c:	2900      	cmp	r1, #0
 800671e:	f43f aef7 	beq.w	8006510 <HAL_UART_IRQHandler+0x98>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006722:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006724:	e852 3f00 	ldrex	r3, [r2]
 8006728:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672c:	e842 3000 	strex	r0, r3, [r2]
 8006730:	2800      	cmp	r0, #0
 8006732:	d1f6      	bne.n	8006722 <HAL_UART_IRQHandler+0x2aa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006734:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006736:	f102 0308 	add.w	r3, r2, #8
 800673a:	e853 3f00 	ldrex	r3, [r3]
 800673e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006742:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006746:	3208      	adds	r2, #8
 8006748:	e842 3000 	strex	r0, r3, [r2]
 800674c:	2800      	cmp	r0, #0
 800674e:	d1f1      	bne.n	8006734 <HAL_UART_IRQHandler+0x2bc>
        huart->RxState = HAL_UART_STATE_READY;
 8006750:	2320      	movs	r3, #32
 8006752:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006756:	2300      	movs	r3, #0
 8006758:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 800675a:	6723      	str	r3, [r4, #112]	; 0x70
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800675c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800675e:	e852 3f00 	ldrex	r3, [r2]
 8006762:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006766:	e842 3000 	strex	r0, r3, [r2]
 800676a:	2800      	cmp	r0, #0
 800676c:	d1f6      	bne.n	800675c <HAL_UART_IRQHandler+0x2e4>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800676e:	4620      	mov	r0, r4
 8006770:	f7ff fe80 	bl	8006474 <HAL_UARTEx_RxEventCallback>
 8006774:	e6cc      	b.n	8006510 <HAL_UART_IRQHandler+0x98>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006776:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800677a:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800677c:	4620      	mov	r0, r4
 800677e:	f000 fb47 	bl	8006e10 <HAL_UARTEx_WakeupCallback>
    return;
 8006782:	e6c5      	b.n	8006510 <HAL_UART_IRQHandler+0x98>
 8006784:	10000001 	.word	0x10000001
 8006788:	08006461 	.word	0x08006461
 800678c:	04000120 	.word	0x04000120
    if (huart->TxISR != NULL)
 8006790:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006792:	2b00      	cmp	r3, #0
 8006794:	f43f aebc 	beq.w	8006510 <HAL_UART_IRQHandler+0x98>
      huart->TxISR(huart);
 8006798:	4620      	mov	r0, r4
 800679a:	4798      	blx	r3
 800679c:	e6b8      	b.n	8006510 <HAL_UART_IRQHandler+0x98>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800679e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a0:	e852 3f00 	ldrex	r3, [r2]
 80067a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a8:	e842 3100 	strex	r1, r3, [r2]
 80067ac:	2900      	cmp	r1, #0
 80067ae:	d1f6      	bne.n	800679e <HAL_UART_IRQHandler+0x326>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067b0:	2320      	movs	r3, #32
 80067b2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80067b6:	2300      	movs	r3, #0
 80067b8:	6763      	str	r3, [r4, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067ba:	4620      	mov	r0, r4
 80067bc:	f7ff fdf8 	bl	80063b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067c0:	e6a6      	b.n	8006510 <HAL_UART_IRQHandler+0x98>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80067c2:	4620      	mov	r0, r4
 80067c4:	f000 fb26 	bl	8006e14 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 80067c8:	e6a2      	b.n	8006510 <HAL_UART_IRQHandler+0x98>
    HAL_UARTEx_RxFifoFullCallback(huart);
 80067ca:	4620      	mov	r0, r4
 80067cc:	f000 fb21 	bl	8006e12 <HAL_UARTEx_RxFifoFullCallback>
    return;
 80067d0:	e69e      	b.n	8006510 <HAL_UART_IRQHandler+0x98>
 80067d2:	bf00      	nop

080067d4 <UART_SetConfig>:
{
 80067d4:	b570      	push	{r4, r5, r6, lr}
 80067d6:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 80067d8:	6801      	ldr	r1, [r0, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067da:	6808      	ldr	r0, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80067dc:	68a3      	ldr	r3, [r4, #8]
 80067de:	6922      	ldr	r2, [r4, #16]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	6962      	ldr	r2, [r4, #20]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	69e2      	ldr	r2, [r4, #28]
 80067e8:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067ea:	4aa4      	ldr	r2, [pc, #656]	; (8006a7c <UART_SetConfig+0x2a8>)
 80067ec:	4002      	ands	r2, r0
 80067ee:	4313      	orrs	r3, r2
 80067f0:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067f2:	6822      	ldr	r2, [r4, #0]
 80067f4:	6853      	ldr	r3, [r2, #4]
 80067f6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80067fa:	68e1      	ldr	r1, [r4, #12]
 80067fc:	430b      	orrs	r3, r1
 80067fe:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006800:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006802:	6822      	ldr	r2, [r4, #0]
 8006804:	4b9e      	ldr	r3, [pc, #632]	; (8006a80 <UART_SetConfig+0x2ac>)
 8006806:	429a      	cmp	r2, r3
    tmpreg |= huart->Init.OneBitSampling;
 8006808:	bf1c      	itt	ne
 800680a:	6a23      	ldrne	r3, [r4, #32]
 800680c:	4319      	orrne	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800680e:	6893      	ldr	r3, [r2, #8]
 8006810:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006814:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006818:	430b      	orrs	r3, r1
 800681a:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800681c:	6822      	ldr	r2, [r4, #0]
 800681e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006820:	f023 030f 	bic.w	r3, r3, #15
 8006824:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006826:	430b      	orrs	r3, r1
 8006828:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800682a:	6823      	ldr	r3, [r4, #0]
 800682c:	4a95      	ldr	r2, [pc, #596]	; (8006a84 <UART_SetConfig+0x2b0>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d01f      	beq.n	8006872 <UART_SetConfig+0x9e>
 8006832:	4a95      	ldr	r2, [pc, #596]	; (8006a88 <UART_SetConfig+0x2b4>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d02e      	beq.n	8006896 <UART_SetConfig+0xc2>
 8006838:	4a94      	ldr	r2, [pc, #592]	; (8006a8c <UART_SetConfig+0x2b8>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d048      	beq.n	80068d0 <UART_SetConfig+0xfc>
 800683e:	4a94      	ldr	r2, [pc, #592]	; (8006a90 <UART_SetConfig+0x2bc>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d05b      	beq.n	80068fc <UART_SetConfig+0x128>
 8006844:	4a8e      	ldr	r2, [pc, #568]	; (8006a80 <UART_SetConfig+0x2ac>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d06d      	beq.n	8006926 <UART_SetConfig+0x152>
 800684a:	2210      	movs	r2, #16
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800684c:	69e0      	ldr	r0, [r4, #28]
 800684e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006852:	f000 80de 	beq.w	8006a12 <UART_SetConfig+0x23e>
    switch (clocksource)
 8006856:	2a08      	cmp	r2, #8
 8006858:	f200 815e 	bhi.w	8006b18 <UART_SetConfig+0x344>
 800685c:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006860:	01440122 	.word	0x01440122
 8006864:	015c014a 	.word	0x015c014a
 8006868:	015c0147 	.word	0x015c0147
 800686c:	015c015c 	.word	0x015c015c
 8006870:	010a      	.short	0x010a
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006872:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8006876:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800687a:	f002 0203 	and.w	r2, r2, #3
 800687e:	2a03      	cmp	r2, #3
 8006880:	d807      	bhi.n	8006892 <UART_SetConfig+0xbe>
 8006882:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006886:	006b      	.short	0x006b
 8006888:	014f0004 	.word	0x014f0004
 800688c:	0151      	.short	0x0151
 800688e:	2204      	movs	r2, #4
 8006890:	e7dc      	b.n	800684c <UART_SetConfig+0x78>
 8006892:	2210      	movs	r2, #16
 8006894:	e7da      	b.n	800684c <UART_SetConfig+0x78>
 8006896:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 800689a:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800689e:	f002 020c 	and.w	r2, r2, #12
 80068a2:	2a0c      	cmp	r2, #12
 80068a4:	d812      	bhi.n	80068cc <UART_SetConfig+0xf8>
 80068a6:	e8df f012 	tbh	[pc, r2, lsl #1]
 80068aa:	0077      	.short	0x0077
 80068ac:	00110011 	.word	0x00110011
 80068b0:	000d0011 	.word	0x000d0011
 80068b4:	00110011 	.word	0x00110011
 80068b8:	01410011 	.word	0x01410011
 80068bc:	00110011 	.word	0x00110011
 80068c0:	000f0011 	.word	0x000f0011
 80068c4:	2204      	movs	r2, #4
 80068c6:	e7c1      	b.n	800684c <UART_SetConfig+0x78>
 80068c8:	2208      	movs	r2, #8
 80068ca:	e7bf      	b.n	800684c <UART_SetConfig+0x78>
 80068cc:	2210      	movs	r2, #16
 80068ce:	e7bd      	b.n	800684c <UART_SetConfig+0x78>
 80068d0:	4b70      	ldr	r3, [pc, #448]	; (8006a94 <UART_SetConfig+0x2c0>)
 80068d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068d6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80068da:	2b20      	cmp	r3, #32
 80068dc:	f000 8128 	beq.w	8006b30 <UART_SetConfig+0x35c>
 80068e0:	d807      	bhi.n	80068f2 <UART_SetConfig+0x11e>
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	f000 8091 	beq.w	8006a0a <UART_SetConfig+0x236>
 80068e8:	2b10      	cmp	r3, #16
 80068ea:	bf14      	ite	ne
 80068ec:	2210      	movne	r2, #16
 80068ee:	2204      	moveq	r2, #4
 80068f0:	e7ac      	b.n	800684c <UART_SetConfig+0x78>
 80068f2:	2b30      	cmp	r3, #48	; 0x30
 80068f4:	bf14      	ite	ne
 80068f6:	2210      	movne	r2, #16
 80068f8:	2208      	moveq	r2, #8
 80068fa:	e7a7      	b.n	800684c <UART_SetConfig+0x78>
 80068fc:	4b65      	ldr	r3, [pc, #404]	; (8006a94 <UART_SetConfig+0x2c0>)
 80068fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006902:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006906:	2b80      	cmp	r3, #128	; 0x80
 8006908:	f000 8114 	beq.w	8006b34 <UART_SetConfig+0x360>
 800690c:	d806      	bhi.n	800691c <UART_SetConfig+0x148>
 800690e:	2b00      	cmp	r3, #0
 8006910:	d07d      	beq.n	8006a0e <UART_SetConfig+0x23a>
 8006912:	2b40      	cmp	r3, #64	; 0x40
 8006914:	bf14      	ite	ne
 8006916:	2210      	movne	r2, #16
 8006918:	2204      	moveq	r2, #4
 800691a:	e797      	b.n	800684c <UART_SetConfig+0x78>
 800691c:	2bc0      	cmp	r3, #192	; 0xc0
 800691e:	bf14      	ite	ne
 8006920:	2210      	movne	r2, #16
 8006922:	2208      	moveq	r2, #8
 8006924:	e792      	b.n	800684c <UART_SetConfig+0x78>
 8006926:	4b5b      	ldr	r3, [pc, #364]	; (8006a94 <UART_SetConfig+0x2c0>)
 8006928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800692c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006930:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006934:	d064      	beq.n	8006a00 <UART_SetConfig+0x22c>
 8006936:	d809      	bhi.n	800694c <UART_SetConfig+0x178>
 8006938:	b393      	cbz	r3, 80069a0 <UART_SetConfig+0x1cc>
 800693a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800693e:	bf18      	it	ne
 8006940:	2001      	movne	r0, #1
 8006942:	f040 80c8 	bne.w	8006ad6 <UART_SetConfig+0x302>
        pclk = HAL_RCC_GetSysClockFreq();
 8006946:	f7fd ffc3 	bl	80048d0 <HAL_RCC_GetSysClockFreq>
        break;
 800694a:	e02b      	b.n	80069a4 <UART_SetConfig+0x1d0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800694c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006950:	d102      	bne.n	8006958 <UART_SetConfig+0x184>
        pclk = (uint32_t) LSE_VALUE;
 8006952:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006956:	e028      	b.n	80069aa <UART_SetConfig+0x1d6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006958:	2001      	movs	r0, #1
 800695a:	e0bc      	b.n	8006ad6 <UART_SetConfig+0x302>
 800695c:	2201      	movs	r2, #1
  if (UART_INSTANCE_LOWPOWER(huart))
 800695e:	4948      	ldr	r1, [pc, #288]	; (8006a80 <UART_SetConfig+0x2ac>)
 8006960:	428b      	cmp	r3, r1
 8006962:	f47f af73 	bne.w	800684c <UART_SetConfig+0x78>
    switch (clocksource)
 8006966:	2a08      	cmp	r2, #8
 8006968:	f200 80c6 	bhi.w	8006af8 <UART_SetConfig+0x324>
 800696c:	a301      	add	r3, pc, #4	; (adr r3, 8006974 <UART_SetConfig+0x1a0>)
 800696e:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8006972:	bf00      	nop
 8006974:	080069a1 	.word	0x080069a1
 8006978:	08006af9 	.word	0x08006af9
 800697c:	0800699d 	.word	0x0800699d
 8006980:	08006af9 	.word	0x08006af9
 8006984:	08006947 	.word	0x08006947
 8006988:	08006af9 	.word	0x08006af9
 800698c:	08006af9 	.word	0x08006af9
 8006990:	08006af9 	.word	0x08006af9
 8006994:	08006a05 	.word	0x08006a05
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006998:	2200      	movs	r2, #0
 800699a:	e7e0      	b.n	800695e <UART_SetConfig+0x18a>
    switch (clocksource)
 800699c:	483e      	ldr	r0, [pc, #248]	; (8006a98 <UART_SetConfig+0x2c4>)
 800699e:	e004      	b.n	80069aa <UART_SetConfig+0x1d6>
        pclk = HAL_RCC_GetPCLK1Freq();
 80069a0:	f7fe f8ee 	bl	8004b80 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80069a4:	2800      	cmp	r0, #0
 80069a6:	f000 80a9 	beq.w	8006afc <UART_SetConfig+0x328>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80069aa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80069ac:	4b3b      	ldr	r3, [pc, #236]	; (8006a9c <UART_SetConfig+0x2c8>)
 80069ae:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80069b2:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80069b6:	6865      	ldr	r5, [r4, #4]
 80069b8:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80069bc:	4299      	cmp	r1, r3
 80069be:	f200 809f 	bhi.w	8006b00 <UART_SetConfig+0x32c>
 80069c2:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 80069c6:	f200 809d 	bhi.w	8006b04 <UART_SetConfig+0x330>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069ca:	2600      	movs	r6, #0
 80069cc:	4633      	mov	r3, r6
 80069ce:	4631      	mov	r1, r6
 80069d0:	f7fa f912 	bl	8000bf8 <__aeabi_uldivmod>
 80069d4:	0209      	lsls	r1, r1, #8
 80069d6:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 80069da:	0200      	lsls	r0, r0, #8
 80069dc:	086b      	lsrs	r3, r5, #1
 80069de:	18c0      	adds	r0, r0, r3
 80069e0:	462a      	mov	r2, r5
 80069e2:	4633      	mov	r3, r6
 80069e4:	f141 0100 	adc.w	r1, r1, #0
 80069e8:	f7fa f906 	bl	8000bf8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80069ec:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 80069f0:	4b2b      	ldr	r3, [pc, #172]	; (8006aa0 <UART_SetConfig+0x2cc>)
 80069f2:	429a      	cmp	r2, r3
 80069f4:	f200 8088 	bhi.w	8006b08 <UART_SetConfig+0x334>
          huart->Instance->BRR = usartdiv;
 80069f8:	6823      	ldr	r3, [r4, #0]
 80069fa:	60d8      	str	r0, [r3, #12]
 80069fc:	4630      	mov	r0, r6
 80069fe:	e06a      	b.n	8006ad6 <UART_SetConfig+0x302>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a00:	4825      	ldr	r0, [pc, #148]	; (8006a98 <UART_SetConfig+0x2c4>)
 8006a02:	e7d2      	b.n	80069aa <UART_SetConfig+0x1d6>
        pclk = (uint32_t) LSE_VALUE;
 8006a04:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006a08:	e7cf      	b.n	80069aa <UART_SetConfig+0x1d6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	e71e      	b.n	800684c <UART_SetConfig+0x78>
 8006a0e:	2200      	movs	r2, #0
 8006a10:	e71c      	b.n	800684c <UART_SetConfig+0x78>
    switch (clocksource)
 8006a12:	2a08      	cmp	r2, #8
 8006a14:	d87a      	bhi.n	8006b0c <UART_SetConfig+0x338>
 8006a16:	e8df f002 	tbb	[pc, r2]
 8006a1a:	2505      	.short	0x2505
 8006a1c:	7928792b 	.word	0x7928792b
 8006a20:	7979      	.short	0x7979
 8006a22:	09          	.byte	0x09
 8006a23:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a24:	f7fe f8ac 	bl	8004b80 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006a28:	2800      	cmp	r0, #0
 8006a2a:	d071      	beq.n	8006b10 <UART_SetConfig+0x33c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a2c:	6862      	ldr	r2, [r4, #4]
 8006a2e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006a30:	4b1a      	ldr	r3, [pc, #104]	; (8006a9c <UART_SetConfig+0x2c8>)
 8006a32:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8006a36:	fbb0 f0f3 	udiv	r0, r0, r3
 8006a3a:	0853      	lsrs	r3, r2, #1
 8006a3c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8006a40:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a44:	f1a3 0110 	sub.w	r1, r3, #16
 8006a48:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8006a4c:	4291      	cmp	r1, r2
 8006a4e:	d861      	bhi.n	8006b14 <UART_SetConfig+0x340>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a50:	f023 020f 	bic.w	r2, r3, #15
 8006a54:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 8006a56:	6821      	ldr	r1, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a58:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	60cb      	str	r3, [r1, #12]
 8006a60:	2000      	movs	r0, #0
 8006a62:	e038      	b.n	8006ad6 <UART_SetConfig+0x302>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a64:	f7fe f89e 	bl	8004ba4 <HAL_RCC_GetPCLK2Freq>
        break;
 8006a68:	e7de      	b.n	8006a28 <UART_SetConfig+0x254>
        pclk = HAL_RCC_GetSysClockFreq();
 8006a6a:	f7fd ff31 	bl	80048d0 <HAL_RCC_GetSysClockFreq>
        break;
 8006a6e:	e7db      	b.n	8006a28 <UART_SetConfig+0x254>
        pclk = (uint32_t) HSI_VALUE;
 8006a70:	4809      	ldr	r0, [pc, #36]	; (8006a98 <UART_SetConfig+0x2c4>)
 8006a72:	e7db      	b.n	8006a2c <UART_SetConfig+0x258>
    switch (clocksource)
 8006a74:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006a78:	e018      	b.n	8006aac <UART_SetConfig+0x2d8>
 8006a7a:	bf00      	nop
 8006a7c:	cfff69f3 	.word	0xcfff69f3
 8006a80:	40008000 	.word	0x40008000
 8006a84:	40013800 	.word	0x40013800
 8006a88:	40004400 	.word	0x40004400
 8006a8c:	40004800 	.word	0x40004800
 8006a90:	40004c00 	.word	0x40004c00
 8006a94:	40021000 	.word	0x40021000
 8006a98:	00f42400 	.word	0x00f42400
 8006a9c:	08009c88 	.word	0x08009c88
 8006aa0:	000ffcff 	.word	0x000ffcff
        pclk = HAL_RCC_GetPCLK1Freq();
 8006aa4:	f7fe f86c 	bl	8004b80 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006aa8:	2800      	cmp	r0, #0
 8006aaa:	d037      	beq.n	8006b1c <UART_SetConfig+0x348>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006aac:	6863      	ldr	r3, [r4, #4]
 8006aae:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006ab0:	4a21      	ldr	r2, [pc, #132]	; (8006b38 <UART_SetConfig+0x364>)
 8006ab2:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8006ab6:	fbb0 f0f2 	udiv	r0, r0, r2
 8006aba:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8006abe:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ac2:	f1a0 0210 	sub.w	r2, r0, #16
 8006ac6:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d828      	bhi.n	8006b20 <UART_SetConfig+0x34c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ace:	6823      	ldr	r3, [r4, #0]
 8006ad0:	b280      	uxth	r0, r0
 8006ad2:	60d8      	str	r0, [r3, #12]
 8006ad4:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006adc:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 8006ae4:	6763      	str	r3, [r4, #116]	; 0x74
}
 8006ae6:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ae8:	f7fe f85c 	bl	8004ba4 <HAL_RCC_GetPCLK2Freq>
        break;
 8006aec:	e7dc      	b.n	8006aa8 <UART_SetConfig+0x2d4>
        pclk = HAL_RCC_GetSysClockFreq();
 8006aee:	f7fd feef 	bl	80048d0 <HAL_RCC_GetSysClockFreq>
        break;
 8006af2:	e7d9      	b.n	8006aa8 <UART_SetConfig+0x2d4>
        pclk = (uint32_t) HSI_VALUE;
 8006af4:	4811      	ldr	r0, [pc, #68]	; (8006b3c <UART_SetConfig+0x368>)
 8006af6:	e7d9      	b.n	8006aac <UART_SetConfig+0x2d8>
    switch (clocksource)
 8006af8:	2001      	movs	r0, #1
 8006afa:	e7ec      	b.n	8006ad6 <UART_SetConfig+0x302>
 8006afc:	2000      	movs	r0, #0
 8006afe:	e7ea      	b.n	8006ad6 <UART_SetConfig+0x302>
        ret = HAL_ERROR;
 8006b00:	2001      	movs	r0, #1
 8006b02:	e7e8      	b.n	8006ad6 <UART_SetConfig+0x302>
 8006b04:	2001      	movs	r0, #1
 8006b06:	e7e6      	b.n	8006ad6 <UART_SetConfig+0x302>
          ret = HAL_ERROR;
 8006b08:	2001      	movs	r0, #1
 8006b0a:	e7e4      	b.n	8006ad6 <UART_SetConfig+0x302>
    switch (clocksource)
 8006b0c:	2001      	movs	r0, #1
 8006b0e:	e7e2      	b.n	8006ad6 <UART_SetConfig+0x302>
 8006b10:	2000      	movs	r0, #0
 8006b12:	e7e0      	b.n	8006ad6 <UART_SetConfig+0x302>
        ret = HAL_ERROR;
 8006b14:	2001      	movs	r0, #1
 8006b16:	e7de      	b.n	8006ad6 <UART_SetConfig+0x302>
    switch (clocksource)
 8006b18:	2001      	movs	r0, #1
 8006b1a:	e7dc      	b.n	8006ad6 <UART_SetConfig+0x302>
 8006b1c:	2000      	movs	r0, #0
 8006b1e:	e7da      	b.n	8006ad6 <UART_SetConfig+0x302>
        ret = HAL_ERROR;
 8006b20:	2001      	movs	r0, #1
 8006b22:	e7d8      	b.n	8006ad6 <UART_SetConfig+0x302>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b24:	2202      	movs	r2, #2
 8006b26:	e691      	b.n	800684c <UART_SetConfig+0x78>
 8006b28:	2208      	movs	r2, #8
 8006b2a:	e68f      	b.n	800684c <UART_SetConfig+0x78>
 8006b2c:	2202      	movs	r2, #2
 8006b2e:	e68d      	b.n	800684c <UART_SetConfig+0x78>
 8006b30:	2202      	movs	r2, #2
 8006b32:	e68b      	b.n	800684c <UART_SetConfig+0x78>
 8006b34:	2202      	movs	r2, #2
 8006b36:	e689      	b.n	800684c <UART_SetConfig+0x78>
 8006b38:	08009c88 	.word	0x08009c88
 8006b3c:	00f42400 	.word	0x00f42400

08006b40 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b40:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006b42:	f013 0f01 	tst.w	r3, #1
 8006b46:	d006      	beq.n	8006b56 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b48:	6802      	ldr	r2, [r0, #0]
 8006b4a:	6853      	ldr	r3, [r2, #4]
 8006b4c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006b50:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8006b52:	430b      	orrs	r3, r1
 8006b54:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b56:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006b58:	f013 0f02 	tst.w	r3, #2
 8006b5c:	d006      	beq.n	8006b6c <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b5e:	6802      	ldr	r2, [r0, #0]
 8006b60:	6853      	ldr	r3, [r2, #4]
 8006b62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b66:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8006b68:	430b      	orrs	r3, r1
 8006b6a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b6c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006b6e:	f013 0f04 	tst.w	r3, #4
 8006b72:	d006      	beq.n	8006b82 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b74:	6802      	ldr	r2, [r0, #0]
 8006b76:	6853      	ldr	r3, [r2, #4]
 8006b78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b7c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8006b7e:	430b      	orrs	r3, r1
 8006b80:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b82:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006b84:	f013 0f08 	tst.w	r3, #8
 8006b88:	d006      	beq.n	8006b98 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b8a:	6802      	ldr	r2, [r0, #0]
 8006b8c:	6853      	ldr	r3, [r2, #4]
 8006b8e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b92:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8006b94:	430b      	orrs	r3, r1
 8006b96:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b98:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006b9a:	f013 0f10 	tst.w	r3, #16
 8006b9e:	d006      	beq.n	8006bae <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ba0:	6802      	ldr	r2, [r0, #0]
 8006ba2:	6893      	ldr	r3, [r2, #8]
 8006ba4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ba8:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8006baa:	430b      	orrs	r3, r1
 8006bac:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006bae:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006bb0:	f013 0f20 	tst.w	r3, #32
 8006bb4:	d006      	beq.n	8006bc4 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006bb6:	6802      	ldr	r2, [r0, #0]
 8006bb8:	6893      	ldr	r3, [r2, #8]
 8006bba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bbe:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8006bc0:	430b      	orrs	r3, r1
 8006bc2:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006bc4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006bc6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006bca:	d00a      	beq.n	8006be2 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006bcc:	6802      	ldr	r2, [r0, #0]
 8006bce:	6853      	ldr	r3, [r2, #4]
 8006bd0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006bd4:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8006bd6:	430b      	orrs	r3, r1
 8006bd8:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006bda:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006bdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006be0:	d00b      	beq.n	8006bfa <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006be2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006be4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006be8:	d006      	beq.n	8006bf8 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006bea:	6802      	ldr	r2, [r0, #0]
 8006bec:	6853      	ldr	r3, [r2, #4]
 8006bee:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006bf2:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8006bf4:	430b      	orrs	r3, r1
 8006bf6:	6053      	str	r3, [r2, #4]
}
 8006bf8:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006bfa:	6802      	ldr	r2, [r0, #0]
 8006bfc:	6853      	ldr	r3, [r2, #4]
 8006bfe:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006c02:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8006c04:	430b      	orrs	r3, r1
 8006c06:	6053      	str	r3, [r2, #4]
 8006c08:	e7eb      	b.n	8006be2 <UART_AdvFeatureConfig+0xa2>

08006c0a <UART_WaitOnFlagUntilTimeout>:
{
 8006c0a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c0e:	4680      	mov	r8, r0
 8006c10:	460e      	mov	r6, r1
 8006c12:	4615      	mov	r5, r2
 8006c14:	4699      	mov	r9, r3
 8006c16:	9f08      	ldr	r7, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c18:	f8d8 3000 	ldr.w	r3, [r8]
 8006c1c:	69dc      	ldr	r4, [r3, #28]
 8006c1e:	ea36 0404 	bics.w	r4, r6, r4
 8006c22:	bf0c      	ite	eq
 8006c24:	2401      	moveq	r4, #1
 8006c26:	2400      	movne	r4, #0
 8006c28:	42ac      	cmp	r4, r5
 8006c2a:	d15a      	bne.n	8006ce2 <UART_WaitOnFlagUntilTimeout+0xd8>
    if (Timeout != HAL_MAX_DELAY)
 8006c2c:	f1b7 3fff 	cmp.w	r7, #4294967295
 8006c30:	d0f4      	beq.n	8006c1c <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c32:	f7fb fd53 	bl	80026dc <HAL_GetTick>
 8006c36:	eba0 0009 	sub.w	r0, r0, r9
 8006c3a:	42b8      	cmp	r0, r7
 8006c3c:	d830      	bhi.n	8006ca0 <UART_WaitOnFlagUntilTimeout+0x96>
 8006c3e:	b37f      	cbz	r7, 8006ca0 <UART_WaitOnFlagUntilTimeout+0x96>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c40:	f8d8 3000 	ldr.w	r3, [r8]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	f012 0f04 	tst.w	r2, #4
 8006c4a:	d0e5      	beq.n	8006c18 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c4c:	69da      	ldr	r2, [r3, #28]
 8006c4e:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8006c52:	d0e1      	beq.n	8006c18 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c58:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006c5a:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c5e:	e852 3f00 	ldrex	r3, [r2]
 8006c62:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c66:	e842 3100 	strex	r1, r3, [r2]
 8006c6a:	2900      	cmp	r1, #0
 8006c6c:	d1f5      	bne.n	8006c5a <UART_WaitOnFlagUntilTimeout+0x50>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c6e:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c72:	f102 0308 	add.w	r3, r2, #8
 8006c76:	e853 3f00 	ldrex	r3, [r3]
 8006c7a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c7e:	3208      	adds	r2, #8
 8006c80:	e842 3100 	strex	r1, r3, [r2]
 8006c84:	2900      	cmp	r1, #0
 8006c86:	d1f2      	bne.n	8006c6e <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 8006c88:	2320      	movs	r3, #32
 8006c8a:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006c8e:	f8c8 3088 	str.w	r3, [r8, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c92:	f8c8 308c 	str.w	r3, [r8, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 8006c96:	2300      	movs	r3, #0
 8006c98:	f888 3080 	strb.w	r3, [r8, #128]	; 0x80
          return HAL_TIMEOUT;
 8006c9c:	2003      	movs	r0, #3
 8006c9e:	e021      	b.n	8006ce4 <UART_WaitOnFlagUntilTimeout+0xda>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006ca0:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca4:	e852 3f00 	ldrex	r3, [r2]
 8006ca8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cac:	e842 3100 	strex	r1, r3, [r2]
 8006cb0:	2900      	cmp	r1, #0
 8006cb2:	d1f5      	bne.n	8006ca0 <UART_WaitOnFlagUntilTimeout+0x96>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cb4:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb8:	f102 0308 	add.w	r3, r2, #8
 8006cbc:	e853 3f00 	ldrex	r3, [r3]
 8006cc0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc4:	3208      	adds	r2, #8
 8006cc6:	e842 3100 	strex	r1, r3, [r2]
 8006cca:	2900      	cmp	r1, #0
 8006ccc:	d1f2      	bne.n	8006cb4 <UART_WaitOnFlagUntilTimeout+0xaa>
        huart->gState = HAL_UART_STATE_READY;
 8006cce:	2320      	movs	r3, #32
 8006cd0:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006cd4:	f8c8 3088 	str.w	r3, [r8, #136]	; 0x88
        __HAL_UNLOCK(huart);
 8006cd8:	2300      	movs	r3, #0
 8006cda:	f888 3080 	strb.w	r3, [r8, #128]	; 0x80
        return HAL_TIMEOUT;
 8006cde:	2003      	movs	r0, #3
 8006ce0:	e000      	b.n	8006ce4 <UART_WaitOnFlagUntilTimeout+0xda>
  return HAL_OK;
 8006ce2:	2000      	movs	r0, #0
}
 8006ce4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006ce8 <UART_CheckIdleState>:
{
 8006ce8:	b530      	push	{r4, r5, lr}
 8006cea:	b083      	sub	sp, #12
 8006cec:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8006cf4:	f7fb fcf2 	bl	80026dc <HAL_GetTick>
 8006cf8:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006cfa:	6822      	ldr	r2, [r4, #0]
 8006cfc:	6812      	ldr	r2, [r2, #0]
 8006cfe:	f012 0f08 	tst.w	r2, #8
 8006d02:	d10f      	bne.n	8006d24 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d04:	6823      	ldr	r3, [r4, #0]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f013 0f04 	tst.w	r3, #4
 8006d0c:	d118      	bne.n	8006d40 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8006d0e:	2320      	movs	r3, #32
 8006d10:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006d14:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d18:	2000      	movs	r0, #0
 8006d1a:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 8006d1c:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8006d20:	b003      	add	sp, #12
 8006d22:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d28:	9300      	str	r3, [sp, #0]
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d32:	4620      	mov	r0, r4
 8006d34:	f7ff ff69 	bl	8006c0a <UART_WaitOnFlagUntilTimeout>
 8006d38:	2800      	cmp	r0, #0
 8006d3a:	d0e3      	beq.n	8006d04 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8006d3c:	2003      	movs	r0, #3
 8006d3e:	e7ef      	b.n	8006d20 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d44:	9300      	str	r3, [sp, #0]
 8006d46:	462b      	mov	r3, r5
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006d4e:	4620      	mov	r0, r4
 8006d50:	f7ff ff5b 	bl	8006c0a <UART_WaitOnFlagUntilTimeout>
 8006d54:	2800      	cmp	r0, #0
 8006d56:	d0da      	beq.n	8006d0e <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8006d58:	2003      	movs	r0, #3
 8006d5a:	e7e1      	b.n	8006d20 <UART_CheckIdleState+0x38>

08006d5c <HAL_UART_Init>:
  if (huart == NULL)
 8006d5c:	b378      	cbz	r0, 8006dbe <HAL_UART_Init+0x62>
{
 8006d5e:	b510      	push	{r4, lr}
 8006d60:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8006d62:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8006d66:	b30b      	cbz	r3, 8006dac <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8006d68:	2324      	movs	r3, #36	; 0x24
 8006d6a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8006d6e:	6822      	ldr	r2, [r4, #0]
 8006d70:	6813      	ldr	r3, [r2, #0]
 8006d72:	f023 0301 	bic.w	r3, r3, #1
 8006d76:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d78:	4620      	mov	r0, r4
 8006d7a:	f7ff fd2b 	bl	80067d4 <UART_SetConfig>
 8006d7e:	2801      	cmp	r0, #1
 8006d80:	d013      	beq.n	8006daa <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d82:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006d84:	b9bb      	cbnz	r3, 8006db6 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d86:	6822      	ldr	r2, [r4, #0]
 8006d88:	6853      	ldr	r3, [r2, #4]
 8006d8a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8006d8e:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d90:	6822      	ldr	r2, [r4, #0]
 8006d92:	6893      	ldr	r3, [r2, #8]
 8006d94:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8006d98:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8006d9a:	6822      	ldr	r2, [r4, #0]
 8006d9c:	6813      	ldr	r3, [r2, #0]
 8006d9e:	f043 0301 	orr.w	r3, r3, #1
 8006da2:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8006da4:	4620      	mov	r0, r4
 8006da6:	f7ff ff9f 	bl	8006ce8 <UART_CheckIdleState>
}
 8006daa:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8006dac:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8006db0:	f7fb fbbe 	bl	8002530 <HAL_UART_MspInit>
 8006db4:	e7d8      	b.n	8006d68 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8006db6:	4620      	mov	r0, r4
 8006db8:	f7ff fec2 	bl	8006b40 <UART_AdvFeatureConfig>
 8006dbc:	e7e3      	b.n	8006d86 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8006dbe:	2001      	movs	r0, #1
}
 8006dc0:	4770      	bx	lr
	...

08006dc4 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006dc4:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006dc6:	b92b      	cbnz	r3, 8006dd4 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006dce:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 8006dd2:	4770      	bx	lr
{
 8006dd4:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006dd6:	6803      	ldr	r3, [r0, #0]
 8006dd8:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006dda:	6899      	ldr	r1, [r3, #8]
 8006ddc:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006dde:	4d0a      	ldr	r5, [pc, #40]	; (8006e08 <UARTEx_SetNbDataToProcess+0x44>)
 8006de0:	5c6b      	ldrb	r3, [r5, r1]
 8006de2:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006de4:	4c09      	ldr	r4, [pc, #36]	; (8006e0c <UARTEx_SetNbDataToProcess+0x48>)
 8006de6:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006de8:	fb93 f3f1 	sdiv	r3, r3, r1
 8006dec:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006df0:	f3c2 6242 	ubfx	r2, r2, #25, #3
 8006df4:	5cab      	ldrb	r3, [r5, r2]
 8006df6:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006df8:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006dfa:	fb93 f3f2 	sdiv	r3, r3, r2
    huart->NbRxDataToProcess = 1U;
 8006dfe:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8006e02:	bc30      	pop	{r4, r5}
 8006e04:	4770      	bx	lr
 8006e06:	bf00      	nop
 8006e08:	08009ca8 	.word	0x08009ca8
 8006e0c:	08009ca0 	.word	0x08009ca0

08006e10 <HAL_UARTEx_WakeupCallback>:
}
 8006e10:	4770      	bx	lr

08006e12 <HAL_UARTEx_RxFifoFullCallback>:
}
 8006e12:	4770      	bx	lr

08006e14 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8006e14:	4770      	bx	lr

08006e16 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8006e16:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d018      	beq.n	8006e50 <HAL_UARTEx_DisableFifoMode+0x3a>
 8006e1e:	2301      	movs	r3, #1
 8006e20:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006e24:	2324      	movs	r3, #36	; 0x24
 8006e26:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e2a:	6803      	ldr	r3, [r0, #0]
 8006e2c:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006e2e:	6819      	ldr	r1, [r3, #0]
 8006e30:	f021 0101 	bic.w	r1, r1, #1
 8006e34:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006e36:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e3e:	6801      	ldr	r1, [r0, #0]
 8006e40:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006e42:	2220      	movs	r2, #32
 8006e44:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006e48:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	4770      	bx	lr
  __HAL_LOCK(huart);
 8006e50:	2002      	movs	r0, #2
}
 8006e52:	4770      	bx	lr

08006e54 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8006e54:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8006e56:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d01d      	beq.n	8006e9a <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8006e5e:	4604      	mov	r4, r0
 8006e60:	2301      	movs	r3, #1
 8006e62:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006e66:	2324      	movs	r3, #36	; 0x24
 8006e68:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e6c:	6803      	ldr	r3, [r0, #0]
 8006e6e:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	f022 0201 	bic.w	r2, r2, #1
 8006e76:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006e78:	6802      	ldr	r2, [r0, #0]
 8006e7a:	6893      	ldr	r3, [r2, #8]
 8006e7c:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8006e80:	4319      	orrs	r1, r3
 8006e82:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006e84:	f7ff ff9e 	bl	8006dc4 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e88:	6823      	ldr	r3, [r4, #0]
 8006e8a:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006e8c:	2320      	movs	r3, #32
 8006e8e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006e92:	2000      	movs	r0, #0
 8006e94:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8006e98:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8006e9a:	2002      	movs	r0, #2
 8006e9c:	e7fc      	b.n	8006e98 <HAL_UARTEx_SetTxFifoThreshold+0x44>

08006e9e <HAL_UARTEx_SetRxFifoThreshold>:
{
 8006e9e:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8006ea0:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d01d      	beq.n	8006ee4 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8006ea8:	4604      	mov	r4, r0
 8006eaa:	2301      	movs	r3, #1
 8006eac:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006eb0:	2324      	movs	r3, #36	; 0x24
 8006eb2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006eb6:	6803      	ldr	r3, [r0, #0]
 8006eb8:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	f022 0201 	bic.w	r2, r2, #1
 8006ec0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006ec2:	6802      	ldr	r2, [r0, #0]
 8006ec4:	6893      	ldr	r3, [r2, #8]
 8006ec6:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8006eca:	4319      	orrs	r1, r3
 8006ecc:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006ece:	f7ff ff79 	bl	8006dc4 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ed2:	6823      	ldr	r3, [r4, #0]
 8006ed4:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006ed6:	2320      	movs	r3, #32
 8006ed8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006edc:	2000      	movs	r0, #0
 8006ede:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8006ee2:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8006ee4:	2002      	movs	r0, #2
 8006ee6:	e7fc      	b.n	8006ee2 <HAL_UARTEx_SetRxFifoThreshold+0x44>

08006ee8 <__cvt>:
 8006ee8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006eec:	ec55 4b10 	vmov	r4, r5, d0
 8006ef0:	2d00      	cmp	r5, #0
 8006ef2:	460e      	mov	r6, r1
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	462b      	mov	r3, r5
 8006ef8:	bfbb      	ittet	lt
 8006efa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006efe:	461d      	movlt	r5, r3
 8006f00:	2300      	movge	r3, #0
 8006f02:	232d      	movlt	r3, #45	; 0x2d
 8006f04:	700b      	strb	r3, [r1, #0]
 8006f06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f08:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006f0c:	4691      	mov	r9, r2
 8006f0e:	f023 0820 	bic.w	r8, r3, #32
 8006f12:	bfbc      	itt	lt
 8006f14:	4622      	movlt	r2, r4
 8006f16:	4614      	movlt	r4, r2
 8006f18:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006f1c:	d005      	beq.n	8006f2a <__cvt+0x42>
 8006f1e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006f22:	d100      	bne.n	8006f26 <__cvt+0x3e>
 8006f24:	3601      	adds	r6, #1
 8006f26:	2102      	movs	r1, #2
 8006f28:	e000      	b.n	8006f2c <__cvt+0x44>
 8006f2a:	2103      	movs	r1, #3
 8006f2c:	ab03      	add	r3, sp, #12
 8006f2e:	9301      	str	r3, [sp, #4]
 8006f30:	ab02      	add	r3, sp, #8
 8006f32:	9300      	str	r3, [sp, #0]
 8006f34:	ec45 4b10 	vmov	d0, r4, r5
 8006f38:	4653      	mov	r3, sl
 8006f3a:	4632      	mov	r2, r6
 8006f3c:	f000 fe90 	bl	8007c60 <_dtoa_r>
 8006f40:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006f44:	4607      	mov	r7, r0
 8006f46:	d102      	bne.n	8006f4e <__cvt+0x66>
 8006f48:	f019 0f01 	tst.w	r9, #1
 8006f4c:	d022      	beq.n	8006f94 <__cvt+0xac>
 8006f4e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006f52:	eb07 0906 	add.w	r9, r7, r6
 8006f56:	d110      	bne.n	8006f7a <__cvt+0x92>
 8006f58:	783b      	ldrb	r3, [r7, #0]
 8006f5a:	2b30      	cmp	r3, #48	; 0x30
 8006f5c:	d10a      	bne.n	8006f74 <__cvt+0x8c>
 8006f5e:	2200      	movs	r2, #0
 8006f60:	2300      	movs	r3, #0
 8006f62:	4620      	mov	r0, r4
 8006f64:	4629      	mov	r1, r5
 8006f66:	f7f9 fdd7 	bl	8000b18 <__aeabi_dcmpeq>
 8006f6a:	b918      	cbnz	r0, 8006f74 <__cvt+0x8c>
 8006f6c:	f1c6 0601 	rsb	r6, r6, #1
 8006f70:	f8ca 6000 	str.w	r6, [sl]
 8006f74:	f8da 3000 	ldr.w	r3, [sl]
 8006f78:	4499      	add	r9, r3
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	4620      	mov	r0, r4
 8006f80:	4629      	mov	r1, r5
 8006f82:	f7f9 fdc9 	bl	8000b18 <__aeabi_dcmpeq>
 8006f86:	b108      	cbz	r0, 8006f8c <__cvt+0xa4>
 8006f88:	f8cd 900c 	str.w	r9, [sp, #12]
 8006f8c:	2230      	movs	r2, #48	; 0x30
 8006f8e:	9b03      	ldr	r3, [sp, #12]
 8006f90:	454b      	cmp	r3, r9
 8006f92:	d307      	bcc.n	8006fa4 <__cvt+0xbc>
 8006f94:	9b03      	ldr	r3, [sp, #12]
 8006f96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f98:	1bdb      	subs	r3, r3, r7
 8006f9a:	4638      	mov	r0, r7
 8006f9c:	6013      	str	r3, [r2, #0]
 8006f9e:	b004      	add	sp, #16
 8006fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fa4:	1c59      	adds	r1, r3, #1
 8006fa6:	9103      	str	r1, [sp, #12]
 8006fa8:	701a      	strb	r2, [r3, #0]
 8006faa:	e7f0      	b.n	8006f8e <__cvt+0xa6>

08006fac <__exponent>:
 8006fac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006fae:	4603      	mov	r3, r0
 8006fb0:	2900      	cmp	r1, #0
 8006fb2:	bfb8      	it	lt
 8006fb4:	4249      	neglt	r1, r1
 8006fb6:	f803 2b02 	strb.w	r2, [r3], #2
 8006fba:	bfb4      	ite	lt
 8006fbc:	222d      	movlt	r2, #45	; 0x2d
 8006fbe:	222b      	movge	r2, #43	; 0x2b
 8006fc0:	2909      	cmp	r1, #9
 8006fc2:	7042      	strb	r2, [r0, #1]
 8006fc4:	dd2a      	ble.n	800701c <__exponent+0x70>
 8006fc6:	f10d 0207 	add.w	r2, sp, #7
 8006fca:	4617      	mov	r7, r2
 8006fcc:	260a      	movs	r6, #10
 8006fce:	4694      	mov	ip, r2
 8006fd0:	fb91 f5f6 	sdiv	r5, r1, r6
 8006fd4:	fb06 1415 	mls	r4, r6, r5, r1
 8006fd8:	3430      	adds	r4, #48	; 0x30
 8006fda:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006fde:	460c      	mov	r4, r1
 8006fe0:	2c63      	cmp	r4, #99	; 0x63
 8006fe2:	f102 32ff 	add.w	r2, r2, #4294967295
 8006fe6:	4629      	mov	r1, r5
 8006fe8:	dcf1      	bgt.n	8006fce <__exponent+0x22>
 8006fea:	3130      	adds	r1, #48	; 0x30
 8006fec:	f1ac 0402 	sub.w	r4, ip, #2
 8006ff0:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006ff4:	1c41      	adds	r1, r0, #1
 8006ff6:	4622      	mov	r2, r4
 8006ff8:	42ba      	cmp	r2, r7
 8006ffa:	d30a      	bcc.n	8007012 <__exponent+0x66>
 8006ffc:	f10d 0209 	add.w	r2, sp, #9
 8007000:	eba2 020c 	sub.w	r2, r2, ip
 8007004:	42bc      	cmp	r4, r7
 8007006:	bf88      	it	hi
 8007008:	2200      	movhi	r2, #0
 800700a:	4413      	add	r3, r2
 800700c:	1a18      	subs	r0, r3, r0
 800700e:	b003      	add	sp, #12
 8007010:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007012:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007016:	f801 5f01 	strb.w	r5, [r1, #1]!
 800701a:	e7ed      	b.n	8006ff8 <__exponent+0x4c>
 800701c:	2330      	movs	r3, #48	; 0x30
 800701e:	3130      	adds	r1, #48	; 0x30
 8007020:	7083      	strb	r3, [r0, #2]
 8007022:	70c1      	strb	r1, [r0, #3]
 8007024:	1d03      	adds	r3, r0, #4
 8007026:	e7f1      	b.n	800700c <__exponent+0x60>

08007028 <_printf_float>:
 8007028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800702c:	ed2d 8b02 	vpush	{d8}
 8007030:	b08d      	sub	sp, #52	; 0x34
 8007032:	460c      	mov	r4, r1
 8007034:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007038:	4616      	mov	r6, r2
 800703a:	461f      	mov	r7, r3
 800703c:	4605      	mov	r5, r0
 800703e:	f000 fcff 	bl	8007a40 <_localeconv_r>
 8007042:	f8d0 a000 	ldr.w	sl, [r0]
 8007046:	4650      	mov	r0, sl
 8007048:	f7f9 f93a 	bl	80002c0 <strlen>
 800704c:	2300      	movs	r3, #0
 800704e:	930a      	str	r3, [sp, #40]	; 0x28
 8007050:	6823      	ldr	r3, [r4, #0]
 8007052:	9305      	str	r3, [sp, #20]
 8007054:	f8d8 3000 	ldr.w	r3, [r8]
 8007058:	f894 b018 	ldrb.w	fp, [r4, #24]
 800705c:	3307      	adds	r3, #7
 800705e:	f023 0307 	bic.w	r3, r3, #7
 8007062:	f103 0208 	add.w	r2, r3, #8
 8007066:	f8c8 2000 	str.w	r2, [r8]
 800706a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800706e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007072:	9307      	str	r3, [sp, #28]
 8007074:	f8cd 8018 	str.w	r8, [sp, #24]
 8007078:	ee08 0a10 	vmov	s16, r0
 800707c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007080:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007084:	4b9e      	ldr	r3, [pc, #632]	; (8007300 <_printf_float+0x2d8>)
 8007086:	f04f 32ff 	mov.w	r2, #4294967295
 800708a:	f7f9 fd77 	bl	8000b7c <__aeabi_dcmpun>
 800708e:	bb88      	cbnz	r0, 80070f4 <_printf_float+0xcc>
 8007090:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007094:	4b9a      	ldr	r3, [pc, #616]	; (8007300 <_printf_float+0x2d8>)
 8007096:	f04f 32ff 	mov.w	r2, #4294967295
 800709a:	f7f9 fd51 	bl	8000b40 <__aeabi_dcmple>
 800709e:	bb48      	cbnz	r0, 80070f4 <_printf_float+0xcc>
 80070a0:	2200      	movs	r2, #0
 80070a2:	2300      	movs	r3, #0
 80070a4:	4640      	mov	r0, r8
 80070a6:	4649      	mov	r1, r9
 80070a8:	f7f9 fd40 	bl	8000b2c <__aeabi_dcmplt>
 80070ac:	b110      	cbz	r0, 80070b4 <_printf_float+0x8c>
 80070ae:	232d      	movs	r3, #45	; 0x2d
 80070b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070b4:	4a93      	ldr	r2, [pc, #588]	; (8007304 <_printf_float+0x2dc>)
 80070b6:	4b94      	ldr	r3, [pc, #592]	; (8007308 <_printf_float+0x2e0>)
 80070b8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80070bc:	bf94      	ite	ls
 80070be:	4690      	movls	r8, r2
 80070c0:	4698      	movhi	r8, r3
 80070c2:	2303      	movs	r3, #3
 80070c4:	6123      	str	r3, [r4, #16]
 80070c6:	9b05      	ldr	r3, [sp, #20]
 80070c8:	f023 0304 	bic.w	r3, r3, #4
 80070cc:	6023      	str	r3, [r4, #0]
 80070ce:	f04f 0900 	mov.w	r9, #0
 80070d2:	9700      	str	r7, [sp, #0]
 80070d4:	4633      	mov	r3, r6
 80070d6:	aa0b      	add	r2, sp, #44	; 0x2c
 80070d8:	4621      	mov	r1, r4
 80070da:	4628      	mov	r0, r5
 80070dc:	f000 f9da 	bl	8007494 <_printf_common>
 80070e0:	3001      	adds	r0, #1
 80070e2:	f040 8090 	bne.w	8007206 <_printf_float+0x1de>
 80070e6:	f04f 30ff 	mov.w	r0, #4294967295
 80070ea:	b00d      	add	sp, #52	; 0x34
 80070ec:	ecbd 8b02 	vpop	{d8}
 80070f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070f4:	4642      	mov	r2, r8
 80070f6:	464b      	mov	r3, r9
 80070f8:	4640      	mov	r0, r8
 80070fa:	4649      	mov	r1, r9
 80070fc:	f7f9 fd3e 	bl	8000b7c <__aeabi_dcmpun>
 8007100:	b140      	cbz	r0, 8007114 <_printf_float+0xec>
 8007102:	464b      	mov	r3, r9
 8007104:	2b00      	cmp	r3, #0
 8007106:	bfbc      	itt	lt
 8007108:	232d      	movlt	r3, #45	; 0x2d
 800710a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800710e:	4a7f      	ldr	r2, [pc, #508]	; (800730c <_printf_float+0x2e4>)
 8007110:	4b7f      	ldr	r3, [pc, #508]	; (8007310 <_printf_float+0x2e8>)
 8007112:	e7d1      	b.n	80070b8 <_printf_float+0x90>
 8007114:	6863      	ldr	r3, [r4, #4]
 8007116:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800711a:	9206      	str	r2, [sp, #24]
 800711c:	1c5a      	adds	r2, r3, #1
 800711e:	d13f      	bne.n	80071a0 <_printf_float+0x178>
 8007120:	2306      	movs	r3, #6
 8007122:	6063      	str	r3, [r4, #4]
 8007124:	9b05      	ldr	r3, [sp, #20]
 8007126:	6861      	ldr	r1, [r4, #4]
 8007128:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800712c:	2300      	movs	r3, #0
 800712e:	9303      	str	r3, [sp, #12]
 8007130:	ab0a      	add	r3, sp, #40	; 0x28
 8007132:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007136:	ab09      	add	r3, sp, #36	; 0x24
 8007138:	ec49 8b10 	vmov	d0, r8, r9
 800713c:	9300      	str	r3, [sp, #0]
 800713e:	6022      	str	r2, [r4, #0]
 8007140:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007144:	4628      	mov	r0, r5
 8007146:	f7ff fecf 	bl	8006ee8 <__cvt>
 800714a:	9b06      	ldr	r3, [sp, #24]
 800714c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800714e:	2b47      	cmp	r3, #71	; 0x47
 8007150:	4680      	mov	r8, r0
 8007152:	d108      	bne.n	8007166 <_printf_float+0x13e>
 8007154:	1cc8      	adds	r0, r1, #3
 8007156:	db02      	blt.n	800715e <_printf_float+0x136>
 8007158:	6863      	ldr	r3, [r4, #4]
 800715a:	4299      	cmp	r1, r3
 800715c:	dd41      	ble.n	80071e2 <_printf_float+0x1ba>
 800715e:	f1ab 0302 	sub.w	r3, fp, #2
 8007162:	fa5f fb83 	uxtb.w	fp, r3
 8007166:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800716a:	d820      	bhi.n	80071ae <_printf_float+0x186>
 800716c:	3901      	subs	r1, #1
 800716e:	465a      	mov	r2, fp
 8007170:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007174:	9109      	str	r1, [sp, #36]	; 0x24
 8007176:	f7ff ff19 	bl	8006fac <__exponent>
 800717a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800717c:	1813      	adds	r3, r2, r0
 800717e:	2a01      	cmp	r2, #1
 8007180:	4681      	mov	r9, r0
 8007182:	6123      	str	r3, [r4, #16]
 8007184:	dc02      	bgt.n	800718c <_printf_float+0x164>
 8007186:	6822      	ldr	r2, [r4, #0]
 8007188:	07d2      	lsls	r2, r2, #31
 800718a:	d501      	bpl.n	8007190 <_printf_float+0x168>
 800718c:	3301      	adds	r3, #1
 800718e:	6123      	str	r3, [r4, #16]
 8007190:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007194:	2b00      	cmp	r3, #0
 8007196:	d09c      	beq.n	80070d2 <_printf_float+0xaa>
 8007198:	232d      	movs	r3, #45	; 0x2d
 800719a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800719e:	e798      	b.n	80070d2 <_printf_float+0xaa>
 80071a0:	9a06      	ldr	r2, [sp, #24]
 80071a2:	2a47      	cmp	r2, #71	; 0x47
 80071a4:	d1be      	bne.n	8007124 <_printf_float+0xfc>
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d1bc      	bne.n	8007124 <_printf_float+0xfc>
 80071aa:	2301      	movs	r3, #1
 80071ac:	e7b9      	b.n	8007122 <_printf_float+0xfa>
 80071ae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80071b2:	d118      	bne.n	80071e6 <_printf_float+0x1be>
 80071b4:	2900      	cmp	r1, #0
 80071b6:	6863      	ldr	r3, [r4, #4]
 80071b8:	dd0b      	ble.n	80071d2 <_printf_float+0x1aa>
 80071ba:	6121      	str	r1, [r4, #16]
 80071bc:	b913      	cbnz	r3, 80071c4 <_printf_float+0x19c>
 80071be:	6822      	ldr	r2, [r4, #0]
 80071c0:	07d0      	lsls	r0, r2, #31
 80071c2:	d502      	bpl.n	80071ca <_printf_float+0x1a2>
 80071c4:	3301      	adds	r3, #1
 80071c6:	440b      	add	r3, r1
 80071c8:	6123      	str	r3, [r4, #16]
 80071ca:	65a1      	str	r1, [r4, #88]	; 0x58
 80071cc:	f04f 0900 	mov.w	r9, #0
 80071d0:	e7de      	b.n	8007190 <_printf_float+0x168>
 80071d2:	b913      	cbnz	r3, 80071da <_printf_float+0x1b2>
 80071d4:	6822      	ldr	r2, [r4, #0]
 80071d6:	07d2      	lsls	r2, r2, #31
 80071d8:	d501      	bpl.n	80071de <_printf_float+0x1b6>
 80071da:	3302      	adds	r3, #2
 80071dc:	e7f4      	b.n	80071c8 <_printf_float+0x1a0>
 80071de:	2301      	movs	r3, #1
 80071e0:	e7f2      	b.n	80071c8 <_printf_float+0x1a0>
 80071e2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80071e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071e8:	4299      	cmp	r1, r3
 80071ea:	db05      	blt.n	80071f8 <_printf_float+0x1d0>
 80071ec:	6823      	ldr	r3, [r4, #0]
 80071ee:	6121      	str	r1, [r4, #16]
 80071f0:	07d8      	lsls	r0, r3, #31
 80071f2:	d5ea      	bpl.n	80071ca <_printf_float+0x1a2>
 80071f4:	1c4b      	adds	r3, r1, #1
 80071f6:	e7e7      	b.n	80071c8 <_printf_float+0x1a0>
 80071f8:	2900      	cmp	r1, #0
 80071fa:	bfd4      	ite	le
 80071fc:	f1c1 0202 	rsble	r2, r1, #2
 8007200:	2201      	movgt	r2, #1
 8007202:	4413      	add	r3, r2
 8007204:	e7e0      	b.n	80071c8 <_printf_float+0x1a0>
 8007206:	6823      	ldr	r3, [r4, #0]
 8007208:	055a      	lsls	r2, r3, #21
 800720a:	d407      	bmi.n	800721c <_printf_float+0x1f4>
 800720c:	6923      	ldr	r3, [r4, #16]
 800720e:	4642      	mov	r2, r8
 8007210:	4631      	mov	r1, r6
 8007212:	4628      	mov	r0, r5
 8007214:	47b8      	blx	r7
 8007216:	3001      	adds	r0, #1
 8007218:	d12c      	bne.n	8007274 <_printf_float+0x24c>
 800721a:	e764      	b.n	80070e6 <_printf_float+0xbe>
 800721c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007220:	f240 80e0 	bls.w	80073e4 <_printf_float+0x3bc>
 8007224:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007228:	2200      	movs	r2, #0
 800722a:	2300      	movs	r3, #0
 800722c:	f7f9 fc74 	bl	8000b18 <__aeabi_dcmpeq>
 8007230:	2800      	cmp	r0, #0
 8007232:	d034      	beq.n	800729e <_printf_float+0x276>
 8007234:	4a37      	ldr	r2, [pc, #220]	; (8007314 <_printf_float+0x2ec>)
 8007236:	2301      	movs	r3, #1
 8007238:	4631      	mov	r1, r6
 800723a:	4628      	mov	r0, r5
 800723c:	47b8      	blx	r7
 800723e:	3001      	adds	r0, #1
 8007240:	f43f af51 	beq.w	80070e6 <_printf_float+0xbe>
 8007244:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007248:	429a      	cmp	r2, r3
 800724a:	db02      	blt.n	8007252 <_printf_float+0x22a>
 800724c:	6823      	ldr	r3, [r4, #0]
 800724e:	07d8      	lsls	r0, r3, #31
 8007250:	d510      	bpl.n	8007274 <_printf_float+0x24c>
 8007252:	ee18 3a10 	vmov	r3, s16
 8007256:	4652      	mov	r2, sl
 8007258:	4631      	mov	r1, r6
 800725a:	4628      	mov	r0, r5
 800725c:	47b8      	blx	r7
 800725e:	3001      	adds	r0, #1
 8007260:	f43f af41 	beq.w	80070e6 <_printf_float+0xbe>
 8007264:	f04f 0800 	mov.w	r8, #0
 8007268:	f104 091a 	add.w	r9, r4, #26
 800726c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800726e:	3b01      	subs	r3, #1
 8007270:	4543      	cmp	r3, r8
 8007272:	dc09      	bgt.n	8007288 <_printf_float+0x260>
 8007274:	6823      	ldr	r3, [r4, #0]
 8007276:	079b      	lsls	r3, r3, #30
 8007278:	f100 8107 	bmi.w	800748a <_printf_float+0x462>
 800727c:	68e0      	ldr	r0, [r4, #12]
 800727e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007280:	4298      	cmp	r0, r3
 8007282:	bfb8      	it	lt
 8007284:	4618      	movlt	r0, r3
 8007286:	e730      	b.n	80070ea <_printf_float+0xc2>
 8007288:	2301      	movs	r3, #1
 800728a:	464a      	mov	r2, r9
 800728c:	4631      	mov	r1, r6
 800728e:	4628      	mov	r0, r5
 8007290:	47b8      	blx	r7
 8007292:	3001      	adds	r0, #1
 8007294:	f43f af27 	beq.w	80070e6 <_printf_float+0xbe>
 8007298:	f108 0801 	add.w	r8, r8, #1
 800729c:	e7e6      	b.n	800726c <_printf_float+0x244>
 800729e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	dc39      	bgt.n	8007318 <_printf_float+0x2f0>
 80072a4:	4a1b      	ldr	r2, [pc, #108]	; (8007314 <_printf_float+0x2ec>)
 80072a6:	2301      	movs	r3, #1
 80072a8:	4631      	mov	r1, r6
 80072aa:	4628      	mov	r0, r5
 80072ac:	47b8      	blx	r7
 80072ae:	3001      	adds	r0, #1
 80072b0:	f43f af19 	beq.w	80070e6 <_printf_float+0xbe>
 80072b4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80072b8:	4313      	orrs	r3, r2
 80072ba:	d102      	bne.n	80072c2 <_printf_float+0x29a>
 80072bc:	6823      	ldr	r3, [r4, #0]
 80072be:	07d9      	lsls	r1, r3, #31
 80072c0:	d5d8      	bpl.n	8007274 <_printf_float+0x24c>
 80072c2:	ee18 3a10 	vmov	r3, s16
 80072c6:	4652      	mov	r2, sl
 80072c8:	4631      	mov	r1, r6
 80072ca:	4628      	mov	r0, r5
 80072cc:	47b8      	blx	r7
 80072ce:	3001      	adds	r0, #1
 80072d0:	f43f af09 	beq.w	80070e6 <_printf_float+0xbe>
 80072d4:	f04f 0900 	mov.w	r9, #0
 80072d8:	f104 0a1a 	add.w	sl, r4, #26
 80072dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072de:	425b      	negs	r3, r3
 80072e0:	454b      	cmp	r3, r9
 80072e2:	dc01      	bgt.n	80072e8 <_printf_float+0x2c0>
 80072e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072e6:	e792      	b.n	800720e <_printf_float+0x1e6>
 80072e8:	2301      	movs	r3, #1
 80072ea:	4652      	mov	r2, sl
 80072ec:	4631      	mov	r1, r6
 80072ee:	4628      	mov	r0, r5
 80072f0:	47b8      	blx	r7
 80072f2:	3001      	adds	r0, #1
 80072f4:	f43f aef7 	beq.w	80070e6 <_printf_float+0xbe>
 80072f8:	f109 0901 	add.w	r9, r9, #1
 80072fc:	e7ee      	b.n	80072dc <_printf_float+0x2b4>
 80072fe:	bf00      	nop
 8007300:	7fefffff 	.word	0x7fefffff
 8007304:	08009cb0 	.word	0x08009cb0
 8007308:	08009cb4 	.word	0x08009cb4
 800730c:	08009cb8 	.word	0x08009cb8
 8007310:	08009cbc 	.word	0x08009cbc
 8007314:	08009cc0 	.word	0x08009cc0
 8007318:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800731a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800731c:	429a      	cmp	r2, r3
 800731e:	bfa8      	it	ge
 8007320:	461a      	movge	r2, r3
 8007322:	2a00      	cmp	r2, #0
 8007324:	4691      	mov	r9, r2
 8007326:	dc37      	bgt.n	8007398 <_printf_float+0x370>
 8007328:	f04f 0b00 	mov.w	fp, #0
 800732c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007330:	f104 021a 	add.w	r2, r4, #26
 8007334:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007336:	9305      	str	r3, [sp, #20]
 8007338:	eba3 0309 	sub.w	r3, r3, r9
 800733c:	455b      	cmp	r3, fp
 800733e:	dc33      	bgt.n	80073a8 <_printf_float+0x380>
 8007340:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007344:	429a      	cmp	r2, r3
 8007346:	db3b      	blt.n	80073c0 <_printf_float+0x398>
 8007348:	6823      	ldr	r3, [r4, #0]
 800734a:	07da      	lsls	r2, r3, #31
 800734c:	d438      	bmi.n	80073c0 <_printf_float+0x398>
 800734e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007352:	eba2 0903 	sub.w	r9, r2, r3
 8007356:	9b05      	ldr	r3, [sp, #20]
 8007358:	1ad2      	subs	r2, r2, r3
 800735a:	4591      	cmp	r9, r2
 800735c:	bfa8      	it	ge
 800735e:	4691      	movge	r9, r2
 8007360:	f1b9 0f00 	cmp.w	r9, #0
 8007364:	dc35      	bgt.n	80073d2 <_printf_float+0x3aa>
 8007366:	f04f 0800 	mov.w	r8, #0
 800736a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800736e:	f104 0a1a 	add.w	sl, r4, #26
 8007372:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007376:	1a9b      	subs	r3, r3, r2
 8007378:	eba3 0309 	sub.w	r3, r3, r9
 800737c:	4543      	cmp	r3, r8
 800737e:	f77f af79 	ble.w	8007274 <_printf_float+0x24c>
 8007382:	2301      	movs	r3, #1
 8007384:	4652      	mov	r2, sl
 8007386:	4631      	mov	r1, r6
 8007388:	4628      	mov	r0, r5
 800738a:	47b8      	blx	r7
 800738c:	3001      	adds	r0, #1
 800738e:	f43f aeaa 	beq.w	80070e6 <_printf_float+0xbe>
 8007392:	f108 0801 	add.w	r8, r8, #1
 8007396:	e7ec      	b.n	8007372 <_printf_float+0x34a>
 8007398:	4613      	mov	r3, r2
 800739a:	4631      	mov	r1, r6
 800739c:	4642      	mov	r2, r8
 800739e:	4628      	mov	r0, r5
 80073a0:	47b8      	blx	r7
 80073a2:	3001      	adds	r0, #1
 80073a4:	d1c0      	bne.n	8007328 <_printf_float+0x300>
 80073a6:	e69e      	b.n	80070e6 <_printf_float+0xbe>
 80073a8:	2301      	movs	r3, #1
 80073aa:	4631      	mov	r1, r6
 80073ac:	4628      	mov	r0, r5
 80073ae:	9205      	str	r2, [sp, #20]
 80073b0:	47b8      	blx	r7
 80073b2:	3001      	adds	r0, #1
 80073b4:	f43f ae97 	beq.w	80070e6 <_printf_float+0xbe>
 80073b8:	9a05      	ldr	r2, [sp, #20]
 80073ba:	f10b 0b01 	add.w	fp, fp, #1
 80073be:	e7b9      	b.n	8007334 <_printf_float+0x30c>
 80073c0:	ee18 3a10 	vmov	r3, s16
 80073c4:	4652      	mov	r2, sl
 80073c6:	4631      	mov	r1, r6
 80073c8:	4628      	mov	r0, r5
 80073ca:	47b8      	blx	r7
 80073cc:	3001      	adds	r0, #1
 80073ce:	d1be      	bne.n	800734e <_printf_float+0x326>
 80073d0:	e689      	b.n	80070e6 <_printf_float+0xbe>
 80073d2:	9a05      	ldr	r2, [sp, #20]
 80073d4:	464b      	mov	r3, r9
 80073d6:	4442      	add	r2, r8
 80073d8:	4631      	mov	r1, r6
 80073da:	4628      	mov	r0, r5
 80073dc:	47b8      	blx	r7
 80073de:	3001      	adds	r0, #1
 80073e0:	d1c1      	bne.n	8007366 <_printf_float+0x33e>
 80073e2:	e680      	b.n	80070e6 <_printf_float+0xbe>
 80073e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073e6:	2a01      	cmp	r2, #1
 80073e8:	dc01      	bgt.n	80073ee <_printf_float+0x3c6>
 80073ea:	07db      	lsls	r3, r3, #31
 80073ec:	d53a      	bpl.n	8007464 <_printf_float+0x43c>
 80073ee:	2301      	movs	r3, #1
 80073f0:	4642      	mov	r2, r8
 80073f2:	4631      	mov	r1, r6
 80073f4:	4628      	mov	r0, r5
 80073f6:	47b8      	blx	r7
 80073f8:	3001      	adds	r0, #1
 80073fa:	f43f ae74 	beq.w	80070e6 <_printf_float+0xbe>
 80073fe:	ee18 3a10 	vmov	r3, s16
 8007402:	4652      	mov	r2, sl
 8007404:	4631      	mov	r1, r6
 8007406:	4628      	mov	r0, r5
 8007408:	47b8      	blx	r7
 800740a:	3001      	adds	r0, #1
 800740c:	f43f ae6b 	beq.w	80070e6 <_printf_float+0xbe>
 8007410:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007414:	2200      	movs	r2, #0
 8007416:	2300      	movs	r3, #0
 8007418:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800741c:	f7f9 fb7c 	bl	8000b18 <__aeabi_dcmpeq>
 8007420:	b9d8      	cbnz	r0, 800745a <_printf_float+0x432>
 8007422:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007426:	f108 0201 	add.w	r2, r8, #1
 800742a:	4631      	mov	r1, r6
 800742c:	4628      	mov	r0, r5
 800742e:	47b8      	blx	r7
 8007430:	3001      	adds	r0, #1
 8007432:	d10e      	bne.n	8007452 <_printf_float+0x42a>
 8007434:	e657      	b.n	80070e6 <_printf_float+0xbe>
 8007436:	2301      	movs	r3, #1
 8007438:	4652      	mov	r2, sl
 800743a:	4631      	mov	r1, r6
 800743c:	4628      	mov	r0, r5
 800743e:	47b8      	blx	r7
 8007440:	3001      	adds	r0, #1
 8007442:	f43f ae50 	beq.w	80070e6 <_printf_float+0xbe>
 8007446:	f108 0801 	add.w	r8, r8, #1
 800744a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800744c:	3b01      	subs	r3, #1
 800744e:	4543      	cmp	r3, r8
 8007450:	dcf1      	bgt.n	8007436 <_printf_float+0x40e>
 8007452:	464b      	mov	r3, r9
 8007454:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007458:	e6da      	b.n	8007210 <_printf_float+0x1e8>
 800745a:	f04f 0800 	mov.w	r8, #0
 800745e:	f104 0a1a 	add.w	sl, r4, #26
 8007462:	e7f2      	b.n	800744a <_printf_float+0x422>
 8007464:	2301      	movs	r3, #1
 8007466:	4642      	mov	r2, r8
 8007468:	e7df      	b.n	800742a <_printf_float+0x402>
 800746a:	2301      	movs	r3, #1
 800746c:	464a      	mov	r2, r9
 800746e:	4631      	mov	r1, r6
 8007470:	4628      	mov	r0, r5
 8007472:	47b8      	blx	r7
 8007474:	3001      	adds	r0, #1
 8007476:	f43f ae36 	beq.w	80070e6 <_printf_float+0xbe>
 800747a:	f108 0801 	add.w	r8, r8, #1
 800747e:	68e3      	ldr	r3, [r4, #12]
 8007480:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007482:	1a5b      	subs	r3, r3, r1
 8007484:	4543      	cmp	r3, r8
 8007486:	dcf0      	bgt.n	800746a <_printf_float+0x442>
 8007488:	e6f8      	b.n	800727c <_printf_float+0x254>
 800748a:	f04f 0800 	mov.w	r8, #0
 800748e:	f104 0919 	add.w	r9, r4, #25
 8007492:	e7f4      	b.n	800747e <_printf_float+0x456>

08007494 <_printf_common>:
 8007494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007498:	4616      	mov	r6, r2
 800749a:	4699      	mov	r9, r3
 800749c:	688a      	ldr	r2, [r1, #8]
 800749e:	690b      	ldr	r3, [r1, #16]
 80074a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80074a4:	4293      	cmp	r3, r2
 80074a6:	bfb8      	it	lt
 80074a8:	4613      	movlt	r3, r2
 80074aa:	6033      	str	r3, [r6, #0]
 80074ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80074b0:	4607      	mov	r7, r0
 80074b2:	460c      	mov	r4, r1
 80074b4:	b10a      	cbz	r2, 80074ba <_printf_common+0x26>
 80074b6:	3301      	adds	r3, #1
 80074b8:	6033      	str	r3, [r6, #0]
 80074ba:	6823      	ldr	r3, [r4, #0]
 80074bc:	0699      	lsls	r1, r3, #26
 80074be:	bf42      	ittt	mi
 80074c0:	6833      	ldrmi	r3, [r6, #0]
 80074c2:	3302      	addmi	r3, #2
 80074c4:	6033      	strmi	r3, [r6, #0]
 80074c6:	6825      	ldr	r5, [r4, #0]
 80074c8:	f015 0506 	ands.w	r5, r5, #6
 80074cc:	d106      	bne.n	80074dc <_printf_common+0x48>
 80074ce:	f104 0a19 	add.w	sl, r4, #25
 80074d2:	68e3      	ldr	r3, [r4, #12]
 80074d4:	6832      	ldr	r2, [r6, #0]
 80074d6:	1a9b      	subs	r3, r3, r2
 80074d8:	42ab      	cmp	r3, r5
 80074da:	dc26      	bgt.n	800752a <_printf_common+0x96>
 80074dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80074e0:	1e13      	subs	r3, r2, #0
 80074e2:	6822      	ldr	r2, [r4, #0]
 80074e4:	bf18      	it	ne
 80074e6:	2301      	movne	r3, #1
 80074e8:	0692      	lsls	r2, r2, #26
 80074ea:	d42b      	bmi.n	8007544 <_printf_common+0xb0>
 80074ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074f0:	4649      	mov	r1, r9
 80074f2:	4638      	mov	r0, r7
 80074f4:	47c0      	blx	r8
 80074f6:	3001      	adds	r0, #1
 80074f8:	d01e      	beq.n	8007538 <_printf_common+0xa4>
 80074fa:	6823      	ldr	r3, [r4, #0]
 80074fc:	6922      	ldr	r2, [r4, #16]
 80074fe:	f003 0306 	and.w	r3, r3, #6
 8007502:	2b04      	cmp	r3, #4
 8007504:	bf02      	ittt	eq
 8007506:	68e5      	ldreq	r5, [r4, #12]
 8007508:	6833      	ldreq	r3, [r6, #0]
 800750a:	1aed      	subeq	r5, r5, r3
 800750c:	68a3      	ldr	r3, [r4, #8]
 800750e:	bf0c      	ite	eq
 8007510:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007514:	2500      	movne	r5, #0
 8007516:	4293      	cmp	r3, r2
 8007518:	bfc4      	itt	gt
 800751a:	1a9b      	subgt	r3, r3, r2
 800751c:	18ed      	addgt	r5, r5, r3
 800751e:	2600      	movs	r6, #0
 8007520:	341a      	adds	r4, #26
 8007522:	42b5      	cmp	r5, r6
 8007524:	d11a      	bne.n	800755c <_printf_common+0xc8>
 8007526:	2000      	movs	r0, #0
 8007528:	e008      	b.n	800753c <_printf_common+0xa8>
 800752a:	2301      	movs	r3, #1
 800752c:	4652      	mov	r2, sl
 800752e:	4649      	mov	r1, r9
 8007530:	4638      	mov	r0, r7
 8007532:	47c0      	blx	r8
 8007534:	3001      	adds	r0, #1
 8007536:	d103      	bne.n	8007540 <_printf_common+0xac>
 8007538:	f04f 30ff 	mov.w	r0, #4294967295
 800753c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007540:	3501      	adds	r5, #1
 8007542:	e7c6      	b.n	80074d2 <_printf_common+0x3e>
 8007544:	18e1      	adds	r1, r4, r3
 8007546:	1c5a      	adds	r2, r3, #1
 8007548:	2030      	movs	r0, #48	; 0x30
 800754a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800754e:	4422      	add	r2, r4
 8007550:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007554:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007558:	3302      	adds	r3, #2
 800755a:	e7c7      	b.n	80074ec <_printf_common+0x58>
 800755c:	2301      	movs	r3, #1
 800755e:	4622      	mov	r2, r4
 8007560:	4649      	mov	r1, r9
 8007562:	4638      	mov	r0, r7
 8007564:	47c0      	blx	r8
 8007566:	3001      	adds	r0, #1
 8007568:	d0e6      	beq.n	8007538 <_printf_common+0xa4>
 800756a:	3601      	adds	r6, #1
 800756c:	e7d9      	b.n	8007522 <_printf_common+0x8e>
	...

08007570 <_printf_i>:
 8007570:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007574:	7e0f      	ldrb	r7, [r1, #24]
 8007576:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007578:	2f78      	cmp	r7, #120	; 0x78
 800757a:	4691      	mov	r9, r2
 800757c:	4680      	mov	r8, r0
 800757e:	460c      	mov	r4, r1
 8007580:	469a      	mov	sl, r3
 8007582:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007586:	d807      	bhi.n	8007598 <_printf_i+0x28>
 8007588:	2f62      	cmp	r7, #98	; 0x62
 800758a:	d80a      	bhi.n	80075a2 <_printf_i+0x32>
 800758c:	2f00      	cmp	r7, #0
 800758e:	f000 80d4 	beq.w	800773a <_printf_i+0x1ca>
 8007592:	2f58      	cmp	r7, #88	; 0x58
 8007594:	f000 80c0 	beq.w	8007718 <_printf_i+0x1a8>
 8007598:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800759c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80075a0:	e03a      	b.n	8007618 <_printf_i+0xa8>
 80075a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80075a6:	2b15      	cmp	r3, #21
 80075a8:	d8f6      	bhi.n	8007598 <_printf_i+0x28>
 80075aa:	a101      	add	r1, pc, #4	; (adr r1, 80075b0 <_printf_i+0x40>)
 80075ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80075b0:	08007609 	.word	0x08007609
 80075b4:	0800761d 	.word	0x0800761d
 80075b8:	08007599 	.word	0x08007599
 80075bc:	08007599 	.word	0x08007599
 80075c0:	08007599 	.word	0x08007599
 80075c4:	08007599 	.word	0x08007599
 80075c8:	0800761d 	.word	0x0800761d
 80075cc:	08007599 	.word	0x08007599
 80075d0:	08007599 	.word	0x08007599
 80075d4:	08007599 	.word	0x08007599
 80075d8:	08007599 	.word	0x08007599
 80075dc:	08007721 	.word	0x08007721
 80075e0:	08007649 	.word	0x08007649
 80075e4:	080076db 	.word	0x080076db
 80075e8:	08007599 	.word	0x08007599
 80075ec:	08007599 	.word	0x08007599
 80075f0:	08007743 	.word	0x08007743
 80075f4:	08007599 	.word	0x08007599
 80075f8:	08007649 	.word	0x08007649
 80075fc:	08007599 	.word	0x08007599
 8007600:	08007599 	.word	0x08007599
 8007604:	080076e3 	.word	0x080076e3
 8007608:	682b      	ldr	r3, [r5, #0]
 800760a:	1d1a      	adds	r2, r3, #4
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	602a      	str	r2, [r5, #0]
 8007610:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007614:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007618:	2301      	movs	r3, #1
 800761a:	e09f      	b.n	800775c <_printf_i+0x1ec>
 800761c:	6820      	ldr	r0, [r4, #0]
 800761e:	682b      	ldr	r3, [r5, #0]
 8007620:	0607      	lsls	r7, r0, #24
 8007622:	f103 0104 	add.w	r1, r3, #4
 8007626:	6029      	str	r1, [r5, #0]
 8007628:	d501      	bpl.n	800762e <_printf_i+0xbe>
 800762a:	681e      	ldr	r6, [r3, #0]
 800762c:	e003      	b.n	8007636 <_printf_i+0xc6>
 800762e:	0646      	lsls	r6, r0, #25
 8007630:	d5fb      	bpl.n	800762a <_printf_i+0xba>
 8007632:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007636:	2e00      	cmp	r6, #0
 8007638:	da03      	bge.n	8007642 <_printf_i+0xd2>
 800763a:	232d      	movs	r3, #45	; 0x2d
 800763c:	4276      	negs	r6, r6
 800763e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007642:	485a      	ldr	r0, [pc, #360]	; (80077ac <_printf_i+0x23c>)
 8007644:	230a      	movs	r3, #10
 8007646:	e012      	b.n	800766e <_printf_i+0xfe>
 8007648:	682b      	ldr	r3, [r5, #0]
 800764a:	6820      	ldr	r0, [r4, #0]
 800764c:	1d19      	adds	r1, r3, #4
 800764e:	6029      	str	r1, [r5, #0]
 8007650:	0605      	lsls	r5, r0, #24
 8007652:	d501      	bpl.n	8007658 <_printf_i+0xe8>
 8007654:	681e      	ldr	r6, [r3, #0]
 8007656:	e002      	b.n	800765e <_printf_i+0xee>
 8007658:	0641      	lsls	r1, r0, #25
 800765a:	d5fb      	bpl.n	8007654 <_printf_i+0xe4>
 800765c:	881e      	ldrh	r6, [r3, #0]
 800765e:	4853      	ldr	r0, [pc, #332]	; (80077ac <_printf_i+0x23c>)
 8007660:	2f6f      	cmp	r7, #111	; 0x6f
 8007662:	bf0c      	ite	eq
 8007664:	2308      	moveq	r3, #8
 8007666:	230a      	movne	r3, #10
 8007668:	2100      	movs	r1, #0
 800766a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800766e:	6865      	ldr	r5, [r4, #4]
 8007670:	60a5      	str	r5, [r4, #8]
 8007672:	2d00      	cmp	r5, #0
 8007674:	bfa2      	ittt	ge
 8007676:	6821      	ldrge	r1, [r4, #0]
 8007678:	f021 0104 	bicge.w	r1, r1, #4
 800767c:	6021      	strge	r1, [r4, #0]
 800767e:	b90e      	cbnz	r6, 8007684 <_printf_i+0x114>
 8007680:	2d00      	cmp	r5, #0
 8007682:	d04b      	beq.n	800771c <_printf_i+0x1ac>
 8007684:	4615      	mov	r5, r2
 8007686:	fbb6 f1f3 	udiv	r1, r6, r3
 800768a:	fb03 6711 	mls	r7, r3, r1, r6
 800768e:	5dc7      	ldrb	r7, [r0, r7]
 8007690:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007694:	4637      	mov	r7, r6
 8007696:	42bb      	cmp	r3, r7
 8007698:	460e      	mov	r6, r1
 800769a:	d9f4      	bls.n	8007686 <_printf_i+0x116>
 800769c:	2b08      	cmp	r3, #8
 800769e:	d10b      	bne.n	80076b8 <_printf_i+0x148>
 80076a0:	6823      	ldr	r3, [r4, #0]
 80076a2:	07de      	lsls	r6, r3, #31
 80076a4:	d508      	bpl.n	80076b8 <_printf_i+0x148>
 80076a6:	6923      	ldr	r3, [r4, #16]
 80076a8:	6861      	ldr	r1, [r4, #4]
 80076aa:	4299      	cmp	r1, r3
 80076ac:	bfde      	ittt	le
 80076ae:	2330      	movle	r3, #48	; 0x30
 80076b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80076b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80076b8:	1b52      	subs	r2, r2, r5
 80076ba:	6122      	str	r2, [r4, #16]
 80076bc:	f8cd a000 	str.w	sl, [sp]
 80076c0:	464b      	mov	r3, r9
 80076c2:	aa03      	add	r2, sp, #12
 80076c4:	4621      	mov	r1, r4
 80076c6:	4640      	mov	r0, r8
 80076c8:	f7ff fee4 	bl	8007494 <_printf_common>
 80076cc:	3001      	adds	r0, #1
 80076ce:	d14a      	bne.n	8007766 <_printf_i+0x1f6>
 80076d0:	f04f 30ff 	mov.w	r0, #4294967295
 80076d4:	b004      	add	sp, #16
 80076d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076da:	6823      	ldr	r3, [r4, #0]
 80076dc:	f043 0320 	orr.w	r3, r3, #32
 80076e0:	6023      	str	r3, [r4, #0]
 80076e2:	4833      	ldr	r0, [pc, #204]	; (80077b0 <_printf_i+0x240>)
 80076e4:	2778      	movs	r7, #120	; 0x78
 80076e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80076ea:	6823      	ldr	r3, [r4, #0]
 80076ec:	6829      	ldr	r1, [r5, #0]
 80076ee:	061f      	lsls	r7, r3, #24
 80076f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80076f4:	d402      	bmi.n	80076fc <_printf_i+0x18c>
 80076f6:	065f      	lsls	r7, r3, #25
 80076f8:	bf48      	it	mi
 80076fa:	b2b6      	uxthmi	r6, r6
 80076fc:	07df      	lsls	r7, r3, #31
 80076fe:	bf48      	it	mi
 8007700:	f043 0320 	orrmi.w	r3, r3, #32
 8007704:	6029      	str	r1, [r5, #0]
 8007706:	bf48      	it	mi
 8007708:	6023      	strmi	r3, [r4, #0]
 800770a:	b91e      	cbnz	r6, 8007714 <_printf_i+0x1a4>
 800770c:	6823      	ldr	r3, [r4, #0]
 800770e:	f023 0320 	bic.w	r3, r3, #32
 8007712:	6023      	str	r3, [r4, #0]
 8007714:	2310      	movs	r3, #16
 8007716:	e7a7      	b.n	8007668 <_printf_i+0xf8>
 8007718:	4824      	ldr	r0, [pc, #144]	; (80077ac <_printf_i+0x23c>)
 800771a:	e7e4      	b.n	80076e6 <_printf_i+0x176>
 800771c:	4615      	mov	r5, r2
 800771e:	e7bd      	b.n	800769c <_printf_i+0x12c>
 8007720:	682b      	ldr	r3, [r5, #0]
 8007722:	6826      	ldr	r6, [r4, #0]
 8007724:	6961      	ldr	r1, [r4, #20]
 8007726:	1d18      	adds	r0, r3, #4
 8007728:	6028      	str	r0, [r5, #0]
 800772a:	0635      	lsls	r5, r6, #24
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	d501      	bpl.n	8007734 <_printf_i+0x1c4>
 8007730:	6019      	str	r1, [r3, #0]
 8007732:	e002      	b.n	800773a <_printf_i+0x1ca>
 8007734:	0670      	lsls	r0, r6, #25
 8007736:	d5fb      	bpl.n	8007730 <_printf_i+0x1c0>
 8007738:	8019      	strh	r1, [r3, #0]
 800773a:	2300      	movs	r3, #0
 800773c:	6123      	str	r3, [r4, #16]
 800773e:	4615      	mov	r5, r2
 8007740:	e7bc      	b.n	80076bc <_printf_i+0x14c>
 8007742:	682b      	ldr	r3, [r5, #0]
 8007744:	1d1a      	adds	r2, r3, #4
 8007746:	602a      	str	r2, [r5, #0]
 8007748:	681d      	ldr	r5, [r3, #0]
 800774a:	6862      	ldr	r2, [r4, #4]
 800774c:	2100      	movs	r1, #0
 800774e:	4628      	mov	r0, r5
 8007750:	f7f8 fd66 	bl	8000220 <memchr>
 8007754:	b108      	cbz	r0, 800775a <_printf_i+0x1ea>
 8007756:	1b40      	subs	r0, r0, r5
 8007758:	6060      	str	r0, [r4, #4]
 800775a:	6863      	ldr	r3, [r4, #4]
 800775c:	6123      	str	r3, [r4, #16]
 800775e:	2300      	movs	r3, #0
 8007760:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007764:	e7aa      	b.n	80076bc <_printf_i+0x14c>
 8007766:	6923      	ldr	r3, [r4, #16]
 8007768:	462a      	mov	r2, r5
 800776a:	4649      	mov	r1, r9
 800776c:	4640      	mov	r0, r8
 800776e:	47d0      	blx	sl
 8007770:	3001      	adds	r0, #1
 8007772:	d0ad      	beq.n	80076d0 <_printf_i+0x160>
 8007774:	6823      	ldr	r3, [r4, #0]
 8007776:	079b      	lsls	r3, r3, #30
 8007778:	d413      	bmi.n	80077a2 <_printf_i+0x232>
 800777a:	68e0      	ldr	r0, [r4, #12]
 800777c:	9b03      	ldr	r3, [sp, #12]
 800777e:	4298      	cmp	r0, r3
 8007780:	bfb8      	it	lt
 8007782:	4618      	movlt	r0, r3
 8007784:	e7a6      	b.n	80076d4 <_printf_i+0x164>
 8007786:	2301      	movs	r3, #1
 8007788:	4632      	mov	r2, r6
 800778a:	4649      	mov	r1, r9
 800778c:	4640      	mov	r0, r8
 800778e:	47d0      	blx	sl
 8007790:	3001      	adds	r0, #1
 8007792:	d09d      	beq.n	80076d0 <_printf_i+0x160>
 8007794:	3501      	adds	r5, #1
 8007796:	68e3      	ldr	r3, [r4, #12]
 8007798:	9903      	ldr	r1, [sp, #12]
 800779a:	1a5b      	subs	r3, r3, r1
 800779c:	42ab      	cmp	r3, r5
 800779e:	dcf2      	bgt.n	8007786 <_printf_i+0x216>
 80077a0:	e7eb      	b.n	800777a <_printf_i+0x20a>
 80077a2:	2500      	movs	r5, #0
 80077a4:	f104 0619 	add.w	r6, r4, #25
 80077a8:	e7f5      	b.n	8007796 <_printf_i+0x226>
 80077aa:	bf00      	nop
 80077ac:	08009cc2 	.word	0x08009cc2
 80077b0:	08009cd3 	.word	0x08009cd3

080077b4 <std>:
 80077b4:	2300      	movs	r3, #0
 80077b6:	b510      	push	{r4, lr}
 80077b8:	4604      	mov	r4, r0
 80077ba:	e9c0 3300 	strd	r3, r3, [r0]
 80077be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80077c2:	6083      	str	r3, [r0, #8]
 80077c4:	8181      	strh	r1, [r0, #12]
 80077c6:	6643      	str	r3, [r0, #100]	; 0x64
 80077c8:	81c2      	strh	r2, [r0, #14]
 80077ca:	6183      	str	r3, [r0, #24]
 80077cc:	4619      	mov	r1, r3
 80077ce:	2208      	movs	r2, #8
 80077d0:	305c      	adds	r0, #92	; 0x5c
 80077d2:	f000 f92d 	bl	8007a30 <memset>
 80077d6:	4b0d      	ldr	r3, [pc, #52]	; (800780c <std+0x58>)
 80077d8:	6263      	str	r3, [r4, #36]	; 0x24
 80077da:	4b0d      	ldr	r3, [pc, #52]	; (8007810 <std+0x5c>)
 80077dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80077de:	4b0d      	ldr	r3, [pc, #52]	; (8007814 <std+0x60>)
 80077e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80077e2:	4b0d      	ldr	r3, [pc, #52]	; (8007818 <std+0x64>)
 80077e4:	6323      	str	r3, [r4, #48]	; 0x30
 80077e6:	4b0d      	ldr	r3, [pc, #52]	; (800781c <std+0x68>)
 80077e8:	6224      	str	r4, [r4, #32]
 80077ea:	429c      	cmp	r4, r3
 80077ec:	d006      	beq.n	80077fc <std+0x48>
 80077ee:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80077f2:	4294      	cmp	r4, r2
 80077f4:	d002      	beq.n	80077fc <std+0x48>
 80077f6:	33d0      	adds	r3, #208	; 0xd0
 80077f8:	429c      	cmp	r4, r3
 80077fa:	d105      	bne.n	8007808 <std+0x54>
 80077fc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007804:	f000 b990 	b.w	8007b28 <__retarget_lock_init_recursive>
 8007808:	bd10      	pop	{r4, pc}
 800780a:	bf00      	nop
 800780c:	08007939 	.word	0x08007939
 8007810:	0800795b 	.word	0x0800795b
 8007814:	08007993 	.word	0x08007993
 8007818:	080079b7 	.word	0x080079b7
 800781c:	20000d34 	.word	0x20000d34

08007820 <stdio_exit_handler>:
 8007820:	4a02      	ldr	r2, [pc, #8]	; (800782c <stdio_exit_handler+0xc>)
 8007822:	4903      	ldr	r1, [pc, #12]	; (8007830 <stdio_exit_handler+0x10>)
 8007824:	4803      	ldr	r0, [pc, #12]	; (8007834 <stdio_exit_handler+0x14>)
 8007826:	f000 b869 	b.w	80078fc <_fwalk_sglue>
 800782a:	bf00      	nop
 800782c:	2000006c 	.word	0x2000006c
 8007830:	080094f9 	.word	0x080094f9
 8007834:	20000078 	.word	0x20000078

08007838 <cleanup_stdio>:
 8007838:	6841      	ldr	r1, [r0, #4]
 800783a:	4b0c      	ldr	r3, [pc, #48]	; (800786c <cleanup_stdio+0x34>)
 800783c:	4299      	cmp	r1, r3
 800783e:	b510      	push	{r4, lr}
 8007840:	4604      	mov	r4, r0
 8007842:	d001      	beq.n	8007848 <cleanup_stdio+0x10>
 8007844:	f001 fe58 	bl	80094f8 <_fflush_r>
 8007848:	68a1      	ldr	r1, [r4, #8]
 800784a:	4b09      	ldr	r3, [pc, #36]	; (8007870 <cleanup_stdio+0x38>)
 800784c:	4299      	cmp	r1, r3
 800784e:	d002      	beq.n	8007856 <cleanup_stdio+0x1e>
 8007850:	4620      	mov	r0, r4
 8007852:	f001 fe51 	bl	80094f8 <_fflush_r>
 8007856:	68e1      	ldr	r1, [r4, #12]
 8007858:	4b06      	ldr	r3, [pc, #24]	; (8007874 <cleanup_stdio+0x3c>)
 800785a:	4299      	cmp	r1, r3
 800785c:	d004      	beq.n	8007868 <cleanup_stdio+0x30>
 800785e:	4620      	mov	r0, r4
 8007860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007864:	f001 be48 	b.w	80094f8 <_fflush_r>
 8007868:	bd10      	pop	{r4, pc}
 800786a:	bf00      	nop
 800786c:	20000d34 	.word	0x20000d34
 8007870:	20000d9c 	.word	0x20000d9c
 8007874:	20000e04 	.word	0x20000e04

08007878 <global_stdio_init.part.0>:
 8007878:	b510      	push	{r4, lr}
 800787a:	4b0b      	ldr	r3, [pc, #44]	; (80078a8 <global_stdio_init.part.0+0x30>)
 800787c:	4c0b      	ldr	r4, [pc, #44]	; (80078ac <global_stdio_init.part.0+0x34>)
 800787e:	4a0c      	ldr	r2, [pc, #48]	; (80078b0 <global_stdio_init.part.0+0x38>)
 8007880:	601a      	str	r2, [r3, #0]
 8007882:	4620      	mov	r0, r4
 8007884:	2200      	movs	r2, #0
 8007886:	2104      	movs	r1, #4
 8007888:	f7ff ff94 	bl	80077b4 <std>
 800788c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007890:	2201      	movs	r2, #1
 8007892:	2109      	movs	r1, #9
 8007894:	f7ff ff8e 	bl	80077b4 <std>
 8007898:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800789c:	2202      	movs	r2, #2
 800789e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078a2:	2112      	movs	r1, #18
 80078a4:	f7ff bf86 	b.w	80077b4 <std>
 80078a8:	20000e6c 	.word	0x20000e6c
 80078ac:	20000d34 	.word	0x20000d34
 80078b0:	08007821 	.word	0x08007821

080078b4 <__sfp_lock_acquire>:
 80078b4:	4801      	ldr	r0, [pc, #4]	; (80078bc <__sfp_lock_acquire+0x8>)
 80078b6:	f000 b938 	b.w	8007b2a <__retarget_lock_acquire_recursive>
 80078ba:	bf00      	nop
 80078bc:	20000e75 	.word	0x20000e75

080078c0 <__sfp_lock_release>:
 80078c0:	4801      	ldr	r0, [pc, #4]	; (80078c8 <__sfp_lock_release+0x8>)
 80078c2:	f000 b933 	b.w	8007b2c <__retarget_lock_release_recursive>
 80078c6:	bf00      	nop
 80078c8:	20000e75 	.word	0x20000e75

080078cc <__sinit>:
 80078cc:	b510      	push	{r4, lr}
 80078ce:	4604      	mov	r4, r0
 80078d0:	f7ff fff0 	bl	80078b4 <__sfp_lock_acquire>
 80078d4:	6a23      	ldr	r3, [r4, #32]
 80078d6:	b11b      	cbz	r3, 80078e0 <__sinit+0x14>
 80078d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078dc:	f7ff bff0 	b.w	80078c0 <__sfp_lock_release>
 80078e0:	4b04      	ldr	r3, [pc, #16]	; (80078f4 <__sinit+0x28>)
 80078e2:	6223      	str	r3, [r4, #32]
 80078e4:	4b04      	ldr	r3, [pc, #16]	; (80078f8 <__sinit+0x2c>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d1f5      	bne.n	80078d8 <__sinit+0xc>
 80078ec:	f7ff ffc4 	bl	8007878 <global_stdio_init.part.0>
 80078f0:	e7f2      	b.n	80078d8 <__sinit+0xc>
 80078f2:	bf00      	nop
 80078f4:	08007839 	.word	0x08007839
 80078f8:	20000e6c 	.word	0x20000e6c

080078fc <_fwalk_sglue>:
 80078fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007900:	4607      	mov	r7, r0
 8007902:	4688      	mov	r8, r1
 8007904:	4614      	mov	r4, r2
 8007906:	2600      	movs	r6, #0
 8007908:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800790c:	f1b9 0901 	subs.w	r9, r9, #1
 8007910:	d505      	bpl.n	800791e <_fwalk_sglue+0x22>
 8007912:	6824      	ldr	r4, [r4, #0]
 8007914:	2c00      	cmp	r4, #0
 8007916:	d1f7      	bne.n	8007908 <_fwalk_sglue+0xc>
 8007918:	4630      	mov	r0, r6
 800791a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800791e:	89ab      	ldrh	r3, [r5, #12]
 8007920:	2b01      	cmp	r3, #1
 8007922:	d907      	bls.n	8007934 <_fwalk_sglue+0x38>
 8007924:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007928:	3301      	adds	r3, #1
 800792a:	d003      	beq.n	8007934 <_fwalk_sglue+0x38>
 800792c:	4629      	mov	r1, r5
 800792e:	4638      	mov	r0, r7
 8007930:	47c0      	blx	r8
 8007932:	4306      	orrs	r6, r0
 8007934:	3568      	adds	r5, #104	; 0x68
 8007936:	e7e9      	b.n	800790c <_fwalk_sglue+0x10>

08007938 <__sread>:
 8007938:	b510      	push	{r4, lr}
 800793a:	460c      	mov	r4, r1
 800793c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007940:	f000 f8a4 	bl	8007a8c <_read_r>
 8007944:	2800      	cmp	r0, #0
 8007946:	bfab      	itete	ge
 8007948:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800794a:	89a3      	ldrhlt	r3, [r4, #12]
 800794c:	181b      	addge	r3, r3, r0
 800794e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007952:	bfac      	ite	ge
 8007954:	6563      	strge	r3, [r4, #84]	; 0x54
 8007956:	81a3      	strhlt	r3, [r4, #12]
 8007958:	bd10      	pop	{r4, pc}

0800795a <__swrite>:
 800795a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800795e:	461f      	mov	r7, r3
 8007960:	898b      	ldrh	r3, [r1, #12]
 8007962:	05db      	lsls	r3, r3, #23
 8007964:	4605      	mov	r5, r0
 8007966:	460c      	mov	r4, r1
 8007968:	4616      	mov	r6, r2
 800796a:	d505      	bpl.n	8007978 <__swrite+0x1e>
 800796c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007970:	2302      	movs	r3, #2
 8007972:	2200      	movs	r2, #0
 8007974:	f000 f878 	bl	8007a68 <_lseek_r>
 8007978:	89a3      	ldrh	r3, [r4, #12]
 800797a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800797e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007982:	81a3      	strh	r3, [r4, #12]
 8007984:	4632      	mov	r2, r6
 8007986:	463b      	mov	r3, r7
 8007988:	4628      	mov	r0, r5
 800798a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800798e:	f000 b88f 	b.w	8007ab0 <_write_r>

08007992 <__sseek>:
 8007992:	b510      	push	{r4, lr}
 8007994:	460c      	mov	r4, r1
 8007996:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800799a:	f000 f865 	bl	8007a68 <_lseek_r>
 800799e:	1c43      	adds	r3, r0, #1
 80079a0:	89a3      	ldrh	r3, [r4, #12]
 80079a2:	bf15      	itete	ne
 80079a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80079a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80079aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80079ae:	81a3      	strheq	r3, [r4, #12]
 80079b0:	bf18      	it	ne
 80079b2:	81a3      	strhne	r3, [r4, #12]
 80079b4:	bd10      	pop	{r4, pc}

080079b6 <__sclose>:
 80079b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079ba:	f000 b845 	b.w	8007a48 <_close_r>

080079be <_vsniprintf_r>:
 80079be:	b530      	push	{r4, r5, lr}
 80079c0:	4614      	mov	r4, r2
 80079c2:	2c00      	cmp	r4, #0
 80079c4:	b09b      	sub	sp, #108	; 0x6c
 80079c6:	4605      	mov	r5, r0
 80079c8:	461a      	mov	r2, r3
 80079ca:	da05      	bge.n	80079d8 <_vsniprintf_r+0x1a>
 80079cc:	238b      	movs	r3, #139	; 0x8b
 80079ce:	6003      	str	r3, [r0, #0]
 80079d0:	f04f 30ff 	mov.w	r0, #4294967295
 80079d4:	b01b      	add	sp, #108	; 0x6c
 80079d6:	bd30      	pop	{r4, r5, pc}
 80079d8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80079dc:	f8ad 300c 	strh.w	r3, [sp, #12]
 80079e0:	bf14      	ite	ne
 80079e2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80079e6:	4623      	moveq	r3, r4
 80079e8:	9302      	str	r3, [sp, #8]
 80079ea:	9305      	str	r3, [sp, #20]
 80079ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80079f0:	9100      	str	r1, [sp, #0]
 80079f2:	9104      	str	r1, [sp, #16]
 80079f4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80079f8:	4669      	mov	r1, sp
 80079fa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80079fc:	f001 fbf8 	bl	80091f0 <_svfiprintf_r>
 8007a00:	1c43      	adds	r3, r0, #1
 8007a02:	bfbc      	itt	lt
 8007a04:	238b      	movlt	r3, #139	; 0x8b
 8007a06:	602b      	strlt	r3, [r5, #0]
 8007a08:	2c00      	cmp	r4, #0
 8007a0a:	d0e3      	beq.n	80079d4 <_vsniprintf_r+0x16>
 8007a0c:	9b00      	ldr	r3, [sp, #0]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	701a      	strb	r2, [r3, #0]
 8007a12:	e7df      	b.n	80079d4 <_vsniprintf_r+0x16>

08007a14 <vsniprintf>:
 8007a14:	b507      	push	{r0, r1, r2, lr}
 8007a16:	9300      	str	r3, [sp, #0]
 8007a18:	4613      	mov	r3, r2
 8007a1a:	460a      	mov	r2, r1
 8007a1c:	4601      	mov	r1, r0
 8007a1e:	4803      	ldr	r0, [pc, #12]	; (8007a2c <vsniprintf+0x18>)
 8007a20:	6800      	ldr	r0, [r0, #0]
 8007a22:	f7ff ffcc 	bl	80079be <_vsniprintf_r>
 8007a26:	b003      	add	sp, #12
 8007a28:	f85d fb04 	ldr.w	pc, [sp], #4
 8007a2c:	200000c4 	.word	0x200000c4

08007a30 <memset>:
 8007a30:	4402      	add	r2, r0
 8007a32:	4603      	mov	r3, r0
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d100      	bne.n	8007a3a <memset+0xa>
 8007a38:	4770      	bx	lr
 8007a3a:	f803 1b01 	strb.w	r1, [r3], #1
 8007a3e:	e7f9      	b.n	8007a34 <memset+0x4>

08007a40 <_localeconv_r>:
 8007a40:	4800      	ldr	r0, [pc, #0]	; (8007a44 <_localeconv_r+0x4>)
 8007a42:	4770      	bx	lr
 8007a44:	200001b8 	.word	0x200001b8

08007a48 <_close_r>:
 8007a48:	b538      	push	{r3, r4, r5, lr}
 8007a4a:	4d06      	ldr	r5, [pc, #24]	; (8007a64 <_close_r+0x1c>)
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	4604      	mov	r4, r0
 8007a50:	4608      	mov	r0, r1
 8007a52:	602b      	str	r3, [r5, #0]
 8007a54:	f7fa fbb2 	bl	80021bc <_close>
 8007a58:	1c43      	adds	r3, r0, #1
 8007a5a:	d102      	bne.n	8007a62 <_close_r+0x1a>
 8007a5c:	682b      	ldr	r3, [r5, #0]
 8007a5e:	b103      	cbz	r3, 8007a62 <_close_r+0x1a>
 8007a60:	6023      	str	r3, [r4, #0]
 8007a62:	bd38      	pop	{r3, r4, r5, pc}
 8007a64:	20000e70 	.word	0x20000e70

08007a68 <_lseek_r>:
 8007a68:	b538      	push	{r3, r4, r5, lr}
 8007a6a:	4d07      	ldr	r5, [pc, #28]	; (8007a88 <_lseek_r+0x20>)
 8007a6c:	4604      	mov	r4, r0
 8007a6e:	4608      	mov	r0, r1
 8007a70:	4611      	mov	r1, r2
 8007a72:	2200      	movs	r2, #0
 8007a74:	602a      	str	r2, [r5, #0]
 8007a76:	461a      	mov	r2, r3
 8007a78:	f7fa fbaa 	bl	80021d0 <_lseek>
 8007a7c:	1c43      	adds	r3, r0, #1
 8007a7e:	d102      	bne.n	8007a86 <_lseek_r+0x1e>
 8007a80:	682b      	ldr	r3, [r5, #0]
 8007a82:	b103      	cbz	r3, 8007a86 <_lseek_r+0x1e>
 8007a84:	6023      	str	r3, [r4, #0]
 8007a86:	bd38      	pop	{r3, r4, r5, pc}
 8007a88:	20000e70 	.word	0x20000e70

08007a8c <_read_r>:
 8007a8c:	b538      	push	{r3, r4, r5, lr}
 8007a8e:	4d07      	ldr	r5, [pc, #28]	; (8007aac <_read_r+0x20>)
 8007a90:	4604      	mov	r4, r0
 8007a92:	4608      	mov	r0, r1
 8007a94:	4611      	mov	r1, r2
 8007a96:	2200      	movs	r2, #0
 8007a98:	602a      	str	r2, [r5, #0]
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	f7fa fb74 	bl	8002188 <_read>
 8007aa0:	1c43      	adds	r3, r0, #1
 8007aa2:	d102      	bne.n	8007aaa <_read_r+0x1e>
 8007aa4:	682b      	ldr	r3, [r5, #0]
 8007aa6:	b103      	cbz	r3, 8007aaa <_read_r+0x1e>
 8007aa8:	6023      	str	r3, [r4, #0]
 8007aaa:	bd38      	pop	{r3, r4, r5, pc}
 8007aac:	20000e70 	.word	0x20000e70

08007ab0 <_write_r>:
 8007ab0:	b538      	push	{r3, r4, r5, lr}
 8007ab2:	4d07      	ldr	r5, [pc, #28]	; (8007ad0 <_write_r+0x20>)
 8007ab4:	4604      	mov	r4, r0
 8007ab6:	4608      	mov	r0, r1
 8007ab8:	4611      	mov	r1, r2
 8007aba:	2200      	movs	r2, #0
 8007abc:	602a      	str	r2, [r5, #0]
 8007abe:	461a      	mov	r2, r3
 8007ac0:	f7fa fb6f 	bl	80021a2 <_write>
 8007ac4:	1c43      	adds	r3, r0, #1
 8007ac6:	d102      	bne.n	8007ace <_write_r+0x1e>
 8007ac8:	682b      	ldr	r3, [r5, #0]
 8007aca:	b103      	cbz	r3, 8007ace <_write_r+0x1e>
 8007acc:	6023      	str	r3, [r4, #0]
 8007ace:	bd38      	pop	{r3, r4, r5, pc}
 8007ad0:	20000e70 	.word	0x20000e70

08007ad4 <__errno>:
 8007ad4:	4b01      	ldr	r3, [pc, #4]	; (8007adc <__errno+0x8>)
 8007ad6:	6818      	ldr	r0, [r3, #0]
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop
 8007adc:	200000c4 	.word	0x200000c4

08007ae0 <__libc_init_array>:
 8007ae0:	b570      	push	{r4, r5, r6, lr}
 8007ae2:	4d0d      	ldr	r5, [pc, #52]	; (8007b18 <__libc_init_array+0x38>)
 8007ae4:	4c0d      	ldr	r4, [pc, #52]	; (8007b1c <__libc_init_array+0x3c>)
 8007ae6:	1b64      	subs	r4, r4, r5
 8007ae8:	10a4      	asrs	r4, r4, #2
 8007aea:	2600      	movs	r6, #0
 8007aec:	42a6      	cmp	r6, r4
 8007aee:	d109      	bne.n	8007b04 <__libc_init_array+0x24>
 8007af0:	4d0b      	ldr	r5, [pc, #44]	; (8007b20 <__libc_init_array+0x40>)
 8007af2:	4c0c      	ldr	r4, [pc, #48]	; (8007b24 <__libc_init_array+0x44>)
 8007af4:	f002 f896 	bl	8009c24 <_init>
 8007af8:	1b64      	subs	r4, r4, r5
 8007afa:	10a4      	asrs	r4, r4, #2
 8007afc:	2600      	movs	r6, #0
 8007afe:	42a6      	cmp	r6, r4
 8007b00:	d105      	bne.n	8007b0e <__libc_init_array+0x2e>
 8007b02:	bd70      	pop	{r4, r5, r6, pc}
 8007b04:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b08:	4798      	blx	r3
 8007b0a:	3601      	adds	r6, #1
 8007b0c:	e7ee      	b.n	8007aec <__libc_init_array+0xc>
 8007b0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b12:	4798      	blx	r3
 8007b14:	3601      	adds	r6, #1
 8007b16:	e7f2      	b.n	8007afe <__libc_init_array+0x1e>
 8007b18:	0800a02c 	.word	0x0800a02c
 8007b1c:	0800a02c 	.word	0x0800a02c
 8007b20:	0800a02c 	.word	0x0800a02c
 8007b24:	0800a030 	.word	0x0800a030

08007b28 <__retarget_lock_init_recursive>:
 8007b28:	4770      	bx	lr

08007b2a <__retarget_lock_acquire_recursive>:
 8007b2a:	4770      	bx	lr

08007b2c <__retarget_lock_release_recursive>:
 8007b2c:	4770      	bx	lr

08007b2e <memcpy>:
 8007b2e:	440a      	add	r2, r1
 8007b30:	4291      	cmp	r1, r2
 8007b32:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b36:	d100      	bne.n	8007b3a <memcpy+0xc>
 8007b38:	4770      	bx	lr
 8007b3a:	b510      	push	{r4, lr}
 8007b3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b44:	4291      	cmp	r1, r2
 8007b46:	d1f9      	bne.n	8007b3c <memcpy+0xe>
 8007b48:	bd10      	pop	{r4, pc}

08007b4a <quorem>:
 8007b4a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b4e:	6903      	ldr	r3, [r0, #16]
 8007b50:	690c      	ldr	r4, [r1, #16]
 8007b52:	42a3      	cmp	r3, r4
 8007b54:	4607      	mov	r7, r0
 8007b56:	db7e      	blt.n	8007c56 <quorem+0x10c>
 8007b58:	3c01      	subs	r4, #1
 8007b5a:	f101 0814 	add.w	r8, r1, #20
 8007b5e:	f100 0514 	add.w	r5, r0, #20
 8007b62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b66:	9301      	str	r3, [sp, #4]
 8007b68:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007b6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b70:	3301      	adds	r3, #1
 8007b72:	429a      	cmp	r2, r3
 8007b74:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007b78:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007b7c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007b80:	d331      	bcc.n	8007be6 <quorem+0x9c>
 8007b82:	f04f 0e00 	mov.w	lr, #0
 8007b86:	4640      	mov	r0, r8
 8007b88:	46ac      	mov	ip, r5
 8007b8a:	46f2      	mov	sl, lr
 8007b8c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007b90:	b293      	uxth	r3, r2
 8007b92:	fb06 e303 	mla	r3, r6, r3, lr
 8007b96:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007b9a:	0c1a      	lsrs	r2, r3, #16
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	ebaa 0303 	sub.w	r3, sl, r3
 8007ba2:	f8dc a000 	ldr.w	sl, [ip]
 8007ba6:	fa13 f38a 	uxtah	r3, r3, sl
 8007baa:	fb06 220e 	mla	r2, r6, lr, r2
 8007bae:	9300      	str	r3, [sp, #0]
 8007bb0:	9b00      	ldr	r3, [sp, #0]
 8007bb2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007bb6:	b292      	uxth	r2, r2
 8007bb8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007bbc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007bc0:	f8bd 3000 	ldrh.w	r3, [sp]
 8007bc4:	4581      	cmp	r9, r0
 8007bc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007bca:	f84c 3b04 	str.w	r3, [ip], #4
 8007bce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007bd2:	d2db      	bcs.n	8007b8c <quorem+0x42>
 8007bd4:	f855 300b 	ldr.w	r3, [r5, fp]
 8007bd8:	b92b      	cbnz	r3, 8007be6 <quorem+0x9c>
 8007bda:	9b01      	ldr	r3, [sp, #4]
 8007bdc:	3b04      	subs	r3, #4
 8007bde:	429d      	cmp	r5, r3
 8007be0:	461a      	mov	r2, r3
 8007be2:	d32c      	bcc.n	8007c3e <quorem+0xf4>
 8007be4:	613c      	str	r4, [r7, #16]
 8007be6:	4638      	mov	r0, r7
 8007be8:	f001 f9a8 	bl	8008f3c <__mcmp>
 8007bec:	2800      	cmp	r0, #0
 8007bee:	db22      	blt.n	8007c36 <quorem+0xec>
 8007bf0:	3601      	adds	r6, #1
 8007bf2:	4629      	mov	r1, r5
 8007bf4:	2000      	movs	r0, #0
 8007bf6:	f858 2b04 	ldr.w	r2, [r8], #4
 8007bfa:	f8d1 c000 	ldr.w	ip, [r1]
 8007bfe:	b293      	uxth	r3, r2
 8007c00:	1ac3      	subs	r3, r0, r3
 8007c02:	0c12      	lsrs	r2, r2, #16
 8007c04:	fa13 f38c 	uxtah	r3, r3, ip
 8007c08:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007c0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c16:	45c1      	cmp	r9, r8
 8007c18:	f841 3b04 	str.w	r3, [r1], #4
 8007c1c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007c20:	d2e9      	bcs.n	8007bf6 <quorem+0xac>
 8007c22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c2a:	b922      	cbnz	r2, 8007c36 <quorem+0xec>
 8007c2c:	3b04      	subs	r3, #4
 8007c2e:	429d      	cmp	r5, r3
 8007c30:	461a      	mov	r2, r3
 8007c32:	d30a      	bcc.n	8007c4a <quorem+0x100>
 8007c34:	613c      	str	r4, [r7, #16]
 8007c36:	4630      	mov	r0, r6
 8007c38:	b003      	add	sp, #12
 8007c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c3e:	6812      	ldr	r2, [r2, #0]
 8007c40:	3b04      	subs	r3, #4
 8007c42:	2a00      	cmp	r2, #0
 8007c44:	d1ce      	bne.n	8007be4 <quorem+0x9a>
 8007c46:	3c01      	subs	r4, #1
 8007c48:	e7c9      	b.n	8007bde <quorem+0x94>
 8007c4a:	6812      	ldr	r2, [r2, #0]
 8007c4c:	3b04      	subs	r3, #4
 8007c4e:	2a00      	cmp	r2, #0
 8007c50:	d1f0      	bne.n	8007c34 <quorem+0xea>
 8007c52:	3c01      	subs	r4, #1
 8007c54:	e7eb      	b.n	8007c2e <quorem+0xe4>
 8007c56:	2000      	movs	r0, #0
 8007c58:	e7ee      	b.n	8007c38 <quorem+0xee>
 8007c5a:	0000      	movs	r0, r0
 8007c5c:	0000      	movs	r0, r0
	...

08007c60 <_dtoa_r>:
 8007c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c64:	ed2d 8b04 	vpush	{d8-d9}
 8007c68:	69c5      	ldr	r5, [r0, #28]
 8007c6a:	b093      	sub	sp, #76	; 0x4c
 8007c6c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007c70:	ec57 6b10 	vmov	r6, r7, d0
 8007c74:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007c78:	9107      	str	r1, [sp, #28]
 8007c7a:	4604      	mov	r4, r0
 8007c7c:	920a      	str	r2, [sp, #40]	; 0x28
 8007c7e:	930d      	str	r3, [sp, #52]	; 0x34
 8007c80:	b975      	cbnz	r5, 8007ca0 <_dtoa_r+0x40>
 8007c82:	2010      	movs	r0, #16
 8007c84:	f000 fe2a 	bl	80088dc <malloc>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	61e0      	str	r0, [r4, #28]
 8007c8c:	b920      	cbnz	r0, 8007c98 <_dtoa_r+0x38>
 8007c8e:	4bae      	ldr	r3, [pc, #696]	; (8007f48 <_dtoa_r+0x2e8>)
 8007c90:	21ef      	movs	r1, #239	; 0xef
 8007c92:	48ae      	ldr	r0, [pc, #696]	; (8007f4c <_dtoa_r+0x2ec>)
 8007c94:	f001 fc82 	bl	800959c <__assert_func>
 8007c98:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007c9c:	6005      	str	r5, [r0, #0]
 8007c9e:	60c5      	str	r5, [r0, #12]
 8007ca0:	69e3      	ldr	r3, [r4, #28]
 8007ca2:	6819      	ldr	r1, [r3, #0]
 8007ca4:	b151      	cbz	r1, 8007cbc <_dtoa_r+0x5c>
 8007ca6:	685a      	ldr	r2, [r3, #4]
 8007ca8:	604a      	str	r2, [r1, #4]
 8007caa:	2301      	movs	r3, #1
 8007cac:	4093      	lsls	r3, r2
 8007cae:	608b      	str	r3, [r1, #8]
 8007cb0:	4620      	mov	r0, r4
 8007cb2:	f000 ff07 	bl	8008ac4 <_Bfree>
 8007cb6:	69e3      	ldr	r3, [r4, #28]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	601a      	str	r2, [r3, #0]
 8007cbc:	1e3b      	subs	r3, r7, #0
 8007cbe:	bfbb      	ittet	lt
 8007cc0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007cc4:	9303      	strlt	r3, [sp, #12]
 8007cc6:	2300      	movge	r3, #0
 8007cc8:	2201      	movlt	r2, #1
 8007cca:	bfac      	ite	ge
 8007ccc:	f8c8 3000 	strge.w	r3, [r8]
 8007cd0:	f8c8 2000 	strlt.w	r2, [r8]
 8007cd4:	4b9e      	ldr	r3, [pc, #632]	; (8007f50 <_dtoa_r+0x2f0>)
 8007cd6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007cda:	ea33 0308 	bics.w	r3, r3, r8
 8007cde:	d11b      	bne.n	8007d18 <_dtoa_r+0xb8>
 8007ce0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ce2:	f242 730f 	movw	r3, #9999	; 0x270f
 8007ce6:	6013      	str	r3, [r2, #0]
 8007ce8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007cec:	4333      	orrs	r3, r6
 8007cee:	f000 8593 	beq.w	8008818 <_dtoa_r+0xbb8>
 8007cf2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007cf4:	b963      	cbnz	r3, 8007d10 <_dtoa_r+0xb0>
 8007cf6:	4b97      	ldr	r3, [pc, #604]	; (8007f54 <_dtoa_r+0x2f4>)
 8007cf8:	e027      	b.n	8007d4a <_dtoa_r+0xea>
 8007cfa:	4b97      	ldr	r3, [pc, #604]	; (8007f58 <_dtoa_r+0x2f8>)
 8007cfc:	9300      	str	r3, [sp, #0]
 8007cfe:	3308      	adds	r3, #8
 8007d00:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007d02:	6013      	str	r3, [r2, #0]
 8007d04:	9800      	ldr	r0, [sp, #0]
 8007d06:	b013      	add	sp, #76	; 0x4c
 8007d08:	ecbd 8b04 	vpop	{d8-d9}
 8007d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d10:	4b90      	ldr	r3, [pc, #576]	; (8007f54 <_dtoa_r+0x2f4>)
 8007d12:	9300      	str	r3, [sp, #0]
 8007d14:	3303      	adds	r3, #3
 8007d16:	e7f3      	b.n	8007d00 <_dtoa_r+0xa0>
 8007d18:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	ec51 0b17 	vmov	r0, r1, d7
 8007d22:	eeb0 8a47 	vmov.f32	s16, s14
 8007d26:	eef0 8a67 	vmov.f32	s17, s15
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	f7f8 fef4 	bl	8000b18 <__aeabi_dcmpeq>
 8007d30:	4681      	mov	r9, r0
 8007d32:	b160      	cbz	r0, 8007d4e <_dtoa_r+0xee>
 8007d34:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007d36:	2301      	movs	r3, #1
 8007d38:	6013      	str	r3, [r2, #0]
 8007d3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	f000 8568 	beq.w	8008812 <_dtoa_r+0xbb2>
 8007d42:	4b86      	ldr	r3, [pc, #536]	; (8007f5c <_dtoa_r+0x2fc>)
 8007d44:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007d46:	6013      	str	r3, [r2, #0]
 8007d48:	3b01      	subs	r3, #1
 8007d4a:	9300      	str	r3, [sp, #0]
 8007d4c:	e7da      	b.n	8007d04 <_dtoa_r+0xa4>
 8007d4e:	aa10      	add	r2, sp, #64	; 0x40
 8007d50:	a911      	add	r1, sp, #68	; 0x44
 8007d52:	4620      	mov	r0, r4
 8007d54:	eeb0 0a48 	vmov.f32	s0, s16
 8007d58:	eef0 0a68 	vmov.f32	s1, s17
 8007d5c:	f001 f994 	bl	8009088 <__d2b>
 8007d60:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007d64:	4682      	mov	sl, r0
 8007d66:	2d00      	cmp	r5, #0
 8007d68:	d07f      	beq.n	8007e6a <_dtoa_r+0x20a>
 8007d6a:	ee18 3a90 	vmov	r3, s17
 8007d6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d72:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007d76:	ec51 0b18 	vmov	r0, r1, d8
 8007d7a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007d7e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007d82:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007d86:	4619      	mov	r1, r3
 8007d88:	2200      	movs	r2, #0
 8007d8a:	4b75      	ldr	r3, [pc, #468]	; (8007f60 <_dtoa_r+0x300>)
 8007d8c:	f7f8 faa4 	bl	80002d8 <__aeabi_dsub>
 8007d90:	a367      	add	r3, pc, #412	; (adr r3, 8007f30 <_dtoa_r+0x2d0>)
 8007d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d96:	f7f8 fc57 	bl	8000648 <__aeabi_dmul>
 8007d9a:	a367      	add	r3, pc, #412	; (adr r3, 8007f38 <_dtoa_r+0x2d8>)
 8007d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da0:	f7f8 fa9c 	bl	80002dc <__adddf3>
 8007da4:	4606      	mov	r6, r0
 8007da6:	4628      	mov	r0, r5
 8007da8:	460f      	mov	r7, r1
 8007daa:	f7f8 fbe3 	bl	8000574 <__aeabi_i2d>
 8007dae:	a364      	add	r3, pc, #400	; (adr r3, 8007f40 <_dtoa_r+0x2e0>)
 8007db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db4:	f7f8 fc48 	bl	8000648 <__aeabi_dmul>
 8007db8:	4602      	mov	r2, r0
 8007dba:	460b      	mov	r3, r1
 8007dbc:	4630      	mov	r0, r6
 8007dbe:	4639      	mov	r1, r7
 8007dc0:	f7f8 fa8c 	bl	80002dc <__adddf3>
 8007dc4:	4606      	mov	r6, r0
 8007dc6:	460f      	mov	r7, r1
 8007dc8:	f7f8 feee 	bl	8000ba8 <__aeabi_d2iz>
 8007dcc:	2200      	movs	r2, #0
 8007dce:	4683      	mov	fp, r0
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	4630      	mov	r0, r6
 8007dd4:	4639      	mov	r1, r7
 8007dd6:	f7f8 fea9 	bl	8000b2c <__aeabi_dcmplt>
 8007dda:	b148      	cbz	r0, 8007df0 <_dtoa_r+0x190>
 8007ddc:	4658      	mov	r0, fp
 8007dde:	f7f8 fbc9 	bl	8000574 <__aeabi_i2d>
 8007de2:	4632      	mov	r2, r6
 8007de4:	463b      	mov	r3, r7
 8007de6:	f7f8 fe97 	bl	8000b18 <__aeabi_dcmpeq>
 8007dea:	b908      	cbnz	r0, 8007df0 <_dtoa_r+0x190>
 8007dec:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007df0:	f1bb 0f16 	cmp.w	fp, #22
 8007df4:	d857      	bhi.n	8007ea6 <_dtoa_r+0x246>
 8007df6:	4b5b      	ldr	r3, [pc, #364]	; (8007f64 <_dtoa_r+0x304>)
 8007df8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e00:	ec51 0b18 	vmov	r0, r1, d8
 8007e04:	f7f8 fe92 	bl	8000b2c <__aeabi_dcmplt>
 8007e08:	2800      	cmp	r0, #0
 8007e0a:	d04e      	beq.n	8007eaa <_dtoa_r+0x24a>
 8007e0c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007e10:	2300      	movs	r3, #0
 8007e12:	930c      	str	r3, [sp, #48]	; 0x30
 8007e14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e16:	1b5b      	subs	r3, r3, r5
 8007e18:	1e5a      	subs	r2, r3, #1
 8007e1a:	bf45      	ittet	mi
 8007e1c:	f1c3 0301 	rsbmi	r3, r3, #1
 8007e20:	9305      	strmi	r3, [sp, #20]
 8007e22:	2300      	movpl	r3, #0
 8007e24:	2300      	movmi	r3, #0
 8007e26:	9206      	str	r2, [sp, #24]
 8007e28:	bf54      	ite	pl
 8007e2a:	9305      	strpl	r3, [sp, #20]
 8007e2c:	9306      	strmi	r3, [sp, #24]
 8007e2e:	f1bb 0f00 	cmp.w	fp, #0
 8007e32:	db3c      	blt.n	8007eae <_dtoa_r+0x24e>
 8007e34:	9b06      	ldr	r3, [sp, #24]
 8007e36:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007e3a:	445b      	add	r3, fp
 8007e3c:	9306      	str	r3, [sp, #24]
 8007e3e:	2300      	movs	r3, #0
 8007e40:	9308      	str	r3, [sp, #32]
 8007e42:	9b07      	ldr	r3, [sp, #28]
 8007e44:	2b09      	cmp	r3, #9
 8007e46:	d868      	bhi.n	8007f1a <_dtoa_r+0x2ba>
 8007e48:	2b05      	cmp	r3, #5
 8007e4a:	bfc4      	itt	gt
 8007e4c:	3b04      	subgt	r3, #4
 8007e4e:	9307      	strgt	r3, [sp, #28]
 8007e50:	9b07      	ldr	r3, [sp, #28]
 8007e52:	f1a3 0302 	sub.w	r3, r3, #2
 8007e56:	bfcc      	ite	gt
 8007e58:	2500      	movgt	r5, #0
 8007e5a:	2501      	movle	r5, #1
 8007e5c:	2b03      	cmp	r3, #3
 8007e5e:	f200 8085 	bhi.w	8007f6c <_dtoa_r+0x30c>
 8007e62:	e8df f003 	tbb	[pc, r3]
 8007e66:	3b2e      	.short	0x3b2e
 8007e68:	5839      	.short	0x5839
 8007e6a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007e6e:	441d      	add	r5, r3
 8007e70:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007e74:	2b20      	cmp	r3, #32
 8007e76:	bfc1      	itttt	gt
 8007e78:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007e7c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007e80:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007e84:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007e88:	bfd6      	itet	le
 8007e8a:	f1c3 0320 	rsble	r3, r3, #32
 8007e8e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007e92:	fa06 f003 	lslle.w	r0, r6, r3
 8007e96:	f7f8 fb5d 	bl	8000554 <__aeabi_ui2d>
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007ea0:	3d01      	subs	r5, #1
 8007ea2:	920e      	str	r2, [sp, #56]	; 0x38
 8007ea4:	e76f      	b.n	8007d86 <_dtoa_r+0x126>
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	e7b3      	b.n	8007e12 <_dtoa_r+0x1b2>
 8007eaa:	900c      	str	r0, [sp, #48]	; 0x30
 8007eac:	e7b2      	b.n	8007e14 <_dtoa_r+0x1b4>
 8007eae:	9b05      	ldr	r3, [sp, #20]
 8007eb0:	eba3 030b 	sub.w	r3, r3, fp
 8007eb4:	9305      	str	r3, [sp, #20]
 8007eb6:	f1cb 0300 	rsb	r3, fp, #0
 8007eba:	9308      	str	r3, [sp, #32]
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ec0:	e7bf      	b.n	8007e42 <_dtoa_r+0x1e2>
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	9309      	str	r3, [sp, #36]	; 0x24
 8007ec6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	dc52      	bgt.n	8007f72 <_dtoa_r+0x312>
 8007ecc:	2301      	movs	r3, #1
 8007ece:	9301      	str	r3, [sp, #4]
 8007ed0:	9304      	str	r3, [sp, #16]
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	920a      	str	r2, [sp, #40]	; 0x28
 8007ed6:	e00b      	b.n	8007ef0 <_dtoa_r+0x290>
 8007ed8:	2301      	movs	r3, #1
 8007eda:	e7f3      	b.n	8007ec4 <_dtoa_r+0x264>
 8007edc:	2300      	movs	r3, #0
 8007ede:	9309      	str	r3, [sp, #36]	; 0x24
 8007ee0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ee2:	445b      	add	r3, fp
 8007ee4:	9301      	str	r3, [sp, #4]
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	9304      	str	r3, [sp, #16]
 8007eec:	bfb8      	it	lt
 8007eee:	2301      	movlt	r3, #1
 8007ef0:	69e0      	ldr	r0, [r4, #28]
 8007ef2:	2100      	movs	r1, #0
 8007ef4:	2204      	movs	r2, #4
 8007ef6:	f102 0614 	add.w	r6, r2, #20
 8007efa:	429e      	cmp	r6, r3
 8007efc:	d93d      	bls.n	8007f7a <_dtoa_r+0x31a>
 8007efe:	6041      	str	r1, [r0, #4]
 8007f00:	4620      	mov	r0, r4
 8007f02:	f000 fd9f 	bl	8008a44 <_Balloc>
 8007f06:	9000      	str	r0, [sp, #0]
 8007f08:	2800      	cmp	r0, #0
 8007f0a:	d139      	bne.n	8007f80 <_dtoa_r+0x320>
 8007f0c:	4b16      	ldr	r3, [pc, #88]	; (8007f68 <_dtoa_r+0x308>)
 8007f0e:	4602      	mov	r2, r0
 8007f10:	f240 11af 	movw	r1, #431	; 0x1af
 8007f14:	e6bd      	b.n	8007c92 <_dtoa_r+0x32>
 8007f16:	2301      	movs	r3, #1
 8007f18:	e7e1      	b.n	8007ede <_dtoa_r+0x27e>
 8007f1a:	2501      	movs	r5, #1
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	9307      	str	r3, [sp, #28]
 8007f20:	9509      	str	r5, [sp, #36]	; 0x24
 8007f22:	f04f 33ff 	mov.w	r3, #4294967295
 8007f26:	9301      	str	r3, [sp, #4]
 8007f28:	9304      	str	r3, [sp, #16]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	2312      	movs	r3, #18
 8007f2e:	e7d1      	b.n	8007ed4 <_dtoa_r+0x274>
 8007f30:	636f4361 	.word	0x636f4361
 8007f34:	3fd287a7 	.word	0x3fd287a7
 8007f38:	8b60c8b3 	.word	0x8b60c8b3
 8007f3c:	3fc68a28 	.word	0x3fc68a28
 8007f40:	509f79fb 	.word	0x509f79fb
 8007f44:	3fd34413 	.word	0x3fd34413
 8007f48:	08009cf1 	.word	0x08009cf1
 8007f4c:	08009d08 	.word	0x08009d08
 8007f50:	7ff00000 	.word	0x7ff00000
 8007f54:	08009ced 	.word	0x08009ced
 8007f58:	08009ce4 	.word	0x08009ce4
 8007f5c:	08009cc1 	.word	0x08009cc1
 8007f60:	3ff80000 	.word	0x3ff80000
 8007f64:	08009df8 	.word	0x08009df8
 8007f68:	08009d60 	.word	0x08009d60
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	9309      	str	r3, [sp, #36]	; 0x24
 8007f70:	e7d7      	b.n	8007f22 <_dtoa_r+0x2c2>
 8007f72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f74:	9301      	str	r3, [sp, #4]
 8007f76:	9304      	str	r3, [sp, #16]
 8007f78:	e7ba      	b.n	8007ef0 <_dtoa_r+0x290>
 8007f7a:	3101      	adds	r1, #1
 8007f7c:	0052      	lsls	r2, r2, #1
 8007f7e:	e7ba      	b.n	8007ef6 <_dtoa_r+0x296>
 8007f80:	69e3      	ldr	r3, [r4, #28]
 8007f82:	9a00      	ldr	r2, [sp, #0]
 8007f84:	601a      	str	r2, [r3, #0]
 8007f86:	9b04      	ldr	r3, [sp, #16]
 8007f88:	2b0e      	cmp	r3, #14
 8007f8a:	f200 80a8 	bhi.w	80080de <_dtoa_r+0x47e>
 8007f8e:	2d00      	cmp	r5, #0
 8007f90:	f000 80a5 	beq.w	80080de <_dtoa_r+0x47e>
 8007f94:	f1bb 0f00 	cmp.w	fp, #0
 8007f98:	dd38      	ble.n	800800c <_dtoa_r+0x3ac>
 8007f9a:	4bc0      	ldr	r3, [pc, #768]	; (800829c <_dtoa_r+0x63c>)
 8007f9c:	f00b 020f 	and.w	r2, fp, #15
 8007fa0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fa4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007fa8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007fac:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007fb0:	d019      	beq.n	8007fe6 <_dtoa_r+0x386>
 8007fb2:	4bbb      	ldr	r3, [pc, #748]	; (80082a0 <_dtoa_r+0x640>)
 8007fb4:	ec51 0b18 	vmov	r0, r1, d8
 8007fb8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007fbc:	f7f8 fc6e 	bl	800089c <__aeabi_ddiv>
 8007fc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fc4:	f008 080f 	and.w	r8, r8, #15
 8007fc8:	2503      	movs	r5, #3
 8007fca:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80082a0 <_dtoa_r+0x640>
 8007fce:	f1b8 0f00 	cmp.w	r8, #0
 8007fd2:	d10a      	bne.n	8007fea <_dtoa_r+0x38a>
 8007fd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fd8:	4632      	mov	r2, r6
 8007fda:	463b      	mov	r3, r7
 8007fdc:	f7f8 fc5e 	bl	800089c <__aeabi_ddiv>
 8007fe0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fe4:	e02b      	b.n	800803e <_dtoa_r+0x3de>
 8007fe6:	2502      	movs	r5, #2
 8007fe8:	e7ef      	b.n	8007fca <_dtoa_r+0x36a>
 8007fea:	f018 0f01 	tst.w	r8, #1
 8007fee:	d008      	beq.n	8008002 <_dtoa_r+0x3a2>
 8007ff0:	4630      	mov	r0, r6
 8007ff2:	4639      	mov	r1, r7
 8007ff4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007ff8:	f7f8 fb26 	bl	8000648 <__aeabi_dmul>
 8007ffc:	3501      	adds	r5, #1
 8007ffe:	4606      	mov	r6, r0
 8008000:	460f      	mov	r7, r1
 8008002:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008006:	f109 0908 	add.w	r9, r9, #8
 800800a:	e7e0      	b.n	8007fce <_dtoa_r+0x36e>
 800800c:	f000 809f 	beq.w	800814e <_dtoa_r+0x4ee>
 8008010:	f1cb 0600 	rsb	r6, fp, #0
 8008014:	4ba1      	ldr	r3, [pc, #644]	; (800829c <_dtoa_r+0x63c>)
 8008016:	4fa2      	ldr	r7, [pc, #648]	; (80082a0 <_dtoa_r+0x640>)
 8008018:	f006 020f 	and.w	r2, r6, #15
 800801c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008024:	ec51 0b18 	vmov	r0, r1, d8
 8008028:	f7f8 fb0e 	bl	8000648 <__aeabi_dmul>
 800802c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008030:	1136      	asrs	r6, r6, #4
 8008032:	2300      	movs	r3, #0
 8008034:	2502      	movs	r5, #2
 8008036:	2e00      	cmp	r6, #0
 8008038:	d17e      	bne.n	8008138 <_dtoa_r+0x4d8>
 800803a:	2b00      	cmp	r3, #0
 800803c:	d1d0      	bne.n	8007fe0 <_dtoa_r+0x380>
 800803e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008040:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008044:	2b00      	cmp	r3, #0
 8008046:	f000 8084 	beq.w	8008152 <_dtoa_r+0x4f2>
 800804a:	4b96      	ldr	r3, [pc, #600]	; (80082a4 <_dtoa_r+0x644>)
 800804c:	2200      	movs	r2, #0
 800804e:	4640      	mov	r0, r8
 8008050:	4649      	mov	r1, r9
 8008052:	f7f8 fd6b 	bl	8000b2c <__aeabi_dcmplt>
 8008056:	2800      	cmp	r0, #0
 8008058:	d07b      	beq.n	8008152 <_dtoa_r+0x4f2>
 800805a:	9b04      	ldr	r3, [sp, #16]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d078      	beq.n	8008152 <_dtoa_r+0x4f2>
 8008060:	9b01      	ldr	r3, [sp, #4]
 8008062:	2b00      	cmp	r3, #0
 8008064:	dd39      	ble.n	80080da <_dtoa_r+0x47a>
 8008066:	4b90      	ldr	r3, [pc, #576]	; (80082a8 <_dtoa_r+0x648>)
 8008068:	2200      	movs	r2, #0
 800806a:	4640      	mov	r0, r8
 800806c:	4649      	mov	r1, r9
 800806e:	f7f8 faeb 	bl	8000648 <__aeabi_dmul>
 8008072:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008076:	9e01      	ldr	r6, [sp, #4]
 8008078:	f10b 37ff 	add.w	r7, fp, #4294967295
 800807c:	3501      	adds	r5, #1
 800807e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008082:	4628      	mov	r0, r5
 8008084:	f7f8 fa76 	bl	8000574 <__aeabi_i2d>
 8008088:	4642      	mov	r2, r8
 800808a:	464b      	mov	r3, r9
 800808c:	f7f8 fadc 	bl	8000648 <__aeabi_dmul>
 8008090:	4b86      	ldr	r3, [pc, #536]	; (80082ac <_dtoa_r+0x64c>)
 8008092:	2200      	movs	r2, #0
 8008094:	f7f8 f922 	bl	80002dc <__adddf3>
 8008098:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800809c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080a0:	9303      	str	r3, [sp, #12]
 80080a2:	2e00      	cmp	r6, #0
 80080a4:	d158      	bne.n	8008158 <_dtoa_r+0x4f8>
 80080a6:	4b82      	ldr	r3, [pc, #520]	; (80082b0 <_dtoa_r+0x650>)
 80080a8:	2200      	movs	r2, #0
 80080aa:	4640      	mov	r0, r8
 80080ac:	4649      	mov	r1, r9
 80080ae:	f7f8 f913 	bl	80002d8 <__aeabi_dsub>
 80080b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80080b6:	4680      	mov	r8, r0
 80080b8:	4689      	mov	r9, r1
 80080ba:	f7f8 fd55 	bl	8000b68 <__aeabi_dcmpgt>
 80080be:	2800      	cmp	r0, #0
 80080c0:	f040 8296 	bne.w	80085f0 <_dtoa_r+0x990>
 80080c4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80080c8:	4640      	mov	r0, r8
 80080ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80080ce:	4649      	mov	r1, r9
 80080d0:	f7f8 fd2c 	bl	8000b2c <__aeabi_dcmplt>
 80080d4:	2800      	cmp	r0, #0
 80080d6:	f040 8289 	bne.w	80085ec <_dtoa_r+0x98c>
 80080da:	ed8d 8b02 	vstr	d8, [sp, #8]
 80080de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	f2c0 814e 	blt.w	8008382 <_dtoa_r+0x722>
 80080e6:	f1bb 0f0e 	cmp.w	fp, #14
 80080ea:	f300 814a 	bgt.w	8008382 <_dtoa_r+0x722>
 80080ee:	4b6b      	ldr	r3, [pc, #428]	; (800829c <_dtoa_r+0x63c>)
 80080f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80080f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80080f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	f280 80dc 	bge.w	80082b8 <_dtoa_r+0x658>
 8008100:	9b04      	ldr	r3, [sp, #16]
 8008102:	2b00      	cmp	r3, #0
 8008104:	f300 80d8 	bgt.w	80082b8 <_dtoa_r+0x658>
 8008108:	f040 826f 	bne.w	80085ea <_dtoa_r+0x98a>
 800810c:	4b68      	ldr	r3, [pc, #416]	; (80082b0 <_dtoa_r+0x650>)
 800810e:	2200      	movs	r2, #0
 8008110:	4640      	mov	r0, r8
 8008112:	4649      	mov	r1, r9
 8008114:	f7f8 fa98 	bl	8000648 <__aeabi_dmul>
 8008118:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800811c:	f7f8 fd1a 	bl	8000b54 <__aeabi_dcmpge>
 8008120:	9e04      	ldr	r6, [sp, #16]
 8008122:	4637      	mov	r7, r6
 8008124:	2800      	cmp	r0, #0
 8008126:	f040 8245 	bne.w	80085b4 <_dtoa_r+0x954>
 800812a:	9d00      	ldr	r5, [sp, #0]
 800812c:	2331      	movs	r3, #49	; 0x31
 800812e:	f805 3b01 	strb.w	r3, [r5], #1
 8008132:	f10b 0b01 	add.w	fp, fp, #1
 8008136:	e241      	b.n	80085bc <_dtoa_r+0x95c>
 8008138:	07f2      	lsls	r2, r6, #31
 800813a:	d505      	bpl.n	8008148 <_dtoa_r+0x4e8>
 800813c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008140:	f7f8 fa82 	bl	8000648 <__aeabi_dmul>
 8008144:	3501      	adds	r5, #1
 8008146:	2301      	movs	r3, #1
 8008148:	1076      	asrs	r6, r6, #1
 800814a:	3708      	adds	r7, #8
 800814c:	e773      	b.n	8008036 <_dtoa_r+0x3d6>
 800814e:	2502      	movs	r5, #2
 8008150:	e775      	b.n	800803e <_dtoa_r+0x3de>
 8008152:	9e04      	ldr	r6, [sp, #16]
 8008154:	465f      	mov	r7, fp
 8008156:	e792      	b.n	800807e <_dtoa_r+0x41e>
 8008158:	9900      	ldr	r1, [sp, #0]
 800815a:	4b50      	ldr	r3, [pc, #320]	; (800829c <_dtoa_r+0x63c>)
 800815c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008160:	4431      	add	r1, r6
 8008162:	9102      	str	r1, [sp, #8]
 8008164:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008166:	eeb0 9a47 	vmov.f32	s18, s14
 800816a:	eef0 9a67 	vmov.f32	s19, s15
 800816e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008172:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008176:	2900      	cmp	r1, #0
 8008178:	d044      	beq.n	8008204 <_dtoa_r+0x5a4>
 800817a:	494e      	ldr	r1, [pc, #312]	; (80082b4 <_dtoa_r+0x654>)
 800817c:	2000      	movs	r0, #0
 800817e:	f7f8 fb8d 	bl	800089c <__aeabi_ddiv>
 8008182:	ec53 2b19 	vmov	r2, r3, d9
 8008186:	f7f8 f8a7 	bl	80002d8 <__aeabi_dsub>
 800818a:	9d00      	ldr	r5, [sp, #0]
 800818c:	ec41 0b19 	vmov	d9, r0, r1
 8008190:	4649      	mov	r1, r9
 8008192:	4640      	mov	r0, r8
 8008194:	f7f8 fd08 	bl	8000ba8 <__aeabi_d2iz>
 8008198:	4606      	mov	r6, r0
 800819a:	f7f8 f9eb 	bl	8000574 <__aeabi_i2d>
 800819e:	4602      	mov	r2, r0
 80081a0:	460b      	mov	r3, r1
 80081a2:	4640      	mov	r0, r8
 80081a4:	4649      	mov	r1, r9
 80081a6:	f7f8 f897 	bl	80002d8 <__aeabi_dsub>
 80081aa:	3630      	adds	r6, #48	; 0x30
 80081ac:	f805 6b01 	strb.w	r6, [r5], #1
 80081b0:	ec53 2b19 	vmov	r2, r3, d9
 80081b4:	4680      	mov	r8, r0
 80081b6:	4689      	mov	r9, r1
 80081b8:	f7f8 fcb8 	bl	8000b2c <__aeabi_dcmplt>
 80081bc:	2800      	cmp	r0, #0
 80081be:	d164      	bne.n	800828a <_dtoa_r+0x62a>
 80081c0:	4642      	mov	r2, r8
 80081c2:	464b      	mov	r3, r9
 80081c4:	4937      	ldr	r1, [pc, #220]	; (80082a4 <_dtoa_r+0x644>)
 80081c6:	2000      	movs	r0, #0
 80081c8:	f7f8 f886 	bl	80002d8 <__aeabi_dsub>
 80081cc:	ec53 2b19 	vmov	r2, r3, d9
 80081d0:	f7f8 fcac 	bl	8000b2c <__aeabi_dcmplt>
 80081d4:	2800      	cmp	r0, #0
 80081d6:	f040 80b6 	bne.w	8008346 <_dtoa_r+0x6e6>
 80081da:	9b02      	ldr	r3, [sp, #8]
 80081dc:	429d      	cmp	r5, r3
 80081de:	f43f af7c 	beq.w	80080da <_dtoa_r+0x47a>
 80081e2:	4b31      	ldr	r3, [pc, #196]	; (80082a8 <_dtoa_r+0x648>)
 80081e4:	ec51 0b19 	vmov	r0, r1, d9
 80081e8:	2200      	movs	r2, #0
 80081ea:	f7f8 fa2d 	bl	8000648 <__aeabi_dmul>
 80081ee:	4b2e      	ldr	r3, [pc, #184]	; (80082a8 <_dtoa_r+0x648>)
 80081f0:	ec41 0b19 	vmov	d9, r0, r1
 80081f4:	2200      	movs	r2, #0
 80081f6:	4640      	mov	r0, r8
 80081f8:	4649      	mov	r1, r9
 80081fa:	f7f8 fa25 	bl	8000648 <__aeabi_dmul>
 80081fe:	4680      	mov	r8, r0
 8008200:	4689      	mov	r9, r1
 8008202:	e7c5      	b.n	8008190 <_dtoa_r+0x530>
 8008204:	ec51 0b17 	vmov	r0, r1, d7
 8008208:	f7f8 fa1e 	bl	8000648 <__aeabi_dmul>
 800820c:	9b02      	ldr	r3, [sp, #8]
 800820e:	9d00      	ldr	r5, [sp, #0]
 8008210:	930f      	str	r3, [sp, #60]	; 0x3c
 8008212:	ec41 0b19 	vmov	d9, r0, r1
 8008216:	4649      	mov	r1, r9
 8008218:	4640      	mov	r0, r8
 800821a:	f7f8 fcc5 	bl	8000ba8 <__aeabi_d2iz>
 800821e:	4606      	mov	r6, r0
 8008220:	f7f8 f9a8 	bl	8000574 <__aeabi_i2d>
 8008224:	3630      	adds	r6, #48	; 0x30
 8008226:	4602      	mov	r2, r0
 8008228:	460b      	mov	r3, r1
 800822a:	4640      	mov	r0, r8
 800822c:	4649      	mov	r1, r9
 800822e:	f7f8 f853 	bl	80002d8 <__aeabi_dsub>
 8008232:	f805 6b01 	strb.w	r6, [r5], #1
 8008236:	9b02      	ldr	r3, [sp, #8]
 8008238:	429d      	cmp	r5, r3
 800823a:	4680      	mov	r8, r0
 800823c:	4689      	mov	r9, r1
 800823e:	f04f 0200 	mov.w	r2, #0
 8008242:	d124      	bne.n	800828e <_dtoa_r+0x62e>
 8008244:	4b1b      	ldr	r3, [pc, #108]	; (80082b4 <_dtoa_r+0x654>)
 8008246:	ec51 0b19 	vmov	r0, r1, d9
 800824a:	f7f8 f847 	bl	80002dc <__adddf3>
 800824e:	4602      	mov	r2, r0
 8008250:	460b      	mov	r3, r1
 8008252:	4640      	mov	r0, r8
 8008254:	4649      	mov	r1, r9
 8008256:	f7f8 fc87 	bl	8000b68 <__aeabi_dcmpgt>
 800825a:	2800      	cmp	r0, #0
 800825c:	d173      	bne.n	8008346 <_dtoa_r+0x6e6>
 800825e:	ec53 2b19 	vmov	r2, r3, d9
 8008262:	4914      	ldr	r1, [pc, #80]	; (80082b4 <_dtoa_r+0x654>)
 8008264:	2000      	movs	r0, #0
 8008266:	f7f8 f837 	bl	80002d8 <__aeabi_dsub>
 800826a:	4602      	mov	r2, r0
 800826c:	460b      	mov	r3, r1
 800826e:	4640      	mov	r0, r8
 8008270:	4649      	mov	r1, r9
 8008272:	f7f8 fc5b 	bl	8000b2c <__aeabi_dcmplt>
 8008276:	2800      	cmp	r0, #0
 8008278:	f43f af2f 	beq.w	80080da <_dtoa_r+0x47a>
 800827c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800827e:	1e6b      	subs	r3, r5, #1
 8008280:	930f      	str	r3, [sp, #60]	; 0x3c
 8008282:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008286:	2b30      	cmp	r3, #48	; 0x30
 8008288:	d0f8      	beq.n	800827c <_dtoa_r+0x61c>
 800828a:	46bb      	mov	fp, r7
 800828c:	e04a      	b.n	8008324 <_dtoa_r+0x6c4>
 800828e:	4b06      	ldr	r3, [pc, #24]	; (80082a8 <_dtoa_r+0x648>)
 8008290:	f7f8 f9da 	bl	8000648 <__aeabi_dmul>
 8008294:	4680      	mov	r8, r0
 8008296:	4689      	mov	r9, r1
 8008298:	e7bd      	b.n	8008216 <_dtoa_r+0x5b6>
 800829a:	bf00      	nop
 800829c:	08009df8 	.word	0x08009df8
 80082a0:	08009dd0 	.word	0x08009dd0
 80082a4:	3ff00000 	.word	0x3ff00000
 80082a8:	40240000 	.word	0x40240000
 80082ac:	401c0000 	.word	0x401c0000
 80082b0:	40140000 	.word	0x40140000
 80082b4:	3fe00000 	.word	0x3fe00000
 80082b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80082bc:	9d00      	ldr	r5, [sp, #0]
 80082be:	4642      	mov	r2, r8
 80082c0:	464b      	mov	r3, r9
 80082c2:	4630      	mov	r0, r6
 80082c4:	4639      	mov	r1, r7
 80082c6:	f7f8 fae9 	bl	800089c <__aeabi_ddiv>
 80082ca:	f7f8 fc6d 	bl	8000ba8 <__aeabi_d2iz>
 80082ce:	9001      	str	r0, [sp, #4]
 80082d0:	f7f8 f950 	bl	8000574 <__aeabi_i2d>
 80082d4:	4642      	mov	r2, r8
 80082d6:	464b      	mov	r3, r9
 80082d8:	f7f8 f9b6 	bl	8000648 <__aeabi_dmul>
 80082dc:	4602      	mov	r2, r0
 80082de:	460b      	mov	r3, r1
 80082e0:	4630      	mov	r0, r6
 80082e2:	4639      	mov	r1, r7
 80082e4:	f7f7 fff8 	bl	80002d8 <__aeabi_dsub>
 80082e8:	9e01      	ldr	r6, [sp, #4]
 80082ea:	9f04      	ldr	r7, [sp, #16]
 80082ec:	3630      	adds	r6, #48	; 0x30
 80082ee:	f805 6b01 	strb.w	r6, [r5], #1
 80082f2:	9e00      	ldr	r6, [sp, #0]
 80082f4:	1bae      	subs	r6, r5, r6
 80082f6:	42b7      	cmp	r7, r6
 80082f8:	4602      	mov	r2, r0
 80082fa:	460b      	mov	r3, r1
 80082fc:	d134      	bne.n	8008368 <_dtoa_r+0x708>
 80082fe:	f7f7 ffed 	bl	80002dc <__adddf3>
 8008302:	4642      	mov	r2, r8
 8008304:	464b      	mov	r3, r9
 8008306:	4606      	mov	r6, r0
 8008308:	460f      	mov	r7, r1
 800830a:	f7f8 fc2d 	bl	8000b68 <__aeabi_dcmpgt>
 800830e:	b9c8      	cbnz	r0, 8008344 <_dtoa_r+0x6e4>
 8008310:	4642      	mov	r2, r8
 8008312:	464b      	mov	r3, r9
 8008314:	4630      	mov	r0, r6
 8008316:	4639      	mov	r1, r7
 8008318:	f7f8 fbfe 	bl	8000b18 <__aeabi_dcmpeq>
 800831c:	b110      	cbz	r0, 8008324 <_dtoa_r+0x6c4>
 800831e:	9b01      	ldr	r3, [sp, #4]
 8008320:	07db      	lsls	r3, r3, #31
 8008322:	d40f      	bmi.n	8008344 <_dtoa_r+0x6e4>
 8008324:	4651      	mov	r1, sl
 8008326:	4620      	mov	r0, r4
 8008328:	f000 fbcc 	bl	8008ac4 <_Bfree>
 800832c:	2300      	movs	r3, #0
 800832e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008330:	702b      	strb	r3, [r5, #0]
 8008332:	f10b 0301 	add.w	r3, fp, #1
 8008336:	6013      	str	r3, [r2, #0]
 8008338:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800833a:	2b00      	cmp	r3, #0
 800833c:	f43f ace2 	beq.w	8007d04 <_dtoa_r+0xa4>
 8008340:	601d      	str	r5, [r3, #0]
 8008342:	e4df      	b.n	8007d04 <_dtoa_r+0xa4>
 8008344:	465f      	mov	r7, fp
 8008346:	462b      	mov	r3, r5
 8008348:	461d      	mov	r5, r3
 800834a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800834e:	2a39      	cmp	r2, #57	; 0x39
 8008350:	d106      	bne.n	8008360 <_dtoa_r+0x700>
 8008352:	9a00      	ldr	r2, [sp, #0]
 8008354:	429a      	cmp	r2, r3
 8008356:	d1f7      	bne.n	8008348 <_dtoa_r+0x6e8>
 8008358:	9900      	ldr	r1, [sp, #0]
 800835a:	2230      	movs	r2, #48	; 0x30
 800835c:	3701      	adds	r7, #1
 800835e:	700a      	strb	r2, [r1, #0]
 8008360:	781a      	ldrb	r2, [r3, #0]
 8008362:	3201      	adds	r2, #1
 8008364:	701a      	strb	r2, [r3, #0]
 8008366:	e790      	b.n	800828a <_dtoa_r+0x62a>
 8008368:	4ba3      	ldr	r3, [pc, #652]	; (80085f8 <_dtoa_r+0x998>)
 800836a:	2200      	movs	r2, #0
 800836c:	f7f8 f96c 	bl	8000648 <__aeabi_dmul>
 8008370:	2200      	movs	r2, #0
 8008372:	2300      	movs	r3, #0
 8008374:	4606      	mov	r6, r0
 8008376:	460f      	mov	r7, r1
 8008378:	f7f8 fbce 	bl	8000b18 <__aeabi_dcmpeq>
 800837c:	2800      	cmp	r0, #0
 800837e:	d09e      	beq.n	80082be <_dtoa_r+0x65e>
 8008380:	e7d0      	b.n	8008324 <_dtoa_r+0x6c4>
 8008382:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008384:	2a00      	cmp	r2, #0
 8008386:	f000 80ca 	beq.w	800851e <_dtoa_r+0x8be>
 800838a:	9a07      	ldr	r2, [sp, #28]
 800838c:	2a01      	cmp	r2, #1
 800838e:	f300 80ad 	bgt.w	80084ec <_dtoa_r+0x88c>
 8008392:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008394:	2a00      	cmp	r2, #0
 8008396:	f000 80a5 	beq.w	80084e4 <_dtoa_r+0x884>
 800839a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800839e:	9e08      	ldr	r6, [sp, #32]
 80083a0:	9d05      	ldr	r5, [sp, #20]
 80083a2:	9a05      	ldr	r2, [sp, #20]
 80083a4:	441a      	add	r2, r3
 80083a6:	9205      	str	r2, [sp, #20]
 80083a8:	9a06      	ldr	r2, [sp, #24]
 80083aa:	2101      	movs	r1, #1
 80083ac:	441a      	add	r2, r3
 80083ae:	4620      	mov	r0, r4
 80083b0:	9206      	str	r2, [sp, #24]
 80083b2:	f000 fc3d 	bl	8008c30 <__i2b>
 80083b6:	4607      	mov	r7, r0
 80083b8:	b165      	cbz	r5, 80083d4 <_dtoa_r+0x774>
 80083ba:	9b06      	ldr	r3, [sp, #24]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	dd09      	ble.n	80083d4 <_dtoa_r+0x774>
 80083c0:	42ab      	cmp	r3, r5
 80083c2:	9a05      	ldr	r2, [sp, #20]
 80083c4:	bfa8      	it	ge
 80083c6:	462b      	movge	r3, r5
 80083c8:	1ad2      	subs	r2, r2, r3
 80083ca:	9205      	str	r2, [sp, #20]
 80083cc:	9a06      	ldr	r2, [sp, #24]
 80083ce:	1aed      	subs	r5, r5, r3
 80083d0:	1ad3      	subs	r3, r2, r3
 80083d2:	9306      	str	r3, [sp, #24]
 80083d4:	9b08      	ldr	r3, [sp, #32]
 80083d6:	b1f3      	cbz	r3, 8008416 <_dtoa_r+0x7b6>
 80083d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083da:	2b00      	cmp	r3, #0
 80083dc:	f000 80a3 	beq.w	8008526 <_dtoa_r+0x8c6>
 80083e0:	2e00      	cmp	r6, #0
 80083e2:	dd10      	ble.n	8008406 <_dtoa_r+0x7a6>
 80083e4:	4639      	mov	r1, r7
 80083e6:	4632      	mov	r2, r6
 80083e8:	4620      	mov	r0, r4
 80083ea:	f000 fce1 	bl	8008db0 <__pow5mult>
 80083ee:	4652      	mov	r2, sl
 80083f0:	4601      	mov	r1, r0
 80083f2:	4607      	mov	r7, r0
 80083f4:	4620      	mov	r0, r4
 80083f6:	f000 fc31 	bl	8008c5c <__multiply>
 80083fa:	4651      	mov	r1, sl
 80083fc:	4680      	mov	r8, r0
 80083fe:	4620      	mov	r0, r4
 8008400:	f000 fb60 	bl	8008ac4 <_Bfree>
 8008404:	46c2      	mov	sl, r8
 8008406:	9b08      	ldr	r3, [sp, #32]
 8008408:	1b9a      	subs	r2, r3, r6
 800840a:	d004      	beq.n	8008416 <_dtoa_r+0x7b6>
 800840c:	4651      	mov	r1, sl
 800840e:	4620      	mov	r0, r4
 8008410:	f000 fcce 	bl	8008db0 <__pow5mult>
 8008414:	4682      	mov	sl, r0
 8008416:	2101      	movs	r1, #1
 8008418:	4620      	mov	r0, r4
 800841a:	f000 fc09 	bl	8008c30 <__i2b>
 800841e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008420:	2b00      	cmp	r3, #0
 8008422:	4606      	mov	r6, r0
 8008424:	f340 8081 	ble.w	800852a <_dtoa_r+0x8ca>
 8008428:	461a      	mov	r2, r3
 800842a:	4601      	mov	r1, r0
 800842c:	4620      	mov	r0, r4
 800842e:	f000 fcbf 	bl	8008db0 <__pow5mult>
 8008432:	9b07      	ldr	r3, [sp, #28]
 8008434:	2b01      	cmp	r3, #1
 8008436:	4606      	mov	r6, r0
 8008438:	dd7a      	ble.n	8008530 <_dtoa_r+0x8d0>
 800843a:	f04f 0800 	mov.w	r8, #0
 800843e:	6933      	ldr	r3, [r6, #16]
 8008440:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008444:	6918      	ldr	r0, [r3, #16]
 8008446:	f000 fba5 	bl	8008b94 <__hi0bits>
 800844a:	f1c0 0020 	rsb	r0, r0, #32
 800844e:	9b06      	ldr	r3, [sp, #24]
 8008450:	4418      	add	r0, r3
 8008452:	f010 001f 	ands.w	r0, r0, #31
 8008456:	f000 8094 	beq.w	8008582 <_dtoa_r+0x922>
 800845a:	f1c0 0320 	rsb	r3, r0, #32
 800845e:	2b04      	cmp	r3, #4
 8008460:	f340 8085 	ble.w	800856e <_dtoa_r+0x90e>
 8008464:	9b05      	ldr	r3, [sp, #20]
 8008466:	f1c0 001c 	rsb	r0, r0, #28
 800846a:	4403      	add	r3, r0
 800846c:	9305      	str	r3, [sp, #20]
 800846e:	9b06      	ldr	r3, [sp, #24]
 8008470:	4403      	add	r3, r0
 8008472:	4405      	add	r5, r0
 8008474:	9306      	str	r3, [sp, #24]
 8008476:	9b05      	ldr	r3, [sp, #20]
 8008478:	2b00      	cmp	r3, #0
 800847a:	dd05      	ble.n	8008488 <_dtoa_r+0x828>
 800847c:	4651      	mov	r1, sl
 800847e:	461a      	mov	r2, r3
 8008480:	4620      	mov	r0, r4
 8008482:	f000 fcef 	bl	8008e64 <__lshift>
 8008486:	4682      	mov	sl, r0
 8008488:	9b06      	ldr	r3, [sp, #24]
 800848a:	2b00      	cmp	r3, #0
 800848c:	dd05      	ble.n	800849a <_dtoa_r+0x83a>
 800848e:	4631      	mov	r1, r6
 8008490:	461a      	mov	r2, r3
 8008492:	4620      	mov	r0, r4
 8008494:	f000 fce6 	bl	8008e64 <__lshift>
 8008498:	4606      	mov	r6, r0
 800849a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800849c:	2b00      	cmp	r3, #0
 800849e:	d072      	beq.n	8008586 <_dtoa_r+0x926>
 80084a0:	4631      	mov	r1, r6
 80084a2:	4650      	mov	r0, sl
 80084a4:	f000 fd4a 	bl	8008f3c <__mcmp>
 80084a8:	2800      	cmp	r0, #0
 80084aa:	da6c      	bge.n	8008586 <_dtoa_r+0x926>
 80084ac:	2300      	movs	r3, #0
 80084ae:	4651      	mov	r1, sl
 80084b0:	220a      	movs	r2, #10
 80084b2:	4620      	mov	r0, r4
 80084b4:	f000 fb28 	bl	8008b08 <__multadd>
 80084b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 80084be:	4682      	mov	sl, r0
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	f000 81b0 	beq.w	8008826 <_dtoa_r+0xbc6>
 80084c6:	2300      	movs	r3, #0
 80084c8:	4639      	mov	r1, r7
 80084ca:	220a      	movs	r2, #10
 80084cc:	4620      	mov	r0, r4
 80084ce:	f000 fb1b 	bl	8008b08 <__multadd>
 80084d2:	9b01      	ldr	r3, [sp, #4]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	4607      	mov	r7, r0
 80084d8:	f300 8096 	bgt.w	8008608 <_dtoa_r+0x9a8>
 80084dc:	9b07      	ldr	r3, [sp, #28]
 80084de:	2b02      	cmp	r3, #2
 80084e0:	dc59      	bgt.n	8008596 <_dtoa_r+0x936>
 80084e2:	e091      	b.n	8008608 <_dtoa_r+0x9a8>
 80084e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80084e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80084ea:	e758      	b.n	800839e <_dtoa_r+0x73e>
 80084ec:	9b04      	ldr	r3, [sp, #16]
 80084ee:	1e5e      	subs	r6, r3, #1
 80084f0:	9b08      	ldr	r3, [sp, #32]
 80084f2:	42b3      	cmp	r3, r6
 80084f4:	bfbf      	itttt	lt
 80084f6:	9b08      	ldrlt	r3, [sp, #32]
 80084f8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80084fa:	9608      	strlt	r6, [sp, #32]
 80084fc:	1af3      	sublt	r3, r6, r3
 80084fe:	bfb4      	ite	lt
 8008500:	18d2      	addlt	r2, r2, r3
 8008502:	1b9e      	subge	r6, r3, r6
 8008504:	9b04      	ldr	r3, [sp, #16]
 8008506:	bfbc      	itt	lt
 8008508:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800850a:	2600      	movlt	r6, #0
 800850c:	2b00      	cmp	r3, #0
 800850e:	bfb7      	itett	lt
 8008510:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008514:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008518:	1a9d      	sublt	r5, r3, r2
 800851a:	2300      	movlt	r3, #0
 800851c:	e741      	b.n	80083a2 <_dtoa_r+0x742>
 800851e:	9e08      	ldr	r6, [sp, #32]
 8008520:	9d05      	ldr	r5, [sp, #20]
 8008522:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008524:	e748      	b.n	80083b8 <_dtoa_r+0x758>
 8008526:	9a08      	ldr	r2, [sp, #32]
 8008528:	e770      	b.n	800840c <_dtoa_r+0x7ac>
 800852a:	9b07      	ldr	r3, [sp, #28]
 800852c:	2b01      	cmp	r3, #1
 800852e:	dc19      	bgt.n	8008564 <_dtoa_r+0x904>
 8008530:	9b02      	ldr	r3, [sp, #8]
 8008532:	b9bb      	cbnz	r3, 8008564 <_dtoa_r+0x904>
 8008534:	9b03      	ldr	r3, [sp, #12]
 8008536:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800853a:	b99b      	cbnz	r3, 8008564 <_dtoa_r+0x904>
 800853c:	9b03      	ldr	r3, [sp, #12]
 800853e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008542:	0d1b      	lsrs	r3, r3, #20
 8008544:	051b      	lsls	r3, r3, #20
 8008546:	b183      	cbz	r3, 800856a <_dtoa_r+0x90a>
 8008548:	9b05      	ldr	r3, [sp, #20]
 800854a:	3301      	adds	r3, #1
 800854c:	9305      	str	r3, [sp, #20]
 800854e:	9b06      	ldr	r3, [sp, #24]
 8008550:	3301      	adds	r3, #1
 8008552:	9306      	str	r3, [sp, #24]
 8008554:	f04f 0801 	mov.w	r8, #1
 8008558:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800855a:	2b00      	cmp	r3, #0
 800855c:	f47f af6f 	bne.w	800843e <_dtoa_r+0x7de>
 8008560:	2001      	movs	r0, #1
 8008562:	e774      	b.n	800844e <_dtoa_r+0x7ee>
 8008564:	f04f 0800 	mov.w	r8, #0
 8008568:	e7f6      	b.n	8008558 <_dtoa_r+0x8f8>
 800856a:	4698      	mov	r8, r3
 800856c:	e7f4      	b.n	8008558 <_dtoa_r+0x8f8>
 800856e:	d082      	beq.n	8008476 <_dtoa_r+0x816>
 8008570:	9a05      	ldr	r2, [sp, #20]
 8008572:	331c      	adds	r3, #28
 8008574:	441a      	add	r2, r3
 8008576:	9205      	str	r2, [sp, #20]
 8008578:	9a06      	ldr	r2, [sp, #24]
 800857a:	441a      	add	r2, r3
 800857c:	441d      	add	r5, r3
 800857e:	9206      	str	r2, [sp, #24]
 8008580:	e779      	b.n	8008476 <_dtoa_r+0x816>
 8008582:	4603      	mov	r3, r0
 8008584:	e7f4      	b.n	8008570 <_dtoa_r+0x910>
 8008586:	9b04      	ldr	r3, [sp, #16]
 8008588:	2b00      	cmp	r3, #0
 800858a:	dc37      	bgt.n	80085fc <_dtoa_r+0x99c>
 800858c:	9b07      	ldr	r3, [sp, #28]
 800858e:	2b02      	cmp	r3, #2
 8008590:	dd34      	ble.n	80085fc <_dtoa_r+0x99c>
 8008592:	9b04      	ldr	r3, [sp, #16]
 8008594:	9301      	str	r3, [sp, #4]
 8008596:	9b01      	ldr	r3, [sp, #4]
 8008598:	b963      	cbnz	r3, 80085b4 <_dtoa_r+0x954>
 800859a:	4631      	mov	r1, r6
 800859c:	2205      	movs	r2, #5
 800859e:	4620      	mov	r0, r4
 80085a0:	f000 fab2 	bl	8008b08 <__multadd>
 80085a4:	4601      	mov	r1, r0
 80085a6:	4606      	mov	r6, r0
 80085a8:	4650      	mov	r0, sl
 80085aa:	f000 fcc7 	bl	8008f3c <__mcmp>
 80085ae:	2800      	cmp	r0, #0
 80085b0:	f73f adbb 	bgt.w	800812a <_dtoa_r+0x4ca>
 80085b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085b6:	9d00      	ldr	r5, [sp, #0]
 80085b8:	ea6f 0b03 	mvn.w	fp, r3
 80085bc:	f04f 0800 	mov.w	r8, #0
 80085c0:	4631      	mov	r1, r6
 80085c2:	4620      	mov	r0, r4
 80085c4:	f000 fa7e 	bl	8008ac4 <_Bfree>
 80085c8:	2f00      	cmp	r7, #0
 80085ca:	f43f aeab 	beq.w	8008324 <_dtoa_r+0x6c4>
 80085ce:	f1b8 0f00 	cmp.w	r8, #0
 80085d2:	d005      	beq.n	80085e0 <_dtoa_r+0x980>
 80085d4:	45b8      	cmp	r8, r7
 80085d6:	d003      	beq.n	80085e0 <_dtoa_r+0x980>
 80085d8:	4641      	mov	r1, r8
 80085da:	4620      	mov	r0, r4
 80085dc:	f000 fa72 	bl	8008ac4 <_Bfree>
 80085e0:	4639      	mov	r1, r7
 80085e2:	4620      	mov	r0, r4
 80085e4:	f000 fa6e 	bl	8008ac4 <_Bfree>
 80085e8:	e69c      	b.n	8008324 <_dtoa_r+0x6c4>
 80085ea:	2600      	movs	r6, #0
 80085ec:	4637      	mov	r7, r6
 80085ee:	e7e1      	b.n	80085b4 <_dtoa_r+0x954>
 80085f0:	46bb      	mov	fp, r7
 80085f2:	4637      	mov	r7, r6
 80085f4:	e599      	b.n	800812a <_dtoa_r+0x4ca>
 80085f6:	bf00      	nop
 80085f8:	40240000 	.word	0x40240000
 80085fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085fe:	2b00      	cmp	r3, #0
 8008600:	f000 80c8 	beq.w	8008794 <_dtoa_r+0xb34>
 8008604:	9b04      	ldr	r3, [sp, #16]
 8008606:	9301      	str	r3, [sp, #4]
 8008608:	2d00      	cmp	r5, #0
 800860a:	dd05      	ble.n	8008618 <_dtoa_r+0x9b8>
 800860c:	4639      	mov	r1, r7
 800860e:	462a      	mov	r2, r5
 8008610:	4620      	mov	r0, r4
 8008612:	f000 fc27 	bl	8008e64 <__lshift>
 8008616:	4607      	mov	r7, r0
 8008618:	f1b8 0f00 	cmp.w	r8, #0
 800861c:	d05b      	beq.n	80086d6 <_dtoa_r+0xa76>
 800861e:	6879      	ldr	r1, [r7, #4]
 8008620:	4620      	mov	r0, r4
 8008622:	f000 fa0f 	bl	8008a44 <_Balloc>
 8008626:	4605      	mov	r5, r0
 8008628:	b928      	cbnz	r0, 8008636 <_dtoa_r+0x9d6>
 800862a:	4b83      	ldr	r3, [pc, #524]	; (8008838 <_dtoa_r+0xbd8>)
 800862c:	4602      	mov	r2, r0
 800862e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008632:	f7ff bb2e 	b.w	8007c92 <_dtoa_r+0x32>
 8008636:	693a      	ldr	r2, [r7, #16]
 8008638:	3202      	adds	r2, #2
 800863a:	0092      	lsls	r2, r2, #2
 800863c:	f107 010c 	add.w	r1, r7, #12
 8008640:	300c      	adds	r0, #12
 8008642:	f7ff fa74 	bl	8007b2e <memcpy>
 8008646:	2201      	movs	r2, #1
 8008648:	4629      	mov	r1, r5
 800864a:	4620      	mov	r0, r4
 800864c:	f000 fc0a 	bl	8008e64 <__lshift>
 8008650:	9b00      	ldr	r3, [sp, #0]
 8008652:	3301      	adds	r3, #1
 8008654:	9304      	str	r3, [sp, #16]
 8008656:	e9dd 2300 	ldrd	r2, r3, [sp]
 800865a:	4413      	add	r3, r2
 800865c:	9308      	str	r3, [sp, #32]
 800865e:	9b02      	ldr	r3, [sp, #8]
 8008660:	f003 0301 	and.w	r3, r3, #1
 8008664:	46b8      	mov	r8, r7
 8008666:	9306      	str	r3, [sp, #24]
 8008668:	4607      	mov	r7, r0
 800866a:	9b04      	ldr	r3, [sp, #16]
 800866c:	4631      	mov	r1, r6
 800866e:	3b01      	subs	r3, #1
 8008670:	4650      	mov	r0, sl
 8008672:	9301      	str	r3, [sp, #4]
 8008674:	f7ff fa69 	bl	8007b4a <quorem>
 8008678:	4641      	mov	r1, r8
 800867a:	9002      	str	r0, [sp, #8]
 800867c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008680:	4650      	mov	r0, sl
 8008682:	f000 fc5b 	bl	8008f3c <__mcmp>
 8008686:	463a      	mov	r2, r7
 8008688:	9005      	str	r0, [sp, #20]
 800868a:	4631      	mov	r1, r6
 800868c:	4620      	mov	r0, r4
 800868e:	f000 fc71 	bl	8008f74 <__mdiff>
 8008692:	68c2      	ldr	r2, [r0, #12]
 8008694:	4605      	mov	r5, r0
 8008696:	bb02      	cbnz	r2, 80086da <_dtoa_r+0xa7a>
 8008698:	4601      	mov	r1, r0
 800869a:	4650      	mov	r0, sl
 800869c:	f000 fc4e 	bl	8008f3c <__mcmp>
 80086a0:	4602      	mov	r2, r0
 80086a2:	4629      	mov	r1, r5
 80086a4:	4620      	mov	r0, r4
 80086a6:	9209      	str	r2, [sp, #36]	; 0x24
 80086a8:	f000 fa0c 	bl	8008ac4 <_Bfree>
 80086ac:	9b07      	ldr	r3, [sp, #28]
 80086ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086b0:	9d04      	ldr	r5, [sp, #16]
 80086b2:	ea43 0102 	orr.w	r1, r3, r2
 80086b6:	9b06      	ldr	r3, [sp, #24]
 80086b8:	4319      	orrs	r1, r3
 80086ba:	d110      	bne.n	80086de <_dtoa_r+0xa7e>
 80086bc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80086c0:	d029      	beq.n	8008716 <_dtoa_r+0xab6>
 80086c2:	9b05      	ldr	r3, [sp, #20]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	dd02      	ble.n	80086ce <_dtoa_r+0xa6e>
 80086c8:	9b02      	ldr	r3, [sp, #8]
 80086ca:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80086ce:	9b01      	ldr	r3, [sp, #4]
 80086d0:	f883 9000 	strb.w	r9, [r3]
 80086d4:	e774      	b.n	80085c0 <_dtoa_r+0x960>
 80086d6:	4638      	mov	r0, r7
 80086d8:	e7ba      	b.n	8008650 <_dtoa_r+0x9f0>
 80086da:	2201      	movs	r2, #1
 80086dc:	e7e1      	b.n	80086a2 <_dtoa_r+0xa42>
 80086de:	9b05      	ldr	r3, [sp, #20]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	db04      	blt.n	80086ee <_dtoa_r+0xa8e>
 80086e4:	9907      	ldr	r1, [sp, #28]
 80086e6:	430b      	orrs	r3, r1
 80086e8:	9906      	ldr	r1, [sp, #24]
 80086ea:	430b      	orrs	r3, r1
 80086ec:	d120      	bne.n	8008730 <_dtoa_r+0xad0>
 80086ee:	2a00      	cmp	r2, #0
 80086f0:	dded      	ble.n	80086ce <_dtoa_r+0xa6e>
 80086f2:	4651      	mov	r1, sl
 80086f4:	2201      	movs	r2, #1
 80086f6:	4620      	mov	r0, r4
 80086f8:	f000 fbb4 	bl	8008e64 <__lshift>
 80086fc:	4631      	mov	r1, r6
 80086fe:	4682      	mov	sl, r0
 8008700:	f000 fc1c 	bl	8008f3c <__mcmp>
 8008704:	2800      	cmp	r0, #0
 8008706:	dc03      	bgt.n	8008710 <_dtoa_r+0xab0>
 8008708:	d1e1      	bne.n	80086ce <_dtoa_r+0xa6e>
 800870a:	f019 0f01 	tst.w	r9, #1
 800870e:	d0de      	beq.n	80086ce <_dtoa_r+0xa6e>
 8008710:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008714:	d1d8      	bne.n	80086c8 <_dtoa_r+0xa68>
 8008716:	9a01      	ldr	r2, [sp, #4]
 8008718:	2339      	movs	r3, #57	; 0x39
 800871a:	7013      	strb	r3, [r2, #0]
 800871c:	462b      	mov	r3, r5
 800871e:	461d      	mov	r5, r3
 8008720:	3b01      	subs	r3, #1
 8008722:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008726:	2a39      	cmp	r2, #57	; 0x39
 8008728:	d06c      	beq.n	8008804 <_dtoa_r+0xba4>
 800872a:	3201      	adds	r2, #1
 800872c:	701a      	strb	r2, [r3, #0]
 800872e:	e747      	b.n	80085c0 <_dtoa_r+0x960>
 8008730:	2a00      	cmp	r2, #0
 8008732:	dd07      	ble.n	8008744 <_dtoa_r+0xae4>
 8008734:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008738:	d0ed      	beq.n	8008716 <_dtoa_r+0xab6>
 800873a:	9a01      	ldr	r2, [sp, #4]
 800873c:	f109 0301 	add.w	r3, r9, #1
 8008740:	7013      	strb	r3, [r2, #0]
 8008742:	e73d      	b.n	80085c0 <_dtoa_r+0x960>
 8008744:	9b04      	ldr	r3, [sp, #16]
 8008746:	9a08      	ldr	r2, [sp, #32]
 8008748:	f803 9c01 	strb.w	r9, [r3, #-1]
 800874c:	4293      	cmp	r3, r2
 800874e:	d043      	beq.n	80087d8 <_dtoa_r+0xb78>
 8008750:	4651      	mov	r1, sl
 8008752:	2300      	movs	r3, #0
 8008754:	220a      	movs	r2, #10
 8008756:	4620      	mov	r0, r4
 8008758:	f000 f9d6 	bl	8008b08 <__multadd>
 800875c:	45b8      	cmp	r8, r7
 800875e:	4682      	mov	sl, r0
 8008760:	f04f 0300 	mov.w	r3, #0
 8008764:	f04f 020a 	mov.w	r2, #10
 8008768:	4641      	mov	r1, r8
 800876a:	4620      	mov	r0, r4
 800876c:	d107      	bne.n	800877e <_dtoa_r+0xb1e>
 800876e:	f000 f9cb 	bl	8008b08 <__multadd>
 8008772:	4680      	mov	r8, r0
 8008774:	4607      	mov	r7, r0
 8008776:	9b04      	ldr	r3, [sp, #16]
 8008778:	3301      	adds	r3, #1
 800877a:	9304      	str	r3, [sp, #16]
 800877c:	e775      	b.n	800866a <_dtoa_r+0xa0a>
 800877e:	f000 f9c3 	bl	8008b08 <__multadd>
 8008782:	4639      	mov	r1, r7
 8008784:	4680      	mov	r8, r0
 8008786:	2300      	movs	r3, #0
 8008788:	220a      	movs	r2, #10
 800878a:	4620      	mov	r0, r4
 800878c:	f000 f9bc 	bl	8008b08 <__multadd>
 8008790:	4607      	mov	r7, r0
 8008792:	e7f0      	b.n	8008776 <_dtoa_r+0xb16>
 8008794:	9b04      	ldr	r3, [sp, #16]
 8008796:	9301      	str	r3, [sp, #4]
 8008798:	9d00      	ldr	r5, [sp, #0]
 800879a:	4631      	mov	r1, r6
 800879c:	4650      	mov	r0, sl
 800879e:	f7ff f9d4 	bl	8007b4a <quorem>
 80087a2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80087a6:	9b00      	ldr	r3, [sp, #0]
 80087a8:	f805 9b01 	strb.w	r9, [r5], #1
 80087ac:	1aea      	subs	r2, r5, r3
 80087ae:	9b01      	ldr	r3, [sp, #4]
 80087b0:	4293      	cmp	r3, r2
 80087b2:	dd07      	ble.n	80087c4 <_dtoa_r+0xb64>
 80087b4:	4651      	mov	r1, sl
 80087b6:	2300      	movs	r3, #0
 80087b8:	220a      	movs	r2, #10
 80087ba:	4620      	mov	r0, r4
 80087bc:	f000 f9a4 	bl	8008b08 <__multadd>
 80087c0:	4682      	mov	sl, r0
 80087c2:	e7ea      	b.n	800879a <_dtoa_r+0xb3a>
 80087c4:	9b01      	ldr	r3, [sp, #4]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	bfc8      	it	gt
 80087ca:	461d      	movgt	r5, r3
 80087cc:	9b00      	ldr	r3, [sp, #0]
 80087ce:	bfd8      	it	le
 80087d0:	2501      	movle	r5, #1
 80087d2:	441d      	add	r5, r3
 80087d4:	f04f 0800 	mov.w	r8, #0
 80087d8:	4651      	mov	r1, sl
 80087da:	2201      	movs	r2, #1
 80087dc:	4620      	mov	r0, r4
 80087de:	f000 fb41 	bl	8008e64 <__lshift>
 80087e2:	4631      	mov	r1, r6
 80087e4:	4682      	mov	sl, r0
 80087e6:	f000 fba9 	bl	8008f3c <__mcmp>
 80087ea:	2800      	cmp	r0, #0
 80087ec:	dc96      	bgt.n	800871c <_dtoa_r+0xabc>
 80087ee:	d102      	bne.n	80087f6 <_dtoa_r+0xb96>
 80087f0:	f019 0f01 	tst.w	r9, #1
 80087f4:	d192      	bne.n	800871c <_dtoa_r+0xabc>
 80087f6:	462b      	mov	r3, r5
 80087f8:	461d      	mov	r5, r3
 80087fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087fe:	2a30      	cmp	r2, #48	; 0x30
 8008800:	d0fa      	beq.n	80087f8 <_dtoa_r+0xb98>
 8008802:	e6dd      	b.n	80085c0 <_dtoa_r+0x960>
 8008804:	9a00      	ldr	r2, [sp, #0]
 8008806:	429a      	cmp	r2, r3
 8008808:	d189      	bne.n	800871e <_dtoa_r+0xabe>
 800880a:	f10b 0b01 	add.w	fp, fp, #1
 800880e:	2331      	movs	r3, #49	; 0x31
 8008810:	e796      	b.n	8008740 <_dtoa_r+0xae0>
 8008812:	4b0a      	ldr	r3, [pc, #40]	; (800883c <_dtoa_r+0xbdc>)
 8008814:	f7ff ba99 	b.w	8007d4a <_dtoa_r+0xea>
 8008818:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800881a:	2b00      	cmp	r3, #0
 800881c:	f47f aa6d 	bne.w	8007cfa <_dtoa_r+0x9a>
 8008820:	4b07      	ldr	r3, [pc, #28]	; (8008840 <_dtoa_r+0xbe0>)
 8008822:	f7ff ba92 	b.w	8007d4a <_dtoa_r+0xea>
 8008826:	9b01      	ldr	r3, [sp, #4]
 8008828:	2b00      	cmp	r3, #0
 800882a:	dcb5      	bgt.n	8008798 <_dtoa_r+0xb38>
 800882c:	9b07      	ldr	r3, [sp, #28]
 800882e:	2b02      	cmp	r3, #2
 8008830:	f73f aeb1 	bgt.w	8008596 <_dtoa_r+0x936>
 8008834:	e7b0      	b.n	8008798 <_dtoa_r+0xb38>
 8008836:	bf00      	nop
 8008838:	08009d60 	.word	0x08009d60
 800883c:	08009cc0 	.word	0x08009cc0
 8008840:	08009ce4 	.word	0x08009ce4

08008844 <_free_r>:
 8008844:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008846:	2900      	cmp	r1, #0
 8008848:	d044      	beq.n	80088d4 <_free_r+0x90>
 800884a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800884e:	9001      	str	r0, [sp, #4]
 8008850:	2b00      	cmp	r3, #0
 8008852:	f1a1 0404 	sub.w	r4, r1, #4
 8008856:	bfb8      	it	lt
 8008858:	18e4      	addlt	r4, r4, r3
 800885a:	f000 f8e7 	bl	8008a2c <__malloc_lock>
 800885e:	4a1e      	ldr	r2, [pc, #120]	; (80088d8 <_free_r+0x94>)
 8008860:	9801      	ldr	r0, [sp, #4]
 8008862:	6813      	ldr	r3, [r2, #0]
 8008864:	b933      	cbnz	r3, 8008874 <_free_r+0x30>
 8008866:	6063      	str	r3, [r4, #4]
 8008868:	6014      	str	r4, [r2, #0]
 800886a:	b003      	add	sp, #12
 800886c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008870:	f000 b8e2 	b.w	8008a38 <__malloc_unlock>
 8008874:	42a3      	cmp	r3, r4
 8008876:	d908      	bls.n	800888a <_free_r+0x46>
 8008878:	6825      	ldr	r5, [r4, #0]
 800887a:	1961      	adds	r1, r4, r5
 800887c:	428b      	cmp	r3, r1
 800887e:	bf01      	itttt	eq
 8008880:	6819      	ldreq	r1, [r3, #0]
 8008882:	685b      	ldreq	r3, [r3, #4]
 8008884:	1949      	addeq	r1, r1, r5
 8008886:	6021      	streq	r1, [r4, #0]
 8008888:	e7ed      	b.n	8008866 <_free_r+0x22>
 800888a:	461a      	mov	r2, r3
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	b10b      	cbz	r3, 8008894 <_free_r+0x50>
 8008890:	42a3      	cmp	r3, r4
 8008892:	d9fa      	bls.n	800888a <_free_r+0x46>
 8008894:	6811      	ldr	r1, [r2, #0]
 8008896:	1855      	adds	r5, r2, r1
 8008898:	42a5      	cmp	r5, r4
 800889a:	d10b      	bne.n	80088b4 <_free_r+0x70>
 800889c:	6824      	ldr	r4, [r4, #0]
 800889e:	4421      	add	r1, r4
 80088a0:	1854      	adds	r4, r2, r1
 80088a2:	42a3      	cmp	r3, r4
 80088a4:	6011      	str	r1, [r2, #0]
 80088a6:	d1e0      	bne.n	800886a <_free_r+0x26>
 80088a8:	681c      	ldr	r4, [r3, #0]
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	6053      	str	r3, [r2, #4]
 80088ae:	440c      	add	r4, r1
 80088b0:	6014      	str	r4, [r2, #0]
 80088b2:	e7da      	b.n	800886a <_free_r+0x26>
 80088b4:	d902      	bls.n	80088bc <_free_r+0x78>
 80088b6:	230c      	movs	r3, #12
 80088b8:	6003      	str	r3, [r0, #0]
 80088ba:	e7d6      	b.n	800886a <_free_r+0x26>
 80088bc:	6825      	ldr	r5, [r4, #0]
 80088be:	1961      	adds	r1, r4, r5
 80088c0:	428b      	cmp	r3, r1
 80088c2:	bf04      	itt	eq
 80088c4:	6819      	ldreq	r1, [r3, #0]
 80088c6:	685b      	ldreq	r3, [r3, #4]
 80088c8:	6063      	str	r3, [r4, #4]
 80088ca:	bf04      	itt	eq
 80088cc:	1949      	addeq	r1, r1, r5
 80088ce:	6021      	streq	r1, [r4, #0]
 80088d0:	6054      	str	r4, [r2, #4]
 80088d2:	e7ca      	b.n	800886a <_free_r+0x26>
 80088d4:	b003      	add	sp, #12
 80088d6:	bd30      	pop	{r4, r5, pc}
 80088d8:	20000e78 	.word	0x20000e78

080088dc <malloc>:
 80088dc:	4b02      	ldr	r3, [pc, #8]	; (80088e8 <malloc+0xc>)
 80088de:	4601      	mov	r1, r0
 80088e0:	6818      	ldr	r0, [r3, #0]
 80088e2:	f000 b823 	b.w	800892c <_malloc_r>
 80088e6:	bf00      	nop
 80088e8:	200000c4 	.word	0x200000c4

080088ec <sbrk_aligned>:
 80088ec:	b570      	push	{r4, r5, r6, lr}
 80088ee:	4e0e      	ldr	r6, [pc, #56]	; (8008928 <sbrk_aligned+0x3c>)
 80088f0:	460c      	mov	r4, r1
 80088f2:	6831      	ldr	r1, [r6, #0]
 80088f4:	4605      	mov	r5, r0
 80088f6:	b911      	cbnz	r1, 80088fe <sbrk_aligned+0x12>
 80088f8:	f000 fe40 	bl	800957c <_sbrk_r>
 80088fc:	6030      	str	r0, [r6, #0]
 80088fe:	4621      	mov	r1, r4
 8008900:	4628      	mov	r0, r5
 8008902:	f000 fe3b 	bl	800957c <_sbrk_r>
 8008906:	1c43      	adds	r3, r0, #1
 8008908:	d00a      	beq.n	8008920 <sbrk_aligned+0x34>
 800890a:	1cc4      	adds	r4, r0, #3
 800890c:	f024 0403 	bic.w	r4, r4, #3
 8008910:	42a0      	cmp	r0, r4
 8008912:	d007      	beq.n	8008924 <sbrk_aligned+0x38>
 8008914:	1a21      	subs	r1, r4, r0
 8008916:	4628      	mov	r0, r5
 8008918:	f000 fe30 	bl	800957c <_sbrk_r>
 800891c:	3001      	adds	r0, #1
 800891e:	d101      	bne.n	8008924 <sbrk_aligned+0x38>
 8008920:	f04f 34ff 	mov.w	r4, #4294967295
 8008924:	4620      	mov	r0, r4
 8008926:	bd70      	pop	{r4, r5, r6, pc}
 8008928:	20000e7c 	.word	0x20000e7c

0800892c <_malloc_r>:
 800892c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008930:	1ccd      	adds	r5, r1, #3
 8008932:	f025 0503 	bic.w	r5, r5, #3
 8008936:	3508      	adds	r5, #8
 8008938:	2d0c      	cmp	r5, #12
 800893a:	bf38      	it	cc
 800893c:	250c      	movcc	r5, #12
 800893e:	2d00      	cmp	r5, #0
 8008940:	4607      	mov	r7, r0
 8008942:	db01      	blt.n	8008948 <_malloc_r+0x1c>
 8008944:	42a9      	cmp	r1, r5
 8008946:	d905      	bls.n	8008954 <_malloc_r+0x28>
 8008948:	230c      	movs	r3, #12
 800894a:	603b      	str	r3, [r7, #0]
 800894c:	2600      	movs	r6, #0
 800894e:	4630      	mov	r0, r6
 8008950:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008954:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008a28 <_malloc_r+0xfc>
 8008958:	f000 f868 	bl	8008a2c <__malloc_lock>
 800895c:	f8d8 3000 	ldr.w	r3, [r8]
 8008960:	461c      	mov	r4, r3
 8008962:	bb5c      	cbnz	r4, 80089bc <_malloc_r+0x90>
 8008964:	4629      	mov	r1, r5
 8008966:	4638      	mov	r0, r7
 8008968:	f7ff ffc0 	bl	80088ec <sbrk_aligned>
 800896c:	1c43      	adds	r3, r0, #1
 800896e:	4604      	mov	r4, r0
 8008970:	d155      	bne.n	8008a1e <_malloc_r+0xf2>
 8008972:	f8d8 4000 	ldr.w	r4, [r8]
 8008976:	4626      	mov	r6, r4
 8008978:	2e00      	cmp	r6, #0
 800897a:	d145      	bne.n	8008a08 <_malloc_r+0xdc>
 800897c:	2c00      	cmp	r4, #0
 800897e:	d048      	beq.n	8008a12 <_malloc_r+0xe6>
 8008980:	6823      	ldr	r3, [r4, #0]
 8008982:	4631      	mov	r1, r6
 8008984:	4638      	mov	r0, r7
 8008986:	eb04 0903 	add.w	r9, r4, r3
 800898a:	f000 fdf7 	bl	800957c <_sbrk_r>
 800898e:	4581      	cmp	r9, r0
 8008990:	d13f      	bne.n	8008a12 <_malloc_r+0xe6>
 8008992:	6821      	ldr	r1, [r4, #0]
 8008994:	1a6d      	subs	r5, r5, r1
 8008996:	4629      	mov	r1, r5
 8008998:	4638      	mov	r0, r7
 800899a:	f7ff ffa7 	bl	80088ec <sbrk_aligned>
 800899e:	3001      	adds	r0, #1
 80089a0:	d037      	beq.n	8008a12 <_malloc_r+0xe6>
 80089a2:	6823      	ldr	r3, [r4, #0]
 80089a4:	442b      	add	r3, r5
 80089a6:	6023      	str	r3, [r4, #0]
 80089a8:	f8d8 3000 	ldr.w	r3, [r8]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d038      	beq.n	8008a22 <_malloc_r+0xf6>
 80089b0:	685a      	ldr	r2, [r3, #4]
 80089b2:	42a2      	cmp	r2, r4
 80089b4:	d12b      	bne.n	8008a0e <_malloc_r+0xe2>
 80089b6:	2200      	movs	r2, #0
 80089b8:	605a      	str	r2, [r3, #4]
 80089ba:	e00f      	b.n	80089dc <_malloc_r+0xb0>
 80089bc:	6822      	ldr	r2, [r4, #0]
 80089be:	1b52      	subs	r2, r2, r5
 80089c0:	d41f      	bmi.n	8008a02 <_malloc_r+0xd6>
 80089c2:	2a0b      	cmp	r2, #11
 80089c4:	d917      	bls.n	80089f6 <_malloc_r+0xca>
 80089c6:	1961      	adds	r1, r4, r5
 80089c8:	42a3      	cmp	r3, r4
 80089ca:	6025      	str	r5, [r4, #0]
 80089cc:	bf18      	it	ne
 80089ce:	6059      	strne	r1, [r3, #4]
 80089d0:	6863      	ldr	r3, [r4, #4]
 80089d2:	bf08      	it	eq
 80089d4:	f8c8 1000 	streq.w	r1, [r8]
 80089d8:	5162      	str	r2, [r4, r5]
 80089da:	604b      	str	r3, [r1, #4]
 80089dc:	4638      	mov	r0, r7
 80089de:	f104 060b 	add.w	r6, r4, #11
 80089e2:	f000 f829 	bl	8008a38 <__malloc_unlock>
 80089e6:	f026 0607 	bic.w	r6, r6, #7
 80089ea:	1d23      	adds	r3, r4, #4
 80089ec:	1af2      	subs	r2, r6, r3
 80089ee:	d0ae      	beq.n	800894e <_malloc_r+0x22>
 80089f0:	1b9b      	subs	r3, r3, r6
 80089f2:	50a3      	str	r3, [r4, r2]
 80089f4:	e7ab      	b.n	800894e <_malloc_r+0x22>
 80089f6:	42a3      	cmp	r3, r4
 80089f8:	6862      	ldr	r2, [r4, #4]
 80089fa:	d1dd      	bne.n	80089b8 <_malloc_r+0x8c>
 80089fc:	f8c8 2000 	str.w	r2, [r8]
 8008a00:	e7ec      	b.n	80089dc <_malloc_r+0xb0>
 8008a02:	4623      	mov	r3, r4
 8008a04:	6864      	ldr	r4, [r4, #4]
 8008a06:	e7ac      	b.n	8008962 <_malloc_r+0x36>
 8008a08:	4634      	mov	r4, r6
 8008a0a:	6876      	ldr	r6, [r6, #4]
 8008a0c:	e7b4      	b.n	8008978 <_malloc_r+0x4c>
 8008a0e:	4613      	mov	r3, r2
 8008a10:	e7cc      	b.n	80089ac <_malloc_r+0x80>
 8008a12:	230c      	movs	r3, #12
 8008a14:	603b      	str	r3, [r7, #0]
 8008a16:	4638      	mov	r0, r7
 8008a18:	f000 f80e 	bl	8008a38 <__malloc_unlock>
 8008a1c:	e797      	b.n	800894e <_malloc_r+0x22>
 8008a1e:	6025      	str	r5, [r4, #0]
 8008a20:	e7dc      	b.n	80089dc <_malloc_r+0xb0>
 8008a22:	605b      	str	r3, [r3, #4]
 8008a24:	deff      	udf	#255	; 0xff
 8008a26:	bf00      	nop
 8008a28:	20000e78 	.word	0x20000e78

08008a2c <__malloc_lock>:
 8008a2c:	4801      	ldr	r0, [pc, #4]	; (8008a34 <__malloc_lock+0x8>)
 8008a2e:	f7ff b87c 	b.w	8007b2a <__retarget_lock_acquire_recursive>
 8008a32:	bf00      	nop
 8008a34:	20000e74 	.word	0x20000e74

08008a38 <__malloc_unlock>:
 8008a38:	4801      	ldr	r0, [pc, #4]	; (8008a40 <__malloc_unlock+0x8>)
 8008a3a:	f7ff b877 	b.w	8007b2c <__retarget_lock_release_recursive>
 8008a3e:	bf00      	nop
 8008a40:	20000e74 	.word	0x20000e74

08008a44 <_Balloc>:
 8008a44:	b570      	push	{r4, r5, r6, lr}
 8008a46:	69c6      	ldr	r6, [r0, #28]
 8008a48:	4604      	mov	r4, r0
 8008a4a:	460d      	mov	r5, r1
 8008a4c:	b976      	cbnz	r6, 8008a6c <_Balloc+0x28>
 8008a4e:	2010      	movs	r0, #16
 8008a50:	f7ff ff44 	bl	80088dc <malloc>
 8008a54:	4602      	mov	r2, r0
 8008a56:	61e0      	str	r0, [r4, #28]
 8008a58:	b920      	cbnz	r0, 8008a64 <_Balloc+0x20>
 8008a5a:	4b18      	ldr	r3, [pc, #96]	; (8008abc <_Balloc+0x78>)
 8008a5c:	4818      	ldr	r0, [pc, #96]	; (8008ac0 <_Balloc+0x7c>)
 8008a5e:	216b      	movs	r1, #107	; 0x6b
 8008a60:	f000 fd9c 	bl	800959c <__assert_func>
 8008a64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a68:	6006      	str	r6, [r0, #0]
 8008a6a:	60c6      	str	r6, [r0, #12]
 8008a6c:	69e6      	ldr	r6, [r4, #28]
 8008a6e:	68f3      	ldr	r3, [r6, #12]
 8008a70:	b183      	cbz	r3, 8008a94 <_Balloc+0x50>
 8008a72:	69e3      	ldr	r3, [r4, #28]
 8008a74:	68db      	ldr	r3, [r3, #12]
 8008a76:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008a7a:	b9b8      	cbnz	r0, 8008aac <_Balloc+0x68>
 8008a7c:	2101      	movs	r1, #1
 8008a7e:	fa01 f605 	lsl.w	r6, r1, r5
 8008a82:	1d72      	adds	r2, r6, #5
 8008a84:	0092      	lsls	r2, r2, #2
 8008a86:	4620      	mov	r0, r4
 8008a88:	f000 fda6 	bl	80095d8 <_calloc_r>
 8008a8c:	b160      	cbz	r0, 8008aa8 <_Balloc+0x64>
 8008a8e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008a92:	e00e      	b.n	8008ab2 <_Balloc+0x6e>
 8008a94:	2221      	movs	r2, #33	; 0x21
 8008a96:	2104      	movs	r1, #4
 8008a98:	4620      	mov	r0, r4
 8008a9a:	f000 fd9d 	bl	80095d8 <_calloc_r>
 8008a9e:	69e3      	ldr	r3, [r4, #28]
 8008aa0:	60f0      	str	r0, [r6, #12]
 8008aa2:	68db      	ldr	r3, [r3, #12]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d1e4      	bne.n	8008a72 <_Balloc+0x2e>
 8008aa8:	2000      	movs	r0, #0
 8008aaa:	bd70      	pop	{r4, r5, r6, pc}
 8008aac:	6802      	ldr	r2, [r0, #0]
 8008aae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008ab8:	e7f7      	b.n	8008aaa <_Balloc+0x66>
 8008aba:	bf00      	nop
 8008abc:	08009cf1 	.word	0x08009cf1
 8008ac0:	08009d71 	.word	0x08009d71

08008ac4 <_Bfree>:
 8008ac4:	b570      	push	{r4, r5, r6, lr}
 8008ac6:	69c6      	ldr	r6, [r0, #28]
 8008ac8:	4605      	mov	r5, r0
 8008aca:	460c      	mov	r4, r1
 8008acc:	b976      	cbnz	r6, 8008aec <_Bfree+0x28>
 8008ace:	2010      	movs	r0, #16
 8008ad0:	f7ff ff04 	bl	80088dc <malloc>
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	61e8      	str	r0, [r5, #28]
 8008ad8:	b920      	cbnz	r0, 8008ae4 <_Bfree+0x20>
 8008ada:	4b09      	ldr	r3, [pc, #36]	; (8008b00 <_Bfree+0x3c>)
 8008adc:	4809      	ldr	r0, [pc, #36]	; (8008b04 <_Bfree+0x40>)
 8008ade:	218f      	movs	r1, #143	; 0x8f
 8008ae0:	f000 fd5c 	bl	800959c <__assert_func>
 8008ae4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ae8:	6006      	str	r6, [r0, #0]
 8008aea:	60c6      	str	r6, [r0, #12]
 8008aec:	b13c      	cbz	r4, 8008afe <_Bfree+0x3a>
 8008aee:	69eb      	ldr	r3, [r5, #28]
 8008af0:	6862      	ldr	r2, [r4, #4]
 8008af2:	68db      	ldr	r3, [r3, #12]
 8008af4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008af8:	6021      	str	r1, [r4, #0]
 8008afa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008afe:	bd70      	pop	{r4, r5, r6, pc}
 8008b00:	08009cf1 	.word	0x08009cf1
 8008b04:	08009d71 	.word	0x08009d71

08008b08 <__multadd>:
 8008b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b0c:	690d      	ldr	r5, [r1, #16]
 8008b0e:	4607      	mov	r7, r0
 8008b10:	460c      	mov	r4, r1
 8008b12:	461e      	mov	r6, r3
 8008b14:	f101 0c14 	add.w	ip, r1, #20
 8008b18:	2000      	movs	r0, #0
 8008b1a:	f8dc 3000 	ldr.w	r3, [ip]
 8008b1e:	b299      	uxth	r1, r3
 8008b20:	fb02 6101 	mla	r1, r2, r1, r6
 8008b24:	0c1e      	lsrs	r6, r3, #16
 8008b26:	0c0b      	lsrs	r3, r1, #16
 8008b28:	fb02 3306 	mla	r3, r2, r6, r3
 8008b2c:	b289      	uxth	r1, r1
 8008b2e:	3001      	adds	r0, #1
 8008b30:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008b34:	4285      	cmp	r5, r0
 8008b36:	f84c 1b04 	str.w	r1, [ip], #4
 8008b3a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008b3e:	dcec      	bgt.n	8008b1a <__multadd+0x12>
 8008b40:	b30e      	cbz	r6, 8008b86 <__multadd+0x7e>
 8008b42:	68a3      	ldr	r3, [r4, #8]
 8008b44:	42ab      	cmp	r3, r5
 8008b46:	dc19      	bgt.n	8008b7c <__multadd+0x74>
 8008b48:	6861      	ldr	r1, [r4, #4]
 8008b4a:	4638      	mov	r0, r7
 8008b4c:	3101      	adds	r1, #1
 8008b4e:	f7ff ff79 	bl	8008a44 <_Balloc>
 8008b52:	4680      	mov	r8, r0
 8008b54:	b928      	cbnz	r0, 8008b62 <__multadd+0x5a>
 8008b56:	4602      	mov	r2, r0
 8008b58:	4b0c      	ldr	r3, [pc, #48]	; (8008b8c <__multadd+0x84>)
 8008b5a:	480d      	ldr	r0, [pc, #52]	; (8008b90 <__multadd+0x88>)
 8008b5c:	21ba      	movs	r1, #186	; 0xba
 8008b5e:	f000 fd1d 	bl	800959c <__assert_func>
 8008b62:	6922      	ldr	r2, [r4, #16]
 8008b64:	3202      	adds	r2, #2
 8008b66:	f104 010c 	add.w	r1, r4, #12
 8008b6a:	0092      	lsls	r2, r2, #2
 8008b6c:	300c      	adds	r0, #12
 8008b6e:	f7fe ffde 	bl	8007b2e <memcpy>
 8008b72:	4621      	mov	r1, r4
 8008b74:	4638      	mov	r0, r7
 8008b76:	f7ff ffa5 	bl	8008ac4 <_Bfree>
 8008b7a:	4644      	mov	r4, r8
 8008b7c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008b80:	3501      	adds	r5, #1
 8008b82:	615e      	str	r6, [r3, #20]
 8008b84:	6125      	str	r5, [r4, #16]
 8008b86:	4620      	mov	r0, r4
 8008b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b8c:	08009d60 	.word	0x08009d60
 8008b90:	08009d71 	.word	0x08009d71

08008b94 <__hi0bits>:
 8008b94:	0c03      	lsrs	r3, r0, #16
 8008b96:	041b      	lsls	r3, r3, #16
 8008b98:	b9d3      	cbnz	r3, 8008bd0 <__hi0bits+0x3c>
 8008b9a:	0400      	lsls	r0, r0, #16
 8008b9c:	2310      	movs	r3, #16
 8008b9e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008ba2:	bf04      	itt	eq
 8008ba4:	0200      	lsleq	r0, r0, #8
 8008ba6:	3308      	addeq	r3, #8
 8008ba8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008bac:	bf04      	itt	eq
 8008bae:	0100      	lsleq	r0, r0, #4
 8008bb0:	3304      	addeq	r3, #4
 8008bb2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008bb6:	bf04      	itt	eq
 8008bb8:	0080      	lsleq	r0, r0, #2
 8008bba:	3302      	addeq	r3, #2
 8008bbc:	2800      	cmp	r0, #0
 8008bbe:	db05      	blt.n	8008bcc <__hi0bits+0x38>
 8008bc0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008bc4:	f103 0301 	add.w	r3, r3, #1
 8008bc8:	bf08      	it	eq
 8008bca:	2320      	moveq	r3, #32
 8008bcc:	4618      	mov	r0, r3
 8008bce:	4770      	bx	lr
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	e7e4      	b.n	8008b9e <__hi0bits+0xa>

08008bd4 <__lo0bits>:
 8008bd4:	6803      	ldr	r3, [r0, #0]
 8008bd6:	f013 0207 	ands.w	r2, r3, #7
 8008bda:	d00c      	beq.n	8008bf6 <__lo0bits+0x22>
 8008bdc:	07d9      	lsls	r1, r3, #31
 8008bde:	d422      	bmi.n	8008c26 <__lo0bits+0x52>
 8008be0:	079a      	lsls	r2, r3, #30
 8008be2:	bf49      	itett	mi
 8008be4:	085b      	lsrmi	r3, r3, #1
 8008be6:	089b      	lsrpl	r3, r3, #2
 8008be8:	6003      	strmi	r3, [r0, #0]
 8008bea:	2201      	movmi	r2, #1
 8008bec:	bf5c      	itt	pl
 8008bee:	6003      	strpl	r3, [r0, #0]
 8008bf0:	2202      	movpl	r2, #2
 8008bf2:	4610      	mov	r0, r2
 8008bf4:	4770      	bx	lr
 8008bf6:	b299      	uxth	r1, r3
 8008bf8:	b909      	cbnz	r1, 8008bfe <__lo0bits+0x2a>
 8008bfa:	0c1b      	lsrs	r3, r3, #16
 8008bfc:	2210      	movs	r2, #16
 8008bfe:	b2d9      	uxtb	r1, r3
 8008c00:	b909      	cbnz	r1, 8008c06 <__lo0bits+0x32>
 8008c02:	3208      	adds	r2, #8
 8008c04:	0a1b      	lsrs	r3, r3, #8
 8008c06:	0719      	lsls	r1, r3, #28
 8008c08:	bf04      	itt	eq
 8008c0a:	091b      	lsreq	r3, r3, #4
 8008c0c:	3204      	addeq	r2, #4
 8008c0e:	0799      	lsls	r1, r3, #30
 8008c10:	bf04      	itt	eq
 8008c12:	089b      	lsreq	r3, r3, #2
 8008c14:	3202      	addeq	r2, #2
 8008c16:	07d9      	lsls	r1, r3, #31
 8008c18:	d403      	bmi.n	8008c22 <__lo0bits+0x4e>
 8008c1a:	085b      	lsrs	r3, r3, #1
 8008c1c:	f102 0201 	add.w	r2, r2, #1
 8008c20:	d003      	beq.n	8008c2a <__lo0bits+0x56>
 8008c22:	6003      	str	r3, [r0, #0]
 8008c24:	e7e5      	b.n	8008bf2 <__lo0bits+0x1e>
 8008c26:	2200      	movs	r2, #0
 8008c28:	e7e3      	b.n	8008bf2 <__lo0bits+0x1e>
 8008c2a:	2220      	movs	r2, #32
 8008c2c:	e7e1      	b.n	8008bf2 <__lo0bits+0x1e>
	...

08008c30 <__i2b>:
 8008c30:	b510      	push	{r4, lr}
 8008c32:	460c      	mov	r4, r1
 8008c34:	2101      	movs	r1, #1
 8008c36:	f7ff ff05 	bl	8008a44 <_Balloc>
 8008c3a:	4602      	mov	r2, r0
 8008c3c:	b928      	cbnz	r0, 8008c4a <__i2b+0x1a>
 8008c3e:	4b05      	ldr	r3, [pc, #20]	; (8008c54 <__i2b+0x24>)
 8008c40:	4805      	ldr	r0, [pc, #20]	; (8008c58 <__i2b+0x28>)
 8008c42:	f240 1145 	movw	r1, #325	; 0x145
 8008c46:	f000 fca9 	bl	800959c <__assert_func>
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	6144      	str	r4, [r0, #20]
 8008c4e:	6103      	str	r3, [r0, #16]
 8008c50:	bd10      	pop	{r4, pc}
 8008c52:	bf00      	nop
 8008c54:	08009d60 	.word	0x08009d60
 8008c58:	08009d71 	.word	0x08009d71

08008c5c <__multiply>:
 8008c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c60:	4691      	mov	r9, r2
 8008c62:	690a      	ldr	r2, [r1, #16]
 8008c64:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	bfb8      	it	lt
 8008c6c:	460b      	movlt	r3, r1
 8008c6e:	460c      	mov	r4, r1
 8008c70:	bfbc      	itt	lt
 8008c72:	464c      	movlt	r4, r9
 8008c74:	4699      	movlt	r9, r3
 8008c76:	6927      	ldr	r7, [r4, #16]
 8008c78:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008c7c:	68a3      	ldr	r3, [r4, #8]
 8008c7e:	6861      	ldr	r1, [r4, #4]
 8008c80:	eb07 060a 	add.w	r6, r7, sl
 8008c84:	42b3      	cmp	r3, r6
 8008c86:	b085      	sub	sp, #20
 8008c88:	bfb8      	it	lt
 8008c8a:	3101      	addlt	r1, #1
 8008c8c:	f7ff feda 	bl	8008a44 <_Balloc>
 8008c90:	b930      	cbnz	r0, 8008ca0 <__multiply+0x44>
 8008c92:	4602      	mov	r2, r0
 8008c94:	4b44      	ldr	r3, [pc, #272]	; (8008da8 <__multiply+0x14c>)
 8008c96:	4845      	ldr	r0, [pc, #276]	; (8008dac <__multiply+0x150>)
 8008c98:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008c9c:	f000 fc7e 	bl	800959c <__assert_func>
 8008ca0:	f100 0514 	add.w	r5, r0, #20
 8008ca4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008ca8:	462b      	mov	r3, r5
 8008caa:	2200      	movs	r2, #0
 8008cac:	4543      	cmp	r3, r8
 8008cae:	d321      	bcc.n	8008cf4 <__multiply+0x98>
 8008cb0:	f104 0314 	add.w	r3, r4, #20
 8008cb4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008cb8:	f109 0314 	add.w	r3, r9, #20
 8008cbc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008cc0:	9202      	str	r2, [sp, #8]
 8008cc2:	1b3a      	subs	r2, r7, r4
 8008cc4:	3a15      	subs	r2, #21
 8008cc6:	f022 0203 	bic.w	r2, r2, #3
 8008cca:	3204      	adds	r2, #4
 8008ccc:	f104 0115 	add.w	r1, r4, #21
 8008cd0:	428f      	cmp	r7, r1
 8008cd2:	bf38      	it	cc
 8008cd4:	2204      	movcc	r2, #4
 8008cd6:	9201      	str	r2, [sp, #4]
 8008cd8:	9a02      	ldr	r2, [sp, #8]
 8008cda:	9303      	str	r3, [sp, #12]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d80c      	bhi.n	8008cfa <__multiply+0x9e>
 8008ce0:	2e00      	cmp	r6, #0
 8008ce2:	dd03      	ble.n	8008cec <__multiply+0x90>
 8008ce4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d05b      	beq.n	8008da4 <__multiply+0x148>
 8008cec:	6106      	str	r6, [r0, #16]
 8008cee:	b005      	add	sp, #20
 8008cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cf4:	f843 2b04 	str.w	r2, [r3], #4
 8008cf8:	e7d8      	b.n	8008cac <__multiply+0x50>
 8008cfa:	f8b3 a000 	ldrh.w	sl, [r3]
 8008cfe:	f1ba 0f00 	cmp.w	sl, #0
 8008d02:	d024      	beq.n	8008d4e <__multiply+0xf2>
 8008d04:	f104 0e14 	add.w	lr, r4, #20
 8008d08:	46a9      	mov	r9, r5
 8008d0a:	f04f 0c00 	mov.w	ip, #0
 8008d0e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008d12:	f8d9 1000 	ldr.w	r1, [r9]
 8008d16:	fa1f fb82 	uxth.w	fp, r2
 8008d1a:	b289      	uxth	r1, r1
 8008d1c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008d20:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008d24:	f8d9 2000 	ldr.w	r2, [r9]
 8008d28:	4461      	add	r1, ip
 8008d2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008d2e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008d32:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008d36:	b289      	uxth	r1, r1
 8008d38:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008d3c:	4577      	cmp	r7, lr
 8008d3e:	f849 1b04 	str.w	r1, [r9], #4
 8008d42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008d46:	d8e2      	bhi.n	8008d0e <__multiply+0xb2>
 8008d48:	9a01      	ldr	r2, [sp, #4]
 8008d4a:	f845 c002 	str.w	ip, [r5, r2]
 8008d4e:	9a03      	ldr	r2, [sp, #12]
 8008d50:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008d54:	3304      	adds	r3, #4
 8008d56:	f1b9 0f00 	cmp.w	r9, #0
 8008d5a:	d021      	beq.n	8008da0 <__multiply+0x144>
 8008d5c:	6829      	ldr	r1, [r5, #0]
 8008d5e:	f104 0c14 	add.w	ip, r4, #20
 8008d62:	46ae      	mov	lr, r5
 8008d64:	f04f 0a00 	mov.w	sl, #0
 8008d68:	f8bc b000 	ldrh.w	fp, [ip]
 8008d6c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008d70:	fb09 220b 	mla	r2, r9, fp, r2
 8008d74:	4452      	add	r2, sl
 8008d76:	b289      	uxth	r1, r1
 8008d78:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008d7c:	f84e 1b04 	str.w	r1, [lr], #4
 8008d80:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008d84:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008d88:	f8be 1000 	ldrh.w	r1, [lr]
 8008d8c:	fb09 110a 	mla	r1, r9, sl, r1
 8008d90:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008d94:	4567      	cmp	r7, ip
 8008d96:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008d9a:	d8e5      	bhi.n	8008d68 <__multiply+0x10c>
 8008d9c:	9a01      	ldr	r2, [sp, #4]
 8008d9e:	50a9      	str	r1, [r5, r2]
 8008da0:	3504      	adds	r5, #4
 8008da2:	e799      	b.n	8008cd8 <__multiply+0x7c>
 8008da4:	3e01      	subs	r6, #1
 8008da6:	e79b      	b.n	8008ce0 <__multiply+0x84>
 8008da8:	08009d60 	.word	0x08009d60
 8008dac:	08009d71 	.word	0x08009d71

08008db0 <__pow5mult>:
 8008db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008db4:	4615      	mov	r5, r2
 8008db6:	f012 0203 	ands.w	r2, r2, #3
 8008dba:	4606      	mov	r6, r0
 8008dbc:	460f      	mov	r7, r1
 8008dbe:	d007      	beq.n	8008dd0 <__pow5mult+0x20>
 8008dc0:	4c25      	ldr	r4, [pc, #148]	; (8008e58 <__pow5mult+0xa8>)
 8008dc2:	3a01      	subs	r2, #1
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008dca:	f7ff fe9d 	bl	8008b08 <__multadd>
 8008dce:	4607      	mov	r7, r0
 8008dd0:	10ad      	asrs	r5, r5, #2
 8008dd2:	d03d      	beq.n	8008e50 <__pow5mult+0xa0>
 8008dd4:	69f4      	ldr	r4, [r6, #28]
 8008dd6:	b97c      	cbnz	r4, 8008df8 <__pow5mult+0x48>
 8008dd8:	2010      	movs	r0, #16
 8008dda:	f7ff fd7f 	bl	80088dc <malloc>
 8008dde:	4602      	mov	r2, r0
 8008de0:	61f0      	str	r0, [r6, #28]
 8008de2:	b928      	cbnz	r0, 8008df0 <__pow5mult+0x40>
 8008de4:	4b1d      	ldr	r3, [pc, #116]	; (8008e5c <__pow5mult+0xac>)
 8008de6:	481e      	ldr	r0, [pc, #120]	; (8008e60 <__pow5mult+0xb0>)
 8008de8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008dec:	f000 fbd6 	bl	800959c <__assert_func>
 8008df0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008df4:	6004      	str	r4, [r0, #0]
 8008df6:	60c4      	str	r4, [r0, #12]
 8008df8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008dfc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008e00:	b94c      	cbnz	r4, 8008e16 <__pow5mult+0x66>
 8008e02:	f240 2171 	movw	r1, #625	; 0x271
 8008e06:	4630      	mov	r0, r6
 8008e08:	f7ff ff12 	bl	8008c30 <__i2b>
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008e12:	4604      	mov	r4, r0
 8008e14:	6003      	str	r3, [r0, #0]
 8008e16:	f04f 0900 	mov.w	r9, #0
 8008e1a:	07eb      	lsls	r3, r5, #31
 8008e1c:	d50a      	bpl.n	8008e34 <__pow5mult+0x84>
 8008e1e:	4639      	mov	r1, r7
 8008e20:	4622      	mov	r2, r4
 8008e22:	4630      	mov	r0, r6
 8008e24:	f7ff ff1a 	bl	8008c5c <__multiply>
 8008e28:	4639      	mov	r1, r7
 8008e2a:	4680      	mov	r8, r0
 8008e2c:	4630      	mov	r0, r6
 8008e2e:	f7ff fe49 	bl	8008ac4 <_Bfree>
 8008e32:	4647      	mov	r7, r8
 8008e34:	106d      	asrs	r5, r5, #1
 8008e36:	d00b      	beq.n	8008e50 <__pow5mult+0xa0>
 8008e38:	6820      	ldr	r0, [r4, #0]
 8008e3a:	b938      	cbnz	r0, 8008e4c <__pow5mult+0x9c>
 8008e3c:	4622      	mov	r2, r4
 8008e3e:	4621      	mov	r1, r4
 8008e40:	4630      	mov	r0, r6
 8008e42:	f7ff ff0b 	bl	8008c5c <__multiply>
 8008e46:	6020      	str	r0, [r4, #0]
 8008e48:	f8c0 9000 	str.w	r9, [r0]
 8008e4c:	4604      	mov	r4, r0
 8008e4e:	e7e4      	b.n	8008e1a <__pow5mult+0x6a>
 8008e50:	4638      	mov	r0, r7
 8008e52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e56:	bf00      	nop
 8008e58:	08009ec0 	.word	0x08009ec0
 8008e5c:	08009cf1 	.word	0x08009cf1
 8008e60:	08009d71 	.word	0x08009d71

08008e64 <__lshift>:
 8008e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e68:	460c      	mov	r4, r1
 8008e6a:	6849      	ldr	r1, [r1, #4]
 8008e6c:	6923      	ldr	r3, [r4, #16]
 8008e6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008e72:	68a3      	ldr	r3, [r4, #8]
 8008e74:	4607      	mov	r7, r0
 8008e76:	4691      	mov	r9, r2
 8008e78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008e7c:	f108 0601 	add.w	r6, r8, #1
 8008e80:	42b3      	cmp	r3, r6
 8008e82:	db0b      	blt.n	8008e9c <__lshift+0x38>
 8008e84:	4638      	mov	r0, r7
 8008e86:	f7ff fddd 	bl	8008a44 <_Balloc>
 8008e8a:	4605      	mov	r5, r0
 8008e8c:	b948      	cbnz	r0, 8008ea2 <__lshift+0x3e>
 8008e8e:	4602      	mov	r2, r0
 8008e90:	4b28      	ldr	r3, [pc, #160]	; (8008f34 <__lshift+0xd0>)
 8008e92:	4829      	ldr	r0, [pc, #164]	; (8008f38 <__lshift+0xd4>)
 8008e94:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008e98:	f000 fb80 	bl	800959c <__assert_func>
 8008e9c:	3101      	adds	r1, #1
 8008e9e:	005b      	lsls	r3, r3, #1
 8008ea0:	e7ee      	b.n	8008e80 <__lshift+0x1c>
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	f100 0114 	add.w	r1, r0, #20
 8008ea8:	f100 0210 	add.w	r2, r0, #16
 8008eac:	4618      	mov	r0, r3
 8008eae:	4553      	cmp	r3, sl
 8008eb0:	db33      	blt.n	8008f1a <__lshift+0xb6>
 8008eb2:	6920      	ldr	r0, [r4, #16]
 8008eb4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008eb8:	f104 0314 	add.w	r3, r4, #20
 8008ebc:	f019 091f 	ands.w	r9, r9, #31
 8008ec0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008ec4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008ec8:	d02b      	beq.n	8008f22 <__lshift+0xbe>
 8008eca:	f1c9 0e20 	rsb	lr, r9, #32
 8008ece:	468a      	mov	sl, r1
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	6818      	ldr	r0, [r3, #0]
 8008ed4:	fa00 f009 	lsl.w	r0, r0, r9
 8008ed8:	4310      	orrs	r0, r2
 8008eda:	f84a 0b04 	str.w	r0, [sl], #4
 8008ede:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ee2:	459c      	cmp	ip, r3
 8008ee4:	fa22 f20e 	lsr.w	r2, r2, lr
 8008ee8:	d8f3      	bhi.n	8008ed2 <__lshift+0x6e>
 8008eea:	ebac 0304 	sub.w	r3, ip, r4
 8008eee:	3b15      	subs	r3, #21
 8008ef0:	f023 0303 	bic.w	r3, r3, #3
 8008ef4:	3304      	adds	r3, #4
 8008ef6:	f104 0015 	add.w	r0, r4, #21
 8008efa:	4584      	cmp	ip, r0
 8008efc:	bf38      	it	cc
 8008efe:	2304      	movcc	r3, #4
 8008f00:	50ca      	str	r2, [r1, r3]
 8008f02:	b10a      	cbz	r2, 8008f08 <__lshift+0xa4>
 8008f04:	f108 0602 	add.w	r6, r8, #2
 8008f08:	3e01      	subs	r6, #1
 8008f0a:	4638      	mov	r0, r7
 8008f0c:	612e      	str	r6, [r5, #16]
 8008f0e:	4621      	mov	r1, r4
 8008f10:	f7ff fdd8 	bl	8008ac4 <_Bfree>
 8008f14:	4628      	mov	r0, r5
 8008f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f1a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008f1e:	3301      	adds	r3, #1
 8008f20:	e7c5      	b.n	8008eae <__lshift+0x4a>
 8008f22:	3904      	subs	r1, #4
 8008f24:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f28:	f841 2f04 	str.w	r2, [r1, #4]!
 8008f2c:	459c      	cmp	ip, r3
 8008f2e:	d8f9      	bhi.n	8008f24 <__lshift+0xc0>
 8008f30:	e7ea      	b.n	8008f08 <__lshift+0xa4>
 8008f32:	bf00      	nop
 8008f34:	08009d60 	.word	0x08009d60
 8008f38:	08009d71 	.word	0x08009d71

08008f3c <__mcmp>:
 8008f3c:	b530      	push	{r4, r5, lr}
 8008f3e:	6902      	ldr	r2, [r0, #16]
 8008f40:	690c      	ldr	r4, [r1, #16]
 8008f42:	1b12      	subs	r2, r2, r4
 8008f44:	d10e      	bne.n	8008f64 <__mcmp+0x28>
 8008f46:	f100 0314 	add.w	r3, r0, #20
 8008f4a:	3114      	adds	r1, #20
 8008f4c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008f50:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008f54:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008f58:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008f5c:	42a5      	cmp	r5, r4
 8008f5e:	d003      	beq.n	8008f68 <__mcmp+0x2c>
 8008f60:	d305      	bcc.n	8008f6e <__mcmp+0x32>
 8008f62:	2201      	movs	r2, #1
 8008f64:	4610      	mov	r0, r2
 8008f66:	bd30      	pop	{r4, r5, pc}
 8008f68:	4283      	cmp	r3, r0
 8008f6a:	d3f3      	bcc.n	8008f54 <__mcmp+0x18>
 8008f6c:	e7fa      	b.n	8008f64 <__mcmp+0x28>
 8008f6e:	f04f 32ff 	mov.w	r2, #4294967295
 8008f72:	e7f7      	b.n	8008f64 <__mcmp+0x28>

08008f74 <__mdiff>:
 8008f74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f78:	460c      	mov	r4, r1
 8008f7a:	4606      	mov	r6, r0
 8008f7c:	4611      	mov	r1, r2
 8008f7e:	4620      	mov	r0, r4
 8008f80:	4690      	mov	r8, r2
 8008f82:	f7ff ffdb 	bl	8008f3c <__mcmp>
 8008f86:	1e05      	subs	r5, r0, #0
 8008f88:	d110      	bne.n	8008fac <__mdiff+0x38>
 8008f8a:	4629      	mov	r1, r5
 8008f8c:	4630      	mov	r0, r6
 8008f8e:	f7ff fd59 	bl	8008a44 <_Balloc>
 8008f92:	b930      	cbnz	r0, 8008fa2 <__mdiff+0x2e>
 8008f94:	4b3a      	ldr	r3, [pc, #232]	; (8009080 <__mdiff+0x10c>)
 8008f96:	4602      	mov	r2, r0
 8008f98:	f240 2137 	movw	r1, #567	; 0x237
 8008f9c:	4839      	ldr	r0, [pc, #228]	; (8009084 <__mdiff+0x110>)
 8008f9e:	f000 fafd 	bl	800959c <__assert_func>
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008fa8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fac:	bfa4      	itt	ge
 8008fae:	4643      	movge	r3, r8
 8008fb0:	46a0      	movge	r8, r4
 8008fb2:	4630      	mov	r0, r6
 8008fb4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008fb8:	bfa6      	itte	ge
 8008fba:	461c      	movge	r4, r3
 8008fbc:	2500      	movge	r5, #0
 8008fbe:	2501      	movlt	r5, #1
 8008fc0:	f7ff fd40 	bl	8008a44 <_Balloc>
 8008fc4:	b920      	cbnz	r0, 8008fd0 <__mdiff+0x5c>
 8008fc6:	4b2e      	ldr	r3, [pc, #184]	; (8009080 <__mdiff+0x10c>)
 8008fc8:	4602      	mov	r2, r0
 8008fca:	f240 2145 	movw	r1, #581	; 0x245
 8008fce:	e7e5      	b.n	8008f9c <__mdiff+0x28>
 8008fd0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008fd4:	6926      	ldr	r6, [r4, #16]
 8008fd6:	60c5      	str	r5, [r0, #12]
 8008fd8:	f104 0914 	add.w	r9, r4, #20
 8008fdc:	f108 0514 	add.w	r5, r8, #20
 8008fe0:	f100 0e14 	add.w	lr, r0, #20
 8008fe4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008fe8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008fec:	f108 0210 	add.w	r2, r8, #16
 8008ff0:	46f2      	mov	sl, lr
 8008ff2:	2100      	movs	r1, #0
 8008ff4:	f859 3b04 	ldr.w	r3, [r9], #4
 8008ff8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008ffc:	fa11 f88b 	uxtah	r8, r1, fp
 8009000:	b299      	uxth	r1, r3
 8009002:	0c1b      	lsrs	r3, r3, #16
 8009004:	eba8 0801 	sub.w	r8, r8, r1
 8009008:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800900c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009010:	fa1f f888 	uxth.w	r8, r8
 8009014:	1419      	asrs	r1, r3, #16
 8009016:	454e      	cmp	r6, r9
 8009018:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800901c:	f84a 3b04 	str.w	r3, [sl], #4
 8009020:	d8e8      	bhi.n	8008ff4 <__mdiff+0x80>
 8009022:	1b33      	subs	r3, r6, r4
 8009024:	3b15      	subs	r3, #21
 8009026:	f023 0303 	bic.w	r3, r3, #3
 800902a:	3304      	adds	r3, #4
 800902c:	3415      	adds	r4, #21
 800902e:	42a6      	cmp	r6, r4
 8009030:	bf38      	it	cc
 8009032:	2304      	movcc	r3, #4
 8009034:	441d      	add	r5, r3
 8009036:	4473      	add	r3, lr
 8009038:	469e      	mov	lr, r3
 800903a:	462e      	mov	r6, r5
 800903c:	4566      	cmp	r6, ip
 800903e:	d30e      	bcc.n	800905e <__mdiff+0xea>
 8009040:	f10c 0203 	add.w	r2, ip, #3
 8009044:	1b52      	subs	r2, r2, r5
 8009046:	f022 0203 	bic.w	r2, r2, #3
 800904a:	3d03      	subs	r5, #3
 800904c:	45ac      	cmp	ip, r5
 800904e:	bf38      	it	cc
 8009050:	2200      	movcc	r2, #0
 8009052:	4413      	add	r3, r2
 8009054:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009058:	b17a      	cbz	r2, 800907a <__mdiff+0x106>
 800905a:	6107      	str	r7, [r0, #16]
 800905c:	e7a4      	b.n	8008fa8 <__mdiff+0x34>
 800905e:	f856 8b04 	ldr.w	r8, [r6], #4
 8009062:	fa11 f288 	uxtah	r2, r1, r8
 8009066:	1414      	asrs	r4, r2, #16
 8009068:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800906c:	b292      	uxth	r2, r2
 800906e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009072:	f84e 2b04 	str.w	r2, [lr], #4
 8009076:	1421      	asrs	r1, r4, #16
 8009078:	e7e0      	b.n	800903c <__mdiff+0xc8>
 800907a:	3f01      	subs	r7, #1
 800907c:	e7ea      	b.n	8009054 <__mdiff+0xe0>
 800907e:	bf00      	nop
 8009080:	08009d60 	.word	0x08009d60
 8009084:	08009d71 	.word	0x08009d71

08009088 <__d2b>:
 8009088:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800908c:	460f      	mov	r7, r1
 800908e:	2101      	movs	r1, #1
 8009090:	ec59 8b10 	vmov	r8, r9, d0
 8009094:	4616      	mov	r6, r2
 8009096:	f7ff fcd5 	bl	8008a44 <_Balloc>
 800909a:	4604      	mov	r4, r0
 800909c:	b930      	cbnz	r0, 80090ac <__d2b+0x24>
 800909e:	4602      	mov	r2, r0
 80090a0:	4b24      	ldr	r3, [pc, #144]	; (8009134 <__d2b+0xac>)
 80090a2:	4825      	ldr	r0, [pc, #148]	; (8009138 <__d2b+0xb0>)
 80090a4:	f240 310f 	movw	r1, #783	; 0x30f
 80090a8:	f000 fa78 	bl	800959c <__assert_func>
 80090ac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80090b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80090b4:	bb2d      	cbnz	r5, 8009102 <__d2b+0x7a>
 80090b6:	9301      	str	r3, [sp, #4]
 80090b8:	f1b8 0300 	subs.w	r3, r8, #0
 80090bc:	d026      	beq.n	800910c <__d2b+0x84>
 80090be:	4668      	mov	r0, sp
 80090c0:	9300      	str	r3, [sp, #0]
 80090c2:	f7ff fd87 	bl	8008bd4 <__lo0bits>
 80090c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80090ca:	b1e8      	cbz	r0, 8009108 <__d2b+0x80>
 80090cc:	f1c0 0320 	rsb	r3, r0, #32
 80090d0:	fa02 f303 	lsl.w	r3, r2, r3
 80090d4:	430b      	orrs	r3, r1
 80090d6:	40c2      	lsrs	r2, r0
 80090d8:	6163      	str	r3, [r4, #20]
 80090da:	9201      	str	r2, [sp, #4]
 80090dc:	9b01      	ldr	r3, [sp, #4]
 80090de:	61a3      	str	r3, [r4, #24]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	bf14      	ite	ne
 80090e4:	2202      	movne	r2, #2
 80090e6:	2201      	moveq	r2, #1
 80090e8:	6122      	str	r2, [r4, #16]
 80090ea:	b1bd      	cbz	r5, 800911c <__d2b+0x94>
 80090ec:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80090f0:	4405      	add	r5, r0
 80090f2:	603d      	str	r5, [r7, #0]
 80090f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80090f8:	6030      	str	r0, [r6, #0]
 80090fa:	4620      	mov	r0, r4
 80090fc:	b003      	add	sp, #12
 80090fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009102:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009106:	e7d6      	b.n	80090b6 <__d2b+0x2e>
 8009108:	6161      	str	r1, [r4, #20]
 800910a:	e7e7      	b.n	80090dc <__d2b+0x54>
 800910c:	a801      	add	r0, sp, #4
 800910e:	f7ff fd61 	bl	8008bd4 <__lo0bits>
 8009112:	9b01      	ldr	r3, [sp, #4]
 8009114:	6163      	str	r3, [r4, #20]
 8009116:	3020      	adds	r0, #32
 8009118:	2201      	movs	r2, #1
 800911a:	e7e5      	b.n	80090e8 <__d2b+0x60>
 800911c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009120:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009124:	6038      	str	r0, [r7, #0]
 8009126:	6918      	ldr	r0, [r3, #16]
 8009128:	f7ff fd34 	bl	8008b94 <__hi0bits>
 800912c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009130:	e7e2      	b.n	80090f8 <__d2b+0x70>
 8009132:	bf00      	nop
 8009134:	08009d60 	.word	0x08009d60
 8009138:	08009d71 	.word	0x08009d71

0800913c <__ssputs_r>:
 800913c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009140:	688e      	ldr	r6, [r1, #8]
 8009142:	461f      	mov	r7, r3
 8009144:	42be      	cmp	r6, r7
 8009146:	680b      	ldr	r3, [r1, #0]
 8009148:	4682      	mov	sl, r0
 800914a:	460c      	mov	r4, r1
 800914c:	4690      	mov	r8, r2
 800914e:	d82c      	bhi.n	80091aa <__ssputs_r+0x6e>
 8009150:	898a      	ldrh	r2, [r1, #12]
 8009152:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009156:	d026      	beq.n	80091a6 <__ssputs_r+0x6a>
 8009158:	6965      	ldr	r5, [r4, #20]
 800915a:	6909      	ldr	r1, [r1, #16]
 800915c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009160:	eba3 0901 	sub.w	r9, r3, r1
 8009164:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009168:	1c7b      	adds	r3, r7, #1
 800916a:	444b      	add	r3, r9
 800916c:	106d      	asrs	r5, r5, #1
 800916e:	429d      	cmp	r5, r3
 8009170:	bf38      	it	cc
 8009172:	461d      	movcc	r5, r3
 8009174:	0553      	lsls	r3, r2, #21
 8009176:	d527      	bpl.n	80091c8 <__ssputs_r+0x8c>
 8009178:	4629      	mov	r1, r5
 800917a:	f7ff fbd7 	bl	800892c <_malloc_r>
 800917e:	4606      	mov	r6, r0
 8009180:	b360      	cbz	r0, 80091dc <__ssputs_r+0xa0>
 8009182:	6921      	ldr	r1, [r4, #16]
 8009184:	464a      	mov	r2, r9
 8009186:	f7fe fcd2 	bl	8007b2e <memcpy>
 800918a:	89a3      	ldrh	r3, [r4, #12]
 800918c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009194:	81a3      	strh	r3, [r4, #12]
 8009196:	6126      	str	r6, [r4, #16]
 8009198:	6165      	str	r5, [r4, #20]
 800919a:	444e      	add	r6, r9
 800919c:	eba5 0509 	sub.w	r5, r5, r9
 80091a0:	6026      	str	r6, [r4, #0]
 80091a2:	60a5      	str	r5, [r4, #8]
 80091a4:	463e      	mov	r6, r7
 80091a6:	42be      	cmp	r6, r7
 80091a8:	d900      	bls.n	80091ac <__ssputs_r+0x70>
 80091aa:	463e      	mov	r6, r7
 80091ac:	6820      	ldr	r0, [r4, #0]
 80091ae:	4632      	mov	r2, r6
 80091b0:	4641      	mov	r1, r8
 80091b2:	f000 f9c9 	bl	8009548 <memmove>
 80091b6:	68a3      	ldr	r3, [r4, #8]
 80091b8:	1b9b      	subs	r3, r3, r6
 80091ba:	60a3      	str	r3, [r4, #8]
 80091bc:	6823      	ldr	r3, [r4, #0]
 80091be:	4433      	add	r3, r6
 80091c0:	6023      	str	r3, [r4, #0]
 80091c2:	2000      	movs	r0, #0
 80091c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091c8:	462a      	mov	r2, r5
 80091ca:	f000 fa2d 	bl	8009628 <_realloc_r>
 80091ce:	4606      	mov	r6, r0
 80091d0:	2800      	cmp	r0, #0
 80091d2:	d1e0      	bne.n	8009196 <__ssputs_r+0x5a>
 80091d4:	6921      	ldr	r1, [r4, #16]
 80091d6:	4650      	mov	r0, sl
 80091d8:	f7ff fb34 	bl	8008844 <_free_r>
 80091dc:	230c      	movs	r3, #12
 80091de:	f8ca 3000 	str.w	r3, [sl]
 80091e2:	89a3      	ldrh	r3, [r4, #12]
 80091e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091e8:	81a3      	strh	r3, [r4, #12]
 80091ea:	f04f 30ff 	mov.w	r0, #4294967295
 80091ee:	e7e9      	b.n	80091c4 <__ssputs_r+0x88>

080091f0 <_svfiprintf_r>:
 80091f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091f4:	4698      	mov	r8, r3
 80091f6:	898b      	ldrh	r3, [r1, #12]
 80091f8:	061b      	lsls	r3, r3, #24
 80091fa:	b09d      	sub	sp, #116	; 0x74
 80091fc:	4607      	mov	r7, r0
 80091fe:	460d      	mov	r5, r1
 8009200:	4614      	mov	r4, r2
 8009202:	d50e      	bpl.n	8009222 <_svfiprintf_r+0x32>
 8009204:	690b      	ldr	r3, [r1, #16]
 8009206:	b963      	cbnz	r3, 8009222 <_svfiprintf_r+0x32>
 8009208:	2140      	movs	r1, #64	; 0x40
 800920a:	f7ff fb8f 	bl	800892c <_malloc_r>
 800920e:	6028      	str	r0, [r5, #0]
 8009210:	6128      	str	r0, [r5, #16]
 8009212:	b920      	cbnz	r0, 800921e <_svfiprintf_r+0x2e>
 8009214:	230c      	movs	r3, #12
 8009216:	603b      	str	r3, [r7, #0]
 8009218:	f04f 30ff 	mov.w	r0, #4294967295
 800921c:	e0d0      	b.n	80093c0 <_svfiprintf_r+0x1d0>
 800921e:	2340      	movs	r3, #64	; 0x40
 8009220:	616b      	str	r3, [r5, #20]
 8009222:	2300      	movs	r3, #0
 8009224:	9309      	str	r3, [sp, #36]	; 0x24
 8009226:	2320      	movs	r3, #32
 8009228:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800922c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009230:	2330      	movs	r3, #48	; 0x30
 8009232:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80093d8 <_svfiprintf_r+0x1e8>
 8009236:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800923a:	f04f 0901 	mov.w	r9, #1
 800923e:	4623      	mov	r3, r4
 8009240:	469a      	mov	sl, r3
 8009242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009246:	b10a      	cbz	r2, 800924c <_svfiprintf_r+0x5c>
 8009248:	2a25      	cmp	r2, #37	; 0x25
 800924a:	d1f9      	bne.n	8009240 <_svfiprintf_r+0x50>
 800924c:	ebba 0b04 	subs.w	fp, sl, r4
 8009250:	d00b      	beq.n	800926a <_svfiprintf_r+0x7a>
 8009252:	465b      	mov	r3, fp
 8009254:	4622      	mov	r2, r4
 8009256:	4629      	mov	r1, r5
 8009258:	4638      	mov	r0, r7
 800925a:	f7ff ff6f 	bl	800913c <__ssputs_r>
 800925e:	3001      	adds	r0, #1
 8009260:	f000 80a9 	beq.w	80093b6 <_svfiprintf_r+0x1c6>
 8009264:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009266:	445a      	add	r2, fp
 8009268:	9209      	str	r2, [sp, #36]	; 0x24
 800926a:	f89a 3000 	ldrb.w	r3, [sl]
 800926e:	2b00      	cmp	r3, #0
 8009270:	f000 80a1 	beq.w	80093b6 <_svfiprintf_r+0x1c6>
 8009274:	2300      	movs	r3, #0
 8009276:	f04f 32ff 	mov.w	r2, #4294967295
 800927a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800927e:	f10a 0a01 	add.w	sl, sl, #1
 8009282:	9304      	str	r3, [sp, #16]
 8009284:	9307      	str	r3, [sp, #28]
 8009286:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800928a:	931a      	str	r3, [sp, #104]	; 0x68
 800928c:	4654      	mov	r4, sl
 800928e:	2205      	movs	r2, #5
 8009290:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009294:	4850      	ldr	r0, [pc, #320]	; (80093d8 <_svfiprintf_r+0x1e8>)
 8009296:	f7f6 ffc3 	bl	8000220 <memchr>
 800929a:	9a04      	ldr	r2, [sp, #16]
 800929c:	b9d8      	cbnz	r0, 80092d6 <_svfiprintf_r+0xe6>
 800929e:	06d0      	lsls	r0, r2, #27
 80092a0:	bf44      	itt	mi
 80092a2:	2320      	movmi	r3, #32
 80092a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092a8:	0711      	lsls	r1, r2, #28
 80092aa:	bf44      	itt	mi
 80092ac:	232b      	movmi	r3, #43	; 0x2b
 80092ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092b2:	f89a 3000 	ldrb.w	r3, [sl]
 80092b6:	2b2a      	cmp	r3, #42	; 0x2a
 80092b8:	d015      	beq.n	80092e6 <_svfiprintf_r+0xf6>
 80092ba:	9a07      	ldr	r2, [sp, #28]
 80092bc:	4654      	mov	r4, sl
 80092be:	2000      	movs	r0, #0
 80092c0:	f04f 0c0a 	mov.w	ip, #10
 80092c4:	4621      	mov	r1, r4
 80092c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092ca:	3b30      	subs	r3, #48	; 0x30
 80092cc:	2b09      	cmp	r3, #9
 80092ce:	d94d      	bls.n	800936c <_svfiprintf_r+0x17c>
 80092d0:	b1b0      	cbz	r0, 8009300 <_svfiprintf_r+0x110>
 80092d2:	9207      	str	r2, [sp, #28]
 80092d4:	e014      	b.n	8009300 <_svfiprintf_r+0x110>
 80092d6:	eba0 0308 	sub.w	r3, r0, r8
 80092da:	fa09 f303 	lsl.w	r3, r9, r3
 80092de:	4313      	orrs	r3, r2
 80092e0:	9304      	str	r3, [sp, #16]
 80092e2:	46a2      	mov	sl, r4
 80092e4:	e7d2      	b.n	800928c <_svfiprintf_r+0x9c>
 80092e6:	9b03      	ldr	r3, [sp, #12]
 80092e8:	1d19      	adds	r1, r3, #4
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	9103      	str	r1, [sp, #12]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	bfbb      	ittet	lt
 80092f2:	425b      	neglt	r3, r3
 80092f4:	f042 0202 	orrlt.w	r2, r2, #2
 80092f8:	9307      	strge	r3, [sp, #28]
 80092fa:	9307      	strlt	r3, [sp, #28]
 80092fc:	bfb8      	it	lt
 80092fe:	9204      	strlt	r2, [sp, #16]
 8009300:	7823      	ldrb	r3, [r4, #0]
 8009302:	2b2e      	cmp	r3, #46	; 0x2e
 8009304:	d10c      	bne.n	8009320 <_svfiprintf_r+0x130>
 8009306:	7863      	ldrb	r3, [r4, #1]
 8009308:	2b2a      	cmp	r3, #42	; 0x2a
 800930a:	d134      	bne.n	8009376 <_svfiprintf_r+0x186>
 800930c:	9b03      	ldr	r3, [sp, #12]
 800930e:	1d1a      	adds	r2, r3, #4
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	9203      	str	r2, [sp, #12]
 8009314:	2b00      	cmp	r3, #0
 8009316:	bfb8      	it	lt
 8009318:	f04f 33ff 	movlt.w	r3, #4294967295
 800931c:	3402      	adds	r4, #2
 800931e:	9305      	str	r3, [sp, #20]
 8009320:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80093e8 <_svfiprintf_r+0x1f8>
 8009324:	7821      	ldrb	r1, [r4, #0]
 8009326:	2203      	movs	r2, #3
 8009328:	4650      	mov	r0, sl
 800932a:	f7f6 ff79 	bl	8000220 <memchr>
 800932e:	b138      	cbz	r0, 8009340 <_svfiprintf_r+0x150>
 8009330:	9b04      	ldr	r3, [sp, #16]
 8009332:	eba0 000a 	sub.w	r0, r0, sl
 8009336:	2240      	movs	r2, #64	; 0x40
 8009338:	4082      	lsls	r2, r0
 800933a:	4313      	orrs	r3, r2
 800933c:	3401      	adds	r4, #1
 800933e:	9304      	str	r3, [sp, #16]
 8009340:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009344:	4825      	ldr	r0, [pc, #148]	; (80093dc <_svfiprintf_r+0x1ec>)
 8009346:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800934a:	2206      	movs	r2, #6
 800934c:	f7f6 ff68 	bl	8000220 <memchr>
 8009350:	2800      	cmp	r0, #0
 8009352:	d038      	beq.n	80093c6 <_svfiprintf_r+0x1d6>
 8009354:	4b22      	ldr	r3, [pc, #136]	; (80093e0 <_svfiprintf_r+0x1f0>)
 8009356:	bb1b      	cbnz	r3, 80093a0 <_svfiprintf_r+0x1b0>
 8009358:	9b03      	ldr	r3, [sp, #12]
 800935a:	3307      	adds	r3, #7
 800935c:	f023 0307 	bic.w	r3, r3, #7
 8009360:	3308      	adds	r3, #8
 8009362:	9303      	str	r3, [sp, #12]
 8009364:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009366:	4433      	add	r3, r6
 8009368:	9309      	str	r3, [sp, #36]	; 0x24
 800936a:	e768      	b.n	800923e <_svfiprintf_r+0x4e>
 800936c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009370:	460c      	mov	r4, r1
 8009372:	2001      	movs	r0, #1
 8009374:	e7a6      	b.n	80092c4 <_svfiprintf_r+0xd4>
 8009376:	2300      	movs	r3, #0
 8009378:	3401      	adds	r4, #1
 800937a:	9305      	str	r3, [sp, #20]
 800937c:	4619      	mov	r1, r3
 800937e:	f04f 0c0a 	mov.w	ip, #10
 8009382:	4620      	mov	r0, r4
 8009384:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009388:	3a30      	subs	r2, #48	; 0x30
 800938a:	2a09      	cmp	r2, #9
 800938c:	d903      	bls.n	8009396 <_svfiprintf_r+0x1a6>
 800938e:	2b00      	cmp	r3, #0
 8009390:	d0c6      	beq.n	8009320 <_svfiprintf_r+0x130>
 8009392:	9105      	str	r1, [sp, #20]
 8009394:	e7c4      	b.n	8009320 <_svfiprintf_r+0x130>
 8009396:	fb0c 2101 	mla	r1, ip, r1, r2
 800939a:	4604      	mov	r4, r0
 800939c:	2301      	movs	r3, #1
 800939e:	e7f0      	b.n	8009382 <_svfiprintf_r+0x192>
 80093a0:	ab03      	add	r3, sp, #12
 80093a2:	9300      	str	r3, [sp, #0]
 80093a4:	462a      	mov	r2, r5
 80093a6:	4b0f      	ldr	r3, [pc, #60]	; (80093e4 <_svfiprintf_r+0x1f4>)
 80093a8:	a904      	add	r1, sp, #16
 80093aa:	4638      	mov	r0, r7
 80093ac:	f7fd fe3c 	bl	8007028 <_printf_float>
 80093b0:	1c42      	adds	r2, r0, #1
 80093b2:	4606      	mov	r6, r0
 80093b4:	d1d6      	bne.n	8009364 <_svfiprintf_r+0x174>
 80093b6:	89ab      	ldrh	r3, [r5, #12]
 80093b8:	065b      	lsls	r3, r3, #25
 80093ba:	f53f af2d 	bmi.w	8009218 <_svfiprintf_r+0x28>
 80093be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093c0:	b01d      	add	sp, #116	; 0x74
 80093c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093c6:	ab03      	add	r3, sp, #12
 80093c8:	9300      	str	r3, [sp, #0]
 80093ca:	462a      	mov	r2, r5
 80093cc:	4b05      	ldr	r3, [pc, #20]	; (80093e4 <_svfiprintf_r+0x1f4>)
 80093ce:	a904      	add	r1, sp, #16
 80093d0:	4638      	mov	r0, r7
 80093d2:	f7fe f8cd 	bl	8007570 <_printf_i>
 80093d6:	e7eb      	b.n	80093b0 <_svfiprintf_r+0x1c0>
 80093d8:	08009ecc 	.word	0x08009ecc
 80093dc:	08009ed6 	.word	0x08009ed6
 80093e0:	08007029 	.word	0x08007029
 80093e4:	0800913d 	.word	0x0800913d
 80093e8:	08009ed2 	.word	0x08009ed2

080093ec <__sflush_r>:
 80093ec:	898a      	ldrh	r2, [r1, #12]
 80093ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093f2:	4605      	mov	r5, r0
 80093f4:	0710      	lsls	r0, r2, #28
 80093f6:	460c      	mov	r4, r1
 80093f8:	d458      	bmi.n	80094ac <__sflush_r+0xc0>
 80093fa:	684b      	ldr	r3, [r1, #4]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	dc05      	bgt.n	800940c <__sflush_r+0x20>
 8009400:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009402:	2b00      	cmp	r3, #0
 8009404:	dc02      	bgt.n	800940c <__sflush_r+0x20>
 8009406:	2000      	movs	r0, #0
 8009408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800940c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800940e:	2e00      	cmp	r6, #0
 8009410:	d0f9      	beq.n	8009406 <__sflush_r+0x1a>
 8009412:	2300      	movs	r3, #0
 8009414:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009418:	682f      	ldr	r7, [r5, #0]
 800941a:	6a21      	ldr	r1, [r4, #32]
 800941c:	602b      	str	r3, [r5, #0]
 800941e:	d032      	beq.n	8009486 <__sflush_r+0x9a>
 8009420:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009422:	89a3      	ldrh	r3, [r4, #12]
 8009424:	075a      	lsls	r2, r3, #29
 8009426:	d505      	bpl.n	8009434 <__sflush_r+0x48>
 8009428:	6863      	ldr	r3, [r4, #4]
 800942a:	1ac0      	subs	r0, r0, r3
 800942c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800942e:	b10b      	cbz	r3, 8009434 <__sflush_r+0x48>
 8009430:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009432:	1ac0      	subs	r0, r0, r3
 8009434:	2300      	movs	r3, #0
 8009436:	4602      	mov	r2, r0
 8009438:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800943a:	6a21      	ldr	r1, [r4, #32]
 800943c:	4628      	mov	r0, r5
 800943e:	47b0      	blx	r6
 8009440:	1c43      	adds	r3, r0, #1
 8009442:	89a3      	ldrh	r3, [r4, #12]
 8009444:	d106      	bne.n	8009454 <__sflush_r+0x68>
 8009446:	6829      	ldr	r1, [r5, #0]
 8009448:	291d      	cmp	r1, #29
 800944a:	d82b      	bhi.n	80094a4 <__sflush_r+0xb8>
 800944c:	4a29      	ldr	r2, [pc, #164]	; (80094f4 <__sflush_r+0x108>)
 800944e:	410a      	asrs	r2, r1
 8009450:	07d6      	lsls	r6, r2, #31
 8009452:	d427      	bmi.n	80094a4 <__sflush_r+0xb8>
 8009454:	2200      	movs	r2, #0
 8009456:	6062      	str	r2, [r4, #4]
 8009458:	04d9      	lsls	r1, r3, #19
 800945a:	6922      	ldr	r2, [r4, #16]
 800945c:	6022      	str	r2, [r4, #0]
 800945e:	d504      	bpl.n	800946a <__sflush_r+0x7e>
 8009460:	1c42      	adds	r2, r0, #1
 8009462:	d101      	bne.n	8009468 <__sflush_r+0x7c>
 8009464:	682b      	ldr	r3, [r5, #0]
 8009466:	b903      	cbnz	r3, 800946a <__sflush_r+0x7e>
 8009468:	6560      	str	r0, [r4, #84]	; 0x54
 800946a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800946c:	602f      	str	r7, [r5, #0]
 800946e:	2900      	cmp	r1, #0
 8009470:	d0c9      	beq.n	8009406 <__sflush_r+0x1a>
 8009472:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009476:	4299      	cmp	r1, r3
 8009478:	d002      	beq.n	8009480 <__sflush_r+0x94>
 800947a:	4628      	mov	r0, r5
 800947c:	f7ff f9e2 	bl	8008844 <_free_r>
 8009480:	2000      	movs	r0, #0
 8009482:	6360      	str	r0, [r4, #52]	; 0x34
 8009484:	e7c0      	b.n	8009408 <__sflush_r+0x1c>
 8009486:	2301      	movs	r3, #1
 8009488:	4628      	mov	r0, r5
 800948a:	47b0      	blx	r6
 800948c:	1c41      	adds	r1, r0, #1
 800948e:	d1c8      	bne.n	8009422 <__sflush_r+0x36>
 8009490:	682b      	ldr	r3, [r5, #0]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d0c5      	beq.n	8009422 <__sflush_r+0x36>
 8009496:	2b1d      	cmp	r3, #29
 8009498:	d001      	beq.n	800949e <__sflush_r+0xb2>
 800949a:	2b16      	cmp	r3, #22
 800949c:	d101      	bne.n	80094a2 <__sflush_r+0xb6>
 800949e:	602f      	str	r7, [r5, #0]
 80094a0:	e7b1      	b.n	8009406 <__sflush_r+0x1a>
 80094a2:	89a3      	ldrh	r3, [r4, #12]
 80094a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094a8:	81a3      	strh	r3, [r4, #12]
 80094aa:	e7ad      	b.n	8009408 <__sflush_r+0x1c>
 80094ac:	690f      	ldr	r7, [r1, #16]
 80094ae:	2f00      	cmp	r7, #0
 80094b0:	d0a9      	beq.n	8009406 <__sflush_r+0x1a>
 80094b2:	0793      	lsls	r3, r2, #30
 80094b4:	680e      	ldr	r6, [r1, #0]
 80094b6:	bf08      	it	eq
 80094b8:	694b      	ldreq	r3, [r1, #20]
 80094ba:	600f      	str	r7, [r1, #0]
 80094bc:	bf18      	it	ne
 80094be:	2300      	movne	r3, #0
 80094c0:	eba6 0807 	sub.w	r8, r6, r7
 80094c4:	608b      	str	r3, [r1, #8]
 80094c6:	f1b8 0f00 	cmp.w	r8, #0
 80094ca:	dd9c      	ble.n	8009406 <__sflush_r+0x1a>
 80094cc:	6a21      	ldr	r1, [r4, #32]
 80094ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80094d0:	4643      	mov	r3, r8
 80094d2:	463a      	mov	r2, r7
 80094d4:	4628      	mov	r0, r5
 80094d6:	47b0      	blx	r6
 80094d8:	2800      	cmp	r0, #0
 80094da:	dc06      	bgt.n	80094ea <__sflush_r+0xfe>
 80094dc:	89a3      	ldrh	r3, [r4, #12]
 80094de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094e2:	81a3      	strh	r3, [r4, #12]
 80094e4:	f04f 30ff 	mov.w	r0, #4294967295
 80094e8:	e78e      	b.n	8009408 <__sflush_r+0x1c>
 80094ea:	4407      	add	r7, r0
 80094ec:	eba8 0800 	sub.w	r8, r8, r0
 80094f0:	e7e9      	b.n	80094c6 <__sflush_r+0xda>
 80094f2:	bf00      	nop
 80094f4:	dfbffffe 	.word	0xdfbffffe

080094f8 <_fflush_r>:
 80094f8:	b538      	push	{r3, r4, r5, lr}
 80094fa:	690b      	ldr	r3, [r1, #16]
 80094fc:	4605      	mov	r5, r0
 80094fe:	460c      	mov	r4, r1
 8009500:	b913      	cbnz	r3, 8009508 <_fflush_r+0x10>
 8009502:	2500      	movs	r5, #0
 8009504:	4628      	mov	r0, r5
 8009506:	bd38      	pop	{r3, r4, r5, pc}
 8009508:	b118      	cbz	r0, 8009512 <_fflush_r+0x1a>
 800950a:	6a03      	ldr	r3, [r0, #32]
 800950c:	b90b      	cbnz	r3, 8009512 <_fflush_r+0x1a>
 800950e:	f7fe f9dd 	bl	80078cc <__sinit>
 8009512:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d0f3      	beq.n	8009502 <_fflush_r+0xa>
 800951a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800951c:	07d0      	lsls	r0, r2, #31
 800951e:	d404      	bmi.n	800952a <_fflush_r+0x32>
 8009520:	0599      	lsls	r1, r3, #22
 8009522:	d402      	bmi.n	800952a <_fflush_r+0x32>
 8009524:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009526:	f7fe fb00 	bl	8007b2a <__retarget_lock_acquire_recursive>
 800952a:	4628      	mov	r0, r5
 800952c:	4621      	mov	r1, r4
 800952e:	f7ff ff5d 	bl	80093ec <__sflush_r>
 8009532:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009534:	07da      	lsls	r2, r3, #31
 8009536:	4605      	mov	r5, r0
 8009538:	d4e4      	bmi.n	8009504 <_fflush_r+0xc>
 800953a:	89a3      	ldrh	r3, [r4, #12]
 800953c:	059b      	lsls	r3, r3, #22
 800953e:	d4e1      	bmi.n	8009504 <_fflush_r+0xc>
 8009540:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009542:	f7fe faf3 	bl	8007b2c <__retarget_lock_release_recursive>
 8009546:	e7dd      	b.n	8009504 <_fflush_r+0xc>

08009548 <memmove>:
 8009548:	4288      	cmp	r0, r1
 800954a:	b510      	push	{r4, lr}
 800954c:	eb01 0402 	add.w	r4, r1, r2
 8009550:	d902      	bls.n	8009558 <memmove+0x10>
 8009552:	4284      	cmp	r4, r0
 8009554:	4623      	mov	r3, r4
 8009556:	d807      	bhi.n	8009568 <memmove+0x20>
 8009558:	1e43      	subs	r3, r0, #1
 800955a:	42a1      	cmp	r1, r4
 800955c:	d008      	beq.n	8009570 <memmove+0x28>
 800955e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009562:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009566:	e7f8      	b.n	800955a <memmove+0x12>
 8009568:	4402      	add	r2, r0
 800956a:	4601      	mov	r1, r0
 800956c:	428a      	cmp	r2, r1
 800956e:	d100      	bne.n	8009572 <memmove+0x2a>
 8009570:	bd10      	pop	{r4, pc}
 8009572:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009576:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800957a:	e7f7      	b.n	800956c <memmove+0x24>

0800957c <_sbrk_r>:
 800957c:	b538      	push	{r3, r4, r5, lr}
 800957e:	4d06      	ldr	r5, [pc, #24]	; (8009598 <_sbrk_r+0x1c>)
 8009580:	2300      	movs	r3, #0
 8009582:	4604      	mov	r4, r0
 8009584:	4608      	mov	r0, r1
 8009586:	602b      	str	r3, [r5, #0]
 8009588:	f7f8 fe24 	bl	80021d4 <_sbrk>
 800958c:	1c43      	adds	r3, r0, #1
 800958e:	d102      	bne.n	8009596 <_sbrk_r+0x1a>
 8009590:	682b      	ldr	r3, [r5, #0]
 8009592:	b103      	cbz	r3, 8009596 <_sbrk_r+0x1a>
 8009594:	6023      	str	r3, [r4, #0]
 8009596:	bd38      	pop	{r3, r4, r5, pc}
 8009598:	20000e70 	.word	0x20000e70

0800959c <__assert_func>:
 800959c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800959e:	4614      	mov	r4, r2
 80095a0:	461a      	mov	r2, r3
 80095a2:	4b09      	ldr	r3, [pc, #36]	; (80095c8 <__assert_func+0x2c>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	4605      	mov	r5, r0
 80095a8:	68d8      	ldr	r0, [r3, #12]
 80095aa:	b14c      	cbz	r4, 80095c0 <__assert_func+0x24>
 80095ac:	4b07      	ldr	r3, [pc, #28]	; (80095cc <__assert_func+0x30>)
 80095ae:	9100      	str	r1, [sp, #0]
 80095b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80095b4:	4906      	ldr	r1, [pc, #24]	; (80095d0 <__assert_func+0x34>)
 80095b6:	462b      	mov	r3, r5
 80095b8:	f000 f872 	bl	80096a0 <fiprintf>
 80095bc:	f000 f882 	bl	80096c4 <abort>
 80095c0:	4b04      	ldr	r3, [pc, #16]	; (80095d4 <__assert_func+0x38>)
 80095c2:	461c      	mov	r4, r3
 80095c4:	e7f3      	b.n	80095ae <__assert_func+0x12>
 80095c6:	bf00      	nop
 80095c8:	200000c4 	.word	0x200000c4
 80095cc:	08009ee7 	.word	0x08009ee7
 80095d0:	08009ef4 	.word	0x08009ef4
 80095d4:	08009f22 	.word	0x08009f22

080095d8 <_calloc_r>:
 80095d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80095da:	fba1 2402 	umull	r2, r4, r1, r2
 80095de:	b94c      	cbnz	r4, 80095f4 <_calloc_r+0x1c>
 80095e0:	4611      	mov	r1, r2
 80095e2:	9201      	str	r2, [sp, #4]
 80095e4:	f7ff f9a2 	bl	800892c <_malloc_r>
 80095e8:	9a01      	ldr	r2, [sp, #4]
 80095ea:	4605      	mov	r5, r0
 80095ec:	b930      	cbnz	r0, 80095fc <_calloc_r+0x24>
 80095ee:	4628      	mov	r0, r5
 80095f0:	b003      	add	sp, #12
 80095f2:	bd30      	pop	{r4, r5, pc}
 80095f4:	220c      	movs	r2, #12
 80095f6:	6002      	str	r2, [r0, #0]
 80095f8:	2500      	movs	r5, #0
 80095fa:	e7f8      	b.n	80095ee <_calloc_r+0x16>
 80095fc:	4621      	mov	r1, r4
 80095fe:	f7fe fa17 	bl	8007a30 <memset>
 8009602:	e7f4      	b.n	80095ee <_calloc_r+0x16>

08009604 <__ascii_mbtowc>:
 8009604:	b082      	sub	sp, #8
 8009606:	b901      	cbnz	r1, 800960a <__ascii_mbtowc+0x6>
 8009608:	a901      	add	r1, sp, #4
 800960a:	b142      	cbz	r2, 800961e <__ascii_mbtowc+0x1a>
 800960c:	b14b      	cbz	r3, 8009622 <__ascii_mbtowc+0x1e>
 800960e:	7813      	ldrb	r3, [r2, #0]
 8009610:	600b      	str	r3, [r1, #0]
 8009612:	7812      	ldrb	r2, [r2, #0]
 8009614:	1e10      	subs	r0, r2, #0
 8009616:	bf18      	it	ne
 8009618:	2001      	movne	r0, #1
 800961a:	b002      	add	sp, #8
 800961c:	4770      	bx	lr
 800961e:	4610      	mov	r0, r2
 8009620:	e7fb      	b.n	800961a <__ascii_mbtowc+0x16>
 8009622:	f06f 0001 	mvn.w	r0, #1
 8009626:	e7f8      	b.n	800961a <__ascii_mbtowc+0x16>

08009628 <_realloc_r>:
 8009628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800962c:	4680      	mov	r8, r0
 800962e:	4614      	mov	r4, r2
 8009630:	460e      	mov	r6, r1
 8009632:	b921      	cbnz	r1, 800963e <_realloc_r+0x16>
 8009634:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009638:	4611      	mov	r1, r2
 800963a:	f7ff b977 	b.w	800892c <_malloc_r>
 800963e:	b92a      	cbnz	r2, 800964c <_realloc_r+0x24>
 8009640:	f7ff f900 	bl	8008844 <_free_r>
 8009644:	4625      	mov	r5, r4
 8009646:	4628      	mov	r0, r5
 8009648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800964c:	f000 f841 	bl	80096d2 <_malloc_usable_size_r>
 8009650:	4284      	cmp	r4, r0
 8009652:	4607      	mov	r7, r0
 8009654:	d802      	bhi.n	800965c <_realloc_r+0x34>
 8009656:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800965a:	d812      	bhi.n	8009682 <_realloc_r+0x5a>
 800965c:	4621      	mov	r1, r4
 800965e:	4640      	mov	r0, r8
 8009660:	f7ff f964 	bl	800892c <_malloc_r>
 8009664:	4605      	mov	r5, r0
 8009666:	2800      	cmp	r0, #0
 8009668:	d0ed      	beq.n	8009646 <_realloc_r+0x1e>
 800966a:	42bc      	cmp	r4, r7
 800966c:	4622      	mov	r2, r4
 800966e:	4631      	mov	r1, r6
 8009670:	bf28      	it	cs
 8009672:	463a      	movcs	r2, r7
 8009674:	f7fe fa5b 	bl	8007b2e <memcpy>
 8009678:	4631      	mov	r1, r6
 800967a:	4640      	mov	r0, r8
 800967c:	f7ff f8e2 	bl	8008844 <_free_r>
 8009680:	e7e1      	b.n	8009646 <_realloc_r+0x1e>
 8009682:	4635      	mov	r5, r6
 8009684:	e7df      	b.n	8009646 <_realloc_r+0x1e>

08009686 <__ascii_wctomb>:
 8009686:	b149      	cbz	r1, 800969c <__ascii_wctomb+0x16>
 8009688:	2aff      	cmp	r2, #255	; 0xff
 800968a:	bf85      	ittet	hi
 800968c:	238a      	movhi	r3, #138	; 0x8a
 800968e:	6003      	strhi	r3, [r0, #0]
 8009690:	700a      	strbls	r2, [r1, #0]
 8009692:	f04f 30ff 	movhi.w	r0, #4294967295
 8009696:	bf98      	it	ls
 8009698:	2001      	movls	r0, #1
 800969a:	4770      	bx	lr
 800969c:	4608      	mov	r0, r1
 800969e:	4770      	bx	lr

080096a0 <fiprintf>:
 80096a0:	b40e      	push	{r1, r2, r3}
 80096a2:	b503      	push	{r0, r1, lr}
 80096a4:	4601      	mov	r1, r0
 80096a6:	ab03      	add	r3, sp, #12
 80096a8:	4805      	ldr	r0, [pc, #20]	; (80096c0 <fiprintf+0x20>)
 80096aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80096ae:	6800      	ldr	r0, [r0, #0]
 80096b0:	9301      	str	r3, [sp, #4]
 80096b2:	f000 f83f 	bl	8009734 <_vfiprintf_r>
 80096b6:	b002      	add	sp, #8
 80096b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80096bc:	b003      	add	sp, #12
 80096be:	4770      	bx	lr
 80096c0:	200000c4 	.word	0x200000c4

080096c4 <abort>:
 80096c4:	b508      	push	{r3, lr}
 80096c6:	2006      	movs	r0, #6
 80096c8:	f000 fa0c 	bl	8009ae4 <raise>
 80096cc:	2001      	movs	r0, #1
 80096ce:	f7f8 fd55 	bl	800217c <_exit>

080096d2 <_malloc_usable_size_r>:
 80096d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096d6:	1f18      	subs	r0, r3, #4
 80096d8:	2b00      	cmp	r3, #0
 80096da:	bfbc      	itt	lt
 80096dc:	580b      	ldrlt	r3, [r1, r0]
 80096de:	18c0      	addlt	r0, r0, r3
 80096e0:	4770      	bx	lr

080096e2 <__sfputc_r>:
 80096e2:	6893      	ldr	r3, [r2, #8]
 80096e4:	3b01      	subs	r3, #1
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	b410      	push	{r4}
 80096ea:	6093      	str	r3, [r2, #8]
 80096ec:	da08      	bge.n	8009700 <__sfputc_r+0x1e>
 80096ee:	6994      	ldr	r4, [r2, #24]
 80096f0:	42a3      	cmp	r3, r4
 80096f2:	db01      	blt.n	80096f8 <__sfputc_r+0x16>
 80096f4:	290a      	cmp	r1, #10
 80096f6:	d103      	bne.n	8009700 <__sfputc_r+0x1e>
 80096f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096fc:	f000 b934 	b.w	8009968 <__swbuf_r>
 8009700:	6813      	ldr	r3, [r2, #0]
 8009702:	1c58      	adds	r0, r3, #1
 8009704:	6010      	str	r0, [r2, #0]
 8009706:	7019      	strb	r1, [r3, #0]
 8009708:	4608      	mov	r0, r1
 800970a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800970e:	4770      	bx	lr

08009710 <__sfputs_r>:
 8009710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009712:	4606      	mov	r6, r0
 8009714:	460f      	mov	r7, r1
 8009716:	4614      	mov	r4, r2
 8009718:	18d5      	adds	r5, r2, r3
 800971a:	42ac      	cmp	r4, r5
 800971c:	d101      	bne.n	8009722 <__sfputs_r+0x12>
 800971e:	2000      	movs	r0, #0
 8009720:	e007      	b.n	8009732 <__sfputs_r+0x22>
 8009722:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009726:	463a      	mov	r2, r7
 8009728:	4630      	mov	r0, r6
 800972a:	f7ff ffda 	bl	80096e2 <__sfputc_r>
 800972e:	1c43      	adds	r3, r0, #1
 8009730:	d1f3      	bne.n	800971a <__sfputs_r+0xa>
 8009732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009734 <_vfiprintf_r>:
 8009734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009738:	460d      	mov	r5, r1
 800973a:	b09d      	sub	sp, #116	; 0x74
 800973c:	4614      	mov	r4, r2
 800973e:	4698      	mov	r8, r3
 8009740:	4606      	mov	r6, r0
 8009742:	b118      	cbz	r0, 800974c <_vfiprintf_r+0x18>
 8009744:	6a03      	ldr	r3, [r0, #32]
 8009746:	b90b      	cbnz	r3, 800974c <_vfiprintf_r+0x18>
 8009748:	f7fe f8c0 	bl	80078cc <__sinit>
 800974c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800974e:	07d9      	lsls	r1, r3, #31
 8009750:	d405      	bmi.n	800975e <_vfiprintf_r+0x2a>
 8009752:	89ab      	ldrh	r3, [r5, #12]
 8009754:	059a      	lsls	r2, r3, #22
 8009756:	d402      	bmi.n	800975e <_vfiprintf_r+0x2a>
 8009758:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800975a:	f7fe f9e6 	bl	8007b2a <__retarget_lock_acquire_recursive>
 800975e:	89ab      	ldrh	r3, [r5, #12]
 8009760:	071b      	lsls	r3, r3, #28
 8009762:	d501      	bpl.n	8009768 <_vfiprintf_r+0x34>
 8009764:	692b      	ldr	r3, [r5, #16]
 8009766:	b99b      	cbnz	r3, 8009790 <_vfiprintf_r+0x5c>
 8009768:	4629      	mov	r1, r5
 800976a:	4630      	mov	r0, r6
 800976c:	f000 f93a 	bl	80099e4 <__swsetup_r>
 8009770:	b170      	cbz	r0, 8009790 <_vfiprintf_r+0x5c>
 8009772:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009774:	07dc      	lsls	r4, r3, #31
 8009776:	d504      	bpl.n	8009782 <_vfiprintf_r+0x4e>
 8009778:	f04f 30ff 	mov.w	r0, #4294967295
 800977c:	b01d      	add	sp, #116	; 0x74
 800977e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009782:	89ab      	ldrh	r3, [r5, #12]
 8009784:	0598      	lsls	r0, r3, #22
 8009786:	d4f7      	bmi.n	8009778 <_vfiprintf_r+0x44>
 8009788:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800978a:	f7fe f9cf 	bl	8007b2c <__retarget_lock_release_recursive>
 800978e:	e7f3      	b.n	8009778 <_vfiprintf_r+0x44>
 8009790:	2300      	movs	r3, #0
 8009792:	9309      	str	r3, [sp, #36]	; 0x24
 8009794:	2320      	movs	r3, #32
 8009796:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800979a:	f8cd 800c 	str.w	r8, [sp, #12]
 800979e:	2330      	movs	r3, #48	; 0x30
 80097a0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009954 <_vfiprintf_r+0x220>
 80097a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097a8:	f04f 0901 	mov.w	r9, #1
 80097ac:	4623      	mov	r3, r4
 80097ae:	469a      	mov	sl, r3
 80097b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097b4:	b10a      	cbz	r2, 80097ba <_vfiprintf_r+0x86>
 80097b6:	2a25      	cmp	r2, #37	; 0x25
 80097b8:	d1f9      	bne.n	80097ae <_vfiprintf_r+0x7a>
 80097ba:	ebba 0b04 	subs.w	fp, sl, r4
 80097be:	d00b      	beq.n	80097d8 <_vfiprintf_r+0xa4>
 80097c0:	465b      	mov	r3, fp
 80097c2:	4622      	mov	r2, r4
 80097c4:	4629      	mov	r1, r5
 80097c6:	4630      	mov	r0, r6
 80097c8:	f7ff ffa2 	bl	8009710 <__sfputs_r>
 80097cc:	3001      	adds	r0, #1
 80097ce:	f000 80a9 	beq.w	8009924 <_vfiprintf_r+0x1f0>
 80097d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097d4:	445a      	add	r2, fp
 80097d6:	9209      	str	r2, [sp, #36]	; 0x24
 80097d8:	f89a 3000 	ldrb.w	r3, [sl]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	f000 80a1 	beq.w	8009924 <_vfiprintf_r+0x1f0>
 80097e2:	2300      	movs	r3, #0
 80097e4:	f04f 32ff 	mov.w	r2, #4294967295
 80097e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097ec:	f10a 0a01 	add.w	sl, sl, #1
 80097f0:	9304      	str	r3, [sp, #16]
 80097f2:	9307      	str	r3, [sp, #28]
 80097f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80097f8:	931a      	str	r3, [sp, #104]	; 0x68
 80097fa:	4654      	mov	r4, sl
 80097fc:	2205      	movs	r2, #5
 80097fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009802:	4854      	ldr	r0, [pc, #336]	; (8009954 <_vfiprintf_r+0x220>)
 8009804:	f7f6 fd0c 	bl	8000220 <memchr>
 8009808:	9a04      	ldr	r2, [sp, #16]
 800980a:	b9d8      	cbnz	r0, 8009844 <_vfiprintf_r+0x110>
 800980c:	06d1      	lsls	r1, r2, #27
 800980e:	bf44      	itt	mi
 8009810:	2320      	movmi	r3, #32
 8009812:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009816:	0713      	lsls	r3, r2, #28
 8009818:	bf44      	itt	mi
 800981a:	232b      	movmi	r3, #43	; 0x2b
 800981c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009820:	f89a 3000 	ldrb.w	r3, [sl]
 8009824:	2b2a      	cmp	r3, #42	; 0x2a
 8009826:	d015      	beq.n	8009854 <_vfiprintf_r+0x120>
 8009828:	9a07      	ldr	r2, [sp, #28]
 800982a:	4654      	mov	r4, sl
 800982c:	2000      	movs	r0, #0
 800982e:	f04f 0c0a 	mov.w	ip, #10
 8009832:	4621      	mov	r1, r4
 8009834:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009838:	3b30      	subs	r3, #48	; 0x30
 800983a:	2b09      	cmp	r3, #9
 800983c:	d94d      	bls.n	80098da <_vfiprintf_r+0x1a6>
 800983e:	b1b0      	cbz	r0, 800986e <_vfiprintf_r+0x13a>
 8009840:	9207      	str	r2, [sp, #28]
 8009842:	e014      	b.n	800986e <_vfiprintf_r+0x13a>
 8009844:	eba0 0308 	sub.w	r3, r0, r8
 8009848:	fa09 f303 	lsl.w	r3, r9, r3
 800984c:	4313      	orrs	r3, r2
 800984e:	9304      	str	r3, [sp, #16]
 8009850:	46a2      	mov	sl, r4
 8009852:	e7d2      	b.n	80097fa <_vfiprintf_r+0xc6>
 8009854:	9b03      	ldr	r3, [sp, #12]
 8009856:	1d19      	adds	r1, r3, #4
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	9103      	str	r1, [sp, #12]
 800985c:	2b00      	cmp	r3, #0
 800985e:	bfbb      	ittet	lt
 8009860:	425b      	neglt	r3, r3
 8009862:	f042 0202 	orrlt.w	r2, r2, #2
 8009866:	9307      	strge	r3, [sp, #28]
 8009868:	9307      	strlt	r3, [sp, #28]
 800986a:	bfb8      	it	lt
 800986c:	9204      	strlt	r2, [sp, #16]
 800986e:	7823      	ldrb	r3, [r4, #0]
 8009870:	2b2e      	cmp	r3, #46	; 0x2e
 8009872:	d10c      	bne.n	800988e <_vfiprintf_r+0x15a>
 8009874:	7863      	ldrb	r3, [r4, #1]
 8009876:	2b2a      	cmp	r3, #42	; 0x2a
 8009878:	d134      	bne.n	80098e4 <_vfiprintf_r+0x1b0>
 800987a:	9b03      	ldr	r3, [sp, #12]
 800987c:	1d1a      	adds	r2, r3, #4
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	9203      	str	r2, [sp, #12]
 8009882:	2b00      	cmp	r3, #0
 8009884:	bfb8      	it	lt
 8009886:	f04f 33ff 	movlt.w	r3, #4294967295
 800988a:	3402      	adds	r4, #2
 800988c:	9305      	str	r3, [sp, #20]
 800988e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009964 <_vfiprintf_r+0x230>
 8009892:	7821      	ldrb	r1, [r4, #0]
 8009894:	2203      	movs	r2, #3
 8009896:	4650      	mov	r0, sl
 8009898:	f7f6 fcc2 	bl	8000220 <memchr>
 800989c:	b138      	cbz	r0, 80098ae <_vfiprintf_r+0x17a>
 800989e:	9b04      	ldr	r3, [sp, #16]
 80098a0:	eba0 000a 	sub.w	r0, r0, sl
 80098a4:	2240      	movs	r2, #64	; 0x40
 80098a6:	4082      	lsls	r2, r0
 80098a8:	4313      	orrs	r3, r2
 80098aa:	3401      	adds	r4, #1
 80098ac:	9304      	str	r3, [sp, #16]
 80098ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098b2:	4829      	ldr	r0, [pc, #164]	; (8009958 <_vfiprintf_r+0x224>)
 80098b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80098b8:	2206      	movs	r2, #6
 80098ba:	f7f6 fcb1 	bl	8000220 <memchr>
 80098be:	2800      	cmp	r0, #0
 80098c0:	d03f      	beq.n	8009942 <_vfiprintf_r+0x20e>
 80098c2:	4b26      	ldr	r3, [pc, #152]	; (800995c <_vfiprintf_r+0x228>)
 80098c4:	bb1b      	cbnz	r3, 800990e <_vfiprintf_r+0x1da>
 80098c6:	9b03      	ldr	r3, [sp, #12]
 80098c8:	3307      	adds	r3, #7
 80098ca:	f023 0307 	bic.w	r3, r3, #7
 80098ce:	3308      	adds	r3, #8
 80098d0:	9303      	str	r3, [sp, #12]
 80098d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098d4:	443b      	add	r3, r7
 80098d6:	9309      	str	r3, [sp, #36]	; 0x24
 80098d8:	e768      	b.n	80097ac <_vfiprintf_r+0x78>
 80098da:	fb0c 3202 	mla	r2, ip, r2, r3
 80098de:	460c      	mov	r4, r1
 80098e0:	2001      	movs	r0, #1
 80098e2:	e7a6      	b.n	8009832 <_vfiprintf_r+0xfe>
 80098e4:	2300      	movs	r3, #0
 80098e6:	3401      	adds	r4, #1
 80098e8:	9305      	str	r3, [sp, #20]
 80098ea:	4619      	mov	r1, r3
 80098ec:	f04f 0c0a 	mov.w	ip, #10
 80098f0:	4620      	mov	r0, r4
 80098f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098f6:	3a30      	subs	r2, #48	; 0x30
 80098f8:	2a09      	cmp	r2, #9
 80098fa:	d903      	bls.n	8009904 <_vfiprintf_r+0x1d0>
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d0c6      	beq.n	800988e <_vfiprintf_r+0x15a>
 8009900:	9105      	str	r1, [sp, #20]
 8009902:	e7c4      	b.n	800988e <_vfiprintf_r+0x15a>
 8009904:	fb0c 2101 	mla	r1, ip, r1, r2
 8009908:	4604      	mov	r4, r0
 800990a:	2301      	movs	r3, #1
 800990c:	e7f0      	b.n	80098f0 <_vfiprintf_r+0x1bc>
 800990e:	ab03      	add	r3, sp, #12
 8009910:	9300      	str	r3, [sp, #0]
 8009912:	462a      	mov	r2, r5
 8009914:	4b12      	ldr	r3, [pc, #72]	; (8009960 <_vfiprintf_r+0x22c>)
 8009916:	a904      	add	r1, sp, #16
 8009918:	4630      	mov	r0, r6
 800991a:	f7fd fb85 	bl	8007028 <_printf_float>
 800991e:	4607      	mov	r7, r0
 8009920:	1c78      	adds	r0, r7, #1
 8009922:	d1d6      	bne.n	80098d2 <_vfiprintf_r+0x19e>
 8009924:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009926:	07d9      	lsls	r1, r3, #31
 8009928:	d405      	bmi.n	8009936 <_vfiprintf_r+0x202>
 800992a:	89ab      	ldrh	r3, [r5, #12]
 800992c:	059a      	lsls	r2, r3, #22
 800992e:	d402      	bmi.n	8009936 <_vfiprintf_r+0x202>
 8009930:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009932:	f7fe f8fb 	bl	8007b2c <__retarget_lock_release_recursive>
 8009936:	89ab      	ldrh	r3, [r5, #12]
 8009938:	065b      	lsls	r3, r3, #25
 800993a:	f53f af1d 	bmi.w	8009778 <_vfiprintf_r+0x44>
 800993e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009940:	e71c      	b.n	800977c <_vfiprintf_r+0x48>
 8009942:	ab03      	add	r3, sp, #12
 8009944:	9300      	str	r3, [sp, #0]
 8009946:	462a      	mov	r2, r5
 8009948:	4b05      	ldr	r3, [pc, #20]	; (8009960 <_vfiprintf_r+0x22c>)
 800994a:	a904      	add	r1, sp, #16
 800994c:	4630      	mov	r0, r6
 800994e:	f7fd fe0f 	bl	8007570 <_printf_i>
 8009952:	e7e4      	b.n	800991e <_vfiprintf_r+0x1ea>
 8009954:	08009ecc 	.word	0x08009ecc
 8009958:	08009ed6 	.word	0x08009ed6
 800995c:	08007029 	.word	0x08007029
 8009960:	08009711 	.word	0x08009711
 8009964:	08009ed2 	.word	0x08009ed2

08009968 <__swbuf_r>:
 8009968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800996a:	460e      	mov	r6, r1
 800996c:	4614      	mov	r4, r2
 800996e:	4605      	mov	r5, r0
 8009970:	b118      	cbz	r0, 800997a <__swbuf_r+0x12>
 8009972:	6a03      	ldr	r3, [r0, #32]
 8009974:	b90b      	cbnz	r3, 800997a <__swbuf_r+0x12>
 8009976:	f7fd ffa9 	bl	80078cc <__sinit>
 800997a:	69a3      	ldr	r3, [r4, #24]
 800997c:	60a3      	str	r3, [r4, #8]
 800997e:	89a3      	ldrh	r3, [r4, #12]
 8009980:	071a      	lsls	r2, r3, #28
 8009982:	d525      	bpl.n	80099d0 <__swbuf_r+0x68>
 8009984:	6923      	ldr	r3, [r4, #16]
 8009986:	b31b      	cbz	r3, 80099d0 <__swbuf_r+0x68>
 8009988:	6823      	ldr	r3, [r4, #0]
 800998a:	6922      	ldr	r2, [r4, #16]
 800998c:	1a98      	subs	r0, r3, r2
 800998e:	6963      	ldr	r3, [r4, #20]
 8009990:	b2f6      	uxtb	r6, r6
 8009992:	4283      	cmp	r3, r0
 8009994:	4637      	mov	r7, r6
 8009996:	dc04      	bgt.n	80099a2 <__swbuf_r+0x3a>
 8009998:	4621      	mov	r1, r4
 800999a:	4628      	mov	r0, r5
 800999c:	f7ff fdac 	bl	80094f8 <_fflush_r>
 80099a0:	b9e0      	cbnz	r0, 80099dc <__swbuf_r+0x74>
 80099a2:	68a3      	ldr	r3, [r4, #8]
 80099a4:	3b01      	subs	r3, #1
 80099a6:	60a3      	str	r3, [r4, #8]
 80099a8:	6823      	ldr	r3, [r4, #0]
 80099aa:	1c5a      	adds	r2, r3, #1
 80099ac:	6022      	str	r2, [r4, #0]
 80099ae:	701e      	strb	r6, [r3, #0]
 80099b0:	6962      	ldr	r2, [r4, #20]
 80099b2:	1c43      	adds	r3, r0, #1
 80099b4:	429a      	cmp	r2, r3
 80099b6:	d004      	beq.n	80099c2 <__swbuf_r+0x5a>
 80099b8:	89a3      	ldrh	r3, [r4, #12]
 80099ba:	07db      	lsls	r3, r3, #31
 80099bc:	d506      	bpl.n	80099cc <__swbuf_r+0x64>
 80099be:	2e0a      	cmp	r6, #10
 80099c0:	d104      	bne.n	80099cc <__swbuf_r+0x64>
 80099c2:	4621      	mov	r1, r4
 80099c4:	4628      	mov	r0, r5
 80099c6:	f7ff fd97 	bl	80094f8 <_fflush_r>
 80099ca:	b938      	cbnz	r0, 80099dc <__swbuf_r+0x74>
 80099cc:	4638      	mov	r0, r7
 80099ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099d0:	4621      	mov	r1, r4
 80099d2:	4628      	mov	r0, r5
 80099d4:	f000 f806 	bl	80099e4 <__swsetup_r>
 80099d8:	2800      	cmp	r0, #0
 80099da:	d0d5      	beq.n	8009988 <__swbuf_r+0x20>
 80099dc:	f04f 37ff 	mov.w	r7, #4294967295
 80099e0:	e7f4      	b.n	80099cc <__swbuf_r+0x64>
	...

080099e4 <__swsetup_r>:
 80099e4:	b538      	push	{r3, r4, r5, lr}
 80099e6:	4b2a      	ldr	r3, [pc, #168]	; (8009a90 <__swsetup_r+0xac>)
 80099e8:	4605      	mov	r5, r0
 80099ea:	6818      	ldr	r0, [r3, #0]
 80099ec:	460c      	mov	r4, r1
 80099ee:	b118      	cbz	r0, 80099f8 <__swsetup_r+0x14>
 80099f0:	6a03      	ldr	r3, [r0, #32]
 80099f2:	b90b      	cbnz	r3, 80099f8 <__swsetup_r+0x14>
 80099f4:	f7fd ff6a 	bl	80078cc <__sinit>
 80099f8:	89a3      	ldrh	r3, [r4, #12]
 80099fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80099fe:	0718      	lsls	r0, r3, #28
 8009a00:	d422      	bmi.n	8009a48 <__swsetup_r+0x64>
 8009a02:	06d9      	lsls	r1, r3, #27
 8009a04:	d407      	bmi.n	8009a16 <__swsetup_r+0x32>
 8009a06:	2309      	movs	r3, #9
 8009a08:	602b      	str	r3, [r5, #0]
 8009a0a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009a0e:	81a3      	strh	r3, [r4, #12]
 8009a10:	f04f 30ff 	mov.w	r0, #4294967295
 8009a14:	e034      	b.n	8009a80 <__swsetup_r+0x9c>
 8009a16:	0758      	lsls	r0, r3, #29
 8009a18:	d512      	bpl.n	8009a40 <__swsetup_r+0x5c>
 8009a1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a1c:	b141      	cbz	r1, 8009a30 <__swsetup_r+0x4c>
 8009a1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a22:	4299      	cmp	r1, r3
 8009a24:	d002      	beq.n	8009a2c <__swsetup_r+0x48>
 8009a26:	4628      	mov	r0, r5
 8009a28:	f7fe ff0c 	bl	8008844 <_free_r>
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	6363      	str	r3, [r4, #52]	; 0x34
 8009a30:	89a3      	ldrh	r3, [r4, #12]
 8009a32:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009a36:	81a3      	strh	r3, [r4, #12]
 8009a38:	2300      	movs	r3, #0
 8009a3a:	6063      	str	r3, [r4, #4]
 8009a3c:	6923      	ldr	r3, [r4, #16]
 8009a3e:	6023      	str	r3, [r4, #0]
 8009a40:	89a3      	ldrh	r3, [r4, #12]
 8009a42:	f043 0308 	orr.w	r3, r3, #8
 8009a46:	81a3      	strh	r3, [r4, #12]
 8009a48:	6923      	ldr	r3, [r4, #16]
 8009a4a:	b94b      	cbnz	r3, 8009a60 <__swsetup_r+0x7c>
 8009a4c:	89a3      	ldrh	r3, [r4, #12]
 8009a4e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009a52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a56:	d003      	beq.n	8009a60 <__swsetup_r+0x7c>
 8009a58:	4621      	mov	r1, r4
 8009a5a:	4628      	mov	r0, r5
 8009a5c:	f000 f884 	bl	8009b68 <__smakebuf_r>
 8009a60:	89a0      	ldrh	r0, [r4, #12]
 8009a62:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a66:	f010 0301 	ands.w	r3, r0, #1
 8009a6a:	d00a      	beq.n	8009a82 <__swsetup_r+0x9e>
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	60a3      	str	r3, [r4, #8]
 8009a70:	6963      	ldr	r3, [r4, #20]
 8009a72:	425b      	negs	r3, r3
 8009a74:	61a3      	str	r3, [r4, #24]
 8009a76:	6923      	ldr	r3, [r4, #16]
 8009a78:	b943      	cbnz	r3, 8009a8c <__swsetup_r+0xa8>
 8009a7a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009a7e:	d1c4      	bne.n	8009a0a <__swsetup_r+0x26>
 8009a80:	bd38      	pop	{r3, r4, r5, pc}
 8009a82:	0781      	lsls	r1, r0, #30
 8009a84:	bf58      	it	pl
 8009a86:	6963      	ldrpl	r3, [r4, #20]
 8009a88:	60a3      	str	r3, [r4, #8]
 8009a8a:	e7f4      	b.n	8009a76 <__swsetup_r+0x92>
 8009a8c:	2000      	movs	r0, #0
 8009a8e:	e7f7      	b.n	8009a80 <__swsetup_r+0x9c>
 8009a90:	200000c4 	.word	0x200000c4

08009a94 <_raise_r>:
 8009a94:	291f      	cmp	r1, #31
 8009a96:	b538      	push	{r3, r4, r5, lr}
 8009a98:	4604      	mov	r4, r0
 8009a9a:	460d      	mov	r5, r1
 8009a9c:	d904      	bls.n	8009aa8 <_raise_r+0x14>
 8009a9e:	2316      	movs	r3, #22
 8009aa0:	6003      	str	r3, [r0, #0]
 8009aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8009aa6:	bd38      	pop	{r3, r4, r5, pc}
 8009aa8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009aaa:	b112      	cbz	r2, 8009ab2 <_raise_r+0x1e>
 8009aac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ab0:	b94b      	cbnz	r3, 8009ac6 <_raise_r+0x32>
 8009ab2:	4620      	mov	r0, r4
 8009ab4:	f000 f830 	bl	8009b18 <_getpid_r>
 8009ab8:	462a      	mov	r2, r5
 8009aba:	4601      	mov	r1, r0
 8009abc:	4620      	mov	r0, r4
 8009abe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ac2:	f000 b817 	b.w	8009af4 <_kill_r>
 8009ac6:	2b01      	cmp	r3, #1
 8009ac8:	d00a      	beq.n	8009ae0 <_raise_r+0x4c>
 8009aca:	1c59      	adds	r1, r3, #1
 8009acc:	d103      	bne.n	8009ad6 <_raise_r+0x42>
 8009ace:	2316      	movs	r3, #22
 8009ad0:	6003      	str	r3, [r0, #0]
 8009ad2:	2001      	movs	r0, #1
 8009ad4:	e7e7      	b.n	8009aa6 <_raise_r+0x12>
 8009ad6:	2400      	movs	r4, #0
 8009ad8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009adc:	4628      	mov	r0, r5
 8009ade:	4798      	blx	r3
 8009ae0:	2000      	movs	r0, #0
 8009ae2:	e7e0      	b.n	8009aa6 <_raise_r+0x12>

08009ae4 <raise>:
 8009ae4:	4b02      	ldr	r3, [pc, #8]	; (8009af0 <raise+0xc>)
 8009ae6:	4601      	mov	r1, r0
 8009ae8:	6818      	ldr	r0, [r3, #0]
 8009aea:	f7ff bfd3 	b.w	8009a94 <_raise_r>
 8009aee:	bf00      	nop
 8009af0:	200000c4 	.word	0x200000c4

08009af4 <_kill_r>:
 8009af4:	b538      	push	{r3, r4, r5, lr}
 8009af6:	4d07      	ldr	r5, [pc, #28]	; (8009b14 <_kill_r+0x20>)
 8009af8:	2300      	movs	r3, #0
 8009afa:	4604      	mov	r4, r0
 8009afc:	4608      	mov	r0, r1
 8009afe:	4611      	mov	r1, r2
 8009b00:	602b      	str	r3, [r5, #0]
 8009b02:	f7f8 fb33 	bl	800216c <_kill>
 8009b06:	1c43      	adds	r3, r0, #1
 8009b08:	d102      	bne.n	8009b10 <_kill_r+0x1c>
 8009b0a:	682b      	ldr	r3, [r5, #0]
 8009b0c:	b103      	cbz	r3, 8009b10 <_kill_r+0x1c>
 8009b0e:	6023      	str	r3, [r4, #0]
 8009b10:	bd38      	pop	{r3, r4, r5, pc}
 8009b12:	bf00      	nop
 8009b14:	20000e70 	.word	0x20000e70

08009b18 <_getpid_r>:
 8009b18:	f7f8 bb26 	b.w	8002168 <_getpid>

08009b1c <__swhatbuf_r>:
 8009b1c:	b570      	push	{r4, r5, r6, lr}
 8009b1e:	460c      	mov	r4, r1
 8009b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b24:	2900      	cmp	r1, #0
 8009b26:	b096      	sub	sp, #88	; 0x58
 8009b28:	4615      	mov	r5, r2
 8009b2a:	461e      	mov	r6, r3
 8009b2c:	da0d      	bge.n	8009b4a <__swhatbuf_r+0x2e>
 8009b2e:	89a3      	ldrh	r3, [r4, #12]
 8009b30:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009b34:	f04f 0100 	mov.w	r1, #0
 8009b38:	bf0c      	ite	eq
 8009b3a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009b3e:	2340      	movne	r3, #64	; 0x40
 8009b40:	2000      	movs	r0, #0
 8009b42:	6031      	str	r1, [r6, #0]
 8009b44:	602b      	str	r3, [r5, #0]
 8009b46:	b016      	add	sp, #88	; 0x58
 8009b48:	bd70      	pop	{r4, r5, r6, pc}
 8009b4a:	466a      	mov	r2, sp
 8009b4c:	f000 f848 	bl	8009be0 <_fstat_r>
 8009b50:	2800      	cmp	r0, #0
 8009b52:	dbec      	blt.n	8009b2e <__swhatbuf_r+0x12>
 8009b54:	9901      	ldr	r1, [sp, #4]
 8009b56:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009b5a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009b5e:	4259      	negs	r1, r3
 8009b60:	4159      	adcs	r1, r3
 8009b62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b66:	e7eb      	b.n	8009b40 <__swhatbuf_r+0x24>

08009b68 <__smakebuf_r>:
 8009b68:	898b      	ldrh	r3, [r1, #12]
 8009b6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009b6c:	079d      	lsls	r5, r3, #30
 8009b6e:	4606      	mov	r6, r0
 8009b70:	460c      	mov	r4, r1
 8009b72:	d507      	bpl.n	8009b84 <__smakebuf_r+0x1c>
 8009b74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009b78:	6023      	str	r3, [r4, #0]
 8009b7a:	6123      	str	r3, [r4, #16]
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	6163      	str	r3, [r4, #20]
 8009b80:	b002      	add	sp, #8
 8009b82:	bd70      	pop	{r4, r5, r6, pc}
 8009b84:	ab01      	add	r3, sp, #4
 8009b86:	466a      	mov	r2, sp
 8009b88:	f7ff ffc8 	bl	8009b1c <__swhatbuf_r>
 8009b8c:	9900      	ldr	r1, [sp, #0]
 8009b8e:	4605      	mov	r5, r0
 8009b90:	4630      	mov	r0, r6
 8009b92:	f7fe fecb 	bl	800892c <_malloc_r>
 8009b96:	b948      	cbnz	r0, 8009bac <__smakebuf_r+0x44>
 8009b98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b9c:	059a      	lsls	r2, r3, #22
 8009b9e:	d4ef      	bmi.n	8009b80 <__smakebuf_r+0x18>
 8009ba0:	f023 0303 	bic.w	r3, r3, #3
 8009ba4:	f043 0302 	orr.w	r3, r3, #2
 8009ba8:	81a3      	strh	r3, [r4, #12]
 8009baa:	e7e3      	b.n	8009b74 <__smakebuf_r+0xc>
 8009bac:	89a3      	ldrh	r3, [r4, #12]
 8009bae:	6020      	str	r0, [r4, #0]
 8009bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bb4:	81a3      	strh	r3, [r4, #12]
 8009bb6:	9b00      	ldr	r3, [sp, #0]
 8009bb8:	6163      	str	r3, [r4, #20]
 8009bba:	9b01      	ldr	r3, [sp, #4]
 8009bbc:	6120      	str	r0, [r4, #16]
 8009bbe:	b15b      	cbz	r3, 8009bd8 <__smakebuf_r+0x70>
 8009bc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009bc4:	4630      	mov	r0, r6
 8009bc6:	f000 f81d 	bl	8009c04 <_isatty_r>
 8009bca:	b128      	cbz	r0, 8009bd8 <__smakebuf_r+0x70>
 8009bcc:	89a3      	ldrh	r3, [r4, #12]
 8009bce:	f023 0303 	bic.w	r3, r3, #3
 8009bd2:	f043 0301 	orr.w	r3, r3, #1
 8009bd6:	81a3      	strh	r3, [r4, #12]
 8009bd8:	89a3      	ldrh	r3, [r4, #12]
 8009bda:	431d      	orrs	r5, r3
 8009bdc:	81a5      	strh	r5, [r4, #12]
 8009bde:	e7cf      	b.n	8009b80 <__smakebuf_r+0x18>

08009be0 <_fstat_r>:
 8009be0:	b538      	push	{r3, r4, r5, lr}
 8009be2:	4d07      	ldr	r5, [pc, #28]	; (8009c00 <_fstat_r+0x20>)
 8009be4:	2300      	movs	r3, #0
 8009be6:	4604      	mov	r4, r0
 8009be8:	4608      	mov	r0, r1
 8009bea:	4611      	mov	r1, r2
 8009bec:	602b      	str	r3, [r5, #0]
 8009bee:	f7f8 fae8 	bl	80021c2 <_fstat>
 8009bf2:	1c43      	adds	r3, r0, #1
 8009bf4:	d102      	bne.n	8009bfc <_fstat_r+0x1c>
 8009bf6:	682b      	ldr	r3, [r5, #0]
 8009bf8:	b103      	cbz	r3, 8009bfc <_fstat_r+0x1c>
 8009bfa:	6023      	str	r3, [r4, #0]
 8009bfc:	bd38      	pop	{r3, r4, r5, pc}
 8009bfe:	bf00      	nop
 8009c00:	20000e70 	.word	0x20000e70

08009c04 <_isatty_r>:
 8009c04:	b538      	push	{r3, r4, r5, lr}
 8009c06:	4d06      	ldr	r5, [pc, #24]	; (8009c20 <_isatty_r+0x1c>)
 8009c08:	2300      	movs	r3, #0
 8009c0a:	4604      	mov	r4, r0
 8009c0c:	4608      	mov	r0, r1
 8009c0e:	602b      	str	r3, [r5, #0]
 8009c10:	f7f8 fadc 	bl	80021cc <_isatty>
 8009c14:	1c43      	adds	r3, r0, #1
 8009c16:	d102      	bne.n	8009c1e <_isatty_r+0x1a>
 8009c18:	682b      	ldr	r3, [r5, #0]
 8009c1a:	b103      	cbz	r3, 8009c1e <_isatty_r+0x1a>
 8009c1c:	6023      	str	r3, [r4, #0]
 8009c1e:	bd38      	pop	{r3, r4, r5, pc}
 8009c20:	20000e70 	.word	0x20000e70

08009c24 <_init>:
 8009c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c26:	bf00      	nop
 8009c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c2a:	bc08      	pop	{r3}
 8009c2c:	469e      	mov	lr, r3
 8009c2e:	4770      	bx	lr

08009c30 <_fini>:
 8009c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c32:	bf00      	nop
 8009c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c36:	bc08      	pop	{r3}
 8009c38:	469e      	mov	lr, r3
 8009c3a:	4770      	bx	lr
