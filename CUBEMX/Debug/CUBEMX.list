
CUBEMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f0e8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  0800f2c8  0800f2c8  0001f2c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f3b8  0800f3b8  00020338  2**0
                  CONTENTS
  4 .ARM          00000008  0800f3b8  0800f3b8  0001f3b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f3c0  0800f3c0  00020338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f3c0  0800f3c0  0001f3c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f3c4  0800f3c4  0001f3c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000338  20000000  0800f3c8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b2c  20000338  0800f700  00020338  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20004e64  0800f700  00024e64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020338  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020368  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003055a  00000000  00000000  000203ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000063c4  00000000  00000000  00050905  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000024d0  00000000  00000000  00056cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001c4a  00000000  00000000  000591a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002668c  00000000  00000000  0005adea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00030d10  00000000  00000000  00081476  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f1c55  00000000  00000000  000b2186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009fbc  00000000  00000000  001a3ddc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001add98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000338 	.word	0x20000338
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800f2b0 	.word	0x0800f2b0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000033c 	.word	0x2000033c
 800021c:	0800f2b0 	.word	0x0800f2b0

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__gedf2>:
 80009bc:	f04f 3cff 	mov.w	ip, #4294967295
 80009c0:	e006      	b.n	80009d0 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__ledf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	e002      	b.n	80009d0 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__cmpdf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e0:	bf18      	it	ne
 80009e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009e6:	d01b      	beq.n	8000a20 <__cmpdf2+0x54>
 80009e8:	b001      	add	sp, #4
 80009ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ee:	bf0c      	ite	eq
 80009f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009f4:	ea91 0f03 	teqne	r1, r3
 80009f8:	bf02      	ittt	eq
 80009fa:	ea90 0f02 	teqeq	r0, r2
 80009fe:	2000      	moveq	r0, #0
 8000a00:	4770      	bxeq	lr
 8000a02:	f110 0f00 	cmn.w	r0, #0
 8000a06:	ea91 0f03 	teq	r1, r3
 8000a0a:	bf58      	it	pl
 8000a0c:	4299      	cmppl	r1, r3
 8000a0e:	bf08      	it	eq
 8000a10:	4290      	cmpeq	r0, r2
 8000a12:	bf2c      	ite	cs
 8000a14:	17d8      	asrcs	r0, r3, #31
 8000a16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a1a:	f040 0001 	orr.w	r0, r0, #1
 8000a1e:	4770      	bx	lr
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__cmpdf2+0x64>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d107      	bne.n	8000a40 <__cmpdf2+0x74>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d1d6      	bne.n	80009e8 <__cmpdf2+0x1c>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d0d3      	beq.n	80009e8 <__cmpdf2+0x1c>
 8000a40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdrcmple>:
 8000a48:	4684      	mov	ip, r0
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4662      	mov	r2, ip
 8000a4e:	468c      	mov	ip, r1
 8000a50:	4619      	mov	r1, r3
 8000a52:	4663      	mov	r3, ip
 8000a54:	e000      	b.n	8000a58 <__aeabi_cdcmpeq>
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdcmpeq>:
 8000a58:	b501      	push	{r0, lr}
 8000a5a:	f7ff ffb7 	bl	80009cc <__cmpdf2>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	bf48      	it	mi
 8000a62:	f110 0f00 	cmnmi.w	r0, #0
 8000a66:	bd01      	pop	{r0, pc}

08000a68 <__aeabi_dcmpeq>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff fff4 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a70:	bf0c      	ite	eq
 8000a72:	2001      	moveq	r0, #1
 8000a74:	2000      	movne	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmplt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffea 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmple>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffe0 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a98:	bf94      	ite	ls
 8000a9a:	2001      	movls	r0, #1
 8000a9c:	2000      	movhi	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpge>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffce 	bl	8000a48 <__aeabi_cdrcmple>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpgt>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffc4 	bl	8000a48 <__aeabi_cdrcmple>
 8000ac0:	bf34      	ite	cc
 8000ac2:	2001      	movcc	r0, #1
 8000ac4:	2000      	movcs	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_d2iz>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d215      	bcs.n	8000b02 <__aeabi_d2iz+0x36>
 8000ad6:	d511      	bpl.n	8000afc <__aeabi_d2iz+0x30>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d912      	bls.n	8000b08 <__aeabi_d2iz+0x3c>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000af2:	fa23 f002 	lsr.w	r0, r3, r2
 8000af6:	bf18      	it	ne
 8000af8:	4240      	negne	r0, r0
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d105      	bne.n	8000b14 <__aeabi_d2iz+0x48>
 8000b08:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	bf08      	it	eq
 8000b0e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2uiz>:
 8000b1c:	004a      	lsls	r2, r1, #1
 8000b1e:	d211      	bcs.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d211      	bcs.n	8000b4a <__aeabi_d2uiz+0x2e>
 8000b26:	d50d      	bpl.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d40e      	bmi.n	8000b50 <__aeabi_d2uiz+0x34>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	4770      	bx	lr
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4e:	d102      	bne.n	8000b56 <__aeabi_d2uiz+0x3a>
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295
 8000b54:	4770      	bx	lr
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	4770      	bx	lr

08000b5c <__aeabi_uldivmod>:
 8000b5c:	b953      	cbnz	r3, 8000b74 <__aeabi_uldivmod+0x18>
 8000b5e:	b94a      	cbnz	r2, 8000b74 <__aeabi_uldivmod+0x18>
 8000b60:	2900      	cmp	r1, #0
 8000b62:	bf08      	it	eq
 8000b64:	2800      	cmpeq	r0, #0
 8000b66:	bf1c      	itt	ne
 8000b68:	f04f 31ff 	movne.w	r1, #4294967295
 8000b6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b70:	f000 b970 	b.w	8000e54 <__aeabi_idiv0>
 8000b74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b7c:	f000 f806 	bl	8000b8c <__udivmoddi4>
 8000b80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b88:	b004      	add	sp, #16
 8000b8a:	4770      	bx	lr

08000b8c <__udivmoddi4>:
 8000b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b90:	9e08      	ldr	r6, [sp, #32]
 8000b92:	460d      	mov	r5, r1
 8000b94:	4604      	mov	r4, r0
 8000b96:	460f      	mov	r7, r1
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d14a      	bne.n	8000c32 <__udivmoddi4+0xa6>
 8000b9c:	428a      	cmp	r2, r1
 8000b9e:	4694      	mov	ip, r2
 8000ba0:	d965      	bls.n	8000c6e <__udivmoddi4+0xe2>
 8000ba2:	fab2 f382 	clz	r3, r2
 8000ba6:	b143      	cbz	r3, 8000bba <__udivmoddi4+0x2e>
 8000ba8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bac:	f1c3 0220 	rsb	r2, r3, #32
 8000bb0:	409f      	lsls	r7, r3
 8000bb2:	fa20 f202 	lsr.w	r2, r0, r2
 8000bb6:	4317      	orrs	r7, r2
 8000bb8:	409c      	lsls	r4, r3
 8000bba:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bbe:	fa1f f58c 	uxth.w	r5, ip
 8000bc2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bc6:	0c22      	lsrs	r2, r4, #16
 8000bc8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bcc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bd0:	fb01 f005 	mul.w	r0, r1, r5
 8000bd4:	4290      	cmp	r0, r2
 8000bd6:	d90a      	bls.n	8000bee <__udivmoddi4+0x62>
 8000bd8:	eb1c 0202 	adds.w	r2, ip, r2
 8000bdc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000be0:	f080 811c 	bcs.w	8000e1c <__udivmoddi4+0x290>
 8000be4:	4290      	cmp	r0, r2
 8000be6:	f240 8119 	bls.w	8000e1c <__udivmoddi4+0x290>
 8000bea:	3902      	subs	r1, #2
 8000bec:	4462      	add	r2, ip
 8000bee:	1a12      	subs	r2, r2, r0
 8000bf0:	b2a4      	uxth	r4, r4
 8000bf2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bf6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bfa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bfe:	fb00 f505 	mul.w	r5, r0, r5
 8000c02:	42a5      	cmp	r5, r4
 8000c04:	d90a      	bls.n	8000c1c <__udivmoddi4+0x90>
 8000c06:	eb1c 0404 	adds.w	r4, ip, r4
 8000c0a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c0e:	f080 8107 	bcs.w	8000e20 <__udivmoddi4+0x294>
 8000c12:	42a5      	cmp	r5, r4
 8000c14:	f240 8104 	bls.w	8000e20 <__udivmoddi4+0x294>
 8000c18:	4464      	add	r4, ip
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c20:	1b64      	subs	r4, r4, r5
 8000c22:	2100      	movs	r1, #0
 8000c24:	b11e      	cbz	r6, 8000c2e <__udivmoddi4+0xa2>
 8000c26:	40dc      	lsrs	r4, r3
 8000c28:	2300      	movs	r3, #0
 8000c2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d908      	bls.n	8000c48 <__udivmoddi4+0xbc>
 8000c36:	2e00      	cmp	r6, #0
 8000c38:	f000 80ed 	beq.w	8000e16 <__udivmoddi4+0x28a>
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c42:	4608      	mov	r0, r1
 8000c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c48:	fab3 f183 	clz	r1, r3
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	d149      	bne.n	8000ce4 <__udivmoddi4+0x158>
 8000c50:	42ab      	cmp	r3, r5
 8000c52:	d302      	bcc.n	8000c5a <__udivmoddi4+0xce>
 8000c54:	4282      	cmp	r2, r0
 8000c56:	f200 80f8 	bhi.w	8000e4a <__udivmoddi4+0x2be>
 8000c5a:	1a84      	subs	r4, r0, r2
 8000c5c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c60:	2001      	movs	r0, #1
 8000c62:	4617      	mov	r7, r2
 8000c64:	2e00      	cmp	r6, #0
 8000c66:	d0e2      	beq.n	8000c2e <__udivmoddi4+0xa2>
 8000c68:	e9c6 4700 	strd	r4, r7, [r6]
 8000c6c:	e7df      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000c6e:	b902      	cbnz	r2, 8000c72 <__udivmoddi4+0xe6>
 8000c70:	deff      	udf	#255	; 0xff
 8000c72:	fab2 f382 	clz	r3, r2
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	f040 8090 	bne.w	8000d9c <__udivmoddi4+0x210>
 8000c7c:	1a8a      	subs	r2, r1, r2
 8000c7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c82:	fa1f fe8c 	uxth.w	lr, ip
 8000c86:	2101      	movs	r1, #1
 8000c88:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c8c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c90:	0c22      	lsrs	r2, r4, #16
 8000c92:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c96:	fb0e f005 	mul.w	r0, lr, r5
 8000c9a:	4290      	cmp	r0, r2
 8000c9c:	d908      	bls.n	8000cb0 <__udivmoddi4+0x124>
 8000c9e:	eb1c 0202 	adds.w	r2, ip, r2
 8000ca2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ca6:	d202      	bcs.n	8000cae <__udivmoddi4+0x122>
 8000ca8:	4290      	cmp	r0, r2
 8000caa:	f200 80cb 	bhi.w	8000e44 <__udivmoddi4+0x2b8>
 8000cae:	4645      	mov	r5, r8
 8000cb0:	1a12      	subs	r2, r2, r0
 8000cb2:	b2a4      	uxth	r4, r4
 8000cb4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cb8:	fb07 2210 	mls	r2, r7, r0, r2
 8000cbc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc4:	45a6      	cmp	lr, r4
 8000cc6:	d908      	bls.n	8000cda <__udivmoddi4+0x14e>
 8000cc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ccc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cd0:	d202      	bcs.n	8000cd8 <__udivmoddi4+0x14c>
 8000cd2:	45a6      	cmp	lr, r4
 8000cd4:	f200 80bb 	bhi.w	8000e4e <__udivmoddi4+0x2c2>
 8000cd8:	4610      	mov	r0, r2
 8000cda:	eba4 040e 	sub.w	r4, r4, lr
 8000cde:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000ce2:	e79f      	b.n	8000c24 <__udivmoddi4+0x98>
 8000ce4:	f1c1 0720 	rsb	r7, r1, #32
 8000ce8:	408b      	lsls	r3, r1
 8000cea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cf2:	fa05 f401 	lsl.w	r4, r5, r1
 8000cf6:	fa20 f307 	lsr.w	r3, r0, r7
 8000cfa:	40fd      	lsrs	r5, r7
 8000cfc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d00:	4323      	orrs	r3, r4
 8000d02:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d0e:	0c1c      	lsrs	r4, r3, #16
 8000d10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d14:	fb08 f50e 	mul.w	r5, r8, lr
 8000d18:	42a5      	cmp	r5, r4
 8000d1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d1e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d22:	d90b      	bls.n	8000d3c <__udivmoddi4+0x1b0>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d2c:	f080 8088 	bcs.w	8000e40 <__udivmoddi4+0x2b4>
 8000d30:	42a5      	cmp	r5, r4
 8000d32:	f240 8085 	bls.w	8000e40 <__udivmoddi4+0x2b4>
 8000d36:	f1a8 0802 	sub.w	r8, r8, #2
 8000d3a:	4464      	add	r4, ip
 8000d3c:	1b64      	subs	r4, r4, r5
 8000d3e:	b29d      	uxth	r5, r3
 8000d40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d44:	fb09 4413 	mls	r4, r9, r3, r4
 8000d48:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d4c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x1da>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d5c:	d26c      	bcs.n	8000e38 <__udivmoddi4+0x2ac>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	d96a      	bls.n	8000e38 <__udivmoddi4+0x2ac>
 8000d62:	3b02      	subs	r3, #2
 8000d64:	4464      	add	r4, ip
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	42ac      	cmp	r4, r5
 8000d74:	46c8      	mov	r8, r9
 8000d76:	46ae      	mov	lr, r5
 8000d78:	d356      	bcc.n	8000e28 <__udivmoddi4+0x29c>
 8000d7a:	d053      	beq.n	8000e24 <__udivmoddi4+0x298>
 8000d7c:	b156      	cbz	r6, 8000d94 <__udivmoddi4+0x208>
 8000d7e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d82:	eb64 040e 	sbc.w	r4, r4, lr
 8000d86:	fa04 f707 	lsl.w	r7, r4, r7
 8000d8a:	40ca      	lsrs	r2, r1
 8000d8c:	40cc      	lsrs	r4, r1
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	e9c6 7400 	strd	r7, r4, [r6]
 8000d94:	4618      	mov	r0, r3
 8000d96:	2100      	movs	r1, #0
 8000d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9c:	f1c3 0120 	rsb	r1, r3, #32
 8000da0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000da4:	fa20 f201 	lsr.w	r2, r0, r1
 8000da8:	fa25 f101 	lsr.w	r1, r5, r1
 8000dac:	409d      	lsls	r5, r3
 8000dae:	432a      	orrs	r2, r5
 8000db0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db4:	fa1f fe8c 	uxth.w	lr, ip
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1510 	mls	r5, r7, r0, r1
 8000dc0:	0c11      	lsrs	r1, r2, #16
 8000dc2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dc6:	fb00 f50e 	mul.w	r5, r0, lr
 8000dca:	428d      	cmp	r5, r1
 8000dcc:	fa04 f403 	lsl.w	r4, r4, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x258>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dda:	d22f      	bcs.n	8000e3c <__udivmoddi4+0x2b0>
 8000ddc:	428d      	cmp	r5, r1
 8000dde:	d92d      	bls.n	8000e3c <__udivmoddi4+0x2b0>
 8000de0:	3802      	subs	r0, #2
 8000de2:	4461      	add	r1, ip
 8000de4:	1b49      	subs	r1, r1, r5
 8000de6:	b292      	uxth	r2, r2
 8000de8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000dec:	fb07 1115 	mls	r1, r7, r5, r1
 8000df0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000df4:	fb05 f10e 	mul.w	r1, r5, lr
 8000df8:	4291      	cmp	r1, r2
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x282>
 8000dfc:	eb1c 0202 	adds.w	r2, ip, r2
 8000e00:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e04:	d216      	bcs.n	8000e34 <__udivmoddi4+0x2a8>
 8000e06:	4291      	cmp	r1, r2
 8000e08:	d914      	bls.n	8000e34 <__udivmoddi4+0x2a8>
 8000e0a:	3d02      	subs	r5, #2
 8000e0c:	4462      	add	r2, ip
 8000e0e:	1a52      	subs	r2, r2, r1
 8000e10:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e14:	e738      	b.n	8000c88 <__udivmoddi4+0xfc>
 8000e16:	4631      	mov	r1, r6
 8000e18:	4630      	mov	r0, r6
 8000e1a:	e708      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000e1c:	4639      	mov	r1, r7
 8000e1e:	e6e6      	b.n	8000bee <__udivmoddi4+0x62>
 8000e20:	4610      	mov	r0, r2
 8000e22:	e6fb      	b.n	8000c1c <__udivmoddi4+0x90>
 8000e24:	4548      	cmp	r0, r9
 8000e26:	d2a9      	bcs.n	8000d7c <__udivmoddi4+0x1f0>
 8000e28:	ebb9 0802 	subs.w	r8, r9, r2
 8000e2c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e30:	3b01      	subs	r3, #1
 8000e32:	e7a3      	b.n	8000d7c <__udivmoddi4+0x1f0>
 8000e34:	4645      	mov	r5, r8
 8000e36:	e7ea      	b.n	8000e0e <__udivmoddi4+0x282>
 8000e38:	462b      	mov	r3, r5
 8000e3a:	e794      	b.n	8000d66 <__udivmoddi4+0x1da>
 8000e3c:	4640      	mov	r0, r8
 8000e3e:	e7d1      	b.n	8000de4 <__udivmoddi4+0x258>
 8000e40:	46d0      	mov	r8, sl
 8000e42:	e77b      	b.n	8000d3c <__udivmoddi4+0x1b0>
 8000e44:	3d02      	subs	r5, #2
 8000e46:	4462      	add	r2, ip
 8000e48:	e732      	b.n	8000cb0 <__udivmoddi4+0x124>
 8000e4a:	4608      	mov	r0, r1
 8000e4c:	e70a      	b.n	8000c64 <__udivmoddi4+0xd8>
 8000e4e:	4464      	add	r4, ip
 8000e50:	3802      	subs	r0, #2
 8000e52:	e742      	b.n	8000cda <__udivmoddi4+0x14e>

08000e54 <__aeabi_idiv0>:
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop

08000e58 <CTRL_init>:

//angle PID


//initialization
void CTRL_init(void){
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
	//create thread
//	CTRL_attr.name = "Control thread";
//	CTRL_attr.priority = 8;
//	CTRL_thread_id = osThreadNew((void *)CTRL_thread, NULL, &CTRL_attr);
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
	...

08000e68 <CTRL_init_PWM>:

//thread
void CTRL_init_PWM(void){
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) Error_Handler(); //error
 8000e6e:	2100      	movs	r1, #0
 8000e70:	4823      	ldr	r0, [pc, #140]	; (8000f00 <CTRL_init_PWM+0x98>)
 8000e72:	f007 fb65 	bl	8008540 <HAL_TIM_PWM_Start>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <CTRL_init_PWM+0x18>
 8000e7c:	f001 ff62 	bl	8002d44 <Error_Handler>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) Error_Handler(); //error
 8000e80:	2100      	movs	r1, #0
 8000e82:	481f      	ldr	r0, [pc, #124]	; (8000f00 <CTRL_init_PWM+0x98>)
 8000e84:	f008 fcf0 	bl	8009868 <HAL_TIMEx_PWMN_Start>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <CTRL_init_PWM+0x2a>
 8000e8e:	f001 ff59 	bl	8002d44 <Error_Handler>

	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK) Error_Handler(); //error
 8000e92:	2104      	movs	r1, #4
 8000e94:	481a      	ldr	r0, [pc, #104]	; (8000f00 <CTRL_init_PWM+0x98>)
 8000e96:	f007 fb53 	bl	8008540 <HAL_TIM_PWM_Start>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <CTRL_init_PWM+0x3c>
 8000ea0:	f001 ff50 	bl	8002d44 <Error_Handler>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2) != HAL_OK) Error_Handler(); //error
 8000ea4:	2104      	movs	r1, #4
 8000ea6:	4816      	ldr	r0, [pc, #88]	; (8000f00 <CTRL_init_PWM+0x98>)
 8000ea8:	f008 fcde 	bl	8009868 <HAL_TIMEx_PWMN_Start>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <CTRL_init_PWM+0x4e>
 8000eb2:	f001 ff47 	bl	8002d44 <Error_Handler>

	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3) != HAL_OK) Error_Handler(); //error
 8000eb6:	2108      	movs	r1, #8
 8000eb8:	4811      	ldr	r0, [pc, #68]	; (8000f00 <CTRL_init_PWM+0x98>)
 8000eba:	f007 fb41 	bl	8008540 <HAL_TIM_PWM_Start>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <CTRL_init_PWM+0x60>
 8000ec4:	f001 ff3e 	bl	8002d44 <Error_Handler>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3) != HAL_OK) Error_Handler(); //error
 8000ec8:	2108      	movs	r1, #8
 8000eca:	480d      	ldr	r0, [pc, #52]	; (8000f00 <CTRL_init_PWM+0x98>)
 8000ecc:	f008 fccc 	bl	8009868 <HAL_TIMEx_PWMN_Start>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <CTRL_init_PWM+0x72>
 8000ed6:	f001 ff35 	bl	8002d44 <Error_Handler>

	TIM1->CCR1 = 0;
 8000eda:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <CTRL_init_PWM+0x9c>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 8000ee0:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <CTRL_init_PWM+0x9c>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 8000ee6:	4b07      	ldr	r3, [pc, #28]	; (8000f04 <CTRL_init_PWM+0x9c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	63da      	str	r2, [r3, #60]	; 0x3c

	HAL_TIM_Base_Start_IT(&htim3);
 8000eec:	4806      	ldr	r0, [pc, #24]	; (8000f08 <CTRL_init_PWM+0xa0>)
 8000eee:	f007 fa5b 	bl	80083a8 <HAL_TIM_Base_Start_IT>

	uint16_t setpoint = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	80fb      	strh	r3, [r7, #6]
//		HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 0);
////		osDelay(1000);
////		inverter(90, 1000); //1499 is max voltage
////		osDelay(1000);
//	}
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	200009c4 	.word	0x200009c4
 8000f04:	40012c00 	.word	0x40012c00
 8000f08:	20000a10 	.word	0x20000a10

08000f0c <inverter>:
//sin(θ◦) ≈ 4θ(180 − θ) 40500 − θ(180 − θ);
float _sin(float deg){
	return (4*deg*(180-deg)/(40500 - deg*(180-deg)));
}

void inverter(uint16_t angle, uint16_t voltage){
 8000f0c:	b480      	push	{r7}
 8000f0e:	b089      	sub	sp, #36	; 0x24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	460a      	mov	r2, r1
 8000f16:	80fb      	strh	r3, [r7, #6]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	80bb      	strh	r3, [r7, #4]

	angle = angle%360;
 8000f1c:	88fb      	ldrh	r3, [r7, #6]
 8000f1e:	08da      	lsrs	r2, r3, #3
 8000f20:	4987      	ldr	r1, [pc, #540]	; (8001140 <inverter+0x234>)
 8000f22:	fba1 1202 	umull	r1, r2, r1, r2
 8000f26:	0892      	lsrs	r2, r2, #2
 8000f28:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8000f2c:	fb01 f202 	mul.w	r2, r1, r2
 8000f30:	1a9b      	subs	r3, r3, r2
 8000f32:	80fb      	strh	r3, [r7, #6]
	uint32_t compare_M1 = 0;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61fb      	str	r3, [r7, #28]
	uint32_t compare_M2 = 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61bb      	str	r3, [r7, #24]
	uint32_t compare_M3 = 0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]

	float deg = (float)(angle%60);
 8000f40:	88fa      	ldrh	r2, [r7, #6]
 8000f42:	4b80      	ldr	r3, [pc, #512]	; (8001144 <inverter+0x238>)
 8000f44:	fba3 1302 	umull	r1, r3, r3, r2
 8000f48:	0959      	lsrs	r1, r3, #5
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	011b      	lsls	r3, r3, #4
 8000f4e:	1a5b      	subs	r3, r3, r1
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	ee07 3a90 	vmov	s15, r3
 8000f5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f5e:	edc7 7a04 	vstr	s15, [r7, #16]
	//uint32_t T1 = (uint32_t )(duty_max*duty*((240-4*deg)*(120-deg)/(40500 - (60-deg)*(120-deg))) ); //*pi/180
	uint16_t T1 = (uint16_t)(voltage*(float)( 4*(60-deg)*(180-(60-deg))/(40500 - (60-deg)*(180-(60-deg))))); //*pi/180
 8000f62:	88bb      	ldrh	r3, [r7, #4]
 8000f64:	ee07 3a90 	vmov	s15, r3
 8000f68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f6c:	eddf 6a76 	vldr	s13, [pc, #472]	; 8001148 <inverter+0x23c>
 8000f70:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f74:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000f78:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8000f7c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000f80:	ed9f 6a71 	vldr	s12, [pc, #452]	; 8001148 <inverter+0x23c>
 8000f84:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f88:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000f8c:	ed9f 6a6f 	vldr	s12, [pc, #444]	; 800114c <inverter+0x240>
 8000f90:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000f94:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8000f98:	eddf 6a6b 	vldr	s13, [pc, #428]	; 8001148 <inverter+0x23c>
 8000f9c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fa0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000fa4:	eddf 5a68 	vldr	s11, [pc, #416]	; 8001148 <inverter+0x23c>
 8000fa8:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fac:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8000fb0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800114c <inverter+0x240>
 8000fb4:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8000fb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fbc:	eddf 6a64 	vldr	s13, [pc, #400]	; 8001150 <inverter+0x244>
 8000fc0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000fc4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000fc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fd0:	ee17 3a90 	vmov	r3, s15
 8000fd4:	81fb      	strh	r3, [r7, #14]
	uint16_t T2 = (uint16_t)(voltage*(float)(4*deg*(180-deg)/(40500 - deg*(180-deg))) );
 8000fd6:	88bb      	ldrh	r3, [r7, #4]
 8000fd8:	ee07 3a90 	vmov	s15, r3
 8000fdc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fe0:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fe4:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8000fe8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000fec:	ed9f 6a57 	vldr	s12, [pc, #348]	; 800114c <inverter+0x240>
 8000ff0:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ff4:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000ff8:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8000ffc:	eddf 6a53 	vldr	s13, [pc, #332]	; 800114c <inverter+0x240>
 8001000:	edd7 7a04 	vldr	s15, [r7, #16]
 8001004:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001008:	edd7 7a04 	vldr	s15, [r7, #16]
 800100c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001010:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8001150 <inverter+0x244>
 8001014:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001018:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800101c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001020:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001024:	ee17 3a90 	vmov	r3, s15
 8001028:	81bb      	strh	r3, [r7, #12]
	uint16_t T0 = (duty_max-T1-T2)/2;
 800102a:	89fb      	ldrh	r3, [r7, #14]
 800102c:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8001030:	3303      	adds	r3, #3
 8001032:	89ba      	ldrh	r2, [r7, #12]
 8001034:	1a9b      	subs	r3, r3, r2
 8001036:	0fda      	lsrs	r2, r3, #31
 8001038:	4413      	add	r3, r2
 800103a:	105b      	asrs	r3, r3, #1
 800103c:	817b      	strh	r3, [r7, #10]

	if(angle >= 0 && angle < 60){
 800103e:	88fb      	ldrh	r3, [r7, #6]
 8001040:	2b3b      	cmp	r3, #59	; 0x3b
 8001042:	d80c      	bhi.n	800105e <inverter+0x152>
		compare_M1 = T0;
 8001044:	897b      	ldrh	r3, [r7, #10]
 8001046:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0+T2;
 8001048:	897a      	ldrh	r2, [r7, #10]
 800104a:	89bb      	ldrh	r3, [r7, #12]
 800104c:	4413      	add	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0+T1+T2;
 8001050:	897a      	ldrh	r2, [r7, #10]
 8001052:	89fb      	ldrh	r3, [r7, #14]
 8001054:	441a      	add	r2, r3
 8001056:	89bb      	ldrh	r3, [r7, #12]
 8001058:	4413      	add	r3, r2
 800105a:	617b      	str	r3, [r7, #20]
 800105c:	e060      	b.n	8001120 <inverter+0x214>
		}
	else if(angle >= 60 && angle < 120){
 800105e:	88fb      	ldrh	r3, [r7, #6]
 8001060:	2b3b      	cmp	r3, #59	; 0x3b
 8001062:	d90f      	bls.n	8001084 <inverter+0x178>
 8001064:	88fb      	ldrh	r3, [r7, #6]
 8001066:	2b77      	cmp	r3, #119	; 0x77
 8001068:	d80c      	bhi.n	8001084 <inverter+0x178>
		compare_M1 = T0;
 800106a:	897b      	ldrh	r3, [r7, #10]
 800106c:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0+T1+T2;
 800106e:	897a      	ldrh	r2, [r7, #10]
 8001070:	89fb      	ldrh	r3, [r7, #14]
 8001072:	441a      	add	r2, r3
 8001074:	89bb      	ldrh	r3, [r7, #12]
 8001076:	4413      	add	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0+T1;
 800107a:	897a      	ldrh	r2, [r7, #10]
 800107c:	89fb      	ldrh	r3, [r7, #14]
 800107e:	4413      	add	r3, r2
 8001080:	617b      	str	r3, [r7, #20]
 8001082:	e04d      	b.n	8001120 <inverter+0x214>
		}
	else if(angle >= 120 && angle < 180){
 8001084:	88fb      	ldrh	r3, [r7, #6]
 8001086:	2b77      	cmp	r3, #119	; 0x77
 8001088:	d90f      	bls.n	80010aa <inverter+0x19e>
 800108a:	88fb      	ldrh	r3, [r7, #6]
 800108c:	2bb3      	cmp	r3, #179	; 0xb3
 800108e:	d80c      	bhi.n	80010aa <inverter+0x19e>
		compare_M1 = T0+T2;
 8001090:	897a      	ldrh	r2, [r7, #10]
 8001092:	89bb      	ldrh	r3, [r7, #12]
 8001094:	4413      	add	r3, r2
 8001096:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0+T1+T2;
 8001098:	897a      	ldrh	r2, [r7, #10]
 800109a:	89fb      	ldrh	r3, [r7, #14]
 800109c:	441a      	add	r2, r3
 800109e:	89bb      	ldrh	r3, [r7, #12]
 80010a0:	4413      	add	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0;
 80010a4:	897b      	ldrh	r3, [r7, #10]
 80010a6:	617b      	str	r3, [r7, #20]
 80010a8:	e03a      	b.n	8001120 <inverter+0x214>
		}
	else if(angle >= 180 && angle < 240){
 80010aa:	88fb      	ldrh	r3, [r7, #6]
 80010ac:	2bb3      	cmp	r3, #179	; 0xb3
 80010ae:	d90f      	bls.n	80010d0 <inverter+0x1c4>
 80010b0:	88fb      	ldrh	r3, [r7, #6]
 80010b2:	2bef      	cmp	r3, #239	; 0xef
 80010b4:	d80c      	bhi.n	80010d0 <inverter+0x1c4>
		compare_M1 = T0+T1+T2;
 80010b6:	897a      	ldrh	r2, [r7, #10]
 80010b8:	89fb      	ldrh	r3, [r7, #14]
 80010ba:	441a      	add	r2, r3
 80010bc:	89bb      	ldrh	r3, [r7, #12]
 80010be:	4413      	add	r3, r2
 80010c0:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0+T1;
 80010c2:	897a      	ldrh	r2, [r7, #10]
 80010c4:	89fb      	ldrh	r3, [r7, #14]
 80010c6:	4413      	add	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0;
 80010ca:	897b      	ldrh	r3, [r7, #10]
 80010cc:	617b      	str	r3, [r7, #20]
 80010ce:	e027      	b.n	8001120 <inverter+0x214>
		}
	else if(angle >= 240 && angle < 300){
 80010d0:	88fb      	ldrh	r3, [r7, #6]
 80010d2:	2bef      	cmp	r3, #239	; 0xef
 80010d4:	d910      	bls.n	80010f8 <inverter+0x1ec>
 80010d6:	88fb      	ldrh	r3, [r7, #6]
 80010d8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80010dc:	d20c      	bcs.n	80010f8 <inverter+0x1ec>
		compare_M1 = T0+T1+T2;
 80010de:	897a      	ldrh	r2, [r7, #10]
 80010e0:	89fb      	ldrh	r3, [r7, #14]
 80010e2:	441a      	add	r2, r3
 80010e4:	89bb      	ldrh	r3, [r7, #12]
 80010e6:	4413      	add	r3, r2
 80010e8:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0;
 80010ea:	897b      	ldrh	r3, [r7, #10]
 80010ec:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0+T2;
 80010ee:	897a      	ldrh	r2, [r7, #10]
 80010f0:	89bb      	ldrh	r3, [r7, #12]
 80010f2:	4413      	add	r3, r2
 80010f4:	617b      	str	r3, [r7, #20]
 80010f6:	e013      	b.n	8001120 <inverter+0x214>
		}
	else if(angle >= 300 && angle < 360){
 80010f8:	88fb      	ldrh	r3, [r7, #6]
 80010fa:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80010fe:	d30f      	bcc.n	8001120 <inverter+0x214>
 8001100:	88fb      	ldrh	r3, [r7, #6]
 8001102:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001106:	d20b      	bcs.n	8001120 <inverter+0x214>
		compare_M1 = T0+T1;
 8001108:	897a      	ldrh	r2, [r7, #10]
 800110a:	89fb      	ldrh	r3, [r7, #14]
 800110c:	4413      	add	r3, r2
 800110e:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0;
 8001110:	897b      	ldrh	r3, [r7, #10]
 8001112:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0+T1+T2;
 8001114:	897a      	ldrh	r2, [r7, #10]
 8001116:	89fb      	ldrh	r3, [r7, #14]
 8001118:	441a      	add	r2, r3
 800111a:	89bb      	ldrh	r3, [r7, #12]
 800111c:	4413      	add	r3, r2
 800111e:	617b      	str	r3, [r7, #20]
		}

	//PrintServerPrintf("OK %d %d %d %d\r\n", (uint32_t)(compare_M1), (uint32_t)(compare_M2), (uint32_t)(compare_M3), (int32_t)angle);
	TIM1->CCR1 = compare_M1;
 8001120:	4a0c      	ldr	r2, [pc, #48]	; (8001154 <inverter+0x248>)
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2 = compare_M2;
 8001126:	4a0b      	ldr	r2, [pc, #44]	; (8001154 <inverter+0x248>)
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1->CCR3 = compare_M3;
 800112c:	4a09      	ldr	r2, [pc, #36]	; (8001154 <inverter+0x248>)
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001132:	bf00      	nop
 8001134:	3724      	adds	r7, #36	; 0x24
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	16c16c17 	.word	0x16c16c17
 8001144:	88888889 	.word	0x88888889
 8001148:	42700000 	.word	0x42700000
 800114c:	43340000 	.word	0x43340000
 8001150:	471e3400 	.word	0x471e3400
 8001154:	40012c00 	.word	0x40012c00

08001158 <shutoff>:
void shutoff(void){
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
	TIM1->CCR1 = 0;
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <shutoff+0x20>)
 800115e:	2200      	movs	r2, #0
 8001160:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 8001162:	4b05      	ldr	r3, [pc, #20]	; (8001178 <shutoff+0x20>)
 8001164:	2200      	movs	r2, #0
 8001166:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 8001168:	4b03      	ldr	r3, [pc, #12]	; (8001178 <shutoff+0x20>)
 800116a:	2200      	movs	r2, #0
 800116c:	63da      	str	r2, [r3, #60]	; 0x3c

}
 800116e:	bf00      	nop
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	40012c00 	.word	0x40012c00

0800117c <shutdown>:
void shutdown(void){
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1); //error
 8001180:	2100      	movs	r1, #0
 8001182:	480e      	ldr	r0, [pc, #56]	; (80011bc <shutdown+0x40>)
 8001184:	f007 fadc 	bl	8008740 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1); //error
 8001188:	2100      	movs	r1, #0
 800118a:	480c      	ldr	r0, [pc, #48]	; (80011bc <shutdown+0x40>)
 800118c:	f008 fc20 	bl	80099d0 <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2); //error
 8001190:	2104      	movs	r1, #4
 8001192:	480a      	ldr	r0, [pc, #40]	; (80011bc <shutdown+0x40>)
 8001194:	f007 fad4 	bl	8008740 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2); //error
 8001198:	2104      	movs	r1, #4
 800119a:	4808      	ldr	r0, [pc, #32]	; (80011bc <shutdown+0x40>)
 800119c:	f008 fc18 	bl	80099d0 <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3); //error
 80011a0:	2108      	movs	r1, #8
 80011a2:	4806      	ldr	r0, [pc, #24]	; (80011bc <shutdown+0x40>)
 80011a4:	f007 facc 	bl	8008740 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3); //error
 80011a8:	2108      	movs	r1, #8
 80011aa:	4804      	ldr	r0, [pc, #16]	; (80011bc <shutdown+0x40>)
 80011ac:	f008 fc10 	bl	80099d0 <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_Base_Stop(&htim1);
 80011b0:	4802      	ldr	r0, [pc, #8]	; (80011bc <shutdown+0x40>)
 80011b2:	f007 f8d1 	bl	8008358 <HAL_TIM_Base_Stop>
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	200009c4 	.word	0x200009c4

080011c0 <tim1_PWM_PulseFinishedCallback>:
void tim1_PWM_PulseFinishedCallback(void){
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
	//osThreadFlagsSet(CTRL_thread_id, update_flag);
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
	...

080011d0 <FOC_init>:
#include "print_server.h"

void test_thread(void);
osThreadId_t test_thread_id;
osThreadAttr_t test_attr;
void FOC_init(void){
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
	test_attr.name = "Test thread";
 80011d4:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <FOC_init+0x30>)
 80011d6:	4a0b      	ldr	r2, [pc, #44]	; (8001204 <FOC_init+0x34>)
 80011d8:	601a      	str	r2, [r3, #0]
	test_attr.priority = 10;
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <FOC_init+0x30>)
 80011dc:	220a      	movs	r2, #10
 80011de:	619a      	str	r2, [r3, #24]
	test_thread_id = osThreadNew((void *)test_thread, NULL, &test_attr);
 80011e0:	4a07      	ldr	r2, [pc, #28]	; (8001200 <FOC_init+0x30>)
 80011e2:	2100      	movs	r1, #0
 80011e4:	4808      	ldr	r0, [pc, #32]	; (8001208 <FOC_init+0x38>)
 80011e6:	f00a f9ad 	bl	800b544 <osThreadNew>
 80011ea:	4603      	mov	r3, r0
 80011ec:	4a07      	ldr	r2, [pc, #28]	; (800120c <FOC_init+0x3c>)
 80011ee:	6013      	str	r3, [r2, #0]

	//Print_Server (USART communication)
	PrintServerInit(); //Priority 5
 80011f0:	f001 f80c 	bl	800220c <PrintServerInit>

	//Current measure thread
	current_init(); //Priority 0
 80011f4:	f000 fb20 	bl	8001838 <current_init>

	//Encoder 1 and 2 thread
	//encoder_init(); //Priority 1

	//CTRL thread (PWM generation, fault handling)
	CTRL_init(); //Priority 2
 80011f8:	f7ff fe2e 	bl	8000e58 <CTRL_init>

	//CAN thread
	//CAN_init(); //Priority 4


}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000358 	.word	0x20000358
 8001204:	0800f2c8 	.word	0x0800f2c8
 8001208:	08001211 	.word	0x08001211
 800120c:	20000354 	.word	0x20000354

08001210 <test_thread>:

void test_thread(void){
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
	while(1){
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
 8001214:	2201      	movs	r2, #1
 8001216:	2140      	movs	r1, #64	; 0x40
 8001218:	4811      	ldr	r0, [pc, #68]	; (8001260 <test_thread+0x50>)
 800121a:	f005 fe23 	bl	8006e64 <HAL_GPIO_WritePin>
		osDelay(100);
 800121e:	2064      	movs	r0, #100	; 0x64
 8001220:	f00a faf1 	bl	800b806 <osDelay>
		HAL_GPIO_WritePin(WARNING_LED_GPIO_Port, WARNING_LED_Pin, 1);
 8001224:	2201      	movs	r2, #1
 8001226:	2180      	movs	r1, #128	; 0x80
 8001228:	480d      	ldr	r0, [pc, #52]	; (8001260 <test_thread+0x50>)
 800122a:	f005 fe1b 	bl	8006e64 <HAL_GPIO_WritePin>
		osDelay(100);
 800122e:	2064      	movs	r0, #100	; 0x64
 8001230:	f00a fae9 	bl	800b806 <osDelay>
//		HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 1);
//		osDelay(100);
//		HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 0);
		osDelay(100);
 8001234:	2064      	movs	r0, #100	; 0x64
 8001236:	f00a fae6 	bl	800b806 <osDelay>
		HAL_GPIO_WritePin(WARNING_LED_GPIO_Port, WARNING_LED_Pin, 0);
 800123a:	2200      	movs	r2, #0
 800123c:	2180      	movs	r1, #128	; 0x80
 800123e:	4808      	ldr	r0, [pc, #32]	; (8001260 <test_thread+0x50>)
 8001240:	f005 fe10 	bl	8006e64 <HAL_GPIO_WritePin>
		osDelay(100);
 8001244:	2064      	movs	r0, #100	; 0x64
 8001246:	f00a fade 	bl	800b806 <osDelay>
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
 800124a:	2200      	movs	r2, #0
 800124c:	2140      	movs	r1, #64	; 0x40
 800124e:	4804      	ldr	r0, [pc, #16]	; (8001260 <test_thread+0x50>)
 8001250:	f005 fe08 	bl	8006e64 <HAL_GPIO_WritePin>
		osDelay(500);
 8001254:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001258:	f00a fad5 	bl	800b806 <osDelay>
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
 800125c:	e7da      	b.n	8001214 <test_thread+0x4>
 800125e:	bf00      	nop
 8001260:	48000800 	.word	0x48000800

08001264 <HAL_ADC_ConvCpltCallback>:
	}
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
	//set flag to indicate end of conversion
	if(hadc == &hadc1)ADC1_ConvCpltCallback(hadc);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4a05      	ldr	r2, [pc, #20]	; (8001284 <HAL_ADC_ConvCpltCallback+0x20>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d102      	bne.n	800127a <HAL_ADC_ConvCpltCallback+0x16>
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f000 fe33 	bl	8001ee0 <ADC1_ConvCpltCallback>
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000518 	.word	0x20000518

08001288 <Compute>:
#include "PID.h"

#include <stdio.h>

void Compute(PID_instance *val)
{
 8001288:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800128c:	b086      	sub	sp, #24
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
	if(!val->inAuto) return;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001298:	2b00      	cmp	r3, #0
 800129a:	f000 80cb 	beq.w	8001434 <Compute+0x1ac>
	/*Compute all the working error variables*/
	double error = val->Setpoint - val->Input;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012aa:	f7fe ffbd 	bl	8000228 <__aeabi_dsub>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double dInput = (val->Input - val->lastInput);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80012c2:	f7fe ffb1 	bl	8000228 <__aeabi_dsub>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	e9c7 2302 	strd	r2, r3, [r7, #8]
	val->outputSum+= (val->ki * error);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80012da:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80012de:	f7ff f95b 	bl	8000598 <__aeabi_dmul>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	4620      	mov	r0, r4
 80012e8:	4629      	mov	r1, r5
 80012ea:	f7fe ff9f 	bl	800022c <__adddf3>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	6879      	ldr	r1, [r7, #4]
 80012f4:	e9c1 2306 	strd	r2, r3, [r1, #24]

	/*Add Proportional on Measurement, if P_ON_M is specified*/
	if(val->pOnM) val->outputSum-= val->pOnMKp * dInput;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d014      	beq.n	800132c <Compute+0xa4>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800130e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001312:	f7ff f941 	bl	8000598 <__aeabi_dmul>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	4620      	mov	r0, r4
 800131c:	4629      	mov	r1, r5
 800131e:	f7fe ff83 	bl	8000228 <__aeabi_dsub>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	6879      	ldr	r1, [r7, #4]
 8001328:	e9c1 2306 	strd	r2, r3, [r1, #24]

	if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001338:	f7ff fbbe 	bl	8000ab8 <__aeabi_dcmpgt>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d006      	beq.n	8001350 <Compute+0xc8>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001348:	6879      	ldr	r1, [r7, #4]
 800134a:	e9c1 2306 	strd	r2, r3, [r1, #24]
 800134e:	e010      	b.n	8001372 <Compute+0xea>
	else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800135c:	f7ff fb8e 	bl	8000a7c <__aeabi_dcmplt>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d005      	beq.n	8001372 <Compute+0xea>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800136c:	6879      	ldr	r1, [r7, #4]
 800136e:	e9c1 2306 	strd	r2, r3, [r1, #24]

	/*Add Proportional on Error, if P_ON_E is specified*/
	if(val->pOnE) val->Output = val->pOnEKp * error;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001378:	2b00      	cmp	r3, #0
 800137a:	d00c      	beq.n	8001396 <Compute+0x10e>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8001382:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001386:	f7ff f907 	bl	8000598 <__aeabi_dmul>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	6879      	ldr	r1, [r7, #4]
 8001390:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001394:	e006      	b.n	80013a4 <Compute+0x11c>
	else val->Output = 0;
 8001396:	6879      	ldr	r1, [r7, #4]
 8001398:	f04f 0200 	mov.w	r2, #0
 800139c:	f04f 0300 	mov.w	r3, #0
 80013a0:	e9c1 2302 	strd	r2, r3, [r1, #8]

	/*Compute Rest of PID Output*/
	val->Output += val->outputSum - val->kd * dInput;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80013b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013ba:	f7ff f8ed 	bl	8000598 <__aeabi_dmul>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	4640      	mov	r0, r8
 80013c4:	4649      	mov	r1, r9
 80013c6:	f7fe ff2f 	bl	8000228 <__aeabi_dsub>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	4620      	mov	r0, r4
 80013d0:	4629      	mov	r1, r5
 80013d2:	f7fe ff2b 	bl	800022c <__adddf3>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	6879      	ldr	r1, [r7, #4]
 80013dc:	e9c1 2302 	strd	r2, r3, [r1, #8]

	if(val->Output > val->outMax) val->Output = val->outMax;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80013ec:	f7ff fb64 	bl	8000ab8 <__aeabi_dcmpgt>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d006      	beq.n	8001404 <Compute+0x17c>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80013fc:	6879      	ldr	r1, [r7, #4]
 80013fe:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001402:	e010      	b.n	8001426 <Compute+0x19e>
	else if(val->Output < val->outMin) val->Output = val->outMin;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001410:	f7ff fb34 	bl	8000a7c <__aeabi_dcmplt>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d005      	beq.n	8001426 <Compute+0x19e>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001420:	6879      	ldr	r1, [r7, #4]
 8001422:	e9c1 2302 	strd	r2, r3, [r1, #8]

	/*Remember some variables for next time*/
	val->lastInput = val->Input;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142c:	6879      	ldr	r1, [r7, #4]
 800142e:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8001432:	e000      	b.n	8001436 <Compute+0x1ae>
	if(!val->inAuto) return;
 8001434:	bf00      	nop
}
 8001436:	3718      	adds	r7, #24
 8001438:	46bd      	mov	sp, r7
 800143a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08001440 <SetTunings>:

void SetTunings(PID_instance *val, double Kp, double Ki, double Kd, double pOn)
{
 8001440:	b590      	push	{r4, r7, lr}
 8001442:	b08d      	sub	sp, #52	; 0x34
 8001444:	af00      	add	r7, sp, #0
 8001446:	6278      	str	r0, [r7, #36]	; 0x24
 8001448:	ed87 0b06 	vstr	d0, [r7, #24]
 800144c:	ed87 1b04 	vstr	d1, [r7, #16]
 8001450:	ed87 2b02 	vstr	d2, [r7, #8]
 8001454:	ed87 3b00 	vstr	d3, [r7]
   if (Kp<0 || Ki<0|| Kd<0 || pOn<0 || pOn>1) return;
 8001458:	f04f 0200 	mov.w	r2, #0
 800145c:	f04f 0300 	mov.w	r3, #0
 8001460:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001464:	f7ff fb0a 	bl	8000a7c <__aeabi_dcmplt>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	f040 80cf 	bne.w	800160e <SetTunings+0x1ce>
 8001470:	f04f 0200 	mov.w	r2, #0
 8001474:	f04f 0300 	mov.w	r3, #0
 8001478:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800147c:	f7ff fafe 	bl	8000a7c <__aeabi_dcmplt>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	f040 80c3 	bne.w	800160e <SetTunings+0x1ce>
 8001488:	f04f 0200 	mov.w	r2, #0
 800148c:	f04f 0300 	mov.w	r3, #0
 8001490:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001494:	f7ff faf2 	bl	8000a7c <__aeabi_dcmplt>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	f040 80b7 	bne.w	800160e <SetTunings+0x1ce>
 80014a0:	f04f 0200 	mov.w	r2, #0
 80014a4:	f04f 0300 	mov.w	r3, #0
 80014a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014ac:	f7ff fae6 	bl	8000a7c <__aeabi_dcmplt>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	f040 80ab 	bne.w	800160e <SetTunings+0x1ce>
 80014b8:	f04f 0200 	mov.w	r2, #0
 80014bc:	4b58      	ldr	r3, [pc, #352]	; (8001620 <SetTunings+0x1e0>)
 80014be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014c2:	f7ff faf9 	bl	8000ab8 <__aeabi_dcmpgt>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	f040 80a0 	bne.w	800160e <SetTunings+0x1ce>

   val->pOnE = pOn>0; //some p on error is desired;
 80014ce:	2301      	movs	r3, #1
 80014d0:	461c      	mov	r4, r3
 80014d2:	f04f 0200 	mov.w	r2, #0
 80014d6:	f04f 0300 	mov.w	r3, #0
 80014da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014de:	f7ff faeb 	bl	8000ab8 <__aeabi_dcmpgt>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d101      	bne.n	80014ec <SetTunings+0xac>
 80014e8:	2300      	movs	r3, #0
 80014ea:	461c      	mov	r4, r3
 80014ec:	b2e3      	uxtb	r3, r4
 80014ee:	461a      	mov	r2, r3
 80014f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
   val->pOnM = pOn<1; //some p on measurement is desired;
 80014f6:	2301      	movs	r3, #1
 80014f8:	461c      	mov	r4, r3
 80014fa:	f04f 0200 	mov.w	r2, #0
 80014fe:	4b48      	ldr	r3, [pc, #288]	; (8001620 <SetTunings+0x1e0>)
 8001500:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001504:	f7ff faba 	bl	8000a7c <__aeabi_dcmplt>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d101      	bne.n	8001512 <SetTunings+0xd2>
 800150e:	2300      	movs	r3, #0
 8001510:	461c      	mov	r4, r3
 8001512:	b2e3      	uxtb	r3, r4
 8001514:	461a      	mov	r2, r3
 8001516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001518:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

   double SampleTimeInSec = ((double)val->SampleTime)/1000000;
 800151c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001520:	4618      	mov	r0, r3
 8001522:	f7fe ffbf 	bl	80004a4 <__aeabi_ui2d>
 8001526:	a33c      	add	r3, pc, #240	; (adr r3, 8001618 <SetTunings+0x1d8>)
 8001528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152c:	f7ff f95e 	bl	80007ec <__aeabi_ddiv>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   val->kp = Kp;
 8001538:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800153a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800153e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
   val->ki = Ki * SampleTimeInSec;
 8001542:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001546:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800154a:	f7ff f825 	bl	8000598 <__aeabi_dmul>
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001554:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
   val->kd = Kd / SampleTimeInSec;
 8001558:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800155c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001560:	f7ff f944 	bl	80007ec <__aeabi_ddiv>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800156a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

  if(val->controllerDirection ==REVERSE)
 800156e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001572:	2b01      	cmp	r3, #1
 8001574:	d129      	bne.n	80015ca <SetTunings+0x18a>
   {
	  val->kp = (0 - val->kp);
 8001576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001578:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800157c:	f04f 0000 	mov.w	r0, #0
 8001580:	f04f 0100 	mov.w	r1, #0
 8001584:	f7fe fe50 	bl	8000228 <__aeabi_dsub>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800158e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	  val->ki = (0 - val->ki);
 8001592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001594:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001598:	f04f 0000 	mov.w	r0, #0
 800159c:	f04f 0100 	mov.w	r1, #0
 80015a0:	f7fe fe42 	bl	8000228 <__aeabi_dsub>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015aa:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	  val->kd = (0 - val->kd);
 80015ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80015b4:	f04f 0000 	mov.w	r0, #0
 80015b8:	f04f 0100 	mov.w	r1, #0
 80015bc:	f7fe fe34 	bl	8000228 <__aeabi_dsub>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015c6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
   }

  val->pOnEKp = pOn * val->kp;
 80015ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015cc:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80015d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015d4:	f7fe ffe0 	bl	8000598 <__aeabi_dmul>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015de:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
  val->pOnMKp = (1 - pOn) * val->kp;
 80015e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015e6:	f04f 0000 	mov.w	r0, #0
 80015ea:	490d      	ldr	r1, [pc, #52]	; (8001620 <SetTunings+0x1e0>)
 80015ec:	f7fe fe1c 	bl	8000228 <__aeabi_dsub>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4610      	mov	r0, r2
 80015f6:	4619      	mov	r1, r3
 80015f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fa:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80015fe:	f7fe ffcb 	bl	8000598 <__aeabi_dmul>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001608:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 800160c:	e000      	b.n	8001610 <SetTunings+0x1d0>
   if (Kp<0 || Ki<0|| Kd<0 || pOn<0 || pOn>1) return;
 800160e:	bf00      	nop
}
 8001610:	3734      	adds	r7, #52	; 0x34
 8001612:	46bd      	mov	sp, r7
 8001614:	bd90      	pop	{r4, r7, pc}
 8001616:	bf00      	nop
 8001618:	00000000 	.word	0x00000000
 800161c:	412e8480 	.word	0x412e8480
 8001620:	3ff00000 	.word	0x3ff00000

08001624 <SetSampleTime>:

void SetSampleTime(PID_instance *val, int NewSampleTime)
{
 8001624:	b5b0      	push	{r4, r5, r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
   if (NewSampleTime > 0)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	dd2e      	ble.n	8001692 <SetSampleTime+0x6e>
   {
      double ratio  = (double)NewSampleTime
 8001634:	6838      	ldr	r0, [r7, #0]
 8001636:	f7fe ff45 	bl	80004c4 <__aeabi_i2d>
 800163a:	4604      	mov	r4, r0
 800163c:	460d      	mov	r5, r1
                      / (double)val->SampleTime;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001642:	4618      	mov	r0, r3
 8001644:	f7fe ff2e 	bl	80004a4 <__aeabi_ui2d>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
      double ratio  = (double)NewSampleTime
 800164c:	4620      	mov	r0, r4
 800164e:	4629      	mov	r1, r5
 8001650:	f7ff f8cc 	bl	80007ec <__aeabi_ddiv>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	e9c7 2302 	strd	r2, r3, [r7, #8]
      val->ki *= ratio;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001662:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001666:	f7fe ff97 	bl	8000598 <__aeabi_dmul>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
      val->kd /= ratio;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800167a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800167e:	f7ff f8b5 	bl	80007ec <__aeabi_ddiv>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	6879      	ldr	r1, [r7, #4]
 8001688:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
      val->SampleTime = (unsigned long)NewSampleTime;
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	651a      	str	r2, [r3, #80]	; 0x50
   }
}
 8001692:	bf00      	nop
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bdb0      	pop	{r4, r5, r7, pc}

0800169a <SetOutputLimits>:

void SetOutputLimits(PID_instance *val, double Min, double Max)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b086      	sub	sp, #24
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6178      	str	r0, [r7, #20]
 80016a2:	ed87 0b02 	vstr	d0, [r7, #8]
 80016a6:	ed87 1b00 	vstr	d1, [r7]
   if(Min > Max) return;
 80016aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016b2:	f7ff fa01 	bl	8000ab8 <__aeabi_dcmpgt>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d150      	bne.n	800175e <SetOutputLimits+0xc4>
   val->outMin = Min;
 80016bc:	6979      	ldr	r1, [r7, #20]
 80016be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016c2:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
   val->outMax = Max;
 80016c6:	6979      	ldr	r1, [r7, #20]
 80016c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016cc:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

   if(val->Output > val->outMax) val->Output = val->outMax;
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80016dc:	f7ff f9ec 	bl	8000ab8 <__aeabi_dcmpgt>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d006      	beq.n	80016f4 <SetOutputLimits+0x5a>
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80016ec:	6979      	ldr	r1, [r7, #20]
 80016ee:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80016f2:	e010      	b.n	8001716 <SetOutputLimits+0x7c>
   else if(val->Output < val->outMin) val->Output = val->outMin;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001700:	f7ff f9bc 	bl	8000a7c <__aeabi_dcmplt>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d005      	beq.n	8001716 <SetOutputLimits+0x7c>
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001710:	6979      	ldr	r1, [r7, #20]
 8001712:	e9c1 2302 	strd	r2, r3, [r1, #8]

   if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001722:	f7ff f9c9 	bl	8000ab8 <__aeabi_dcmpgt>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d006      	beq.n	800173a <SetOutputLimits+0xa0>
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001732:	6979      	ldr	r1, [r7, #20]
 8001734:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8001738:	e012      	b.n	8001760 <SetOutputLimits+0xc6>
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001746:	f7ff f999 	bl	8000a7c <__aeabi_dcmplt>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d007      	beq.n	8001760 <SetOutputLimits+0xc6>
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001756:	6979      	ldr	r1, [r7, #20]
 8001758:	e9c1 2306 	strd	r2, r3, [r1, #24]
 800175c:	e000      	b.n	8001760 <SetOutputLimits+0xc6>
   if(Min > Max) return;
 800175e:	bf00      	nop
}
 8001760:	3718      	adds	r7, #24
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <SetMode>:

void SetMode(PID_instance *val, int Mode)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b084      	sub	sp, #16
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
 800176e:	6039      	str	r1, [r7, #0]
    uint8_t newAuto = (Mode == AUTOMATIC);
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	2b01      	cmp	r3, #1
 8001774:	bf0c      	ite	eq
 8001776:	2301      	moveq	r3, #1
 8001778:	2300      	movne	r3, #0
 800177a:	b2db      	uxtb	r3, r3
 800177c:	73fb      	strb	r3, [r7, #15]
    if(newAuto == !val->inAuto)
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001786:	2a00      	cmp	r2, #0
 8001788:	bf0c      	ite	eq
 800178a:	2201      	moveq	r2, #1
 800178c:	2200      	movne	r2, #0
 800178e:	b2d2      	uxtb	r2, r2
 8001790:	4293      	cmp	r3, r2
 8001792:	d102      	bne.n	800179a <SetMode+0x34>
    {  /*we just went from manual to auto*/
        Initialize(val);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f000 f808 	bl	80017aa <Initialize>
    }
    val->inAuto = newAuto;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	7bfa      	ldrb	r2, [r7, #15]
 800179e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
}
 80017a2:	bf00      	nop
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <Initialize>:

void Initialize(PID_instance *val)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b082      	sub	sp, #8
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
	val->lastInput = val->Input;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b8:	6879      	ldr	r1, [r7, #4]
 80017ba:	e9c1 2308 	strd	r2, r3, [r1, #32]
	val->outputSum = val->Output;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	e9c1 2306 	strd	r2, r3, [r1, #24]
   if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80017d6:	f7ff f96f 	bl	8000ab8 <__aeabi_dcmpgt>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d006      	beq.n	80017ee <Initialize+0x44>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80017e6:	6879      	ldr	r1, [r7, #4]
 80017e8:	e9c1 2306 	strd	r2, r3, [r1, #24]
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
}
 80017ec:	e011      	b.n	8001812 <Initialize+0x68>
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80017fa:	f7ff f93f 	bl	8000a7c <__aeabi_dcmplt>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d100      	bne.n	8001806 <Initialize+0x5c>
}
 8001804:	e005      	b.n	8001812 <Initialize+0x68>
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800180c:	6879      	ldr	r1, [r7, #4]
 800180e:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <SetControllerDirection>:

void SetControllerDirection(PID_instance *val, int Direction)
{
 800181a:	b480      	push	{r7}
 800181c:	b083      	sub	sp, #12
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
 8001822:	6039      	str	r1, [r7, #0]
	val->controllerDirection = Direction;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	659a      	str	r2, [r3, #88]	; 0x58
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
	...

08001838 <current_init>:
//Safety
#define Current_limit 30000 //mA
#define Temperature_limit 40 //degrees C

//initialization
void current_init(void){
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
	//create thread
	current_attr.name = "Current thread";
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <current_init+0x20>)
 800183e:	4a07      	ldr	r2, [pc, #28]	; (800185c <current_init+0x24>)
 8001840:	601a      	str	r2, [r3, #0]
	//current_attr.priority = 9;
	current_thread_id = osThreadNew((void *)current_thread, NULL, &current_attr);
 8001842:	4a05      	ldr	r2, [pc, #20]	; (8001858 <current_init+0x20>)
 8001844:	2100      	movs	r1, #0
 8001846:	4806      	ldr	r0, [pc, #24]	; (8001860 <current_init+0x28>)
 8001848:	f009 fe7c 	bl	800b544 <osThreadNew>
 800184c:	4603      	mov	r3, r0
 800184e:	4a05      	ldr	r2, [pc, #20]	; (8001864 <current_init+0x2c>)
 8001850:	6013      	str	r3, [r2, #0]
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000380 	.word	0x20000380
 800185c:	0800f2d4 	.word	0x0800f2d4
 8001860:	080018d9 	.word	0x080018d9
 8001864:	2000037c 	.word	0x2000037c

08001868 <frequenzy>:


uint16_t frequenzy(uint16_t freq){
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	80fb      	strh	r3, [r7, #6]
	if (freq == 0)return !0;
 8001872:	88fb      	ldrh	r3, [r7, #6]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d101      	bne.n	800187c <frequenzy+0x14>
 8001878:	2301      	movs	r3, #1
 800187a:	e005      	b.n	8001888 <frequenzy+0x20>
	return 12500/freq;
 800187c:	88fb      	ldrh	r3, [r7, #6]
 800187e:	f243 02d4 	movw	r2, #12500	; 0x30d4
 8001882:	fb92 f3f3 	sdiv	r3, r2, r3
 8001886:	b29b      	uxth	r3, r3
}
 8001888:	4618      	mov	r0, r3
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <test>:

//thread
uint8_t TxData[8] = {0};
float speed = 0;
float speed_lpf = 0;
void test(uint8_t RxData[8]){
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
	speed_lpf = (float)RxData[0]/100;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	ee07 3a90 	vmov	s15, r3
 80018a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018a8:	eddf 6a08 	vldr	s13, [pc, #32]	; 80018cc <test+0x38>
 80018ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018b0:	4b07      	ldr	r3, [pc, #28]	; (80018d0 <test+0x3c>)
 80018b2:	edc3 7a00 	vstr	s15, [r3]
	TxData[3] = RxData[3];
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	78da      	ldrb	r2, [r3, #3]
 80018ba:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <test+0x40>)
 80018bc:	70da      	strb	r2, [r3, #3]
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	42c80000 	.word	0x42c80000
 80018d0:	20000478 	.word	0x20000478
 80018d4:	20000470 	.word	0x20000470

080018d8 <current_thread>:
void current_thread(void){
 80018d8:	b5b0      	push	{r4, r5, r7, lr}
 80018da:	b08c      	sub	sp, #48	; 0x30
 80018dc:	af00      	add	r7, sp, #0
	CTRL_init_PWM();
 80018de:	f7ff fac3 	bl	8000e68 <CTRL_init_PWM>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_result_DMA, number_of_channels*2);
 80018e2:	2208      	movs	r2, #8
 80018e4:	4988      	ldr	r1, [pc, #544]	; (8001b08 <current_thread+0x230>)
 80018e6:	4889      	ldr	r0, [pc, #548]	; (8001b0c <current_thread+0x234>)
 80018e8:	f002 fc24 	bl	8004134 <HAL_ADC_Start_DMA>

	uint32_t DC_current = 0;
 80018ec:	2300      	movs	r3, #0
 80018ee:	61bb      	str	r3, [r7, #24]
	SetSampleTime(&Current_PID, sampletime);
 80018f0:	211a      	movs	r1, #26
 80018f2:	4887      	ldr	r0, [pc, #540]	; (8001b10 <current_thread+0x238>)
 80018f4:	f7ff fe96 	bl	8001624 <SetSampleTime>
	SetTunings(&Current_PID, Kp, Ki, Kd, 1);
 80018f8:	4b86      	ldr	r3, [pc, #536]	; (8001b14 <current_thread+0x23c>)
 80018fa:	ed93 7b00 	vldr	d7, [r3]
 80018fe:	4b86      	ldr	r3, [pc, #536]	; (8001b18 <current_thread+0x240>)
 8001900:	ed93 6b00 	vldr	d6, [r3]
 8001904:	4b85      	ldr	r3, [pc, #532]	; (8001b1c <current_thread+0x244>)
 8001906:	ed93 5b00 	vldr	d5, [r3]
 800190a:	ed9f 3b77 	vldr	d3, [pc, #476]	; 8001ae8 <current_thread+0x210>
 800190e:	eeb0 2a45 	vmov.f32	s4, s10
 8001912:	eef0 2a65 	vmov.f32	s5, s11
 8001916:	eeb0 1a46 	vmov.f32	s2, s12
 800191a:	eef0 1a66 	vmov.f32	s3, s13
 800191e:	eeb0 0a47 	vmov.f32	s0, s14
 8001922:	eef0 0a67 	vmov.f32	s1, s15
 8001926:	487a      	ldr	r0, [pc, #488]	; (8001b10 <current_thread+0x238>)
 8001928:	f7ff fd8a 	bl	8001440 <SetTunings>
	SetOutputLimits(&Current_PID, min_voltage, max_voltage);
 800192c:	ed9f 1b70 	vldr	d1, [pc, #448]	; 8001af0 <current_thread+0x218>
 8001930:	ed9f 0b71 	vldr	d0, [pc, #452]	; 8001af8 <current_thread+0x220>
 8001934:	4876      	ldr	r0, [pc, #472]	; (8001b10 <current_thread+0x238>)
 8001936:	f7ff feb0 	bl	800169a <SetOutputLimits>
	SetControllerDirection(&Current_PID, DIRECT);
 800193a:	2100      	movs	r1, #0
 800193c:	4874      	ldr	r0, [pc, #464]	; (8001b10 <current_thread+0x238>)
 800193e:	f7ff ff6c 	bl	800181a <SetControllerDirection>
	SetMode(&Current_PID,  MANUAL);
 8001942:	2100      	movs	r1, #0
 8001944:	4872      	ldr	r0, [pc, #456]	; (8001b10 <current_thread+0x238>)
 8001946:	f7ff ff0e 	bl	8001766 <SetMode>
	Initialize(&Current_PID);
 800194a:	4871      	ldr	r0, [pc, #452]	; (8001b10 <current_thread+0x238>)
 800194c:	f7ff ff2d 	bl	80017aa <Initialize>

	//--------------------------------TEST--------------------------------------



	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001950:	2100      	movs	r1, #0
 8001952:	4873      	ldr	r0, [pc, #460]	; (8001b20 <current_thread+0x248>)
 8001954:	f003 fdb4 	bl	80054c0 <HAL_DAC_Start>
	uint32_t time_to_die = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t melody_time = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t melody_index = 0;
 8001960:	2300      	movs	r3, #0
 8001962:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	float increment = 0.01;
 8001966:	4b6f      	ldr	r3, [pc, #444]	; (8001b24 <current_thread+0x24c>)
 8001968:	617b      	str	r3, [r7, #20]
	int wholenote = (60000 * 2) / tempo;
 800196a:	f240 4357 	movw	r3, #1111	; 0x457
 800196e:	613b      	str	r3, [r7, #16]
	int divider = melody[melody_index + 1];
 8001970:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001974:	3301      	adds	r3, #1
 8001976:	4a6c      	ldr	r2, [pc, #432]	; (8001b28 <current_thread+0x250>)
 8001978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800197c:	60fb      	str	r3, [r7, #12]
	int noteDuration = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	623b      	str	r3, [r7, #32]

	uint8_t calibrating = 100;
 8001982:	2364      	movs	r3, #100	; 0x64
 8001984:	77fb      	strb	r3, [r7, #31]
	while(calibrating){
 8001986:	e046      	b.n	8001a16 <current_thread+0x13e>



		if(!half_flag && !full_flag)continue; //return to While(1);
 8001988:	4b68      	ldr	r3, [pc, #416]	; (8001b2c <current_thread+0x254>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	d105      	bne.n	800199e <current_thread+0xc6>
 8001992:	4b67      	ldr	r3, [pc, #412]	; (8001b30 <current_thread+0x258>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	b2db      	uxtb	r3, r3
 8001998:	2b00      	cmp	r3, #0
 800199a:	d100      	bne.n	800199e <current_thread+0xc6>
 800199c:	e03b      	b.n	8001a16 <current_thread+0x13e>
		half_flag = 0;
 800199e:	4b63      	ldr	r3, [pc, #396]	; (8001b2c <current_thread+0x254>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	701a      	strb	r2, [r3, #0]
		full_flag = 0;
 80019a4:	4b62      	ldr	r3, [pc, #392]	; (8001b30 <current_thread+0x258>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	701a      	strb	r2, [r3, #0]

		Voltage_offset_temp[0] += current[0];
 80019aa:	4b62      	ldr	r3, [pc, #392]	; (8001b34 <current_thread+0x25c>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	4b62      	ldr	r3, [pc, #392]	; (8001b38 <current_thread+0x260>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4413      	add	r3, r2
 80019b4:	4a60      	ldr	r2, [pc, #384]	; (8001b38 <current_thread+0x260>)
 80019b6:	6013      	str	r3, [r2, #0]
		Voltage_offset_temp[1] += current[1];
 80019b8:	4b5e      	ldr	r3, [pc, #376]	; (8001b34 <current_thread+0x25c>)
 80019ba:	685a      	ldr	r2, [r3, #4]
 80019bc:	4b5e      	ldr	r3, [pc, #376]	; (8001b38 <current_thread+0x260>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	4413      	add	r3, r2
 80019c2:	4a5d      	ldr	r2, [pc, #372]	; (8001b38 <current_thread+0x260>)
 80019c4:	6053      	str	r3, [r2, #4]
		Voltage_offset_temp[2] += current[2];
 80019c6:	4b5b      	ldr	r3, [pc, #364]	; (8001b34 <current_thread+0x25c>)
 80019c8:	689a      	ldr	r2, [r3, #8]
 80019ca:	4b5b      	ldr	r3, [pc, #364]	; (8001b38 <current_thread+0x260>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	4413      	add	r3, r2
 80019d0:	4a59      	ldr	r2, [pc, #356]	; (8001b38 <current_thread+0x260>)
 80019d2:	6093      	str	r3, [r2, #8]

		calibrating--;
 80019d4:	7ffb      	ldrb	r3, [r7, #31]
 80019d6:	3b01      	subs	r3, #1
 80019d8:	77fb      	strb	r3, [r7, #31]

		if(!calibrating){
 80019da:	7ffb      	ldrb	r3, [r7, #31]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d11a      	bne.n	8001a16 <current_thread+0x13e>
			Voltage_offset[0] = -Voltage_offset_temp[0]/50/lpf;
 80019e0:	4b55      	ldr	r3, [pc, #340]	; (8001b38 <current_thread+0x260>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	425b      	negs	r3, r3
 80019e6:	4a55      	ldr	r2, [pc, #340]	; (8001b3c <current_thread+0x264>)
 80019e8:	fba2 2303 	umull	r2, r3, r2, r3
 80019ec:	0b1b      	lsrs	r3, r3, #12
 80019ee:	4a54      	ldr	r2, [pc, #336]	; (8001b40 <current_thread+0x268>)
 80019f0:	6013      	str	r3, [r2, #0]
			Voltage_offset[1] = -Voltage_offset_temp[1]/50/lpf;
 80019f2:	4b51      	ldr	r3, [pc, #324]	; (8001b38 <current_thread+0x260>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	425b      	negs	r3, r3
 80019f8:	4a50      	ldr	r2, [pc, #320]	; (8001b3c <current_thread+0x264>)
 80019fa:	fba2 2303 	umull	r2, r3, r2, r3
 80019fe:	0b1b      	lsrs	r3, r3, #12
 8001a00:	4a4f      	ldr	r2, [pc, #316]	; (8001b40 <current_thread+0x268>)
 8001a02:	6053      	str	r3, [r2, #4]
			Voltage_offset[2] = -Voltage_offset_temp[2]/50/lpf;
 8001a04:	4b4c      	ldr	r3, [pc, #304]	; (8001b38 <current_thread+0x260>)
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	425b      	negs	r3, r3
 8001a0a:	4a4c      	ldr	r2, [pc, #304]	; (8001b3c <current_thread+0x264>)
 8001a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a10:	0b1b      	lsrs	r3, r3, #12
 8001a12:	4a4b      	ldr	r2, [pc, #300]	; (8001b40 <current_thread+0x268>)
 8001a14:	6093      	str	r3, [r2, #8]
	while(calibrating){
 8001a16:	7ffb      	ldrb	r3, [r7, #31]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d1b5      	bne.n	8001988 <current_thread+0xb0>
		}
	}

	SetMode(&Current_PID,  AUTOMATIC);
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	483c      	ldr	r0, [pc, #240]	; (8001b10 <current_thread+0x238>)
 8001a20:	f7ff fea1 	bl	8001766 <SetMode>



	//-----------------CAN----------
	FDCAN_addCallback(&hfdcan1, 0x11, test);
 8001a24:	4a47      	ldr	r2, [pc, #284]	; (8001b44 <current_thread+0x26c>)
 8001a26:	2111      	movs	r1, #17
 8001a28:	4847      	ldr	r0, [pc, #284]	; (8001b48 <current_thread+0x270>)
 8001a2a:	f000 fb01 	bl	8002030 <FDCAN_addCallback>
	FDCAN_Start(&hfdcan1);
 8001a2e:	4846      	ldr	r0, [pc, #280]	; (8001b48 <current_thread+0x270>)
 8001a30:	f000 fae2 	bl	8001ff8 <FDCAN_Start>

	FDCAN_sendData(&hfdcan1, 0x33, TxData);
 8001a34:	4a45      	ldr	r2, [pc, #276]	; (8001b4c <current_thread+0x274>)
 8001a36:	2133      	movs	r1, #51	; 0x33
 8001a38:	4843      	ldr	r0, [pc, #268]	; (8001b48 <current_thread+0x270>)
 8001a3a:	f000 fb35 	bl	80020a8 <FDCAN_sendData>

	int NUM_NOTES = sizeof(melody) / sizeof(melody[0]) / 2;
 8001a3e:	2358      	movs	r3, #88	; 0x58
 8001a40:	60bb      	str	r3, [r7, #8]
		//HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 0);

		//wait until callback
		//uint32_t thread_flag = 0;
		//thread_flag = osThreadFlagsWait (adc_cplt_flag | adc_half_cplt_flag , osFlagsWaitAny, osWaitForever);
		if(!half_flag && !full_flag)continue; //return to While(1);
 8001a42:	4b3a      	ldr	r3, [pc, #232]	; (8001b2c <current_thread+0x254>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d105      	bne.n	8001a58 <current_thread+0x180>
 8001a4c:	4b38      	ldr	r3, [pc, #224]	; (8001b30 <current_thread+0x258>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f000 8199 	beq.w	8001d8a <current_thread+0x4b2>
		half_flag = 0;
 8001a58:	4b34      	ldr	r3, [pc, #208]	; (8001b2c <current_thread+0x254>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	701a      	strb	r2, [r3, #0]
		full_flag = 0;
 8001a5e:	4b34      	ldr	r3, [pc, #208]	; (8001b30 <current_thread+0x258>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(WARNING_LED_GPIO_Port, WARNING_LED_Pin, 1);
 8001a64:	2201      	movs	r2, #1
 8001a66:	2180      	movs	r1, #128	; 0x80
 8001a68:	4839      	ldr	r0, [pc, #228]	; (8001b50 <current_thread+0x278>)
 8001a6a:	f005 f9fb 	bl	8006e64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(WARNING_LED_GPIO_Port, WARNING_LED_Pin, 0);
 8001a6e:	2200      	movs	r2, #0
 8001a70:	2180      	movs	r1, #128	; 0x80
 8001a72:	4837      	ldr	r0, [pc, #220]	; (8001b50 <current_thread+0x278>)
 8001a74:	f005 f9f6 	bl	8006e64 <HAL_GPIO_WritePin>
		//results in buffer now

		DC_current = (uint32_t)((abs((int)current[0])+abs((int)current[1])+abs((int)current[2]))/2);
 8001a78:	4b2e      	ldr	r3, [pc, #184]	; (8001b34 <current_thread+0x25c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001a80:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001a84:	4b2b      	ldr	r3, [pc, #172]	; (8001b34 <current_thread+0x25c>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	bfb8      	it	lt
 8001a8c:	425b      	neglt	r3, r3
 8001a8e:	441a      	add	r2, r3
 8001a90:	4b28      	ldr	r3, [pc, #160]	; (8001b34 <current_thread+0x25c>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	bfb8      	it	lt
 8001a98:	425b      	neglt	r3, r3
 8001a9a:	4413      	add	r3, r2
 8001a9c:	0fda      	lsrs	r2, r3, #31
 8001a9e:	4413      	add	r3, r2
 8001aa0:	105b      	asrs	r3, r3, #1
 8001aa2:	61bb      	str	r3, [r7, #24]
		int32_t DC_current_offset = (current[0]+current[1]+current[2])/3;
 8001aa4:	4b23      	ldr	r3, [pc, #140]	; (8001b34 <current_thread+0x25c>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	4b22      	ldr	r3, [pc, #136]	; (8001b34 <current_thread+0x25c>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	441a      	add	r2, r3
 8001aae:	4b21      	ldr	r3, [pc, #132]	; (8001b34 <current_thread+0x25c>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	4a27      	ldr	r2, [pc, #156]	; (8001b54 <current_thread+0x27c>)
 8001ab6:	fb82 1203 	smull	r1, r2, r2, r3
 8001aba:	17db      	asrs	r3, r3, #31
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	607b      	str	r3, [r7, #4]

		//test time
		time_to_die++;
 8001ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
//		if(Angle >= 360){
//			Angle -= 360;
//		}

		//--------------------------Music-------------------------------
		Current_PID.Setpoint = 5000;
 8001ac6:	4912      	ldr	r1, [pc, #72]	; (8001b10 <current_thread+0x238>)
 8001ac8:	a30d      	add	r3, pc, #52	; (adr r3, 8001b00 <current_thread+0x228>)
 8001aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ace:	e9c1 2304 	strd	r2, r3, [r1, #16]

		uint16_t freq = 0;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	83bb      	strh	r3, [r7, #28]
		if (divider > 0) {
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	dd3d      	ble.n	8001b58 <current_thread+0x280>
		  // regular note, just proceed
		  noteDuration = (wholenote) / divider;
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	fb92 f3f3 	sdiv	r3, r2, r3
 8001ae4:	623b      	str	r3, [r7, #32]
 8001ae6:	e052      	b.n	8001b8e <current_thread+0x2b6>
 8001ae8:	00000000 	.word	0x00000000
 8001aec:	3ff00000 	.word	0x3ff00000
 8001af0:	00000000 	.word	0x00000000
 8001af4:	40976c00 	.word	0x40976c00
	...
 8001b04:	40b38800 	.word	0x40b38800
 8001b08:	200003a4 	.word	0x200003a4
 8001b0c:	20000518 	.word	0x20000518
 8001b10:	200003f0 	.word	0x200003f0
 8001b14:	200002c8 	.word	0x200002c8
 8001b18:	200002d0 	.word	0x200002d0
 8001b1c:	20000468 	.word	0x20000468
 8001b20:	200006b8 	.word	0x200006b8
 8001b24:	3c23d70a 	.word	0x3c23d70a
 8001b28:	20000000 	.word	0x20000000
 8001b2c:	200003ea 	.word	0x200003ea
 8001b30:	200003eb 	.word	0x200003eb
 8001b34:	200003dc 	.word	0x200003dc
 8001b38:	200003d0 	.word	0x200003d0
 8001b3c:	d1b71759 	.word	0xd1b71759
 8001b40:	200003c4 	.word	0x200003c4
 8001b44:	08001895 	.word	0x08001895
 8001b48:	200006cc 	.word	0x200006cc
 8001b4c:	20000470 	.word	0x20000470
 8001b50:	48000800 	.word	0x48000800
 8001b54:	55555556 	.word	0x55555556
		} else if (divider < 0) {
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	da17      	bge.n	8001b8e <current_thread+0x2b6>
		  // dotted notes are represented with negative durations!!
		  noteDuration = (wholenote) / abs(divider);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	bfb8      	it	lt
 8001b64:	425b      	neglt	r3, r3
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b6c:	623b      	str	r3, [r7, #32]
		  noteDuration *= 1.5; // increases the duration in half for dotted notes
 8001b6e:	6a38      	ldr	r0, [r7, #32]
 8001b70:	f7fe fca8 	bl	80004c4 <__aeabi_i2d>
 8001b74:	f04f 0200 	mov.w	r2, #0
 8001b78:	4b87      	ldr	r3, [pc, #540]	; (8001d98 <current_thread+0x4c0>)
 8001b7a:	f7fe fd0d 	bl	8000598 <__aeabi_dmul>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	460b      	mov	r3, r1
 8001b82:	4610      	mov	r0, r2
 8001b84:	4619      	mov	r1, r3
 8001b86:	f7fe ffa1 	bl	8000acc <__aeabi_d2iz>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	623b      	str	r3, [r7, #32]
		}

		if((time_to_die-melody_time)-noteDuration*25*0.9 >=  noteDuration*25){
 8001b8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7fe fc85 	bl	80004a4 <__aeabi_ui2d>
 8001b9a:	4604      	mov	r4, r0
 8001b9c:	460d      	mov	r5, r1
 8001b9e:	6a3a      	ldr	r2, [r7, #32]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	009a      	lsls	r2, r3, #2
 8001ba8:	4413      	add	r3, r2
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7fe fc8a 	bl	80004c4 <__aeabi_i2d>
 8001bb0:	a377      	add	r3, pc, #476	; (adr r3, 8001d90 <current_thread+0x4b8>)
 8001bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb6:	f7fe fcef 	bl	8000598 <__aeabi_dmul>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	4620      	mov	r0, r4
 8001bc0:	4629      	mov	r1, r5
 8001bc2:	f7fe fb31 	bl	8000228 <__aeabi_dsub>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	4614      	mov	r4, r2
 8001bcc:	461d      	mov	r5, r3
 8001bce:	6a3a      	ldr	r2, [r7, #32]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4413      	add	r3, r2
 8001bd6:	009a      	lsls	r2, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7fe fc72 	bl	80004c4 <__aeabi_i2d>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	4620      	mov	r0, r4
 8001be6:	4629      	mov	r1, r5
 8001be8:	f7fe ff5c 	bl	8000aa4 <__aeabi_dcmpge>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d012      	beq.n	8001c18 <current_thread+0x340>
			if ((time_to_die-melody_time) >=  noteDuration*25){
 8001bf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bf6:	1ad1      	subs	r1, r2, r3
 8001bf8:	6a3a      	ldr	r2, [r7, #32]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	4413      	add	r3, r2
 8001c00:	009a      	lsls	r2, r3, #2
 8001c02:	4413      	add	r3, r2
 8001c04:	4299      	cmp	r1, r3
 8001c06:	d30d      	bcc.n	8001c24 <current_thread+0x34c>
				melody_index += 2;
 8001c08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c0c:	3302      	adds	r3, #2
 8001c0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				melody_time= time_to_die;
 8001c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c14:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c16:	e005      	b.n	8001c24 <current_thread+0x34c>
			}
		}
		else freq = melody[melody_index];
 8001c18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c1c:	4a5f      	ldr	r2, [pc, #380]	; (8001d9c <current_thread+0x4c4>)
 8001c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c22:	83bb      	strh	r3, [r7, #28]

		if(melody_index >= NUM_NOTES){
 8001c24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c28:	68ba      	ldr	r2, [r7, #8]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	dc04      	bgt.n	8001c38 <current_thread+0x360>
			shutoff();
 8001c2e:	f7ff fa93 	bl	8001158 <shutoff>
			shutdown();
 8001c32:	f7ff faa3 	bl	800117c <shutdown>
			while(1); //done playing
 8001c36:	e7fe      	b.n	8001c36 <current_thread+0x35e>
		}
		if(freq == 0)Angle = 0;
 8001c38:	8bbb      	ldrh	r3, [r7, #28]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d104      	bne.n	8001c48 <current_thread+0x370>
 8001c3e:	4b58      	ldr	r3, [pc, #352]	; (8001da0 <current_thread+0x4c8>)
 8001c40:	f04f 0200 	mov.w	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	e035      	b.n	8001cb4 <current_thread+0x3dc>
		else if(!(time_to_die%frequenzy(freq)) && Angle == 0)Angle = 30;
 8001c48:	8bbb      	ldrh	r3, [r7, #28]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff fe0c 	bl	8001868 <frequenzy>
 8001c50:	4603      	mov	r3, r0
 8001c52:	461a      	mov	r2, r3
 8001c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c56:	fbb3 f1f2 	udiv	r1, r3, r2
 8001c5a:	fb01 f202 	mul.w	r2, r1, r2
 8001c5e:	1a9b      	subs	r3, r3, r2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d10b      	bne.n	8001c7c <current_thread+0x3a4>
 8001c64:	4b4e      	ldr	r3, [pc, #312]	; (8001da0 <current_thread+0x4c8>)
 8001c66:	edd3 7a00 	vldr	s15, [r3]
 8001c6a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c72:	d103      	bne.n	8001c7c <current_thread+0x3a4>
 8001c74:	4b4a      	ldr	r3, [pc, #296]	; (8001da0 <current_thread+0x4c8>)
 8001c76:	4a4b      	ldr	r2, [pc, #300]	; (8001da4 <current_thread+0x4cc>)
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	e01b      	b.n	8001cb4 <current_thread+0x3dc>
		else if(!(time_to_die%frequenzy(freq)) && Angle == 30)Angle = 0;
 8001c7c:	8bbb      	ldrh	r3, [r7, #28]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff fdf2 	bl	8001868 <frequenzy>
 8001c84:	4603      	mov	r3, r0
 8001c86:	461a      	mov	r2, r3
 8001c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c8a:	fbb3 f1f2 	udiv	r1, r3, r2
 8001c8e:	fb01 f202 	mul.w	r2, r1, r2
 8001c92:	1a9b      	subs	r3, r3, r2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d10d      	bne.n	8001cb4 <current_thread+0x3dc>
 8001c98:	4b41      	ldr	r3, [pc, #260]	; (8001da0 <current_thread+0x4c8>)
 8001c9a:	edd3 7a00 	vldr	s15, [r3]
 8001c9e:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001ca2:	eef4 7a47 	vcmp.f32	s15, s14
 8001ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001caa:	d103      	bne.n	8001cb4 <current_thread+0x3dc>
 8001cac:	4b3c      	ldr	r3, [pc, #240]	; (8001da0 <current_thread+0x4c8>)
 8001cae:	f04f 0200 	mov.w	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
//		if(time_to_die > 25000*2)Current_PID.Setpoint = 0;
//		if(time_to_die > 25000*3)Current_PID.Setpoint = 400;
//		if(time_to_die > 25000*4)Current_PID.Setpoint = 0;


		if(DC_current == Current_limit){
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	f247 5230 	movw	r2, #30000	; 0x7530
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d109      	bne.n	8001cd2 <current_thread+0x3fa>
			shutoff();
 8001cbe:	f7ff fa4b 	bl	8001158 <shutoff>
			HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 1);
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ccc:	f005 f8ca 	bl	8006e64 <HAL_GPIO_WritePin>
			while(1);
 8001cd0:	e7fe      	b.n	8001cd0 <current_thread+0x3f8>
		}

		//----------------------------Current PID loop------------------------------
		Current_PID.Input = (double)DC_current;
 8001cd2:	69b8      	ldr	r0, [r7, #24]
 8001cd4:	f7fe fbe6 	bl	80004a4 <__aeabi_ui2d>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	4932      	ldr	r1, [pc, #200]	; (8001da8 <current_thread+0x4d0>)
 8001cde:	e9c1 2300 	strd	r2, r3, [r1]
		Compute(&Current_PID);
 8001ce2:	4831      	ldr	r0, [pc, #196]	; (8001da8 <current_thread+0x4d0>)
 8001ce4:	f7ff fad0 	bl	8001288 <Compute>

		if(Voltage_offset[0] == 0)shutoff();
 8001ce8:	4b30      	ldr	r3, [pc, #192]	; (8001dac <current_thread+0x4d4>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d102      	bne.n	8001cf6 <current_thread+0x41e>
 8001cf0:	f7ff fa32 	bl	8001158 <shutoff>
 8001cf4:	e014      	b.n	8001d20 <current_thread+0x448>
		else inverter((uint16_t)Angle, Current_PID.Output);
 8001cf6:	4b2a      	ldr	r3, [pc, #168]	; (8001da0 <current_thread+0x4c8>)
 8001cf8:	edd3 7a00 	vldr	s15, [r3]
 8001cfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d00:	ee17 3a90 	vmov	r3, s15
 8001d04:	b29c      	uxth	r4, r3
 8001d06:	4b28      	ldr	r3, [pc, #160]	; (8001da8 <current_thread+0x4d0>)
 8001d08:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001d0c:	4610      	mov	r0, r2
 8001d0e:	4619      	mov	r1, r3
 8001d10:	f7fe ff04 	bl	8000b1c <__aeabi_d2uiz>
 8001d14:	4603      	mov	r3, r0
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4620      	mov	r0, r4
 8001d1c:	f7ff f8f6 	bl	8000f0c <inverter>
		//osThreadFlagsSet(CTRL_thread_id, update_flag);

		TxData[0] = DC_current & 0xff;
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	b2da      	uxtb	r2, r3
 8001d24:	4b22      	ldr	r3, [pc, #136]	; (8001db0 <current_thread+0x4d8>)
 8001d26:	701a      	strb	r2, [r3, #0]
		TxData[1] = (DC_current>>8) & 0xff;
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	0a1b      	lsrs	r3, r3, #8
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	4b20      	ldr	r3, [pc, #128]	; (8001db0 <current_thread+0x4d8>)
 8001d30:	705a      	strb	r2, [r3, #1]


		if(time_to_die%50000 == 0)FDCAN_sendData(&hfdcan1, 0x33, TxData);
 8001d32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d34:	0913      	lsrs	r3, r2, #4
 8001d36:	491f      	ldr	r1, [pc, #124]	; (8001db4 <current_thread+0x4dc>)
 8001d38:	fba1 1303 	umull	r1, r3, r1, r3
 8001d3c:	09db      	lsrs	r3, r3, #7
 8001d3e:	f24c 3150 	movw	r1, #50000	; 0xc350
 8001d42:	fb01 f303 	mul.w	r3, r1, r3
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d104      	bne.n	8001d56 <current_thread+0x47e>
 8001d4c:	4a18      	ldr	r2, [pc, #96]	; (8001db0 <current_thread+0x4d8>)
 8001d4e:	2133      	movs	r1, #51	; 0x33
 8001d50:	4819      	ldr	r0, [pc, #100]	; (8001db8 <current_thread+0x4e0>)
 8001d52:	f000 f9a9 	bl	80020a8 <FDCAN_sendData>
		//DAC for measuring fast signals
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (uint16_t)Current_PID.Input*4096/VDDA);
 8001d56:	4b14      	ldr	r3, [pc, #80]	; (8001da8 <current_thread+0x4d0>)
 8001d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d5c:	4610      	mov	r0, r2
 8001d5e:	4619      	mov	r1, r3
 8001d60:	f7fe fedc 	bl	8000b1c <__aeabi_d2uiz>
 8001d64:	4603      	mov	r3, r0
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	031b      	lsls	r3, r3, #12
 8001d6a:	4a14      	ldr	r2, [pc, #80]	; (8001dbc <current_thread+0x4e4>)
 8001d6c:	8812      	ldrh	r2, [r2, #0]
 8001d6e:	b212      	sxth	r2, r2
 8001d70:	fb93 f3f2 	sdiv	r3, r3, r2
 8001d74:	2200      	movs	r2, #0
 8001d76:	2100      	movs	r1, #0
 8001d78:	4811      	ldr	r0, [pc, #68]	; (8001dc0 <current_thread+0x4e8>)
 8001d7a:	f003 fbf4 	bl	8005566 <HAL_DAC_SetValue>
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2140      	movs	r1, #64	; 0x40
 8001d82:	4810      	ldr	r0, [pc, #64]	; (8001dc4 <current_thread+0x4ec>)
 8001d84:	f005 f86e 	bl	8006e64 <HAL_GPIO_WritePin>
 8001d88:	e65b      	b.n	8001a42 <current_thread+0x16a>
		if(!half_flag && !full_flag)continue; //return to While(1);
 8001d8a:	bf00      	nop
	while(1){
 8001d8c:	e659      	b.n	8001a42 <current_thread+0x16a>
 8001d8e:	bf00      	nop
 8001d90:	cccccccd 	.word	0xcccccccd
 8001d94:	3feccccc 	.word	0x3feccccc
 8001d98:	3ff80000 	.word	0x3ff80000
 8001d9c:	20000000 	.word	0x20000000
 8001da0:	20000460 	.word	0x20000460
 8001da4:	41f00000 	.word	0x41f00000
 8001da8:	200003f0 	.word	0x200003f0
 8001dac:	200003c4 	.word	0x200003c4
 8001db0:	20000470 	.word	0x20000470
 8001db4:	0a7c5ac5 	.word	0x0a7c5ac5
 8001db8:	200006cc 	.word	0x200006cc
 8001dbc:	200003e8 	.word	0x200003e8
 8001dc0:	200006b8 	.word	0x200006b8
 8001dc4:	48000800 	.word	0x48000800

08001dc8 <HAL_ADC_ConvHalfCpltCallback>:
	}
}

//test

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	2140      	movs	r1, #64	; 0x40
 8001dd4:	483a      	ldr	r0, [pc, #232]	; (8001ec0 <HAL_ADC_ConvHalfCpltCallback+0xf8>)
 8001dd6:	f005 f845 	bl	8006e64 <HAL_GPIO_WritePin>
	VDDA = (int16_t)3000*(*vrefint)/(adc_result_DMA[3]/number_of_oversample);
 8001dda:	4b3a      	ldr	r3, [pc, #232]	; (8001ec4 <HAL_ADC_ConvHalfCpltCallback+0xfc>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	881b      	ldrh	r3, [r3, #0]
 8001de0:	461a      	mov	r2, r3
 8001de2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001de6:	fb02 f303 	mul.w	r3, r2, r3
 8001dea:	461a      	mov	r2, r3
 8001dec:	4b36      	ldr	r3, [pc, #216]	; (8001ec8 <HAL_ADC_ConvHalfCpltCallback+0x100>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	091b      	lsrs	r3, r3, #4
 8001df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df6:	b21a      	sxth	r2, r3
 8001df8:	4b34      	ldr	r3, [pc, #208]	; (8001ecc <HAL_ADC_ConvHalfCpltCallback+0x104>)
 8001dfa:	801a      	strh	r2, [r3, #0]
	current[0] = -(int32_t)(adc_result_DMA[2]/number_of_oversample*(VDDA*153/100/4095)-Voltage_offset[0])*50;
 8001dfc:	4b32      	ldr	r3, [pc, #200]	; (8001ec8 <HAL_ADC_ConvHalfCpltCallback+0x100>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	091a      	lsrs	r2, r3, #4
 8001e02:	4b32      	ldr	r3, [pc, #200]	; (8001ecc <HAL_ADC_ConvHalfCpltCallback+0x104>)
 8001e04:	881b      	ldrh	r3, [r3, #0]
 8001e06:	b21b      	sxth	r3, r3
 8001e08:	4619      	mov	r1, r3
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	440b      	add	r3, r1
 8001e10:	0119      	lsls	r1, r3, #4
 8001e12:	440b      	add	r3, r1
 8001e14:	492e      	ldr	r1, [pc, #184]	; (8001ed0 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8001e16:	fb81 0103 	smull	r0, r1, r1, r3
 8001e1a:	1449      	asrs	r1, r1, #17
 8001e1c:	17db      	asrs	r3, r3, #31
 8001e1e:	1acb      	subs	r3, r1, r3
 8001e20:	fb03 f202 	mul.w	r2, r3, r2
 8001e24:	4b2b      	ldr	r3, [pc, #172]	; (8001ed4 <HAL_ADC_ConvHalfCpltCallback+0x10c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8001e30:	fb02 f303 	mul.w	r3, r2, r3
 8001e34:	4a28      	ldr	r2, [pc, #160]	; (8001ed8 <HAL_ADC_ConvHalfCpltCallback+0x110>)
 8001e36:	6013      	str	r3, [r2, #0]
	current[1] = -(int32_t)(adc_result_DMA[1]/number_of_oversample*(VDDA*153/100/4095)-Voltage_offset[1])*50;
 8001e38:	4b23      	ldr	r3, [pc, #140]	; (8001ec8 <HAL_ADC_ConvHalfCpltCallback+0x100>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	091a      	lsrs	r2, r3, #4
 8001e3e:	4b23      	ldr	r3, [pc, #140]	; (8001ecc <HAL_ADC_ConvHalfCpltCallback+0x104>)
 8001e40:	881b      	ldrh	r3, [r3, #0]
 8001e42:	b21b      	sxth	r3, r3
 8001e44:	4619      	mov	r1, r3
 8001e46:	460b      	mov	r3, r1
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	440b      	add	r3, r1
 8001e4c:	0119      	lsls	r1, r3, #4
 8001e4e:	440b      	add	r3, r1
 8001e50:	491f      	ldr	r1, [pc, #124]	; (8001ed0 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8001e52:	fb81 0103 	smull	r0, r1, r1, r3
 8001e56:	1449      	asrs	r1, r1, #17
 8001e58:	17db      	asrs	r3, r3, #31
 8001e5a:	1acb      	subs	r3, r1, r3
 8001e5c:	fb03 f202 	mul.w	r2, r3, r2
 8001e60:	4b1c      	ldr	r3, [pc, #112]	; (8001ed4 <HAL_ADC_ConvHalfCpltCallback+0x10c>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	461a      	mov	r2, r3
 8001e68:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8001e6c:	fb02 f303 	mul.w	r3, r2, r3
 8001e70:	4a19      	ldr	r2, [pc, #100]	; (8001ed8 <HAL_ADC_ConvHalfCpltCallback+0x110>)
 8001e72:	6053      	str	r3, [r2, #4]
	current[2] = -(int32_t)(adc_result_DMA[0]/number_of_oversample*(VDDA*153/100/4095)-Voltage_offset[2])*50;
 8001e74:	4b14      	ldr	r3, [pc, #80]	; (8001ec8 <HAL_ADC_ConvHalfCpltCallback+0x100>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	091a      	lsrs	r2, r3, #4
 8001e7a:	4b14      	ldr	r3, [pc, #80]	; (8001ecc <HAL_ADC_ConvHalfCpltCallback+0x104>)
 8001e7c:	881b      	ldrh	r3, [r3, #0]
 8001e7e:	b21b      	sxth	r3, r3
 8001e80:	4619      	mov	r1, r3
 8001e82:	460b      	mov	r3, r1
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	440b      	add	r3, r1
 8001e88:	0119      	lsls	r1, r3, #4
 8001e8a:	440b      	add	r3, r1
 8001e8c:	4910      	ldr	r1, [pc, #64]	; (8001ed0 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8001e8e:	fb81 0103 	smull	r0, r1, r1, r3
 8001e92:	1449      	asrs	r1, r1, #17
 8001e94:	17db      	asrs	r3, r3, #31
 8001e96:	1acb      	subs	r3, r1, r3
 8001e98:	fb03 f202 	mul.w	r2, r3, r2
 8001e9c:	4b0d      	ldr	r3, [pc, #52]	; (8001ed4 <HAL_ADC_ConvHalfCpltCallback+0x10c>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8001ea8:	fb02 f303 	mul.w	r3, r2, r3
 8001eac:	4a0a      	ldr	r2, [pc, #40]	; (8001ed8 <HAL_ADC_ConvHalfCpltCallback+0x110>)
 8001eae:	6093      	str	r3, [r2, #8]
	half_flag = 1;
 8001eb0:	4b0a      	ldr	r3, [pc, #40]	; (8001edc <HAL_ADC_ConvHalfCpltCallback+0x114>)
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	701a      	strb	r2, [r3, #0]
}
 8001eb6:	bf00      	nop
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	48000800 	.word	0x48000800
 8001ec4:	200002c0 	.word	0x200002c0
 8001ec8:	200003a4 	.word	0x200003a4
 8001ecc:	200003e8 	.word	0x200003e8
 8001ed0:	51f0a429 	.word	0x51f0a429
 8001ed4:	200003c4 	.word	0x200003c4
 8001ed8:	200003dc 	.word	0x200003dc
 8001edc:	200003ea 	.word	0x200003ea

08001ee0 <ADC1_ConvCpltCallback>:
void ADC1_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
 8001ee8:	2201      	movs	r2, #1
 8001eea:	2140      	movs	r1, #64	; 0x40
 8001eec:	483a      	ldr	r0, [pc, #232]	; (8001fd8 <ADC1_ConvCpltCallback+0xf8>)
 8001eee:	f004 ffb9 	bl	8006e64 <HAL_GPIO_WritePin>
	VDDA = (int16_t)3000*(*vrefint)/(adc_result_DMA[7]/number_of_oversample);
 8001ef2:	4b3a      	ldr	r3, [pc, #232]	; (8001fdc <ADC1_ConvCpltCallback+0xfc>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	881b      	ldrh	r3, [r3, #0]
 8001ef8:	461a      	mov	r2, r3
 8001efa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001efe:	fb02 f303 	mul.w	r3, r2, r3
 8001f02:	461a      	mov	r2, r3
 8001f04:	4b36      	ldr	r3, [pc, #216]	; (8001fe0 <ADC1_ConvCpltCallback+0x100>)
 8001f06:	69db      	ldr	r3, [r3, #28]
 8001f08:	091b      	lsrs	r3, r3, #4
 8001f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f0e:	b21a      	sxth	r2, r3
 8001f10:	4b34      	ldr	r3, [pc, #208]	; (8001fe4 <ADC1_ConvCpltCallback+0x104>)
 8001f12:	801a      	strh	r2, [r3, #0]
	current[0] = -(int32_t)(adc_result_DMA[6]/number_of_oversample*(VDDA*153/100/4095)-Voltage_offset[0])*50;
 8001f14:	4b32      	ldr	r3, [pc, #200]	; (8001fe0 <ADC1_ConvCpltCallback+0x100>)
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	091a      	lsrs	r2, r3, #4
 8001f1a:	4b32      	ldr	r3, [pc, #200]	; (8001fe4 <ADC1_ConvCpltCallback+0x104>)
 8001f1c:	881b      	ldrh	r3, [r3, #0]
 8001f1e:	b21b      	sxth	r3, r3
 8001f20:	4619      	mov	r1, r3
 8001f22:	460b      	mov	r3, r1
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	440b      	add	r3, r1
 8001f28:	0119      	lsls	r1, r3, #4
 8001f2a:	440b      	add	r3, r1
 8001f2c:	492e      	ldr	r1, [pc, #184]	; (8001fe8 <ADC1_ConvCpltCallback+0x108>)
 8001f2e:	fb81 0103 	smull	r0, r1, r1, r3
 8001f32:	1449      	asrs	r1, r1, #17
 8001f34:	17db      	asrs	r3, r3, #31
 8001f36:	1acb      	subs	r3, r1, r3
 8001f38:	fb03 f202 	mul.w	r2, r3, r2
 8001f3c:	4b2b      	ldr	r3, [pc, #172]	; (8001fec <ADC1_ConvCpltCallback+0x10c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	461a      	mov	r2, r3
 8001f44:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8001f48:	fb02 f303 	mul.w	r3, r2, r3
 8001f4c:	4a28      	ldr	r2, [pc, #160]	; (8001ff0 <ADC1_ConvCpltCallback+0x110>)
 8001f4e:	6013      	str	r3, [r2, #0]
	current[1] = -(int32_t)(adc_result_DMA[5]/number_of_oversample*(VDDA*153/100/4095)-Voltage_offset[1])*50;
 8001f50:	4b23      	ldr	r3, [pc, #140]	; (8001fe0 <ADC1_ConvCpltCallback+0x100>)
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	091a      	lsrs	r2, r3, #4
 8001f56:	4b23      	ldr	r3, [pc, #140]	; (8001fe4 <ADC1_ConvCpltCallback+0x104>)
 8001f58:	881b      	ldrh	r3, [r3, #0]
 8001f5a:	b21b      	sxth	r3, r3
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	460b      	mov	r3, r1
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	440b      	add	r3, r1
 8001f64:	0119      	lsls	r1, r3, #4
 8001f66:	440b      	add	r3, r1
 8001f68:	491f      	ldr	r1, [pc, #124]	; (8001fe8 <ADC1_ConvCpltCallback+0x108>)
 8001f6a:	fb81 0103 	smull	r0, r1, r1, r3
 8001f6e:	1449      	asrs	r1, r1, #17
 8001f70:	17db      	asrs	r3, r3, #31
 8001f72:	1acb      	subs	r3, r1, r3
 8001f74:	fb03 f202 	mul.w	r2, r3, r2
 8001f78:	4b1c      	ldr	r3, [pc, #112]	; (8001fec <ADC1_ConvCpltCallback+0x10c>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	461a      	mov	r2, r3
 8001f80:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8001f84:	fb02 f303 	mul.w	r3, r2, r3
 8001f88:	4a19      	ldr	r2, [pc, #100]	; (8001ff0 <ADC1_ConvCpltCallback+0x110>)
 8001f8a:	6053      	str	r3, [r2, #4]
	current[2] = -(int32_t)(adc_result_DMA[4]/number_of_oversample*(VDDA*153/100/4095)-Voltage_offset[2])*50;
 8001f8c:	4b14      	ldr	r3, [pc, #80]	; (8001fe0 <ADC1_ConvCpltCallback+0x100>)
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	091a      	lsrs	r2, r3, #4
 8001f92:	4b14      	ldr	r3, [pc, #80]	; (8001fe4 <ADC1_ConvCpltCallback+0x104>)
 8001f94:	881b      	ldrh	r3, [r3, #0]
 8001f96:	b21b      	sxth	r3, r3
 8001f98:	4619      	mov	r1, r3
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	440b      	add	r3, r1
 8001fa0:	0119      	lsls	r1, r3, #4
 8001fa2:	440b      	add	r3, r1
 8001fa4:	4910      	ldr	r1, [pc, #64]	; (8001fe8 <ADC1_ConvCpltCallback+0x108>)
 8001fa6:	fb81 0103 	smull	r0, r1, r1, r3
 8001faa:	1449      	asrs	r1, r1, #17
 8001fac:	17db      	asrs	r3, r3, #31
 8001fae:	1acb      	subs	r3, r1, r3
 8001fb0:	fb03 f202 	mul.w	r2, r3, r2
 8001fb4:	4b0d      	ldr	r3, [pc, #52]	; (8001fec <ADC1_ConvCpltCallback+0x10c>)
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	461a      	mov	r2, r3
 8001fbc:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8001fc0:	fb02 f303 	mul.w	r3, r2, r3
 8001fc4:	4a0a      	ldr	r2, [pc, #40]	; (8001ff0 <ADC1_ConvCpltCallback+0x110>)
 8001fc6:	6093      	str	r3, [r2, #8]
	full_flag = 1;
 8001fc8:	4b0a      	ldr	r3, [pc, #40]	; (8001ff4 <ADC1_ConvCpltCallback+0x114>)
 8001fca:	2201      	movs	r2, #1
 8001fcc:	701a      	strb	r2, [r3, #0]
}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	48000800 	.word	0x48000800
 8001fdc:	200002c0 	.word	0x200002c0
 8001fe0:	200003a4 	.word	0x200003a4
 8001fe4:	200003e8 	.word	0x200003e8
 8001fe8:	51f0a429 	.word	0x51f0a429
 8001fec:	200003c4 	.word	0x200003c4
 8001ff0:	200003dc 	.word	0x200003dc
 8001ff4:	200003eb 	.word	0x200003eb

08001ff8 <FDCAN_Start>:
/*****************************************************************************/
/** Public API                                                              **/
/*****************************************************************************/

STATUS FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Start the FDCAN bus */
  if (HAL_FDCAN_Start(hfdcan) != HAL_OK)
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f004 f90d 	bl	8006220 <HAL_FDCAN_Start>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <FDCAN_Start+0x18>
  {
    return FDCAN_STATUS_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e00a      	b.n	8002026 <FDCAN_Start+0x2e>
  }

  /* Activate the FIFO interrupt for respective fdcan controller */
  if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8002010:	2200      	movs	r2, #0
 8002012:	2101      	movs	r1, #1
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f004 fa49 	bl	80064ac <HAL_FDCAN_ActivateNotification>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <FDCAN_Start+0x2c>
  {
    return FDCAN_STATUS_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e000      	b.n	8002026 <FDCAN_Start+0x2e>
  }

  return FDCAN_STATUS_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
	...

08002030 <FDCAN_addCallback>:

STATUS FDCAN_addCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t identifier, FDCANCallback *processData)
{
 8002030:	b480      	push	{r7}
 8002032:	b089      	sub	sp, #36	; 0x24
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
  /* Check if we have space to add a new Callback */
  if (FDCAN_listCallbacksCount >= FDCAN_MAX_CALLBACKS) {
 800203c:	4b18      	ldr	r3, [pc, #96]	; (80020a0 <FDCAN_addCallback+0x70>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2b09      	cmp	r3, #9
 8002042:	d901      	bls.n	8002048 <FDCAN_addCallback+0x18>
      return FDCAN_STATUS_MAX_LIMIT_REACHED;
 8002044:	2303      	movs	r3, #3
 8002046:	e025      	b.n	8002094 <FDCAN_addCallback+0x64>
  }

  /* Check if identifier already exists */
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 8002048:	2300      	movs	r3, #0
 800204a:	61fb      	str	r3, [r7, #28]
 800204c:	e00c      	b.n	8002068 <FDCAN_addCallback+0x38>
      if (FDCAN_listCallbacks[i].identifier == identifier) {
 800204e:	4a15      	ldr	r2, [pc, #84]	; (80020a4 <FDCAN_addCallback+0x74>)
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	4413      	add	r3, r2
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	68ba      	ldr	r2, [r7, #8]
 800205a:	429a      	cmp	r2, r3
 800205c:	d101      	bne.n	8002062 <FDCAN_addCallback+0x32>
          return FDCAN_STATUS_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e018      	b.n	8002094 <FDCAN_addCallback+0x64>
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	3301      	adds	r3, #1
 8002066:	61fb      	str	r3, [r7, #28]
 8002068:	4b0d      	ldr	r3, [pc, #52]	; (80020a0 <FDCAN_addCallback+0x70>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	69fa      	ldr	r2, [r7, #28]
 800206e:	429a      	cmp	r2, r3
 8002070:	d3ed      	bcc.n	800204e <FDCAN_addCallback+0x1e>
      }
  }

  /* Add the callback to the list and update the count */
  FDCAN_listCallbacks[FDCAN_listCallbacksCount] = (FDCANCallback_internal_t) {
 8002072:	4b0b      	ldr	r3, [pc, #44]	; (80020a0 <FDCAN_addCallback+0x70>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	490a      	ldr	r1, [pc, #40]	; (80020a4 <FDCAN_addCallback+0x74>)
 800207a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800207e:	4a09      	ldr	r2, [pc, #36]	; (80020a4 <FDCAN_addCallback+0x74>)
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	4413      	add	r3, r2
 8002084:	68ba      	ldr	r2, [r7, #8]
 8002086:	605a      	str	r2, [r3, #4]
      .fp = processData,
      .identifier = identifier
  };
  FDCAN_listCallbacksCount++;
 8002088:	4b05      	ldr	r3, [pc, #20]	; (80020a0 <FDCAN_addCallback+0x70>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	3301      	adds	r3, #1
 800208e:	4a04      	ldr	r2, [pc, #16]	; (80020a0 <FDCAN_addCallback+0x70>)
 8002090:	6013      	str	r3, [r2, #0]

  return FDCAN_STATUS_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3724      	adds	r7, #36	; 0x24
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	200004cc 	.word	0x200004cc
 80020a4:	2000047c 	.word	0x2000047c

080020a8 <FDCAN_sendData>:

STATUS FDCAN_sendData(FDCAN_HandleTypeDef *hfdcan, uint32_t identifier, uint8_t TxData[8])
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b08e      	sub	sp, #56	; 0x38
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
  FDCAN_TxHeaderTypeDef TxHeader;

  /* Set the identifier to send */
  TxHeader.Identifier = identifier;
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	617b      	str	r3, [r7, #20]

  /* Set the data length to send */
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80020b8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80020bc:	623b      	str	r3, [r7, #32]

  /* Set the identifier type to send */
  TxHeader.IdType = FDCAN_STANDARD_ID;
 80020be:	2300      	movs	r3, #0
 80020c0:	61bb      	str	r3, [r7, #24]

  /* Set the frame type to send */
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80020c2:	2300      	movs	r3, #0
 80020c4:	61fb      	str	r3, [r7, #28]

  /* Set the error state indicator to send */
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80020c6:	2300      	movs	r3, #0
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the bit rate switch to send */
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80020ca:	2300      	movs	r3, #0
 80020cc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set the FD format to send */
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80020ce:	2300      	movs	r3, #0
 80020d0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set the Tx event FIFO control to send */
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80020d2:	2300      	movs	r3, #0
 80020d4:	633b      	str	r3, [r7, #48]	; 0x30

  /* Set the message marker to send */
  TxHeader.MessageMarker = 0;
 80020d6:	2300      	movs	r3, #0
 80020d8:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set the message to send */
  if (HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &TxHeader, TxData) != HAL_OK)
 80020da:	f107 0314 	add.w	r3, r7, #20
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	4619      	mov	r1, r3
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f004 f8c4 	bl	8006270 <HAL_FDCAN_AddMessageToTxFifoQ>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <FDCAN_sendData+0x4a>
  {
    return FDCAN_STATUS_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e000      	b.n	80020f4 <FDCAN_sendData+0x4c>
  }

  return FDCAN_STATUS_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3738      	adds	r7, #56	; 0x38
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <HAL_FDCAN_RxFifo0Callback>:
/** Local function definitions                                              **/
/*****************************************************************************/

/* This function overwrites _weak function definition in STM32 HAL FDCAN driver when linking project*/
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b090      	sub	sp, #64	; 0x40
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  FDCAN_RxHeaderTypeDef RxHeader;
  uint8_t RxData[8];

  /* Fetch the CAN message from the FIFO buffer*/
  if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8002106:	f107 030c 	add.w	r3, r7, #12
 800210a:	f107 0214 	add.w	r2, r7, #20
 800210e:	2140      	movs	r1, #64	; 0x40
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f004 f8f1 	bl	80062f8 <HAL_FDCAN_GetRxMessage>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <HAL_FDCAN_RxFifo0Callback+0x24>
  {
    Error_Handler();
 800211c:	f000 fe12 	bl	8002d44 <Error_Handler>
  }

  /* check if we have a callback for the identifier */
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 8002120:	2300      	movs	r3, #0
 8002122:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002124:	e012      	b.n	800214c <HAL_FDCAN_RxFifo0Callback+0x50>
      if (FDCAN_listCallbacks[i].identifier == RxHeader.Identifier) {
 8002126:	4a0e      	ldr	r2, [pc, #56]	; (8002160 <HAL_FDCAN_RxFifo0Callback+0x64>)
 8002128:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	4413      	add	r3, r2
 800212e:	685a      	ldr	r2, [r3, #4]
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	429a      	cmp	r2, r3
 8002134:	d107      	bne.n	8002146 <HAL_FDCAN_RxFifo0Callback+0x4a>
          FDCAN_listCallbacks[i].fp(RxData);
 8002136:	4a0a      	ldr	r2, [pc, #40]	; (8002160 <HAL_FDCAN_RxFifo0Callback+0x64>)
 8002138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800213a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800213e:	f107 020c 	add.w	r2, r7, #12
 8002142:	4610      	mov	r0, r2
 8002144:	4798      	blx	r3
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 8002146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002148:	3301      	adds	r3, #1
 800214a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800214c:	4b05      	ldr	r3, [pc, #20]	; (8002164 <HAL_FDCAN_RxFifo0Callback+0x68>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002152:	429a      	cmp	r2, r3
 8002154:	d3e7      	bcc.n	8002126 <HAL_FDCAN_RxFifo0Callback+0x2a>
      }
  }
}
 8002156:	bf00      	nop
 8002158:	bf00      	nop
 800215a:	3740      	adds	r7, #64	; 0x40
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	2000047c 	.word	0x2000047c
 8002164:	200004cc 	.word	0x200004cc

08002168 <HAL_UART_TxCpltCallback>:
	uint8_t Idx;
	uint8_t Buf[print_size];
}pool_mem;


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
	//create thread flag to signal finish transferring
	osThreadFlagsSet(thread_id, 0x01);
 8002170:	4b04      	ldr	r3, [pc, #16]	; (8002184 <HAL_UART_TxCpltCallback+0x1c>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2101      	movs	r1, #1
 8002176:	4618      	mov	r0, r3
 8002178:	f009 fa76 	bl	800b668 <osThreadFlagsSet>
}
 800217c:	bf00      	nop
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	20000514 	.word	0x20000514

08002188 <PrintServer>:

void PrintServer(void){
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
	pool_mem *mem_ptr;
	while(1){
		//get pointer to pool from print_serve
		osMessageQueueGet(print_message_queue_id, &mem_ptr, 0U, osWaitForever);
 800218e:	4b1c      	ldr	r3, [pc, #112]	; (8002200 <PrintServer+0x78>)
 8002190:	6818      	ldr	r0, [r3, #0]
 8002192:	4639      	mov	r1, r7
 8002194:	f04f 33ff 	mov.w	r3, #4294967295
 8002198:	2200      	movs	r2, #0
 800219a:	f009 fbc3 	bl	800b924 <osMessageQueueGet>

		if (mem_ptr != NULL) { // mem Block was available
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d0f4      	beq.n	800218e <PrintServer+0x6>
			//print the string that is stored at the pointer location
			HAL_UART_Transmit_DMA(&huart1, (uint8_t *)mem_ptr->Buf, mem_ptr->Idx);
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	1c59      	adds	r1, r3, #1
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	461a      	mov	r2, r3
 80021b0:	4814      	ldr	r0, [pc, #80]	; (8002204 <PrintServer+0x7c>)
 80021b2:	f007 fe49 	bl	8009e48 <HAL_UART_Transmit_DMA>
			//wait until UART is done transmitting
			osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);
 80021b6:	f04f 32ff 	mov.w	r2, #4294967295
 80021ba:	2100      	movs	r1, #0
 80021bc:	2001      	movs	r0, #1
 80021be:	f009 faa1 	bl	800b704 <osThreadFlagsWait>

			//free the memory pool id
			osStatus_t status = osMemoryPoolFree(pool_id, mem_ptr); // free mem block
 80021c2:	4b11      	ldr	r3, [pc, #68]	; (8002208 <PrintServer+0x80>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	4611      	mov	r1, r2
 80021ca:	4618      	mov	r0, r3
 80021cc:	f009 fcde 	bl	800bb8c <osMemoryPoolFree>
 80021d0:	6078      	str	r0, [r7, #4]
			switch (status)  {
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00b      	beq.n	80021f0 <PrintServer+0x68>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	dc0a      	bgt.n	80021f4 <PrintServer+0x6c>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f113 0f05 	cmn.w	r3, #5
 80021e4:	d008      	beq.n	80021f8 <PrintServer+0x70>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f113 0f04 	cmn.w	r3, #4
 80021ec:	d006      	beq.n	80021fc <PrintServer+0x74>
				case osErrorParameter:
				  break;
				case osErrorNoMemory:
				  break;
				default:
				  break;
 80021ee:	e001      	b.n	80021f4 <PrintServer+0x6c>
				  break;
 80021f0:	bf00      	nop
 80021f2:	e7cc      	b.n	800218e <PrintServer+0x6>
				  break;
 80021f4:	bf00      	nop
 80021f6:	e7ca      	b.n	800218e <PrintServer+0x6>
				  break;
 80021f8:	bf00      	nop
 80021fa:	e7c8      	b.n	800218e <PrintServer+0x6>
				  break;
 80021fc:	bf00      	nop
		osMessageQueueGet(print_message_queue_id, &mem_ptr, 0U, osWaitForever);
 80021fe:	e7c6      	b.n	800218e <PrintServer+0x6>
 8002200:	200004d0 	.word	0x200004d0
 8002204:	20000a5c 	.word	0x20000a5c
 8002208:	200004d4 	.word	0x200004d4

0800220c <PrintServerInit>:
			}
		}
	}
}

_Bool PrintServerInit(void){
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
	//create memory pool
	pool_id = osMemoryPoolNew (size_of_pool_and_queue, sizeof(pool_mem), NULL);
 8002210:	2200      	movs	r2, #0
 8002212:	2141      	movs	r1, #65	; 0x41
 8002214:	2020      	movs	r0, #32
 8002216:	f009 fbe3 	bl	800b9e0 <osMemoryPoolNew>
 800221a:	4603      	mov	r3, r0
 800221c:	4a0e      	ldr	r2, [pc, #56]	; (8002258 <PrintServerInit+0x4c>)
 800221e:	6013      	str	r3, [r2, #0]

	//create message queue
	message_queue_attr.name = "message queue printServer";
 8002220:	4b0e      	ldr	r3, [pc, #56]	; (800225c <PrintServerInit+0x50>)
 8002222:	4a0f      	ldr	r2, [pc, #60]	; (8002260 <PrintServerInit+0x54>)
 8002224:	601a      	str	r2, [r3, #0]
	print_message_queue_id = osMessageQueueNew(size_of_pool_and_queue, 4, &message_queue_attr);
 8002226:	4a0d      	ldr	r2, [pc, #52]	; (800225c <PrintServerInit+0x50>)
 8002228:	2104      	movs	r1, #4
 800222a:	2020      	movs	r0, #32
 800222c:	f009 fb06 	bl	800b83c <osMessageQueueNew>
 8002230:	4603      	mov	r3, r0
 8002232:	4a0c      	ldr	r2, [pc, #48]	; (8002264 <PrintServerInit+0x58>)
 8002234:	6013      	str	r3, [r2, #0]

	//create printServer thread
	print_server_thread_attr.priority = 9;
 8002236:	4b0c      	ldr	r3, [pc, #48]	; (8002268 <PrintServerInit+0x5c>)
 8002238:	2209      	movs	r2, #9
 800223a:	619a      	str	r2, [r3, #24]
	print_server_thread_attr.name = "print thread";
 800223c:	4b0a      	ldr	r3, [pc, #40]	; (8002268 <PrintServerInit+0x5c>)
 800223e:	4a0b      	ldr	r2, [pc, #44]	; (800226c <PrintServerInit+0x60>)
 8002240:	601a      	str	r2, [r3, #0]
	thread_id = osThreadNew((void *)PrintServer, NULL, &print_server_thread_attr);
 8002242:	4a09      	ldr	r2, [pc, #36]	; (8002268 <PrintServerInit+0x5c>)
 8002244:	2100      	movs	r1, #0
 8002246:	480a      	ldr	r0, [pc, #40]	; (8002270 <PrintServerInit+0x64>)
 8002248:	f009 f97c 	bl	800b544 <osThreadNew>
 800224c:	4603      	mov	r3, r0
 800224e:	4a09      	ldr	r2, [pc, #36]	; (8002274 <PrintServerInit+0x68>)
 8002250:	6013      	str	r3, [r2, #0]

	return 0;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	bd80      	pop	{r7, pc}
 8002258:	200004d4 	.word	0x200004d4
 800225c:	200004d8 	.word	0x200004d8
 8002260:	0800f2e4 	.word	0x0800f2e4
 8002264:	200004d0 	.word	0x200004d0
 8002268:	200004f0 	.word	0x200004f0
 800226c:	0800f300 	.word	0x0800f300
 8002270:	08002189 	.word	0x08002189
 8002274:	20000514 	.word	0x20000514

08002278 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b08c      	sub	sp, #48	; 0x30
 800227c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800227e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	605a      	str	r2, [r3, #4]
 8002288:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800228a:	1d3b      	adds	r3, r7, #4
 800228c:	2220      	movs	r2, #32
 800228e:	2100      	movs	r1, #0
 8002290:	4618      	mov	r0, r3
 8002292:	f00c ff23 	bl	800f0dc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002296:	4b4d      	ldr	r3, [pc, #308]	; (80023cc <MX_ADC1_Init+0x154>)
 8002298:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800229c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800229e:	4b4b      	ldr	r3, [pc, #300]	; (80023cc <MX_ADC1_Init+0x154>)
 80022a0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80022a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80022a6:	4b49      	ldr	r3, [pc, #292]	; (80023cc <MX_ADC1_Init+0x154>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022ac:	4b47      	ldr	r3, [pc, #284]	; (80023cc <MX_ADC1_Init+0x154>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80022b2:	4b46      	ldr	r3, [pc, #280]	; (80023cc <MX_ADC1_Init+0x154>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80022b8:	4b44      	ldr	r3, [pc, #272]	; (80023cc <MX_ADC1_Init+0x154>)
 80022ba:	2201      	movs	r2, #1
 80022bc:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80022be:	4b43      	ldr	r3, [pc, #268]	; (80023cc <MX_ADC1_Init+0x154>)
 80022c0:	2208      	movs	r2, #8
 80022c2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80022c4:	4b41      	ldr	r3, [pc, #260]	; (80023cc <MX_ADC1_Init+0x154>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80022ca:	4b40      	ldr	r3, [pc, #256]	; (80023cc <MX_ADC1_Init+0x154>)
 80022cc:	2201      	movs	r2, #1
 80022ce:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 80022d0:	4b3e      	ldr	r3, [pc, #248]	; (80023cc <MX_ADC1_Init+0x154>)
 80022d2:	2204      	movs	r2, #4
 80022d4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80022d6:	4b3d      	ldr	r3, [pc, #244]	; (80023cc <MX_ADC1_Init+0x154>)
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022de:	4b3b      	ldr	r3, [pc, #236]	; (80023cc <MX_ADC1_Init+0x154>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80022e4:	4b39      	ldr	r3, [pc, #228]	; (80023cc <MX_ADC1_Init+0x154>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80022ea:	4b38      	ldr	r3, [pc, #224]	; (80023cc <MX_ADC1_Init+0x154>)
 80022ec:	2201      	movs	r2, #1
 80022ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80022f2:	4b36      	ldr	r3, [pc, #216]	; (80023cc <MX_ADC1_Init+0x154>)
 80022f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022f8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 80022fa:	4b34      	ldr	r3, [pc, #208]	; (80023cc <MX_ADC1_Init+0x154>)
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8002302:	4b32      	ldr	r3, [pc, #200]	; (80023cc <MX_ADC1_Init+0x154>)
 8002304:	220c      	movs	r2, #12
 8002306:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 8002308:	4b30      	ldr	r3, [pc, #192]	; (80023cc <MX_ADC1_Init+0x154>)
 800230a:	2200      	movs	r2, #0
 800230c:	649a      	str	r2, [r3, #72]	; 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800230e:	4b2f      	ldr	r3, [pc, #188]	; (80023cc <MX_ADC1_Init+0x154>)
 8002310:	2200      	movs	r2, #0
 8002312:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8002314:	4b2d      	ldr	r3, [pc, #180]	; (80023cc <MX_ADC1_Init+0x154>)
 8002316:	2201      	movs	r2, #1
 8002318:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800231a:	482c      	ldr	r0, [pc, #176]	; (80023cc <MX_ADC1_Init+0x154>)
 800231c:	f001 fd80 	bl	8003e20 <HAL_ADC_Init>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8002326:	f000 fd0d 	bl	8002d44 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800232a:	2300      	movs	r3, #0
 800232c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800232e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002332:	4619      	mov	r1, r3
 8002334:	4825      	ldr	r0, [pc, #148]	; (80023cc <MX_ADC1_Init+0x154>)
 8002336:	f002 ff1d 	bl	8005174 <HAL_ADCEx_MultiModeConfigChannel>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8002340:	f000 fd00 	bl	8002d44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002344:	4b22      	ldr	r3, [pc, #136]	; (80023d0 <MX_ADC1_Init+0x158>)
 8002346:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002348:	2306      	movs	r3, #6
 800234a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 800234c:	2302      	movs	r3, #2
 800234e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002350:	237f      	movs	r3, #127	; 0x7f
 8002352:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002354:	2304      	movs	r3, #4
 8002356:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002358:	2300      	movs	r3, #0
 800235a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800235c:	1d3b      	adds	r3, r7, #4
 800235e:	4619      	mov	r1, r3
 8002360:	481a      	ldr	r0, [pc, #104]	; (80023cc <MX_ADC1_Init+0x154>)
 8002362:	f002 f9c9 	bl	80046f8 <HAL_ADC_ConfigChannel>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 800236c:	f000 fcea 	bl	8002d44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002370:	4b18      	ldr	r3, [pc, #96]	; (80023d4 <MX_ADC1_Init+0x15c>)
 8002372:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002374:	230c      	movs	r3, #12
 8002376:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002378:	1d3b      	adds	r3, r7, #4
 800237a:	4619      	mov	r1, r3
 800237c:	4813      	ldr	r0, [pc, #76]	; (80023cc <MX_ADC1_Init+0x154>)
 800237e:	f002 f9bb 	bl	80046f8 <HAL_ADC_ConfigChannel>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 8002388:	f000 fcdc 	bl	8002d44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800238c:	4b12      	ldr	r3, [pc, #72]	; (80023d8 <MX_ADC1_Init+0x160>)
 800238e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002390:	2312      	movs	r3, #18
 8002392:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002394:	1d3b      	adds	r3, r7, #4
 8002396:	4619      	mov	r1, r3
 8002398:	480c      	ldr	r0, [pc, #48]	; (80023cc <MX_ADC1_Init+0x154>)
 800239a:	f002 f9ad 	bl	80046f8 <HAL_ADC_ConfigChannel>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <MX_ADC1_Init+0x130>
  {
    Error_Handler();
 80023a4:	f000 fcce 	bl	8002d44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80023a8:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <MX_ADC1_Init+0x164>)
 80023aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80023ac:	2318      	movs	r3, #24
 80023ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023b0:	1d3b      	adds	r3, r7, #4
 80023b2:	4619      	mov	r1, r3
 80023b4:	4805      	ldr	r0, [pc, #20]	; (80023cc <MX_ADC1_Init+0x154>)
 80023b6:	f002 f99f 	bl	80046f8 <HAL_ADC_ConfigChannel>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <MX_ADC1_Init+0x14c>
  {
    Error_Handler();
 80023c0:	f000 fcc0 	bl	8002d44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80023c4:	bf00      	nop
 80023c6:	3730      	adds	r7, #48	; 0x30
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	20000518 	.word	0x20000518
 80023d0:	04300002 	.word	0x04300002
 80023d4:	08600004 	.word	0x08600004
 80023d8:	0c900008 	.word	0x0c900008
 80023dc:	cb840000 	.word	0xcb840000

080023e0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b088      	sub	sp, #32
 80023e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80023e6:	463b      	mov	r3, r7
 80023e8:	2220      	movs	r2, #32
 80023ea:	2100      	movs	r1, #0
 80023ec:	4618      	mov	r0, r3
 80023ee:	f00c fe75 	bl	800f0dc <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80023f2:	4b2b      	ldr	r3, [pc, #172]	; (80024a0 <MX_ADC2_Init+0xc0>)
 80023f4:	4a2b      	ldr	r2, [pc, #172]	; (80024a4 <MX_ADC2_Init+0xc4>)
 80023f6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80023f8:	4b29      	ldr	r3, [pc, #164]	; (80024a0 <MX_ADC2_Init+0xc0>)
 80023fa:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80023fe:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002400:	4b27      	ldr	r3, [pc, #156]	; (80024a0 <MX_ADC2_Init+0xc0>)
 8002402:	2200      	movs	r2, #0
 8002404:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002406:	4b26      	ldr	r3, [pc, #152]	; (80024a0 <MX_ADC2_Init+0xc0>)
 8002408:	2200      	movs	r2, #0
 800240a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800240c:	4b24      	ldr	r3, [pc, #144]	; (80024a0 <MX_ADC2_Init+0xc0>)
 800240e:	2200      	movs	r2, #0
 8002410:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002412:	4b23      	ldr	r3, [pc, #140]	; (80024a0 <MX_ADC2_Init+0xc0>)
 8002414:	2200      	movs	r2, #0
 8002416:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002418:	4b21      	ldr	r3, [pc, #132]	; (80024a0 <MX_ADC2_Init+0xc0>)
 800241a:	2204      	movs	r2, #4
 800241c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800241e:	4b20      	ldr	r3, [pc, #128]	; (80024a0 <MX_ADC2_Init+0xc0>)
 8002420:	2200      	movs	r2, #0
 8002422:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002424:	4b1e      	ldr	r3, [pc, #120]	; (80024a0 <MX_ADC2_Init+0xc0>)
 8002426:	2200      	movs	r2, #0
 8002428:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800242a:	4b1d      	ldr	r3, [pc, #116]	; (80024a0 <MX_ADC2_Init+0xc0>)
 800242c:	2201      	movs	r2, #1
 800242e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002430:	4b1b      	ldr	r3, [pc, #108]	; (80024a0 <MX_ADC2_Init+0xc0>)
 8002432:	2200      	movs	r2, #0
 8002434:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002438:	4b19      	ldr	r3, [pc, #100]	; (80024a0 <MX_ADC2_Init+0xc0>)
 800243a:	2200      	movs	r2, #0
 800243c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800243e:	4b18      	ldr	r3, [pc, #96]	; (80024a0 <MX_ADC2_Init+0xc0>)
 8002440:	2200      	movs	r2, #0
 8002442:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8002444:	4b16      	ldr	r3, [pc, #88]	; (80024a0 <MX_ADC2_Init+0xc0>)
 8002446:	2200      	movs	r2, #0
 8002448:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800244c:	4b14      	ldr	r3, [pc, #80]	; (80024a0 <MX_ADC2_Init+0xc0>)
 800244e:	2200      	movs	r2, #0
 8002450:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8002452:	4b13      	ldr	r3, [pc, #76]	; (80024a0 <MX_ADC2_Init+0xc0>)
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800245a:	4811      	ldr	r0, [pc, #68]	; (80024a0 <MX_ADC2_Init+0xc0>)
 800245c:	f001 fce0 	bl	8003e20 <HAL_ADC_Init>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8002466:	f000 fc6d 	bl	8002d44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800246a:	4b0f      	ldr	r3, [pc, #60]	; (80024a8 <MX_ADC2_Init+0xc8>)
 800246c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800246e:	2306      	movs	r3, #6
 8002470:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002472:	2300      	movs	r3, #0
 8002474:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002476:	237f      	movs	r3, #127	; 0x7f
 8002478:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800247a:	2304      	movs	r3, #4
 800247c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800247e:	2300      	movs	r3, #0
 8002480:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002482:	463b      	mov	r3, r7
 8002484:	4619      	mov	r1, r3
 8002486:	4806      	ldr	r0, [pc, #24]	; (80024a0 <MX_ADC2_Init+0xc0>)
 8002488:	f002 f936 	bl	80046f8 <HAL_ADC_ConfigChannel>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8002492:	f000 fc57 	bl	8002d44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002496:	bf00      	nop
 8002498:	3720      	adds	r7, #32
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	20000584 	.word	0x20000584
 80024a4:	50000100 	.word	0x50000100
 80024a8:	36902000 	.word	0x36902000

080024ac <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b09e      	sub	sp, #120	; 0x78
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	605a      	str	r2, [r3, #4]
 80024be:	609a      	str	r2, [r3, #8]
 80024c0:	60da      	str	r2, [r3, #12]
 80024c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024c4:	f107 0320 	add.w	r3, r7, #32
 80024c8:	2244      	movs	r2, #68	; 0x44
 80024ca:	2100      	movs	r1, #0
 80024cc:	4618      	mov	r0, r3
 80024ce:	f00c fe05 	bl	800f0dc <memset>
  if(adcHandle->Instance==ADC1)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024da:	d171      	bne.n	80025c0 <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80024dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024e0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80024e2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80024e6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024e8:	f107 0320 	add.w	r3, r7, #32
 80024ec:	4618      	mov	r0, r3
 80024ee:	f005 fb2d 	bl	8007b4c <HAL_RCCEx_PeriphCLKConfig>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80024f8:	f000 fc24 	bl	8002d44 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80024fc:	4b7a      	ldr	r3, [pc, #488]	; (80026e8 <HAL_ADC_MspInit+0x23c>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	3301      	adds	r3, #1
 8002502:	4a79      	ldr	r2, [pc, #484]	; (80026e8 <HAL_ADC_MspInit+0x23c>)
 8002504:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002506:	4b78      	ldr	r3, [pc, #480]	; (80026e8 <HAL_ADC_MspInit+0x23c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d10b      	bne.n	8002526 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800250e:	4b77      	ldr	r3, [pc, #476]	; (80026ec <HAL_ADC_MspInit+0x240>)
 8002510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002512:	4a76      	ldr	r2, [pc, #472]	; (80026ec <HAL_ADC_MspInit+0x240>)
 8002514:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800251a:	4b74      	ldr	r3, [pc, #464]	; (80026ec <HAL_ADC_MspInit+0x240>)
 800251c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800251e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002522:	61fb      	str	r3, [r7, #28]
 8002524:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002526:	4b71      	ldr	r3, [pc, #452]	; (80026ec <HAL_ADC_MspInit+0x240>)
 8002528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800252a:	4a70      	ldr	r2, [pc, #448]	; (80026ec <HAL_ADC_MspInit+0x240>)
 800252c:	f043 0301 	orr.w	r3, r3, #1
 8002530:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002532:	4b6e      	ldr	r3, [pc, #440]	; (80026ec <HAL_ADC_MspInit+0x240>)
 8002534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	61bb      	str	r3, [r7, #24]
 800253c:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = CURRENT_ADC_3_Pin|CURRENT_ADC_2_Pin|CURRENT_ADC_1_Pin;
 800253e:	2307      	movs	r3, #7
 8002540:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002542:	2303      	movs	r3, #3
 8002544:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002546:	2300      	movs	r3, #0
 8002548:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800254a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800254e:	4619      	mov	r1, r3
 8002550:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002554:	f004 fb04 	bl	8006b60 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002558:	4b65      	ldr	r3, [pc, #404]	; (80026f0 <HAL_ADC_MspInit+0x244>)
 800255a:	4a66      	ldr	r2, [pc, #408]	; (80026f4 <HAL_ADC_MspInit+0x248>)
 800255c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800255e:	4b64      	ldr	r3, [pc, #400]	; (80026f0 <HAL_ADC_MspInit+0x244>)
 8002560:	2205      	movs	r2, #5
 8002562:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002564:	4b62      	ldr	r3, [pc, #392]	; (80026f0 <HAL_ADC_MspInit+0x244>)
 8002566:	2200      	movs	r2, #0
 8002568:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800256a:	4b61      	ldr	r3, [pc, #388]	; (80026f0 <HAL_ADC_MspInit+0x244>)
 800256c:	2200      	movs	r2, #0
 800256e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002570:	4b5f      	ldr	r3, [pc, #380]	; (80026f0 <HAL_ADC_MspInit+0x244>)
 8002572:	2280      	movs	r2, #128	; 0x80
 8002574:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002576:	4b5e      	ldr	r3, [pc, #376]	; (80026f0 <HAL_ADC_MspInit+0x244>)
 8002578:	f44f 7200 	mov.w	r2, #512	; 0x200
 800257c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800257e:	4b5c      	ldr	r3, [pc, #368]	; (80026f0 <HAL_ADC_MspInit+0x244>)
 8002580:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002584:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002586:	4b5a      	ldr	r3, [pc, #360]	; (80026f0 <HAL_ADC_MspInit+0x244>)
 8002588:	2220      	movs	r2, #32
 800258a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800258c:	4b58      	ldr	r3, [pc, #352]	; (80026f0 <HAL_ADC_MspInit+0x244>)
 800258e:	2200      	movs	r2, #0
 8002590:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002592:	4857      	ldr	r0, [pc, #348]	; (80026f0 <HAL_ADC_MspInit+0x244>)
 8002594:	f003 f9b8 	bl	8005908 <HAL_DMA_Init>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 800259e:	f000 fbd1 	bl	8002d44 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a52      	ldr	r2, [pc, #328]	; (80026f0 <HAL_ADC_MspInit+0x244>)
 80025a6:	655a      	str	r2, [r3, #84]	; 0x54
 80025a8:	4a51      	ldr	r2, [pc, #324]	; (80026f0 <HAL_ADC_MspInit+0x244>)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 80025ae:	2200      	movs	r2, #0
 80025b0:	2105      	movs	r1, #5
 80025b2:	2012      	movs	r0, #18
 80025b4:	f002 ff3a 	bl	800542c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80025b8:	2012      	movs	r0, #18
 80025ba:	f002 ff51 	bl	8005460 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80025be:	e08f      	b.n	80026e0 <HAL_ADC_MspInit+0x234>
  else if(adcHandle->Instance==ADC2)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a4c      	ldr	r2, [pc, #304]	; (80026f8 <HAL_ADC_MspInit+0x24c>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	f040 808a 	bne.w	80026e0 <HAL_ADC_MspInit+0x234>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80025cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025d0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80025d2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80025d6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025d8:	f107 0320 	add.w	r3, r7, #32
 80025dc:	4618      	mov	r0, r3
 80025de:	f005 fab5 	bl	8007b4c <HAL_RCCEx_PeriphCLKConfig>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <HAL_ADC_MspInit+0x140>
      Error_Handler();
 80025e8:	f000 fbac 	bl	8002d44 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80025ec:	4b3e      	ldr	r3, [pc, #248]	; (80026e8 <HAL_ADC_MspInit+0x23c>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	3301      	adds	r3, #1
 80025f2:	4a3d      	ldr	r2, [pc, #244]	; (80026e8 <HAL_ADC_MspInit+0x23c>)
 80025f4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80025f6:	4b3c      	ldr	r3, [pc, #240]	; (80026e8 <HAL_ADC_MspInit+0x23c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d10b      	bne.n	8002616 <HAL_ADC_MspInit+0x16a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80025fe:	4b3b      	ldr	r3, [pc, #236]	; (80026ec <HAL_ADC_MspInit+0x240>)
 8002600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002602:	4a3a      	ldr	r2, [pc, #232]	; (80026ec <HAL_ADC_MspInit+0x240>)
 8002604:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002608:	64d3      	str	r3, [r2, #76]	; 0x4c
 800260a:	4b38      	ldr	r3, [pc, #224]	; (80026ec <HAL_ADC_MspInit+0x240>)
 800260c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800260e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002612:	617b      	str	r3, [r7, #20]
 8002614:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002616:	4b35      	ldr	r3, [pc, #212]	; (80026ec <HAL_ADC_MspInit+0x240>)
 8002618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800261a:	4a34      	ldr	r2, [pc, #208]	; (80026ec <HAL_ADC_MspInit+0x240>)
 800261c:	f043 0301 	orr.w	r3, r3, #1
 8002620:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002622:	4b32      	ldr	r3, [pc, #200]	; (80026ec <HAL_ADC_MspInit+0x240>)
 8002624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	613b      	str	r3, [r7, #16]
 800262c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800262e:	4b2f      	ldr	r3, [pc, #188]	; (80026ec <HAL_ADC_MspInit+0x240>)
 8002630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002632:	4a2e      	ldr	r2, [pc, #184]	; (80026ec <HAL_ADC_MspInit+0x240>)
 8002634:	f043 0302 	orr.w	r3, r3, #2
 8002638:	64d3      	str	r3, [r2, #76]	; 0x4c
 800263a:	4b2c      	ldr	r3, [pc, #176]	; (80026ec <HAL_ADC_MspInit+0x240>)
 800263c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = V_BAT_ADC_Pin|V_AUX_ADC_Pin;
 8002646:	2360      	movs	r3, #96	; 0x60
 8002648:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800264a:	2303      	movs	r3, #3
 800264c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264e:	2300      	movs	r3, #0
 8002650:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002652:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002656:	4619      	mov	r1, r3
 8002658:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800265c:	f004 fa80 	bl	8006b60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC2_NTC1_Pin|ADC2_NTC2_Pin;
 8002660:	f640 0304 	movw	r3, #2052	; 0x804
 8002664:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002666:	2303      	movs	r3, #3
 8002668:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266a:	2300      	movs	r3, #0
 800266c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800266e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002672:	4619      	mov	r1, r3
 8002674:	4821      	ldr	r0, [pc, #132]	; (80026fc <HAL_ADC_MspInit+0x250>)
 8002676:	f004 fa73 	bl	8006b60 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 800267a:	4b21      	ldr	r3, [pc, #132]	; (8002700 <HAL_ADC_MspInit+0x254>)
 800267c:	4a21      	ldr	r2, [pc, #132]	; (8002704 <HAL_ADC_MspInit+0x258>)
 800267e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8002680:	4b1f      	ldr	r3, [pc, #124]	; (8002700 <HAL_ADC_MspInit+0x254>)
 8002682:	2224      	movs	r2, #36	; 0x24
 8002684:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002686:	4b1e      	ldr	r3, [pc, #120]	; (8002700 <HAL_ADC_MspInit+0x254>)
 8002688:	2200      	movs	r2, #0
 800268a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800268c:	4b1c      	ldr	r3, [pc, #112]	; (8002700 <HAL_ADC_MspInit+0x254>)
 800268e:	2200      	movs	r2, #0
 8002690:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002692:	4b1b      	ldr	r3, [pc, #108]	; (8002700 <HAL_ADC_MspInit+0x254>)
 8002694:	2280      	movs	r2, #128	; 0x80
 8002696:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002698:	4b19      	ldr	r3, [pc, #100]	; (8002700 <HAL_ADC_MspInit+0x254>)
 800269a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800269e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80026a0:	4b17      	ldr	r3, [pc, #92]	; (8002700 <HAL_ADC_MspInit+0x254>)
 80026a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026a6:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 80026a8:	4b15      	ldr	r3, [pc, #84]	; (8002700 <HAL_ADC_MspInit+0x254>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80026ae:	4b14      	ldr	r3, [pc, #80]	; (8002700 <HAL_ADC_MspInit+0x254>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80026b4:	4812      	ldr	r0, [pc, #72]	; (8002700 <HAL_ADC_MspInit+0x254>)
 80026b6:	f003 f927 	bl	8005908 <HAL_DMA_Init>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <HAL_ADC_MspInit+0x218>
      Error_Handler();
 80026c0:	f000 fb40 	bl	8002d44 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a0e      	ldr	r2, [pc, #56]	; (8002700 <HAL_ADC_MspInit+0x254>)
 80026c8:	655a      	str	r2, [r3, #84]	; 0x54
 80026ca:	4a0d      	ldr	r2, [pc, #52]	; (8002700 <HAL_ADC_MspInit+0x254>)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 80026d0:	2200      	movs	r2, #0
 80026d2:	2105      	movs	r1, #5
 80026d4:	2012      	movs	r0, #18
 80026d6:	f002 fea9 	bl	800542c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80026da:	2012      	movs	r0, #18
 80026dc:	f002 fec0 	bl	8005460 <HAL_NVIC_EnableIRQ>
}
 80026e0:	bf00      	nop
 80026e2:	3778      	adds	r7, #120	; 0x78
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	200006b0 	.word	0x200006b0
 80026ec:	40021000 	.word	0x40021000
 80026f0:	200005f0 	.word	0x200005f0
 80026f4:	40020008 	.word	0x40020008
 80026f8:	50000100 	.word	0x50000100
 80026fc:	48000400 	.word	0x48000400
 8002700:	20000650 	.word	0x20000650
 8002704:	4002001c 	.word	0x4002001c

08002708 <vApplicationIdleHook>:
void vApplicationTickHook(void);
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800270c:	bf00      	nop
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 8002716:	b480      	push	{r7}
 8002718:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 800271a:	bf00      	nop
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800272e:	bf00      	nop
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr

0800273a <PreSleepProcessing>:
/* USER CODE END 4 */

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t ulExpectedIdleTime)
{
 800273a:	b480      	push	{r7}
 800273c:	b083      	sub	sp, #12
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8002742:	bf00      	nop
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr

0800274e <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t ulExpectedIdleTime)
{
 800274e:	b480      	push	{r7}
 8002750:	b083      	sub	sp, #12
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8002756:	bf00      	nop
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
	...

08002764 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002768:	4a05      	ldr	r2, [pc, #20]	; (8002780 <MX_FREERTOS_Init+0x1c>)
 800276a:	2100      	movs	r1, #0
 800276c:	4805      	ldr	r0, [pc, #20]	; (8002784 <MX_FREERTOS_Init+0x20>)
 800276e:	f008 fee9 	bl	800b544 <osThreadNew>
 8002772:	4603      	mov	r3, r0
 8002774:	4a04      	ldr	r2, [pc, #16]	; (8002788 <MX_FREERTOS_Init+0x24>)
 8002776:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  FOC_init();
 8002778:	f7fe fd2a 	bl	80011d0 <FOC_init>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800277c:	bf00      	nop
 800277e:	bd80      	pop	{r7, pc}
 8002780:	0800f344 	.word	0x0800f344
 8002784:	0800278d 	.word	0x0800278d
 8002788:	200006b4 	.word	0x200006b4

0800278c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002794:	2001      	movs	r0, #1
 8002796:	f009 f836 	bl	800b806 <osDelay>
 800279a:	e7fb      	b.n	8002794 <StartDefaultTask+0x8>

0800279c <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b08c      	sub	sp, #48	; 0x30
 80027a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80027a2:	463b      	mov	r3, r7
 80027a4:	2230      	movs	r2, #48	; 0x30
 80027a6:	2100      	movs	r1, #0
 80027a8:	4618      	mov	r0, r3
 80027aa:	f00c fc97 	bl	800f0dc <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80027ae:	4b16      	ldr	r3, [pc, #88]	; (8002808 <MX_DAC1_Init+0x6c>)
 80027b0:	4a16      	ldr	r2, [pc, #88]	; (800280c <MX_DAC1_Init+0x70>)
 80027b2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80027b4:	4814      	ldr	r0, [pc, #80]	; (8002808 <MX_DAC1_Init+0x6c>)
 80027b6:	f002 fe61 	bl	800547c <HAL_DAC_Init>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80027c0:	f000 fac0 	bl	8002d44 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80027c4:	2300      	movs	r3, #0
 80027c6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80027c8:	2300      	movs	r3, #0
 80027ca:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80027cc:	2300      	movs	r3, #0
 80027ce:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80027d0:	2300      	movs	r3, #0
 80027d2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80027d4:	2300      	movs	r3, #0
 80027d6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80027d8:	2300      	movs	r3, #0
 80027da:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80027dc:	2300      	movs	r3, #0
 80027de:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80027e0:	2301      	movs	r3, #1
 80027e2:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80027e4:	2300      	movs	r3, #0
 80027e6:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80027e8:	463b      	mov	r3, r7
 80027ea:	2200      	movs	r2, #0
 80027ec:	4619      	mov	r1, r3
 80027ee:	4806      	ldr	r0, [pc, #24]	; (8002808 <MX_DAC1_Init+0x6c>)
 80027f0:	f002 fee2 	bl	80055b8 <HAL_DAC_ConfigChannel>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80027fa:	f000 faa3 	bl	8002d44 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80027fe:	bf00      	nop
 8002800:	3730      	adds	r7, #48	; 0x30
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	200006b8 	.word	0x200006b8
 800280c:	50000800 	.word	0x50000800

08002810 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b08a      	sub	sp, #40	; 0x28
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002818:	f107 0314 	add.w	r3, r7, #20
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	605a      	str	r2, [r3, #4]
 8002822:	609a      	str	r2, [r3, #8]
 8002824:	60da      	str	r2, [r3, #12]
 8002826:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a15      	ldr	r2, [pc, #84]	; (8002884 <HAL_DAC_MspInit+0x74>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d124      	bne.n	800287c <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002832:	4b15      	ldr	r3, [pc, #84]	; (8002888 <HAL_DAC_MspInit+0x78>)
 8002834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002836:	4a14      	ldr	r2, [pc, #80]	; (8002888 <HAL_DAC_MspInit+0x78>)
 8002838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800283c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800283e:	4b12      	ldr	r3, [pc, #72]	; (8002888 <HAL_DAC_MspInit+0x78>)
 8002840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002842:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002846:	613b      	str	r3, [r7, #16]
 8002848:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800284a:	4b0f      	ldr	r3, [pc, #60]	; (8002888 <HAL_DAC_MspInit+0x78>)
 800284c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800284e:	4a0e      	ldr	r2, [pc, #56]	; (8002888 <HAL_DAC_MspInit+0x78>)
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002856:	4b0c      	ldr	r3, [pc, #48]	; (8002888 <HAL_DAC_MspInit+0x78>)
 8002858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002862:	2310      	movs	r3, #16
 8002864:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002866:	2303      	movs	r3, #3
 8002868:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286a:	2300      	movs	r3, #0
 800286c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800286e:	f107 0314 	add.w	r3, r7, #20
 8002872:	4619      	mov	r1, r3
 8002874:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002878:	f004 f972 	bl	8006b60 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 800287c:	bf00      	nop
 800287e:	3728      	adds	r7, #40	; 0x28
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	50000800 	.word	0x50000800
 8002888:	40021000 	.word	0x40021000

0800288c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002892:	4b30      	ldr	r3, [pc, #192]	; (8002954 <MX_DMA_Init+0xc8>)
 8002894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002896:	4a2f      	ldr	r2, [pc, #188]	; (8002954 <MX_DMA_Init+0xc8>)
 8002898:	f043 0304 	orr.w	r3, r3, #4
 800289c:	6493      	str	r3, [r2, #72]	; 0x48
 800289e:	4b2d      	ldr	r3, [pc, #180]	; (8002954 <MX_DMA_Init+0xc8>)
 80028a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028a2:	f003 0304 	and.w	r3, r3, #4
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80028aa:	4b2a      	ldr	r3, [pc, #168]	; (8002954 <MX_DMA_Init+0xc8>)
 80028ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ae:	4a29      	ldr	r2, [pc, #164]	; (8002954 <MX_DMA_Init+0xc8>)
 80028b0:	f043 0301 	orr.w	r3, r3, #1
 80028b4:	6493      	str	r3, [r2, #72]	; 0x48
 80028b6:	4b27      	ldr	r3, [pc, #156]	; (8002954 <MX_DMA_Init+0xc8>)
 80028b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	60bb      	str	r3, [r7, #8]
 80028c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80028c2:	4b24      	ldr	r3, [pc, #144]	; (8002954 <MX_DMA_Init+0xc8>)
 80028c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028c6:	4a23      	ldr	r2, [pc, #140]	; (8002954 <MX_DMA_Init+0xc8>)
 80028c8:	f043 0302 	orr.w	r3, r3, #2
 80028cc:	6493      	str	r3, [r2, #72]	; 0x48
 80028ce:	4b21      	ldr	r3, [pc, #132]	; (8002954 <MX_DMA_Init+0xc8>)
 80028d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	607b      	str	r3, [r7, #4]
 80028d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80028da:	2200      	movs	r2, #0
 80028dc:	2105      	movs	r1, #5
 80028de:	200b      	movs	r0, #11
 80028e0:	f002 fda4 	bl	800542c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80028e4:	200b      	movs	r0, #11
 80028e6:	f002 fdbb 	bl	8005460 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80028ea:	2200      	movs	r2, #0
 80028ec:	2105      	movs	r1, #5
 80028ee:	200c      	movs	r0, #12
 80028f0:	f002 fd9c 	bl	800542c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80028f4:	200c      	movs	r0, #12
 80028f6:	f002 fdb3 	bl	8005460 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80028fa:	2200      	movs	r2, #0
 80028fc:	2105      	movs	r1, #5
 80028fe:	200d      	movs	r0, #13
 8002900:	f002 fd94 	bl	800542c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002904:	200d      	movs	r0, #13
 8002906:	f002 fdab 	bl	8005460 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800290a:	2200      	movs	r2, #0
 800290c:	2105      	movs	r1, #5
 800290e:	200e      	movs	r0, #14
 8002910:	f002 fd8c 	bl	800542c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002914:	200e      	movs	r0, #14
 8002916:	f002 fda3 	bl	8005460 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 800291a:	2200      	movs	r2, #0
 800291c:	2105      	movs	r1, #5
 800291e:	2038      	movs	r0, #56	; 0x38
 8002920:	f002 fd84 	bl	800542c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8002924:	2038      	movs	r0, #56	; 0x38
 8002926:	f002 fd9b 	bl	8005460 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 5, 0);
 800292a:	2200      	movs	r2, #0
 800292c:	2105      	movs	r1, #5
 800292e:	2039      	movs	r0, #57	; 0x39
 8002930:	f002 fd7c 	bl	800542c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8002934:	2039      	movs	r0, #57	; 0x39
 8002936:	f002 fd93 	bl	8005460 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 5, 0);
 800293a:	2200      	movs	r2, #0
 800293c:	2105      	movs	r1, #5
 800293e:	203a      	movs	r0, #58	; 0x3a
 8002940:	f002 fd74 	bl	800542c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8002944:	203a      	movs	r0, #58	; 0x3a
 8002946:	f002 fd8b 	bl	8005460 <HAL_NVIC_EnableIRQ>

}
 800294a:	bf00      	nop
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	40021000 	.word	0x40021000

08002958 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800295c:	4b20      	ldr	r3, [pc, #128]	; (80029e0 <MX_FDCAN1_Init+0x88>)
 800295e:	4a21      	ldr	r2, [pc, #132]	; (80029e4 <MX_FDCAN1_Init+0x8c>)
 8002960:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8002962:	4b1f      	ldr	r3, [pc, #124]	; (80029e0 <MX_FDCAN1_Init+0x88>)
 8002964:	2200      	movs	r2, #0
 8002966:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8002968:	4b1d      	ldr	r3, [pc, #116]	; (80029e0 <MX_FDCAN1_Init+0x88>)
 800296a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800296e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8002970:	4b1b      	ldr	r3, [pc, #108]	; (80029e0 <MX_FDCAN1_Init+0x88>)
 8002972:	2200      	movs	r2, #0
 8002974:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8002976:	4b1a      	ldr	r3, [pc, #104]	; (80029e0 <MX_FDCAN1_Init+0x88>)
 8002978:	2200      	movs	r2, #0
 800297a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800297c:	4b18      	ldr	r3, [pc, #96]	; (80029e0 <MX_FDCAN1_Init+0x88>)
 800297e:	2200      	movs	r2, #0
 8002980:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8002982:	4b17      	ldr	r3, [pc, #92]	; (80029e0 <MX_FDCAN1_Init+0x88>)
 8002984:	2200      	movs	r2, #0
 8002986:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8002988:	4b15      	ldr	r3, [pc, #84]	; (80029e0 <MX_FDCAN1_Init+0x88>)
 800298a:	2201      	movs	r2, #1
 800298c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 13;
 800298e:	4b14      	ldr	r3, [pc, #80]	; (80029e0 <MX_FDCAN1_Init+0x88>)
 8002990:	220d      	movs	r2, #13
 8002992:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 86;
 8002994:	4b12      	ldr	r3, [pc, #72]	; (80029e0 <MX_FDCAN1_Init+0x88>)
 8002996:	2256      	movs	r2, #86	; 0x56
 8002998:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 13;
 800299a:	4b11      	ldr	r3, [pc, #68]	; (80029e0 <MX_FDCAN1_Init+0x88>)
 800299c:	220d      	movs	r2, #13
 800299e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 25;
 80029a0:	4b0f      	ldr	r3, [pc, #60]	; (80029e0 <MX_FDCAN1_Init+0x88>)
 80029a2:	2219      	movs	r2, #25
 80029a4:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80029a6:	4b0e      	ldr	r3, [pc, #56]	; (80029e0 <MX_FDCAN1_Init+0x88>)
 80029a8:	2201      	movs	r2, #1
 80029aa:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 2;
 80029ac:	4b0c      	ldr	r3, [pc, #48]	; (80029e0 <MX_FDCAN1_Init+0x88>)
 80029ae:	2202      	movs	r2, #2
 80029b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80029b2:	4b0b      	ldr	r3, [pc, #44]	; (80029e0 <MX_FDCAN1_Init+0x88>)
 80029b4:	2201      	movs	r2, #1
 80029b6:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80029b8:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <MX_FDCAN1_Init+0x88>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80029be:	4b08      	ldr	r3, [pc, #32]	; (80029e0 <MX_FDCAN1_Init+0x88>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80029c4:	4b06      	ldr	r3, [pc, #24]	; (80029e0 <MX_FDCAN1_Init+0x88>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80029ca:	4805      	ldr	r0, [pc, #20]	; (80029e0 <MX_FDCAN1_Init+0x88>)
 80029cc:	f003 face 	bl	8005f6c <HAL_FDCAN_Init>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 80029d6:	f000 f9b5 	bl	8002d44 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80029da:	bf00      	nop
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	200006cc 	.word	0x200006cc
 80029e4:	40006400 	.word	0x40006400

080029e8 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b09a      	sub	sp, #104	; 0x68
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	605a      	str	r2, [r3, #4]
 80029fa:	609a      	str	r2, [r3, #8]
 80029fc:	60da      	str	r2, [r3, #12]
 80029fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a00:	f107 0310 	add.w	r3, r7, #16
 8002a04:	2244      	movs	r2, #68	; 0x44
 8002a06:	2100      	movs	r1, #0
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f00c fb67 	bl	800f0dc <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a28      	ldr	r2, [pc, #160]	; (8002ab4 <HAL_FDCAN_MspInit+0xcc>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d149      	bne.n	8002aac <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002a18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a1c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002a1e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a22:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a24:	f107 0310 	add.w	r3, r7, #16
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f005 f88f 	bl	8007b4c <HAL_RCCEx_PeriphCLKConfig>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8002a34:	f000 f986 	bl	8002d44 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002a38:	4b1f      	ldr	r3, [pc, #124]	; (8002ab8 <HAL_FDCAN_MspInit+0xd0>)
 8002a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a3c:	4a1e      	ldr	r2, [pc, #120]	; (8002ab8 <HAL_FDCAN_MspInit+0xd0>)
 8002a3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a42:	6593      	str	r3, [r2, #88]	; 0x58
 8002a44:	4b1c      	ldr	r3, [pc, #112]	; (8002ab8 <HAL_FDCAN_MspInit+0xd0>)
 8002a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4c:	60fb      	str	r3, [r7, #12]
 8002a4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a50:	4b19      	ldr	r3, [pc, #100]	; (8002ab8 <HAL_FDCAN_MspInit+0xd0>)
 8002a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a54:	4a18      	ldr	r2, [pc, #96]	; (8002ab8 <HAL_FDCAN_MspInit+0xd0>)
 8002a56:	f043 0301 	orr.w	r3, r3, #1
 8002a5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a5c:	4b16      	ldr	r3, [pc, #88]	; (8002ab8 <HAL_FDCAN_MspInit+0xd0>)
 8002a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	60bb      	str	r3, [r7, #8]
 8002a66:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002a68:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002a6c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a6e:	2302      	movs	r3, #2
 8002a70:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a72:	2300      	movs	r3, #0
 8002a74:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a76:	2300      	movs	r3, #0
 8002a78:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002a7a:	2309      	movs	r3, #9
 8002a7c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a7e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002a82:	4619      	mov	r1, r3
 8002a84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a88:	f004 f86a 	bl	8006b60 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	2105      	movs	r1, #5
 8002a90:	2015      	movs	r0, #21
 8002a92:	f002 fccb 	bl	800542c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002a96:	2015      	movs	r0, #21
 8002a98:	f002 fce2 	bl	8005460 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 5, 0);
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	2105      	movs	r1, #5
 8002aa0:	2016      	movs	r0, #22
 8002aa2:	f002 fcc3 	bl	800542c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8002aa6:	2016      	movs	r0, #22
 8002aa8:	f002 fcda 	bl	8005460 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8002aac:	bf00      	nop
 8002aae:	3768      	adds	r7, #104	; 0x68
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	40006400 	.word	0x40006400
 8002ab8:	40021000 	.word	0x40021000

08002abc <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b08a      	sub	sp, #40	; 0x28
 8002ac0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac2:	f107 0314 	add.w	r3, r7, #20
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	601a      	str	r2, [r3, #0]
 8002aca:	605a      	str	r2, [r3, #4]
 8002acc:	609a      	str	r2, [r3, #8]
 8002ace:	60da      	str	r2, [r3, #12]
 8002ad0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ad2:	4b51      	ldr	r3, [pc, #324]	; (8002c18 <MX_GPIO_Init+0x15c>)
 8002ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad6:	4a50      	ldr	r2, [pc, #320]	; (8002c18 <MX_GPIO_Init+0x15c>)
 8002ad8:	f043 0320 	orr.w	r3, r3, #32
 8002adc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ade:	4b4e      	ldr	r3, [pc, #312]	; (8002c18 <MX_GPIO_Init+0x15c>)
 8002ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae2:	f003 0320 	and.w	r3, r3, #32
 8002ae6:	613b      	str	r3, [r7, #16]
 8002ae8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aea:	4b4b      	ldr	r3, [pc, #300]	; (8002c18 <MX_GPIO_Init+0x15c>)
 8002aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aee:	4a4a      	ldr	r2, [pc, #296]	; (8002c18 <MX_GPIO_Init+0x15c>)
 8002af0:	f043 0304 	orr.w	r3, r3, #4
 8002af4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002af6:	4b48      	ldr	r3, [pc, #288]	; (8002c18 <MX_GPIO_Init+0x15c>)
 8002af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002afa:	f003 0304 	and.w	r3, r3, #4
 8002afe:	60fb      	str	r3, [r7, #12]
 8002b00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b02:	4b45      	ldr	r3, [pc, #276]	; (8002c18 <MX_GPIO_Init+0x15c>)
 8002b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b06:	4a44      	ldr	r2, [pc, #272]	; (8002c18 <MX_GPIO_Init+0x15c>)
 8002b08:	f043 0301 	orr.w	r3, r3, #1
 8002b0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b0e:	4b42      	ldr	r3, [pc, #264]	; (8002c18 <MX_GPIO_Init+0x15c>)
 8002b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	60bb      	str	r3, [r7, #8]
 8002b18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b1a:	4b3f      	ldr	r3, [pc, #252]	; (8002c18 <MX_GPIO_Init+0x15c>)
 8002b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b1e:	4a3e      	ldr	r2, [pc, #248]	; (8002c18 <MX_GPIO_Init+0x15c>)
 8002b20:	f043 0302 	orr.w	r3, r3, #2
 8002b24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b26:	4b3c      	ldr	r3, [pc, #240]	; (8002c18 <MX_GPIO_Init+0x15c>)
 8002b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	607b      	str	r3, [r7, #4]
 8002b30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b32:	4b39      	ldr	r3, [pc, #228]	; (8002c18 <MX_GPIO_Init+0x15c>)
 8002b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b36:	4a38      	ldr	r2, [pc, #224]	; (8002c18 <MX_GPIO_Init+0x15c>)
 8002b38:	f043 0308 	orr.w	r3, r3, #8
 8002b3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b3e:	4b36      	ldr	r3, [pc, #216]	; (8002c18 <MX_GPIO_Init+0x15c>)
 8002b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b42:	f003 0308 	and.w	r3, r3, #8
 8002b46:	603b      	str	r3, [r7, #0]
 8002b48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RUNNING_LED_Pin|WARNING_LED_Pin, GPIO_PIN_RESET);
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	21c0      	movs	r1, #192	; 0xc0
 8002b4e:	4833      	ldr	r0, [pc, #204]	; (8002c1c <MX_GPIO_Init+0x160>)
 8002b50:	f004 f988 	bl	8006e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, GPIO_PIN_RESET);
 8002b54:	2200      	movs	r2, #0
 8002b56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b5e:	f004 f981 	bl	8006e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, GPIO_PIN_RESET);
 8002b62:	2200      	movs	r2, #0
 8002b64:	2104      	movs	r1, #4
 8002b66:	482e      	ldr	r0, [pc, #184]	; (8002c20 <MX_GPIO_Init+0x164>)
 8002b68:	f004 f97c 	bl	8006e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, GPIO_PIN_RESET);
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	2140      	movs	r1, #64	; 0x40
 8002b70:	482c      	ldr	r0, [pc, #176]	; (8002c24 <MX_GPIO_Init+0x168>)
 8002b72:	f004 f977 	bl	8006e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RUNNING_LED_Pin|WARNING_LED_Pin;
 8002b76:	23c0      	movs	r3, #192	; 0xc0
 8002b78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b82:	2300      	movs	r3, #0
 8002b84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b86:	f107 0314 	add.w	r3, r7, #20
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	4823      	ldr	r0, [pc, #140]	; (8002c1c <MX_GPIO_Init+0x160>)
 8002b8e:	f003 ffe7 	bl	8006b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002b92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b98:	2302      	movs	r3, #2
 8002b9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ba8:	f107 0314 	add.w	r3, r7, #20
 8002bac:	4619      	mov	r1, r3
 8002bae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bb2:	f003 ffd5 	bl	8006b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ERROR_LED_Pin;
 8002bb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ERROR_LED_GPIO_Port, &GPIO_InitStruct);
 8002bc8:	f107 0314 	add.w	r3, r7, #20
 8002bcc:	4619      	mov	r1, r3
 8002bce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bd2:	f003 ffc5 	bl	8006b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER2_CS_Pin;
 8002bd6:	2304      	movs	r3, #4
 8002bd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bde:	2300      	movs	r3, #0
 8002be0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be2:	2300      	movs	r3, #0
 8002be4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENCODER2_CS_GPIO_Port, &GPIO_InitStruct);
 8002be6:	f107 0314 	add.w	r3, r7, #20
 8002bea:	4619      	mov	r1, r3
 8002bec:	480c      	ldr	r0, [pc, #48]	; (8002c20 <MX_GPIO_Init+0x164>)
 8002bee:	f003 ffb7 	bl	8006b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER1_CS_Pin;
 8002bf2:	2340      	movs	r3, #64	; 0x40
 8002bf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENCODER1_CS_GPIO_Port, &GPIO_InitStruct);
 8002c02:	f107 0314 	add.w	r3, r7, #20
 8002c06:	4619      	mov	r1, r3
 8002c08:	4806      	ldr	r0, [pc, #24]	; (8002c24 <MX_GPIO_Init+0x168>)
 8002c0a:	f003 ffa9 	bl	8006b60 <HAL_GPIO_Init>

}
 8002c0e:	bf00      	nop
 8002c10:	3728      	adds	r7, #40	; 0x28
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	48000800 	.word	0x48000800
 8002c20:	48000c00 	.word	0x48000c00
 8002c24:	48000400 	.word	0x48000400

08002c28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c2c:	f000 fe5b 	bl	80038e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c30:	f000 f81d 	bl	8002c6e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c34:	f7ff ff42 	bl	8002abc <MX_GPIO_Init>
  MX_DMA_Init();
 8002c38:	f7ff fe28 	bl	800288c <MX_DMA_Init>
  MX_FDCAN1_Init();
 8002c3c:	f7ff fe8c 	bl	8002958 <MX_FDCAN1_Init>
  MX_SPI1_Init();
 8002c40:	f000 f886 	bl	8002d50 <MX_SPI1_Init>
  MX_SPI3_Init();
 8002c44:	f000 f8c2 	bl	8002dcc <MX_SPI3_Init>
  MX_TIM1_Init();
 8002c48:	f000 fb92 	bl	8003370 <MX_TIM1_Init>
  MX_ADC1_Init();
 8002c4c:	f7ff fb14 	bl	8002278 <MX_ADC1_Init>
  MX_ADC2_Init();
 8002c50:	f7ff fbc6 	bl	80023e0 <MX_ADC2_Init>
  MX_DAC1_Init();
 8002c54:	f7ff fda2 	bl	800279c <MX_DAC1_Init>
  MX_USART1_UART_Init();
 8002c58:	f000 fd42 	bl	80036e0 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8002c5c:	f000 fc50 	bl	8003500 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002c60:	f008 fc26 	bl	800b4b0 <osKernelInitialize>
  MX_FREERTOS_Init();
 8002c64:	f7ff fd7e 	bl	8002764 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002c68:	f008 fc46 	bl	800b4f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002c6c:	e7fe      	b.n	8002c6c <main+0x44>

08002c6e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b094      	sub	sp, #80	; 0x50
 8002c72:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c74:	f107 0318 	add.w	r3, r7, #24
 8002c78:	2238      	movs	r2, #56	; 0x38
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f00c fa2d 	bl	800f0dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c82:	1d3b      	adds	r3, r7, #4
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	605a      	str	r2, [r3, #4]
 8002c8a:	609a      	str	r2, [r3, #8]
 8002c8c:	60da      	str	r2, [r3, #12]
 8002c8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002c90:	2000      	movs	r0, #0
 8002c92:	f004 f8ff 	bl	8006e94 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c96:	2302      	movs	r3, #2
 8002c98:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c9e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ca0:	2340      	movs	r3, #64	; 0x40
 8002ca2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002ca8:	2302      	movs	r3, #2
 8002caa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002cac:	2304      	movs	r3, #4
 8002cae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8002cb0:	2350      	movs	r3, #80	; 0x50
 8002cb2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8002cb8:	2308      	movs	r3, #8
 8002cba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cc0:	f107 0318 	add.w	r3, r7, #24
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f004 f999 	bl	8006ffc <HAL_RCC_OscConfig>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002cd0:	f000 f838 	bl	8002d44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002cd4:	230f      	movs	r3, #15
 8002cd6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002ce8:	1d3b      	adds	r3, r7, #4
 8002cea:	2104      	movs	r1, #4
 8002cec:	4618      	mov	r0, r3
 8002cee:	f004 fc9d 	bl	800762c <HAL_RCC_ClockConfig>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002cf8:	f000 f824 	bl	8002d44 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_16);
 8002cfc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d00:	f04f 7140 	mov.w	r1, #50331648	; 0x3000000
 8002d04:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002d08:	f004 fdcc 	bl	80078a4 <HAL_RCC_MCOConfig>
}
 8002d0c:	bf00      	nop
 8002d0e:	3750      	adds	r7, #80	; 0x50
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d24:	d101      	bne.n	8002d2a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002d26:	f000 fdf7 	bl	8003918 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM3) {
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a04      	ldr	r2, [pc, #16]	; (8002d40 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d101      	bne.n	8002d38 <HAL_TIM_PeriodElapsedCallback+0x24>
		  tim1_PWM_PulseFinishedCallback();
 8002d34:	f7fe fa44 	bl	80011c0 <tim1_PWM_PulseFinishedCallback>
    }
  /* USER CODE END Callback 1 */
}
 8002d38:	bf00      	nop
 8002d3a:	3708      	adds	r7, #8
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	40000400 	.word	0x40000400

08002d44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d48:	b672      	cpsid	i
}
 8002d4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d4c:	e7fe      	b.n	8002d4c <Error_Handler+0x8>
	...

08002d50 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi3_rx;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002d54:	4b1b      	ldr	r3, [pc, #108]	; (8002dc4 <MX_SPI1_Init+0x74>)
 8002d56:	4a1c      	ldr	r2, [pc, #112]	; (8002dc8 <MX_SPI1_Init+0x78>)
 8002d58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002d5a:	4b1a      	ldr	r3, [pc, #104]	; (8002dc4 <MX_SPI1_Init+0x74>)
 8002d5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002d60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002d62:	4b18      	ldr	r3, [pc, #96]	; (8002dc4 <MX_SPI1_Init+0x74>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d68:	4b16      	ldr	r3, [pc, #88]	; (8002dc4 <MX_SPI1_Init+0x74>)
 8002d6a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002d6e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d70:	4b14      	ldr	r3, [pc, #80]	; (8002dc4 <MX_SPI1_Init+0x74>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d76:	4b13      	ldr	r3, [pc, #76]	; (8002dc4 <MX_SPI1_Init+0x74>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002d7c:	4b11      	ldr	r3, [pc, #68]	; (8002dc4 <MX_SPI1_Init+0x74>)
 8002d7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d82:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002d84:	4b0f      	ldr	r3, [pc, #60]	; (8002dc4 <MX_SPI1_Init+0x74>)
 8002d86:	2220      	movs	r2, #32
 8002d88:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d8a:	4b0e      	ldr	r3, [pc, #56]	; (8002dc4 <MX_SPI1_Init+0x74>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d90:	4b0c      	ldr	r3, [pc, #48]	; (8002dc4 <MX_SPI1_Init+0x74>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d96:	4b0b      	ldr	r3, [pc, #44]	; (8002dc4 <MX_SPI1_Init+0x74>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002d9c:	4b09      	ldr	r3, [pc, #36]	; (8002dc4 <MX_SPI1_Init+0x74>)
 8002d9e:	2207      	movs	r2, #7
 8002da0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002da2:	4b08      	ldr	r3, [pc, #32]	; (8002dc4 <MX_SPI1_Init+0x74>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002da8:	4b06      	ldr	r3, [pc, #24]	; (8002dc4 <MX_SPI1_Init+0x74>)
 8002daa:	2208      	movs	r2, #8
 8002dac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002dae:	4805      	ldr	r0, [pc, #20]	; (8002dc4 <MX_SPI1_Init+0x74>)
 8002db0:	f005 f8bc 	bl	8007f2c <HAL_SPI_Init>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002dba:	f7ff ffc3 	bl	8002d44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002dbe:	bf00      	nop
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	20000730 	.word	0x20000730
 8002dc8:	40013000 	.word	0x40013000

08002dcc <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8002dd0:	4b1b      	ldr	r3, [pc, #108]	; (8002e40 <MX_SPI3_Init+0x74>)
 8002dd2:	4a1c      	ldr	r2, [pc, #112]	; (8002e44 <MX_SPI3_Init+0x78>)
 8002dd4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002dd6:	4b1a      	ldr	r3, [pc, #104]	; (8002e40 <MX_SPI3_Init+0x74>)
 8002dd8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ddc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002dde:	4b18      	ldr	r3, [pc, #96]	; (8002e40 <MX_SPI3_Init+0x74>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8002de4:	4b16      	ldr	r3, [pc, #88]	; (8002e40 <MX_SPI3_Init+0x74>)
 8002de6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002dea:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002dec:	4b14      	ldr	r3, [pc, #80]	; (8002e40 <MX_SPI3_Init+0x74>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002df2:	4b13      	ldr	r3, [pc, #76]	; (8002e40 <MX_SPI3_Init+0x74>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002df8:	4b11      	ldr	r3, [pc, #68]	; (8002e40 <MX_SPI3_Init+0x74>)
 8002dfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dfe:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002e00:	4b0f      	ldr	r3, [pc, #60]	; (8002e40 <MX_SPI3_Init+0x74>)
 8002e02:	2220      	movs	r2, #32
 8002e04:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e06:	4b0e      	ldr	r3, [pc, #56]	; (8002e40 <MX_SPI3_Init+0x74>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e0c:	4b0c      	ldr	r3, [pc, #48]	; (8002e40 <MX_SPI3_Init+0x74>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e12:	4b0b      	ldr	r3, [pc, #44]	; (8002e40 <MX_SPI3_Init+0x74>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002e18:	4b09      	ldr	r3, [pc, #36]	; (8002e40 <MX_SPI3_Init+0x74>)
 8002e1a:	2207      	movs	r2, #7
 8002e1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002e1e:	4b08      	ldr	r3, [pc, #32]	; (8002e40 <MX_SPI3_Init+0x74>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002e24:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <MX_SPI3_Init+0x74>)
 8002e26:	2208      	movs	r2, #8
 8002e28:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002e2a:	4805      	ldr	r0, [pc, #20]	; (8002e40 <MX_SPI3_Init+0x74>)
 8002e2c:	f005 f87e 	bl	8007f2c <HAL_SPI_Init>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8002e36:	f7ff ff85 	bl	8002d44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002e3a:	bf00      	nop
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	20000794 	.word	0x20000794
 8002e44:	40003c00 	.word	0x40003c00

08002e48 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b08c      	sub	sp, #48	; 0x30
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e50:	f107 031c 	add.w	r3, r7, #28
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	605a      	str	r2, [r3, #4]
 8002e5a:	609a      	str	r2, [r3, #8]
 8002e5c:	60da      	str	r2, [r3, #12]
 8002e5e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a89      	ldr	r2, [pc, #548]	; (800308c <HAL_SPI_MspInit+0x244>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	f040 8083 	bne.w	8002f72 <HAL_SPI_MspInit+0x12a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e6c:	4b88      	ldr	r3, [pc, #544]	; (8003090 <HAL_SPI_MspInit+0x248>)
 8002e6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e70:	4a87      	ldr	r2, [pc, #540]	; (8003090 <HAL_SPI_MspInit+0x248>)
 8002e72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e76:	6613      	str	r3, [r2, #96]	; 0x60
 8002e78:	4b85      	ldr	r3, [pc, #532]	; (8003090 <HAL_SPI_MspInit+0x248>)
 8002e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e80:	61bb      	str	r3, [r7, #24]
 8002e82:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e84:	4b82      	ldr	r3, [pc, #520]	; (8003090 <HAL_SPI_MspInit+0x248>)
 8002e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e88:	4a81      	ldr	r2, [pc, #516]	; (8003090 <HAL_SPI_MspInit+0x248>)
 8002e8a:	f043 0302 	orr.w	r3, r3, #2
 8002e8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e90:	4b7f      	ldr	r3, [pc, #508]	; (8003090 <HAL_SPI_MspInit+0x248>)
 8002e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	617b      	str	r3, [r7, #20]
 8002e9a:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002e9c:	2338      	movs	r3, #56	; 0x38
 8002e9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002eac:	2305      	movs	r3, #5
 8002eae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eb0:	f107 031c 	add.w	r3, r7, #28
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	4877      	ldr	r0, [pc, #476]	; (8003094 <HAL_SPI_MspInit+0x24c>)
 8002eb8:	f003 fe52 	bl	8006b60 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel3;
 8002ebc:	4b76      	ldr	r3, [pc, #472]	; (8003098 <HAL_SPI_MspInit+0x250>)
 8002ebe:	4a77      	ldr	r2, [pc, #476]	; (800309c <HAL_SPI_MspInit+0x254>)
 8002ec0:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8002ec2:	4b75      	ldr	r3, [pc, #468]	; (8003098 <HAL_SPI_MspInit+0x250>)
 8002ec4:	220a      	movs	r2, #10
 8002ec6:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ec8:	4b73      	ldr	r3, [pc, #460]	; (8003098 <HAL_SPI_MspInit+0x250>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ece:	4b72      	ldr	r3, [pc, #456]	; (8003098 <HAL_SPI_MspInit+0x250>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ed4:	4b70      	ldr	r3, [pc, #448]	; (8003098 <HAL_SPI_MspInit+0x250>)
 8002ed6:	2280      	movs	r2, #128	; 0x80
 8002ed8:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002eda:	4b6f      	ldr	r3, [pc, #444]	; (8003098 <HAL_SPI_MspInit+0x250>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ee0:	4b6d      	ldr	r3, [pc, #436]	; (8003098 <HAL_SPI_MspInit+0x250>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002ee6:	4b6c      	ldr	r3, [pc, #432]	; (8003098 <HAL_SPI_MspInit+0x250>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002eec:	4b6a      	ldr	r3, [pc, #424]	; (8003098 <HAL_SPI_MspInit+0x250>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002ef2:	4869      	ldr	r0, [pc, #420]	; (8003098 <HAL_SPI_MspInit+0x250>)
 8002ef4:	f002 fd08 	bl	8005908 <HAL_DMA_Init>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8002efe:	f7ff ff21 	bl	8002d44 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a64      	ldr	r2, [pc, #400]	; (8003098 <HAL_SPI_MspInit+0x250>)
 8002f06:	659a      	str	r2, [r3, #88]	; 0x58
 8002f08:	4a63      	ldr	r2, [pc, #396]	; (8003098 <HAL_SPI_MspInit+0x250>)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel4;
 8002f0e:	4b64      	ldr	r3, [pc, #400]	; (80030a0 <HAL_SPI_MspInit+0x258>)
 8002f10:	4a64      	ldr	r2, [pc, #400]	; (80030a4 <HAL_SPI_MspInit+0x25c>)
 8002f12:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8002f14:	4b62      	ldr	r3, [pc, #392]	; (80030a0 <HAL_SPI_MspInit+0x258>)
 8002f16:	220b      	movs	r2, #11
 8002f18:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f1a:	4b61      	ldr	r3, [pc, #388]	; (80030a0 <HAL_SPI_MspInit+0x258>)
 8002f1c:	2210      	movs	r2, #16
 8002f1e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f20:	4b5f      	ldr	r3, [pc, #380]	; (80030a0 <HAL_SPI_MspInit+0x258>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f26:	4b5e      	ldr	r3, [pc, #376]	; (80030a0 <HAL_SPI_MspInit+0x258>)
 8002f28:	2280      	movs	r2, #128	; 0x80
 8002f2a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f2c:	4b5c      	ldr	r3, [pc, #368]	; (80030a0 <HAL_SPI_MspInit+0x258>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f32:	4b5b      	ldr	r3, [pc, #364]	; (80030a0 <HAL_SPI_MspInit+0x258>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002f38:	4b59      	ldr	r3, [pc, #356]	; (80030a0 <HAL_SPI_MspInit+0x258>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f3e:	4b58      	ldr	r3, [pc, #352]	; (80030a0 <HAL_SPI_MspInit+0x258>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002f44:	4856      	ldr	r0, [pc, #344]	; (80030a0 <HAL_SPI_MspInit+0x258>)
 8002f46:	f002 fcdf 	bl	8005908 <HAL_DMA_Init>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 8002f50:	f7ff fef8 	bl	8002d44 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a52      	ldr	r2, [pc, #328]	; (80030a0 <HAL_SPI_MspInit+0x258>)
 8002f58:	655a      	str	r2, [r3, #84]	; 0x54
 8002f5a:	4a51      	ldr	r2, [pc, #324]	; (80030a0 <HAL_SPI_MspInit+0x258>)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8002f60:	2200      	movs	r2, #0
 8002f62:	2105      	movs	r1, #5
 8002f64:	2023      	movs	r0, #35	; 0x23
 8002f66:	f002 fa61 	bl	800542c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002f6a:	2023      	movs	r0, #35	; 0x23
 8002f6c:	f002 fa78 	bl	8005460 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002f70:	e088      	b.n	8003084 <HAL_SPI_MspInit+0x23c>
  else if(spiHandle->Instance==SPI3)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a4c      	ldr	r2, [pc, #304]	; (80030a8 <HAL_SPI_MspInit+0x260>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	f040 8083 	bne.w	8003084 <HAL_SPI_MspInit+0x23c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002f7e:	4b44      	ldr	r3, [pc, #272]	; (8003090 <HAL_SPI_MspInit+0x248>)
 8002f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f82:	4a43      	ldr	r2, [pc, #268]	; (8003090 <HAL_SPI_MspInit+0x248>)
 8002f84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f88:	6593      	str	r3, [r2, #88]	; 0x58
 8002f8a:	4b41      	ldr	r3, [pc, #260]	; (8003090 <HAL_SPI_MspInit+0x248>)
 8002f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f92:	613b      	str	r3, [r7, #16]
 8002f94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f96:	4b3e      	ldr	r3, [pc, #248]	; (8003090 <HAL_SPI_MspInit+0x248>)
 8002f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f9a:	4a3d      	ldr	r2, [pc, #244]	; (8003090 <HAL_SPI_MspInit+0x248>)
 8002f9c:	f043 0304 	orr.w	r3, r3, #4
 8002fa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fa2:	4b3b      	ldr	r3, [pc, #236]	; (8003090 <HAL_SPI_MspInit+0x248>)
 8002fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fa6:	f003 0304 	and.w	r3, r3, #4
 8002faa:	60fb      	str	r3, [r7, #12]
 8002fac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002fae:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002fc0:	2306      	movs	r3, #6
 8002fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fc4:	f107 031c 	add.w	r3, r7, #28
 8002fc8:	4619      	mov	r1, r3
 8002fca:	4838      	ldr	r0, [pc, #224]	; (80030ac <HAL_SPI_MspInit+0x264>)
 8002fcc:	f003 fdc8 	bl	8006b60 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA2_Channel1;
 8002fd0:	4b37      	ldr	r3, [pc, #220]	; (80030b0 <HAL_SPI_MspInit+0x268>)
 8002fd2:	4a38      	ldr	r2, [pc, #224]	; (80030b4 <HAL_SPI_MspInit+0x26c>)
 8002fd4:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 8002fd6:	4b36      	ldr	r3, [pc, #216]	; (80030b0 <HAL_SPI_MspInit+0x268>)
 8002fd8:	220e      	movs	r2, #14
 8002fda:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fdc:	4b34      	ldr	r3, [pc, #208]	; (80030b0 <HAL_SPI_MspInit+0x268>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fe2:	4b33      	ldr	r3, [pc, #204]	; (80030b0 <HAL_SPI_MspInit+0x268>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002fe8:	4b31      	ldr	r3, [pc, #196]	; (80030b0 <HAL_SPI_MspInit+0x268>)
 8002fea:	2280      	movs	r2, #128	; 0x80
 8002fec:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fee:	4b30      	ldr	r3, [pc, #192]	; (80030b0 <HAL_SPI_MspInit+0x268>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ff4:	4b2e      	ldr	r3, [pc, #184]	; (80030b0 <HAL_SPI_MspInit+0x268>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8002ffa:	4b2d      	ldr	r3, [pc, #180]	; (80030b0 <HAL_SPI_MspInit+0x268>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003000:	4b2b      	ldr	r3, [pc, #172]	; (80030b0 <HAL_SPI_MspInit+0x268>)
 8003002:	2200      	movs	r2, #0
 8003004:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8003006:	482a      	ldr	r0, [pc, #168]	; (80030b0 <HAL_SPI_MspInit+0x268>)
 8003008:	f002 fc7e 	bl	8005908 <HAL_DMA_Init>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <HAL_SPI_MspInit+0x1ce>
      Error_Handler();
 8003012:	f7ff fe97 	bl	8002d44 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a25      	ldr	r2, [pc, #148]	; (80030b0 <HAL_SPI_MspInit+0x268>)
 800301a:	659a      	str	r2, [r3, #88]	; 0x58
 800301c:	4a24      	ldr	r2, [pc, #144]	; (80030b0 <HAL_SPI_MspInit+0x268>)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_spi3_tx.Instance = DMA2_Channel2;
 8003022:	4b25      	ldr	r3, [pc, #148]	; (80030b8 <HAL_SPI_MspInit+0x270>)
 8003024:	4a25      	ldr	r2, [pc, #148]	; (80030bc <HAL_SPI_MspInit+0x274>)
 8003026:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 8003028:	4b23      	ldr	r3, [pc, #140]	; (80030b8 <HAL_SPI_MspInit+0x270>)
 800302a:	220f      	movs	r2, #15
 800302c:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800302e:	4b22      	ldr	r3, [pc, #136]	; (80030b8 <HAL_SPI_MspInit+0x270>)
 8003030:	2210      	movs	r2, #16
 8003032:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003034:	4b20      	ldr	r3, [pc, #128]	; (80030b8 <HAL_SPI_MspInit+0x270>)
 8003036:	2200      	movs	r2, #0
 8003038:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800303a:	4b1f      	ldr	r3, [pc, #124]	; (80030b8 <HAL_SPI_MspInit+0x270>)
 800303c:	2280      	movs	r2, #128	; 0x80
 800303e:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003040:	4b1d      	ldr	r3, [pc, #116]	; (80030b8 <HAL_SPI_MspInit+0x270>)
 8003042:	2200      	movs	r2, #0
 8003044:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003046:	4b1c      	ldr	r3, [pc, #112]	; (80030b8 <HAL_SPI_MspInit+0x270>)
 8003048:	2200      	movs	r2, #0
 800304a:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 800304c:	4b1a      	ldr	r3, [pc, #104]	; (80030b8 <HAL_SPI_MspInit+0x270>)
 800304e:	2200      	movs	r2, #0
 8003050:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003052:	4b19      	ldr	r3, [pc, #100]	; (80030b8 <HAL_SPI_MspInit+0x270>)
 8003054:	2200      	movs	r2, #0
 8003056:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8003058:	4817      	ldr	r0, [pc, #92]	; (80030b8 <HAL_SPI_MspInit+0x270>)
 800305a:	f002 fc55 	bl	8005908 <HAL_DMA_Init>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <HAL_SPI_MspInit+0x220>
      Error_Handler();
 8003064:	f7ff fe6e 	bl	8002d44 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a13      	ldr	r2, [pc, #76]	; (80030b8 <HAL_SPI_MspInit+0x270>)
 800306c:	655a      	str	r2, [r3, #84]	; 0x54
 800306e:	4a12      	ldr	r2, [pc, #72]	; (80030b8 <HAL_SPI_MspInit+0x270>)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8003074:	2200      	movs	r2, #0
 8003076:	2105      	movs	r1, #5
 8003078:	2033      	movs	r0, #51	; 0x33
 800307a:	f002 f9d7 	bl	800542c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800307e:	2033      	movs	r0, #51	; 0x33
 8003080:	f002 f9ee 	bl	8005460 <HAL_NVIC_EnableIRQ>
}
 8003084:	bf00      	nop
 8003086:	3730      	adds	r7, #48	; 0x30
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	40013000 	.word	0x40013000
 8003090:	40021000 	.word	0x40021000
 8003094:	48000400 	.word	0x48000400
 8003098:	200007f8 	.word	0x200007f8
 800309c:	40020030 	.word	0x40020030
 80030a0:	20000858 	.word	0x20000858
 80030a4:	40020044 	.word	0x40020044
 80030a8:	40003c00 	.word	0x40003c00
 80030ac:	48000800 	.word	0x48000800
 80030b0:	200008b8 	.word	0x200008b8
 80030b4:	40020408 	.word	0x40020408
 80030b8:	20000918 	.word	0x20000918
 80030bc:	4002041c 	.word	0x4002041c

080030c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030c6:	4b12      	ldr	r3, [pc, #72]	; (8003110 <HAL_MspInit+0x50>)
 80030c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ca:	4a11      	ldr	r2, [pc, #68]	; (8003110 <HAL_MspInit+0x50>)
 80030cc:	f043 0301 	orr.w	r3, r3, #1
 80030d0:	6613      	str	r3, [r2, #96]	; 0x60
 80030d2:	4b0f      	ldr	r3, [pc, #60]	; (8003110 <HAL_MspInit+0x50>)
 80030d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	607b      	str	r3, [r7, #4]
 80030dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030de:	4b0c      	ldr	r3, [pc, #48]	; (8003110 <HAL_MspInit+0x50>)
 80030e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e2:	4a0b      	ldr	r2, [pc, #44]	; (8003110 <HAL_MspInit+0x50>)
 80030e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030e8:	6593      	str	r3, [r2, #88]	; 0x58
 80030ea:	4b09      	ldr	r3, [pc, #36]	; (8003110 <HAL_MspInit+0x50>)
 80030ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f2:	603b      	str	r3, [r7, #0]
 80030f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80030f6:	2200      	movs	r2, #0
 80030f8:	210f      	movs	r1, #15
 80030fa:	f06f 0001 	mvn.w	r0, #1
 80030fe:	f002 f995 	bl	800542c <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003102:	f003 ff6b 	bl	8006fdc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003106:	bf00      	nop
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	40021000 	.word	0x40021000

08003114 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b08c      	sub	sp, #48	; 0x30
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800311c:	2300      	movs	r3, #0
 800311e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8003120:	2300      	movs	r3, #0
 8003122:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8003124:	4b2d      	ldr	r3, [pc, #180]	; (80031dc <HAL_InitTick+0xc8>)
 8003126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003128:	4a2c      	ldr	r2, [pc, #176]	; (80031dc <HAL_InitTick+0xc8>)
 800312a:	f043 0301 	orr.w	r3, r3, #1
 800312e:	6593      	str	r3, [r2, #88]	; 0x58
 8003130:	4b2a      	ldr	r3, [pc, #168]	; (80031dc <HAL_InitTick+0xc8>)
 8003132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	60bb      	str	r3, [r7, #8]
 800313a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800313c:	f107 020c 	add.w	r2, r7, #12
 8003140:	f107 0310 	add.w	r3, r7, #16
 8003144:	4611      	mov	r1, r2
 8003146:	4618      	mov	r0, r3
 8003148:	f004 fc8a 	bl	8007a60 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800314c:	f004 fc5c 	bl	8007a08 <HAL_RCC_GetPCLK1Freq>
 8003150:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003154:	4a22      	ldr	r2, [pc, #136]	; (80031e0 <HAL_InitTick+0xcc>)
 8003156:	fba2 2303 	umull	r2, r3, r2, r3
 800315a:	0c9b      	lsrs	r3, r3, #18
 800315c:	3b01      	subs	r3, #1
 800315e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8003160:	4b20      	ldr	r3, [pc, #128]	; (80031e4 <HAL_InitTick+0xd0>)
 8003162:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003166:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8003168:	4b1e      	ldr	r3, [pc, #120]	; (80031e4 <HAL_InitTick+0xd0>)
 800316a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800316e:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8003170:	4a1c      	ldr	r2, [pc, #112]	; (80031e4 <HAL_InitTick+0xd0>)
 8003172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003174:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8003176:	4b1b      	ldr	r3, [pc, #108]	; (80031e4 <HAL_InitTick+0xd0>)
 8003178:	2200      	movs	r2, #0
 800317a:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800317c:	4b19      	ldr	r3, [pc, #100]	; (80031e4 <HAL_InitTick+0xd0>)
 800317e:	2200      	movs	r2, #0
 8003180:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim2);
 8003182:	4818      	ldr	r0, [pc, #96]	; (80031e4 <HAL_InitTick+0xd0>)
 8003184:	f005 f891 	bl	80082aa <HAL_TIM_Base_Init>
 8003188:	4603      	mov	r3, r0
 800318a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800318e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003192:	2b00      	cmp	r3, #0
 8003194:	d11b      	bne.n	80031ce <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8003196:	4813      	ldr	r0, [pc, #76]	; (80031e4 <HAL_InitTick+0xd0>)
 8003198:	f005 f906 	bl	80083a8 <HAL_TIM_Base_Start_IT>
 800319c:	4603      	mov	r3, r0
 800319e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80031a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d111      	bne.n	80031ce <HAL_InitTick+0xba>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80031aa:	201c      	movs	r0, #28
 80031ac:	f002 f958 	bl	8005460 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b0f      	cmp	r3, #15
 80031b4:	d808      	bhi.n	80031c8 <HAL_InitTick+0xb4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80031b6:	2200      	movs	r2, #0
 80031b8:	6879      	ldr	r1, [r7, #4]
 80031ba:	201c      	movs	r0, #28
 80031bc:	f002 f936 	bl	800542c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80031c0:	4a09      	ldr	r2, [pc, #36]	; (80031e8 <HAL_InitTick+0xd4>)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6013      	str	r3, [r2, #0]
 80031c6:	e002      	b.n	80031ce <HAL_InitTick+0xba>
      }
      else
      {
        status = HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80031ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3730      	adds	r7, #48	; 0x30
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	40021000 	.word	0x40021000
 80031e0:	431bde83 	.word	0x431bde83
 80031e4:	20000978 	.word	0x20000978
 80031e8:	200002dc 	.word	0x200002dc

080031ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031f0:	e7fe      	b.n	80031f0 <NMI_Handler+0x4>

080031f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031f2:	b480      	push	{r7}
 80031f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031f6:	e7fe      	b.n	80031f6 <HardFault_Handler+0x4>

080031f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031fc:	e7fe      	b.n	80031fc <MemManage_Handler+0x4>

080031fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031fe:	b480      	push	{r7}
 8003200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003202:	e7fe      	b.n	8003202 <BusFault_Handler+0x4>

08003204 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003208:	e7fe      	b.n	8003208 <UsageFault_Handler+0x4>

0800320a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800320a:	b480      	push	{r7}
 800320c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800320e:	bf00      	nop
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800321c:	4802      	ldr	r0, [pc, #8]	; (8003228 <DMA1_Channel1_IRQHandler+0x10>)
 800321e:	f002 fd56 	bl	8005cce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003222:	bf00      	nop
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	200005f0 	.word	0x200005f0

0800322c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003230:	4802      	ldr	r0, [pc, #8]	; (800323c <DMA1_Channel2_IRQHandler+0x10>)
 8003232:	f002 fd4c 	bl	8005cce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003236:	bf00      	nop
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	20000650 	.word	0x20000650

08003240 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003244:	4802      	ldr	r0, [pc, #8]	; (8003250 <DMA1_Channel3_IRQHandler+0x10>)
 8003246:	f002 fd42 	bl	8005cce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800324a:	bf00      	nop
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	200007f8 	.word	0x200007f8

08003254 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003258:	4802      	ldr	r0, [pc, #8]	; (8003264 <DMA1_Channel4_IRQHandler+0x10>)
 800325a:	f002 fd38 	bl	8005cce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800325e:	bf00      	nop
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	20000858 	.word	0x20000858

08003268 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800326c:	4803      	ldr	r0, [pc, #12]	; (800327c <ADC1_2_IRQHandler+0x14>)
 800326e:	f001 f815 	bl	800429c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8003272:	4803      	ldr	r0, [pc, #12]	; (8003280 <ADC1_2_IRQHandler+0x18>)
 8003274:	f001 f812 	bl	800429c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003278:	bf00      	nop
 800327a:	bd80      	pop	{r7, pc}
 800327c:	20000518 	.word	0x20000518
 8003280:	20000584 	.word	0x20000584

08003284 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8003288:	4802      	ldr	r0, [pc, #8]	; (8003294 <FDCAN1_IT0_IRQHandler+0x10>)
 800328a:	f003 f9f5 	bl	8006678 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800328e:	bf00      	nop
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	200006cc 	.word	0x200006cc

08003298 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800329c:	4802      	ldr	r0, [pc, #8]	; (80032a8 <FDCAN1_IT1_IRQHandler+0x10>)
 800329e:	f003 f9eb 	bl	8006678 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 80032a2:	bf00      	nop
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	200006cc 	.word	0x200006cc

080032ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80032b0:	4802      	ldr	r0, [pc, #8]	; (80032bc <TIM2_IRQHandler+0x10>)
 80032b2:	f005 fadb 	bl	800886c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80032b6:	bf00      	nop
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	20000978 	.word	0x20000978

080032c0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80032c4:	4802      	ldr	r0, [pc, #8]	; (80032d0 <TIM3_IRQHandler+0x10>)
 80032c6:	f005 fad1 	bl	800886c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80032ca:	bf00      	nop
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	20000a10 	.word	0x20000a10

080032d4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80032d8:	4802      	ldr	r0, [pc, #8]	; (80032e4 <SPI1_IRQHandler+0x10>)
 80032da:	f004 fed3 	bl	8008084 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80032de:	bf00      	nop
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	20000730 	.word	0x20000730

080032e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80032ec:	4802      	ldr	r0, [pc, #8]	; (80032f8 <USART1_IRQHandler+0x10>)
 80032ee:	f006 fe3d 	bl	8009f6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80032f2:	bf00      	nop
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	20000a5c 	.word	0x20000a5c

080032fc <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8003300:	4802      	ldr	r0, [pc, #8]	; (800330c <SPI3_IRQHandler+0x10>)
 8003302:	f004 febf 	bl	8008084 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8003306:	bf00      	nop
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	20000794 	.word	0x20000794

08003310 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8003314:	4802      	ldr	r0, [pc, #8]	; (8003320 <DMA2_Channel1_IRQHandler+0x10>)
 8003316:	f002 fcda 	bl	8005cce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 800331a:	bf00      	nop
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	200008b8 	.word	0x200008b8

08003324 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8003328:	4802      	ldr	r0, [pc, #8]	; (8003334 <DMA2_Channel2_IRQHandler+0x10>)
 800332a:	f002 fcd0 	bl	8005cce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 800332e:	bf00      	nop
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	20000918 	.word	0x20000918

08003338 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800333c:	4802      	ldr	r0, [pc, #8]	; (8003348 <DMA2_Channel3_IRQHandler+0x10>)
 800333e:	f002 fcc6 	bl	8005cce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8003342:	bf00      	nop
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	20000aec 	.word	0x20000aec

0800334c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003350:	4b06      	ldr	r3, [pc, #24]	; (800336c <SystemInit+0x20>)
 8003352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003356:	4a05      	ldr	r2, [pc, #20]	; (800336c <SystemInit+0x20>)
 8003358:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800335c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003360:	bf00      	nop
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	e000ed00 	.word	0xe000ed00

08003370 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b09c      	sub	sp, #112	; 0x70
 8003374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003376:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800337a:	2200      	movs	r2, #0
 800337c:	601a      	str	r2, [r3, #0]
 800337e:	605a      	str	r2, [r3, #4]
 8003380:	609a      	str	r2, [r3, #8]
 8003382:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003384:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003388:	2200      	movs	r2, #0
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	605a      	str	r2, [r3, #4]
 800338e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003390:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003394:	2200      	movs	r2, #0
 8003396:	601a      	str	r2, [r3, #0]
 8003398:	605a      	str	r2, [r3, #4]
 800339a:	609a      	str	r2, [r3, #8]
 800339c:	60da      	str	r2, [r3, #12]
 800339e:	611a      	str	r2, [r3, #16]
 80033a0:	615a      	str	r2, [r3, #20]
 80033a2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80033a4:	1d3b      	adds	r3, r7, #4
 80033a6:	2234      	movs	r2, #52	; 0x34
 80033a8:	2100      	movs	r1, #0
 80033aa:	4618      	mov	r0, r3
 80033ac:	f00b fe96 	bl	800f0dc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80033b0:	4b51      	ldr	r3, [pc, #324]	; (80034f8 <MX_TIM1_Init+0x188>)
 80033b2:	4a52      	ldr	r2, [pc, #328]	; (80034fc <MX_TIM1_Init+0x18c>)
 80033b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80033b6:	4b50      	ldr	r3, [pc, #320]	; (80034f8 <MX_TIM1_Init+0x188>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80033bc:	4b4e      	ldr	r3, [pc, #312]	; (80034f8 <MX_TIM1_Init+0x188>)
 80033be:	2220      	movs	r2, #32
 80033c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1499;
 80033c2:	4b4d      	ldr	r3, [pc, #308]	; (80034f8 <MX_TIM1_Init+0x188>)
 80033c4:	f240 52db 	movw	r2, #1499	; 0x5db
 80033c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033ca:	4b4b      	ldr	r3, [pc, #300]	; (80034f8 <MX_TIM1_Init+0x188>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80033d0:	4b49      	ldr	r3, [pc, #292]	; (80034f8 <MX_TIM1_Init+0x188>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80033d6:	4b48      	ldr	r3, [pc, #288]	; (80034f8 <MX_TIM1_Init+0x188>)
 80033d8:	2280      	movs	r2, #128	; 0x80
 80033da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80033dc:	4846      	ldr	r0, [pc, #280]	; (80034f8 <MX_TIM1_Init+0x188>)
 80033de:	f004 ff64 	bl	80082aa <HAL_TIM_Base_Init>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80033e8:	f7ff fcac 	bl	8002d44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033f0:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80033f2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80033f6:	4619      	mov	r1, r3
 80033f8:	483f      	ldr	r0, [pc, #252]	; (80034f8 <MX_TIM1_Init+0x188>)
 80033fa:	f005 fccb 	bl	8008d94 <HAL_TIM_ConfigClockSource>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003404:	f7ff fc9e 	bl	8002d44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003408:	483b      	ldr	r0, [pc, #236]	; (80034f8 <MX_TIM1_Init+0x188>)
 800340a:	f005 f837 	bl	800847c <HAL_TIM_PWM_Init>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003414:	f7ff fc96 	bl	8002d44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003418:	2300      	movs	r3, #0
 800341a:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800341c:	2300      	movs	r3, #0
 800341e:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003420:	2300      	movs	r3, #0
 8003422:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003424:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003428:	4619      	mov	r1, r3
 800342a:	4833      	ldr	r0, [pc, #204]	; (80034f8 <MX_TIM1_Init+0x188>)
 800342c:	f006 fb2e 	bl	8009a8c <HAL_TIMEx_MasterConfigSynchronization>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8003436:	f7ff fc85 	bl	8002d44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800343a:	2360      	movs	r3, #96	; 0x60
 800343c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800343e:	2300      	movs	r3, #0
 8003440:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8003442:	2302      	movs	r3, #2
 8003444:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8003446:	2308      	movs	r3, #8
 8003448:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800344a:	2300      	movs	r3, #0
 800344c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800344e:	2300      	movs	r3, #0
 8003450:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003452:	2300      	movs	r3, #0
 8003454:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003456:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800345a:	2200      	movs	r2, #0
 800345c:	4619      	mov	r1, r3
 800345e:	4826      	ldr	r0, [pc, #152]	; (80034f8 <MX_TIM1_Init+0x188>)
 8003460:	f005 fb84 	bl	8008b6c <HAL_TIM_PWM_ConfigChannel>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800346a:	f7ff fc6b 	bl	8002d44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800346e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003472:	2204      	movs	r2, #4
 8003474:	4619      	mov	r1, r3
 8003476:	4820      	ldr	r0, [pc, #128]	; (80034f8 <MX_TIM1_Init+0x188>)
 8003478:	f005 fb78 	bl	8008b6c <HAL_TIM_PWM_ConfigChannel>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8003482:	f7ff fc5f 	bl	8002d44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003486:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800348a:	2208      	movs	r2, #8
 800348c:	4619      	mov	r1, r3
 800348e:	481a      	ldr	r0, [pc, #104]	; (80034f8 <MX_TIM1_Init+0x188>)
 8003490:	f005 fb6c 	bl	8008b6c <HAL_TIM_PWM_ConfigChannel>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800349a:	f7ff fc53 	bl	8002d44 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800349e:	2300      	movs	r3, #0
 80034a0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80034a2:	2300      	movs	r3, #0
 80034a4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80034a6:	2300      	movs	r3, #0
 80034a8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80034aa:	2300      	movs	r3, #0
 80034ac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80034ae:	2300      	movs	r3, #0
 80034b0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80034b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034b6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80034b8:	2300      	movs	r3, #0
 80034ba:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80034bc:	2300      	movs	r3, #0
 80034be:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80034c0:	2300      	movs	r3, #0
 80034c2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80034c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034c8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80034ca:	2300      	movs	r3, #0
 80034cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80034ce:	2300      	movs	r3, #0
 80034d0:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80034d2:	2300      	movs	r3, #0
 80034d4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80034d6:	1d3b      	adds	r3, r7, #4
 80034d8:	4619      	mov	r1, r3
 80034da:	4807      	ldr	r0, [pc, #28]	; (80034f8 <MX_TIM1_Init+0x188>)
 80034dc:	f006 fb58 	bl	8009b90 <HAL_TIMEx_ConfigBreakDeadTime>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 80034e6:	f7ff fc2d 	bl	8002d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80034ea:	4803      	ldr	r0, [pc, #12]	; (80034f8 <MX_TIM1_Init+0x188>)
 80034ec:	f000 f890 	bl	8003610 <HAL_TIM_MspPostInit>

}
 80034f0:	bf00      	nop
 80034f2:	3770      	adds	r7, #112	; 0x70
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	200009c4 	.word	0x200009c4
 80034fc:	40012c00 	.word	0x40012c00

08003500 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b088      	sub	sp, #32
 8003504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003506:	f107 0310 	add.w	r3, r7, #16
 800350a:	2200      	movs	r2, #0
 800350c:	601a      	str	r2, [r3, #0]
 800350e:	605a      	str	r2, [r3, #4]
 8003510:	609a      	str	r2, [r3, #8]
 8003512:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003514:	1d3b      	adds	r3, r7, #4
 8003516:	2200      	movs	r2, #0
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	605a      	str	r2, [r3, #4]
 800351c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800351e:	4b1d      	ldr	r3, [pc, #116]	; (8003594 <MX_TIM3_Init+0x94>)
 8003520:	4a1d      	ldr	r2, [pc, #116]	; (8003598 <MX_TIM3_Init+0x98>)
 8003522:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4;
 8003524:	4b1b      	ldr	r3, [pc, #108]	; (8003594 <MX_TIM3_Init+0x94>)
 8003526:	2204      	movs	r2, #4
 8003528:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800352a:	4b1a      	ldr	r3, [pc, #104]	; (8003594 <MX_TIM3_Init+0x94>)
 800352c:	2200      	movs	r2, #0
 800352e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2999;
 8003530:	4b18      	ldr	r3, [pc, #96]	; (8003594 <MX_TIM3_Init+0x94>)
 8003532:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8003536:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003538:	4b16      	ldr	r3, [pc, #88]	; (8003594 <MX_TIM3_Init+0x94>)
 800353a:	2200      	movs	r2, #0
 800353c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800353e:	4b15      	ldr	r3, [pc, #84]	; (8003594 <MX_TIM3_Init+0x94>)
 8003540:	2200      	movs	r2, #0
 8003542:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003544:	4813      	ldr	r0, [pc, #76]	; (8003594 <MX_TIM3_Init+0x94>)
 8003546:	f004 feb0 	bl	80082aa <HAL_TIM_Base_Init>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d001      	beq.n	8003554 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003550:	f7ff fbf8 	bl	8002d44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003554:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003558:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800355a:	f107 0310 	add.w	r3, r7, #16
 800355e:	4619      	mov	r1, r3
 8003560:	480c      	ldr	r0, [pc, #48]	; (8003594 <MX_TIM3_Init+0x94>)
 8003562:	f005 fc17 	bl	8008d94 <HAL_TIM_ConfigClockSource>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800356c:	f7ff fbea 	bl	8002d44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003570:	2300      	movs	r3, #0
 8003572:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003574:	2300      	movs	r3, #0
 8003576:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003578:	1d3b      	adds	r3, r7, #4
 800357a:	4619      	mov	r1, r3
 800357c:	4805      	ldr	r0, [pc, #20]	; (8003594 <MX_TIM3_Init+0x94>)
 800357e:	f006 fa85 	bl	8009a8c <HAL_TIMEx_MasterConfigSynchronization>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003588:	f7ff fbdc 	bl	8002d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800358c:	bf00      	nop
 800358e:	3720      	adds	r7, #32
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	20000a10 	.word	0x20000a10
 8003598:	40000400 	.word	0x40000400

0800359c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a16      	ldr	r2, [pc, #88]	; (8003604 <HAL_TIM_Base_MspInit+0x68>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d10c      	bne.n	80035c8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80035ae:	4b16      	ldr	r3, [pc, #88]	; (8003608 <HAL_TIM_Base_MspInit+0x6c>)
 80035b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035b2:	4a15      	ldr	r2, [pc, #84]	; (8003608 <HAL_TIM_Base_MspInit+0x6c>)
 80035b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80035b8:	6613      	str	r3, [r2, #96]	; 0x60
 80035ba:	4b13      	ldr	r3, [pc, #76]	; (8003608 <HAL_TIM_Base_MspInit+0x6c>)
 80035bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035c2:	60fb      	str	r3, [r7, #12]
 80035c4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80035c6:	e018      	b.n	80035fa <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a0f      	ldr	r2, [pc, #60]	; (800360c <HAL_TIM_Base_MspInit+0x70>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d113      	bne.n	80035fa <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80035d2:	4b0d      	ldr	r3, [pc, #52]	; (8003608 <HAL_TIM_Base_MspInit+0x6c>)
 80035d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d6:	4a0c      	ldr	r2, [pc, #48]	; (8003608 <HAL_TIM_Base_MspInit+0x6c>)
 80035d8:	f043 0302 	orr.w	r3, r3, #2
 80035dc:	6593      	str	r3, [r2, #88]	; 0x58
 80035de:	4b0a      	ldr	r3, [pc, #40]	; (8003608 <HAL_TIM_Base_MspInit+0x6c>)
 80035e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	60bb      	str	r3, [r7, #8]
 80035e8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80035ea:	2200      	movs	r2, #0
 80035ec:	2105      	movs	r1, #5
 80035ee:	201d      	movs	r0, #29
 80035f0:	f001 ff1c 	bl	800542c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80035f4:	201d      	movs	r0, #29
 80035f6:	f001 ff33 	bl	8005460 <HAL_NVIC_EnableIRQ>
}
 80035fa:	bf00      	nop
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	40012c00 	.word	0x40012c00
 8003608:	40021000 	.word	0x40021000
 800360c:	40000400 	.word	0x40000400

08003610 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b08a      	sub	sp, #40	; 0x28
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003618:	f107 0314 	add.w	r3, r7, #20
 800361c:	2200      	movs	r2, #0
 800361e:	601a      	str	r2, [r3, #0]
 8003620:	605a      	str	r2, [r3, #4]
 8003622:	609a      	str	r2, [r3, #8]
 8003624:	60da      	str	r2, [r3, #12]
 8003626:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a28      	ldr	r2, [pc, #160]	; (80036d0 <HAL_TIM_MspPostInit+0xc0>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d149      	bne.n	80036c6 <HAL_TIM_MspPostInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003632:	4b28      	ldr	r3, [pc, #160]	; (80036d4 <HAL_TIM_MspPostInit+0xc4>)
 8003634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003636:	4a27      	ldr	r2, [pc, #156]	; (80036d4 <HAL_TIM_MspPostInit+0xc4>)
 8003638:	f043 0304 	orr.w	r3, r3, #4
 800363c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800363e:	4b25      	ldr	r3, [pc, #148]	; (80036d4 <HAL_TIM_MspPostInit+0xc4>)
 8003640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003642:	f003 0304 	and.w	r3, r3, #4
 8003646:	613b      	str	r3, [r7, #16]
 8003648:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800364a:	4b22      	ldr	r3, [pc, #136]	; (80036d4 <HAL_TIM_MspPostInit+0xc4>)
 800364c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800364e:	4a21      	ldr	r2, [pc, #132]	; (80036d4 <HAL_TIM_MspPostInit+0xc4>)
 8003650:	f043 0302 	orr.w	r3, r3, #2
 8003654:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003656:	4b1f      	ldr	r3, [pc, #124]	; (80036d4 <HAL_TIM_MspPostInit+0xc4>)
 8003658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	60fb      	str	r3, [r7, #12]
 8003660:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> TIM1_CH3
    PB13     ------> TIM1_CH1N
    PB14     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8003662:	2307      	movs	r3, #7
 8003664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003666:	2302      	movs	r3, #2
 8003668:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366a:	2300      	movs	r3, #0
 800366c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800366e:	2300      	movs	r3, #0
 8003670:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003672:	2302      	movs	r3, #2
 8003674:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003676:	f107 0314 	add.w	r3, r7, #20
 800367a:	4619      	mov	r1, r3
 800367c:	4816      	ldr	r0, [pc, #88]	; (80036d8 <HAL_TIM_MspPostInit+0xc8>)
 800367e:	f003 fa6f 	bl	8006b60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8003682:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8003686:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003688:	2302      	movs	r3, #2
 800368a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800368c:	2300      	movs	r3, #0
 800368e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003690:	2300      	movs	r3, #0
 8003692:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003694:	2306      	movs	r3, #6
 8003696:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003698:	f107 0314 	add.w	r3, r7, #20
 800369c:	4619      	mov	r1, r3
 800369e:	480f      	ldr	r0, [pc, #60]	; (80036dc <HAL_TIM_MspPostInit+0xcc>)
 80036a0:	f003 fa5e 	bl	8006b60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80036a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036aa:	2302      	movs	r3, #2
 80036ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ae:	2300      	movs	r3, #0
 80036b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036b2:	2300      	movs	r3, #0
 80036b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80036b6:	2304      	movs	r3, #4
 80036b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036ba:	f107 0314 	add.w	r3, r7, #20
 80036be:	4619      	mov	r1, r3
 80036c0:	4806      	ldr	r0, [pc, #24]	; (80036dc <HAL_TIM_MspPostInit+0xcc>)
 80036c2:	f003 fa4d 	bl	8006b60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80036c6:	bf00      	nop
 80036c8:	3728      	adds	r7, #40	; 0x28
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	40012c00 	.word	0x40012c00
 80036d4:	40021000 	.word	0x40021000
 80036d8:	48000800 	.word	0x48000800
 80036dc:	48000400 	.word	0x48000400

080036e0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80036e4:	4b22      	ldr	r3, [pc, #136]	; (8003770 <MX_USART1_UART_Init+0x90>)
 80036e6:	4a23      	ldr	r2, [pc, #140]	; (8003774 <MX_USART1_UART_Init+0x94>)
 80036e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80036ea:	4b21      	ldr	r3, [pc, #132]	; (8003770 <MX_USART1_UART_Init+0x90>)
 80036ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80036f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80036f2:	4b1f      	ldr	r3, [pc, #124]	; (8003770 <MX_USART1_UART_Init+0x90>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80036f8:	4b1d      	ldr	r3, [pc, #116]	; (8003770 <MX_USART1_UART_Init+0x90>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80036fe:	4b1c      	ldr	r3, [pc, #112]	; (8003770 <MX_USART1_UART_Init+0x90>)
 8003700:	2200      	movs	r2, #0
 8003702:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003704:	4b1a      	ldr	r3, [pc, #104]	; (8003770 <MX_USART1_UART_Init+0x90>)
 8003706:	220c      	movs	r2, #12
 8003708:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800370a:	4b19      	ldr	r3, [pc, #100]	; (8003770 <MX_USART1_UART_Init+0x90>)
 800370c:	2200      	movs	r2, #0
 800370e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003710:	4b17      	ldr	r3, [pc, #92]	; (8003770 <MX_USART1_UART_Init+0x90>)
 8003712:	2200      	movs	r2, #0
 8003714:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003716:	4b16      	ldr	r3, [pc, #88]	; (8003770 <MX_USART1_UART_Init+0x90>)
 8003718:	2200      	movs	r2, #0
 800371a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800371c:	4b14      	ldr	r3, [pc, #80]	; (8003770 <MX_USART1_UART_Init+0x90>)
 800371e:	2200      	movs	r2, #0
 8003720:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003722:	4b13      	ldr	r3, [pc, #76]	; (8003770 <MX_USART1_UART_Init+0x90>)
 8003724:	2200      	movs	r2, #0
 8003726:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003728:	4811      	ldr	r0, [pc, #68]	; (8003770 <MX_USART1_UART_Init+0x90>)
 800372a:	f006 fb3c 	bl	8009da6 <HAL_UART_Init>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003734:	f7ff fb06 	bl	8002d44 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003738:	2100      	movs	r1, #0
 800373a:	480d      	ldr	r0, [pc, #52]	; (8003770 <MX_USART1_UART_Init+0x90>)
 800373c:	f007 fda9 	bl	800b292 <HAL_UARTEx_SetTxFifoThreshold>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d001      	beq.n	800374a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003746:	f7ff fafd 	bl	8002d44 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800374a:	2100      	movs	r1, #0
 800374c:	4808      	ldr	r0, [pc, #32]	; (8003770 <MX_USART1_UART_Init+0x90>)
 800374e:	f007 fdde 	bl	800b30e <HAL_UARTEx_SetRxFifoThreshold>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d001      	beq.n	800375c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003758:	f7ff faf4 	bl	8002d44 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800375c:	4804      	ldr	r0, [pc, #16]	; (8003770 <MX_USART1_UART_Init+0x90>)
 800375e:	f007 fd5f 	bl	800b220 <HAL_UARTEx_DisableFifoMode>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d001      	beq.n	800376c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003768:	f7ff faec 	bl	8002d44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800376c:	bf00      	nop
 800376e:	bd80      	pop	{r7, pc}
 8003770:	20000a5c 	.word	0x20000a5c
 8003774:	40013800 	.word	0x40013800

08003778 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b09a      	sub	sp, #104	; 0x68
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003780:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]
 8003788:	605a      	str	r2, [r3, #4]
 800378a:	609a      	str	r2, [r3, #8]
 800378c:	60da      	str	r2, [r3, #12]
 800378e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003790:	f107 0310 	add.w	r3, r7, #16
 8003794:	2244      	movs	r2, #68	; 0x44
 8003796:	2100      	movs	r1, #0
 8003798:	4618      	mov	r0, r3
 800379a:	f00b fc9f 	bl	800f0dc <memset>
  if(uartHandle->Instance==USART1)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a37      	ldr	r2, [pc, #220]	; (8003880 <HAL_UART_MspInit+0x108>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d166      	bne.n	8003876 <HAL_UART_MspInit+0xfe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80037a8:	2301      	movs	r3, #1
 80037aa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80037ac:	2300      	movs	r3, #0
 80037ae:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037b0:	f107 0310 	add.w	r3, r7, #16
 80037b4:	4618      	mov	r0, r3
 80037b6:	f004 f9c9 	bl	8007b4c <HAL_RCCEx_PeriphCLKConfig>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80037c0:	f7ff fac0 	bl	8002d44 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80037c4:	4b2f      	ldr	r3, [pc, #188]	; (8003884 <HAL_UART_MspInit+0x10c>)
 80037c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037c8:	4a2e      	ldr	r2, [pc, #184]	; (8003884 <HAL_UART_MspInit+0x10c>)
 80037ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037ce:	6613      	str	r3, [r2, #96]	; 0x60
 80037d0:	4b2c      	ldr	r3, [pc, #176]	; (8003884 <HAL_UART_MspInit+0x10c>)
 80037d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037d8:	60fb      	str	r3, [r7, #12]
 80037da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037dc:	4b29      	ldr	r3, [pc, #164]	; (8003884 <HAL_UART_MspInit+0x10c>)
 80037de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037e0:	4a28      	ldr	r2, [pc, #160]	; (8003884 <HAL_UART_MspInit+0x10c>)
 80037e2:	f043 0304 	orr.w	r3, r3, #4
 80037e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037e8:	4b26      	ldr	r3, [pc, #152]	; (8003884 <HAL_UART_MspInit+0x10c>)
 80037ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ec:	f003 0304 	and.w	r3, r3, #4
 80037f0:	60bb      	str	r3, [r7, #8]
 80037f2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80037f4:	2330      	movs	r3, #48	; 0x30
 80037f6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037f8:	2302      	movs	r3, #2
 80037fa:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037fc:	2300      	movs	r3, #0
 80037fe:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003800:	2300      	movs	r3, #0
 8003802:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003804:	2307      	movs	r3, #7
 8003806:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003808:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800380c:	4619      	mov	r1, r3
 800380e:	481e      	ldr	r0, [pc, #120]	; (8003888 <HAL_UART_MspInit+0x110>)
 8003810:	f003 f9a6 	bl	8006b60 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel3;
 8003814:	4b1d      	ldr	r3, [pc, #116]	; (800388c <HAL_UART_MspInit+0x114>)
 8003816:	4a1e      	ldr	r2, [pc, #120]	; (8003890 <HAL_UART_MspInit+0x118>)
 8003818:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800381a:	4b1c      	ldr	r3, [pc, #112]	; (800388c <HAL_UART_MspInit+0x114>)
 800381c:	2219      	movs	r2, #25
 800381e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003820:	4b1a      	ldr	r3, [pc, #104]	; (800388c <HAL_UART_MspInit+0x114>)
 8003822:	2210      	movs	r2, #16
 8003824:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003826:	4b19      	ldr	r3, [pc, #100]	; (800388c <HAL_UART_MspInit+0x114>)
 8003828:	2200      	movs	r2, #0
 800382a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800382c:	4b17      	ldr	r3, [pc, #92]	; (800388c <HAL_UART_MspInit+0x114>)
 800382e:	2280      	movs	r2, #128	; 0x80
 8003830:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003832:	4b16      	ldr	r3, [pc, #88]	; (800388c <HAL_UART_MspInit+0x114>)
 8003834:	2200      	movs	r2, #0
 8003836:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003838:	4b14      	ldr	r3, [pc, #80]	; (800388c <HAL_UART_MspInit+0x114>)
 800383a:	2200      	movs	r2, #0
 800383c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800383e:	4b13      	ldr	r3, [pc, #76]	; (800388c <HAL_UART_MspInit+0x114>)
 8003840:	2200      	movs	r2, #0
 8003842:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003844:	4b11      	ldr	r3, [pc, #68]	; (800388c <HAL_UART_MspInit+0x114>)
 8003846:	2200      	movs	r2, #0
 8003848:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800384a:	4810      	ldr	r0, [pc, #64]	; (800388c <HAL_UART_MspInit+0x114>)
 800384c:	f002 f85c 	bl	8005908 <HAL_DMA_Init>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 8003856:	f7ff fa75 	bl	8002d44 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a0b      	ldr	r2, [pc, #44]	; (800388c <HAL_UART_MspInit+0x114>)
 800385e:	679a      	str	r2, [r3, #120]	; 0x78
 8003860:	4a0a      	ldr	r2, [pc, #40]	; (800388c <HAL_UART_MspInit+0x114>)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003866:	2200      	movs	r2, #0
 8003868:	2105      	movs	r1, #5
 800386a:	2025      	movs	r0, #37	; 0x25
 800386c:	f001 fdde 	bl	800542c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003870:	2025      	movs	r0, #37	; 0x25
 8003872:	f001 fdf5 	bl	8005460 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003876:	bf00      	nop
 8003878:	3768      	adds	r7, #104	; 0x68
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	40013800 	.word	0x40013800
 8003884:	40021000 	.word	0x40021000
 8003888:	48000800 	.word	0x48000800
 800388c:	20000aec 	.word	0x20000aec
 8003890:	40020430 	.word	0x40020430

08003894 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003894:	480d      	ldr	r0, [pc, #52]	; (80038cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003896:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003898:	480d      	ldr	r0, [pc, #52]	; (80038d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800389a:	490e      	ldr	r1, [pc, #56]	; (80038d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800389c:	4a0e      	ldr	r2, [pc, #56]	; (80038d8 <LoopForever+0xe>)
  movs r3, #0
 800389e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80038a0:	e002      	b.n	80038a8 <LoopCopyDataInit>

080038a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038a6:	3304      	adds	r3, #4

080038a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038ac:	d3f9      	bcc.n	80038a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038ae:	4a0b      	ldr	r2, [pc, #44]	; (80038dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80038b0:	4c0b      	ldr	r4, [pc, #44]	; (80038e0 <LoopForever+0x16>)
  movs r3, #0
 80038b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038b4:	e001      	b.n	80038ba <LoopFillZerobss>

080038b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038b8:	3204      	adds	r2, #4

080038ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038bc:	d3fb      	bcc.n	80038b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80038be:	f7ff fd45 	bl	800334c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80038c2:	f00b fc69 	bl	800f198 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80038c6:	f7ff f9af 	bl	8002c28 <main>

080038ca <LoopForever>:

LoopForever:
    b LoopForever
 80038ca:	e7fe      	b.n	80038ca <LoopForever>
  ldr   r0, =_estack
 80038cc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80038d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038d4:	20000338 	.word	0x20000338
  ldr r2, =_sidata
 80038d8:	0800f3c8 	.word	0x0800f3c8
  ldr r2, =_sbss
 80038dc:	20000338 	.word	0x20000338
  ldr r4, =_ebss
 80038e0:	20004e64 	.word	0x20004e64

080038e4 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80038e4:	e7fe      	b.n	80038e4 <COMP1_2_3_IRQHandler>

080038e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b082      	sub	sp, #8
 80038ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80038ec:	2300      	movs	r3, #0
 80038ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038f0:	2003      	movs	r0, #3
 80038f2:	f001 fd90 	bl	8005416 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80038f6:	200f      	movs	r0, #15
 80038f8:	f7ff fc0c 	bl	8003114 <HAL_InitTick>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d002      	beq.n	8003908 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	71fb      	strb	r3, [r7, #7]
 8003906:	e001      	b.n	800390c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003908:	f7ff fbda 	bl	80030c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800390c:	79fb      	ldrb	r3, [r7, #7]

}
 800390e:	4618      	mov	r0, r3
 8003910:	3708      	adds	r7, #8
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
	...

08003918 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003918:	b480      	push	{r7}
 800391a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800391c:	4b05      	ldr	r3, [pc, #20]	; (8003934 <HAL_IncTick+0x1c>)
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	4b05      	ldr	r3, [pc, #20]	; (8003938 <HAL_IncTick+0x20>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4413      	add	r3, r2
 8003926:	4a03      	ldr	r2, [pc, #12]	; (8003934 <HAL_IncTick+0x1c>)
 8003928:	6013      	str	r3, [r2, #0]
}
 800392a:	bf00      	nop
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr
 8003934:	20000b4c 	.word	0x20000b4c
 8003938:	200002e0 	.word	0x200002e0

0800393c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0
  return uwTick;
 8003940:	4b03      	ldr	r3, [pc, #12]	; (8003950 <HAL_GetTick+0x14>)
 8003942:	681b      	ldr	r3, [r3, #0]
}
 8003944:	4618      	mov	r0, r3
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	20000b4c 	.word	0x20000b4c

08003954 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800395c:	f7ff ffee 	bl	800393c <HAL_GetTick>
 8003960:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800396c:	d004      	beq.n	8003978 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800396e:	4b09      	ldr	r3, [pc, #36]	; (8003994 <HAL_Delay+0x40>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	4413      	add	r3, r2
 8003976:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003978:	bf00      	nop
 800397a:	f7ff ffdf 	bl	800393c <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	429a      	cmp	r2, r3
 8003988:	d8f7      	bhi.n	800397a <HAL_Delay+0x26>
  {
  }
}
 800398a:	bf00      	nop
 800398c:	bf00      	nop
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	200002e0 	.word	0x200002e0

08003998 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	431a      	orrs	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	609a      	str	r2, [r3, #8]
}
 80039b2:	bf00      	nop
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr

080039be <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80039be:	b480      	push	{r7}
 80039c0:	b083      	sub	sp, #12
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
 80039c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	431a      	orrs	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	609a      	str	r2, [r3, #8]
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b087      	sub	sp, #28
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
 8003a0c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	3360      	adds	r3, #96	; 0x60
 8003a12:	461a      	mov	r2, r3
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4413      	add	r3, r2
 8003a1a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	4b08      	ldr	r3, [pc, #32]	; (8003a44 <LL_ADC_SetOffset+0x44>)
 8003a22:	4013      	ands	r3, r2
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003a38:	bf00      	nop
 8003a3a:	371c      	adds	r7, #28
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr
 8003a44:	03fff000 	.word	0x03fff000

08003a48 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	3360      	adds	r3, #96	; 0x60
 8003a56:	461a      	mov	r2, r3
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	4413      	add	r3, r2
 8003a5e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3714      	adds	r7, #20
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b087      	sub	sp, #28
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	3360      	adds	r3, #96	; 0x60
 8003a84:	461a      	mov	r2, r3
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	4413      	add	r3, r2
 8003a8c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	431a      	orrs	r2, r3
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003a9e:	bf00      	nop
 8003aa0:	371c      	adds	r7, #28
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr

08003aaa <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b087      	sub	sp, #28
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	60f8      	str	r0, [r7, #12]
 8003ab2:	60b9      	str	r1, [r7, #8]
 8003ab4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	3360      	adds	r3, #96	; 0x60
 8003aba:	461a      	mov	r2, r3
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4413      	add	r3, r2
 8003ac2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003ad4:	bf00      	nop
 8003ad6:	371c      	adds	r7, #28
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b087      	sub	sp, #28
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	3360      	adds	r3, #96	; 0x60
 8003af0:	461a      	mov	r2, r3
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	4413      	add	r3, r2
 8003af8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	431a      	orrs	r2, r3
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003b0a:	bf00      	nop
 8003b0c:	371c      	adds	r7, #28
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr

08003b16 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b083      	sub	sp, #12
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
 8003b1e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	695b      	ldr	r3, [r3, #20]
 8003b24:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	615a      	str	r2, [r3, #20]
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d101      	bne.n	8003b54 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003b50:	2301      	movs	r3, #1
 8003b52:	e000      	b.n	8003b56 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr

08003b62 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003b62:	b480      	push	{r7}
 8003b64:	b087      	sub	sp, #28
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	60f8      	str	r0, [r7, #12]
 8003b6a:	60b9      	str	r1, [r7, #8]
 8003b6c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	3330      	adds	r3, #48	; 0x30
 8003b72:	461a      	mov	r2, r3
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	0a1b      	lsrs	r3, r3, #8
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	f003 030c 	and.w	r3, r3, #12
 8003b7e:	4413      	add	r3, r2
 8003b80:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	f003 031f 	and.w	r3, r3, #31
 8003b8c:	211f      	movs	r1, #31
 8003b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b92:	43db      	mvns	r3, r3
 8003b94:	401a      	ands	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	0e9b      	lsrs	r3, r3, #26
 8003b9a:	f003 011f 	and.w	r1, r3, #31
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	f003 031f 	and.w	r3, r3, #31
 8003ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba8:	431a      	orrs	r2, r3
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003bae:	bf00      	nop
 8003bb0:	371c      	adds	r7, #28
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr

08003bba <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b083      	sub	sp, #12
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bc6:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d101      	bne.n	8003bd2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e000      	b.n	8003bd4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b087      	sub	sp, #28
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	3314      	adds	r3, #20
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	0e5b      	lsrs	r3, r3, #25
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	f003 0304 	and.w	r3, r3, #4
 8003bfc:	4413      	add	r3, r2
 8003bfe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	0d1b      	lsrs	r3, r3, #20
 8003c08:	f003 031f 	and.w	r3, r3, #31
 8003c0c:	2107      	movs	r1, #7
 8003c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c12:	43db      	mvns	r3, r3
 8003c14:	401a      	ands	r2, r3
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	0d1b      	lsrs	r3, r3, #20
 8003c1a:	f003 031f 	and.w	r3, r3, #31
 8003c1e:	6879      	ldr	r1, [r7, #4]
 8003c20:	fa01 f303 	lsl.w	r3, r1, r3
 8003c24:	431a      	orrs	r2, r3
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003c2a:	bf00      	nop
 8003c2c:	371c      	adds	r7, #28
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
	...

08003c38 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a0f      	ldr	r2, [pc, #60]	; (8003c84 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d10a      	bne.n	8003c62 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c58:	431a      	orrs	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8003c60:	e00a      	b.n	8003c78 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c6e:	43db      	mvns	r3, r3
 8003c70:	401a      	ands	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003c78:	bf00      	nop
 8003c7a:	3714      	adds	r7, #20
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr
 8003c84:	407f0000 	.word	0x407f0000

08003c88 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f003 031f 	and.w	r3, r3, #31
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003cd0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	6093      	str	r3, [r2, #8]
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cf8:	d101      	bne.n	8003cfe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e000      	b.n	8003d00 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003d1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d20:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d48:	d101      	bne.n	8003d4e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e000      	b.n	8003d50 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d70:	f043 0201 	orr.w	r2, r3, #1
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d101      	bne.n	8003d9c <LL_ADC_IsEnabled+0x18>
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e000      	b.n	8003d9e <LL_ADC_IsEnabled+0x1a>
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr

08003daa <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003daa:	b480      	push	{r7}
 8003dac:	b083      	sub	sp, #12
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003dba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003dbe:	f043 0204 	orr.w	r2, r3, #4
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003dc6:	bf00      	nop
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	b083      	sub	sp, #12
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f003 0304 	and.w	r3, r3, #4
 8003de2:	2b04      	cmp	r3, #4
 8003de4:	d101      	bne.n	8003dea <LL_ADC_REG_IsConversionOngoing+0x18>
 8003de6:	2301      	movs	r3, #1
 8003de8:	e000      	b.n	8003dec <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f003 0308 	and.w	r3, r3, #8
 8003e08:	2b08      	cmp	r3, #8
 8003e0a:	d101      	bne.n	8003e10 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e000      	b.n	8003e12 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
	...

08003e20 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003e20:	b590      	push	{r4, r7, lr}
 8003e22:	b089      	sub	sp, #36	; 0x24
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e177      	b.n	800412a <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d109      	bne.n	8003e5c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f7fe fb2f 	bl	80024ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7ff ff3f 	bl	8003ce4 <LL_ADC_IsDeepPowerDownEnabled>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d004      	beq.n	8003e76 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7ff ff25 	bl	8003cc0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7ff ff5a 	bl	8003d34 <LL_ADC_IsInternalRegulatorEnabled>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d115      	bne.n	8003eb2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7ff ff3e 	bl	8003d0c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e90:	4b9c      	ldr	r3, [pc, #624]	; (8004104 <HAL_ADC_Init+0x2e4>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	099b      	lsrs	r3, r3, #6
 8003e96:	4a9c      	ldr	r2, [pc, #624]	; (8004108 <HAL_ADC_Init+0x2e8>)
 8003e98:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9c:	099b      	lsrs	r3, r3, #6
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	005b      	lsls	r3, r3, #1
 8003ea2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003ea4:	e002      	b.n	8003eac <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1f9      	bne.n	8003ea6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7ff ff3c 	bl	8003d34 <LL_ADC_IsInternalRegulatorEnabled>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10d      	bne.n	8003ede <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec6:	f043 0210 	orr.w	r2, r3, #16
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ed2:	f043 0201 	orr.w	r2, r3, #1
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7ff ff75 	bl	8003dd2 <LL_ADC_REG_IsConversionOngoing>
 8003ee8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eee:	f003 0310 	and.w	r3, r3, #16
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f040 8110 	bne.w	8004118 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f040 810c 	bne.w	8004118 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f04:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003f08:	f043 0202 	orr.w	r2, r3, #2
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7ff ff35 	bl	8003d84 <LL_ADC_IsEnabled>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d111      	bne.n	8003f44 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f20:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003f24:	f7ff ff2e 	bl	8003d84 <LL_ADC_IsEnabled>
 8003f28:	4604      	mov	r4, r0
 8003f2a:	4878      	ldr	r0, [pc, #480]	; (800410c <HAL_ADC_Init+0x2ec>)
 8003f2c:	f7ff ff2a 	bl	8003d84 <LL_ADC_IsEnabled>
 8003f30:	4603      	mov	r3, r0
 8003f32:	4323      	orrs	r3, r4
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d105      	bne.n	8003f44 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	4874      	ldr	r0, [pc, #464]	; (8004110 <HAL_ADC_Init+0x2f0>)
 8003f40:	f7ff fd2a 	bl	8003998 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	7f5b      	ldrb	r3, [r3, #29]
 8003f48:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003f4e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003f54:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003f5a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f62:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003f64:	4313      	orrs	r3, r2
 8003f66:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d106      	bne.n	8003f80 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f76:	3b01      	subs	r3, #1
 8003f78:	045b      	lsls	r3, r3, #17
 8003f7a:	69ba      	ldr	r2, [r7, #24]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d009      	beq.n	8003f9c <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f94:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003f96:	69ba      	ldr	r2, [r7, #24]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68da      	ldr	r2, [r3, #12]
 8003fa2:	4b5c      	ldr	r3, [pc, #368]	; (8004114 <HAL_ADC_Init+0x2f4>)
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	6812      	ldr	r2, [r2, #0]
 8003faa:	69b9      	ldr	r1, [r7, #24]
 8003fac:	430b      	orrs	r3, r1
 8003fae:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7ff ff01 	bl	8003dd2 <LL_ADC_REG_IsConversionOngoing>
 8003fd0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7ff ff0e 	bl	8003df8 <LL_ADC_INJ_IsConversionOngoing>
 8003fdc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d16d      	bne.n	80040c0 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d16a      	bne.n	80040c0 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003fee:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ff6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004006:	f023 0302 	bic.w	r3, r3, #2
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	6812      	ldr	r2, [r2, #0]
 800400e:	69b9      	ldr	r1, [r7, #24]
 8004010:	430b      	orrs	r3, r1
 8004012:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d017      	beq.n	800404c <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	691a      	ldr	r2, [r3, #16]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800402a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004034:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004038:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	6911      	ldr	r1, [r2, #16]
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	6812      	ldr	r2, [r2, #0]
 8004044:	430b      	orrs	r3, r1
 8004046:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800404a:	e013      	b.n	8004074 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	691a      	ldr	r2, [r3, #16]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800405a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	6812      	ldr	r2, [r2, #0]
 8004068:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800406c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004070:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800407a:	2b01      	cmp	r3, #1
 800407c:	d118      	bne.n	80040b0 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004088:	f023 0304 	bic.w	r3, r3, #4
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004094:	4311      	orrs	r1, r2
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800409a:	4311      	orrs	r1, r2
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80040a0:	430a      	orrs	r2, r1
 80040a2:	431a      	orrs	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f042 0201 	orr.w	r2, r2, #1
 80040ac:	611a      	str	r2, [r3, #16]
 80040ae:	e007      	b.n	80040c0 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	691a      	ldr	r2, [r3, #16]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f022 0201 	bic.w	r2, r2, #1
 80040be:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	695b      	ldr	r3, [r3, #20]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d10c      	bne.n	80040e2 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ce:	f023 010f 	bic.w	r1, r3, #15
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	1e5a      	subs	r2, r3, #1
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	430a      	orrs	r2, r1
 80040de:	631a      	str	r2, [r3, #48]	; 0x30
 80040e0:	e007      	b.n	80040f2 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 020f 	bic.w	r2, r2, #15
 80040f0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f6:	f023 0303 	bic.w	r3, r3, #3
 80040fa:	f043 0201 	orr.w	r2, r3, #1
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	65da      	str	r2, [r3, #92]	; 0x5c
 8004102:	e011      	b.n	8004128 <HAL_ADC_Init+0x308>
 8004104:	200002d8 	.word	0x200002d8
 8004108:	053e2d63 	.word	0x053e2d63
 800410c:	50000100 	.word	0x50000100
 8004110:	50000300 	.word	0x50000300
 8004114:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800411c:	f043 0210 	orr.w	r2, r3, #16
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004128:	7ffb      	ldrb	r3, [r7, #31]
}
 800412a:	4618      	mov	r0, r3
 800412c:	3724      	adds	r7, #36	; 0x24
 800412e:	46bd      	mov	sp, r7
 8004130:	bd90      	pop	{r4, r7, pc}
 8004132:	bf00      	nop

08004134 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b086      	sub	sp, #24
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004140:	4851      	ldr	r0, [pc, #324]	; (8004288 <HAL_ADC_Start_DMA+0x154>)
 8004142:	f7ff fda1 	bl	8003c88 <LL_ADC_GetMultimode>
 8004146:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4618      	mov	r0, r3
 800414e:	f7ff fe40 	bl	8003dd2 <LL_ADC_REG_IsConversionOngoing>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	f040 808f 	bne.w	8004278 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004160:	2b01      	cmp	r3, #1
 8004162:	d101      	bne.n	8004168 <HAL_ADC_Start_DMA+0x34>
 8004164:	2302      	movs	r3, #2
 8004166:	e08a      	b.n	800427e <HAL_ADC_Start_DMA+0x14a>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d005      	beq.n	8004182 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	2b05      	cmp	r3, #5
 800417a:	d002      	beq.n	8004182 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	2b09      	cmp	r3, #9
 8004180:	d173      	bne.n	800426a <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f000 fea8 	bl	8004ed8 <ADC_Enable>
 8004188:	4603      	mov	r3, r0
 800418a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800418c:	7dfb      	ldrb	r3, [r7, #23]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d166      	bne.n	8004260 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004196:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800419a:	f023 0301 	bic.w	r3, r3, #1
 800419e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a38      	ldr	r2, [pc, #224]	; (800428c <HAL_ADC_Start_DMA+0x158>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d002      	beq.n	80041b6 <HAL_ADC_Start_DMA+0x82>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	e001      	b.n	80041ba <HAL_ADC_Start_DMA+0x86>
 80041b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	6812      	ldr	r2, [r2, #0]
 80041be:	4293      	cmp	r3, r2
 80041c0:	d002      	beq.n	80041c8 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d105      	bne.n	80041d4 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041cc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d006      	beq.n	80041ee <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041e4:	f023 0206 	bic.w	r2, r3, #6
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	661a      	str	r2, [r3, #96]	; 0x60
 80041ec:	e002      	b.n	80041f4 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f8:	4a25      	ldr	r2, [pc, #148]	; (8004290 <HAL_ADC_Start_DMA+0x15c>)
 80041fa:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004200:	4a24      	ldr	r2, [pc, #144]	; (8004294 <HAL_ADC_Start_DMA+0x160>)
 8004202:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004208:	4a23      	ldr	r2, [pc, #140]	; (8004298 <HAL_ADC_Start_DMA+0x164>)
 800420a:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	221c      	movs	r2, #28
 8004212:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	685a      	ldr	r2, [r3, #4]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f042 0210 	orr.w	r2, r2, #16
 800422a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68da      	ldr	r2, [r3, #12]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f042 0201 	orr.w	r2, r2, #1
 800423a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	3340      	adds	r3, #64	; 0x40
 8004246:	4619      	mov	r1, r3
 8004248:	68ba      	ldr	r2, [r7, #8]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f001 fc04 	bl	8005a58 <HAL_DMA_Start_IT>
 8004250:	4603      	mov	r3, r0
 8004252:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4618      	mov	r0, r3
 800425a:	f7ff fda6 	bl	8003daa <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800425e:	e00d      	b.n	800427c <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8004268:	e008      	b.n	800427c <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8004276:	e001      	b.n	800427c <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004278:	2302      	movs	r3, #2
 800427a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800427c:	7dfb      	ldrb	r3, [r7, #23]
}
 800427e:	4618      	mov	r0, r3
 8004280:	3718      	adds	r7, #24
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	50000300 	.word	0x50000300
 800428c:	50000100 	.word	0x50000100
 8004290:	08004f9d 	.word	0x08004f9d
 8004294:	08005075 	.word	0x08005075
 8004298:	08005091 	.word	0x08005091

0800429c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b08a      	sub	sp, #40	; 0x28
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80042a4:	2300      	movs	r3, #0
 80042a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042b8:	4883      	ldr	r0, [pc, #524]	; (80044c8 <HAL_ADC_IRQHandler+0x22c>)
 80042ba:	f7ff fce5 	bl	8003c88 <LL_ADC_GetMultimode>
 80042be:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d017      	beq.n	80042fa <HAL_ADC_IRQHandler+0x5e>
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	f003 0302 	and.w	r3, r3, #2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d012      	beq.n	80042fa <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042d8:	f003 0310 	and.w	r3, r3, #16
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d105      	bne.n	80042ec <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e4:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 ff37 	bl	8005160 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2202      	movs	r2, #2
 80042f8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	f003 0304 	and.w	r3, r3, #4
 8004300:	2b00      	cmp	r3, #0
 8004302:	d004      	beq.n	800430e <HAL_ADC_IRQHandler+0x72>
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	f003 0304 	and.w	r3, r3, #4
 800430a:	2b00      	cmp	r3, #0
 800430c:	d10a      	bne.n	8004324 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004314:	2b00      	cmp	r3, #0
 8004316:	f000 8085 	beq.w	8004424 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	f003 0308 	and.w	r3, r3, #8
 8004320:	2b00      	cmp	r3, #0
 8004322:	d07f      	beq.n	8004424 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004328:	f003 0310 	and.w	r3, r3, #16
 800432c:	2b00      	cmp	r3, #0
 800432e:	d105      	bne.n	800433c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004334:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4618      	mov	r0, r3
 8004342:	f7ff fbfb 	bl	8003b3c <LL_ADC_REG_IsTriggerSourceSWStart>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d064      	beq.n	8004416 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a5e      	ldr	r2, [pc, #376]	; (80044cc <HAL_ADC_IRQHandler+0x230>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d002      	beq.n	800435c <HAL_ADC_IRQHandler+0xc0>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	e001      	b.n	8004360 <HAL_ADC_IRQHandler+0xc4>
 800435c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	6812      	ldr	r2, [r2, #0]
 8004364:	4293      	cmp	r3, r2
 8004366:	d008      	beq.n	800437a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d005      	beq.n	800437a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	2b05      	cmp	r3, #5
 8004372:	d002      	beq.n	800437a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	2b09      	cmp	r3, #9
 8004378:	d104      	bne.n	8004384 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	623b      	str	r3, [r7, #32]
 8004382:	e00d      	b.n	80043a0 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a50      	ldr	r2, [pc, #320]	; (80044cc <HAL_ADC_IRQHandler+0x230>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d002      	beq.n	8004394 <HAL_ADC_IRQHandler+0xf8>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	e001      	b.n	8004398 <HAL_ADC_IRQHandler+0xfc>
 8004394:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004398:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80043a0:	6a3b      	ldr	r3, [r7, #32]
 80043a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d135      	bne.n	8004416 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0308 	and.w	r3, r3, #8
 80043b4:	2b08      	cmp	r3, #8
 80043b6:	d12e      	bne.n	8004416 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4618      	mov	r0, r3
 80043be:	f7ff fd08 	bl	8003dd2 <LL_ADC_REG_IsConversionOngoing>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d11a      	bne.n	80043fe <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	685a      	ldr	r2, [r3, #4]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f022 020c 	bic.w	r2, r2, #12
 80043d6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d112      	bne.n	8004416 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043f4:	f043 0201 	orr.w	r2, r3, #1
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	65da      	str	r2, [r3, #92]	; 0x5c
 80043fc:	e00b      	b.n	8004416 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004402:	f043 0210 	orr.w	r2, r3, #16
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800440e:	f043 0201 	orr.w	r2, r3, #1
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f7fc ff24 	bl	8001264 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	220c      	movs	r2, #12
 8004422:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	f003 0320 	and.w	r3, r3, #32
 800442a:	2b00      	cmp	r3, #0
 800442c:	d004      	beq.n	8004438 <HAL_ADC_IRQHandler+0x19c>
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	f003 0320 	and.w	r3, r3, #32
 8004434:	2b00      	cmp	r3, #0
 8004436:	d10b      	bne.n	8004450 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800443e:	2b00      	cmp	r3, #0
 8004440:	f000 809e 	beq.w	8004580 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800444a:	2b00      	cmp	r3, #0
 800444c:	f000 8098 	beq.w	8004580 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004454:	f003 0310 	and.w	r3, r3, #16
 8004458:	2b00      	cmp	r3, #0
 800445a:	d105      	bne.n	8004468 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004460:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4618      	mov	r0, r3
 800446e:	f7ff fba4 	bl	8003bba <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004472:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4618      	mov	r0, r3
 800447a:	f7ff fb5f 	bl	8003b3c <LL_ADC_REG_IsTriggerSourceSWStart>
 800447e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a11      	ldr	r2, [pc, #68]	; (80044cc <HAL_ADC_IRQHandler+0x230>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d002      	beq.n	8004490 <HAL_ADC_IRQHandler+0x1f4>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	e001      	b.n	8004494 <HAL_ADC_IRQHandler+0x1f8>
 8004490:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	6812      	ldr	r2, [r2, #0]
 8004498:	4293      	cmp	r3, r2
 800449a:	d008      	beq.n	80044ae <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d005      	beq.n	80044ae <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	2b06      	cmp	r3, #6
 80044a6:	d002      	beq.n	80044ae <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	2b07      	cmp	r3, #7
 80044ac:	d104      	bne.n	80044b8 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	623b      	str	r3, [r7, #32]
 80044b6:	e011      	b.n	80044dc <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a03      	ldr	r2, [pc, #12]	; (80044cc <HAL_ADC_IRQHandler+0x230>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d006      	beq.n	80044d0 <HAL_ADC_IRQHandler+0x234>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	e005      	b.n	80044d4 <HAL_ADC_IRQHandler+0x238>
 80044c8:	50000300 	.word	0x50000300
 80044cc:	50000100 	.word	0x50000100
 80044d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80044d4:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d047      	beq.n	8004572 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80044e2:	6a3b      	ldr	r3, [r7, #32]
 80044e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d007      	beq.n	80044fc <HAL_ADC_IRQHandler+0x260>
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d03f      	beq.n	8004572 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80044f2:	6a3b      	ldr	r3, [r7, #32]
 80044f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d13a      	bne.n	8004572 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004506:	2b40      	cmp	r3, #64	; 0x40
 8004508:	d133      	bne.n	8004572 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800450a:	6a3b      	ldr	r3, [r7, #32]
 800450c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d12e      	bne.n	8004572 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4618      	mov	r0, r3
 800451a:	f7ff fc6d 	bl	8003df8 <LL_ADC_INJ_IsConversionOngoing>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d11a      	bne.n	800455a <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	685a      	ldr	r2, [r3, #4]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004532:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004538:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004548:	2b00      	cmp	r3, #0
 800454a:	d112      	bne.n	8004572 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004550:	f043 0201 	orr.w	r2, r3, #1
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	65da      	str	r2, [r3, #92]	; 0x5c
 8004558:	e00b      	b.n	8004572 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800455e:	f043 0210 	orr.w	r2, r3, #16
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800456a:	f043 0201 	orr.w	r2, r3, #1
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 fdcc 	bl	8005110 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2260      	movs	r2, #96	; 0x60
 800457e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004586:	2b00      	cmp	r3, #0
 8004588:	d011      	beq.n	80045ae <HAL_ADC_IRQHandler+0x312>
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00c      	beq.n	80045ae <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004598:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 f895 	bl	80046d0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2280      	movs	r2, #128	; 0x80
 80045ac:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d012      	beq.n	80045de <HAL_ADC_IRQHandler+0x342>
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00d      	beq.n	80045de <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 fdb2 	bl	8005138 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045dc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d012      	beq.n	800460e <HAL_ADC_IRQHandler+0x372>
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00d      	beq.n	800460e <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 fda4 	bl	800514c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f44f 7200 	mov.w	r2, #512	; 0x200
 800460c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	f003 0310 	and.w	r3, r3, #16
 8004614:	2b00      	cmp	r3, #0
 8004616:	d036      	beq.n	8004686 <HAL_ADC_IRQHandler+0x3ea>
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	f003 0310 	and.w	r3, r3, #16
 800461e:	2b00      	cmp	r3, #0
 8004620:	d031      	beq.n	8004686 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004626:	2b00      	cmp	r3, #0
 8004628:	d102      	bne.n	8004630 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 800462a:	2301      	movs	r3, #1
 800462c:	627b      	str	r3, [r7, #36]	; 0x24
 800462e:	e014      	b.n	800465a <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d008      	beq.n	8004648 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004636:	4825      	ldr	r0, [pc, #148]	; (80046cc <HAL_ADC_IRQHandler+0x430>)
 8004638:	f7ff fb34 	bl	8003ca4 <LL_ADC_GetMultiDMATransfer>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00b      	beq.n	800465a <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8004642:	2301      	movs	r3, #1
 8004644:	627b      	str	r3, [r7, #36]	; 0x24
 8004646:	e008      	b.n	800465a <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8004656:	2301      	movs	r3, #1
 8004658:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800465a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465c:	2b01      	cmp	r3, #1
 800465e:	d10e      	bne.n	800467e <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004664:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004670:	f043 0202 	orr.w	r2, r3, #2
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 f833 	bl	80046e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2210      	movs	r2, #16
 8004684:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800468c:	2b00      	cmp	r3, #0
 800468e:	d018      	beq.n	80046c2 <HAL_ADC_IRQHandler+0x426>
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004696:	2b00      	cmp	r3, #0
 8004698:	d013      	beq.n	80046c2 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800469e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046aa:	f043 0208 	orr.w	r2, r3, #8
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80046ba:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f000 fd31 	bl	8005124 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80046c2:	bf00      	nop
 80046c4:	3728      	adds	r7, #40	; 0x28
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	50000300 	.word	0x50000300

080046d0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b0b6      	sub	sp, #216	; 0xd8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004702:	2300      	movs	r3, #0
 8004704:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004708:	2300      	movs	r3, #0
 800470a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004712:	2b01      	cmp	r3, #1
 8004714:	d101      	bne.n	800471a <HAL_ADC_ConfigChannel+0x22>
 8004716:	2302      	movs	r3, #2
 8004718:	e3c8      	b.n	8004eac <HAL_ADC_ConfigChannel+0x7b4>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2201      	movs	r2, #1
 800471e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4618      	mov	r0, r3
 8004728:	f7ff fb53 	bl	8003dd2 <LL_ADC_REG_IsConversionOngoing>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	f040 83ad 	bne.w	8004e8e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6818      	ldr	r0, [r3, #0]
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	6859      	ldr	r1, [r3, #4]
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	461a      	mov	r2, r3
 8004742:	f7ff fa0e 	bl	8003b62 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4618      	mov	r0, r3
 800474c:	f7ff fb41 	bl	8003dd2 <LL_ADC_REG_IsConversionOngoing>
 8004750:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4618      	mov	r0, r3
 800475a:	f7ff fb4d 	bl	8003df8 <LL_ADC_INJ_IsConversionOngoing>
 800475e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004762:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004766:	2b00      	cmp	r3, #0
 8004768:	f040 81d9 	bne.w	8004b1e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800476c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004770:	2b00      	cmp	r3, #0
 8004772:	f040 81d4 	bne.w	8004b1e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800477e:	d10f      	bne.n	80047a0 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6818      	ldr	r0, [r3, #0]
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2200      	movs	r2, #0
 800478a:	4619      	mov	r1, r3
 800478c:	f7ff fa28 	bl	8003be0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004798:	4618      	mov	r0, r3
 800479a:	f7ff f9bc 	bl	8003b16 <LL_ADC_SetSamplingTimeCommonConfig>
 800479e:	e00e      	b.n	80047be <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6818      	ldr	r0, [r3, #0]
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	6819      	ldr	r1, [r3, #0]
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	461a      	mov	r2, r3
 80047ae:	f7ff fa17 	bl	8003be0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2100      	movs	r1, #0
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7ff f9ac 	bl	8003b16 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	695a      	ldr	r2, [r3, #20]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	08db      	lsrs	r3, r3, #3
 80047ca:	f003 0303 	and.w	r3, r3, #3
 80047ce:	005b      	lsls	r3, r3, #1
 80047d0:	fa02 f303 	lsl.w	r3, r2, r3
 80047d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	2b04      	cmp	r3, #4
 80047de:	d022      	beq.n	8004826 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6818      	ldr	r0, [r3, #0]
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	6919      	ldr	r1, [r3, #16]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80047f0:	f7ff f906 	bl	8003a00 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6818      	ldr	r0, [r3, #0]
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	6919      	ldr	r1, [r3, #16]
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	461a      	mov	r2, r3
 8004802:	f7ff f952 	bl	8003aaa <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6818      	ldr	r0, [r3, #0]
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	6919      	ldr	r1, [r3, #16]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	7f1b      	ldrb	r3, [r3, #28]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d102      	bne.n	800481c <HAL_ADC_ConfigChannel+0x124>
 8004816:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800481a:	e000      	b.n	800481e <HAL_ADC_ConfigChannel+0x126>
 800481c:	2300      	movs	r3, #0
 800481e:	461a      	mov	r2, r3
 8004820:	f7ff f95e 	bl	8003ae0 <LL_ADC_SetOffsetSaturation>
 8004824:	e17b      	b.n	8004b1e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2100      	movs	r1, #0
 800482c:	4618      	mov	r0, r3
 800482e:	f7ff f90b 	bl	8003a48 <LL_ADC_GetOffsetChannel>
 8004832:	4603      	mov	r3, r0
 8004834:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004838:	2b00      	cmp	r3, #0
 800483a:	d10a      	bne.n	8004852 <HAL_ADC_ConfigChannel+0x15a>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2100      	movs	r1, #0
 8004842:	4618      	mov	r0, r3
 8004844:	f7ff f900 	bl	8003a48 <LL_ADC_GetOffsetChannel>
 8004848:	4603      	mov	r3, r0
 800484a:	0e9b      	lsrs	r3, r3, #26
 800484c:	f003 021f 	and.w	r2, r3, #31
 8004850:	e01e      	b.n	8004890 <HAL_ADC_ConfigChannel+0x198>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2100      	movs	r1, #0
 8004858:	4618      	mov	r0, r3
 800485a:	f7ff f8f5 	bl	8003a48 <LL_ADC_GetOffsetChannel>
 800485e:	4603      	mov	r3, r0
 8004860:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004864:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004868:	fa93 f3a3 	rbit	r3, r3
 800486c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004870:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004874:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004878:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d101      	bne.n	8004884 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8004880:	2320      	movs	r3, #32
 8004882:	e004      	b.n	800488e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8004884:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004888:	fab3 f383 	clz	r3, r3
 800488c:	b2db      	uxtb	r3, r3
 800488e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004898:	2b00      	cmp	r3, #0
 800489a:	d105      	bne.n	80048a8 <HAL_ADC_ConfigChannel+0x1b0>
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	0e9b      	lsrs	r3, r3, #26
 80048a2:	f003 031f 	and.w	r3, r3, #31
 80048a6:	e018      	b.n	80048da <HAL_ADC_ConfigChannel+0x1e2>
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80048b4:	fa93 f3a3 	rbit	r3, r3
 80048b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80048bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80048c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80048c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d101      	bne.n	80048d0 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80048cc:	2320      	movs	r3, #32
 80048ce:	e004      	b.n	80048da <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80048d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80048d4:	fab3 f383 	clz	r3, r3
 80048d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80048da:	429a      	cmp	r2, r3
 80048dc:	d106      	bne.n	80048ec <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2200      	movs	r2, #0
 80048e4:	2100      	movs	r1, #0
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7ff f8c4 	bl	8003a74 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2101      	movs	r1, #1
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7ff f8a8 	bl	8003a48 <LL_ADC_GetOffsetChannel>
 80048f8:	4603      	mov	r3, r0
 80048fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d10a      	bne.n	8004918 <HAL_ADC_ConfigChannel+0x220>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2101      	movs	r1, #1
 8004908:	4618      	mov	r0, r3
 800490a:	f7ff f89d 	bl	8003a48 <LL_ADC_GetOffsetChannel>
 800490e:	4603      	mov	r3, r0
 8004910:	0e9b      	lsrs	r3, r3, #26
 8004912:	f003 021f 	and.w	r2, r3, #31
 8004916:	e01e      	b.n	8004956 <HAL_ADC_ConfigChannel+0x25e>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2101      	movs	r1, #1
 800491e:	4618      	mov	r0, r3
 8004920:	f7ff f892 	bl	8003a48 <LL_ADC_GetOffsetChannel>
 8004924:	4603      	mov	r3, r0
 8004926:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800492a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800492e:	fa93 f3a3 	rbit	r3, r3
 8004932:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004936:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800493a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800493e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004942:	2b00      	cmp	r3, #0
 8004944:	d101      	bne.n	800494a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8004946:	2320      	movs	r3, #32
 8004948:	e004      	b.n	8004954 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800494a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800494e:	fab3 f383 	clz	r3, r3
 8004952:	b2db      	uxtb	r3, r3
 8004954:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800495e:	2b00      	cmp	r3, #0
 8004960:	d105      	bne.n	800496e <HAL_ADC_ConfigChannel+0x276>
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	0e9b      	lsrs	r3, r3, #26
 8004968:	f003 031f 	and.w	r3, r3, #31
 800496c:	e018      	b.n	80049a0 <HAL_ADC_ConfigChannel+0x2a8>
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004976:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800497a:	fa93 f3a3 	rbit	r3, r3
 800497e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004982:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004986:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800498a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800498e:	2b00      	cmp	r3, #0
 8004990:	d101      	bne.n	8004996 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8004992:	2320      	movs	r3, #32
 8004994:	e004      	b.n	80049a0 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8004996:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800499a:	fab3 f383 	clz	r3, r3
 800499e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d106      	bne.n	80049b2 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2200      	movs	r2, #0
 80049aa:	2101      	movs	r1, #1
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7ff f861 	bl	8003a74 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2102      	movs	r1, #2
 80049b8:	4618      	mov	r0, r3
 80049ba:	f7ff f845 	bl	8003a48 <LL_ADC_GetOffsetChannel>
 80049be:	4603      	mov	r3, r0
 80049c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d10a      	bne.n	80049de <HAL_ADC_ConfigChannel+0x2e6>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2102      	movs	r1, #2
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7ff f83a 	bl	8003a48 <LL_ADC_GetOffsetChannel>
 80049d4:	4603      	mov	r3, r0
 80049d6:	0e9b      	lsrs	r3, r3, #26
 80049d8:	f003 021f 	and.w	r2, r3, #31
 80049dc:	e01e      	b.n	8004a1c <HAL_ADC_ConfigChannel+0x324>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2102      	movs	r1, #2
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7ff f82f 	bl	8003a48 <LL_ADC_GetOffsetChannel>
 80049ea:	4603      	mov	r3, r0
 80049ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049f4:	fa93 f3a3 	rbit	r3, r3
 80049f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80049fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a00:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004a04:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d101      	bne.n	8004a10 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8004a0c:	2320      	movs	r3, #32
 8004a0e:	e004      	b.n	8004a1a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8004a10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004a14:	fab3 f383 	clz	r3, r3
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d105      	bne.n	8004a34 <HAL_ADC_ConfigChannel+0x33c>
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	0e9b      	lsrs	r3, r3, #26
 8004a2e:	f003 031f 	and.w	r3, r3, #31
 8004a32:	e016      	b.n	8004a62 <HAL_ADC_ConfigChannel+0x36a>
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a40:	fa93 f3a3 	rbit	r3, r3
 8004a44:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004a46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004a4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d101      	bne.n	8004a58 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8004a54:	2320      	movs	r3, #32
 8004a56:	e004      	b.n	8004a62 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8004a58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a5c:	fab3 f383 	clz	r3, r3
 8004a60:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d106      	bne.n	8004a74 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	2102      	movs	r1, #2
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7ff f800 	bl	8003a74 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2103      	movs	r1, #3
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7fe ffe4 	bl	8003a48 <LL_ADC_GetOffsetChannel>
 8004a80:	4603      	mov	r3, r0
 8004a82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d10a      	bne.n	8004aa0 <HAL_ADC_ConfigChannel+0x3a8>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2103      	movs	r1, #3
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7fe ffd9 	bl	8003a48 <LL_ADC_GetOffsetChannel>
 8004a96:	4603      	mov	r3, r0
 8004a98:	0e9b      	lsrs	r3, r3, #26
 8004a9a:	f003 021f 	and.w	r2, r3, #31
 8004a9e:	e017      	b.n	8004ad0 <HAL_ADC_ConfigChannel+0x3d8>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2103      	movs	r1, #3
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7fe ffce 	bl	8003a48 <LL_ADC_GetOffsetChannel>
 8004aac:	4603      	mov	r3, r0
 8004aae:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ab2:	fa93 f3a3 	rbit	r3, r3
 8004ab6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004ab8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004aba:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004abc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d101      	bne.n	8004ac6 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8004ac2:	2320      	movs	r3, #32
 8004ac4:	e003      	b.n	8004ace <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8004ac6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ac8:	fab3 f383 	clz	r3, r3
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d105      	bne.n	8004ae8 <HAL_ADC_ConfigChannel+0x3f0>
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	0e9b      	lsrs	r3, r3, #26
 8004ae2:	f003 031f 	and.w	r3, r3, #31
 8004ae6:	e011      	b.n	8004b0c <HAL_ADC_ConfigChannel+0x414>
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004af0:	fa93 f3a3 	rbit	r3, r3
 8004af4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004af6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004af8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004afa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d101      	bne.n	8004b04 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8004b00:	2320      	movs	r3, #32
 8004b02:	e003      	b.n	8004b0c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8004b04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b06:	fab3 f383 	clz	r3, r3
 8004b0a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d106      	bne.n	8004b1e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2200      	movs	r2, #0
 8004b16:	2103      	movs	r1, #3
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7fe ffab 	bl	8003a74 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7ff f92e 	bl	8003d84 <LL_ADC_IsEnabled>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f040 8140 	bne.w	8004db0 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6818      	ldr	r0, [r3, #0]
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	6819      	ldr	r1, [r3, #0]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	f7ff f87b 	bl	8003c38 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	4a8f      	ldr	r2, [pc, #572]	; (8004d84 <HAL_ADC_ConfigChannel+0x68c>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	f040 8131 	bne.w	8004db0 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10b      	bne.n	8004b76 <HAL_ADC_ConfigChannel+0x47e>
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	0e9b      	lsrs	r3, r3, #26
 8004b64:	3301      	adds	r3, #1
 8004b66:	f003 031f 	and.w	r3, r3, #31
 8004b6a:	2b09      	cmp	r3, #9
 8004b6c:	bf94      	ite	ls
 8004b6e:	2301      	movls	r3, #1
 8004b70:	2300      	movhi	r3, #0
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	e019      	b.n	8004baa <HAL_ADC_ConfigChannel+0x4b2>
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b7e:	fa93 f3a3 	rbit	r3, r3
 8004b82:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004b84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b86:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004b88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8004b8e:	2320      	movs	r3, #32
 8004b90:	e003      	b.n	8004b9a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8004b92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b94:	fab3 f383 	clz	r3, r3
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	f003 031f 	and.w	r3, r3, #31
 8004ba0:	2b09      	cmp	r3, #9
 8004ba2:	bf94      	ite	ls
 8004ba4:	2301      	movls	r3, #1
 8004ba6:	2300      	movhi	r3, #0
 8004ba8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d079      	beq.n	8004ca2 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d107      	bne.n	8004bca <HAL_ADC_ConfigChannel+0x4d2>
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	0e9b      	lsrs	r3, r3, #26
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	069b      	lsls	r3, r3, #26
 8004bc4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004bc8:	e015      	b.n	8004bf6 <HAL_ADC_ConfigChannel+0x4fe>
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bd2:	fa93 f3a3 	rbit	r3, r3
 8004bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004bd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bda:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004bdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d101      	bne.n	8004be6 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004be2:	2320      	movs	r3, #32
 8004be4:	e003      	b.n	8004bee <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8004be6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004be8:	fab3 f383 	clz	r3, r3
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	3301      	adds	r3, #1
 8004bf0:	069b      	lsls	r3, r3, #26
 8004bf2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d109      	bne.n	8004c16 <HAL_ADC_ConfigChannel+0x51e>
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	0e9b      	lsrs	r3, r3, #26
 8004c08:	3301      	adds	r3, #1
 8004c0a:	f003 031f 	and.w	r3, r3, #31
 8004c0e:	2101      	movs	r1, #1
 8004c10:	fa01 f303 	lsl.w	r3, r1, r3
 8004c14:	e017      	b.n	8004c46 <HAL_ADC_ConfigChannel+0x54e>
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c1e:	fa93 f3a3 	rbit	r3, r3
 8004c22:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004c24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c26:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004c28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8004c2e:	2320      	movs	r3, #32
 8004c30:	e003      	b.n	8004c3a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8004c32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c34:	fab3 f383 	clz	r3, r3
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	f003 031f 	and.w	r3, r3, #31
 8004c40:	2101      	movs	r1, #1
 8004c42:	fa01 f303 	lsl.w	r3, r1, r3
 8004c46:	ea42 0103 	orr.w	r1, r2, r3
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d10a      	bne.n	8004c6c <HAL_ADC_ConfigChannel+0x574>
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	0e9b      	lsrs	r3, r3, #26
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	f003 021f 	and.w	r2, r3, #31
 8004c62:	4613      	mov	r3, r2
 8004c64:	005b      	lsls	r3, r3, #1
 8004c66:	4413      	add	r3, r2
 8004c68:	051b      	lsls	r3, r3, #20
 8004c6a:	e018      	b.n	8004c9e <HAL_ADC_ConfigChannel+0x5a6>
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c74:	fa93 f3a3 	rbit	r3, r3
 8004c78:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004c7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d101      	bne.n	8004c88 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8004c84:	2320      	movs	r3, #32
 8004c86:	e003      	b.n	8004c90 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8004c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c8a:	fab3 f383 	clz	r3, r3
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	3301      	adds	r3, #1
 8004c92:	f003 021f 	and.w	r2, r3, #31
 8004c96:	4613      	mov	r3, r2
 8004c98:	005b      	lsls	r3, r3, #1
 8004c9a:	4413      	add	r3, r2
 8004c9c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c9e:	430b      	orrs	r3, r1
 8004ca0:	e081      	b.n	8004da6 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d107      	bne.n	8004cbe <HAL_ADC_ConfigChannel+0x5c6>
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	0e9b      	lsrs	r3, r3, #26
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	069b      	lsls	r3, r3, #26
 8004cb8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004cbc:	e015      	b.n	8004cea <HAL_ADC_ConfigChannel+0x5f2>
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc6:	fa93 f3a3 	rbit	r3, r3
 8004cca:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cce:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8004cd6:	2320      	movs	r3, #32
 8004cd8:	e003      	b.n	8004ce2 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8004cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cdc:	fab3 f383 	clz	r3, r3
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	069b      	lsls	r3, r3, #26
 8004ce6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d109      	bne.n	8004d0a <HAL_ADC_ConfigChannel+0x612>
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	0e9b      	lsrs	r3, r3, #26
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	f003 031f 	and.w	r3, r3, #31
 8004d02:	2101      	movs	r1, #1
 8004d04:	fa01 f303 	lsl.w	r3, r1, r3
 8004d08:	e017      	b.n	8004d3a <HAL_ADC_ConfigChannel+0x642>
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d10:	6a3b      	ldr	r3, [r7, #32]
 8004d12:	fa93 f3a3 	rbit	r3, r3
 8004d16:	61fb      	str	r3, [r7, #28]
  return result;
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d101      	bne.n	8004d26 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8004d22:	2320      	movs	r3, #32
 8004d24:	e003      	b.n	8004d2e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8004d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d28:	fab3 f383 	clz	r3, r3
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	3301      	adds	r3, #1
 8004d30:	f003 031f 	and.w	r3, r3, #31
 8004d34:	2101      	movs	r1, #1
 8004d36:	fa01 f303 	lsl.w	r3, r1, r3
 8004d3a:	ea42 0103 	orr.w	r1, r2, r3
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10d      	bne.n	8004d66 <HAL_ADC_ConfigChannel+0x66e>
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	0e9b      	lsrs	r3, r3, #26
 8004d50:	3301      	adds	r3, #1
 8004d52:	f003 021f 	and.w	r2, r3, #31
 8004d56:	4613      	mov	r3, r2
 8004d58:	005b      	lsls	r3, r3, #1
 8004d5a:	4413      	add	r3, r2
 8004d5c:	3b1e      	subs	r3, #30
 8004d5e:	051b      	lsls	r3, r3, #20
 8004d60:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004d64:	e01e      	b.n	8004da4 <HAL_ADC_ConfigChannel+0x6ac>
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	fa93 f3a3 	rbit	r3, r3
 8004d72:	613b      	str	r3, [r7, #16]
  return result;
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d104      	bne.n	8004d88 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8004d7e:	2320      	movs	r3, #32
 8004d80:	e006      	b.n	8004d90 <HAL_ADC_ConfigChannel+0x698>
 8004d82:	bf00      	nop
 8004d84:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	fab3 f383 	clz	r3, r3
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	3301      	adds	r3, #1
 8004d92:	f003 021f 	and.w	r2, r3, #31
 8004d96:	4613      	mov	r3, r2
 8004d98:	005b      	lsls	r3, r3, #1
 8004d9a:	4413      	add	r3, r2
 8004d9c:	3b1e      	subs	r3, #30
 8004d9e:	051b      	lsls	r3, r3, #20
 8004da0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004da4:	430b      	orrs	r3, r1
 8004da6:	683a      	ldr	r2, [r7, #0]
 8004da8:	6892      	ldr	r2, [r2, #8]
 8004daa:	4619      	mov	r1, r3
 8004dac:	f7fe ff18 	bl	8003be0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	4b3f      	ldr	r3, [pc, #252]	; (8004eb4 <HAL_ADC_ConfigChannel+0x7bc>)
 8004db6:	4013      	ands	r3, r2
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d071      	beq.n	8004ea0 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004dbc:	483e      	ldr	r0, [pc, #248]	; (8004eb8 <HAL_ADC_ConfigChannel+0x7c0>)
 8004dbe:	f7fe fe11 	bl	80039e4 <LL_ADC_GetCommonPathInternalCh>
 8004dc2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a3c      	ldr	r2, [pc, #240]	; (8004ebc <HAL_ADC_ConfigChannel+0x7c4>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d004      	beq.n	8004dda <HAL_ADC_ConfigChannel+0x6e2>
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a3a      	ldr	r2, [pc, #232]	; (8004ec0 <HAL_ADC_ConfigChannel+0x7c8>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d127      	bne.n	8004e2a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004dda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004dde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d121      	bne.n	8004e2a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004dee:	d157      	bne.n	8004ea0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004df0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004df4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004df8:	4619      	mov	r1, r3
 8004dfa:	482f      	ldr	r0, [pc, #188]	; (8004eb8 <HAL_ADC_ConfigChannel+0x7c0>)
 8004dfc:	f7fe fddf 	bl	80039be <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004e00:	4b30      	ldr	r3, [pc, #192]	; (8004ec4 <HAL_ADC_ConfigChannel+0x7cc>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	099b      	lsrs	r3, r3, #6
 8004e06:	4a30      	ldr	r2, [pc, #192]	; (8004ec8 <HAL_ADC_ConfigChannel+0x7d0>)
 8004e08:	fba2 2303 	umull	r2, r3, r2, r3
 8004e0c:	099b      	lsrs	r3, r3, #6
 8004e0e:	1c5a      	adds	r2, r3, #1
 8004e10:	4613      	mov	r3, r2
 8004e12:	005b      	lsls	r3, r3, #1
 8004e14:	4413      	add	r3, r2
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004e1a:	e002      	b.n	8004e22 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1f9      	bne.n	8004e1c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e28:	e03a      	b.n	8004ea0 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a27      	ldr	r2, [pc, #156]	; (8004ecc <HAL_ADC_ConfigChannel+0x7d4>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d113      	bne.n	8004e5c <HAL_ADC_ConfigChannel+0x764>
 8004e34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004e38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d10d      	bne.n	8004e5c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a22      	ldr	r2, [pc, #136]	; (8004ed0 <HAL_ADC_ConfigChannel+0x7d8>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d02a      	beq.n	8004ea0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004e4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e52:	4619      	mov	r1, r3
 8004e54:	4818      	ldr	r0, [pc, #96]	; (8004eb8 <HAL_ADC_ConfigChannel+0x7c0>)
 8004e56:	f7fe fdb2 	bl	80039be <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e5a:	e021      	b.n	8004ea0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a1c      	ldr	r2, [pc, #112]	; (8004ed4 <HAL_ADC_ConfigChannel+0x7dc>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d11c      	bne.n	8004ea0 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004e66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d116      	bne.n	8004ea0 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a16      	ldr	r2, [pc, #88]	; (8004ed0 <HAL_ADC_ConfigChannel+0x7d8>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d011      	beq.n	8004ea0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004e80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e84:	4619      	mov	r1, r3
 8004e86:	480c      	ldr	r0, [pc, #48]	; (8004eb8 <HAL_ADC_ConfigChannel+0x7c0>)
 8004e88:	f7fe fd99 	bl	80039be <LL_ADC_SetCommonPathInternalCh>
 8004e8c:	e008      	b.n	8004ea0 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e92:	f043 0220 	orr.w	r2, r3, #32
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004ea8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	37d8      	adds	r7, #216	; 0xd8
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	80080000 	.word	0x80080000
 8004eb8:	50000300 	.word	0x50000300
 8004ebc:	c3210000 	.word	0xc3210000
 8004ec0:	90c00010 	.word	0x90c00010
 8004ec4:	200002d8 	.word	0x200002d8
 8004ec8:	053e2d63 	.word	0x053e2d63
 8004ecc:	c7520000 	.word	0xc7520000
 8004ed0:	50000100 	.word	0x50000100
 8004ed4:	cb840000 	.word	0xcb840000

08004ed8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7fe ff4d 	bl	8003d84 <LL_ADC_IsEnabled>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d14d      	bne.n	8004f8c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	689a      	ldr	r2, [r3, #8]
 8004ef6:	4b28      	ldr	r3, [pc, #160]	; (8004f98 <ADC_Enable+0xc0>)
 8004ef8:	4013      	ands	r3, r2
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00d      	beq.n	8004f1a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f02:	f043 0210 	orr.w	r2, r3, #16
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f0e:	f043 0201 	orr.w	r2, r3, #1
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e039      	b.n	8004f8e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7fe ff1c 	bl	8003d5c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004f24:	f7fe fd0a 	bl	800393c <HAL_GetTick>
 8004f28:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f2a:	e028      	b.n	8004f7e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4618      	mov	r0, r3
 8004f32:	f7fe ff27 	bl	8003d84 <LL_ADC_IsEnabled>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d104      	bne.n	8004f46 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4618      	mov	r0, r3
 8004f42:	f7fe ff0b 	bl	8003d5c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004f46:	f7fe fcf9 	bl	800393c <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d914      	bls.n	8004f7e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d00d      	beq.n	8004f7e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f66:	f043 0210 	orr.w	r2, r3, #16
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f72:	f043 0201 	orr.w	r2, r3, #1
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e007      	b.n	8004f8e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d1cf      	bne.n	8004f2c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	8000003f 	.word	0x8000003f

08004f9c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fae:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d14b      	bne.n	800504e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0308 	and.w	r3, r3, #8
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d021      	beq.n	8005014 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7fe fdb1 	bl	8003b3c <LL_ADC_REG_IsTriggerSourceSWStart>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d032      	beq.n	8005046 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d12b      	bne.n	8005046 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ff2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ffe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d11f      	bne.n	8005046 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800500a:	f043 0201 	orr.w	r2, r3, #1
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	65da      	str	r2, [r3, #92]	; 0x5c
 8005012:	e018      	b.n	8005046 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	f003 0302 	and.w	r3, r3, #2
 800501e:	2b00      	cmp	r3, #0
 8005020:	d111      	bne.n	8005046 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005026:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005032:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d105      	bne.n	8005046 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800503e:	f043 0201 	orr.w	r2, r3, #1
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005046:	68f8      	ldr	r0, [r7, #12]
 8005048:	f7fc f90c 	bl	8001264 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800504c:	e00e      	b.n	800506c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005052:	f003 0310 	and.w	r3, r3, #16
 8005056:	2b00      	cmp	r3, #0
 8005058:	d003      	beq.n	8005062 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f7ff fb42 	bl	80046e4 <HAL_ADC_ErrorCallback>
}
 8005060:	e004      	b.n	800506c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	4798      	blx	r3
}
 800506c:	bf00      	nop
 800506e:	3710      	adds	r7, #16
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005080:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	f7fc fea0 	bl	8001dc8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005088:	bf00      	nop
 800508a:	3710      	adds	r7, #16
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ae:	f043 0204 	orr.w	r2, r3, #4
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80050b6:	68f8      	ldr	r0, [r7, #12]
 80050b8:	f7ff fb14 	bl	80046e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80050bc:	bf00      	nop
 80050be:	3710      	adds	r7, #16
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <LL_ADC_IsEnabled>:
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	f003 0301 	and.w	r3, r3, #1
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d101      	bne.n	80050dc <LL_ADC_IsEnabled+0x18>
 80050d8:	2301      	movs	r3, #1
 80050da:	e000      	b.n	80050de <LL_ADC_IsEnabled+0x1a>
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	370c      	adds	r7, #12
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr

080050ea <LL_ADC_REG_IsConversionOngoing>:
{
 80050ea:	b480      	push	{r7}
 80050ec:	b083      	sub	sp, #12
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	f003 0304 	and.w	r3, r3, #4
 80050fa:	2b04      	cmp	r3, #4
 80050fc:	d101      	bne.n	8005102 <LL_ADC_REG_IsConversionOngoing+0x18>
 80050fe:	2301      	movs	r3, #1
 8005100:	e000      	b.n	8005104 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005102:	2300      	movs	r3, #0
}
 8005104:	4618      	mov	r0, r3
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005118:	bf00      	nop
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800512c:	bf00      	nop
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005140:	bf00      	nop
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005168:	bf00      	nop
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005174:	b590      	push	{r4, r7, lr}
 8005176:	b0a1      	sub	sp, #132	; 0x84
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800517e:	2300      	movs	r3, #0
 8005180:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800518a:	2b01      	cmp	r3, #1
 800518c:	d101      	bne.n	8005192 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800518e:	2302      	movs	r3, #2
 8005190:	e08b      	b.n	80052aa <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2201      	movs	r2, #1
 8005196:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800519a:	2300      	movs	r3, #0
 800519c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800519e:	2300      	movs	r3, #0
 80051a0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051aa:	d102      	bne.n	80051b2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80051ac:	4b41      	ldr	r3, [pc, #260]	; (80052b4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80051ae:	60bb      	str	r3, [r7, #8]
 80051b0:	e001      	b.n	80051b6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80051b2:	2300      	movs	r3, #0
 80051b4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d10b      	bne.n	80051d4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051c0:	f043 0220 	orr.w	r2, r3, #32
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e06a      	b.n	80052aa <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f7ff ff87 	bl	80050ea <LL_ADC_REG_IsConversionOngoing>
 80051dc:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7ff ff81 	bl	80050ea <LL_ADC_REG_IsConversionOngoing>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d14c      	bne.n	8005288 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80051ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d149      	bne.n	8005288 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80051f4:	4b30      	ldr	r3, [pc, #192]	; (80052b8 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80051f6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d028      	beq.n	8005252 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005200:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	6859      	ldr	r1, [r3, #4]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005212:	035b      	lsls	r3, r3, #13
 8005214:	430b      	orrs	r3, r1
 8005216:	431a      	orrs	r2, r3
 8005218:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800521a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800521c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005220:	f7ff ff50 	bl	80050c4 <LL_ADC_IsEnabled>
 8005224:	4604      	mov	r4, r0
 8005226:	4823      	ldr	r0, [pc, #140]	; (80052b4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005228:	f7ff ff4c 	bl	80050c4 <LL_ADC_IsEnabled>
 800522c:	4603      	mov	r3, r0
 800522e:	4323      	orrs	r3, r4
 8005230:	2b00      	cmp	r3, #0
 8005232:	d133      	bne.n	800529c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005234:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800523c:	f023 030f 	bic.w	r3, r3, #15
 8005240:	683a      	ldr	r2, [r7, #0]
 8005242:	6811      	ldr	r1, [r2, #0]
 8005244:	683a      	ldr	r2, [r7, #0]
 8005246:	6892      	ldr	r2, [r2, #8]
 8005248:	430a      	orrs	r2, r1
 800524a:	431a      	orrs	r2, r3
 800524c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800524e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005250:	e024      	b.n	800529c <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005252:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800525a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800525c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800525e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005262:	f7ff ff2f 	bl	80050c4 <LL_ADC_IsEnabled>
 8005266:	4604      	mov	r4, r0
 8005268:	4812      	ldr	r0, [pc, #72]	; (80052b4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800526a:	f7ff ff2b 	bl	80050c4 <LL_ADC_IsEnabled>
 800526e:	4603      	mov	r3, r0
 8005270:	4323      	orrs	r3, r4
 8005272:	2b00      	cmp	r3, #0
 8005274:	d112      	bne.n	800529c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005276:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800527e:	f023 030f 	bic.w	r3, r3, #15
 8005282:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005284:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005286:	e009      	b.n	800529c <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800528c:	f043 0220 	orr.w	r2, r3, #32
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800529a:	e000      	b.n	800529e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800529c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80052a6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3784      	adds	r7, #132	; 0x84
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd90      	pop	{r4, r7, pc}
 80052b2:	bf00      	nop
 80052b4:	50000100 	.word	0x50000100
 80052b8:	50000300 	.word	0x50000300

080052bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f003 0307 	and.w	r3, r3, #7
 80052ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80052cc:	4b0c      	ldr	r3, [pc, #48]	; (8005300 <__NVIC_SetPriorityGrouping+0x44>)
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80052d2:	68ba      	ldr	r2, [r7, #8]
 80052d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80052d8:	4013      	ands	r3, r2
 80052da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80052e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80052e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80052ee:	4a04      	ldr	r2, [pc, #16]	; (8005300 <__NVIC_SetPriorityGrouping+0x44>)
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	60d3      	str	r3, [r2, #12]
}
 80052f4:	bf00      	nop
 80052f6:	3714      	adds	r7, #20
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr
 8005300:	e000ed00 	.word	0xe000ed00

08005304 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005304:	b480      	push	{r7}
 8005306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005308:	4b04      	ldr	r3, [pc, #16]	; (800531c <__NVIC_GetPriorityGrouping+0x18>)
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	0a1b      	lsrs	r3, r3, #8
 800530e:	f003 0307 	and.w	r3, r3, #7
}
 8005312:	4618      	mov	r0, r3
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr
 800531c:	e000ed00 	.word	0xe000ed00

08005320 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	4603      	mov	r3, r0
 8005328:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800532a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800532e:	2b00      	cmp	r3, #0
 8005330:	db0b      	blt.n	800534a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005332:	79fb      	ldrb	r3, [r7, #7]
 8005334:	f003 021f 	and.w	r2, r3, #31
 8005338:	4907      	ldr	r1, [pc, #28]	; (8005358 <__NVIC_EnableIRQ+0x38>)
 800533a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800533e:	095b      	lsrs	r3, r3, #5
 8005340:	2001      	movs	r0, #1
 8005342:	fa00 f202 	lsl.w	r2, r0, r2
 8005346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800534a:	bf00      	nop
 800534c:	370c      	adds	r7, #12
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	e000e100 	.word	0xe000e100

0800535c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	4603      	mov	r3, r0
 8005364:	6039      	str	r1, [r7, #0]
 8005366:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800536c:	2b00      	cmp	r3, #0
 800536e:	db0a      	blt.n	8005386 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	b2da      	uxtb	r2, r3
 8005374:	490c      	ldr	r1, [pc, #48]	; (80053a8 <__NVIC_SetPriority+0x4c>)
 8005376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800537a:	0112      	lsls	r2, r2, #4
 800537c:	b2d2      	uxtb	r2, r2
 800537e:	440b      	add	r3, r1
 8005380:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005384:	e00a      	b.n	800539c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	b2da      	uxtb	r2, r3
 800538a:	4908      	ldr	r1, [pc, #32]	; (80053ac <__NVIC_SetPriority+0x50>)
 800538c:	79fb      	ldrb	r3, [r7, #7]
 800538e:	f003 030f 	and.w	r3, r3, #15
 8005392:	3b04      	subs	r3, #4
 8005394:	0112      	lsls	r2, r2, #4
 8005396:	b2d2      	uxtb	r2, r2
 8005398:	440b      	add	r3, r1
 800539a:	761a      	strb	r2, [r3, #24]
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr
 80053a8:	e000e100 	.word	0xe000e100
 80053ac:	e000ed00 	.word	0xe000ed00

080053b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b089      	sub	sp, #36	; 0x24
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f003 0307 	and.w	r3, r3, #7
 80053c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	f1c3 0307 	rsb	r3, r3, #7
 80053ca:	2b04      	cmp	r3, #4
 80053cc:	bf28      	it	cs
 80053ce:	2304      	movcs	r3, #4
 80053d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	3304      	adds	r3, #4
 80053d6:	2b06      	cmp	r3, #6
 80053d8:	d902      	bls.n	80053e0 <NVIC_EncodePriority+0x30>
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	3b03      	subs	r3, #3
 80053de:	e000      	b.n	80053e2 <NVIC_EncodePriority+0x32>
 80053e0:	2300      	movs	r3, #0
 80053e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053e4:	f04f 32ff 	mov.w	r2, #4294967295
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	fa02 f303 	lsl.w	r3, r2, r3
 80053ee:	43da      	mvns	r2, r3
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	401a      	ands	r2, r3
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80053f8:	f04f 31ff 	mov.w	r1, #4294967295
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005402:	43d9      	mvns	r1, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005408:	4313      	orrs	r3, r2
         );
}
 800540a:	4618      	mov	r0, r3
 800540c:	3724      	adds	r7, #36	; 0x24
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr

08005416 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005416:	b580      	push	{r7, lr}
 8005418:	b082      	sub	sp, #8
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f7ff ff4c 	bl	80052bc <__NVIC_SetPriorityGrouping>
}
 8005424:	bf00      	nop
 8005426:	3708      	adds	r7, #8
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b086      	sub	sp, #24
 8005430:	af00      	add	r7, sp, #0
 8005432:	4603      	mov	r3, r0
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	607a      	str	r2, [r7, #4]
 8005438:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800543a:	f7ff ff63 	bl	8005304 <__NVIC_GetPriorityGrouping>
 800543e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	68b9      	ldr	r1, [r7, #8]
 8005444:	6978      	ldr	r0, [r7, #20]
 8005446:	f7ff ffb3 	bl	80053b0 <NVIC_EncodePriority>
 800544a:	4602      	mov	r2, r0
 800544c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005450:	4611      	mov	r1, r2
 8005452:	4618      	mov	r0, r3
 8005454:	f7ff ff82 	bl	800535c <__NVIC_SetPriority>
}
 8005458:	bf00      	nop
 800545a:	3718      	adds	r7, #24
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	4603      	mov	r3, r0
 8005468:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800546a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800546e:	4618      	mov	r0, r3
 8005470:	f7ff ff56 	bl	8005320 <__NVIC_EnableIRQ>
}
 8005474:	bf00      	nop
 8005476:	3708      	adds	r7, #8
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b082      	sub	sp, #8
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d101      	bne.n	800548e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e014      	b.n	80054b8 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	791b      	ldrb	r3, [r3, #4]
 8005492:	b2db      	uxtb	r3, r3
 8005494:	2b00      	cmp	r3, #0
 8005496:	d105      	bne.n	80054a4 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f7fd f9b6 	bl	8002810 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2202      	movs	r2, #2
 80054a8:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3708      	adds	r7, #8
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	795b      	ldrb	r3, [r3, #5]
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d101      	bne.n	80054d6 <HAL_DAC_Start+0x16>
 80054d2:	2302      	movs	r3, #2
 80054d4:	e043      	b.n	800555e <HAL_DAC_Start+0x9e>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2201      	movs	r2, #1
 80054da:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2202      	movs	r2, #2
 80054e0:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	6819      	ldr	r1, [r3, #0]
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	f003 0310 	and.w	r3, r3, #16
 80054ee:	2201      	movs	r2, #1
 80054f0:	409a      	lsls	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	430a      	orrs	r2, r1
 80054f8:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 80054fa:	2001      	movs	r0, #1
 80054fc:	f7fe fa2a 	bl	8003954 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d10f      	bne.n	8005526 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8005510:	2b02      	cmp	r3, #2
 8005512:	d11d      	bne.n	8005550 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	685a      	ldr	r2, [r3, #4]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f042 0201 	orr.w	r2, r2, #1
 8005522:	605a      	str	r2, [r3, #4]
 8005524:	e014      	b.n	8005550 <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	f003 0310 	and.w	r3, r3, #16
 8005536:	2102      	movs	r1, #2
 8005538:	fa01 f303 	lsl.w	r3, r1, r3
 800553c:	429a      	cmp	r2, r3
 800553e:	d107      	bne.n	8005550 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	685a      	ldr	r2, [r3, #4]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f042 0202 	orr.w	r2, r2, #2
 800554e:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	3708      	adds	r7, #8
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005566:	b480      	push	{r7}
 8005568:	b087      	sub	sp, #28
 800556a:	af00      	add	r7, sp, #0
 800556c:	60f8      	str	r0, [r7, #12]
 800556e:	60b9      	str	r1, [r7, #8]
 8005570:	607a      	str	r2, [r7, #4]
 8005572:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005574:	2300      	movs	r3, #0
 8005576:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d105      	bne.n	8005596 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800558a:	697a      	ldr	r2, [r7, #20]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4413      	add	r3, r2
 8005590:	3308      	adds	r3, #8
 8005592:	617b      	str	r3, [r7, #20]
 8005594:	e004      	b.n	80055a0 <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4413      	add	r3, r2
 800559c:	3314      	adds	r3, #20
 800559e:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	461a      	mov	r2, r3
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	371c      	adds	r7, #28
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
	...

080055b8 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b08a      	sub	sp, #40	; 0x28
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	795b      	ldrb	r3, [r3, #5]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d101      	bne.n	80055d0 <HAL_DAC_ConfigChannel+0x18>
 80055cc:	2302      	movs	r3, #2
 80055ce:	e192      	b.n	80058f6 <HAL_DAC_ConfigChannel+0x33e>
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2201      	movs	r2, #1
 80055d4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2202      	movs	r2, #2
 80055da:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	2b04      	cmp	r3, #4
 80055e2:	d174      	bne.n	80056ce <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80055e4:	f7fe f9aa 	bl	800393c <HAL_GetTick>
 80055e8:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d134      	bne.n	800565a <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80055f0:	e011      	b.n	8005616 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80055f2:	f7fe f9a3 	bl	800393c <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d90a      	bls.n	8005616 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	f043 0208 	orr.w	r2, r3, #8
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2203      	movs	r2, #3
 8005610:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e16f      	b.n	80058f6 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800561c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d1e6      	bne.n	80055f2 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8005624:	2001      	movs	r0, #1
 8005626:	f7fe f995 	bl	8003954 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005632:	641a      	str	r2, [r3, #64]	; 0x40
 8005634:	e01e      	b.n	8005674 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005636:	f7fe f981 	bl	800393c <HAL_GetTick>
 800563a:	4602      	mov	r2, r0
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	2b01      	cmp	r3, #1
 8005642:	d90a      	bls.n	800565a <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	f043 0208 	orr.w	r2, r3, #8
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2203      	movs	r2, #3
 8005654:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e14d      	b.n	80058f6 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005660:	2b00      	cmp	r3, #0
 8005662:	dbe8      	blt.n	8005636 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8005664:	2001      	movs	r0, #1
 8005666:	f7fe f975 	bl	8003954 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68ba      	ldr	r2, [r7, #8]
 8005670:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005672:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f003 0310 	and.w	r3, r3, #16
 8005680:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005684:	fa01 f303 	lsl.w	r3, r1, r3
 8005688:	43db      	mvns	r3, r3
 800568a:	ea02 0103 	and.w	r1, r2, r3
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f003 0310 	and.w	r3, r3, #16
 8005698:	409a      	lsls	r2, r3
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	430a      	orrs	r2, r1
 80056a0:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f003 0310 	and.w	r3, r3, #16
 80056ae:	21ff      	movs	r1, #255	; 0xff
 80056b0:	fa01 f303 	lsl.w	r3, r1, r3
 80056b4:	43db      	mvns	r3, r3
 80056b6:	ea02 0103 	and.w	r1, r2, r3
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f003 0310 	and.w	r3, r3, #16
 80056c4:	409a      	lsls	r2, r3
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	430a      	orrs	r2, r1
 80056cc:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	69db      	ldr	r3, [r3, #28]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d11d      	bne.n	8005712 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056dc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f003 0310 	and.w	r3, r3, #16
 80056e4:	221f      	movs	r2, #31
 80056e6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ea:	43db      	mvns	r3, r3
 80056ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056ee:	4013      	ands	r3, r2
 80056f0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f003 0310 	and.w	r3, r3, #16
 80056fe:	69ba      	ldr	r2, [r7, #24]
 8005700:	fa02 f303 	lsl.w	r3, r2, r3
 8005704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005706:	4313      	orrs	r3, r2
 8005708:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005710:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005718:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f003 0310 	and.w	r3, r3, #16
 8005720:	2207      	movs	r2, #7
 8005722:	fa02 f303 	lsl.w	r3, r2, r3
 8005726:	43db      	mvns	r3, r3
 8005728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800572a:	4013      	ands	r3, r2
 800572c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	2b01      	cmp	r3, #1
 8005734:	d102      	bne.n	800573c <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8005736:	2300      	movs	r3, #0
 8005738:	623b      	str	r3, [r7, #32]
 800573a:	e00f      	b.n	800575c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	699b      	ldr	r3, [r3, #24]
 8005740:	2b02      	cmp	r3, #2
 8005742:	d102      	bne.n	800574a <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005744:	2301      	movs	r3, #1
 8005746:	623b      	str	r3, [r7, #32]
 8005748:	e008      	b.n	800575c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	695b      	ldr	r3, [r3, #20]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d102      	bne.n	8005758 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005752:	2301      	movs	r3, #1
 8005754:	623b      	str	r3, [r7, #32]
 8005756:	e001      	b.n	800575c <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005758:	2300      	movs	r3, #0
 800575a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	689a      	ldr	r2, [r3, #8]
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	695b      	ldr	r3, [r3, #20]
 8005764:	4313      	orrs	r3, r2
 8005766:	6a3a      	ldr	r2, [r7, #32]
 8005768:	4313      	orrs	r3, r2
 800576a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f003 0310 	and.w	r3, r3, #16
 8005772:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005776:	fa02 f303 	lsl.w	r3, r2, r3
 800577a:	43db      	mvns	r3, r3
 800577c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800577e:	4013      	ands	r3, r2
 8005780:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	791b      	ldrb	r3, [r3, #4]
 8005786:	2b01      	cmp	r3, #1
 8005788:	d102      	bne.n	8005790 <HAL_DAC_ConfigChannel+0x1d8>
 800578a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800578e:	e000      	b.n	8005792 <HAL_DAC_ConfigChannel+0x1da>
 8005790:	2300      	movs	r3, #0
 8005792:	69ba      	ldr	r2, [r7, #24]
 8005794:	4313      	orrs	r3, r2
 8005796:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f003 0310 	and.w	r3, r3, #16
 800579e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057a2:	fa02 f303 	lsl.w	r3, r2, r3
 80057a6:	43db      	mvns	r3, r3
 80057a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057aa:	4013      	ands	r3, r2
 80057ac:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	795b      	ldrb	r3, [r3, #5]
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d102      	bne.n	80057bc <HAL_DAC_ConfigChannel+0x204>
 80057b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057ba:	e000      	b.n	80057be <HAL_DAC_ConfigChannel+0x206>
 80057bc:	2300      	movs	r3, #0
 80057be:	69ba      	ldr	r2, [r7, #24]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80057c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80057ca:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	d114      	bne.n	80057fe <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80057d4:	f002 f90c 	bl	80079f0 <HAL_RCC_GetHCLKFreq>
 80057d8:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	4a48      	ldr	r2, [pc, #288]	; (8005900 <HAL_DAC_ConfigChannel+0x348>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d904      	bls.n	80057ec <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80057e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057e8:	627b      	str	r3, [r7, #36]	; 0x24
 80057ea:	e00f      	b.n	800580c <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	4a45      	ldr	r2, [pc, #276]	; (8005904 <HAL_DAC_ConfigChannel+0x34c>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d90a      	bls.n	800580a <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80057f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80057fa:	627b      	str	r3, [r7, #36]	; 0x24
 80057fc:	e006      	b.n	800580c <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005804:	4313      	orrs	r3, r2
 8005806:	627b      	str	r3, [r7, #36]	; 0x24
 8005808:	e000      	b.n	800580c <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800580a:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f003 0310 	and.w	r3, r3, #16
 8005812:	69ba      	ldr	r2, [r7, #24]
 8005814:	fa02 f303 	lsl.w	r3, r2, r3
 8005818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800581a:	4313      	orrs	r3, r2
 800581c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005824:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	6819      	ldr	r1, [r3, #0]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f003 0310 	and.w	r3, r3, #16
 8005832:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005836:	fa02 f303 	lsl.w	r3, r2, r3
 800583a:	43da      	mvns	r2, r3
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	400a      	ands	r2, r1
 8005842:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f003 0310 	and.w	r3, r3, #16
 8005852:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005856:	fa02 f303 	lsl.w	r3, r2, r3
 800585a:	43db      	mvns	r3, r3
 800585c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800585e:	4013      	ands	r3, r2
 8005860:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f003 0310 	and.w	r3, r3, #16
 800586e:	69ba      	ldr	r2, [r7, #24]
 8005870:	fa02 f303 	lsl.w	r3, r2, r3
 8005874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005876:	4313      	orrs	r3, r2
 8005878:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005880:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	6819      	ldr	r1, [r3, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f003 0310 	and.w	r3, r3, #16
 800588e:	22c0      	movs	r2, #192	; 0xc0
 8005890:	fa02 f303 	lsl.w	r3, r2, r3
 8005894:	43da      	mvns	r2, r3
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	400a      	ands	r2, r1
 800589c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	089b      	lsrs	r3, r3, #2
 80058a4:	f003 030f 	and.w	r3, r3, #15
 80058a8:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	089b      	lsrs	r3, r3, #2
 80058b0:	021b      	lsls	r3, r3, #8
 80058b2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80058b6:	69ba      	ldr	r2, [r7, #24]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f003 0310 	and.w	r3, r3, #16
 80058c8:	f640 710f 	movw	r1, #3855	; 0xf0f
 80058cc:	fa01 f303 	lsl.w	r3, r1, r3
 80058d0:	43db      	mvns	r3, r3
 80058d2:	ea02 0103 	and.w	r1, r2, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f003 0310 	and.w	r3, r3, #16
 80058dc:	69ba      	ldr	r2, [r7, #24]
 80058de:	409a      	lsls	r2, r3
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	430a      	orrs	r2, r1
 80058e6:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2201      	movs	r2, #1
 80058ec:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3728      	adds	r7, #40	; 0x28
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	09896800 	.word	0x09896800
 8005904:	04c4b400 	.word	0x04c4b400

08005908 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d101      	bne.n	800591a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e08d      	b.n	8005a36 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	461a      	mov	r2, r3
 8005920:	4b47      	ldr	r3, [pc, #284]	; (8005a40 <HAL_DMA_Init+0x138>)
 8005922:	429a      	cmp	r2, r3
 8005924:	d80f      	bhi.n	8005946 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	461a      	mov	r2, r3
 800592c:	4b45      	ldr	r3, [pc, #276]	; (8005a44 <HAL_DMA_Init+0x13c>)
 800592e:	4413      	add	r3, r2
 8005930:	4a45      	ldr	r2, [pc, #276]	; (8005a48 <HAL_DMA_Init+0x140>)
 8005932:	fba2 2303 	umull	r2, r3, r2, r3
 8005936:	091b      	lsrs	r3, r3, #4
 8005938:	009a      	lsls	r2, r3, #2
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a42      	ldr	r2, [pc, #264]	; (8005a4c <HAL_DMA_Init+0x144>)
 8005942:	641a      	str	r2, [r3, #64]	; 0x40
 8005944:	e00e      	b.n	8005964 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	461a      	mov	r2, r3
 800594c:	4b40      	ldr	r3, [pc, #256]	; (8005a50 <HAL_DMA_Init+0x148>)
 800594e:	4413      	add	r3, r2
 8005950:	4a3d      	ldr	r2, [pc, #244]	; (8005a48 <HAL_DMA_Init+0x140>)
 8005952:	fba2 2303 	umull	r2, r3, r2, r3
 8005956:	091b      	lsrs	r3, r3, #4
 8005958:	009a      	lsls	r2, r3, #2
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a3c      	ldr	r2, [pc, #240]	; (8005a54 <HAL_DMA_Init+0x14c>)
 8005962:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2202      	movs	r2, #2
 8005968:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800597a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800597e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005988:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005994:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a1b      	ldr	r3, [r3, #32]
 80059a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 fa76 	bl	8005ea8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059c4:	d102      	bne.n	80059cc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	685a      	ldr	r2, [r3, #4]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059d4:	b2d2      	uxtb	r2, r2
 80059d6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80059e0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d010      	beq.n	8005a0c <HAL_DMA_Init+0x104>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	2b04      	cmp	r3, #4
 80059f0:	d80c      	bhi.n	8005a0c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 fa96 	bl	8005f24 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059fc:	2200      	movs	r2, #0
 80059fe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005a08:	605a      	str	r2, [r3, #4]
 8005a0a:	e008      	b.n	8005a1e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3710      	adds	r7, #16
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	40020407 	.word	0x40020407
 8005a44:	bffdfff8 	.word	0xbffdfff8
 8005a48:	cccccccd 	.word	0xcccccccd
 8005a4c:	40020000 	.word	0x40020000
 8005a50:	bffdfbf8 	.word	0xbffdfbf8
 8005a54:	40020400 	.word	0x40020400

08005a58 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b086      	sub	sp, #24
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	607a      	str	r2, [r7, #4]
 8005a64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a66:	2300      	movs	r3, #0
 8005a68:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d101      	bne.n	8005a78 <HAL_DMA_Start_IT+0x20>
 8005a74:	2302      	movs	r3, #2
 8005a76:	e066      	b.n	8005b46 <HAL_DMA_Start_IT+0xee>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d155      	bne.n	8005b38 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2202      	movs	r2, #2
 8005a90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2200      	movs	r2, #0
 8005a98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f022 0201 	bic.w	r2, r2, #1
 8005aa8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	68b9      	ldr	r1, [r7, #8]
 8005ab0:	68f8      	ldr	r0, [r7, #12]
 8005ab2:	f000 f9bb 	bl	8005e2c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d008      	beq.n	8005ad0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f042 020e 	orr.w	r2, r2, #14
 8005acc:	601a      	str	r2, [r3, #0]
 8005ace:	e00f      	b.n	8005af0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f022 0204 	bic.w	r2, r2, #4
 8005ade:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f042 020a 	orr.w	r2, r2, #10
 8005aee:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d007      	beq.n	8005b0e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b0c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d007      	beq.n	8005b26 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b24:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f042 0201 	orr.w	r2, r2, #1
 8005b34:	601a      	str	r2, [r3, #0]
 8005b36:	e005      	b.n	8005b44 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005b40:	2302      	movs	r3, #2
 8005b42:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005b44:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3718      	adds	r7, #24
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	b085      	sub	sp, #20
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b56:	2300      	movs	r3, #0
 8005b58:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	2b02      	cmp	r3, #2
 8005b64:	d005      	beq.n	8005b72 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2204      	movs	r2, #4
 8005b6a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	73fb      	strb	r3, [r7, #15]
 8005b70:	e037      	b.n	8005be2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f022 020e 	bic.w	r2, r2, #14
 8005b80:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b90:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f022 0201 	bic.w	r2, r2, #1
 8005ba0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ba6:	f003 021f 	and.w	r2, r3, #31
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bae:	2101      	movs	r1, #1
 8005bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8005bb4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005bbe:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00c      	beq.n	8005be2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005bd6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005be0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2201      	movs	r2, #1
 8005be6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8005bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3714      	adds	r7, #20
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	d00d      	beq.n	8005c34 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2204      	movs	r2, #4
 8005c1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2201      	movs	r2, #1
 8005c22:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	73fb      	strb	r3, [r7, #15]
 8005c32:	e047      	b.n	8005cc4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f022 020e 	bic.w	r2, r2, #14
 8005c42:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f022 0201 	bic.w	r2, r2, #1
 8005c52:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c68:	f003 021f 	and.w	r2, r3, #31
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c70:	2101      	movs	r1, #1
 8005c72:	fa01 f202 	lsl.w	r2, r1, r2
 8005c76:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005c80:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00c      	beq.n	8005ca4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c98:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005ca2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d003      	beq.n	8005cc4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	4798      	blx	r3
    }
  }
  return status;
 8005cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3710      	adds	r7, #16
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}

08005cce <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005cce:	b580      	push	{r7, lr}
 8005cd0:	b084      	sub	sp, #16
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cea:	f003 031f 	and.w	r3, r3, #31
 8005cee:	2204      	movs	r2, #4
 8005cf0:	409a      	lsls	r2, r3
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d026      	beq.n	8005d48 <HAL_DMA_IRQHandler+0x7a>
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	f003 0304 	and.w	r3, r3, #4
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d021      	beq.n	8005d48 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 0320 	and.w	r3, r3, #32
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d107      	bne.n	8005d22 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f022 0204 	bic.w	r2, r2, #4
 8005d20:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d26:	f003 021f 	and.w	r2, r3, #31
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2e:	2104      	movs	r1, #4
 8005d30:	fa01 f202 	lsl.w	r2, r1, r2
 8005d34:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d071      	beq.n	8005e22 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005d46:	e06c      	b.n	8005e22 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d4c:	f003 031f 	and.w	r3, r3, #31
 8005d50:	2202      	movs	r2, #2
 8005d52:	409a      	lsls	r2, r3
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	4013      	ands	r3, r2
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d02e      	beq.n	8005dba <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	f003 0302 	and.w	r3, r3, #2
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d029      	beq.n	8005dba <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 0320 	and.w	r3, r3, #32
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d10b      	bne.n	8005d8c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f022 020a 	bic.w	r2, r2, #10
 8005d82:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d90:	f003 021f 	and.w	r2, r3, #31
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d98:	2102      	movs	r1, #2
 8005d9a:	fa01 f202 	lsl.w	r2, r1, r2
 8005d9e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d038      	beq.n	8005e22 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005db8:	e033      	b.n	8005e22 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dbe:	f003 031f 	and.w	r3, r3, #31
 8005dc2:	2208      	movs	r2, #8
 8005dc4:	409a      	lsls	r2, r3
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	4013      	ands	r3, r2
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d02a      	beq.n	8005e24 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	f003 0308 	and.w	r3, r3, #8
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d025      	beq.n	8005e24 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f022 020e 	bic.w	r2, r2, #14
 8005de6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dec:	f003 021f 	and.w	r2, r3, #31
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df4:	2101      	movs	r1, #1
 8005df6:	fa01 f202 	lsl.w	r2, r1, r2
 8005dfa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2201      	movs	r2, #1
 8005e06:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d004      	beq.n	8005e24 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005e22:	bf00      	nop
 8005e24:	bf00      	nop
}
 8005e26:	3710      	adds	r7, #16
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b085      	sub	sp, #20
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	607a      	str	r2, [r7, #4]
 8005e38:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005e42:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d004      	beq.n	8005e56 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005e54:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e5a:	f003 021f 	and.w	r2, r3, #31
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e62:	2101      	movs	r1, #1
 8005e64:	fa01 f202 	lsl.w	r2, r1, r2
 8005e68:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	683a      	ldr	r2, [r7, #0]
 8005e70:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	2b10      	cmp	r3, #16
 8005e78:	d108      	bne.n	8005e8c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68ba      	ldr	r2, [r7, #8]
 8005e88:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005e8a:	e007      	b.n	8005e9c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68ba      	ldr	r2, [r7, #8]
 8005e92:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	60da      	str	r2, [r3, #12]
}
 8005e9c:	bf00      	nop
 8005e9e:	3714      	adds	r7, #20
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b087      	sub	sp, #28
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	4b16      	ldr	r3, [pc, #88]	; (8005f10 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d802      	bhi.n	8005ec2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005ebc:	4b15      	ldr	r3, [pc, #84]	; (8005f14 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005ebe:	617b      	str	r3, [r7, #20]
 8005ec0:	e001      	b.n	8005ec6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8005ec2:	4b15      	ldr	r3, [pc, #84]	; (8005f18 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005ec4:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	3b08      	subs	r3, #8
 8005ed2:	4a12      	ldr	r2, [pc, #72]	; (8005f1c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ed8:	091b      	lsrs	r3, r3, #4
 8005eda:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ee0:	089b      	lsrs	r3, r3, #2
 8005ee2:	009a      	lsls	r2, r3, #2
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	461a      	mov	r2, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a0b      	ldr	r2, [pc, #44]	; (8005f20 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005ef2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f003 031f 	and.w	r3, r3, #31
 8005efa:	2201      	movs	r2, #1
 8005efc:	409a      	lsls	r2, r3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005f02:	bf00      	nop
 8005f04:	371c      	adds	r7, #28
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	40020407 	.word	0x40020407
 8005f14:	40020800 	.word	0x40020800
 8005f18:	40020820 	.word	0x40020820
 8005f1c:	cccccccd 	.word	0xcccccccd
 8005f20:	40020880 	.word	0x40020880

08005f24 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b085      	sub	sp, #20
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	4b0b      	ldr	r3, [pc, #44]	; (8005f64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005f38:	4413      	add	r3, r2
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a08      	ldr	r2, [pc, #32]	; (8005f68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005f46:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	f003 031f 	and.w	r3, r3, #31
 8005f50:	2201      	movs	r2, #1
 8005f52:	409a      	lsls	r2, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005f58:	bf00      	nop
 8005f5a:	3714      	adds	r7, #20
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr
 8005f64:	1000823f 	.word	0x1000823f
 8005f68:	40020940 	.word	0x40020940

08005f6c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d101      	bne.n	8005f7e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e147      	b.n	800620e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d106      	bne.n	8005f98 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7fc fd28 	bl	80029e8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	699a      	ldr	r2, [r3, #24]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f022 0210 	bic.w	r2, r2, #16
 8005fa6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005fa8:	f7fd fcc8 	bl	800393c <HAL_GetTick>
 8005fac:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005fae:	e012      	b.n	8005fd6 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005fb0:	f7fd fcc4 	bl	800393c <HAL_GetTick>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	2b0a      	cmp	r3, #10
 8005fbc:	d90b      	bls.n	8005fd6 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fc2:	f043 0201 	orr.w	r2, r3, #1
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2203      	movs	r2, #3
 8005fce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e11b      	b.n	800620e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	699b      	ldr	r3, [r3, #24]
 8005fdc:	f003 0308 	and.w	r3, r3, #8
 8005fe0:	2b08      	cmp	r3, #8
 8005fe2:	d0e5      	beq.n	8005fb0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	699a      	ldr	r2, [r3, #24]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f042 0201 	orr.w	r2, r2, #1
 8005ff2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ff4:	f7fd fca2 	bl	800393c <HAL_GetTick>
 8005ff8:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005ffa:	e012      	b.n	8006022 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005ffc:	f7fd fc9e 	bl	800393c <HAL_GetTick>
 8006000:	4602      	mov	r2, r0
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	2b0a      	cmp	r3, #10
 8006008:	d90b      	bls.n	8006022 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800600e:	f043 0201 	orr.w	r2, r3, #1
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2203      	movs	r2, #3
 800601a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e0f5      	b.n	800620e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	699b      	ldr	r3, [r3, #24]
 8006028:	f003 0301 	and.w	r3, r3, #1
 800602c:	2b00      	cmp	r3, #0
 800602e:	d0e5      	beq.n	8005ffc <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	699a      	ldr	r2, [r3, #24]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f042 0202 	orr.w	r2, r2, #2
 800603e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a74      	ldr	r2, [pc, #464]	; (8006218 <HAL_FDCAN_Init+0x2ac>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d103      	bne.n	8006052 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800604a:	4a74      	ldr	r2, [pc, #464]	; (800621c <HAL_FDCAN_Init+0x2b0>)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	7c1b      	ldrb	r3, [r3, #16]
 8006056:	2b01      	cmp	r3, #1
 8006058:	d108      	bne.n	800606c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	699a      	ldr	r2, [r3, #24]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006068:	619a      	str	r2, [r3, #24]
 800606a:	e007      	b.n	800607c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	699a      	ldr	r2, [r3, #24]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800607a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	7c5b      	ldrb	r3, [r3, #17]
 8006080:	2b01      	cmp	r3, #1
 8006082:	d108      	bne.n	8006096 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	699a      	ldr	r2, [r3, #24]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006092:	619a      	str	r2, [r3, #24]
 8006094:	e007      	b.n	80060a6 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	699a      	ldr	r2, [r3, #24]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80060a4:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	7c9b      	ldrb	r3, [r3, #18]
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d108      	bne.n	80060c0 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	699a      	ldr	r2, [r3, #24]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80060bc:	619a      	str	r2, [r3, #24]
 80060be:	e007      	b.n	80060d0 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	699a      	ldr	r2, [r3, #24]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80060ce:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	699b      	ldr	r3, [r3, #24]
 80060d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	689a      	ldr	r2, [r3, #8]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	430a      	orrs	r2, r1
 80060e4:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	699a      	ldr	r2, [r3, #24]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80060f4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	691a      	ldr	r2, [r3, #16]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f022 0210 	bic.w	r2, r2, #16
 8006104:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	2b01      	cmp	r3, #1
 800610c:	d108      	bne.n	8006120 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	699a      	ldr	r2, [r3, #24]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f042 0204 	orr.w	r2, r2, #4
 800611c:	619a      	str	r2, [r3, #24]
 800611e:	e02c      	b.n	800617a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d028      	beq.n	800617a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	2b02      	cmp	r3, #2
 800612e:	d01c      	beq.n	800616a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	699a      	ldr	r2, [r3, #24]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800613e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	691a      	ldr	r2, [r3, #16]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f042 0210 	orr.w	r2, r2, #16
 800614e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	2b03      	cmp	r3, #3
 8006156:	d110      	bne.n	800617a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	699a      	ldr	r2, [r3, #24]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f042 0220 	orr.w	r2, r2, #32
 8006166:	619a      	str	r2, [r3, #24]
 8006168:	e007      	b.n	800617a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	699a      	ldr	r2, [r3, #24]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f042 0220 	orr.w	r2, r2, #32
 8006178:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	699b      	ldr	r3, [r3, #24]
 800617e:	3b01      	subs	r3, #1
 8006180:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	69db      	ldr	r3, [r3, #28]
 8006186:	3b01      	subs	r3, #1
 8006188:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800618a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a1b      	ldr	r3, [r3, #32]
 8006190:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006192:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	695b      	ldr	r3, [r3, #20]
 800619a:	3b01      	subs	r3, #1
 800619c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80061a2:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80061a4:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061ae:	d115      	bne.n	80061dc <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ba:	3b01      	subs	r3, #1
 80061bc:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80061be:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c4:	3b01      	subs	r3, #1
 80061c6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80061c8:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d0:	3b01      	subs	r3, #1
 80061d2:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80061d8:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80061da:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	430a      	orrs	r2, r1
 80061ee:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 fbe2 	bl	80069bc <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3710      	adds	r7, #16
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	40006400 	.word	0x40006400
 800621c:	40006500 	.word	0x40006500

08006220 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800622e:	b2db      	uxtb	r3, r3
 8006230:	2b01      	cmp	r3, #1
 8006232:	d110      	bne.n	8006256 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2202      	movs	r2, #2
 8006238:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	699a      	ldr	r2, [r3, #24]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f022 0201 	bic.w	r2, r2, #1
 800624a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8006252:	2300      	movs	r3, #0
 8006254:	e006      	b.n	8006264 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800625a:	f043 0204 	orr.w	r2, r3, #4
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
  }
}
 8006264:	4618      	mov	r0, r3
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b086      	sub	sp, #24
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006282:	b2db      	uxtb	r3, r3
 8006284:	2b02      	cmp	r3, #2
 8006286:	d12c      	bne.n	80062e2 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8006290:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006294:	2b00      	cmp	r3, #0
 8006296:	d007      	beq.n	80062a8 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800629c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	e023      	b.n	80062f0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80062b0:	0c1b      	lsrs	r3, r3, #16
 80062b2:	f003 0303 	and.w	r3, r3, #3
 80062b6:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	68b9      	ldr	r1, [r7, #8]
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	f000 fbd2 	bl	8006a68 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2101      	movs	r1, #1
 80062ca:	697a      	ldr	r2, [r7, #20]
 80062cc:	fa01 f202 	lsl.w	r2, r1, r2
 80062d0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80062d4:	2201      	movs	r2, #1
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	409a      	lsls	r2, r3
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 80062de:	2300      	movs	r3, #0
 80062e0:	e006      	b.n	80062f0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062e6:	f043 0208 	orr.w	r2, r3, #8
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
  }
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3718      	adds	r7, #24
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b08b      	sub	sp, #44	; 0x2c
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	607a      	str	r2, [r7, #4]
 8006304:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800630c:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800630e:	7efb      	ldrb	r3, [r7, #27]
 8006310:	2b02      	cmp	r3, #2
 8006312:	f040 80bc 	bne.w	800648e <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	2b40      	cmp	r3, #64	; 0x40
 800631a:	d121      	bne.n	8006360 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006324:	f003 030f 	and.w	r3, r3, #15
 8006328:	2b00      	cmp	r3, #0
 800632a:	d107      	bne.n	800633c <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006330:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	e0af      	b.n	800649c <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006344:	0a1b      	lsrs	r3, r3, #8
 8006346:	f003 0303 	and.w	r3, r3, #3
 800634a:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8006350:	69fa      	ldr	r2, [r7, #28]
 8006352:	4613      	mov	r3, r2
 8006354:	00db      	lsls	r3, r3, #3
 8006356:	4413      	add	r3, r2
 8006358:	00db      	lsls	r3, r3, #3
 800635a:	440b      	add	r3, r1
 800635c:	627b      	str	r3, [r7, #36]	; 0x24
 800635e:	e020      	b.n	80063a2 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006368:	f003 030f 	and.w	r3, r3, #15
 800636c:	2b00      	cmp	r3, #0
 800636e:	d107      	bne.n	8006380 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006374:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	e08d      	b.n	800649c <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006388:	0a1b      	lsrs	r3, r3, #8
 800638a:	f003 0303 	and.w	r3, r3, #3
 800638e:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006394:	69fa      	ldr	r2, [r7, #28]
 8006396:	4613      	mov	r3, r2
 8006398:	00db      	lsls	r3, r3, #3
 800639a:	4413      	add	r3, r2
 800639c:	00db      	lsls	r3, r3, #3
 800639e:	440b      	add	r3, r1
 80063a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80063a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d107      	bne.n	80063c6 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80063b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	0c9b      	lsrs	r3, r3, #18
 80063bc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	601a      	str	r2, [r3, #0]
 80063c4:	e005      	b.n	80063d2 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80063c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80063d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80063de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80063ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ec:	3304      	adds	r3, #4
 80063ee:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80063f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	b29a      	uxth	r2, r3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80063fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8006406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8006412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800641e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	0e1b      	lsrs	r3, r3, #24
 8006424:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800642c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	0fda      	lsrs	r2, r3, #31
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8006436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006438:	3304      	adds	r3, #4
 800643a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800643c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643e:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8006440:	2300      	movs	r3, #0
 8006442:	623b      	str	r3, [r7, #32]
 8006444:	e00a      	b.n	800645c <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8006446:	697a      	ldr	r2, [r7, #20]
 8006448:	6a3b      	ldr	r3, [r7, #32]
 800644a:	441a      	add	r2, r3
 800644c:	6839      	ldr	r1, [r7, #0]
 800644e:	6a3b      	ldr	r3, [r7, #32]
 8006450:	440b      	add	r3, r1
 8006452:	7812      	ldrb	r2, [r2, #0]
 8006454:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8006456:	6a3b      	ldr	r3, [r7, #32]
 8006458:	3301      	adds	r3, #1
 800645a:	623b      	str	r3, [r7, #32]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	0c1b      	lsrs	r3, r3, #16
 8006462:	4a11      	ldr	r2, [pc, #68]	; (80064a8 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8006464:	5cd3      	ldrb	r3, [r2, r3]
 8006466:	461a      	mov	r2, r3
 8006468:	6a3b      	ldr	r3, [r7, #32]
 800646a:	4293      	cmp	r3, r2
 800646c:	d3eb      	bcc.n	8006446 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	2b40      	cmp	r3, #64	; 0x40
 8006472:	d105      	bne.n	8006480 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	69fa      	ldr	r2, [r7, #28]
 800647a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800647e:	e004      	b.n	800648a <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	69fa      	ldr	r2, [r7, #28]
 8006486:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800648a:	2300      	movs	r3, #0
 800648c:	e006      	b.n	800649c <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006492:	f043 0208 	orr.w	r2, r3, #8
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
  }
}
 800649c:	4618      	mov	r0, r3
 800649e:	372c      	adds	r7, #44	; 0x2c
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr
 80064a8:	0800f380 	.word	0x0800f380

080064ac <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b087      	sub	sp, #28
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80064be:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80064c0:	7dfb      	ldrb	r3, [r7, #23]
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d003      	beq.n	80064ce <HAL_FDCAN_ActivateNotification+0x22>
 80064c6:	7dfb      	ldrb	r3, [r7, #23]
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	f040 80c8 	bne.w	800665e <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064d4:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	f003 0307 	and.w	r3, r3, #7
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d004      	beq.n	80064ea <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	f003 0301 	and.w	r3, r3, #1
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d03b      	beq.n	8006562 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d004      	beq.n	80064fe <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	f003 0302 	and.w	r3, r3, #2
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d031      	beq.n	8006562 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8006504:	2b00      	cmp	r3, #0
 8006506:	d004      	beq.n	8006512 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	f003 0304 	and.w	r3, r3, #4
 800650e:	2b00      	cmp	r3, #0
 8006510:	d027      	beq.n	8006562 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8006518:	2b00      	cmp	r3, #0
 800651a:	d004      	beq.n	8006526 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	f003 0308 	and.w	r3, r3, #8
 8006522:	2b00      	cmp	r3, #0
 8006524:	d01d      	beq.n	8006562 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800652c:	2b00      	cmp	r3, #0
 800652e:	d004      	beq.n	800653a <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	f003 0310 	and.w	r3, r3, #16
 8006536:	2b00      	cmp	r3, #0
 8006538:	d013      	beq.n	8006562 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8006540:	2b00      	cmp	r3, #0
 8006542:	d004      	beq.n	800654e <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	f003 0320 	and.w	r3, r3, #32
 800654a:	2b00      	cmp	r3, #0
 800654c:	d009      	beq.n	8006562 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8006554:	2b00      	cmp	r3, #0
 8006556:	d00c      	beq.n	8006572 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800655e:	2b00      	cmp	r3, #0
 8006560:	d107      	bne.n	8006572 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f042 0201 	orr.w	r2, r2, #1
 8006570:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	f003 0307 	and.w	r3, r3, #7
 8006578:	2b00      	cmp	r3, #0
 800657a:	d004      	beq.n	8006586 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	f003 0301 	and.w	r3, r3, #1
 8006582:	2b00      	cmp	r3, #0
 8006584:	d13b      	bne.n	80065fe <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800658c:	2b00      	cmp	r3, #0
 800658e:	d004      	beq.n	800659a <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	f003 0302 	and.w	r3, r3, #2
 8006596:	2b00      	cmp	r3, #0
 8006598:	d131      	bne.n	80065fe <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d004      	beq.n	80065ae <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	f003 0304 	and.w	r3, r3, #4
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d127      	bne.n	80065fe <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d004      	beq.n	80065c2 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	f003 0308 	and.w	r3, r3, #8
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d11d      	bne.n	80065fe <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d004      	beq.n	80065d6 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	f003 0310 	and.w	r3, r3, #16
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d113      	bne.n	80065fe <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d004      	beq.n	80065ea <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	f003 0320 	and.w	r3, r3, #32
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d109      	bne.n	80065fe <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d00c      	beq.n	800660e <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d007      	beq.n	800660e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f042 0202 	orr.w	r2, r2, #2
 800660c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006614:	2b00      	cmp	r3, #0
 8006616:	d009      	beq.n	800662c <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	430a      	orrs	r2, r1
 8006628:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006632:	2b00      	cmp	r3, #0
 8006634:	d009      	beq.n	800664a <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	430a      	orrs	r2, r1
 8006646:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	68ba      	ldr	r2, [r7, #8]
 8006656:	430a      	orrs	r2, r1
 8006658:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 800665a:	2300      	movs	r3, #0
 800665c:	e006      	b.n	800666c <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006662:	f043 0202 	orr.w	r2, r3, #2
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
  }
}
 800666c:	4618      	mov	r0, r3
 800666e:	371c      	adds	r7, #28
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b08a      	sub	sp, #40	; 0x28
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006686:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800668a:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006694:	4013      	ands	r3, r2
 8006696:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800669e:	f003 0307 	and.w	r3, r3, #7
 80066a2:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066aa:	6a3a      	ldr	r2, [r7, #32]
 80066ac:	4013      	ands	r3, r2
 80066ae:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066ba:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066c2:	69fa      	ldr	r2, [r7, #28]
 80066c4:	4013      	ands	r3, r2
 80066c6:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066ce:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 80066d2:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066da:	69ba      	ldr	r2, [r7, #24]
 80066dc:	4013      	ands	r3, r2
 80066de:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066e6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80066ea:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066f2:	697a      	ldr	r2, [r7, #20]
 80066f4:	4013      	ands	r3, r2
 80066f6:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006702:	2b00      	cmp	r3, #0
 8006704:	d00d      	beq.n	8006722 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800670c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006710:	2b00      	cmp	r3, #0
 8006712:	d006      	beq.n	8006722 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2240      	movs	r2, #64	; 0x40
 800671a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 f92e 	bl	800697e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800672c:	2b00      	cmp	r3, #0
 800672e:	d01b      	beq.n	8006768 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800673a:	2b00      	cmp	r3, #0
 800673c:	d014      	beq.n	8006768 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006746:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006750:	693a      	ldr	r2, [r7, #16]
 8006752:	4013      	ands	r3, r2
 8006754:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800675e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8006760:	6939      	ldr	r1, [r7, #16]
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 f8ec 	bl	8006940 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8006768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676a:	2b00      	cmp	r3, #0
 800676c:	d007      	beq.n	800677e <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006774:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8006776:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 f8b6 	bl	80068ea <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800677e:	6a3b      	ldr	r3, [r7, #32]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d007      	beq.n	8006794 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	6a3a      	ldr	r2, [r7, #32]
 800678a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800678c:	6a39      	ldr	r1, [r7, #32]
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f7fb fcb4 	bl	80020fc <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d007      	beq.n	80067aa <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	69fa      	ldr	r2, [r7, #28]
 80067a0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80067a2:	69f9      	ldr	r1, [r7, #28]
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 f8ab 	bl	8006900 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d00e      	beq.n	80067d6 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d007      	beq.n	80067d6 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067ce:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f000 f8a0 	bl	8006916 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d01a      	beq.n	800681a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d013      	beq.n	800681a <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80067fa:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	4013      	ands	r3, r2
 8006808:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2280      	movs	r2, #128	; 0x80
 8006810:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8006812:	68f9      	ldr	r1, [r7, #12]
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 f888 	bl	800692a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006820:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006824:	2b00      	cmp	r3, #0
 8006826:	d00e      	beq.n	8006846 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800682e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006832:	2b00      	cmp	r3, #0
 8006834:	d007      	beq.n	8006846 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800683e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 f888 	bl	8006956 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800684c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006850:	2b00      	cmp	r3, #0
 8006852:	d00e      	beq.n	8006872 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800685a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800685e:	2b00      	cmp	r3, #0
 8006860:	d007      	beq.n	8006872 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800686a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 f87c 	bl	800696a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006878:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800687c:	2b00      	cmp	r3, #0
 800687e:	d011      	beq.n	80068a4 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00a      	beq.n	80068a4 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006896:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800689c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d007      	beq.n	80068ba <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	697a      	ldr	r2, [r7, #20]
 80068b0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80068b2:	6979      	ldr	r1, [r7, #20]
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f000 f876 	bl	80069a6 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d009      	beq.n	80068d4 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	69ba      	ldr	r2, [r7, #24]
 80068c6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	431a      	orrs	r2, r3
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d002      	beq.n	80068e2 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 f858 	bl	8006992 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80068e2:	bf00      	nop
 80068e4:	3728      	adds	r7, #40	; 0x28
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}

080068ea <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80068ea:	b480      	push	{r7}
 80068ec:	b083      	sub	sp, #12
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
 80068f2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80068f4:	bf00      	nop
 80068f6:	370c      	adds	r7, #12
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800690a:	bf00      	nop
 800690c:	370c      	adds	r7, #12
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr

08006916 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006916:	b480      	push	{r7}
 8006918:	b083      	sub	sp, #12
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800691e:	bf00      	nop
 8006920:	370c      	adds	r7, #12
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr

0800692a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800692a:	b480      	push	{r7}
 800692c:	b083      	sub	sp, #12
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
 8006932:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8006934:	bf00      	nop
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800694a:	bf00      	nop
 800694c:	370c      	adds	r7, #12
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr

08006956 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006956:	b480      	push	{r7}
 8006958:	b083      	sub	sp, #12
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800695e:	bf00      	nop
 8006960:	370c      	adds	r7, #12
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr

0800696a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800696a:	b480      	push	{r7}
 800696c:	b083      	sub	sp, #12
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8006972:	bf00      	nop
 8006974:	370c      	adds	r7, #12
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr

0800697e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800697e:	b480      	push	{r7}
 8006980:	b083      	sub	sp, #12
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8006986:	bf00      	nop
 8006988:	370c      	adds	r7, #12
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr

08006992 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006992:	b480      	push	{r7}
 8006994:	b083      	sub	sp, #12
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800699a:	bf00      	nop
 800699c:	370c      	adds	r7, #12
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr

080069a6 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80069a6:	b480      	push	{r7}
 80069a8:	b083      	sub	sp, #12
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
 80069ae:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80069b0:	bf00      	nop
 80069b2:	370c      	adds	r7, #12
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80069bc:	b480      	push	{r7}
 80069be:	b085      	sub	sp, #20
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80069c4:	4b27      	ldr	r3, [pc, #156]	; (8006a64 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80069c6:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	68ba      	ldr	r2, [r7, #8]
 80069cc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069d6:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069de:	041a      	lsls	r2, r3, #16
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	430a      	orrs	r2, r1
 80069e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069fc:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a04:	061a      	lsls	r2, r3, #24
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	430a      	orrs	r2, r1
 8006a0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	60fb      	str	r3, [r7, #12]
 8006a3c:	e005      	b.n	8006a4a <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	3304      	adds	r3, #4
 8006a48:	60fb      	str	r3, [r7, #12]
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006a50:	68fa      	ldr	r2, [r7, #12]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d3f3      	bcc.n	8006a3e <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8006a56:	bf00      	nop
 8006a58:	bf00      	nop
 8006a5a:	3714      	adds	r7, #20
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr
 8006a64:	4000a400 	.word	0x4000a400

08006a68 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b089      	sub	sp, #36	; 0x24
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	60b9      	str	r1, [r7, #8]
 8006a72:	607a      	str	r2, [r7, #4]
 8006a74:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d10a      	bne.n	8006a94 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8006a86:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	61fb      	str	r3, [r7, #28]
 8006a92:	e00a      	b.n	8006aaa <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8006a9c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8006aa2:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006aa4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006aa8:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	6a1b      	ldr	r3, [r3, #32]
 8006aae:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006ab4:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8006aba:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8006ac0:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006ace:	683a      	ldr	r2, [r7, #0]
 8006ad0:	4613      	mov	r3, r2
 8006ad2:	00db      	lsls	r3, r3, #3
 8006ad4:	4413      	add	r3, r2
 8006ad6:	00db      	lsls	r3, r3, #3
 8006ad8:	440b      	add	r3, r1
 8006ada:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	69fa      	ldr	r2, [r7, #28]
 8006ae0:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006ae2:	69bb      	ldr	r3, [r7, #24]
 8006ae4:	3304      	adds	r3, #4
 8006ae6:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8006ae8:	69bb      	ldr	r3, [r7, #24]
 8006aea:	693a      	ldr	r2, [r7, #16]
 8006aec:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	3304      	adds	r3, #4
 8006af2:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8006af4:	2300      	movs	r3, #0
 8006af6:	617b      	str	r3, [r7, #20]
 8006af8:	e020      	b.n	8006b3c <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	3303      	adds	r3, #3
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	4413      	add	r3, r2
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	3302      	adds	r3, #2
 8006b0a:	6879      	ldr	r1, [r7, #4]
 8006b0c:	440b      	add	r3, r1
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006b12:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	3301      	adds	r3, #1
 8006b18:	6879      	ldr	r1, [r7, #4]
 8006b1a:	440b      	add	r3, r1
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006b20:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8006b22:	6879      	ldr	r1, [r7, #4]
 8006b24:	697a      	ldr	r2, [r7, #20]
 8006b26:	440a      	add	r2, r1
 8006b28:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006b2a:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006b2c:	69bb      	ldr	r3, [r7, #24]
 8006b2e:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	3304      	adds	r3, #4
 8006b34:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	3304      	adds	r3, #4
 8006b3a:	617b      	str	r3, [r7, #20]
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	0c1b      	lsrs	r3, r3, #16
 8006b42:	4a06      	ldr	r2, [pc, #24]	; (8006b5c <FDCAN_CopyMessageToRAM+0xf4>)
 8006b44:	5cd3      	ldrb	r3, [r2, r3]
 8006b46:	461a      	mov	r2, r3
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d3d5      	bcc.n	8006afa <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8006b4e:	bf00      	nop
 8006b50:	bf00      	nop
 8006b52:	3724      	adds	r7, #36	; 0x24
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr
 8006b5c:	0800f380 	.word	0x0800f380

08006b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b087      	sub	sp, #28
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006b6e:	e15a      	b.n	8006e26 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	2101      	movs	r1, #1
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	fa01 f303 	lsl.w	r3, r1, r3
 8006b7c:	4013      	ands	r3, r2
 8006b7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	f000 814c 	beq.w	8006e20 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	f003 0303 	and.w	r3, r3, #3
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d005      	beq.n	8006ba0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006b9c:	2b02      	cmp	r3, #2
 8006b9e:	d130      	bne.n	8006c02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	005b      	lsls	r3, r3, #1
 8006baa:	2203      	movs	r2, #3
 8006bac:	fa02 f303 	lsl.w	r3, r2, r3
 8006bb0:	43db      	mvns	r3, r3
 8006bb2:	693a      	ldr	r2, [r7, #16]
 8006bb4:	4013      	ands	r3, r2
 8006bb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	68da      	ldr	r2, [r3, #12]
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	005b      	lsls	r3, r3, #1
 8006bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8006bc4:	693a      	ldr	r2, [r7, #16]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	693a      	ldr	r2, [r7, #16]
 8006bce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	fa02 f303 	lsl.w	r3, r2, r3
 8006bde:	43db      	mvns	r3, r3
 8006be0:	693a      	ldr	r2, [r7, #16]
 8006be2:	4013      	ands	r3, r2
 8006be4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	091b      	lsrs	r3, r3, #4
 8006bec:	f003 0201 	and.w	r2, r3, #1
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8006bf6:	693a      	ldr	r2, [r7, #16]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	693a      	ldr	r2, [r7, #16]
 8006c00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	f003 0303 	and.w	r3, r3, #3
 8006c0a:	2b03      	cmp	r3, #3
 8006c0c:	d017      	beq.n	8006c3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	005b      	lsls	r3, r3, #1
 8006c18:	2203      	movs	r2, #3
 8006c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c1e:	43db      	mvns	r3, r3
 8006c20:	693a      	ldr	r2, [r7, #16]
 8006c22:	4013      	ands	r3, r2
 8006c24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	689a      	ldr	r2, [r3, #8]
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	005b      	lsls	r3, r3, #1
 8006c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c32:	693a      	ldr	r2, [r7, #16]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	693a      	ldr	r2, [r7, #16]
 8006c3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	f003 0303 	and.w	r3, r3, #3
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	d123      	bne.n	8006c92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	08da      	lsrs	r2, r3, #3
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	3208      	adds	r2, #8
 8006c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	f003 0307 	and.w	r3, r3, #7
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	220f      	movs	r2, #15
 8006c62:	fa02 f303 	lsl.w	r3, r2, r3
 8006c66:	43db      	mvns	r3, r3
 8006c68:	693a      	ldr	r2, [r7, #16]
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	691a      	ldr	r2, [r3, #16]
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	f003 0307 	and.w	r3, r3, #7
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c7e:	693a      	ldr	r2, [r7, #16]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	08da      	lsrs	r2, r3, #3
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	3208      	adds	r2, #8
 8006c8c:	6939      	ldr	r1, [r7, #16]
 8006c8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	005b      	lsls	r3, r3, #1
 8006c9c:	2203      	movs	r2, #3
 8006c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8006ca2:	43db      	mvns	r3, r3
 8006ca4:	693a      	ldr	r2, [r7, #16]
 8006ca6:	4013      	ands	r3, r2
 8006ca8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	f003 0203 	and.w	r2, r3, #3
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	005b      	lsls	r3, r3, #1
 8006cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cba:	693a      	ldr	r2, [r7, #16]
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	693a      	ldr	r2, [r7, #16]
 8006cc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f000 80a6 	beq.w	8006e20 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006cd4:	4b5b      	ldr	r3, [pc, #364]	; (8006e44 <HAL_GPIO_Init+0x2e4>)
 8006cd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cd8:	4a5a      	ldr	r2, [pc, #360]	; (8006e44 <HAL_GPIO_Init+0x2e4>)
 8006cda:	f043 0301 	orr.w	r3, r3, #1
 8006cde:	6613      	str	r3, [r2, #96]	; 0x60
 8006ce0:	4b58      	ldr	r3, [pc, #352]	; (8006e44 <HAL_GPIO_Init+0x2e4>)
 8006ce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ce4:	f003 0301 	and.w	r3, r3, #1
 8006ce8:	60bb      	str	r3, [r7, #8]
 8006cea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006cec:	4a56      	ldr	r2, [pc, #344]	; (8006e48 <HAL_GPIO_Init+0x2e8>)
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	089b      	lsrs	r3, r3, #2
 8006cf2:	3302      	adds	r3, #2
 8006cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	f003 0303 	and.w	r3, r3, #3
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	220f      	movs	r2, #15
 8006d04:	fa02 f303 	lsl.w	r3, r2, r3
 8006d08:	43db      	mvns	r3, r3
 8006d0a:	693a      	ldr	r2, [r7, #16]
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006d16:	d01f      	beq.n	8006d58 <HAL_GPIO_Init+0x1f8>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	4a4c      	ldr	r2, [pc, #304]	; (8006e4c <HAL_GPIO_Init+0x2ec>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d019      	beq.n	8006d54 <HAL_GPIO_Init+0x1f4>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	4a4b      	ldr	r2, [pc, #300]	; (8006e50 <HAL_GPIO_Init+0x2f0>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d013      	beq.n	8006d50 <HAL_GPIO_Init+0x1f0>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	4a4a      	ldr	r2, [pc, #296]	; (8006e54 <HAL_GPIO_Init+0x2f4>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d00d      	beq.n	8006d4c <HAL_GPIO_Init+0x1ec>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4a49      	ldr	r2, [pc, #292]	; (8006e58 <HAL_GPIO_Init+0x2f8>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d007      	beq.n	8006d48 <HAL_GPIO_Init+0x1e8>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	4a48      	ldr	r2, [pc, #288]	; (8006e5c <HAL_GPIO_Init+0x2fc>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d101      	bne.n	8006d44 <HAL_GPIO_Init+0x1e4>
 8006d40:	2305      	movs	r3, #5
 8006d42:	e00a      	b.n	8006d5a <HAL_GPIO_Init+0x1fa>
 8006d44:	2306      	movs	r3, #6
 8006d46:	e008      	b.n	8006d5a <HAL_GPIO_Init+0x1fa>
 8006d48:	2304      	movs	r3, #4
 8006d4a:	e006      	b.n	8006d5a <HAL_GPIO_Init+0x1fa>
 8006d4c:	2303      	movs	r3, #3
 8006d4e:	e004      	b.n	8006d5a <HAL_GPIO_Init+0x1fa>
 8006d50:	2302      	movs	r3, #2
 8006d52:	e002      	b.n	8006d5a <HAL_GPIO_Init+0x1fa>
 8006d54:	2301      	movs	r3, #1
 8006d56:	e000      	b.n	8006d5a <HAL_GPIO_Init+0x1fa>
 8006d58:	2300      	movs	r3, #0
 8006d5a:	697a      	ldr	r2, [r7, #20]
 8006d5c:	f002 0203 	and.w	r2, r2, #3
 8006d60:	0092      	lsls	r2, r2, #2
 8006d62:	4093      	lsls	r3, r2
 8006d64:	693a      	ldr	r2, [r7, #16]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006d6a:	4937      	ldr	r1, [pc, #220]	; (8006e48 <HAL_GPIO_Init+0x2e8>)
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	089b      	lsrs	r3, r3, #2
 8006d70:	3302      	adds	r3, #2
 8006d72:	693a      	ldr	r2, [r7, #16]
 8006d74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006d78:	4b39      	ldr	r3, [pc, #228]	; (8006e60 <HAL_GPIO_Init+0x300>)
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	43db      	mvns	r3, r3
 8006d82:	693a      	ldr	r2, [r7, #16]
 8006d84:	4013      	ands	r3, r2
 8006d86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d003      	beq.n	8006d9c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006d94:	693a      	ldr	r2, [r7, #16]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006d9c:	4a30      	ldr	r2, [pc, #192]	; (8006e60 <HAL_GPIO_Init+0x300>)
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006da2:	4b2f      	ldr	r3, [pc, #188]	; (8006e60 <HAL_GPIO_Init+0x300>)
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	43db      	mvns	r3, r3
 8006dac:	693a      	ldr	r2, [r7, #16]
 8006dae:	4013      	ands	r3, r2
 8006db0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d003      	beq.n	8006dc6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006dbe:	693a      	ldr	r2, [r7, #16]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006dc6:	4a26      	ldr	r2, [pc, #152]	; (8006e60 <HAL_GPIO_Init+0x300>)
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006dcc:	4b24      	ldr	r3, [pc, #144]	; (8006e60 <HAL_GPIO_Init+0x300>)
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	43db      	mvns	r3, r3
 8006dd6:	693a      	ldr	r2, [r7, #16]
 8006dd8:	4013      	ands	r3, r2
 8006dda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d003      	beq.n	8006df0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006de8:	693a      	ldr	r2, [r7, #16]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006df0:	4a1b      	ldr	r2, [pc, #108]	; (8006e60 <HAL_GPIO_Init+0x300>)
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006df6:	4b1a      	ldr	r3, [pc, #104]	; (8006e60 <HAL_GPIO_Init+0x300>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	43db      	mvns	r3, r3
 8006e00:	693a      	ldr	r2, [r7, #16]
 8006e02:	4013      	ands	r3, r2
 8006e04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d003      	beq.n	8006e1a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006e12:	693a      	ldr	r2, [r7, #16]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006e1a:	4a11      	ldr	r2, [pc, #68]	; (8006e60 <HAL_GPIO_Init+0x300>)
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	3301      	adds	r3, #1
 8006e24:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f47f ae9d 	bne.w	8006b70 <HAL_GPIO_Init+0x10>
  }
}
 8006e36:	bf00      	nop
 8006e38:	bf00      	nop
 8006e3a:	371c      	adds	r7, #28
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr
 8006e44:	40021000 	.word	0x40021000
 8006e48:	40010000 	.word	0x40010000
 8006e4c:	48000400 	.word	0x48000400
 8006e50:	48000800 	.word	0x48000800
 8006e54:	48000c00 	.word	0x48000c00
 8006e58:	48001000 	.word	0x48001000
 8006e5c:	48001400 	.word	0x48001400
 8006e60:	40010400 	.word	0x40010400

08006e64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	807b      	strh	r3, [r7, #2]
 8006e70:	4613      	mov	r3, r2
 8006e72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006e74:	787b      	ldrb	r3, [r7, #1]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d003      	beq.n	8006e82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006e7a:	887a      	ldrh	r2, [r7, #2]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006e80:	e002      	b.n	8006e88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006e82:	887a      	ldrh	r2, [r7, #2]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006e88:	bf00      	nop
 8006e8a:	370c      	adds	r7, #12
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d141      	bne.n	8006f26 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006ea2:	4b4b      	ldr	r3, [pc, #300]	; (8006fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006eaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006eae:	d131      	bne.n	8006f14 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006eb0:	4b47      	ldr	r3, [pc, #284]	; (8006fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006eb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006eb6:	4a46      	ldr	r2, [pc, #280]	; (8006fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006eb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ebc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006ec0:	4b43      	ldr	r3, [pc, #268]	; (8006fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006ec8:	4a41      	ldr	r2, [pc, #260]	; (8006fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006eca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006ece:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006ed0:	4b40      	ldr	r3, [pc, #256]	; (8006fd4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2232      	movs	r2, #50	; 0x32
 8006ed6:	fb02 f303 	mul.w	r3, r2, r3
 8006eda:	4a3f      	ldr	r2, [pc, #252]	; (8006fd8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006edc:	fba2 2303 	umull	r2, r3, r2, r3
 8006ee0:	0c9b      	lsrs	r3, r3, #18
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006ee6:	e002      	b.n	8006eee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	3b01      	subs	r3, #1
 8006eec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006eee:	4b38      	ldr	r3, [pc, #224]	; (8006fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ef0:	695b      	ldr	r3, [r3, #20]
 8006ef2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ef6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006efa:	d102      	bne.n	8006f02 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1f2      	bne.n	8006ee8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006f02:	4b33      	ldr	r3, [pc, #204]	; (8006fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f04:	695b      	ldr	r3, [r3, #20]
 8006f06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f0e:	d158      	bne.n	8006fc2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006f10:	2303      	movs	r3, #3
 8006f12:	e057      	b.n	8006fc4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006f14:	4b2e      	ldr	r3, [pc, #184]	; (8006fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f1a:	4a2d      	ldr	r2, [pc, #180]	; (8006fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006f24:	e04d      	b.n	8006fc2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f2c:	d141      	bne.n	8006fb2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006f2e:	4b28      	ldr	r3, [pc, #160]	; (8006fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006f36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f3a:	d131      	bne.n	8006fa0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006f3c:	4b24      	ldr	r3, [pc, #144]	; (8006fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f42:	4a23      	ldr	r2, [pc, #140]	; (8006fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f48:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006f4c:	4b20      	ldr	r3, [pc, #128]	; (8006fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006f54:	4a1e      	ldr	r2, [pc, #120]	; (8006fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006f5a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006f5c:	4b1d      	ldr	r3, [pc, #116]	; (8006fd4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2232      	movs	r2, #50	; 0x32
 8006f62:	fb02 f303 	mul.w	r3, r2, r3
 8006f66:	4a1c      	ldr	r2, [pc, #112]	; (8006fd8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006f68:	fba2 2303 	umull	r2, r3, r2, r3
 8006f6c:	0c9b      	lsrs	r3, r3, #18
 8006f6e:	3301      	adds	r3, #1
 8006f70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006f72:	e002      	b.n	8006f7a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	3b01      	subs	r3, #1
 8006f78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006f7a:	4b15      	ldr	r3, [pc, #84]	; (8006fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f7c:	695b      	ldr	r3, [r3, #20]
 8006f7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f86:	d102      	bne.n	8006f8e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d1f2      	bne.n	8006f74 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006f8e:	4b10      	ldr	r3, [pc, #64]	; (8006fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f90:	695b      	ldr	r3, [r3, #20]
 8006f92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f9a:	d112      	bne.n	8006fc2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	e011      	b.n	8006fc4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006fa0:	4b0b      	ldr	r3, [pc, #44]	; (8006fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fa6:	4a0a      	ldr	r2, [pc, #40]	; (8006fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006fb0:	e007      	b.n	8006fc2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006fb2:	4b07      	ldr	r3, [pc, #28]	; (8006fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006fba:	4a05      	ldr	r2, [pc, #20]	; (8006fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006fbc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006fc0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3714      	adds	r7, #20
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr
 8006fd0:	40007000 	.word	0x40007000
 8006fd4:	200002d8 	.word	0x200002d8
 8006fd8:	431bde83 	.word	0x431bde83

08006fdc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006fe0:	4b05      	ldr	r3, [pc, #20]	; (8006ff8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	4a04      	ldr	r2, [pc, #16]	; (8006ff8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006fe6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006fea:	6093      	str	r3, [r2, #8]
}
 8006fec:	bf00      	nop
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr
 8006ff6:	bf00      	nop
 8006ff8:	40007000 	.word	0x40007000

08006ffc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b088      	sub	sp, #32
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d101      	bne.n	800700e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	e306      	b.n	800761c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f003 0301 	and.w	r3, r3, #1
 8007016:	2b00      	cmp	r3, #0
 8007018:	d075      	beq.n	8007106 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800701a:	4b97      	ldr	r3, [pc, #604]	; (8007278 <HAL_RCC_OscConfig+0x27c>)
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	f003 030c 	and.w	r3, r3, #12
 8007022:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007024:	4b94      	ldr	r3, [pc, #592]	; (8007278 <HAL_RCC_OscConfig+0x27c>)
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	f003 0303 	and.w	r3, r3, #3
 800702c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800702e:	69bb      	ldr	r3, [r7, #24]
 8007030:	2b0c      	cmp	r3, #12
 8007032:	d102      	bne.n	800703a <HAL_RCC_OscConfig+0x3e>
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	2b03      	cmp	r3, #3
 8007038:	d002      	beq.n	8007040 <HAL_RCC_OscConfig+0x44>
 800703a:	69bb      	ldr	r3, [r7, #24]
 800703c:	2b08      	cmp	r3, #8
 800703e:	d10b      	bne.n	8007058 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007040:	4b8d      	ldr	r3, [pc, #564]	; (8007278 <HAL_RCC_OscConfig+0x27c>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007048:	2b00      	cmp	r3, #0
 800704a:	d05b      	beq.n	8007104 <HAL_RCC_OscConfig+0x108>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d157      	bne.n	8007104 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	e2e1      	b.n	800761c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007060:	d106      	bne.n	8007070 <HAL_RCC_OscConfig+0x74>
 8007062:	4b85      	ldr	r3, [pc, #532]	; (8007278 <HAL_RCC_OscConfig+0x27c>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a84      	ldr	r2, [pc, #528]	; (8007278 <HAL_RCC_OscConfig+0x27c>)
 8007068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800706c:	6013      	str	r3, [r2, #0]
 800706e:	e01d      	b.n	80070ac <HAL_RCC_OscConfig+0xb0>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007078:	d10c      	bne.n	8007094 <HAL_RCC_OscConfig+0x98>
 800707a:	4b7f      	ldr	r3, [pc, #508]	; (8007278 <HAL_RCC_OscConfig+0x27c>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a7e      	ldr	r2, [pc, #504]	; (8007278 <HAL_RCC_OscConfig+0x27c>)
 8007080:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007084:	6013      	str	r3, [r2, #0]
 8007086:	4b7c      	ldr	r3, [pc, #496]	; (8007278 <HAL_RCC_OscConfig+0x27c>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a7b      	ldr	r2, [pc, #492]	; (8007278 <HAL_RCC_OscConfig+0x27c>)
 800708c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007090:	6013      	str	r3, [r2, #0]
 8007092:	e00b      	b.n	80070ac <HAL_RCC_OscConfig+0xb0>
 8007094:	4b78      	ldr	r3, [pc, #480]	; (8007278 <HAL_RCC_OscConfig+0x27c>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a77      	ldr	r2, [pc, #476]	; (8007278 <HAL_RCC_OscConfig+0x27c>)
 800709a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800709e:	6013      	str	r3, [r2, #0]
 80070a0:	4b75      	ldr	r3, [pc, #468]	; (8007278 <HAL_RCC_OscConfig+0x27c>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a74      	ldr	r2, [pc, #464]	; (8007278 <HAL_RCC_OscConfig+0x27c>)
 80070a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d013      	beq.n	80070dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070b4:	f7fc fc42 	bl	800393c <HAL_GetTick>
 80070b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80070ba:	e008      	b.n	80070ce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070bc:	f7fc fc3e 	bl	800393c <HAL_GetTick>
 80070c0:	4602      	mov	r2, r0
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	1ad3      	subs	r3, r2, r3
 80070c6:	2b64      	cmp	r3, #100	; 0x64
 80070c8:	d901      	bls.n	80070ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80070ca:	2303      	movs	r3, #3
 80070cc:	e2a6      	b.n	800761c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80070ce:	4b6a      	ldr	r3, [pc, #424]	; (8007278 <HAL_RCC_OscConfig+0x27c>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d0f0      	beq.n	80070bc <HAL_RCC_OscConfig+0xc0>
 80070da:	e014      	b.n	8007106 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070dc:	f7fc fc2e 	bl	800393c <HAL_GetTick>
 80070e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80070e2:	e008      	b.n	80070f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070e4:	f7fc fc2a 	bl	800393c <HAL_GetTick>
 80070e8:	4602      	mov	r2, r0
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	1ad3      	subs	r3, r2, r3
 80070ee:	2b64      	cmp	r3, #100	; 0x64
 80070f0:	d901      	bls.n	80070f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80070f2:	2303      	movs	r3, #3
 80070f4:	e292      	b.n	800761c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80070f6:	4b60      	ldr	r3, [pc, #384]	; (8007278 <HAL_RCC_OscConfig+0x27c>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1f0      	bne.n	80070e4 <HAL_RCC_OscConfig+0xe8>
 8007102:	e000      	b.n	8007106 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007104:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f003 0302 	and.w	r3, r3, #2
 800710e:	2b00      	cmp	r3, #0
 8007110:	d075      	beq.n	80071fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007112:	4b59      	ldr	r3, [pc, #356]	; (8007278 <HAL_RCC_OscConfig+0x27c>)
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	f003 030c 	and.w	r3, r3, #12
 800711a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800711c:	4b56      	ldr	r3, [pc, #344]	; (8007278 <HAL_RCC_OscConfig+0x27c>)
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	f003 0303 	and.w	r3, r3, #3
 8007124:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	2b0c      	cmp	r3, #12
 800712a:	d102      	bne.n	8007132 <HAL_RCC_OscConfig+0x136>
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	2b02      	cmp	r3, #2
 8007130:	d002      	beq.n	8007138 <HAL_RCC_OscConfig+0x13c>
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	2b04      	cmp	r3, #4
 8007136:	d11f      	bne.n	8007178 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007138:	4b4f      	ldr	r3, [pc, #316]	; (8007278 <HAL_RCC_OscConfig+0x27c>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007140:	2b00      	cmp	r3, #0
 8007142:	d005      	beq.n	8007150 <HAL_RCC_OscConfig+0x154>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d101      	bne.n	8007150 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800714c:	2301      	movs	r3, #1
 800714e:	e265      	b.n	800761c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007150:	4b49      	ldr	r3, [pc, #292]	; (8007278 <HAL_RCC_OscConfig+0x27c>)
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	691b      	ldr	r3, [r3, #16]
 800715c:	061b      	lsls	r3, r3, #24
 800715e:	4946      	ldr	r1, [pc, #280]	; (8007278 <HAL_RCC_OscConfig+0x27c>)
 8007160:	4313      	orrs	r3, r2
 8007162:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007164:	4b45      	ldr	r3, [pc, #276]	; (800727c <HAL_RCC_OscConfig+0x280>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4618      	mov	r0, r3
 800716a:	f7fb ffd3 	bl	8003114 <HAL_InitTick>
 800716e:	4603      	mov	r3, r0
 8007170:	2b00      	cmp	r3, #0
 8007172:	d043      	beq.n	80071fc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007174:	2301      	movs	r3, #1
 8007176:	e251      	b.n	800761c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d023      	beq.n	80071c8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007180:	4b3d      	ldr	r3, [pc, #244]	; (8007278 <HAL_RCC_OscConfig+0x27c>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a3c      	ldr	r2, [pc, #240]	; (8007278 <HAL_RCC_OscConfig+0x27c>)
 8007186:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800718a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800718c:	f7fc fbd6 	bl	800393c <HAL_GetTick>
 8007190:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007192:	e008      	b.n	80071a6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007194:	f7fc fbd2 	bl	800393c <HAL_GetTick>
 8007198:	4602      	mov	r2, r0
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	1ad3      	subs	r3, r2, r3
 800719e:	2b02      	cmp	r3, #2
 80071a0:	d901      	bls.n	80071a6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80071a2:	2303      	movs	r3, #3
 80071a4:	e23a      	b.n	800761c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80071a6:	4b34      	ldr	r3, [pc, #208]	; (8007278 <HAL_RCC_OscConfig+0x27c>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d0f0      	beq.n	8007194 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071b2:	4b31      	ldr	r3, [pc, #196]	; (8007278 <HAL_RCC_OscConfig+0x27c>)
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	061b      	lsls	r3, r3, #24
 80071c0:	492d      	ldr	r1, [pc, #180]	; (8007278 <HAL_RCC_OscConfig+0x27c>)
 80071c2:	4313      	orrs	r3, r2
 80071c4:	604b      	str	r3, [r1, #4]
 80071c6:	e01a      	b.n	80071fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80071c8:	4b2b      	ldr	r3, [pc, #172]	; (8007278 <HAL_RCC_OscConfig+0x27c>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a2a      	ldr	r2, [pc, #168]	; (8007278 <HAL_RCC_OscConfig+0x27c>)
 80071ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071d4:	f7fc fbb2 	bl	800393c <HAL_GetTick>
 80071d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80071da:	e008      	b.n	80071ee <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071dc:	f7fc fbae 	bl	800393c <HAL_GetTick>
 80071e0:	4602      	mov	r2, r0
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	1ad3      	subs	r3, r2, r3
 80071e6:	2b02      	cmp	r3, #2
 80071e8:	d901      	bls.n	80071ee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80071ea:	2303      	movs	r3, #3
 80071ec:	e216      	b.n	800761c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80071ee:	4b22      	ldr	r3, [pc, #136]	; (8007278 <HAL_RCC_OscConfig+0x27c>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d1f0      	bne.n	80071dc <HAL_RCC_OscConfig+0x1e0>
 80071fa:	e000      	b.n	80071fe <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80071fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f003 0308 	and.w	r3, r3, #8
 8007206:	2b00      	cmp	r3, #0
 8007208:	d041      	beq.n	800728e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	695b      	ldr	r3, [r3, #20]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d01c      	beq.n	800724c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007212:	4b19      	ldr	r3, [pc, #100]	; (8007278 <HAL_RCC_OscConfig+0x27c>)
 8007214:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007218:	4a17      	ldr	r2, [pc, #92]	; (8007278 <HAL_RCC_OscConfig+0x27c>)
 800721a:	f043 0301 	orr.w	r3, r3, #1
 800721e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007222:	f7fc fb8b 	bl	800393c <HAL_GetTick>
 8007226:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007228:	e008      	b.n	800723c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800722a:	f7fc fb87 	bl	800393c <HAL_GetTick>
 800722e:	4602      	mov	r2, r0
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	1ad3      	subs	r3, r2, r3
 8007234:	2b02      	cmp	r3, #2
 8007236:	d901      	bls.n	800723c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007238:	2303      	movs	r3, #3
 800723a:	e1ef      	b.n	800761c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800723c:	4b0e      	ldr	r3, [pc, #56]	; (8007278 <HAL_RCC_OscConfig+0x27c>)
 800723e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007242:	f003 0302 	and.w	r3, r3, #2
 8007246:	2b00      	cmp	r3, #0
 8007248:	d0ef      	beq.n	800722a <HAL_RCC_OscConfig+0x22e>
 800724a:	e020      	b.n	800728e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800724c:	4b0a      	ldr	r3, [pc, #40]	; (8007278 <HAL_RCC_OscConfig+0x27c>)
 800724e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007252:	4a09      	ldr	r2, [pc, #36]	; (8007278 <HAL_RCC_OscConfig+0x27c>)
 8007254:	f023 0301 	bic.w	r3, r3, #1
 8007258:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800725c:	f7fc fb6e 	bl	800393c <HAL_GetTick>
 8007260:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007262:	e00d      	b.n	8007280 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007264:	f7fc fb6a 	bl	800393c <HAL_GetTick>
 8007268:	4602      	mov	r2, r0
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	2b02      	cmp	r3, #2
 8007270:	d906      	bls.n	8007280 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007272:	2303      	movs	r3, #3
 8007274:	e1d2      	b.n	800761c <HAL_RCC_OscConfig+0x620>
 8007276:	bf00      	nop
 8007278:	40021000 	.word	0x40021000
 800727c:	200002dc 	.word	0x200002dc
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007280:	4b8c      	ldr	r3, [pc, #560]	; (80074b4 <HAL_RCC_OscConfig+0x4b8>)
 8007282:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007286:	f003 0302 	and.w	r3, r3, #2
 800728a:	2b00      	cmp	r3, #0
 800728c:	d1ea      	bne.n	8007264 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f003 0304 	and.w	r3, r3, #4
 8007296:	2b00      	cmp	r3, #0
 8007298:	f000 80a6 	beq.w	80073e8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800729c:	2300      	movs	r3, #0
 800729e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80072a0:	4b84      	ldr	r3, [pc, #528]	; (80074b4 <HAL_RCC_OscConfig+0x4b8>)
 80072a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d101      	bne.n	80072b0 <HAL_RCC_OscConfig+0x2b4>
 80072ac:	2301      	movs	r3, #1
 80072ae:	e000      	b.n	80072b2 <HAL_RCC_OscConfig+0x2b6>
 80072b0:	2300      	movs	r3, #0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00d      	beq.n	80072d2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80072b6:	4b7f      	ldr	r3, [pc, #508]	; (80074b4 <HAL_RCC_OscConfig+0x4b8>)
 80072b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072ba:	4a7e      	ldr	r2, [pc, #504]	; (80074b4 <HAL_RCC_OscConfig+0x4b8>)
 80072bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072c0:	6593      	str	r3, [r2, #88]	; 0x58
 80072c2:	4b7c      	ldr	r3, [pc, #496]	; (80074b4 <HAL_RCC_OscConfig+0x4b8>)
 80072c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072ca:	60fb      	str	r3, [r7, #12]
 80072cc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80072ce:	2301      	movs	r3, #1
 80072d0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072d2:	4b79      	ldr	r3, [pc, #484]	; (80074b8 <HAL_RCC_OscConfig+0x4bc>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d118      	bne.n	8007310 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80072de:	4b76      	ldr	r3, [pc, #472]	; (80074b8 <HAL_RCC_OscConfig+0x4bc>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a75      	ldr	r2, [pc, #468]	; (80074b8 <HAL_RCC_OscConfig+0x4bc>)
 80072e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80072ea:	f7fc fb27 	bl	800393c <HAL_GetTick>
 80072ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072f0:	e008      	b.n	8007304 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072f2:	f7fc fb23 	bl	800393c <HAL_GetTick>
 80072f6:	4602      	mov	r2, r0
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	1ad3      	subs	r3, r2, r3
 80072fc:	2b02      	cmp	r3, #2
 80072fe:	d901      	bls.n	8007304 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007300:	2303      	movs	r3, #3
 8007302:	e18b      	b.n	800761c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007304:	4b6c      	ldr	r3, [pc, #432]	; (80074b8 <HAL_RCC_OscConfig+0x4bc>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800730c:	2b00      	cmp	r3, #0
 800730e:	d0f0      	beq.n	80072f2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	2b01      	cmp	r3, #1
 8007316:	d108      	bne.n	800732a <HAL_RCC_OscConfig+0x32e>
 8007318:	4b66      	ldr	r3, [pc, #408]	; (80074b4 <HAL_RCC_OscConfig+0x4b8>)
 800731a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800731e:	4a65      	ldr	r2, [pc, #404]	; (80074b4 <HAL_RCC_OscConfig+0x4b8>)
 8007320:	f043 0301 	orr.w	r3, r3, #1
 8007324:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007328:	e024      	b.n	8007374 <HAL_RCC_OscConfig+0x378>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	2b05      	cmp	r3, #5
 8007330:	d110      	bne.n	8007354 <HAL_RCC_OscConfig+0x358>
 8007332:	4b60      	ldr	r3, [pc, #384]	; (80074b4 <HAL_RCC_OscConfig+0x4b8>)
 8007334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007338:	4a5e      	ldr	r2, [pc, #376]	; (80074b4 <HAL_RCC_OscConfig+0x4b8>)
 800733a:	f043 0304 	orr.w	r3, r3, #4
 800733e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007342:	4b5c      	ldr	r3, [pc, #368]	; (80074b4 <HAL_RCC_OscConfig+0x4b8>)
 8007344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007348:	4a5a      	ldr	r2, [pc, #360]	; (80074b4 <HAL_RCC_OscConfig+0x4b8>)
 800734a:	f043 0301 	orr.w	r3, r3, #1
 800734e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007352:	e00f      	b.n	8007374 <HAL_RCC_OscConfig+0x378>
 8007354:	4b57      	ldr	r3, [pc, #348]	; (80074b4 <HAL_RCC_OscConfig+0x4b8>)
 8007356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800735a:	4a56      	ldr	r2, [pc, #344]	; (80074b4 <HAL_RCC_OscConfig+0x4b8>)
 800735c:	f023 0301 	bic.w	r3, r3, #1
 8007360:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007364:	4b53      	ldr	r3, [pc, #332]	; (80074b4 <HAL_RCC_OscConfig+0x4b8>)
 8007366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800736a:	4a52      	ldr	r2, [pc, #328]	; (80074b4 <HAL_RCC_OscConfig+0x4b8>)
 800736c:	f023 0304 	bic.w	r3, r3, #4
 8007370:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d016      	beq.n	80073aa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800737c:	f7fc fade 	bl	800393c <HAL_GetTick>
 8007380:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007382:	e00a      	b.n	800739a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007384:	f7fc fada 	bl	800393c <HAL_GetTick>
 8007388:	4602      	mov	r2, r0
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	1ad3      	subs	r3, r2, r3
 800738e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007392:	4293      	cmp	r3, r2
 8007394:	d901      	bls.n	800739a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007396:	2303      	movs	r3, #3
 8007398:	e140      	b.n	800761c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800739a:	4b46      	ldr	r3, [pc, #280]	; (80074b4 <HAL_RCC_OscConfig+0x4b8>)
 800739c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073a0:	f003 0302 	and.w	r3, r3, #2
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d0ed      	beq.n	8007384 <HAL_RCC_OscConfig+0x388>
 80073a8:	e015      	b.n	80073d6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073aa:	f7fc fac7 	bl	800393c <HAL_GetTick>
 80073ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80073b0:	e00a      	b.n	80073c8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073b2:	f7fc fac3 	bl	800393c <HAL_GetTick>
 80073b6:	4602      	mov	r2, r0
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	1ad3      	subs	r3, r2, r3
 80073bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d901      	bls.n	80073c8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80073c4:	2303      	movs	r3, #3
 80073c6:	e129      	b.n	800761c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80073c8:	4b3a      	ldr	r3, [pc, #232]	; (80074b4 <HAL_RCC_OscConfig+0x4b8>)
 80073ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073ce:	f003 0302 	and.w	r3, r3, #2
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d1ed      	bne.n	80073b2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80073d6:	7ffb      	ldrb	r3, [r7, #31]
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d105      	bne.n	80073e8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073dc:	4b35      	ldr	r3, [pc, #212]	; (80074b4 <HAL_RCC_OscConfig+0x4b8>)
 80073de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073e0:	4a34      	ldr	r2, [pc, #208]	; (80074b4 <HAL_RCC_OscConfig+0x4b8>)
 80073e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073e6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 0320 	and.w	r3, r3, #32
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d03c      	beq.n	800746e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	699b      	ldr	r3, [r3, #24]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d01c      	beq.n	8007436 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80073fc:	4b2d      	ldr	r3, [pc, #180]	; (80074b4 <HAL_RCC_OscConfig+0x4b8>)
 80073fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007402:	4a2c      	ldr	r2, [pc, #176]	; (80074b4 <HAL_RCC_OscConfig+0x4b8>)
 8007404:	f043 0301 	orr.w	r3, r3, #1
 8007408:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800740c:	f7fc fa96 	bl	800393c <HAL_GetTick>
 8007410:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007412:	e008      	b.n	8007426 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007414:	f7fc fa92 	bl	800393c <HAL_GetTick>
 8007418:	4602      	mov	r2, r0
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	1ad3      	subs	r3, r2, r3
 800741e:	2b02      	cmp	r3, #2
 8007420:	d901      	bls.n	8007426 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007422:	2303      	movs	r3, #3
 8007424:	e0fa      	b.n	800761c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007426:	4b23      	ldr	r3, [pc, #140]	; (80074b4 <HAL_RCC_OscConfig+0x4b8>)
 8007428:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800742c:	f003 0302 	and.w	r3, r3, #2
 8007430:	2b00      	cmp	r3, #0
 8007432:	d0ef      	beq.n	8007414 <HAL_RCC_OscConfig+0x418>
 8007434:	e01b      	b.n	800746e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007436:	4b1f      	ldr	r3, [pc, #124]	; (80074b4 <HAL_RCC_OscConfig+0x4b8>)
 8007438:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800743c:	4a1d      	ldr	r2, [pc, #116]	; (80074b4 <HAL_RCC_OscConfig+0x4b8>)
 800743e:	f023 0301 	bic.w	r3, r3, #1
 8007442:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007446:	f7fc fa79 	bl	800393c <HAL_GetTick>
 800744a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800744c:	e008      	b.n	8007460 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800744e:	f7fc fa75 	bl	800393c <HAL_GetTick>
 8007452:	4602      	mov	r2, r0
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	1ad3      	subs	r3, r2, r3
 8007458:	2b02      	cmp	r3, #2
 800745a:	d901      	bls.n	8007460 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800745c:	2303      	movs	r3, #3
 800745e:	e0dd      	b.n	800761c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007460:	4b14      	ldr	r3, [pc, #80]	; (80074b4 <HAL_RCC_OscConfig+0x4b8>)
 8007462:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007466:	f003 0302 	and.w	r3, r3, #2
 800746a:	2b00      	cmp	r3, #0
 800746c:	d1ef      	bne.n	800744e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	69db      	ldr	r3, [r3, #28]
 8007472:	2b00      	cmp	r3, #0
 8007474:	f000 80d1 	beq.w	800761a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007478:	4b0e      	ldr	r3, [pc, #56]	; (80074b4 <HAL_RCC_OscConfig+0x4b8>)
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	f003 030c 	and.w	r3, r3, #12
 8007480:	2b0c      	cmp	r3, #12
 8007482:	f000 808b 	beq.w	800759c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	69db      	ldr	r3, [r3, #28]
 800748a:	2b02      	cmp	r3, #2
 800748c:	d15e      	bne.n	800754c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800748e:	4b09      	ldr	r3, [pc, #36]	; (80074b4 <HAL_RCC_OscConfig+0x4b8>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a08      	ldr	r2, [pc, #32]	; (80074b4 <HAL_RCC_OscConfig+0x4b8>)
 8007494:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007498:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800749a:	f7fc fa4f 	bl	800393c <HAL_GetTick>
 800749e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074a0:	e00c      	b.n	80074bc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074a2:	f7fc fa4b 	bl	800393c <HAL_GetTick>
 80074a6:	4602      	mov	r2, r0
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	1ad3      	subs	r3, r2, r3
 80074ac:	2b02      	cmp	r3, #2
 80074ae:	d905      	bls.n	80074bc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80074b0:	2303      	movs	r3, #3
 80074b2:	e0b3      	b.n	800761c <HAL_RCC_OscConfig+0x620>
 80074b4:	40021000 	.word	0x40021000
 80074b8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074bc:	4b59      	ldr	r3, [pc, #356]	; (8007624 <HAL_RCC_OscConfig+0x628>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d1ec      	bne.n	80074a2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80074c8:	4b56      	ldr	r3, [pc, #344]	; (8007624 <HAL_RCC_OscConfig+0x628>)
 80074ca:	68da      	ldr	r2, [r3, #12]
 80074cc:	4b56      	ldr	r3, [pc, #344]	; (8007628 <HAL_RCC_OscConfig+0x62c>)
 80074ce:	4013      	ands	r3, r2
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	6a11      	ldr	r1, [r2, #32]
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80074d8:	3a01      	subs	r2, #1
 80074da:	0112      	lsls	r2, r2, #4
 80074dc:	4311      	orrs	r1, r2
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80074e2:	0212      	lsls	r2, r2, #8
 80074e4:	4311      	orrs	r1, r2
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80074ea:	0852      	lsrs	r2, r2, #1
 80074ec:	3a01      	subs	r2, #1
 80074ee:	0552      	lsls	r2, r2, #21
 80074f0:	4311      	orrs	r1, r2
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80074f6:	0852      	lsrs	r2, r2, #1
 80074f8:	3a01      	subs	r2, #1
 80074fa:	0652      	lsls	r2, r2, #25
 80074fc:	4311      	orrs	r1, r2
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007502:	06d2      	lsls	r2, r2, #27
 8007504:	430a      	orrs	r2, r1
 8007506:	4947      	ldr	r1, [pc, #284]	; (8007624 <HAL_RCC_OscConfig+0x628>)
 8007508:	4313      	orrs	r3, r2
 800750a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800750c:	4b45      	ldr	r3, [pc, #276]	; (8007624 <HAL_RCC_OscConfig+0x628>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a44      	ldr	r2, [pc, #272]	; (8007624 <HAL_RCC_OscConfig+0x628>)
 8007512:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007516:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007518:	4b42      	ldr	r3, [pc, #264]	; (8007624 <HAL_RCC_OscConfig+0x628>)
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	4a41      	ldr	r2, [pc, #260]	; (8007624 <HAL_RCC_OscConfig+0x628>)
 800751e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007522:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007524:	f7fc fa0a 	bl	800393c <HAL_GetTick>
 8007528:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800752a:	e008      	b.n	800753e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800752c:	f7fc fa06 	bl	800393c <HAL_GetTick>
 8007530:	4602      	mov	r2, r0
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	1ad3      	subs	r3, r2, r3
 8007536:	2b02      	cmp	r3, #2
 8007538:	d901      	bls.n	800753e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800753a:	2303      	movs	r3, #3
 800753c:	e06e      	b.n	800761c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800753e:	4b39      	ldr	r3, [pc, #228]	; (8007624 <HAL_RCC_OscConfig+0x628>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007546:	2b00      	cmp	r3, #0
 8007548:	d0f0      	beq.n	800752c <HAL_RCC_OscConfig+0x530>
 800754a:	e066      	b.n	800761a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800754c:	4b35      	ldr	r3, [pc, #212]	; (8007624 <HAL_RCC_OscConfig+0x628>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a34      	ldr	r2, [pc, #208]	; (8007624 <HAL_RCC_OscConfig+0x628>)
 8007552:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007556:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007558:	4b32      	ldr	r3, [pc, #200]	; (8007624 <HAL_RCC_OscConfig+0x628>)
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	4a31      	ldr	r2, [pc, #196]	; (8007624 <HAL_RCC_OscConfig+0x628>)
 800755e:	f023 0303 	bic.w	r3, r3, #3
 8007562:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007564:	4b2f      	ldr	r3, [pc, #188]	; (8007624 <HAL_RCC_OscConfig+0x628>)
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	4a2e      	ldr	r2, [pc, #184]	; (8007624 <HAL_RCC_OscConfig+0x628>)
 800756a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800756e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007572:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007574:	f7fc f9e2 	bl	800393c <HAL_GetTick>
 8007578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800757a:	e008      	b.n	800758e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800757c:	f7fc f9de 	bl	800393c <HAL_GetTick>
 8007580:	4602      	mov	r2, r0
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	1ad3      	subs	r3, r2, r3
 8007586:	2b02      	cmp	r3, #2
 8007588:	d901      	bls.n	800758e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800758a:	2303      	movs	r3, #3
 800758c:	e046      	b.n	800761c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800758e:	4b25      	ldr	r3, [pc, #148]	; (8007624 <HAL_RCC_OscConfig+0x628>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007596:	2b00      	cmp	r3, #0
 8007598:	d1f0      	bne.n	800757c <HAL_RCC_OscConfig+0x580>
 800759a:	e03e      	b.n	800761a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	69db      	ldr	r3, [r3, #28]
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d101      	bne.n	80075a8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	e039      	b.n	800761c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80075a8:	4b1e      	ldr	r3, [pc, #120]	; (8007624 <HAL_RCC_OscConfig+0x628>)
 80075aa:	68db      	ldr	r3, [r3, #12]
 80075ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	f003 0203 	and.w	r2, r3, #3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6a1b      	ldr	r3, [r3, #32]
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d12c      	bne.n	8007616 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c6:	3b01      	subs	r3, #1
 80075c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d123      	bne.n	8007616 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80075da:	429a      	cmp	r2, r3
 80075dc:	d11b      	bne.n	8007616 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d113      	bne.n	8007616 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f8:	085b      	lsrs	r3, r3, #1
 80075fa:	3b01      	subs	r3, #1
 80075fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80075fe:	429a      	cmp	r2, r3
 8007600:	d109      	bne.n	8007616 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800760c:	085b      	lsrs	r3, r3, #1
 800760e:	3b01      	subs	r3, #1
 8007610:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007612:	429a      	cmp	r2, r3
 8007614:	d001      	beq.n	800761a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	e000      	b.n	800761c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800761a:	2300      	movs	r3, #0
}
 800761c:	4618      	mov	r0, r3
 800761e:	3720      	adds	r7, #32
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}
 8007624:	40021000 	.word	0x40021000
 8007628:	019f800c 	.word	0x019f800c

0800762c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b086      	sub	sp, #24
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007636:	2300      	movs	r3, #0
 8007638:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d101      	bne.n	8007644 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	e11e      	b.n	8007882 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007644:	4b91      	ldr	r3, [pc, #580]	; (800788c <HAL_RCC_ClockConfig+0x260>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f003 030f 	and.w	r3, r3, #15
 800764c:	683a      	ldr	r2, [r7, #0]
 800764e:	429a      	cmp	r2, r3
 8007650:	d910      	bls.n	8007674 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007652:	4b8e      	ldr	r3, [pc, #568]	; (800788c <HAL_RCC_ClockConfig+0x260>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f023 020f 	bic.w	r2, r3, #15
 800765a:	498c      	ldr	r1, [pc, #560]	; (800788c <HAL_RCC_ClockConfig+0x260>)
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	4313      	orrs	r3, r2
 8007660:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007662:	4b8a      	ldr	r3, [pc, #552]	; (800788c <HAL_RCC_ClockConfig+0x260>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f003 030f 	and.w	r3, r3, #15
 800766a:	683a      	ldr	r2, [r7, #0]
 800766c:	429a      	cmp	r2, r3
 800766e:	d001      	beq.n	8007674 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	e106      	b.n	8007882 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f003 0301 	and.w	r3, r3, #1
 800767c:	2b00      	cmp	r3, #0
 800767e:	d073      	beq.n	8007768 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	2b03      	cmp	r3, #3
 8007686:	d129      	bne.n	80076dc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007688:	4b81      	ldr	r3, [pc, #516]	; (8007890 <HAL_RCC_ClockConfig+0x264>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007690:	2b00      	cmp	r3, #0
 8007692:	d101      	bne.n	8007698 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	e0f4      	b.n	8007882 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007698:	f000 fa14 	bl	8007ac4 <RCC_GetSysClockFreqFromPLLSource>
 800769c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	4a7c      	ldr	r2, [pc, #496]	; (8007894 <HAL_RCC_ClockConfig+0x268>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d93f      	bls.n	8007726 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80076a6:	4b7a      	ldr	r3, [pc, #488]	; (8007890 <HAL_RCC_ClockConfig+0x264>)
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d009      	beq.n	80076c6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d033      	beq.n	8007726 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d12f      	bne.n	8007726 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80076c6:	4b72      	ldr	r3, [pc, #456]	; (8007890 <HAL_RCC_ClockConfig+0x264>)
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80076ce:	4a70      	ldr	r2, [pc, #448]	; (8007890 <HAL_RCC_ClockConfig+0x264>)
 80076d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076d4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80076d6:	2380      	movs	r3, #128	; 0x80
 80076d8:	617b      	str	r3, [r7, #20]
 80076da:	e024      	b.n	8007726 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	2b02      	cmp	r3, #2
 80076e2:	d107      	bne.n	80076f4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80076e4:	4b6a      	ldr	r3, [pc, #424]	; (8007890 <HAL_RCC_ClockConfig+0x264>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d109      	bne.n	8007704 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	e0c6      	b.n	8007882 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80076f4:	4b66      	ldr	r3, [pc, #408]	; (8007890 <HAL_RCC_ClockConfig+0x264>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d101      	bne.n	8007704 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	e0be      	b.n	8007882 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007704:	f000 f914 	bl	8007930 <HAL_RCC_GetSysClockFreq>
 8007708:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	4a61      	ldr	r2, [pc, #388]	; (8007894 <HAL_RCC_ClockConfig+0x268>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d909      	bls.n	8007726 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007712:	4b5f      	ldr	r3, [pc, #380]	; (8007890 <HAL_RCC_ClockConfig+0x264>)
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800771a:	4a5d      	ldr	r2, [pc, #372]	; (8007890 <HAL_RCC_ClockConfig+0x264>)
 800771c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007720:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007722:	2380      	movs	r3, #128	; 0x80
 8007724:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007726:	4b5a      	ldr	r3, [pc, #360]	; (8007890 <HAL_RCC_ClockConfig+0x264>)
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	f023 0203 	bic.w	r2, r3, #3
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	4957      	ldr	r1, [pc, #348]	; (8007890 <HAL_RCC_ClockConfig+0x264>)
 8007734:	4313      	orrs	r3, r2
 8007736:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007738:	f7fc f900 	bl	800393c <HAL_GetTick>
 800773c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800773e:	e00a      	b.n	8007756 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007740:	f7fc f8fc 	bl	800393c <HAL_GetTick>
 8007744:	4602      	mov	r2, r0
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	1ad3      	subs	r3, r2, r3
 800774a:	f241 3288 	movw	r2, #5000	; 0x1388
 800774e:	4293      	cmp	r3, r2
 8007750:	d901      	bls.n	8007756 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007752:	2303      	movs	r3, #3
 8007754:	e095      	b.n	8007882 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007756:	4b4e      	ldr	r3, [pc, #312]	; (8007890 <HAL_RCC_ClockConfig+0x264>)
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	f003 020c 	and.w	r2, r3, #12
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	429a      	cmp	r2, r3
 8007766:	d1eb      	bne.n	8007740 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f003 0302 	and.w	r3, r3, #2
 8007770:	2b00      	cmp	r3, #0
 8007772:	d023      	beq.n	80077bc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f003 0304 	and.w	r3, r3, #4
 800777c:	2b00      	cmp	r3, #0
 800777e:	d005      	beq.n	800778c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007780:	4b43      	ldr	r3, [pc, #268]	; (8007890 <HAL_RCC_ClockConfig+0x264>)
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	4a42      	ldr	r2, [pc, #264]	; (8007890 <HAL_RCC_ClockConfig+0x264>)
 8007786:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800778a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f003 0308 	and.w	r3, r3, #8
 8007794:	2b00      	cmp	r3, #0
 8007796:	d007      	beq.n	80077a8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007798:	4b3d      	ldr	r3, [pc, #244]	; (8007890 <HAL_RCC_ClockConfig+0x264>)
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80077a0:	4a3b      	ldr	r2, [pc, #236]	; (8007890 <HAL_RCC_ClockConfig+0x264>)
 80077a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80077a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077a8:	4b39      	ldr	r3, [pc, #228]	; (8007890 <HAL_RCC_ClockConfig+0x264>)
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	4936      	ldr	r1, [pc, #216]	; (8007890 <HAL_RCC_ClockConfig+0x264>)
 80077b6:	4313      	orrs	r3, r2
 80077b8:	608b      	str	r3, [r1, #8]
 80077ba:	e008      	b.n	80077ce <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	2b80      	cmp	r3, #128	; 0x80
 80077c0:	d105      	bne.n	80077ce <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80077c2:	4b33      	ldr	r3, [pc, #204]	; (8007890 <HAL_RCC_ClockConfig+0x264>)
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	4a32      	ldr	r2, [pc, #200]	; (8007890 <HAL_RCC_ClockConfig+0x264>)
 80077c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80077cc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80077ce:	4b2f      	ldr	r3, [pc, #188]	; (800788c <HAL_RCC_ClockConfig+0x260>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f003 030f 	and.w	r3, r3, #15
 80077d6:	683a      	ldr	r2, [r7, #0]
 80077d8:	429a      	cmp	r2, r3
 80077da:	d21d      	bcs.n	8007818 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077dc:	4b2b      	ldr	r3, [pc, #172]	; (800788c <HAL_RCC_ClockConfig+0x260>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f023 020f 	bic.w	r2, r3, #15
 80077e4:	4929      	ldr	r1, [pc, #164]	; (800788c <HAL_RCC_ClockConfig+0x260>)
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	4313      	orrs	r3, r2
 80077ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80077ec:	f7fc f8a6 	bl	800393c <HAL_GetTick>
 80077f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077f2:	e00a      	b.n	800780a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077f4:	f7fc f8a2 	bl	800393c <HAL_GetTick>
 80077f8:	4602      	mov	r2, r0
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	1ad3      	subs	r3, r2, r3
 80077fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007802:	4293      	cmp	r3, r2
 8007804:	d901      	bls.n	800780a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007806:	2303      	movs	r3, #3
 8007808:	e03b      	b.n	8007882 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800780a:	4b20      	ldr	r3, [pc, #128]	; (800788c <HAL_RCC_ClockConfig+0x260>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f003 030f 	and.w	r3, r3, #15
 8007812:	683a      	ldr	r2, [r7, #0]
 8007814:	429a      	cmp	r2, r3
 8007816:	d1ed      	bne.n	80077f4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f003 0304 	and.w	r3, r3, #4
 8007820:	2b00      	cmp	r3, #0
 8007822:	d008      	beq.n	8007836 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007824:	4b1a      	ldr	r3, [pc, #104]	; (8007890 <HAL_RCC_ClockConfig+0x264>)
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	4917      	ldr	r1, [pc, #92]	; (8007890 <HAL_RCC_ClockConfig+0x264>)
 8007832:	4313      	orrs	r3, r2
 8007834:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f003 0308 	and.w	r3, r3, #8
 800783e:	2b00      	cmp	r3, #0
 8007840:	d009      	beq.n	8007856 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007842:	4b13      	ldr	r3, [pc, #76]	; (8007890 <HAL_RCC_ClockConfig+0x264>)
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	691b      	ldr	r3, [r3, #16]
 800784e:	00db      	lsls	r3, r3, #3
 8007850:	490f      	ldr	r1, [pc, #60]	; (8007890 <HAL_RCC_ClockConfig+0x264>)
 8007852:	4313      	orrs	r3, r2
 8007854:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007856:	f000 f86b 	bl	8007930 <HAL_RCC_GetSysClockFreq>
 800785a:	4602      	mov	r2, r0
 800785c:	4b0c      	ldr	r3, [pc, #48]	; (8007890 <HAL_RCC_ClockConfig+0x264>)
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	091b      	lsrs	r3, r3, #4
 8007862:	f003 030f 	and.w	r3, r3, #15
 8007866:	490c      	ldr	r1, [pc, #48]	; (8007898 <HAL_RCC_ClockConfig+0x26c>)
 8007868:	5ccb      	ldrb	r3, [r1, r3]
 800786a:	f003 031f 	and.w	r3, r3, #31
 800786e:	fa22 f303 	lsr.w	r3, r2, r3
 8007872:	4a0a      	ldr	r2, [pc, #40]	; (800789c <HAL_RCC_ClockConfig+0x270>)
 8007874:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007876:	4b0a      	ldr	r3, [pc, #40]	; (80078a0 <HAL_RCC_ClockConfig+0x274>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4618      	mov	r0, r3
 800787c:	f7fb fc4a 	bl	8003114 <HAL_InitTick>
 8007880:	4603      	mov	r3, r0
}
 8007882:	4618      	mov	r0, r3
 8007884:	3718      	adds	r7, #24
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	40022000 	.word	0x40022000
 8007890:	40021000 	.word	0x40021000
 8007894:	04c4b400 	.word	0x04c4b400
 8007898:	0800f368 	.word	0x0800f368
 800789c:	200002d8 	.word	0x200002d8
 80078a0:	200002dc 	.word	0x200002dc

080078a4 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b08c      	sub	sp, #48	; 0x30
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	60f8      	str	r0, [r7, #12]
 80078ac:	60b9      	str	r1, [r7, #8]
 80078ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 80078b0:	2302      	movs	r3, #2
 80078b2:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80078b4:	2303      	movs	r3, #3
 80078b6:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 80078b8:	2300      	movs	r3, #0
 80078ba:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	0c1b      	lsrs	r3, r3, #16
 80078c8:	f003 030f 	and.w	r3, r3, #15
 80078cc:	f503 1390 	add.w	r3, r3, #1179648	; 0x120000
 80078d0:	029b      	lsls	r3, r3, #10
 80078d2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	0c1b      	lsrs	r3, r3, #16
 80078d8:	f003 030f 	and.w	r3, r3, #15
 80078dc:	627b      	str	r3, [r7, #36]	; 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 80078de:	4b13      	ldr	r3, [pc, #76]	; (800792c <HAL_RCC_MCOConfig+0x88>)
 80078e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80078e2:	2101      	movs	r1, #1
 80078e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e6:	fa01 f303 	lsl.w	r3, r1, r3
 80078ea:	4910      	ldr	r1, [pc, #64]	; (800792c <HAL_RCC_MCOConfig+0x88>)
 80078ec:	4313      	orrs	r3, r2
 80078ee:	64cb      	str	r3, [r1, #76]	; 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	0d1b      	lsrs	r3, r3, #20
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 80078fe:	f107 0310 	add.w	r3, r7, #16
 8007902:	4619      	mov	r1, r3
 8007904:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007906:	f7ff f92b 	bl	8006b60 <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 800790a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800790c:	2b00      	cmp	r3, #0
 800790e:	d109      	bne.n	8007924 <HAL_RCC_MCOConfig+0x80>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 8007910:	4b06      	ldr	r3, [pc, #24]	; (800792c <HAL_RCC_MCOConfig+0x88>)
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007918:	68b9      	ldr	r1, [r7, #8]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	430b      	orrs	r3, r1
 800791e:	4903      	ldr	r1, [pc, #12]	; (800792c <HAL_RCC_MCOConfig+0x88>)
 8007920:	4313      	orrs	r3, r2
 8007922:	608b      	str	r3, [r1, #8]
  }
}
 8007924:	bf00      	nop
 8007926:	3730      	adds	r7, #48	; 0x30
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}
 800792c:	40021000 	.word	0x40021000

08007930 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007930:	b480      	push	{r7}
 8007932:	b087      	sub	sp, #28
 8007934:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007936:	4b2c      	ldr	r3, [pc, #176]	; (80079e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	f003 030c 	and.w	r3, r3, #12
 800793e:	2b04      	cmp	r3, #4
 8007940:	d102      	bne.n	8007948 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007942:	4b2a      	ldr	r3, [pc, #168]	; (80079ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8007944:	613b      	str	r3, [r7, #16]
 8007946:	e047      	b.n	80079d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007948:	4b27      	ldr	r3, [pc, #156]	; (80079e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	f003 030c 	and.w	r3, r3, #12
 8007950:	2b08      	cmp	r3, #8
 8007952:	d102      	bne.n	800795a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007954:	4b25      	ldr	r3, [pc, #148]	; (80079ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8007956:	613b      	str	r3, [r7, #16]
 8007958:	e03e      	b.n	80079d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800795a:	4b23      	ldr	r3, [pc, #140]	; (80079e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	f003 030c 	and.w	r3, r3, #12
 8007962:	2b0c      	cmp	r3, #12
 8007964:	d136      	bne.n	80079d4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007966:	4b20      	ldr	r3, [pc, #128]	; (80079e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007968:	68db      	ldr	r3, [r3, #12]
 800796a:	f003 0303 	and.w	r3, r3, #3
 800796e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007970:	4b1d      	ldr	r3, [pc, #116]	; (80079e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007972:	68db      	ldr	r3, [r3, #12]
 8007974:	091b      	lsrs	r3, r3, #4
 8007976:	f003 030f 	and.w	r3, r3, #15
 800797a:	3301      	adds	r3, #1
 800797c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2b03      	cmp	r3, #3
 8007982:	d10c      	bne.n	800799e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007984:	4a19      	ldr	r2, [pc, #100]	; (80079ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	fbb2 f3f3 	udiv	r3, r2, r3
 800798c:	4a16      	ldr	r2, [pc, #88]	; (80079e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800798e:	68d2      	ldr	r2, [r2, #12]
 8007990:	0a12      	lsrs	r2, r2, #8
 8007992:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007996:	fb02 f303 	mul.w	r3, r2, r3
 800799a:	617b      	str	r3, [r7, #20]
      break;
 800799c:	e00c      	b.n	80079b8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800799e:	4a13      	ldr	r2, [pc, #76]	; (80079ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80079a6:	4a10      	ldr	r2, [pc, #64]	; (80079e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80079a8:	68d2      	ldr	r2, [r2, #12]
 80079aa:	0a12      	lsrs	r2, r2, #8
 80079ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80079b0:	fb02 f303 	mul.w	r3, r2, r3
 80079b4:	617b      	str	r3, [r7, #20]
      break;
 80079b6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80079b8:	4b0b      	ldr	r3, [pc, #44]	; (80079e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80079ba:	68db      	ldr	r3, [r3, #12]
 80079bc:	0e5b      	lsrs	r3, r3, #25
 80079be:	f003 0303 	and.w	r3, r3, #3
 80079c2:	3301      	adds	r3, #1
 80079c4:	005b      	lsls	r3, r3, #1
 80079c6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80079c8:	697a      	ldr	r2, [r7, #20]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80079d0:	613b      	str	r3, [r7, #16]
 80079d2:	e001      	b.n	80079d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80079d4:	2300      	movs	r3, #0
 80079d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80079d8:	693b      	ldr	r3, [r7, #16]
}
 80079da:	4618      	mov	r0, r3
 80079dc:	371c      	adds	r7, #28
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr
 80079e6:	bf00      	nop
 80079e8:	40021000 	.word	0x40021000
 80079ec:	00f42400 	.word	0x00f42400

080079f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80079f0:	b480      	push	{r7}
 80079f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80079f4:	4b03      	ldr	r3, [pc, #12]	; (8007a04 <HAL_RCC_GetHCLKFreq+0x14>)
 80079f6:	681b      	ldr	r3, [r3, #0]
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr
 8007a02:	bf00      	nop
 8007a04:	200002d8 	.word	0x200002d8

08007a08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007a0c:	f7ff fff0 	bl	80079f0 <HAL_RCC_GetHCLKFreq>
 8007a10:	4602      	mov	r2, r0
 8007a12:	4b06      	ldr	r3, [pc, #24]	; (8007a2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	0a1b      	lsrs	r3, r3, #8
 8007a18:	f003 0307 	and.w	r3, r3, #7
 8007a1c:	4904      	ldr	r1, [pc, #16]	; (8007a30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007a1e:	5ccb      	ldrb	r3, [r1, r3]
 8007a20:	f003 031f 	and.w	r3, r3, #31
 8007a24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	bd80      	pop	{r7, pc}
 8007a2c:	40021000 	.word	0x40021000
 8007a30:	0800f378 	.word	0x0800f378

08007a34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007a38:	f7ff ffda 	bl	80079f0 <HAL_RCC_GetHCLKFreq>
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	4b06      	ldr	r3, [pc, #24]	; (8007a58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	0adb      	lsrs	r3, r3, #11
 8007a44:	f003 0307 	and.w	r3, r3, #7
 8007a48:	4904      	ldr	r1, [pc, #16]	; (8007a5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8007a4a:	5ccb      	ldrb	r3, [r1, r3]
 8007a4c:	f003 031f 	and.w	r3, r3, #31
 8007a50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	40021000 	.word	0x40021000
 8007a5c:	0800f378 	.word	0x0800f378

08007a60 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b083      	sub	sp, #12
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	220f      	movs	r2, #15
 8007a6e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8007a70:	4b12      	ldr	r3, [pc, #72]	; (8007abc <HAL_RCC_GetClockConfig+0x5c>)
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	f003 0203 	and.w	r2, r3, #3
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8007a7c:	4b0f      	ldr	r3, [pc, #60]	; (8007abc <HAL_RCC_GetClockConfig+0x5c>)
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8007a88:	4b0c      	ldr	r3, [pc, #48]	; (8007abc <HAL_RCC_GetClockConfig+0x5c>)
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8007a94:	4b09      	ldr	r3, [pc, #36]	; (8007abc <HAL_RCC_GetClockConfig+0x5c>)
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	08db      	lsrs	r3, r3, #3
 8007a9a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8007aa2:	4b07      	ldr	r3, [pc, #28]	; (8007ac0 <HAL_RCC_GetClockConfig+0x60>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f003 020f 	and.w	r2, r3, #15
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	601a      	str	r2, [r3, #0]
}
 8007aae:	bf00      	nop
 8007ab0:	370c      	adds	r7, #12
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr
 8007aba:	bf00      	nop
 8007abc:	40021000 	.word	0x40021000
 8007ac0:	40022000 	.word	0x40022000

08007ac4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b087      	sub	sp, #28
 8007ac8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007aca:	4b1e      	ldr	r3, [pc, #120]	; (8007b44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007acc:	68db      	ldr	r3, [r3, #12]
 8007ace:	f003 0303 	and.w	r3, r3, #3
 8007ad2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007ad4:	4b1b      	ldr	r3, [pc, #108]	; (8007b44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	091b      	lsrs	r3, r3, #4
 8007ada:	f003 030f 	and.w	r3, r3, #15
 8007ade:	3301      	adds	r3, #1
 8007ae0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	2b03      	cmp	r3, #3
 8007ae6:	d10c      	bne.n	8007b02 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007ae8:	4a17      	ldr	r2, [pc, #92]	; (8007b48 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8007af0:	4a14      	ldr	r2, [pc, #80]	; (8007b44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007af2:	68d2      	ldr	r2, [r2, #12]
 8007af4:	0a12      	lsrs	r2, r2, #8
 8007af6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007afa:	fb02 f303 	mul.w	r3, r2, r3
 8007afe:	617b      	str	r3, [r7, #20]
    break;
 8007b00:	e00c      	b.n	8007b1c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007b02:	4a11      	ldr	r2, [pc, #68]	; (8007b48 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b0a:	4a0e      	ldr	r2, [pc, #56]	; (8007b44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007b0c:	68d2      	ldr	r2, [r2, #12]
 8007b0e:	0a12      	lsrs	r2, r2, #8
 8007b10:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007b14:	fb02 f303 	mul.w	r3, r2, r3
 8007b18:	617b      	str	r3, [r7, #20]
    break;
 8007b1a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007b1c:	4b09      	ldr	r3, [pc, #36]	; (8007b44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	0e5b      	lsrs	r3, r3, #25
 8007b22:	f003 0303 	and.w	r3, r3, #3
 8007b26:	3301      	adds	r3, #1
 8007b28:	005b      	lsls	r3, r3, #1
 8007b2a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007b2c:	697a      	ldr	r2, [r7, #20]
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b34:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007b36:	687b      	ldr	r3, [r7, #4]
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	371c      	adds	r7, #28
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr
 8007b44:	40021000 	.word	0x40021000
 8007b48:	00f42400 	.word	0x00f42400

08007b4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b086      	sub	sp, #24
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007b54:	2300      	movs	r3, #0
 8007b56:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007b58:	2300      	movs	r3, #0
 8007b5a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	f000 8098 	beq.w	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b6e:	4b43      	ldr	r3, [pc, #268]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d10d      	bne.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b7a:	4b40      	ldr	r3, [pc, #256]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b7e:	4a3f      	ldr	r2, [pc, #252]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b84:	6593      	str	r3, [r2, #88]	; 0x58
 8007b86:	4b3d      	ldr	r3, [pc, #244]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b8e:	60bb      	str	r3, [r7, #8]
 8007b90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b92:	2301      	movs	r3, #1
 8007b94:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b96:	4b3a      	ldr	r3, [pc, #232]	; (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a39      	ldr	r2, [pc, #228]	; (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ba0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007ba2:	f7fb fecb 	bl	800393c <HAL_GetTick>
 8007ba6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ba8:	e009      	b.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007baa:	f7fb fec7 	bl	800393c <HAL_GetTick>
 8007bae:	4602      	mov	r2, r0
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	1ad3      	subs	r3, r2, r3
 8007bb4:	2b02      	cmp	r3, #2
 8007bb6:	d902      	bls.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007bb8:	2303      	movs	r3, #3
 8007bba:	74fb      	strb	r3, [r7, #19]
        break;
 8007bbc:	e005      	b.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007bbe:	4b30      	ldr	r3, [pc, #192]	; (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d0ef      	beq.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007bca:	7cfb      	ldrb	r3, [r7, #19]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d159      	bne.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007bd0:	4b2a      	ldr	r3, [pc, #168]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bda:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d01e      	beq.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007be6:	697a      	ldr	r2, [r7, #20]
 8007be8:	429a      	cmp	r2, r3
 8007bea:	d019      	beq.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007bec:	4b23      	ldr	r3, [pc, #140]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bf6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007bf8:	4b20      	ldr	r3, [pc, #128]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bfe:	4a1f      	ldr	r2, [pc, #124]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007c08:	4b1c      	ldr	r3, [pc, #112]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c0e:	4a1b      	ldr	r2, [pc, #108]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007c18:	4a18      	ldr	r2, [pc, #96]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	f003 0301 	and.w	r3, r3, #1
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d016      	beq.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c2a:	f7fb fe87 	bl	800393c <HAL_GetTick>
 8007c2e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c30:	e00b      	b.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c32:	f7fb fe83 	bl	800393c <HAL_GetTick>
 8007c36:	4602      	mov	r2, r0
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	1ad3      	subs	r3, r2, r3
 8007c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d902      	bls.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007c44:	2303      	movs	r3, #3
 8007c46:	74fb      	strb	r3, [r7, #19]
            break;
 8007c48:	e006      	b.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c4a:	4b0c      	ldr	r3, [pc, #48]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c50:	f003 0302 	and.w	r3, r3, #2
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d0ec      	beq.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007c58:	7cfb      	ldrb	r3, [r7, #19]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d10b      	bne.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c5e:	4b07      	ldr	r3, [pc, #28]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c6c:	4903      	ldr	r1, [pc, #12]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007c74:	e008      	b.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007c76:	7cfb      	ldrb	r3, [r7, #19]
 8007c78:	74bb      	strb	r3, [r7, #18]
 8007c7a:	e005      	b.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007c7c:	40021000 	.word	0x40021000
 8007c80:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c84:	7cfb      	ldrb	r3, [r7, #19]
 8007c86:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007c88:	7c7b      	ldrb	r3, [r7, #17]
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d105      	bne.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c8e:	4ba6      	ldr	r3, [pc, #664]	; (8007f28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c92:	4aa5      	ldr	r2, [pc, #660]	; (8007f28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007c94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c98:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f003 0301 	and.w	r3, r3, #1
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d00a      	beq.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007ca6:	4ba0      	ldr	r3, [pc, #640]	; (8007f28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cac:	f023 0203 	bic.w	r2, r3, #3
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	499c      	ldr	r1, [pc, #624]	; (8007f28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f003 0302 	and.w	r3, r3, #2
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d00a      	beq.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007cc8:	4b97      	ldr	r3, [pc, #604]	; (8007f28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cce:	f023 020c 	bic.w	r2, r3, #12
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	4994      	ldr	r1, [pc, #592]	; (8007f28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f003 0304 	and.w	r3, r3, #4
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d00a      	beq.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007cea:	4b8f      	ldr	r3, [pc, #572]	; (8007f28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cf0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	498b      	ldr	r1, [pc, #556]	; (8007f28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f003 0308 	and.w	r3, r3, #8
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d00a      	beq.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007d0c:	4b86      	ldr	r3, [pc, #536]	; (8007f28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d12:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	691b      	ldr	r3, [r3, #16]
 8007d1a:	4983      	ldr	r1, [pc, #524]	; (8007f28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f003 0320 	and.w	r3, r3, #32
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d00a      	beq.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007d2e:	4b7e      	ldr	r3, [pc, #504]	; (8007f28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d34:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	695b      	ldr	r3, [r3, #20]
 8007d3c:	497a      	ldr	r1, [pc, #488]	; (8007f28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d00a      	beq.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007d50:	4b75      	ldr	r3, [pc, #468]	; (8007f28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d56:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	699b      	ldr	r3, [r3, #24]
 8007d5e:	4972      	ldr	r1, [pc, #456]	; (8007f28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d60:	4313      	orrs	r3, r2
 8007d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d00a      	beq.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007d72:	4b6d      	ldr	r3, [pc, #436]	; (8007f28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d78:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	69db      	ldr	r3, [r3, #28]
 8007d80:	4969      	ldr	r1, [pc, #420]	; (8007f28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d82:	4313      	orrs	r3, r2
 8007d84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d00a      	beq.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007d94:	4b64      	ldr	r3, [pc, #400]	; (8007f28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d9a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6a1b      	ldr	r3, [r3, #32]
 8007da2:	4961      	ldr	r1, [pc, #388]	; (8007f28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007da4:	4313      	orrs	r3, r2
 8007da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d00a      	beq.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007db6:	4b5c      	ldr	r3, [pc, #368]	; (8007f28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dbc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc4:	4958      	ldr	r1, [pc, #352]	; (8007f28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d015      	beq.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007dd8:	4b53      	ldr	r3, [pc, #332]	; (8007f28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dde:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de6:	4950      	ldr	r1, [pc, #320]	; (8007f28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007de8:	4313      	orrs	r3, r2
 8007dea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007df2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007df6:	d105      	bne.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007df8:	4b4b      	ldr	r3, [pc, #300]	; (8007f28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	4a4a      	ldr	r2, [pc, #296]	; (8007f28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007dfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e02:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d015      	beq.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007e10:	4b45      	ldr	r3, [pc, #276]	; (8007f28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e16:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e1e:	4942      	ldr	r1, [pc, #264]	; (8007f28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e20:	4313      	orrs	r3, r2
 8007e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e2e:	d105      	bne.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e30:	4b3d      	ldr	r3, [pc, #244]	; (8007f28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	4a3c      	ldr	r2, [pc, #240]	; (8007f28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e3a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d015      	beq.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007e48:	4b37      	ldr	r3, [pc, #220]	; (8007f28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e4e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e56:	4934      	ldr	r1, [pc, #208]	; (8007f28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e62:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007e66:	d105      	bne.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e68:	4b2f      	ldr	r3, [pc, #188]	; (8007f28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e6a:	68db      	ldr	r3, [r3, #12]
 8007e6c:	4a2e      	ldr	r2, [pc, #184]	; (8007f28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e72:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d015      	beq.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007e80:	4b29      	ldr	r3, [pc, #164]	; (8007f28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e86:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e8e:	4926      	ldr	r1, [pc, #152]	; (8007f28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007e90:	4313      	orrs	r3, r2
 8007e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e9e:	d105      	bne.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ea0:	4b21      	ldr	r3, [pc, #132]	; (8007f28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	4a20      	ldr	r2, [pc, #128]	; (8007f28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ea6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007eaa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d015      	beq.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007eb8:	4b1b      	ldr	r3, [pc, #108]	; (8007f28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ebe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ec6:	4918      	ldr	r1, [pc, #96]	; (8007f28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ed6:	d105      	bne.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ed8:	4b13      	ldr	r3, [pc, #76]	; (8007f28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	4a12      	ldr	r2, [pc, #72]	; (8007f28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ede:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ee2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d015      	beq.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007ef0:	4b0d      	ldr	r3, [pc, #52]	; (8007f28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ef6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007efe:	490a      	ldr	r1, [pc, #40]	; (8007f28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f00:	4313      	orrs	r3, r2
 8007f02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f0e:	d105      	bne.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007f10:	4b05      	ldr	r3, [pc, #20]	; (8007f28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	4a04      	ldr	r2, [pc, #16]	; (8007f28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007f16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f1a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007f1c:	7cbb      	ldrb	r3, [r7, #18]
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3718      	adds	r7, #24
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop
 8007f28:	40021000 	.word	0x40021000

08007f2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d101      	bne.n	8007f3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e09d      	b.n	800807a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d108      	bne.n	8007f58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f4e:	d009      	beq.n	8007f64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	61da      	str	r2, [r3, #28]
 8007f56:	e005      	b.n	8007f64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2200      	movs	r2, #0
 8007f62:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d106      	bne.n	8007f84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f7fa ff62 	bl	8002e48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2202      	movs	r2, #2
 8007f88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f9a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007fa4:	d902      	bls.n	8007fac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	60fb      	str	r3, [r7, #12]
 8007faa:	e002      	b.n	8007fb2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007fac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007fb0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	68db      	ldr	r3, [r3, #12]
 8007fb6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007fba:	d007      	beq.n	8007fcc <HAL_SPI_Init+0xa0>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	68db      	ldr	r3, [r3, #12]
 8007fc0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007fc4:	d002      	beq.n	8007fcc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007fdc:	431a      	orrs	r2, r3
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	691b      	ldr	r3, [r3, #16]
 8007fe2:	f003 0302 	and.w	r3, r3, #2
 8007fe6:	431a      	orrs	r2, r3
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	695b      	ldr	r3, [r3, #20]
 8007fec:	f003 0301 	and.w	r3, r3, #1
 8007ff0:	431a      	orrs	r2, r3
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	699b      	ldr	r3, [r3, #24]
 8007ff6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ffa:	431a      	orrs	r2, r3
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	69db      	ldr	r3, [r3, #28]
 8008000:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008004:	431a      	orrs	r2, r3
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6a1b      	ldr	r3, [r3, #32]
 800800a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800800e:	ea42 0103 	orr.w	r1, r2, r3
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008016:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	430a      	orrs	r2, r1
 8008020:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	699b      	ldr	r3, [r3, #24]
 8008026:	0c1b      	lsrs	r3, r3, #16
 8008028:	f003 0204 	and.w	r2, r3, #4
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008030:	f003 0310 	and.w	r3, r3, #16
 8008034:	431a      	orrs	r2, r3
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800803a:	f003 0308 	and.w	r3, r3, #8
 800803e:	431a      	orrs	r2, r3
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	68db      	ldr	r3, [r3, #12]
 8008044:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008048:	ea42 0103 	orr.w	r1, r2, r3
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	430a      	orrs	r2, r1
 8008058:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	69da      	ldr	r2, [r3, #28]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008068:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2201      	movs	r2, #1
 8008074:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008078:	2300      	movs	r3, #0
}
 800807a:	4618      	mov	r0, r3
 800807c:	3710      	adds	r7, #16
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
	...

08008084 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b088      	sub	sp, #32
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800809c:	69bb      	ldr	r3, [r7, #24]
 800809e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d10e      	bne.n	80080c4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80080a6:	69bb      	ldr	r3, [r7, #24]
 80080a8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d009      	beq.n	80080c4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d004      	beq.n	80080c4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	4798      	blx	r3
    return;
 80080c2:	e0ce      	b.n	8008262 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80080c4:	69bb      	ldr	r3, [r7, #24]
 80080c6:	f003 0302 	and.w	r3, r3, #2
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d009      	beq.n	80080e2 <HAL_SPI_IRQHandler+0x5e>
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d004      	beq.n	80080e2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	4798      	blx	r3
    return;
 80080e0:	e0bf      	b.n	8008262 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80080e2:	69bb      	ldr	r3, [r7, #24]
 80080e4:	f003 0320 	and.w	r3, r3, #32
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d10a      	bne.n	8008102 <HAL_SPI_IRQHandler+0x7e>
 80080ec:	69bb      	ldr	r3, [r7, #24]
 80080ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d105      	bne.n	8008102 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80080f6:	69bb      	ldr	r3, [r7, #24]
 80080f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	f000 80b0 	beq.w	8008262 <HAL_SPI_IRQHandler+0x1de>
 8008102:	69fb      	ldr	r3, [r7, #28]
 8008104:	f003 0320 	and.w	r3, r3, #32
 8008108:	2b00      	cmp	r3, #0
 800810a:	f000 80aa 	beq.w	8008262 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800810e:	69bb      	ldr	r3, [r7, #24]
 8008110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008114:	2b00      	cmp	r3, #0
 8008116:	d023      	beq.n	8008160 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800811e:	b2db      	uxtb	r3, r3
 8008120:	2b03      	cmp	r3, #3
 8008122:	d011      	beq.n	8008148 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008128:	f043 0204 	orr.w	r2, r3, #4
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008130:	2300      	movs	r3, #0
 8008132:	617b      	str	r3, [r7, #20]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	617b      	str	r3, [r7, #20]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	689b      	ldr	r3, [r3, #8]
 8008142:	617b      	str	r3, [r7, #20]
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	e00b      	b.n	8008160 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008148:	2300      	movs	r3, #0
 800814a:	613b      	str	r3, [r7, #16]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	68db      	ldr	r3, [r3, #12]
 8008152:	613b      	str	r3, [r7, #16]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	613b      	str	r3, [r7, #16]
 800815c:	693b      	ldr	r3, [r7, #16]
        return;
 800815e:	e080      	b.n	8008262 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008160:	69bb      	ldr	r3, [r7, #24]
 8008162:	f003 0320 	and.w	r3, r3, #32
 8008166:	2b00      	cmp	r3, #0
 8008168:	d014      	beq.n	8008194 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800816e:	f043 0201 	orr.w	r2, r3, #1
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008176:	2300      	movs	r3, #0
 8008178:	60fb      	str	r3, [r7, #12]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	689b      	ldr	r3, [r3, #8]
 8008180:	60fb      	str	r3, [r7, #12]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	681a      	ldr	r2, [r3, #0]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008190:	601a      	str	r2, [r3, #0]
 8008192:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008194:	69bb      	ldr	r3, [r7, #24]
 8008196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800819a:	2b00      	cmp	r3, #0
 800819c:	d00c      	beq.n	80081b8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081a2:	f043 0208 	orr.w	r2, r3, #8
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80081aa:	2300      	movs	r3, #0
 80081ac:	60bb      	str	r3, [r7, #8]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	60bb      	str	r3, [r7, #8]
 80081b6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d04f      	beq.n	8008260 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	685a      	ldr	r2, [r3, #4]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80081ce:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	f003 0302 	and.w	r3, r3, #2
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d104      	bne.n	80081ec <HAL_SPI_IRQHandler+0x168>
 80081e2:	69fb      	ldr	r3, [r7, #28]
 80081e4:	f003 0301 	and.w	r3, r3, #1
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d034      	beq.n	8008256 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	685a      	ldr	r2, [r3, #4]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f022 0203 	bic.w	r2, r2, #3
 80081fa:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008200:	2b00      	cmp	r3, #0
 8008202:	d011      	beq.n	8008228 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008208:	4a17      	ldr	r2, [pc, #92]	; (8008268 <HAL_SPI_IRQHandler+0x1e4>)
 800820a:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008210:	4618      	mov	r0, r3
 8008212:	f7fd fcf5 	bl	8005c00 <HAL_DMA_Abort_IT>
 8008216:	4603      	mov	r3, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	d005      	beq.n	8008228 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008220:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800822c:	2b00      	cmp	r3, #0
 800822e:	d016      	beq.n	800825e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008234:	4a0c      	ldr	r2, [pc, #48]	; (8008268 <HAL_SPI_IRQHandler+0x1e4>)
 8008236:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800823c:	4618      	mov	r0, r3
 800823e:	f7fd fcdf 	bl	8005c00 <HAL_DMA_Abort_IT>
 8008242:	4603      	mov	r3, r0
 8008244:	2b00      	cmp	r3, #0
 8008246:	d00a      	beq.n	800825e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800824c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8008254:	e003      	b.n	800825e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 f808 	bl	800826c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800825c:	e000      	b.n	8008260 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800825e:	bf00      	nop
    return;
 8008260:	bf00      	nop
  }
}
 8008262:	3720      	adds	r7, #32
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}
 8008268:	08008281 	.word	0x08008281

0800826c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800826c:	b480      	push	{r7}
 800826e:	b083      	sub	sp, #12
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008274:	bf00      	nop
 8008276:	370c      	adds	r7, #12
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr

08008280 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b084      	sub	sp, #16
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800828c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2200      	movs	r2, #0
 8008292:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2200      	movs	r2, #0
 800829a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800829c:	68f8      	ldr	r0, [r7, #12]
 800829e:	f7ff ffe5 	bl	800826c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80082a2:	bf00      	nop
 80082a4:	3710      	adds	r7, #16
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}

080082aa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80082aa:	b580      	push	{r7, lr}
 80082ac:	b082      	sub	sp, #8
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d101      	bne.n	80082bc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80082b8:	2301      	movs	r3, #1
 80082ba:	e049      	b.n	8008350 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082c2:	b2db      	uxtb	r3, r3
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d106      	bne.n	80082d6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f7fb f963 	bl	800359c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2202      	movs	r2, #2
 80082da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681a      	ldr	r2, [r3, #0]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	3304      	adds	r3, #4
 80082e6:	4619      	mov	r1, r3
 80082e8:	4610      	mov	r0, r2
 80082ea:	f000 fe75 	bl	8008fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2201      	movs	r2, #1
 80082f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2201      	movs	r2, #1
 80082fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2201      	movs	r2, #1
 8008302:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2201      	movs	r2, #1
 800830a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2201      	movs	r2, #1
 8008312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2201      	movs	r2, #1
 800831a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2201      	movs	r2, #1
 8008322:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2201      	movs	r2, #1
 800832a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2201      	movs	r2, #1
 8008332:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2201      	movs	r2, #1
 800833a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2201      	movs	r2, #1
 8008342:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2201      	movs	r2, #1
 800834a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800834e:	2300      	movs	r3, #0
}
 8008350:	4618      	mov	r0, r3
 8008352:	3708      	adds	r7, #8
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	6a1a      	ldr	r2, [r3, #32]
 8008366:	f241 1311 	movw	r3, #4369	; 0x1111
 800836a:	4013      	ands	r3, r2
 800836c:	2b00      	cmp	r3, #0
 800836e:	d10f      	bne.n	8008390 <HAL_TIM_Base_Stop+0x38>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	6a1a      	ldr	r2, [r3, #32]
 8008376:	f244 4344 	movw	r3, #17476	; 0x4444
 800837a:	4013      	ands	r3, r2
 800837c:	2b00      	cmp	r3, #0
 800837e:	d107      	bne.n	8008390 <HAL_TIM_Base_Stop+0x38>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f022 0201 	bic.w	r2, r2, #1
 800838e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2201      	movs	r2, #1
 8008394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008398:	2300      	movs	r3, #0
}
 800839a:	4618      	mov	r0, r3
 800839c:	370c      	adds	r7, #12
 800839e:	46bd      	mov	sp, r7
 80083a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a4:	4770      	bx	lr
	...

080083a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b085      	sub	sp, #20
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d001      	beq.n	80083c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80083bc:	2301      	movs	r3, #1
 80083be:	e04a      	b.n	8008456 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2202      	movs	r2, #2
 80083c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	68da      	ldr	r2, [r3, #12]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f042 0201 	orr.w	r2, r2, #1
 80083d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a21      	ldr	r2, [pc, #132]	; (8008464 <HAL_TIM_Base_Start_IT+0xbc>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d018      	beq.n	8008414 <HAL_TIM_Base_Start_IT+0x6c>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083ea:	d013      	beq.n	8008414 <HAL_TIM_Base_Start_IT+0x6c>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a1d      	ldr	r2, [pc, #116]	; (8008468 <HAL_TIM_Base_Start_IT+0xc0>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d00e      	beq.n	8008414 <HAL_TIM_Base_Start_IT+0x6c>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a1c      	ldr	r2, [pc, #112]	; (800846c <HAL_TIM_Base_Start_IT+0xc4>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d009      	beq.n	8008414 <HAL_TIM_Base_Start_IT+0x6c>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a1a      	ldr	r2, [pc, #104]	; (8008470 <HAL_TIM_Base_Start_IT+0xc8>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d004      	beq.n	8008414 <HAL_TIM_Base_Start_IT+0x6c>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a19      	ldr	r2, [pc, #100]	; (8008474 <HAL_TIM_Base_Start_IT+0xcc>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d115      	bne.n	8008440 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	689a      	ldr	r2, [r3, #8]
 800841a:	4b17      	ldr	r3, [pc, #92]	; (8008478 <HAL_TIM_Base_Start_IT+0xd0>)
 800841c:	4013      	ands	r3, r2
 800841e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2b06      	cmp	r3, #6
 8008424:	d015      	beq.n	8008452 <HAL_TIM_Base_Start_IT+0xaa>
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800842c:	d011      	beq.n	8008452 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f042 0201 	orr.w	r2, r2, #1
 800843c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800843e:	e008      	b.n	8008452 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	681a      	ldr	r2, [r3, #0]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f042 0201 	orr.w	r2, r2, #1
 800844e:	601a      	str	r2, [r3, #0]
 8008450:	e000      	b.n	8008454 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008452:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008454:	2300      	movs	r3, #0
}
 8008456:	4618      	mov	r0, r3
 8008458:	3714      	adds	r7, #20
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr
 8008462:	bf00      	nop
 8008464:	40012c00 	.word	0x40012c00
 8008468:	40000400 	.word	0x40000400
 800846c:	40000800 	.word	0x40000800
 8008470:	40013400 	.word	0x40013400
 8008474:	40014000 	.word	0x40014000
 8008478:	00010007 	.word	0x00010007

0800847c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b082      	sub	sp, #8
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d101      	bne.n	800848e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800848a:	2301      	movs	r3, #1
 800848c:	e049      	b.n	8008522 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008494:	b2db      	uxtb	r3, r3
 8008496:	2b00      	cmp	r3, #0
 8008498:	d106      	bne.n	80084a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2200      	movs	r2, #0
 800849e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 f841 	bl	800852a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2202      	movs	r2, #2
 80084ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681a      	ldr	r2, [r3, #0]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	3304      	adds	r3, #4
 80084b8:	4619      	mov	r1, r3
 80084ba:	4610      	mov	r0, r2
 80084bc:	f000 fd8c 	bl	8008fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2201      	movs	r2, #1
 80084c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2201      	movs	r2, #1
 80084cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2201      	movs	r2, #1
 80084d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2201      	movs	r2, #1
 80084dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2201      	movs	r2, #1
 80084e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2201      	movs	r2, #1
 80084ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2201      	movs	r2, #1
 80084f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2201      	movs	r2, #1
 80084fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2201      	movs	r2, #1
 8008504:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2201      	movs	r2, #1
 800850c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2201      	movs	r2, #1
 8008514:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2201      	movs	r2, #1
 800851c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008520:	2300      	movs	r3, #0
}
 8008522:	4618      	mov	r0, r3
 8008524:	3708      	adds	r7, #8
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}

0800852a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800852a:	b480      	push	{r7}
 800852c:	b083      	sub	sp, #12
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008532:	bf00      	nop
 8008534:	370c      	adds	r7, #12
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr
	...

08008540 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b084      	sub	sp, #16
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d109      	bne.n	8008564 <HAL_TIM_PWM_Start+0x24>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008556:	b2db      	uxtb	r3, r3
 8008558:	2b01      	cmp	r3, #1
 800855a:	bf14      	ite	ne
 800855c:	2301      	movne	r3, #1
 800855e:	2300      	moveq	r3, #0
 8008560:	b2db      	uxtb	r3, r3
 8008562:	e03c      	b.n	80085de <HAL_TIM_PWM_Start+0x9e>
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	2b04      	cmp	r3, #4
 8008568:	d109      	bne.n	800857e <HAL_TIM_PWM_Start+0x3e>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008570:	b2db      	uxtb	r3, r3
 8008572:	2b01      	cmp	r3, #1
 8008574:	bf14      	ite	ne
 8008576:	2301      	movne	r3, #1
 8008578:	2300      	moveq	r3, #0
 800857a:	b2db      	uxtb	r3, r3
 800857c:	e02f      	b.n	80085de <HAL_TIM_PWM_Start+0x9e>
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	2b08      	cmp	r3, #8
 8008582:	d109      	bne.n	8008598 <HAL_TIM_PWM_Start+0x58>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800858a:	b2db      	uxtb	r3, r3
 800858c:	2b01      	cmp	r3, #1
 800858e:	bf14      	ite	ne
 8008590:	2301      	movne	r3, #1
 8008592:	2300      	moveq	r3, #0
 8008594:	b2db      	uxtb	r3, r3
 8008596:	e022      	b.n	80085de <HAL_TIM_PWM_Start+0x9e>
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	2b0c      	cmp	r3, #12
 800859c:	d109      	bne.n	80085b2 <HAL_TIM_PWM_Start+0x72>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	bf14      	ite	ne
 80085aa:	2301      	movne	r3, #1
 80085ac:	2300      	moveq	r3, #0
 80085ae:	b2db      	uxtb	r3, r3
 80085b0:	e015      	b.n	80085de <HAL_TIM_PWM_Start+0x9e>
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	2b10      	cmp	r3, #16
 80085b6:	d109      	bne.n	80085cc <HAL_TIM_PWM_Start+0x8c>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80085be:	b2db      	uxtb	r3, r3
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	bf14      	ite	ne
 80085c4:	2301      	movne	r3, #1
 80085c6:	2300      	moveq	r3, #0
 80085c8:	b2db      	uxtb	r3, r3
 80085ca:	e008      	b.n	80085de <HAL_TIM_PWM_Start+0x9e>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	bf14      	ite	ne
 80085d8:	2301      	movne	r3, #1
 80085da:	2300      	moveq	r3, #0
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d001      	beq.n	80085e6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80085e2:	2301      	movs	r3, #1
 80085e4:	e097      	b.n	8008716 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d104      	bne.n	80085f6 <HAL_TIM_PWM_Start+0xb6>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2202      	movs	r2, #2
 80085f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085f4:	e023      	b.n	800863e <HAL_TIM_PWM_Start+0xfe>
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	2b04      	cmp	r3, #4
 80085fa:	d104      	bne.n	8008606 <HAL_TIM_PWM_Start+0xc6>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2202      	movs	r2, #2
 8008600:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008604:	e01b      	b.n	800863e <HAL_TIM_PWM_Start+0xfe>
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	2b08      	cmp	r3, #8
 800860a:	d104      	bne.n	8008616 <HAL_TIM_PWM_Start+0xd6>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2202      	movs	r2, #2
 8008610:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008614:	e013      	b.n	800863e <HAL_TIM_PWM_Start+0xfe>
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	2b0c      	cmp	r3, #12
 800861a:	d104      	bne.n	8008626 <HAL_TIM_PWM_Start+0xe6>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2202      	movs	r2, #2
 8008620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008624:	e00b      	b.n	800863e <HAL_TIM_PWM_Start+0xfe>
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	2b10      	cmp	r3, #16
 800862a:	d104      	bne.n	8008636 <HAL_TIM_PWM_Start+0xf6>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2202      	movs	r2, #2
 8008630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008634:	e003      	b.n	800863e <HAL_TIM_PWM_Start+0xfe>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2202      	movs	r2, #2
 800863a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	2201      	movs	r2, #1
 8008644:	6839      	ldr	r1, [r7, #0]
 8008646:	4618      	mov	r0, r3
 8008648:	f001 f8e8 	bl	800981c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a33      	ldr	r2, [pc, #204]	; (8008720 <HAL_TIM_PWM_Start+0x1e0>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d013      	beq.n	800867e <HAL_TIM_PWM_Start+0x13e>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a32      	ldr	r2, [pc, #200]	; (8008724 <HAL_TIM_PWM_Start+0x1e4>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d00e      	beq.n	800867e <HAL_TIM_PWM_Start+0x13e>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a30      	ldr	r2, [pc, #192]	; (8008728 <HAL_TIM_PWM_Start+0x1e8>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d009      	beq.n	800867e <HAL_TIM_PWM_Start+0x13e>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a2f      	ldr	r2, [pc, #188]	; (800872c <HAL_TIM_PWM_Start+0x1ec>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d004      	beq.n	800867e <HAL_TIM_PWM_Start+0x13e>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a2d      	ldr	r2, [pc, #180]	; (8008730 <HAL_TIM_PWM_Start+0x1f0>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d101      	bne.n	8008682 <HAL_TIM_PWM_Start+0x142>
 800867e:	2301      	movs	r3, #1
 8008680:	e000      	b.n	8008684 <HAL_TIM_PWM_Start+0x144>
 8008682:	2300      	movs	r3, #0
 8008684:	2b00      	cmp	r3, #0
 8008686:	d007      	beq.n	8008698 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008696:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a20      	ldr	r2, [pc, #128]	; (8008720 <HAL_TIM_PWM_Start+0x1e0>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d018      	beq.n	80086d4 <HAL_TIM_PWM_Start+0x194>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086aa:	d013      	beq.n	80086d4 <HAL_TIM_PWM_Start+0x194>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a20      	ldr	r2, [pc, #128]	; (8008734 <HAL_TIM_PWM_Start+0x1f4>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d00e      	beq.n	80086d4 <HAL_TIM_PWM_Start+0x194>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a1f      	ldr	r2, [pc, #124]	; (8008738 <HAL_TIM_PWM_Start+0x1f8>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d009      	beq.n	80086d4 <HAL_TIM_PWM_Start+0x194>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a17      	ldr	r2, [pc, #92]	; (8008724 <HAL_TIM_PWM_Start+0x1e4>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d004      	beq.n	80086d4 <HAL_TIM_PWM_Start+0x194>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4a16      	ldr	r2, [pc, #88]	; (8008728 <HAL_TIM_PWM_Start+0x1e8>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d115      	bne.n	8008700 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	689a      	ldr	r2, [r3, #8]
 80086da:	4b18      	ldr	r3, [pc, #96]	; (800873c <HAL_TIM_PWM_Start+0x1fc>)
 80086dc:	4013      	ands	r3, r2
 80086de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2b06      	cmp	r3, #6
 80086e4:	d015      	beq.n	8008712 <HAL_TIM_PWM_Start+0x1d2>
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086ec:	d011      	beq.n	8008712 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f042 0201 	orr.w	r2, r2, #1
 80086fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086fe:	e008      	b.n	8008712 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	681a      	ldr	r2, [r3, #0]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f042 0201 	orr.w	r2, r2, #1
 800870e:	601a      	str	r2, [r3, #0]
 8008710:	e000      	b.n	8008714 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008712:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008714:	2300      	movs	r3, #0
}
 8008716:	4618      	mov	r0, r3
 8008718:	3710      	adds	r7, #16
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
 800871e:	bf00      	nop
 8008720:	40012c00 	.word	0x40012c00
 8008724:	40013400 	.word	0x40013400
 8008728:	40014000 	.word	0x40014000
 800872c:	40014400 	.word	0x40014400
 8008730:	40014800 	.word	0x40014800
 8008734:	40000400 	.word	0x40000400
 8008738:	40000800 	.word	0x40000800
 800873c:	00010007 	.word	0x00010007

08008740 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b082      	sub	sp, #8
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	2200      	movs	r2, #0
 8008750:	6839      	ldr	r1, [r7, #0]
 8008752:	4618      	mov	r0, r3
 8008754:	f001 f862 	bl	800981c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a3e      	ldr	r2, [pc, #248]	; (8008858 <HAL_TIM_PWM_Stop+0x118>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d013      	beq.n	800878a <HAL_TIM_PWM_Stop+0x4a>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a3d      	ldr	r2, [pc, #244]	; (800885c <HAL_TIM_PWM_Stop+0x11c>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d00e      	beq.n	800878a <HAL_TIM_PWM_Stop+0x4a>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a3b      	ldr	r2, [pc, #236]	; (8008860 <HAL_TIM_PWM_Stop+0x120>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d009      	beq.n	800878a <HAL_TIM_PWM_Stop+0x4a>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a3a      	ldr	r2, [pc, #232]	; (8008864 <HAL_TIM_PWM_Stop+0x124>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d004      	beq.n	800878a <HAL_TIM_PWM_Stop+0x4a>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a38      	ldr	r2, [pc, #224]	; (8008868 <HAL_TIM_PWM_Stop+0x128>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d101      	bne.n	800878e <HAL_TIM_PWM_Stop+0x4e>
 800878a:	2301      	movs	r3, #1
 800878c:	e000      	b.n	8008790 <HAL_TIM_PWM_Stop+0x50>
 800878e:	2300      	movs	r3, #0
 8008790:	2b00      	cmp	r3, #0
 8008792:	d017      	beq.n	80087c4 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	6a1a      	ldr	r2, [r3, #32]
 800879a:	f241 1311 	movw	r3, #4369	; 0x1111
 800879e:	4013      	ands	r3, r2
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d10f      	bne.n	80087c4 <HAL_TIM_PWM_Stop+0x84>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	6a1a      	ldr	r2, [r3, #32]
 80087aa:	f244 4344 	movw	r3, #17476	; 0x4444
 80087ae:	4013      	ands	r3, r2
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d107      	bne.n	80087c4 <HAL_TIM_PWM_Stop+0x84>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80087c2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	6a1a      	ldr	r2, [r3, #32]
 80087ca:	f241 1311 	movw	r3, #4369	; 0x1111
 80087ce:	4013      	ands	r3, r2
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d10f      	bne.n	80087f4 <HAL_TIM_PWM_Stop+0xb4>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	6a1a      	ldr	r2, [r3, #32]
 80087da:	f244 4344 	movw	r3, #17476	; 0x4444
 80087de:	4013      	ands	r3, r2
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d107      	bne.n	80087f4 <HAL_TIM_PWM_Stop+0xb4>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	681a      	ldr	r2, [r3, #0]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f022 0201 	bic.w	r2, r2, #1
 80087f2:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d104      	bne.n	8008804 <HAL_TIM_PWM_Stop+0xc4>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2201      	movs	r2, #1
 80087fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008802:	e023      	b.n	800884c <HAL_TIM_PWM_Stop+0x10c>
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	2b04      	cmp	r3, #4
 8008808:	d104      	bne.n	8008814 <HAL_TIM_PWM_Stop+0xd4>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2201      	movs	r2, #1
 800880e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008812:	e01b      	b.n	800884c <HAL_TIM_PWM_Stop+0x10c>
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	2b08      	cmp	r3, #8
 8008818:	d104      	bne.n	8008824 <HAL_TIM_PWM_Stop+0xe4>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2201      	movs	r2, #1
 800881e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008822:	e013      	b.n	800884c <HAL_TIM_PWM_Stop+0x10c>
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	2b0c      	cmp	r3, #12
 8008828:	d104      	bne.n	8008834 <HAL_TIM_PWM_Stop+0xf4>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2201      	movs	r2, #1
 800882e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008832:	e00b      	b.n	800884c <HAL_TIM_PWM_Stop+0x10c>
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	2b10      	cmp	r3, #16
 8008838:	d104      	bne.n	8008844 <HAL_TIM_PWM_Stop+0x104>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2201      	movs	r2, #1
 800883e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008842:	e003      	b.n	800884c <HAL_TIM_PWM_Stop+0x10c>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2201      	movs	r2, #1
 8008848:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800884c:	2300      	movs	r3, #0
}
 800884e:	4618      	mov	r0, r3
 8008850:	3708      	adds	r7, #8
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
 8008856:	bf00      	nop
 8008858:	40012c00 	.word	0x40012c00
 800885c:	40013400 	.word	0x40013400
 8008860:	40014000 	.word	0x40014000
 8008864:	40014400 	.word	0x40014400
 8008868:	40014800 	.word	0x40014800

0800886c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b082      	sub	sp, #8
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	691b      	ldr	r3, [r3, #16]
 800887a:	f003 0302 	and.w	r3, r3, #2
 800887e:	2b02      	cmp	r3, #2
 8008880:	d122      	bne.n	80088c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	f003 0302 	and.w	r3, r3, #2
 800888c:	2b02      	cmp	r3, #2
 800888e:	d11b      	bne.n	80088c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f06f 0202 	mvn.w	r2, #2
 8008898:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2201      	movs	r2, #1
 800889e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	699b      	ldr	r3, [r3, #24]
 80088a6:	f003 0303 	and.w	r3, r3, #3
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d003      	beq.n	80088b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f000 fb74 	bl	8008f9c <HAL_TIM_IC_CaptureCallback>
 80088b4:	e005      	b.n	80088c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f000 fb66 	bl	8008f88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 fb77 	bl	8008fb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2200      	movs	r2, #0
 80088c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	691b      	ldr	r3, [r3, #16]
 80088ce:	f003 0304 	and.w	r3, r3, #4
 80088d2:	2b04      	cmp	r3, #4
 80088d4:	d122      	bne.n	800891c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	68db      	ldr	r3, [r3, #12]
 80088dc:	f003 0304 	and.w	r3, r3, #4
 80088e0:	2b04      	cmp	r3, #4
 80088e2:	d11b      	bne.n	800891c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f06f 0204 	mvn.w	r2, #4
 80088ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2202      	movs	r2, #2
 80088f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	699b      	ldr	r3, [r3, #24]
 80088fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d003      	beq.n	800890a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f000 fb4a 	bl	8008f9c <HAL_TIM_IC_CaptureCallback>
 8008908:	e005      	b.n	8008916 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 fb3c 	bl	8008f88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f000 fb4d 	bl	8008fb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2200      	movs	r2, #0
 800891a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	691b      	ldr	r3, [r3, #16]
 8008922:	f003 0308 	and.w	r3, r3, #8
 8008926:	2b08      	cmp	r3, #8
 8008928:	d122      	bne.n	8008970 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	68db      	ldr	r3, [r3, #12]
 8008930:	f003 0308 	and.w	r3, r3, #8
 8008934:	2b08      	cmp	r3, #8
 8008936:	d11b      	bne.n	8008970 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f06f 0208 	mvn.w	r2, #8
 8008940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2204      	movs	r2, #4
 8008946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	69db      	ldr	r3, [r3, #28]
 800894e:	f003 0303 	and.w	r3, r3, #3
 8008952:	2b00      	cmp	r3, #0
 8008954:	d003      	beq.n	800895e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 fb20 	bl	8008f9c <HAL_TIM_IC_CaptureCallback>
 800895c:	e005      	b.n	800896a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 fb12 	bl	8008f88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 fb23 	bl	8008fb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2200      	movs	r2, #0
 800896e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	691b      	ldr	r3, [r3, #16]
 8008976:	f003 0310 	and.w	r3, r3, #16
 800897a:	2b10      	cmp	r3, #16
 800897c:	d122      	bne.n	80089c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	68db      	ldr	r3, [r3, #12]
 8008984:	f003 0310 	and.w	r3, r3, #16
 8008988:	2b10      	cmp	r3, #16
 800898a:	d11b      	bne.n	80089c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f06f 0210 	mvn.w	r2, #16
 8008994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2208      	movs	r2, #8
 800899a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	69db      	ldr	r3, [r3, #28]
 80089a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d003      	beq.n	80089b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 faf6 	bl	8008f9c <HAL_TIM_IC_CaptureCallback>
 80089b0:	e005      	b.n	80089be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 fae8 	bl	8008f88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f000 faf9 	bl	8008fb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2200      	movs	r2, #0
 80089c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	691b      	ldr	r3, [r3, #16]
 80089ca:	f003 0301 	and.w	r3, r3, #1
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d10e      	bne.n	80089f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	68db      	ldr	r3, [r3, #12]
 80089d8:	f003 0301 	and.w	r3, r3, #1
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d107      	bne.n	80089f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f06f 0201 	mvn.w	r2, #1
 80089e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f7fa f992 	bl	8002d14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	691b      	ldr	r3, [r3, #16]
 80089f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089fa:	2b80      	cmp	r3, #128	; 0x80
 80089fc:	d10e      	bne.n	8008a1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	68db      	ldr	r3, [r3, #12]
 8008a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a08:	2b80      	cmp	r3, #128	; 0x80
 8008a0a:	d107      	bne.n	8008a1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f001 f964 	bl	8009ce4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	691b      	ldr	r3, [r3, #16]
 8008a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a2a:	d10e      	bne.n	8008a4a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	68db      	ldr	r3, [r3, #12]
 8008a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a36:	2b80      	cmp	r3, #128	; 0x80
 8008a38:	d107      	bne.n	8008a4a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008a42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f001 f957 	bl	8009cf8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	691b      	ldr	r3, [r3, #16]
 8008a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a54:	2b40      	cmp	r3, #64	; 0x40
 8008a56:	d10e      	bne.n	8008a76 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	68db      	ldr	r3, [r3, #12]
 8008a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a62:	2b40      	cmp	r3, #64	; 0x40
 8008a64:	d107      	bne.n	8008a76 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008a6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f000 faa7 	bl	8008fc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	691b      	ldr	r3, [r3, #16]
 8008a7c:	f003 0320 	and.w	r3, r3, #32
 8008a80:	2b20      	cmp	r3, #32
 8008a82:	d10e      	bne.n	8008aa2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	68db      	ldr	r3, [r3, #12]
 8008a8a:	f003 0320 	and.w	r3, r3, #32
 8008a8e:	2b20      	cmp	r3, #32
 8008a90:	d107      	bne.n	8008aa2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f06f 0220 	mvn.w	r2, #32
 8008a9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f001 f917 	bl	8009cd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	691b      	ldr	r3, [r3, #16]
 8008aa8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008aac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ab0:	d10f      	bne.n	8008ad2 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	68db      	ldr	r3, [r3, #12]
 8008ab8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008abc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ac0:	d107      	bne.n	8008ad2 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8008aca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f001 f91d 	bl	8009d0c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	691b      	ldr	r3, [r3, #16]
 8008ad8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008adc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ae0:	d10f      	bne.n	8008b02 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	68db      	ldr	r3, [r3, #12]
 8008ae8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008aec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008af0:	d107      	bne.n	8008b02 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8008afa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f001 f90f 	bl	8009d20 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	691b      	ldr	r3, [r3, #16]
 8008b08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b10:	d10f      	bne.n	8008b32 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	68db      	ldr	r3, [r3, #12]
 8008b18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b20:	d107      	bne.n	8008b32 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8008b2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f001 f901 	bl	8009d34 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	691b      	ldr	r3, [r3, #16]
 8008b38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b3c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008b40:	d10f      	bne.n	8008b62 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	68db      	ldr	r3, [r3, #12]
 8008b48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b4c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008b50:	d107      	bne.n	8008b62 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8008b5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f001 f8f3 	bl	8009d48 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008b62:	bf00      	nop
 8008b64:	3708      	adds	r7, #8
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}
	...

08008b6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b086      	sub	sp, #24
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	60f8      	str	r0, [r7, #12]
 8008b74:	60b9      	str	r1, [r7, #8]
 8008b76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	d101      	bne.n	8008b8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008b86:	2302      	movs	r3, #2
 8008b88:	e0ff      	b.n	8008d8a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2b14      	cmp	r3, #20
 8008b96:	f200 80f0 	bhi.w	8008d7a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008b9a:	a201      	add	r2, pc, #4	; (adr r2, 8008ba0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba0:	08008bf5 	.word	0x08008bf5
 8008ba4:	08008d7b 	.word	0x08008d7b
 8008ba8:	08008d7b 	.word	0x08008d7b
 8008bac:	08008d7b 	.word	0x08008d7b
 8008bb0:	08008c35 	.word	0x08008c35
 8008bb4:	08008d7b 	.word	0x08008d7b
 8008bb8:	08008d7b 	.word	0x08008d7b
 8008bbc:	08008d7b 	.word	0x08008d7b
 8008bc0:	08008c77 	.word	0x08008c77
 8008bc4:	08008d7b 	.word	0x08008d7b
 8008bc8:	08008d7b 	.word	0x08008d7b
 8008bcc:	08008d7b 	.word	0x08008d7b
 8008bd0:	08008cb7 	.word	0x08008cb7
 8008bd4:	08008d7b 	.word	0x08008d7b
 8008bd8:	08008d7b 	.word	0x08008d7b
 8008bdc:	08008d7b 	.word	0x08008d7b
 8008be0:	08008cf9 	.word	0x08008cf9
 8008be4:	08008d7b 	.word	0x08008d7b
 8008be8:	08008d7b 	.word	0x08008d7b
 8008bec:	08008d7b 	.word	0x08008d7b
 8008bf0:	08008d39 	.word	0x08008d39
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	68b9      	ldr	r1, [r7, #8]
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f000 fa7c 	bl	80090f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	699a      	ldr	r2, [r3, #24]
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f042 0208 	orr.w	r2, r2, #8
 8008c0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	699a      	ldr	r2, [r3, #24]
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f022 0204 	bic.w	r2, r2, #4
 8008c1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	6999      	ldr	r1, [r3, #24]
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	691a      	ldr	r2, [r3, #16]
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	430a      	orrs	r2, r1
 8008c30:	619a      	str	r2, [r3, #24]
      break;
 8008c32:	e0a5      	b.n	8008d80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	68b9      	ldr	r1, [r7, #8]
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f000 faec 	bl	8009218 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	699a      	ldr	r2, [r3, #24]
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	699a      	ldr	r2, [r3, #24]
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	6999      	ldr	r1, [r3, #24]
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	691b      	ldr	r3, [r3, #16]
 8008c6a:	021a      	lsls	r2, r3, #8
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	430a      	orrs	r2, r1
 8008c72:	619a      	str	r2, [r3, #24]
      break;
 8008c74:	e084      	b.n	8008d80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	68b9      	ldr	r1, [r7, #8]
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f000 fb55 	bl	800932c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	69da      	ldr	r2, [r3, #28]
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f042 0208 	orr.w	r2, r2, #8
 8008c90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	69da      	ldr	r2, [r3, #28]
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f022 0204 	bic.w	r2, r2, #4
 8008ca0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	69d9      	ldr	r1, [r3, #28]
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	691a      	ldr	r2, [r3, #16]
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	430a      	orrs	r2, r1
 8008cb2:	61da      	str	r2, [r3, #28]
      break;
 8008cb4:	e064      	b.n	8008d80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	68b9      	ldr	r1, [r7, #8]
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f000 fbbd 	bl	800943c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	69da      	ldr	r2, [r3, #28]
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008cd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	69da      	ldr	r2, [r3, #28]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ce0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	69d9      	ldr	r1, [r3, #28]
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	691b      	ldr	r3, [r3, #16]
 8008cec:	021a      	lsls	r2, r3, #8
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	430a      	orrs	r2, r1
 8008cf4:	61da      	str	r2, [r3, #28]
      break;
 8008cf6:	e043      	b.n	8008d80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	68b9      	ldr	r1, [r7, #8]
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f000 fc26 	bl	8009550 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f042 0208 	orr.w	r2, r2, #8
 8008d12:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f022 0204 	bic.w	r2, r2, #4
 8008d22:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	691a      	ldr	r2, [r3, #16]
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	430a      	orrs	r2, r1
 8008d34:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8008d36:	e023      	b.n	8008d80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	68b9      	ldr	r1, [r7, #8]
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f000 fc6a 	bl	8009618 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d52:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d62:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	691b      	ldr	r3, [r3, #16]
 8008d6e:	021a      	lsls	r2, r3, #8
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	430a      	orrs	r2, r1
 8008d76:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8008d78:	e002      	b.n	8008d80 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	75fb      	strb	r3, [r7, #23]
      break;
 8008d7e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2200      	movs	r2, #0
 8008d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008d88:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3718      	adds	r7, #24
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
 8008d92:	bf00      	nop

08008d94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b084      	sub	sp, #16
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d101      	bne.n	8008db0 <HAL_TIM_ConfigClockSource+0x1c>
 8008dac:	2302      	movs	r3, #2
 8008dae:	e0de      	b.n	8008f6e <HAL_TIM_ConfigClockSource+0x1da>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2201      	movs	r2, #1
 8008db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2202      	movs	r2, #2
 8008dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	689b      	ldr	r3, [r3, #8]
 8008dc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8008dce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008dd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008dda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	68ba      	ldr	r2, [r7, #8]
 8008de2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4a63      	ldr	r2, [pc, #396]	; (8008f78 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	f000 80a9 	beq.w	8008f42 <HAL_TIM_ConfigClockSource+0x1ae>
 8008df0:	4a61      	ldr	r2, [pc, #388]	; (8008f78 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	f200 80ae 	bhi.w	8008f54 <HAL_TIM_ConfigClockSource+0x1c0>
 8008df8:	4a60      	ldr	r2, [pc, #384]	; (8008f7c <HAL_TIM_ConfigClockSource+0x1e8>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	f000 80a1 	beq.w	8008f42 <HAL_TIM_ConfigClockSource+0x1ae>
 8008e00:	4a5e      	ldr	r2, [pc, #376]	; (8008f7c <HAL_TIM_ConfigClockSource+0x1e8>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	f200 80a6 	bhi.w	8008f54 <HAL_TIM_ConfigClockSource+0x1c0>
 8008e08:	4a5d      	ldr	r2, [pc, #372]	; (8008f80 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	f000 8099 	beq.w	8008f42 <HAL_TIM_ConfigClockSource+0x1ae>
 8008e10:	4a5b      	ldr	r2, [pc, #364]	; (8008f80 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	f200 809e 	bhi.w	8008f54 <HAL_TIM_ConfigClockSource+0x1c0>
 8008e18:	4a5a      	ldr	r2, [pc, #360]	; (8008f84 <HAL_TIM_ConfigClockSource+0x1f0>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	f000 8091 	beq.w	8008f42 <HAL_TIM_ConfigClockSource+0x1ae>
 8008e20:	4a58      	ldr	r2, [pc, #352]	; (8008f84 <HAL_TIM_ConfigClockSource+0x1f0>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	f200 8096 	bhi.w	8008f54 <HAL_TIM_ConfigClockSource+0x1c0>
 8008e28:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008e2c:	f000 8089 	beq.w	8008f42 <HAL_TIM_ConfigClockSource+0x1ae>
 8008e30:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008e34:	f200 808e 	bhi.w	8008f54 <HAL_TIM_ConfigClockSource+0x1c0>
 8008e38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e3c:	d03e      	beq.n	8008ebc <HAL_TIM_ConfigClockSource+0x128>
 8008e3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e42:	f200 8087 	bhi.w	8008f54 <HAL_TIM_ConfigClockSource+0x1c0>
 8008e46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e4a:	f000 8086 	beq.w	8008f5a <HAL_TIM_ConfigClockSource+0x1c6>
 8008e4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e52:	d87f      	bhi.n	8008f54 <HAL_TIM_ConfigClockSource+0x1c0>
 8008e54:	2b70      	cmp	r3, #112	; 0x70
 8008e56:	d01a      	beq.n	8008e8e <HAL_TIM_ConfigClockSource+0xfa>
 8008e58:	2b70      	cmp	r3, #112	; 0x70
 8008e5a:	d87b      	bhi.n	8008f54 <HAL_TIM_ConfigClockSource+0x1c0>
 8008e5c:	2b60      	cmp	r3, #96	; 0x60
 8008e5e:	d050      	beq.n	8008f02 <HAL_TIM_ConfigClockSource+0x16e>
 8008e60:	2b60      	cmp	r3, #96	; 0x60
 8008e62:	d877      	bhi.n	8008f54 <HAL_TIM_ConfigClockSource+0x1c0>
 8008e64:	2b50      	cmp	r3, #80	; 0x50
 8008e66:	d03c      	beq.n	8008ee2 <HAL_TIM_ConfigClockSource+0x14e>
 8008e68:	2b50      	cmp	r3, #80	; 0x50
 8008e6a:	d873      	bhi.n	8008f54 <HAL_TIM_ConfigClockSource+0x1c0>
 8008e6c:	2b40      	cmp	r3, #64	; 0x40
 8008e6e:	d058      	beq.n	8008f22 <HAL_TIM_ConfigClockSource+0x18e>
 8008e70:	2b40      	cmp	r3, #64	; 0x40
 8008e72:	d86f      	bhi.n	8008f54 <HAL_TIM_ConfigClockSource+0x1c0>
 8008e74:	2b30      	cmp	r3, #48	; 0x30
 8008e76:	d064      	beq.n	8008f42 <HAL_TIM_ConfigClockSource+0x1ae>
 8008e78:	2b30      	cmp	r3, #48	; 0x30
 8008e7a:	d86b      	bhi.n	8008f54 <HAL_TIM_ConfigClockSource+0x1c0>
 8008e7c:	2b20      	cmp	r3, #32
 8008e7e:	d060      	beq.n	8008f42 <HAL_TIM_ConfigClockSource+0x1ae>
 8008e80:	2b20      	cmp	r3, #32
 8008e82:	d867      	bhi.n	8008f54 <HAL_TIM_ConfigClockSource+0x1c0>
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d05c      	beq.n	8008f42 <HAL_TIM_ConfigClockSource+0x1ae>
 8008e88:	2b10      	cmp	r3, #16
 8008e8a:	d05a      	beq.n	8008f42 <HAL_TIM_ConfigClockSource+0x1ae>
 8008e8c:	e062      	b.n	8008f54 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6818      	ldr	r0, [r3, #0]
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	6899      	ldr	r1, [r3, #8]
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	685a      	ldr	r2, [r3, #4]
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	68db      	ldr	r3, [r3, #12]
 8008e9e:	f000 fc9d 	bl	80097dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	689b      	ldr	r3, [r3, #8]
 8008ea8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008eb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	68ba      	ldr	r2, [r7, #8]
 8008eb8:	609a      	str	r2, [r3, #8]
      break;
 8008eba:	e04f      	b.n	8008f5c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6818      	ldr	r0, [r3, #0]
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	6899      	ldr	r1, [r3, #8]
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	685a      	ldr	r2, [r3, #4]
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	68db      	ldr	r3, [r3, #12]
 8008ecc:	f000 fc86 	bl	80097dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	689a      	ldr	r2, [r3, #8]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008ede:	609a      	str	r2, [r3, #8]
      break;
 8008ee0:	e03c      	b.n	8008f5c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6818      	ldr	r0, [r3, #0]
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	6859      	ldr	r1, [r3, #4]
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	68db      	ldr	r3, [r3, #12]
 8008eee:	461a      	mov	r2, r3
 8008ef0:	f000 fbf8 	bl	80096e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	2150      	movs	r1, #80	; 0x50
 8008efa:	4618      	mov	r0, r3
 8008efc:	f000 fc51 	bl	80097a2 <TIM_ITRx_SetConfig>
      break;
 8008f00:	e02c      	b.n	8008f5c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6818      	ldr	r0, [r3, #0]
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	6859      	ldr	r1, [r3, #4]
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	68db      	ldr	r3, [r3, #12]
 8008f0e:	461a      	mov	r2, r3
 8008f10:	f000 fc17 	bl	8009742 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	2160      	movs	r1, #96	; 0x60
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f000 fc41 	bl	80097a2 <TIM_ITRx_SetConfig>
      break;
 8008f20:	e01c      	b.n	8008f5c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6818      	ldr	r0, [r3, #0]
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	6859      	ldr	r1, [r3, #4]
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	68db      	ldr	r3, [r3, #12]
 8008f2e:	461a      	mov	r2, r3
 8008f30:	f000 fbd8 	bl	80096e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	2140      	movs	r1, #64	; 0x40
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f000 fc31 	bl	80097a2 <TIM_ITRx_SetConfig>
      break;
 8008f40:	e00c      	b.n	8008f5c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	4610      	mov	r0, r2
 8008f4e:	f000 fc28 	bl	80097a2 <TIM_ITRx_SetConfig>
      break;
 8008f52:	e003      	b.n	8008f5c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8008f54:	2301      	movs	r3, #1
 8008f56:	73fb      	strb	r3, [r7, #15]
      break;
 8008f58:	e000      	b.n	8008f5c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8008f5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2200      	movs	r2, #0
 8008f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3710      	adds	r7, #16
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}
 8008f76:	bf00      	nop
 8008f78:	00100070 	.word	0x00100070
 8008f7c:	00100040 	.word	0x00100040
 8008f80:	00100030 	.word	0x00100030
 8008f84:	00100020 	.word	0x00100020

08008f88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b083      	sub	sp, #12
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008f90:	bf00      	nop
 8008f92:	370c      	adds	r7, #12
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr

08008f9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b083      	sub	sp, #12
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008fa4:	bf00      	nop
 8008fa6:	370c      	adds	r7, #12
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr

08008fb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008fb8:	bf00      	nop
 8008fba:	370c      	adds	r7, #12
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr

08008fc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b083      	sub	sp, #12
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008fcc:	bf00      	nop
 8008fce:	370c      	adds	r7, #12
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr

08008fd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b085      	sub	sp, #20
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	4a3c      	ldr	r2, [pc, #240]	; (80090dc <TIM_Base_SetConfig+0x104>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d00f      	beq.n	8009010 <TIM_Base_SetConfig+0x38>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ff6:	d00b      	beq.n	8009010 <TIM_Base_SetConfig+0x38>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	4a39      	ldr	r2, [pc, #228]	; (80090e0 <TIM_Base_SetConfig+0x108>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d007      	beq.n	8009010 <TIM_Base_SetConfig+0x38>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	4a38      	ldr	r2, [pc, #224]	; (80090e4 <TIM_Base_SetConfig+0x10c>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d003      	beq.n	8009010 <TIM_Base_SetConfig+0x38>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	4a37      	ldr	r2, [pc, #220]	; (80090e8 <TIM_Base_SetConfig+0x110>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d108      	bne.n	8009022 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009016:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	68fa      	ldr	r2, [r7, #12]
 800901e:	4313      	orrs	r3, r2
 8009020:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	4a2d      	ldr	r2, [pc, #180]	; (80090dc <TIM_Base_SetConfig+0x104>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d01b      	beq.n	8009062 <TIM_Base_SetConfig+0x8a>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009030:	d017      	beq.n	8009062 <TIM_Base_SetConfig+0x8a>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	4a2a      	ldr	r2, [pc, #168]	; (80090e0 <TIM_Base_SetConfig+0x108>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d013      	beq.n	8009062 <TIM_Base_SetConfig+0x8a>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	4a29      	ldr	r2, [pc, #164]	; (80090e4 <TIM_Base_SetConfig+0x10c>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d00f      	beq.n	8009062 <TIM_Base_SetConfig+0x8a>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	4a28      	ldr	r2, [pc, #160]	; (80090e8 <TIM_Base_SetConfig+0x110>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d00b      	beq.n	8009062 <TIM_Base_SetConfig+0x8a>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	4a27      	ldr	r2, [pc, #156]	; (80090ec <TIM_Base_SetConfig+0x114>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d007      	beq.n	8009062 <TIM_Base_SetConfig+0x8a>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	4a26      	ldr	r2, [pc, #152]	; (80090f0 <TIM_Base_SetConfig+0x118>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d003      	beq.n	8009062 <TIM_Base_SetConfig+0x8a>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	4a25      	ldr	r2, [pc, #148]	; (80090f4 <TIM_Base_SetConfig+0x11c>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d108      	bne.n	8009074 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009068:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	68db      	ldr	r3, [r3, #12]
 800906e:	68fa      	ldr	r2, [r7, #12]
 8009070:	4313      	orrs	r3, r2
 8009072:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	695b      	ldr	r3, [r3, #20]
 800907e:	4313      	orrs	r3, r2
 8009080:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	68fa      	ldr	r2, [r7, #12]
 8009086:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	689a      	ldr	r2, [r3, #8]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	681a      	ldr	r2, [r3, #0]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	4a10      	ldr	r2, [pc, #64]	; (80090dc <TIM_Base_SetConfig+0x104>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d00f      	beq.n	80090c0 <TIM_Base_SetConfig+0xe8>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	4a11      	ldr	r2, [pc, #68]	; (80090e8 <TIM_Base_SetConfig+0x110>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d00b      	beq.n	80090c0 <TIM_Base_SetConfig+0xe8>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	4a10      	ldr	r2, [pc, #64]	; (80090ec <TIM_Base_SetConfig+0x114>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d007      	beq.n	80090c0 <TIM_Base_SetConfig+0xe8>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	4a0f      	ldr	r2, [pc, #60]	; (80090f0 <TIM_Base_SetConfig+0x118>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d003      	beq.n	80090c0 <TIM_Base_SetConfig+0xe8>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	4a0e      	ldr	r2, [pc, #56]	; (80090f4 <TIM_Base_SetConfig+0x11c>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d103      	bne.n	80090c8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	691a      	ldr	r2, [r3, #16]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2201      	movs	r2, #1
 80090cc:	615a      	str	r2, [r3, #20]
}
 80090ce:	bf00      	nop
 80090d0:	3714      	adds	r7, #20
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr
 80090da:	bf00      	nop
 80090dc:	40012c00 	.word	0x40012c00
 80090e0:	40000400 	.word	0x40000400
 80090e4:	40000800 	.word	0x40000800
 80090e8:	40013400 	.word	0x40013400
 80090ec:	40014000 	.word	0x40014000
 80090f0:	40014400 	.word	0x40014400
 80090f4:	40014800 	.word	0x40014800

080090f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b087      	sub	sp, #28
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6a1b      	ldr	r3, [r3, #32]
 8009106:	f023 0201 	bic.w	r2, r3, #1
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6a1b      	ldr	r3, [r3, #32]
 8009112:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	699b      	ldr	r3, [r3, #24]
 800911e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800912a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f023 0303 	bic.w	r3, r3, #3
 8009132:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	68fa      	ldr	r2, [r7, #12]
 800913a:	4313      	orrs	r3, r2
 800913c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	f023 0302 	bic.w	r3, r3, #2
 8009144:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	689b      	ldr	r3, [r3, #8]
 800914a:	697a      	ldr	r2, [r7, #20]
 800914c:	4313      	orrs	r3, r2
 800914e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	4a2c      	ldr	r2, [pc, #176]	; (8009204 <TIM_OC1_SetConfig+0x10c>)
 8009154:	4293      	cmp	r3, r2
 8009156:	d00f      	beq.n	8009178 <TIM_OC1_SetConfig+0x80>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	4a2b      	ldr	r2, [pc, #172]	; (8009208 <TIM_OC1_SetConfig+0x110>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d00b      	beq.n	8009178 <TIM_OC1_SetConfig+0x80>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	4a2a      	ldr	r2, [pc, #168]	; (800920c <TIM_OC1_SetConfig+0x114>)
 8009164:	4293      	cmp	r3, r2
 8009166:	d007      	beq.n	8009178 <TIM_OC1_SetConfig+0x80>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	4a29      	ldr	r2, [pc, #164]	; (8009210 <TIM_OC1_SetConfig+0x118>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d003      	beq.n	8009178 <TIM_OC1_SetConfig+0x80>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	4a28      	ldr	r2, [pc, #160]	; (8009214 <TIM_OC1_SetConfig+0x11c>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d10c      	bne.n	8009192 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	f023 0308 	bic.w	r3, r3, #8
 800917e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	68db      	ldr	r3, [r3, #12]
 8009184:	697a      	ldr	r2, [r7, #20]
 8009186:	4313      	orrs	r3, r2
 8009188:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	f023 0304 	bic.w	r3, r3, #4
 8009190:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	4a1b      	ldr	r2, [pc, #108]	; (8009204 <TIM_OC1_SetConfig+0x10c>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d00f      	beq.n	80091ba <TIM_OC1_SetConfig+0xc2>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	4a1a      	ldr	r2, [pc, #104]	; (8009208 <TIM_OC1_SetConfig+0x110>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d00b      	beq.n	80091ba <TIM_OC1_SetConfig+0xc2>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	4a19      	ldr	r2, [pc, #100]	; (800920c <TIM_OC1_SetConfig+0x114>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d007      	beq.n	80091ba <TIM_OC1_SetConfig+0xc2>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	4a18      	ldr	r2, [pc, #96]	; (8009210 <TIM_OC1_SetConfig+0x118>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d003      	beq.n	80091ba <TIM_OC1_SetConfig+0xc2>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	4a17      	ldr	r2, [pc, #92]	; (8009214 <TIM_OC1_SetConfig+0x11c>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d111      	bne.n	80091de <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80091c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	695b      	ldr	r3, [r3, #20]
 80091ce:	693a      	ldr	r2, [r7, #16]
 80091d0:	4313      	orrs	r3, r2
 80091d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	699b      	ldr	r3, [r3, #24]
 80091d8:	693a      	ldr	r2, [r7, #16]
 80091da:	4313      	orrs	r3, r2
 80091dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	693a      	ldr	r2, [r7, #16]
 80091e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	68fa      	ldr	r2, [r7, #12]
 80091e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	685a      	ldr	r2, [r3, #4]
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	697a      	ldr	r2, [r7, #20]
 80091f6:	621a      	str	r2, [r3, #32]
}
 80091f8:	bf00      	nop
 80091fa:	371c      	adds	r7, #28
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr
 8009204:	40012c00 	.word	0x40012c00
 8009208:	40013400 	.word	0x40013400
 800920c:	40014000 	.word	0x40014000
 8009210:	40014400 	.word	0x40014400
 8009214:	40014800 	.word	0x40014800

08009218 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009218:	b480      	push	{r7}
 800921a:	b087      	sub	sp, #28
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6a1b      	ldr	r3, [r3, #32]
 8009226:	f023 0210 	bic.w	r2, r3, #16
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6a1b      	ldr	r3, [r3, #32]
 8009232:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	685b      	ldr	r3, [r3, #4]
 8009238:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	699b      	ldr	r3, [r3, #24]
 800923e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800924a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009252:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	021b      	lsls	r3, r3, #8
 800925a:	68fa      	ldr	r2, [r7, #12]
 800925c:	4313      	orrs	r3, r2
 800925e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	f023 0320 	bic.w	r3, r3, #32
 8009266:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	689b      	ldr	r3, [r3, #8]
 800926c:	011b      	lsls	r3, r3, #4
 800926e:	697a      	ldr	r2, [r7, #20]
 8009270:	4313      	orrs	r3, r2
 8009272:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	4a28      	ldr	r2, [pc, #160]	; (8009318 <TIM_OC2_SetConfig+0x100>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d003      	beq.n	8009284 <TIM_OC2_SetConfig+0x6c>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	4a27      	ldr	r2, [pc, #156]	; (800931c <TIM_OC2_SetConfig+0x104>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d10d      	bne.n	80092a0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800928a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	68db      	ldr	r3, [r3, #12]
 8009290:	011b      	lsls	r3, r3, #4
 8009292:	697a      	ldr	r2, [r7, #20]
 8009294:	4313      	orrs	r3, r2
 8009296:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800929e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	4a1d      	ldr	r2, [pc, #116]	; (8009318 <TIM_OC2_SetConfig+0x100>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d00f      	beq.n	80092c8 <TIM_OC2_SetConfig+0xb0>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	4a1c      	ldr	r2, [pc, #112]	; (800931c <TIM_OC2_SetConfig+0x104>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d00b      	beq.n	80092c8 <TIM_OC2_SetConfig+0xb0>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	4a1b      	ldr	r2, [pc, #108]	; (8009320 <TIM_OC2_SetConfig+0x108>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d007      	beq.n	80092c8 <TIM_OC2_SetConfig+0xb0>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	4a1a      	ldr	r2, [pc, #104]	; (8009324 <TIM_OC2_SetConfig+0x10c>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d003      	beq.n	80092c8 <TIM_OC2_SetConfig+0xb0>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	4a19      	ldr	r2, [pc, #100]	; (8009328 <TIM_OC2_SetConfig+0x110>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d113      	bne.n	80092f0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80092ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80092d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	695b      	ldr	r3, [r3, #20]
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	693a      	ldr	r2, [r7, #16]
 80092e0:	4313      	orrs	r3, r2
 80092e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	699b      	ldr	r3, [r3, #24]
 80092e8:	009b      	lsls	r3, r3, #2
 80092ea:	693a      	ldr	r2, [r7, #16]
 80092ec:	4313      	orrs	r3, r2
 80092ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	693a      	ldr	r2, [r7, #16]
 80092f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	68fa      	ldr	r2, [r7, #12]
 80092fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	685a      	ldr	r2, [r3, #4]
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	697a      	ldr	r2, [r7, #20]
 8009308:	621a      	str	r2, [r3, #32]
}
 800930a:	bf00      	nop
 800930c:	371c      	adds	r7, #28
 800930e:	46bd      	mov	sp, r7
 8009310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009314:	4770      	bx	lr
 8009316:	bf00      	nop
 8009318:	40012c00 	.word	0x40012c00
 800931c:	40013400 	.word	0x40013400
 8009320:	40014000 	.word	0x40014000
 8009324:	40014400 	.word	0x40014400
 8009328:	40014800 	.word	0x40014800

0800932c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800932c:	b480      	push	{r7}
 800932e:	b087      	sub	sp, #28
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6a1b      	ldr	r3, [r3, #32]
 800933a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6a1b      	ldr	r3, [r3, #32]
 8009346:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	69db      	ldr	r3, [r3, #28]
 8009352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800935a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800935e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f023 0303 	bic.w	r3, r3, #3
 8009366:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	68fa      	ldr	r2, [r7, #12]
 800936e:	4313      	orrs	r3, r2
 8009370:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009378:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	689b      	ldr	r3, [r3, #8]
 800937e:	021b      	lsls	r3, r3, #8
 8009380:	697a      	ldr	r2, [r7, #20]
 8009382:	4313      	orrs	r3, r2
 8009384:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	4a27      	ldr	r2, [pc, #156]	; (8009428 <TIM_OC3_SetConfig+0xfc>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d003      	beq.n	8009396 <TIM_OC3_SetConfig+0x6a>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	4a26      	ldr	r2, [pc, #152]	; (800942c <TIM_OC3_SetConfig+0x100>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d10d      	bne.n	80093b2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800939c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	68db      	ldr	r3, [r3, #12]
 80093a2:	021b      	lsls	r3, r3, #8
 80093a4:	697a      	ldr	r2, [r7, #20]
 80093a6:	4313      	orrs	r3, r2
 80093a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80093b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	4a1c      	ldr	r2, [pc, #112]	; (8009428 <TIM_OC3_SetConfig+0xfc>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d00f      	beq.n	80093da <TIM_OC3_SetConfig+0xae>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	4a1b      	ldr	r2, [pc, #108]	; (800942c <TIM_OC3_SetConfig+0x100>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d00b      	beq.n	80093da <TIM_OC3_SetConfig+0xae>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	4a1a      	ldr	r2, [pc, #104]	; (8009430 <TIM_OC3_SetConfig+0x104>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d007      	beq.n	80093da <TIM_OC3_SetConfig+0xae>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	4a19      	ldr	r2, [pc, #100]	; (8009434 <TIM_OC3_SetConfig+0x108>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d003      	beq.n	80093da <TIM_OC3_SetConfig+0xae>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	4a18      	ldr	r2, [pc, #96]	; (8009438 <TIM_OC3_SetConfig+0x10c>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d113      	bne.n	8009402 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80093e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80093e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	695b      	ldr	r3, [r3, #20]
 80093ee:	011b      	lsls	r3, r3, #4
 80093f0:	693a      	ldr	r2, [r7, #16]
 80093f2:	4313      	orrs	r3, r2
 80093f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	699b      	ldr	r3, [r3, #24]
 80093fa:	011b      	lsls	r3, r3, #4
 80093fc:	693a      	ldr	r2, [r7, #16]
 80093fe:	4313      	orrs	r3, r2
 8009400:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	693a      	ldr	r2, [r7, #16]
 8009406:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	68fa      	ldr	r2, [r7, #12]
 800940c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	685a      	ldr	r2, [r3, #4]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	697a      	ldr	r2, [r7, #20]
 800941a:	621a      	str	r2, [r3, #32]
}
 800941c:	bf00      	nop
 800941e:	371c      	adds	r7, #28
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr
 8009428:	40012c00 	.word	0x40012c00
 800942c:	40013400 	.word	0x40013400
 8009430:	40014000 	.word	0x40014000
 8009434:	40014400 	.word	0x40014400
 8009438:	40014800 	.word	0x40014800

0800943c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800943c:	b480      	push	{r7}
 800943e:	b087      	sub	sp, #28
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6a1b      	ldr	r3, [r3, #32]
 800944a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6a1b      	ldr	r3, [r3, #32]
 8009456:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	685b      	ldr	r3, [r3, #4]
 800945c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	69db      	ldr	r3, [r3, #28]
 8009462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800946a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800946e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009476:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	021b      	lsls	r3, r3, #8
 800947e:	68fa      	ldr	r2, [r7, #12]
 8009480:	4313      	orrs	r3, r2
 8009482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800948a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	689b      	ldr	r3, [r3, #8]
 8009490:	031b      	lsls	r3, r3, #12
 8009492:	697a      	ldr	r2, [r7, #20]
 8009494:	4313      	orrs	r3, r2
 8009496:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	4a28      	ldr	r2, [pc, #160]	; (800953c <TIM_OC4_SetConfig+0x100>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d003      	beq.n	80094a8 <TIM_OC4_SetConfig+0x6c>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	4a27      	ldr	r2, [pc, #156]	; (8009540 <TIM_OC4_SetConfig+0x104>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d10d      	bne.n	80094c4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80094ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	68db      	ldr	r3, [r3, #12]
 80094b4:	031b      	lsls	r3, r3, #12
 80094b6:	697a      	ldr	r2, [r7, #20]
 80094b8:	4313      	orrs	r3, r2
 80094ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80094c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	4a1d      	ldr	r2, [pc, #116]	; (800953c <TIM_OC4_SetConfig+0x100>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d00f      	beq.n	80094ec <TIM_OC4_SetConfig+0xb0>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	4a1c      	ldr	r2, [pc, #112]	; (8009540 <TIM_OC4_SetConfig+0x104>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d00b      	beq.n	80094ec <TIM_OC4_SetConfig+0xb0>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	4a1b      	ldr	r2, [pc, #108]	; (8009544 <TIM_OC4_SetConfig+0x108>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d007      	beq.n	80094ec <TIM_OC4_SetConfig+0xb0>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	4a1a      	ldr	r2, [pc, #104]	; (8009548 <TIM_OC4_SetConfig+0x10c>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d003      	beq.n	80094ec <TIM_OC4_SetConfig+0xb0>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	4a19      	ldr	r2, [pc, #100]	; (800954c <TIM_OC4_SetConfig+0x110>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d113      	bne.n	8009514 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80094f2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80094fa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	695b      	ldr	r3, [r3, #20]
 8009500:	019b      	lsls	r3, r3, #6
 8009502:	693a      	ldr	r2, [r7, #16]
 8009504:	4313      	orrs	r3, r2
 8009506:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	699b      	ldr	r3, [r3, #24]
 800950c:	019b      	lsls	r3, r3, #6
 800950e:	693a      	ldr	r2, [r7, #16]
 8009510:	4313      	orrs	r3, r2
 8009512:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	693a      	ldr	r2, [r7, #16]
 8009518:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	68fa      	ldr	r2, [r7, #12]
 800951e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	685a      	ldr	r2, [r3, #4]
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	697a      	ldr	r2, [r7, #20]
 800952c:	621a      	str	r2, [r3, #32]
}
 800952e:	bf00      	nop
 8009530:	371c      	adds	r7, #28
 8009532:	46bd      	mov	sp, r7
 8009534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009538:	4770      	bx	lr
 800953a:	bf00      	nop
 800953c:	40012c00 	.word	0x40012c00
 8009540:	40013400 	.word	0x40013400
 8009544:	40014000 	.word	0x40014000
 8009548:	40014400 	.word	0x40014400
 800954c:	40014800 	.word	0x40014800

08009550 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009550:	b480      	push	{r7}
 8009552:	b087      	sub	sp, #28
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6a1b      	ldr	r3, [r3, #32]
 800955e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6a1b      	ldr	r3, [r3, #32]
 800956a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800957e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009582:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	68fa      	ldr	r2, [r7, #12]
 800958a:	4313      	orrs	r3, r2
 800958c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009594:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	689b      	ldr	r3, [r3, #8]
 800959a:	041b      	lsls	r3, r3, #16
 800959c:	693a      	ldr	r2, [r7, #16]
 800959e:	4313      	orrs	r3, r2
 80095a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	4a17      	ldr	r2, [pc, #92]	; (8009604 <TIM_OC5_SetConfig+0xb4>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d00f      	beq.n	80095ca <TIM_OC5_SetConfig+0x7a>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	4a16      	ldr	r2, [pc, #88]	; (8009608 <TIM_OC5_SetConfig+0xb8>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d00b      	beq.n	80095ca <TIM_OC5_SetConfig+0x7a>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	4a15      	ldr	r2, [pc, #84]	; (800960c <TIM_OC5_SetConfig+0xbc>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d007      	beq.n	80095ca <TIM_OC5_SetConfig+0x7a>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	4a14      	ldr	r2, [pc, #80]	; (8009610 <TIM_OC5_SetConfig+0xc0>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d003      	beq.n	80095ca <TIM_OC5_SetConfig+0x7a>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	4a13      	ldr	r2, [pc, #76]	; (8009614 <TIM_OC5_SetConfig+0xc4>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d109      	bne.n	80095de <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80095d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	695b      	ldr	r3, [r3, #20]
 80095d6:	021b      	lsls	r3, r3, #8
 80095d8:	697a      	ldr	r2, [r7, #20]
 80095da:	4313      	orrs	r3, r2
 80095dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	697a      	ldr	r2, [r7, #20]
 80095e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	68fa      	ldr	r2, [r7, #12]
 80095e8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	685a      	ldr	r2, [r3, #4]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	693a      	ldr	r2, [r7, #16]
 80095f6:	621a      	str	r2, [r3, #32]
}
 80095f8:	bf00      	nop
 80095fa:	371c      	adds	r7, #28
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr
 8009604:	40012c00 	.word	0x40012c00
 8009608:	40013400 	.word	0x40013400
 800960c:	40014000 	.word	0x40014000
 8009610:	40014400 	.word	0x40014400
 8009614:	40014800 	.word	0x40014800

08009618 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009618:	b480      	push	{r7}
 800961a:	b087      	sub	sp, #28
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6a1b      	ldr	r3, [r3, #32]
 8009626:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6a1b      	ldr	r3, [r3, #32]
 8009632:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	685b      	ldr	r3, [r3, #4]
 8009638:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800963e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009646:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800964a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	021b      	lsls	r3, r3, #8
 8009652:	68fa      	ldr	r2, [r7, #12]
 8009654:	4313      	orrs	r3, r2
 8009656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800965e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	689b      	ldr	r3, [r3, #8]
 8009664:	051b      	lsls	r3, r3, #20
 8009666:	693a      	ldr	r2, [r7, #16]
 8009668:	4313      	orrs	r3, r2
 800966a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	4a18      	ldr	r2, [pc, #96]	; (80096d0 <TIM_OC6_SetConfig+0xb8>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d00f      	beq.n	8009694 <TIM_OC6_SetConfig+0x7c>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	4a17      	ldr	r2, [pc, #92]	; (80096d4 <TIM_OC6_SetConfig+0xbc>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d00b      	beq.n	8009694 <TIM_OC6_SetConfig+0x7c>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	4a16      	ldr	r2, [pc, #88]	; (80096d8 <TIM_OC6_SetConfig+0xc0>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d007      	beq.n	8009694 <TIM_OC6_SetConfig+0x7c>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	4a15      	ldr	r2, [pc, #84]	; (80096dc <TIM_OC6_SetConfig+0xc4>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d003      	beq.n	8009694 <TIM_OC6_SetConfig+0x7c>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	4a14      	ldr	r2, [pc, #80]	; (80096e0 <TIM_OC6_SetConfig+0xc8>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d109      	bne.n	80096a8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800969a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	695b      	ldr	r3, [r3, #20]
 80096a0:	029b      	lsls	r3, r3, #10
 80096a2:	697a      	ldr	r2, [r7, #20]
 80096a4:	4313      	orrs	r3, r2
 80096a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	697a      	ldr	r2, [r7, #20]
 80096ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	68fa      	ldr	r2, [r7, #12]
 80096b2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	685a      	ldr	r2, [r3, #4]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	693a      	ldr	r2, [r7, #16]
 80096c0:	621a      	str	r2, [r3, #32]
}
 80096c2:	bf00      	nop
 80096c4:	371c      	adds	r7, #28
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr
 80096ce:	bf00      	nop
 80096d0:	40012c00 	.word	0x40012c00
 80096d4:	40013400 	.word	0x40013400
 80096d8:	40014000 	.word	0x40014000
 80096dc:	40014400 	.word	0x40014400
 80096e0:	40014800 	.word	0x40014800

080096e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b087      	sub	sp, #28
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	60f8      	str	r0, [r7, #12]
 80096ec:	60b9      	str	r1, [r7, #8]
 80096ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	6a1b      	ldr	r3, [r3, #32]
 80096f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	6a1b      	ldr	r3, [r3, #32]
 80096fa:	f023 0201 	bic.w	r2, r3, #1
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	699b      	ldr	r3, [r3, #24]
 8009706:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009708:	693b      	ldr	r3, [r7, #16]
 800970a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800970e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	011b      	lsls	r3, r3, #4
 8009714:	693a      	ldr	r2, [r7, #16]
 8009716:	4313      	orrs	r3, r2
 8009718:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	f023 030a 	bic.w	r3, r3, #10
 8009720:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009722:	697a      	ldr	r2, [r7, #20]
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	4313      	orrs	r3, r2
 8009728:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	693a      	ldr	r2, [r7, #16]
 800972e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	697a      	ldr	r2, [r7, #20]
 8009734:	621a      	str	r2, [r3, #32]
}
 8009736:	bf00      	nop
 8009738:	371c      	adds	r7, #28
 800973a:	46bd      	mov	sp, r7
 800973c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009740:	4770      	bx	lr

08009742 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009742:	b480      	push	{r7}
 8009744:	b087      	sub	sp, #28
 8009746:	af00      	add	r7, sp, #0
 8009748:	60f8      	str	r0, [r7, #12]
 800974a:	60b9      	str	r1, [r7, #8]
 800974c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	6a1b      	ldr	r3, [r3, #32]
 8009752:	f023 0210 	bic.w	r2, r3, #16
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	699b      	ldr	r3, [r3, #24]
 800975e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	6a1b      	ldr	r3, [r3, #32]
 8009764:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800976c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	031b      	lsls	r3, r3, #12
 8009772:	697a      	ldr	r2, [r7, #20]
 8009774:	4313      	orrs	r3, r2
 8009776:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800977e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	011b      	lsls	r3, r3, #4
 8009784:	693a      	ldr	r2, [r7, #16]
 8009786:	4313      	orrs	r3, r2
 8009788:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	697a      	ldr	r2, [r7, #20]
 800978e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	693a      	ldr	r2, [r7, #16]
 8009794:	621a      	str	r2, [r3, #32]
}
 8009796:	bf00      	nop
 8009798:	371c      	adds	r7, #28
 800979a:	46bd      	mov	sp, r7
 800979c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a0:	4770      	bx	lr

080097a2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80097a2:	b480      	push	{r7}
 80097a4:	b085      	sub	sp, #20
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	6078      	str	r0, [r7, #4]
 80097aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	689b      	ldr	r3, [r3, #8]
 80097b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80097b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80097be:	683a      	ldr	r2, [r7, #0]
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	4313      	orrs	r3, r2
 80097c4:	f043 0307 	orr.w	r3, r3, #7
 80097c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	68fa      	ldr	r2, [r7, #12]
 80097ce:	609a      	str	r2, [r3, #8]
}
 80097d0:	bf00      	nop
 80097d2:	3714      	adds	r7, #20
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr

080097dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80097dc:	b480      	push	{r7}
 80097de:	b087      	sub	sp, #28
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	60f8      	str	r0, [r7, #12]
 80097e4:	60b9      	str	r1, [r7, #8]
 80097e6:	607a      	str	r2, [r7, #4]
 80097e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	689b      	ldr	r3, [r3, #8]
 80097ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80097f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	021a      	lsls	r2, r3, #8
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	431a      	orrs	r2, r3
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	4313      	orrs	r3, r2
 8009804:	697a      	ldr	r2, [r7, #20]
 8009806:	4313      	orrs	r3, r2
 8009808:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	697a      	ldr	r2, [r7, #20]
 800980e:	609a      	str	r2, [r3, #8]
}
 8009810:	bf00      	nop
 8009812:	371c      	adds	r7, #28
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr

0800981c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800981c:	b480      	push	{r7}
 800981e:	b087      	sub	sp, #28
 8009820:	af00      	add	r7, sp, #0
 8009822:	60f8      	str	r0, [r7, #12]
 8009824:	60b9      	str	r1, [r7, #8]
 8009826:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	f003 031f 	and.w	r3, r3, #31
 800982e:	2201      	movs	r2, #1
 8009830:	fa02 f303 	lsl.w	r3, r2, r3
 8009834:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	6a1a      	ldr	r2, [r3, #32]
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	43db      	mvns	r3, r3
 800983e:	401a      	ands	r2, r3
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	6a1a      	ldr	r2, [r3, #32]
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	f003 031f 	and.w	r3, r3, #31
 800984e:	6879      	ldr	r1, [r7, #4]
 8009850:	fa01 f303 	lsl.w	r3, r1, r3
 8009854:	431a      	orrs	r2, r3
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	621a      	str	r2, [r3, #32]
}
 800985a:	bf00      	nop
 800985c:	371c      	adds	r7, #28
 800985e:	46bd      	mov	sp, r7
 8009860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009864:	4770      	bx	lr
	...

08009868 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b084      	sub	sp, #16
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d109      	bne.n	800988c <HAL_TIMEx_PWMN_Start+0x24>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800987e:	b2db      	uxtb	r3, r3
 8009880:	2b01      	cmp	r3, #1
 8009882:	bf14      	ite	ne
 8009884:	2301      	movne	r3, #1
 8009886:	2300      	moveq	r3, #0
 8009888:	b2db      	uxtb	r3, r3
 800988a:	e022      	b.n	80098d2 <HAL_TIMEx_PWMN_Start+0x6a>
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	2b04      	cmp	r3, #4
 8009890:	d109      	bne.n	80098a6 <HAL_TIMEx_PWMN_Start+0x3e>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009898:	b2db      	uxtb	r3, r3
 800989a:	2b01      	cmp	r3, #1
 800989c:	bf14      	ite	ne
 800989e:	2301      	movne	r3, #1
 80098a0:	2300      	moveq	r3, #0
 80098a2:	b2db      	uxtb	r3, r3
 80098a4:	e015      	b.n	80098d2 <HAL_TIMEx_PWMN_Start+0x6a>
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	2b08      	cmp	r3, #8
 80098aa:	d109      	bne.n	80098c0 <HAL_TIMEx_PWMN_Start+0x58>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80098b2:	b2db      	uxtb	r3, r3
 80098b4:	2b01      	cmp	r3, #1
 80098b6:	bf14      	ite	ne
 80098b8:	2301      	movne	r3, #1
 80098ba:	2300      	moveq	r3, #0
 80098bc:	b2db      	uxtb	r3, r3
 80098be:	e008      	b.n	80098d2 <HAL_TIMEx_PWMN_Start+0x6a>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80098c6:	b2db      	uxtb	r3, r3
 80098c8:	2b01      	cmp	r3, #1
 80098ca:	bf14      	ite	ne
 80098cc:	2301      	movne	r3, #1
 80098ce:	2300      	moveq	r3, #0
 80098d0:	b2db      	uxtb	r3, r3
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d001      	beq.n	80098da <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80098d6:	2301      	movs	r3, #1
 80098d8:	e069      	b.n	80099ae <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d104      	bne.n	80098ea <HAL_TIMEx_PWMN_Start+0x82>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2202      	movs	r2, #2
 80098e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098e8:	e013      	b.n	8009912 <HAL_TIMEx_PWMN_Start+0xaa>
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	2b04      	cmp	r3, #4
 80098ee:	d104      	bne.n	80098fa <HAL_TIMEx_PWMN_Start+0x92>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2202      	movs	r2, #2
 80098f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80098f8:	e00b      	b.n	8009912 <HAL_TIMEx_PWMN_Start+0xaa>
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	2b08      	cmp	r3, #8
 80098fe:	d104      	bne.n	800990a <HAL_TIMEx_PWMN_Start+0xa2>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2202      	movs	r2, #2
 8009904:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009908:	e003      	b.n	8009912 <HAL_TIMEx_PWMN_Start+0xaa>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2202      	movs	r2, #2
 800990e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	2204      	movs	r2, #4
 8009918:	6839      	ldr	r1, [r7, #0]
 800991a:	4618      	mov	r0, r3
 800991c:	f000 fa1e 	bl	8009d5c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800992e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	4a20      	ldr	r2, [pc, #128]	; (80099b8 <HAL_TIMEx_PWMN_Start+0x150>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d018      	beq.n	800996c <HAL_TIMEx_PWMN_Start+0x104>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009942:	d013      	beq.n	800996c <HAL_TIMEx_PWMN_Start+0x104>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	4a1c      	ldr	r2, [pc, #112]	; (80099bc <HAL_TIMEx_PWMN_Start+0x154>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d00e      	beq.n	800996c <HAL_TIMEx_PWMN_Start+0x104>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	4a1b      	ldr	r2, [pc, #108]	; (80099c0 <HAL_TIMEx_PWMN_Start+0x158>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d009      	beq.n	800996c <HAL_TIMEx_PWMN_Start+0x104>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	4a19      	ldr	r2, [pc, #100]	; (80099c4 <HAL_TIMEx_PWMN_Start+0x15c>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d004      	beq.n	800996c <HAL_TIMEx_PWMN_Start+0x104>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4a18      	ldr	r2, [pc, #96]	; (80099c8 <HAL_TIMEx_PWMN_Start+0x160>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d115      	bne.n	8009998 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	689a      	ldr	r2, [r3, #8]
 8009972:	4b16      	ldr	r3, [pc, #88]	; (80099cc <HAL_TIMEx_PWMN_Start+0x164>)
 8009974:	4013      	ands	r3, r2
 8009976:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2b06      	cmp	r3, #6
 800997c:	d015      	beq.n	80099aa <HAL_TIMEx_PWMN_Start+0x142>
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009984:	d011      	beq.n	80099aa <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	681a      	ldr	r2, [r3, #0]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f042 0201 	orr.w	r2, r2, #1
 8009994:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009996:	e008      	b.n	80099aa <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	681a      	ldr	r2, [r3, #0]
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f042 0201 	orr.w	r2, r2, #1
 80099a6:	601a      	str	r2, [r3, #0]
 80099a8:	e000      	b.n	80099ac <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80099ac:	2300      	movs	r3, #0
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3710      	adds	r7, #16
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
 80099b6:	bf00      	nop
 80099b8:	40012c00 	.word	0x40012c00
 80099bc:	40000400 	.word	0x40000400
 80099c0:	40000800 	.word	0x40000800
 80099c4:	40013400 	.word	0x40013400
 80099c8:	40014000 	.word	0x40014000
 80099cc:	00010007 	.word	0x00010007

080099d0 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b082      	sub	sp, #8
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	2200      	movs	r2, #0
 80099e0:	6839      	ldr	r1, [r7, #0]
 80099e2:	4618      	mov	r0, r3
 80099e4:	f000 f9ba 	bl	8009d5c <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	6a1a      	ldr	r2, [r3, #32]
 80099ee:	f241 1311 	movw	r3, #4369	; 0x1111
 80099f2:	4013      	ands	r3, r2
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d10f      	bne.n	8009a18 <HAL_TIMEx_PWMN_Stop+0x48>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	6a1a      	ldr	r2, [r3, #32]
 80099fe:	f244 4344 	movw	r3, #17476	; 0x4444
 8009a02:	4013      	ands	r3, r2
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d107      	bne.n	8009a18 <HAL_TIMEx_PWMN_Stop+0x48>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009a16:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	6a1a      	ldr	r2, [r3, #32]
 8009a1e:	f241 1311 	movw	r3, #4369	; 0x1111
 8009a22:	4013      	ands	r3, r2
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d10f      	bne.n	8009a48 <HAL_TIMEx_PWMN_Stop+0x78>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	6a1a      	ldr	r2, [r3, #32]
 8009a2e:	f244 4344 	movw	r3, #17476	; 0x4444
 8009a32:	4013      	ands	r3, r2
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d107      	bne.n	8009a48 <HAL_TIMEx_PWMN_Stop+0x78>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	681a      	ldr	r2, [r3, #0]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f022 0201 	bic.w	r2, r2, #1
 8009a46:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d104      	bne.n	8009a58 <HAL_TIMEx_PWMN_Stop+0x88>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2201      	movs	r2, #1
 8009a52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a56:	e013      	b.n	8009a80 <HAL_TIMEx_PWMN_Stop+0xb0>
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	2b04      	cmp	r3, #4
 8009a5c:	d104      	bne.n	8009a68 <HAL_TIMEx_PWMN_Stop+0x98>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2201      	movs	r2, #1
 8009a62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009a66:	e00b      	b.n	8009a80 <HAL_TIMEx_PWMN_Stop+0xb0>
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	2b08      	cmp	r3, #8
 8009a6c:	d104      	bne.n	8009a78 <HAL_TIMEx_PWMN_Stop+0xa8>
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2201      	movs	r2, #1
 8009a72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009a76:	e003      	b.n	8009a80 <HAL_TIMEx_PWMN_Stop+0xb0>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8009a80:	2300      	movs	r3, #0
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3708      	adds	r7, #8
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
	...

08009a8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b085      	sub	sp, #20
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a9c:	2b01      	cmp	r3, #1
 8009a9e:	d101      	bne.n	8009aa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009aa0:	2302      	movs	r3, #2
 8009aa2:	e065      	b.n	8009b70 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2202      	movs	r2, #2
 8009ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	685b      	ldr	r3, [r3, #4]
 8009aba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	689b      	ldr	r3, [r3, #8]
 8009ac2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4a2c      	ldr	r2, [pc, #176]	; (8009b7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d004      	beq.n	8009ad8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	4a2b      	ldr	r2, [pc, #172]	; (8009b80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d108      	bne.n	8009aea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009ade:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	685b      	ldr	r3, [r3, #4]
 8009ae4:	68fa      	ldr	r2, [r7, #12]
 8009ae6:	4313      	orrs	r3, r2
 8009ae8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009af0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009af4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	68fa      	ldr	r2, [r7, #12]
 8009afc:	4313      	orrs	r3, r2
 8009afe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	68fa      	ldr	r2, [r7, #12]
 8009b06:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	4a1b      	ldr	r2, [pc, #108]	; (8009b7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d018      	beq.n	8009b44 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b1a:	d013      	beq.n	8009b44 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4a18      	ldr	r2, [pc, #96]	; (8009b84 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d00e      	beq.n	8009b44 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	4a17      	ldr	r2, [pc, #92]	; (8009b88 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d009      	beq.n	8009b44 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	4a12      	ldr	r2, [pc, #72]	; (8009b80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d004      	beq.n	8009b44 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	4a13      	ldr	r2, [pc, #76]	; (8009b8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d10c      	bne.n	8009b5e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b4a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	689b      	ldr	r3, [r3, #8]
 8009b50:	68ba      	ldr	r2, [r7, #8]
 8009b52:	4313      	orrs	r3, r2
 8009b54:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	68ba      	ldr	r2, [r7, #8]
 8009b5c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2201      	movs	r2, #1
 8009b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b6e:	2300      	movs	r3, #0
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	3714      	adds	r7, #20
 8009b74:	46bd      	mov	sp, r7
 8009b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7a:	4770      	bx	lr
 8009b7c:	40012c00 	.word	0x40012c00
 8009b80:	40013400 	.word	0x40013400
 8009b84:	40000400 	.word	0x40000400
 8009b88:	40000800 	.word	0x40000800
 8009b8c:	40014000 	.word	0x40014000

08009b90 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009b90:	b480      	push	{r7}
 8009b92:	b085      	sub	sp, #20
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ba4:	2b01      	cmp	r3, #1
 8009ba6:	d101      	bne.n	8009bac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009ba8:	2302      	movs	r3, #2
 8009baa:	e087      	b.n	8009cbc <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2201      	movs	r2, #1
 8009bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	68db      	ldr	r3, [r3, #12]
 8009bbe:	4313      	orrs	r3, r2
 8009bc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	689b      	ldr	r3, [r3, #8]
 8009bcc:	4313      	orrs	r3, r2
 8009bce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	4313      	orrs	r3, r2
 8009bdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	4313      	orrs	r3, r2
 8009bea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	691b      	ldr	r3, [r3, #16]
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	695b      	ldr	r3, [r3, #20]
 8009c04:	4313      	orrs	r3, r2
 8009c06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c12:	4313      	orrs	r3, r2
 8009c14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	699b      	ldr	r3, [r3, #24]
 8009c20:	041b      	lsls	r3, r3, #16
 8009c22:	4313      	orrs	r3, r2
 8009c24:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4a27      	ldr	r2, [pc, #156]	; (8009cc8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d004      	beq.n	8009c3a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4a25      	ldr	r2, [pc, #148]	; (8009ccc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d106      	bne.n	8009c48 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	69db      	ldr	r3, [r3, #28]
 8009c44:	4313      	orrs	r3, r2
 8009c46:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	4a1e      	ldr	r2, [pc, #120]	; (8009cc8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d004      	beq.n	8009c5c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	4a1d      	ldr	r2, [pc, #116]	; (8009ccc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d126      	bne.n	8009caa <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c66:	051b      	lsls	r3, r3, #20
 8009c68:	4313      	orrs	r3, r2
 8009c6a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	6a1b      	ldr	r3, [r3, #32]
 8009c76:	4313      	orrs	r3, r2
 8009c78:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c84:	4313      	orrs	r3, r2
 8009c86:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	4a0e      	ldr	r2, [pc, #56]	; (8009cc8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d004      	beq.n	8009c9c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	4a0d      	ldr	r2, [pc, #52]	; (8009ccc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d106      	bne.n	8009caa <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	68fa      	ldr	r2, [r7, #12]
 8009cb0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009cba:	2300      	movs	r3, #0
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3714      	adds	r7, #20
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr
 8009cc8:	40012c00 	.word	0x40012c00
 8009ccc:	40013400 	.word	0x40013400

08009cd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b083      	sub	sp, #12
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009cd8:	bf00      	nop
 8009cda:	370c      	adds	r7, #12
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce2:	4770      	bx	lr

08009ce4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b083      	sub	sp, #12
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009cec:	bf00      	nop
 8009cee:	370c      	adds	r7, #12
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf6:	4770      	bx	lr

08009cf8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b083      	sub	sp, #12
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009d00:	bf00      	nop
 8009d02:	370c      	adds	r7, #12
 8009d04:	46bd      	mov	sp, r7
 8009d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0a:	4770      	bx	lr

08009d0c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b083      	sub	sp, #12
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009d14:	bf00      	nop
 8009d16:	370c      	adds	r7, #12
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1e:	4770      	bx	lr

08009d20 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009d20:	b480      	push	{r7}
 8009d22:	b083      	sub	sp, #12
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009d28:	bf00      	nop
 8009d2a:	370c      	adds	r7, #12
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr

08009d34 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b083      	sub	sp, #12
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009d3c:	bf00      	nop
 8009d3e:	370c      	adds	r7, #12
 8009d40:	46bd      	mov	sp, r7
 8009d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d46:	4770      	bx	lr

08009d48 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b083      	sub	sp, #12
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009d50:	bf00      	nop
 8009d52:	370c      	adds	r7, #12
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr

08009d5c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b087      	sub	sp, #28
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	60f8      	str	r0, [r7, #12]
 8009d64:	60b9      	str	r1, [r7, #8]
 8009d66:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	f003 031f 	and.w	r3, r3, #31
 8009d6e:	2204      	movs	r2, #4
 8009d70:	fa02 f303 	lsl.w	r3, r2, r3
 8009d74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	6a1a      	ldr	r2, [r3, #32]
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	43db      	mvns	r3, r3
 8009d7e:	401a      	ands	r2, r3
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	6a1a      	ldr	r2, [r3, #32]
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	f003 031f 	and.w	r3, r3, #31
 8009d8e:	6879      	ldr	r1, [r7, #4]
 8009d90:	fa01 f303 	lsl.w	r3, r1, r3
 8009d94:	431a      	orrs	r2, r3
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	621a      	str	r2, [r3, #32]
}
 8009d9a:	bf00      	nop
 8009d9c:	371c      	adds	r7, #28
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da4:	4770      	bx	lr

08009da6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009da6:	b580      	push	{r7, lr}
 8009da8:	b082      	sub	sp, #8
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d101      	bne.n	8009db8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009db4:	2301      	movs	r3, #1
 8009db6:	e042      	b.n	8009e3e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d106      	bne.n	8009dd0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f7f9 fcd4 	bl	8003778 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2224      	movs	r2, #36	; 0x24
 8009dd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	681a      	ldr	r2, [r3, #0]
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f022 0201 	bic.w	r2, r2, #1
 8009de6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f000 fbf7 	bl	800a5dc <UART_SetConfig>
 8009dee:	4603      	mov	r3, r0
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	d101      	bne.n	8009df8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009df4:	2301      	movs	r3, #1
 8009df6:	e022      	b.n	8009e3e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d002      	beq.n	8009e06 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f000 feb7 	bl	800ab74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	685a      	ldr	r2, [r3, #4]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009e14:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	689a      	ldr	r2, [r3, #8]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009e24:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	681a      	ldr	r2, [r3, #0]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f042 0201 	orr.w	r2, r2, #1
 8009e34:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f000 ff3e 	bl	800acb8 <UART_CheckIdleState>
 8009e3c:	4603      	mov	r3, r0
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3708      	adds	r7, #8
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}
	...

08009e48 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b08a      	sub	sp, #40	; 0x28
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	60f8      	str	r0, [r7, #12]
 8009e50:	60b9      	str	r1, [r7, #8]
 8009e52:	4613      	mov	r3, r2
 8009e54:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e5c:	2b20      	cmp	r3, #32
 8009e5e:	d17a      	bne.n	8009f56 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d002      	beq.n	8009e6c <HAL_UART_Transmit_DMA+0x24>
 8009e66:	88fb      	ldrh	r3, [r7, #6]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d101      	bne.n	8009e70 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	e073      	b.n	8009f58 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009e76:	2b01      	cmp	r3, #1
 8009e78:	d101      	bne.n	8009e7e <HAL_UART_Transmit_DMA+0x36>
 8009e7a:	2302      	movs	r3, #2
 8009e7c:	e06c      	b.n	8009f58 <HAL_UART_Transmit_DMA+0x110>
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	2201      	movs	r2, #1
 8009e82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	68ba      	ldr	r2, [r7, #8]
 8009e8a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	88fa      	ldrh	r2, [r7, #6]
 8009e90:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	88fa      	ldrh	r2, [r7, #6]
 8009e98:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	2221      	movs	r2, #33	; 0x21
 8009ea8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d02c      	beq.n	8009f0e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009eb8:	4a29      	ldr	r2, [pc, #164]	; (8009f60 <HAL_UART_Transmit_DMA+0x118>)
 8009eba:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ec0:	4a28      	ldr	r2, [pc, #160]	; (8009f64 <HAL_UART_Transmit_DMA+0x11c>)
 8009ec2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ec8:	4a27      	ldr	r2, [pc, #156]	; (8009f68 <HAL_UART_Transmit_DMA+0x120>)
 8009eca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009edc:	4619      	mov	r1, r3
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	3328      	adds	r3, #40	; 0x28
 8009ee4:	461a      	mov	r2, r3
 8009ee6:	88fb      	ldrh	r3, [r7, #6]
 8009ee8:	f7fb fdb6 	bl	8005a58 <HAL_DMA_Start_IT>
 8009eec:	4603      	mov	r3, r0
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d00d      	beq.n	8009f0e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	2210      	movs	r2, #16
 8009ef6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	2200      	movs	r2, #0
 8009efe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	2220      	movs	r2, #32
 8009f06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	e024      	b.n	8009f58 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	2240      	movs	r2, #64	; 0x40
 8009f14:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	3308      	adds	r3, #8
 8009f24:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	e853 3f00 	ldrex	r3, [r3]
 8009f2c:	613b      	str	r3, [r7, #16]
   return(result);
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f34:	627b      	str	r3, [r7, #36]	; 0x24
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	3308      	adds	r3, #8
 8009f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f3e:	623a      	str	r2, [r7, #32]
 8009f40:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f42:	69f9      	ldr	r1, [r7, #28]
 8009f44:	6a3a      	ldr	r2, [r7, #32]
 8009f46:	e841 2300 	strex	r3, r2, [r1]
 8009f4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8009f4c:	69bb      	ldr	r3, [r7, #24]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d1e5      	bne.n	8009f1e <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 8009f52:	2300      	movs	r3, #0
 8009f54:	e000      	b.n	8009f58 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8009f56:	2302      	movs	r3, #2
  }
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3728      	adds	r7, #40	; 0x28
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}
 8009f60:	0800b02d 	.word	0x0800b02d
 8009f64:	0800b0c7 	.word	0x0800b0c7
 8009f68:	0800b0e3 	.word	0x0800b0e3

08009f6c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b0ba      	sub	sp, #232	; 0xe8
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	69db      	ldr	r3, [r3, #28]
 8009f7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	689b      	ldr	r3, [r3, #8]
 8009f8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009f92:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009f96:	f640 030f 	movw	r3, #2063	; 0x80f
 8009f9a:	4013      	ands	r3, r2
 8009f9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009fa0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d11b      	bne.n	8009fe0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fac:	f003 0320 	and.w	r3, r3, #32
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d015      	beq.n	8009fe0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009fb8:	f003 0320 	and.w	r3, r3, #32
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d105      	bne.n	8009fcc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009fc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d009      	beq.n	8009fe0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	f000 82d6 	beq.w	800a582 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	4798      	blx	r3
      }
      return;
 8009fde:	e2d0      	b.n	800a582 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009fe0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	f000 811f 	beq.w	800a228 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009fea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009fee:	4b8b      	ldr	r3, [pc, #556]	; (800a21c <HAL_UART_IRQHandler+0x2b0>)
 8009ff0:	4013      	ands	r3, r2
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d106      	bne.n	800a004 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009ff6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009ffa:	4b89      	ldr	r3, [pc, #548]	; (800a220 <HAL_UART_IRQHandler+0x2b4>)
 8009ffc:	4013      	ands	r3, r2
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	f000 8112 	beq.w	800a228 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a008:	f003 0301 	and.w	r3, r3, #1
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d011      	beq.n	800a034 <HAL_UART_IRQHandler+0xc8>
 800a010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d00b      	beq.n	800a034 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	2201      	movs	r2, #1
 800a022:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a02a:	f043 0201 	orr.w	r2, r3, #1
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a038:	f003 0302 	and.w	r3, r3, #2
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d011      	beq.n	800a064 <HAL_UART_IRQHandler+0xf8>
 800a040:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a044:	f003 0301 	and.w	r3, r3, #1
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d00b      	beq.n	800a064 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	2202      	movs	r2, #2
 800a052:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a05a:	f043 0204 	orr.w	r2, r3, #4
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a068:	f003 0304 	and.w	r3, r3, #4
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d011      	beq.n	800a094 <HAL_UART_IRQHandler+0x128>
 800a070:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a074:	f003 0301 	and.w	r3, r3, #1
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d00b      	beq.n	800a094 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	2204      	movs	r2, #4
 800a082:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a08a:	f043 0202 	orr.w	r2, r3, #2
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a098:	f003 0308 	and.w	r3, r3, #8
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d017      	beq.n	800a0d0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a0a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0a4:	f003 0320 	and.w	r3, r3, #32
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d105      	bne.n	800a0b8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a0ac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a0b0:	4b5a      	ldr	r3, [pc, #360]	; (800a21c <HAL_UART_IRQHandler+0x2b0>)
 800a0b2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d00b      	beq.n	800a0d0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	2208      	movs	r2, #8
 800a0be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0c6:	f043 0208 	orr.w	r2, r3, #8
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a0d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d012      	beq.n	800a102 <HAL_UART_IRQHandler+0x196>
 800a0dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d00c      	beq.n	800a102 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a0f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0f8:	f043 0220 	orr.w	r2, r3, #32
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a108:	2b00      	cmp	r3, #0
 800a10a:	f000 823c 	beq.w	800a586 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a10e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a112:	f003 0320 	and.w	r3, r3, #32
 800a116:	2b00      	cmp	r3, #0
 800a118:	d013      	beq.n	800a142 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a11a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a11e:	f003 0320 	and.w	r3, r3, #32
 800a122:	2b00      	cmp	r3, #0
 800a124:	d105      	bne.n	800a132 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a126:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a12a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d007      	beq.n	800a142 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a136:	2b00      	cmp	r3, #0
 800a138:	d003      	beq.n	800a142 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a148:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	689b      	ldr	r3, [r3, #8]
 800a152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a156:	2b40      	cmp	r3, #64	; 0x40
 800a158:	d005      	beq.n	800a166 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a15a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a15e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a162:	2b00      	cmp	r3, #0
 800a164:	d04f      	beq.n	800a206 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f000 fefa 	bl	800af60 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	689b      	ldr	r3, [r3, #8]
 800a172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a176:	2b40      	cmp	r3, #64	; 0x40
 800a178:	d141      	bne.n	800a1fe <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	3308      	adds	r3, #8
 800a180:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a184:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a188:	e853 3f00 	ldrex	r3, [r3]
 800a18c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a190:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a194:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a198:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	3308      	adds	r3, #8
 800a1a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a1a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a1aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a1b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a1b6:	e841 2300 	strex	r3, r2, [r1]
 800a1ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a1be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d1d9      	bne.n	800a17a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d013      	beq.n	800a1f6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a1d2:	4a14      	ldr	r2, [pc, #80]	; (800a224 <HAL_UART_IRQHandler+0x2b8>)
 800a1d4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f7fb fd10 	bl	8005c00 <HAL_DMA_Abort_IT>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d017      	beq.n	800a216 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a1ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1ec:	687a      	ldr	r2, [r7, #4]
 800a1ee:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800a1f0:	4610      	mov	r0, r2
 800a1f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1f4:	e00f      	b.n	800a216 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f000 f9da 	bl	800a5b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1fc:	e00b      	b.n	800a216 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f000 f9d6 	bl	800a5b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a204:	e007      	b.n	800a216 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f000 f9d2 	bl	800a5b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2200      	movs	r2, #0
 800a210:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800a214:	e1b7      	b.n	800a586 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a216:	bf00      	nop
    return;
 800a218:	e1b5      	b.n	800a586 <HAL_UART_IRQHandler+0x61a>
 800a21a:	bf00      	nop
 800a21c:	10000001 	.word	0x10000001
 800a220:	04000120 	.word	0x04000120
 800a224:	0800b163 	.word	0x0800b163

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a22c:	2b01      	cmp	r3, #1
 800a22e:	f040 814a 	bne.w	800a4c6 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a236:	f003 0310 	and.w	r3, r3, #16
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	f000 8143 	beq.w	800a4c6 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a244:	f003 0310 	and.w	r3, r3, #16
 800a248:	2b00      	cmp	r3, #0
 800a24a:	f000 813c 	beq.w	800a4c6 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	2210      	movs	r2, #16
 800a254:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	689b      	ldr	r3, [r3, #8]
 800a25c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a260:	2b40      	cmp	r3, #64	; 0x40
 800a262:	f040 80b5 	bne.w	800a3d0 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	685b      	ldr	r3, [r3, #4]
 800a26e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a272:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a276:	2b00      	cmp	r3, #0
 800a278:	f000 8187 	beq.w	800a58a <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a282:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a286:	429a      	cmp	r2, r3
 800a288:	f080 817f 	bcs.w	800a58a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a292:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f003 0320 	and.w	r3, r3, #32
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	f040 8086 	bne.w	800a3b4 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a2b4:	e853 3f00 	ldrex	r3, [r3]
 800a2b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a2bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a2c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a2c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	461a      	mov	r2, r3
 800a2ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a2d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a2d6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a2de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a2e2:	e841 2300 	strex	r3, r2, [r1]
 800a2e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a2ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d1da      	bne.n	800a2a8 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	3308      	adds	r3, #8
 800a2f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a2fc:	e853 3f00 	ldrex	r3, [r3]
 800a300:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a302:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a304:	f023 0301 	bic.w	r3, r3, #1
 800a308:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	3308      	adds	r3, #8
 800a312:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a316:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a31a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a31c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a31e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a322:	e841 2300 	strex	r3, r2, [r1]
 800a326:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a328:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d1e1      	bne.n	800a2f2 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	3308      	adds	r3, #8
 800a334:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a336:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a338:	e853 3f00 	ldrex	r3, [r3]
 800a33c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a33e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a340:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a344:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	3308      	adds	r3, #8
 800a34e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a352:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a354:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a356:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a358:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a35a:	e841 2300 	strex	r3, r2, [r1]
 800a35e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a360:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a362:	2b00      	cmp	r3, #0
 800a364:	d1e3      	bne.n	800a32e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2220      	movs	r2, #32
 800a36a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2200      	movs	r2, #0
 800a372:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a37a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a37c:	e853 3f00 	ldrex	r3, [r3]
 800a380:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a382:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a384:	f023 0310 	bic.w	r3, r3, #16
 800a388:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	461a      	mov	r2, r3
 800a392:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a396:	65bb      	str	r3, [r7, #88]	; 0x58
 800a398:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a39a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a39c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a39e:	e841 2300 	strex	r3, r2, [r1]
 800a3a2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a3a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d1e4      	bne.n	800a374 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f7fb fbcd 	bl	8005b4e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a3c0:	b29b      	uxth	r3, r3
 800a3c2:	1ad3      	subs	r3, r2, r3
 800a3c4:	b29b      	uxth	r3, r3
 800a3c6:	4619      	mov	r1, r3
 800a3c8:	6878      	ldr	r0, [r7, #4]
 800a3ca:	f000 f8fb 	bl	800a5c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a3ce:	e0dc      	b.n	800a58a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a3dc:	b29b      	uxth	r3, r3
 800a3de:	1ad3      	subs	r3, r2, r3
 800a3e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a3ea:	b29b      	uxth	r3, r3
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	f000 80ce 	beq.w	800a58e <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800a3f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	f000 80c9 	beq.w	800a58e <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a404:	e853 3f00 	ldrex	r3, [r3]
 800a408:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a40a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a40c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a410:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	461a      	mov	r2, r3
 800a41a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a41e:	647b      	str	r3, [r7, #68]	; 0x44
 800a420:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a422:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a424:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a426:	e841 2300 	strex	r3, r2, [r1]
 800a42a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a42c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d1e4      	bne.n	800a3fc <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	3308      	adds	r3, #8
 800a438:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a43c:	e853 3f00 	ldrex	r3, [r3]
 800a440:	623b      	str	r3, [r7, #32]
   return(result);
 800a442:	6a3b      	ldr	r3, [r7, #32]
 800a444:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a448:	f023 0301 	bic.w	r3, r3, #1
 800a44c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	3308      	adds	r3, #8
 800a456:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a45a:	633a      	str	r2, [r7, #48]	; 0x30
 800a45c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a45e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a460:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a462:	e841 2300 	strex	r3, r2, [r1]
 800a466:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d1e1      	bne.n	800a432 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2220      	movs	r2, #32
 800a472:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2200      	movs	r2, #0
 800a47a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2200      	movs	r2, #0
 800a480:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	e853 3f00 	ldrex	r3, [r3]
 800a48e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	f023 0310 	bic.w	r3, r3, #16
 800a496:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	461a      	mov	r2, r3
 800a4a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a4a4:	61fb      	str	r3, [r7, #28]
 800a4a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4a8:	69b9      	ldr	r1, [r7, #24]
 800a4aa:	69fa      	ldr	r2, [r7, #28]
 800a4ac:	e841 2300 	strex	r3, r2, [r1]
 800a4b0:	617b      	str	r3, [r7, #20]
   return(result);
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d1e4      	bne.n	800a482 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a4b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a4bc:	4619      	mov	r1, r3
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f000 f880 	bl	800a5c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a4c4:	e063      	b.n	800a58e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a4c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d00e      	beq.n	800a4f0 <HAL_UART_IRQHandler+0x584>
 800a4d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a4d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d008      	beq.n	800a4f0 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a4e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f000 fe7b 	bl	800b1e4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a4ee:	e051      	b.n	800a594 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a4f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d014      	beq.n	800a526 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a4fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a504:	2b00      	cmp	r3, #0
 800a506:	d105      	bne.n	800a514 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a508:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a50c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a510:	2b00      	cmp	r3, #0
 800a512:	d008      	beq.n	800a526 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d03a      	beq.n	800a592 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	4798      	blx	r3
    }
    return;
 800a524:	e035      	b.n	800a592 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a52a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d009      	beq.n	800a546 <HAL_UART_IRQHandler+0x5da>
 800a532:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d003      	beq.n	800a546 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f000 fe25 	bl	800b18e <UART_EndTransmit_IT>
    return;
 800a544:	e026      	b.n	800a594 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a54a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d009      	beq.n	800a566 <HAL_UART_IRQHandler+0x5fa>
 800a552:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a556:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d003      	beq.n	800a566 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f000 fe54 	bl	800b20c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a564:	e016      	b.n	800a594 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a56a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d010      	beq.n	800a594 <HAL_UART_IRQHandler+0x628>
 800a572:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a576:	2b00      	cmp	r3, #0
 800a578:	da0c      	bge.n	800a594 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f000 fe3c 	bl	800b1f8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a580:	e008      	b.n	800a594 <HAL_UART_IRQHandler+0x628>
      return;
 800a582:	bf00      	nop
 800a584:	e006      	b.n	800a594 <HAL_UART_IRQHandler+0x628>
    return;
 800a586:	bf00      	nop
 800a588:	e004      	b.n	800a594 <HAL_UART_IRQHandler+0x628>
      return;
 800a58a:	bf00      	nop
 800a58c:	e002      	b.n	800a594 <HAL_UART_IRQHandler+0x628>
      return;
 800a58e:	bf00      	nop
 800a590:	e000      	b.n	800a594 <HAL_UART_IRQHandler+0x628>
    return;
 800a592:	bf00      	nop
  }
}
 800a594:	37e8      	adds	r7, #232	; 0xe8
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}
 800a59a:	bf00      	nop

0800a59c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a59c:	b480      	push	{r7}
 800a59e:	b083      	sub	sp, #12
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a5a4:	bf00      	nop
 800a5a6:	370c      	adds	r7, #12
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ae:	4770      	bx	lr

0800a5b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b083      	sub	sp, #12
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a5b8:	bf00      	nop
 800a5ba:	370c      	adds	r7, #12
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c2:	4770      	bx	lr

0800a5c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b083      	sub	sp, #12
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
 800a5cc:	460b      	mov	r3, r1
 800a5ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a5d0:	bf00      	nop
 800a5d2:	370c      	adds	r7, #12
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a5dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a5e0:	b08c      	sub	sp, #48	; 0x30
 800a5e2:	af00      	add	r7, sp, #0
 800a5e4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	689a      	ldr	r2, [r3, #8]
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	691b      	ldr	r3, [r3, #16]
 800a5f4:	431a      	orrs	r2, r3
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	695b      	ldr	r3, [r3, #20]
 800a5fa:	431a      	orrs	r2, r3
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	69db      	ldr	r3, [r3, #28]
 800a600:	4313      	orrs	r3, r2
 800a602:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	681a      	ldr	r2, [r3, #0]
 800a60a:	4bab      	ldr	r3, [pc, #684]	; (800a8b8 <UART_SetConfig+0x2dc>)
 800a60c:	4013      	ands	r3, r2
 800a60e:	697a      	ldr	r2, [r7, #20]
 800a610:	6812      	ldr	r2, [r2, #0]
 800a612:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a614:	430b      	orrs	r3, r1
 800a616:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	685b      	ldr	r3, [r3, #4]
 800a61e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	68da      	ldr	r2, [r3, #12]
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	430a      	orrs	r2, r1
 800a62c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	699b      	ldr	r3, [r3, #24]
 800a632:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a634:	697b      	ldr	r3, [r7, #20]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	4aa0      	ldr	r2, [pc, #640]	; (800a8bc <UART_SetConfig+0x2e0>)
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d004      	beq.n	800a648 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	6a1b      	ldr	r3, [r3, #32]
 800a642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a644:	4313      	orrs	r3, r2
 800a646:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	689b      	ldr	r3, [r3, #8]
 800a64e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800a652:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800a656:	697a      	ldr	r2, [r7, #20]
 800a658:	6812      	ldr	r2, [r2, #0]
 800a65a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a65c:	430b      	orrs	r3, r1
 800a65e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a660:	697b      	ldr	r3, [r7, #20]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a666:	f023 010f 	bic.w	r1, r3, #15
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a66e:	697b      	ldr	r3, [r7, #20]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	430a      	orrs	r2, r1
 800a674:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	4a91      	ldr	r2, [pc, #580]	; (800a8c0 <UART_SetConfig+0x2e4>)
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d125      	bne.n	800a6cc <UART_SetConfig+0xf0>
 800a680:	4b90      	ldr	r3, [pc, #576]	; (800a8c4 <UART_SetConfig+0x2e8>)
 800a682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a686:	f003 0303 	and.w	r3, r3, #3
 800a68a:	2b03      	cmp	r3, #3
 800a68c:	d81a      	bhi.n	800a6c4 <UART_SetConfig+0xe8>
 800a68e:	a201      	add	r2, pc, #4	; (adr r2, 800a694 <UART_SetConfig+0xb8>)
 800a690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a694:	0800a6a5 	.word	0x0800a6a5
 800a698:	0800a6b5 	.word	0x0800a6b5
 800a69c:	0800a6ad 	.word	0x0800a6ad
 800a6a0:	0800a6bd 	.word	0x0800a6bd
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a6aa:	e0d6      	b.n	800a85a <UART_SetConfig+0x27e>
 800a6ac:	2302      	movs	r3, #2
 800a6ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a6b2:	e0d2      	b.n	800a85a <UART_SetConfig+0x27e>
 800a6b4:	2304      	movs	r3, #4
 800a6b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a6ba:	e0ce      	b.n	800a85a <UART_SetConfig+0x27e>
 800a6bc:	2308      	movs	r3, #8
 800a6be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a6c2:	e0ca      	b.n	800a85a <UART_SetConfig+0x27e>
 800a6c4:	2310      	movs	r3, #16
 800a6c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a6ca:	e0c6      	b.n	800a85a <UART_SetConfig+0x27e>
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	4a7d      	ldr	r2, [pc, #500]	; (800a8c8 <UART_SetConfig+0x2ec>)
 800a6d2:	4293      	cmp	r3, r2
 800a6d4:	d138      	bne.n	800a748 <UART_SetConfig+0x16c>
 800a6d6:	4b7b      	ldr	r3, [pc, #492]	; (800a8c4 <UART_SetConfig+0x2e8>)
 800a6d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6dc:	f003 030c 	and.w	r3, r3, #12
 800a6e0:	2b0c      	cmp	r3, #12
 800a6e2:	d82d      	bhi.n	800a740 <UART_SetConfig+0x164>
 800a6e4:	a201      	add	r2, pc, #4	; (adr r2, 800a6ec <UART_SetConfig+0x110>)
 800a6e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6ea:	bf00      	nop
 800a6ec:	0800a721 	.word	0x0800a721
 800a6f0:	0800a741 	.word	0x0800a741
 800a6f4:	0800a741 	.word	0x0800a741
 800a6f8:	0800a741 	.word	0x0800a741
 800a6fc:	0800a731 	.word	0x0800a731
 800a700:	0800a741 	.word	0x0800a741
 800a704:	0800a741 	.word	0x0800a741
 800a708:	0800a741 	.word	0x0800a741
 800a70c:	0800a729 	.word	0x0800a729
 800a710:	0800a741 	.word	0x0800a741
 800a714:	0800a741 	.word	0x0800a741
 800a718:	0800a741 	.word	0x0800a741
 800a71c:	0800a739 	.word	0x0800a739
 800a720:	2300      	movs	r3, #0
 800a722:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a726:	e098      	b.n	800a85a <UART_SetConfig+0x27e>
 800a728:	2302      	movs	r3, #2
 800a72a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a72e:	e094      	b.n	800a85a <UART_SetConfig+0x27e>
 800a730:	2304      	movs	r3, #4
 800a732:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a736:	e090      	b.n	800a85a <UART_SetConfig+0x27e>
 800a738:	2308      	movs	r3, #8
 800a73a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a73e:	e08c      	b.n	800a85a <UART_SetConfig+0x27e>
 800a740:	2310      	movs	r3, #16
 800a742:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a746:	e088      	b.n	800a85a <UART_SetConfig+0x27e>
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	4a5f      	ldr	r2, [pc, #380]	; (800a8cc <UART_SetConfig+0x2f0>)
 800a74e:	4293      	cmp	r3, r2
 800a750:	d125      	bne.n	800a79e <UART_SetConfig+0x1c2>
 800a752:	4b5c      	ldr	r3, [pc, #368]	; (800a8c4 <UART_SetConfig+0x2e8>)
 800a754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a758:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a75c:	2b30      	cmp	r3, #48	; 0x30
 800a75e:	d016      	beq.n	800a78e <UART_SetConfig+0x1b2>
 800a760:	2b30      	cmp	r3, #48	; 0x30
 800a762:	d818      	bhi.n	800a796 <UART_SetConfig+0x1ba>
 800a764:	2b20      	cmp	r3, #32
 800a766:	d00a      	beq.n	800a77e <UART_SetConfig+0x1a2>
 800a768:	2b20      	cmp	r3, #32
 800a76a:	d814      	bhi.n	800a796 <UART_SetConfig+0x1ba>
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d002      	beq.n	800a776 <UART_SetConfig+0x19a>
 800a770:	2b10      	cmp	r3, #16
 800a772:	d008      	beq.n	800a786 <UART_SetConfig+0x1aa>
 800a774:	e00f      	b.n	800a796 <UART_SetConfig+0x1ba>
 800a776:	2300      	movs	r3, #0
 800a778:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a77c:	e06d      	b.n	800a85a <UART_SetConfig+0x27e>
 800a77e:	2302      	movs	r3, #2
 800a780:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a784:	e069      	b.n	800a85a <UART_SetConfig+0x27e>
 800a786:	2304      	movs	r3, #4
 800a788:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a78c:	e065      	b.n	800a85a <UART_SetConfig+0x27e>
 800a78e:	2308      	movs	r3, #8
 800a790:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a794:	e061      	b.n	800a85a <UART_SetConfig+0x27e>
 800a796:	2310      	movs	r3, #16
 800a798:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a79c:	e05d      	b.n	800a85a <UART_SetConfig+0x27e>
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	4a4b      	ldr	r2, [pc, #300]	; (800a8d0 <UART_SetConfig+0x2f4>)
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d125      	bne.n	800a7f4 <UART_SetConfig+0x218>
 800a7a8:	4b46      	ldr	r3, [pc, #280]	; (800a8c4 <UART_SetConfig+0x2e8>)
 800a7aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a7b2:	2bc0      	cmp	r3, #192	; 0xc0
 800a7b4:	d016      	beq.n	800a7e4 <UART_SetConfig+0x208>
 800a7b6:	2bc0      	cmp	r3, #192	; 0xc0
 800a7b8:	d818      	bhi.n	800a7ec <UART_SetConfig+0x210>
 800a7ba:	2b80      	cmp	r3, #128	; 0x80
 800a7bc:	d00a      	beq.n	800a7d4 <UART_SetConfig+0x1f8>
 800a7be:	2b80      	cmp	r3, #128	; 0x80
 800a7c0:	d814      	bhi.n	800a7ec <UART_SetConfig+0x210>
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d002      	beq.n	800a7cc <UART_SetConfig+0x1f0>
 800a7c6:	2b40      	cmp	r3, #64	; 0x40
 800a7c8:	d008      	beq.n	800a7dc <UART_SetConfig+0x200>
 800a7ca:	e00f      	b.n	800a7ec <UART_SetConfig+0x210>
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a7d2:	e042      	b.n	800a85a <UART_SetConfig+0x27e>
 800a7d4:	2302      	movs	r3, #2
 800a7d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a7da:	e03e      	b.n	800a85a <UART_SetConfig+0x27e>
 800a7dc:	2304      	movs	r3, #4
 800a7de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a7e2:	e03a      	b.n	800a85a <UART_SetConfig+0x27e>
 800a7e4:	2308      	movs	r3, #8
 800a7e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a7ea:	e036      	b.n	800a85a <UART_SetConfig+0x27e>
 800a7ec:	2310      	movs	r3, #16
 800a7ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a7f2:	e032      	b.n	800a85a <UART_SetConfig+0x27e>
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	4a30      	ldr	r2, [pc, #192]	; (800a8bc <UART_SetConfig+0x2e0>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d12a      	bne.n	800a854 <UART_SetConfig+0x278>
 800a7fe:	4b31      	ldr	r3, [pc, #196]	; (800a8c4 <UART_SetConfig+0x2e8>)
 800a800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a804:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a808:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a80c:	d01a      	beq.n	800a844 <UART_SetConfig+0x268>
 800a80e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a812:	d81b      	bhi.n	800a84c <UART_SetConfig+0x270>
 800a814:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a818:	d00c      	beq.n	800a834 <UART_SetConfig+0x258>
 800a81a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a81e:	d815      	bhi.n	800a84c <UART_SetConfig+0x270>
 800a820:	2b00      	cmp	r3, #0
 800a822:	d003      	beq.n	800a82c <UART_SetConfig+0x250>
 800a824:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a828:	d008      	beq.n	800a83c <UART_SetConfig+0x260>
 800a82a:	e00f      	b.n	800a84c <UART_SetConfig+0x270>
 800a82c:	2300      	movs	r3, #0
 800a82e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a832:	e012      	b.n	800a85a <UART_SetConfig+0x27e>
 800a834:	2302      	movs	r3, #2
 800a836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a83a:	e00e      	b.n	800a85a <UART_SetConfig+0x27e>
 800a83c:	2304      	movs	r3, #4
 800a83e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a842:	e00a      	b.n	800a85a <UART_SetConfig+0x27e>
 800a844:	2308      	movs	r3, #8
 800a846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a84a:	e006      	b.n	800a85a <UART_SetConfig+0x27e>
 800a84c:	2310      	movs	r3, #16
 800a84e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a852:	e002      	b.n	800a85a <UART_SetConfig+0x27e>
 800a854:	2310      	movs	r3, #16
 800a856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	4a17      	ldr	r2, [pc, #92]	; (800a8bc <UART_SetConfig+0x2e0>)
 800a860:	4293      	cmp	r3, r2
 800a862:	f040 80a8 	bne.w	800a9b6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a866:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a86a:	2b08      	cmp	r3, #8
 800a86c:	d834      	bhi.n	800a8d8 <UART_SetConfig+0x2fc>
 800a86e:	a201      	add	r2, pc, #4	; (adr r2, 800a874 <UART_SetConfig+0x298>)
 800a870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a874:	0800a899 	.word	0x0800a899
 800a878:	0800a8d9 	.word	0x0800a8d9
 800a87c:	0800a8a1 	.word	0x0800a8a1
 800a880:	0800a8d9 	.word	0x0800a8d9
 800a884:	0800a8a7 	.word	0x0800a8a7
 800a888:	0800a8d9 	.word	0x0800a8d9
 800a88c:	0800a8d9 	.word	0x0800a8d9
 800a890:	0800a8d9 	.word	0x0800a8d9
 800a894:	0800a8af 	.word	0x0800a8af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a898:	f7fd f8b6 	bl	8007a08 <HAL_RCC_GetPCLK1Freq>
 800a89c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a89e:	e021      	b.n	800a8e4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a8a0:	4b0c      	ldr	r3, [pc, #48]	; (800a8d4 <UART_SetConfig+0x2f8>)
 800a8a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a8a4:	e01e      	b.n	800a8e4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a8a6:	f7fd f843 	bl	8007930 <HAL_RCC_GetSysClockFreq>
 800a8aa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a8ac:	e01a      	b.n	800a8e4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a8ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a8b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a8b4:	e016      	b.n	800a8e4 <UART_SetConfig+0x308>
 800a8b6:	bf00      	nop
 800a8b8:	cfff69f3 	.word	0xcfff69f3
 800a8bc:	40008000 	.word	0x40008000
 800a8c0:	40013800 	.word	0x40013800
 800a8c4:	40021000 	.word	0x40021000
 800a8c8:	40004400 	.word	0x40004400
 800a8cc:	40004800 	.word	0x40004800
 800a8d0:	40004c00 	.word	0x40004c00
 800a8d4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a8dc:	2301      	movs	r3, #1
 800a8de:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a8e2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	f000 812a 	beq.w	800ab40 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f0:	4a9e      	ldr	r2, [pc, #632]	; (800ab6c <UART_SetConfig+0x590>)
 800a8f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8f6:	461a      	mov	r2, r3
 800a8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8fa:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8fe:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	685a      	ldr	r2, [r3, #4]
 800a904:	4613      	mov	r3, r2
 800a906:	005b      	lsls	r3, r3, #1
 800a908:	4413      	add	r3, r2
 800a90a:	69ba      	ldr	r2, [r7, #24]
 800a90c:	429a      	cmp	r2, r3
 800a90e:	d305      	bcc.n	800a91c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	685b      	ldr	r3, [r3, #4]
 800a914:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a916:	69ba      	ldr	r2, [r7, #24]
 800a918:	429a      	cmp	r2, r3
 800a91a:	d903      	bls.n	800a924 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800a91c:	2301      	movs	r3, #1
 800a91e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a922:	e10d      	b.n	800ab40 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a926:	2200      	movs	r2, #0
 800a928:	60bb      	str	r3, [r7, #8]
 800a92a:	60fa      	str	r2, [r7, #12]
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a930:	4a8e      	ldr	r2, [pc, #568]	; (800ab6c <UART_SetConfig+0x590>)
 800a932:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a936:	b29b      	uxth	r3, r3
 800a938:	2200      	movs	r2, #0
 800a93a:	603b      	str	r3, [r7, #0]
 800a93c:	607a      	str	r2, [r7, #4]
 800a93e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a942:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a946:	f7f6 f909 	bl	8000b5c <__aeabi_uldivmod>
 800a94a:	4602      	mov	r2, r0
 800a94c:	460b      	mov	r3, r1
 800a94e:	4610      	mov	r0, r2
 800a950:	4619      	mov	r1, r3
 800a952:	f04f 0200 	mov.w	r2, #0
 800a956:	f04f 0300 	mov.w	r3, #0
 800a95a:	020b      	lsls	r3, r1, #8
 800a95c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a960:	0202      	lsls	r2, r0, #8
 800a962:	6979      	ldr	r1, [r7, #20]
 800a964:	6849      	ldr	r1, [r1, #4]
 800a966:	0849      	lsrs	r1, r1, #1
 800a968:	2000      	movs	r0, #0
 800a96a:	460c      	mov	r4, r1
 800a96c:	4605      	mov	r5, r0
 800a96e:	eb12 0804 	adds.w	r8, r2, r4
 800a972:	eb43 0905 	adc.w	r9, r3, r5
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	685b      	ldr	r3, [r3, #4]
 800a97a:	2200      	movs	r2, #0
 800a97c:	469a      	mov	sl, r3
 800a97e:	4693      	mov	fp, r2
 800a980:	4652      	mov	r2, sl
 800a982:	465b      	mov	r3, fp
 800a984:	4640      	mov	r0, r8
 800a986:	4649      	mov	r1, r9
 800a988:	f7f6 f8e8 	bl	8000b5c <__aeabi_uldivmod>
 800a98c:	4602      	mov	r2, r0
 800a98e:	460b      	mov	r3, r1
 800a990:	4613      	mov	r3, r2
 800a992:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a994:	6a3b      	ldr	r3, [r7, #32]
 800a996:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a99a:	d308      	bcc.n	800a9ae <UART_SetConfig+0x3d2>
 800a99c:	6a3b      	ldr	r3, [r7, #32]
 800a99e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9a2:	d204      	bcs.n	800a9ae <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800a9a4:	697b      	ldr	r3, [r7, #20]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	6a3a      	ldr	r2, [r7, #32]
 800a9aa:	60da      	str	r2, [r3, #12]
 800a9ac:	e0c8      	b.n	800ab40 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a9b4:	e0c4      	b.n	800ab40 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	69db      	ldr	r3, [r3, #28]
 800a9ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a9be:	d167      	bne.n	800aa90 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800a9c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a9c4:	2b08      	cmp	r3, #8
 800a9c6:	d828      	bhi.n	800aa1a <UART_SetConfig+0x43e>
 800a9c8:	a201      	add	r2, pc, #4	; (adr r2, 800a9d0 <UART_SetConfig+0x3f4>)
 800a9ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9ce:	bf00      	nop
 800a9d0:	0800a9f5 	.word	0x0800a9f5
 800a9d4:	0800a9fd 	.word	0x0800a9fd
 800a9d8:	0800aa05 	.word	0x0800aa05
 800a9dc:	0800aa1b 	.word	0x0800aa1b
 800a9e0:	0800aa0b 	.word	0x0800aa0b
 800a9e4:	0800aa1b 	.word	0x0800aa1b
 800a9e8:	0800aa1b 	.word	0x0800aa1b
 800a9ec:	0800aa1b 	.word	0x0800aa1b
 800a9f0:	0800aa13 	.word	0x0800aa13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a9f4:	f7fd f808 	bl	8007a08 <HAL_RCC_GetPCLK1Freq>
 800a9f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a9fa:	e014      	b.n	800aa26 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a9fc:	f7fd f81a 	bl	8007a34 <HAL_RCC_GetPCLK2Freq>
 800aa00:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800aa02:	e010      	b.n	800aa26 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aa04:	4b5a      	ldr	r3, [pc, #360]	; (800ab70 <UART_SetConfig+0x594>)
 800aa06:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800aa08:	e00d      	b.n	800aa26 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aa0a:	f7fc ff91 	bl	8007930 <HAL_RCC_GetSysClockFreq>
 800aa0e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800aa10:	e009      	b.n	800aa26 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800aa18:	e005      	b.n	800aa26 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800aa1e:	2301      	movs	r3, #1
 800aa20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800aa24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aa26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	f000 8089 	beq.w	800ab40 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa32:	4a4e      	ldr	r2, [pc, #312]	; (800ab6c <UART_SetConfig+0x590>)
 800aa34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa38:	461a      	mov	r2, r3
 800aa3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa3c:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa40:	005a      	lsls	r2, r3, #1
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	685b      	ldr	r3, [r3, #4]
 800aa46:	085b      	lsrs	r3, r3, #1
 800aa48:	441a      	add	r2, r3
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	685b      	ldr	r3, [r3, #4]
 800aa4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa52:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa54:	6a3b      	ldr	r3, [r7, #32]
 800aa56:	2b0f      	cmp	r3, #15
 800aa58:	d916      	bls.n	800aa88 <UART_SetConfig+0x4ac>
 800aa5a:	6a3b      	ldr	r3, [r7, #32]
 800aa5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa60:	d212      	bcs.n	800aa88 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aa62:	6a3b      	ldr	r3, [r7, #32]
 800aa64:	b29b      	uxth	r3, r3
 800aa66:	f023 030f 	bic.w	r3, r3, #15
 800aa6a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aa6c:	6a3b      	ldr	r3, [r7, #32]
 800aa6e:	085b      	lsrs	r3, r3, #1
 800aa70:	b29b      	uxth	r3, r3
 800aa72:	f003 0307 	and.w	r3, r3, #7
 800aa76:	b29a      	uxth	r2, r3
 800aa78:	8bfb      	ldrh	r3, [r7, #30]
 800aa7a:	4313      	orrs	r3, r2
 800aa7c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	8bfa      	ldrh	r2, [r7, #30]
 800aa84:	60da      	str	r2, [r3, #12]
 800aa86:	e05b      	b.n	800ab40 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800aa88:	2301      	movs	r3, #1
 800aa8a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800aa8e:	e057      	b.n	800ab40 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800aa90:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aa94:	2b08      	cmp	r3, #8
 800aa96:	d828      	bhi.n	800aaea <UART_SetConfig+0x50e>
 800aa98:	a201      	add	r2, pc, #4	; (adr r2, 800aaa0 <UART_SetConfig+0x4c4>)
 800aa9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa9e:	bf00      	nop
 800aaa0:	0800aac5 	.word	0x0800aac5
 800aaa4:	0800aacd 	.word	0x0800aacd
 800aaa8:	0800aad5 	.word	0x0800aad5
 800aaac:	0800aaeb 	.word	0x0800aaeb
 800aab0:	0800aadb 	.word	0x0800aadb
 800aab4:	0800aaeb 	.word	0x0800aaeb
 800aab8:	0800aaeb 	.word	0x0800aaeb
 800aabc:	0800aaeb 	.word	0x0800aaeb
 800aac0:	0800aae3 	.word	0x0800aae3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aac4:	f7fc ffa0 	bl	8007a08 <HAL_RCC_GetPCLK1Freq>
 800aac8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800aaca:	e014      	b.n	800aaf6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aacc:	f7fc ffb2 	bl	8007a34 <HAL_RCC_GetPCLK2Freq>
 800aad0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800aad2:	e010      	b.n	800aaf6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aad4:	4b26      	ldr	r3, [pc, #152]	; (800ab70 <UART_SetConfig+0x594>)
 800aad6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800aad8:	e00d      	b.n	800aaf6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aada:	f7fc ff29 	bl	8007930 <HAL_RCC_GetSysClockFreq>
 800aade:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800aae0:	e009      	b.n	800aaf6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aae6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800aae8:	e005      	b.n	800aaf6 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800aaea:	2300      	movs	r3, #0
 800aaec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800aaee:	2301      	movs	r3, #1
 800aaf0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800aaf4:	bf00      	nop
    }

    if (pclk != 0U)
 800aaf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d021      	beq.n	800ab40 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab00:	4a1a      	ldr	r2, [pc, #104]	; (800ab6c <UART_SetConfig+0x590>)
 800ab02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab06:	461a      	mov	r2, r3
 800ab08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab0a:	fbb3 f2f2 	udiv	r2, r3, r2
 800ab0e:	697b      	ldr	r3, [r7, #20]
 800ab10:	685b      	ldr	r3, [r3, #4]
 800ab12:	085b      	lsrs	r3, r3, #1
 800ab14:	441a      	add	r2, r3
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	685b      	ldr	r3, [r3, #4]
 800ab1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab1e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab20:	6a3b      	ldr	r3, [r7, #32]
 800ab22:	2b0f      	cmp	r3, #15
 800ab24:	d909      	bls.n	800ab3a <UART_SetConfig+0x55e>
 800ab26:	6a3b      	ldr	r3, [r7, #32]
 800ab28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab2c:	d205      	bcs.n	800ab3a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ab2e:	6a3b      	ldr	r3, [r7, #32]
 800ab30:	b29a      	uxth	r2, r3
 800ab32:	697b      	ldr	r3, [r7, #20]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	60da      	str	r2, [r3, #12]
 800ab38:	e002      	b.n	800ab40 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ab40:	697b      	ldr	r3, [r7, #20]
 800ab42:	2201      	movs	r2, #1
 800ab44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	2201      	movs	r2, #1
 800ab4c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ab50:	697b      	ldr	r3, [r7, #20]
 800ab52:	2200      	movs	r2, #0
 800ab54:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800ab56:	697b      	ldr	r3, [r7, #20]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800ab5c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3730      	adds	r7, #48	; 0x30
 800ab64:	46bd      	mov	sp, r7
 800ab66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ab6a:	bf00      	nop
 800ab6c:	0800f390 	.word	0x0800f390
 800ab70:	00f42400 	.word	0x00f42400

0800ab74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ab74:	b480      	push	{r7}
 800ab76:	b083      	sub	sp, #12
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab80:	f003 0301 	and.w	r3, r3, #1
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d00a      	beq.n	800ab9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	685b      	ldr	r3, [r3, #4]
 800ab8e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	430a      	orrs	r2, r1
 800ab9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aba2:	f003 0302 	and.w	r3, r3, #2
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d00a      	beq.n	800abc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	685b      	ldr	r3, [r3, #4]
 800abb0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	430a      	orrs	r2, r1
 800abbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abc4:	f003 0304 	and.w	r3, r3, #4
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d00a      	beq.n	800abe2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	685b      	ldr	r3, [r3, #4]
 800abd2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	430a      	orrs	r2, r1
 800abe0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abe6:	f003 0308 	and.w	r3, r3, #8
 800abea:	2b00      	cmp	r3, #0
 800abec:	d00a      	beq.n	800ac04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	685b      	ldr	r3, [r3, #4]
 800abf4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	430a      	orrs	r2, r1
 800ac02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac08:	f003 0310 	and.w	r3, r3, #16
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d00a      	beq.n	800ac26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	689b      	ldr	r3, [r3, #8]
 800ac16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	430a      	orrs	r2, r1
 800ac24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac2a:	f003 0320 	and.w	r3, r3, #32
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d00a      	beq.n	800ac48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	689b      	ldr	r3, [r3, #8]
 800ac38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	430a      	orrs	r2, r1
 800ac46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d01a      	beq.n	800ac8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	685b      	ldr	r3, [r3, #4]
 800ac5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	430a      	orrs	r2, r1
 800ac68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac72:	d10a      	bne.n	800ac8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	685b      	ldr	r3, [r3, #4]
 800ac7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	430a      	orrs	r2, r1
 800ac88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d00a      	beq.n	800acac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	685b      	ldr	r3, [r3, #4]
 800ac9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	430a      	orrs	r2, r1
 800acaa:	605a      	str	r2, [r3, #4]
  }
}
 800acac:	bf00      	nop
 800acae:	370c      	adds	r7, #12
 800acb0:	46bd      	mov	sp, r7
 800acb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb6:	4770      	bx	lr

0800acb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b086      	sub	sp, #24
 800acbc:	af02      	add	r7, sp, #8
 800acbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2200      	movs	r2, #0
 800acc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800acc8:	f7f8 fe38 	bl	800393c <HAL_GetTick>
 800accc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f003 0308 	and.w	r3, r3, #8
 800acd8:	2b08      	cmp	r3, #8
 800acda:	d10e      	bne.n	800acfa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800acdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ace0:	9300      	str	r3, [sp, #0]
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	2200      	movs	r2, #0
 800ace6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f000 f82f 	bl	800ad4e <UART_WaitOnFlagUntilTimeout>
 800acf0:	4603      	mov	r3, r0
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d001      	beq.n	800acfa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800acf6:	2303      	movs	r3, #3
 800acf8:	e025      	b.n	800ad46 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f003 0304 	and.w	r3, r3, #4
 800ad04:	2b04      	cmp	r3, #4
 800ad06:	d10e      	bne.n	800ad26 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ad0c:	9300      	str	r3, [sp, #0]
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	2200      	movs	r2, #0
 800ad12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f000 f819 	bl	800ad4e <UART_WaitOnFlagUntilTimeout>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d001      	beq.n	800ad26 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad22:	2303      	movs	r3, #3
 800ad24:	e00f      	b.n	800ad46 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2220      	movs	r2, #32
 800ad2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2220      	movs	r2, #32
 800ad32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2200      	movs	r2, #0
 800ad3a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2200      	movs	r2, #0
 800ad40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ad44:	2300      	movs	r3, #0
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	3710      	adds	r7, #16
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}

0800ad4e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ad4e:	b580      	push	{r7, lr}
 800ad50:	b09c      	sub	sp, #112	; 0x70
 800ad52:	af00      	add	r7, sp, #0
 800ad54:	60f8      	str	r0, [r7, #12]
 800ad56:	60b9      	str	r1, [r7, #8]
 800ad58:	603b      	str	r3, [r7, #0]
 800ad5a:	4613      	mov	r3, r2
 800ad5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad5e:	e0a9      	b.n	800aeb4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad66:	f000 80a5 	beq.w	800aeb4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad6a:	f7f8 fde7 	bl	800393c <HAL_GetTick>
 800ad6e:	4602      	mov	r2, r0
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	1ad3      	subs	r3, r2, r3
 800ad74:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ad76:	429a      	cmp	r2, r3
 800ad78:	d302      	bcc.n	800ad80 <UART_WaitOnFlagUntilTimeout+0x32>
 800ad7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d140      	bne.n	800ae02 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad88:	e853 3f00 	ldrex	r3, [r3]
 800ad8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ad8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ad94:	667b      	str	r3, [r7, #100]	; 0x64
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	461a      	mov	r2, r3
 800ad9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ada0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ada2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ada4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ada6:	e841 2300 	strex	r3, r2, [r1]
 800adaa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800adac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d1e6      	bne.n	800ad80 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	3308      	adds	r3, #8
 800adb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adbc:	e853 3f00 	ldrex	r3, [r3]
 800adc0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800adc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adc4:	f023 0301 	bic.w	r3, r3, #1
 800adc8:	663b      	str	r3, [r7, #96]	; 0x60
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	3308      	adds	r3, #8
 800add0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800add2:	64ba      	str	r2, [r7, #72]	; 0x48
 800add4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800add6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800add8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800adda:	e841 2300 	strex	r3, r2, [r1]
 800adde:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ade0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d1e5      	bne.n	800adb2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	2220      	movs	r2, #32
 800adea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	2220      	movs	r2, #32
 800adf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	2200      	movs	r2, #0
 800adfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800adfe:	2303      	movs	r3, #3
 800ae00:	e069      	b.n	800aed6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	f003 0304 	and.w	r3, r3, #4
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d051      	beq.n	800aeb4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	69db      	ldr	r3, [r3, #28]
 800ae16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ae1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae1e:	d149      	bne.n	800aeb4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ae28:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae32:	e853 3f00 	ldrex	r3, [r3]
 800ae36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ae38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae3a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ae3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	461a      	mov	r2, r3
 800ae46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae48:	637b      	str	r3, [r7, #52]	; 0x34
 800ae4a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ae4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae50:	e841 2300 	strex	r3, r2, [r1]
 800ae54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ae56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d1e6      	bne.n	800ae2a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	3308      	adds	r3, #8
 800ae62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae64:	697b      	ldr	r3, [r7, #20]
 800ae66:	e853 3f00 	ldrex	r3, [r3]
 800ae6a:	613b      	str	r3, [r7, #16]
   return(result);
 800ae6c:	693b      	ldr	r3, [r7, #16]
 800ae6e:	f023 0301 	bic.w	r3, r3, #1
 800ae72:	66bb      	str	r3, [r7, #104]	; 0x68
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	3308      	adds	r3, #8
 800ae7a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ae7c:	623a      	str	r2, [r7, #32]
 800ae7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae80:	69f9      	ldr	r1, [r7, #28]
 800ae82:	6a3a      	ldr	r2, [r7, #32]
 800ae84:	e841 2300 	strex	r3, r2, [r1]
 800ae88:	61bb      	str	r3, [r7, #24]
   return(result);
 800ae8a:	69bb      	ldr	r3, [r7, #24]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d1e5      	bne.n	800ae5c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	2220      	movs	r2, #32
 800ae94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	2220      	movs	r2, #32
 800ae9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	2220      	movs	r2, #32
 800aea4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	2200      	movs	r2, #0
 800aeac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800aeb0:	2303      	movs	r3, #3
 800aeb2:	e010      	b.n	800aed6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	69da      	ldr	r2, [r3, #28]
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	4013      	ands	r3, r2
 800aebe:	68ba      	ldr	r2, [r7, #8]
 800aec0:	429a      	cmp	r2, r3
 800aec2:	bf0c      	ite	eq
 800aec4:	2301      	moveq	r3, #1
 800aec6:	2300      	movne	r3, #0
 800aec8:	b2db      	uxtb	r3, r3
 800aeca:	461a      	mov	r2, r3
 800aecc:	79fb      	ldrb	r3, [r7, #7]
 800aece:	429a      	cmp	r2, r3
 800aed0:	f43f af46 	beq.w	800ad60 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aed4:	2300      	movs	r3, #0
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3770      	adds	r7, #112	; 0x70
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}

0800aede <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800aede:	b480      	push	{r7}
 800aee0:	b08f      	sub	sp, #60	; 0x3c
 800aee2:	af00      	add	r7, sp, #0
 800aee4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeec:	6a3b      	ldr	r3, [r7, #32]
 800aeee:	e853 3f00 	ldrex	r3, [r3]
 800aef2:	61fb      	str	r3, [r7, #28]
   return(result);
 800aef4:	69fb      	ldr	r3, [r7, #28]
 800aef6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800aefa:	637b      	str	r3, [r7, #52]	; 0x34
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	461a      	mov	r2, r3
 800af02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af04:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af06:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800af0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af0c:	e841 2300 	strex	r3, r2, [r1]
 800af10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800af12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af14:	2b00      	cmp	r3, #0
 800af16:	d1e6      	bne.n	800aee6 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	3308      	adds	r3, #8
 800af1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	e853 3f00 	ldrex	r3, [r3]
 800af26:	60bb      	str	r3, [r7, #8]
   return(result);
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800af2e:	633b      	str	r3, [r7, #48]	; 0x30
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	3308      	adds	r3, #8
 800af36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af38:	61ba      	str	r2, [r7, #24]
 800af3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af3c:	6979      	ldr	r1, [r7, #20]
 800af3e:	69ba      	ldr	r2, [r7, #24]
 800af40:	e841 2300 	strex	r3, r2, [r1]
 800af44:	613b      	str	r3, [r7, #16]
   return(result);
 800af46:	693b      	ldr	r3, [r7, #16]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d1e5      	bne.n	800af18 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2220      	movs	r2, #32
 800af50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800af54:	bf00      	nop
 800af56:	373c      	adds	r7, #60	; 0x3c
 800af58:	46bd      	mov	sp, r7
 800af5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5e:	4770      	bx	lr

0800af60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800af60:	b480      	push	{r7}
 800af62:	b095      	sub	sp, #84	; 0x54
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af70:	e853 3f00 	ldrex	r3, [r3]
 800af74:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800af76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800af7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	461a      	mov	r2, r3
 800af84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af86:	643b      	str	r3, [r7, #64]	; 0x40
 800af88:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af8a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800af8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800af8e:	e841 2300 	strex	r3, r2, [r1]
 800af92:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800af94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af96:	2b00      	cmp	r3, #0
 800af98:	d1e6      	bne.n	800af68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	3308      	adds	r3, #8
 800afa0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afa2:	6a3b      	ldr	r3, [r7, #32]
 800afa4:	e853 3f00 	ldrex	r3, [r3]
 800afa8:	61fb      	str	r3, [r7, #28]
   return(result);
 800afaa:	69fb      	ldr	r3, [r7, #28]
 800afac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800afb0:	f023 0301 	bic.w	r3, r3, #1
 800afb4:	64bb      	str	r3, [r7, #72]	; 0x48
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	3308      	adds	r3, #8
 800afbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800afbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 800afc0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800afc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800afc6:	e841 2300 	strex	r3, r2, [r1]
 800afca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800afcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d1e3      	bne.n	800af9a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afd6:	2b01      	cmp	r3, #1
 800afd8:	d118      	bne.n	800b00c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	e853 3f00 	ldrex	r3, [r3]
 800afe6:	60bb      	str	r3, [r7, #8]
   return(result);
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	f023 0310 	bic.w	r3, r3, #16
 800afee:	647b      	str	r3, [r7, #68]	; 0x44
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	461a      	mov	r2, r3
 800aff6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aff8:	61bb      	str	r3, [r7, #24]
 800affa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800affc:	6979      	ldr	r1, [r7, #20]
 800affe:	69ba      	ldr	r2, [r7, #24]
 800b000:	e841 2300 	strex	r3, r2, [r1]
 800b004:	613b      	str	r3, [r7, #16]
   return(result);
 800b006:	693b      	ldr	r3, [r7, #16]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d1e6      	bne.n	800afda <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2220      	movs	r2, #32
 800b010:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2200      	movs	r2, #0
 800b018:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2200      	movs	r2, #0
 800b01e:	671a      	str	r2, [r3, #112]	; 0x70
}
 800b020:	bf00      	nop
 800b022:	3754      	adds	r7, #84	; 0x54
 800b024:	46bd      	mov	sp, r7
 800b026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02a:	4770      	bx	lr

0800b02c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b090      	sub	sp, #64	; 0x40
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b038:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	f003 0320 	and.w	r3, r3, #32
 800b044:	2b00      	cmp	r3, #0
 800b046:	d137      	bne.n	800b0b8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800b048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b04a:	2200      	movs	r2, #0
 800b04c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	3308      	adds	r3, #8
 800b056:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b05a:	e853 3f00 	ldrex	r3, [r3]
 800b05e:	623b      	str	r3, [r7, #32]
   return(result);
 800b060:	6a3b      	ldr	r3, [r7, #32]
 800b062:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b066:	63bb      	str	r3, [r7, #56]	; 0x38
 800b068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	3308      	adds	r3, #8
 800b06e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b070:	633a      	str	r2, [r7, #48]	; 0x30
 800b072:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b074:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b076:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b078:	e841 2300 	strex	r3, r2, [r1]
 800b07c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b080:	2b00      	cmp	r3, #0
 800b082:	d1e5      	bne.n	800b050 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b08a:	693b      	ldr	r3, [r7, #16]
 800b08c:	e853 3f00 	ldrex	r3, [r3]
 800b090:	60fb      	str	r3, [r7, #12]
   return(result);
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b098:	637b      	str	r3, [r7, #52]	; 0x34
 800b09a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	461a      	mov	r2, r3
 800b0a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0a2:	61fb      	str	r3, [r7, #28]
 800b0a4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0a6:	69b9      	ldr	r1, [r7, #24]
 800b0a8:	69fa      	ldr	r2, [r7, #28]
 800b0aa:	e841 2300 	strex	r3, r2, [r1]
 800b0ae:	617b      	str	r3, [r7, #20]
   return(result);
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d1e6      	bne.n	800b084 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b0b6:	e002      	b.n	800b0be <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800b0b8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b0ba:	f7f7 f855 	bl	8002168 <HAL_UART_TxCpltCallback>
}
 800b0be:	bf00      	nop
 800b0c0:	3740      	adds	r7, #64	; 0x40
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}

0800b0c6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b0c6:	b580      	push	{r7, lr}
 800b0c8:	b084      	sub	sp, #16
 800b0ca:	af00      	add	r7, sp, #0
 800b0cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0d2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b0d4:	68f8      	ldr	r0, [r7, #12]
 800b0d6:	f7ff fa61 	bl	800a59c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b0da:	bf00      	nop
 800b0dc:	3710      	adds	r7, #16
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}

0800b0e2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b0e2:	b580      	push	{r7, lr}
 800b0e4:	b086      	sub	sp, #24
 800b0e6:	af00      	add	r7, sp, #0
 800b0e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0ee:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b0f0:	697b      	ldr	r3, [r7, #20]
 800b0f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b0f6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b0f8:	697b      	ldr	r3, [r7, #20]
 800b0fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0fe:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b100:	697b      	ldr	r3, [r7, #20]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	689b      	ldr	r3, [r3, #8]
 800b106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b10a:	2b80      	cmp	r3, #128	; 0x80
 800b10c:	d109      	bne.n	800b122 <UART_DMAError+0x40>
 800b10e:	693b      	ldr	r3, [r7, #16]
 800b110:	2b21      	cmp	r3, #33	; 0x21
 800b112:	d106      	bne.n	800b122 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b114:	697b      	ldr	r3, [r7, #20]
 800b116:	2200      	movs	r2, #0
 800b118:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800b11c:	6978      	ldr	r0, [r7, #20]
 800b11e:	f7ff fede 	bl	800aede <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	689b      	ldr	r3, [r3, #8]
 800b128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b12c:	2b40      	cmp	r3, #64	; 0x40
 800b12e:	d109      	bne.n	800b144 <UART_DMAError+0x62>
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	2b22      	cmp	r3, #34	; 0x22
 800b134:	d106      	bne.n	800b144 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b136:	697b      	ldr	r3, [r7, #20]
 800b138:	2200      	movs	r2, #0
 800b13a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800b13e:	6978      	ldr	r0, [r7, #20]
 800b140:	f7ff ff0e 	bl	800af60 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b144:	697b      	ldr	r3, [r7, #20]
 800b146:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b14a:	f043 0210 	orr.w	r2, r3, #16
 800b14e:	697b      	ldr	r3, [r7, #20]
 800b150:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b154:	6978      	ldr	r0, [r7, #20]
 800b156:	f7ff fa2b 	bl	800a5b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b15a:	bf00      	nop
 800b15c:	3718      	adds	r7, #24
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}

0800b162 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b162:	b580      	push	{r7, lr}
 800b164:	b084      	sub	sp, #16
 800b166:	af00      	add	r7, sp, #0
 800b168:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b16e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	2200      	movs	r2, #0
 800b174:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	2200      	movs	r2, #0
 800b17c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b180:	68f8      	ldr	r0, [r7, #12]
 800b182:	f7ff fa15 	bl	800a5b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b186:	bf00      	nop
 800b188:	3710      	adds	r7, #16
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}

0800b18e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b18e:	b580      	push	{r7, lr}
 800b190:	b088      	sub	sp, #32
 800b192:	af00      	add	r7, sp, #0
 800b194:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	e853 3f00 	ldrex	r3, [r3]
 800b1a2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b1aa:	61fb      	str	r3, [r7, #28]
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	461a      	mov	r2, r3
 800b1b2:	69fb      	ldr	r3, [r7, #28]
 800b1b4:	61bb      	str	r3, [r7, #24]
 800b1b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1b8:	6979      	ldr	r1, [r7, #20]
 800b1ba:	69ba      	ldr	r2, [r7, #24]
 800b1bc:	e841 2300 	strex	r3, r2, [r1]
 800b1c0:	613b      	str	r3, [r7, #16]
   return(result);
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d1e6      	bne.n	800b196 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2220      	movs	r2, #32
 800b1cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f7f6 ffc6 	bl	8002168 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b1dc:	bf00      	nop
 800b1de:	3720      	adds	r7, #32
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}

0800b1e4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b083      	sub	sp, #12
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b1ec:	bf00      	nop
 800b1ee:	370c      	adds	r7, #12
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f6:	4770      	bx	lr

0800b1f8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b1f8:	b480      	push	{r7}
 800b1fa:	b083      	sub	sp, #12
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b200:	bf00      	nop
 800b202:	370c      	adds	r7, #12
 800b204:	46bd      	mov	sp, r7
 800b206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20a:	4770      	bx	lr

0800b20c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b20c:	b480      	push	{r7}
 800b20e:	b083      	sub	sp, #12
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b214:	bf00      	nop
 800b216:	370c      	adds	r7, #12
 800b218:	46bd      	mov	sp, r7
 800b21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21e:	4770      	bx	lr

0800b220 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b220:	b480      	push	{r7}
 800b222:	b085      	sub	sp, #20
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b22e:	2b01      	cmp	r3, #1
 800b230:	d101      	bne.n	800b236 <HAL_UARTEx_DisableFifoMode+0x16>
 800b232:	2302      	movs	r3, #2
 800b234:	e027      	b.n	800b286 <HAL_UARTEx_DisableFifoMode+0x66>
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2201      	movs	r2, #1
 800b23a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2224      	movs	r2, #36	; 0x24
 800b242:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	681a      	ldr	r2, [r3, #0]
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	f022 0201 	bic.w	r2, r2, #1
 800b25c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b264:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2200      	movs	r2, #0
 800b26a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	68fa      	ldr	r2, [r7, #12]
 800b272:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2220      	movs	r2, #32
 800b278:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2200      	movs	r2, #0
 800b280:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b284:	2300      	movs	r3, #0
}
 800b286:	4618      	mov	r0, r3
 800b288:	3714      	adds	r7, #20
 800b28a:	46bd      	mov	sp, r7
 800b28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b290:	4770      	bx	lr

0800b292 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b292:	b580      	push	{r7, lr}
 800b294:	b084      	sub	sp, #16
 800b296:	af00      	add	r7, sp, #0
 800b298:	6078      	str	r0, [r7, #4]
 800b29a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b2a2:	2b01      	cmp	r3, #1
 800b2a4:	d101      	bne.n	800b2aa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b2a6:	2302      	movs	r3, #2
 800b2a8:	e02d      	b.n	800b306 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2201      	movs	r2, #1
 800b2ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2224      	movs	r2, #36	; 0x24
 800b2b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	681a      	ldr	r2, [r3, #0]
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f022 0201 	bic.w	r2, r2, #1
 800b2d0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	689b      	ldr	r3, [r3, #8]
 800b2d8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	683a      	ldr	r2, [r7, #0]
 800b2e2:	430a      	orrs	r2, r1
 800b2e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f000 f850 	bl	800b38c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	68fa      	ldr	r2, [r7, #12]
 800b2f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2220      	movs	r2, #32
 800b2f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2200      	movs	r2, #0
 800b300:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b304:	2300      	movs	r3, #0
}
 800b306:	4618      	mov	r0, r3
 800b308:	3710      	adds	r7, #16
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}

0800b30e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b30e:	b580      	push	{r7, lr}
 800b310:	b084      	sub	sp, #16
 800b312:	af00      	add	r7, sp, #0
 800b314:	6078      	str	r0, [r7, #4]
 800b316:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b31e:	2b01      	cmp	r3, #1
 800b320:	d101      	bne.n	800b326 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b322:	2302      	movs	r3, #2
 800b324:	e02d      	b.n	800b382 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2201      	movs	r2, #1
 800b32a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2224      	movs	r2, #36	; 0x24
 800b332:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	681a      	ldr	r2, [r3, #0]
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f022 0201 	bic.w	r2, r2, #1
 800b34c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	689b      	ldr	r3, [r3, #8]
 800b354:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	683a      	ldr	r2, [r7, #0]
 800b35e:	430a      	orrs	r2, r1
 800b360:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f000 f812 	bl	800b38c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	68fa      	ldr	r2, [r7, #12]
 800b36e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2220      	movs	r2, #32
 800b374:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2200      	movs	r2, #0
 800b37c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b380:	2300      	movs	r3, #0
}
 800b382:	4618      	mov	r0, r3
 800b384:	3710      	adds	r7, #16
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}
	...

0800b38c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b38c:	b480      	push	{r7}
 800b38e:	b085      	sub	sp, #20
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d108      	bne.n	800b3ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2201      	movs	r2, #1
 800b3a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2201      	movs	r2, #1
 800b3a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b3ac:	e031      	b.n	800b412 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b3ae:	2308      	movs	r3, #8
 800b3b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b3b2:	2308      	movs	r3, #8
 800b3b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	689b      	ldr	r3, [r3, #8]
 800b3bc:	0e5b      	lsrs	r3, r3, #25
 800b3be:	b2db      	uxtb	r3, r3
 800b3c0:	f003 0307 	and.w	r3, r3, #7
 800b3c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	689b      	ldr	r3, [r3, #8]
 800b3cc:	0f5b      	lsrs	r3, r3, #29
 800b3ce:	b2db      	uxtb	r3, r3
 800b3d0:	f003 0307 	and.w	r3, r3, #7
 800b3d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b3d6:	7bbb      	ldrb	r3, [r7, #14]
 800b3d8:	7b3a      	ldrb	r2, [r7, #12]
 800b3da:	4911      	ldr	r1, [pc, #68]	; (800b420 <UARTEx_SetNbDataToProcess+0x94>)
 800b3dc:	5c8a      	ldrb	r2, [r1, r2]
 800b3de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b3e2:	7b3a      	ldrb	r2, [r7, #12]
 800b3e4:	490f      	ldr	r1, [pc, #60]	; (800b424 <UARTEx_SetNbDataToProcess+0x98>)
 800b3e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b3e8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b3ec:	b29a      	uxth	r2, r3
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b3f4:	7bfb      	ldrb	r3, [r7, #15]
 800b3f6:	7b7a      	ldrb	r2, [r7, #13]
 800b3f8:	4909      	ldr	r1, [pc, #36]	; (800b420 <UARTEx_SetNbDataToProcess+0x94>)
 800b3fa:	5c8a      	ldrb	r2, [r1, r2]
 800b3fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b400:	7b7a      	ldrb	r2, [r7, #13]
 800b402:	4908      	ldr	r1, [pc, #32]	; (800b424 <UARTEx_SetNbDataToProcess+0x98>)
 800b404:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b406:	fb93 f3f2 	sdiv	r3, r3, r2
 800b40a:	b29a      	uxth	r2, r3
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b412:	bf00      	nop
 800b414:	3714      	adds	r7, #20
 800b416:	46bd      	mov	sp, r7
 800b418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41c:	4770      	bx	lr
 800b41e:	bf00      	nop
 800b420:	0800f3a8 	.word	0x0800f3a8
 800b424:	0800f3b0 	.word	0x0800f3b0

0800b428 <__NVIC_SetPriority>:
{
 800b428:	b480      	push	{r7}
 800b42a:	b083      	sub	sp, #12
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	4603      	mov	r3, r0
 800b430:	6039      	str	r1, [r7, #0]
 800b432:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	db0a      	blt.n	800b452 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	b2da      	uxtb	r2, r3
 800b440:	490c      	ldr	r1, [pc, #48]	; (800b474 <__NVIC_SetPriority+0x4c>)
 800b442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b446:	0112      	lsls	r2, r2, #4
 800b448:	b2d2      	uxtb	r2, r2
 800b44a:	440b      	add	r3, r1
 800b44c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b450:	e00a      	b.n	800b468 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	b2da      	uxtb	r2, r3
 800b456:	4908      	ldr	r1, [pc, #32]	; (800b478 <__NVIC_SetPriority+0x50>)
 800b458:	79fb      	ldrb	r3, [r7, #7]
 800b45a:	f003 030f 	and.w	r3, r3, #15
 800b45e:	3b04      	subs	r3, #4
 800b460:	0112      	lsls	r2, r2, #4
 800b462:	b2d2      	uxtb	r2, r2
 800b464:	440b      	add	r3, r1
 800b466:	761a      	strb	r2, [r3, #24]
}
 800b468:	bf00      	nop
 800b46a:	370c      	adds	r7, #12
 800b46c:	46bd      	mov	sp, r7
 800b46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b472:	4770      	bx	lr
 800b474:	e000e100 	.word	0xe000e100
 800b478:	e000ed00 	.word	0xe000ed00

0800b47c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b47c:	b580      	push	{r7, lr}
 800b47e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b480:	4b05      	ldr	r3, [pc, #20]	; (800b498 <SysTick_Handler+0x1c>)
 800b482:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b484:	f002 fff8 	bl	800e478 <xTaskGetSchedulerState>
 800b488:	4603      	mov	r3, r0
 800b48a:	2b01      	cmp	r3, #1
 800b48c:	d001      	beq.n	800b492 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b48e:	f001 f8bb 	bl	800c608 <xPortSysTickHandler>
  }
}
 800b492:	bf00      	nop
 800b494:	bd80      	pop	{r7, pc}
 800b496:	bf00      	nop
 800b498:	e000e010 	.word	0xe000e010

0800b49c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b49c:	b580      	push	{r7, lr}
 800b49e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b4a0:	2100      	movs	r1, #0
 800b4a2:	f06f 0004 	mvn.w	r0, #4
 800b4a6:	f7ff ffbf 	bl	800b428 <__NVIC_SetPriority>
#endif
}
 800b4aa:	bf00      	nop
 800b4ac:	bd80      	pop	{r7, pc}
	...

0800b4b0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b4b0:	b480      	push	{r7}
 800b4b2:	b083      	sub	sp, #12
 800b4b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b4b6:	f3ef 8305 	mrs	r3, IPSR
 800b4ba:	603b      	str	r3, [r7, #0]
  return(result);
 800b4bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d003      	beq.n	800b4ca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b4c2:	f06f 0305 	mvn.w	r3, #5
 800b4c6:	607b      	str	r3, [r7, #4]
 800b4c8:	e00c      	b.n	800b4e4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b4ca:	4b0a      	ldr	r3, [pc, #40]	; (800b4f4 <osKernelInitialize+0x44>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d105      	bne.n	800b4de <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b4d2:	4b08      	ldr	r3, [pc, #32]	; (800b4f4 <osKernelInitialize+0x44>)
 800b4d4:	2201      	movs	r2, #1
 800b4d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b4d8:	2300      	movs	r3, #0
 800b4da:	607b      	str	r3, [r7, #4]
 800b4dc:	e002      	b.n	800b4e4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b4de:	f04f 33ff 	mov.w	r3, #4294967295
 800b4e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b4e4:	687b      	ldr	r3, [r7, #4]
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	370c      	adds	r7, #12
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f0:	4770      	bx	lr
 800b4f2:	bf00      	nop
 800b4f4:	20000b50 	.word	0x20000b50

0800b4f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b082      	sub	sp, #8
 800b4fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b4fe:	f3ef 8305 	mrs	r3, IPSR
 800b502:	603b      	str	r3, [r7, #0]
  return(result);
 800b504:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b506:	2b00      	cmp	r3, #0
 800b508:	d003      	beq.n	800b512 <osKernelStart+0x1a>
    stat = osErrorISR;
 800b50a:	f06f 0305 	mvn.w	r3, #5
 800b50e:	607b      	str	r3, [r7, #4]
 800b510:	e010      	b.n	800b534 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b512:	4b0b      	ldr	r3, [pc, #44]	; (800b540 <osKernelStart+0x48>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	2b01      	cmp	r3, #1
 800b518:	d109      	bne.n	800b52e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b51a:	f7ff ffbf 	bl	800b49c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b51e:	4b08      	ldr	r3, [pc, #32]	; (800b540 <osKernelStart+0x48>)
 800b520:	2202      	movs	r2, #2
 800b522:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b524:	f002 fa7a 	bl	800da1c <vTaskStartScheduler>
      stat = osOK;
 800b528:	2300      	movs	r3, #0
 800b52a:	607b      	str	r3, [r7, #4]
 800b52c:	e002      	b.n	800b534 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b52e:	f04f 33ff 	mov.w	r3, #4294967295
 800b532:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b534:	687b      	ldr	r3, [r7, #4]
}
 800b536:	4618      	mov	r0, r3
 800b538:	3708      	adds	r7, #8
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}
 800b53e:	bf00      	nop
 800b540:	20000b50 	.word	0x20000b50

0800b544 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b544:	b580      	push	{r7, lr}
 800b546:	b08e      	sub	sp, #56	; 0x38
 800b548:	af04      	add	r7, sp, #16
 800b54a:	60f8      	str	r0, [r7, #12]
 800b54c:	60b9      	str	r1, [r7, #8]
 800b54e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b550:	2300      	movs	r3, #0
 800b552:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b554:	f3ef 8305 	mrs	r3, IPSR
 800b558:	617b      	str	r3, [r7, #20]
  return(result);
 800b55a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d17e      	bne.n	800b65e <osThreadNew+0x11a>
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d07b      	beq.n	800b65e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b566:	2380      	movs	r3, #128	; 0x80
 800b568:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b56a:	2318      	movs	r3, #24
 800b56c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b56e:	2300      	movs	r3, #0
 800b570:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b572:	f04f 33ff 	mov.w	r3, #4294967295
 800b576:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d045      	beq.n	800b60a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d002      	beq.n	800b58c <osThreadNew+0x48>
        name = attr->name;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	699b      	ldr	r3, [r3, #24]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d002      	beq.n	800b59a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	699b      	ldr	r3, [r3, #24]
 800b598:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b59a:	69fb      	ldr	r3, [r7, #28]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d008      	beq.n	800b5b2 <osThreadNew+0x6e>
 800b5a0:	69fb      	ldr	r3, [r7, #28]
 800b5a2:	2b38      	cmp	r3, #56	; 0x38
 800b5a4:	d805      	bhi.n	800b5b2 <osThreadNew+0x6e>
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	685b      	ldr	r3, [r3, #4]
 800b5aa:	f003 0301 	and.w	r3, r3, #1
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d001      	beq.n	800b5b6 <osThreadNew+0x72>
        return (NULL);
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	e054      	b.n	800b660 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	695b      	ldr	r3, [r3, #20]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d003      	beq.n	800b5c6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	695b      	ldr	r3, [r3, #20]
 800b5c2:	089b      	lsrs	r3, r3, #2
 800b5c4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	689b      	ldr	r3, [r3, #8]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d00e      	beq.n	800b5ec <osThreadNew+0xa8>
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	68db      	ldr	r3, [r3, #12]
 800b5d2:	2baf      	cmp	r3, #175	; 0xaf
 800b5d4:	d90a      	bls.n	800b5ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d006      	beq.n	800b5ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	695b      	ldr	r3, [r3, #20]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d002      	beq.n	800b5ec <osThreadNew+0xa8>
        mem = 1;
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	61bb      	str	r3, [r7, #24]
 800b5ea:	e010      	b.n	800b60e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	689b      	ldr	r3, [r3, #8]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d10c      	bne.n	800b60e <osThreadNew+0xca>
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	68db      	ldr	r3, [r3, #12]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d108      	bne.n	800b60e <osThreadNew+0xca>
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	691b      	ldr	r3, [r3, #16]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d104      	bne.n	800b60e <osThreadNew+0xca>
          mem = 0;
 800b604:	2300      	movs	r3, #0
 800b606:	61bb      	str	r3, [r7, #24]
 800b608:	e001      	b.n	800b60e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b60a:	2300      	movs	r3, #0
 800b60c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b60e:	69bb      	ldr	r3, [r7, #24]
 800b610:	2b01      	cmp	r3, #1
 800b612:	d110      	bne.n	800b636 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b618:	687a      	ldr	r2, [r7, #4]
 800b61a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b61c:	9202      	str	r2, [sp, #8]
 800b61e:	9301      	str	r3, [sp, #4]
 800b620:	69fb      	ldr	r3, [r7, #28]
 800b622:	9300      	str	r3, [sp, #0]
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	6a3a      	ldr	r2, [r7, #32]
 800b628:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b62a:	68f8      	ldr	r0, [r7, #12]
 800b62c:	f002 f804 	bl	800d638 <xTaskCreateStatic>
 800b630:	4603      	mov	r3, r0
 800b632:	613b      	str	r3, [r7, #16]
 800b634:	e013      	b.n	800b65e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b636:	69bb      	ldr	r3, [r7, #24]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d110      	bne.n	800b65e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b63c:	6a3b      	ldr	r3, [r7, #32]
 800b63e:	b29a      	uxth	r2, r3
 800b640:	f107 0310 	add.w	r3, r7, #16
 800b644:	9301      	str	r3, [sp, #4]
 800b646:	69fb      	ldr	r3, [r7, #28]
 800b648:	9300      	str	r3, [sp, #0]
 800b64a:	68bb      	ldr	r3, [r7, #8]
 800b64c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b64e:	68f8      	ldr	r0, [r7, #12]
 800b650:	f002 f84f 	bl	800d6f2 <xTaskCreate>
 800b654:	4603      	mov	r3, r0
 800b656:	2b01      	cmp	r3, #1
 800b658:	d001      	beq.n	800b65e <osThreadNew+0x11a>
            hTask = NULL;
 800b65a:	2300      	movs	r3, #0
 800b65c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b65e:	693b      	ldr	r3, [r7, #16]
}
 800b660:	4618      	mov	r0, r3
 800b662:	3728      	adds	r7, #40	; 0x28
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}

0800b668 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800b668:	b580      	push	{r7, lr}
 800b66a:	b088      	sub	sp, #32
 800b66c:	af02      	add	r7, sp, #8
 800b66e:	6078      	str	r0, [r7, #4]
 800b670:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d002      	beq.n	800b682 <osThreadFlagsSet+0x1a>
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	da03      	bge.n	800b68a <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800b682:	f06f 0303 	mvn.w	r3, #3
 800b686:	60fb      	str	r3, [r7, #12]
 800b688:	e035      	b.n	800b6f6 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800b68a:	f04f 33ff 	mov.w	r3, #4294967295
 800b68e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b690:	f3ef 8305 	mrs	r3, IPSR
 800b694:	613b      	str	r3, [r7, #16]
  return(result);
 800b696:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d01f      	beq.n	800b6dc <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800b69c:	2300      	movs	r3, #0
 800b69e:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800b6a0:	f107 0308 	add.w	r3, r7, #8
 800b6a4:	9300      	str	r3, [sp, #0]
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	2201      	movs	r2, #1
 800b6aa:	6839      	ldr	r1, [r7, #0]
 800b6ac:	6978      	ldr	r0, [r7, #20]
 800b6ae:	f003 f88f 	bl	800e7d0 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800b6b2:	f107 030c 	add.w	r3, r7, #12
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	9200      	str	r2, [sp, #0]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	2100      	movs	r1, #0
 800b6be:	6978      	ldr	r0, [r7, #20]
 800b6c0:	f003 f886 	bl	800e7d0 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d015      	beq.n	800b6f6 <osThreadFlagsSet+0x8e>
 800b6ca:	4b0d      	ldr	r3, [pc, #52]	; (800b700 <osThreadFlagsSet+0x98>)
 800b6cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6d0:	601a      	str	r2, [r3, #0]
 800b6d2:	f3bf 8f4f 	dsb	sy
 800b6d6:	f3bf 8f6f 	isb	sy
 800b6da:	e00c      	b.n	800b6f6 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800b6dc:	2300      	movs	r3, #0
 800b6de:	2201      	movs	r2, #1
 800b6e0:	6839      	ldr	r1, [r7, #0]
 800b6e2:	6978      	ldr	r0, [r7, #20]
 800b6e4:	f002 ffb4 	bl	800e650 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800b6e8:	f107 030c 	add.w	r3, r7, #12
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	2100      	movs	r1, #0
 800b6f0:	6978      	ldr	r0, [r7, #20]
 800b6f2:	f002 ffad 	bl	800e650 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800b6f6:	68fb      	ldr	r3, [r7, #12]
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	3718      	adds	r7, #24
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}
 800b700:	e000ed04 	.word	0xe000ed04

0800b704 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800b704:	b580      	push	{r7, lr}
 800b706:	b08c      	sub	sp, #48	; 0x30
 800b708:	af00      	add	r7, sp, #0
 800b70a:	60f8      	str	r0, [r7, #12]
 800b70c:	60b9      	str	r1, [r7, #8]
 800b70e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b710:	f3ef 8305 	mrs	r3, IPSR
 800b714:	617b      	str	r3, [r7, #20]
  return(result);
 800b716:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d003      	beq.n	800b724 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800b71c:	f06f 0305 	mvn.w	r3, #5
 800b720:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b722:	e06b      	b.n	800b7fc <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	2b00      	cmp	r3, #0
 800b728:	da03      	bge.n	800b732 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800b72a:	f06f 0303 	mvn.w	r3, #3
 800b72e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b730:	e064      	b.n	800b7fc <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	f003 0302 	and.w	r3, r3, #2
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d002      	beq.n	800b742 <osThreadFlagsWait+0x3e>
      clear = 0U;
 800b73c:	2300      	movs	r3, #0
 800b73e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b740:	e001      	b.n	800b746 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 800b746:	2300      	movs	r3, #0
 800b748:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 800b74e:	f002 fab9 	bl	800dcc4 <xTaskGetTickCount>
 800b752:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800b754:	f107 0210 	add.w	r2, r7, #16
 800b758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b75a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b75c:	2000      	movs	r0, #0
 800b75e:	f002 ff17 	bl	800e590 <xTaskNotifyWait>
 800b762:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800b764:	69fb      	ldr	r3, [r7, #28]
 800b766:	2b01      	cmp	r3, #1
 800b768:	d137      	bne.n	800b7da <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800b76a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	4013      	ands	r3, r2
 800b770:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b776:	4313      	orrs	r3, r2
 800b778:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	f003 0301 	and.w	r3, r3, #1
 800b780:	2b00      	cmp	r3, #0
 800b782:	d00c      	beq.n	800b79e <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800b784:	68fa      	ldr	r2, [r7, #12]
 800b786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b788:	4013      	ands	r3, r2
 800b78a:	68fa      	ldr	r2, [r7, #12]
 800b78c:	429a      	cmp	r2, r3
 800b78e:	d032      	beq.n	800b7f6 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d10f      	bne.n	800b7b6 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800b796:	f06f 0302 	mvn.w	r3, #2
 800b79a:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800b79c:	e02e      	b.n	800b7fc <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800b79e:	68fa      	ldr	r2, [r7, #12]
 800b7a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7a2:	4013      	ands	r3, r2
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d128      	bne.n	800b7fa <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d103      	bne.n	800b7b6 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800b7ae:	f06f 0302 	mvn.w	r3, #2
 800b7b2:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800b7b4:	e022      	b.n	800b7fc <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800b7b6:	f002 fa85 	bl	800dcc4 <xTaskGetTickCount>
 800b7ba:	4602      	mov	r2, r0
 800b7bc:	6a3b      	ldr	r3, [r7, #32]
 800b7be:	1ad3      	subs	r3, r2, r3
 800b7c0:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800b7c2:	69ba      	ldr	r2, [r7, #24]
 800b7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7c6:	429a      	cmp	r2, r3
 800b7c8:	d902      	bls.n	800b7d0 <osThreadFlagsWait+0xcc>
          tout  = 0;
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	627b      	str	r3, [r7, #36]	; 0x24
 800b7ce:	e00e      	b.n	800b7ee <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800b7d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7d2:	69bb      	ldr	r3, [r7, #24]
 800b7d4:	1ad3      	subs	r3, r2, r3
 800b7d6:	627b      	str	r3, [r7, #36]	; 0x24
 800b7d8:	e009      	b.n	800b7ee <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d103      	bne.n	800b7e8 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800b7e0:	f06f 0302 	mvn.w	r3, #2
 800b7e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b7e6:	e002      	b.n	800b7ee <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800b7e8:	f06f 0301 	mvn.w	r3, #1
 800b7ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800b7ee:	69fb      	ldr	r3, [r7, #28]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d1af      	bne.n	800b754 <osThreadFlagsWait+0x50>
 800b7f4:	e002      	b.n	800b7fc <osThreadFlagsWait+0xf8>
            break;
 800b7f6:	bf00      	nop
 800b7f8:	e000      	b.n	800b7fc <osThreadFlagsWait+0xf8>
            break;
 800b7fa:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800b7fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800b7fe:	4618      	mov	r0, r3
 800b800:	3730      	adds	r7, #48	; 0x30
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}

0800b806 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b806:	b580      	push	{r7, lr}
 800b808:	b084      	sub	sp, #16
 800b80a:	af00      	add	r7, sp, #0
 800b80c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b80e:	f3ef 8305 	mrs	r3, IPSR
 800b812:	60bb      	str	r3, [r7, #8]
  return(result);
 800b814:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b816:	2b00      	cmp	r3, #0
 800b818:	d003      	beq.n	800b822 <osDelay+0x1c>
    stat = osErrorISR;
 800b81a:	f06f 0305 	mvn.w	r3, #5
 800b81e:	60fb      	str	r3, [r7, #12]
 800b820:	e007      	b.n	800b832 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b822:	2300      	movs	r3, #0
 800b824:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d002      	beq.n	800b832 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	f002 f8c1 	bl	800d9b4 <vTaskDelay>
    }
  }

  return (stat);
 800b832:	68fb      	ldr	r3, [r7, #12]
}
 800b834:	4618      	mov	r0, r3
 800b836:	3710      	adds	r7, #16
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd80      	pop	{r7, pc}

0800b83c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b08a      	sub	sp, #40	; 0x28
 800b840:	af02      	add	r7, sp, #8
 800b842:	60f8      	str	r0, [r7, #12]
 800b844:	60b9      	str	r1, [r7, #8]
 800b846:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b848:	2300      	movs	r3, #0
 800b84a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b84c:	f3ef 8305 	mrs	r3, IPSR
 800b850:	613b      	str	r3, [r7, #16]
  return(result);
 800b852:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b854:	2b00      	cmp	r3, #0
 800b856:	d15f      	bne.n	800b918 <osMessageQueueNew+0xdc>
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d05c      	beq.n	800b918 <osMessageQueueNew+0xdc>
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d059      	beq.n	800b918 <osMessageQueueNew+0xdc>
    mem = -1;
 800b864:	f04f 33ff 	mov.w	r3, #4294967295
 800b868:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d029      	beq.n	800b8c4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	689b      	ldr	r3, [r3, #8]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d012      	beq.n	800b89e <osMessageQueueNew+0x62>
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	68db      	ldr	r3, [r3, #12]
 800b87c:	2b4f      	cmp	r3, #79	; 0x4f
 800b87e:	d90e      	bls.n	800b89e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b884:	2b00      	cmp	r3, #0
 800b886:	d00a      	beq.n	800b89e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	695a      	ldr	r2, [r3, #20]
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	68b9      	ldr	r1, [r7, #8]
 800b890:	fb01 f303 	mul.w	r3, r1, r3
 800b894:	429a      	cmp	r2, r3
 800b896:	d302      	bcc.n	800b89e <osMessageQueueNew+0x62>
        mem = 1;
 800b898:	2301      	movs	r3, #1
 800b89a:	61bb      	str	r3, [r7, #24]
 800b89c:	e014      	b.n	800b8c8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	689b      	ldr	r3, [r3, #8]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d110      	bne.n	800b8c8 <osMessageQueueNew+0x8c>
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	68db      	ldr	r3, [r3, #12]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d10c      	bne.n	800b8c8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d108      	bne.n	800b8c8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	695b      	ldr	r3, [r3, #20]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d104      	bne.n	800b8c8 <osMessageQueueNew+0x8c>
          mem = 0;
 800b8be:	2300      	movs	r3, #0
 800b8c0:	61bb      	str	r3, [r7, #24]
 800b8c2:	e001      	b.n	800b8c8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b8c8:	69bb      	ldr	r3, [r7, #24]
 800b8ca:	2b01      	cmp	r3, #1
 800b8cc:	d10b      	bne.n	800b8e6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	691a      	ldr	r2, [r3, #16]
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	689b      	ldr	r3, [r3, #8]
 800b8d6:	2100      	movs	r1, #0
 800b8d8:	9100      	str	r1, [sp, #0]
 800b8da:	68b9      	ldr	r1, [r7, #8]
 800b8dc:	68f8      	ldr	r0, [r7, #12]
 800b8de:	f001 f86f 	bl	800c9c0 <xQueueGenericCreateStatic>
 800b8e2:	61f8      	str	r0, [r7, #28]
 800b8e4:	e008      	b.n	800b8f8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b8e6:	69bb      	ldr	r3, [r7, #24]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d105      	bne.n	800b8f8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	68b9      	ldr	r1, [r7, #8]
 800b8f0:	68f8      	ldr	r0, [r7, #12]
 800b8f2:	f001 f8dd 	bl	800cab0 <xQueueGenericCreate>
 800b8f6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b8f8:	69fb      	ldr	r3, [r7, #28]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d00c      	beq.n	800b918 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d003      	beq.n	800b90c <osMessageQueueNew+0xd0>
        name = attr->name;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	617b      	str	r3, [r7, #20]
 800b90a:	e001      	b.n	800b910 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b90c:	2300      	movs	r3, #0
 800b90e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b910:	6979      	ldr	r1, [r7, #20]
 800b912:	69f8      	ldr	r0, [r7, #28]
 800b914:	f001 fe32 	bl	800d57c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b918:	69fb      	ldr	r3, [r7, #28]
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3720      	adds	r7, #32
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}
	...

0800b924 <osMessageQueueGet>:
  }

  return (stat);
}

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b924:	b580      	push	{r7, lr}
 800b926:	b088      	sub	sp, #32
 800b928:	af00      	add	r7, sp, #0
 800b92a:	60f8      	str	r0, [r7, #12]
 800b92c:	60b9      	str	r1, [r7, #8]
 800b92e:	607a      	str	r2, [r7, #4]
 800b930:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b936:	2300      	movs	r3, #0
 800b938:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b93a:	f3ef 8305 	mrs	r3, IPSR
 800b93e:	617b      	str	r3, [r7, #20]
  return(result);
 800b940:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b942:	2b00      	cmp	r3, #0
 800b944:	d028      	beq.n	800b998 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b946:	69bb      	ldr	r3, [r7, #24]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d005      	beq.n	800b958 <osMessageQueueGet+0x34>
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d002      	beq.n	800b958 <osMessageQueueGet+0x34>
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d003      	beq.n	800b960 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800b958:	f06f 0303 	mvn.w	r3, #3
 800b95c:	61fb      	str	r3, [r7, #28]
 800b95e:	e037      	b.n	800b9d0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800b960:	2300      	movs	r3, #0
 800b962:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b964:	f107 0310 	add.w	r3, r7, #16
 800b968:	461a      	mov	r2, r3
 800b96a:	68b9      	ldr	r1, [r7, #8]
 800b96c:	69b8      	ldr	r0, [r7, #24]
 800b96e:	f001 fc39 	bl	800d1e4 <xQueueReceiveFromISR>
 800b972:	4603      	mov	r3, r0
 800b974:	2b01      	cmp	r3, #1
 800b976:	d003      	beq.n	800b980 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800b978:	f06f 0302 	mvn.w	r3, #2
 800b97c:	61fb      	str	r3, [r7, #28]
 800b97e:	e027      	b.n	800b9d0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800b980:	693b      	ldr	r3, [r7, #16]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d024      	beq.n	800b9d0 <osMessageQueueGet+0xac>
 800b986:	4b15      	ldr	r3, [pc, #84]	; (800b9dc <osMessageQueueGet+0xb8>)
 800b988:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b98c:	601a      	str	r2, [r3, #0]
 800b98e:	f3bf 8f4f 	dsb	sy
 800b992:	f3bf 8f6f 	isb	sy
 800b996:	e01b      	b.n	800b9d0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b998:	69bb      	ldr	r3, [r7, #24]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d002      	beq.n	800b9a4 <osMessageQueueGet+0x80>
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d103      	bne.n	800b9ac <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800b9a4:	f06f 0303 	mvn.w	r3, #3
 800b9a8:	61fb      	str	r3, [r7, #28]
 800b9aa:	e011      	b.n	800b9d0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b9ac:	683a      	ldr	r2, [r7, #0]
 800b9ae:	68b9      	ldr	r1, [r7, #8]
 800b9b0:	69b8      	ldr	r0, [r7, #24]
 800b9b2:	f001 fb37 	bl	800d024 <xQueueReceive>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	2b01      	cmp	r3, #1
 800b9ba:	d009      	beq.n	800b9d0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d003      	beq.n	800b9ca <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800b9c2:	f06f 0301 	mvn.w	r3, #1
 800b9c6:	61fb      	str	r3, [r7, #28]
 800b9c8:	e002      	b.n	800b9d0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800b9ca:	f06f 0302 	mvn.w	r3, #2
 800b9ce:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b9d0:	69fb      	ldr	r3, [r7, #28]
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3720      	adds	r7, #32
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}
 800b9da:	bf00      	nop
 800b9dc:	e000ed04 	.word	0xe000ed04

0800b9e0 <osMemoryPoolNew>:
/* Static memory pool functions */
static void  FreeBlock   (MemPool_t *mp, void *block);
static void *AllocBlock  (MemPool_t *mp);
static void *CreateBlock (MemPool_t *mp);

osMemoryPoolId_t osMemoryPoolNew (uint32_t block_count, uint32_t block_size, const osMemoryPoolAttr_t *attr) {
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b08a      	sub	sp, #40	; 0x28
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	60f8      	str	r0, [r7, #12]
 800b9e8:	60b9      	str	r1, [r7, #8]
 800b9ea:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b9ec:	f3ef 8305 	mrs	r3, IPSR
 800b9f0:	613b      	str	r3, [r7, #16]
  return(result);
 800b9f2:	693b      	ldr	r3, [r7, #16]
  MemPool_t *mp;
  const char *name;
  int32_t mem_cb, mem_mp;
  uint32_t sz;

  if (IS_IRQ()) {
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d002      	beq.n	800b9fe <osMemoryPoolNew+0x1e>
    mp = NULL;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	627b      	str	r3, [r7, #36]	; 0x24
 800b9fc:	e0be      	b.n	800bb7c <osMemoryPoolNew+0x19c>
  }
  else if ((block_count == 0U) || (block_size == 0U)) {
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d002      	beq.n	800ba0a <osMemoryPoolNew+0x2a>
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d102      	bne.n	800ba10 <osMemoryPoolNew+0x30>
    mp = NULL;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	627b      	str	r3, [r7, #36]	; 0x24
 800ba0e:	e0b5      	b.n	800bb7c <osMemoryPoolNew+0x19c>
  }
  else {
    mp = NULL;
 800ba10:	2300      	movs	r3, #0
 800ba12:	627b      	str	r3, [r7, #36]	; 0x24
    sz = MEMPOOL_ARR_SIZE (block_count, block_size);
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	3303      	adds	r3, #3
 800ba18:	f023 0203 	bic.w	r2, r3, #3
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	fb02 f303 	mul.w	r3, r2, r3
 800ba22:	617b      	str	r3, [r7, #20]

    name = NULL;
 800ba24:	2300      	movs	r3, #0
 800ba26:	623b      	str	r3, [r7, #32]
    mem_cb = -1;
 800ba28:	f04f 33ff 	mov.w	r3, #4294967295
 800ba2c:	61fb      	str	r3, [r7, #28]
    mem_mp = -1;
 800ba2e:	f04f 33ff 	mov.w	r3, #4294967295
 800ba32:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d038      	beq.n	800baac <osMemoryPoolNew+0xcc>
      if (attr->name != NULL) {
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d002      	beq.n	800ba48 <osMemoryPoolNew+0x68>
        name = attr->name;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(MemPool_t))) {
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	689b      	ldr	r3, [r3, #8]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d006      	beq.n	800ba5e <osMemoryPoolNew+0x7e>
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	68db      	ldr	r3, [r3, #12]
 800ba54:	2b73      	cmp	r3, #115	; 0x73
 800ba56:	d902      	bls.n	800ba5e <osMemoryPoolNew+0x7e>
        /* Static control block is provided */
        mem_cb = 1;
 800ba58:	2301      	movs	r3, #1
 800ba5a:	61fb      	str	r3, [r7, #28]
 800ba5c:	e009      	b.n	800ba72 <osMemoryPoolNew+0x92>
      }
      else if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	689b      	ldr	r3, [r3, #8]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d105      	bne.n	800ba72 <osMemoryPoolNew+0x92>
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	68db      	ldr	r3, [r3, #12]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d101      	bne.n	800ba72 <osMemoryPoolNew+0x92>
        /* Allocate control block memory on heap */
        mem_cb = 0;
 800ba6e:	2300      	movs	r3, #0
 800ba70:	61fb      	str	r3, [r7, #28]
      }

      if ((attr->mp_mem == NULL) && (attr->mp_size == 0U)) {
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	691b      	ldr	r3, [r3, #16]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d106      	bne.n	800ba88 <osMemoryPoolNew+0xa8>
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	695b      	ldr	r3, [r3, #20]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d102      	bne.n	800ba88 <osMemoryPoolNew+0xa8>
        /* Allocate memory array on heap */
          mem_mp = 0;
 800ba82:	2300      	movs	r3, #0
 800ba84:	61bb      	str	r3, [r7, #24]
 800ba86:	e015      	b.n	800bab4 <osMemoryPoolNew+0xd4>
      }
      else {
        if (attr->mp_mem != NULL) {
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	691b      	ldr	r3, [r3, #16]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d011      	beq.n	800bab4 <osMemoryPoolNew+0xd4>
          /* Check if array is 4-byte aligned */
          if (((uint32_t)attr->mp_mem & 3U) == 0U) {
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	691b      	ldr	r3, [r3, #16]
 800ba94:	f003 0303 	and.w	r3, r3, #3
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d10b      	bne.n	800bab4 <osMemoryPoolNew+0xd4>
            /* Check if array big enough */
            if (attr->mp_size >= sz) {
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	695b      	ldr	r3, [r3, #20]
 800baa0:	697a      	ldr	r2, [r7, #20]
 800baa2:	429a      	cmp	r2, r3
 800baa4:	d806      	bhi.n	800bab4 <osMemoryPoolNew+0xd4>
              /* Static memory pool array is provided */
              mem_mp = 1;
 800baa6:	2301      	movs	r3, #1
 800baa8:	61bb      	str	r3, [r7, #24]
 800baaa:	e003      	b.n	800bab4 <osMemoryPoolNew+0xd4>
        }
      }
    }
    else {
      /* Attributes not provided, allocate memory on heap */
      mem_cb = 0;
 800baac:	2300      	movs	r3, #0
 800baae:	61fb      	str	r3, [r7, #28]
      mem_mp = 0;
 800bab0:	2300      	movs	r3, #0
 800bab2:	61bb      	str	r3, [r7, #24]
    }

    if (mem_cb == 0) {
 800bab4:	69fb      	ldr	r3, [r7, #28]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d104      	bne.n	800bac4 <osMemoryPoolNew+0xe4>
      mp = pvPortMalloc (sizeof(MemPool_t));
 800baba:	2074      	movs	r0, #116	; 0x74
 800babc:	f000 f946 	bl	800bd4c <pvPortMalloc>
 800bac0:	6278      	str	r0, [r7, #36]	; 0x24
 800bac2:	e002      	b.n	800baca <osMemoryPoolNew+0xea>
    } else {
      mp = attr->cb_mem;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	689b      	ldr	r3, [r3, #8]
 800bac8:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (mp != NULL) {
 800baca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d01b      	beq.n	800bb08 <osMemoryPoolNew+0x128>
      /* Create a semaphore (max count == initial count == block_count) */
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        mp->sem = xSemaphoreCreateCountingStatic (block_count, block_count, &mp->mem_sem);
 800bad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bad2:	3324      	adds	r3, #36	; 0x24
 800bad4:	461a      	mov	r2, r3
 800bad6:	68f9      	ldr	r1, [r7, #12]
 800bad8:	68f8      	ldr	r0, [r7, #12]
 800bada:	f001 f846 	bl	800cb6a <xQueueCreateCountingSemaphoreStatic>
 800bade:	4602      	mov	r2, r0
 800bae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae2:	605a      	str	r2, [r3, #4]
        mp->sem = xSemaphoreCreateCounting (block_count, block_count);
      #else
        mp->sem == NULL;
      #endif

      if (mp->sem != NULL) {
 800bae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae6:	685b      	ldr	r3, [r3, #4]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d00d      	beq.n	800bb08 <osMemoryPoolNew+0x128>
        /* Setup memory array */
        if (mem_mp == 0) {
 800baec:	69bb      	ldr	r3, [r7, #24]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d106      	bne.n	800bb00 <osMemoryPoolNew+0x120>
          mp->mem_arr = pvPortMalloc (sz);
 800baf2:	6978      	ldr	r0, [r7, #20]
 800baf4:	f000 f92a 	bl	800bd4c <pvPortMalloc>
 800baf8:	4602      	mov	r2, r0
 800bafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bafc:	609a      	str	r2, [r3, #8]
 800bafe:	e003      	b.n	800bb08 <osMemoryPoolNew+0x128>
        } else {
          mp->mem_arr = attr->mp_mem;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	691a      	ldr	r2, [r3, #16]
 800bb04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb06:	609a      	str	r2, [r3, #8]
        }
      }
    }

    if ((mp != NULL) && (mp->mem_arr != NULL)) {
 800bb08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d02b      	beq.n	800bb66 <osMemoryPoolNew+0x186>
 800bb0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb10:	689b      	ldr	r3, [r3, #8]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d027      	beq.n	800bb66 <osMemoryPoolNew+0x186>
      /* Memory pool can be created */
      mp->head    = NULL;
 800bb16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb18:	2200      	movs	r2, #0
 800bb1a:	601a      	str	r2, [r3, #0]
      mp->mem_sz  = sz;
 800bb1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb1e:	697a      	ldr	r2, [r7, #20]
 800bb20:	60da      	str	r2, [r3, #12]
      mp->name    = name;
 800bb22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb24:	6a3a      	ldr	r2, [r7, #32]
 800bb26:	611a      	str	r2, [r3, #16]
      mp->bl_sz   = block_size;
 800bb28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb2a:	68ba      	ldr	r2, [r7, #8]
 800bb2c:	615a      	str	r2, [r3, #20]
      mp->bl_cnt  = block_count;
 800bb2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb30:	68fa      	ldr	r2, [r7, #12]
 800bb32:	619a      	str	r2, [r3, #24]
      mp->n       = 0U;
 800bb34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb36:	2200      	movs	r2, #0
 800bb38:	61da      	str	r2, [r3, #28]

      /* Set heap allocated memory flags */
      mp->status = MPOOL_STATUS;
 800bb3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb3c:	4a12      	ldr	r2, [pc, #72]	; (800bb88 <osMemoryPoolNew+0x1a8>)
 800bb3e:	621a      	str	r2, [r3, #32]

      if (mem_cb == 0) {
 800bb40:	69fb      	ldr	r3, [r7, #28]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d105      	bne.n	800bb52 <osMemoryPoolNew+0x172>
        /* Control block on heap */
        mp->status |= 1U;
 800bb46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb48:	6a1b      	ldr	r3, [r3, #32]
 800bb4a:	f043 0201 	orr.w	r2, r3, #1
 800bb4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb50:	621a      	str	r2, [r3, #32]
      }
      if (mem_mp == 0) {
 800bb52:	69bb      	ldr	r3, [r7, #24]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d111      	bne.n	800bb7c <osMemoryPoolNew+0x19c>
        /* Memory array on heap */
        mp->status |= 2U;
 800bb58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb5a:	6a1b      	ldr	r3, [r3, #32]
 800bb5c:	f043 0202 	orr.w	r2, r3, #2
 800bb60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb62:	621a      	str	r2, [r3, #32]
      if (mem_mp == 0) {
 800bb64:	e00a      	b.n	800bb7c <osMemoryPoolNew+0x19c>
      }
    }
    else {
      /* Memory pool cannot be created, release allocated resources */
      if ((mem_cb == 0) && (mp != NULL)) {
 800bb66:	69fb      	ldr	r3, [r7, #28]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d105      	bne.n	800bb78 <osMemoryPoolNew+0x198>
 800bb6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d002      	beq.n	800bb78 <osMemoryPoolNew+0x198>
        /* Free control block memory */
        vPortFree (mp);
 800bb72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bb74:	f000 f9b6 	bl	800bee4 <vPortFree>
      }
      mp = NULL;
 800bb78:	2300      	movs	r3, #0
 800bb7a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return (mp);
 800bb7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	3728      	adds	r7, #40	; 0x28
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}
 800bb86:	bf00      	nop
 800bb88:	5eed0000 	.word	0x5eed0000

0800bb8c <osMemoryPoolFree>:
  }

  return (block);
}

osStatus_t osMemoryPoolFree (osMemoryPoolId_t mp_id, void *block) {
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b08a      	sub	sp, #40	; 0x28
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
 800bb94:	6039      	str	r1, [r7, #0]
  MemPool_t *mp;
  osStatus_t stat;
  uint32_t isrm;
  BaseType_t yield;

  if ((mp_id == NULL) || (block == NULL)) {
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d002      	beq.n	800bba2 <osMemoryPoolFree+0x16>
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d103      	bne.n	800bbaa <osMemoryPoolFree+0x1e>
    /* Invalid input parameters */
    stat = osErrorParameter;
 800bba2:	f06f 0303 	mvn.w	r3, #3
 800bba6:	627b      	str	r3, [r7, #36]	; 0x24
 800bba8:	e07f      	b.n	800bcaa <osMemoryPoolFree+0x11e>
  }
  else {
    mp = (MemPool_t *)mp_id;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	623b      	str	r3, [r7, #32]

    if ((mp->status & MPOOL_STATUS) != MPOOL_STATUS) {
 800bbae:	6a3b      	ldr	r3, [r7, #32]
 800bbb0:	6a1a      	ldr	r2, [r3, #32]
 800bbb2:	4b40      	ldr	r3, [pc, #256]	; (800bcb4 <osMemoryPoolFree+0x128>)
 800bbb4:	4013      	ands	r3, r2
 800bbb6:	4a3f      	ldr	r2, [pc, #252]	; (800bcb4 <osMemoryPoolFree+0x128>)
 800bbb8:	4293      	cmp	r3, r2
 800bbba:	d003      	beq.n	800bbc4 <osMemoryPoolFree+0x38>
      /* Invalid object status */
      stat = osErrorResource;
 800bbbc:	f06f 0302 	mvn.w	r3, #2
 800bbc0:	627b      	str	r3, [r7, #36]	; 0x24
 800bbc2:	e072      	b.n	800bcaa <osMemoryPoolFree+0x11e>
    }
    else if ((block < (void *)&mp->mem_arr[0]) || (block > (void*)&mp->mem_arr[mp->mem_sz-1])) {
 800bbc4:	6a3b      	ldr	r3, [r7, #32]
 800bbc6:	689b      	ldr	r3, [r3, #8]
 800bbc8:	683a      	ldr	r2, [r7, #0]
 800bbca:	429a      	cmp	r2, r3
 800bbcc:	d308      	bcc.n	800bbe0 <osMemoryPoolFree+0x54>
 800bbce:	6a3b      	ldr	r3, [r7, #32]
 800bbd0:	689a      	ldr	r2, [r3, #8]
 800bbd2:	6a3b      	ldr	r3, [r7, #32]
 800bbd4:	68db      	ldr	r3, [r3, #12]
 800bbd6:	3b01      	subs	r3, #1
 800bbd8:	4413      	add	r3, r2
 800bbda:	683a      	ldr	r2, [r7, #0]
 800bbdc:	429a      	cmp	r2, r3
 800bbde:	d903      	bls.n	800bbe8 <osMemoryPoolFree+0x5c>
      /* Block pointer outside of memory array area */
      stat = osErrorParameter;
 800bbe0:	f06f 0303 	mvn.w	r3, #3
 800bbe4:	627b      	str	r3, [r7, #36]	; 0x24
 800bbe6:	e060      	b.n	800bcaa <osMemoryPoolFree+0x11e>
    }
    else {
      stat = osOK;
 800bbe8:	2300      	movs	r3, #0
 800bbea:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bbec:	f3ef 8305 	mrs	r3, IPSR
 800bbf0:	61bb      	str	r3, [r7, #24]
  return(result);
 800bbf2:	69bb      	ldr	r3, [r7, #24]

      if (IS_IRQ()) {
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d03b      	beq.n	800bc70 <osMemoryPoolFree+0xe4>
        if (uxSemaphoreGetCountFromISR (mp->sem) == mp->bl_cnt) {
 800bbf8:	6a3b      	ldr	r3, [r7, #32]
 800bbfa:	685b      	ldr	r3, [r3, #4]
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	f001 fb8f 	bl	800d320 <uxQueueMessagesWaitingFromISR>
 800bc02:	4602      	mov	r2, r0
 800bc04:	6a3b      	ldr	r3, [r7, #32]
 800bc06:	699b      	ldr	r3, [r3, #24]
 800bc08:	429a      	cmp	r2, r3
 800bc0a:	d103      	bne.n	800bc14 <osMemoryPoolFree+0x88>
          stat = osErrorResource;
 800bc0c:	f06f 0302 	mvn.w	r3, #2
 800bc10:	627b      	str	r3, [r7, #36]	; 0x24
 800bc12:	e04a      	b.n	800bcaa <osMemoryPoolFree+0x11e>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bc14:	f3ef 8211 	mrs	r2, BASEPRI
 800bc18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc1c:	f383 8811 	msr	BASEPRI, r3
 800bc20:	f3bf 8f6f 	isb	sy
 800bc24:	f3bf 8f4f 	dsb	sy
 800bc28:	613a      	str	r2, [r7, #16]
 800bc2a:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bc2c:	693b      	ldr	r3, [r7, #16]
        }
        else {
          isrm = taskENTER_CRITICAL_FROM_ISR();
 800bc2e:	61fb      	str	r3, [r7, #28]

          /* Add block to the list of free blocks */
          FreeBlock(mp, block);
 800bc30:	6839      	ldr	r1, [r7, #0]
 800bc32:	6a38      	ldr	r0, [r7, #32]
 800bc34:	f000 f842 	bl	800bcbc <FreeBlock>
 800bc38:	69fb      	ldr	r3, [r7, #28]
 800bc3a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bc3c:	697b      	ldr	r3, [r7, #20]
 800bc3e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bc42:	bf00      	nop

          taskEXIT_CRITICAL_FROM_ISR(isrm);

          yield = pdFALSE;
 800bc44:	2300      	movs	r3, #0
 800bc46:	60bb      	str	r3, [r7, #8]
          xSemaphoreGiveFromISR (mp->sem, &yield);
 800bc48:	6a3b      	ldr	r3, [r7, #32]
 800bc4a:	685b      	ldr	r3, [r3, #4]
 800bc4c:	f107 0208 	add.w	r2, r7, #8
 800bc50:	4611      	mov	r1, r2
 800bc52:	4618      	mov	r0, r3
 800bc54:	f001 f959 	bl	800cf0a <xQueueGiveFromISR>
          portYIELD_FROM_ISR (yield);
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d025      	beq.n	800bcaa <osMemoryPoolFree+0x11e>
 800bc5e:	4b16      	ldr	r3, [pc, #88]	; (800bcb8 <osMemoryPoolFree+0x12c>)
 800bc60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc64:	601a      	str	r2, [r3, #0]
 800bc66:	f3bf 8f4f 	dsb	sy
 800bc6a:	f3bf 8f6f 	isb	sy
 800bc6e:	e01c      	b.n	800bcaa <osMemoryPoolFree+0x11e>
        }
      }
      else {
        if (uxSemaphoreGetCount (mp->sem) == mp->bl_cnt) {
 800bc70:	6a3b      	ldr	r3, [r7, #32]
 800bc72:	685b      	ldr	r3, [r3, #4]
 800bc74:	4618      	mov	r0, r3
 800bc76:	f001 fb35 	bl	800d2e4 <uxQueueMessagesWaiting>
 800bc7a:	4602      	mov	r2, r0
 800bc7c:	6a3b      	ldr	r3, [r7, #32]
 800bc7e:	699b      	ldr	r3, [r3, #24]
 800bc80:	429a      	cmp	r2, r3
 800bc82:	d103      	bne.n	800bc8c <osMemoryPoolFree+0x100>
          stat = osErrorResource;
 800bc84:	f06f 0302 	mvn.w	r3, #2
 800bc88:	627b      	str	r3, [r7, #36]	; 0x24
 800bc8a:	e00e      	b.n	800bcaa <osMemoryPoolFree+0x11e>
        }
        else {
          taskENTER_CRITICAL();
 800bc8c:	f000 fc2a 	bl	800c4e4 <vPortEnterCritical>

          /* Add block to the list of free blocks */
          FreeBlock(mp, block);
 800bc90:	6839      	ldr	r1, [r7, #0]
 800bc92:	6a38      	ldr	r0, [r7, #32]
 800bc94:	f000 f812 	bl	800bcbc <FreeBlock>

          taskEXIT_CRITICAL();
 800bc98:	f000 fc54 	bl	800c544 <vPortExitCritical>

          xSemaphoreGive (mp->sem);
 800bc9c:	6a3b      	ldr	r3, [r7, #32]
 800bc9e:	6858      	ldr	r0, [r3, #4]
 800bca0:	2300      	movs	r3, #0
 800bca2:	2200      	movs	r2, #0
 800bca4:	2100      	movs	r1, #0
 800bca6:	f000 ff97 	bl	800cbd8 <xQueueGenericSend>
        }
      }
    }
  }

  return (stat);
 800bcaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	3728      	adds	r7, #40	; 0x28
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}
 800bcb4:	5eed0000 	.word	0x5eed0000
 800bcb8:	e000ed04 	.word	0xe000ed04

0800bcbc <FreeBlock>:
}

/*
  Free block by putting it to the list of free blocks.
*/
static void FreeBlock (MemPool_t *mp, void *block) {
 800bcbc:	b480      	push	{r7}
 800bcbe:	b085      	sub	sp, #20
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
 800bcc4:	6039      	str	r1, [r7, #0]
  MemPoolBlock_t *p = block;
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	60fb      	str	r3, [r7, #12]

  /* Store current head into block memory space */
  p->next = mp->head;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681a      	ldr	r2, [r3, #0]
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	601a      	str	r2, [r3, #0]

  /* Store current block as new head */
  mp->head = p;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	68fa      	ldr	r2, [r7, #12]
 800bcd6:	601a      	str	r2, [r3, #0]
}
 800bcd8:	bf00      	nop
 800bcda:	3714      	adds	r7, #20
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce2:	4770      	bx	lr

0800bce4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bce4:	b480      	push	{r7}
 800bce6:	b085      	sub	sp, #20
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	60f8      	str	r0, [r7, #12]
 800bcec:	60b9      	str	r1, [r7, #8]
 800bcee:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	4a07      	ldr	r2, [pc, #28]	; (800bd10 <vApplicationGetIdleTaskMemory+0x2c>)
 800bcf4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bcf6:	68bb      	ldr	r3, [r7, #8]
 800bcf8:	4a06      	ldr	r2, [pc, #24]	; (800bd14 <vApplicationGetIdleTaskMemory+0x30>)
 800bcfa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2280      	movs	r2, #128	; 0x80
 800bd00:	601a      	str	r2, [r3, #0]
}
 800bd02:	bf00      	nop
 800bd04:	3714      	adds	r7, #20
 800bd06:	46bd      	mov	sp, r7
 800bd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0c:	4770      	bx	lr
 800bd0e:	bf00      	nop
 800bd10:	20000b54 	.word	0x20000b54
 800bd14:	20000c04 	.word	0x20000c04

0800bd18 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bd18:	b480      	push	{r7}
 800bd1a:	b085      	sub	sp, #20
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	60f8      	str	r0, [r7, #12]
 800bd20:	60b9      	str	r1, [r7, #8]
 800bd22:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	4a07      	ldr	r2, [pc, #28]	; (800bd44 <vApplicationGetTimerTaskMemory+0x2c>)
 800bd28:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bd2a:	68bb      	ldr	r3, [r7, #8]
 800bd2c:	4a06      	ldr	r2, [pc, #24]	; (800bd48 <vApplicationGetTimerTaskMemory+0x30>)
 800bd2e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bd36:	601a      	str	r2, [r3, #0]
}
 800bd38:	bf00      	nop
 800bd3a:	3714      	adds	r7, #20
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd42:	4770      	bx	lr
 800bd44:	20000e04 	.word	0x20000e04
 800bd48:	20000eb4 	.word	0x20000eb4

0800bd4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b08a      	sub	sp, #40	; 0x28
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bd54:	2300      	movs	r3, #0
 800bd56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bd58:	f001 fed0 	bl	800dafc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bd5c:	4b5b      	ldr	r3, [pc, #364]	; (800becc <pvPortMalloc+0x180>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d101      	bne.n	800bd68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bd64:	f000 f920 	bl	800bfa8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bd68:	4b59      	ldr	r3, [pc, #356]	; (800bed0 <pvPortMalloc+0x184>)
 800bd6a:	681a      	ldr	r2, [r3, #0]
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	4013      	ands	r3, r2
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	f040 8093 	bne.w	800be9c <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d01d      	beq.n	800bdb8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bd7c:	2208      	movs	r2, #8
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	4413      	add	r3, r2
 800bd82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f003 0307 	and.w	r3, r3, #7
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d014      	beq.n	800bdb8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f023 0307 	bic.w	r3, r3, #7
 800bd94:	3308      	adds	r3, #8
 800bd96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f003 0307 	and.w	r3, r3, #7
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d00a      	beq.n	800bdb8 <pvPortMalloc+0x6c>
	__asm volatile
 800bda2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda6:	f383 8811 	msr	BASEPRI, r3
 800bdaa:	f3bf 8f6f 	isb	sy
 800bdae:	f3bf 8f4f 	dsb	sy
 800bdb2:	617b      	str	r3, [r7, #20]
}
 800bdb4:	bf00      	nop
 800bdb6:	e7fe      	b.n	800bdb6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d06e      	beq.n	800be9c <pvPortMalloc+0x150>
 800bdbe:	4b45      	ldr	r3, [pc, #276]	; (800bed4 <pvPortMalloc+0x188>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	687a      	ldr	r2, [r7, #4]
 800bdc4:	429a      	cmp	r2, r3
 800bdc6:	d869      	bhi.n	800be9c <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bdc8:	4b43      	ldr	r3, [pc, #268]	; (800bed8 <pvPortMalloc+0x18c>)
 800bdca:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bdcc:	4b42      	ldr	r3, [pc, #264]	; (800bed8 <pvPortMalloc+0x18c>)
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bdd2:	e004      	b.n	800bdde <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bdd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bdd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bdde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde0:	685b      	ldr	r3, [r3, #4]
 800bde2:	687a      	ldr	r2, [r7, #4]
 800bde4:	429a      	cmp	r2, r3
 800bde6:	d903      	bls.n	800bdf0 <pvPortMalloc+0xa4>
 800bde8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d1f1      	bne.n	800bdd4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bdf0:	4b36      	ldr	r3, [pc, #216]	; (800becc <pvPortMalloc+0x180>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdf6:	429a      	cmp	r2, r3
 800bdf8:	d050      	beq.n	800be9c <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bdfa:	6a3b      	ldr	r3, [r7, #32]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	2208      	movs	r2, #8
 800be00:	4413      	add	r3, r2
 800be02:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800be04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be06:	681a      	ldr	r2, [r3, #0]
 800be08:	6a3b      	ldr	r3, [r7, #32]
 800be0a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800be0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be0e:	685a      	ldr	r2, [r3, #4]
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	1ad2      	subs	r2, r2, r3
 800be14:	2308      	movs	r3, #8
 800be16:	005b      	lsls	r3, r3, #1
 800be18:	429a      	cmp	r2, r3
 800be1a:	d91f      	bls.n	800be5c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800be1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	4413      	add	r3, r2
 800be22:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800be24:	69bb      	ldr	r3, [r7, #24]
 800be26:	f003 0307 	and.w	r3, r3, #7
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d00a      	beq.n	800be44 <pvPortMalloc+0xf8>
	__asm volatile
 800be2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be32:	f383 8811 	msr	BASEPRI, r3
 800be36:	f3bf 8f6f 	isb	sy
 800be3a:	f3bf 8f4f 	dsb	sy
 800be3e:	613b      	str	r3, [r7, #16]
}
 800be40:	bf00      	nop
 800be42:	e7fe      	b.n	800be42 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800be44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be46:	685a      	ldr	r2, [r3, #4]
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	1ad2      	subs	r2, r2, r3
 800be4c:	69bb      	ldr	r3, [r7, #24]
 800be4e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800be50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be52:	687a      	ldr	r2, [r7, #4]
 800be54:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800be56:	69b8      	ldr	r0, [r7, #24]
 800be58:	f000 f908 	bl	800c06c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800be5c:	4b1d      	ldr	r3, [pc, #116]	; (800bed4 <pvPortMalloc+0x188>)
 800be5e:	681a      	ldr	r2, [r3, #0]
 800be60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be62:	685b      	ldr	r3, [r3, #4]
 800be64:	1ad3      	subs	r3, r2, r3
 800be66:	4a1b      	ldr	r2, [pc, #108]	; (800bed4 <pvPortMalloc+0x188>)
 800be68:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800be6a:	4b1a      	ldr	r3, [pc, #104]	; (800bed4 <pvPortMalloc+0x188>)
 800be6c:	681a      	ldr	r2, [r3, #0]
 800be6e:	4b1b      	ldr	r3, [pc, #108]	; (800bedc <pvPortMalloc+0x190>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	429a      	cmp	r2, r3
 800be74:	d203      	bcs.n	800be7e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800be76:	4b17      	ldr	r3, [pc, #92]	; (800bed4 <pvPortMalloc+0x188>)
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	4a18      	ldr	r2, [pc, #96]	; (800bedc <pvPortMalloc+0x190>)
 800be7c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800be7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be80:	685a      	ldr	r2, [r3, #4]
 800be82:	4b13      	ldr	r3, [pc, #76]	; (800bed0 <pvPortMalloc+0x184>)
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	431a      	orrs	r2, r3
 800be88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be8a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800be8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be8e:	2200      	movs	r2, #0
 800be90:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800be92:	4b13      	ldr	r3, [pc, #76]	; (800bee0 <pvPortMalloc+0x194>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	3301      	adds	r3, #1
 800be98:	4a11      	ldr	r2, [pc, #68]	; (800bee0 <pvPortMalloc+0x194>)
 800be9a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800be9c:	f001 fe74 	bl	800db88 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bea0:	69fb      	ldr	r3, [r7, #28]
 800bea2:	f003 0307 	and.w	r3, r3, #7
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d00a      	beq.n	800bec0 <pvPortMalloc+0x174>
	__asm volatile
 800beaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beae:	f383 8811 	msr	BASEPRI, r3
 800beb2:	f3bf 8f6f 	isb	sy
 800beb6:	f3bf 8f4f 	dsb	sy
 800beba:	60fb      	str	r3, [r7, #12]
}
 800bebc:	bf00      	nop
 800bebe:	e7fe      	b.n	800bebe <pvPortMalloc+0x172>
	return pvReturn;
 800bec0:	69fb      	ldr	r3, [r7, #28]
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	3728      	adds	r7, #40	; 0x28
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}
 800beca:	bf00      	nop
 800becc:	200045cc 	.word	0x200045cc
 800bed0:	200045e0 	.word	0x200045e0
 800bed4:	200045d0 	.word	0x200045d0
 800bed8:	200045c4 	.word	0x200045c4
 800bedc:	200045d4 	.word	0x200045d4
 800bee0:	200045d8 	.word	0x200045d8

0800bee4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b086      	sub	sp, #24
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d04d      	beq.n	800bf92 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bef6:	2308      	movs	r3, #8
 800bef8:	425b      	negs	r3, r3
 800befa:	697a      	ldr	r2, [r7, #20]
 800befc:	4413      	add	r3, r2
 800befe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bf00:	697b      	ldr	r3, [r7, #20]
 800bf02:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bf04:	693b      	ldr	r3, [r7, #16]
 800bf06:	685a      	ldr	r2, [r3, #4]
 800bf08:	4b24      	ldr	r3, [pc, #144]	; (800bf9c <vPortFree+0xb8>)
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	4013      	ands	r3, r2
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d10a      	bne.n	800bf28 <vPortFree+0x44>
	__asm volatile
 800bf12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf16:	f383 8811 	msr	BASEPRI, r3
 800bf1a:	f3bf 8f6f 	isb	sy
 800bf1e:	f3bf 8f4f 	dsb	sy
 800bf22:	60fb      	str	r3, [r7, #12]
}
 800bf24:	bf00      	nop
 800bf26:	e7fe      	b.n	800bf26 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bf28:	693b      	ldr	r3, [r7, #16]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d00a      	beq.n	800bf46 <vPortFree+0x62>
	__asm volatile
 800bf30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf34:	f383 8811 	msr	BASEPRI, r3
 800bf38:	f3bf 8f6f 	isb	sy
 800bf3c:	f3bf 8f4f 	dsb	sy
 800bf40:	60bb      	str	r3, [r7, #8]
}
 800bf42:	bf00      	nop
 800bf44:	e7fe      	b.n	800bf44 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bf46:	693b      	ldr	r3, [r7, #16]
 800bf48:	685a      	ldr	r2, [r3, #4]
 800bf4a:	4b14      	ldr	r3, [pc, #80]	; (800bf9c <vPortFree+0xb8>)
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	4013      	ands	r3, r2
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d01e      	beq.n	800bf92 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bf54:	693b      	ldr	r3, [r7, #16]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d11a      	bne.n	800bf92 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bf5c:	693b      	ldr	r3, [r7, #16]
 800bf5e:	685a      	ldr	r2, [r3, #4]
 800bf60:	4b0e      	ldr	r3, [pc, #56]	; (800bf9c <vPortFree+0xb8>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	43db      	mvns	r3, r3
 800bf66:	401a      	ands	r2, r3
 800bf68:	693b      	ldr	r3, [r7, #16]
 800bf6a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bf6c:	f001 fdc6 	bl	800dafc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bf70:	693b      	ldr	r3, [r7, #16]
 800bf72:	685a      	ldr	r2, [r3, #4]
 800bf74:	4b0a      	ldr	r3, [pc, #40]	; (800bfa0 <vPortFree+0xbc>)
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	4413      	add	r3, r2
 800bf7a:	4a09      	ldr	r2, [pc, #36]	; (800bfa0 <vPortFree+0xbc>)
 800bf7c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bf7e:	6938      	ldr	r0, [r7, #16]
 800bf80:	f000 f874 	bl	800c06c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bf84:	4b07      	ldr	r3, [pc, #28]	; (800bfa4 <vPortFree+0xc0>)
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	3301      	adds	r3, #1
 800bf8a:	4a06      	ldr	r2, [pc, #24]	; (800bfa4 <vPortFree+0xc0>)
 800bf8c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bf8e:	f001 fdfb 	bl	800db88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bf92:	bf00      	nop
 800bf94:	3718      	adds	r7, #24
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bd80      	pop	{r7, pc}
 800bf9a:	bf00      	nop
 800bf9c:	200045e0 	.word	0x200045e0
 800bfa0:	200045d0 	.word	0x200045d0
 800bfa4:	200045dc 	.word	0x200045dc

0800bfa8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bfa8:	b480      	push	{r7}
 800bfaa:	b085      	sub	sp, #20
 800bfac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bfae:	f242 7310 	movw	r3, #10000	; 0x2710
 800bfb2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bfb4:	4b27      	ldr	r3, [pc, #156]	; (800c054 <prvHeapInit+0xac>)
 800bfb6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	f003 0307 	and.w	r3, r3, #7
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d00c      	beq.n	800bfdc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	3307      	adds	r3, #7
 800bfc6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	f023 0307 	bic.w	r3, r3, #7
 800bfce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bfd0:	68ba      	ldr	r2, [r7, #8]
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	1ad3      	subs	r3, r2, r3
 800bfd6:	4a1f      	ldr	r2, [pc, #124]	; (800c054 <prvHeapInit+0xac>)
 800bfd8:	4413      	add	r3, r2
 800bfda:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bfe0:	4a1d      	ldr	r2, [pc, #116]	; (800c058 <prvHeapInit+0xb0>)
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bfe6:	4b1c      	ldr	r3, [pc, #112]	; (800c058 <prvHeapInit+0xb0>)
 800bfe8:	2200      	movs	r2, #0
 800bfea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	68ba      	ldr	r2, [r7, #8]
 800bff0:	4413      	add	r3, r2
 800bff2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bff4:	2208      	movs	r2, #8
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	1a9b      	subs	r3, r3, r2
 800bffa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	f023 0307 	bic.w	r3, r3, #7
 800c002:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	4a15      	ldr	r2, [pc, #84]	; (800c05c <prvHeapInit+0xb4>)
 800c008:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c00a:	4b14      	ldr	r3, [pc, #80]	; (800c05c <prvHeapInit+0xb4>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	2200      	movs	r2, #0
 800c010:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c012:	4b12      	ldr	r3, [pc, #72]	; (800c05c <prvHeapInit+0xb4>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	2200      	movs	r2, #0
 800c018:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	68fa      	ldr	r2, [r7, #12]
 800c022:	1ad2      	subs	r2, r2, r3
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c028:	4b0c      	ldr	r3, [pc, #48]	; (800c05c <prvHeapInit+0xb4>)
 800c02a:	681a      	ldr	r2, [r3, #0]
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	685b      	ldr	r3, [r3, #4]
 800c034:	4a0a      	ldr	r2, [pc, #40]	; (800c060 <prvHeapInit+0xb8>)
 800c036:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	685b      	ldr	r3, [r3, #4]
 800c03c:	4a09      	ldr	r2, [pc, #36]	; (800c064 <prvHeapInit+0xbc>)
 800c03e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c040:	4b09      	ldr	r3, [pc, #36]	; (800c068 <prvHeapInit+0xc0>)
 800c042:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c046:	601a      	str	r2, [r3, #0]
}
 800c048:	bf00      	nop
 800c04a:	3714      	adds	r7, #20
 800c04c:	46bd      	mov	sp, r7
 800c04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c052:	4770      	bx	lr
 800c054:	20001eb4 	.word	0x20001eb4
 800c058:	200045c4 	.word	0x200045c4
 800c05c:	200045cc 	.word	0x200045cc
 800c060:	200045d4 	.word	0x200045d4
 800c064:	200045d0 	.word	0x200045d0
 800c068:	200045e0 	.word	0x200045e0

0800c06c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c06c:	b480      	push	{r7}
 800c06e:	b085      	sub	sp, #20
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c074:	4b28      	ldr	r3, [pc, #160]	; (800c118 <prvInsertBlockIntoFreeList+0xac>)
 800c076:	60fb      	str	r3, [r7, #12]
 800c078:	e002      	b.n	800c080 <prvInsertBlockIntoFreeList+0x14>
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	60fb      	str	r3, [r7, #12]
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	687a      	ldr	r2, [r7, #4]
 800c086:	429a      	cmp	r2, r3
 800c088:	d8f7      	bhi.n	800c07a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	685b      	ldr	r3, [r3, #4]
 800c092:	68ba      	ldr	r2, [r7, #8]
 800c094:	4413      	add	r3, r2
 800c096:	687a      	ldr	r2, [r7, #4]
 800c098:	429a      	cmp	r2, r3
 800c09a:	d108      	bne.n	800c0ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	685a      	ldr	r2, [r3, #4]
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	685b      	ldr	r3, [r3, #4]
 800c0a4:	441a      	add	r2, r3
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	685b      	ldr	r3, [r3, #4]
 800c0b6:	68ba      	ldr	r2, [r7, #8]
 800c0b8:	441a      	add	r2, r3
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	429a      	cmp	r2, r3
 800c0c0:	d118      	bne.n	800c0f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	681a      	ldr	r2, [r3, #0]
 800c0c6:	4b15      	ldr	r3, [pc, #84]	; (800c11c <prvInsertBlockIntoFreeList+0xb0>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	429a      	cmp	r2, r3
 800c0cc:	d00d      	beq.n	800c0ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	685a      	ldr	r2, [r3, #4]
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	685b      	ldr	r3, [r3, #4]
 800c0d8:	441a      	add	r2, r3
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	681a      	ldr	r2, [r3, #0]
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	601a      	str	r2, [r3, #0]
 800c0e8:	e008      	b.n	800c0fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c0ea:	4b0c      	ldr	r3, [pc, #48]	; (800c11c <prvInsertBlockIntoFreeList+0xb0>)
 800c0ec:	681a      	ldr	r2, [r3, #0]
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	601a      	str	r2, [r3, #0]
 800c0f2:	e003      	b.n	800c0fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	681a      	ldr	r2, [r3, #0]
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c0fc:	68fa      	ldr	r2, [r7, #12]
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	429a      	cmp	r2, r3
 800c102:	d002      	beq.n	800c10a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	687a      	ldr	r2, [r7, #4]
 800c108:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c10a:	bf00      	nop
 800c10c:	3714      	adds	r7, #20
 800c10e:	46bd      	mov	sp, r7
 800c110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c114:	4770      	bx	lr
 800c116:	bf00      	nop
 800c118:	200045c4 	.word	0x200045c4
 800c11c:	200045cc 	.word	0x200045cc

0800c120 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c120:	b480      	push	{r7}
 800c122:	b083      	sub	sp, #12
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f103 0208 	add.w	r2, r3, #8
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	f04f 32ff 	mov.w	r2, #4294967295
 800c138:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	f103 0208 	add.w	r2, r3, #8
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	f103 0208 	add.w	r2, r3, #8
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	2200      	movs	r2, #0
 800c152:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c154:	bf00      	nop
 800c156:	370c      	adds	r7, #12
 800c158:	46bd      	mov	sp, r7
 800c15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15e:	4770      	bx	lr

0800c160 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c160:	b480      	push	{r7}
 800c162:	b083      	sub	sp, #12
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2200      	movs	r2, #0
 800c16c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c16e:	bf00      	nop
 800c170:	370c      	adds	r7, #12
 800c172:	46bd      	mov	sp, r7
 800c174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c178:	4770      	bx	lr

0800c17a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c17a:	b480      	push	{r7}
 800c17c:	b085      	sub	sp, #20
 800c17e:	af00      	add	r7, sp, #0
 800c180:	6078      	str	r0, [r7, #4]
 800c182:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	685b      	ldr	r3, [r3, #4]
 800c188:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	68fa      	ldr	r2, [r7, #12]
 800c18e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	689a      	ldr	r2, [r3, #8]
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	689b      	ldr	r3, [r3, #8]
 800c19c:	683a      	ldr	r2, [r7, #0]
 800c19e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	683a      	ldr	r2, [r7, #0]
 800c1a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	687a      	ldr	r2, [r7, #4]
 800c1aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	1c5a      	adds	r2, r3, #1
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	601a      	str	r2, [r3, #0]
}
 800c1b6:	bf00      	nop
 800c1b8:	3714      	adds	r7, #20
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c0:	4770      	bx	lr

0800c1c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c1c2:	b480      	push	{r7}
 800c1c4:	b085      	sub	sp, #20
 800c1c6:	af00      	add	r7, sp, #0
 800c1c8:	6078      	str	r0, [r7, #4]
 800c1ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c1d2:	68bb      	ldr	r3, [r7, #8]
 800c1d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1d8:	d103      	bne.n	800c1e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	691b      	ldr	r3, [r3, #16]
 800c1de:	60fb      	str	r3, [r7, #12]
 800c1e0:	e00c      	b.n	800c1fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	3308      	adds	r3, #8
 800c1e6:	60fb      	str	r3, [r7, #12]
 800c1e8:	e002      	b.n	800c1f0 <vListInsert+0x2e>
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	685b      	ldr	r3, [r3, #4]
 800c1ee:	60fb      	str	r3, [r7, #12]
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	685b      	ldr	r3, [r3, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	68ba      	ldr	r2, [r7, #8]
 800c1f8:	429a      	cmp	r2, r3
 800c1fa:	d2f6      	bcs.n	800c1ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	685a      	ldr	r2, [r3, #4]
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	685b      	ldr	r3, [r3, #4]
 800c208:	683a      	ldr	r2, [r7, #0]
 800c20a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	68fa      	ldr	r2, [r7, #12]
 800c210:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	683a      	ldr	r2, [r7, #0]
 800c216:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	687a      	ldr	r2, [r7, #4]
 800c21c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	1c5a      	adds	r2, r3, #1
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	601a      	str	r2, [r3, #0]
}
 800c228:	bf00      	nop
 800c22a:	3714      	adds	r7, #20
 800c22c:	46bd      	mov	sp, r7
 800c22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c232:	4770      	bx	lr

0800c234 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c234:	b480      	push	{r7}
 800c236:	b085      	sub	sp, #20
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	691b      	ldr	r3, [r3, #16]
 800c240:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	685b      	ldr	r3, [r3, #4]
 800c246:	687a      	ldr	r2, [r7, #4]
 800c248:	6892      	ldr	r2, [r2, #8]
 800c24a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	689b      	ldr	r3, [r3, #8]
 800c250:	687a      	ldr	r2, [r7, #4]
 800c252:	6852      	ldr	r2, [r2, #4]
 800c254:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	685b      	ldr	r3, [r3, #4]
 800c25a:	687a      	ldr	r2, [r7, #4]
 800c25c:	429a      	cmp	r2, r3
 800c25e:	d103      	bne.n	800c268 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	689a      	ldr	r2, [r3, #8]
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2200      	movs	r2, #0
 800c26c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	1e5a      	subs	r2, r3, #1
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	681b      	ldr	r3, [r3, #0]
}
 800c27c:	4618      	mov	r0, r3
 800c27e:	3714      	adds	r7, #20
 800c280:	46bd      	mov	sp, r7
 800c282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c286:	4770      	bx	lr

0800c288 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c288:	b480      	push	{r7}
 800c28a:	b085      	sub	sp, #20
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	60f8      	str	r0, [r7, #12]
 800c290:	60b9      	str	r1, [r7, #8]
 800c292:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	3b04      	subs	r3, #4
 800c298:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c2a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	3b04      	subs	r3, #4
 800c2a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	f023 0201 	bic.w	r2, r3, #1
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	3b04      	subs	r3, #4
 800c2b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c2b8:	4a0c      	ldr	r2, [pc, #48]	; (800c2ec <pxPortInitialiseStack+0x64>)
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	3b14      	subs	r3, #20
 800c2c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c2c4:	687a      	ldr	r2, [r7, #4]
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	3b04      	subs	r3, #4
 800c2ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	f06f 0202 	mvn.w	r2, #2
 800c2d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	3b20      	subs	r3, #32
 800c2dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c2de:	68fb      	ldr	r3, [r7, #12]
}
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	3714      	adds	r7, #20
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ea:	4770      	bx	lr
 800c2ec:	0800c2f1 	.word	0x0800c2f1

0800c2f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c2f0:	b480      	push	{r7}
 800c2f2:	b085      	sub	sp, #20
 800c2f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c2fa:	4b12      	ldr	r3, [pc, #72]	; (800c344 <prvTaskExitError+0x54>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c302:	d00a      	beq.n	800c31a <prvTaskExitError+0x2a>
	__asm volatile
 800c304:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c308:	f383 8811 	msr	BASEPRI, r3
 800c30c:	f3bf 8f6f 	isb	sy
 800c310:	f3bf 8f4f 	dsb	sy
 800c314:	60fb      	str	r3, [r7, #12]
}
 800c316:	bf00      	nop
 800c318:	e7fe      	b.n	800c318 <prvTaskExitError+0x28>
	__asm volatile
 800c31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c31e:	f383 8811 	msr	BASEPRI, r3
 800c322:	f3bf 8f6f 	isb	sy
 800c326:	f3bf 8f4f 	dsb	sy
 800c32a:	60bb      	str	r3, [r7, #8]
}
 800c32c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c32e:	bf00      	nop
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d0fc      	beq.n	800c330 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c336:	bf00      	nop
 800c338:	bf00      	nop
 800c33a:	3714      	adds	r7, #20
 800c33c:	46bd      	mov	sp, r7
 800c33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c342:	4770      	bx	lr
 800c344:	200002e4 	.word	0x200002e4
	...

0800c350 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c350:	4b07      	ldr	r3, [pc, #28]	; (800c370 <pxCurrentTCBConst2>)
 800c352:	6819      	ldr	r1, [r3, #0]
 800c354:	6808      	ldr	r0, [r1, #0]
 800c356:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c35a:	f380 8809 	msr	PSP, r0
 800c35e:	f3bf 8f6f 	isb	sy
 800c362:	f04f 0000 	mov.w	r0, #0
 800c366:	f380 8811 	msr	BASEPRI, r0
 800c36a:	4770      	bx	lr
 800c36c:	f3af 8000 	nop.w

0800c370 <pxCurrentTCBConst2>:
 800c370:	200046f8 	.word	0x200046f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c374:	bf00      	nop
 800c376:	bf00      	nop

0800c378 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c378:	4808      	ldr	r0, [pc, #32]	; (800c39c <prvPortStartFirstTask+0x24>)
 800c37a:	6800      	ldr	r0, [r0, #0]
 800c37c:	6800      	ldr	r0, [r0, #0]
 800c37e:	f380 8808 	msr	MSP, r0
 800c382:	f04f 0000 	mov.w	r0, #0
 800c386:	f380 8814 	msr	CONTROL, r0
 800c38a:	b662      	cpsie	i
 800c38c:	b661      	cpsie	f
 800c38e:	f3bf 8f4f 	dsb	sy
 800c392:	f3bf 8f6f 	isb	sy
 800c396:	df00      	svc	0
 800c398:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c39a:	bf00      	nop
 800c39c:	e000ed08 	.word	0xe000ed08

0800c3a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b086      	sub	sp, #24
 800c3a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c3a6:	4b46      	ldr	r3, [pc, #280]	; (800c4c0 <xPortStartScheduler+0x120>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	4a46      	ldr	r2, [pc, #280]	; (800c4c4 <xPortStartScheduler+0x124>)
 800c3ac:	4293      	cmp	r3, r2
 800c3ae:	d10a      	bne.n	800c3c6 <xPortStartScheduler+0x26>
	__asm volatile
 800c3b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3b4:	f383 8811 	msr	BASEPRI, r3
 800c3b8:	f3bf 8f6f 	isb	sy
 800c3bc:	f3bf 8f4f 	dsb	sy
 800c3c0:	613b      	str	r3, [r7, #16]
}
 800c3c2:	bf00      	nop
 800c3c4:	e7fe      	b.n	800c3c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c3c6:	4b3e      	ldr	r3, [pc, #248]	; (800c4c0 <xPortStartScheduler+0x120>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	4a3f      	ldr	r2, [pc, #252]	; (800c4c8 <xPortStartScheduler+0x128>)
 800c3cc:	4293      	cmp	r3, r2
 800c3ce:	d10a      	bne.n	800c3e6 <xPortStartScheduler+0x46>
	__asm volatile
 800c3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3d4:	f383 8811 	msr	BASEPRI, r3
 800c3d8:	f3bf 8f6f 	isb	sy
 800c3dc:	f3bf 8f4f 	dsb	sy
 800c3e0:	60fb      	str	r3, [r7, #12]
}
 800c3e2:	bf00      	nop
 800c3e4:	e7fe      	b.n	800c3e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c3e6:	4b39      	ldr	r3, [pc, #228]	; (800c4cc <xPortStartScheduler+0x12c>)
 800c3e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c3ea:	697b      	ldr	r3, [r7, #20]
 800c3ec:	781b      	ldrb	r3, [r3, #0]
 800c3ee:	b2db      	uxtb	r3, r3
 800c3f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c3f2:	697b      	ldr	r3, [r7, #20]
 800c3f4:	22ff      	movs	r2, #255	; 0xff
 800c3f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c3f8:	697b      	ldr	r3, [r7, #20]
 800c3fa:	781b      	ldrb	r3, [r3, #0]
 800c3fc:	b2db      	uxtb	r3, r3
 800c3fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c400:	78fb      	ldrb	r3, [r7, #3]
 800c402:	b2db      	uxtb	r3, r3
 800c404:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c408:	b2da      	uxtb	r2, r3
 800c40a:	4b31      	ldr	r3, [pc, #196]	; (800c4d0 <xPortStartScheduler+0x130>)
 800c40c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c40e:	4b31      	ldr	r3, [pc, #196]	; (800c4d4 <xPortStartScheduler+0x134>)
 800c410:	2207      	movs	r2, #7
 800c412:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c414:	e009      	b.n	800c42a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c416:	4b2f      	ldr	r3, [pc, #188]	; (800c4d4 <xPortStartScheduler+0x134>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	3b01      	subs	r3, #1
 800c41c:	4a2d      	ldr	r2, [pc, #180]	; (800c4d4 <xPortStartScheduler+0x134>)
 800c41e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c420:	78fb      	ldrb	r3, [r7, #3]
 800c422:	b2db      	uxtb	r3, r3
 800c424:	005b      	lsls	r3, r3, #1
 800c426:	b2db      	uxtb	r3, r3
 800c428:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c42a:	78fb      	ldrb	r3, [r7, #3]
 800c42c:	b2db      	uxtb	r3, r3
 800c42e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c432:	2b80      	cmp	r3, #128	; 0x80
 800c434:	d0ef      	beq.n	800c416 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c436:	4b27      	ldr	r3, [pc, #156]	; (800c4d4 <xPortStartScheduler+0x134>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	f1c3 0307 	rsb	r3, r3, #7
 800c43e:	2b04      	cmp	r3, #4
 800c440:	d00a      	beq.n	800c458 <xPortStartScheduler+0xb8>
	__asm volatile
 800c442:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c446:	f383 8811 	msr	BASEPRI, r3
 800c44a:	f3bf 8f6f 	isb	sy
 800c44e:	f3bf 8f4f 	dsb	sy
 800c452:	60bb      	str	r3, [r7, #8]
}
 800c454:	bf00      	nop
 800c456:	e7fe      	b.n	800c456 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c458:	4b1e      	ldr	r3, [pc, #120]	; (800c4d4 <xPortStartScheduler+0x134>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	021b      	lsls	r3, r3, #8
 800c45e:	4a1d      	ldr	r2, [pc, #116]	; (800c4d4 <xPortStartScheduler+0x134>)
 800c460:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c462:	4b1c      	ldr	r3, [pc, #112]	; (800c4d4 <xPortStartScheduler+0x134>)
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c46a:	4a1a      	ldr	r2, [pc, #104]	; (800c4d4 <xPortStartScheduler+0x134>)
 800c46c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	b2da      	uxtb	r2, r3
 800c472:	697b      	ldr	r3, [r7, #20]
 800c474:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c476:	4b18      	ldr	r3, [pc, #96]	; (800c4d8 <xPortStartScheduler+0x138>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	4a17      	ldr	r2, [pc, #92]	; (800c4d8 <xPortStartScheduler+0x138>)
 800c47c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c480:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c482:	4b15      	ldr	r3, [pc, #84]	; (800c4d8 <xPortStartScheduler+0x138>)
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	4a14      	ldr	r2, [pc, #80]	; (800c4d8 <xPortStartScheduler+0x138>)
 800c488:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c48c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c48e:	f000 f9a9 	bl	800c7e4 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c492:	4b12      	ldr	r3, [pc, #72]	; (800c4dc <xPortStartScheduler+0x13c>)
 800c494:	2200      	movs	r2, #0
 800c496:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c498:	f000 f9e0 	bl	800c85c <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c49c:	4b10      	ldr	r3, [pc, #64]	; (800c4e0 <xPortStartScheduler+0x140>)
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	4a0f      	ldr	r2, [pc, #60]	; (800c4e0 <xPortStartScheduler+0x140>)
 800c4a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c4a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c4a8:	f7ff ff66 	bl	800c378 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c4ac:	f001 fd04 	bl	800deb8 <vTaskSwitchContext>
	prvTaskExitError();
 800c4b0:	f7ff ff1e 	bl	800c2f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c4b4:	2300      	movs	r3, #0
}
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	3718      	adds	r7, #24
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bd80      	pop	{r7, pc}
 800c4be:	bf00      	nop
 800c4c0:	e000ed00 	.word	0xe000ed00
 800c4c4:	410fc271 	.word	0x410fc271
 800c4c8:	410fc270 	.word	0x410fc270
 800c4cc:	e000e400 	.word	0xe000e400
 800c4d0:	200045f0 	.word	0x200045f0
 800c4d4:	200045f4 	.word	0x200045f4
 800c4d8:	e000ed20 	.word	0xe000ed20
 800c4dc:	200002e4 	.word	0x200002e4
 800c4e0:	e000ef34 	.word	0xe000ef34

0800c4e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c4e4:	b480      	push	{r7}
 800c4e6:	b083      	sub	sp, #12
 800c4e8:	af00      	add	r7, sp, #0
	__asm volatile
 800c4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ee:	f383 8811 	msr	BASEPRI, r3
 800c4f2:	f3bf 8f6f 	isb	sy
 800c4f6:	f3bf 8f4f 	dsb	sy
 800c4fa:	607b      	str	r3, [r7, #4]
}
 800c4fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c4fe:	4b0f      	ldr	r3, [pc, #60]	; (800c53c <vPortEnterCritical+0x58>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	3301      	adds	r3, #1
 800c504:	4a0d      	ldr	r2, [pc, #52]	; (800c53c <vPortEnterCritical+0x58>)
 800c506:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c508:	4b0c      	ldr	r3, [pc, #48]	; (800c53c <vPortEnterCritical+0x58>)
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	2b01      	cmp	r3, #1
 800c50e:	d10f      	bne.n	800c530 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c510:	4b0b      	ldr	r3, [pc, #44]	; (800c540 <vPortEnterCritical+0x5c>)
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	b2db      	uxtb	r3, r3
 800c516:	2b00      	cmp	r3, #0
 800c518:	d00a      	beq.n	800c530 <vPortEnterCritical+0x4c>
	__asm volatile
 800c51a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c51e:	f383 8811 	msr	BASEPRI, r3
 800c522:	f3bf 8f6f 	isb	sy
 800c526:	f3bf 8f4f 	dsb	sy
 800c52a:	603b      	str	r3, [r7, #0]
}
 800c52c:	bf00      	nop
 800c52e:	e7fe      	b.n	800c52e <vPortEnterCritical+0x4a>
	}
}
 800c530:	bf00      	nop
 800c532:	370c      	adds	r7, #12
 800c534:	46bd      	mov	sp, r7
 800c536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53a:	4770      	bx	lr
 800c53c:	200002e4 	.word	0x200002e4
 800c540:	e000ed04 	.word	0xe000ed04

0800c544 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c544:	b480      	push	{r7}
 800c546:	b083      	sub	sp, #12
 800c548:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c54a:	4b12      	ldr	r3, [pc, #72]	; (800c594 <vPortExitCritical+0x50>)
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d10a      	bne.n	800c568 <vPortExitCritical+0x24>
	__asm volatile
 800c552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c556:	f383 8811 	msr	BASEPRI, r3
 800c55a:	f3bf 8f6f 	isb	sy
 800c55e:	f3bf 8f4f 	dsb	sy
 800c562:	607b      	str	r3, [r7, #4]
}
 800c564:	bf00      	nop
 800c566:	e7fe      	b.n	800c566 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c568:	4b0a      	ldr	r3, [pc, #40]	; (800c594 <vPortExitCritical+0x50>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	3b01      	subs	r3, #1
 800c56e:	4a09      	ldr	r2, [pc, #36]	; (800c594 <vPortExitCritical+0x50>)
 800c570:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c572:	4b08      	ldr	r3, [pc, #32]	; (800c594 <vPortExitCritical+0x50>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d105      	bne.n	800c586 <vPortExitCritical+0x42>
 800c57a:	2300      	movs	r3, #0
 800c57c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c57e:	683b      	ldr	r3, [r7, #0]
 800c580:	f383 8811 	msr	BASEPRI, r3
}
 800c584:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c586:	bf00      	nop
 800c588:	370c      	adds	r7, #12
 800c58a:	46bd      	mov	sp, r7
 800c58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c590:	4770      	bx	lr
 800c592:	bf00      	nop
 800c594:	200002e4 	.word	0x200002e4
	...

0800c5a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c5a0:	f3ef 8009 	mrs	r0, PSP
 800c5a4:	f3bf 8f6f 	isb	sy
 800c5a8:	4b15      	ldr	r3, [pc, #84]	; (800c600 <pxCurrentTCBConst>)
 800c5aa:	681a      	ldr	r2, [r3, #0]
 800c5ac:	f01e 0f10 	tst.w	lr, #16
 800c5b0:	bf08      	it	eq
 800c5b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c5b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5ba:	6010      	str	r0, [r2, #0]
 800c5bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c5c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c5c4:	f380 8811 	msr	BASEPRI, r0
 800c5c8:	f3bf 8f4f 	dsb	sy
 800c5cc:	f3bf 8f6f 	isb	sy
 800c5d0:	f001 fc72 	bl	800deb8 <vTaskSwitchContext>
 800c5d4:	f04f 0000 	mov.w	r0, #0
 800c5d8:	f380 8811 	msr	BASEPRI, r0
 800c5dc:	bc09      	pop	{r0, r3}
 800c5de:	6819      	ldr	r1, [r3, #0]
 800c5e0:	6808      	ldr	r0, [r1, #0]
 800c5e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5e6:	f01e 0f10 	tst.w	lr, #16
 800c5ea:	bf08      	it	eq
 800c5ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c5f0:	f380 8809 	msr	PSP, r0
 800c5f4:	f3bf 8f6f 	isb	sy
 800c5f8:	4770      	bx	lr
 800c5fa:	bf00      	nop
 800c5fc:	f3af 8000 	nop.w

0800c600 <pxCurrentTCBConst>:
 800c600:	200046f8 	.word	0x200046f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c604:	bf00      	nop
 800c606:	bf00      	nop

0800c608 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b082      	sub	sp, #8
 800c60c:	af00      	add	r7, sp, #0
	__asm volatile
 800c60e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c612:	f383 8811 	msr	BASEPRI, r3
 800c616:	f3bf 8f6f 	isb	sy
 800c61a:	f3bf 8f4f 	dsb	sy
 800c61e:	607b      	str	r3, [r7, #4]
}
 800c620:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c622:	f001 fb87 	bl	800dd34 <xTaskIncrementTick>
 800c626:	4603      	mov	r3, r0
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d003      	beq.n	800c634 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c62c:	4b06      	ldr	r3, [pc, #24]	; (800c648 <xPortSysTickHandler+0x40>)
 800c62e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c632:	601a      	str	r2, [r3, #0]
 800c634:	2300      	movs	r3, #0
 800c636:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	f383 8811 	msr	BASEPRI, r3
}
 800c63e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c640:	bf00      	nop
 800c642:	3708      	adds	r7, #8
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}
 800c648:	e000ed04 	.word	0xe000ed04

0800c64c <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b088      	sub	sp, #32
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 800c654:	4b5d      	ldr	r3, [pc, #372]	; (800c7cc <vPortSuppressTicksAndSleep+0x180>)
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	687a      	ldr	r2, [r7, #4]
 800c65a:	429a      	cmp	r2, r3
 800c65c:	d902      	bls.n	800c664 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800c65e:	4b5b      	ldr	r3, [pc, #364]	; (800c7cc <vPortSuppressTicksAndSleep+0x180>)
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 800c664:	4b5a      	ldr	r3, [pc, #360]	; (800c7d0 <vPortSuppressTicksAndSleep+0x184>)
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	4a59      	ldr	r2, [pc, #356]	; (800c7d0 <vPortSuppressTicksAndSleep+0x184>)
 800c66a:	f023 0301 	bic.w	r3, r3, #1
 800c66e:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 800c670:	4b58      	ldr	r3, [pc, #352]	; (800c7d4 <vPortSuppressTicksAndSleep+0x188>)
 800c672:	681a      	ldr	r2, [r3, #0]
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	3b01      	subs	r3, #1
 800c678:	4957      	ldr	r1, [pc, #348]	; (800c7d8 <vPortSuppressTicksAndSleep+0x18c>)
 800c67a:	6809      	ldr	r1, [r1, #0]
 800c67c:	fb01 f303 	mul.w	r3, r1, r3
 800c680:	4413      	add	r3, r2
 800c682:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 800c684:	4b55      	ldr	r3, [pc, #340]	; (800c7dc <vPortSuppressTicksAndSleep+0x190>)
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	69fa      	ldr	r2, [r7, #28]
 800c68a:	429a      	cmp	r2, r3
 800c68c:	d904      	bls.n	800c698 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 800c68e:	4b53      	ldr	r3, [pc, #332]	; (800c7dc <vPortSuppressTicksAndSleep+0x190>)
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	69fa      	ldr	r2, [r7, #28]
 800c694:	1ad3      	subs	r3, r2, r3
 800c696:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 800c698:	b672      	cpsid	i
		__asm volatile( "dsb" );
 800c69a:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 800c69e:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800c6a2:	f001 fdf9 	bl	800e298 <eTaskConfirmSleepModeStatus>
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d110      	bne.n	800c6ce <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800c6ac:	4b49      	ldr	r3, [pc, #292]	; (800c7d4 <vPortSuppressTicksAndSleep+0x188>)
 800c6ae:	4a4c      	ldr	r2, [pc, #304]	; (800c7e0 <vPortSuppressTicksAndSleep+0x194>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800c6b4:	4b46      	ldr	r3, [pc, #280]	; (800c7d0 <vPortSuppressTicksAndSleep+0x184>)
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	4a45      	ldr	r2, [pc, #276]	; (800c7d0 <vPortSuppressTicksAndSleep+0x184>)
 800c6ba:	f043 0301 	orr.w	r3, r3, #1
 800c6be:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800c6c0:	4b45      	ldr	r3, [pc, #276]	; (800c7d8 <vPortSuppressTicksAndSleep+0x18c>)
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	4a46      	ldr	r2, [pc, #280]	; (800c7e0 <vPortSuppressTicksAndSleep+0x194>)
 800c6c6:	3b01      	subs	r3, #1
 800c6c8:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 800c6ca:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrupts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 800c6cc:	e079      	b.n	800c7c2 <vPortSuppressTicksAndSleep+0x176>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800c6ce:	4a44      	ldr	r2, [pc, #272]	; (800c7e0 <vPortSuppressTicksAndSleep+0x194>)
 800c6d0:	69fb      	ldr	r3, [r7, #28]
 800c6d2:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c6d4:	4b3f      	ldr	r3, [pc, #252]	; (800c7d4 <vPortSuppressTicksAndSleep+0x188>)
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800c6da:	4b3d      	ldr	r3, [pc, #244]	; (800c7d0 <vPortSuppressTicksAndSleep+0x184>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	4a3c      	ldr	r2, [pc, #240]	; (800c7d0 <vPortSuppressTicksAndSleep+0x184>)
 800c6e0:	f043 0301 	orr.w	r3, r3, #1
 800c6e4:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	613b      	str	r3, [r7, #16]
			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	613b      	str	r3, [r7, #16]
 800c6ee:	6938      	ldr	r0, [r7, #16]
 800c6f0:	f7f6 f823 	bl	800273a <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 800c6f4:	693b      	ldr	r3, [r7, #16]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d004      	beq.n	800c704 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 800c6fa:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 800c6fe:	bf30      	wfi
				__asm volatile( "isb" );
 800c700:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 800c704:	6878      	ldr	r0, [r7, #4]
 800c706:	f7f6 f822 	bl	800274e <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 800c70a:	b662      	cpsie	i
			__asm volatile( "dsb" );
 800c70c:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800c710:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 800c714:	b672      	cpsid	i
			__asm volatile( "dsb" );
 800c716:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800c71a:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 800c71e:	4b2c      	ldr	r3, [pc, #176]	; (800c7d0 <vPortSuppressTicksAndSleep+0x184>)
 800c720:	2206      	movs	r2, #6
 800c722:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 800c724:	4b2a      	ldr	r3, [pc, #168]	; (800c7d0 <vPortSuppressTicksAndSleep+0x184>)
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d01d      	beq.n	800c76c <vPortSuppressTicksAndSleep+0x120>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 800c730:	4b29      	ldr	r3, [pc, #164]	; (800c7d8 <vPortSuppressTicksAndSleep+0x18c>)
 800c732:	681a      	ldr	r2, [r3, #0]
 800c734:	4b27      	ldr	r3, [pc, #156]	; (800c7d4 <vPortSuppressTicksAndSleep+0x188>)
 800c736:	6819      	ldr	r1, [r3, #0]
 800c738:	69fb      	ldr	r3, [r7, #28]
 800c73a:	1acb      	subs	r3, r1, r3
 800c73c:	4413      	add	r3, r2
 800c73e:	3b01      	subs	r3, #1
 800c740:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 800c742:	4b26      	ldr	r3, [pc, #152]	; (800c7dc <vPortSuppressTicksAndSleep+0x190>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	697a      	ldr	r2, [r7, #20]
 800c748:	429a      	cmp	r2, r3
 800c74a:	d304      	bcc.n	800c756 <vPortSuppressTicksAndSleep+0x10a>
 800c74c:	4b22      	ldr	r3, [pc, #136]	; (800c7d8 <vPortSuppressTicksAndSleep+0x18c>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	697a      	ldr	r2, [r7, #20]
 800c752:	429a      	cmp	r2, r3
 800c754:	d903      	bls.n	800c75e <vPortSuppressTicksAndSleep+0x112>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 800c756:	4b20      	ldr	r3, [pc, #128]	; (800c7d8 <vPortSuppressTicksAndSleep+0x18c>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	3b01      	subs	r3, #1
 800c75c:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 800c75e:	4a20      	ldr	r2, [pc, #128]	; (800c7e0 <vPortSuppressTicksAndSleep+0x194>)
 800c760:	697b      	ldr	r3, [r7, #20]
 800c762:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	3b01      	subs	r3, #1
 800c768:	61bb      	str	r3, [r7, #24]
 800c76a:	e018      	b.n	800c79e <vPortSuppressTicksAndSleep+0x152>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800c76c:	4b1a      	ldr	r3, [pc, #104]	; (800c7d8 <vPortSuppressTicksAndSleep+0x18c>)
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	687a      	ldr	r2, [r7, #4]
 800c772:	fb03 f202 	mul.w	r2, r3, r2
 800c776:	4b17      	ldr	r3, [pc, #92]	; (800c7d4 <vPortSuppressTicksAndSleep+0x188>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	1ad3      	subs	r3, r2, r3
 800c77c:	60fb      	str	r3, [r7, #12]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 800c77e:	4b16      	ldr	r3, [pc, #88]	; (800c7d8 <vPortSuppressTicksAndSleep+0x18c>)
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	68fa      	ldr	r2, [r7, #12]
 800c784:	fbb2 f3f3 	udiv	r3, r2, r3
 800c788:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 800c78a:	69bb      	ldr	r3, [r7, #24]
 800c78c:	3301      	adds	r3, #1
 800c78e:	4a12      	ldr	r2, [pc, #72]	; (800c7d8 <vPortSuppressTicksAndSleep+0x18c>)
 800c790:	6812      	ldr	r2, [r2, #0]
 800c792:	fb03 f202 	mul.w	r2, r3, r2
 800c796:	4912      	ldr	r1, [pc, #72]	; (800c7e0 <vPortSuppressTicksAndSleep+0x194>)
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	1ad3      	subs	r3, r2, r3
 800c79c:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c79e:	4b0d      	ldr	r3, [pc, #52]	; (800c7d4 <vPortSuppressTicksAndSleep+0x188>)
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800c7a4:	4b0a      	ldr	r3, [pc, #40]	; (800c7d0 <vPortSuppressTicksAndSleep+0x184>)
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	4a09      	ldr	r2, [pc, #36]	; (800c7d0 <vPortSuppressTicksAndSleep+0x184>)
 800c7aa:	f043 0301 	orr.w	r3, r3, #1
 800c7ae:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 800c7b0:	69b8      	ldr	r0, [r7, #24]
 800c7b2:	f001 fa97 	bl	800dce4 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800c7b6:	4b08      	ldr	r3, [pc, #32]	; (800c7d8 <vPortSuppressTicksAndSleep+0x18c>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	4a09      	ldr	r2, [pc, #36]	; (800c7e0 <vPortSuppressTicksAndSleep+0x194>)
 800c7bc:	3b01      	subs	r3, #1
 800c7be:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 800c7c0:	b662      	cpsie	i
	}
 800c7c2:	bf00      	nop
 800c7c4:	3720      	adds	r7, #32
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bd80      	pop	{r7, pc}
 800c7ca:	bf00      	nop
 800c7cc:	200045e8 	.word	0x200045e8
 800c7d0:	e000e010 	.word	0xe000e010
 800c7d4:	e000e018 	.word	0xe000e018
 800c7d8:	200045e4 	.word	0x200045e4
 800c7dc:	200045ec 	.word	0x200045ec
 800c7e0:	e000e014 	.word	0xe000e014

0800c7e4 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c7e4:	b480      	push	{r7}
 800c7e6:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800c7e8:	4b14      	ldr	r3, [pc, #80]	; (800c83c <vPortSetupTimerInterrupt+0x58>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	4a14      	ldr	r2, [pc, #80]	; (800c840 <vPortSetupTimerInterrupt+0x5c>)
 800c7ee:	fba2 2303 	umull	r2, r3, r2, r3
 800c7f2:	099b      	lsrs	r3, r3, #6
 800c7f4:	4a13      	ldr	r2, [pc, #76]	; (800c844 <vPortSetupTimerInterrupt+0x60>)
 800c7f6:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 800c7f8:	4b12      	ldr	r3, [pc, #72]	; (800c844 <vPortSetupTimerInterrupt+0x60>)
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800c800:	fbb2 f3f3 	udiv	r3, r2, r3
 800c804:	4a10      	ldr	r2, [pc, #64]	; (800c848 <vPortSetupTimerInterrupt+0x64>)
 800c806:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 800c808:	4b10      	ldr	r3, [pc, #64]	; (800c84c <vPortSetupTimerInterrupt+0x68>)
 800c80a:	222d      	movs	r2, #45	; 0x2d
 800c80c:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c80e:	4b10      	ldr	r3, [pc, #64]	; (800c850 <vPortSetupTimerInterrupt+0x6c>)
 800c810:	2200      	movs	r2, #0
 800c812:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c814:	4b0f      	ldr	r3, [pc, #60]	; (800c854 <vPortSetupTimerInterrupt+0x70>)
 800c816:	2200      	movs	r2, #0
 800c818:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c81a:	4b08      	ldr	r3, [pc, #32]	; (800c83c <vPortSetupTimerInterrupt+0x58>)
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	4a08      	ldr	r2, [pc, #32]	; (800c840 <vPortSetupTimerInterrupt+0x5c>)
 800c820:	fba2 2303 	umull	r2, r3, r2, r3
 800c824:	099b      	lsrs	r3, r3, #6
 800c826:	4a0c      	ldr	r2, [pc, #48]	; (800c858 <vPortSetupTimerInterrupt+0x74>)
 800c828:	3b01      	subs	r3, #1
 800c82a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c82c:	4b08      	ldr	r3, [pc, #32]	; (800c850 <vPortSetupTimerInterrupt+0x6c>)
 800c82e:	2207      	movs	r2, #7
 800c830:	601a      	str	r2, [r3, #0]
}
 800c832:	bf00      	nop
 800c834:	46bd      	mov	sp, r7
 800c836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83a:	4770      	bx	lr
 800c83c:	200002d8 	.word	0x200002d8
 800c840:	10624dd3 	.word	0x10624dd3
 800c844:	200045e4 	.word	0x200045e4
 800c848:	200045e8 	.word	0x200045e8
 800c84c:	200045ec 	.word	0x200045ec
 800c850:	e000e010 	.word	0xe000e010
 800c854:	e000e018 	.word	0xe000e018
 800c858:	e000e014 	.word	0xe000e014

0800c85c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c85c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c86c <vPortEnableVFP+0x10>
 800c860:	6801      	ldr	r1, [r0, #0]
 800c862:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c866:	6001      	str	r1, [r0, #0]
 800c868:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c86a:	bf00      	nop
 800c86c:	e000ed88 	.word	0xe000ed88

0800c870 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c870:	b480      	push	{r7}
 800c872:	b085      	sub	sp, #20
 800c874:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c876:	f3ef 8305 	mrs	r3, IPSR
 800c87a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	2b0f      	cmp	r3, #15
 800c880:	d914      	bls.n	800c8ac <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c882:	4a17      	ldr	r2, [pc, #92]	; (800c8e0 <vPortValidateInterruptPriority+0x70>)
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	4413      	add	r3, r2
 800c888:	781b      	ldrb	r3, [r3, #0]
 800c88a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c88c:	4b15      	ldr	r3, [pc, #84]	; (800c8e4 <vPortValidateInterruptPriority+0x74>)
 800c88e:	781b      	ldrb	r3, [r3, #0]
 800c890:	7afa      	ldrb	r2, [r7, #11]
 800c892:	429a      	cmp	r2, r3
 800c894:	d20a      	bcs.n	800c8ac <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c89a:	f383 8811 	msr	BASEPRI, r3
 800c89e:	f3bf 8f6f 	isb	sy
 800c8a2:	f3bf 8f4f 	dsb	sy
 800c8a6:	607b      	str	r3, [r7, #4]
}
 800c8a8:	bf00      	nop
 800c8aa:	e7fe      	b.n	800c8aa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c8ac:	4b0e      	ldr	r3, [pc, #56]	; (800c8e8 <vPortValidateInterruptPriority+0x78>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c8b4:	4b0d      	ldr	r3, [pc, #52]	; (800c8ec <vPortValidateInterruptPriority+0x7c>)
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	429a      	cmp	r2, r3
 800c8ba:	d90a      	bls.n	800c8d2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c8bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8c0:	f383 8811 	msr	BASEPRI, r3
 800c8c4:	f3bf 8f6f 	isb	sy
 800c8c8:	f3bf 8f4f 	dsb	sy
 800c8cc:	603b      	str	r3, [r7, #0]
}
 800c8ce:	bf00      	nop
 800c8d0:	e7fe      	b.n	800c8d0 <vPortValidateInterruptPriority+0x60>
	}
 800c8d2:	bf00      	nop
 800c8d4:	3714      	adds	r7, #20
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8dc:	4770      	bx	lr
 800c8de:	bf00      	nop
 800c8e0:	e000e3f0 	.word	0xe000e3f0
 800c8e4:	200045f0 	.word	0x200045f0
 800c8e8:	e000ed0c 	.word	0xe000ed0c
 800c8ec:	200045f4 	.word	0x200045f4

0800c8f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b084      	sub	sp, #16
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
 800c8f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d10a      	bne.n	800c91a <xQueueGenericReset+0x2a>
	__asm volatile
 800c904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c908:	f383 8811 	msr	BASEPRI, r3
 800c90c:	f3bf 8f6f 	isb	sy
 800c910:	f3bf 8f4f 	dsb	sy
 800c914:	60bb      	str	r3, [r7, #8]
}
 800c916:	bf00      	nop
 800c918:	e7fe      	b.n	800c918 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c91a:	f7ff fde3 	bl	800c4e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	681a      	ldr	r2, [r3, #0]
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c926:	68f9      	ldr	r1, [r7, #12]
 800c928:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c92a:	fb01 f303 	mul.w	r3, r1, r3
 800c92e:	441a      	add	r2, r3
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	2200      	movs	r2, #0
 800c938:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	681a      	ldr	r2, [r3, #0]
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	681a      	ldr	r2, [r3, #0]
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c94a:	3b01      	subs	r3, #1
 800c94c:	68f9      	ldr	r1, [r7, #12]
 800c94e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c950:	fb01 f303 	mul.w	r3, r1, r3
 800c954:	441a      	add	r2, r3
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	22ff      	movs	r2, #255	; 0xff
 800c95e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	22ff      	movs	r2, #255	; 0xff
 800c966:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d114      	bne.n	800c99a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	691b      	ldr	r3, [r3, #16]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d01a      	beq.n	800c9ae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	3310      	adds	r3, #16
 800c97c:	4618      	mov	r0, r3
 800c97e:	f001 fb5f 	bl	800e040 <xTaskRemoveFromEventList>
 800c982:	4603      	mov	r3, r0
 800c984:	2b00      	cmp	r3, #0
 800c986:	d012      	beq.n	800c9ae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c988:	4b0c      	ldr	r3, [pc, #48]	; (800c9bc <xQueueGenericReset+0xcc>)
 800c98a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c98e:	601a      	str	r2, [r3, #0]
 800c990:	f3bf 8f4f 	dsb	sy
 800c994:	f3bf 8f6f 	isb	sy
 800c998:	e009      	b.n	800c9ae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	3310      	adds	r3, #16
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f7ff fbbe 	bl	800c120 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	3324      	adds	r3, #36	; 0x24
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	f7ff fbb9 	bl	800c120 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c9ae:	f7ff fdc9 	bl	800c544 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c9b2:	2301      	movs	r3, #1
}
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	3710      	adds	r7, #16
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bd80      	pop	{r7, pc}
 800c9bc:	e000ed04 	.word	0xe000ed04

0800c9c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b08e      	sub	sp, #56	; 0x38
 800c9c4:	af02      	add	r7, sp, #8
 800c9c6:	60f8      	str	r0, [r7, #12]
 800c9c8:	60b9      	str	r1, [r7, #8]
 800c9ca:	607a      	str	r2, [r7, #4]
 800c9cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d10a      	bne.n	800c9ea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9d8:	f383 8811 	msr	BASEPRI, r3
 800c9dc:	f3bf 8f6f 	isb	sy
 800c9e0:	f3bf 8f4f 	dsb	sy
 800c9e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c9e6:	bf00      	nop
 800c9e8:	e7fe      	b.n	800c9e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d10a      	bne.n	800ca06 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c9f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9f4:	f383 8811 	msr	BASEPRI, r3
 800c9f8:	f3bf 8f6f 	isb	sy
 800c9fc:	f3bf 8f4f 	dsb	sy
 800ca00:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ca02:	bf00      	nop
 800ca04:	e7fe      	b.n	800ca04 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d002      	beq.n	800ca12 <xQueueGenericCreateStatic+0x52>
 800ca0c:	68bb      	ldr	r3, [r7, #8]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d001      	beq.n	800ca16 <xQueueGenericCreateStatic+0x56>
 800ca12:	2301      	movs	r3, #1
 800ca14:	e000      	b.n	800ca18 <xQueueGenericCreateStatic+0x58>
 800ca16:	2300      	movs	r3, #0
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d10a      	bne.n	800ca32 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ca1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca20:	f383 8811 	msr	BASEPRI, r3
 800ca24:	f3bf 8f6f 	isb	sy
 800ca28:	f3bf 8f4f 	dsb	sy
 800ca2c:	623b      	str	r3, [r7, #32]
}
 800ca2e:	bf00      	nop
 800ca30:	e7fe      	b.n	800ca30 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d102      	bne.n	800ca3e <xQueueGenericCreateStatic+0x7e>
 800ca38:	68bb      	ldr	r3, [r7, #8]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d101      	bne.n	800ca42 <xQueueGenericCreateStatic+0x82>
 800ca3e:	2301      	movs	r3, #1
 800ca40:	e000      	b.n	800ca44 <xQueueGenericCreateStatic+0x84>
 800ca42:	2300      	movs	r3, #0
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d10a      	bne.n	800ca5e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ca48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca4c:	f383 8811 	msr	BASEPRI, r3
 800ca50:	f3bf 8f6f 	isb	sy
 800ca54:	f3bf 8f4f 	dsb	sy
 800ca58:	61fb      	str	r3, [r7, #28]
}
 800ca5a:	bf00      	nop
 800ca5c:	e7fe      	b.n	800ca5c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ca5e:	2350      	movs	r3, #80	; 0x50
 800ca60:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ca62:	697b      	ldr	r3, [r7, #20]
 800ca64:	2b50      	cmp	r3, #80	; 0x50
 800ca66:	d00a      	beq.n	800ca7e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ca68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca6c:	f383 8811 	msr	BASEPRI, r3
 800ca70:	f3bf 8f6f 	isb	sy
 800ca74:	f3bf 8f4f 	dsb	sy
 800ca78:	61bb      	str	r3, [r7, #24]
}
 800ca7a:	bf00      	nop
 800ca7c:	e7fe      	b.n	800ca7c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ca7e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ca84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d00d      	beq.n	800caa6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ca8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca8c:	2201      	movs	r2, #1
 800ca8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ca92:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ca96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca98:	9300      	str	r3, [sp, #0]
 800ca9a:	4613      	mov	r3, r2
 800ca9c:	687a      	ldr	r2, [r7, #4]
 800ca9e:	68b9      	ldr	r1, [r7, #8]
 800caa0:	68f8      	ldr	r0, [r7, #12]
 800caa2:	f000 f83f 	bl	800cb24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800caa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800caa8:	4618      	mov	r0, r3
 800caaa:	3730      	adds	r7, #48	; 0x30
 800caac:	46bd      	mov	sp, r7
 800caae:	bd80      	pop	{r7, pc}

0800cab0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b08a      	sub	sp, #40	; 0x28
 800cab4:	af02      	add	r7, sp, #8
 800cab6:	60f8      	str	r0, [r7, #12]
 800cab8:	60b9      	str	r1, [r7, #8]
 800caba:	4613      	mov	r3, r2
 800cabc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d10a      	bne.n	800cada <xQueueGenericCreate+0x2a>
	__asm volatile
 800cac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cac8:	f383 8811 	msr	BASEPRI, r3
 800cacc:	f3bf 8f6f 	isb	sy
 800cad0:	f3bf 8f4f 	dsb	sy
 800cad4:	613b      	str	r3, [r7, #16]
}
 800cad6:	bf00      	nop
 800cad8:	e7fe      	b.n	800cad8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	68ba      	ldr	r2, [r7, #8]
 800cade:	fb02 f303 	mul.w	r3, r2, r3
 800cae2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cae4:	69fb      	ldr	r3, [r7, #28]
 800cae6:	3350      	adds	r3, #80	; 0x50
 800cae8:	4618      	mov	r0, r3
 800caea:	f7ff f92f 	bl	800bd4c <pvPortMalloc>
 800caee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800caf0:	69bb      	ldr	r3, [r7, #24]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d011      	beq.n	800cb1a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800caf6:	69bb      	ldr	r3, [r7, #24]
 800caf8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cafa:	697b      	ldr	r3, [r7, #20]
 800cafc:	3350      	adds	r3, #80	; 0x50
 800cafe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cb00:	69bb      	ldr	r3, [r7, #24]
 800cb02:	2200      	movs	r2, #0
 800cb04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cb08:	79fa      	ldrb	r2, [r7, #7]
 800cb0a:	69bb      	ldr	r3, [r7, #24]
 800cb0c:	9300      	str	r3, [sp, #0]
 800cb0e:	4613      	mov	r3, r2
 800cb10:	697a      	ldr	r2, [r7, #20]
 800cb12:	68b9      	ldr	r1, [r7, #8]
 800cb14:	68f8      	ldr	r0, [r7, #12]
 800cb16:	f000 f805 	bl	800cb24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cb1a:	69bb      	ldr	r3, [r7, #24]
	}
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	3720      	adds	r7, #32
 800cb20:	46bd      	mov	sp, r7
 800cb22:	bd80      	pop	{r7, pc}

0800cb24 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b084      	sub	sp, #16
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	60f8      	str	r0, [r7, #12]
 800cb2c:	60b9      	str	r1, [r7, #8]
 800cb2e:	607a      	str	r2, [r7, #4]
 800cb30:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cb32:	68bb      	ldr	r3, [r7, #8]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d103      	bne.n	800cb40 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cb38:	69bb      	ldr	r3, [r7, #24]
 800cb3a:	69ba      	ldr	r2, [r7, #24]
 800cb3c:	601a      	str	r2, [r3, #0]
 800cb3e:	e002      	b.n	800cb46 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cb40:	69bb      	ldr	r3, [r7, #24]
 800cb42:	687a      	ldr	r2, [r7, #4]
 800cb44:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cb46:	69bb      	ldr	r3, [r7, #24]
 800cb48:	68fa      	ldr	r2, [r7, #12]
 800cb4a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cb4c:	69bb      	ldr	r3, [r7, #24]
 800cb4e:	68ba      	ldr	r2, [r7, #8]
 800cb50:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cb52:	2101      	movs	r1, #1
 800cb54:	69b8      	ldr	r0, [r7, #24]
 800cb56:	f7ff fecb 	bl	800c8f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800cb5a:	69bb      	ldr	r3, [r7, #24]
 800cb5c:	78fa      	ldrb	r2, [r7, #3]
 800cb5e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cb62:	bf00      	nop
 800cb64:	3710      	adds	r7, #16
 800cb66:	46bd      	mov	sp, r7
 800cb68:	bd80      	pop	{r7, pc}

0800cb6a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800cb6a:	b580      	push	{r7, lr}
 800cb6c:	b08a      	sub	sp, #40	; 0x28
 800cb6e:	af02      	add	r7, sp, #8
 800cb70:	60f8      	str	r0, [r7, #12]
 800cb72:	60b9      	str	r1, [r7, #8]
 800cb74:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d10a      	bne.n	800cb92 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800cb7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb80:	f383 8811 	msr	BASEPRI, r3
 800cb84:	f3bf 8f6f 	isb	sy
 800cb88:	f3bf 8f4f 	dsb	sy
 800cb8c:	61bb      	str	r3, [r7, #24]
}
 800cb8e:	bf00      	nop
 800cb90:	e7fe      	b.n	800cb90 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800cb92:	68ba      	ldr	r2, [r7, #8]
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	429a      	cmp	r2, r3
 800cb98:	d90a      	bls.n	800cbb0 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800cb9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb9e:	f383 8811 	msr	BASEPRI, r3
 800cba2:	f3bf 8f6f 	isb	sy
 800cba6:	f3bf 8f4f 	dsb	sy
 800cbaa:	617b      	str	r3, [r7, #20]
}
 800cbac:	bf00      	nop
 800cbae:	e7fe      	b.n	800cbae <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800cbb0:	2302      	movs	r3, #2
 800cbb2:	9300      	str	r3, [sp, #0]
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	2100      	movs	r1, #0
 800cbba:	68f8      	ldr	r0, [r7, #12]
 800cbbc:	f7ff ff00 	bl	800c9c0 <xQueueGenericCreateStatic>
 800cbc0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800cbc2:	69fb      	ldr	r3, [r7, #28]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d002      	beq.n	800cbce <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800cbc8:	69fb      	ldr	r3, [r7, #28]
 800cbca:	68ba      	ldr	r2, [r7, #8]
 800cbcc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800cbce:	69fb      	ldr	r3, [r7, #28]
	}
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	3720      	adds	r7, #32
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	bd80      	pop	{r7, pc}

0800cbd8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b08e      	sub	sp, #56	; 0x38
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	60f8      	str	r0, [r7, #12]
 800cbe0:	60b9      	str	r1, [r7, #8]
 800cbe2:	607a      	str	r2, [r7, #4]
 800cbe4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cbee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d10a      	bne.n	800cc0a <xQueueGenericSend+0x32>
	__asm volatile
 800cbf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbf8:	f383 8811 	msr	BASEPRI, r3
 800cbfc:	f3bf 8f6f 	isb	sy
 800cc00:	f3bf 8f4f 	dsb	sy
 800cc04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cc06:	bf00      	nop
 800cc08:	e7fe      	b.n	800cc08 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cc0a:	68bb      	ldr	r3, [r7, #8]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d103      	bne.n	800cc18 <xQueueGenericSend+0x40>
 800cc10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d101      	bne.n	800cc1c <xQueueGenericSend+0x44>
 800cc18:	2301      	movs	r3, #1
 800cc1a:	e000      	b.n	800cc1e <xQueueGenericSend+0x46>
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d10a      	bne.n	800cc38 <xQueueGenericSend+0x60>
	__asm volatile
 800cc22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc26:	f383 8811 	msr	BASEPRI, r3
 800cc2a:	f3bf 8f6f 	isb	sy
 800cc2e:	f3bf 8f4f 	dsb	sy
 800cc32:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cc34:	bf00      	nop
 800cc36:	e7fe      	b.n	800cc36 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	2b02      	cmp	r3, #2
 800cc3c:	d103      	bne.n	800cc46 <xQueueGenericSend+0x6e>
 800cc3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc42:	2b01      	cmp	r3, #1
 800cc44:	d101      	bne.n	800cc4a <xQueueGenericSend+0x72>
 800cc46:	2301      	movs	r3, #1
 800cc48:	e000      	b.n	800cc4c <xQueueGenericSend+0x74>
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d10a      	bne.n	800cc66 <xQueueGenericSend+0x8e>
	__asm volatile
 800cc50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc54:	f383 8811 	msr	BASEPRI, r3
 800cc58:	f3bf 8f6f 	isb	sy
 800cc5c:	f3bf 8f4f 	dsb	sy
 800cc60:	623b      	str	r3, [r7, #32]
}
 800cc62:	bf00      	nop
 800cc64:	e7fe      	b.n	800cc64 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cc66:	f001 fc07 	bl	800e478 <xTaskGetSchedulerState>
 800cc6a:	4603      	mov	r3, r0
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d102      	bne.n	800cc76 <xQueueGenericSend+0x9e>
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d101      	bne.n	800cc7a <xQueueGenericSend+0xa2>
 800cc76:	2301      	movs	r3, #1
 800cc78:	e000      	b.n	800cc7c <xQueueGenericSend+0xa4>
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d10a      	bne.n	800cc96 <xQueueGenericSend+0xbe>
	__asm volatile
 800cc80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc84:	f383 8811 	msr	BASEPRI, r3
 800cc88:	f3bf 8f6f 	isb	sy
 800cc8c:	f3bf 8f4f 	dsb	sy
 800cc90:	61fb      	str	r3, [r7, #28]
}
 800cc92:	bf00      	nop
 800cc94:	e7fe      	b.n	800cc94 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cc96:	f7ff fc25 	bl	800c4e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cc9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cca2:	429a      	cmp	r2, r3
 800cca4:	d302      	bcc.n	800ccac <xQueueGenericSend+0xd4>
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	2b02      	cmp	r3, #2
 800ccaa:	d129      	bne.n	800cd00 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ccac:	683a      	ldr	r2, [r7, #0]
 800ccae:	68b9      	ldr	r1, [r7, #8]
 800ccb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ccb2:	f000 fb53 	bl	800d35c <prvCopyDataToQueue>
 800ccb6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ccb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d010      	beq.n	800cce2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ccc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccc2:	3324      	adds	r3, #36	; 0x24
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	f001 f9bb 	bl	800e040 <xTaskRemoveFromEventList>
 800ccca:	4603      	mov	r3, r0
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d013      	beq.n	800ccf8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ccd0:	4b3f      	ldr	r3, [pc, #252]	; (800cdd0 <xQueueGenericSend+0x1f8>)
 800ccd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccd6:	601a      	str	r2, [r3, #0]
 800ccd8:	f3bf 8f4f 	dsb	sy
 800ccdc:	f3bf 8f6f 	isb	sy
 800cce0:	e00a      	b.n	800ccf8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d007      	beq.n	800ccf8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cce8:	4b39      	ldr	r3, [pc, #228]	; (800cdd0 <xQueueGenericSend+0x1f8>)
 800ccea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccee:	601a      	str	r2, [r3, #0]
 800ccf0:	f3bf 8f4f 	dsb	sy
 800ccf4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ccf8:	f7ff fc24 	bl	800c544 <vPortExitCritical>
				return pdPASS;
 800ccfc:	2301      	movs	r3, #1
 800ccfe:	e063      	b.n	800cdc8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d103      	bne.n	800cd0e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cd06:	f7ff fc1d 	bl	800c544 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	e05c      	b.n	800cdc8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cd0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d106      	bne.n	800cd22 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cd14:	f107 0314 	add.w	r3, r7, #20
 800cd18:	4618      	mov	r0, r3
 800cd1a:	f001 f9f7 	bl	800e10c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cd1e:	2301      	movs	r3, #1
 800cd20:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cd22:	f7ff fc0f 	bl	800c544 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cd26:	f000 fee9 	bl	800dafc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cd2a:	f7ff fbdb 	bl	800c4e4 <vPortEnterCritical>
 800cd2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cd34:	b25b      	sxtb	r3, r3
 800cd36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd3a:	d103      	bne.n	800cd44 <xQueueGenericSend+0x16c>
 800cd3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd3e:	2200      	movs	r2, #0
 800cd40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cd44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cd4a:	b25b      	sxtb	r3, r3
 800cd4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd50:	d103      	bne.n	800cd5a <xQueueGenericSend+0x182>
 800cd52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd54:	2200      	movs	r2, #0
 800cd56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cd5a:	f7ff fbf3 	bl	800c544 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cd5e:	1d3a      	adds	r2, r7, #4
 800cd60:	f107 0314 	add.w	r3, r7, #20
 800cd64:	4611      	mov	r1, r2
 800cd66:	4618      	mov	r0, r3
 800cd68:	f001 f9e6 	bl	800e138 <xTaskCheckForTimeOut>
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d124      	bne.n	800cdbc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cd72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd74:	f000 fbea 	bl	800d54c <prvIsQueueFull>
 800cd78:	4603      	mov	r3, r0
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d018      	beq.n	800cdb0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cd7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd80:	3310      	adds	r3, #16
 800cd82:	687a      	ldr	r2, [r7, #4]
 800cd84:	4611      	mov	r1, r2
 800cd86:	4618      	mov	r0, r3
 800cd88:	f001 f90a 	bl	800dfa0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cd8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd8e:	f000 fb75 	bl	800d47c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cd92:	f000 fef9 	bl	800db88 <xTaskResumeAll>
 800cd96:	4603      	mov	r3, r0
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	f47f af7c 	bne.w	800cc96 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800cd9e:	4b0c      	ldr	r3, [pc, #48]	; (800cdd0 <xQueueGenericSend+0x1f8>)
 800cda0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cda4:	601a      	str	r2, [r3, #0]
 800cda6:	f3bf 8f4f 	dsb	sy
 800cdaa:	f3bf 8f6f 	isb	sy
 800cdae:	e772      	b.n	800cc96 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cdb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cdb2:	f000 fb63 	bl	800d47c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cdb6:	f000 fee7 	bl	800db88 <xTaskResumeAll>
 800cdba:	e76c      	b.n	800cc96 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cdbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cdbe:	f000 fb5d 	bl	800d47c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cdc2:	f000 fee1 	bl	800db88 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cdc6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cdc8:	4618      	mov	r0, r3
 800cdca:	3738      	adds	r7, #56	; 0x38
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	bd80      	pop	{r7, pc}
 800cdd0:	e000ed04 	.word	0xe000ed04

0800cdd4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b090      	sub	sp, #64	; 0x40
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	60f8      	str	r0, [r7, #12]
 800cddc:	60b9      	str	r1, [r7, #8]
 800cdde:	607a      	str	r2, [r7, #4]
 800cde0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800cde6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d10a      	bne.n	800ce02 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800cdec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdf0:	f383 8811 	msr	BASEPRI, r3
 800cdf4:	f3bf 8f6f 	isb	sy
 800cdf8:	f3bf 8f4f 	dsb	sy
 800cdfc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cdfe:	bf00      	nop
 800ce00:	e7fe      	b.n	800ce00 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d103      	bne.n	800ce10 <xQueueGenericSendFromISR+0x3c>
 800ce08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d101      	bne.n	800ce14 <xQueueGenericSendFromISR+0x40>
 800ce10:	2301      	movs	r3, #1
 800ce12:	e000      	b.n	800ce16 <xQueueGenericSendFromISR+0x42>
 800ce14:	2300      	movs	r3, #0
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d10a      	bne.n	800ce30 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ce1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce1e:	f383 8811 	msr	BASEPRI, r3
 800ce22:	f3bf 8f6f 	isb	sy
 800ce26:	f3bf 8f4f 	dsb	sy
 800ce2a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ce2c:	bf00      	nop
 800ce2e:	e7fe      	b.n	800ce2e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	2b02      	cmp	r3, #2
 800ce34:	d103      	bne.n	800ce3e <xQueueGenericSendFromISR+0x6a>
 800ce36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce3a:	2b01      	cmp	r3, #1
 800ce3c:	d101      	bne.n	800ce42 <xQueueGenericSendFromISR+0x6e>
 800ce3e:	2301      	movs	r3, #1
 800ce40:	e000      	b.n	800ce44 <xQueueGenericSendFromISR+0x70>
 800ce42:	2300      	movs	r3, #0
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d10a      	bne.n	800ce5e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ce48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce4c:	f383 8811 	msr	BASEPRI, r3
 800ce50:	f3bf 8f6f 	isb	sy
 800ce54:	f3bf 8f4f 	dsb	sy
 800ce58:	623b      	str	r3, [r7, #32]
}
 800ce5a:	bf00      	nop
 800ce5c:	e7fe      	b.n	800ce5c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ce5e:	f7ff fd07 	bl	800c870 <vPortValidateInterruptPriority>
	__asm volatile
 800ce62:	f3ef 8211 	mrs	r2, BASEPRI
 800ce66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce6a:	f383 8811 	msr	BASEPRI, r3
 800ce6e:	f3bf 8f6f 	isb	sy
 800ce72:	f3bf 8f4f 	dsb	sy
 800ce76:	61fa      	str	r2, [r7, #28]
 800ce78:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800ce7a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ce7c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ce7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce86:	429a      	cmp	r2, r3
 800ce88:	d302      	bcc.n	800ce90 <xQueueGenericSendFromISR+0xbc>
 800ce8a:	683b      	ldr	r3, [r7, #0]
 800ce8c:	2b02      	cmp	r3, #2
 800ce8e:	d12f      	bne.n	800cef0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ce90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ce96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ce9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce9e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cea0:	683a      	ldr	r2, [r7, #0]
 800cea2:	68b9      	ldr	r1, [r7, #8]
 800cea4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cea6:	f000 fa59 	bl	800d35c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ceaa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ceae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ceb2:	d112      	bne.n	800ceda <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ceb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d016      	beq.n	800ceea <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cebe:	3324      	adds	r3, #36	; 0x24
 800cec0:	4618      	mov	r0, r3
 800cec2:	f001 f8bd 	bl	800e040 <xTaskRemoveFromEventList>
 800cec6:	4603      	mov	r3, r0
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d00e      	beq.n	800ceea <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d00b      	beq.n	800ceea <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	2201      	movs	r2, #1
 800ced6:	601a      	str	r2, [r3, #0]
 800ced8:	e007      	b.n	800ceea <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ceda:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cede:	3301      	adds	r3, #1
 800cee0:	b2db      	uxtb	r3, r3
 800cee2:	b25a      	sxtb	r2, r3
 800cee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cee6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ceea:	2301      	movs	r3, #1
 800ceec:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ceee:	e001      	b.n	800cef4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cef0:	2300      	movs	r3, #0
 800cef2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cef6:	617b      	str	r3, [r7, #20]
	__asm volatile
 800cef8:	697b      	ldr	r3, [r7, #20]
 800cefa:	f383 8811 	msr	BASEPRI, r3
}
 800cefe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cf00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cf02:	4618      	mov	r0, r3
 800cf04:	3740      	adds	r7, #64	; 0x40
 800cf06:	46bd      	mov	sp, r7
 800cf08:	bd80      	pop	{r7, pc}

0800cf0a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cf0a:	b580      	push	{r7, lr}
 800cf0c:	b08e      	sub	sp, #56	; 0x38
 800cf0e:	af00      	add	r7, sp, #0
 800cf10:	6078      	str	r0, [r7, #4]
 800cf12:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800cf18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d10a      	bne.n	800cf34 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800cf1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf22:	f383 8811 	msr	BASEPRI, r3
 800cf26:	f3bf 8f6f 	isb	sy
 800cf2a:	f3bf 8f4f 	dsb	sy
 800cf2e:	623b      	str	r3, [r7, #32]
}
 800cf30:	bf00      	nop
 800cf32:	e7fe      	b.n	800cf32 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cf34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d00a      	beq.n	800cf52 <xQueueGiveFromISR+0x48>
	__asm volatile
 800cf3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf40:	f383 8811 	msr	BASEPRI, r3
 800cf44:	f3bf 8f6f 	isb	sy
 800cf48:	f3bf 8f4f 	dsb	sy
 800cf4c:	61fb      	str	r3, [r7, #28]
}
 800cf4e:	bf00      	nop
 800cf50:	e7fe      	b.n	800cf50 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800cf52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d103      	bne.n	800cf62 <xQueueGiveFromISR+0x58>
 800cf5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf5c:	689b      	ldr	r3, [r3, #8]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d101      	bne.n	800cf66 <xQueueGiveFromISR+0x5c>
 800cf62:	2301      	movs	r3, #1
 800cf64:	e000      	b.n	800cf68 <xQueueGiveFromISR+0x5e>
 800cf66:	2300      	movs	r3, #0
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d10a      	bne.n	800cf82 <xQueueGiveFromISR+0x78>
	__asm volatile
 800cf6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf70:	f383 8811 	msr	BASEPRI, r3
 800cf74:	f3bf 8f6f 	isb	sy
 800cf78:	f3bf 8f4f 	dsb	sy
 800cf7c:	61bb      	str	r3, [r7, #24]
}
 800cf7e:	bf00      	nop
 800cf80:	e7fe      	b.n	800cf80 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cf82:	f7ff fc75 	bl	800c870 <vPortValidateInterruptPriority>
	__asm volatile
 800cf86:	f3ef 8211 	mrs	r2, BASEPRI
 800cf8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf8e:	f383 8811 	msr	BASEPRI, r3
 800cf92:	f3bf 8f6f 	isb	sy
 800cf96:	f3bf 8f4f 	dsb	sy
 800cf9a:	617a      	str	r2, [r7, #20]
 800cf9c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800cf9e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cfa0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cfa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfa6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800cfa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cfae:	429a      	cmp	r2, r3
 800cfb0:	d22b      	bcs.n	800d00a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cfb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cfb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cfbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfbe:	1c5a      	adds	r2, r3, #1
 800cfc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfc2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cfc4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cfc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfcc:	d112      	bne.n	800cff4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cfce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d016      	beq.n	800d004 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cfd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfd8:	3324      	adds	r3, #36	; 0x24
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f001 f830 	bl	800e040 <xTaskRemoveFromEventList>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d00e      	beq.n	800d004 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d00b      	beq.n	800d004 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	2201      	movs	r2, #1
 800cff0:	601a      	str	r2, [r3, #0]
 800cff2:	e007      	b.n	800d004 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cff4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cff8:	3301      	adds	r3, #1
 800cffa:	b2db      	uxtb	r3, r3
 800cffc:	b25a      	sxtb	r2, r3
 800cffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d000:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d004:	2301      	movs	r3, #1
 800d006:	637b      	str	r3, [r7, #52]	; 0x34
 800d008:	e001      	b.n	800d00e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d00a:	2300      	movs	r3, #0
 800d00c:	637b      	str	r3, [r7, #52]	; 0x34
 800d00e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d010:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	f383 8811 	msr	BASEPRI, r3
}
 800d018:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d01a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d01c:	4618      	mov	r0, r3
 800d01e:	3738      	adds	r7, #56	; 0x38
 800d020:	46bd      	mov	sp, r7
 800d022:	bd80      	pop	{r7, pc}

0800d024 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b08c      	sub	sp, #48	; 0x30
 800d028:	af00      	add	r7, sp, #0
 800d02a:	60f8      	str	r0, [r7, #12]
 800d02c:	60b9      	str	r1, [r7, #8]
 800d02e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d030:	2300      	movs	r3, #0
 800d032:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d10a      	bne.n	800d054 <xQueueReceive+0x30>
	__asm volatile
 800d03e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d042:	f383 8811 	msr	BASEPRI, r3
 800d046:	f3bf 8f6f 	isb	sy
 800d04a:	f3bf 8f4f 	dsb	sy
 800d04e:	623b      	str	r3, [r7, #32]
}
 800d050:	bf00      	nop
 800d052:	e7fe      	b.n	800d052 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d054:	68bb      	ldr	r3, [r7, #8]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d103      	bne.n	800d062 <xQueueReceive+0x3e>
 800d05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d05c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d101      	bne.n	800d066 <xQueueReceive+0x42>
 800d062:	2301      	movs	r3, #1
 800d064:	e000      	b.n	800d068 <xQueueReceive+0x44>
 800d066:	2300      	movs	r3, #0
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d10a      	bne.n	800d082 <xQueueReceive+0x5e>
	__asm volatile
 800d06c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d070:	f383 8811 	msr	BASEPRI, r3
 800d074:	f3bf 8f6f 	isb	sy
 800d078:	f3bf 8f4f 	dsb	sy
 800d07c:	61fb      	str	r3, [r7, #28]
}
 800d07e:	bf00      	nop
 800d080:	e7fe      	b.n	800d080 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d082:	f001 f9f9 	bl	800e478 <xTaskGetSchedulerState>
 800d086:	4603      	mov	r3, r0
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d102      	bne.n	800d092 <xQueueReceive+0x6e>
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d101      	bne.n	800d096 <xQueueReceive+0x72>
 800d092:	2301      	movs	r3, #1
 800d094:	e000      	b.n	800d098 <xQueueReceive+0x74>
 800d096:	2300      	movs	r3, #0
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d10a      	bne.n	800d0b2 <xQueueReceive+0x8e>
	__asm volatile
 800d09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0a0:	f383 8811 	msr	BASEPRI, r3
 800d0a4:	f3bf 8f6f 	isb	sy
 800d0a8:	f3bf 8f4f 	dsb	sy
 800d0ac:	61bb      	str	r3, [r7, #24]
}
 800d0ae:	bf00      	nop
 800d0b0:	e7fe      	b.n	800d0b0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d0b2:	f7ff fa17 	bl	800c4e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0ba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d01f      	beq.n	800d102 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d0c2:	68b9      	ldr	r1, [r7, #8]
 800d0c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d0c6:	f000 f9b3 	bl	800d430 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0cc:	1e5a      	subs	r2, r3, #1
 800d0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0d0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d0d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0d4:	691b      	ldr	r3, [r3, #16]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d00f      	beq.n	800d0fa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0dc:	3310      	adds	r3, #16
 800d0de:	4618      	mov	r0, r3
 800d0e0:	f000 ffae 	bl	800e040 <xTaskRemoveFromEventList>
 800d0e4:	4603      	mov	r3, r0
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d007      	beq.n	800d0fa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d0ea:	4b3d      	ldr	r3, [pc, #244]	; (800d1e0 <xQueueReceive+0x1bc>)
 800d0ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0f0:	601a      	str	r2, [r3, #0]
 800d0f2:	f3bf 8f4f 	dsb	sy
 800d0f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d0fa:	f7ff fa23 	bl	800c544 <vPortExitCritical>
				return pdPASS;
 800d0fe:	2301      	movs	r3, #1
 800d100:	e069      	b.n	800d1d6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d103      	bne.n	800d110 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d108:	f7ff fa1c 	bl	800c544 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d10c:	2300      	movs	r3, #0
 800d10e:	e062      	b.n	800d1d6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d112:	2b00      	cmp	r3, #0
 800d114:	d106      	bne.n	800d124 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d116:	f107 0310 	add.w	r3, r7, #16
 800d11a:	4618      	mov	r0, r3
 800d11c:	f000 fff6 	bl	800e10c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d120:	2301      	movs	r3, #1
 800d122:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d124:	f7ff fa0e 	bl	800c544 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d128:	f000 fce8 	bl	800dafc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d12c:	f7ff f9da 	bl	800c4e4 <vPortEnterCritical>
 800d130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d132:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d136:	b25b      	sxtb	r3, r3
 800d138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d13c:	d103      	bne.n	800d146 <xQueueReceive+0x122>
 800d13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d140:	2200      	movs	r2, #0
 800d142:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d148:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d14c:	b25b      	sxtb	r3, r3
 800d14e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d152:	d103      	bne.n	800d15c <xQueueReceive+0x138>
 800d154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d156:	2200      	movs	r2, #0
 800d158:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d15c:	f7ff f9f2 	bl	800c544 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d160:	1d3a      	adds	r2, r7, #4
 800d162:	f107 0310 	add.w	r3, r7, #16
 800d166:	4611      	mov	r1, r2
 800d168:	4618      	mov	r0, r3
 800d16a:	f000 ffe5 	bl	800e138 <xTaskCheckForTimeOut>
 800d16e:	4603      	mov	r3, r0
 800d170:	2b00      	cmp	r3, #0
 800d172:	d123      	bne.n	800d1bc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d174:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d176:	f000 f9d3 	bl	800d520 <prvIsQueueEmpty>
 800d17a:	4603      	mov	r3, r0
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d017      	beq.n	800d1b0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d182:	3324      	adds	r3, #36	; 0x24
 800d184:	687a      	ldr	r2, [r7, #4]
 800d186:	4611      	mov	r1, r2
 800d188:	4618      	mov	r0, r3
 800d18a:	f000 ff09 	bl	800dfa0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d18e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d190:	f000 f974 	bl	800d47c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d194:	f000 fcf8 	bl	800db88 <xTaskResumeAll>
 800d198:	4603      	mov	r3, r0
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d189      	bne.n	800d0b2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d19e:	4b10      	ldr	r3, [pc, #64]	; (800d1e0 <xQueueReceive+0x1bc>)
 800d1a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1a4:	601a      	str	r2, [r3, #0]
 800d1a6:	f3bf 8f4f 	dsb	sy
 800d1aa:	f3bf 8f6f 	isb	sy
 800d1ae:	e780      	b.n	800d0b2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d1b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1b2:	f000 f963 	bl	800d47c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d1b6:	f000 fce7 	bl	800db88 <xTaskResumeAll>
 800d1ba:	e77a      	b.n	800d0b2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d1bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1be:	f000 f95d 	bl	800d47c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d1c2:	f000 fce1 	bl	800db88 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d1c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1c8:	f000 f9aa 	bl	800d520 <prvIsQueueEmpty>
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	f43f af6f 	beq.w	800d0b2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d1d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	3730      	adds	r7, #48	; 0x30
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	bd80      	pop	{r7, pc}
 800d1de:	bf00      	nop
 800d1e0:	e000ed04 	.word	0xe000ed04

0800d1e4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b08e      	sub	sp, #56	; 0x38
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	60f8      	str	r0, [r7, #12]
 800d1ec:	60b9      	str	r1, [r7, #8]
 800d1ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d1f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d10a      	bne.n	800d210 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800d1fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1fe:	f383 8811 	msr	BASEPRI, r3
 800d202:	f3bf 8f6f 	isb	sy
 800d206:	f3bf 8f4f 	dsb	sy
 800d20a:	623b      	str	r3, [r7, #32]
}
 800d20c:	bf00      	nop
 800d20e:	e7fe      	b.n	800d20e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d103      	bne.n	800d21e <xQueueReceiveFromISR+0x3a>
 800d216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d101      	bne.n	800d222 <xQueueReceiveFromISR+0x3e>
 800d21e:	2301      	movs	r3, #1
 800d220:	e000      	b.n	800d224 <xQueueReceiveFromISR+0x40>
 800d222:	2300      	movs	r3, #0
 800d224:	2b00      	cmp	r3, #0
 800d226:	d10a      	bne.n	800d23e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800d228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d22c:	f383 8811 	msr	BASEPRI, r3
 800d230:	f3bf 8f6f 	isb	sy
 800d234:	f3bf 8f4f 	dsb	sy
 800d238:	61fb      	str	r3, [r7, #28]
}
 800d23a:	bf00      	nop
 800d23c:	e7fe      	b.n	800d23c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d23e:	f7ff fb17 	bl	800c870 <vPortValidateInterruptPriority>
	__asm volatile
 800d242:	f3ef 8211 	mrs	r2, BASEPRI
 800d246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d24a:	f383 8811 	msr	BASEPRI, r3
 800d24e:	f3bf 8f6f 	isb	sy
 800d252:	f3bf 8f4f 	dsb	sy
 800d256:	61ba      	str	r2, [r7, #24]
 800d258:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d25a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d25c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d262:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d266:	2b00      	cmp	r3, #0
 800d268:	d02f      	beq.n	800d2ca <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d26c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d270:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d274:	68b9      	ldr	r1, [r7, #8]
 800d276:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d278:	f000 f8da 	bl	800d430 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d27e:	1e5a      	subs	r2, r3, #1
 800d280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d282:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d284:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d28c:	d112      	bne.n	800d2b4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d290:	691b      	ldr	r3, [r3, #16]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d016      	beq.n	800d2c4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d298:	3310      	adds	r3, #16
 800d29a:	4618      	mov	r0, r3
 800d29c:	f000 fed0 	bl	800e040 <xTaskRemoveFromEventList>
 800d2a0:	4603      	mov	r3, r0
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d00e      	beq.n	800d2c4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d00b      	beq.n	800d2c4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2201      	movs	r2, #1
 800d2b0:	601a      	str	r2, [r3, #0]
 800d2b2:	e007      	b.n	800d2c4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d2b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2b8:	3301      	adds	r3, #1
 800d2ba:	b2db      	uxtb	r3, r3
 800d2bc:	b25a      	sxtb	r2, r3
 800d2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d2c4:	2301      	movs	r3, #1
 800d2c6:	637b      	str	r3, [r7, #52]	; 0x34
 800d2c8:	e001      	b.n	800d2ce <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	637b      	str	r3, [r7, #52]	; 0x34
 800d2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2d0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d2d2:	693b      	ldr	r3, [r7, #16]
 800d2d4:	f383 8811 	msr	BASEPRI, r3
}
 800d2d8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d2da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d2dc:	4618      	mov	r0, r3
 800d2de:	3738      	adds	r7, #56	; 0x38
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	bd80      	pop	{r7, pc}

0800d2e4 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b084      	sub	sp, #16
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d10a      	bne.n	800d308 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800d2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2f6:	f383 8811 	msr	BASEPRI, r3
 800d2fa:	f3bf 8f6f 	isb	sy
 800d2fe:	f3bf 8f4f 	dsb	sy
 800d302:	60bb      	str	r3, [r7, #8]
}
 800d304:	bf00      	nop
 800d306:	e7fe      	b.n	800d306 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800d308:	f7ff f8ec 	bl	800c4e4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d310:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800d312:	f7ff f917 	bl	800c544 <vPortExitCritical>

	return uxReturn;
 800d316:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800d318:	4618      	mov	r0, r3
 800d31a:	3710      	adds	r7, #16
 800d31c:	46bd      	mov	sp, r7
 800d31e:	bd80      	pop	{r7, pc}

0800d320 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800d320:	b480      	push	{r7}
 800d322:	b087      	sub	sp, #28
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800d32c:	697b      	ldr	r3, [r7, #20]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d10a      	bne.n	800d348 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800d332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d336:	f383 8811 	msr	BASEPRI, r3
 800d33a:	f3bf 8f6f 	isb	sy
 800d33e:	f3bf 8f4f 	dsb	sy
 800d342:	60fb      	str	r3, [r7, #12]
}
 800d344:	bf00      	nop
 800d346:	e7fe      	b.n	800d346 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800d348:	697b      	ldr	r3, [r7, #20]
 800d34a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d34c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800d34e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800d350:	4618      	mov	r0, r3
 800d352:	371c      	adds	r7, #28
 800d354:	46bd      	mov	sp, r7
 800d356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35a:	4770      	bx	lr

0800d35c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b086      	sub	sp, #24
 800d360:	af00      	add	r7, sp, #0
 800d362:	60f8      	str	r0, [r7, #12]
 800d364:	60b9      	str	r1, [r7, #8]
 800d366:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d368:	2300      	movs	r3, #0
 800d36a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d370:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d376:	2b00      	cmp	r3, #0
 800d378:	d10d      	bne.n	800d396 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d14d      	bne.n	800d41e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	689b      	ldr	r3, [r3, #8]
 800d386:	4618      	mov	r0, r3
 800d388:	f001 f894 	bl	800e4b4 <xTaskPriorityDisinherit>
 800d38c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	2200      	movs	r2, #0
 800d392:	609a      	str	r2, [r3, #8]
 800d394:	e043      	b.n	800d41e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d119      	bne.n	800d3d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	6858      	ldr	r0, [r3, #4]
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3a4:	461a      	mov	r2, r3
 800d3a6:	68b9      	ldr	r1, [r7, #8]
 800d3a8:	f001 ff1c 	bl	800f1e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	685a      	ldr	r2, [r3, #4]
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3b4:	441a      	add	r2, r3
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	685a      	ldr	r2, [r3, #4]
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	689b      	ldr	r3, [r3, #8]
 800d3c2:	429a      	cmp	r2, r3
 800d3c4:	d32b      	bcc.n	800d41e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	681a      	ldr	r2, [r3, #0]
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	605a      	str	r2, [r3, #4]
 800d3ce:	e026      	b.n	800d41e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	68d8      	ldr	r0, [r3, #12]
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3d8:	461a      	mov	r2, r3
 800d3da:	68b9      	ldr	r1, [r7, #8]
 800d3dc:	f001 ff02 	bl	800f1e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	68da      	ldr	r2, [r3, #12]
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3e8:	425b      	negs	r3, r3
 800d3ea:	441a      	add	r2, r3
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	68da      	ldr	r2, [r3, #12]
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	429a      	cmp	r2, r3
 800d3fa:	d207      	bcs.n	800d40c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	689a      	ldr	r2, [r3, #8]
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d404:	425b      	negs	r3, r3
 800d406:	441a      	add	r2, r3
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	2b02      	cmp	r3, #2
 800d410:	d105      	bne.n	800d41e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d412:	693b      	ldr	r3, [r7, #16]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d002      	beq.n	800d41e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d418:	693b      	ldr	r3, [r7, #16]
 800d41a:	3b01      	subs	r3, #1
 800d41c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d41e:	693b      	ldr	r3, [r7, #16]
 800d420:	1c5a      	adds	r2, r3, #1
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d426:	697b      	ldr	r3, [r7, #20]
}
 800d428:	4618      	mov	r0, r3
 800d42a:	3718      	adds	r7, #24
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}

0800d430 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b082      	sub	sp, #8
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
 800d438:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d018      	beq.n	800d474 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	68da      	ldr	r2, [r3, #12]
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d44a:	441a      	add	r2, r3
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	68da      	ldr	r2, [r3, #12]
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	689b      	ldr	r3, [r3, #8]
 800d458:	429a      	cmp	r2, r3
 800d45a:	d303      	bcc.n	800d464 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681a      	ldr	r2, [r3, #0]
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	68d9      	ldr	r1, [r3, #12]
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d46c:	461a      	mov	r2, r3
 800d46e:	6838      	ldr	r0, [r7, #0]
 800d470:	f001 feb8 	bl	800f1e4 <memcpy>
	}
}
 800d474:	bf00      	nop
 800d476:	3708      	adds	r7, #8
 800d478:	46bd      	mov	sp, r7
 800d47a:	bd80      	pop	{r7, pc}

0800d47c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b084      	sub	sp, #16
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d484:	f7ff f82e 	bl	800c4e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d48e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d490:	e011      	b.n	800d4b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d496:	2b00      	cmp	r3, #0
 800d498:	d012      	beq.n	800d4c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	3324      	adds	r3, #36	; 0x24
 800d49e:	4618      	mov	r0, r3
 800d4a0:	f000 fdce 	bl	800e040 <xTaskRemoveFromEventList>
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d001      	beq.n	800d4ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d4aa:	f000 fea7 	bl	800e1fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d4ae:	7bfb      	ldrb	r3, [r7, #15]
 800d4b0:	3b01      	subs	r3, #1
 800d4b2:	b2db      	uxtb	r3, r3
 800d4b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d4b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	dce9      	bgt.n	800d492 <prvUnlockQueue+0x16>
 800d4be:	e000      	b.n	800d4c2 <prvUnlockQueue+0x46>
					break;
 800d4c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	22ff      	movs	r2, #255	; 0xff
 800d4c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d4ca:	f7ff f83b 	bl	800c544 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d4ce:	f7ff f809 	bl	800c4e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d4d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d4da:	e011      	b.n	800d500 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	691b      	ldr	r3, [r3, #16]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d012      	beq.n	800d50a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	3310      	adds	r3, #16
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	f000 fda9 	bl	800e040 <xTaskRemoveFromEventList>
 800d4ee:	4603      	mov	r3, r0
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d001      	beq.n	800d4f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d4f4:	f000 fe82 	bl	800e1fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d4f8:	7bbb      	ldrb	r3, [r7, #14]
 800d4fa:	3b01      	subs	r3, #1
 800d4fc:	b2db      	uxtb	r3, r3
 800d4fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d500:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d504:	2b00      	cmp	r3, #0
 800d506:	dce9      	bgt.n	800d4dc <prvUnlockQueue+0x60>
 800d508:	e000      	b.n	800d50c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d50a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	22ff      	movs	r2, #255	; 0xff
 800d510:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d514:	f7ff f816 	bl	800c544 <vPortExitCritical>
}
 800d518:	bf00      	nop
 800d51a:	3710      	adds	r7, #16
 800d51c:	46bd      	mov	sp, r7
 800d51e:	bd80      	pop	{r7, pc}

0800d520 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b084      	sub	sp, #16
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d528:	f7fe ffdc 	bl	800c4e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d530:	2b00      	cmp	r3, #0
 800d532:	d102      	bne.n	800d53a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d534:	2301      	movs	r3, #1
 800d536:	60fb      	str	r3, [r7, #12]
 800d538:	e001      	b.n	800d53e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d53a:	2300      	movs	r3, #0
 800d53c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d53e:	f7ff f801 	bl	800c544 <vPortExitCritical>

	return xReturn;
 800d542:	68fb      	ldr	r3, [r7, #12]
}
 800d544:	4618      	mov	r0, r3
 800d546:	3710      	adds	r7, #16
 800d548:	46bd      	mov	sp, r7
 800d54a:	bd80      	pop	{r7, pc}

0800d54c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b084      	sub	sp, #16
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d554:	f7fe ffc6 	bl	800c4e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d560:	429a      	cmp	r2, r3
 800d562:	d102      	bne.n	800d56a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d564:	2301      	movs	r3, #1
 800d566:	60fb      	str	r3, [r7, #12]
 800d568:	e001      	b.n	800d56e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d56a:	2300      	movs	r3, #0
 800d56c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d56e:	f7fe ffe9 	bl	800c544 <vPortExitCritical>

	return xReturn;
 800d572:	68fb      	ldr	r3, [r7, #12]
}
 800d574:	4618      	mov	r0, r3
 800d576:	3710      	adds	r7, #16
 800d578:	46bd      	mov	sp, r7
 800d57a:	bd80      	pop	{r7, pc}

0800d57c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d57c:	b480      	push	{r7}
 800d57e:	b085      	sub	sp, #20
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
 800d584:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d586:	2300      	movs	r3, #0
 800d588:	60fb      	str	r3, [r7, #12]
 800d58a:	e014      	b.n	800d5b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d58c:	4a0f      	ldr	r2, [pc, #60]	; (800d5cc <vQueueAddToRegistry+0x50>)
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d10b      	bne.n	800d5b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d598:	490c      	ldr	r1, [pc, #48]	; (800d5cc <vQueueAddToRegistry+0x50>)
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	683a      	ldr	r2, [r7, #0]
 800d59e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d5a2:	4a0a      	ldr	r2, [pc, #40]	; (800d5cc <vQueueAddToRegistry+0x50>)
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	00db      	lsls	r3, r3, #3
 800d5a8:	4413      	add	r3, r2
 800d5aa:	687a      	ldr	r2, [r7, #4]
 800d5ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d5ae:	e006      	b.n	800d5be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	3301      	adds	r3, #1
 800d5b4:	60fb      	str	r3, [r7, #12]
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	2b1f      	cmp	r3, #31
 800d5ba:	d9e7      	bls.n	800d58c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d5bc:	bf00      	nop
 800d5be:	bf00      	nop
 800d5c0:	3714      	adds	r7, #20
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c8:	4770      	bx	lr
 800d5ca:	bf00      	nop
 800d5cc:	200045f8 	.word	0x200045f8

0800d5d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b086      	sub	sp, #24
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	60f8      	str	r0, [r7, #12]
 800d5d8:	60b9      	str	r1, [r7, #8]
 800d5da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d5e0:	f7fe ff80 	bl	800c4e4 <vPortEnterCritical>
 800d5e4:	697b      	ldr	r3, [r7, #20]
 800d5e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d5ea:	b25b      	sxtb	r3, r3
 800d5ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5f0:	d103      	bne.n	800d5fa <vQueueWaitForMessageRestricted+0x2a>
 800d5f2:	697b      	ldr	r3, [r7, #20]
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d5fa:	697b      	ldr	r3, [r7, #20]
 800d5fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d600:	b25b      	sxtb	r3, r3
 800d602:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d606:	d103      	bne.n	800d610 <vQueueWaitForMessageRestricted+0x40>
 800d608:	697b      	ldr	r3, [r7, #20]
 800d60a:	2200      	movs	r2, #0
 800d60c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d610:	f7fe ff98 	bl	800c544 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d614:	697b      	ldr	r3, [r7, #20]
 800d616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d106      	bne.n	800d62a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d61c:	697b      	ldr	r3, [r7, #20]
 800d61e:	3324      	adds	r3, #36	; 0x24
 800d620:	687a      	ldr	r2, [r7, #4]
 800d622:	68b9      	ldr	r1, [r7, #8]
 800d624:	4618      	mov	r0, r3
 800d626:	f000 fcdf 	bl	800dfe8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d62a:	6978      	ldr	r0, [r7, #20]
 800d62c:	f7ff ff26 	bl	800d47c <prvUnlockQueue>
	}
 800d630:	bf00      	nop
 800d632:	3718      	adds	r7, #24
 800d634:	46bd      	mov	sp, r7
 800d636:	bd80      	pop	{r7, pc}

0800d638 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b08e      	sub	sp, #56	; 0x38
 800d63c:	af04      	add	r7, sp, #16
 800d63e:	60f8      	str	r0, [r7, #12]
 800d640:	60b9      	str	r1, [r7, #8]
 800d642:	607a      	str	r2, [r7, #4]
 800d644:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d10a      	bne.n	800d662 <xTaskCreateStatic+0x2a>
	__asm volatile
 800d64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d650:	f383 8811 	msr	BASEPRI, r3
 800d654:	f3bf 8f6f 	isb	sy
 800d658:	f3bf 8f4f 	dsb	sy
 800d65c:	623b      	str	r3, [r7, #32]
}
 800d65e:	bf00      	nop
 800d660:	e7fe      	b.n	800d660 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d664:	2b00      	cmp	r3, #0
 800d666:	d10a      	bne.n	800d67e <xTaskCreateStatic+0x46>
	__asm volatile
 800d668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d66c:	f383 8811 	msr	BASEPRI, r3
 800d670:	f3bf 8f6f 	isb	sy
 800d674:	f3bf 8f4f 	dsb	sy
 800d678:	61fb      	str	r3, [r7, #28]
}
 800d67a:	bf00      	nop
 800d67c:	e7fe      	b.n	800d67c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d67e:	23b0      	movs	r3, #176	; 0xb0
 800d680:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d682:	693b      	ldr	r3, [r7, #16]
 800d684:	2bb0      	cmp	r3, #176	; 0xb0
 800d686:	d00a      	beq.n	800d69e <xTaskCreateStatic+0x66>
	__asm volatile
 800d688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d68c:	f383 8811 	msr	BASEPRI, r3
 800d690:	f3bf 8f6f 	isb	sy
 800d694:	f3bf 8f4f 	dsb	sy
 800d698:	61bb      	str	r3, [r7, #24]
}
 800d69a:	bf00      	nop
 800d69c:	e7fe      	b.n	800d69c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d69e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d6a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d01e      	beq.n	800d6e4 <xTaskCreateStatic+0xac>
 800d6a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d01b      	beq.n	800d6e4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d6ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d6b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d6b4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6b8:	2202      	movs	r2, #2
 800d6ba:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d6be:	2300      	movs	r3, #0
 800d6c0:	9303      	str	r3, [sp, #12]
 800d6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6c4:	9302      	str	r3, [sp, #8]
 800d6c6:	f107 0314 	add.w	r3, r7, #20
 800d6ca:	9301      	str	r3, [sp, #4]
 800d6cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6ce:	9300      	str	r3, [sp, #0]
 800d6d0:	683b      	ldr	r3, [r7, #0]
 800d6d2:	687a      	ldr	r2, [r7, #4]
 800d6d4:	68b9      	ldr	r1, [r7, #8]
 800d6d6:	68f8      	ldr	r0, [r7, #12]
 800d6d8:	f000 f850 	bl	800d77c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d6dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d6de:	f000 f8f9 	bl	800d8d4 <prvAddNewTaskToReadyList>
 800d6e2:	e001      	b.n	800d6e8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d6e8:	697b      	ldr	r3, [r7, #20]
	}
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	3728      	adds	r7, #40	; 0x28
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bd80      	pop	{r7, pc}

0800d6f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d6f2:	b580      	push	{r7, lr}
 800d6f4:	b08c      	sub	sp, #48	; 0x30
 800d6f6:	af04      	add	r7, sp, #16
 800d6f8:	60f8      	str	r0, [r7, #12]
 800d6fa:	60b9      	str	r1, [r7, #8]
 800d6fc:	603b      	str	r3, [r7, #0]
 800d6fe:	4613      	mov	r3, r2
 800d700:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d702:	88fb      	ldrh	r3, [r7, #6]
 800d704:	009b      	lsls	r3, r3, #2
 800d706:	4618      	mov	r0, r3
 800d708:	f7fe fb20 	bl	800bd4c <pvPortMalloc>
 800d70c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d70e:	697b      	ldr	r3, [r7, #20]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d00e      	beq.n	800d732 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d714:	20b0      	movs	r0, #176	; 0xb0
 800d716:	f7fe fb19 	bl	800bd4c <pvPortMalloc>
 800d71a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d71c:	69fb      	ldr	r3, [r7, #28]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d003      	beq.n	800d72a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d722:	69fb      	ldr	r3, [r7, #28]
 800d724:	697a      	ldr	r2, [r7, #20]
 800d726:	631a      	str	r2, [r3, #48]	; 0x30
 800d728:	e005      	b.n	800d736 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d72a:	6978      	ldr	r0, [r7, #20]
 800d72c:	f7fe fbda 	bl	800bee4 <vPortFree>
 800d730:	e001      	b.n	800d736 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d732:	2300      	movs	r3, #0
 800d734:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d736:	69fb      	ldr	r3, [r7, #28]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d017      	beq.n	800d76c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d73c:	69fb      	ldr	r3, [r7, #28]
 800d73e:	2200      	movs	r2, #0
 800d740:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d744:	88fa      	ldrh	r2, [r7, #6]
 800d746:	2300      	movs	r3, #0
 800d748:	9303      	str	r3, [sp, #12]
 800d74a:	69fb      	ldr	r3, [r7, #28]
 800d74c:	9302      	str	r3, [sp, #8]
 800d74e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d750:	9301      	str	r3, [sp, #4]
 800d752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d754:	9300      	str	r3, [sp, #0]
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	68b9      	ldr	r1, [r7, #8]
 800d75a:	68f8      	ldr	r0, [r7, #12]
 800d75c:	f000 f80e 	bl	800d77c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d760:	69f8      	ldr	r0, [r7, #28]
 800d762:	f000 f8b7 	bl	800d8d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d766:	2301      	movs	r3, #1
 800d768:	61bb      	str	r3, [r7, #24]
 800d76a:	e002      	b.n	800d772 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d76c:	f04f 33ff 	mov.w	r3, #4294967295
 800d770:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d772:	69bb      	ldr	r3, [r7, #24]
	}
 800d774:	4618      	mov	r0, r3
 800d776:	3720      	adds	r7, #32
 800d778:	46bd      	mov	sp, r7
 800d77a:	bd80      	pop	{r7, pc}

0800d77c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b088      	sub	sp, #32
 800d780:	af00      	add	r7, sp, #0
 800d782:	60f8      	str	r0, [r7, #12]
 800d784:	60b9      	str	r1, [r7, #8]
 800d786:	607a      	str	r2, [r7, #4]
 800d788:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d78c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	009b      	lsls	r3, r3, #2
 800d792:	461a      	mov	r2, r3
 800d794:	21a5      	movs	r1, #165	; 0xa5
 800d796:	f001 fca1 	bl	800f0dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d79a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d79c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d7a4:	3b01      	subs	r3, #1
 800d7a6:	009b      	lsls	r3, r3, #2
 800d7a8:	4413      	add	r3, r2
 800d7aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d7ac:	69bb      	ldr	r3, [r7, #24]
 800d7ae:	f023 0307 	bic.w	r3, r3, #7
 800d7b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d7b4:	69bb      	ldr	r3, [r7, #24]
 800d7b6:	f003 0307 	and.w	r3, r3, #7
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d00a      	beq.n	800d7d4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800d7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7c2:	f383 8811 	msr	BASEPRI, r3
 800d7c6:	f3bf 8f6f 	isb	sy
 800d7ca:	f3bf 8f4f 	dsb	sy
 800d7ce:	617b      	str	r3, [r7, #20]
}
 800d7d0:	bf00      	nop
 800d7d2:	e7fe      	b.n	800d7d2 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800d7d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7d6:	69ba      	ldr	r2, [r7, #24]
 800d7d8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d7da:	68bb      	ldr	r3, [r7, #8]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d01f      	beq.n	800d820 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	61fb      	str	r3, [r7, #28]
 800d7e4:	e012      	b.n	800d80c <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d7e6:	68ba      	ldr	r2, [r7, #8]
 800d7e8:	69fb      	ldr	r3, [r7, #28]
 800d7ea:	4413      	add	r3, r2
 800d7ec:	7819      	ldrb	r1, [r3, #0]
 800d7ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7f0:	69fb      	ldr	r3, [r7, #28]
 800d7f2:	4413      	add	r3, r2
 800d7f4:	3334      	adds	r3, #52	; 0x34
 800d7f6:	460a      	mov	r2, r1
 800d7f8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d7fa:	68ba      	ldr	r2, [r7, #8]
 800d7fc:	69fb      	ldr	r3, [r7, #28]
 800d7fe:	4413      	add	r3, r2
 800d800:	781b      	ldrb	r3, [r3, #0]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d006      	beq.n	800d814 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d806:	69fb      	ldr	r3, [r7, #28]
 800d808:	3301      	adds	r3, #1
 800d80a:	61fb      	str	r3, [r7, #28]
 800d80c:	69fb      	ldr	r3, [r7, #28]
 800d80e:	2b0f      	cmp	r3, #15
 800d810:	d9e9      	bls.n	800d7e6 <prvInitialiseNewTask+0x6a>
 800d812:	e000      	b.n	800d816 <prvInitialiseNewTask+0x9a>
			{
				break;
 800d814:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d818:	2200      	movs	r2, #0
 800d81a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d81e:	e003      	b.n	800d828 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d822:	2200      	movs	r2, #0
 800d824:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d82a:	2b37      	cmp	r3, #55	; 0x37
 800d82c:	d901      	bls.n	800d832 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d82e:	2337      	movs	r3, #55	; 0x37
 800d830:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d834:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d836:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d83a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d83c:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800d83e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d840:	2200      	movs	r2, #0
 800d842:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d846:	3304      	adds	r3, #4
 800d848:	4618      	mov	r0, r3
 800d84a:	f7fe fc89 	bl	800c160 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d850:	3318      	adds	r3, #24
 800d852:	4618      	mov	r0, r3
 800d854:	f7fe fc84 	bl	800c160 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d85a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d85c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d860:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d866:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d86a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d86c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800d86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d870:	2200      	movs	r2, #0
 800d872:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d876:	2200      	movs	r2, #0
 800d878:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d87e:	2200      	movs	r2, #0
 800d880:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d886:	335c      	adds	r3, #92	; 0x5c
 800d888:	224c      	movs	r2, #76	; 0x4c
 800d88a:	2100      	movs	r1, #0
 800d88c:	4618      	mov	r0, r3
 800d88e:	f001 fc25 	bl	800f0dc <memset>
 800d892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d894:	4a0c      	ldr	r2, [pc, #48]	; (800d8c8 <prvInitialiseNewTask+0x14c>)
 800d896:	661a      	str	r2, [r3, #96]	; 0x60
 800d898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d89a:	4a0c      	ldr	r2, [pc, #48]	; (800d8cc <prvInitialiseNewTask+0x150>)
 800d89c:	665a      	str	r2, [r3, #100]	; 0x64
 800d89e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8a0:	4a0b      	ldr	r2, [pc, #44]	; (800d8d0 <prvInitialiseNewTask+0x154>)
 800d8a2:	669a      	str	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d8a4:	683a      	ldr	r2, [r7, #0]
 800d8a6:	68f9      	ldr	r1, [r7, #12]
 800d8a8:	69b8      	ldr	r0, [r7, #24]
 800d8aa:	f7fe fced 	bl	800c288 <pxPortInitialiseStack>
 800d8ae:	4602      	mov	r2, r0
 800d8b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8b2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d002      	beq.n	800d8c0 <prvInitialiseNewTask+0x144>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d8ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8be:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d8c0:	bf00      	nop
 800d8c2:	3720      	adds	r7, #32
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	bd80      	pop	{r7, pc}
 800d8c8:	20004d24 	.word	0x20004d24
 800d8cc:	20004d8c 	.word	0x20004d8c
 800d8d0:	20004df4 	.word	0x20004df4

0800d8d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b082      	sub	sp, #8
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d8dc:	f7fe fe02 	bl	800c4e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d8e0:	4b2d      	ldr	r3, [pc, #180]	; (800d998 <prvAddNewTaskToReadyList+0xc4>)
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	3301      	adds	r3, #1
 800d8e6:	4a2c      	ldr	r2, [pc, #176]	; (800d998 <prvAddNewTaskToReadyList+0xc4>)
 800d8e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d8ea:	4b2c      	ldr	r3, [pc, #176]	; (800d99c <prvAddNewTaskToReadyList+0xc8>)
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d109      	bne.n	800d906 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d8f2:	4a2a      	ldr	r2, [pc, #168]	; (800d99c <prvAddNewTaskToReadyList+0xc8>)
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d8f8:	4b27      	ldr	r3, [pc, #156]	; (800d998 <prvAddNewTaskToReadyList+0xc4>)
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	2b01      	cmp	r3, #1
 800d8fe:	d110      	bne.n	800d922 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d900:	f000 fcf8 	bl	800e2f4 <prvInitialiseTaskLists>
 800d904:	e00d      	b.n	800d922 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d906:	4b26      	ldr	r3, [pc, #152]	; (800d9a0 <prvAddNewTaskToReadyList+0xcc>)
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d109      	bne.n	800d922 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d90e:	4b23      	ldr	r3, [pc, #140]	; (800d99c <prvAddNewTaskToReadyList+0xc8>)
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d918:	429a      	cmp	r2, r3
 800d91a:	d802      	bhi.n	800d922 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d91c:	4a1f      	ldr	r2, [pc, #124]	; (800d99c <prvAddNewTaskToReadyList+0xc8>)
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d922:	4b20      	ldr	r3, [pc, #128]	; (800d9a4 <prvAddNewTaskToReadyList+0xd0>)
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	3301      	adds	r3, #1
 800d928:	4a1e      	ldr	r2, [pc, #120]	; (800d9a4 <prvAddNewTaskToReadyList+0xd0>)
 800d92a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d92c:	4b1d      	ldr	r3, [pc, #116]	; (800d9a4 <prvAddNewTaskToReadyList+0xd0>)
 800d92e:	681a      	ldr	r2, [r3, #0]
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d938:	4b1b      	ldr	r3, [pc, #108]	; (800d9a8 <prvAddNewTaskToReadyList+0xd4>)
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	429a      	cmp	r2, r3
 800d93e:	d903      	bls.n	800d948 <prvAddNewTaskToReadyList+0x74>
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d944:	4a18      	ldr	r2, [pc, #96]	; (800d9a8 <prvAddNewTaskToReadyList+0xd4>)
 800d946:	6013      	str	r3, [r2, #0]
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d94c:	4613      	mov	r3, r2
 800d94e:	009b      	lsls	r3, r3, #2
 800d950:	4413      	add	r3, r2
 800d952:	009b      	lsls	r3, r3, #2
 800d954:	4a15      	ldr	r2, [pc, #84]	; (800d9ac <prvAddNewTaskToReadyList+0xd8>)
 800d956:	441a      	add	r2, r3
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	3304      	adds	r3, #4
 800d95c:	4619      	mov	r1, r3
 800d95e:	4610      	mov	r0, r2
 800d960:	f7fe fc0b 	bl	800c17a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d964:	f7fe fdee 	bl	800c544 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d968:	4b0d      	ldr	r3, [pc, #52]	; (800d9a0 <prvAddNewTaskToReadyList+0xcc>)
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d00e      	beq.n	800d98e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d970:	4b0a      	ldr	r3, [pc, #40]	; (800d99c <prvAddNewTaskToReadyList+0xc8>)
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d97a:	429a      	cmp	r2, r3
 800d97c:	d207      	bcs.n	800d98e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d97e:	4b0c      	ldr	r3, [pc, #48]	; (800d9b0 <prvAddNewTaskToReadyList+0xdc>)
 800d980:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d984:	601a      	str	r2, [r3, #0]
 800d986:	f3bf 8f4f 	dsb	sy
 800d98a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d98e:	bf00      	nop
 800d990:	3708      	adds	r7, #8
 800d992:	46bd      	mov	sp, r7
 800d994:	bd80      	pop	{r7, pc}
 800d996:	bf00      	nop
 800d998:	20004bcc 	.word	0x20004bcc
 800d99c:	200046f8 	.word	0x200046f8
 800d9a0:	20004bd8 	.word	0x20004bd8
 800d9a4:	20004be8 	.word	0x20004be8
 800d9a8:	20004bd4 	.word	0x20004bd4
 800d9ac:	200046fc 	.word	0x200046fc
 800d9b0:	e000ed04 	.word	0xe000ed04

0800d9b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b084      	sub	sp, #16
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d9bc:	2300      	movs	r3, #0
 800d9be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d017      	beq.n	800d9f6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d9c6:	4b13      	ldr	r3, [pc, #76]	; (800da14 <vTaskDelay+0x60>)
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d00a      	beq.n	800d9e4 <vTaskDelay+0x30>
	__asm volatile
 800d9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9d2:	f383 8811 	msr	BASEPRI, r3
 800d9d6:	f3bf 8f6f 	isb	sy
 800d9da:	f3bf 8f4f 	dsb	sy
 800d9de:	60bb      	str	r3, [r7, #8]
}
 800d9e0:	bf00      	nop
 800d9e2:	e7fe      	b.n	800d9e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d9e4:	f000 f88a 	bl	800dafc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d9e8:	2100      	movs	r1, #0
 800d9ea:	6878      	ldr	r0, [r7, #4]
 800d9ec:	f000 ffd4 	bl	800e998 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d9f0:	f000 f8ca 	bl	800db88 <xTaskResumeAll>
 800d9f4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d107      	bne.n	800da0c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d9fc:	4b06      	ldr	r3, [pc, #24]	; (800da18 <vTaskDelay+0x64>)
 800d9fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da02:	601a      	str	r2, [r3, #0]
 800da04:	f3bf 8f4f 	dsb	sy
 800da08:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800da0c:	bf00      	nop
 800da0e:	3710      	adds	r7, #16
 800da10:	46bd      	mov	sp, r7
 800da12:	bd80      	pop	{r7, pc}
 800da14:	20004bf4 	.word	0x20004bf4
 800da18:	e000ed04 	.word	0xe000ed04

0800da1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b08a      	sub	sp, #40	; 0x28
 800da20:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800da22:	2300      	movs	r3, #0
 800da24:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800da26:	2300      	movs	r3, #0
 800da28:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800da2a:	463a      	mov	r2, r7
 800da2c:	1d39      	adds	r1, r7, #4
 800da2e:	f107 0308 	add.w	r3, r7, #8
 800da32:	4618      	mov	r0, r3
 800da34:	f7fe f956 	bl	800bce4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800da38:	6839      	ldr	r1, [r7, #0]
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	68ba      	ldr	r2, [r7, #8]
 800da3e:	9202      	str	r2, [sp, #8]
 800da40:	9301      	str	r3, [sp, #4]
 800da42:	2300      	movs	r3, #0
 800da44:	9300      	str	r3, [sp, #0]
 800da46:	2300      	movs	r3, #0
 800da48:	460a      	mov	r2, r1
 800da4a:	4924      	ldr	r1, [pc, #144]	; (800dadc <vTaskStartScheduler+0xc0>)
 800da4c:	4824      	ldr	r0, [pc, #144]	; (800dae0 <vTaskStartScheduler+0xc4>)
 800da4e:	f7ff fdf3 	bl	800d638 <xTaskCreateStatic>
 800da52:	4603      	mov	r3, r0
 800da54:	4a23      	ldr	r2, [pc, #140]	; (800dae4 <vTaskStartScheduler+0xc8>)
 800da56:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800da58:	4b22      	ldr	r3, [pc, #136]	; (800dae4 <vTaskStartScheduler+0xc8>)
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d002      	beq.n	800da66 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800da60:	2301      	movs	r3, #1
 800da62:	617b      	str	r3, [r7, #20]
 800da64:	e001      	b.n	800da6a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800da66:	2300      	movs	r3, #0
 800da68:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800da6a:	697b      	ldr	r3, [r7, #20]
 800da6c:	2b01      	cmp	r3, #1
 800da6e:	d102      	bne.n	800da76 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800da70:	f000 ffe6 	bl	800ea40 <xTimerCreateTimerTask>
 800da74:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800da76:	697b      	ldr	r3, [r7, #20]
 800da78:	2b01      	cmp	r3, #1
 800da7a:	d11b      	bne.n	800dab4 <vTaskStartScheduler+0x98>
	__asm volatile
 800da7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da80:	f383 8811 	msr	BASEPRI, r3
 800da84:	f3bf 8f6f 	isb	sy
 800da88:	f3bf 8f4f 	dsb	sy
 800da8c:	613b      	str	r3, [r7, #16]
}
 800da8e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800da90:	4b15      	ldr	r3, [pc, #84]	; (800dae8 <vTaskStartScheduler+0xcc>)
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	335c      	adds	r3, #92	; 0x5c
 800da96:	4a15      	ldr	r2, [pc, #84]	; (800daec <vTaskStartScheduler+0xd0>)
 800da98:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800da9a:	4b15      	ldr	r3, [pc, #84]	; (800daf0 <vTaskStartScheduler+0xd4>)
 800da9c:	f04f 32ff 	mov.w	r2, #4294967295
 800daa0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800daa2:	4b14      	ldr	r3, [pc, #80]	; (800daf4 <vTaskStartScheduler+0xd8>)
 800daa4:	2201      	movs	r2, #1
 800daa6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800daa8:	4b13      	ldr	r3, [pc, #76]	; (800daf8 <vTaskStartScheduler+0xdc>)
 800daaa:	2200      	movs	r2, #0
 800daac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800daae:	f7fe fc77 	bl	800c3a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dab2:	e00e      	b.n	800dad2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dab4:	697b      	ldr	r3, [r7, #20]
 800dab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daba:	d10a      	bne.n	800dad2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800dabc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dac0:	f383 8811 	msr	BASEPRI, r3
 800dac4:	f3bf 8f6f 	isb	sy
 800dac8:	f3bf 8f4f 	dsb	sy
 800dacc:	60fb      	str	r3, [r7, #12]
}
 800dace:	bf00      	nop
 800dad0:	e7fe      	b.n	800dad0 <vTaskStartScheduler+0xb4>
}
 800dad2:	bf00      	nop
 800dad4:	3718      	adds	r7, #24
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}
 800dada:	bf00      	nop
 800dadc:	0800f31c 	.word	0x0800f31c
 800dae0:	0800e215 	.word	0x0800e215
 800dae4:	20004bf0 	.word	0x20004bf0
 800dae8:	200046f8 	.word	0x200046f8
 800daec:	20000334 	.word	0x20000334
 800daf0:	20004bec 	.word	0x20004bec
 800daf4:	20004bd8 	.word	0x20004bd8
 800daf8:	20004bd0 	.word	0x20004bd0

0800dafc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dafc:	b480      	push	{r7}
 800dafe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800db00:	4b04      	ldr	r3, [pc, #16]	; (800db14 <vTaskSuspendAll+0x18>)
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	3301      	adds	r3, #1
 800db06:	4a03      	ldr	r2, [pc, #12]	; (800db14 <vTaskSuspendAll+0x18>)
 800db08:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800db0a:	bf00      	nop
 800db0c:	46bd      	mov	sp, r7
 800db0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db12:	4770      	bx	lr
 800db14:	20004bf4 	.word	0x20004bf4

0800db18 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800db18:	b480      	push	{r7}
 800db1a:	b083      	sub	sp, #12
 800db1c:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800db1e:	2300      	movs	r3, #0
 800db20:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800db22:	4b14      	ldr	r3, [pc, #80]	; (800db74 <prvGetExpectedIdleTime+0x5c>)
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d001      	beq.n	800db2e <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800db2a:	2301      	movs	r3, #1
 800db2c:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800db2e:	4b12      	ldr	r3, [pc, #72]	; (800db78 <prvGetExpectedIdleTime+0x60>)
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db34:	2b00      	cmp	r3, #0
 800db36:	d002      	beq.n	800db3e <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 800db38:	2300      	movs	r3, #0
 800db3a:	607b      	str	r3, [r7, #4]
 800db3c:	e012      	b.n	800db64 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800db3e:	4b0f      	ldr	r3, [pc, #60]	; (800db7c <prvGetExpectedIdleTime+0x64>)
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	2b01      	cmp	r3, #1
 800db44:	d902      	bls.n	800db4c <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800db46:	2300      	movs	r3, #0
 800db48:	607b      	str	r3, [r7, #4]
 800db4a:	e00b      	b.n	800db64 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800db4c:	683b      	ldr	r3, [r7, #0]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d002      	beq.n	800db58 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800db52:	2300      	movs	r3, #0
 800db54:	607b      	str	r3, [r7, #4]
 800db56:	e005      	b.n	800db64 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800db58:	4b09      	ldr	r3, [pc, #36]	; (800db80 <prvGetExpectedIdleTime+0x68>)
 800db5a:	681a      	ldr	r2, [r3, #0]
 800db5c:	4b09      	ldr	r3, [pc, #36]	; (800db84 <prvGetExpectedIdleTime+0x6c>)
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	1ad3      	subs	r3, r2, r3
 800db62:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 800db64:	687b      	ldr	r3, [r7, #4]
	}
 800db66:	4618      	mov	r0, r3
 800db68:	370c      	adds	r7, #12
 800db6a:	46bd      	mov	sp, r7
 800db6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db70:	4770      	bx	lr
 800db72:	bf00      	nop
 800db74:	20004bd4 	.word	0x20004bd4
 800db78:	200046f8 	.word	0x200046f8
 800db7c:	200046fc 	.word	0x200046fc
 800db80:	20004bec 	.word	0x20004bec
 800db84:	20004bd0 	.word	0x20004bd0

0800db88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b084      	sub	sp, #16
 800db8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800db8e:	2300      	movs	r3, #0
 800db90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800db92:	2300      	movs	r3, #0
 800db94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800db96:	4b42      	ldr	r3, [pc, #264]	; (800dca0 <xTaskResumeAll+0x118>)
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d10a      	bne.n	800dbb4 <xTaskResumeAll+0x2c>
	__asm volatile
 800db9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dba2:	f383 8811 	msr	BASEPRI, r3
 800dba6:	f3bf 8f6f 	isb	sy
 800dbaa:	f3bf 8f4f 	dsb	sy
 800dbae:	603b      	str	r3, [r7, #0]
}
 800dbb0:	bf00      	nop
 800dbb2:	e7fe      	b.n	800dbb2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dbb4:	f7fe fc96 	bl	800c4e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dbb8:	4b39      	ldr	r3, [pc, #228]	; (800dca0 <xTaskResumeAll+0x118>)
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	3b01      	subs	r3, #1
 800dbbe:	4a38      	ldr	r2, [pc, #224]	; (800dca0 <xTaskResumeAll+0x118>)
 800dbc0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dbc2:	4b37      	ldr	r3, [pc, #220]	; (800dca0 <xTaskResumeAll+0x118>)
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d162      	bne.n	800dc90 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dbca:	4b36      	ldr	r3, [pc, #216]	; (800dca4 <xTaskResumeAll+0x11c>)
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d05e      	beq.n	800dc90 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dbd2:	e02f      	b.n	800dc34 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dbd4:	4b34      	ldr	r3, [pc, #208]	; (800dca8 <xTaskResumeAll+0x120>)
 800dbd6:	68db      	ldr	r3, [r3, #12]
 800dbd8:	68db      	ldr	r3, [r3, #12]
 800dbda:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	3318      	adds	r3, #24
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	f7fe fb27 	bl	800c234 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	3304      	adds	r3, #4
 800dbea:	4618      	mov	r0, r3
 800dbec:	f7fe fb22 	bl	800c234 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbf4:	4b2d      	ldr	r3, [pc, #180]	; (800dcac <xTaskResumeAll+0x124>)
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	429a      	cmp	r2, r3
 800dbfa:	d903      	bls.n	800dc04 <xTaskResumeAll+0x7c>
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc00:	4a2a      	ldr	r2, [pc, #168]	; (800dcac <xTaskResumeAll+0x124>)
 800dc02:	6013      	str	r3, [r2, #0]
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc08:	4613      	mov	r3, r2
 800dc0a:	009b      	lsls	r3, r3, #2
 800dc0c:	4413      	add	r3, r2
 800dc0e:	009b      	lsls	r3, r3, #2
 800dc10:	4a27      	ldr	r2, [pc, #156]	; (800dcb0 <xTaskResumeAll+0x128>)
 800dc12:	441a      	add	r2, r3
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	3304      	adds	r3, #4
 800dc18:	4619      	mov	r1, r3
 800dc1a:	4610      	mov	r0, r2
 800dc1c:	f7fe faad 	bl	800c17a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc24:	4b23      	ldr	r3, [pc, #140]	; (800dcb4 <xTaskResumeAll+0x12c>)
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc2a:	429a      	cmp	r2, r3
 800dc2c:	d302      	bcc.n	800dc34 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800dc2e:	4b22      	ldr	r3, [pc, #136]	; (800dcb8 <xTaskResumeAll+0x130>)
 800dc30:	2201      	movs	r2, #1
 800dc32:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dc34:	4b1c      	ldr	r3, [pc, #112]	; (800dca8 <xTaskResumeAll+0x120>)
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d1cb      	bne.n	800dbd4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d001      	beq.n	800dc46 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dc42:	f000 fbf9 	bl	800e438 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800dc46:	4b1d      	ldr	r3, [pc, #116]	; (800dcbc <xTaskResumeAll+0x134>)
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d010      	beq.n	800dc74 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dc52:	f000 f86f 	bl	800dd34 <xTaskIncrementTick>
 800dc56:	4603      	mov	r3, r0
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d002      	beq.n	800dc62 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800dc5c:	4b16      	ldr	r3, [pc, #88]	; (800dcb8 <xTaskResumeAll+0x130>)
 800dc5e:	2201      	movs	r2, #1
 800dc60:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	3b01      	subs	r3, #1
 800dc66:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d1f1      	bne.n	800dc52 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800dc6e:	4b13      	ldr	r3, [pc, #76]	; (800dcbc <xTaskResumeAll+0x134>)
 800dc70:	2200      	movs	r2, #0
 800dc72:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800dc74:	4b10      	ldr	r3, [pc, #64]	; (800dcb8 <xTaskResumeAll+0x130>)
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d009      	beq.n	800dc90 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dc7c:	2301      	movs	r3, #1
 800dc7e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dc80:	4b0f      	ldr	r3, [pc, #60]	; (800dcc0 <xTaskResumeAll+0x138>)
 800dc82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc86:	601a      	str	r2, [r3, #0]
 800dc88:	f3bf 8f4f 	dsb	sy
 800dc8c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dc90:	f7fe fc58 	bl	800c544 <vPortExitCritical>

	return xAlreadyYielded;
 800dc94:	68bb      	ldr	r3, [r7, #8]
}
 800dc96:	4618      	mov	r0, r3
 800dc98:	3710      	adds	r7, #16
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	bd80      	pop	{r7, pc}
 800dc9e:	bf00      	nop
 800dca0:	20004bf4 	.word	0x20004bf4
 800dca4:	20004bcc 	.word	0x20004bcc
 800dca8:	20004b8c 	.word	0x20004b8c
 800dcac:	20004bd4 	.word	0x20004bd4
 800dcb0:	200046fc 	.word	0x200046fc
 800dcb4:	200046f8 	.word	0x200046f8
 800dcb8:	20004be0 	.word	0x20004be0
 800dcbc:	20004bdc 	.word	0x20004bdc
 800dcc0:	e000ed04 	.word	0xe000ed04

0800dcc4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800dcc4:	b480      	push	{r7}
 800dcc6:	b083      	sub	sp, #12
 800dcc8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800dcca:	4b05      	ldr	r3, [pc, #20]	; (800dce0 <xTaskGetTickCount+0x1c>)
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800dcd0:	687b      	ldr	r3, [r7, #4]
}
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	370c      	adds	r7, #12
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcdc:	4770      	bx	lr
 800dcde:	bf00      	nop
 800dce0:	20004bd0 	.word	0x20004bd0

0800dce4 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 800dce4:	b480      	push	{r7}
 800dce6:	b085      	sub	sp, #20
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 800dcec:	4b0f      	ldr	r3, [pc, #60]	; (800dd2c <vTaskStepTick+0x48>)
 800dcee:	681a      	ldr	r2, [r3, #0]
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	441a      	add	r2, r3
 800dcf4:	4b0e      	ldr	r3, [pc, #56]	; (800dd30 <vTaskStepTick+0x4c>)
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	429a      	cmp	r2, r3
 800dcfa:	d90a      	bls.n	800dd12 <vTaskStepTick+0x2e>
	__asm volatile
 800dcfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd00:	f383 8811 	msr	BASEPRI, r3
 800dd04:	f3bf 8f6f 	isb	sy
 800dd08:	f3bf 8f4f 	dsb	sy
 800dd0c:	60fb      	str	r3, [r7, #12]
}
 800dd0e:	bf00      	nop
 800dd10:	e7fe      	b.n	800dd10 <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 800dd12:	4b06      	ldr	r3, [pc, #24]	; (800dd2c <vTaskStepTick+0x48>)
 800dd14:	681a      	ldr	r2, [r3, #0]
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	4413      	add	r3, r2
 800dd1a:	4a04      	ldr	r2, [pc, #16]	; (800dd2c <vTaskStepTick+0x48>)
 800dd1c:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 800dd1e:	bf00      	nop
 800dd20:	3714      	adds	r7, #20
 800dd22:	46bd      	mov	sp, r7
 800dd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd28:	4770      	bx	lr
 800dd2a:	bf00      	nop
 800dd2c:	20004bd0 	.word	0x20004bd0
 800dd30:	20004bec 	.word	0x20004bec

0800dd34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b086      	sub	sp, #24
 800dd38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dd3e:	4b53      	ldr	r3, [pc, #332]	; (800de8c <xTaskIncrementTick+0x158>)
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	f040 8095 	bne.w	800de72 <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dd48:	4b51      	ldr	r3, [pc, #324]	; (800de90 <xTaskIncrementTick+0x15c>)
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	3301      	adds	r3, #1
 800dd4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dd50:	4a4f      	ldr	r2, [pc, #316]	; (800de90 <xTaskIncrementTick+0x15c>)
 800dd52:	693b      	ldr	r3, [r7, #16]
 800dd54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dd56:	693b      	ldr	r3, [r7, #16]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d120      	bne.n	800dd9e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800dd5c:	4b4d      	ldr	r3, [pc, #308]	; (800de94 <xTaskIncrementTick+0x160>)
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d00a      	beq.n	800dd7c <xTaskIncrementTick+0x48>
	__asm volatile
 800dd66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd6a:	f383 8811 	msr	BASEPRI, r3
 800dd6e:	f3bf 8f6f 	isb	sy
 800dd72:	f3bf 8f4f 	dsb	sy
 800dd76:	603b      	str	r3, [r7, #0]
}
 800dd78:	bf00      	nop
 800dd7a:	e7fe      	b.n	800dd7a <xTaskIncrementTick+0x46>
 800dd7c:	4b45      	ldr	r3, [pc, #276]	; (800de94 <xTaskIncrementTick+0x160>)
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	60fb      	str	r3, [r7, #12]
 800dd82:	4b45      	ldr	r3, [pc, #276]	; (800de98 <xTaskIncrementTick+0x164>)
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	4a43      	ldr	r2, [pc, #268]	; (800de94 <xTaskIncrementTick+0x160>)
 800dd88:	6013      	str	r3, [r2, #0]
 800dd8a:	4a43      	ldr	r2, [pc, #268]	; (800de98 <xTaskIncrementTick+0x164>)
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	6013      	str	r3, [r2, #0]
 800dd90:	4b42      	ldr	r3, [pc, #264]	; (800de9c <xTaskIncrementTick+0x168>)
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	3301      	adds	r3, #1
 800dd96:	4a41      	ldr	r2, [pc, #260]	; (800de9c <xTaskIncrementTick+0x168>)
 800dd98:	6013      	str	r3, [r2, #0]
 800dd9a:	f000 fb4d 	bl	800e438 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dd9e:	4b40      	ldr	r3, [pc, #256]	; (800dea0 <xTaskIncrementTick+0x16c>)
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	693a      	ldr	r2, [r7, #16]
 800dda4:	429a      	cmp	r2, r3
 800dda6:	d349      	bcc.n	800de3c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dda8:	4b3a      	ldr	r3, [pc, #232]	; (800de94 <xTaskIncrementTick+0x160>)
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d104      	bne.n	800ddbc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ddb2:	4b3b      	ldr	r3, [pc, #236]	; (800dea0 <xTaskIncrementTick+0x16c>)
 800ddb4:	f04f 32ff 	mov.w	r2, #4294967295
 800ddb8:	601a      	str	r2, [r3, #0]
					break;
 800ddba:	e03f      	b.n	800de3c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ddbc:	4b35      	ldr	r3, [pc, #212]	; (800de94 <xTaskIncrementTick+0x160>)
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	68db      	ldr	r3, [r3, #12]
 800ddc2:	68db      	ldr	r3, [r3, #12]
 800ddc4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ddc6:	68bb      	ldr	r3, [r7, #8]
 800ddc8:	685b      	ldr	r3, [r3, #4]
 800ddca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ddcc:	693a      	ldr	r2, [r7, #16]
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	429a      	cmp	r2, r3
 800ddd2:	d203      	bcs.n	800dddc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ddd4:	4a32      	ldr	r2, [pc, #200]	; (800dea0 <xTaskIncrementTick+0x16c>)
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ddda:	e02f      	b.n	800de3c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dddc:	68bb      	ldr	r3, [r7, #8]
 800ddde:	3304      	adds	r3, #4
 800dde0:	4618      	mov	r0, r3
 800dde2:	f7fe fa27 	bl	800c234 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dde6:	68bb      	ldr	r3, [r7, #8]
 800dde8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d004      	beq.n	800ddf8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ddee:	68bb      	ldr	r3, [r7, #8]
 800ddf0:	3318      	adds	r3, #24
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	f7fe fa1e 	bl	800c234 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ddf8:	68bb      	ldr	r3, [r7, #8]
 800ddfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddfc:	4b29      	ldr	r3, [pc, #164]	; (800dea4 <xTaskIncrementTick+0x170>)
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	429a      	cmp	r2, r3
 800de02:	d903      	bls.n	800de0c <xTaskIncrementTick+0xd8>
 800de04:	68bb      	ldr	r3, [r7, #8]
 800de06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de08:	4a26      	ldr	r2, [pc, #152]	; (800dea4 <xTaskIncrementTick+0x170>)
 800de0a:	6013      	str	r3, [r2, #0]
 800de0c:	68bb      	ldr	r3, [r7, #8]
 800de0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de10:	4613      	mov	r3, r2
 800de12:	009b      	lsls	r3, r3, #2
 800de14:	4413      	add	r3, r2
 800de16:	009b      	lsls	r3, r3, #2
 800de18:	4a23      	ldr	r2, [pc, #140]	; (800dea8 <xTaskIncrementTick+0x174>)
 800de1a:	441a      	add	r2, r3
 800de1c:	68bb      	ldr	r3, [r7, #8]
 800de1e:	3304      	adds	r3, #4
 800de20:	4619      	mov	r1, r3
 800de22:	4610      	mov	r0, r2
 800de24:	f7fe f9a9 	bl	800c17a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800de28:	68bb      	ldr	r3, [r7, #8]
 800de2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de2c:	4b1f      	ldr	r3, [pc, #124]	; (800deac <xTaskIncrementTick+0x178>)
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de32:	429a      	cmp	r2, r3
 800de34:	d3b8      	bcc.n	800dda8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800de36:	2301      	movs	r3, #1
 800de38:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800de3a:	e7b5      	b.n	800dda8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800de3c:	4b1b      	ldr	r3, [pc, #108]	; (800deac <xTaskIncrementTick+0x178>)
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de42:	4919      	ldr	r1, [pc, #100]	; (800dea8 <xTaskIncrementTick+0x174>)
 800de44:	4613      	mov	r3, r2
 800de46:	009b      	lsls	r3, r3, #2
 800de48:	4413      	add	r3, r2
 800de4a:	009b      	lsls	r3, r3, #2
 800de4c:	440b      	add	r3, r1
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	2b01      	cmp	r3, #1
 800de52:	d901      	bls.n	800de58 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800de54:	2301      	movs	r3, #1
 800de56:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 800de58:	4b15      	ldr	r3, [pc, #84]	; (800deb0 <xTaskIncrementTick+0x17c>)
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d101      	bne.n	800de64 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 800de60:	f7f4 fc59 	bl	8002716 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800de64:	4b13      	ldr	r3, [pc, #76]	; (800deb4 <xTaskIncrementTick+0x180>)
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d009      	beq.n	800de80 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 800de6c:	2301      	movs	r3, #1
 800de6e:	617b      	str	r3, [r7, #20]
 800de70:	e006      	b.n	800de80 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800de72:	4b0f      	ldr	r3, [pc, #60]	; (800deb0 <xTaskIncrementTick+0x17c>)
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	3301      	adds	r3, #1
 800de78:	4a0d      	ldr	r2, [pc, #52]	; (800deb0 <xTaskIncrementTick+0x17c>)
 800de7a:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 800de7c:	f7f4 fc4b 	bl	8002716 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 800de80:	697b      	ldr	r3, [r7, #20]
}
 800de82:	4618      	mov	r0, r3
 800de84:	3718      	adds	r7, #24
 800de86:	46bd      	mov	sp, r7
 800de88:	bd80      	pop	{r7, pc}
 800de8a:	bf00      	nop
 800de8c:	20004bf4 	.word	0x20004bf4
 800de90:	20004bd0 	.word	0x20004bd0
 800de94:	20004b84 	.word	0x20004b84
 800de98:	20004b88 	.word	0x20004b88
 800de9c:	20004be4 	.word	0x20004be4
 800dea0:	20004bec 	.word	0x20004bec
 800dea4:	20004bd4 	.word	0x20004bd4
 800dea8:	200046fc 	.word	0x200046fc
 800deac:	200046f8 	.word	0x200046f8
 800deb0:	20004bdc 	.word	0x20004bdc
 800deb4:	20004be0 	.word	0x20004be0

0800deb8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b084      	sub	sp, #16
 800debc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800debe:	4b32      	ldr	r3, [pc, #200]	; (800df88 <vTaskSwitchContext+0xd0>)
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d003      	beq.n	800dece <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dec6:	4b31      	ldr	r3, [pc, #196]	; (800df8c <vTaskSwitchContext+0xd4>)
 800dec8:	2201      	movs	r2, #1
 800deca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800decc:	e057      	b.n	800df7e <vTaskSwitchContext+0xc6>
		xYieldPending = pdFALSE;
 800dece:	4b2f      	ldr	r3, [pc, #188]	; (800df8c <vTaskSwitchContext+0xd4>)
 800ded0:	2200      	movs	r2, #0
 800ded2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800ded4:	4b2e      	ldr	r3, [pc, #184]	; (800df90 <vTaskSwitchContext+0xd8>)
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	681a      	ldr	r2, [r3, #0]
 800deda:	4b2d      	ldr	r3, [pc, #180]	; (800df90 <vTaskSwitchContext+0xd8>)
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dee0:	429a      	cmp	r2, r3
 800dee2:	d808      	bhi.n	800def6 <vTaskSwitchContext+0x3e>
 800dee4:	4b2a      	ldr	r3, [pc, #168]	; (800df90 <vTaskSwitchContext+0xd8>)
 800dee6:	681a      	ldr	r2, [r3, #0]
 800dee8:	4b29      	ldr	r3, [pc, #164]	; (800df90 <vTaskSwitchContext+0xd8>)
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	3334      	adds	r3, #52	; 0x34
 800deee:	4619      	mov	r1, r3
 800def0:	4610      	mov	r0, r2
 800def2:	f7f4 fc17 	bl	8002724 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800def6:	4b27      	ldr	r3, [pc, #156]	; (800df94 <vTaskSwitchContext+0xdc>)
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	60fb      	str	r3, [r7, #12]
 800defc:	e010      	b.n	800df20 <vTaskSwitchContext+0x68>
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d10a      	bne.n	800df1a <vTaskSwitchContext+0x62>
	__asm volatile
 800df04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df08:	f383 8811 	msr	BASEPRI, r3
 800df0c:	f3bf 8f6f 	isb	sy
 800df10:	f3bf 8f4f 	dsb	sy
 800df14:	607b      	str	r3, [r7, #4]
}
 800df16:	bf00      	nop
 800df18:	e7fe      	b.n	800df18 <vTaskSwitchContext+0x60>
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	3b01      	subs	r3, #1
 800df1e:	60fb      	str	r3, [r7, #12]
 800df20:	491d      	ldr	r1, [pc, #116]	; (800df98 <vTaskSwitchContext+0xe0>)
 800df22:	68fa      	ldr	r2, [r7, #12]
 800df24:	4613      	mov	r3, r2
 800df26:	009b      	lsls	r3, r3, #2
 800df28:	4413      	add	r3, r2
 800df2a:	009b      	lsls	r3, r3, #2
 800df2c:	440b      	add	r3, r1
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d0e4      	beq.n	800defe <vTaskSwitchContext+0x46>
 800df34:	68fa      	ldr	r2, [r7, #12]
 800df36:	4613      	mov	r3, r2
 800df38:	009b      	lsls	r3, r3, #2
 800df3a:	4413      	add	r3, r2
 800df3c:	009b      	lsls	r3, r3, #2
 800df3e:	4a16      	ldr	r2, [pc, #88]	; (800df98 <vTaskSwitchContext+0xe0>)
 800df40:	4413      	add	r3, r2
 800df42:	60bb      	str	r3, [r7, #8]
 800df44:	68bb      	ldr	r3, [r7, #8]
 800df46:	685b      	ldr	r3, [r3, #4]
 800df48:	685a      	ldr	r2, [r3, #4]
 800df4a:	68bb      	ldr	r3, [r7, #8]
 800df4c:	605a      	str	r2, [r3, #4]
 800df4e:	68bb      	ldr	r3, [r7, #8]
 800df50:	685a      	ldr	r2, [r3, #4]
 800df52:	68bb      	ldr	r3, [r7, #8]
 800df54:	3308      	adds	r3, #8
 800df56:	429a      	cmp	r2, r3
 800df58:	d104      	bne.n	800df64 <vTaskSwitchContext+0xac>
 800df5a:	68bb      	ldr	r3, [r7, #8]
 800df5c:	685b      	ldr	r3, [r3, #4]
 800df5e:	685a      	ldr	r2, [r3, #4]
 800df60:	68bb      	ldr	r3, [r7, #8]
 800df62:	605a      	str	r2, [r3, #4]
 800df64:	68bb      	ldr	r3, [r7, #8]
 800df66:	685b      	ldr	r3, [r3, #4]
 800df68:	68db      	ldr	r3, [r3, #12]
 800df6a:	4a09      	ldr	r2, [pc, #36]	; (800df90 <vTaskSwitchContext+0xd8>)
 800df6c:	6013      	str	r3, [r2, #0]
 800df6e:	4a09      	ldr	r2, [pc, #36]	; (800df94 <vTaskSwitchContext+0xdc>)
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800df74:	4b06      	ldr	r3, [pc, #24]	; (800df90 <vTaskSwitchContext+0xd8>)
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	335c      	adds	r3, #92	; 0x5c
 800df7a:	4a08      	ldr	r2, [pc, #32]	; (800df9c <vTaskSwitchContext+0xe4>)
 800df7c:	6013      	str	r3, [r2, #0]
}
 800df7e:	bf00      	nop
 800df80:	3710      	adds	r7, #16
 800df82:	46bd      	mov	sp, r7
 800df84:	bd80      	pop	{r7, pc}
 800df86:	bf00      	nop
 800df88:	20004bf4 	.word	0x20004bf4
 800df8c:	20004be0 	.word	0x20004be0
 800df90:	200046f8 	.word	0x200046f8
 800df94:	20004bd4 	.word	0x20004bd4
 800df98:	200046fc 	.word	0x200046fc
 800df9c:	20000334 	.word	0x20000334

0800dfa0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b084      	sub	sp, #16
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
 800dfa8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d10a      	bne.n	800dfc6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800dfb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfb4:	f383 8811 	msr	BASEPRI, r3
 800dfb8:	f3bf 8f6f 	isb	sy
 800dfbc:	f3bf 8f4f 	dsb	sy
 800dfc0:	60fb      	str	r3, [r7, #12]
}
 800dfc2:	bf00      	nop
 800dfc4:	e7fe      	b.n	800dfc4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dfc6:	4b07      	ldr	r3, [pc, #28]	; (800dfe4 <vTaskPlaceOnEventList+0x44>)
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	3318      	adds	r3, #24
 800dfcc:	4619      	mov	r1, r3
 800dfce:	6878      	ldr	r0, [r7, #4]
 800dfd0:	f7fe f8f7 	bl	800c1c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dfd4:	2101      	movs	r1, #1
 800dfd6:	6838      	ldr	r0, [r7, #0]
 800dfd8:	f000 fcde 	bl	800e998 <prvAddCurrentTaskToDelayedList>
}
 800dfdc:	bf00      	nop
 800dfde:	3710      	adds	r7, #16
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	bd80      	pop	{r7, pc}
 800dfe4:	200046f8 	.word	0x200046f8

0800dfe8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b086      	sub	sp, #24
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	60f8      	str	r0, [r7, #12]
 800dff0:	60b9      	str	r1, [r7, #8]
 800dff2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d10a      	bne.n	800e010 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800dffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dffe:	f383 8811 	msr	BASEPRI, r3
 800e002:	f3bf 8f6f 	isb	sy
 800e006:	f3bf 8f4f 	dsb	sy
 800e00a:	617b      	str	r3, [r7, #20]
}
 800e00c:	bf00      	nop
 800e00e:	e7fe      	b.n	800e00e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e010:	4b0a      	ldr	r3, [pc, #40]	; (800e03c <vTaskPlaceOnEventListRestricted+0x54>)
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	3318      	adds	r3, #24
 800e016:	4619      	mov	r1, r3
 800e018:	68f8      	ldr	r0, [r7, #12]
 800e01a:	f7fe f8ae 	bl	800c17a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d002      	beq.n	800e02a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e024:	f04f 33ff 	mov.w	r3, #4294967295
 800e028:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e02a:	6879      	ldr	r1, [r7, #4]
 800e02c:	68b8      	ldr	r0, [r7, #8]
 800e02e:	f000 fcb3 	bl	800e998 <prvAddCurrentTaskToDelayedList>
	}
 800e032:	bf00      	nop
 800e034:	3718      	adds	r7, #24
 800e036:	46bd      	mov	sp, r7
 800e038:	bd80      	pop	{r7, pc}
 800e03a:	bf00      	nop
 800e03c:	200046f8 	.word	0x200046f8

0800e040 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b086      	sub	sp, #24
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	68db      	ldr	r3, [r3, #12]
 800e04c:	68db      	ldr	r3, [r3, #12]
 800e04e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e050:	693b      	ldr	r3, [r7, #16]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d10a      	bne.n	800e06c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e05a:	f383 8811 	msr	BASEPRI, r3
 800e05e:	f3bf 8f6f 	isb	sy
 800e062:	f3bf 8f4f 	dsb	sy
 800e066:	60fb      	str	r3, [r7, #12]
}
 800e068:	bf00      	nop
 800e06a:	e7fe      	b.n	800e06a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e06c:	693b      	ldr	r3, [r7, #16]
 800e06e:	3318      	adds	r3, #24
 800e070:	4618      	mov	r0, r3
 800e072:	f7fe f8df 	bl	800c234 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e076:	4b1f      	ldr	r3, [pc, #124]	; (800e0f4 <xTaskRemoveFromEventList+0xb4>)
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d11f      	bne.n	800e0be <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e07e:	693b      	ldr	r3, [r7, #16]
 800e080:	3304      	adds	r3, #4
 800e082:	4618      	mov	r0, r3
 800e084:	f7fe f8d6 	bl	800c234 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e088:	693b      	ldr	r3, [r7, #16]
 800e08a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e08c:	4b1a      	ldr	r3, [pc, #104]	; (800e0f8 <xTaskRemoveFromEventList+0xb8>)
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	429a      	cmp	r2, r3
 800e092:	d903      	bls.n	800e09c <xTaskRemoveFromEventList+0x5c>
 800e094:	693b      	ldr	r3, [r7, #16]
 800e096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e098:	4a17      	ldr	r2, [pc, #92]	; (800e0f8 <xTaskRemoveFromEventList+0xb8>)
 800e09a:	6013      	str	r3, [r2, #0]
 800e09c:	693b      	ldr	r3, [r7, #16]
 800e09e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0a0:	4613      	mov	r3, r2
 800e0a2:	009b      	lsls	r3, r3, #2
 800e0a4:	4413      	add	r3, r2
 800e0a6:	009b      	lsls	r3, r3, #2
 800e0a8:	4a14      	ldr	r2, [pc, #80]	; (800e0fc <xTaskRemoveFromEventList+0xbc>)
 800e0aa:	441a      	add	r2, r3
 800e0ac:	693b      	ldr	r3, [r7, #16]
 800e0ae:	3304      	adds	r3, #4
 800e0b0:	4619      	mov	r1, r3
 800e0b2:	4610      	mov	r0, r2
 800e0b4:	f7fe f861 	bl	800c17a <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 800e0b8:	f000 f9be 	bl	800e438 <prvResetNextTaskUnblockTime>
 800e0bc:	e005      	b.n	800e0ca <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e0be:	693b      	ldr	r3, [r7, #16]
 800e0c0:	3318      	adds	r3, #24
 800e0c2:	4619      	mov	r1, r3
 800e0c4:	480e      	ldr	r0, [pc, #56]	; (800e100 <xTaskRemoveFromEventList+0xc0>)
 800e0c6:	f7fe f858 	bl	800c17a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e0ca:	693b      	ldr	r3, [r7, #16]
 800e0cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0ce:	4b0d      	ldr	r3, [pc, #52]	; (800e104 <xTaskRemoveFromEventList+0xc4>)
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0d4:	429a      	cmp	r2, r3
 800e0d6:	d905      	bls.n	800e0e4 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e0d8:	2301      	movs	r3, #1
 800e0da:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e0dc:	4b0a      	ldr	r3, [pc, #40]	; (800e108 <xTaskRemoveFromEventList+0xc8>)
 800e0de:	2201      	movs	r2, #1
 800e0e0:	601a      	str	r2, [r3, #0]
 800e0e2:	e001      	b.n	800e0e8 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e0e8:	697b      	ldr	r3, [r7, #20]
}
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	3718      	adds	r7, #24
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd80      	pop	{r7, pc}
 800e0f2:	bf00      	nop
 800e0f4:	20004bf4 	.word	0x20004bf4
 800e0f8:	20004bd4 	.word	0x20004bd4
 800e0fc:	200046fc 	.word	0x200046fc
 800e100:	20004b8c 	.word	0x20004b8c
 800e104:	200046f8 	.word	0x200046f8
 800e108:	20004be0 	.word	0x20004be0

0800e10c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e10c:	b480      	push	{r7}
 800e10e:	b083      	sub	sp, #12
 800e110:	af00      	add	r7, sp, #0
 800e112:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e114:	4b06      	ldr	r3, [pc, #24]	; (800e130 <vTaskInternalSetTimeOutState+0x24>)
 800e116:	681a      	ldr	r2, [r3, #0]
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e11c:	4b05      	ldr	r3, [pc, #20]	; (800e134 <vTaskInternalSetTimeOutState+0x28>)
 800e11e:	681a      	ldr	r2, [r3, #0]
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	605a      	str	r2, [r3, #4]
}
 800e124:	bf00      	nop
 800e126:	370c      	adds	r7, #12
 800e128:	46bd      	mov	sp, r7
 800e12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12e:	4770      	bx	lr
 800e130:	20004be4 	.word	0x20004be4
 800e134:	20004bd0 	.word	0x20004bd0

0800e138 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b088      	sub	sp, #32
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
 800e140:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d10a      	bne.n	800e15e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e14c:	f383 8811 	msr	BASEPRI, r3
 800e150:	f3bf 8f6f 	isb	sy
 800e154:	f3bf 8f4f 	dsb	sy
 800e158:	613b      	str	r3, [r7, #16]
}
 800e15a:	bf00      	nop
 800e15c:	e7fe      	b.n	800e15c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e15e:	683b      	ldr	r3, [r7, #0]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d10a      	bne.n	800e17a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e168:	f383 8811 	msr	BASEPRI, r3
 800e16c:	f3bf 8f6f 	isb	sy
 800e170:	f3bf 8f4f 	dsb	sy
 800e174:	60fb      	str	r3, [r7, #12]
}
 800e176:	bf00      	nop
 800e178:	e7fe      	b.n	800e178 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e17a:	f7fe f9b3 	bl	800c4e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e17e:	4b1d      	ldr	r3, [pc, #116]	; (800e1f4 <xTaskCheckForTimeOut+0xbc>)
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	685b      	ldr	r3, [r3, #4]
 800e188:	69ba      	ldr	r2, [r7, #24]
 800e18a:	1ad3      	subs	r3, r2, r3
 800e18c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e18e:	683b      	ldr	r3, [r7, #0]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e196:	d102      	bne.n	800e19e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e198:	2300      	movs	r3, #0
 800e19a:	61fb      	str	r3, [r7, #28]
 800e19c:	e023      	b.n	800e1e6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	681a      	ldr	r2, [r3, #0]
 800e1a2:	4b15      	ldr	r3, [pc, #84]	; (800e1f8 <xTaskCheckForTimeOut+0xc0>)
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	429a      	cmp	r2, r3
 800e1a8:	d007      	beq.n	800e1ba <xTaskCheckForTimeOut+0x82>
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	685b      	ldr	r3, [r3, #4]
 800e1ae:	69ba      	ldr	r2, [r7, #24]
 800e1b0:	429a      	cmp	r2, r3
 800e1b2:	d302      	bcc.n	800e1ba <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e1b4:	2301      	movs	r3, #1
 800e1b6:	61fb      	str	r3, [r7, #28]
 800e1b8:	e015      	b.n	800e1e6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e1ba:	683b      	ldr	r3, [r7, #0]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	697a      	ldr	r2, [r7, #20]
 800e1c0:	429a      	cmp	r2, r3
 800e1c2:	d20b      	bcs.n	800e1dc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e1c4:	683b      	ldr	r3, [r7, #0]
 800e1c6:	681a      	ldr	r2, [r3, #0]
 800e1c8:	697b      	ldr	r3, [r7, #20]
 800e1ca:	1ad2      	subs	r2, r2, r3
 800e1cc:	683b      	ldr	r3, [r7, #0]
 800e1ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e1d0:	6878      	ldr	r0, [r7, #4]
 800e1d2:	f7ff ff9b 	bl	800e10c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	61fb      	str	r3, [r7, #28]
 800e1da:	e004      	b.n	800e1e6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e1dc:	683b      	ldr	r3, [r7, #0]
 800e1de:	2200      	movs	r2, #0
 800e1e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e1e2:	2301      	movs	r3, #1
 800e1e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e1e6:	f7fe f9ad 	bl	800c544 <vPortExitCritical>

	return xReturn;
 800e1ea:	69fb      	ldr	r3, [r7, #28]
}
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	3720      	adds	r7, #32
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	bd80      	pop	{r7, pc}
 800e1f4:	20004bd0 	.word	0x20004bd0
 800e1f8:	20004be4 	.word	0x20004be4

0800e1fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e1fc:	b480      	push	{r7}
 800e1fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e200:	4b03      	ldr	r3, [pc, #12]	; (800e210 <vTaskMissedYield+0x14>)
 800e202:	2201      	movs	r2, #1
 800e204:	601a      	str	r2, [r3, #0]
}
 800e206:	bf00      	nop
 800e208:	46bd      	mov	sp, r7
 800e20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20e:	4770      	bx	lr
 800e210:	20004be0 	.word	0x20004be0

0800e214 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e214:	b580      	push	{r7, lr}
 800e216:	b084      	sub	sp, #16
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e21c:	f000 f8aa 	bl	800e374 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e220:	4b19      	ldr	r3, [pc, #100]	; (800e288 <prvIdleTask+0x74>)
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	2b01      	cmp	r3, #1
 800e226:	d907      	bls.n	800e238 <prvIdleTask+0x24>
			{
				taskYIELD();
 800e228:	4b18      	ldr	r3, [pc, #96]	; (800e28c <prvIdleTask+0x78>)
 800e22a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e22e:	601a      	str	r2, [r3, #0]
 800e230:	f3bf 8f4f 	dsb	sy
 800e234:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800e238:	f7f4 fa66 	bl	8002708 <vApplicationIdleHook>
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800e23c:	f7ff fc6c 	bl	800db18 <prvGetExpectedIdleTime>
 800e240:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	2b01      	cmp	r3, #1
 800e246:	d9e9      	bls.n	800e21c <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800e248:	f7ff fc58 	bl	800dafc <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800e24c:	4b10      	ldr	r3, [pc, #64]	; (800e290 <prvIdleTask+0x7c>)
 800e24e:	681a      	ldr	r2, [r3, #0]
 800e250:	4b10      	ldr	r3, [pc, #64]	; (800e294 <prvIdleTask+0x80>)
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	429a      	cmp	r2, r3
 800e256:	d20a      	bcs.n	800e26e <prvIdleTask+0x5a>
	__asm volatile
 800e258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e25c:	f383 8811 	msr	BASEPRI, r3
 800e260:	f3bf 8f6f 	isb	sy
 800e264:	f3bf 8f4f 	dsb	sy
 800e268:	60bb      	str	r3, [r7, #8]
}
 800e26a:	bf00      	nop
 800e26c:	e7fe      	b.n	800e26c <prvIdleTask+0x58>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800e26e:	f7ff fc53 	bl	800db18 <prvGetExpectedIdleTime>
 800e272:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	2b01      	cmp	r3, #1
 800e278:	d902      	bls.n	800e280 <prvIdleTask+0x6c>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800e27a:	68f8      	ldr	r0, [r7, #12]
 800e27c:	f7fe f9e6 	bl	800c64c <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800e280:	f7ff fc82 	bl	800db88 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800e284:	e7ca      	b.n	800e21c <prvIdleTask+0x8>
 800e286:	bf00      	nop
 800e288:	200046fc 	.word	0x200046fc
 800e28c:	e000ed04 	.word	0xe000ed04
 800e290:	20004bec 	.word	0x20004bec
 800e294:	20004bd0 	.word	0x20004bd0

0800e298 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 800e298:	b480      	push	{r7}
 800e29a:	b083      	sub	sp, #12
 800e29c:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 800e29e:	2301      	movs	r3, #1
 800e2a0:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 800e2a2:	2301      	movs	r3, #1
 800e2a4:	71fb      	strb	r3, [r7, #7]

		/* This function must be called from a critical section. */

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 800e2a6:	4b0f      	ldr	r3, [pc, #60]	; (800e2e4 <eTaskConfirmSleepModeStatus+0x4c>)
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d002      	beq.n	800e2b4 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	71fb      	strb	r3, [r7, #7]
 800e2b2:	e010      	b.n	800e2d6 <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 800e2b4:	4b0c      	ldr	r3, [pc, #48]	; (800e2e8 <eTaskConfirmSleepModeStatus+0x50>)
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d002      	beq.n	800e2c2 <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800e2bc:	2300      	movs	r3, #0
 800e2be:	71fb      	strb	r3, [r7, #7]
 800e2c0:	e009      	b.n	800e2d6 <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 800e2c2:	4b0a      	ldr	r3, [pc, #40]	; (800e2ec <eTaskConfirmSleepModeStatus+0x54>)
 800e2c4:	681a      	ldr	r2, [r3, #0]
 800e2c6:	4b0a      	ldr	r3, [pc, #40]	; (800e2f0 <eTaskConfirmSleepModeStatus+0x58>)
 800e2c8:	6819      	ldr	r1, [r3, #0]
 800e2ca:	683b      	ldr	r3, [r7, #0]
 800e2cc:	1acb      	subs	r3, r1, r3
 800e2ce:	429a      	cmp	r2, r3
 800e2d0:	d101      	bne.n	800e2d6 <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 800e2d2:	2302      	movs	r3, #2
 800e2d4:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 800e2d6:	79fb      	ldrb	r3, [r7, #7]
	}
 800e2d8:	4618      	mov	r0, r3
 800e2da:	370c      	adds	r7, #12
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e2:	4770      	bx	lr
 800e2e4:	20004b8c 	.word	0x20004b8c
 800e2e8:	20004be0 	.word	0x20004be0
 800e2ec:	20004bb8 	.word	0x20004bb8
 800e2f0:	20004bcc 	.word	0x20004bcc

0800e2f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b082      	sub	sp, #8
 800e2f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	607b      	str	r3, [r7, #4]
 800e2fe:	e00c      	b.n	800e31a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e300:	687a      	ldr	r2, [r7, #4]
 800e302:	4613      	mov	r3, r2
 800e304:	009b      	lsls	r3, r3, #2
 800e306:	4413      	add	r3, r2
 800e308:	009b      	lsls	r3, r3, #2
 800e30a:	4a12      	ldr	r2, [pc, #72]	; (800e354 <prvInitialiseTaskLists+0x60>)
 800e30c:	4413      	add	r3, r2
 800e30e:	4618      	mov	r0, r3
 800e310:	f7fd ff06 	bl	800c120 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	3301      	adds	r3, #1
 800e318:	607b      	str	r3, [r7, #4]
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	2b37      	cmp	r3, #55	; 0x37
 800e31e:	d9ef      	bls.n	800e300 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e320:	480d      	ldr	r0, [pc, #52]	; (800e358 <prvInitialiseTaskLists+0x64>)
 800e322:	f7fd fefd 	bl	800c120 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e326:	480d      	ldr	r0, [pc, #52]	; (800e35c <prvInitialiseTaskLists+0x68>)
 800e328:	f7fd fefa 	bl	800c120 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e32c:	480c      	ldr	r0, [pc, #48]	; (800e360 <prvInitialiseTaskLists+0x6c>)
 800e32e:	f7fd fef7 	bl	800c120 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e332:	480c      	ldr	r0, [pc, #48]	; (800e364 <prvInitialiseTaskLists+0x70>)
 800e334:	f7fd fef4 	bl	800c120 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e338:	480b      	ldr	r0, [pc, #44]	; (800e368 <prvInitialiseTaskLists+0x74>)
 800e33a:	f7fd fef1 	bl	800c120 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e33e:	4b0b      	ldr	r3, [pc, #44]	; (800e36c <prvInitialiseTaskLists+0x78>)
 800e340:	4a05      	ldr	r2, [pc, #20]	; (800e358 <prvInitialiseTaskLists+0x64>)
 800e342:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e344:	4b0a      	ldr	r3, [pc, #40]	; (800e370 <prvInitialiseTaskLists+0x7c>)
 800e346:	4a05      	ldr	r2, [pc, #20]	; (800e35c <prvInitialiseTaskLists+0x68>)
 800e348:	601a      	str	r2, [r3, #0]
}
 800e34a:	bf00      	nop
 800e34c:	3708      	adds	r7, #8
 800e34e:	46bd      	mov	sp, r7
 800e350:	bd80      	pop	{r7, pc}
 800e352:	bf00      	nop
 800e354:	200046fc 	.word	0x200046fc
 800e358:	20004b5c 	.word	0x20004b5c
 800e35c:	20004b70 	.word	0x20004b70
 800e360:	20004b8c 	.word	0x20004b8c
 800e364:	20004ba0 	.word	0x20004ba0
 800e368:	20004bb8 	.word	0x20004bb8
 800e36c:	20004b84 	.word	0x20004b84
 800e370:	20004b88 	.word	0x20004b88

0800e374 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b082      	sub	sp, #8
 800e378:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e37a:	e019      	b.n	800e3b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e37c:	f7fe f8b2 	bl	800c4e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e380:	4b10      	ldr	r3, [pc, #64]	; (800e3c4 <prvCheckTasksWaitingTermination+0x50>)
 800e382:	68db      	ldr	r3, [r3, #12]
 800e384:	68db      	ldr	r3, [r3, #12]
 800e386:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	3304      	adds	r3, #4
 800e38c:	4618      	mov	r0, r3
 800e38e:	f7fd ff51 	bl	800c234 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e392:	4b0d      	ldr	r3, [pc, #52]	; (800e3c8 <prvCheckTasksWaitingTermination+0x54>)
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	3b01      	subs	r3, #1
 800e398:	4a0b      	ldr	r2, [pc, #44]	; (800e3c8 <prvCheckTasksWaitingTermination+0x54>)
 800e39a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e39c:	4b0b      	ldr	r3, [pc, #44]	; (800e3cc <prvCheckTasksWaitingTermination+0x58>)
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	3b01      	subs	r3, #1
 800e3a2:	4a0a      	ldr	r2, [pc, #40]	; (800e3cc <prvCheckTasksWaitingTermination+0x58>)
 800e3a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e3a6:	f7fe f8cd 	bl	800c544 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e3aa:	6878      	ldr	r0, [r7, #4]
 800e3ac:	f000 f810 	bl	800e3d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e3b0:	4b06      	ldr	r3, [pc, #24]	; (800e3cc <prvCheckTasksWaitingTermination+0x58>)
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d1e1      	bne.n	800e37c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e3b8:	bf00      	nop
 800e3ba:	bf00      	nop
 800e3bc:	3708      	adds	r7, #8
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	bd80      	pop	{r7, pc}
 800e3c2:	bf00      	nop
 800e3c4:	20004ba0 	.word	0x20004ba0
 800e3c8:	20004bcc 	.word	0x20004bcc
 800e3cc:	20004bb4 	.word	0x20004bb4

0800e3d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b084      	sub	sp, #16
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	335c      	adds	r3, #92	; 0x5c
 800e3dc:	4618      	mov	r0, r3
 800e3de:	f000 fe85 	bl	800f0ec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d108      	bne.n	800e3fe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	f7fd fd77 	bl	800bee4 <vPortFree>
				vPortFree( pxTCB );
 800e3f6:	6878      	ldr	r0, [r7, #4]
 800e3f8:	f7fd fd74 	bl	800bee4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e3fc:	e018      	b.n	800e430 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800e404:	2b01      	cmp	r3, #1
 800e406:	d103      	bne.n	800e410 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e408:	6878      	ldr	r0, [r7, #4]
 800e40a:	f7fd fd6b 	bl	800bee4 <vPortFree>
	}
 800e40e:	e00f      	b.n	800e430 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800e416:	2b02      	cmp	r3, #2
 800e418:	d00a      	beq.n	800e430 <prvDeleteTCB+0x60>
	__asm volatile
 800e41a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e41e:	f383 8811 	msr	BASEPRI, r3
 800e422:	f3bf 8f6f 	isb	sy
 800e426:	f3bf 8f4f 	dsb	sy
 800e42a:	60fb      	str	r3, [r7, #12]
}
 800e42c:	bf00      	nop
 800e42e:	e7fe      	b.n	800e42e <prvDeleteTCB+0x5e>
	}
 800e430:	bf00      	nop
 800e432:	3710      	adds	r7, #16
 800e434:	46bd      	mov	sp, r7
 800e436:	bd80      	pop	{r7, pc}

0800e438 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e438:	b480      	push	{r7}
 800e43a:	b083      	sub	sp, #12
 800e43c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e43e:	4b0c      	ldr	r3, [pc, #48]	; (800e470 <prvResetNextTaskUnblockTime+0x38>)
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d104      	bne.n	800e452 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e448:	4b0a      	ldr	r3, [pc, #40]	; (800e474 <prvResetNextTaskUnblockTime+0x3c>)
 800e44a:	f04f 32ff 	mov.w	r2, #4294967295
 800e44e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e450:	e008      	b.n	800e464 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e452:	4b07      	ldr	r3, [pc, #28]	; (800e470 <prvResetNextTaskUnblockTime+0x38>)
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	68db      	ldr	r3, [r3, #12]
 800e458:	68db      	ldr	r3, [r3, #12]
 800e45a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	685b      	ldr	r3, [r3, #4]
 800e460:	4a04      	ldr	r2, [pc, #16]	; (800e474 <prvResetNextTaskUnblockTime+0x3c>)
 800e462:	6013      	str	r3, [r2, #0]
}
 800e464:	bf00      	nop
 800e466:	370c      	adds	r7, #12
 800e468:	46bd      	mov	sp, r7
 800e46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46e:	4770      	bx	lr
 800e470:	20004b84 	.word	0x20004b84
 800e474:	20004bec 	.word	0x20004bec

0800e478 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e478:	b480      	push	{r7}
 800e47a:	b083      	sub	sp, #12
 800e47c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e47e:	4b0b      	ldr	r3, [pc, #44]	; (800e4ac <xTaskGetSchedulerState+0x34>)
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d102      	bne.n	800e48c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e486:	2301      	movs	r3, #1
 800e488:	607b      	str	r3, [r7, #4]
 800e48a:	e008      	b.n	800e49e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e48c:	4b08      	ldr	r3, [pc, #32]	; (800e4b0 <xTaskGetSchedulerState+0x38>)
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d102      	bne.n	800e49a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e494:	2302      	movs	r3, #2
 800e496:	607b      	str	r3, [r7, #4]
 800e498:	e001      	b.n	800e49e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e49a:	2300      	movs	r3, #0
 800e49c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e49e:	687b      	ldr	r3, [r7, #4]
	}
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	370c      	adds	r7, #12
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4aa:	4770      	bx	lr
 800e4ac:	20004bd8 	.word	0x20004bd8
 800e4b0:	20004bf4 	.word	0x20004bf4

0800e4b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	b086      	sub	sp, #24
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d056      	beq.n	800e578 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e4ca:	4b2e      	ldr	r3, [pc, #184]	; (800e584 <xTaskPriorityDisinherit+0xd0>)
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	693a      	ldr	r2, [r7, #16]
 800e4d0:	429a      	cmp	r2, r3
 800e4d2:	d00a      	beq.n	800e4ea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4d8:	f383 8811 	msr	BASEPRI, r3
 800e4dc:	f3bf 8f6f 	isb	sy
 800e4e0:	f3bf 8f4f 	dsb	sy
 800e4e4:	60fb      	str	r3, [r7, #12]
}
 800e4e6:	bf00      	nop
 800e4e8:	e7fe      	b.n	800e4e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e4ea:	693b      	ldr	r3, [r7, #16]
 800e4ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d10a      	bne.n	800e508 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4f6:	f383 8811 	msr	BASEPRI, r3
 800e4fa:	f3bf 8f6f 	isb	sy
 800e4fe:	f3bf 8f4f 	dsb	sy
 800e502:	60bb      	str	r3, [r7, #8]
}
 800e504:	bf00      	nop
 800e506:	e7fe      	b.n	800e506 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e508:	693b      	ldr	r3, [r7, #16]
 800e50a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e50c:	1e5a      	subs	r2, r3, #1
 800e50e:	693b      	ldr	r3, [r7, #16]
 800e510:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e512:	693b      	ldr	r3, [r7, #16]
 800e514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e516:	693b      	ldr	r3, [r7, #16]
 800e518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e51a:	429a      	cmp	r2, r3
 800e51c:	d02c      	beq.n	800e578 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e51e:	693b      	ldr	r3, [r7, #16]
 800e520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e522:	2b00      	cmp	r3, #0
 800e524:	d128      	bne.n	800e578 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e526:	693b      	ldr	r3, [r7, #16]
 800e528:	3304      	adds	r3, #4
 800e52a:	4618      	mov	r0, r3
 800e52c:	f7fd fe82 	bl	800c234 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e530:	693b      	ldr	r3, [r7, #16]
 800e532:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e534:	693b      	ldr	r3, [r7, #16]
 800e536:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e538:	693b      	ldr	r3, [r7, #16]
 800e53a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e53c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e540:	693b      	ldr	r3, [r7, #16]
 800e542:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e544:	693b      	ldr	r3, [r7, #16]
 800e546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e548:	4b0f      	ldr	r3, [pc, #60]	; (800e588 <xTaskPriorityDisinherit+0xd4>)
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	429a      	cmp	r2, r3
 800e54e:	d903      	bls.n	800e558 <xTaskPriorityDisinherit+0xa4>
 800e550:	693b      	ldr	r3, [r7, #16]
 800e552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e554:	4a0c      	ldr	r2, [pc, #48]	; (800e588 <xTaskPriorityDisinherit+0xd4>)
 800e556:	6013      	str	r3, [r2, #0]
 800e558:	693b      	ldr	r3, [r7, #16]
 800e55a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e55c:	4613      	mov	r3, r2
 800e55e:	009b      	lsls	r3, r3, #2
 800e560:	4413      	add	r3, r2
 800e562:	009b      	lsls	r3, r3, #2
 800e564:	4a09      	ldr	r2, [pc, #36]	; (800e58c <xTaskPriorityDisinherit+0xd8>)
 800e566:	441a      	add	r2, r3
 800e568:	693b      	ldr	r3, [r7, #16]
 800e56a:	3304      	adds	r3, #4
 800e56c:	4619      	mov	r1, r3
 800e56e:	4610      	mov	r0, r2
 800e570:	f7fd fe03 	bl	800c17a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e574:	2301      	movs	r3, #1
 800e576:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e578:	697b      	ldr	r3, [r7, #20]
	}
 800e57a:	4618      	mov	r0, r3
 800e57c:	3718      	adds	r7, #24
 800e57e:	46bd      	mov	sp, r7
 800e580:	bd80      	pop	{r7, pc}
 800e582:	bf00      	nop
 800e584:	200046f8 	.word	0x200046f8
 800e588:	20004bd4 	.word	0x20004bd4
 800e58c:	200046fc 	.word	0x200046fc

0800e590 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800e590:	b580      	push	{r7, lr}
 800e592:	b086      	sub	sp, #24
 800e594:	af00      	add	r7, sp, #0
 800e596:	60f8      	str	r0, [r7, #12]
 800e598:	60b9      	str	r1, [r7, #8]
 800e59a:	607a      	str	r2, [r7, #4]
 800e59c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800e59e:	f7fd ffa1 	bl	800c4e4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800e5a2:	4b29      	ldr	r3, [pc, #164]	; (800e648 <xTaskNotifyWait+0xb8>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800e5aa:	b2db      	uxtb	r3, r3
 800e5ac:	2b02      	cmp	r3, #2
 800e5ae:	d01c      	beq.n	800e5ea <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800e5b0:	4b25      	ldr	r3, [pc, #148]	; (800e648 <xTaskNotifyWait+0xb8>)
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 800e5b8:	68fa      	ldr	r2, [r7, #12]
 800e5ba:	43d2      	mvns	r2, r2
 800e5bc:	400a      	ands	r2, r1
 800e5be:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800e5c2:	4b21      	ldr	r3, [pc, #132]	; (800e648 <xTaskNotifyWait+0xb8>)
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	2201      	movs	r2, #1
 800e5c8:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac

				if( xTicksToWait > ( TickType_t ) 0 )
 800e5cc:	683b      	ldr	r3, [r7, #0]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d00b      	beq.n	800e5ea <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e5d2:	2101      	movs	r1, #1
 800e5d4:	6838      	ldr	r0, [r7, #0]
 800e5d6:	f000 f9df 	bl	800e998 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800e5da:	4b1c      	ldr	r3, [pc, #112]	; (800e64c <xTaskNotifyWait+0xbc>)
 800e5dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5e0:	601a      	str	r2, [r3, #0]
 800e5e2:	f3bf 8f4f 	dsb	sy
 800e5e6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800e5ea:	f7fd ffab 	bl	800c544 <vPortExitCritical>

		taskENTER_CRITICAL();
 800e5ee:	f7fd ff79 	bl	800c4e4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d005      	beq.n	800e604 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800e5f8:	4b13      	ldr	r3, [pc, #76]	; (800e648 <xTaskNotifyWait+0xb8>)
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800e604:	4b10      	ldr	r3, [pc, #64]	; (800e648 <xTaskNotifyWait+0xb8>)
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800e60c:	b2db      	uxtb	r3, r3
 800e60e:	2b02      	cmp	r3, #2
 800e610:	d002      	beq.n	800e618 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800e612:	2300      	movs	r3, #0
 800e614:	617b      	str	r3, [r7, #20]
 800e616:	e00a      	b.n	800e62e <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800e618:	4b0b      	ldr	r3, [pc, #44]	; (800e648 <xTaskNotifyWait+0xb8>)
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 800e620:	68ba      	ldr	r2, [r7, #8]
 800e622:	43d2      	mvns	r2, r2
 800e624:	400a      	ands	r2, r1
 800e626:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
				xReturn = pdTRUE;
 800e62a:	2301      	movs	r3, #1
 800e62c:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e62e:	4b06      	ldr	r3, [pc, #24]	; (800e648 <xTaskNotifyWait+0xb8>)
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	2200      	movs	r2, #0
 800e634:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
		}
		taskEXIT_CRITICAL();
 800e638:	f7fd ff84 	bl	800c544 <vPortExitCritical>

		return xReturn;
 800e63c:	697b      	ldr	r3, [r7, #20]
	}
 800e63e:	4618      	mov	r0, r3
 800e640:	3718      	adds	r7, #24
 800e642:	46bd      	mov	sp, r7
 800e644:	bd80      	pop	{r7, pc}
 800e646:	bf00      	nop
 800e648:	200046f8 	.word	0x200046f8
 800e64c:	e000ed04 	.word	0xe000ed04

0800e650 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800e650:	b580      	push	{r7, lr}
 800e652:	b08a      	sub	sp, #40	; 0x28
 800e654:	af00      	add	r7, sp, #0
 800e656:	60f8      	str	r0, [r7, #12]
 800e658:	60b9      	str	r1, [r7, #8]
 800e65a:	603b      	str	r3, [r7, #0]
 800e65c:	4613      	mov	r3, r2
 800e65e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800e660:	2301      	movs	r3, #1
 800e662:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d10a      	bne.n	800e680 <xTaskGenericNotify+0x30>
	__asm volatile
 800e66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e66e:	f383 8811 	msr	BASEPRI, r3
 800e672:	f3bf 8f6f 	isb	sy
 800e676:	f3bf 8f4f 	dsb	sy
 800e67a:	61bb      	str	r3, [r7, #24]
}
 800e67c:	bf00      	nop
 800e67e:	e7fe      	b.n	800e67e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800e684:	f7fd ff2e 	bl	800c4e4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800e688:	683b      	ldr	r3, [r7, #0]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d004      	beq.n	800e698 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800e68e:	6a3b      	ldr	r3, [r7, #32]
 800e690:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800e694:	683b      	ldr	r3, [r7, #0]
 800e696:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800e698:	6a3b      	ldr	r3, [r7, #32]
 800e69a:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800e69e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800e6a0:	6a3b      	ldr	r3, [r7, #32]
 800e6a2:	2202      	movs	r2, #2
 800e6a4:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac

			switch( eAction )
 800e6a8:	79fb      	ldrb	r3, [r7, #7]
 800e6aa:	2b04      	cmp	r3, #4
 800e6ac:	d82d      	bhi.n	800e70a <xTaskGenericNotify+0xba>
 800e6ae:	a201      	add	r2, pc, #4	; (adr r2, 800e6b4 <xTaskGenericNotify+0x64>)
 800e6b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6b4:	0800e72d 	.word	0x0800e72d
 800e6b8:	0800e6c9 	.word	0x0800e6c9
 800e6bc:	0800e6db 	.word	0x0800e6db
 800e6c0:	0800e6eb 	.word	0x0800e6eb
 800e6c4:	0800e6f5 	.word	0x0800e6f5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800e6c8:	6a3b      	ldr	r3, [r7, #32]
 800e6ca:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800e6ce:	68bb      	ldr	r3, [r7, #8]
 800e6d0:	431a      	orrs	r2, r3
 800e6d2:	6a3b      	ldr	r3, [r7, #32]
 800e6d4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					break;
 800e6d8:	e02b      	b.n	800e732 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800e6da:	6a3b      	ldr	r3, [r7, #32]
 800e6dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e6e0:	1c5a      	adds	r2, r3, #1
 800e6e2:	6a3b      	ldr	r3, [r7, #32]
 800e6e4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					break;
 800e6e8:	e023      	b.n	800e732 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800e6ea:	6a3b      	ldr	r3, [r7, #32]
 800e6ec:	68ba      	ldr	r2, [r7, #8]
 800e6ee:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					break;
 800e6f2:	e01e      	b.n	800e732 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800e6f4:	7ffb      	ldrb	r3, [r7, #31]
 800e6f6:	2b02      	cmp	r3, #2
 800e6f8:	d004      	beq.n	800e704 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800e6fa:	6a3b      	ldr	r3, [r7, #32]
 800e6fc:	68ba      	ldr	r2, [r7, #8]
 800e6fe:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800e702:	e016      	b.n	800e732 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800e704:	2300      	movs	r3, #0
 800e706:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800e708:	e013      	b.n	800e732 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800e70a:	6a3b      	ldr	r3, [r7, #32]
 800e70c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e710:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e714:	d00c      	beq.n	800e730 <xTaskGenericNotify+0xe0>
	__asm volatile
 800e716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e71a:	f383 8811 	msr	BASEPRI, r3
 800e71e:	f3bf 8f6f 	isb	sy
 800e722:	f3bf 8f4f 	dsb	sy
 800e726:	617b      	str	r3, [r7, #20]
}
 800e728:	bf00      	nop
 800e72a:	e7fe      	b.n	800e72a <xTaskGenericNotify+0xda>
					break;
 800e72c:	bf00      	nop
 800e72e:	e000      	b.n	800e732 <xTaskGenericNotify+0xe2>

					break;
 800e730:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800e732:	7ffb      	ldrb	r3, [r7, #31]
 800e734:	2b01      	cmp	r3, #1
 800e736:	d13c      	bne.n	800e7b2 <xTaskGenericNotify+0x162>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e738:	6a3b      	ldr	r3, [r7, #32]
 800e73a:	3304      	adds	r3, #4
 800e73c:	4618      	mov	r0, r3
 800e73e:	f7fd fd79 	bl	800c234 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800e742:	6a3b      	ldr	r3, [r7, #32]
 800e744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e746:	4b1e      	ldr	r3, [pc, #120]	; (800e7c0 <xTaskGenericNotify+0x170>)
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	429a      	cmp	r2, r3
 800e74c:	d903      	bls.n	800e756 <xTaskGenericNotify+0x106>
 800e74e:	6a3b      	ldr	r3, [r7, #32]
 800e750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e752:	4a1b      	ldr	r2, [pc, #108]	; (800e7c0 <xTaskGenericNotify+0x170>)
 800e754:	6013      	str	r3, [r2, #0]
 800e756:	6a3b      	ldr	r3, [r7, #32]
 800e758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e75a:	4613      	mov	r3, r2
 800e75c:	009b      	lsls	r3, r3, #2
 800e75e:	4413      	add	r3, r2
 800e760:	009b      	lsls	r3, r3, #2
 800e762:	4a18      	ldr	r2, [pc, #96]	; (800e7c4 <xTaskGenericNotify+0x174>)
 800e764:	441a      	add	r2, r3
 800e766:	6a3b      	ldr	r3, [r7, #32]
 800e768:	3304      	adds	r3, #4
 800e76a:	4619      	mov	r1, r3
 800e76c:	4610      	mov	r0, r2
 800e76e:	f7fd fd04 	bl	800c17a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800e772:	6a3b      	ldr	r3, [r7, #32]
 800e774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e776:	2b00      	cmp	r3, #0
 800e778:	d00a      	beq.n	800e790 <xTaskGenericNotify+0x140>
	__asm volatile
 800e77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e77e:	f383 8811 	msr	BASEPRI, r3
 800e782:	f3bf 8f6f 	isb	sy
 800e786:	f3bf 8f4f 	dsb	sy
 800e78a:	613b      	str	r3, [r7, #16]
}
 800e78c:	bf00      	nop
 800e78e:	e7fe      	b.n	800e78e <xTaskGenericNotify+0x13e>
					the tick count equals xNextTaskUnblockTime.  However if
					tickless idling is used it might be more important to enter
					sleep mode at the earliest possible time - so reset
					xNextTaskUnblockTime here to ensure it is updated at the
					earliest possible time. */
					prvResetNextTaskUnblockTime();
 800e790:	f7ff fe52 	bl	800e438 <prvResetNextTaskUnblockTime>
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e794:	6a3b      	ldr	r3, [r7, #32]
 800e796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e798:	4b0b      	ldr	r3, [pc, #44]	; (800e7c8 <xTaskGenericNotify+0x178>)
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e79e:	429a      	cmp	r2, r3
 800e7a0:	d907      	bls.n	800e7b2 <xTaskGenericNotify+0x162>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800e7a2:	4b0a      	ldr	r3, [pc, #40]	; (800e7cc <xTaskGenericNotify+0x17c>)
 800e7a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e7a8:	601a      	str	r2, [r3, #0]
 800e7aa:	f3bf 8f4f 	dsb	sy
 800e7ae:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800e7b2:	f7fd fec7 	bl	800c544 <vPortExitCritical>

		return xReturn;
 800e7b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	3728      	adds	r7, #40	; 0x28
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	bd80      	pop	{r7, pc}
 800e7c0:	20004bd4 	.word	0x20004bd4
 800e7c4:	200046fc 	.word	0x200046fc
 800e7c8:	200046f8 	.word	0x200046f8
 800e7cc:	e000ed04 	.word	0xe000ed04

0800e7d0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	b08e      	sub	sp, #56	; 0x38
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	60f8      	str	r0, [r7, #12]
 800e7d8:	60b9      	str	r1, [r7, #8]
 800e7da:	603b      	str	r3, [r7, #0]
 800e7dc:	4613      	mov	r3, r2
 800e7de:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800e7e0:	2301      	movs	r3, #1
 800e7e2:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d10a      	bne.n	800e800 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800e7ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7ee:	f383 8811 	msr	BASEPRI, r3
 800e7f2:	f3bf 8f6f 	isb	sy
 800e7f6:	f3bf 8f4f 	dsb	sy
 800e7fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e7fc:	bf00      	nop
 800e7fe:	e7fe      	b.n	800e7fe <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e800:	f7fe f836 	bl	800c870 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800e808:	f3ef 8211 	mrs	r2, BASEPRI
 800e80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e810:	f383 8811 	msr	BASEPRI, r3
 800e814:	f3bf 8f6f 	isb	sy
 800e818:	f3bf 8f4f 	dsb	sy
 800e81c:	623a      	str	r2, [r7, #32]
 800e81e:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800e820:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e822:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800e824:	683b      	ldr	r3, [r7, #0]
 800e826:	2b00      	cmp	r3, #0
 800e828:	d004      	beq.n	800e834 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800e82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e82c:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800e830:	683b      	ldr	r3, [r7, #0]
 800e832:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800e834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e836:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800e83a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800e83e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e840:	2202      	movs	r2, #2
 800e842:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac

			switch( eAction )
 800e846:	79fb      	ldrb	r3, [r7, #7]
 800e848:	2b04      	cmp	r3, #4
 800e84a:	d82f      	bhi.n	800e8ac <xTaskGenericNotifyFromISR+0xdc>
 800e84c:	a201      	add	r2, pc, #4	; (adr r2, 800e854 <xTaskGenericNotifyFromISR+0x84>)
 800e84e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e852:	bf00      	nop
 800e854:	0800e8cf 	.word	0x0800e8cf
 800e858:	0800e869 	.word	0x0800e869
 800e85c:	0800e87b 	.word	0x0800e87b
 800e860:	0800e88b 	.word	0x0800e88b
 800e864:	0800e895 	.word	0x0800e895
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800e868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e86a:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800e86e:	68bb      	ldr	r3, [r7, #8]
 800e870:	431a      	orrs	r2, r3
 800e872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e874:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					break;
 800e878:	e02c      	b.n	800e8d4 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800e87a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e87c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e880:	1c5a      	adds	r2, r3, #1
 800e882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e884:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					break;
 800e888:	e024      	b.n	800e8d4 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800e88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e88c:	68ba      	ldr	r2, [r7, #8]
 800e88e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					break;
 800e892:	e01f      	b.n	800e8d4 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800e894:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e898:	2b02      	cmp	r3, #2
 800e89a:	d004      	beq.n	800e8a6 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800e89c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e89e:	68ba      	ldr	r2, [r7, #8]
 800e8a0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800e8a4:	e016      	b.n	800e8d4 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800e8aa:	e013      	b.n	800e8d4 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800e8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e8b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8b6:	d00c      	beq.n	800e8d2 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800e8b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8bc:	f383 8811 	msr	BASEPRI, r3
 800e8c0:	f3bf 8f6f 	isb	sy
 800e8c4:	f3bf 8f4f 	dsb	sy
 800e8c8:	61bb      	str	r3, [r7, #24]
}
 800e8ca:	bf00      	nop
 800e8cc:	e7fe      	b.n	800e8cc <xTaskGenericNotifyFromISR+0xfc>
					break;
 800e8ce:	bf00      	nop
 800e8d0:	e000      	b.n	800e8d4 <xTaskGenericNotifyFromISR+0x104>
					break;
 800e8d2:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800e8d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e8d8:	2b01      	cmp	r3, #1
 800e8da:	d146      	bne.n	800e96a <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800e8dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d00a      	beq.n	800e8fa <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800e8e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8e8:	f383 8811 	msr	BASEPRI, r3
 800e8ec:	f3bf 8f6f 	isb	sy
 800e8f0:	f3bf 8f4f 	dsb	sy
 800e8f4:	617b      	str	r3, [r7, #20]
}
 800e8f6:	bf00      	nop
 800e8f8:	e7fe      	b.n	800e8f8 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e8fa:	4b21      	ldr	r3, [pc, #132]	; (800e980 <xTaskGenericNotifyFromISR+0x1b0>)
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d11d      	bne.n	800e93e <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e904:	3304      	adds	r3, #4
 800e906:	4618      	mov	r0, r3
 800e908:	f7fd fc94 	bl	800c234 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e90c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e90e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e910:	4b1c      	ldr	r3, [pc, #112]	; (800e984 <xTaskGenericNotifyFromISR+0x1b4>)
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	429a      	cmp	r2, r3
 800e916:	d903      	bls.n	800e920 <xTaskGenericNotifyFromISR+0x150>
 800e918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e91a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e91c:	4a19      	ldr	r2, [pc, #100]	; (800e984 <xTaskGenericNotifyFromISR+0x1b4>)
 800e91e:	6013      	str	r3, [r2, #0]
 800e920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e924:	4613      	mov	r3, r2
 800e926:	009b      	lsls	r3, r3, #2
 800e928:	4413      	add	r3, r2
 800e92a:	009b      	lsls	r3, r3, #2
 800e92c:	4a16      	ldr	r2, [pc, #88]	; (800e988 <xTaskGenericNotifyFromISR+0x1b8>)
 800e92e:	441a      	add	r2, r3
 800e930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e932:	3304      	adds	r3, #4
 800e934:	4619      	mov	r1, r3
 800e936:	4610      	mov	r0, r2
 800e938:	f7fd fc1f 	bl	800c17a <vListInsertEnd>
 800e93c:	e005      	b.n	800e94a <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800e93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e940:	3318      	adds	r3, #24
 800e942:	4619      	mov	r1, r3
 800e944:	4811      	ldr	r0, [pc, #68]	; (800e98c <xTaskGenericNotifyFromISR+0x1bc>)
 800e946:	f7fd fc18 	bl	800c17a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e94c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e94e:	4b10      	ldr	r3, [pc, #64]	; (800e990 <xTaskGenericNotifyFromISR+0x1c0>)
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e954:	429a      	cmp	r2, r3
 800e956:	d908      	bls.n	800e96a <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800e958:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d002      	beq.n	800e964 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800e95e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e960:	2201      	movs	r2, #1
 800e962:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800e964:	4b0b      	ldr	r3, [pc, #44]	; (800e994 <xTaskGenericNotifyFromISR+0x1c4>)
 800e966:	2201      	movs	r2, #1
 800e968:	601a      	str	r2, [r3, #0]
 800e96a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e96c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e96e:	693b      	ldr	r3, [r7, #16]
 800e970:	f383 8811 	msr	BASEPRI, r3
}
 800e974:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800e976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800e978:	4618      	mov	r0, r3
 800e97a:	3738      	adds	r7, #56	; 0x38
 800e97c:	46bd      	mov	sp, r7
 800e97e:	bd80      	pop	{r7, pc}
 800e980:	20004bf4 	.word	0x20004bf4
 800e984:	20004bd4 	.word	0x20004bd4
 800e988:	200046fc 	.word	0x200046fc
 800e98c:	20004b8c 	.word	0x20004b8c
 800e990:	200046f8 	.word	0x200046f8
 800e994:	20004be0 	.word	0x20004be0

0800e998 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b084      	sub	sp, #16
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
 800e9a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e9a2:	4b21      	ldr	r3, [pc, #132]	; (800ea28 <prvAddCurrentTaskToDelayedList+0x90>)
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e9a8:	4b20      	ldr	r3, [pc, #128]	; (800ea2c <prvAddCurrentTaskToDelayedList+0x94>)
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	3304      	adds	r3, #4
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	f7fd fc40 	bl	800c234 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9ba:	d10a      	bne.n	800e9d2 <prvAddCurrentTaskToDelayedList+0x3a>
 800e9bc:	683b      	ldr	r3, [r7, #0]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d007      	beq.n	800e9d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e9c2:	4b1a      	ldr	r3, [pc, #104]	; (800ea2c <prvAddCurrentTaskToDelayedList+0x94>)
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	3304      	adds	r3, #4
 800e9c8:	4619      	mov	r1, r3
 800e9ca:	4819      	ldr	r0, [pc, #100]	; (800ea30 <prvAddCurrentTaskToDelayedList+0x98>)
 800e9cc:	f7fd fbd5 	bl	800c17a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e9d0:	e026      	b.n	800ea20 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e9d2:	68fa      	ldr	r2, [r7, #12]
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	4413      	add	r3, r2
 800e9d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e9da:	4b14      	ldr	r3, [pc, #80]	; (800ea2c <prvAddCurrentTaskToDelayedList+0x94>)
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	68ba      	ldr	r2, [r7, #8]
 800e9e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e9e2:	68ba      	ldr	r2, [r7, #8]
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	429a      	cmp	r2, r3
 800e9e8:	d209      	bcs.n	800e9fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e9ea:	4b12      	ldr	r3, [pc, #72]	; (800ea34 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e9ec:	681a      	ldr	r2, [r3, #0]
 800e9ee:	4b0f      	ldr	r3, [pc, #60]	; (800ea2c <prvAddCurrentTaskToDelayedList+0x94>)
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	3304      	adds	r3, #4
 800e9f4:	4619      	mov	r1, r3
 800e9f6:	4610      	mov	r0, r2
 800e9f8:	f7fd fbe3 	bl	800c1c2 <vListInsert>
}
 800e9fc:	e010      	b.n	800ea20 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e9fe:	4b0e      	ldr	r3, [pc, #56]	; (800ea38 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ea00:	681a      	ldr	r2, [r3, #0]
 800ea02:	4b0a      	ldr	r3, [pc, #40]	; (800ea2c <prvAddCurrentTaskToDelayedList+0x94>)
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	3304      	adds	r3, #4
 800ea08:	4619      	mov	r1, r3
 800ea0a:	4610      	mov	r0, r2
 800ea0c:	f7fd fbd9 	bl	800c1c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ea10:	4b0a      	ldr	r3, [pc, #40]	; (800ea3c <prvAddCurrentTaskToDelayedList+0xa4>)
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	68ba      	ldr	r2, [r7, #8]
 800ea16:	429a      	cmp	r2, r3
 800ea18:	d202      	bcs.n	800ea20 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ea1a:	4a08      	ldr	r2, [pc, #32]	; (800ea3c <prvAddCurrentTaskToDelayedList+0xa4>)
 800ea1c:	68bb      	ldr	r3, [r7, #8]
 800ea1e:	6013      	str	r3, [r2, #0]
}
 800ea20:	bf00      	nop
 800ea22:	3710      	adds	r7, #16
 800ea24:	46bd      	mov	sp, r7
 800ea26:	bd80      	pop	{r7, pc}
 800ea28:	20004bd0 	.word	0x20004bd0
 800ea2c:	200046f8 	.word	0x200046f8
 800ea30:	20004bb8 	.word	0x20004bb8
 800ea34:	20004b88 	.word	0x20004b88
 800ea38:	20004b84 	.word	0x20004b84
 800ea3c:	20004bec 	.word	0x20004bec

0800ea40 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b08a      	sub	sp, #40	; 0x28
 800ea44:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ea46:	2300      	movs	r3, #0
 800ea48:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ea4a:	f000 fb07 	bl	800f05c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ea4e:	4b1c      	ldr	r3, [pc, #112]	; (800eac0 <xTimerCreateTimerTask+0x80>)
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d021      	beq.n	800ea9a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ea56:	2300      	movs	r3, #0
 800ea58:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ea5e:	1d3a      	adds	r2, r7, #4
 800ea60:	f107 0108 	add.w	r1, r7, #8
 800ea64:	f107 030c 	add.w	r3, r7, #12
 800ea68:	4618      	mov	r0, r3
 800ea6a:	f7fd f955 	bl	800bd18 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ea6e:	6879      	ldr	r1, [r7, #4]
 800ea70:	68bb      	ldr	r3, [r7, #8]
 800ea72:	68fa      	ldr	r2, [r7, #12]
 800ea74:	9202      	str	r2, [sp, #8]
 800ea76:	9301      	str	r3, [sp, #4]
 800ea78:	2302      	movs	r3, #2
 800ea7a:	9300      	str	r3, [sp, #0]
 800ea7c:	2300      	movs	r3, #0
 800ea7e:	460a      	mov	r2, r1
 800ea80:	4910      	ldr	r1, [pc, #64]	; (800eac4 <xTimerCreateTimerTask+0x84>)
 800ea82:	4811      	ldr	r0, [pc, #68]	; (800eac8 <xTimerCreateTimerTask+0x88>)
 800ea84:	f7fe fdd8 	bl	800d638 <xTaskCreateStatic>
 800ea88:	4603      	mov	r3, r0
 800ea8a:	4a10      	ldr	r2, [pc, #64]	; (800eacc <xTimerCreateTimerTask+0x8c>)
 800ea8c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ea8e:	4b0f      	ldr	r3, [pc, #60]	; (800eacc <xTimerCreateTimerTask+0x8c>)
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d001      	beq.n	800ea9a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ea96:	2301      	movs	r3, #1
 800ea98:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ea9a:	697b      	ldr	r3, [r7, #20]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d10a      	bne.n	800eab6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800eaa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaa4:	f383 8811 	msr	BASEPRI, r3
 800eaa8:	f3bf 8f6f 	isb	sy
 800eaac:	f3bf 8f4f 	dsb	sy
 800eab0:	613b      	str	r3, [r7, #16]
}
 800eab2:	bf00      	nop
 800eab4:	e7fe      	b.n	800eab4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800eab6:	697b      	ldr	r3, [r7, #20]
}
 800eab8:	4618      	mov	r0, r3
 800eaba:	3718      	adds	r7, #24
 800eabc:	46bd      	mov	sp, r7
 800eabe:	bd80      	pop	{r7, pc}
 800eac0:	20004c28 	.word	0x20004c28
 800eac4:	0800f334 	.word	0x0800f334
 800eac8:	0800ec05 	.word	0x0800ec05
 800eacc:	20004c2c 	.word	0x20004c2c

0800ead0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b08a      	sub	sp, #40	; 0x28
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	60f8      	str	r0, [r7, #12]
 800ead8:	60b9      	str	r1, [r7, #8]
 800eada:	607a      	str	r2, [r7, #4]
 800eadc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800eade:	2300      	movs	r3, #0
 800eae0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d10a      	bne.n	800eafe <xTimerGenericCommand+0x2e>
	__asm volatile
 800eae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaec:	f383 8811 	msr	BASEPRI, r3
 800eaf0:	f3bf 8f6f 	isb	sy
 800eaf4:	f3bf 8f4f 	dsb	sy
 800eaf8:	623b      	str	r3, [r7, #32]
}
 800eafa:	bf00      	nop
 800eafc:	e7fe      	b.n	800eafc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800eafe:	4b1a      	ldr	r3, [pc, #104]	; (800eb68 <xTimerGenericCommand+0x98>)
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d02a      	beq.n	800eb5c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800eb06:	68bb      	ldr	r3, [r7, #8]
 800eb08:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800eb12:	68bb      	ldr	r3, [r7, #8]
 800eb14:	2b05      	cmp	r3, #5
 800eb16:	dc18      	bgt.n	800eb4a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800eb18:	f7ff fcae 	bl	800e478 <xTaskGetSchedulerState>
 800eb1c:	4603      	mov	r3, r0
 800eb1e:	2b02      	cmp	r3, #2
 800eb20:	d109      	bne.n	800eb36 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800eb22:	4b11      	ldr	r3, [pc, #68]	; (800eb68 <xTimerGenericCommand+0x98>)
 800eb24:	6818      	ldr	r0, [r3, #0]
 800eb26:	f107 0110 	add.w	r1, r7, #16
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb2e:	f7fe f853 	bl	800cbd8 <xQueueGenericSend>
 800eb32:	6278      	str	r0, [r7, #36]	; 0x24
 800eb34:	e012      	b.n	800eb5c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800eb36:	4b0c      	ldr	r3, [pc, #48]	; (800eb68 <xTimerGenericCommand+0x98>)
 800eb38:	6818      	ldr	r0, [r3, #0]
 800eb3a:	f107 0110 	add.w	r1, r7, #16
 800eb3e:	2300      	movs	r3, #0
 800eb40:	2200      	movs	r2, #0
 800eb42:	f7fe f849 	bl	800cbd8 <xQueueGenericSend>
 800eb46:	6278      	str	r0, [r7, #36]	; 0x24
 800eb48:	e008      	b.n	800eb5c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800eb4a:	4b07      	ldr	r3, [pc, #28]	; (800eb68 <xTimerGenericCommand+0x98>)
 800eb4c:	6818      	ldr	r0, [r3, #0]
 800eb4e:	f107 0110 	add.w	r1, r7, #16
 800eb52:	2300      	movs	r3, #0
 800eb54:	683a      	ldr	r2, [r7, #0]
 800eb56:	f7fe f93d 	bl	800cdd4 <xQueueGenericSendFromISR>
 800eb5a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800eb5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800eb5e:	4618      	mov	r0, r3
 800eb60:	3728      	adds	r7, #40	; 0x28
 800eb62:	46bd      	mov	sp, r7
 800eb64:	bd80      	pop	{r7, pc}
 800eb66:	bf00      	nop
 800eb68:	20004c28 	.word	0x20004c28

0800eb6c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800eb6c:	b580      	push	{r7, lr}
 800eb6e:	b088      	sub	sp, #32
 800eb70:	af02      	add	r7, sp, #8
 800eb72:	6078      	str	r0, [r7, #4]
 800eb74:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb76:	4b22      	ldr	r3, [pc, #136]	; (800ec00 <prvProcessExpiredTimer+0x94>)
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	68db      	ldr	r3, [r3, #12]
 800eb7c:	68db      	ldr	r3, [r3, #12]
 800eb7e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eb80:	697b      	ldr	r3, [r7, #20]
 800eb82:	3304      	adds	r3, #4
 800eb84:	4618      	mov	r0, r3
 800eb86:	f7fd fb55 	bl	800c234 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eb8a:	697b      	ldr	r3, [r7, #20]
 800eb8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eb90:	f003 0304 	and.w	r3, r3, #4
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d022      	beq.n	800ebde <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800eb98:	697b      	ldr	r3, [r7, #20]
 800eb9a:	699a      	ldr	r2, [r3, #24]
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	18d1      	adds	r1, r2, r3
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	683a      	ldr	r2, [r7, #0]
 800eba4:	6978      	ldr	r0, [r7, #20]
 800eba6:	f000 f8d1 	bl	800ed4c <prvInsertTimerInActiveList>
 800ebaa:	4603      	mov	r3, r0
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d01f      	beq.n	800ebf0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ebb0:	2300      	movs	r3, #0
 800ebb2:	9300      	str	r3, [sp, #0]
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	687a      	ldr	r2, [r7, #4]
 800ebb8:	2100      	movs	r1, #0
 800ebba:	6978      	ldr	r0, [r7, #20]
 800ebbc:	f7ff ff88 	bl	800ead0 <xTimerGenericCommand>
 800ebc0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ebc2:	693b      	ldr	r3, [r7, #16]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d113      	bne.n	800ebf0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ebc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebcc:	f383 8811 	msr	BASEPRI, r3
 800ebd0:	f3bf 8f6f 	isb	sy
 800ebd4:	f3bf 8f4f 	dsb	sy
 800ebd8:	60fb      	str	r3, [r7, #12]
}
 800ebda:	bf00      	nop
 800ebdc:	e7fe      	b.n	800ebdc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ebde:	697b      	ldr	r3, [r7, #20]
 800ebe0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ebe4:	f023 0301 	bic.w	r3, r3, #1
 800ebe8:	b2da      	uxtb	r2, r3
 800ebea:	697b      	ldr	r3, [r7, #20]
 800ebec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ebf0:	697b      	ldr	r3, [r7, #20]
 800ebf2:	6a1b      	ldr	r3, [r3, #32]
 800ebf4:	6978      	ldr	r0, [r7, #20]
 800ebf6:	4798      	blx	r3
}
 800ebf8:	bf00      	nop
 800ebfa:	3718      	adds	r7, #24
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	bd80      	pop	{r7, pc}
 800ec00:	20004c20 	.word	0x20004c20

0800ec04 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b084      	sub	sp, #16
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ec0c:	f107 0308 	add.w	r3, r7, #8
 800ec10:	4618      	mov	r0, r3
 800ec12:	f000 f857 	bl	800ecc4 <prvGetNextExpireTime>
 800ec16:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ec18:	68bb      	ldr	r3, [r7, #8]
 800ec1a:	4619      	mov	r1, r3
 800ec1c:	68f8      	ldr	r0, [r7, #12]
 800ec1e:	f000 f803 	bl	800ec28 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ec22:	f000 f8d5 	bl	800edd0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ec26:	e7f1      	b.n	800ec0c <prvTimerTask+0x8>

0800ec28 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b084      	sub	sp, #16
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
 800ec30:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ec32:	f7fe ff63 	bl	800dafc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ec36:	f107 0308 	add.w	r3, r7, #8
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	f000 f866 	bl	800ed0c <prvSampleTimeNow>
 800ec40:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ec42:	68bb      	ldr	r3, [r7, #8]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d130      	bne.n	800ecaa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ec48:	683b      	ldr	r3, [r7, #0]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d10a      	bne.n	800ec64 <prvProcessTimerOrBlockTask+0x3c>
 800ec4e:	687a      	ldr	r2, [r7, #4]
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	429a      	cmp	r2, r3
 800ec54:	d806      	bhi.n	800ec64 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ec56:	f7fe ff97 	bl	800db88 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ec5a:	68f9      	ldr	r1, [r7, #12]
 800ec5c:	6878      	ldr	r0, [r7, #4]
 800ec5e:	f7ff ff85 	bl	800eb6c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ec62:	e024      	b.n	800ecae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ec64:	683b      	ldr	r3, [r7, #0]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d008      	beq.n	800ec7c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ec6a:	4b13      	ldr	r3, [pc, #76]	; (800ecb8 <prvProcessTimerOrBlockTask+0x90>)
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d101      	bne.n	800ec78 <prvProcessTimerOrBlockTask+0x50>
 800ec74:	2301      	movs	r3, #1
 800ec76:	e000      	b.n	800ec7a <prvProcessTimerOrBlockTask+0x52>
 800ec78:	2300      	movs	r3, #0
 800ec7a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ec7c:	4b0f      	ldr	r3, [pc, #60]	; (800ecbc <prvProcessTimerOrBlockTask+0x94>)
 800ec7e:	6818      	ldr	r0, [r3, #0]
 800ec80:	687a      	ldr	r2, [r7, #4]
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	1ad3      	subs	r3, r2, r3
 800ec86:	683a      	ldr	r2, [r7, #0]
 800ec88:	4619      	mov	r1, r3
 800ec8a:	f7fe fca1 	bl	800d5d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ec8e:	f7fe ff7b 	bl	800db88 <xTaskResumeAll>
 800ec92:	4603      	mov	r3, r0
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d10a      	bne.n	800ecae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ec98:	4b09      	ldr	r3, [pc, #36]	; (800ecc0 <prvProcessTimerOrBlockTask+0x98>)
 800ec9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec9e:	601a      	str	r2, [r3, #0]
 800eca0:	f3bf 8f4f 	dsb	sy
 800eca4:	f3bf 8f6f 	isb	sy
}
 800eca8:	e001      	b.n	800ecae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ecaa:	f7fe ff6d 	bl	800db88 <xTaskResumeAll>
}
 800ecae:	bf00      	nop
 800ecb0:	3710      	adds	r7, #16
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	bd80      	pop	{r7, pc}
 800ecb6:	bf00      	nop
 800ecb8:	20004c24 	.word	0x20004c24
 800ecbc:	20004c28 	.word	0x20004c28
 800ecc0:	e000ed04 	.word	0xe000ed04

0800ecc4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ecc4:	b480      	push	{r7}
 800ecc6:	b085      	sub	sp, #20
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800eccc:	4b0e      	ldr	r3, [pc, #56]	; (800ed08 <prvGetNextExpireTime+0x44>)
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d101      	bne.n	800ecda <prvGetNextExpireTime+0x16>
 800ecd6:	2201      	movs	r2, #1
 800ecd8:	e000      	b.n	800ecdc <prvGetNextExpireTime+0x18>
 800ecda:	2200      	movs	r2, #0
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d105      	bne.n	800ecf4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ece8:	4b07      	ldr	r3, [pc, #28]	; (800ed08 <prvGetNextExpireTime+0x44>)
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	68db      	ldr	r3, [r3, #12]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	60fb      	str	r3, [r7, #12]
 800ecf2:	e001      	b.n	800ecf8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ecf8:	68fb      	ldr	r3, [r7, #12]
}
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	3714      	adds	r7, #20
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed04:	4770      	bx	lr
 800ed06:	bf00      	nop
 800ed08:	20004c20 	.word	0x20004c20

0800ed0c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b084      	sub	sp, #16
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ed14:	f7fe ffd6 	bl	800dcc4 <xTaskGetTickCount>
 800ed18:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ed1a:	4b0b      	ldr	r3, [pc, #44]	; (800ed48 <prvSampleTimeNow+0x3c>)
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	68fa      	ldr	r2, [r7, #12]
 800ed20:	429a      	cmp	r2, r3
 800ed22:	d205      	bcs.n	800ed30 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ed24:	f000 f936 	bl	800ef94 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	2201      	movs	r2, #1
 800ed2c:	601a      	str	r2, [r3, #0]
 800ed2e:	e002      	b.n	800ed36 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	2200      	movs	r2, #0
 800ed34:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ed36:	4a04      	ldr	r2, [pc, #16]	; (800ed48 <prvSampleTimeNow+0x3c>)
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ed3c:	68fb      	ldr	r3, [r7, #12]
}
 800ed3e:	4618      	mov	r0, r3
 800ed40:	3710      	adds	r7, #16
 800ed42:	46bd      	mov	sp, r7
 800ed44:	bd80      	pop	{r7, pc}
 800ed46:	bf00      	nop
 800ed48:	20004c30 	.word	0x20004c30

0800ed4c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	b086      	sub	sp, #24
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	60f8      	str	r0, [r7, #12]
 800ed54:	60b9      	str	r1, [r7, #8]
 800ed56:	607a      	str	r2, [r7, #4]
 800ed58:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	68ba      	ldr	r2, [r7, #8]
 800ed62:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	68fa      	ldr	r2, [r7, #12]
 800ed68:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ed6a:	68ba      	ldr	r2, [r7, #8]
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	429a      	cmp	r2, r3
 800ed70:	d812      	bhi.n	800ed98 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed72:	687a      	ldr	r2, [r7, #4]
 800ed74:	683b      	ldr	r3, [r7, #0]
 800ed76:	1ad2      	subs	r2, r2, r3
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	699b      	ldr	r3, [r3, #24]
 800ed7c:	429a      	cmp	r2, r3
 800ed7e:	d302      	bcc.n	800ed86 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ed80:	2301      	movs	r3, #1
 800ed82:	617b      	str	r3, [r7, #20]
 800ed84:	e01b      	b.n	800edbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ed86:	4b10      	ldr	r3, [pc, #64]	; (800edc8 <prvInsertTimerInActiveList+0x7c>)
 800ed88:	681a      	ldr	r2, [r3, #0]
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	3304      	adds	r3, #4
 800ed8e:	4619      	mov	r1, r3
 800ed90:	4610      	mov	r0, r2
 800ed92:	f7fd fa16 	bl	800c1c2 <vListInsert>
 800ed96:	e012      	b.n	800edbe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ed98:	687a      	ldr	r2, [r7, #4]
 800ed9a:	683b      	ldr	r3, [r7, #0]
 800ed9c:	429a      	cmp	r2, r3
 800ed9e:	d206      	bcs.n	800edae <prvInsertTimerInActiveList+0x62>
 800eda0:	68ba      	ldr	r2, [r7, #8]
 800eda2:	683b      	ldr	r3, [r7, #0]
 800eda4:	429a      	cmp	r2, r3
 800eda6:	d302      	bcc.n	800edae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800eda8:	2301      	movs	r3, #1
 800edaa:	617b      	str	r3, [r7, #20]
 800edac:	e007      	b.n	800edbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800edae:	4b07      	ldr	r3, [pc, #28]	; (800edcc <prvInsertTimerInActiveList+0x80>)
 800edb0:	681a      	ldr	r2, [r3, #0]
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	3304      	adds	r3, #4
 800edb6:	4619      	mov	r1, r3
 800edb8:	4610      	mov	r0, r2
 800edba:	f7fd fa02 	bl	800c1c2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800edbe:	697b      	ldr	r3, [r7, #20]
}
 800edc0:	4618      	mov	r0, r3
 800edc2:	3718      	adds	r7, #24
 800edc4:	46bd      	mov	sp, r7
 800edc6:	bd80      	pop	{r7, pc}
 800edc8:	20004c24 	.word	0x20004c24
 800edcc:	20004c20 	.word	0x20004c20

0800edd0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b08e      	sub	sp, #56	; 0x38
 800edd4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800edd6:	e0ca      	b.n	800ef6e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	da18      	bge.n	800ee10 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800edde:	1d3b      	adds	r3, r7, #4
 800ede0:	3304      	adds	r3, #4
 800ede2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ede4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d10a      	bne.n	800ee00 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800edea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edee:	f383 8811 	msr	BASEPRI, r3
 800edf2:	f3bf 8f6f 	isb	sy
 800edf6:	f3bf 8f4f 	dsb	sy
 800edfa:	61fb      	str	r3, [r7, #28]
}
 800edfc:	bf00      	nop
 800edfe:	e7fe      	b.n	800edfe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ee00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee06:	6850      	ldr	r0, [r2, #4]
 800ee08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee0a:	6892      	ldr	r2, [r2, #8]
 800ee0c:	4611      	mov	r1, r2
 800ee0e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	f2c0 80ab 	blt.w	800ef6e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ee1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee1e:	695b      	ldr	r3, [r3, #20]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d004      	beq.n	800ee2e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ee24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee26:	3304      	adds	r3, #4
 800ee28:	4618      	mov	r0, r3
 800ee2a:	f7fd fa03 	bl	800c234 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ee2e:	463b      	mov	r3, r7
 800ee30:	4618      	mov	r0, r3
 800ee32:	f7ff ff6b 	bl	800ed0c <prvSampleTimeNow>
 800ee36:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	2b09      	cmp	r3, #9
 800ee3c:	f200 8096 	bhi.w	800ef6c <prvProcessReceivedCommands+0x19c>
 800ee40:	a201      	add	r2, pc, #4	; (adr r2, 800ee48 <prvProcessReceivedCommands+0x78>)
 800ee42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee46:	bf00      	nop
 800ee48:	0800ee71 	.word	0x0800ee71
 800ee4c:	0800ee71 	.word	0x0800ee71
 800ee50:	0800ee71 	.word	0x0800ee71
 800ee54:	0800eee5 	.word	0x0800eee5
 800ee58:	0800eef9 	.word	0x0800eef9
 800ee5c:	0800ef43 	.word	0x0800ef43
 800ee60:	0800ee71 	.word	0x0800ee71
 800ee64:	0800ee71 	.word	0x0800ee71
 800ee68:	0800eee5 	.word	0x0800eee5
 800ee6c:	0800eef9 	.word	0x0800eef9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ee70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee76:	f043 0301 	orr.w	r3, r3, #1
 800ee7a:	b2da      	uxtb	r2, r3
 800ee7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ee82:	68ba      	ldr	r2, [r7, #8]
 800ee84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee86:	699b      	ldr	r3, [r3, #24]
 800ee88:	18d1      	adds	r1, r2, r3
 800ee8a:	68bb      	ldr	r3, [r7, #8]
 800ee8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee90:	f7ff ff5c 	bl	800ed4c <prvInsertTimerInActiveList>
 800ee94:	4603      	mov	r3, r0
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d069      	beq.n	800ef6e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ee9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee9c:	6a1b      	ldr	r3, [r3, #32]
 800ee9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eea0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eea4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eea8:	f003 0304 	and.w	r3, r3, #4
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d05e      	beq.n	800ef6e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800eeb0:	68ba      	ldr	r2, [r7, #8]
 800eeb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeb4:	699b      	ldr	r3, [r3, #24]
 800eeb6:	441a      	add	r2, r3
 800eeb8:	2300      	movs	r3, #0
 800eeba:	9300      	str	r3, [sp, #0]
 800eebc:	2300      	movs	r3, #0
 800eebe:	2100      	movs	r1, #0
 800eec0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eec2:	f7ff fe05 	bl	800ead0 <xTimerGenericCommand>
 800eec6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800eec8:	6a3b      	ldr	r3, [r7, #32]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d14f      	bne.n	800ef6e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800eece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eed2:	f383 8811 	msr	BASEPRI, r3
 800eed6:	f3bf 8f6f 	isb	sy
 800eeda:	f3bf 8f4f 	dsb	sy
 800eede:	61bb      	str	r3, [r7, #24]
}
 800eee0:	bf00      	nop
 800eee2:	e7fe      	b.n	800eee2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eee6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eeea:	f023 0301 	bic.w	r3, r3, #1
 800eeee:	b2da      	uxtb	r2, r3
 800eef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eef2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800eef6:	e03a      	b.n	800ef6e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800eef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eefa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eefe:	f043 0301 	orr.w	r3, r3, #1
 800ef02:	b2da      	uxtb	r2, r3
 800ef04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ef0a:	68ba      	ldr	r2, [r7, #8]
 800ef0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef0e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ef10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef12:	699b      	ldr	r3, [r3, #24]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d10a      	bne.n	800ef2e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ef18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef1c:	f383 8811 	msr	BASEPRI, r3
 800ef20:	f3bf 8f6f 	isb	sy
 800ef24:	f3bf 8f4f 	dsb	sy
 800ef28:	617b      	str	r3, [r7, #20]
}
 800ef2a:	bf00      	nop
 800ef2c:	e7fe      	b.n	800ef2c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ef2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef30:	699a      	ldr	r2, [r3, #24]
 800ef32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef34:	18d1      	adds	r1, r2, r3
 800ef36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef3c:	f7ff ff06 	bl	800ed4c <prvInsertTimerInActiveList>
					break;
 800ef40:	e015      	b.n	800ef6e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ef42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ef48:	f003 0302 	and.w	r3, r3, #2
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d103      	bne.n	800ef58 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ef50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef52:	f7fc ffc7 	bl	800bee4 <vPortFree>
 800ef56:	e00a      	b.n	800ef6e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ef58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ef5e:	f023 0301 	bic.w	r3, r3, #1
 800ef62:	b2da      	uxtb	r2, r3
 800ef64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ef6a:	e000      	b.n	800ef6e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800ef6c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ef6e:	4b08      	ldr	r3, [pc, #32]	; (800ef90 <prvProcessReceivedCommands+0x1c0>)
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	1d39      	adds	r1, r7, #4
 800ef74:	2200      	movs	r2, #0
 800ef76:	4618      	mov	r0, r3
 800ef78:	f7fe f854 	bl	800d024 <xQueueReceive>
 800ef7c:	4603      	mov	r3, r0
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	f47f af2a 	bne.w	800edd8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ef84:	bf00      	nop
 800ef86:	bf00      	nop
 800ef88:	3730      	adds	r7, #48	; 0x30
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	bd80      	pop	{r7, pc}
 800ef8e:	bf00      	nop
 800ef90:	20004c28 	.word	0x20004c28

0800ef94 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b088      	sub	sp, #32
 800ef98:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ef9a:	e048      	b.n	800f02e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ef9c:	4b2d      	ldr	r3, [pc, #180]	; (800f054 <prvSwitchTimerLists+0xc0>)
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	68db      	ldr	r3, [r3, #12]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800efa6:	4b2b      	ldr	r3, [pc, #172]	; (800f054 <prvSwitchTimerLists+0xc0>)
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	68db      	ldr	r3, [r3, #12]
 800efac:	68db      	ldr	r3, [r3, #12]
 800efae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	3304      	adds	r3, #4
 800efb4:	4618      	mov	r0, r3
 800efb6:	f7fd f93d 	bl	800c234 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	6a1b      	ldr	r3, [r3, #32]
 800efbe:	68f8      	ldr	r0, [r7, #12]
 800efc0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800efc8:	f003 0304 	and.w	r3, r3, #4
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d02e      	beq.n	800f02e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	699b      	ldr	r3, [r3, #24]
 800efd4:	693a      	ldr	r2, [r7, #16]
 800efd6:	4413      	add	r3, r2
 800efd8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800efda:	68ba      	ldr	r2, [r7, #8]
 800efdc:	693b      	ldr	r3, [r7, #16]
 800efde:	429a      	cmp	r2, r3
 800efe0:	d90e      	bls.n	800f000 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	68ba      	ldr	r2, [r7, #8]
 800efe6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	68fa      	ldr	r2, [r7, #12]
 800efec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800efee:	4b19      	ldr	r3, [pc, #100]	; (800f054 <prvSwitchTimerLists+0xc0>)
 800eff0:	681a      	ldr	r2, [r3, #0]
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	3304      	adds	r3, #4
 800eff6:	4619      	mov	r1, r3
 800eff8:	4610      	mov	r0, r2
 800effa:	f7fd f8e2 	bl	800c1c2 <vListInsert>
 800effe:	e016      	b.n	800f02e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f000:	2300      	movs	r3, #0
 800f002:	9300      	str	r3, [sp, #0]
 800f004:	2300      	movs	r3, #0
 800f006:	693a      	ldr	r2, [r7, #16]
 800f008:	2100      	movs	r1, #0
 800f00a:	68f8      	ldr	r0, [r7, #12]
 800f00c:	f7ff fd60 	bl	800ead0 <xTimerGenericCommand>
 800f010:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	2b00      	cmp	r3, #0
 800f016:	d10a      	bne.n	800f02e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800f018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f01c:	f383 8811 	msr	BASEPRI, r3
 800f020:	f3bf 8f6f 	isb	sy
 800f024:	f3bf 8f4f 	dsb	sy
 800f028:	603b      	str	r3, [r7, #0]
}
 800f02a:	bf00      	nop
 800f02c:	e7fe      	b.n	800f02c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f02e:	4b09      	ldr	r3, [pc, #36]	; (800f054 <prvSwitchTimerLists+0xc0>)
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d1b1      	bne.n	800ef9c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f038:	4b06      	ldr	r3, [pc, #24]	; (800f054 <prvSwitchTimerLists+0xc0>)
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f03e:	4b06      	ldr	r3, [pc, #24]	; (800f058 <prvSwitchTimerLists+0xc4>)
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	4a04      	ldr	r2, [pc, #16]	; (800f054 <prvSwitchTimerLists+0xc0>)
 800f044:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f046:	4a04      	ldr	r2, [pc, #16]	; (800f058 <prvSwitchTimerLists+0xc4>)
 800f048:	697b      	ldr	r3, [r7, #20]
 800f04a:	6013      	str	r3, [r2, #0]
}
 800f04c:	bf00      	nop
 800f04e:	3718      	adds	r7, #24
 800f050:	46bd      	mov	sp, r7
 800f052:	bd80      	pop	{r7, pc}
 800f054:	20004c20 	.word	0x20004c20
 800f058:	20004c24 	.word	0x20004c24

0800f05c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f05c:	b580      	push	{r7, lr}
 800f05e:	b082      	sub	sp, #8
 800f060:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f062:	f7fd fa3f 	bl	800c4e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f066:	4b15      	ldr	r3, [pc, #84]	; (800f0bc <prvCheckForValidListAndQueue+0x60>)
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d120      	bne.n	800f0b0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f06e:	4814      	ldr	r0, [pc, #80]	; (800f0c0 <prvCheckForValidListAndQueue+0x64>)
 800f070:	f7fd f856 	bl	800c120 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f074:	4813      	ldr	r0, [pc, #76]	; (800f0c4 <prvCheckForValidListAndQueue+0x68>)
 800f076:	f7fd f853 	bl	800c120 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f07a:	4b13      	ldr	r3, [pc, #76]	; (800f0c8 <prvCheckForValidListAndQueue+0x6c>)
 800f07c:	4a10      	ldr	r2, [pc, #64]	; (800f0c0 <prvCheckForValidListAndQueue+0x64>)
 800f07e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f080:	4b12      	ldr	r3, [pc, #72]	; (800f0cc <prvCheckForValidListAndQueue+0x70>)
 800f082:	4a10      	ldr	r2, [pc, #64]	; (800f0c4 <prvCheckForValidListAndQueue+0x68>)
 800f084:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f086:	2300      	movs	r3, #0
 800f088:	9300      	str	r3, [sp, #0]
 800f08a:	4b11      	ldr	r3, [pc, #68]	; (800f0d0 <prvCheckForValidListAndQueue+0x74>)
 800f08c:	4a11      	ldr	r2, [pc, #68]	; (800f0d4 <prvCheckForValidListAndQueue+0x78>)
 800f08e:	2110      	movs	r1, #16
 800f090:	200a      	movs	r0, #10
 800f092:	f7fd fc95 	bl	800c9c0 <xQueueGenericCreateStatic>
 800f096:	4603      	mov	r3, r0
 800f098:	4a08      	ldr	r2, [pc, #32]	; (800f0bc <prvCheckForValidListAndQueue+0x60>)
 800f09a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f09c:	4b07      	ldr	r3, [pc, #28]	; (800f0bc <prvCheckForValidListAndQueue+0x60>)
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d005      	beq.n	800f0b0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f0a4:	4b05      	ldr	r3, [pc, #20]	; (800f0bc <prvCheckForValidListAndQueue+0x60>)
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	490b      	ldr	r1, [pc, #44]	; (800f0d8 <prvCheckForValidListAndQueue+0x7c>)
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	f7fe fa66 	bl	800d57c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f0b0:	f7fd fa48 	bl	800c544 <vPortExitCritical>
}
 800f0b4:	bf00      	nop
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	bd80      	pop	{r7, pc}
 800f0ba:	bf00      	nop
 800f0bc:	20004c28 	.word	0x20004c28
 800f0c0:	20004bf8 	.word	0x20004bf8
 800f0c4:	20004c0c 	.word	0x20004c0c
 800f0c8:	20004c20 	.word	0x20004c20
 800f0cc:	20004c24 	.word	0x20004c24
 800f0d0:	20004cd4 	.word	0x20004cd4
 800f0d4:	20004c34 	.word	0x20004c34
 800f0d8:	0800f33c 	.word	0x0800f33c

0800f0dc <memset>:
 800f0dc:	4402      	add	r2, r0
 800f0de:	4603      	mov	r3, r0
 800f0e0:	4293      	cmp	r3, r2
 800f0e2:	d100      	bne.n	800f0e6 <memset+0xa>
 800f0e4:	4770      	bx	lr
 800f0e6:	f803 1b01 	strb.w	r1, [r3], #1
 800f0ea:	e7f9      	b.n	800f0e0 <memset+0x4>

0800f0ec <_reclaim_reent>:
 800f0ec:	4b29      	ldr	r3, [pc, #164]	; (800f194 <_reclaim_reent+0xa8>)
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	4283      	cmp	r3, r0
 800f0f2:	b570      	push	{r4, r5, r6, lr}
 800f0f4:	4604      	mov	r4, r0
 800f0f6:	d04b      	beq.n	800f190 <_reclaim_reent+0xa4>
 800f0f8:	69c3      	ldr	r3, [r0, #28]
 800f0fa:	b143      	cbz	r3, 800f10e <_reclaim_reent+0x22>
 800f0fc:	68db      	ldr	r3, [r3, #12]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d144      	bne.n	800f18c <_reclaim_reent+0xa0>
 800f102:	69e3      	ldr	r3, [r4, #28]
 800f104:	6819      	ldr	r1, [r3, #0]
 800f106:	b111      	cbz	r1, 800f10e <_reclaim_reent+0x22>
 800f108:	4620      	mov	r0, r4
 800f10a:	f000 f879 	bl	800f200 <_free_r>
 800f10e:	6961      	ldr	r1, [r4, #20]
 800f110:	b111      	cbz	r1, 800f118 <_reclaim_reent+0x2c>
 800f112:	4620      	mov	r0, r4
 800f114:	f000 f874 	bl	800f200 <_free_r>
 800f118:	69e1      	ldr	r1, [r4, #28]
 800f11a:	b111      	cbz	r1, 800f122 <_reclaim_reent+0x36>
 800f11c:	4620      	mov	r0, r4
 800f11e:	f000 f86f 	bl	800f200 <_free_r>
 800f122:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f124:	b111      	cbz	r1, 800f12c <_reclaim_reent+0x40>
 800f126:	4620      	mov	r0, r4
 800f128:	f000 f86a 	bl	800f200 <_free_r>
 800f12c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f12e:	b111      	cbz	r1, 800f136 <_reclaim_reent+0x4a>
 800f130:	4620      	mov	r0, r4
 800f132:	f000 f865 	bl	800f200 <_free_r>
 800f136:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f138:	b111      	cbz	r1, 800f140 <_reclaim_reent+0x54>
 800f13a:	4620      	mov	r0, r4
 800f13c:	f000 f860 	bl	800f200 <_free_r>
 800f140:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f142:	b111      	cbz	r1, 800f14a <_reclaim_reent+0x5e>
 800f144:	4620      	mov	r0, r4
 800f146:	f000 f85b 	bl	800f200 <_free_r>
 800f14a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800f14c:	b111      	cbz	r1, 800f154 <_reclaim_reent+0x68>
 800f14e:	4620      	mov	r0, r4
 800f150:	f000 f856 	bl	800f200 <_free_r>
 800f154:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800f156:	b111      	cbz	r1, 800f15e <_reclaim_reent+0x72>
 800f158:	4620      	mov	r0, r4
 800f15a:	f000 f851 	bl	800f200 <_free_r>
 800f15e:	6a23      	ldr	r3, [r4, #32]
 800f160:	b1b3      	cbz	r3, 800f190 <_reclaim_reent+0xa4>
 800f162:	4620      	mov	r0, r4
 800f164:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f168:	4718      	bx	r3
 800f16a:	5949      	ldr	r1, [r1, r5]
 800f16c:	b941      	cbnz	r1, 800f180 <_reclaim_reent+0x94>
 800f16e:	3504      	adds	r5, #4
 800f170:	69e3      	ldr	r3, [r4, #28]
 800f172:	2d80      	cmp	r5, #128	; 0x80
 800f174:	68d9      	ldr	r1, [r3, #12]
 800f176:	d1f8      	bne.n	800f16a <_reclaim_reent+0x7e>
 800f178:	4620      	mov	r0, r4
 800f17a:	f000 f841 	bl	800f200 <_free_r>
 800f17e:	e7c0      	b.n	800f102 <_reclaim_reent+0x16>
 800f180:	680e      	ldr	r6, [r1, #0]
 800f182:	4620      	mov	r0, r4
 800f184:	f000 f83c 	bl	800f200 <_free_r>
 800f188:	4631      	mov	r1, r6
 800f18a:	e7ef      	b.n	800f16c <_reclaim_reent+0x80>
 800f18c:	2500      	movs	r5, #0
 800f18e:	e7ef      	b.n	800f170 <_reclaim_reent+0x84>
 800f190:	bd70      	pop	{r4, r5, r6, pc}
 800f192:	bf00      	nop
 800f194:	20000334 	.word	0x20000334

0800f198 <__libc_init_array>:
 800f198:	b570      	push	{r4, r5, r6, lr}
 800f19a:	4d0d      	ldr	r5, [pc, #52]	; (800f1d0 <__libc_init_array+0x38>)
 800f19c:	4c0d      	ldr	r4, [pc, #52]	; (800f1d4 <__libc_init_array+0x3c>)
 800f19e:	1b64      	subs	r4, r4, r5
 800f1a0:	10a4      	asrs	r4, r4, #2
 800f1a2:	2600      	movs	r6, #0
 800f1a4:	42a6      	cmp	r6, r4
 800f1a6:	d109      	bne.n	800f1bc <__libc_init_array+0x24>
 800f1a8:	4d0b      	ldr	r5, [pc, #44]	; (800f1d8 <__libc_init_array+0x40>)
 800f1aa:	4c0c      	ldr	r4, [pc, #48]	; (800f1dc <__libc_init_array+0x44>)
 800f1ac:	f000 f880 	bl	800f2b0 <_init>
 800f1b0:	1b64      	subs	r4, r4, r5
 800f1b2:	10a4      	asrs	r4, r4, #2
 800f1b4:	2600      	movs	r6, #0
 800f1b6:	42a6      	cmp	r6, r4
 800f1b8:	d105      	bne.n	800f1c6 <__libc_init_array+0x2e>
 800f1ba:	bd70      	pop	{r4, r5, r6, pc}
 800f1bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800f1c0:	4798      	blx	r3
 800f1c2:	3601      	adds	r6, #1
 800f1c4:	e7ee      	b.n	800f1a4 <__libc_init_array+0xc>
 800f1c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800f1ca:	4798      	blx	r3
 800f1cc:	3601      	adds	r6, #1
 800f1ce:	e7f2      	b.n	800f1b6 <__libc_init_array+0x1e>
 800f1d0:	0800f3c0 	.word	0x0800f3c0
 800f1d4:	0800f3c0 	.word	0x0800f3c0
 800f1d8:	0800f3c0 	.word	0x0800f3c0
 800f1dc:	0800f3c4 	.word	0x0800f3c4

0800f1e0 <__retarget_lock_acquire_recursive>:
 800f1e0:	4770      	bx	lr

0800f1e2 <__retarget_lock_release_recursive>:
 800f1e2:	4770      	bx	lr

0800f1e4 <memcpy>:
 800f1e4:	440a      	add	r2, r1
 800f1e6:	4291      	cmp	r1, r2
 800f1e8:	f100 33ff 	add.w	r3, r0, #4294967295
 800f1ec:	d100      	bne.n	800f1f0 <memcpy+0xc>
 800f1ee:	4770      	bx	lr
 800f1f0:	b510      	push	{r4, lr}
 800f1f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f1f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f1fa:	4291      	cmp	r1, r2
 800f1fc:	d1f9      	bne.n	800f1f2 <memcpy+0xe>
 800f1fe:	bd10      	pop	{r4, pc}

0800f200 <_free_r>:
 800f200:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f202:	2900      	cmp	r1, #0
 800f204:	d044      	beq.n	800f290 <_free_r+0x90>
 800f206:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f20a:	9001      	str	r0, [sp, #4]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	f1a1 0404 	sub.w	r4, r1, #4
 800f212:	bfb8      	it	lt
 800f214:	18e4      	addlt	r4, r4, r3
 800f216:	f000 f83f 	bl	800f298 <__malloc_lock>
 800f21a:	4a1e      	ldr	r2, [pc, #120]	; (800f294 <_free_r+0x94>)
 800f21c:	9801      	ldr	r0, [sp, #4]
 800f21e:	6813      	ldr	r3, [r2, #0]
 800f220:	b933      	cbnz	r3, 800f230 <_free_r+0x30>
 800f222:	6063      	str	r3, [r4, #4]
 800f224:	6014      	str	r4, [r2, #0]
 800f226:	b003      	add	sp, #12
 800f228:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f22c:	f000 b83a 	b.w	800f2a4 <__malloc_unlock>
 800f230:	42a3      	cmp	r3, r4
 800f232:	d908      	bls.n	800f246 <_free_r+0x46>
 800f234:	6825      	ldr	r5, [r4, #0]
 800f236:	1961      	adds	r1, r4, r5
 800f238:	428b      	cmp	r3, r1
 800f23a:	bf01      	itttt	eq
 800f23c:	6819      	ldreq	r1, [r3, #0]
 800f23e:	685b      	ldreq	r3, [r3, #4]
 800f240:	1949      	addeq	r1, r1, r5
 800f242:	6021      	streq	r1, [r4, #0]
 800f244:	e7ed      	b.n	800f222 <_free_r+0x22>
 800f246:	461a      	mov	r2, r3
 800f248:	685b      	ldr	r3, [r3, #4]
 800f24a:	b10b      	cbz	r3, 800f250 <_free_r+0x50>
 800f24c:	42a3      	cmp	r3, r4
 800f24e:	d9fa      	bls.n	800f246 <_free_r+0x46>
 800f250:	6811      	ldr	r1, [r2, #0]
 800f252:	1855      	adds	r5, r2, r1
 800f254:	42a5      	cmp	r5, r4
 800f256:	d10b      	bne.n	800f270 <_free_r+0x70>
 800f258:	6824      	ldr	r4, [r4, #0]
 800f25a:	4421      	add	r1, r4
 800f25c:	1854      	adds	r4, r2, r1
 800f25e:	42a3      	cmp	r3, r4
 800f260:	6011      	str	r1, [r2, #0]
 800f262:	d1e0      	bne.n	800f226 <_free_r+0x26>
 800f264:	681c      	ldr	r4, [r3, #0]
 800f266:	685b      	ldr	r3, [r3, #4]
 800f268:	6053      	str	r3, [r2, #4]
 800f26a:	440c      	add	r4, r1
 800f26c:	6014      	str	r4, [r2, #0]
 800f26e:	e7da      	b.n	800f226 <_free_r+0x26>
 800f270:	d902      	bls.n	800f278 <_free_r+0x78>
 800f272:	230c      	movs	r3, #12
 800f274:	6003      	str	r3, [r0, #0]
 800f276:	e7d6      	b.n	800f226 <_free_r+0x26>
 800f278:	6825      	ldr	r5, [r4, #0]
 800f27a:	1961      	adds	r1, r4, r5
 800f27c:	428b      	cmp	r3, r1
 800f27e:	bf04      	itt	eq
 800f280:	6819      	ldreq	r1, [r3, #0]
 800f282:	685b      	ldreq	r3, [r3, #4]
 800f284:	6063      	str	r3, [r4, #4]
 800f286:	bf04      	itt	eq
 800f288:	1949      	addeq	r1, r1, r5
 800f28a:	6021      	streq	r1, [r4, #0]
 800f28c:	6054      	str	r4, [r2, #4]
 800f28e:	e7ca      	b.n	800f226 <_free_r+0x26>
 800f290:	b003      	add	sp, #12
 800f292:	bd30      	pop	{r4, r5, pc}
 800f294:	20004e60 	.word	0x20004e60

0800f298 <__malloc_lock>:
 800f298:	4801      	ldr	r0, [pc, #4]	; (800f2a0 <__malloc_lock+0x8>)
 800f29a:	f7ff bfa1 	b.w	800f1e0 <__retarget_lock_acquire_recursive>
 800f29e:	bf00      	nop
 800f2a0:	20004e5c 	.word	0x20004e5c

0800f2a4 <__malloc_unlock>:
 800f2a4:	4801      	ldr	r0, [pc, #4]	; (800f2ac <__malloc_unlock+0x8>)
 800f2a6:	f7ff bf9c 	b.w	800f1e2 <__retarget_lock_release_recursive>
 800f2aa:	bf00      	nop
 800f2ac:	20004e5c 	.word	0x20004e5c

0800f2b0 <_init>:
 800f2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2b2:	bf00      	nop
 800f2b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2b6:	bc08      	pop	{r3}
 800f2b8:	469e      	mov	lr, r3
 800f2ba:	4770      	bx	lr

0800f2bc <_fini>:
 800f2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2be:	bf00      	nop
 800f2c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2c2:	bc08      	pop	{r3}
 800f2c4:	469e      	mov	lr, r3
 800f2c6:	4770      	bx	lr
