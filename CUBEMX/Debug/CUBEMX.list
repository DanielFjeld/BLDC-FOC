
CUBEMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011c0c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b88  08011df0  08011df0  00021df0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012978  08012978  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  08012978  08012978  00022978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012980  08012980  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012980  08012980  00022980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012984  08012984  00022984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08012988  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001728  200001f0  08012b78  000301f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001918  08012b78  00031918  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026537  00000000  00000000  00030263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000530b  00000000  00000000  0005679a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001eb8  00000000  00000000  0005baa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000178f  00000000  00000000  0005d960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000265c8  00000000  00000000  0005f0ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002b5d3  00000000  00000000  000856b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eab28  00000000  00000000  000b0c8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000096b8  00000000  00000000  0019b7b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001a4e6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f0 	.word	0x200001f0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08011dd4 	.word	0x08011dd4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f4 	.word	0x200001f4
 800021c:	08011dd4 	.word	0x08011dd4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b970 	b.w	8000f90 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	460d      	mov	r5, r1
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	460f      	mov	r7, r1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d14a      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4694      	mov	ip, r2
 8000cdc:	d965      	bls.n	8000daa <__udivmoddi4+0xe2>
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	b143      	cbz	r3, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ce8:	f1c3 0220 	rsb	r2, r3, #32
 8000cec:	409f      	lsls	r7, r3
 8000cee:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf2:	4317      	orrs	r7, r2
 8000cf4:	409c      	lsls	r4, r3
 8000cf6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cfa:	fa1f f58c 	uxth.w	r5, ip
 8000cfe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d02:	0c22      	lsrs	r2, r4, #16
 8000d04:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d08:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d0c:	fb01 f005 	mul.w	r0, r1, r5
 8000d10:	4290      	cmp	r0, r2
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x62>
 8000d14:	eb1c 0202 	adds.w	r2, ip, r2
 8000d18:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d1c:	f080 811c 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d20:	4290      	cmp	r0, r2
 8000d22:	f240 8119 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d26:	3902      	subs	r1, #2
 8000d28:	4462      	add	r2, ip
 8000d2a:	1a12      	subs	r2, r2, r0
 8000d2c:	b2a4      	uxth	r4, r4
 8000d2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d36:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3a:	fb00 f505 	mul.w	r5, r0, r5
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	d90a      	bls.n	8000d58 <__udivmoddi4+0x90>
 8000d42:	eb1c 0404 	adds.w	r4, ip, r4
 8000d46:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d4a:	f080 8107 	bcs.w	8000f5c <__udivmoddi4+0x294>
 8000d4e:	42a5      	cmp	r5, r4
 8000d50:	f240 8104 	bls.w	8000f5c <__udivmoddi4+0x294>
 8000d54:	4464      	add	r4, ip
 8000d56:	3802      	subs	r0, #2
 8000d58:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d5c:	1b64      	subs	r4, r4, r5
 8000d5e:	2100      	movs	r1, #0
 8000d60:	b11e      	cbz	r6, 8000d6a <__udivmoddi4+0xa2>
 8000d62:	40dc      	lsrs	r4, r3
 8000d64:	2300      	movs	r3, #0
 8000d66:	e9c6 4300 	strd	r4, r3, [r6]
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0xbc>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80ed 	beq.w	8000f52 <__udivmoddi4+0x28a>
 8000d78:	2100      	movs	r1, #0
 8000d7a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d84:	fab3 f183 	clz	r1, r3
 8000d88:	2900      	cmp	r1, #0
 8000d8a:	d149      	bne.n	8000e20 <__udivmoddi4+0x158>
 8000d8c:	42ab      	cmp	r3, r5
 8000d8e:	d302      	bcc.n	8000d96 <__udivmoddi4+0xce>
 8000d90:	4282      	cmp	r2, r0
 8000d92:	f200 80f8 	bhi.w	8000f86 <__udivmoddi4+0x2be>
 8000d96:	1a84      	subs	r4, r0, r2
 8000d98:	eb65 0203 	sbc.w	r2, r5, r3
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	4617      	mov	r7, r2
 8000da0:	2e00      	cmp	r6, #0
 8000da2:	d0e2      	beq.n	8000d6a <__udivmoddi4+0xa2>
 8000da4:	e9c6 4700 	strd	r4, r7, [r6]
 8000da8:	e7df      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000daa:	b902      	cbnz	r2, 8000dae <__udivmoddi4+0xe6>
 8000dac:	deff      	udf	#255	; 0xff
 8000dae:	fab2 f382 	clz	r3, r2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000db8:	1a8a      	subs	r2, r1, r2
 8000dba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dbe:	fa1f fe8c 	uxth.w	lr, ip
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dc8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dcc:	0c22      	lsrs	r2, r4, #16
 8000dce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dd2:	fb0e f005 	mul.w	r0, lr, r5
 8000dd6:	4290      	cmp	r0, r2
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x124>
 8000dda:	eb1c 0202 	adds.w	r2, ip, r2
 8000dde:	f105 38ff 	add.w	r8, r5, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4290      	cmp	r0, r2
 8000de6:	f200 80cb 	bhi.w	8000f80 <__udivmoddi4+0x2b8>
 8000dea:	4645      	mov	r5, r8
 8000dec:	1a12      	subs	r2, r2, r0
 8000dee:	b2a4      	uxth	r4, r4
 8000df0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000df4:	fb07 2210 	mls	r2, r7, r0, r2
 8000df8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000e00:	45a6      	cmp	lr, r4
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x14e>
 8000e04:	eb1c 0404 	adds.w	r4, ip, r4
 8000e08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e0c:	d202      	bcs.n	8000e14 <__udivmoddi4+0x14c>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f200 80bb 	bhi.w	8000f8a <__udivmoddi4+0x2c2>
 8000e14:	4610      	mov	r0, r2
 8000e16:	eba4 040e 	sub.w	r4, r4, lr
 8000e1a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e1e:	e79f      	b.n	8000d60 <__udivmoddi4+0x98>
 8000e20:	f1c1 0720 	rsb	r7, r1, #32
 8000e24:	408b      	lsls	r3, r1
 8000e26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e2e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e32:	fa20 f307 	lsr.w	r3, r0, r7
 8000e36:	40fd      	lsrs	r5, r7
 8000e38:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e3c:	4323      	orrs	r3, r4
 8000e3e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	fb09 5518 	mls	r5, r9, r8, r5
 8000e4a:	0c1c      	lsrs	r4, r3, #16
 8000e4c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e50:	fb08 f50e 	mul.w	r5, r8, lr
 8000e54:	42a5      	cmp	r5, r4
 8000e56:	fa02 f201 	lsl.w	r2, r2, r1
 8000e5a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e68:	f080 8088 	bcs.w	8000f7c <__udivmoddi4+0x2b4>
 8000e6c:	42a5      	cmp	r5, r4
 8000e6e:	f240 8085 	bls.w	8000f7c <__udivmoddi4+0x2b4>
 8000e72:	f1a8 0802 	sub.w	r8, r8, #2
 8000e76:	4464      	add	r4, ip
 8000e78:	1b64      	subs	r4, r4, r5
 8000e7a:	b29d      	uxth	r5, r3
 8000e7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e80:	fb09 4413 	mls	r4, r9, r3, r4
 8000e84:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e88:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e98:	d26c      	bcs.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	d96a      	bls.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9e:	3b02      	subs	r3, #2
 8000ea0:	4464      	add	r4, ip
 8000ea2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ea6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	42ac      	cmp	r4, r5
 8000eb0:	46c8      	mov	r8, r9
 8000eb2:	46ae      	mov	lr, r5
 8000eb4:	d356      	bcc.n	8000f64 <__udivmoddi4+0x29c>
 8000eb6:	d053      	beq.n	8000f60 <__udivmoddi4+0x298>
 8000eb8:	b156      	cbz	r6, 8000ed0 <__udivmoddi4+0x208>
 8000eba:	ebb0 0208 	subs.w	r2, r0, r8
 8000ebe:	eb64 040e 	sbc.w	r4, r4, lr
 8000ec2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ec6:	40ca      	lsrs	r2, r1
 8000ec8:	40cc      	lsrs	r4, r1
 8000eca:	4317      	orrs	r7, r2
 8000ecc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed8:	f1c3 0120 	rsb	r1, r3, #32
 8000edc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ee0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ee4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ee8:	409d      	lsls	r5, r3
 8000eea:	432a      	orrs	r2, r5
 8000eec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef0:	fa1f fe8c 	uxth.w	lr, ip
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1510 	mls	r5, r7, r0, r1
 8000efc:	0c11      	lsrs	r1, r2, #16
 8000efe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f02:	fb00 f50e 	mul.w	r5, r0, lr
 8000f06:	428d      	cmp	r5, r1
 8000f08:	fa04 f403 	lsl.w	r4, r4, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x258>
 8000f0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f16:	d22f      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f18:	428d      	cmp	r5, r1
 8000f1a:	d92d      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4461      	add	r1, ip
 8000f20:	1b49      	subs	r1, r1, r5
 8000f22:	b292      	uxth	r2, r2
 8000f24:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f28:	fb07 1115 	mls	r1, r7, r5, r1
 8000f2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f30:	fb05 f10e 	mul.w	r1, r5, lr
 8000f34:	4291      	cmp	r1, r2
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x282>
 8000f38:	eb1c 0202 	adds.w	r2, ip, r2
 8000f3c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f40:	d216      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000f42:	4291      	cmp	r1, r2
 8000f44:	d914      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000f46:	3d02      	subs	r5, #2
 8000f48:	4462      	add	r2, ip
 8000f4a:	1a52      	subs	r2, r2, r1
 8000f4c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f50:	e738      	b.n	8000dc4 <__udivmoddi4+0xfc>
 8000f52:	4631      	mov	r1, r6
 8000f54:	4630      	mov	r0, r6
 8000f56:	e708      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000f58:	4639      	mov	r1, r7
 8000f5a:	e6e6      	b.n	8000d2a <__udivmoddi4+0x62>
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	e6fb      	b.n	8000d58 <__udivmoddi4+0x90>
 8000f60:	4548      	cmp	r0, r9
 8000f62:	d2a9      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f64:	ebb9 0802 	subs.w	r8, r9, r2
 8000f68:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	e7a3      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f70:	4645      	mov	r5, r8
 8000f72:	e7ea      	b.n	8000f4a <__udivmoddi4+0x282>
 8000f74:	462b      	mov	r3, r5
 8000f76:	e794      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f78:	4640      	mov	r0, r8
 8000f7a:	e7d1      	b.n	8000f20 <__udivmoddi4+0x258>
 8000f7c:	46d0      	mov	r8, sl
 8000f7e:	e77b      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f80:	3d02      	subs	r5, #2
 8000f82:	4462      	add	r2, ip
 8000f84:	e732      	b.n	8000dec <__udivmoddi4+0x124>
 8000f86:	4608      	mov	r0, r1
 8000f88:	e70a      	b.n	8000da0 <__udivmoddi4+0xd8>
 8000f8a:	4464      	add	r4, ip
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	e742      	b.n	8000e16 <__udivmoddi4+0x14e>

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <Current_IRQ>:
PID_instance Current_PID = {0};
PID_instance Velocity_PID = {0};
PID_instance Angle_PID = {0};

//-------------------IRQ handlers---------------------
void Current_IRQ(Current* ptr){
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	#ifdef RUNNING_LED_DEBUG
	HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
	HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
	#endif

    if(ptr != NULL)memcpy(&IRQ_Current, ptr, sizeof(Current));
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d008      	beq.n	8000fb4 <Current_IRQ+0x20>
 8000fa2:	2210      	movs	r2, #16
 8000fa4:	6879      	ldr	r1, [r7, #4]
 8000fa6:	4805      	ldr	r0, [pc, #20]	; (8000fbc <Current_IRQ+0x28>)
 8000fa8:	f00c fe8d 	bl	800dcc6 <memcpy>
    else return;
    Current_Callback_flag = 1;
 8000fac:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <Current_IRQ+0x2c>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	701a      	strb	r2, [r3, #0]
 8000fb2:	e000      	b.n	8000fb6 <Current_IRQ+0x22>
    else return;
 8000fb4:	bf00      	nop
}
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000210 	.word	0x20000210
 8000fc0:	2000020c 	.word	0x2000020c

08000fc4 <Voltage_Temp_IRQ>:
void Voltage_Temp_IRQ(Voltage_Temp* ptr){
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	memcpy(&IRQ_Voltage_Temp, ptr, sizeof(Voltage_Temp));
 8000fcc:	2208      	movs	r2, #8
 8000fce:	6879      	ldr	r1, [r7, #4]
 8000fd0:	4803      	ldr	r0, [pc, #12]	; (8000fe0 <Voltage_Temp_IRQ+0x1c>)
 8000fd2:	f00c fe78 	bl	800dcc6 <memcpy>
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000220 	.word	0x20000220

08000fe4 <Encoders_IRQ>:
void Encoders_IRQ(Encoders* ptr){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	memcpy(&IRQ_Encoders, ptr, sizeof(Encoders));
 8000fec:	221c      	movs	r2, #28
 8000fee:	6879      	ldr	r1, [r7, #4]
 8000ff0:	4803      	ldr	r0, [pc, #12]	; (8001000 <Encoders_IRQ+0x1c>)
 8000ff2:	f00c fe68 	bl	800dcc6 <memcpy>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000228 	.word	0x20000228

08001004 <Can_RX_Status_IRQ>:

//-------------------CAN RX------------------------
void Can_RX_Status_IRQ(CAN_Status* ptr){
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
	memcpy(&IRQ_Status, ptr, sizeof(CAN_Status));
 800100c:	220c      	movs	r2, #12
 800100e:	6879      	ldr	r1, [r7, #4]
 8001010:	4803      	ldr	r0, [pc, #12]	; (8001020 <Can_RX_Status_IRQ+0x1c>)
 8001012:	f00c fe58 	bl	800dcc6 <memcpy>

}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000244 	.word	0x20000244

08001024 <BLDC_main>:
	if(value < ptr->min)return ptr->min;
	return value;
}

//------------------------MAIN-------------------------
void BLDC_main(void){
 8001024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001028:	f5ad 7d60 	sub.w	sp, sp, #896	; 0x380
 800102c:	af02      	add	r7, sp, #8
	HAL_Delay(100);
 800102e:	2064      	movs	r0, #100	; 0x64
 8001030:	f003 ffce 	bl	8004fd0 <HAL_Delay>
	//----------------PID---------
	SetSampleTime(&Current_PID, 40); //40us = 25kHz
 8001034:	2128      	movs	r1, #40	; 0x28
 8001036:	48b5      	ldr	r0, [pc, #724]	; (800130c <BLDC_main+0x2e8>)
 8001038:	f001 fe48 	bl	8002ccc <SetSampleTime>
	SetTunings(&Current_PID, 0.005f, 10.0f, 0.0f, 1); //alva
 800103c:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8001040:	ed9f 1ab3 	vldr	s2, [pc, #716]	; 8001310 <BLDC_main+0x2ec>
 8001044:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8001048:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 8001314 <BLDC_main+0x2f0>
 800104c:	48af      	ldr	r0, [pc, #700]	; (800130c <BLDC_main+0x2e8>)
 800104e:	f001 fd83 	bl	8002b58 <SetTunings>
//	SetTunings(&Current_PID, 0.005f, 40.0f, 0.0f, 1); //gimbal
	SetOutputLimits(&Current_PID, 0, 1499);
 8001052:	eddf 0ab1 	vldr	s1, [pc, #708]	; 8001318 <BLDC_main+0x2f4>
 8001056:	ed9f 0aae 	vldr	s0, [pc, #696]	; 8001310 <BLDC_main+0x2ec>
 800105a:	48ac      	ldr	r0, [pc, #688]	; (800130c <BLDC_main+0x2e8>)
 800105c:	f001 fe6a 	bl	8002d34 <SetOutputLimits>
	SetControllerDirection(&Current_PID, DIRECT);
 8001060:	2100      	movs	r1, #0
 8001062:	48aa      	ldr	r0, [pc, #680]	; (800130c <BLDC_main+0x2e8>)
 8001064:	f001 ff16 	bl	8002e94 <SetControllerDirection>
	SetMode(&Current_PID,  AUTOMATIC);
 8001068:	2101      	movs	r1, #1
 800106a:	48a8      	ldr	r0, [pc, #672]	; (800130c <BLDC_main+0x2e8>)
 800106c:	f001 febe 	bl	8002dec <SetMode>
	Initialize(&Current_PID);
 8001070:	48a6      	ldr	r0, [pc, #664]	; (800130c <BLDC_main+0x2e8>)
 8001072:	f001 fedd 	bl	8002e30 <Initialize>

	SetSampleTime(&Velocity_PID, 100); //100s = 10kHz
 8001076:	2164      	movs	r1, #100	; 0x64
 8001078:	48a8      	ldr	r0, [pc, #672]	; (800131c <BLDC_main+0x2f8>)
 800107a:	f001 fe27 	bl	8002ccc <SetSampleTime>
	SetTunings(&Velocity_PID, 0.0005f, 0.03f, 0.0f, 1);
 800107e:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8001082:	ed9f 1aa3 	vldr	s2, [pc, #652]	; 8001310 <BLDC_main+0x2ec>
 8001086:	eddf 0aa6 	vldr	s1, [pc, #664]	; 8001320 <BLDC_main+0x2fc>
 800108a:	ed9f 0aa6 	vldr	s0, [pc, #664]	; 8001324 <BLDC_main+0x300>
 800108e:	48a3      	ldr	r0, [pc, #652]	; (800131c <BLDC_main+0x2f8>)
 8001090:	f001 fd62 	bl	8002b58 <SetTunings>
	SetOutputLimits(&Velocity_PID, 0, 30000);
 8001094:	eddf 0aa4 	vldr	s1, [pc, #656]	; 8001328 <BLDC_main+0x304>
 8001098:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 8001310 <BLDC_main+0x2ec>
 800109c:	489f      	ldr	r0, [pc, #636]	; (800131c <BLDC_main+0x2f8>)
 800109e:	f001 fe49 	bl	8002d34 <SetOutputLimits>
	SetControllerDirection(&Velocity_PID, DIRECT);
 80010a2:	2100      	movs	r1, #0
 80010a4:	489d      	ldr	r0, [pc, #628]	; (800131c <BLDC_main+0x2f8>)
 80010a6:	f001 fef5 	bl	8002e94 <SetControllerDirection>
	SetMode(&Velocity_PID,  AUTOMATIC);
 80010aa:	2101      	movs	r1, #1
 80010ac:	489b      	ldr	r0, [pc, #620]	; (800131c <BLDC_main+0x2f8>)
 80010ae:	f001 fe9d 	bl	8002dec <SetMode>
	Initialize(&Velocity_PID);
 80010b2:	489a      	ldr	r0, [pc, #616]	; (800131c <BLDC_main+0x2f8>)
 80010b4:	f001 febc 	bl	8002e30 <Initialize>


	SetSampleTime(&Angle_PID, 100); //100s = 10kHz
 80010b8:	2164      	movs	r1, #100	; 0x64
 80010ba:	489c      	ldr	r0, [pc, #624]	; (800132c <BLDC_main+0x308>)
 80010bc:	f001 fe06 	bl	8002ccc <SetSampleTime>
	SetTunings(&Angle_PID, 10.0f, 0.0f, 0.0f, 1);
 80010c0:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80010c4:	ed9f 1a92 	vldr	s2, [pc, #584]	; 8001310 <BLDC_main+0x2ec>
 80010c8:	eddf 0a91 	vldr	s1, [pc, #580]	; 8001310 <BLDC_main+0x2ec>
 80010cc:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80010d0:	4896      	ldr	r0, [pc, #600]	; (800132c <BLDC_main+0x308>)
 80010d2:	f001 fd41 	bl	8002b58 <SetTunings>
	SetOutputLimits(&Angle_PID, -4000000, 4000000);
 80010d6:	eddf 0a96 	vldr	s1, [pc, #600]	; 8001330 <BLDC_main+0x30c>
 80010da:	ed9f 0a96 	vldr	s0, [pc, #600]	; 8001334 <BLDC_main+0x310>
 80010de:	4893      	ldr	r0, [pc, #588]	; (800132c <BLDC_main+0x308>)
 80010e0:	f001 fe28 	bl	8002d34 <SetOutputLimits>
	SetControllerDirection(&Angle_PID, DIRECT);
 80010e4:	2100      	movs	r1, #0
 80010e6:	4891      	ldr	r0, [pc, #580]	; (800132c <BLDC_main+0x308>)
 80010e8:	f001 fed4 	bl	8002e94 <SetControllerDirection>
	SetMode(&Angle_PID,  AUTOMATIC);
 80010ec:	2101      	movs	r1, #1
 80010ee:	488f      	ldr	r0, [pc, #572]	; (800132c <BLDC_main+0x308>)
 80010f0:	f001 fe7c 	bl	8002dec <SetMode>
	Initialize(&Angle_PID);
 80010f4:	488d      	ldr	r0, [pc, #564]	; (800132c <BLDC_main+0x308>)
 80010f6:	f001 fe9b 	bl	8002e30 <Initialize>

	//setup encoder
	ORBIS_init((void*)&Encoders_IRQ);
 80010fa:	488f      	ldr	r0, [pc, #572]	; (8001338 <BLDC_main+0x314>)
 80010fc:	f001 fbb4 	bl	8002868 <ORBIS_init>

	//setup current
	current_init((void*)&Current_IRQ);
 8001100:	488e      	ldr	r0, [pc, #568]	; (800133c <BLDC_main+0x318>)
 8001102:	f001 ffa7 	bl	8003054 <current_init>
	//calibrate DC current offset
	//HAL_Delay(1000); //let thing settle before starting



	uint16_t current_offset_averaging = 100;
 8001106:	2364      	movs	r3, #100	; 0x64
 8001108:	f8a7 3376 	strh.w	r3, [r7, #886]	; 0x376
	volatile int32_t current_offset = 0;
 800110c:	2300      	movs	r3, #0
 800110e:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
	while (current_offset_averaging){
 8001112:	e013      	b.n	800113c <BLDC_main+0x118>
		while(!Current_Callback_flag);
 8001114:	bf00      	nop
 8001116:	4b8a      	ldr	r3, [pc, #552]	; (8001340 <BLDC_main+0x31c>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d0fb      	beq.n	8001116 <BLDC_main+0xf2>
		Current_Callback_flag = 0;
 800111e:	4b88      	ldr	r3, [pc, #544]	; (8001340 <BLDC_main+0x31c>)
 8001120:	2200      	movs	r2, #0
 8001122:	701a      	strb	r2, [r3, #0]
		current_offset += IRQ_Current.Current_DC;
 8001124:	4b87      	ldr	r3, [pc, #540]	; (8001344 <BLDC_main+0x320>)
 8001126:	68da      	ldr	r2, [r3, #12]
 8001128:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 800112c:	4413      	add	r3, r2
 800112e:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
		current_offset_averaging--;
 8001132:	f8b7 3376 	ldrh.w	r3, [r7, #886]	; 0x376
 8001136:	3b01      	subs	r3, #1
 8001138:	f8a7 3376 	strh.w	r3, [r7, #886]	; 0x376
	while (current_offset_averaging){
 800113c:	f8b7 3376 	ldrh.w	r3, [r7, #886]	; 0x376
 8001140:	2b00      	cmp	r3, #0
 8001142:	d1e7      	bne.n	8001114 <BLDC_main+0xf0>
	}
	current_offset = current_offset/100;
 8001144:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 8001148:	4a7f      	ldr	r2, [pc, #508]	; (8001348 <BLDC_main+0x324>)
 800114a:	fb82 1203 	smull	r1, r2, r2, r3
 800114e:	1152      	asrs	r2, r2, #5
 8001150:	17db      	asrs	r3, r3, #31
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360

	//setup voltage and temperature readings
	voltage_temperature_init((void*)&Voltage_Temp_IRQ);
 8001158:	487c      	ldr	r0, [pc, #496]	; (800134c <BLDC_main+0x328>)
 800115a:	f001 ffa1 	bl	80030a0 <voltage_temperature_init>
	//setup temperature and voltage
	//temp_volt_init((void*)&Voltage_Temp_IRQ);

	//setup CAN
	//-----------------CAN----------------------
	FDCAN_addCallback(&hfdcan1, (CAN_STATUS_ID << 8) 		| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_Status_IRQ);
 800115e:	4a7c      	ldr	r2, [pc, #496]	; (8001350 <BLDC_main+0x32c>)
 8001160:	2136      	movs	r1, #54	; 0x36
 8001162:	487c      	ldr	r0, [pc, #496]	; (8001354 <BLDC_main+0x330>)
 8001164:	f002 fac0 	bl	80036e8 <FDCAN_addCallback>
//	FDCAN_addCallback(&hfdcan1, (CAN_LIMITS_ID << 8) 		| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_Limits_IRQ);
//	FDCAN_addCallback(&hfdcan1, (CAN_PID_CURRENT_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_PID_Current_IRQ);
//	FDCAN_addCallback(&hfdcan1, (CAN_PID_VELOCITY_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_PID_Velocity_IRQ);
//	FDCAN_addCallback(&hfdcan1, (CAN_PID_ANGLE_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_PID_Angle_IRQ);

	FDCAN_Start(&hfdcan1);
 8001168:	487a      	ldr	r0, [pc, #488]	; (8001354 <BLDC_main+0x330>)
 800116a:	f002 faa1 	bl	80036b0 <FDCAN_Start>

	//--------------setup PWM------------------
	CTRL_init_PWM();
 800116e:	f000 f987 	bl	8001480 <CTRL_init_PWM>

	order_phases(&IRQ_Encoders, &IRQ_Current);
 8001172:	4974      	ldr	r1, [pc, #464]	; (8001344 <BLDC_main+0x320>)
 8001174:	4878      	ldr	r0, [pc, #480]	; (8001358 <BLDC_main+0x334>)
 8001176:	f000 fb21 	bl	80017bc <order_phases>
	calibrate(&IRQ_Encoders, &IRQ_Current);
 800117a:	4972      	ldr	r1, [pc, #456]	; (8001344 <BLDC_main+0x320>)
 800117c:	4876      	ldr	r0, [pc, #472]	; (8001358 <BLDC_main+0x334>)
 800117e:	f000 fc6b 	bl	8001a58 <calibrate>

	uint32_t test_encoder;

	float differance = 0;
 8001182:	f04f 0300 	mov.w	r3, #0
 8001186:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
	for (int i = 0; i < (SIZE*NPP); i++){
 800118a:	2300      	movs	r3, #0
 800118c:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
 8001190:	e011      	b.n	80011b6 <BLDC_main+0x192>
		differance += error_filt[i];
 8001192:	4a72      	ldr	r2, [pc, #456]	; (800135c <BLDC_main+0x338>)
 8001194:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	4413      	add	r3, r2
 800119c:	edd3 7a00 	vldr	s15, [r3]
 80011a0:	ed97 7adb 	vldr	s14, [r7, #876]	; 0x36c
 80011a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011a8:	edc7 7adb 	vstr	s15, [r7, #876]	; 0x36c
	for (int i = 0; i < (SIZE*NPP); i++){
 80011ac:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 80011b0:	3301      	adds	r3, #1
 80011b2:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
 80011b6:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 80011ba:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 80011be:	dbe8      	blt.n	8001192 <BLDC_main+0x16e>
	}
	differance = differance/(SIZE*NPP);
 80011c0:	ed97 7adb 	vldr	s14, [r7, #876]	; 0x36c
 80011c4:	eddf 6a66 	vldr	s13, [pc, #408]	; 8001360 <BLDC_main+0x33c>
 80011c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011cc:	edc7 7adb 	vstr	s15, [r7, #876]	; 0x36c

	while(1){
		int16_t index_error = (int16_t)(IRQ_Encoders.Encoder1_pos/1000);// - electrical_offset);
 80011d0:	4b61      	ldr	r3, [pc, #388]	; (8001358 <BLDC_main+0x334>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a63      	ldr	r2, [pc, #396]	; (8001364 <BLDC_main+0x340>)
 80011d6:	fba2 2303 	umull	r2, r3, r2, r3
 80011da:	099b      	lsrs	r3, r3, #6
 80011dc:	f8a7 3366 	strh.w	r3, [r7, #870]	; 0x366
		if (index_error >= 360)index_error -= 360;
 80011e0:	f9b7 3366 	ldrsh.w	r3, [r7, #870]	; 0x366
 80011e4:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80011e8:	db06      	blt.n	80011f8 <BLDC_main+0x1d4>
 80011ea:	f8b7 3366 	ldrh.w	r3, [r7, #870]	; 0x366
 80011ee:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	f8a7 3366 	strh.w	r3, [r7, #870]	; 0x366
		if (index_error < 0)index_error += 360;
 80011f8:	f9b7 3366 	ldrsh.w	r3, [r7, #870]	; 0x366
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	da06      	bge.n	800120e <BLDC_main+0x1ea>
 8001200:	f8b7 3366 	ldrh.w	r3, [r7, #870]	; 0x366
 8001204:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001208:	b29b      	uxth	r3, r3
 800120a:	f8a7 3366 	strh.w	r3, [r7, #870]	; 0x366

		uint16_t index_error2 = (index_error*(SIZE*NPP))/360;
 800120e:	f9b7 2366 	ldrsh.w	r2, [r7, #870]	; 0x366
 8001212:	4613      	mov	r3, r2
 8001214:	011b      	lsls	r3, r3, #4
 8001216:	4413      	add	r3, r2
 8001218:	011b      	lsls	r3, r3, #4
 800121a:	4a53      	ldr	r2, [pc, #332]	; (8001368 <BLDC_main+0x344>)
 800121c:	fb82 1203 	smull	r1, r2, r2, r3
 8001220:	441a      	add	r2, r3
 8001222:	1212      	asrs	r2, r2, #8
 8001224:	17db      	asrs	r3, r3, #31
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	f8a7 3364 	strh.w	r3, [r7, #868]	; 0x364
		if (index_error2 >= (SIZE*NPP))index_error2 -= (SIZE*NPP);
 800122c:	f8b7 3364 	ldrh.w	r3, [r7, #868]	; 0x364
 8001230:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8001234:	d305      	bcc.n	8001242 <BLDC_main+0x21e>
 8001236:	f8b7 3364 	ldrh.w	r3, [r7, #868]	; 0x364
 800123a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800123e:	f8a7 3364 	strh.w	r3, [r7, #868]	; 0x364
		PrintServerPrintf("%d  %.4f  %d  %d\n\r"
 8001242:	f9b7 8366 	ldrsh.w	r8, [r7, #870]	; 0x366
				, index_error
				, (error_filt[index_error2] - differance)
 8001246:	f8b7 3364 	ldrh.w	r3, [r7, #868]	; 0x364
 800124a:	4a44      	ldr	r2, [pc, #272]	; (800135c <BLDC_main+0x338>)
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	4413      	add	r3, r2
 8001250:	ed93 7a00 	vldr	s14, [r3]
 8001254:	edd7 7adb 	vldr	s15, [r7, #876]	; 0x36c
 8001258:	ee77 7a67 	vsub.f32	s15, s14, s15
		PrintServerPrintf("%d  %.4f  %d  %d\n\r"
 800125c:	ee17 0a90 	vmov	r0, s15
 8001260:	f7ff f99a 	bl	8000598 <__aeabi_f2d>
 8001264:	4604      	mov	r4, r0
 8001266:	460d      	mov	r5, r1
 8001268:	4b3b      	ldr	r3, [pc, #236]	; (8001358 <BLDC_main+0x334>)
 800126a:	681e      	ldr	r6, [r3, #0]
				, IRQ_Encoders.Encoder1_pos
				, mech_to_el_deg((motor_lut[index_error]*360000)/(SIZE*NPP), 0));
 800126c:	f9b7 3366 	ldrsh.w	r3, [r7, #870]	; 0x366
 8001270:	4a3e      	ldr	r2, [pc, #248]	; (800136c <BLDC_main+0x348>)
 8001272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001276:	4a3e      	ldr	r2, [pc, #248]	; (8001370 <BLDC_main+0x34c>)
 8001278:	fb02 f303 	mul.w	r3, r2, r3
 800127c:	4a3d      	ldr	r2, [pc, #244]	; (8001374 <BLDC_main+0x350>)
 800127e:	fba2 2303 	umull	r2, r3, r2, r3
 8001282:	0a1b      	lsrs	r3, r3, #8
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f000 f87c 	bl	8001384 <mech_to_el_deg>
 800128c:	4603      	mov	r3, r0
		PrintServerPrintf("%d  %.4f  %d  %d\n\r"
 800128e:	9301      	str	r3, [sp, #4]
 8001290:	9600      	str	r6, [sp, #0]
 8001292:	4622      	mov	r2, r4
 8001294:	462b      	mov	r3, r5
 8001296:	4641      	mov	r1, r8
 8001298:	4837      	ldr	r0, [pc, #220]	; (8001378 <BLDC_main+0x354>)
 800129a:	f001 fe09 	bl	8002eb0 <PrintServerPrintf>
		test_encoder = mech_to_el_deg(motor_lut[index_error], 0)+(0*90);
 800129e:	f9b7 3366 	ldrsh.w	r3, [r7, #870]	; 0x366
 80012a2:	4a32      	ldr	r2, [pc, #200]	; (800136c <BLDC_main+0x348>)
 80012a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a8:	2100      	movs	r1, #0
 80012aa:	4618      	mov	r0, r3
 80012ac:	f000 f86a 	bl	8001384 <mech_to_el_deg>
 80012b0:	4603      	mov	r3, r0
 80012b2:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
		//inverter(test_encoder, 100);
		HAL_Delay(10);
 80012b6:	200a      	movs	r0, #10
 80012b8:	f003 fe8a 	bl	8004fd0 <HAL_Delay>
//- differance
		inverter(mech_to_el_deg(IRQ_Encoders.Encoder1_pos - (int32_t)((error_filt[index_error2] )*1000), (uint32_t)(electrical_offset*1000))+(0*90), 100);
 80012bc:	4b26      	ldr	r3, [pc, #152]	; (8001358 <BLDC_main+0x334>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f8b7 2364 	ldrh.w	r2, [r7, #868]	; 0x364
 80012c4:	4925      	ldr	r1, [pc, #148]	; (800135c <BLDC_main+0x338>)
 80012c6:	0092      	lsls	r2, r2, #2
 80012c8:	440a      	add	r2, r1
 80012ca:	edd2 7a00 	vldr	s15, [r2]
 80012ce:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800137c <BLDC_main+0x358>
 80012d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012da:	ee17 2a90 	vmov	r2, s15
 80012de:	1a9b      	subs	r3, r3, r2
 80012e0:	461a      	mov	r2, r3
 80012e2:	4b27      	ldr	r3, [pc, #156]	; (8001380 <BLDC_main+0x35c>)
 80012e4:	edd3 7a00 	vldr	s15, [r3]
 80012e8:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800137c <BLDC_main+0x358>
 80012ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012f4:	ee17 3a90 	vmov	r3, s15
 80012f8:	4619      	mov	r1, r3
 80012fa:	4610      	mov	r0, r2
 80012fc:	f000 f842 	bl	8001384 <mech_to_el_deg>
 8001300:	4603      	mov	r3, r0
 8001302:	2164      	movs	r1, #100	; 0x64
 8001304:	4618      	mov	r0, r3
 8001306:	f000 f907 	bl	8001518 <inverter>
	while(1){
 800130a:	e761      	b.n	80011d0 <BLDC_main+0x1ac>
 800130c:	20000250 	.word	0x20000250
 8001310:	00000000 	.word	0x00000000
 8001314:	3ba3d70a 	.word	0x3ba3d70a
 8001318:	44bb6000 	.word	0x44bb6000
 800131c:	20000290 	.word	0x20000290
 8001320:	3cf5c28f 	.word	0x3cf5c28f
 8001324:	3a03126f 	.word	0x3a03126f
 8001328:	46ea6000 	.word	0x46ea6000
 800132c:	200002d0 	.word	0x200002d0
 8001330:	4a742400 	.word	0x4a742400
 8001334:	ca742400 	.word	0xca742400
 8001338:	08000fe5 	.word	0x08000fe5
 800133c:	08000f95 	.word	0x08000f95
 8001340:	2000020c 	.word	0x2000020c
 8001344:	20000210 	.word	0x20000210
 8001348:	51eb851f 	.word	0x51eb851f
 800134c:	08000fc5 	.word	0x08000fc5
 8001350:	08001005 	.word	0x08001005
 8001354:	20001358 	.word	0x20001358
 8001358:	20000228 	.word	0x20000228
 800135c:	20000310 	.word	0x20000310
 8001360:	43880000 	.word	0x43880000
 8001364:	10624dd3 	.word	0x10624dd3
 8001368:	b60b60b7 	.word	0xb60b60b7
 800136c:	20000758 	.word	0x20000758
 8001370:	00057e40 	.word	0x00057e40
 8001374:	f0f0f0f1 	.word	0xf0f0f0f1
 8001378:	08011df0 	.word	0x08011df0
 800137c:	447a0000 	.word	0x447a0000
 8001380:	20000754 	.word	0x20000754

08001384 <mech_to_el_deg>:
		#endif
		#endif
	}
}

int16_t mech_to_el_deg(int32_t angle_deg, int32_t offset_deg){
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
	float temp = (float)(angle_deg-offset_deg+360000*2);
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
 8001398:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 800139c:	ee07 3a90 	vmov	s15, r3
 80013a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a4:	edc7 7a03 	vstr	s15, [r7, #12]
	while (temp > 360000) temp = temp-360000;
 80013a8:	e007      	b.n	80013ba <mech_to_el_deg+0x36>
 80013aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80013ae:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001470 <mech_to_el_deg+0xec>
 80013b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013b6:	edc7 7a03 	vstr	s15, [r7, #12]
 80013ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80013be:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001470 <mech_to_el_deg+0xec>
 80013c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ca:	dcee      	bgt.n	80013aa <mech_to_el_deg+0x26>
	while (temp > (360000/17)) temp = temp-deg_pr_pole;
 80013cc:	e007      	b.n	80013de <mech_to_el_deg+0x5a>
 80013ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80013d2:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001474 <mech_to_el_deg+0xf0>
 80013d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013da:	edc7 7a03 	vstr	s15, [r7, #12]
 80013de:	edd7 7a03 	vldr	s15, [r7, #12]
 80013e2:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001474 <mech_to_el_deg+0xf0>
 80013e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ee:	dcee      	bgt.n	80013ce <mech_to_el_deg+0x4a>
	temp = temp*17/1000;
 80013f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80013f4:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 80013f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013fc:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8001478 <mech_to_el_deg+0xf4>
 8001400:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001404:	edc7 7a03 	vstr	s15, [r7, #12]
	while (temp > 360) temp -= 360;
 8001408:	e007      	b.n	800141a <mech_to_el_deg+0x96>
 800140a:	edd7 7a03 	vldr	s15, [r7, #12]
 800140e:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800147c <mech_to_el_deg+0xf8>
 8001412:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001416:	edc7 7a03 	vstr	s15, [r7, #12]
 800141a:	edd7 7a03 	vldr	s15, [r7, #12]
 800141e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800147c <mech_to_el_deg+0xf8>
 8001422:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800142a:	dcee      	bgt.n	800140a <mech_to_el_deg+0x86>
	if(temp < 0) return 0;
 800142c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001430:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001438:	d501      	bpl.n	800143e <mech_to_el_deg+0xba>
 800143a:	2300      	movs	r3, #0
 800143c:	e012      	b.n	8001464 <mech_to_el_deg+0xe0>
	else if(temp > 360) return 360;
 800143e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001442:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800147c <mech_to_el_deg+0xf8>
 8001446:	eef4 7ac7 	vcmpe.f32	s15, s14
 800144a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800144e:	dd02      	ble.n	8001456 <mech_to_el_deg+0xd2>
 8001450:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001454:	e006      	b.n	8001464 <mech_to_el_deg+0xe0>
	else return (int16_t)temp;
 8001456:	edd7 7a03 	vldr	s15, [r7, #12]
 800145a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800145e:	ee17 3a90 	vmov	r3, s15
 8001462:	b21b      	sxth	r3, r3

//	return (int16_t)((((angle_deg)-offset_deg+360000*2)%deg_pr_pole)/(1000/17))%360;
}
 8001464:	4618      	mov	r0, r3
 8001466:	3714      	adds	r7, #20
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	48afc800 	.word	0x48afc800
 8001474:	46a57000 	.word	0x46a57000
 8001478:	447a0000 	.word	0x447a0000
 800147c:	43b40000 	.word	0x43b40000

08001480 <CTRL_init_PWM>:

//PWM setup
#define duty_max 1499
#define pi 3.1415926535

void CTRL_init_PWM(void){
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) Error_Handler(); //error
 8001484:	2100      	movs	r1, #0
 8001486:	4821      	ldr	r0, [pc, #132]	; (800150c <CTRL_init_PWM+0x8c>)
 8001488:	f008 ff70 	bl	800a36c <HAL_TIM_PWM_Start>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <CTRL_init_PWM+0x16>
 8001492:	f002 ff07 	bl	80042a4 <Error_Handler>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) Error_Handler(); //error
 8001496:	2100      	movs	r1, #0
 8001498:	481c      	ldr	r0, [pc, #112]	; (800150c <CTRL_init_PWM+0x8c>)
 800149a:	f00a f865 	bl	800b568 <HAL_TIMEx_PWMN_Start>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <CTRL_init_PWM+0x28>
 80014a4:	f002 fefe 	bl	80042a4 <Error_Handler>

	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK) Error_Handler(); //error
 80014a8:	2104      	movs	r1, #4
 80014aa:	4818      	ldr	r0, [pc, #96]	; (800150c <CTRL_init_PWM+0x8c>)
 80014ac:	f008 ff5e 	bl	800a36c <HAL_TIM_PWM_Start>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <CTRL_init_PWM+0x3a>
 80014b6:	f002 fef5 	bl	80042a4 <Error_Handler>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2) != HAL_OK) Error_Handler(); //error
 80014ba:	2104      	movs	r1, #4
 80014bc:	4813      	ldr	r0, [pc, #76]	; (800150c <CTRL_init_PWM+0x8c>)
 80014be:	f00a f853 	bl	800b568 <HAL_TIMEx_PWMN_Start>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <CTRL_init_PWM+0x4c>
 80014c8:	f002 feec 	bl	80042a4 <Error_Handler>

	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3) != HAL_OK) Error_Handler(); //error
 80014cc:	2108      	movs	r1, #8
 80014ce:	480f      	ldr	r0, [pc, #60]	; (800150c <CTRL_init_PWM+0x8c>)
 80014d0:	f008 ff4c 	bl	800a36c <HAL_TIM_PWM_Start>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <CTRL_init_PWM+0x5e>
 80014da:	f002 fee3 	bl	80042a4 <Error_Handler>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3) != HAL_OK) Error_Handler(); //error
 80014de:	2108      	movs	r1, #8
 80014e0:	480a      	ldr	r0, [pc, #40]	; (800150c <CTRL_init_PWM+0x8c>)
 80014e2:	f00a f841 	bl	800b568 <HAL_TIMEx_PWMN_Start>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <CTRL_init_PWM+0x70>
 80014ec:	f002 feda 	bl	80042a4 <Error_Handler>

	TIM1->CCR1 = 0;
 80014f0:	4b07      	ldr	r3, [pc, #28]	; (8001510 <CTRL_init_PWM+0x90>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 80014f6:	4b06      	ldr	r3, [pc, #24]	; (8001510 <CTRL_init_PWM+0x90>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 80014fc:	4b04      	ldr	r3, [pc, #16]	; (8001510 <CTRL_init_PWM+0x90>)
 80014fe:	2200      	movs	r2, #0
 8001500:	63da      	str	r2, [r3, #60]	; 0x3c

	HAL_TIM_Base_Start_IT(&htim3);
 8001502:	4804      	ldr	r0, [pc, #16]	; (8001514 <CTRL_init_PWM+0x94>)
 8001504:	f008 fe66 	bl	800a1d4 <HAL_TIM_Base_Start_IT>
}
 8001508:	bf00      	nop
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20001640 	.word	0x20001640
 8001510:	40012c00 	.word	0x40012c00
 8001514:	2000168c 	.word	0x2000168c

08001518 <inverter>:
//sin(θ◦) ≈ 4θ(180 − θ) 40500 − θ(180 − θ);
//float _sin(float deg){
//	return (4*deg*(180-deg)/(40500 - deg*(180-deg)));
//}

void inverter(int16_t angle, uint16_t voltage){
 8001518:	b480      	push	{r7}
 800151a:	b089      	sub	sp, #36	; 0x24
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	460a      	mov	r2, r1
 8001522:	80fb      	strh	r3, [r7, #6]
 8001524:	4613      	mov	r3, r2
 8001526:	80bb      	strh	r3, [r7, #4]
	angle = (angle+360*2)%360;
 8001528:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800152c:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8001530:	4a9c      	ldr	r2, [pc, #624]	; (80017a4 <inverter+0x28c>)
 8001532:	fb82 1203 	smull	r1, r2, r2, r3
 8001536:	441a      	add	r2, r3
 8001538:	1211      	asrs	r1, r2, #8
 800153a:	17da      	asrs	r2, r3, #31
 800153c:	1a8a      	subs	r2, r1, r2
 800153e:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001542:	fb01 f202 	mul.w	r2, r1, r2
 8001546:	1a9a      	subs	r2, r3, r2
 8001548:	4613      	mov	r3, r2
 800154a:	80fb      	strh	r3, [r7, #6]
	angle = (360 - angle);
 800154c:	88fb      	ldrh	r3, [r7, #6]
 800154e:	f5c3 73b4 	rsb	r3, r3, #360	; 0x168
 8001552:	b29b      	uxth	r3, r3
 8001554:	80fb      	strh	r3, [r7, #6]
	angle = angle%360;
 8001556:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800155a:	4a92      	ldr	r2, [pc, #584]	; (80017a4 <inverter+0x28c>)
 800155c:	fb82 1203 	smull	r1, r2, r2, r3
 8001560:	441a      	add	r2, r3
 8001562:	1211      	asrs	r1, r2, #8
 8001564:	17da      	asrs	r2, r3, #31
 8001566:	1a8a      	subs	r2, r1, r2
 8001568:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800156c:	fb01 f202 	mul.w	r2, r1, r2
 8001570:	1a9b      	subs	r3, r3, r2
 8001572:	80fb      	strh	r3, [r7, #6]
	uint32_t compare_M1 = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	61fb      	str	r3, [r7, #28]
	uint32_t compare_M2 = 0;
 8001578:	2300      	movs	r3, #0
 800157a:	61bb      	str	r3, [r7, #24]
	uint32_t compare_M3 = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]

	float deg = (float)(angle%60);
 8001580:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001584:	4b88      	ldr	r3, [pc, #544]	; (80017a8 <inverter+0x290>)
 8001586:	fb83 1302 	smull	r1, r3, r3, r2
 800158a:	4413      	add	r3, r2
 800158c:	1159      	asrs	r1, r3, #5
 800158e:	17d3      	asrs	r3, r2, #31
 8001590:	1ac9      	subs	r1, r1, r3
 8001592:	460b      	mov	r3, r1
 8001594:	011b      	lsls	r3, r3, #4
 8001596:	1a5b      	subs	r3, r3, r1
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	b21b      	sxth	r3, r3
 800159e:	ee07 3a90 	vmov	s15, r3
 80015a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015a6:	edc7 7a04 	vstr	s15, [r7, #16]
	//uint32_t T1 = (uint32_t )(duty_max*duty*((240-4*deg)*(120-deg)/(40500 - (60-deg)*(120-deg))) ); //*pi/180
	uint16_t T1 = (uint16_t)(voltage*(float)( 4*(60-deg)*(180-(60-deg))/(40500 - (60-deg)*(180-(60-deg))))); //*pi/180
 80015aa:	88bb      	ldrh	r3, [r7, #4]
 80015ac:	ee07 3a90 	vmov	s15, r3
 80015b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015b4:	eddf 6a7d 	vldr	s13, [pc, #500]	; 80017ac <inverter+0x294>
 80015b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80015bc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80015c0:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80015c4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80015c8:	ed9f 6a78 	vldr	s12, [pc, #480]	; 80017ac <inverter+0x294>
 80015cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80015d0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80015d4:	ed9f 6a76 	vldr	s12, [pc, #472]	; 80017b0 <inverter+0x298>
 80015d8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80015dc:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80015e0:	eddf 6a72 	vldr	s13, [pc, #456]	; 80017ac <inverter+0x294>
 80015e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80015e8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80015ec:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80017ac <inverter+0x294>
 80015f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80015f4:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80015f8:	eddf 5a6d 	vldr	s11, [pc, #436]	; 80017b0 <inverter+0x298>
 80015fc:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001600:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001604:	eddf 6a6b 	vldr	s13, [pc, #428]	; 80017b4 <inverter+0x29c>
 8001608:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800160c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001614:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001618:	ee17 3a90 	vmov	r3, s15
 800161c:	81fb      	strh	r3, [r7, #14]
	uint16_t T2 = (uint16_t)(voltage*(float)(4*deg*(180-deg)/(40500 - deg*(180-deg))));
 800161e:	88bb      	ldrh	r3, [r7, #4]
 8001620:	ee07 3a90 	vmov	s15, r3
 8001624:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001628:	edd7 7a04 	vldr	s15, [r7, #16]
 800162c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001630:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001634:	ed9f 6a5e 	vldr	s12, [pc, #376]	; 80017b0 <inverter+0x298>
 8001638:	edd7 7a04 	vldr	s15, [r7, #16]
 800163c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001640:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001644:	eddf 6a5a 	vldr	s13, [pc, #360]	; 80017b0 <inverter+0x298>
 8001648:	edd7 7a04 	vldr	s15, [r7, #16]
 800164c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001650:	edd7 7a04 	vldr	s15, [r7, #16]
 8001654:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001658:	eddf 6a56 	vldr	s13, [pc, #344]	; 80017b4 <inverter+0x29c>
 800165c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001660:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001664:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001668:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800166c:	ee17 3a90 	vmov	r3, s15
 8001670:	81bb      	strh	r3, [r7, #12]
	uint16_t T0 = (duty_max-T1-T2)/2;
 8001672:	89fb      	ldrh	r3, [r7, #14]
 8001674:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8001678:	3303      	adds	r3, #3
 800167a:	89ba      	ldrh	r2, [r7, #12]
 800167c:	1a9b      	subs	r3, r3, r2
 800167e:	0fda      	lsrs	r2, r3, #31
 8001680:	4413      	add	r3, r2
 8001682:	105b      	asrs	r3, r3, #1
 8001684:	817b      	strh	r3, [r7, #10]

	if(angle >= 0 && angle < 60){
 8001686:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800168a:	2b00      	cmp	r3, #0
 800168c:	db10      	blt.n	80016b0 <inverter+0x198>
 800168e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001692:	2b3b      	cmp	r3, #59	; 0x3b
 8001694:	dc0c      	bgt.n	80016b0 <inverter+0x198>
		compare_M1 = T0;
 8001696:	897b      	ldrh	r3, [r7, #10]
 8001698:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0+T2;
 800169a:	897a      	ldrh	r2, [r7, #10]
 800169c:	89bb      	ldrh	r3, [r7, #12]
 800169e:	4413      	add	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0+T1+T2;
 80016a2:	897a      	ldrh	r2, [r7, #10]
 80016a4:	89fb      	ldrh	r3, [r7, #14]
 80016a6:	441a      	add	r2, r3
 80016a8:	89bb      	ldrh	r3, [r7, #12]
 80016aa:	4413      	add	r3, r2
 80016ac:	617b      	str	r3, [r7, #20]
 80016ae:	e06a      	b.n	8001786 <inverter+0x26e>
		}
	else if(angle >= 60 && angle < 120){
 80016b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016b4:	2b3b      	cmp	r3, #59	; 0x3b
 80016b6:	dd10      	ble.n	80016da <inverter+0x1c2>
 80016b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016bc:	2b77      	cmp	r3, #119	; 0x77
 80016be:	dc0c      	bgt.n	80016da <inverter+0x1c2>
		compare_M1 = T0;
 80016c0:	897b      	ldrh	r3, [r7, #10]
 80016c2:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0+T1+T2;
 80016c4:	897a      	ldrh	r2, [r7, #10]
 80016c6:	89fb      	ldrh	r3, [r7, #14]
 80016c8:	441a      	add	r2, r3
 80016ca:	89bb      	ldrh	r3, [r7, #12]
 80016cc:	4413      	add	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0+T1;
 80016d0:	897a      	ldrh	r2, [r7, #10]
 80016d2:	89fb      	ldrh	r3, [r7, #14]
 80016d4:	4413      	add	r3, r2
 80016d6:	617b      	str	r3, [r7, #20]
 80016d8:	e055      	b.n	8001786 <inverter+0x26e>
		}
	else if(angle >= 120 && angle < 180){
 80016da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016de:	2b77      	cmp	r3, #119	; 0x77
 80016e0:	dd10      	ble.n	8001704 <inverter+0x1ec>
 80016e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016e6:	2bb3      	cmp	r3, #179	; 0xb3
 80016e8:	dc0c      	bgt.n	8001704 <inverter+0x1ec>
		compare_M1 = T0+T2;
 80016ea:	897a      	ldrh	r2, [r7, #10]
 80016ec:	89bb      	ldrh	r3, [r7, #12]
 80016ee:	4413      	add	r3, r2
 80016f0:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0+T1+T2;
 80016f2:	897a      	ldrh	r2, [r7, #10]
 80016f4:	89fb      	ldrh	r3, [r7, #14]
 80016f6:	441a      	add	r2, r3
 80016f8:	89bb      	ldrh	r3, [r7, #12]
 80016fa:	4413      	add	r3, r2
 80016fc:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0;
 80016fe:	897b      	ldrh	r3, [r7, #10]
 8001700:	617b      	str	r3, [r7, #20]
 8001702:	e040      	b.n	8001786 <inverter+0x26e>
		}
	else if(angle >= 180 && angle < 240){
 8001704:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001708:	2bb3      	cmp	r3, #179	; 0xb3
 800170a:	dd10      	ble.n	800172e <inverter+0x216>
 800170c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001710:	2bef      	cmp	r3, #239	; 0xef
 8001712:	dc0c      	bgt.n	800172e <inverter+0x216>
		compare_M1 = T0+T1+T2;
 8001714:	897a      	ldrh	r2, [r7, #10]
 8001716:	89fb      	ldrh	r3, [r7, #14]
 8001718:	441a      	add	r2, r3
 800171a:	89bb      	ldrh	r3, [r7, #12]
 800171c:	4413      	add	r3, r2
 800171e:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0+T1;
 8001720:	897a      	ldrh	r2, [r7, #10]
 8001722:	89fb      	ldrh	r3, [r7, #14]
 8001724:	4413      	add	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0;
 8001728:	897b      	ldrh	r3, [r7, #10]
 800172a:	617b      	str	r3, [r7, #20]
 800172c:	e02b      	b.n	8001786 <inverter+0x26e>
		}
	else if(angle >= 240 && angle < 300){
 800172e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001732:	2bef      	cmp	r3, #239	; 0xef
 8001734:	dd11      	ble.n	800175a <inverter+0x242>
 8001736:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800173a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800173e:	da0c      	bge.n	800175a <inverter+0x242>
		compare_M1 = T0+T1+T2;
 8001740:	897a      	ldrh	r2, [r7, #10]
 8001742:	89fb      	ldrh	r3, [r7, #14]
 8001744:	441a      	add	r2, r3
 8001746:	89bb      	ldrh	r3, [r7, #12]
 8001748:	4413      	add	r3, r2
 800174a:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0;
 800174c:	897b      	ldrh	r3, [r7, #10]
 800174e:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0+T2;
 8001750:	897a      	ldrh	r2, [r7, #10]
 8001752:	89bb      	ldrh	r3, [r7, #12]
 8001754:	4413      	add	r3, r2
 8001756:	617b      	str	r3, [r7, #20]
 8001758:	e015      	b.n	8001786 <inverter+0x26e>
		}
	else if(angle >= 300 && angle <= 360){
 800175a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800175e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001762:	db10      	blt.n	8001786 <inverter+0x26e>
 8001764:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001768:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800176c:	dc0b      	bgt.n	8001786 <inverter+0x26e>
		compare_M1 = T0+T1;
 800176e:	897a      	ldrh	r2, [r7, #10]
 8001770:	89fb      	ldrh	r3, [r7, #14]
 8001772:	4413      	add	r3, r2
 8001774:	61fb      	str	r3, [r7, #28]
		compare_M2 = T0;
 8001776:	897b      	ldrh	r3, [r7, #10]
 8001778:	61bb      	str	r3, [r7, #24]
		compare_M3 = T0+T1+T2;
 800177a:	897a      	ldrh	r2, [r7, #10]
 800177c:	89fb      	ldrh	r3, [r7, #14]
 800177e:	441a      	add	r2, r3
 8001780:	89bb      	ldrh	r3, [r7, #12]
 8001782:	4413      	add	r3, r2
 8001784:	617b      	str	r3, [r7, #20]
		}
//	PrintServerPrintf("OK %d %d %d %d\r\n", (uint32_t)(compare_M1), (uint32_t)(compare_M2), (uint32_t)(compare_M3), (int32_t)angle);
	TIM1->CCR1 = compare_M1;
 8001786:	4a0c      	ldr	r2, [pc, #48]	; (80017b8 <inverter+0x2a0>)
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2 = compare_M2;
 800178c:	4a0a      	ldr	r2, [pc, #40]	; (80017b8 <inverter+0x2a0>)
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1->CCR3 = compare_M3;
 8001792:	4a09      	ldr	r2, [pc, #36]	; (80017b8 <inverter+0x2a0>)
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	63d3      	str	r3, [r2, #60]	; 0x3c

//	dac_value(angle*8+200);

}
 8001798:	bf00      	nop
 800179a:	3724      	adds	r7, #36	; 0x24
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	b60b60b7 	.word	0xb60b60b7
 80017a8:	88888889 	.word	0x88888889
 80017ac:	42700000 	.word	0x42700000
 80017b0:	43340000 	.word	0x43340000
 80017b4:	471e3400 	.word	0x471e3400
 80017b8:	40012c00 	.word	0x40012c00

080017bc <order_phases>:
float electrical_offset = 0;
float pi = 3.14159265f;

uint32_t motor_lut[LUT_SIZE];

void order_phases(Encoders *ps, Current *cs){ //, GPIOStruct *gpio, ControllerStruct *controller, PreferenceWriter *prefs
 80017bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80017c0:	b090      	sub	sp, #64	; 0x40
 80017c2:	af04      	add	r7, sp, #16
 80017c4:	6078      	str	r0, [r7, #4]
 80017c6:	6039      	str	r1, [r7, #0]

    ///Checks phase order, to ensure that positive Q current produces
    ///torque in the positive direction wrt the position sensor.
	PrintServerPrintf("\n\r Checking phase ordering\n\r");
 80017c8:	4896      	ldr	r0, [pc, #600]	; (8001a24 <order_phases+0x268>)
 80017ca:	f001 fb71 	bl	8002eb0 <PrintServerPrintf>
    float theta_ref = 0;
 80017ce:	f04f 0300 	mov.w	r3, #0
 80017d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    float theta_actual = 0;
 80017d4:	f04f 0300 	mov.w	r3, #0
 80017d8:	623b      	str	r3, [r7, #32]
    int sample_counter = 0;
 80017da:	2300      	movs	r3, #0
 80017dc:	62bb      	str	r3, [r7, #40]	; 0x28
    float d;
    float q;


    ///Set voltage angle to zero, wait for rotor position to settle
    inverter((int16_t)theta_ref, CAL_DUTY);
 80017de:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80017e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017e6:	ee17 3a90 	vmov	r3, s15
 80017ea:	b21b      	sxth	r3, r3
 80017ec:	2164      	movs	r1, #100	; 0x64
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff fe92 	bl	8001518 <inverter>
    HAL_Delay(1000);
 80017f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017f8:	f003 fbea 	bl	8004fd0 <HAL_Delay>
    //float theta_start = ps->GetMechPositionFixed();                                  //get initial rotor position
    float theta_start;

    //current d and q
    dq0(theta_ref*pi/180, (float)cs->Current_M1/1000, (float)cs->Current_M2/1000, (float)cs->Current_M3/1000, &d, &q);
 80017fc:	4b8a      	ldr	r3, [pc, #552]	; (8001a28 <order_phases+0x26c>)
 80017fe:	ed93 7a00 	vldr	s14, [r3]
 8001802:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800180a:	eddf 6a88 	vldr	s13, [pc, #544]	; 8001a2c <order_phases+0x270>
 800180e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	ee07 3a90 	vmov	s15, r3
 800181a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800181e:	ed9f 6a84 	vldr	s12, [pc, #528]	; 8001a30 <order_phases+0x274>
 8001822:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	ee07 3a90 	vmov	s15, r3
 800182e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001832:	eddf 5a7f 	vldr	s11, [pc, #508]	; 8001a30 <order_phases+0x274>
 8001836:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	ee07 3a90 	vmov	s15, r3
 8001842:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001846:	ed9f 5a7a 	vldr	s10, [pc, #488]	; 8001a30 <order_phases+0x274>
 800184a:	eec7 5a85 	vdiv.f32	s11, s15, s10
 800184e:	f107 020c 	add.w	r2, r7, #12
 8001852:	f107 0310 	add.w	r3, r7, #16
 8001856:	4611      	mov	r1, r2
 8001858:	4618      	mov	r0, r3
 800185a:	eef0 1a65 	vmov.f32	s3, s11
 800185e:	eeb0 1a46 	vmov.f32	s2, s12
 8001862:	eef0 0a66 	vmov.f32	s1, s13
 8001866:	eeb0 0a47 	vmov.f32	s0, s14
 800186a:	f001 fe7b 	bl	8003564 <dq0>
//    controller->i_b = I_SCALE*(float)(controller->adc2_raw - controller->adc2_offset);    //Calculate phase currents from ADC readings
//    controller->i_c = I_SCALE*(float)(controller->adc1_raw - controller->adc1_offset);
//    controller->i_a = -controller->i_b - controller->i_c;
//    dq0(controller->theta_elec, controller->i_a, controller->i_b, controller->i_c, &controller->i_d, &controller->i_q);    //dq0 transform on currents
    float current = sqrt((d*d + q*q));
 800186e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001872:	edd7 7a04 	vldr	s15, [r7, #16]
 8001876:	ee27 7a27 	vmul.f32	s14, s14, s15
 800187a:	edd7 6a03 	vldr	s13, [r7, #12]
 800187e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001882:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001886:	ee77 7a27 	vadd.f32	s15, s14, s15
 800188a:	ee17 0a90 	vmov	r0, s15
 800188e:	f7fe fe83 	bl	8000598 <__aeabi_f2d>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	ec43 2b10 	vmov	d0, r2, r3
 800189a:	f00e fabd 	bl	800fe18 <sqrt>
 800189e:	ec53 2b10 	vmov	r2, r3, d0
 80018a2:	4610      	mov	r0, r2
 80018a4:	4619      	mov	r1, r3
 80018a6:	f7ff f9a7 	bl	8000bf8 <__aeabi_d2f>
 80018aa:	4603      	mov	r3, r0
 80018ac:	61fb      	str	r3, [r7, #28]
    PrintServerPrintf("\n\rCurrent\n\r");
 80018ae:	4861      	ldr	r0, [pc, #388]	; (8001a34 <order_phases+0x278>)
 80018b0:	f001 fafe 	bl	8002eb0 <PrintServerPrintf>
    PrintServerPrintf("%f %f %f\n\r\n\r", d, q, current);
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7fe fe6e 	bl	8000598 <__aeabi_f2d>
 80018bc:	4680      	mov	r8, r0
 80018be:	4689      	mov	r9, r1
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7fe fe68 	bl	8000598 <__aeabi_f2d>
 80018c8:	4604      	mov	r4, r0
 80018ca:	460d      	mov	r5, r1
 80018cc:	69f8      	ldr	r0, [r7, #28]
 80018ce:	f7fe fe63 	bl	8000598 <__aeabi_f2d>
 80018d2:	4602      	mov	r2, r0
 80018d4:	460b      	mov	r3, r1
 80018d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80018da:	e9cd 4500 	strd	r4, r5, [sp]
 80018de:	4642      	mov	r2, r8
 80018e0:	464b      	mov	r3, r9
 80018e2:	4855      	ldr	r0, [pc, #340]	; (8001a38 <order_phases+0x27c>)
 80018e4:	f001 fae4 	bl	8002eb0 <PrintServerPrintf>
    /// Rotate voltage angle
    while(theta_ref < 360*2){       //rotate for 2 electrical cycles
 80018e8:	e04a      	b.n	8001980 <order_phases+0x1c4>
    	inverter((int16_t)theta_ref, CAL_DUTY);
 80018ea:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80018ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018f2:	ee17 3a90 	vmov	r3, s15
 80018f6:	b21b      	sxth	r3, r3
 80018f8:	2164      	movs	r1, #100	; 0x64
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff fe0c 	bl	8001518 <inverter>
    	HAL_Delay(1);
 8001900:	2001      	movs	r0, #1
 8001902:	f003 fb65 	bl	8004fd0 <HAL_Delay>
       theta_actual = (float)ps->Encoder1_pos/1000; //sample position sensor
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	ee07 3a90 	vmov	s15, r3
 800190e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001912:	eddf 6a47 	vldr	s13, [pc, #284]	; 8001a30 <order_phases+0x274>
 8001916:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800191a:	edc7 7a08 	vstr	s15, [r7, #32]
       if(theta_ref==0){theta_start = theta_actual;}
 800191e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001922:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800192a:	d101      	bne.n	8001930 <order_phases+0x174>
 800192c:	6a3b      	ldr	r3, [r7, #32]
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
       if(sample_counter >= 1){
 8001930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001932:	2b00      	cmp	r3, #0
 8001934:	dd19      	ble.n	800196a <order_phases+0x1ae>
           sample_counter = 0 ;
 8001936:	2300      	movs	r3, #0
 8001938:	62bb      	str	r3, [r7, #40]	; 0x28
           PrintServerPrintf("%.4f %.4f\n\r", (float)theta_ref/(NPP), theta_actual);
 800193a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800193e:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8001942:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001946:	ee16 0a90 	vmov	r0, s13
 800194a:	f7fe fe25 	bl	8000598 <__aeabi_f2d>
 800194e:	4604      	mov	r4, r0
 8001950:	460d      	mov	r5, r1
 8001952:	6a38      	ldr	r0, [r7, #32]
 8001954:	f7fe fe20 	bl	8000598 <__aeabi_f2d>
 8001958:	4602      	mov	r2, r0
 800195a:	460b      	mov	r3, r1
 800195c:	e9cd 2300 	strd	r2, r3, [sp]
 8001960:	4622      	mov	r2, r4
 8001962:	462b      	mov	r3, r5
 8001964:	4835      	ldr	r0, [pc, #212]	; (8001a3c <order_phases+0x280>)
 8001966:	f001 faa3 	bl	8002eb0 <PrintServerPrintf>
        }
        sample_counter++;
 800196a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800196c:	3301      	adds	r3, #1
 800196e:	62bb      	str	r3, [r7, #40]	; 0x28
       theta_ref += 1;
 8001970:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001974:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001978:	ee77 7a87 	vadd.f32	s15, s15, s14
 800197c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    while(theta_ref < 360*2){       //rotate for 2 electrical cycles
 8001980:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001984:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001a40 <order_phases+0x284>
 8001988:	eef4 7ac7 	vcmpe.f32	s15, s14
 800198c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001990:	d4ab      	bmi.n	80018ea <order_phases+0x12e>
        }
    float theta_end = (float)ps->Encoder1_pos/1000;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	ee07 3a90 	vmov	s15, r3
 800199a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800199e:	eddf 6a24 	vldr	s13, [pc, #144]	; 8001a30 <order_phases+0x274>
 80019a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019a6:	edc7 7a06 	vstr	s15, [r7, #24]
    int direction = (theta_end - theta_start)>0;
 80019aa:	ed97 7a06 	vldr	s14, [r7, #24]
 80019ae:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80019b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019be:	bfcc      	ite	gt
 80019c0:	2301      	movgt	r3, #1
 80019c2:	2300      	movle	r3, #0
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	617b      	str	r3, [r7, #20]
    PrintServerPrintf("Theta Start:   %f    Theta End:  %f\n\r", theta_start, theta_end);
 80019c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80019ca:	f7fe fde5 	bl	8000598 <__aeabi_f2d>
 80019ce:	4604      	mov	r4, r0
 80019d0:	460d      	mov	r5, r1
 80019d2:	69b8      	ldr	r0, [r7, #24]
 80019d4:	f7fe fde0 	bl	8000598 <__aeabi_f2d>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	e9cd 2300 	strd	r2, r3, [sp]
 80019e0:	4622      	mov	r2, r4
 80019e2:	462b      	mov	r3, r5
 80019e4:	4817      	ldr	r0, [pc, #92]	; (8001a44 <order_phases+0x288>)
 80019e6:	f001 fa63 	bl	8002eb0 <PrintServerPrintf>
    PrintServerPrintf("Direction:  %d\n\r", direction);
 80019ea:	6979      	ldr	r1, [r7, #20]
 80019ec:	4816      	ldr	r0, [pc, #88]	; (8001a48 <order_phases+0x28c>)
 80019ee:	f001 fa5f 	bl	8002eb0 <PrintServerPrintf>
    if(direction){PrintServerPrintf("Phasing correct\n\r");}
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d003      	beq.n	8001a00 <order_phases+0x244>
 80019f8:	4814      	ldr	r0, [pc, #80]	; (8001a4c <order_phases+0x290>)
 80019fa:	f001 fa59 	bl	8002eb0 <PrintServerPrintf>
 80019fe:	e005      	b.n	8001a0c <order_phases+0x250>
    else if(!direction){PrintServerPrintf("Phasing incorrect.  Swapping phases V and W\n\r");}
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d102      	bne.n	8001a0c <order_phases+0x250>
 8001a06:	4812      	ldr	r0, [pc, #72]	; (8001a50 <order_phases+0x294>)
 8001a08:	f001 fa52 	bl	8002eb0 <PrintServerPrintf>
    PHASE_ORDER = direction;
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	4b10      	ldr	r3, [pc, #64]	; (8001a54 <order_phases+0x298>)
 8001a12:	701a      	strb	r2, [r3, #0]
    HAL_Delay(10);
 8001a14:	200a      	movs	r0, #10
 8001a16:	f003 fadb 	bl	8004fd0 <HAL_Delay>
    }
 8001a1a:	bf00      	nop
 8001a1c:	3730      	adds	r7, #48	; 0x30
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a24:	08011e04 	.word	0x08011e04
 8001a28:	20000000 	.word	0x20000000
 8001a2c:	43340000 	.word	0x43340000
 8001a30:	447a0000 	.word	0x447a0000
 8001a34:	08011e24 	.word	0x08011e24
 8001a38:	08011e30 	.word	0x08011e30
 8001a3c:	08011e40 	.word	0x08011e40
 8001a40:	44340000 	.word	0x44340000
 8001a44:	08011e4c 	.word	0x08011e4c
 8001a48:	08011e74 	.word	0x08011e74
 8001a4c:	08011e88 	.word	0x08011e88
 8001a50:	08011e9c 	.word	0x08011e9c
 8001a54:	20000750 	.word	0x20000750

08001a58 <calibrate>:


void calibrate(Encoders *ps, Current *cs){ //, PositionSensor *ps, GPIOStruct *gpio, ControllerStruct *controller, PreferenceWriter *prefs
 8001a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a5c:	f2ad 5d84 	subw	sp, sp, #1412	; 0x584
 8001a60:	af06      	add	r7, sp, #24
 8001a62:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8001a66:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8001a6a:	6018      	str	r0, [r3, #0]
 8001a6c:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8001a70:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 8001a74:	6019      	str	r1, [r3, #0]
 8001a76:	466b      	mov	r3, sp
 8001a78:	461e      	mov	r6, r3
    /// Measures the electrical angle offset of the position sensor
    /// and (in the future) corrects nonlinearity due to position sensor eccentricity
	PrintServerPrintf("Starting calibration procedure\n\r");
 8001a7a:	48ec      	ldr	r0, [pc, #944]	; (8001e2c <calibrate+0x3d4>)
 8001a7c:	f001 fa18 	bl	8002eb0 <PrintServerPrintf>

   const int n = SIZE*NPP;                                                      // number of positions to be sampled per mechanical rotation.  Multiple of NPP for filtering reasons (see later)
 8001a80:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001a84:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
   const int n2 = 40;                                                          // increments between saved samples (for smoothing motion)
 8001a88:	2328      	movs	r3, #40	; 0x28
 8001a8a:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
   float delta = 360.0f*NPP/(n*n2);                                              // change in angle between samples
 8001a8e:	f8d7 2528 	ldr.w	r2, [r7, #1320]	; 0x528
 8001a92:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8001a96:	fb02 f303 	mul.w	r3, r2, r3
 8001a9a:	ee07 3a90 	vmov	s15, r3
 8001a9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aa2:	eddf 6ae3 	vldr	s13, [pc, #908]	; 8001e30 <calibrate+0x3d8>
 8001aa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001aaa:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001aae:	edc3 7a00 	vstr	s15, [r3]
   const int  n_lut =  SIZE*NPP;
 8001ab2:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001ab6:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
   const int window = WINDOW_SIZE;
 8001aba:	2310      	movs	r3, #16
 8001abc:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
   float cogging_current[WINDOW_SIZE] = {0};
 8001ac0:	f507 6093 	add.w	r0, r7, #1176	; 0x498
 8001ac4:	2340      	movs	r3, #64	; 0x40
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	2100      	movs	r1, #0
 8001aca:	f00c f87d 	bl	800dbc8 <memset>


   float theta_ref = 0;
 8001ace:	f04f 0300 	mov.w	r3, #0
 8001ad2:	f207 5264 	addw	r2, r7, #1380	; 0x564
 8001ad6:	6013      	str	r3, [r2, #0]
   float theta_actual = 0;
 8001ad8:	f04f 0300 	mov.w	r3, #0
 8001adc:	f207 5214 	addw	r2, r7, #1300	; 0x514
 8001ae0:	6013      	str	r3, [r2, #0]

   float d;
   float q;


    float error_f[n];
 8001ae2:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
 8001aec:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8001af0:	2200      	movs	r2, #0
 8001af2:	461c      	mov	r4, r3
 8001af4:	4615      	mov	r5, r2
 8001af6:	f04f 0200 	mov.w	r2, #0
 8001afa:	f04f 0300 	mov.w	r3, #0
 8001afe:	016b      	lsls	r3, r5, #5
 8001b00:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001b04:	0162      	lsls	r2, r4, #5
 8001b06:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	4698      	mov	r8, r3
 8001b0e:	4691      	mov	r9, r2
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	f04f 0300 	mov.w	r3, #0
 8001b18:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8001b1c:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8001b20:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8001b24:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	3307      	adds	r3, #7
 8001b2c:	08db      	lsrs	r3, r3, #3
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	ebad 0d03 	sub.w	sp, sp, r3
 8001b34:	ab06      	add	r3, sp, #24
 8001b36:	3303      	adds	r3, #3
 8001b38:	089b      	lsrs	r3, r3, #2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
    float error_b[n];
 8001b40:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8001b44:	3b01      	subs	r3, #1
 8001b46:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
 8001b4a:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8001b4e:	2200      	movs	r2, #0
 8001b50:	469a      	mov	sl, r3
 8001b52:	4693      	mov	fp, r2
 8001b54:	f04f 0200 	mov.w	r2, #0
 8001b58:	f04f 0300 	mov.w	r3, #0
 8001b5c:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8001b60:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8001b64:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8001b68:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	643b      	str	r3, [r7, #64]	; 0x40
 8001b70:	647a      	str	r2, [r7, #68]	; 0x44
 8001b72:	f04f 0200 	mov.w	r2, #0
 8001b76:	f04f 0300 	mov.w	r3, #0
 8001b7a:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8001b7e:	4629      	mov	r1, r5
 8001b80:	014b      	lsls	r3, r1, #5
 8001b82:	4621      	mov	r1, r4
 8001b84:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8001b88:	4621      	mov	r1, r4
 8001b8a:	014a      	lsls	r2, r1, #5
 8001b8c:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	3307      	adds	r3, #7
 8001b94:	08db      	lsrs	r3, r3, #3
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	ebad 0d03 	sub.w	sp, sp, r3
 8001b9c:	ab06      	add	r3, sp, #24
 8001b9e:	3303      	adds	r3, #3
 8001ba0:	089b      	lsrs	r3, r3, #2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
    int lut[n];
 8001ba8:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8001bac:	3b01      	subs	r3, #1
 8001bae:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
 8001bb2:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bba:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001bbc:	f04f 0200 	mov.w	r2, #0
 8001bc0:	f04f 0300 	mov.w	r3, #0
 8001bc4:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8001bc8:	4629      	mov	r1, r5
 8001bca:	014b      	lsls	r3, r1, #5
 8001bcc:	4621      	mov	r1, r4
 8001bce:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8001bd2:	4621      	mov	r1, r4
 8001bd4:	014a      	lsls	r2, r1, #5
 8001bd6:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8001bda:	2200      	movs	r2, #0
 8001bdc:	633b      	str	r3, [r7, #48]	; 0x30
 8001bde:	637a      	str	r2, [r7, #52]	; 0x34
 8001be0:	f04f 0200 	mov.w	r2, #0
 8001be4:	f04f 0300 	mov.w	r3, #0
 8001be8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001bec:	4629      	mov	r1, r5
 8001bee:	014b      	lsls	r3, r1, #5
 8001bf0:	4621      	mov	r1, r4
 8001bf2:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8001bf6:	4621      	mov	r1, r4
 8001bf8:	014a      	lsls	r2, r1, #5
 8001bfa:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	3307      	adds	r3, #7
 8001c02:	08db      	lsrs	r3, r3, #3
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	ebad 0d03 	sub.w	sp, sp, r3
 8001c0a:	ab06      	add	r3, sp, #24
 8001c0c:	3303      	adds	r3, #3
 8001c0e:	089b      	lsrs	r3, r3, #2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
    int raw_f[n];
 8001c16:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	f8c7 34f8 	str.w	r3, [r7, #1272]	; 0x4f8
 8001c20:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8001c24:	2200      	movs	r2, #0
 8001c26:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c2a:	f04f 0200 	mov.w	r2, #0
 8001c2e:	f04f 0300 	mov.w	r3, #0
 8001c32:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001c36:	4629      	mov	r1, r5
 8001c38:	014b      	lsls	r3, r1, #5
 8001c3a:	4621      	mov	r1, r4
 8001c3c:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8001c40:	4621      	mov	r1, r4
 8001c42:	014a      	lsls	r2, r1, #5
 8001c44:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8001c48:	2200      	movs	r2, #0
 8001c4a:	623b      	str	r3, [r7, #32]
 8001c4c:	627a      	str	r2, [r7, #36]	; 0x24
 8001c4e:	f04f 0200 	mov.w	r2, #0
 8001c52:	f04f 0300 	mov.w	r3, #0
 8001c56:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001c5a:	4629      	mov	r1, r5
 8001c5c:	014b      	lsls	r3, r1, #5
 8001c5e:	4621      	mov	r1, r4
 8001c60:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8001c64:	4621      	mov	r1, r4
 8001c66:	014a      	lsls	r2, r1, #5
 8001c68:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	3307      	adds	r3, #7
 8001c70:	08db      	lsrs	r3, r3, #3
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	ebad 0d03 	sub.w	sp, sp, r3
 8001c78:	ab06      	add	r3, sp, #24
 8001c7a:	3303      	adds	r3, #3
 8001c7c:	089b      	lsrs	r3, r3, #2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
    int raw_b[n];
 8001c84:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	f8c7 34f0 	str.w	r3, [r7, #1264]	; 0x4f0
 8001c8e:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8001c92:	2200      	movs	r2, #0
 8001c94:	61bb      	str	r3, [r7, #24]
 8001c96:	61fa      	str	r2, [r7, #28]
 8001c98:	f04f 0200 	mov.w	r2, #0
 8001c9c:	f04f 0300 	mov.w	r3, #0
 8001ca0:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001ca4:	4629      	mov	r1, r5
 8001ca6:	014b      	lsls	r3, r1, #5
 8001ca8:	4621      	mov	r1, r4
 8001caa:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8001cae:	4621      	mov	r1, r4
 8001cb0:	014a      	lsls	r2, r1, #5
 8001cb2:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	613b      	str	r3, [r7, #16]
 8001cba:	617a      	str	r2, [r7, #20]
 8001cbc:	f04f 0200 	mov.w	r2, #0
 8001cc0:	f04f 0300 	mov.w	r3, #0
 8001cc4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001cc8:	4629      	mov	r1, r5
 8001cca:	014b      	lsls	r3, r1, #5
 8001ccc:	4621      	mov	r1, r4
 8001cce:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8001cd2:	4621      	mov	r1, r4
 8001cd4:	014a      	lsls	r2, r1, #5
 8001cd6:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	3307      	adds	r3, #7
 8001cde:	08db      	lsrs	r3, r3, #3
 8001ce0:	00db      	lsls	r3, r3, #3
 8001ce2:	ebad 0d03 	sub.w	sp, sp, r3
 8001ce6:	ab06      	add	r3, sp, #24
 8001ce8:	3303      	adds	r3, #3
 8001cea:	089b      	lsrs	r3, r3, #2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
    float error[n];
 8001cf2:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	f8c7 34e8 	str.w	r3, [r7, #1256]	; 0x4e8
 8001cfc:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8001d00:	2200      	movs	r2, #0
 8001d02:	60bb      	str	r3, [r7, #8]
 8001d04:	60fa      	str	r2, [r7, #12]
 8001d06:	f04f 0200 	mov.w	r2, #0
 8001d0a:	f04f 0300 	mov.w	r3, #0
 8001d0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d12:	4629      	mov	r1, r5
 8001d14:	014b      	lsls	r3, r1, #5
 8001d16:	4621      	mov	r1, r4
 8001d18:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8001d1c:	4621      	mov	r1, r4
 8001d1e:	014a      	lsls	r2, r1, #5
 8001d20:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8001d24:	2200      	movs	r2, #0
 8001d26:	603b      	str	r3, [r7, #0]
 8001d28:	607a      	str	r2, [r7, #4]
 8001d2a:	f04f 0200 	mov.w	r2, #0
 8001d2e:	f04f 0300 	mov.w	r3, #0
 8001d32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d36:	4629      	mov	r1, r5
 8001d38:	014b      	lsls	r3, r1, #5
 8001d3a:	4621      	mov	r1, r4
 8001d3c:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8001d40:	4621      	mov	r1, r4
 8001d42:	014a      	lsls	r2, r1, #5
 8001d44:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	3307      	adds	r3, #7
 8001d4c:	08db      	lsrs	r3, r3, #3
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	ebad 0d03 	sub.w	sp, sp, r3
 8001d54:	ab06      	add	r3, sp, #24
 8001d56:	3303      	adds	r3, #3
 8001d58:	089b      	lsrs	r3, r3, #2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4




    ///Set voltage angle to zero, wait for rotor position to settle
    inverter((int16_t)theta_ref, CAL_DUTY);
 8001d60:	f207 5364 	addw	r3, r7, #1380	; 0x564
 8001d64:	edd3 7a00 	vldr	s15, [r3]
 8001d68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d6c:	ee17 3a90 	vmov	r3, s15
 8001d70:	b21b      	sxth	r3, r3
 8001d72:	2164      	movs	r1, #100	; 0x64
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff fbcf 	bl	8001518 <inverter>
    HAL_Delay(1000);
 8001d7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d7e:	f003 f927 	bl	8004fd0 <HAL_Delay>

    dq0(theta_ref*pi/180, (float)cs->Current_M1/1000, (float)cs->Current_M2/1000, (float)cs->Current_M3/1000, &d, &q);
 8001d82:	4b2c      	ldr	r3, [pc, #176]	; (8001e34 <calibrate+0x3dc>)
 8001d84:	ed93 7a00 	vldr	s14, [r3]
 8001d88:	f207 5364 	addw	r3, r7, #1380	; 0x564
 8001d8c:	edd3 7a00 	vldr	s15, [r3]
 8001d90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d94:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001e38 <calibrate+0x3e0>
 8001d98:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001d9c:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8001da0:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	ee07 3a90 	vmov	s15, r3
 8001dac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001db0:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8001e3c <calibrate+0x3e4>
 8001db4:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001db8:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8001dbc:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	ee07 3a90 	vmov	s15, r3
 8001dc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dcc:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8001e3c <calibrate+0x3e4>
 8001dd0:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8001dd4:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8001dd8:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	ee07 3a90 	vmov	s15, r3
 8001de4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001de8:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8001e3c <calibrate+0x3e4>
 8001dec:	eec7 5a85 	vdiv.f32	s11, s15, s10
 8001df0:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 8001df4:	f207 4394 	addw	r3, r7, #1172	; 0x494
 8001df8:	4611      	mov	r1, r2
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	eef0 1a65 	vmov.f32	s3, s11
 8001e00:	eeb0 1a46 	vmov.f32	s2, s12
 8001e04:	eef0 0a66 	vmov.f32	s1, s13
 8001e08:	eeb0 0a47 	vmov.f32	s0, s14
 8001e0c:	f001 fbaa 	bl	8003564 <dq0>
    float current = sqrt((d*d + q*q));
 8001e10:	f207 4394 	addw	r3, r7, #1172	; 0x494
 8001e14:	ed93 7a00 	vldr	s14, [r3]
 8001e18:	f207 4394 	addw	r3, r7, #1172	; 0x494
 8001e1c:	edd3 7a00 	vldr	s15, [r3]
 8001e20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e24:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8001e28:	e00a      	b.n	8001e40 <calibrate+0x3e8>
 8001e2a:	bf00      	nop
 8001e2c:	08011ecc 	.word	0x08011ecc
 8001e30:	45bf4000 	.word	0x45bf4000
 8001e34:	20000000 	.word	0x20000000
 8001e38:	43340000 	.word	0x43340000
 8001e3c:	447a0000 	.word	0x447a0000
 8001e40:	edd3 6a00 	vldr	s13, [r3]
 8001e44:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8001e48:	edd3 7a00 	vldr	s15, [r3]
 8001e4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e54:	ee17 0a90 	vmov	r0, s15
 8001e58:	f7fe fb9e 	bl	8000598 <__aeabi_f2d>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	ec43 2b10 	vmov	d0, r2, r3
 8001e64:	f00d ffd8 	bl	800fe18 <sqrt>
 8001e68:	ec53 2b10 	vmov	r2, r3, d0
 8001e6c:	4610      	mov	r0, r2
 8001e6e:	4619      	mov	r1, r3
 8001e70:	f7fe fec2 	bl	8000bf8 <__aeabi_d2f>
 8001e74:	4603      	mov	r3, r0
 8001e76:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 8001e7a:	6013      	str	r3, [r2, #0]
    PrintServerPrintf("Current Angle : Rotor Angle : Raw Encoder \n\r\n\r");
 8001e7c:	48bc      	ldr	r0, [pc, #752]	; (8002170 <calibrate+0x718>)
 8001e7e:	f001 f817 	bl	8002eb0 <PrintServerPrintf>
    for(int i = 0; i<n; i++){                                                   // rotate forwards
 8001e82:	2300      	movs	r3, #0
 8001e84:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
 8001e88:	e0ab      	b.n	8001fe2 <calibrate+0x58a>
       for(int j = 0; j<n2; j++){
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
 8001e90:	e09b      	b.n	8001fca <calibrate+0x572>
        theta_ref += delta;
 8001e92:	f207 5364 	addw	r3, r7, #1380	; 0x564
 8001e96:	ed93 7a00 	vldr	s14, [r3]
 8001e9a:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8001e9e:	edd3 7a00 	vldr	s15, [r3]
 8001ea2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ea6:	f207 5364 	addw	r3, r7, #1380	; 0x564
 8001eaa:	edc3 7a00 	vstr	s15, [r3]
        inverter((int16_t)theta_ref, CAL_DUTY);
 8001eae:	f207 5364 	addw	r3, r7, #1380	; 0x564
 8001eb2:	edd3 7a00 	vldr	s15, [r3]
 8001eb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001eba:	ee17 3a90 	vmov	r3, s15
 8001ebe:	b21b      	sxth	r3, r3
 8001ec0:	2164      	movs	r1, #100	; 0x64
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff fb28 	bl	8001518 <inverter>
        HAL_Delay(1);
 8001ec8:	2001      	movs	r0, #1
 8001eca:	f003 f881 	bl	8004fd0 <HAL_Delay>
       theta_actual = (float)ps->Encoder1_pos/1000; //fixed position
 8001ece:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8001ed2:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	ee07 3a90 	vmov	s15, r3
 8001ede:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ee2:	eddf 6aa4 	vldr	s13, [pc, #656]	; 8002174 <calibrate+0x71c>
 8001ee6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eea:	f207 5314 	addw	r3, r7, #1300	; 0x514
 8001eee:	edc3 7a00 	vstr	s15, [r3]
       error_f[i] = theta_ref/NPP - theta_actual;
 8001ef2:	f207 5364 	addw	r3, r7, #1380	; 0x564
 8001ef6:	edd3 7a00 	vldr	s15, [r3]
 8001efa:	eef3 6a01 	vmov.f32	s13, #49	; 0x41880000  17.0
 8001efe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001f02:	f207 5314 	addw	r3, r7, #1300	; 0x514
 8001f06:	edd3 7a00 	vldr	s15, [r3]
 8001f0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f0e:	f8d7 250c 	ldr.w	r2, [r7, #1292]	; 0x50c
 8001f12:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4413      	add	r3, r2
 8001f1a:	edc3 7a00 	vstr	s15, [r3]
	   if(error_f[i] < 0)error_f [i] = error_f[i]+ 360.0f;
 8001f1e:	f8d7 250c 	ldr.w	r2, [r7, #1292]	; 0x50c
 8001f22:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4413      	add	r3, r2
 8001f2a:	edd3 7a00 	vldr	s15, [r3]
 8001f2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f36:	d513      	bpl.n	8001f60 <calibrate+0x508>
 8001f38:	f8d7 250c 	ldr.w	r2, [r7, #1292]	; 0x50c
 8001f3c:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4413      	add	r3, r2
 8001f44:	edd3 7a00 	vldr	s15, [r3]
 8001f48:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8002178 <calibrate+0x720>
 8001f4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f50:	f8d7 250c 	ldr.w	r2, [r7, #1292]	; 0x50c
 8001f54:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	edc3 7a00 	vstr	s15, [r3]
       raw_f[i] = ps->Encoder1_pos_raw; //raw position
 8001f60:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8001f64:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	; 0x4f4
 8001f72:	f8d7 2560 	ldr.w	r2, [r7, #1376]	; 0x560
 8001f76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
       PrintServerPrintf("%.4f %.4f%d\n\r", theta_ref/(NPP), theta_actual, raw_f[i]);
 8001f7a:	f207 5364 	addw	r3, r7, #1380	; 0x564
 8001f7e:	edd3 7a00 	vldr	s15, [r3]
 8001f82:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8001f86:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001f8a:	ee16 0a90 	vmov	r0, s13
 8001f8e:	f7fe fb03 	bl	8000598 <__aeabi_f2d>
 8001f92:	4604      	mov	r4, r0
 8001f94:	460d      	mov	r5, r1
 8001f96:	f207 5314 	addw	r3, r7, #1300	; 0x514
 8001f9a:	6818      	ldr	r0, [r3, #0]
 8001f9c:	f7fe fafc 	bl	8000598 <__aeabi_f2d>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	f8d7 14f4 	ldr.w	r1, [r7, #1268]	; 0x4f4
 8001fa8:	f8d7 0560 	ldr.w	r0, [r7, #1376]	; 0x560
 8001fac:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8001fb0:	9102      	str	r1, [sp, #8]
 8001fb2:	e9cd 2300 	strd	r2, r3, [sp]
 8001fb6:	4622      	mov	r2, r4
 8001fb8:	462b      	mov	r3, r5
 8001fba:	4870      	ldr	r0, [pc, #448]	; (800217c <calibrate+0x724>)
 8001fbc:	f000 ff78 	bl	8002eb0 <PrintServerPrintf>
       for(int j = 0; j<n2; j++){
 8001fc0:	f8d7 355c 	ldr.w	r3, [r7, #1372]	; 0x55c
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
 8001fca:	f8d7 255c 	ldr.w	r2, [r7, #1372]	; 0x55c
 8001fce:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	f6ff af5d 	blt.w	8001e92 <calibrate+0x43a>
    for(int i = 0; i<n; i++){                                                   // rotate forwards
 8001fd8:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 8001fdc:	3301      	adds	r3, #1
 8001fde:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
 8001fe2:	f8d7 2560 	ldr.w	r2, [r7, #1376]	; 0x560
 8001fe6:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8001fea:	429a      	cmp	r2, r3
 8001fec:	f6ff af4d 	blt.w	8001e8a <calibrate+0x432>
        }
    }

    for(int i = 0; i<n; i++){                                                   // rotate backwards
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
 8001ff6:	e0ab      	b.n	8002150 <calibrate+0x6f8>
       for(int j = 0; j<n2; j++){
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
 8001ffe:	e09b      	b.n	8002138 <calibrate+0x6e0>
       theta_ref -= delta;
 8002000:	f207 5364 	addw	r3, r7, #1380	; 0x564
 8002004:	ed93 7a00 	vldr	s14, [r3]
 8002008:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800200c:	edd3 7a00 	vldr	s15, [r3]
 8002010:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002014:	f207 5364 	addw	r3, r7, #1380	; 0x564
 8002018:	edc3 7a00 	vstr	s15, [r3]
       inverter((int16_t)theta_ref, CAL_DUTY);
 800201c:	f207 5364 	addw	r3, r7, #1380	; 0x564
 8002020:	edd3 7a00 	vldr	s15, [r3]
 8002024:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002028:	ee17 3a90 	vmov	r3, s15
 800202c:	b21b      	sxth	r3, r3
 800202e:	2164      	movs	r1, #100	; 0x64
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff fa71 	bl	8001518 <inverter>
       HAL_Delay(1);                                                         // sample position sensor
 8002036:	2001      	movs	r0, #1
 8002038:	f002 ffca 	bl	8004fd0 <HAL_Delay>
       theta_actual = (float)ps->Encoder1_pos/1000;                                   // get mechanical position
 800203c:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8002040:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	ee07 3a90 	vmov	s15, r3
 800204c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002050:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002174 <calibrate+0x71c>
 8002054:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002058:	f207 5314 	addw	r3, r7, #1300	; 0x514
 800205c:	edc3 7a00 	vstr	s15, [r3]
       error_b[i] = theta_ref/NPP - theta_actual;
 8002060:	f207 5364 	addw	r3, r7, #1380	; 0x564
 8002064:	edd3 7a00 	vldr	s15, [r3]
 8002068:	eef3 6a01 	vmov.f32	s13, #49	; 0x41880000  17.0
 800206c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002070:	f207 5314 	addw	r3, r7, #1300	; 0x514
 8002074:	edd3 7a00 	vldr	s15, [r3]
 8002078:	ee77 7a67 	vsub.f32	s15, s14, s15
 800207c:	f8d7 2504 	ldr.w	r2, [r7, #1284]	; 0x504
 8002080:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	4413      	add	r3, r2
 8002088:	edc3 7a00 	vstr	s15, [r3]
       if(error_b[i] < 0)error_b[i] = error_b[i]+ 360.0f;
 800208c:	f8d7 2504 	ldr.w	r2, [r7, #1284]	; 0x504
 8002090:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	edd3 7a00 	vldr	s15, [r3]
 800209c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020a4:	d513      	bpl.n	80020ce <calibrate+0x676>
 80020a6:	f8d7 2504 	ldr.w	r2, [r7, #1284]	; 0x504
 80020aa:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	4413      	add	r3, r2
 80020b2:	edd3 7a00 	vldr	s15, [r3]
 80020b6:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8002178 <calibrate+0x720>
 80020ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80020be:	f8d7 2504 	ldr.w	r2, [r7, #1284]	; 0x504
 80020c2:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	edc3 7a00 	vstr	s15, [r3]
       raw_b[i] =  ps->Encoder1_pos_raw;
 80020ce:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 80020d2:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	4619      	mov	r1, r3
 80020dc:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 80020e0:	f8d7 2558 	ldr.w	r2, [r7, #1368]	; 0x558
 80020e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
       PrintServerPrintf("%.4f %.4f %d\n\r", theta_ref/(NPP), theta_actual, raw_b[i]);
 80020e8:	f207 5364 	addw	r3, r7, #1380	; 0x564
 80020ec:	edd3 7a00 	vldr	s15, [r3]
 80020f0:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 80020f4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80020f8:	ee16 0a90 	vmov	r0, s13
 80020fc:	f7fe fa4c 	bl	8000598 <__aeabi_f2d>
 8002100:	4604      	mov	r4, r0
 8002102:	460d      	mov	r5, r1
 8002104:	f207 5314 	addw	r3, r7, #1300	; 0x514
 8002108:	6818      	ldr	r0, [r3, #0]
 800210a:	f7fe fa45 	bl	8000598 <__aeabi_f2d>
 800210e:	4602      	mov	r2, r0
 8002110:	460b      	mov	r3, r1
 8002112:	f8d7 14ec 	ldr.w	r1, [r7, #1260]	; 0x4ec
 8002116:	f8d7 0558 	ldr.w	r0, [r7, #1368]	; 0x558
 800211a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800211e:	9102      	str	r1, [sp, #8]
 8002120:	e9cd 2300 	strd	r2, r3, [sp]
 8002124:	4622      	mov	r2, r4
 8002126:	462b      	mov	r3, r5
 8002128:	4815      	ldr	r0, [pc, #84]	; (8002180 <calibrate+0x728>)
 800212a:	f000 fec1 	bl	8002eb0 <PrintServerPrintf>
       for(int j = 0; j<n2; j++){
 800212e:	f8d7 3554 	ldr.w	r3, [r7, #1364]	; 0x554
 8002132:	3301      	adds	r3, #1
 8002134:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
 8002138:	f8d7 2554 	ldr.w	r2, [r7, #1364]	; 0x554
 800213c:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8002140:	429a      	cmp	r2, r3
 8002142:	f6ff af5d 	blt.w	8002000 <calibrate+0x5a8>
    for(int i = 0; i<n; i++){                                                   // rotate backwards
 8002146:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 800214a:	3301      	adds	r3, #1
 800214c:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
 8002150:	f8d7 2558 	ldr.w	r2, [r7, #1368]	; 0x558
 8002154:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8002158:	429a      	cmp	r2, r3
 800215a:	f6ff af4d 	blt.w	8001ff8 <calibrate+0x5a0>
       //theta_ref -= delta;
        }
    }

        electrical_offset = 0;
 800215e:	4b09      	ldr	r3, [pc, #36]	; (8002184 <calibrate+0x72c>)
 8002160:	f04f 0200 	mov.w	r2, #0
 8002164:	601a      	str	r2, [r3, #0]
        for(int i = 0; i<n; i++){
 8002166:	2300      	movs	r3, #0
 8002168:	f8c7 3550 	str.w	r3, [r7, #1360]	; 0x550
 800216c:	e039      	b.n	80021e2 <calibrate+0x78a>
 800216e:	bf00      	nop
 8002170:	08011ef0 	.word	0x08011ef0
 8002174:	447a0000 	.word	0x447a0000
 8002178:	43b40000 	.word	0x43b40000
 800217c:	08011f20 	.word	0x08011f20
 8002180:	08011f30 	.word	0x08011f30
 8002184:	20000754 	.word	0x20000754
        	electrical_offset += (error_f[i] + error_b[n-1-i])/(2.0f*n);                   // calclate average position sensor offset
 8002188:	f8d7 250c 	ldr.w	r2, [r7, #1292]	; 0x50c
 800218c:	f8d7 3550 	ldr.w	r3, [r7, #1360]	; 0x550
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4413      	add	r3, r2
 8002194:	ed93 7a00 	vldr	s14, [r3]
 8002198:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 800219c:	1e5a      	subs	r2, r3, #1
 800219e:	f8d7 3550 	ldr.w	r3, [r7, #1360]	; 0x550
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	f8d7 2504 	ldr.w	r2, [r7, #1284]	; 0x504
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	edd3 7a00 	vldr	s15, [r3]
 80021b0:	ee77 6a27 	vadd.f32	s13, s14, s15
 80021b4:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 80021b8:	ee07 3a90 	vmov	s15, r3
 80021bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80021c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021c8:	4bb9      	ldr	r3, [pc, #740]	; (80024b0 <calibrate+0xa58>)
 80021ca:	edd3 7a00 	vldr	s15, [r3]
 80021ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021d2:	4bb7      	ldr	r3, [pc, #732]	; (80024b0 <calibrate+0xa58>)
 80021d4:	edc3 7a00 	vstr	s15, [r3]
        for(int i = 0; i<n; i++){
 80021d8:	f8d7 3550 	ldr.w	r3, [r7, #1360]	; 0x550
 80021dc:	3301      	adds	r3, #1
 80021de:	f8c7 3550 	str.w	r3, [r7, #1360]	; 0x550
 80021e2:	f8d7 2550 	ldr.w	r2, [r7, #1360]	; 0x550
 80021e6:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 80021ea:	429a      	cmp	r2, r3
 80021ec:	dbcc      	blt.n	8002188 <calibrate+0x730>
            }
        electrical_offset = fmod(electrical_offset*NPP, 360);                                        // convert mechanical angle to electrical angle
 80021ee:	4bb0      	ldr	r3, [pc, #704]	; (80024b0 <calibrate+0xa58>)
 80021f0:	edd3 7a00 	vldr	s15, [r3]
 80021f4:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 80021f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021fc:	ee17 0a90 	vmov	r0, s15
 8002200:	f7fe f9ca 	bl	8000598 <__aeabi_f2d>
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	ed9f 1ba7 	vldr	d1, [pc, #668]	; 80024a8 <calibrate+0xa50>
 800220c:	ec43 2b10 	vmov	d0, r2, r3
 8002210:	f00d fdd4 	bl	800fdbc <fmod>
 8002214:	ec53 2b10 	vmov	r2, r3, d0
 8002218:	4610      	mov	r0, r2
 800221a:	4619      	mov	r1, r3
 800221c:	f7fe fcec 	bl	8000bf8 <__aeabi_d2f>
 8002220:	4603      	mov	r3, r0
 8002222:	4aa3      	ldr	r2, [pc, #652]	; (80024b0 <calibrate+0xa58>)
 8002224:	6013      	str	r3, [r2, #0]
        /// FIR n-sample average, where n = number of samples in one electrical cycle
        /// This filter has zero gain at electrical frequency and all integer multiples
        /// So cogging effects should be completely filtered out.


        float mean = 0;
 8002226:	f04f 0300 	mov.w	r3, #0
 800222a:	f207 524c 	addw	r2, r7, #1356	; 0x54c
 800222e:	6013      	str	r3, [r2, #0]
        for (int i = 0; i<n; i++){                                              //Average the forward and back directions
 8002230:	2300      	movs	r3, #0
 8002232:	f8c7 3548 	str.w	r3, [r7, #1352]	; 0x548
 8002236:	e026      	b.n	8002286 <calibrate+0x82e>
            error[i] = 0.5f*(error_f[i] + error_b[n-i-1]);
 8002238:	f8d7 250c 	ldr.w	r2, [r7, #1292]	; 0x50c
 800223c:	f8d7 3548 	ldr.w	r3, [r7, #1352]	; 0x548
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	ed93 7a00 	vldr	s14, [r3]
 8002248:	f8d7 2528 	ldr.w	r2, [r7, #1320]	; 0x528
 800224c:	f8d7 3548 	ldr.w	r3, [r7, #1352]	; 0x548
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	3b01      	subs	r3, #1
 8002254:	f8d7 2504 	ldr.w	r2, [r7, #1284]	; 0x504
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	4413      	add	r3, r2
 800225c:	edd3 7a00 	vldr	s15, [r3]
 8002260:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002264:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002268:	ee67 7a87 	vmul.f32	s15, s15, s14
 800226c:	f8d7 24e4 	ldr.w	r2, [r7, #1252]	; 0x4e4
 8002270:	f8d7 3548 	ldr.w	r3, [r7, #1352]	; 0x548
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4413      	add	r3, r2
 8002278:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i<n; i++){                                              //Average the forward and back directions
 800227c:	f8d7 3548 	ldr.w	r3, [r7, #1352]	; 0x548
 8002280:	3301      	adds	r3, #1
 8002282:	f8c7 3548 	str.w	r3, [r7, #1352]	; 0x548
 8002286:	f8d7 2548 	ldr.w	r2, [r7, #1352]	; 0x548
 800228a:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 800228e:	429a      	cmp	r2, r3
 8002290:	dbd2      	blt.n	8002238 <calibrate+0x7e0>
            }
        for (int i = 0; i<n; i++){
 8002292:	2300      	movs	r3, #0
 8002294:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 8002298:	e0e3      	b.n	8002462 <calibrate+0xa0a>
            for(int j = 0; j<window; j++){
 800229a:	2300      	movs	r3, #0
 800229c:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
 80022a0:	e04c      	b.n	800233c <calibrate+0x8e4>
                int ind = -window/2 + j + i;                                    // Indexes from -window/2 to + window/2
 80022a2:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 80022a6:	0fda      	lsrs	r2, r3, #31
 80022a8:	4413      	add	r3, r2
 80022aa:	105b      	asrs	r3, r3, #1
 80022ac:	425b      	negs	r3, r3
 80022ae:	461a      	mov	r2, r3
 80022b0:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 80022b4:	4413      	add	r3, r2
 80022b6:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 80022ba:	4413      	add	r3, r2
 80022bc:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
                if(ind<0){
 80022c0:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	da07      	bge.n	80022d8 <calibrate+0x880>
                    ind += n;}                                                  // Moving average wraps around
 80022c8:	f8d7 253c 	ldr.w	r2, [r7, #1340]	; 0x53c
 80022cc:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 80022d0:	4413      	add	r3, r2
 80022d2:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 80022d6:	e00c      	b.n	80022f2 <calibrate+0x89a>
                else if(ind > n-1) {
 80022d8:	f8d7 2528 	ldr.w	r2, [r7, #1320]	; 0x528
 80022dc:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 80022e0:	429a      	cmp	r2, r3
 80022e2:	dc06      	bgt.n	80022f2 <calibrate+0x89a>
                    ind -= n;}
 80022e4:	f8d7 253c 	ldr.w	r2, [r7, #1340]	; 0x53c
 80022e8:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
                if(error[ind] == NAN)while(1);
                error_filt[i] += error[ind]/(float)window;
 80022f2:	4a70      	ldr	r2, [pc, #448]	; (80024b4 <calibrate+0xa5c>)
 80022f4:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4413      	add	r3, r2
 80022fc:	ed93 7a00 	vldr	s14, [r3]
 8002300:	f8d7 24e4 	ldr.w	r2, [r7, #1252]	; 0x4e4
 8002304:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	ed93 6a00 	vldr	s12, [r3]
 8002310:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 8002314:	ee07 3a90 	vmov	s15, r3
 8002318:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800231c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002320:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002324:	4a63      	ldr	r2, [pc, #396]	; (80024b4 <calibrate+0xa5c>)
 8002326:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4413      	add	r3, r2
 800232e:	edc3 7a00 	vstr	s15, [r3]
            for(int j = 0; j<window; j++){
 8002332:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 8002336:	3301      	adds	r3, #1
 8002338:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
 800233c:	f8d7 2540 	ldr.w	r2, [r7, #1344]	; 0x540
 8002340:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 8002344:	429a      	cmp	r2, r3
 8002346:	dbac      	blt.n	80022a2 <calibrate+0x84a>
                if(error_filt[i] == NAN)while(1);
                }
            if(i<window){
 8002348:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 800234c:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 8002350:	429a      	cmp	r2, r3
 8002352:	da2b      	bge.n	80023ac <calibrate+0x954>
                cogging_current[i] = current*sinf((error[i] - error_filt[i])*NPP);
 8002354:	f8d7 24e4 	ldr.w	r2, [r7, #1252]	; 0x4e4
 8002358:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	4413      	add	r3, r2
 8002360:	ed93 7a00 	vldr	s14, [r3]
 8002364:	4a53      	ldr	r2, [pc, #332]	; (80024b4 <calibrate+0xa5c>)
 8002366:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	4413      	add	r3, r2
 800236e:	edd3 7a00 	vldr	s15, [r3]
 8002372:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002376:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 800237a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800237e:	eeb0 0a67 	vmov.f32	s0, s15
 8002382:	f00d fe21 	bl	800ffc8 <sinf>
 8002386:	eeb0 7a40 	vmov.f32	s14, s0
 800238a:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 800238e:	edd3 7a00 	vldr	s15, [r3]
 8002392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002396:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
 80023a0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80023a4:	4413      	add	r3, r2
 80023a6:	3bd0      	subs	r3, #208	; 0xd0
 80023a8:	edc3 7a00 	vstr	s15, [r3]
                }
            PrintServerPrintf("%.4f   %4f    %.4f   %.4f\n\r", error[i], error_filt[i], error_f[i], error_b[i]);
 80023ac:	f8d7 24e4 	ldr.w	r2, [r7, #1252]	; 0x4e4
 80023b0:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4413      	add	r3, r2
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7fe f8ec 	bl	8000598 <__aeabi_f2d>
 80023c0:	4682      	mov	sl, r0
 80023c2:	468b      	mov	fp, r1
 80023c4:	4a3b      	ldr	r2, [pc, #236]	; (80024b4 <calibrate+0xa5c>)
 80023c6:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	4413      	add	r3, r2
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7fe f8e1 	bl	8000598 <__aeabi_f2d>
 80023d6:	4604      	mov	r4, r0
 80023d8:	460d      	mov	r5, r1
 80023da:	f8d7 250c 	ldr.w	r2, [r7, #1292]	; 0x50c
 80023de:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	4413      	add	r3, r2
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7fe f8d5 	bl	8000598 <__aeabi_f2d>
 80023ee:	4680      	mov	r8, r0
 80023f0:	4689      	mov	r9, r1
 80023f2:	f8d7 2504 	ldr.w	r2, [r7, #1284]	; 0x504
 80023f6:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	4413      	add	r3, r2
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4618      	mov	r0, r3
 8002402:	f7fe f8c9 	bl	8000598 <__aeabi_f2d>
 8002406:	4602      	mov	r2, r0
 8002408:	460b      	mov	r3, r1
 800240a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800240e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002412:	e9cd 4500 	strd	r4, r5, [sp]
 8002416:	4652      	mov	r2, sl
 8002418:	465b      	mov	r3, fp
 800241a:	4827      	ldr	r0, [pc, #156]	; (80024b8 <calibrate+0xa60>)
 800241c:	f000 fd48 	bl	8002eb0 <PrintServerPrintf>
            HAL_Delay(10);
 8002420:	200a      	movs	r0, #10
 8002422:	f002 fdd5 	bl	8004fd0 <HAL_Delay>
            mean += error_filt[i]/n;
 8002426:	4a23      	ldr	r2, [pc, #140]	; (80024b4 <calibrate+0xa5c>)
 8002428:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	4413      	add	r3, r2
 8002430:	edd3 6a00 	vldr	s13, [r3]
 8002434:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8002438:	ee07 3a90 	vmov	s15, r3
 800243c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002440:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002444:	f207 534c 	addw	r3, r7, #1356	; 0x54c
 8002448:	ed93 7a00 	vldr	s14, [r3]
 800244c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002450:	f207 534c 	addw	r3, r7, #1356	; 0x54c
 8002454:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i<n; i++){
 8002458:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 800245c:	3301      	adds	r3, #1
 800245e:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 8002462:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 8002466:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 800246a:	429a      	cmp	r2, r3
 800246c:	f6ff af15 	blt.w	800229a <calibrate+0x842>
            }
        int raw_offset = (raw_f[0] + raw_b[n-1])/2;                             //Insensitive to errors in this direction, so 2 points is plenty
 8002470:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	; 0x4f4
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 800247a:	1e59      	subs	r1, r3, #1
 800247c:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 8002480:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002484:	4413      	add	r3, r2
 8002486:	0fda      	lsrs	r2, r3, #31
 8002488:	4413      	add	r3, r2
 800248a:	105b      	asrs	r3, r3, #1
 800248c:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc


        PrintServerPrintf("\n\r Encoder non-linearity compensation table\n\r");
 8002490:	480a      	ldr	r0, [pc, #40]	; (80024bc <calibrate+0xa64>)
 8002492:	f000 fd0d 	bl	8002eb0 <PrintServerPrintf>
        PrintServerPrintf("Sample Number : Lookup Index : Lookup Value\n\r\n\r");
 8002496:	480a      	ldr	r0, [pc, #40]	; (80024c0 <calibrate+0xa68>)
 8002498:	f000 fd0a 	bl	8002eb0 <PrintServerPrintf>
        for (int i = 0; i<n_lut; i++){                                          // build lookup table
 800249c:	2300      	movs	r3, #0
 800249e:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
 80024a2:	e058      	b.n	8002556 <calibrate+0xafe>
 80024a4:	f3af 8000 	nop.w
 80024a8:	00000000 	.word	0x00000000
 80024ac:	40768000 	.word	0x40768000
 80024b0:	20000754 	.word	0x20000754
 80024b4:	20000310 	.word	0x20000310
 80024b8:	08011f40 	.word	0x08011f40
 80024bc:	08011f5c 	.word	0x08011f5c
 80024c0:	08011f8c 	.word	0x08011f8c
            int ind = (raw_offset>>7) + i;
 80024c4:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	; 0x4dc
 80024c8:	11db      	asrs	r3, r3, #7
 80024ca:	f8d7 2538 	ldr.w	r2, [r7, #1336]	; 0x538
 80024ce:	4413      	add	r3, r2
 80024d0:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
            if(ind > (n_lut-1)){
 80024d4:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 80024d8:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 80024dc:	429a      	cmp	r2, r3
 80024de:	dc06      	bgt.n	80024ee <calibrate+0xa96>
                ind -= n_lut;
 80024e0:	f8d7 2534 	ldr.w	r2, [r7, #1332]	; 0x534
 80024e4:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
                }
            lut[ind] = (int) (((error_filt[i] - mean)*(float)(CPR)/(360.0f)));
 80024ee:	4a7d      	ldr	r2, [pc, #500]	; (80026e4 <calibrate+0xc8c>)
 80024f0:	f8d7 3538 	ldr.w	r3, [r7, #1336]	; 0x538
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	4413      	add	r3, r2
 80024f8:	ed93 7a00 	vldr	s14, [r3]
 80024fc:	f207 534c 	addw	r3, r7, #1356	; 0x54c
 8002500:	edd3 7a00 	vldr	s15, [r3]
 8002504:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002508:	ed9f 7a77 	vldr	s14, [pc, #476]	; 80026e8 <calibrate+0xc90>
 800250c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002510:	eddf 6a76 	vldr	s13, [pc, #472]	; 80026ec <calibrate+0xc94>
 8002514:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002518:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800251c:	ee17 1a90 	vmov	r1, s15
 8002520:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 8002524:	f8d7 2534 	ldr.w	r2, [r7, #1332]	; 0x534
 8002528:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            PrintServerPrintf("%d %d %d\n\r", i, ind, lut[ind]);
 800252c:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 8002530:	f8d7 2534 	ldr.w	r2, [r7, #1332]	; 0x534
 8002534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002538:	f8d7 2534 	ldr.w	r2, [r7, #1332]	; 0x534
 800253c:	f8d7 1538 	ldr.w	r1, [r7, #1336]	; 0x538
 8002540:	486b      	ldr	r0, [pc, #428]	; (80026f0 <calibrate+0xc98>)
 8002542:	f000 fcb5 	bl	8002eb0 <PrintServerPrintf>
            HAL_Delay(10);
 8002546:	200a      	movs	r0, #10
 8002548:	f002 fd42 	bl	8004fd0 <HAL_Delay>
        for (int i = 0; i<n_lut; i++){                                          // build lookup table
 800254c:	f8d7 3538 	ldr.w	r3, [r7, #1336]	; 0x538
 8002550:	3301      	adds	r3, #1
 8002552:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
 8002556:	f8d7 2538 	ldr.w	r2, [r7, #1336]	; 0x538
 800255a:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 800255e:	429a      	cmp	r2, r3
 8002560:	dbb0      	blt.n	80024c4 <calibrate+0xa6c>

//        ps->WriteLUT(lut);                                                      // write lookup table to position sensor object
        //memcpy(controller->cogging, cogging_current, sizeof(controller->cogging));  //compensation doesn't actually work yet....

//        memcpy(&ENCODER_LUT, lut, 128*4);                                 // copy the lookup table to the flash array
        PrintServerPrintf("\n\rEncoder Electrical Offset (deg) %f\n\r",  electrical_offset);
 8002562:	4b64      	ldr	r3, [pc, #400]	; (80026f4 <calibrate+0xc9c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f7fe f816 	bl	8000598 <__aeabi_f2d>
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	4861      	ldr	r0, [pc, #388]	; (80026f8 <calibrate+0xca0>)
 8002572:	f000 fc9d 	bl	8002eb0 <PrintServerPrintf>

        float error_test[SIZE*NPP] = {0};
 8002576:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 800257a:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 800257e:	4618      	mov	r0, r3
 8002580:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8002584:	461a      	mov	r2, r3
 8002586:	2100      	movs	r1, #0
 8002588:	f00b fb1e 	bl	800dbc8 <memset>
        for(int i = 0; i < SIZE*NPP; i++){
 800258c:	2300      	movs	r3, #0
 800258e:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
 8002592:	e060      	b.n	8002656 <calibrate+0xbfe>
        	error_test[i] = error_filt[i] + i * 360.0 / (SIZE*NPP);
 8002594:	4a53      	ldr	r2, [pc, #332]	; (80026e4 <calibrate+0xc8c>)
 8002596:	f8d7 3530 	ldr.w	r3, [r7, #1328]	; 0x530
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	4413      	add	r3, r2
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7fd fff9 	bl	8000598 <__aeabi_f2d>
 80025a6:	4604      	mov	r4, r0
 80025a8:	460d      	mov	r5, r1
 80025aa:	f8d7 0530 	ldr.w	r0, [r7, #1328]	; 0x530
 80025ae:	f7fd ffe1 	bl	8000574 <__aeabi_i2d>
 80025b2:	f04f 0200 	mov.w	r2, #0
 80025b6:	4b51      	ldr	r3, [pc, #324]	; (80026fc <calibrate+0xca4>)
 80025b8:	f7fe f846 	bl	8000648 <__aeabi_dmul>
 80025bc:	4602      	mov	r2, r0
 80025be:	460b      	mov	r3, r1
 80025c0:	4610      	mov	r0, r2
 80025c2:	4619      	mov	r1, r3
 80025c4:	f04f 0200 	mov.w	r2, #0
 80025c8:	4b4d      	ldr	r3, [pc, #308]	; (8002700 <calibrate+0xca8>)
 80025ca:	f7fe f967 	bl	800089c <__aeabi_ddiv>
 80025ce:	4602      	mov	r2, r0
 80025d0:	460b      	mov	r3, r1
 80025d2:	4620      	mov	r0, r4
 80025d4:	4629      	mov	r1, r5
 80025d6:	f7fd fe81 	bl	80002dc <__adddf3>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	4610      	mov	r0, r2
 80025e0:	4619      	mov	r1, r3
 80025e2:	f7fe fb09 	bl	8000bf8 <__aeabi_d2f>
 80025e6:	4601      	mov	r1, r0
 80025e8:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 80025ec:	f5a3 62a3 	sub.w	r2, r3, #1304	; 0x518
 80025f0:	f8d7 3530 	ldr.w	r3, [r7, #1328]	; 0x530
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4413      	add	r3, r2
 80025f8:	6019      	str	r1, [r3, #0]
        	if(error_test[i] > 360.0f)error_test[i] -= 360.0f;
 80025fa:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 80025fe:	f5a3 62a3 	sub.w	r2, r3, #1304	; 0x518
 8002602:	f8d7 3530 	ldr.w	r3, [r7, #1328]	; 0x530
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4413      	add	r3, r2
 800260a:	edd3 7a00 	vldr	s15, [r3]
 800260e:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80026ec <calibrate+0xc94>
 8002612:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800261a:	dd17      	ble.n	800264c <calibrate+0xbf4>
 800261c:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8002620:	f5a3 62a3 	sub.w	r2, r3, #1304	; 0x518
 8002624:	f8d7 3530 	ldr.w	r3, [r7, #1328]	; 0x530
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	4413      	add	r3, r2
 800262c:	edd3 7a00 	vldr	s15, [r3]
 8002630:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80026ec <calibrate+0xc94>
 8002634:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002638:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 800263c:	f5a3 62a3 	sub.w	r2, r3, #1304	; 0x518
 8002640:	f8d7 3530 	ldr.w	r3, [r7, #1328]	; 0x530
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	4413      	add	r3, r2
 8002648:	edc3 7a00 	vstr	s15, [r3]
        for(int i = 0; i < SIZE*NPP; i++){
 800264c:	f8d7 3530 	ldr.w	r3, [r7, #1328]	; 0x530
 8002650:	3301      	adds	r3, #1
 8002652:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
 8002656:	f8d7 3530 	ldr.w	r3, [r7, #1328]	; 0x530
 800265a:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800265e:	db99      	blt.n	8002594 <calibrate+0xb3c>
        }
        for (int i = 0; i<LUT_SIZE; i++){
 8002660:	2300      	movs	r3, #0
 8002662:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 8002666:	e030      	b.n	80026ca <calibrate+0xc72>
        	float wanted_pos = i *360.0f / LUT_SIZE;
 8002668:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 800266c:	ee07 3a90 	vmov	s15, r3
 8002670:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002674:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80026ec <calibrate+0xc94>
 8002678:	ee27 7a87 	vmul.f32	s14, s15, s14
 800267c:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80026ec <calibrate+0xc94>
 8002680:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002684:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8002688:	edc3 7a00 	vstr	s15, [r3]
        	motor_lut[i] = find_closest(error_test, SIZE*NPP, wanted_pos);
 800268c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002690:	f507 629b 	add.w	r2, r7, #1240	; 0x4d8
 8002694:	ed92 0a00 	vldr	s0, [r2]
 8002698:	f44f 7188 	mov.w	r1, #272	; 0x110
 800269c:	4618      	mov	r0, r3
 800269e:	f000 f835 	bl	800270c <find_closest>
 80026a2:	4602      	mov	r2, r0
 80026a4:	4917      	ldr	r1, [pc, #92]	; (8002704 <calibrate+0xcac>)
 80026a6:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 80026aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        	PrintServerPrintf("%d\n\r", motor_lut[i]);
 80026ae:	4a15      	ldr	r2, [pc, #84]	; (8002704 <calibrate+0xcac>)
 80026b0:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 80026b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b8:	4619      	mov	r1, r3
 80026ba:	4813      	ldr	r0, [pc, #76]	; (8002708 <calibrate+0xcb0>)
 80026bc:	f000 fbf8 	bl	8002eb0 <PrintServerPrintf>
        for (int i = 0; i<LUT_SIZE; i++){
 80026c0:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 80026c4:	3301      	adds	r3, #1
 80026c6:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 80026ca:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 80026ce:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80026d2:	dbc9      	blt.n	8002668 <calibrate+0xc10>
 80026d4:	46b5      	mov	sp, r6
        }
    }
 80026d6:	bf00      	nop
 80026d8:	f207 576c 	addw	r7, r7, #1388	; 0x56c
 80026dc:	46bd      	mov	sp, r7
 80026de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026e2:	bf00      	nop
 80026e4:	20000310 	.word	0x20000310
 80026e8:	46800000 	.word	0x46800000
 80026ec:	43b40000 	.word	0x43b40000
 80026f0:	08011fbc 	.word	0x08011fbc
 80026f4:	20000754 	.word	0x20000754
 80026f8:	08011fc8 	.word	0x08011fc8
 80026fc:	40768000 	.word	0x40768000
 8002700:	40710000 	.word	0x40710000
 8002704:	20000758 	.word	0x20000758
 8002708:	08011ff0 	.word	0x08011ff0

0800270c <find_closest>:

// Function to find the closest number in the array
uint32_t find_closest(float arr[], int length, float target){
 800270c:	b480      	push	{r7}
 800270e:	b089      	sub	sp, #36	; 0x24
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	ed87 0a01 	vstr	s0, [r7, #4]
    float smallest_diff = arr[0] - target;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	ed93 7a00 	vldr	s14, [r3]
 8002720:	edd7 7a01 	vldr	s15, [r7, #4]
 8002724:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002728:	edc7 7a07 	vstr	s15, [r7, #28]
    if(smallest_diff < 0)smallest_diff = -1*smallest_diff;
 800272c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002730:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002738:	d505      	bpl.n	8002746 <find_closest+0x3a>
 800273a:	edd7 7a07 	vldr	s15, [r7, #28]
 800273e:	eef1 7a67 	vneg.f32	s15, s15
 8002742:	edc7 7a07 	vstr	s15, [r7, #28]
    uint32_t index = 0;
 8002746:	2300      	movs	r3, #0
 8002748:	61bb      	str	r3, [r7, #24]

    for (int i = 1; i < length; i++) {
 800274a:	2301      	movs	r3, #1
 800274c:	617b      	str	r3, [r7, #20]
 800274e:	e07c      	b.n	800284a <find_closest+0x13e>
    	float diff;
        diff = arr[i] - target;
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	4413      	add	r3, r2
 8002758:	ed93 7a00 	vldr	s14, [r3]
 800275c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002760:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002764:	edc7 7a04 	vstr	s15, [r7, #16]
        if(diff < 0)diff = -1*diff;
 8002768:	edd7 7a04 	vldr	s15, [r7, #16]
 800276c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002774:	d505      	bpl.n	8002782 <find_closest+0x76>
 8002776:	edd7 7a04 	vldr	s15, [r7, #16]
 800277a:	eef1 7a67 	vneg.f32	s15, s15
 800277e:	edc7 7a04 	vstr	s15, [r7, #16]

        if (diff < smallest_diff) {
 8002782:	ed97 7a04 	vldr	s14, [r7, #16]
 8002786:	edd7 7a07 	vldr	s15, [r7, #28]
 800278a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800278e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002792:	d503      	bpl.n	800279c <find_closest+0x90>
            smallest_diff = diff;
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	61fb      	str	r3, [r7, #28]
            index = i;
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	61bb      	str	r3, [r7, #24]
        }

        diff = arr[i] - target - 360.0f;
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	4413      	add	r3, r2
 80027a4:	ed93 7a00 	vldr	s14, [r3]
 80027a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80027ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027b0:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8002864 <find_closest+0x158>
 80027b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80027b8:	edc7 7a04 	vstr	s15, [r7, #16]
        if(diff < 0)diff = -1*diff;
 80027bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80027c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027c8:	d505      	bpl.n	80027d6 <find_closest+0xca>
 80027ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80027ce:	eef1 7a67 	vneg.f32	s15, s15
 80027d2:	edc7 7a04 	vstr	s15, [r7, #16]

		if (diff < smallest_diff) {
 80027d6:	ed97 7a04 	vldr	s14, [r7, #16]
 80027da:	edd7 7a07 	vldr	s15, [r7, #28]
 80027de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027e6:	d503      	bpl.n	80027f0 <find_closest+0xe4>
		smallest_diff = diff;
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	61fb      	str	r3, [r7, #28]
		index = i;
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	61bb      	str	r3, [r7, #24]
		}

		diff = arr[i] - target + 360.0f;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	4413      	add	r3, r2
 80027f8:	ed93 7a00 	vldr	s14, [r3]
 80027fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002800:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002804:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002864 <find_closest+0x158>
 8002808:	ee77 7a87 	vadd.f32	s15, s15, s14
 800280c:	edc7 7a04 	vstr	s15, [r7, #16]
		if(diff < 0)diff = -1*diff;
 8002810:	edd7 7a04 	vldr	s15, [r7, #16]
 8002814:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800281c:	d505      	bpl.n	800282a <find_closest+0x11e>
 800281e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002822:	eef1 7a67 	vneg.f32	s15, s15
 8002826:	edc7 7a04 	vstr	s15, [r7, #16]

		if (diff < smallest_diff) {
 800282a:	ed97 7a04 	vldr	s14, [r7, #16]
 800282e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002832:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800283a:	d503      	bpl.n	8002844 <find_closest+0x138>
		  smallest_diff = diff;
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	61fb      	str	r3, [r7, #28]
		  index = i;
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	61bb      	str	r3, [r7, #24]
    for (int i = 1; i < length; i++) {
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	3301      	adds	r3, #1
 8002848:	617b      	str	r3, [r7, #20]
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	429a      	cmp	r2, r3
 8002850:	f6ff af7e 	blt.w	8002750 <find_closest+0x44>
		}

    }
    return index; //(index*360000)/length;
 8002854:	69bb      	ldr	r3, [r7, #24]
}
 8002856:	4618      	mov	r0, r3
 8002858:	3724      	adds	r7, #36	; 0x24
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	43b40000 	.word	0x43b40000

08002868 <ORBIS_init>:
 *
 *  can transmit the command while receiving position
 *
 *  max 4MHz
 */
void ORBIS_init(Encoders_Callback __IRQ_callback){
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 1);
 8002870:	2201      	movs	r2, #1
 8002872:	2140      	movs	r1, #64	; 0x40
 8002874:	4815      	ldr	r0, [pc, #84]	; (80028cc <ORBIS_init+0x64>)
 8002876:	f005 fe25 	bl	80084c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 1);
 800287a:	2201      	movs	r2, #1
 800287c:	2104      	movs	r1, #4
 800287e:	4814      	ldr	r0, [pc, #80]	; (80028d0 <ORBIS_init+0x68>)
 8002880:	f005 fe20 	bl	80084c4 <HAL_GPIO_WritePin>
	//setup callback
	Encoders_IRQ_callback = __IRQ_callback;
 8002884:	4a13      	ldr	r2, [pc, #76]	; (80028d4 <ORBIS_init+0x6c>)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6013      	str	r3, [r2, #0]

	//setup DMA
	SPI1_tx_buff[0] = ORBIS_NORNAL_OPERATION;
 800288a:	4b13      	ldr	r3, [pc, #76]	; (80028d8 <ORBIS_init+0x70>)
 800288c:	2274      	movs	r2, #116	; 0x74
 800288e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 0);
 8002890:	2200      	movs	r2, #0
 8002892:	2140      	movs	r1, #64	; 0x40
 8002894:	480d      	ldr	r0, [pc, #52]	; (80028cc <ORBIS_init+0x64>)
 8002896:	f005 fe15 	bl	80084c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 0);
 800289a:	2200      	movs	r2, #0
 800289c:	2104      	movs	r1, #4
 800289e:	480c      	ldr	r0, [pc, #48]	; (80028d0 <ORBIS_init+0x68>)
 80028a0:	f005 fe10 	bl	80084c4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA(&hspi1, SPI1_tx_buff, SPI1_rx_buff, ORBIS_SPI_SIZE);
 80028a4:	2305      	movs	r3, #5
 80028a6:	4a0d      	ldr	r2, [pc, #52]	; (80028dc <ORBIS_init+0x74>)
 80028a8:	490b      	ldr	r1, [pc, #44]	; (80028d8 <ORBIS_init+0x70>)
 80028aa:	480d      	ldr	r0, [pc, #52]	; (80028e0 <ORBIS_init+0x78>)
 80028ac:	f006 fee8 	bl	8009680 <HAL_SPI_TransmitReceive_DMA>
	HAL_SPI_TransmitReceive_DMA(&hspi3, SPI3_tx_buff, SPI3_rx_buff, ORBIS_SPI_SIZE);
 80028b0:	2305      	movs	r3, #5
 80028b2:	4a0c      	ldr	r2, [pc, #48]	; (80028e4 <ORBIS_init+0x7c>)
 80028b4:	490c      	ldr	r1, [pc, #48]	; (80028e8 <ORBIS_init+0x80>)
 80028b6:	480d      	ldr	r0, [pc, #52]	; (80028ec <ORBIS_init+0x84>)
 80028b8:	f006 fee2 	bl	8009680 <HAL_SPI_TransmitReceive_DMA>

	//setup timer
	HAL_TIM_Base_Start_IT(&htim3);
 80028bc:	480c      	ldr	r0, [pc, #48]	; (80028f0 <ORBIS_init+0x88>)
 80028be:	f007 fc89 	bl	800a1d4 <HAL_TIM_Base_Start_IT>

}
 80028c2:	bf00      	nop
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	48000400 	.word	0x48000400
 80028d0:	48000c00 	.word	0x48000c00
 80028d4:	20000d18 	.word	0x20000d18
 80028d8:	20000cf8 	.word	0x20000cf8
 80028dc:	20000d00 	.word	0x20000d00
 80028e0:	200013f4 	.word	0x200013f4
 80028e4:	20000d10 	.word	0x20000d10
 80028e8:	20000d08 	.word	0x20000d08
 80028ec:	20001458 	.word	0x20001458
 80028f0:	2000168c 	.word	0x2000168c

080028f4 <HAL_SPI_TxRxCpltCallback>:
uint8_t velocity_index = 0;
float velocity_array[velocity_lpf_size] = {0};


void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef * hspi)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) {
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a6d      	ldr	r2, [pc, #436]	; (8002ab4 <HAL_SPI_TxRxCpltCallback+0x1c0>)
 8002900:	4293      	cmp	r3, r2
 8002902:	f040 80b0 	bne.w	8002a66 <HAL_SPI_TxRxCpltCallback+0x172>
		HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 1);
 8002906:	2201      	movs	r2, #1
 8002908:	2140      	movs	r1, #64	; 0x40
 800290a:	486b      	ldr	r0, [pc, #428]	; (8002ab8 <HAL_SPI_TxRxCpltCallback+0x1c4>)
 800290c:	f005 fdda 	bl	80084c4 <HAL_GPIO_WritePin>
		data_encoders.Calculated_pos = SPI1_rx_buff[0]; //(SPI1_rx_buff[3] << 8) | (SPI1_rx_buff[2]);
 8002910:	4b6a      	ldr	r3, [pc, #424]	; (8002abc <HAL_SPI_TxRxCpltCallback+0x1c8>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	461a      	mov	r2, r3
 8002916:	4b6a      	ldr	r3, [pc, #424]	; (8002ac0 <HAL_SPI_TxRxCpltCallback+0x1cc>)
 8002918:	611a      	str	r2, [r3, #16]
		data_encoders.Encoder1_pos = (uint32_t)(((uint32_t)(SPI1_rx_buff[0] << 6) | (SPI1_rx_buff[1] >> 2)) * 5625) >> 8;
 800291a:	4b68      	ldr	r3, [pc, #416]	; (8002abc <HAL_SPI_TxRxCpltCallback+0x1c8>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	019b      	lsls	r3, r3, #6
 8002920:	461a      	mov	r2, r3
 8002922:	4b66      	ldr	r3, [pc, #408]	; (8002abc <HAL_SPI_TxRxCpltCallback+0x1c8>)
 8002924:	785b      	ldrb	r3, [r3, #1]
 8002926:	089b      	lsrs	r3, r3, #2
 8002928:	b2db      	uxtb	r3, r3
 800292a:	4313      	orrs	r3, r2
 800292c:	f241 52f9 	movw	r2, #5625	; 0x15f9
 8002930:	fb02 f303 	mul.w	r3, r2, r3
 8002934:	0a1b      	lsrs	r3, r3, #8
 8002936:	4a62      	ldr	r2, [pc, #392]	; (8002ac0 <HAL_SPI_TxRxCpltCallback+0x1cc>)
 8002938:	6013      	str	r3, [r2, #0]
		data_encoders.Encoder1_pos_raw = (uint32_t)(SPI1_rx_buff[0] << 6) | (SPI1_rx_buff[1] >> 2);
 800293a:	4b60      	ldr	r3, [pc, #384]	; (8002abc <HAL_SPI_TxRxCpltCallback+0x1c8>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	019b      	lsls	r3, r3, #6
 8002940:	461a      	mov	r2, r3
 8002942:	4b5e      	ldr	r3, [pc, #376]	; (8002abc <HAL_SPI_TxRxCpltCallback+0x1c8>)
 8002944:	785b      	ldrb	r3, [r3, #1]
 8002946:	089b      	lsrs	r3, r3, #2
 8002948:	b2db      	uxtb	r3, r3
 800294a:	4313      	orrs	r3, r2
 800294c:	4a5c      	ldr	r2, [pc, #368]	; (8002ac0 <HAL_SPI_TxRxCpltCallback+0x1cc>)
 800294e:	6093      	str	r3, [r2, #8]
//		data_encoders.Encoder1_pos += 90000;
//		data_encoders.Encoder1_pos = data_encoders.Encoder1_pos %360000;

		float velocity_temp;
		if(((int32_t)data_encoders.Encoder1_pos - last_pos) > 180000)velocity_temp = ((int32_t)data_encoders.Encoder1_pos-last_pos - 360000);
 8002950:	4b5b      	ldr	r3, [pc, #364]	; (8002ac0 <HAL_SPI_TxRxCpltCallback+0x1cc>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	461a      	mov	r2, r3
 8002956:	4b5b      	ldr	r3, [pc, #364]	; (8002ac4 <HAL_SPI_TxRxCpltCallback+0x1d0>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	4a5a      	ldr	r2, [pc, #360]	; (8002ac8 <HAL_SPI_TxRxCpltCallback+0x1d4>)
 800295e:	4293      	cmp	r3, r2
 8002960:	dd10      	ble.n	8002984 <HAL_SPI_TxRxCpltCallback+0x90>
 8002962:	4b57      	ldr	r3, [pc, #348]	; (8002ac0 <HAL_SPI_TxRxCpltCallback+0x1cc>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	461a      	mov	r2, r3
 8002968:	4b56      	ldr	r3, [pc, #344]	; (8002ac4 <HAL_SPI_TxRxCpltCallback+0x1d0>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	f5a3 23af 	sub.w	r3, r3, #358400	; 0x57800
 8002972:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 8002976:	ee07 3a90 	vmov	s15, r3
 800297a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800297e:	edc7 7a03 	vstr	s15, [r7, #12]
 8002982:	e025      	b.n	80029d0 <HAL_SPI_TxRxCpltCallback+0xdc>
		else if(((int32_t)data_encoders.Encoder1_pos - last_pos) < -180000)velocity_temp = ((int32_t)data_encoders.Encoder1_pos-last_pos + 360000);
 8002984:	4b4e      	ldr	r3, [pc, #312]	; (8002ac0 <HAL_SPI_TxRxCpltCallback+0x1cc>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	461a      	mov	r2, r3
 800298a:	4b4e      	ldr	r3, [pc, #312]	; (8002ac4 <HAL_SPI_TxRxCpltCallback+0x1d0>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	4a4e      	ldr	r2, [pc, #312]	; (8002acc <HAL_SPI_TxRxCpltCallback+0x1d8>)
 8002992:	4293      	cmp	r3, r2
 8002994:	da10      	bge.n	80029b8 <HAL_SPI_TxRxCpltCallback+0xc4>
 8002996:	4b4a      	ldr	r3, [pc, #296]	; (8002ac0 <HAL_SPI_TxRxCpltCallback+0x1cc>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	461a      	mov	r2, r3
 800299c:	4b49      	ldr	r3, [pc, #292]	; (8002ac4 <HAL_SPI_TxRxCpltCallback+0x1d0>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	f503 23af 	add.w	r3, r3, #358400	; 0x57800
 80029a6:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 80029aa:	ee07 3a90 	vmov	s15, r3
 80029ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029b2:	edc7 7a03 	vstr	s15, [r7, #12]
 80029b6:	e00b      	b.n	80029d0 <HAL_SPI_TxRxCpltCallback+0xdc>
		else velocity_temp = ((int32_t)data_encoders.Encoder1_pos-last_pos);
 80029b8:	4b41      	ldr	r3, [pc, #260]	; (8002ac0 <HAL_SPI_TxRxCpltCallback+0x1cc>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	461a      	mov	r2, r3
 80029be:	4b41      	ldr	r3, [pc, #260]	; (8002ac4 <HAL_SPI_TxRxCpltCallback+0x1d0>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	ee07 3a90 	vmov	s15, r3
 80029c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029cc:	edc7 7a03 	vstr	s15, [r7, #12]
		last_pos = (int32_t)data_encoders.Encoder1_pos;
 80029d0:	4b3b      	ldr	r3, [pc, #236]	; (8002ac0 <HAL_SPI_TxRxCpltCallback+0x1cc>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	461a      	mov	r2, r3
 80029d6:	4b3b      	ldr	r3, [pc, #236]	; (8002ac4 <HAL_SPI_TxRxCpltCallback+0x1d0>)
 80029d8:	601a      	str	r2, [r3, #0]

		velocity_accumulate += velocity_temp;
 80029da:	4b3d      	ldr	r3, [pc, #244]	; (8002ad0 <HAL_SPI_TxRxCpltCallback+0x1dc>)
 80029dc:	ed93 7a00 	vldr	s14, [r3]
 80029e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80029e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029e8:	4b39      	ldr	r3, [pc, #228]	; (8002ad0 <HAL_SPI_TxRxCpltCallback+0x1dc>)
 80029ea:	edc3 7a00 	vstr	s15, [r3]
		velocity_accumulate -= velocity_array[velocity_index];
 80029ee:	4b38      	ldr	r3, [pc, #224]	; (8002ad0 <HAL_SPI_TxRxCpltCallback+0x1dc>)
 80029f0:	ed93 7a00 	vldr	s14, [r3]
 80029f4:	4b37      	ldr	r3, [pc, #220]	; (8002ad4 <HAL_SPI_TxRxCpltCallback+0x1e0>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	4a37      	ldr	r2, [pc, #220]	; (8002ad8 <HAL_SPI_TxRxCpltCallback+0x1e4>)
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	edd3 7a00 	vldr	s15, [r3]
 8002a02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a06:	4b32      	ldr	r3, [pc, #200]	; (8002ad0 <HAL_SPI_TxRxCpltCallback+0x1dc>)
 8002a08:	edc3 7a00 	vstr	s15, [r3]
		velocity_array[velocity_index] = velocity_temp;
 8002a0c:	4b31      	ldr	r3, [pc, #196]	; (8002ad4 <HAL_SPI_TxRxCpltCallback+0x1e0>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	4a31      	ldr	r2, [pc, #196]	; (8002ad8 <HAL_SPI_TxRxCpltCallback+0x1e4>)
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4413      	add	r3, r2
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	601a      	str	r2, [r3, #0]
		velocity_index++;
 8002a1a:	4b2e      	ldr	r3, [pc, #184]	; (8002ad4 <HAL_SPI_TxRxCpltCallback+0x1e0>)
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	3301      	adds	r3, #1
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	4b2c      	ldr	r3, [pc, #176]	; (8002ad4 <HAL_SPI_TxRxCpltCallback+0x1e0>)
 8002a24:	701a      	strb	r2, [r3, #0]
		if (velocity_index == velocity_lpf_size)velocity_index = 0;
 8002a26:	4b2b      	ldr	r3, [pc, #172]	; (8002ad4 <HAL_SPI_TxRxCpltCallback+0x1e0>)
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	2b64      	cmp	r3, #100	; 0x64
 8002a2c:	d102      	bne.n	8002a34 <HAL_SPI_TxRxCpltCallback+0x140>
 8002a2e:	4b29      	ldr	r3, [pc, #164]	; (8002ad4 <HAL_SPI_TxRxCpltCallback+0x1e0>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	701a      	strb	r2, [r3, #0]

		data_encoders.Velocity = (int32_t)((velocity_accumulate*10000.0f*60.0f)/360.0f/velocity_lpf_size);
 8002a34:	4b26      	ldr	r3, [pc, #152]	; (8002ad0 <HAL_SPI_TxRxCpltCallback+0x1dc>)
 8002a36:	edd3 7a00 	vldr	s15, [r3]
 8002a3a:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002adc <HAL_SPI_TxRxCpltCallback+0x1e8>
 8002a3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a42:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002ae0 <HAL_SPI_TxRxCpltCallback+0x1ec>
 8002a46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a4a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002ae4 <HAL_SPI_TxRxCpltCallback+0x1f0>
 8002a4e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002a52:	eddf 6a25 	vldr	s13, [pc, #148]	; 8002ae8 <HAL_SPI_TxRxCpltCallback+0x1f4>
 8002a56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a5e:	ee17 2a90 	vmov	r2, s15
 8002a62:	4b17      	ldr	r3, [pc, #92]	; (8002ac0 <HAL_SPI_TxRxCpltCallback+0x1cc>)
 8002a64:	615a      	str	r2, [r3, #20]
	}
	if (hspi == &hspi3) {
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a20      	ldr	r2, [pc, #128]	; (8002aec <HAL_SPI_TxRxCpltCallback+0x1f8>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d11a      	bne.n	8002aa4 <HAL_SPI_TxRxCpltCallback+0x1b0>
		HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 1);
 8002a6e:	2201      	movs	r2, #1
 8002a70:	2104      	movs	r1, #4
 8002a72:	481f      	ldr	r0, [pc, #124]	; (8002af0 <HAL_SPI_TxRxCpltCallback+0x1fc>)
 8002a74:	f005 fd26 	bl	80084c4 <HAL_GPIO_WritePin>
		data_encoders.Encoder2_temp_x10 = (SPI3_rx_buff[3] << 8) | (SPI3_rx_buff[2]);
 8002a78:	4b1e      	ldr	r3, [pc, #120]	; (8002af4 <HAL_SPI_TxRxCpltCallback+0x200>)
 8002a7a:	78db      	ldrb	r3, [r3, #3]
 8002a7c:	021b      	lsls	r3, r3, #8
 8002a7e:	b21a      	sxth	r2, r3
 8002a80:	4b1c      	ldr	r3, [pc, #112]	; (8002af4 <HAL_SPI_TxRxCpltCallback+0x200>)
 8002a82:	789b      	ldrb	r3, [r3, #2]
 8002a84:	b21b      	sxth	r3, r3
 8002a86:	4313      	orrs	r3, r2
 8002a88:	b21a      	sxth	r2, r3
 8002a8a:	4b0d      	ldr	r3, [pc, #52]	; (8002ac0 <HAL_SPI_TxRxCpltCallback+0x1cc>)
 8002a8c:	835a      	strh	r2, [r3, #26]
		data_encoders.Encoder2_pos = (SPI3_rx_buff[0] << 6) | (SPI3_rx_buff[1] >> 2);
 8002a8e:	4b19      	ldr	r3, [pc, #100]	; (8002af4 <HAL_SPI_TxRxCpltCallback+0x200>)
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	019b      	lsls	r3, r3, #6
 8002a94:	4a17      	ldr	r2, [pc, #92]	; (8002af4 <HAL_SPI_TxRxCpltCallback+0x200>)
 8002a96:	7852      	ldrb	r2, [r2, #1]
 8002a98:	0892      	lsrs	r2, r2, #2
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	4b07      	ldr	r3, [pc, #28]	; (8002ac0 <HAL_SPI_TxRxCpltCallback+0x1cc>)
 8002aa2:	605a      	str	r2, [r3, #4]

	}
	//data_encoders.Calculated_pos = 10;

	Encoders_IRQ_callback(&data_encoders);
 8002aa4:	4b14      	ldr	r3, [pc, #80]	; (8002af8 <HAL_SPI_TxRxCpltCallback+0x204>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4805      	ldr	r0, [pc, #20]	; (8002ac0 <HAL_SPI_TxRxCpltCallback+0x1cc>)
 8002aaa:	4798      	blx	r3
}
 8002aac:	bf00      	nop
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	200013f4 	.word	0x200013f4
 8002ab8:	48000400 	.word	0x48000400
 8002abc:	20000d00 	.word	0x20000d00
 8002ac0:	20000d1c 	.word	0x20000d1c
 8002ac4:	20000d3c 	.word	0x20000d3c
 8002ac8:	0002bf20 	.word	0x0002bf20
 8002acc:	fffd40e0 	.word	0xfffd40e0
 8002ad0:	20000d38 	.word	0x20000d38
 8002ad4:	20000d40 	.word	0x20000d40
 8002ad8:	20000d44 	.word	0x20000d44
 8002adc:	461c4000 	.word	0x461c4000
 8002ae0:	42700000 	.word	0x42700000
 8002ae4:	43b40000 	.word	0x43b40000
 8002ae8:	42c80000 	.word	0x42c80000
 8002aec:	20001458 	.word	0x20001458
 8002af0:	48000c00 	.word	0x48000c00
 8002af4:	20000d10 	.word	0x20000d10
 8002af8:	20000d18 	.word	0x20000d18

08002afc <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 0);
 8002b04:	2200      	movs	r2, #0
 8002b06:	2140      	movs	r1, #64	; 0x40
 8002b08:	480b      	ldr	r0, [pc, #44]	; (8002b38 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002b0a:	f005 fcdb 	bl	80084c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 0);
 8002b0e:	2200      	movs	r2, #0
 8002b10:	2104      	movs	r1, #4
 8002b12:	480a      	ldr	r0, [pc, #40]	; (8002b3c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002b14:	f005 fcd6 	bl	80084c4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA(&hspi1, SPI1_tx_buff, SPI1_rx_buff, ORBIS_SPI_SIZE);
 8002b18:	2305      	movs	r3, #5
 8002b1a:	4a09      	ldr	r2, [pc, #36]	; (8002b40 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002b1c:	4909      	ldr	r1, [pc, #36]	; (8002b44 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002b1e:	480a      	ldr	r0, [pc, #40]	; (8002b48 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002b20:	f006 fdae 	bl	8009680 <HAL_SPI_TransmitReceive_DMA>
	HAL_SPI_TransmitReceive_DMA(&hspi3, SPI3_tx_buff, SPI3_rx_buff, ORBIS_SPI_SIZE);
 8002b24:	2305      	movs	r3, #5
 8002b26:	4a09      	ldr	r2, [pc, #36]	; (8002b4c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002b28:	4909      	ldr	r1, [pc, #36]	; (8002b50 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002b2a:	480a      	ldr	r0, [pc, #40]	; (8002b54 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002b2c:	f006 fda8 	bl	8009680 <HAL_SPI_TransmitReceive_DMA>
}
 8002b30:	bf00      	nop
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	48000400 	.word	0x48000400
 8002b3c:	48000c00 	.word	0x48000c00
 8002b40:	20000d00 	.word	0x20000d00
 8002b44:	20000cf8 	.word	0x20000cf8
 8002b48:	200013f4 	.word	0x200013f4
 8002b4c:	20000d10 	.word	0x20000d10
 8002b50:	20000d08 	.word	0x20000d08
 8002b54:	20001458 	.word	0x20001458

08002b58 <SetTunings>:
	/*Remember some variables for next time*/
	val->lastInput = val->Input;
}

void SetTunings(PID_instance *val, float Kp, float Ki, float Kd, float pOn)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b089      	sub	sp, #36	; 0x24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6178      	str	r0, [r7, #20]
 8002b60:	ed87 0a04 	vstr	s0, [r7, #16]
 8002b64:	edc7 0a03 	vstr	s1, [r7, #12]
 8002b68:	ed87 1a02 	vstr	s2, [r7, #8]
 8002b6c:	edc7 1a01 	vstr	s3, [r7, #4]
   if (Kp<0 || Ki<0|| Kd<0 || pOn<0 || pOn>1) return;
 8002b70:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b74:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b7c:	f100 809b 	bmi.w	8002cb6 <SetTunings+0x15e>
 8002b80:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b84:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b8c:	f100 8093 	bmi.w	8002cb6 <SetTunings+0x15e>
 8002b90:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b9c:	f100 808b 	bmi.w	8002cb6 <SetTunings+0x15e>
 8002ba0:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ba4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bac:	f100 8083 	bmi.w	8002cb6 <SetTunings+0x15e>
 8002bb0:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002bb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bc0:	dc79      	bgt.n	8002cb6 <SetTunings+0x15e>

   val->pOnE = pOn>0; //some p on error is desired;
 8002bc2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bc6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bce:	bfcc      	ite	gt
 8002bd0:	2301      	movgt	r3, #1
 8002bd2:	2300      	movle	r3, #0
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
   val->pOnM = pOn<1; //some p on measurement is desired;
 8002bde:	edd7 7a01 	vldr	s15, [r7, #4]
 8002be2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002be6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bee:	bf4c      	ite	mi
 8002bf0:	2301      	movmi	r3, #1
 8002bf2:	2300      	movpl	r3, #0
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

   float SampleTimeInSec = ((float)val->SampleTime)/1000000;
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c02:	ee07 3a90 	vmov	s15, r3
 8002c06:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c0a:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8002cc4 <SetTunings+0x16c>
 8002c0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c12:	edc7 7a07 	vstr	s15, [r7, #28]
   val->kp = Kp;
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	615a      	str	r2, [r3, #20]
   val->ki = Ki * SampleTimeInSec;
 8002c1c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002c20:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	edc3 7a06 	vstr	s15, [r3, #24]
   val->kd = Kd / SampleTimeInSec;
 8002c2e:	edd7 6a02 	vldr	s13, [r7, #8]
 8002c32:	ed97 7a07 	vldr	s14, [r7, #28]
 8002c36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	edc3 7a07 	vstr	s15, [r3, #28]

  if(val->controllerDirection ==REVERSE)
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d11d      	bne.n	8002c84 <SetTunings+0x12c>
   {
	  val->kp = (0 - val->kp);
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	edd3 7a05 	vldr	s15, [r3, #20]
 8002c4e:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002cc8 <SetTunings+0x170>
 8002c52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	edc3 7a05 	vstr	s15, [r3, #20]
	  val->ki = (0 - val->ki);
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002c62:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002cc8 <SetTunings+0x170>
 8002c66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	edc3 7a06 	vstr	s15, [r3, #24]
	  val->kd = (0 - val->kd);
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	edd3 7a07 	vldr	s15, [r3, #28]
 8002c76:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002cc8 <SetTunings+0x170>
 8002c7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	edc3 7a07 	vstr	s15, [r3, #28]
   }

  val->pOnEKp = pOn * val->kp;
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	ed93 7a05 	vldr	s14, [r3, #20]
 8002c8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
  val->pOnMKp = (1 - pOn) * val->kp;
 8002c98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ca0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	edd3 7a05 	vldr	s15, [r3, #20]
 8002caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 8002cb4:	e000      	b.n	8002cb8 <SetTunings+0x160>
   if (Kp<0 || Ki<0|| Kd<0 || pOn<0 || pOn>1) return;
 8002cb6:	bf00      	nop
}
 8002cb8:	3724      	adds	r7, #36	; 0x24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	49742400 	.word	0x49742400
 8002cc8:	00000000 	.word	0x00000000

08002ccc <SetSampleTime>:

void SetSampleTime(PID_instance *val, int NewSampleTime)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
   if (NewSampleTime > 0)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	dd25      	ble.n	8002d28 <SetSampleTime+0x5c>
   {
      float ratio  = (float)NewSampleTime
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	ee07 3a90 	vmov	s15, r3
 8002ce2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
                      / (float)val->SampleTime;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cea:	ee07 3a90 	vmov	s15, r3
 8002cee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
      float ratio  = (float)NewSampleTime
 8002cf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cf6:	edc7 7a03 	vstr	s15, [r7, #12]
      val->ki *= ratio;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	ed93 7a06 	vldr	s14, [r3, #24]
 8002d00:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	edc3 7a06 	vstr	s15, [r3, #24]
      val->kd /= ratio;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	edd3 6a07 	vldr	s13, [r3, #28]
 8002d14:	ed97 7a03 	vldr	s14, [r7, #12]
 8002d18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	edc3 7a07 	vstr	s15, [r3, #28]
      val->SampleTime = (unsigned long)NewSampleTime;
 8002d22:	683a      	ldr	r2, [r7, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	629a      	str	r2, [r3, #40]	; 0x28
   }
}
 8002d28:	bf00      	nop
 8002d2a:	3714      	adds	r7, #20
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <SetOutputLimits>:

void SetOutputLimits(PID_instance *val, float Min, float Max)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002d40:	edc7 0a01 	vstr	s1, [r7, #4]
   if(Min > Max) return;
 8002d44:	ed97 7a02 	vldr	s14, [r7, #8]
 8002d48:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d54:	dc44      	bgt.n	8002de0 <SetOutputLimits+0xac>
   val->outMin = Min;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	68ba      	ldr	r2, [r7, #8]
 8002d5a:	621a      	str	r2, [r3, #32]
   val->outMax = Max;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	625a      	str	r2, [r3, #36]	; 0x24

   if(val->Output > val->outMax) val->Output = val->outMax;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	ed93 7a01 	vldr	s14, [r3, #4]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002d6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d76:	dd04      	ble.n	8002d82 <SetOutputLimits+0x4e>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	605a      	str	r2, [r3, #4]
 8002d80:	e00e      	b.n	8002da0 <SetOutputLimits+0x6c>
   else if(val->Output < val->outMin) val->Output = val->outMin;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	ed93 7a01 	vldr	s14, [r3, #4]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	edd3 7a08 	vldr	s15, [r3, #32]
 8002d8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d96:	d503      	bpl.n	8002da0 <SetOutputLimits+0x6c>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6a1a      	ldr	r2, [r3, #32]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	605a      	str	r2, [r3, #4]

   if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	ed93 7a03 	vldr	s14, [r3, #12]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002dac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002db4:	dd04      	ble.n	8002dc0 <SetOutputLimits+0x8c>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	60da      	str	r2, [r3, #12]
 8002dbe:	e010      	b.n	8002de2 <SetOutputLimits+0xae>
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	ed93 7a03 	vldr	s14, [r3, #12]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	edd3 7a08 	vldr	s15, [r3, #32]
 8002dcc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd4:	d505      	bpl.n	8002de2 <SetOutputLimits+0xae>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6a1a      	ldr	r2, [r3, #32]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	60da      	str	r2, [r3, #12]
 8002dde:	e000      	b.n	8002de2 <SetOutputLimits+0xae>
   if(Min > Max) return;
 8002de0:	bf00      	nop
}
 8002de2:	3714      	adds	r7, #20
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <SetMode>:

void SetMode(PID_instance *val, int Mode)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
    uint8_t newAuto = (Mode == AUTOMATIC);
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	bf0c      	ite	eq
 8002dfc:	2301      	moveq	r3, #1
 8002dfe:	2300      	movne	r3, #0
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	73fb      	strb	r3, [r7, #15]
    if(newAuto == !val->inAuto)
 8002e04:	7bfb      	ldrb	r3, [r7, #15]
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8002e0c:	2a00      	cmp	r2, #0
 8002e0e:	bf0c      	ite	eq
 8002e10:	2201      	moveq	r2, #1
 8002e12:	2200      	movne	r2, #0
 8002e14:	b2d2      	uxtb	r2, r2
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d102      	bne.n	8002e20 <SetMode+0x34>
    {  /*we just went from manual to auto*/
        Initialize(val);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 f808 	bl	8002e30 <Initialize>
    }
    val->inAuto = newAuto;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	7bfa      	ldrb	r2, [r7, #15]
 8002e24:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8002e28:	bf00      	nop
 8002e2a:	3710      	adds	r7, #16
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <Initialize>:

void Initialize(PID_instance *val)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
	val->lastInput = val->Input;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	611a      	str	r2, [r3, #16]
	val->outputSum = val->Output;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	60da      	str	r2, [r3, #12]
   if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	ed93 7a03 	vldr	s14, [r3, #12]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002e54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e5c:	dd04      	ble.n	8002e68 <Initialize+0x38>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	60da      	str	r2, [r3, #12]
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
}
 8002e66:	e00f      	b.n	8002e88 <Initialize+0x58>
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	ed93 7a03 	vldr	s14, [r3, #12]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	edd3 7a08 	vldr	s15, [r3, #32]
 8002e74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e7c:	d400      	bmi.n	8002e80 <Initialize+0x50>
}
 8002e7e:	e003      	b.n	8002e88 <Initialize+0x58>
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a1a      	ldr	r2, [r3, #32]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	60da      	str	r2, [r3, #12]
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <SetControllerDirection>:

void SetControllerDirection(PID_instance *val, int Direction)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
	val->controllerDirection = Direction;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002ea4:	bf00      	nop
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <PrintServerPrintf>:
/* For convenience, define a pointer to UART handle */
UART_HandleTypeDef *uart_handle_p = &huart1;

volatile uint8_t buff[PRINT_BUFFER_SIZE];
void PrintServerPrintf(const char *fmt, ...)
{
 8002eb0:	b40f      	push	{r0, r1, r2, r3}
 8002eb2:	b590      	push	{r4, r7, lr}
 8002eb4:	b083      	sub	sp, #12
 8002eb6:	af00      	add	r7, sp, #0
/* local variable to store the final text string to be sent to UART */

/* va_list is a type to hold information about variable arguments */
va_list args;
/* va_start must be called before accessing variable argument list */
va_start(args, fmt);
 8002eb8:	f107 031c 	add.w	r3, r7, #28
 8002ebc:	607b      	str	r3, [r7, #4]
*
* The vsnprintf() function converts each entry in the argument list
* according to the corresponding format specifier in format. The format has
* the same form and function as the format string for the printf()
* function. */
vsnprintf((char *)buff, PRINT_BUFFER_SIZE, fmt, args);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ec6:	480b      	ldr	r0, [pc, #44]	; (8002ef4 <PrintServerPrintf+0x44>)
 8002ec8:	f00a fe70 	bl	800dbac <vsniprintf>
/* va_end should be executed before the function returns whenever
* va_start has been previously used in that function */
va_end(args);
HAL_UART_Transmit_DMA(uart_handle_p, (uint8_t *)buff, strlen((char *)buff));
 8002ecc:	4b0a      	ldr	r3, [pc, #40]	; (8002ef8 <PrintServerPrintf+0x48>)
 8002ece:	681c      	ldr	r4, [r3, #0]
 8002ed0:	4808      	ldr	r0, [pc, #32]	; (8002ef4 <PrintServerPrintf+0x44>)
 8002ed2:	f7fd f9f5 	bl	80002c0 <strlen>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	461a      	mov	r2, r3
 8002edc:	4905      	ldr	r1, [pc, #20]	; (8002ef4 <PrintServerPrintf+0x44>)
 8002ede:	4620      	mov	r0, r4
 8002ee0:	f008 fdd4 	bl	800ba8c <HAL_UART_Transmit_DMA>
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002eee:	b004      	add	sp, #16
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	20000ed4 	.word	0x20000ed4
 8002ef8:	20000004 	.word	0x20000004

08002efc <ADC_CAL>:
    // Calculate the magnitude of the vector sum
    float magnitude = sqrt(sum.real * sum.real + sum.imag * sum.imag);
    return magnitude;
}

void ADC_CAL(){
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
	VDDA = (int16_t)3000*(*vrefint)/(adc_result_DMA[3]/number_of_oversample);
 8002f00:	4b4b      	ldr	r3, [pc, #300]	; (8003030 <ADC_CAL+0x134>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	881b      	ldrh	r3, [r3, #0]
 8002f06:	461a      	mov	r2, r3
 8002f08:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002f0c:	fb02 f303 	mul.w	r3, r2, r3
 8002f10:	461a      	mov	r2, r3
 8002f12:	4b48      	ldr	r3, [pc, #288]	; (8003034 <ADC_CAL+0x138>)
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	091b      	lsrs	r3, r3, #4
 8002f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f1c:	b21a      	sxth	r2, r3
 8002f1e:	4b46      	ldr	r3, [pc, #280]	; (8003038 <ADC_CAL+0x13c>)
 8002f20:	801a      	strh	r2, [r3, #0]
	Voltage_offset_temp[0] += (int32_t)((adc_result_DMA[2]/number_of_oversample*VDDA)/4095)*153/100; //*153/100
 8002f22:	4b44      	ldr	r3, [pc, #272]	; (8003034 <ADC_CAL+0x138>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	091b      	lsrs	r3, r3, #4
 8002f28:	4a43      	ldr	r2, [pc, #268]	; (8003038 <ADC_CAL+0x13c>)
 8002f2a:	8812      	ldrh	r2, [r2, #0]
 8002f2c:	b212      	sxth	r2, r2
 8002f2e:	fb03 f202 	mul.w	r2, r3, r2
 8002f32:	4b42      	ldr	r3, [pc, #264]	; (800303c <ADC_CAL+0x140>)
 8002f34:	fba3 1302 	umull	r1, r3, r3, r2
 8002f38:	1ad2      	subs	r2, r2, r3
 8002f3a:	0852      	lsrs	r2, r2, #1
 8002f3c:	4413      	add	r3, r2
 8002f3e:	0adb      	lsrs	r3, r3, #11
 8002f40:	461a      	mov	r2, r3
 8002f42:	4613      	mov	r3, r2
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	4413      	add	r3, r2
 8002f48:	011a      	lsls	r2, r3, #4
 8002f4a:	4413      	add	r3, r2
 8002f4c:	4a3c      	ldr	r2, [pc, #240]	; (8003040 <ADC_CAL+0x144>)
 8002f4e:	fb82 1203 	smull	r1, r2, r2, r3
 8002f52:	1152      	asrs	r2, r2, #5
 8002f54:	17db      	asrs	r3, r3, #31
 8002f56:	1ad2      	subs	r2, r2, r3
 8002f58:	4b3a      	ldr	r3, [pc, #232]	; (8003044 <ADC_CAL+0x148>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	4a39      	ldr	r2, [pc, #228]	; (8003044 <ADC_CAL+0x148>)
 8002f60:	6013      	str	r3, [r2, #0]
	Voltage_offset_temp[1] += (int32_t)((adc_result_DMA[1]/number_of_oversample*VDDA)/4095)*153/100;
 8002f62:	4b34      	ldr	r3, [pc, #208]	; (8003034 <ADC_CAL+0x138>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	091b      	lsrs	r3, r3, #4
 8002f68:	4a33      	ldr	r2, [pc, #204]	; (8003038 <ADC_CAL+0x13c>)
 8002f6a:	8812      	ldrh	r2, [r2, #0]
 8002f6c:	b212      	sxth	r2, r2
 8002f6e:	fb03 f202 	mul.w	r2, r3, r2
 8002f72:	4b32      	ldr	r3, [pc, #200]	; (800303c <ADC_CAL+0x140>)
 8002f74:	fba3 1302 	umull	r1, r3, r3, r2
 8002f78:	1ad2      	subs	r2, r2, r3
 8002f7a:	0852      	lsrs	r2, r2, #1
 8002f7c:	4413      	add	r3, r2
 8002f7e:	0adb      	lsrs	r3, r3, #11
 8002f80:	461a      	mov	r2, r3
 8002f82:	4613      	mov	r3, r2
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	4413      	add	r3, r2
 8002f88:	011a      	lsls	r2, r3, #4
 8002f8a:	4413      	add	r3, r2
 8002f8c:	4a2c      	ldr	r2, [pc, #176]	; (8003040 <ADC_CAL+0x144>)
 8002f8e:	fb82 1203 	smull	r1, r2, r2, r3
 8002f92:	1152      	asrs	r2, r2, #5
 8002f94:	17db      	asrs	r3, r3, #31
 8002f96:	1ad2      	subs	r2, r2, r3
 8002f98:	4b2a      	ldr	r3, [pc, #168]	; (8003044 <ADC_CAL+0x148>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	4a29      	ldr	r2, [pc, #164]	; (8003044 <ADC_CAL+0x148>)
 8002fa0:	6053      	str	r3, [r2, #4]
	Voltage_offset_temp[2] += (int32_t)((adc_result_DMA[0]/number_of_oversample*VDDA)/4095)*153/100;
 8002fa2:	4b24      	ldr	r3, [pc, #144]	; (8003034 <ADC_CAL+0x138>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	091b      	lsrs	r3, r3, #4
 8002fa8:	4a23      	ldr	r2, [pc, #140]	; (8003038 <ADC_CAL+0x13c>)
 8002faa:	8812      	ldrh	r2, [r2, #0]
 8002fac:	b212      	sxth	r2, r2
 8002fae:	fb03 f202 	mul.w	r2, r3, r2
 8002fb2:	4b22      	ldr	r3, [pc, #136]	; (800303c <ADC_CAL+0x140>)
 8002fb4:	fba3 1302 	umull	r1, r3, r3, r2
 8002fb8:	1ad2      	subs	r2, r2, r3
 8002fba:	0852      	lsrs	r2, r2, #1
 8002fbc:	4413      	add	r3, r2
 8002fbe:	0adb      	lsrs	r3, r3, #11
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	4413      	add	r3, r2
 8002fc8:	011a      	lsls	r2, r3, #4
 8002fca:	4413      	add	r3, r2
 8002fcc:	4a1c      	ldr	r2, [pc, #112]	; (8003040 <ADC_CAL+0x144>)
 8002fce:	fb82 1203 	smull	r1, r2, r2, r3
 8002fd2:	1152      	asrs	r2, r2, #5
 8002fd4:	17db      	asrs	r3, r3, #31
 8002fd6:	1ad2      	subs	r2, r2, r3
 8002fd8:	4b1a      	ldr	r3, [pc, #104]	; (8003044 <ADC_CAL+0x148>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	4413      	add	r3, r2
 8002fde:	4a19      	ldr	r2, [pc, #100]	; (8003044 <ADC_CAL+0x148>)
 8002fe0:	6093      	str	r3, [r2, #8]
	calibrating--;
 8002fe2:	4b19      	ldr	r3, [pc, #100]	; (8003048 <ADC_CAL+0x14c>)
 8002fe4:	881b      	ldrh	r3, [r3, #0]
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	4b17      	ldr	r3, [pc, #92]	; (8003048 <ADC_CAL+0x14c>)
 8002fec:	801a      	strh	r2, [r3, #0]

	if(!calibrating){
 8002fee:	4b16      	ldr	r3, [pc, #88]	; (8003048 <ADC_CAL+0x14c>)
 8002ff0:	881b      	ldrh	r3, [r3, #0]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d117      	bne.n	8003026 <ADC_CAL+0x12a>
		Voltage_offset[0] = Voltage_offset_temp[0]/number_of_calibration_points;
 8002ff6:	4b13      	ldr	r3, [pc, #76]	; (8003044 <ADC_CAL+0x148>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a14      	ldr	r2, [pc, #80]	; (800304c <ADC_CAL+0x150>)
 8002ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8003000:	099b      	lsrs	r3, r3, #6
 8003002:	4a13      	ldr	r2, [pc, #76]	; (8003050 <ADC_CAL+0x154>)
 8003004:	6013      	str	r3, [r2, #0]
		Voltage_offset[1] = Voltage_offset_temp[1]/number_of_calibration_points;
 8003006:	4b0f      	ldr	r3, [pc, #60]	; (8003044 <ADC_CAL+0x148>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	4a10      	ldr	r2, [pc, #64]	; (800304c <ADC_CAL+0x150>)
 800300c:	fba2 2303 	umull	r2, r3, r2, r3
 8003010:	099b      	lsrs	r3, r3, #6
 8003012:	4a0f      	ldr	r2, [pc, #60]	; (8003050 <ADC_CAL+0x154>)
 8003014:	6053      	str	r3, [r2, #4]
		Voltage_offset[2] = Voltage_offset_temp[2]/number_of_calibration_points;
 8003016:	4b0b      	ldr	r3, [pc, #44]	; (8003044 <ADC_CAL+0x148>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	4a0c      	ldr	r2, [pc, #48]	; (800304c <ADC_CAL+0x150>)
 800301c:	fba2 2303 	umull	r2, r3, r2, r3
 8003020:	099b      	lsrs	r3, r3, #6
 8003022:	4a0b      	ldr	r2, [pc, #44]	; (8003050 <ADC_CAL+0x154>)
 8003024:	6093      	str	r3, [r2, #8]
	}
}
 8003026:	bf00      	nop
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	20000008 	.word	0x20000008
 8003034:	200010d4 	.word	0x200010d4
 8003038:	20001120 	.word	0x20001120
 800303c:	00100101 	.word	0x00100101
 8003040:	51eb851f 	.word	0x51eb851f
 8003044:	20001148 	.word	0x20001148
 8003048:	20001144 	.word	0x20001144
 800304c:	10624dd3 	.word	0x10624dd3
 8003050:	20001114 	.word	0x20001114

08003054 <current_init>:

void current_init(Current_Callback __IRQ_callback){
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
	//ADC_CAL_init(&hadc1);
	calibrating = number_of_calibration_points;
 800305c:	4b0b      	ldr	r3, [pc, #44]	; (800308c <current_init+0x38>)
 800305e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003062:	801a      	strh	r2, [r3, #0]

	Curent_IRQ_callback = __IRQ_callback;
 8003064:	4a0a      	ldr	r2, [pc, #40]	; (8003090 <current_init+0x3c>)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6013      	str	r3, [r2, #0]

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_result_DMA, number_of_channels*2);
 800306a:	2208      	movs	r2, #8
 800306c:	4909      	ldr	r1, [pc, #36]	; (8003094 <current_init+0x40>)
 800306e:	480a      	ldr	r0, [pc, #40]	; (8003098 <current_init+0x44>)
 8003070:	f002 fb9e 	bl	80057b0 <HAL_ADC_Start_DMA>


	HAL_DAC_Init(&hdac1);
 8003074:	4809      	ldr	r0, [pc, #36]	; (800309c <current_init+0x48>)
 8003076:	f003 fd6e 	bl	8006b56 <HAL_DAC_Init>
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 800307a:	2100      	movs	r1, #0
 800307c:	4807      	ldr	r0, [pc, #28]	; (800309c <current_init+0x48>)
 800307e:	f003 fd8c 	bl	8006b9a <HAL_DAC_Start>
}
 8003082:	bf00      	nop
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	20001144 	.word	0x20001144
 8003090:	20001124 	.word	0x20001124
 8003094:	200010d4 	.word	0x200010d4
 8003098:	200011a8 	.word	0x200011a8
 800309c:	20001344 	.word	0x20001344

080030a0 <voltage_temperature_init>:
void voltage_temperature_init(VT_Callback __IRQ_callback){
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
	VT_IRQ_callback = __IRQ_callback;
 80030a8:	4a05      	ldr	r2, [pc, #20]	; (80030c0 <voltage_temperature_init+0x20>)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6013      	str	r3, [r2, #0]

	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)VT_adc_result_DMA, number_of_VT_channels*2);
 80030ae:	2208      	movs	r2, #8
 80030b0:	4904      	ldr	r1, [pc, #16]	; (80030c4 <voltage_temperature_init+0x24>)
 80030b2:	4805      	ldr	r0, [pc, #20]	; (80030c8 <voltage_temperature_init+0x28>)
 80030b4:	f002 fb7c 	bl	80057b0 <HAL_ADC_Start_DMA>
}
 80030b8:	bf00      	nop
 80030ba:	3708      	adds	r7, #8
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	20001138 	.word	0x20001138
 80030c4:	200010f4 	.word	0x200010f4
 80030c8:	20001214 	.word	0x20001214

080030cc <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1){
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a8a      	ldr	r2, [pc, #552]	; (8003300 <HAL_ADC_ConvHalfCpltCallback+0x234>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	f040 80b7 	bne.w	800324c <HAL_ADC_ConvHalfCpltCallback+0x180>
		if(calibrating)ADC_CAL();
 80030de:	4b89      	ldr	r3, [pc, #548]	; (8003304 <HAL_ADC_ConvHalfCpltCallback+0x238>)
 80030e0:	881b      	ldrh	r3, [r3, #0]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d002      	beq.n	80030ec <HAL_ADC_ConvHalfCpltCallback+0x20>
 80030e6:	f7ff ff09 	bl	8002efc <ADC_CAL>
 80030ea:	e0af      	b.n	800324c <HAL_ADC_ConvHalfCpltCallback+0x180>
		else {
			VDDA = (int16_t)3000*(*vrefint)/(adc_result_DMA[3]/number_of_oversample);
 80030ec:	4b86      	ldr	r3, [pc, #536]	; (8003308 <HAL_ADC_ConvHalfCpltCallback+0x23c>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	881b      	ldrh	r3, [r3, #0]
 80030f2:	461a      	mov	r2, r3
 80030f4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80030f8:	fb02 f303 	mul.w	r3, r2, r3
 80030fc:	461a      	mov	r2, r3
 80030fe:	4b83      	ldr	r3, [pc, #524]	; (800330c <HAL_ADC_ConvHalfCpltCallback+0x240>)
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	091b      	lsrs	r3, r3, #4
 8003104:	fbb2 f3f3 	udiv	r3, r2, r3
 8003108:	b21a      	sxth	r2, r3
 800310a:	4b81      	ldr	r3, [pc, #516]	; (8003310 <HAL_ADC_ConvHalfCpltCallback+0x244>)
 800310c:	801a      	strh	r2, [r3, #0]
			data.Current_M1 = -(int32_t)(((((int32_t)adc_result_DMA[2]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[0])*50;
 800310e:	4b81      	ldr	r3, [pc, #516]	; (8003314 <HAL_ADC_ConvHalfCpltCallback+0x248>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4619      	mov	r1, r3
 8003114:	4b7d      	ldr	r3, [pc, #500]	; (800330c <HAL_ADC_ConvHalfCpltCallback+0x240>)
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	2b00      	cmp	r3, #0
 800311a:	da00      	bge.n	800311e <HAL_ADC_ConvHalfCpltCallback+0x52>
 800311c:	330f      	adds	r3, #15
 800311e:	111b      	asrs	r3, r3, #4
 8003120:	461a      	mov	r2, r3
 8003122:	4b7b      	ldr	r3, [pc, #492]	; (8003310 <HAL_ADC_ConvHalfCpltCallback+0x244>)
 8003124:	881b      	ldrh	r3, [r3, #0]
 8003126:	b21b      	sxth	r3, r3
 8003128:	fb02 f303 	mul.w	r3, r2, r3
 800312c:	4a7a      	ldr	r2, [pc, #488]	; (8003318 <HAL_ADC_ConvHalfCpltCallback+0x24c>)
 800312e:	fb82 0203 	smull	r0, r2, r2, r3
 8003132:	441a      	add	r2, r3
 8003134:	12d2      	asrs	r2, r2, #11
 8003136:	17db      	asrs	r3, r3, #31
 8003138:	1ad2      	subs	r2, r2, r3
 800313a:	4613      	mov	r3, r2
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	4413      	add	r3, r2
 8003140:	011a      	lsls	r2, r3, #4
 8003142:	4413      	add	r3, r2
 8003144:	4a75      	ldr	r2, [pc, #468]	; (800331c <HAL_ADC_ConvHalfCpltCallback+0x250>)
 8003146:	fb82 0203 	smull	r0, r2, r2, r3
 800314a:	1152      	asrs	r2, r2, #5
 800314c:	17db      	asrs	r3, r3, #31
 800314e:	1a9b      	subs	r3, r3, r2
 8003150:	440b      	add	r3, r1
 8003152:	2232      	movs	r2, #50	; 0x32
 8003154:	fb02 f303 	mul.w	r3, r2, r3
 8003158:	4a71      	ldr	r2, [pc, #452]	; (8003320 <HAL_ADC_ConvHalfCpltCallback+0x254>)
 800315a:	6013      	str	r3, [r2, #0]
			data.Current_M2 = -(int32_t)(((((int32_t)adc_result_DMA[1]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[1])*50;
 800315c:	4b6d      	ldr	r3, [pc, #436]	; (8003314 <HAL_ADC_ConvHalfCpltCallback+0x248>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	4619      	mov	r1, r3
 8003162:	4b6a      	ldr	r3, [pc, #424]	; (800330c <HAL_ADC_ConvHalfCpltCallback+0x240>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	da00      	bge.n	800316c <HAL_ADC_ConvHalfCpltCallback+0xa0>
 800316a:	330f      	adds	r3, #15
 800316c:	111b      	asrs	r3, r3, #4
 800316e:	461a      	mov	r2, r3
 8003170:	4b67      	ldr	r3, [pc, #412]	; (8003310 <HAL_ADC_ConvHalfCpltCallback+0x244>)
 8003172:	881b      	ldrh	r3, [r3, #0]
 8003174:	b21b      	sxth	r3, r3
 8003176:	fb02 f303 	mul.w	r3, r2, r3
 800317a:	4a67      	ldr	r2, [pc, #412]	; (8003318 <HAL_ADC_ConvHalfCpltCallback+0x24c>)
 800317c:	fb82 0203 	smull	r0, r2, r2, r3
 8003180:	441a      	add	r2, r3
 8003182:	12d2      	asrs	r2, r2, #11
 8003184:	17db      	asrs	r3, r3, #31
 8003186:	1ad2      	subs	r2, r2, r3
 8003188:	4613      	mov	r3, r2
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	4413      	add	r3, r2
 800318e:	011a      	lsls	r2, r3, #4
 8003190:	4413      	add	r3, r2
 8003192:	4a62      	ldr	r2, [pc, #392]	; (800331c <HAL_ADC_ConvHalfCpltCallback+0x250>)
 8003194:	fb82 0203 	smull	r0, r2, r2, r3
 8003198:	1152      	asrs	r2, r2, #5
 800319a:	17db      	asrs	r3, r3, #31
 800319c:	1a9b      	subs	r3, r3, r2
 800319e:	440b      	add	r3, r1
 80031a0:	2232      	movs	r2, #50	; 0x32
 80031a2:	fb02 f303 	mul.w	r3, r2, r3
 80031a6:	4a5e      	ldr	r2, [pc, #376]	; (8003320 <HAL_ADC_ConvHalfCpltCallback+0x254>)
 80031a8:	6053      	str	r3, [r2, #4]
			data.Current_M3 = -(int32_t)(((((int32_t)adc_result_DMA[0]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[2])*50;
 80031aa:	4b5a      	ldr	r3, [pc, #360]	; (8003314 <HAL_ADC_ConvHalfCpltCallback+0x248>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	4619      	mov	r1, r3
 80031b0:	4b56      	ldr	r3, [pc, #344]	; (800330c <HAL_ADC_ConvHalfCpltCallback+0x240>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	da00      	bge.n	80031ba <HAL_ADC_ConvHalfCpltCallback+0xee>
 80031b8:	330f      	adds	r3, #15
 80031ba:	111b      	asrs	r3, r3, #4
 80031bc:	461a      	mov	r2, r3
 80031be:	4b54      	ldr	r3, [pc, #336]	; (8003310 <HAL_ADC_ConvHalfCpltCallback+0x244>)
 80031c0:	881b      	ldrh	r3, [r3, #0]
 80031c2:	b21b      	sxth	r3, r3
 80031c4:	fb02 f303 	mul.w	r3, r2, r3
 80031c8:	4a53      	ldr	r2, [pc, #332]	; (8003318 <HAL_ADC_ConvHalfCpltCallback+0x24c>)
 80031ca:	fb82 0203 	smull	r0, r2, r2, r3
 80031ce:	441a      	add	r2, r3
 80031d0:	12d2      	asrs	r2, r2, #11
 80031d2:	17db      	asrs	r3, r3, #31
 80031d4:	1ad2      	subs	r2, r2, r3
 80031d6:	4613      	mov	r3, r2
 80031d8:	00db      	lsls	r3, r3, #3
 80031da:	4413      	add	r3, r2
 80031dc:	011a      	lsls	r2, r3, #4
 80031de:	4413      	add	r3, r2
 80031e0:	4a4e      	ldr	r2, [pc, #312]	; (800331c <HAL_ADC_ConvHalfCpltCallback+0x250>)
 80031e2:	fb82 0203 	smull	r0, r2, r2, r3
 80031e6:	1152      	asrs	r2, r2, #5
 80031e8:	17db      	asrs	r3, r3, #31
 80031ea:	1a9b      	subs	r3, r3, r2
 80031ec:	440b      	add	r3, r1
 80031ee:	2232      	movs	r2, #50	; 0x32
 80031f0:	fb02 f303 	mul.w	r3, r2, r3
 80031f4:	4a4a      	ldr	r2, [pc, #296]	; (8003320 <HAL_ADC_ConvHalfCpltCallback+0x254>)
 80031f6:	6093      	str	r3, [r2, #8]
			data.Current_DC = sqrt(data.Current_M1*data.Current_M1 + data.Current_M2*data.Current_M2 + data.Current_M3*data.Current_M3);//(int32_t)((abs((int)data.Current_M1)+abs((int)data.Current_M2)+abs((int)data.Current_M3))/2);
 80031f8:	4b49      	ldr	r3, [pc, #292]	; (8003320 <HAL_ADC_ConvHalfCpltCallback+0x254>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a48      	ldr	r2, [pc, #288]	; (8003320 <HAL_ADC_ConvHalfCpltCallback+0x254>)
 80031fe:	6812      	ldr	r2, [r2, #0]
 8003200:	fb03 f202 	mul.w	r2, r3, r2
 8003204:	4b46      	ldr	r3, [pc, #280]	; (8003320 <HAL_ADC_ConvHalfCpltCallback+0x254>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	4945      	ldr	r1, [pc, #276]	; (8003320 <HAL_ADC_ConvHalfCpltCallback+0x254>)
 800320a:	6849      	ldr	r1, [r1, #4]
 800320c:	fb01 f303 	mul.w	r3, r1, r3
 8003210:	441a      	add	r2, r3
 8003212:	4b43      	ldr	r3, [pc, #268]	; (8003320 <HAL_ADC_ConvHalfCpltCallback+0x254>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	4942      	ldr	r1, [pc, #264]	; (8003320 <HAL_ADC_ConvHalfCpltCallback+0x254>)
 8003218:	6889      	ldr	r1, [r1, #8]
 800321a:	fb01 f303 	mul.w	r3, r1, r3
 800321e:	4413      	add	r3, r2
 8003220:	4618      	mov	r0, r3
 8003222:	f7fd f9a7 	bl	8000574 <__aeabi_i2d>
 8003226:	4602      	mov	r2, r0
 8003228:	460b      	mov	r3, r1
 800322a:	ec43 2b10 	vmov	d0, r2, r3
 800322e:	f00c fdf3 	bl	800fe18 <sqrt>
 8003232:	ec53 2b10 	vmov	r2, r3, d0
 8003236:	4610      	mov	r0, r2
 8003238:	4619      	mov	r1, r3
 800323a:	f7fd fcb5 	bl	8000ba8 <__aeabi_d2iz>
 800323e:	4603      	mov	r3, r0
 8003240:	4a37      	ldr	r2, [pc, #220]	; (8003320 <HAL_ADC_ConvHalfCpltCallback+0x254>)
 8003242:	60d3      	str	r3, [r2, #12]
			Curent_IRQ_callback(&data);
 8003244:	4b37      	ldr	r3, [pc, #220]	; (8003324 <HAL_ADC_ConvHalfCpltCallback+0x258>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4835      	ldr	r0, [pc, #212]	; (8003320 <HAL_ADC_ConvHalfCpltCallback+0x254>)
 800324a:	4798      	blx	r3
		}
	}
	if (hadc == &hadc2){
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a36      	ldr	r2, [pc, #216]	; (8003328 <HAL_ADC_ConvHalfCpltCallback+0x25c>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d151      	bne.n	80032f8 <HAL_ADC_ConvHalfCpltCallback+0x22c>
		VT_data.Temp_NTC1 = (VT_adc_result_DMA[0]/number_of_VT_oversample*VDDA)/ADC_RES;
 8003254:	4b35      	ldr	r3, [pc, #212]	; (800332c <HAL_ADC_ConvHalfCpltCallback+0x260>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	091b      	lsrs	r3, r3, #4
 800325a:	4a2d      	ldr	r2, [pc, #180]	; (8003310 <HAL_ADC_ConvHalfCpltCallback+0x244>)
 800325c:	8812      	ldrh	r2, [r2, #0]
 800325e:	b212      	sxth	r2, r2
 8003260:	fb03 f202 	mul.w	r2, r3, r2
 8003264:	4b32      	ldr	r3, [pc, #200]	; (8003330 <HAL_ADC_ConvHalfCpltCallback+0x264>)
 8003266:	fba3 1302 	umull	r1, r3, r3, r2
 800326a:	1ad2      	subs	r2, r2, r3
 800326c:	0852      	lsrs	r2, r2, #1
 800326e:	4413      	add	r3, r2
 8003270:	0adb      	lsrs	r3, r3, #11
 8003272:	b25a      	sxtb	r2, r3
 8003274:	4b2f      	ldr	r3, [pc, #188]	; (8003334 <HAL_ADC_ConvHalfCpltCallback+0x268>)
 8003276:	719a      	strb	r2, [r3, #6]
		VT_data.Temp_NTC2 = (VT_adc_result_DMA[1]/number_of_VT_oversample*VDDA)/ADC_RES;
 8003278:	4b2c      	ldr	r3, [pc, #176]	; (800332c <HAL_ADC_ConvHalfCpltCallback+0x260>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	091b      	lsrs	r3, r3, #4
 800327e:	4a24      	ldr	r2, [pc, #144]	; (8003310 <HAL_ADC_ConvHalfCpltCallback+0x244>)
 8003280:	8812      	ldrh	r2, [r2, #0]
 8003282:	b212      	sxth	r2, r2
 8003284:	fb03 f202 	mul.w	r2, r3, r2
 8003288:	4b29      	ldr	r3, [pc, #164]	; (8003330 <HAL_ADC_ConvHalfCpltCallback+0x264>)
 800328a:	fba3 1302 	umull	r1, r3, r3, r2
 800328e:	1ad2      	subs	r2, r2, r3
 8003290:	0852      	lsrs	r2, r2, #1
 8003292:	4413      	add	r3, r2
 8003294:	0adb      	lsrs	r3, r3, #11
 8003296:	b25a      	sxtb	r2, r3
 8003298:	4b26      	ldr	r3, [pc, #152]	; (8003334 <HAL_ADC_ConvHalfCpltCallback+0x268>)
 800329a:	71da      	strb	r2, [r3, #7]
		VT_data.V_Bat = (VT_adc_result_DMA[2]/number_of_VT_oversample*VDDA*34)/ADC_RES;
 800329c:	4b23      	ldr	r3, [pc, #140]	; (800332c <HAL_ADC_ConvHalfCpltCallback+0x260>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	091b      	lsrs	r3, r3, #4
 80032a2:	4a1b      	ldr	r2, [pc, #108]	; (8003310 <HAL_ADC_ConvHalfCpltCallback+0x244>)
 80032a4:	8812      	ldrh	r2, [r2, #0]
 80032a6:	b212      	sxth	r2, r2
 80032a8:	fb03 f202 	mul.w	r2, r3, r2
 80032ac:	4613      	mov	r3, r2
 80032ae:	011b      	lsls	r3, r3, #4
 80032b0:	4413      	add	r3, r2
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	461a      	mov	r2, r3
 80032b6:	4b1e      	ldr	r3, [pc, #120]	; (8003330 <HAL_ADC_ConvHalfCpltCallback+0x264>)
 80032b8:	fba3 1302 	umull	r1, r3, r3, r2
 80032bc:	1ad2      	subs	r2, r2, r3
 80032be:	0852      	lsrs	r2, r2, #1
 80032c0:	4413      	add	r3, r2
 80032c2:	0adb      	lsrs	r3, r3, #11
 80032c4:	4a1b      	ldr	r2, [pc, #108]	; (8003334 <HAL_ADC_ConvHalfCpltCallback+0x268>)
 80032c6:	6013      	str	r3, [r2, #0]
		VT_data.V_aux = (VT_adc_result_DMA[3]/number_of_VT_oversample*VDDA*57)/ADC_RES/10;
 80032c8:	4b18      	ldr	r3, [pc, #96]	; (800332c <HAL_ADC_ConvHalfCpltCallback+0x260>)
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	091b      	lsrs	r3, r3, #4
 80032ce:	4a10      	ldr	r2, [pc, #64]	; (8003310 <HAL_ADC_ConvHalfCpltCallback+0x244>)
 80032d0:	8812      	ldrh	r2, [r2, #0]
 80032d2:	b212      	sxth	r2, r2
 80032d4:	fb03 f202 	mul.w	r2, r3, r2
 80032d8:	4613      	mov	r3, r2
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	1a9b      	subs	r3, r3, r2
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	4413      	add	r3, r2
 80032e2:	4a15      	ldr	r2, [pc, #84]	; (8003338 <HAL_ADC_ConvHalfCpltCallback+0x26c>)
 80032e4:	fba2 2303 	umull	r2, r3, r2, r3
 80032e8:	0bdb      	lsrs	r3, r3, #15
 80032ea:	b29a      	uxth	r2, r3
 80032ec:	4b11      	ldr	r3, [pc, #68]	; (8003334 <HAL_ADC_ConvHalfCpltCallback+0x268>)
 80032ee:	809a      	strh	r2, [r3, #4]
		VT_IRQ_callback(&VT_data);
 80032f0:	4b12      	ldr	r3, [pc, #72]	; (800333c <HAL_ADC_ConvHalfCpltCallback+0x270>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	480f      	ldr	r0, [pc, #60]	; (8003334 <HAL_ADC_ConvHalfCpltCallback+0x268>)
 80032f6:	4798      	blx	r3
	}
}
 80032f8:	bf00      	nop
 80032fa:	3708      	adds	r7, #8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	200011a8 	.word	0x200011a8
 8003304:	20001144 	.word	0x20001144
 8003308:	20000008 	.word	0x20000008
 800330c:	200010d4 	.word	0x200010d4
 8003310:	20001120 	.word	0x20001120
 8003314:	20001114 	.word	0x20001114
 8003318:	80080081 	.word	0x80080081
 800331c:	51eb851f 	.word	0x51eb851f
 8003320:	20001128 	.word	0x20001128
 8003324:	20001124 	.word	0x20001124
 8003328:	20001214 	.word	0x20001214
 800332c:	200010f4 	.word	0x200010f4
 8003330:	00100101 	.word	0x00100101
 8003334:	2000113c 	.word	0x2000113c
 8003338:	ccd99a67 	.word	0xccd99a67
 800333c:	20001138 	.word	0x20001138

08003340 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1 && !calibrating){
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a76      	ldr	r2, [pc, #472]	; (8003524 <HAL_ADC_ConvCpltCallback+0x1e4>)
 800334c:	4293      	cmp	r3, r2
 800334e:	f040 808f 	bne.w	8003470 <HAL_ADC_ConvCpltCallback+0x130>
 8003352:	4b75      	ldr	r3, [pc, #468]	; (8003528 <HAL_ADC_ConvCpltCallback+0x1e8>)
 8003354:	881b      	ldrh	r3, [r3, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	f040 808a 	bne.w	8003470 <HAL_ADC_ConvCpltCallback+0x130>
		VDDA = (int16_t)3000*(*vrefint)/(adc_result_DMA[7]/number_of_oversample);
 800335c:	4b73      	ldr	r3, [pc, #460]	; (800352c <HAL_ADC_ConvCpltCallback+0x1ec>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	881b      	ldrh	r3, [r3, #0]
 8003362:	461a      	mov	r2, r3
 8003364:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003368:	fb02 f303 	mul.w	r3, r2, r3
 800336c:	461a      	mov	r2, r3
 800336e:	4b70      	ldr	r3, [pc, #448]	; (8003530 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	091b      	lsrs	r3, r3, #4
 8003374:	fbb2 f3f3 	udiv	r3, r2, r3
 8003378:	b21a      	sxth	r2, r3
 800337a:	4b6e      	ldr	r3, [pc, #440]	; (8003534 <HAL_ADC_ConvCpltCallback+0x1f4>)
 800337c:	801a      	strh	r2, [r3, #0]
		data.Current_M1 = -(int32_t)(((((int32_t)adc_result_DMA[6]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[0])*50;
 800337e:	4b6e      	ldr	r3, [pc, #440]	; (8003538 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4619      	mov	r1, r3
 8003384:	4b6a      	ldr	r3, [pc, #424]	; (8003530 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	2b00      	cmp	r3, #0
 800338a:	da00      	bge.n	800338e <HAL_ADC_ConvCpltCallback+0x4e>
 800338c:	330f      	adds	r3, #15
 800338e:	111b      	asrs	r3, r3, #4
 8003390:	461a      	mov	r2, r3
 8003392:	4b68      	ldr	r3, [pc, #416]	; (8003534 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8003394:	881b      	ldrh	r3, [r3, #0]
 8003396:	b21b      	sxth	r3, r3
 8003398:	fb02 f303 	mul.w	r3, r2, r3
 800339c:	4a67      	ldr	r2, [pc, #412]	; (800353c <HAL_ADC_ConvCpltCallback+0x1fc>)
 800339e:	fb82 0203 	smull	r0, r2, r2, r3
 80033a2:	441a      	add	r2, r3
 80033a4:	12d2      	asrs	r2, r2, #11
 80033a6:	17db      	asrs	r3, r3, #31
 80033a8:	1ad2      	subs	r2, r2, r3
 80033aa:	4613      	mov	r3, r2
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	4413      	add	r3, r2
 80033b0:	011a      	lsls	r2, r3, #4
 80033b2:	4413      	add	r3, r2
 80033b4:	4a62      	ldr	r2, [pc, #392]	; (8003540 <HAL_ADC_ConvCpltCallback+0x200>)
 80033b6:	fb82 0203 	smull	r0, r2, r2, r3
 80033ba:	1152      	asrs	r2, r2, #5
 80033bc:	17db      	asrs	r3, r3, #31
 80033be:	1a9b      	subs	r3, r3, r2
 80033c0:	440b      	add	r3, r1
 80033c2:	2232      	movs	r2, #50	; 0x32
 80033c4:	fb02 f303 	mul.w	r3, r2, r3
 80033c8:	4a5e      	ldr	r2, [pc, #376]	; (8003544 <HAL_ADC_ConvCpltCallback+0x204>)
 80033ca:	6013      	str	r3, [r2, #0]
		data.Current_M2 = -(int32_t)(((((int32_t)adc_result_DMA[5]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[1])*50;
 80033cc:	4b5a      	ldr	r3, [pc, #360]	; (8003538 <HAL_ADC_ConvCpltCallback+0x1f8>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	4619      	mov	r1, r3
 80033d2:	4b57      	ldr	r3, [pc, #348]	; (8003530 <HAL_ADC_ConvCpltCallback+0x1f0>)
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	da00      	bge.n	80033dc <HAL_ADC_ConvCpltCallback+0x9c>
 80033da:	330f      	adds	r3, #15
 80033dc:	111b      	asrs	r3, r3, #4
 80033de:	461a      	mov	r2, r3
 80033e0:	4b54      	ldr	r3, [pc, #336]	; (8003534 <HAL_ADC_ConvCpltCallback+0x1f4>)
 80033e2:	881b      	ldrh	r3, [r3, #0]
 80033e4:	b21b      	sxth	r3, r3
 80033e6:	fb02 f303 	mul.w	r3, r2, r3
 80033ea:	4a54      	ldr	r2, [pc, #336]	; (800353c <HAL_ADC_ConvCpltCallback+0x1fc>)
 80033ec:	fb82 0203 	smull	r0, r2, r2, r3
 80033f0:	441a      	add	r2, r3
 80033f2:	12d2      	asrs	r2, r2, #11
 80033f4:	17db      	asrs	r3, r3, #31
 80033f6:	1ad2      	subs	r2, r2, r3
 80033f8:	4613      	mov	r3, r2
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	4413      	add	r3, r2
 80033fe:	011a      	lsls	r2, r3, #4
 8003400:	4413      	add	r3, r2
 8003402:	4a4f      	ldr	r2, [pc, #316]	; (8003540 <HAL_ADC_ConvCpltCallback+0x200>)
 8003404:	fb82 0203 	smull	r0, r2, r2, r3
 8003408:	1152      	asrs	r2, r2, #5
 800340a:	17db      	asrs	r3, r3, #31
 800340c:	1a9b      	subs	r3, r3, r2
 800340e:	440b      	add	r3, r1
 8003410:	2232      	movs	r2, #50	; 0x32
 8003412:	fb02 f303 	mul.w	r3, r2, r3
 8003416:	4a4b      	ldr	r2, [pc, #300]	; (8003544 <HAL_ADC_ConvCpltCallback+0x204>)
 8003418:	6053      	str	r3, [r2, #4]
		data.Current_M3 = -(int32_t)(((((int32_t)adc_result_DMA[4]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[2])*50;
 800341a:	4b47      	ldr	r3, [pc, #284]	; (8003538 <HAL_ADC_ConvCpltCallback+0x1f8>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	4619      	mov	r1, r3
 8003420:	4b43      	ldr	r3, [pc, #268]	; (8003530 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	2b00      	cmp	r3, #0
 8003426:	da00      	bge.n	800342a <HAL_ADC_ConvCpltCallback+0xea>
 8003428:	330f      	adds	r3, #15
 800342a:	111b      	asrs	r3, r3, #4
 800342c:	461a      	mov	r2, r3
 800342e:	4b41      	ldr	r3, [pc, #260]	; (8003534 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8003430:	881b      	ldrh	r3, [r3, #0]
 8003432:	b21b      	sxth	r3, r3
 8003434:	fb02 f303 	mul.w	r3, r2, r3
 8003438:	4a40      	ldr	r2, [pc, #256]	; (800353c <HAL_ADC_ConvCpltCallback+0x1fc>)
 800343a:	fb82 0203 	smull	r0, r2, r2, r3
 800343e:	441a      	add	r2, r3
 8003440:	12d2      	asrs	r2, r2, #11
 8003442:	17db      	asrs	r3, r3, #31
 8003444:	1ad2      	subs	r2, r2, r3
 8003446:	4613      	mov	r3, r2
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	4413      	add	r3, r2
 800344c:	011a      	lsls	r2, r3, #4
 800344e:	4413      	add	r3, r2
 8003450:	4a3b      	ldr	r2, [pc, #236]	; (8003540 <HAL_ADC_ConvCpltCallback+0x200>)
 8003452:	fb82 0203 	smull	r0, r2, r2, r3
 8003456:	1152      	asrs	r2, r2, #5
 8003458:	17db      	asrs	r3, r3, #31
 800345a:	1a9b      	subs	r3, r3, r2
 800345c:	440b      	add	r3, r1
 800345e:	2232      	movs	r2, #50	; 0x32
 8003460:	fb02 f303 	mul.w	r3, r2, r3
 8003464:	4a37      	ldr	r2, [pc, #220]	; (8003544 <HAL_ADC_ConvCpltCallback+0x204>)
 8003466:	6093      	str	r3, [r2, #8]
//		data.Current_DC = ((abs((int)data.Current_M1)+abs((int)data.Current_M2)+abs((int)data.Current_M3))/2);
		Curent_IRQ_callback(&data);
 8003468:	4b37      	ldr	r3, [pc, #220]	; (8003548 <HAL_ADC_ConvCpltCallback+0x208>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4835      	ldr	r0, [pc, #212]	; (8003544 <HAL_ADC_ConvCpltCallback+0x204>)
 800346e:	4798      	blx	r3
	}
	if (hadc == &hadc2){
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a36      	ldr	r2, [pc, #216]	; (800354c <HAL_ADC_ConvCpltCallback+0x20c>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d151      	bne.n	800351c <HAL_ADC_ConvCpltCallback+0x1dc>
		VT_data.Temp_NTC1 = (VT_adc_result_DMA[4]/number_of_VT_oversample*VDDA)/ADC_RES;
 8003478:	4b35      	ldr	r3, [pc, #212]	; (8003550 <HAL_ADC_ConvCpltCallback+0x210>)
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	091b      	lsrs	r3, r3, #4
 800347e:	4a2d      	ldr	r2, [pc, #180]	; (8003534 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8003480:	8812      	ldrh	r2, [r2, #0]
 8003482:	b212      	sxth	r2, r2
 8003484:	fb03 f202 	mul.w	r2, r3, r2
 8003488:	4b32      	ldr	r3, [pc, #200]	; (8003554 <HAL_ADC_ConvCpltCallback+0x214>)
 800348a:	fba3 1302 	umull	r1, r3, r3, r2
 800348e:	1ad2      	subs	r2, r2, r3
 8003490:	0852      	lsrs	r2, r2, #1
 8003492:	4413      	add	r3, r2
 8003494:	0adb      	lsrs	r3, r3, #11
 8003496:	b25a      	sxtb	r2, r3
 8003498:	4b2f      	ldr	r3, [pc, #188]	; (8003558 <HAL_ADC_ConvCpltCallback+0x218>)
 800349a:	719a      	strb	r2, [r3, #6]
		VT_data.Temp_NTC2 = (VT_adc_result_DMA[5]/number_of_VT_oversample*VDDA)/ADC_RES;
 800349c:	4b2c      	ldr	r3, [pc, #176]	; (8003550 <HAL_ADC_ConvCpltCallback+0x210>)
 800349e:	695b      	ldr	r3, [r3, #20]
 80034a0:	091b      	lsrs	r3, r3, #4
 80034a2:	4a24      	ldr	r2, [pc, #144]	; (8003534 <HAL_ADC_ConvCpltCallback+0x1f4>)
 80034a4:	8812      	ldrh	r2, [r2, #0]
 80034a6:	b212      	sxth	r2, r2
 80034a8:	fb03 f202 	mul.w	r2, r3, r2
 80034ac:	4b29      	ldr	r3, [pc, #164]	; (8003554 <HAL_ADC_ConvCpltCallback+0x214>)
 80034ae:	fba3 1302 	umull	r1, r3, r3, r2
 80034b2:	1ad2      	subs	r2, r2, r3
 80034b4:	0852      	lsrs	r2, r2, #1
 80034b6:	4413      	add	r3, r2
 80034b8:	0adb      	lsrs	r3, r3, #11
 80034ba:	b25a      	sxtb	r2, r3
 80034bc:	4b26      	ldr	r3, [pc, #152]	; (8003558 <HAL_ADC_ConvCpltCallback+0x218>)
 80034be:	71da      	strb	r2, [r3, #7]
		VT_data.V_Bat = (VT_adc_result_DMA[6]/number_of_VT_oversample*VDDA*34)/ADC_RES;
 80034c0:	4b23      	ldr	r3, [pc, #140]	; (8003550 <HAL_ADC_ConvCpltCallback+0x210>)
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	091b      	lsrs	r3, r3, #4
 80034c6:	4a1b      	ldr	r2, [pc, #108]	; (8003534 <HAL_ADC_ConvCpltCallback+0x1f4>)
 80034c8:	8812      	ldrh	r2, [r2, #0]
 80034ca:	b212      	sxth	r2, r2
 80034cc:	fb03 f202 	mul.w	r2, r3, r2
 80034d0:	4613      	mov	r3, r2
 80034d2:	011b      	lsls	r3, r3, #4
 80034d4:	4413      	add	r3, r2
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	461a      	mov	r2, r3
 80034da:	4b1e      	ldr	r3, [pc, #120]	; (8003554 <HAL_ADC_ConvCpltCallback+0x214>)
 80034dc:	fba3 1302 	umull	r1, r3, r3, r2
 80034e0:	1ad2      	subs	r2, r2, r3
 80034e2:	0852      	lsrs	r2, r2, #1
 80034e4:	4413      	add	r3, r2
 80034e6:	0adb      	lsrs	r3, r3, #11
 80034e8:	4a1b      	ldr	r2, [pc, #108]	; (8003558 <HAL_ADC_ConvCpltCallback+0x218>)
 80034ea:	6013      	str	r3, [r2, #0]
		VT_data.V_aux = (VT_adc_result_DMA[7]/number_of_VT_oversample*VDDA*57)/ADC_RES/10;
 80034ec:	4b18      	ldr	r3, [pc, #96]	; (8003550 <HAL_ADC_ConvCpltCallback+0x210>)
 80034ee:	69db      	ldr	r3, [r3, #28]
 80034f0:	091b      	lsrs	r3, r3, #4
 80034f2:	4a10      	ldr	r2, [pc, #64]	; (8003534 <HAL_ADC_ConvCpltCallback+0x1f4>)
 80034f4:	8812      	ldrh	r2, [r2, #0]
 80034f6:	b212      	sxth	r2, r2
 80034f8:	fb03 f202 	mul.w	r2, r3, r2
 80034fc:	4613      	mov	r3, r2
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	1a9b      	subs	r3, r3, r2
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	4413      	add	r3, r2
 8003506:	4a15      	ldr	r2, [pc, #84]	; (800355c <HAL_ADC_ConvCpltCallback+0x21c>)
 8003508:	fba2 2303 	umull	r2, r3, r2, r3
 800350c:	0bdb      	lsrs	r3, r3, #15
 800350e:	b29a      	uxth	r2, r3
 8003510:	4b11      	ldr	r3, [pc, #68]	; (8003558 <HAL_ADC_ConvCpltCallback+0x218>)
 8003512:	809a      	strh	r2, [r3, #4]
		VT_IRQ_callback(&VT_data);
 8003514:	4b12      	ldr	r3, [pc, #72]	; (8003560 <HAL_ADC_ConvCpltCallback+0x220>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	480f      	ldr	r0, [pc, #60]	; (8003558 <HAL_ADC_ConvCpltCallback+0x218>)
 800351a:	4798      	blx	r3
	}
}
 800351c:	bf00      	nop
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	200011a8 	.word	0x200011a8
 8003528:	20001144 	.word	0x20001144
 800352c:	20000008 	.word	0x20000008
 8003530:	200010d4 	.word	0x200010d4
 8003534:	20001120 	.word	0x20001120
 8003538:	20001114 	.word	0x20001114
 800353c:	80080081 	.word	0x80080081
 8003540:	51eb851f 	.word	0x51eb851f
 8003544:	20001128 	.word	0x20001128
 8003548:	20001124 	.word	0x20001124
 800354c:	20001214 	.word	0x20001214
 8003550:	200010f4 	.word	0x200010f4
 8003554:	00100101 	.word	0x00100101
 8003558:	2000113c 	.word	0x2000113c
 800355c:	ccd99a67 	.word	0xccd99a67
 8003560:	20001138 	.word	0x20001138

08003564 <dq0>:
//sin(θ◦) ≈ 4θ(180 − θ) 40500 − θ(180 − θ);
//float _sin(float deg){
//	return (4*deg*(180-deg)/(40500 - deg*(180-deg)));
//}

void dq0(float theta, float a, float b, float c, float *d, float *q){
 8003564:	b580      	push	{r7, lr}
 8003566:	b088      	sub	sp, #32
 8003568:	af00      	add	r7, sp, #0
 800356a:	ed87 0a05 	vstr	s0, [r7, #20]
 800356e:	edc7 0a04 	vstr	s1, [r7, #16]
 8003572:	ed87 1a03 	vstr	s2, [r7, #12]
 8003576:	edc7 1a02 	vstr	s3, [r7, #8]
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
    /// DQ0 Transform ///
    ///Phase current amplitude = lengh of dq vector///
    ///i.e. iq = 1, id = 0, peak phase current of 1///

    float cf = cos(theta);
 800357e:	6978      	ldr	r0, [r7, #20]
 8003580:	f7fd f80a 	bl	8000598 <__aeabi_f2d>
 8003584:	4602      	mov	r2, r0
 8003586:	460b      	mov	r3, r1
 8003588:	ec43 2b10 	vmov	d0, r2, r3
 800358c:	f00c fc70 	bl	800fe70 <cos>
 8003590:	ec53 2b10 	vmov	r2, r3, d0
 8003594:	4610      	mov	r0, r2
 8003596:	4619      	mov	r1, r3
 8003598:	f7fd fb2e 	bl	8000bf8 <__aeabi_d2f>
 800359c:	4603      	mov	r3, r0
 800359e:	61fb      	str	r3, [r7, #28]
    float sf = sin(theta);
 80035a0:	6978      	ldr	r0, [r7, #20]
 80035a2:	f7fc fff9 	bl	8000598 <__aeabi_f2d>
 80035a6:	4602      	mov	r2, r0
 80035a8:	460b      	mov	r3, r1
 80035aa:	ec43 2b10 	vmov	d0, r2, r3
 80035ae:	f00c fcb3 	bl	800ff18 <sin>
 80035b2:	ec53 2b10 	vmov	r2, r3, d0
 80035b6:	4610      	mov	r0, r2
 80035b8:	4619      	mov	r1, r3
 80035ba:	f7fd fb1d 	bl	8000bf8 <__aeabi_d2f>
 80035be:	4603      	mov	r3, r0
 80035c0:	61bb      	str	r3, [r7, #24]

    *d = 0.6666667f*(cf*a + (0.86602540378f*sf-.5f*cf)*b + (-0.86602540378f*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 80035c2:	ed97 7a07 	vldr	s14, [r7, #28]
 80035c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80035ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035ce:	edd7 7a06 	vldr	s15, [r7, #24]
 80035d2:	eddf 6a34 	vldr	s13, [pc, #208]	; 80036a4 <dq0+0x140>
 80035d6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80035da:	edd7 7a07 	vldr	s15, [r7, #28]
 80035de:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80035e2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80035e6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80035ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80035ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80035fa:	eddf 6a2b 	vldr	s13, [pc, #172]	; 80036a8 <dq0+0x144>
 80035fe:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003602:	edd7 7a07 	vldr	s15, [r7, #28]
 8003606:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800360a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800360e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003612:	edd7 7a02 	vldr	s15, [r7, #8]
 8003616:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800361a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800361e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80036ac <dq0+0x148>
 8003622:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	edc3 7a00 	vstr	s15, [r3]
    *q = 0.6666667f*(-sf*a - (-0.86602540378f*cf-.5f*sf)*b - (0.86602540378f*cf-.5f*sf)*c);
 800362c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003630:	eeb1 7a67 	vneg.f32	s14, s15
 8003634:	edd7 7a04 	vldr	s15, [r7, #16]
 8003638:	ee27 7a27 	vmul.f32	s14, s14, s15
 800363c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003640:	eddf 6a19 	vldr	s13, [pc, #100]	; 80036a8 <dq0+0x144>
 8003644:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003648:	edd7 7a06 	vldr	s15, [r7, #24]
 800364c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8003650:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003654:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003658:	edd7 7a03 	vldr	s15, [r7, #12]
 800365c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003660:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003664:	edd7 7a07 	vldr	s15, [r7, #28]
 8003668:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80036a4 <dq0+0x140>
 800366c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003670:	edd7 7a06 	vldr	s15, [r7, #24]
 8003674:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8003678:	ee67 7a86 	vmul.f32	s15, s15, s12
 800367c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003680:	edd7 7a02 	vldr	s15, [r7, #8]
 8003684:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003688:	ee77 7a67 	vsub.f32	s15, s14, s15
 800368c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80036ac <dq0+0x148>
 8003690:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	edc3 7a00 	vstr	s15, [r3]

    }
 800369a:	bf00      	nop
 800369c:	3720      	adds	r7, #32
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	3f5db3d7 	.word	0x3f5db3d7
 80036a8:	bf5db3d7 	.word	0xbf5db3d7
 80036ac:	3f2aaaab 	.word	0x3f2aaaab

080036b0 <FDCAN_Start>:
/*****************************************************************************/
/** Public API                                                              **/
/*****************************************************************************/

STATUS FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  /* Start the FDCAN bus */
  if (HAL_FDCAN_Start(hfdcan) != HAL_OK)
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f004 f8f5 	bl	80078a8 <HAL_FDCAN_Start>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <FDCAN_Start+0x18>
  {
    return FDCAN_STATUS_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e00a      	b.n	80036de <FDCAN_Start+0x2e>
  }

  /* Activate the FIFO interrupt for respective fdcan controller */
  if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80036c8:	2200      	movs	r2, #0
 80036ca:	2101      	movs	r1, #1
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f004 f9ed 	bl	8007aac <HAL_FDCAN_ActivateNotification>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <FDCAN_Start+0x2c>
  {
    return FDCAN_STATUS_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e000      	b.n	80036de <FDCAN_Start+0x2e>
  }

  return FDCAN_STATUS_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
	...

080036e8 <FDCAN_addCallback>:

STATUS FDCAN_addCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t identifier, FDCANCallback *processData)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b089      	sub	sp, #36	; 0x24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
  /* Check if we have space to add a new Callback */
  if (FDCAN_listCallbacksCount >= FDCAN_MAX_CALLBACKS) {
 80036f4:	4b18      	ldr	r3, [pc, #96]	; (8003758 <FDCAN_addCallback+0x70>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2b09      	cmp	r3, #9
 80036fa:	d901      	bls.n	8003700 <FDCAN_addCallback+0x18>
      return FDCAN_STATUS_MAX_LIMIT_REACHED;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e025      	b.n	800374c <FDCAN_addCallback+0x64>
  }

  /* Check if identifier already exists */
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 8003700:	2300      	movs	r3, #0
 8003702:	61fb      	str	r3, [r7, #28]
 8003704:	e00c      	b.n	8003720 <FDCAN_addCallback+0x38>
      if (FDCAN_listCallbacks[i].identifier == identifier) {
 8003706:	4a15      	ldr	r2, [pc, #84]	; (800375c <FDCAN_addCallback+0x74>)
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	4413      	add	r3, r2
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	429a      	cmp	r2, r3
 8003714:	d101      	bne.n	800371a <FDCAN_addCallback+0x32>
          return FDCAN_STATUS_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e018      	b.n	800374c <FDCAN_addCallback+0x64>
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	3301      	adds	r3, #1
 800371e:	61fb      	str	r3, [r7, #28]
 8003720:	4b0d      	ldr	r3, [pc, #52]	; (8003758 <FDCAN_addCallback+0x70>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	69fa      	ldr	r2, [r7, #28]
 8003726:	429a      	cmp	r2, r3
 8003728:	d3ed      	bcc.n	8003706 <FDCAN_addCallback+0x1e>
      }
  }

  /* Add the callback to the list and update the count */
  FDCAN_listCallbacks[FDCAN_listCallbacksCount] = (FDCANCallback_internal_t) {
 800372a:	4b0b      	ldr	r3, [pc, #44]	; (8003758 <FDCAN_addCallback+0x70>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	490a      	ldr	r1, [pc, #40]	; (800375c <FDCAN_addCallback+0x74>)
 8003732:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8003736:	4a09      	ldr	r2, [pc, #36]	; (800375c <FDCAN_addCallback+0x74>)
 8003738:	00db      	lsls	r3, r3, #3
 800373a:	4413      	add	r3, r2
 800373c:	68ba      	ldr	r2, [r7, #8]
 800373e:	605a      	str	r2, [r3, #4]
      .fp = processData,
      .identifier = identifier
  };
  FDCAN_listCallbacksCount++;
 8003740:	4b05      	ldr	r3, [pc, #20]	; (8003758 <FDCAN_addCallback+0x70>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	3301      	adds	r3, #1
 8003746:	4a04      	ldr	r2, [pc, #16]	; (8003758 <FDCAN_addCallback+0x70>)
 8003748:	6013      	str	r3, [r2, #0]

  return FDCAN_STATUS_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3724      	adds	r7, #36	; 0x24
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr
 8003758:	200011a4 	.word	0x200011a4
 800375c:	20001154 	.word	0x20001154

08003760 <HAL_FDCAN_RxFifo0Callback>:
/** Local function definitions                                              **/
/*****************************************************************************/

/* This function overwrites _weak function definition in STM32 HAL FDCAN driver when linking project*/
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b09e      	sub	sp, #120	; 0x78
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  FDCAN_RxHeaderTypeDef RxHeader;
  uint8_t RxData[64];

  /* Fetch the CAN message from the FIFO buffer*/
  if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 800376a:	f107 030c 	add.w	r3, r7, #12
 800376e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8003772:	2140      	movs	r1, #64	; 0x40
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f004 f8bf 	bl	80078f8 <HAL_FDCAN_GetRxMessage>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d001      	beq.n	8003784 <HAL_FDCAN_RxFifo0Callback+0x24>
  {
    Error_Handler();
 8003780:	f000 fd90 	bl	80042a4 <Error_Handler>
  }

  /* check if we have a callback for the identifier */
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 8003784:	2300      	movs	r3, #0
 8003786:	677b      	str	r3, [r7, #116]	; 0x74
 8003788:	e012      	b.n	80037b0 <HAL_FDCAN_RxFifo0Callback+0x50>
      if (FDCAN_listCallbacks[i].identifier == RxHeader.Identifier) {
 800378a:	4a0e      	ldr	r2, [pc, #56]	; (80037c4 <HAL_FDCAN_RxFifo0Callback+0x64>)
 800378c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	4413      	add	r3, r2
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003796:	429a      	cmp	r2, r3
 8003798:	d107      	bne.n	80037aa <HAL_FDCAN_RxFifo0Callback+0x4a>
          FDCAN_listCallbacks[i].fp(RxData);
 800379a:	4a0a      	ldr	r2, [pc, #40]	; (80037c4 <HAL_FDCAN_RxFifo0Callback+0x64>)
 800379c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800379e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80037a2:	f107 020c 	add.w	r2, r7, #12
 80037a6:	4610      	mov	r0, r2
 80037a8:	4798      	blx	r3
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 80037aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037ac:	3301      	adds	r3, #1
 80037ae:	677b      	str	r3, [r7, #116]	; 0x74
 80037b0:	4b05      	ldr	r3, [pc, #20]	; (80037c8 <HAL_FDCAN_RxFifo0Callback+0x68>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d3e7      	bcc.n	800378a <HAL_FDCAN_RxFifo0Callback+0x2a>
      }
  }
}
 80037ba:	bf00      	nop
 80037bc:	bf00      	nop
 80037be:	3778      	adds	r7, #120	; 0x78
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	20001154 	.word	0x20001154
 80037c8:	200011a4 	.word	0x200011a4

080037cc <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b08c      	sub	sp, #48	; 0x30
 80037d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80037d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037d6:	2200      	movs	r2, #0
 80037d8:	601a      	str	r2, [r3, #0]
 80037da:	605a      	str	r2, [r3, #4]
 80037dc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80037de:	1d3b      	adds	r3, r7, #4
 80037e0:	2220      	movs	r2, #32
 80037e2:	2100      	movs	r1, #0
 80037e4:	4618      	mov	r0, r3
 80037e6:	f00a f9ef 	bl	800dbc8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80037ea:	4b4d      	ldr	r3, [pc, #308]	; (8003920 <MX_ADC1_Init+0x154>)
 80037ec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80037f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80037f2:	4b4b      	ldr	r3, [pc, #300]	; (8003920 <MX_ADC1_Init+0x154>)
 80037f4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80037f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80037fa:	4b49      	ldr	r3, [pc, #292]	; (8003920 <MX_ADC1_Init+0x154>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003800:	4b47      	ldr	r3, [pc, #284]	; (8003920 <MX_ADC1_Init+0x154>)
 8003802:	2200      	movs	r2, #0
 8003804:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8003806:	4b46      	ldr	r3, [pc, #280]	; (8003920 <MX_ADC1_Init+0x154>)
 8003808:	2200      	movs	r2, #0
 800380a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800380c:	4b44      	ldr	r3, [pc, #272]	; (8003920 <MX_ADC1_Init+0x154>)
 800380e:	2201      	movs	r2, #1
 8003810:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003812:	4b43      	ldr	r3, [pc, #268]	; (8003920 <MX_ADC1_Init+0x154>)
 8003814:	2208      	movs	r2, #8
 8003816:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003818:	4b41      	ldr	r3, [pc, #260]	; (8003920 <MX_ADC1_Init+0x154>)
 800381a:	2200      	movs	r2, #0
 800381c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800381e:	4b40      	ldr	r3, [pc, #256]	; (8003920 <MX_ADC1_Init+0x154>)
 8003820:	2201      	movs	r2, #1
 8003822:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 8003824:	4b3e      	ldr	r3, [pc, #248]	; (8003920 <MX_ADC1_Init+0x154>)
 8003826:	2204      	movs	r2, #4
 8003828:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800382a:	4b3d      	ldr	r3, [pc, #244]	; (8003920 <MX_ADC1_Init+0x154>)
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003832:	4b3b      	ldr	r3, [pc, #236]	; (8003920 <MX_ADC1_Init+0x154>)
 8003834:	2200      	movs	r2, #0
 8003836:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003838:	4b39      	ldr	r3, [pc, #228]	; (8003920 <MX_ADC1_Init+0x154>)
 800383a:	2200      	movs	r2, #0
 800383c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800383e:	4b38      	ldr	r3, [pc, #224]	; (8003920 <MX_ADC1_Init+0x154>)
 8003840:	2201      	movs	r2, #1
 8003842:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003846:	4b36      	ldr	r3, [pc, #216]	; (8003920 <MX_ADC1_Init+0x154>)
 8003848:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800384c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 800384e:	4b34      	ldr	r3, [pc, #208]	; (8003920 <MX_ADC1_Init+0x154>)
 8003850:	2201      	movs	r2, #1
 8003852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8003856:	4b32      	ldr	r3, [pc, #200]	; (8003920 <MX_ADC1_Init+0x154>)
 8003858:	220c      	movs	r2, #12
 800385a:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 800385c:	4b30      	ldr	r3, [pc, #192]	; (8003920 <MX_ADC1_Init+0x154>)
 800385e:	2200      	movs	r2, #0
 8003860:	649a      	str	r2, [r3, #72]	; 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8003862:	4b2f      	ldr	r3, [pc, #188]	; (8003920 <MX_ADC1_Init+0x154>)
 8003864:	2200      	movs	r2, #0
 8003866:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8003868:	4b2d      	ldr	r3, [pc, #180]	; (8003920 <MX_ADC1_Init+0x154>)
 800386a:	2201      	movs	r2, #1
 800386c:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800386e:	482c      	ldr	r0, [pc, #176]	; (8003920 <MX_ADC1_Init+0x154>)
 8003870:	f001 fe14 	bl	800549c <HAL_ADC_Init>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800387a:	f000 fd13 	bl	80042a4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800387e:	2300      	movs	r3, #0
 8003880:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003882:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003886:	4619      	mov	r1, r3
 8003888:	4825      	ldr	r0, [pc, #148]	; (8003920 <MX_ADC1_Init+0x154>)
 800388a:	f002 ffb1 	bl	80067f0 <HAL_ADCEx_MultiModeConfigChannel>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8003894:	f000 fd06 	bl	80042a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003898:	4b22      	ldr	r3, [pc, #136]	; (8003924 <MX_ADC1_Init+0x158>)
 800389a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800389c:	2306      	movs	r3, #6
 800389e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 80038a0:	2303      	movs	r3, #3
 80038a2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80038a4:	237f      	movs	r3, #127	; 0x7f
 80038a6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80038a8:	2304      	movs	r3, #4
 80038aa:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80038ac:	2300      	movs	r3, #0
 80038ae:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80038b0:	1d3b      	adds	r3, r7, #4
 80038b2:	4619      	mov	r1, r3
 80038b4:	481a      	ldr	r0, [pc, #104]	; (8003920 <MX_ADC1_Init+0x154>)
 80038b6:	f002 fa5d 	bl	8005d74 <HAL_ADC_ConfigChannel>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d001      	beq.n	80038c4 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 80038c0:	f000 fcf0 	bl	80042a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80038c4:	4b18      	ldr	r3, [pc, #96]	; (8003928 <MX_ADC1_Init+0x15c>)
 80038c6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80038c8:	230c      	movs	r3, #12
 80038ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80038cc:	1d3b      	adds	r3, r7, #4
 80038ce:	4619      	mov	r1, r3
 80038d0:	4813      	ldr	r0, [pc, #76]	; (8003920 <MX_ADC1_Init+0x154>)
 80038d2:	f002 fa4f 	bl	8005d74 <HAL_ADC_ConfigChannel>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d001      	beq.n	80038e0 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 80038dc:	f000 fce2 	bl	80042a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80038e0:	4b12      	ldr	r3, [pc, #72]	; (800392c <MX_ADC1_Init+0x160>)
 80038e2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80038e4:	2312      	movs	r3, #18
 80038e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80038e8:	1d3b      	adds	r3, r7, #4
 80038ea:	4619      	mov	r1, r3
 80038ec:	480c      	ldr	r0, [pc, #48]	; (8003920 <MX_ADC1_Init+0x154>)
 80038ee:	f002 fa41 	bl	8005d74 <HAL_ADC_ConfigChannel>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <MX_ADC1_Init+0x130>
  {
    Error_Handler();
 80038f8:	f000 fcd4 	bl	80042a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80038fc:	4b0c      	ldr	r3, [pc, #48]	; (8003930 <MX_ADC1_Init+0x164>)
 80038fe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8003900:	2318      	movs	r3, #24
 8003902:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003904:	1d3b      	adds	r3, r7, #4
 8003906:	4619      	mov	r1, r3
 8003908:	4805      	ldr	r0, [pc, #20]	; (8003920 <MX_ADC1_Init+0x154>)
 800390a:	f002 fa33 	bl	8005d74 <HAL_ADC_ConfigChannel>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d001      	beq.n	8003918 <MX_ADC1_Init+0x14c>
  {
    Error_Handler();
 8003914:	f000 fcc6 	bl	80042a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003918:	bf00      	nop
 800391a:	3730      	adds	r7, #48	; 0x30
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	200011a8 	.word	0x200011a8
 8003924:	04300002 	.word	0x04300002
 8003928:	08600004 	.word	0x08600004
 800392c:	0c900008 	.word	0x0c900008
 8003930:	cb840000 	.word	0xcb840000

08003934 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b088      	sub	sp, #32
 8003938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800393a:	463b      	mov	r3, r7
 800393c:	2220      	movs	r2, #32
 800393e:	2100      	movs	r1, #0
 8003940:	4618      	mov	r0, r3
 8003942:	f00a f941 	bl	800dbc8 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8003946:	4b47      	ldr	r3, [pc, #284]	; (8003a64 <MX_ADC2_Init+0x130>)
 8003948:	4a47      	ldr	r2, [pc, #284]	; (8003a68 <MX_ADC2_Init+0x134>)
 800394a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800394c:	4b45      	ldr	r3, [pc, #276]	; (8003a64 <MX_ADC2_Init+0x130>)
 800394e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003952:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003954:	4b43      	ldr	r3, [pc, #268]	; (8003a64 <MX_ADC2_Init+0x130>)
 8003956:	2200      	movs	r2, #0
 8003958:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800395a:	4b42      	ldr	r3, [pc, #264]	; (8003a64 <MX_ADC2_Init+0x130>)
 800395c:	2200      	movs	r2, #0
 800395e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8003960:	4b40      	ldr	r3, [pc, #256]	; (8003a64 <MX_ADC2_Init+0x130>)
 8003962:	2200      	movs	r2, #0
 8003964:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003966:	4b3f      	ldr	r3, [pc, #252]	; (8003a64 <MX_ADC2_Init+0x130>)
 8003968:	2201      	movs	r2, #1
 800396a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800396c:	4b3d      	ldr	r3, [pc, #244]	; (8003a64 <MX_ADC2_Init+0x130>)
 800396e:	2204      	movs	r2, #4
 8003970:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8003972:	4b3c      	ldr	r3, [pc, #240]	; (8003a64 <MX_ADC2_Init+0x130>)
 8003974:	2200      	movs	r2, #0
 8003976:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8003978:	4b3a      	ldr	r3, [pc, #232]	; (8003a64 <MX_ADC2_Init+0x130>)
 800397a:	2201      	movs	r2, #1
 800397c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 4;
 800397e:	4b39      	ldr	r3, [pc, #228]	; (8003a64 <MX_ADC2_Init+0x130>)
 8003980:	2204      	movs	r2, #4
 8003982:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003984:	4b37      	ldr	r3, [pc, #220]	; (8003a64 <MX_ADC2_Init+0x130>)
 8003986:	2200      	movs	r2, #0
 8003988:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800398c:	4b35      	ldr	r3, [pc, #212]	; (8003a64 <MX_ADC2_Init+0x130>)
 800398e:	2200      	movs	r2, #0
 8003990:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003992:	4b34      	ldr	r3, [pc, #208]	; (8003a64 <MX_ADC2_Init+0x130>)
 8003994:	2200      	movs	r2, #0
 8003996:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8003998:	4b32      	ldr	r3, [pc, #200]	; (8003a64 <MX_ADC2_Init+0x130>)
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80039a0:	4b30      	ldr	r3, [pc, #192]	; (8003a64 <MX_ADC2_Init+0x130>)
 80039a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80039a6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = ENABLE;
 80039a8:	4b2e      	ldr	r3, [pc, #184]	; (8003a64 <MX_ADC2_Init+0x130>)
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc2.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 80039b0:	4b2c      	ldr	r3, [pc, #176]	; (8003a64 <MX_ADC2_Init+0x130>)
 80039b2:	220c      	movs	r2, #12
 80039b4:	645a      	str	r2, [r3, #68]	; 0x44
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 80039b6:	4b2b      	ldr	r3, [pc, #172]	; (8003a64 <MX_ADC2_Init+0x130>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	649a      	str	r2, [r3, #72]	; 0x48
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80039bc:	4b29      	ldr	r3, [pc, #164]	; (8003a64 <MX_ADC2_Init+0x130>)
 80039be:	2200      	movs	r2, #0
 80039c0:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80039c2:	4b28      	ldr	r3, [pc, #160]	; (8003a64 <MX_ADC2_Init+0x130>)
 80039c4:	2201      	movs	r2, #1
 80039c6:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80039c8:	4826      	ldr	r0, [pc, #152]	; (8003a64 <MX_ADC2_Init+0x130>)
 80039ca:	f001 fd67 	bl	800549c <HAL_ADC_Init>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <MX_ADC2_Init+0xa4>
  {
    Error_Handler();
 80039d4:	f000 fc66 	bl	80042a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80039d8:	4b24      	ldr	r3, [pc, #144]	; (8003a6c <MX_ADC2_Init+0x138>)
 80039da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80039dc:	2306      	movs	r3, #6
 80039de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80039e0:	2307      	movs	r3, #7
 80039e2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80039e4:	237f      	movs	r3, #127	; 0x7f
 80039e6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80039e8:	2304      	movs	r3, #4
 80039ea:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80039ec:	2300      	movs	r3, #0
 80039ee:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80039f0:	463b      	mov	r3, r7
 80039f2:	4619      	mov	r1, r3
 80039f4:	481b      	ldr	r0, [pc, #108]	; (8003a64 <MX_ADC2_Init+0x130>)
 80039f6:	f002 f9bd 	bl	8005d74 <HAL_ADC_ConfigChannel>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d001      	beq.n	8003a04 <MX_ADC2_Init+0xd0>
  {
    Error_Handler();
 8003a00:	f000 fc50 	bl	80042a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8003a04:	4b1a      	ldr	r3, [pc, #104]	; (8003a70 <MX_ADC2_Init+0x13c>)
 8003a06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003a08:	230c      	movs	r3, #12
 8003a0a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003a10:	463b      	mov	r3, r7
 8003a12:	4619      	mov	r1, r3
 8003a14:	4813      	ldr	r0, [pc, #76]	; (8003a64 <MX_ADC2_Init+0x130>)
 8003a16:	f002 f9ad 	bl	8005d74 <HAL_ADC_ConfigChannel>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <MX_ADC2_Init+0xf0>
  {
    Error_Handler();
 8003a20:	f000 fc40 	bl	80042a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8003a24:	4b13      	ldr	r3, [pc, #76]	; (8003a74 <MX_ADC2_Init+0x140>)
 8003a26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003a28:	2312      	movs	r3, #18
 8003a2a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003a2c:	463b      	mov	r3, r7
 8003a2e:	4619      	mov	r1, r3
 8003a30:	480c      	ldr	r0, [pc, #48]	; (8003a64 <MX_ADC2_Init+0x130>)
 8003a32:	f002 f99f 	bl	8005d74 <HAL_ADC_ConfigChannel>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <MX_ADC2_Init+0x10c>
  {
    Error_Handler();
 8003a3c:	f000 fc32 	bl	80042a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003a40:	4b0d      	ldr	r3, [pc, #52]	; (8003a78 <MX_ADC2_Init+0x144>)
 8003a42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8003a44:	2318      	movs	r3, #24
 8003a46:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003a48:	463b      	mov	r3, r7
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	4805      	ldr	r0, [pc, #20]	; (8003a64 <MX_ADC2_Init+0x130>)
 8003a4e:	f002 f991 	bl	8005d74 <HAL_ADC_ConfigChannel>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d001      	beq.n	8003a5c <MX_ADC2_Init+0x128>
  {
    Error_Handler();
 8003a58:	f000 fc24 	bl	80042a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003a5c:	bf00      	nop
 8003a5e:	3720      	adds	r7, #32
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	20001214 	.word	0x20001214
 8003a68:	50000100 	.word	0x50000100
 8003a6c:	32601000 	.word	0x32601000
 8003a70:	3ac04000 	.word	0x3ac04000
 8003a74:	36902000 	.word	0x36902000
 8003a78:	0c900008 	.word	0x0c900008

08003a7c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b09e      	sub	sp, #120	; 0x78
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a84:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	605a      	str	r2, [r3, #4]
 8003a8e:	609a      	str	r2, [r3, #8]
 8003a90:	60da      	str	r2, [r3, #12]
 8003a92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a94:	f107 0320 	add.w	r3, r7, #32
 8003a98:	2244      	movs	r2, #68	; 0x44
 8003a9a:	2100      	movs	r1, #0
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f00a f893 	bl	800dbc8 <memset>
  if(adcHandle->Instance==ADC1)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003aaa:	d171      	bne.n	8003b90 <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003aac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ab0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003ab2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003ab6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ab8:	f107 0320 	add.w	r3, r7, #32
 8003abc:	4618      	mov	r0, r3
 8003abe:	f005 fb43 	bl	8009148 <HAL_RCCEx_PeriphCLKConfig>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d001      	beq.n	8003acc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003ac8:	f000 fbec 	bl	80042a4 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003acc:	4b7a      	ldr	r3, [pc, #488]	; (8003cb8 <HAL_ADC_MspInit+0x23c>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	4a79      	ldr	r2, [pc, #484]	; (8003cb8 <HAL_ADC_MspInit+0x23c>)
 8003ad4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003ad6:	4b78      	ldr	r3, [pc, #480]	; (8003cb8 <HAL_ADC_MspInit+0x23c>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d10b      	bne.n	8003af6 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003ade:	4b77      	ldr	r3, [pc, #476]	; (8003cbc <HAL_ADC_MspInit+0x240>)
 8003ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ae2:	4a76      	ldr	r2, [pc, #472]	; (8003cbc <HAL_ADC_MspInit+0x240>)
 8003ae4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003ae8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003aea:	4b74      	ldr	r3, [pc, #464]	; (8003cbc <HAL_ADC_MspInit+0x240>)
 8003aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003af2:	61fb      	str	r3, [r7, #28]
 8003af4:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003af6:	4b71      	ldr	r3, [pc, #452]	; (8003cbc <HAL_ADC_MspInit+0x240>)
 8003af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003afa:	4a70      	ldr	r2, [pc, #448]	; (8003cbc <HAL_ADC_MspInit+0x240>)
 8003afc:	f043 0301 	orr.w	r3, r3, #1
 8003b00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b02:	4b6e      	ldr	r3, [pc, #440]	; (8003cbc <HAL_ADC_MspInit+0x240>)
 8003b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	61bb      	str	r3, [r7, #24]
 8003b0c:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = CURRENT_ADC_3_Pin|CURRENT_ADC_2_Pin|CURRENT_ADC_1_Pin;
 8003b0e:	2307      	movs	r3, #7
 8003b10:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b12:	2303      	movs	r3, #3
 8003b14:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b16:	2300      	movs	r3, #0
 8003b18:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b1a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003b1e:	4619      	mov	r1, r3
 8003b20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b24:	f004 fb4c 	bl	80081c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003b28:	4b65      	ldr	r3, [pc, #404]	; (8003cc0 <HAL_ADC_MspInit+0x244>)
 8003b2a:	4a66      	ldr	r2, [pc, #408]	; (8003cc4 <HAL_ADC_MspInit+0x248>)
 8003b2c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003b2e:	4b64      	ldr	r3, [pc, #400]	; (8003cc0 <HAL_ADC_MspInit+0x244>)
 8003b30:	2205      	movs	r2, #5
 8003b32:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b34:	4b62      	ldr	r3, [pc, #392]	; (8003cc0 <HAL_ADC_MspInit+0x244>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b3a:	4b61      	ldr	r3, [pc, #388]	; (8003cc0 <HAL_ADC_MspInit+0x244>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003b40:	4b5f      	ldr	r3, [pc, #380]	; (8003cc0 <HAL_ADC_MspInit+0x244>)
 8003b42:	2280      	movs	r2, #128	; 0x80
 8003b44:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003b46:	4b5e      	ldr	r3, [pc, #376]	; (8003cc0 <HAL_ADC_MspInit+0x244>)
 8003b48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b4c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003b4e:	4b5c      	ldr	r3, [pc, #368]	; (8003cc0 <HAL_ADC_MspInit+0x244>)
 8003b50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b54:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003b56:	4b5a      	ldr	r3, [pc, #360]	; (8003cc0 <HAL_ADC_MspInit+0x244>)
 8003b58:	2220      	movs	r2, #32
 8003b5a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003b5c:	4b58      	ldr	r3, [pc, #352]	; (8003cc0 <HAL_ADC_MspInit+0x244>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003b62:	4857      	ldr	r0, [pc, #348]	; (8003cc0 <HAL_ADC_MspInit+0x244>)
 8003b64:	f003 fa14 	bl	8006f90 <HAL_DMA_Init>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 8003b6e:	f000 fb99 	bl	80042a4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a52      	ldr	r2, [pc, #328]	; (8003cc0 <HAL_ADC_MspInit+0x244>)
 8003b76:	655a      	str	r2, [r3, #84]	; 0x54
 8003b78:	4a51      	ldr	r2, [pc, #324]	; (8003cc0 <HAL_ADC_MspInit+0x244>)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8003b7e:	2200      	movs	r2, #0
 8003b80:	2100      	movs	r1, #0
 8003b82:	2012      	movs	r0, #18
 8003b84:	f002 ffb3 	bl	8006aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8003b88:	2012      	movs	r0, #18
 8003b8a:	f002 ffca 	bl	8006b22 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8003b8e:	e08f      	b.n	8003cb0 <HAL_ADC_MspInit+0x234>
  else if(adcHandle->Instance==ADC2)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a4c      	ldr	r2, [pc, #304]	; (8003cc8 <HAL_ADC_MspInit+0x24c>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	f040 808a 	bne.w	8003cb0 <HAL_ADC_MspInit+0x234>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003b9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ba0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003ba2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003ba6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ba8:	f107 0320 	add.w	r3, r7, #32
 8003bac:	4618      	mov	r0, r3
 8003bae:	f005 facb 	bl	8009148 <HAL_RCCEx_PeriphCLKConfig>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d001      	beq.n	8003bbc <HAL_ADC_MspInit+0x140>
      Error_Handler();
 8003bb8:	f000 fb74 	bl	80042a4 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003bbc:	4b3e      	ldr	r3, [pc, #248]	; (8003cb8 <HAL_ADC_MspInit+0x23c>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	4a3d      	ldr	r2, [pc, #244]	; (8003cb8 <HAL_ADC_MspInit+0x23c>)
 8003bc4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003bc6:	4b3c      	ldr	r3, [pc, #240]	; (8003cb8 <HAL_ADC_MspInit+0x23c>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d10b      	bne.n	8003be6 <HAL_ADC_MspInit+0x16a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003bce:	4b3b      	ldr	r3, [pc, #236]	; (8003cbc <HAL_ADC_MspInit+0x240>)
 8003bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bd2:	4a3a      	ldr	r2, [pc, #232]	; (8003cbc <HAL_ADC_MspInit+0x240>)
 8003bd4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bda:	4b38      	ldr	r3, [pc, #224]	; (8003cbc <HAL_ADC_MspInit+0x240>)
 8003bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003be2:	617b      	str	r3, [r7, #20]
 8003be4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003be6:	4b35      	ldr	r3, [pc, #212]	; (8003cbc <HAL_ADC_MspInit+0x240>)
 8003be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bea:	4a34      	ldr	r2, [pc, #208]	; (8003cbc <HAL_ADC_MspInit+0x240>)
 8003bec:	f043 0301 	orr.w	r3, r3, #1
 8003bf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bf2:	4b32      	ldr	r3, [pc, #200]	; (8003cbc <HAL_ADC_MspInit+0x240>)
 8003bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	613b      	str	r3, [r7, #16]
 8003bfc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bfe:	4b2f      	ldr	r3, [pc, #188]	; (8003cbc <HAL_ADC_MspInit+0x240>)
 8003c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c02:	4a2e      	ldr	r2, [pc, #184]	; (8003cbc <HAL_ADC_MspInit+0x240>)
 8003c04:	f043 0302 	orr.w	r3, r3, #2
 8003c08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c0a:	4b2c      	ldr	r3, [pc, #176]	; (8003cbc <HAL_ADC_MspInit+0x240>)
 8003c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	60fb      	str	r3, [r7, #12]
 8003c14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = V_BAT_ADC_Pin|V_AUX_ADC_Pin;
 8003c16:	2360      	movs	r3, #96	; 0x60
 8003c18:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c22:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003c26:	4619      	mov	r1, r3
 8003c28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c2c:	f004 fac8 	bl	80081c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC2_NTC1_Pin|ADC2_NTC2_Pin;
 8003c30:	f640 0304 	movw	r3, #2052	; 0x804
 8003c34:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c36:	2303      	movs	r3, #3
 8003c38:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c3e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003c42:	4619      	mov	r1, r3
 8003c44:	4821      	ldr	r0, [pc, #132]	; (8003ccc <HAL_ADC_MspInit+0x250>)
 8003c46:	f004 fabb 	bl	80081c0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8003c4a:	4b21      	ldr	r3, [pc, #132]	; (8003cd0 <HAL_ADC_MspInit+0x254>)
 8003c4c:	4a21      	ldr	r2, [pc, #132]	; (8003cd4 <HAL_ADC_MspInit+0x258>)
 8003c4e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8003c50:	4b1f      	ldr	r3, [pc, #124]	; (8003cd0 <HAL_ADC_MspInit+0x254>)
 8003c52:	2224      	movs	r2, #36	; 0x24
 8003c54:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c56:	4b1e      	ldr	r3, [pc, #120]	; (8003cd0 <HAL_ADC_MspInit+0x254>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c5c:	4b1c      	ldr	r3, [pc, #112]	; (8003cd0 <HAL_ADC_MspInit+0x254>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003c62:	4b1b      	ldr	r3, [pc, #108]	; (8003cd0 <HAL_ADC_MspInit+0x254>)
 8003c64:	2280      	movs	r2, #128	; 0x80
 8003c66:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003c68:	4b19      	ldr	r3, [pc, #100]	; (8003cd0 <HAL_ADC_MspInit+0x254>)
 8003c6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c6e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003c70:	4b17      	ldr	r3, [pc, #92]	; (8003cd0 <HAL_ADC_MspInit+0x254>)
 8003c72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c76:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8003c78:	4b15      	ldr	r3, [pc, #84]	; (8003cd0 <HAL_ADC_MspInit+0x254>)
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8003c7e:	4b14      	ldr	r3, [pc, #80]	; (8003cd0 <HAL_ADC_MspInit+0x254>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8003c84:	4812      	ldr	r0, [pc, #72]	; (8003cd0 <HAL_ADC_MspInit+0x254>)
 8003c86:	f003 f983 	bl	8006f90 <HAL_DMA_Init>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d001      	beq.n	8003c94 <HAL_ADC_MspInit+0x218>
      Error_Handler();
 8003c90:	f000 fb08 	bl	80042a4 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a0e      	ldr	r2, [pc, #56]	; (8003cd0 <HAL_ADC_MspInit+0x254>)
 8003c98:	655a      	str	r2, [r3, #84]	; 0x54
 8003c9a:	4a0d      	ldr	r2, [pc, #52]	; (8003cd0 <HAL_ADC_MspInit+0x254>)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	2012      	movs	r0, #18
 8003ca6:	f002 ff22 	bl	8006aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8003caa:	2012      	movs	r0, #18
 8003cac:	f002 ff39 	bl	8006b22 <HAL_NVIC_EnableIRQ>
}
 8003cb0:	bf00      	nop
 8003cb2:	3778      	adds	r7, #120	; 0x78
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	20001340 	.word	0x20001340
 8003cbc:	40021000 	.word	0x40021000
 8003cc0:	20001280 	.word	0x20001280
 8003cc4:	40020008 	.word	0x40020008
 8003cc8:	50000100 	.word	0x50000100
 8003ccc:	48000400 	.word	0x48000400
 8003cd0:	200012e0 	.word	0x200012e0
 8003cd4:	4002001c 	.word	0x4002001c

08003cd8 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b08c      	sub	sp, #48	; 0x30
 8003cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8003cde:	463b      	mov	r3, r7
 8003ce0:	2230      	movs	r2, #48	; 0x30
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f009 ff6f 	bl	800dbc8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8003cea:	4b16      	ldr	r3, [pc, #88]	; (8003d44 <MX_DAC1_Init+0x6c>)
 8003cec:	4a16      	ldr	r2, [pc, #88]	; (8003d48 <MX_DAC1_Init+0x70>)
 8003cee:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8003cf0:	4814      	ldr	r0, [pc, #80]	; (8003d44 <MX_DAC1_Init+0x6c>)
 8003cf2:	f002 ff30 	bl	8006b56 <HAL_DAC_Init>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d001      	beq.n	8003d00 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8003cfc:	f000 fad2 	bl	80042a4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8003d00:	2300      	movs	r3, #0
 8003d02:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8003d04:	2300      	movs	r3, #0
 8003d06:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003d10:	2300      	movs	r3, #0
 8003d12:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8003d14:	2300      	movs	r3, #0
 8003d16:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8003d20:	2300      	movs	r3, #0
 8003d22:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003d24:	463b      	mov	r3, r7
 8003d26:	2200      	movs	r2, #0
 8003d28:	4619      	mov	r1, r3
 8003d2a:	4806      	ldr	r0, [pc, #24]	; (8003d44 <MX_DAC1_Init+0x6c>)
 8003d2c:	f002 ff88 	bl	8006c40 <HAL_DAC_ConfigChannel>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8003d36:	f000 fab5 	bl	80042a4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8003d3a:	bf00      	nop
 8003d3c:	3730      	adds	r7, #48	; 0x30
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	20001344 	.word	0x20001344
 8003d48:	50000800 	.word	0x50000800

08003d4c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b08a      	sub	sp, #40	; 0x28
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d54:	f107 0314 	add.w	r3, r7, #20
 8003d58:	2200      	movs	r2, #0
 8003d5a:	601a      	str	r2, [r3, #0]
 8003d5c:	605a      	str	r2, [r3, #4]
 8003d5e:	609a      	str	r2, [r3, #8]
 8003d60:	60da      	str	r2, [r3, #12]
 8003d62:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a15      	ldr	r2, [pc, #84]	; (8003dc0 <HAL_DAC_MspInit+0x74>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d124      	bne.n	8003db8 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003d6e:	4b15      	ldr	r3, [pc, #84]	; (8003dc4 <HAL_DAC_MspInit+0x78>)
 8003d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d72:	4a14      	ldr	r2, [pc, #80]	; (8003dc4 <HAL_DAC_MspInit+0x78>)
 8003d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d7a:	4b12      	ldr	r3, [pc, #72]	; (8003dc4 <HAL_DAC_MspInit+0x78>)
 8003d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d82:	613b      	str	r3, [r7, #16]
 8003d84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d86:	4b0f      	ldr	r3, [pc, #60]	; (8003dc4 <HAL_DAC_MspInit+0x78>)
 8003d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d8a:	4a0e      	ldr	r2, [pc, #56]	; (8003dc4 <HAL_DAC_MspInit+0x78>)
 8003d8c:	f043 0301 	orr.w	r3, r3, #1
 8003d90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d92:	4b0c      	ldr	r3, [pc, #48]	; (8003dc4 <HAL_DAC_MspInit+0x78>)
 8003d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	60fb      	str	r3, [r7, #12]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003d9e:	2310      	movs	r3, #16
 8003da0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003da2:	2303      	movs	r3, #3
 8003da4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da6:	2300      	movs	r3, #0
 8003da8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003daa:	f107 0314 	add.w	r3, r7, #20
 8003dae:	4619      	mov	r1, r3
 8003db0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003db4:	f004 fa04 	bl	80081c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8003db8:	bf00      	nop
 8003dba:	3728      	adds	r7, #40	; 0x28
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	50000800 	.word	0x50000800
 8003dc4:	40021000 	.word	0x40021000

08003dc8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003dce:	4b30      	ldr	r3, [pc, #192]	; (8003e90 <MX_DMA_Init+0xc8>)
 8003dd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dd2:	4a2f      	ldr	r2, [pc, #188]	; (8003e90 <MX_DMA_Init+0xc8>)
 8003dd4:	f043 0304 	orr.w	r3, r3, #4
 8003dd8:	6493      	str	r3, [r2, #72]	; 0x48
 8003dda:	4b2d      	ldr	r3, [pc, #180]	; (8003e90 <MX_DMA_Init+0xc8>)
 8003ddc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dde:	f003 0304 	and.w	r3, r3, #4
 8003de2:	60fb      	str	r3, [r7, #12]
 8003de4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003de6:	4b2a      	ldr	r3, [pc, #168]	; (8003e90 <MX_DMA_Init+0xc8>)
 8003de8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dea:	4a29      	ldr	r2, [pc, #164]	; (8003e90 <MX_DMA_Init+0xc8>)
 8003dec:	f043 0301 	orr.w	r3, r3, #1
 8003df0:	6493      	str	r3, [r2, #72]	; 0x48
 8003df2:	4b27      	ldr	r3, [pc, #156]	; (8003e90 <MX_DMA_Init+0xc8>)
 8003df4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	60bb      	str	r3, [r7, #8]
 8003dfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003dfe:	4b24      	ldr	r3, [pc, #144]	; (8003e90 <MX_DMA_Init+0xc8>)
 8003e00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e02:	4a23      	ldr	r2, [pc, #140]	; (8003e90 <MX_DMA_Init+0xc8>)
 8003e04:	f043 0302 	orr.w	r3, r3, #2
 8003e08:	6493      	str	r3, [r2, #72]	; 0x48
 8003e0a:	4b21      	ldr	r3, [pc, #132]	; (8003e90 <MX_DMA_Init+0xc8>)
 8003e0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	607b      	str	r3, [r7, #4]
 8003e14:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003e16:	2200      	movs	r2, #0
 8003e18:	2100      	movs	r1, #0
 8003e1a:	200b      	movs	r0, #11
 8003e1c:	f002 fe67 	bl	8006aee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003e20:	200b      	movs	r0, #11
 8003e22:	f002 fe7e 	bl	8006b22 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8003e26:	2200      	movs	r2, #0
 8003e28:	2100      	movs	r1, #0
 8003e2a:	200c      	movs	r0, #12
 8003e2c:	f002 fe5f 	bl	8006aee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003e30:	200c      	movs	r0, #12
 8003e32:	f002 fe76 	bl	8006b22 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8003e36:	2200      	movs	r2, #0
 8003e38:	2100      	movs	r1, #0
 8003e3a:	200d      	movs	r0, #13
 8003e3c:	f002 fe57 	bl	8006aee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003e40:	200d      	movs	r0, #13
 8003e42:	f002 fe6e 	bl	8006b22 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8003e46:	2200      	movs	r2, #0
 8003e48:	2100      	movs	r1, #0
 8003e4a:	200e      	movs	r0, #14
 8003e4c:	f002 fe4f 	bl	8006aee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003e50:	200e      	movs	r0, #14
 8003e52:	f002 fe66 	bl	8006b22 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8003e56:	2200      	movs	r2, #0
 8003e58:	2100      	movs	r1, #0
 8003e5a:	2038      	movs	r0, #56	; 0x38
 8003e5c:	f002 fe47 	bl	8006aee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8003e60:	2038      	movs	r0, #56	; 0x38
 8003e62:	f002 fe5e 	bl	8006b22 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8003e66:	2200      	movs	r2, #0
 8003e68:	2100      	movs	r1, #0
 8003e6a:	2039      	movs	r0, #57	; 0x39
 8003e6c:	f002 fe3f 	bl	8006aee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8003e70:	2039      	movs	r0, #57	; 0x39
 8003e72:	f002 fe56 	bl	8006b22 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8003e76:	2200      	movs	r2, #0
 8003e78:	2100      	movs	r1, #0
 8003e7a:	203a      	movs	r0, #58	; 0x3a
 8003e7c:	f002 fe37 	bl	8006aee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8003e80:	203a      	movs	r0, #58	; 0x3a
 8003e82:	f002 fe4e 	bl	8006b22 <HAL_NVIC_EnableIRQ>

}
 8003e86:	bf00      	nop
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	40021000 	.word	0x40021000

08003e94 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8003e98:	4b20      	ldr	r3, [pc, #128]	; (8003f1c <MX_FDCAN1_Init+0x88>)
 8003e9a:	4a21      	ldr	r2, [pc, #132]	; (8003f20 <MX_FDCAN1_Init+0x8c>)
 8003e9c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8003e9e:	4b1f      	ldr	r3, [pc, #124]	; (8003f1c <MX_FDCAN1_Init+0x88>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8003ea4:	4b1d      	ldr	r3, [pc, #116]	; (8003f1c <MX_FDCAN1_Init+0x88>)
 8003ea6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003eaa:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8003eac:	4b1b      	ldr	r3, [pc, #108]	; (8003f1c <MX_FDCAN1_Init+0x88>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8003eb2:	4b1a      	ldr	r3, [pc, #104]	; (8003f1c <MX_FDCAN1_Init+0x88>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8003eb8:	4b18      	ldr	r3, [pc, #96]	; (8003f1c <MX_FDCAN1_Init+0x88>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8003ebe:	4b17      	ldr	r3, [pc, #92]	; (8003f1c <MX_FDCAN1_Init+0x88>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8003ec4:	4b15      	ldr	r3, [pc, #84]	; (8003f1c <MX_FDCAN1_Init+0x88>)
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 7;
 8003eca:	4b14      	ldr	r3, [pc, #80]	; (8003f1c <MX_FDCAN1_Init+0x88>)
 8003ecc:	2207      	movs	r2, #7
 8003ece:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 42;
 8003ed0:	4b12      	ldr	r3, [pc, #72]	; (8003f1c <MX_FDCAN1_Init+0x88>)
 8003ed2:	222a      	movs	r2, #42	; 0x2a
 8003ed4:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 7;
 8003ed6:	4b11      	ldr	r3, [pc, #68]	; (8003f1c <MX_FDCAN1_Init+0x88>)
 8003ed8:	2207      	movs	r2, #7
 8003eda:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8003edc:	4b0f      	ldr	r3, [pc, #60]	; (8003f1c <MX_FDCAN1_Init+0x88>)
 8003ede:	2201      	movs	r2, #1
 8003ee0:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 9;
 8003ee2:	4b0e      	ldr	r3, [pc, #56]	; (8003f1c <MX_FDCAN1_Init+0x88>)
 8003ee4:	2209      	movs	r2, #9
 8003ee6:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 8003ee8:	4b0c      	ldr	r3, [pc, #48]	; (8003f1c <MX_FDCAN1_Init+0x88>)
 8003eea:	220a      	movs	r2, #10
 8003eec:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 9;
 8003eee:	4b0b      	ldr	r3, [pc, #44]	; (8003f1c <MX_FDCAN1_Init+0x88>)
 8003ef0:	2209      	movs	r2, #9
 8003ef2:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8003ef4:	4b09      	ldr	r3, [pc, #36]	; (8003f1c <MX_FDCAN1_Init+0x88>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8003efa:	4b08      	ldr	r3, [pc, #32]	; (8003f1c <MX_FDCAN1_Init+0x88>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8003f00:	4b06      	ldr	r3, [pc, #24]	; (8003f1c <MX_FDCAN1_Init+0x88>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8003f06:	4805      	ldr	r0, [pc, #20]	; (8003f1c <MX_FDCAN1_Init+0x88>)
 8003f08:	f003 fb74 	bl	80075f4 <HAL_FDCAN_Init>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d001      	beq.n	8003f16 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8003f12:	f000 f9c7 	bl	80042a4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8003f16:	bf00      	nop
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	20001358 	.word	0x20001358
 8003f20:	40006400 	.word	0x40006400

08003f24 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b09a      	sub	sp, #104	; 0x68
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f2c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003f30:	2200      	movs	r2, #0
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	605a      	str	r2, [r3, #4]
 8003f36:	609a      	str	r2, [r3, #8]
 8003f38:	60da      	str	r2, [r3, #12]
 8003f3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f3c:	f107 0310 	add.w	r3, r7, #16
 8003f40:	2244      	movs	r2, #68	; 0x44
 8003f42:	2100      	movs	r1, #0
 8003f44:	4618      	mov	r0, r3
 8003f46:	f009 fe3f 	bl	800dbc8 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a24      	ldr	r2, [pc, #144]	; (8003fe0 <HAL_FDCAN_MspInit+0xbc>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d141      	bne.n	8003fd8 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8003f54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f58:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8003f5a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f5e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f60:	f107 0310 	add.w	r3, r7, #16
 8003f64:	4618      	mov	r0, r3
 8003f66:	f005 f8ef 	bl	8009148 <HAL_RCCEx_PeriphCLKConfig>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8003f70:	f000 f998 	bl	80042a4 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8003f74:	4b1b      	ldr	r3, [pc, #108]	; (8003fe4 <HAL_FDCAN_MspInit+0xc0>)
 8003f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f78:	4a1a      	ldr	r2, [pc, #104]	; (8003fe4 <HAL_FDCAN_MspInit+0xc0>)
 8003f7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f7e:	6593      	str	r3, [r2, #88]	; 0x58
 8003f80:	4b18      	ldr	r3, [pc, #96]	; (8003fe4 <HAL_FDCAN_MspInit+0xc0>)
 8003f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f88:	60fb      	str	r3, [r7, #12]
 8003f8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f8c:	4b15      	ldr	r3, [pc, #84]	; (8003fe4 <HAL_FDCAN_MspInit+0xc0>)
 8003f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f90:	4a14      	ldr	r2, [pc, #80]	; (8003fe4 <HAL_FDCAN_MspInit+0xc0>)
 8003f92:	f043 0301 	orr.w	r3, r3, #1
 8003f96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f98:	4b12      	ldr	r3, [pc, #72]	; (8003fe4 <HAL_FDCAN_MspInit+0xc0>)
 8003f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	60bb      	str	r3, [r7, #8]
 8003fa2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003fa4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003fa8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003faa:	2302      	movs	r3, #2
 8003fac:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8003fb6:	2309      	movs	r3, #9
 8003fb8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003fc4:	f004 f8fc 	bl	80081c0 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8003fc8:	2200      	movs	r2, #0
 8003fca:	2100      	movs	r1, #0
 8003fcc:	2015      	movs	r0, #21
 8003fce:	f002 fd8e 	bl	8006aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8003fd2:	2015      	movs	r0, #21
 8003fd4:	f002 fda5 	bl	8006b22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8003fd8:	bf00      	nop
 8003fda:	3768      	adds	r7, #104	; 0x68
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	40006400 	.word	0x40006400
 8003fe4:	40021000 	.word	0x40021000

08003fe8 <MX_FMAC_Init>:

FMAC_HandleTypeDef hfmac;

/* FMAC init function */
void MX_FMAC_Init(void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 8003fec:	4b06      	ldr	r3, [pc, #24]	; (8004008 <MX_FMAC_Init+0x20>)
 8003fee:	4a07      	ldr	r2, [pc, #28]	; (800400c <MX_FMAC_Init+0x24>)
 8003ff0:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 8003ff2:	4805      	ldr	r0, [pc, #20]	; (8004008 <MX_FMAC_Init+0x20>)
 8003ff4:	f004 f838 	bl	8008068 <HAL_FMAC_Init>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d001      	beq.n	8004002 <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 8003ffe:	f000 f951 	bl	80042a4 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 8004002:	bf00      	nop
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	200013bc 	.word	0x200013bc
 800400c:	40021400 	.word	0x40021400

08004010 <HAL_FMAC_MspInit>:

void HAL_FMAC_MspInit(FMAC_HandleTypeDef* fmacHandle)
{
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]

  if(fmacHandle->Instance==FMAC)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a0a      	ldr	r2, [pc, #40]	; (8004048 <HAL_FMAC_MspInit+0x38>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d10b      	bne.n	800403a <HAL_FMAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* FMAC clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 8004022:	4b0a      	ldr	r3, [pc, #40]	; (800404c <HAL_FMAC_MspInit+0x3c>)
 8004024:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004026:	4a09      	ldr	r2, [pc, #36]	; (800404c <HAL_FMAC_MspInit+0x3c>)
 8004028:	f043 0310 	orr.w	r3, r3, #16
 800402c:	6493      	str	r3, [r2, #72]	; 0x48
 800402e:	4b07      	ldr	r3, [pc, #28]	; (800404c <HAL_FMAC_MspInit+0x3c>)
 8004030:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004032:	f003 0310 	and.w	r3, r3, #16
 8004036:	60fb      	str	r3, [r7, #12]
 8004038:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }
}
 800403a:	bf00      	nop
 800403c:	3714      	adds	r7, #20
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	40021400 	.word	0x40021400
 800404c:	40021000 	.word	0x40021000

08004050 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b08a      	sub	sp, #40	; 0x28
 8004054:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004056:	f107 0314 	add.w	r3, r7, #20
 800405a:	2200      	movs	r2, #0
 800405c:	601a      	str	r2, [r3, #0]
 800405e:	605a      	str	r2, [r3, #4]
 8004060:	609a      	str	r2, [r3, #8]
 8004062:	60da      	str	r2, [r3, #12]
 8004064:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004066:	4b51      	ldr	r3, [pc, #324]	; (80041ac <MX_GPIO_Init+0x15c>)
 8004068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800406a:	4a50      	ldr	r2, [pc, #320]	; (80041ac <MX_GPIO_Init+0x15c>)
 800406c:	f043 0320 	orr.w	r3, r3, #32
 8004070:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004072:	4b4e      	ldr	r3, [pc, #312]	; (80041ac <MX_GPIO_Init+0x15c>)
 8004074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004076:	f003 0320 	and.w	r3, r3, #32
 800407a:	613b      	str	r3, [r7, #16]
 800407c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800407e:	4b4b      	ldr	r3, [pc, #300]	; (80041ac <MX_GPIO_Init+0x15c>)
 8004080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004082:	4a4a      	ldr	r2, [pc, #296]	; (80041ac <MX_GPIO_Init+0x15c>)
 8004084:	f043 0304 	orr.w	r3, r3, #4
 8004088:	64d3      	str	r3, [r2, #76]	; 0x4c
 800408a:	4b48      	ldr	r3, [pc, #288]	; (80041ac <MX_GPIO_Init+0x15c>)
 800408c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800408e:	f003 0304 	and.w	r3, r3, #4
 8004092:	60fb      	str	r3, [r7, #12]
 8004094:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004096:	4b45      	ldr	r3, [pc, #276]	; (80041ac <MX_GPIO_Init+0x15c>)
 8004098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800409a:	4a44      	ldr	r2, [pc, #272]	; (80041ac <MX_GPIO_Init+0x15c>)
 800409c:	f043 0301 	orr.w	r3, r3, #1
 80040a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040a2:	4b42      	ldr	r3, [pc, #264]	; (80041ac <MX_GPIO_Init+0x15c>)
 80040a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	60bb      	str	r3, [r7, #8]
 80040ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80040ae:	4b3f      	ldr	r3, [pc, #252]	; (80041ac <MX_GPIO_Init+0x15c>)
 80040b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040b2:	4a3e      	ldr	r2, [pc, #248]	; (80041ac <MX_GPIO_Init+0x15c>)
 80040b4:	f043 0302 	orr.w	r3, r3, #2
 80040b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040ba:	4b3c      	ldr	r3, [pc, #240]	; (80041ac <MX_GPIO_Init+0x15c>)
 80040bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	607b      	str	r3, [r7, #4]
 80040c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80040c6:	4b39      	ldr	r3, [pc, #228]	; (80041ac <MX_GPIO_Init+0x15c>)
 80040c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ca:	4a38      	ldr	r2, [pc, #224]	; (80041ac <MX_GPIO_Init+0x15c>)
 80040cc:	f043 0308 	orr.w	r3, r3, #8
 80040d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040d2:	4b36      	ldr	r3, [pc, #216]	; (80041ac <MX_GPIO_Init+0x15c>)
 80040d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040d6:	f003 0308 	and.w	r3, r3, #8
 80040da:	603b      	str	r3, [r7, #0]
 80040dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RUNNING_LED_Pin|WARNING_LED_Pin, GPIO_PIN_RESET);
 80040de:	2200      	movs	r2, #0
 80040e0:	21c0      	movs	r1, #192	; 0xc0
 80040e2:	4833      	ldr	r0, [pc, #204]	; (80041b0 <MX_GPIO_Init+0x160>)
 80040e4:	f004 f9ee 	bl	80084c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, GPIO_PIN_RESET);
 80040e8:	2200      	movs	r2, #0
 80040ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80040ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040f2:	f004 f9e7 	bl	80084c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, GPIO_PIN_RESET);
 80040f6:	2200      	movs	r2, #0
 80040f8:	2104      	movs	r1, #4
 80040fa:	482e      	ldr	r0, [pc, #184]	; (80041b4 <MX_GPIO_Init+0x164>)
 80040fc:	f004 f9e2 	bl	80084c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, GPIO_PIN_RESET);
 8004100:	2200      	movs	r2, #0
 8004102:	2140      	movs	r1, #64	; 0x40
 8004104:	482c      	ldr	r0, [pc, #176]	; (80041b8 <MX_GPIO_Init+0x168>)
 8004106:	f004 f9dd 	bl	80084c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RUNNING_LED_Pin|WARNING_LED_Pin;
 800410a:	23c0      	movs	r3, #192	; 0xc0
 800410c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800410e:	2301      	movs	r3, #1
 8004110:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004112:	2300      	movs	r3, #0
 8004114:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004116:	2300      	movs	r3, #0
 8004118:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800411a:	f107 0314 	add.w	r3, r7, #20
 800411e:	4619      	mov	r1, r3
 8004120:	4823      	ldr	r0, [pc, #140]	; (80041b0 <MX_GPIO_Init+0x160>)
 8004122:	f004 f84d 	bl	80081c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004126:	f44f 7380 	mov.w	r3, #256	; 0x100
 800412a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800412c:	2302      	movs	r3, #2
 800412e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004130:	2300      	movs	r3, #0
 8004132:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004134:	2300      	movs	r3, #0
 8004136:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004138:	2300      	movs	r3, #0
 800413a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800413c:	f107 0314 	add.w	r3, r7, #20
 8004140:	4619      	mov	r1, r3
 8004142:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004146:	f004 f83b 	bl	80081c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ERROR_LED_Pin;
 800414a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800414e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004150:	2301      	movs	r3, #1
 8004152:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004154:	2300      	movs	r3, #0
 8004156:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004158:	2300      	movs	r3, #0
 800415a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ERROR_LED_GPIO_Port, &GPIO_InitStruct);
 800415c:	f107 0314 	add.w	r3, r7, #20
 8004160:	4619      	mov	r1, r3
 8004162:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004166:	f004 f82b 	bl	80081c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER2_CS_Pin;
 800416a:	2304      	movs	r3, #4
 800416c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800416e:	2301      	movs	r3, #1
 8004170:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004172:	2300      	movs	r3, #0
 8004174:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004176:	2300      	movs	r3, #0
 8004178:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENCODER2_CS_GPIO_Port, &GPIO_InitStruct);
 800417a:	f107 0314 	add.w	r3, r7, #20
 800417e:	4619      	mov	r1, r3
 8004180:	480c      	ldr	r0, [pc, #48]	; (80041b4 <MX_GPIO_Init+0x164>)
 8004182:	f004 f81d 	bl	80081c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER1_CS_Pin;
 8004186:	2340      	movs	r3, #64	; 0x40
 8004188:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800418a:	2301      	movs	r3, #1
 800418c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800418e:	2300      	movs	r3, #0
 8004190:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004192:	2300      	movs	r3, #0
 8004194:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENCODER1_CS_GPIO_Port, &GPIO_InitStruct);
 8004196:	f107 0314 	add.w	r3, r7, #20
 800419a:	4619      	mov	r1, r3
 800419c:	4806      	ldr	r0, [pc, #24]	; (80041b8 <MX_GPIO_Init+0x168>)
 800419e:	f004 f80f 	bl	80081c0 <HAL_GPIO_Init>

}
 80041a2:	bf00      	nop
 80041a4:	3728      	adds	r7, #40	; 0x28
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	40021000 	.word	0x40021000
 80041b0:	48000800 	.word	0x48000800
 80041b4:	48000c00 	.word	0x48000c00
 80041b8:	48000400 	.word	0x48000400

080041bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80041c0:	f000 fe95 	bl	8004eee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80041c4:	f000 f81b 	bl	80041fe <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80041c8:	f7ff ff42 	bl	8004050 <MX_GPIO_Init>
  MX_DMA_Init();
 80041cc:	f7ff fdfc 	bl	8003dc8 <MX_DMA_Init>
  MX_FDCAN1_Init();
 80041d0:	f7ff fe60 	bl	8003e94 <MX_FDCAN1_Init>
  MX_SPI1_Init();
 80041d4:	f000 f86c 	bl	80042b0 <MX_SPI1_Init>
  MX_SPI3_Init();
 80041d8:	f000 f8a8 	bl	800432c <MX_SPI3_Init>
  MX_TIM1_Init();
 80041dc:	f000 fbcc 	bl	8004978 <MX_TIM1_Init>
  MX_ADC1_Init();
 80041e0:	f7ff faf4 	bl	80037cc <MX_ADC1_Init>
  MX_ADC2_Init();
 80041e4:	f7ff fba6 	bl	8003934 <MX_ADC2_Init>
  MX_DAC1_Init();
 80041e8:	f7ff fd76 	bl	8003cd8 <MX_DAC1_Init>
  MX_USART1_UART_Init();
 80041ec:	f000 fd7c 	bl	8004ce8 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80041f0:	f000 fc8a 	bl	8004b08 <MX_TIM3_Init>
  MX_FMAC_Init();
 80041f4:	f7ff fef8 	bl	8003fe8 <MX_FMAC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	BLDC_main();
 80041f8:	f7fc ff14 	bl	8001024 <BLDC_main>
 80041fc:	e7fc      	b.n	80041f8 <main+0x3c>

080041fe <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b094      	sub	sp, #80	; 0x50
 8004202:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004204:	f107 0318 	add.w	r3, r7, #24
 8004208:	2238      	movs	r2, #56	; 0x38
 800420a:	2100      	movs	r1, #0
 800420c:	4618      	mov	r0, r3
 800420e:	f009 fcdb 	bl	800dbc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004212:	1d3b      	adds	r3, r7, #4
 8004214:	2200      	movs	r2, #0
 8004216:	601a      	str	r2, [r3, #0]
 8004218:	605a      	str	r2, [r3, #4]
 800421a:	609a      	str	r2, [r3, #8]
 800421c:	60da      	str	r2, [r3, #12]
 800421e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8004220:	2000      	movs	r0, #0
 8004222:	f004 f967 	bl	80084f4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004226:	2302      	movs	r3, #2
 8004228:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800422a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800422e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004230:	2340      	movs	r3, #64	; 0x40
 8004232:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004234:	2302      	movs	r3, #2
 8004236:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004238:	2302      	movs	r3, #2
 800423a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800423c:	2304      	movs	r3, #4
 800423e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8004240:	2350      	movs	r3, #80	; 0x50
 8004242:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004244:	2302      	movs	r3, #2
 8004246:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8004248:	2308      	movs	r3, #8
 800424a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800424c:	2302      	movs	r3, #2
 800424e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004250:	f107 0318 	add.w	r3, r7, #24
 8004254:	4618      	mov	r0, r3
 8004256:	f004 fa01 	bl	800865c <HAL_RCC_OscConfig>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d001      	beq.n	8004264 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8004260:	f000 f820 	bl	80042a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004264:	230f      	movs	r3, #15
 8004266:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004268:	2303      	movs	r3, #3
 800426a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800426c:	2300      	movs	r3, #0
 800426e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004270:	2300      	movs	r3, #0
 8004272:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004274:	2300      	movs	r3, #0
 8004276:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004278:	1d3b      	adds	r3, r7, #4
 800427a:	2104      	movs	r1, #4
 800427c:	4618      	mov	r0, r3
 800427e:	f004 fd05 	bl	8008c8c <HAL_RCC_ClockConfig>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d001      	beq.n	800428c <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8004288:	f000 f80c 	bl	80042a4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_16);
 800428c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004290:	f04f 7140 	mov.w	r1, #50331648	; 0x3000000
 8004294:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004298:	f004 fe34 	bl	8008f04 <HAL_RCC_MCOConfig>
}
 800429c:	bf00      	nop
 800429e:	3750      	adds	r7, #80	; 0x50
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80042a4:	b480      	push	{r7}
 80042a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80042a8:	b672      	cpsid	i
}
 80042aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80042ac:	e7fe      	b.n	80042ac <Error_Handler+0x8>
	...

080042b0 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi3_rx;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80042b4:	4b1b      	ldr	r3, [pc, #108]	; (8004324 <MX_SPI1_Init+0x74>)
 80042b6:	4a1c      	ldr	r2, [pc, #112]	; (8004328 <MX_SPI1_Init+0x78>)
 80042b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80042ba:	4b1a      	ldr	r3, [pc, #104]	; (8004324 <MX_SPI1_Init+0x74>)
 80042bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80042c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80042c2:	4b18      	ldr	r3, [pc, #96]	; (8004324 <MX_SPI1_Init+0x74>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80042c8:	4b16      	ldr	r3, [pc, #88]	; (8004324 <MX_SPI1_Init+0x74>)
 80042ca:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80042ce:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80042d0:	4b14      	ldr	r3, [pc, #80]	; (8004324 <MX_SPI1_Init+0x74>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80042d6:	4b13      	ldr	r3, [pc, #76]	; (8004324 <MX_SPI1_Init+0x74>)
 80042d8:	2201      	movs	r2, #1
 80042da:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80042dc:	4b11      	ldr	r3, [pc, #68]	; (8004324 <MX_SPI1_Init+0x74>)
 80042de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042e2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80042e4:	4b0f      	ldr	r3, [pc, #60]	; (8004324 <MX_SPI1_Init+0x74>)
 80042e6:	2228      	movs	r2, #40	; 0x28
 80042e8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80042ea:	4b0e      	ldr	r3, [pc, #56]	; (8004324 <MX_SPI1_Init+0x74>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80042f0:	4b0c      	ldr	r3, [pc, #48]	; (8004324 <MX_SPI1_Init+0x74>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042f6:	4b0b      	ldr	r3, [pc, #44]	; (8004324 <MX_SPI1_Init+0x74>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80042fc:	4b09      	ldr	r3, [pc, #36]	; (8004324 <MX_SPI1_Init+0x74>)
 80042fe:	2207      	movs	r2, #7
 8004300:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004302:	4b08      	ldr	r3, [pc, #32]	; (8004324 <MX_SPI1_Init+0x74>)
 8004304:	2200      	movs	r2, #0
 8004306:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004308:	4b06      	ldr	r3, [pc, #24]	; (8004324 <MX_SPI1_Init+0x74>)
 800430a:	2200      	movs	r2, #0
 800430c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800430e:	4805      	ldr	r0, [pc, #20]	; (8004324 <MX_SPI1_Init+0x74>)
 8004310:	f005 f90a 	bl	8009528 <HAL_SPI_Init>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d001      	beq.n	800431e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800431a:	f7ff ffc3 	bl	80042a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800431e:	bf00      	nop
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	200013f4 	.word	0x200013f4
 8004328:	40013000 	.word	0x40013000

0800432c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8004330:	4b1b      	ldr	r3, [pc, #108]	; (80043a0 <MX_SPI3_Init+0x74>)
 8004332:	4a1c      	ldr	r2, [pc, #112]	; (80043a4 <MX_SPI3_Init+0x78>)
 8004334:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004336:	4b1a      	ldr	r3, [pc, #104]	; (80043a0 <MX_SPI3_Init+0x74>)
 8004338:	f44f 7282 	mov.w	r2, #260	; 0x104
 800433c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800433e:	4b18      	ldr	r3, [pc, #96]	; (80043a0 <MX_SPI3_Init+0x74>)
 8004340:	2200      	movs	r2, #0
 8004342:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004344:	4b16      	ldr	r3, [pc, #88]	; (80043a0 <MX_SPI3_Init+0x74>)
 8004346:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800434a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800434c:	4b14      	ldr	r3, [pc, #80]	; (80043a0 <MX_SPI3_Init+0x74>)
 800434e:	2200      	movs	r2, #0
 8004350:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004352:	4b13      	ldr	r3, [pc, #76]	; (80043a0 <MX_SPI3_Init+0x74>)
 8004354:	2201      	movs	r2, #1
 8004356:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004358:	4b11      	ldr	r3, [pc, #68]	; (80043a0 <MX_SPI3_Init+0x74>)
 800435a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800435e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8004360:	4b0f      	ldr	r3, [pc, #60]	; (80043a0 <MX_SPI3_Init+0x74>)
 8004362:	2228      	movs	r2, #40	; 0x28
 8004364:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004366:	4b0e      	ldr	r3, [pc, #56]	; (80043a0 <MX_SPI3_Init+0x74>)
 8004368:	2200      	movs	r2, #0
 800436a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800436c:	4b0c      	ldr	r3, [pc, #48]	; (80043a0 <MX_SPI3_Init+0x74>)
 800436e:	2200      	movs	r2, #0
 8004370:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004372:	4b0b      	ldr	r3, [pc, #44]	; (80043a0 <MX_SPI3_Init+0x74>)
 8004374:	2200      	movs	r2, #0
 8004376:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8004378:	4b09      	ldr	r3, [pc, #36]	; (80043a0 <MX_SPI3_Init+0x74>)
 800437a:	2207      	movs	r2, #7
 800437c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800437e:	4b08      	ldr	r3, [pc, #32]	; (80043a0 <MX_SPI3_Init+0x74>)
 8004380:	2200      	movs	r2, #0
 8004382:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004384:	4b06      	ldr	r3, [pc, #24]	; (80043a0 <MX_SPI3_Init+0x74>)
 8004386:	2200      	movs	r2, #0
 8004388:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800438a:	4805      	ldr	r0, [pc, #20]	; (80043a0 <MX_SPI3_Init+0x74>)
 800438c:	f005 f8cc 	bl	8009528 <HAL_SPI_Init>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d001      	beq.n	800439a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8004396:	f7ff ff85 	bl	80042a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800439a:	bf00      	nop
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	20001458 	.word	0x20001458
 80043a4:	40003c00 	.word	0x40003c00

080043a8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b08c      	sub	sp, #48	; 0x30
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043b0:	f107 031c 	add.w	r3, r7, #28
 80043b4:	2200      	movs	r2, #0
 80043b6:	601a      	str	r2, [r3, #0]
 80043b8:	605a      	str	r2, [r3, #4]
 80043ba:	609a      	str	r2, [r3, #8]
 80043bc:	60da      	str	r2, [r3, #12]
 80043be:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a89      	ldr	r2, [pc, #548]	; (80045ec <HAL_SPI_MspInit+0x244>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	f040 8083 	bne.w	80044d2 <HAL_SPI_MspInit+0x12a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80043cc:	4b88      	ldr	r3, [pc, #544]	; (80045f0 <HAL_SPI_MspInit+0x248>)
 80043ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043d0:	4a87      	ldr	r2, [pc, #540]	; (80045f0 <HAL_SPI_MspInit+0x248>)
 80043d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80043d6:	6613      	str	r3, [r2, #96]	; 0x60
 80043d8:	4b85      	ldr	r3, [pc, #532]	; (80045f0 <HAL_SPI_MspInit+0x248>)
 80043da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043e0:	61bb      	str	r3, [r7, #24]
 80043e2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043e4:	4b82      	ldr	r3, [pc, #520]	; (80045f0 <HAL_SPI_MspInit+0x248>)
 80043e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043e8:	4a81      	ldr	r2, [pc, #516]	; (80045f0 <HAL_SPI_MspInit+0x248>)
 80043ea:	f043 0302 	orr.w	r3, r3, #2
 80043ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80043f0:	4b7f      	ldr	r3, [pc, #508]	; (80045f0 <HAL_SPI_MspInit+0x248>)
 80043f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043f4:	f003 0302 	and.w	r3, r3, #2
 80043f8:	617b      	str	r3, [r7, #20]
 80043fa:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80043fc:	2338      	movs	r3, #56	; 0x38
 80043fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004400:	2302      	movs	r3, #2
 8004402:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004404:	2300      	movs	r3, #0
 8004406:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004408:	2300      	movs	r3, #0
 800440a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800440c:	2305      	movs	r3, #5
 800440e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004410:	f107 031c 	add.w	r3, r7, #28
 8004414:	4619      	mov	r1, r3
 8004416:	4877      	ldr	r0, [pc, #476]	; (80045f4 <HAL_SPI_MspInit+0x24c>)
 8004418:	f003 fed2 	bl	80081c0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel3;
 800441c:	4b76      	ldr	r3, [pc, #472]	; (80045f8 <HAL_SPI_MspInit+0x250>)
 800441e:	4a77      	ldr	r2, [pc, #476]	; (80045fc <HAL_SPI_MspInit+0x254>)
 8004420:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8004422:	4b75      	ldr	r3, [pc, #468]	; (80045f8 <HAL_SPI_MspInit+0x250>)
 8004424:	220a      	movs	r2, #10
 8004426:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004428:	4b73      	ldr	r3, [pc, #460]	; (80045f8 <HAL_SPI_MspInit+0x250>)
 800442a:	2200      	movs	r2, #0
 800442c:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800442e:	4b72      	ldr	r3, [pc, #456]	; (80045f8 <HAL_SPI_MspInit+0x250>)
 8004430:	2200      	movs	r2, #0
 8004432:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004434:	4b70      	ldr	r3, [pc, #448]	; (80045f8 <HAL_SPI_MspInit+0x250>)
 8004436:	2280      	movs	r2, #128	; 0x80
 8004438:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800443a:	4b6f      	ldr	r3, [pc, #444]	; (80045f8 <HAL_SPI_MspInit+0x250>)
 800443c:	2200      	movs	r2, #0
 800443e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004440:	4b6d      	ldr	r3, [pc, #436]	; (80045f8 <HAL_SPI_MspInit+0x250>)
 8004442:	2200      	movs	r2, #0
 8004444:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8004446:	4b6c      	ldr	r3, [pc, #432]	; (80045f8 <HAL_SPI_MspInit+0x250>)
 8004448:	2200      	movs	r2, #0
 800444a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800444c:	4b6a      	ldr	r3, [pc, #424]	; (80045f8 <HAL_SPI_MspInit+0x250>)
 800444e:	2200      	movs	r2, #0
 8004450:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8004452:	4869      	ldr	r0, [pc, #420]	; (80045f8 <HAL_SPI_MspInit+0x250>)
 8004454:	f002 fd9c 	bl	8006f90 <HAL_DMA_Init>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 800445e:	f7ff ff21 	bl	80042a4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a64      	ldr	r2, [pc, #400]	; (80045f8 <HAL_SPI_MspInit+0x250>)
 8004466:	659a      	str	r2, [r3, #88]	; 0x58
 8004468:	4a63      	ldr	r2, [pc, #396]	; (80045f8 <HAL_SPI_MspInit+0x250>)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel4;
 800446e:	4b64      	ldr	r3, [pc, #400]	; (8004600 <HAL_SPI_MspInit+0x258>)
 8004470:	4a64      	ldr	r2, [pc, #400]	; (8004604 <HAL_SPI_MspInit+0x25c>)
 8004472:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8004474:	4b62      	ldr	r3, [pc, #392]	; (8004600 <HAL_SPI_MspInit+0x258>)
 8004476:	220b      	movs	r2, #11
 8004478:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800447a:	4b61      	ldr	r3, [pc, #388]	; (8004600 <HAL_SPI_MspInit+0x258>)
 800447c:	2210      	movs	r2, #16
 800447e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004480:	4b5f      	ldr	r3, [pc, #380]	; (8004600 <HAL_SPI_MspInit+0x258>)
 8004482:	2200      	movs	r2, #0
 8004484:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004486:	4b5e      	ldr	r3, [pc, #376]	; (8004600 <HAL_SPI_MspInit+0x258>)
 8004488:	2280      	movs	r2, #128	; 0x80
 800448a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800448c:	4b5c      	ldr	r3, [pc, #368]	; (8004600 <HAL_SPI_MspInit+0x258>)
 800448e:	2200      	movs	r2, #0
 8004490:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004492:	4b5b      	ldr	r3, [pc, #364]	; (8004600 <HAL_SPI_MspInit+0x258>)
 8004494:	2200      	movs	r2, #0
 8004496:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8004498:	4b59      	ldr	r3, [pc, #356]	; (8004600 <HAL_SPI_MspInit+0x258>)
 800449a:	2200      	movs	r2, #0
 800449c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800449e:	4b58      	ldr	r3, [pc, #352]	; (8004600 <HAL_SPI_MspInit+0x258>)
 80044a0:	2200      	movs	r2, #0
 80044a2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80044a4:	4856      	ldr	r0, [pc, #344]	; (8004600 <HAL_SPI_MspInit+0x258>)
 80044a6:	f002 fd73 	bl	8006f90 <HAL_DMA_Init>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d001      	beq.n	80044b4 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 80044b0:	f7ff fef8 	bl	80042a4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a52      	ldr	r2, [pc, #328]	; (8004600 <HAL_SPI_MspInit+0x258>)
 80044b8:	655a      	str	r2, [r3, #84]	; 0x54
 80044ba:	4a51      	ldr	r2, [pc, #324]	; (8004600 <HAL_SPI_MspInit+0x258>)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80044c0:	2200      	movs	r2, #0
 80044c2:	2100      	movs	r1, #0
 80044c4:	2023      	movs	r0, #35	; 0x23
 80044c6:	f002 fb12 	bl	8006aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80044ca:	2023      	movs	r0, #35	; 0x23
 80044cc:	f002 fb29 	bl	8006b22 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80044d0:	e088      	b.n	80045e4 <HAL_SPI_MspInit+0x23c>
  else if(spiHandle->Instance==SPI3)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a4c      	ldr	r2, [pc, #304]	; (8004608 <HAL_SPI_MspInit+0x260>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	f040 8083 	bne.w	80045e4 <HAL_SPI_MspInit+0x23c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80044de:	4b44      	ldr	r3, [pc, #272]	; (80045f0 <HAL_SPI_MspInit+0x248>)
 80044e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e2:	4a43      	ldr	r2, [pc, #268]	; (80045f0 <HAL_SPI_MspInit+0x248>)
 80044e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044e8:	6593      	str	r3, [r2, #88]	; 0x58
 80044ea:	4b41      	ldr	r3, [pc, #260]	; (80045f0 <HAL_SPI_MspInit+0x248>)
 80044ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044f2:	613b      	str	r3, [r7, #16]
 80044f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044f6:	4b3e      	ldr	r3, [pc, #248]	; (80045f0 <HAL_SPI_MspInit+0x248>)
 80044f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044fa:	4a3d      	ldr	r2, [pc, #244]	; (80045f0 <HAL_SPI_MspInit+0x248>)
 80044fc:	f043 0304 	orr.w	r3, r3, #4
 8004500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004502:	4b3b      	ldr	r3, [pc, #236]	; (80045f0 <HAL_SPI_MspInit+0x248>)
 8004504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004506:	f003 0304 	and.w	r3, r3, #4
 800450a:	60fb      	str	r3, [r7, #12]
 800450c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800450e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004512:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004514:	2302      	movs	r3, #2
 8004516:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004518:	2300      	movs	r3, #0
 800451a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800451c:	2300      	movs	r3, #0
 800451e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004520:	2306      	movs	r3, #6
 8004522:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004524:	f107 031c 	add.w	r3, r7, #28
 8004528:	4619      	mov	r1, r3
 800452a:	4838      	ldr	r0, [pc, #224]	; (800460c <HAL_SPI_MspInit+0x264>)
 800452c:	f003 fe48 	bl	80081c0 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA2_Channel1;
 8004530:	4b37      	ldr	r3, [pc, #220]	; (8004610 <HAL_SPI_MspInit+0x268>)
 8004532:	4a38      	ldr	r2, [pc, #224]	; (8004614 <HAL_SPI_MspInit+0x26c>)
 8004534:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 8004536:	4b36      	ldr	r3, [pc, #216]	; (8004610 <HAL_SPI_MspInit+0x268>)
 8004538:	220e      	movs	r2, #14
 800453a:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800453c:	4b34      	ldr	r3, [pc, #208]	; (8004610 <HAL_SPI_MspInit+0x268>)
 800453e:	2200      	movs	r2, #0
 8004540:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004542:	4b33      	ldr	r3, [pc, #204]	; (8004610 <HAL_SPI_MspInit+0x268>)
 8004544:	2200      	movs	r2, #0
 8004546:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004548:	4b31      	ldr	r3, [pc, #196]	; (8004610 <HAL_SPI_MspInit+0x268>)
 800454a:	2280      	movs	r2, #128	; 0x80
 800454c:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800454e:	4b30      	ldr	r3, [pc, #192]	; (8004610 <HAL_SPI_MspInit+0x268>)
 8004550:	2200      	movs	r2, #0
 8004552:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004554:	4b2e      	ldr	r3, [pc, #184]	; (8004610 <HAL_SPI_MspInit+0x268>)
 8004556:	2200      	movs	r2, #0
 8004558:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 800455a:	4b2d      	ldr	r3, [pc, #180]	; (8004610 <HAL_SPI_MspInit+0x268>)
 800455c:	2200      	movs	r2, #0
 800455e:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004560:	4b2b      	ldr	r3, [pc, #172]	; (8004610 <HAL_SPI_MspInit+0x268>)
 8004562:	2200      	movs	r2, #0
 8004564:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8004566:	482a      	ldr	r0, [pc, #168]	; (8004610 <HAL_SPI_MspInit+0x268>)
 8004568:	f002 fd12 	bl	8006f90 <HAL_DMA_Init>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d001      	beq.n	8004576 <HAL_SPI_MspInit+0x1ce>
      Error_Handler();
 8004572:	f7ff fe97 	bl	80042a4 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a25      	ldr	r2, [pc, #148]	; (8004610 <HAL_SPI_MspInit+0x268>)
 800457a:	659a      	str	r2, [r3, #88]	; 0x58
 800457c:	4a24      	ldr	r2, [pc, #144]	; (8004610 <HAL_SPI_MspInit+0x268>)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_spi3_tx.Instance = DMA2_Channel2;
 8004582:	4b25      	ldr	r3, [pc, #148]	; (8004618 <HAL_SPI_MspInit+0x270>)
 8004584:	4a25      	ldr	r2, [pc, #148]	; (800461c <HAL_SPI_MspInit+0x274>)
 8004586:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 8004588:	4b23      	ldr	r3, [pc, #140]	; (8004618 <HAL_SPI_MspInit+0x270>)
 800458a:	220f      	movs	r2, #15
 800458c:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800458e:	4b22      	ldr	r3, [pc, #136]	; (8004618 <HAL_SPI_MspInit+0x270>)
 8004590:	2210      	movs	r2, #16
 8004592:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004594:	4b20      	ldr	r3, [pc, #128]	; (8004618 <HAL_SPI_MspInit+0x270>)
 8004596:	2200      	movs	r2, #0
 8004598:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800459a:	4b1f      	ldr	r3, [pc, #124]	; (8004618 <HAL_SPI_MspInit+0x270>)
 800459c:	2280      	movs	r2, #128	; 0x80
 800459e:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80045a0:	4b1d      	ldr	r3, [pc, #116]	; (8004618 <HAL_SPI_MspInit+0x270>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80045a6:	4b1c      	ldr	r3, [pc, #112]	; (8004618 <HAL_SPI_MspInit+0x270>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 80045ac:	4b1a      	ldr	r3, [pc, #104]	; (8004618 <HAL_SPI_MspInit+0x270>)
 80045ae:	2200      	movs	r2, #0
 80045b0:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80045b2:	4b19      	ldr	r3, [pc, #100]	; (8004618 <HAL_SPI_MspInit+0x270>)
 80045b4:	2200      	movs	r2, #0
 80045b6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80045b8:	4817      	ldr	r0, [pc, #92]	; (8004618 <HAL_SPI_MspInit+0x270>)
 80045ba:	f002 fce9 	bl	8006f90 <HAL_DMA_Init>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d001      	beq.n	80045c8 <HAL_SPI_MspInit+0x220>
      Error_Handler();
 80045c4:	f7ff fe6e 	bl	80042a4 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4a13      	ldr	r2, [pc, #76]	; (8004618 <HAL_SPI_MspInit+0x270>)
 80045cc:	655a      	str	r2, [r3, #84]	; 0x54
 80045ce:	4a12      	ldr	r2, [pc, #72]	; (8004618 <HAL_SPI_MspInit+0x270>)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80045d4:	2200      	movs	r2, #0
 80045d6:	2100      	movs	r1, #0
 80045d8:	2033      	movs	r0, #51	; 0x33
 80045da:	f002 fa88 	bl	8006aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80045de:	2033      	movs	r0, #51	; 0x33
 80045e0:	f002 fa9f 	bl	8006b22 <HAL_NVIC_EnableIRQ>
}
 80045e4:	bf00      	nop
 80045e6:	3730      	adds	r7, #48	; 0x30
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	40013000 	.word	0x40013000
 80045f0:	40021000 	.word	0x40021000
 80045f4:	48000400 	.word	0x48000400
 80045f8:	200014bc 	.word	0x200014bc
 80045fc:	40020030 	.word	0x40020030
 8004600:	2000151c 	.word	0x2000151c
 8004604:	40020044 	.word	0x40020044
 8004608:	40003c00 	.word	0x40003c00
 800460c:	48000800 	.word	0x48000800
 8004610:	2000157c 	.word	0x2000157c
 8004614:	40020408 	.word	0x40020408
 8004618:	200015dc 	.word	0x200015dc
 800461c:	4002041c 	.word	0x4002041c

08004620 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004626:	4b0f      	ldr	r3, [pc, #60]	; (8004664 <HAL_MspInit+0x44>)
 8004628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800462a:	4a0e      	ldr	r2, [pc, #56]	; (8004664 <HAL_MspInit+0x44>)
 800462c:	f043 0301 	orr.w	r3, r3, #1
 8004630:	6613      	str	r3, [r2, #96]	; 0x60
 8004632:	4b0c      	ldr	r3, [pc, #48]	; (8004664 <HAL_MspInit+0x44>)
 8004634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	607b      	str	r3, [r7, #4]
 800463c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800463e:	4b09      	ldr	r3, [pc, #36]	; (8004664 <HAL_MspInit+0x44>)
 8004640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004642:	4a08      	ldr	r2, [pc, #32]	; (8004664 <HAL_MspInit+0x44>)
 8004644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004648:	6593      	str	r3, [r2, #88]	; 0x58
 800464a:	4b06      	ldr	r3, [pc, #24]	; (8004664 <HAL_MspInit+0x44>)
 800464c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800464e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004652:	603b      	str	r3, [r7, #0]
 8004654:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004656:	f003 fff1 	bl	800863c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800465a:	bf00      	nop
 800465c:	3708      	adds	r7, #8
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	40021000 	.word	0x40021000

08004668 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004668:	b480      	push	{r7}
 800466a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800466c:	e7fe      	b.n	800466c <NMI_Handler+0x4>

0800466e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800466e:	b480      	push	{r7}
 8004670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004672:	e7fe      	b.n	8004672 <HardFault_Handler+0x4>

08004674 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004674:	b480      	push	{r7}
 8004676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004678:	e7fe      	b.n	8004678 <MemManage_Handler+0x4>

0800467a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800467a:	b480      	push	{r7}
 800467c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800467e:	e7fe      	b.n	800467e <BusFault_Handler+0x4>

08004680 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004680:	b480      	push	{r7}
 8004682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004684:	e7fe      	b.n	8004684 <UsageFault_Handler+0x4>

08004686 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004686:	b480      	push	{r7}
 8004688:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800468a:	bf00      	nop
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004694:	b480      	push	{r7}
 8004696:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004698:	bf00      	nop
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr

080046a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80046a2:	b480      	push	{r7}
 80046a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80046a6:	bf00      	nop
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80046b4:	f000 fc6e 	bl	8004f94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80046b8:	bf00      	nop
 80046ba:	bd80      	pop	{r7, pc}

080046bc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80046c0:	4802      	ldr	r0, [pc, #8]	; (80046cc <DMA1_Channel1_IRQHandler+0x10>)
 80046c2:	f002 fe48 	bl	8007356 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80046c6:	bf00      	nop
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	20001280 	.word	0x20001280

080046d0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80046d4:	4802      	ldr	r0, [pc, #8]	; (80046e0 <DMA1_Channel2_IRQHandler+0x10>)
 80046d6:	f002 fe3e 	bl	8007356 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80046da:	bf00      	nop
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	200012e0 	.word	0x200012e0

080046e4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80046e8:	4802      	ldr	r0, [pc, #8]	; (80046f4 <DMA1_Channel3_IRQHandler+0x10>)
 80046ea:	f002 fe34 	bl	8007356 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80046ee:	bf00      	nop
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	200014bc 	.word	0x200014bc

080046f8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80046fc:	4802      	ldr	r0, [pc, #8]	; (8004708 <DMA1_Channel4_IRQHandler+0x10>)
 80046fe:	f002 fe2a 	bl	8007356 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8004702:	bf00      	nop
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	2000151c 	.word	0x2000151c

0800470c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004710:	4803      	ldr	r0, [pc, #12]	; (8004720 <ADC1_2_IRQHandler+0x14>)
 8004712:	f001 f901 	bl	8005918 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8004716:	4803      	ldr	r0, [pc, #12]	; (8004724 <ADC1_2_IRQHandler+0x18>)
 8004718:	f001 f8fe 	bl	8005918 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800471c:	bf00      	nop
 800471e:	bd80      	pop	{r7, pc}
 8004720:	200011a8 	.word	0x200011a8
 8004724:	20001214 	.word	0x20001214

08004728 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800472c:	4802      	ldr	r0, [pc, #8]	; (8004738 <FDCAN1_IT0_IRQHandler+0x10>)
 800472e:	f003 faa3 	bl	8007c78 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8004732:	bf00      	nop
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	20001358 	.word	0x20001358

0800473c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004740:	4802      	ldr	r0, [pc, #8]	; (800474c <TIM3_IRQHandler+0x10>)
 8004742:	f005 ff13 	bl	800a56c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004746:	bf00      	nop
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	2000168c 	.word	0x2000168c

08004750 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004754:	4802      	ldr	r0, [pc, #8]	; (8004760 <SPI1_IRQHandler+0x10>)
 8004756:	f005 f91f 	bl	8009998 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800475a:	bf00      	nop
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	200013f4 	.word	0x200013f4

08004764 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004768:	4802      	ldr	r0, [pc, #8]	; (8004774 <USART1_IRQHandler+0x10>)
 800476a:	f007 fa21 	bl	800bbb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800476e:	bf00      	nop
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	200016d8 	.word	0x200016d8

08004778 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800477c:	4802      	ldr	r0, [pc, #8]	; (8004788 <SPI3_IRQHandler+0x10>)
 800477e:	f005 f90b 	bl	8009998 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8004782:	bf00      	nop
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	20001458 	.word	0x20001458

0800478c <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8004790:	4802      	ldr	r0, [pc, #8]	; (800479c <DMA2_Channel1_IRQHandler+0x10>)
 8004792:	f002 fde0 	bl	8007356 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8004796:	bf00      	nop
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	2000157c 	.word	0x2000157c

080047a0 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80047a4:	4802      	ldr	r0, [pc, #8]	; (80047b0 <DMA2_Channel2_IRQHandler+0x10>)
 80047a6:	f002 fdd6 	bl	8007356 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 80047aa:	bf00      	nop
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	200015dc 	.word	0x200015dc

080047b4 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80047b8:	4802      	ldr	r0, [pc, #8]	; (80047c4 <DMA2_Channel3_IRQHandler+0x10>)
 80047ba:	f002 fdcc 	bl	8007356 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 80047be:	bf00      	nop
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	20001768 	.word	0x20001768

080047c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80047c8:	b480      	push	{r7}
 80047ca:	af00      	add	r7, sp, #0
  return 1;
 80047cc:	2301      	movs	r3, #1
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <_kill>:

int _kill(int pid, int sig)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80047e2:	f009 fa43 	bl	800dc6c <__errno>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2216      	movs	r2, #22
 80047ea:	601a      	str	r2, [r3, #0]
  return -1;
 80047ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3708      	adds	r7, #8
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <_exit>:

void _exit (int status)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004800:	f04f 31ff 	mov.w	r1, #4294967295
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f7ff ffe7 	bl	80047d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800480a:	e7fe      	b.n	800480a <_exit+0x12>

0800480c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b086      	sub	sp, #24
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004818:	2300      	movs	r3, #0
 800481a:	617b      	str	r3, [r7, #20]
 800481c:	e00a      	b.n	8004834 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800481e:	f3af 8000 	nop.w
 8004822:	4601      	mov	r1, r0
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	1c5a      	adds	r2, r3, #1
 8004828:	60ba      	str	r2, [r7, #8]
 800482a:	b2ca      	uxtb	r2, r1
 800482c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	3301      	adds	r3, #1
 8004832:	617b      	str	r3, [r7, #20]
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	429a      	cmp	r2, r3
 800483a:	dbf0      	blt.n	800481e <_read+0x12>
  }

  return len;
 800483c:	687b      	ldr	r3, [r7, #4]
}
 800483e:	4618      	mov	r0, r3
 8004840:	3718      	adds	r7, #24
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004846:	b580      	push	{r7, lr}
 8004848:	b086      	sub	sp, #24
 800484a:	af00      	add	r7, sp, #0
 800484c:	60f8      	str	r0, [r7, #12]
 800484e:	60b9      	str	r1, [r7, #8]
 8004850:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004852:	2300      	movs	r3, #0
 8004854:	617b      	str	r3, [r7, #20]
 8004856:	e009      	b.n	800486c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	1c5a      	adds	r2, r3, #1
 800485c:	60ba      	str	r2, [r7, #8]
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	4618      	mov	r0, r3
 8004862:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	3301      	adds	r3, #1
 800486a:	617b      	str	r3, [r7, #20]
 800486c:	697a      	ldr	r2, [r7, #20]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	429a      	cmp	r2, r3
 8004872:	dbf1      	blt.n	8004858 <_write+0x12>
  }
  return len;
 8004874:	687b      	ldr	r3, [r7, #4]
}
 8004876:	4618      	mov	r0, r3
 8004878:	3718      	adds	r7, #24
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <_close>:

int _close(int file)
{
 800487e:	b480      	push	{r7}
 8004880:	b083      	sub	sp, #12
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004886:	f04f 33ff 	mov.w	r3, #4294967295
}
 800488a:	4618      	mov	r0, r3
 800488c:	370c      	adds	r7, #12
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr

08004896 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004896:	b480      	push	{r7}
 8004898:	b083      	sub	sp, #12
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
 800489e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80048a6:	605a      	str	r2, [r3, #4]
  return 0;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr

080048b6 <_isatty>:

int _isatty(int file)
{
 80048b6:	b480      	push	{r7}
 80048b8:	b083      	sub	sp, #12
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80048be:	2301      	movs	r3, #1
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
	...

080048e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80048f0:	4a14      	ldr	r2, [pc, #80]	; (8004944 <_sbrk+0x5c>)
 80048f2:	4b15      	ldr	r3, [pc, #84]	; (8004948 <_sbrk+0x60>)
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80048fc:	4b13      	ldr	r3, [pc, #76]	; (800494c <_sbrk+0x64>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d102      	bne.n	800490a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004904:	4b11      	ldr	r3, [pc, #68]	; (800494c <_sbrk+0x64>)
 8004906:	4a12      	ldr	r2, [pc, #72]	; (8004950 <_sbrk+0x68>)
 8004908:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800490a:	4b10      	ldr	r3, [pc, #64]	; (800494c <_sbrk+0x64>)
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4413      	add	r3, r2
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	429a      	cmp	r2, r3
 8004916:	d207      	bcs.n	8004928 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004918:	f009 f9a8 	bl	800dc6c <__errno>
 800491c:	4603      	mov	r3, r0
 800491e:	220c      	movs	r2, #12
 8004920:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004922:	f04f 33ff 	mov.w	r3, #4294967295
 8004926:	e009      	b.n	800493c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004928:	4b08      	ldr	r3, [pc, #32]	; (800494c <_sbrk+0x64>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800492e:	4b07      	ldr	r3, [pc, #28]	; (800494c <_sbrk+0x64>)
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4413      	add	r3, r2
 8004936:	4a05      	ldr	r2, [pc, #20]	; (800494c <_sbrk+0x64>)
 8004938:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800493a:	68fb      	ldr	r3, [r7, #12]
}
 800493c:	4618      	mov	r0, r3
 800493e:	3718      	adds	r7, #24
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	20008000 	.word	0x20008000
 8004948:	00000400 	.word	0x00000400
 800494c:	2000163c 	.word	0x2000163c
 8004950:	20001918 	.word	0x20001918

08004954 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004954:	b480      	push	{r7}
 8004956:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004958:	4b06      	ldr	r3, [pc, #24]	; (8004974 <SystemInit+0x20>)
 800495a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800495e:	4a05      	ldr	r2, [pc, #20]	; (8004974 <SystemInit+0x20>)
 8004960:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004964:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004968:	bf00      	nop
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	e000ed00 	.word	0xe000ed00

08004978 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b09c      	sub	sp, #112	; 0x70
 800497c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800497e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004982:	2200      	movs	r2, #0
 8004984:	601a      	str	r2, [r3, #0]
 8004986:	605a      	str	r2, [r3, #4]
 8004988:	609a      	str	r2, [r3, #8]
 800498a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800498c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004990:	2200      	movs	r2, #0
 8004992:	601a      	str	r2, [r3, #0]
 8004994:	605a      	str	r2, [r3, #4]
 8004996:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004998:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800499c:	2200      	movs	r2, #0
 800499e:	601a      	str	r2, [r3, #0]
 80049a0:	605a      	str	r2, [r3, #4]
 80049a2:	609a      	str	r2, [r3, #8]
 80049a4:	60da      	str	r2, [r3, #12]
 80049a6:	611a      	str	r2, [r3, #16]
 80049a8:	615a      	str	r2, [r3, #20]
 80049aa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80049ac:	1d3b      	adds	r3, r7, #4
 80049ae:	2234      	movs	r2, #52	; 0x34
 80049b0:	2100      	movs	r1, #0
 80049b2:	4618      	mov	r0, r3
 80049b4:	f009 f908 	bl	800dbc8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80049b8:	4b51      	ldr	r3, [pc, #324]	; (8004b00 <MX_TIM1_Init+0x188>)
 80049ba:	4a52      	ldr	r2, [pc, #328]	; (8004b04 <MX_TIM1_Init+0x18c>)
 80049bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80049be:	4b50      	ldr	r3, [pc, #320]	; (8004b00 <MX_TIM1_Init+0x188>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80049c4:	4b4e      	ldr	r3, [pc, #312]	; (8004b00 <MX_TIM1_Init+0x188>)
 80049c6:	2220      	movs	r2, #32
 80049c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1499;
 80049ca:	4b4d      	ldr	r3, [pc, #308]	; (8004b00 <MX_TIM1_Init+0x188>)
 80049cc:	f240 52db 	movw	r2, #1499	; 0x5db
 80049d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049d2:	4b4b      	ldr	r3, [pc, #300]	; (8004b00 <MX_TIM1_Init+0x188>)
 80049d4:	2200      	movs	r2, #0
 80049d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80049d8:	4b49      	ldr	r3, [pc, #292]	; (8004b00 <MX_TIM1_Init+0x188>)
 80049da:	2200      	movs	r2, #0
 80049dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80049de:	4b48      	ldr	r3, [pc, #288]	; (8004b00 <MX_TIM1_Init+0x188>)
 80049e0:	2280      	movs	r2, #128	; 0x80
 80049e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80049e4:	4846      	ldr	r0, [pc, #280]	; (8004b00 <MX_TIM1_Init+0x188>)
 80049e6:	f005 fb9d 	bl	800a124 <HAL_TIM_Base_Init>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d001      	beq.n	80049f4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80049f0:	f7ff fc58 	bl	80042a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80049f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049f8:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80049fa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80049fe:	4619      	mov	r1, r3
 8004a00:	483f      	ldr	r0, [pc, #252]	; (8004b00 <MX_TIM1_Init+0x188>)
 8004a02:	f006 f847 	bl	800aa94 <HAL_TIM_ConfigClockSource>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d001      	beq.n	8004a10 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8004a0c:	f7ff fc4a 	bl	80042a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004a10:	483b      	ldr	r0, [pc, #236]	; (8004b00 <MX_TIM1_Init+0x188>)
 8004a12:	f005 fc49 	bl	800a2a8 <HAL_TIM_PWM_Init>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d001      	beq.n	8004a20 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8004a1c:	f7ff fc42 	bl	80042a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a20:	2300      	movs	r3, #0
 8004a22:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004a24:	2300      	movs	r3, #0
 8004a26:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004a2c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004a30:	4619      	mov	r1, r3
 8004a32:	4833      	ldr	r0, [pc, #204]	; (8004b00 <MX_TIM1_Init+0x188>)
 8004a34:	f006 fe4c 	bl	800b6d0 <HAL_TIMEx_MasterConfigSynchronization>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d001      	beq.n	8004a42 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8004a3e:	f7ff fc31 	bl	80042a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004a42:	2360      	movs	r3, #96	; 0x60
 8004a44:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8004a46:	2300      	movs	r3, #0
 8004a48:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8004a4a:	2302      	movs	r3, #2
 8004a4c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8004a4e:	2308      	movs	r3, #8
 8004a50:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004a52:	2300      	movs	r3, #0
 8004a54:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004a56:	2300      	movs	r3, #0
 8004a58:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004a5e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004a62:	2200      	movs	r2, #0
 8004a64:	4619      	mov	r1, r3
 8004a66:	4826      	ldr	r0, [pc, #152]	; (8004b00 <MX_TIM1_Init+0x188>)
 8004a68:	f005 ff00 	bl	800a86c <HAL_TIM_PWM_ConfigChannel>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d001      	beq.n	8004a76 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8004a72:	f7ff fc17 	bl	80042a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004a76:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004a7a:	2204      	movs	r2, #4
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	4820      	ldr	r0, [pc, #128]	; (8004b00 <MX_TIM1_Init+0x188>)
 8004a80:	f005 fef4 	bl	800a86c <HAL_TIM_PWM_ConfigChannel>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d001      	beq.n	8004a8e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8004a8a:	f7ff fc0b 	bl	80042a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004a8e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004a92:	2208      	movs	r2, #8
 8004a94:	4619      	mov	r1, r3
 8004a96:	481a      	ldr	r0, [pc, #104]	; (8004b00 <MX_TIM1_Init+0x188>)
 8004a98:	f005 fee8 	bl	800a86c <HAL_TIM_PWM_ConfigChannel>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d001      	beq.n	8004aa6 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8004aa2:	f7ff fbff 	bl	80042a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004aba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004abe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004acc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004ada:	2300      	movs	r3, #0
 8004adc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004ade:	1d3b      	adds	r3, r7, #4
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	4807      	ldr	r0, [pc, #28]	; (8004b00 <MX_TIM1_Init+0x188>)
 8004ae4:	f006 fe76 	bl	800b7d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8004aee:	f7ff fbd9 	bl	80042a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004af2:	4803      	ldr	r0, [pc, #12]	; (8004b00 <MX_TIM1_Init+0x188>)
 8004af4:	f000 f890 	bl	8004c18 <HAL_TIM_MspPostInit>

}
 8004af8:	bf00      	nop
 8004afa:	3770      	adds	r7, #112	; 0x70
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	20001640 	.word	0x20001640
 8004b04:	40012c00 	.word	0x40012c00

08004b08 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b088      	sub	sp, #32
 8004b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004b0e:	f107 0310 	add.w	r3, r7, #16
 8004b12:	2200      	movs	r2, #0
 8004b14:	601a      	str	r2, [r3, #0]
 8004b16:	605a      	str	r2, [r3, #4]
 8004b18:	609a      	str	r2, [r3, #8]
 8004b1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b1c:	1d3b      	adds	r3, r7, #4
 8004b1e:	2200      	movs	r2, #0
 8004b20:	601a      	str	r2, [r3, #0]
 8004b22:	605a      	str	r2, [r3, #4]
 8004b24:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004b26:	4b1d      	ldr	r3, [pc, #116]	; (8004b9c <MX_TIM3_Init+0x94>)
 8004b28:	4a1d      	ldr	r2, [pc, #116]	; (8004ba0 <MX_TIM3_Init+0x98>)
 8004b2a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3;
 8004b2c:	4b1b      	ldr	r3, [pc, #108]	; (8004b9c <MX_TIM3_Init+0x94>)
 8004b2e:	2203      	movs	r2, #3
 8004b30:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b32:	4b1a      	ldr	r3, [pc, #104]	; (8004b9c <MX_TIM3_Init+0x94>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3999;
 8004b38:	4b18      	ldr	r3, [pc, #96]	; (8004b9c <MX_TIM3_Init+0x94>)
 8004b3a:	f640 729f 	movw	r2, #3999	; 0xf9f
 8004b3e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b40:	4b16      	ldr	r3, [pc, #88]	; (8004b9c <MX_TIM3_Init+0x94>)
 8004b42:	2200      	movs	r2, #0
 8004b44:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004b46:	4b15      	ldr	r3, [pc, #84]	; (8004b9c <MX_TIM3_Init+0x94>)
 8004b48:	2280      	movs	r2, #128	; 0x80
 8004b4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004b4c:	4813      	ldr	r0, [pc, #76]	; (8004b9c <MX_TIM3_Init+0x94>)
 8004b4e:	f005 fae9 	bl	800a124 <HAL_TIM_Base_Init>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d001      	beq.n	8004b5c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8004b58:	f7ff fba4 	bl	80042a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b60:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004b62:	f107 0310 	add.w	r3, r7, #16
 8004b66:	4619      	mov	r1, r3
 8004b68:	480c      	ldr	r0, [pc, #48]	; (8004b9c <MX_TIM3_Init+0x94>)
 8004b6a:	f005 ff93 	bl	800aa94 <HAL_TIM_ConfigClockSource>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d001      	beq.n	8004b78 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8004b74:	f7ff fb96 	bl	80042a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004b80:	1d3b      	adds	r3, r7, #4
 8004b82:	4619      	mov	r1, r3
 8004b84:	4805      	ldr	r0, [pc, #20]	; (8004b9c <MX_TIM3_Init+0x94>)
 8004b86:	f006 fda3 	bl	800b6d0 <HAL_TIMEx_MasterConfigSynchronization>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d001      	beq.n	8004b94 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8004b90:	f7ff fb88 	bl	80042a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004b94:	bf00      	nop
 8004b96:	3720      	adds	r7, #32
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	2000168c 	.word	0x2000168c
 8004ba0:	40000400 	.word	0x40000400

08004ba4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a16      	ldr	r2, [pc, #88]	; (8004c0c <HAL_TIM_Base_MspInit+0x68>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d10c      	bne.n	8004bd0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004bb6:	4b16      	ldr	r3, [pc, #88]	; (8004c10 <HAL_TIM_Base_MspInit+0x6c>)
 8004bb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bba:	4a15      	ldr	r2, [pc, #84]	; (8004c10 <HAL_TIM_Base_MspInit+0x6c>)
 8004bbc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004bc0:	6613      	str	r3, [r2, #96]	; 0x60
 8004bc2:	4b13      	ldr	r3, [pc, #76]	; (8004c10 <HAL_TIM_Base_MspInit+0x6c>)
 8004bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bca:	60fb      	str	r3, [r7, #12]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8004bce:	e018      	b.n	8004c02 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a0f      	ldr	r2, [pc, #60]	; (8004c14 <HAL_TIM_Base_MspInit+0x70>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d113      	bne.n	8004c02 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004bda:	4b0d      	ldr	r3, [pc, #52]	; (8004c10 <HAL_TIM_Base_MspInit+0x6c>)
 8004bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bde:	4a0c      	ldr	r2, [pc, #48]	; (8004c10 <HAL_TIM_Base_MspInit+0x6c>)
 8004be0:	f043 0302 	orr.w	r3, r3, #2
 8004be4:	6593      	str	r3, [r2, #88]	; 0x58
 8004be6:	4b0a      	ldr	r3, [pc, #40]	; (8004c10 <HAL_TIM_Base_MspInit+0x6c>)
 8004be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	60bb      	str	r3, [r7, #8]
 8004bf0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	201d      	movs	r0, #29
 8004bf8:	f001 ff79 	bl	8006aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004bfc:	201d      	movs	r0, #29
 8004bfe:	f001 ff90 	bl	8006b22 <HAL_NVIC_EnableIRQ>
}
 8004c02:	bf00      	nop
 8004c04:	3710      	adds	r7, #16
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	40012c00 	.word	0x40012c00
 8004c10:	40021000 	.word	0x40021000
 8004c14:	40000400 	.word	0x40000400

08004c18 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b08a      	sub	sp, #40	; 0x28
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c20:	f107 0314 	add.w	r3, r7, #20
 8004c24:	2200      	movs	r2, #0
 8004c26:	601a      	str	r2, [r3, #0]
 8004c28:	605a      	str	r2, [r3, #4]
 8004c2a:	609a      	str	r2, [r3, #8]
 8004c2c:	60da      	str	r2, [r3, #12]
 8004c2e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a28      	ldr	r2, [pc, #160]	; (8004cd8 <HAL_TIM_MspPostInit+0xc0>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d149      	bne.n	8004cce <HAL_TIM_MspPostInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c3a:	4b28      	ldr	r3, [pc, #160]	; (8004cdc <HAL_TIM_MspPostInit+0xc4>)
 8004c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c3e:	4a27      	ldr	r2, [pc, #156]	; (8004cdc <HAL_TIM_MspPostInit+0xc4>)
 8004c40:	f043 0304 	orr.w	r3, r3, #4
 8004c44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c46:	4b25      	ldr	r3, [pc, #148]	; (8004cdc <HAL_TIM_MspPostInit+0xc4>)
 8004c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c4a:	f003 0304 	and.w	r3, r3, #4
 8004c4e:	613b      	str	r3, [r7, #16]
 8004c50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c52:	4b22      	ldr	r3, [pc, #136]	; (8004cdc <HAL_TIM_MspPostInit+0xc4>)
 8004c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c56:	4a21      	ldr	r2, [pc, #132]	; (8004cdc <HAL_TIM_MspPostInit+0xc4>)
 8004c58:	f043 0302 	orr.w	r3, r3, #2
 8004c5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c5e:	4b1f      	ldr	r3, [pc, #124]	; (8004cdc <HAL_TIM_MspPostInit+0xc4>)
 8004c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	60fb      	str	r3, [r7, #12]
 8004c68:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> TIM1_CH3
    PB13     ------> TIM1_CH1N
    PB14     ------> TIM1_CH2N
    PB15     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8004c6a:	2307      	movs	r3, #7
 8004c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c6e:	2302      	movs	r3, #2
 8004c70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c72:	2300      	movs	r3, #0
 8004c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c76:	2300      	movs	r3, #0
 8004c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004c7a:	2302      	movs	r3, #2
 8004c7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c7e:	f107 0314 	add.w	r3, r7, #20
 8004c82:	4619      	mov	r1, r3
 8004c84:	4816      	ldr	r0, [pc, #88]	; (8004ce0 <HAL_TIM_MspPostInit+0xc8>)
 8004c86:	f003 fa9b 	bl	80081c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8004c8a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8004c8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c90:	2302      	movs	r3, #2
 8004c92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c94:	2300      	movs	r3, #0
 8004c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004c9c:	2306      	movs	r3, #6
 8004c9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ca0:	f107 0314 	add.w	r3, r7, #20
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	480f      	ldr	r0, [pc, #60]	; (8004ce4 <HAL_TIM_MspPostInit+0xcc>)
 8004ca8:	f003 fa8a 	bl	80081c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004cac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8004cbe:	2304      	movs	r3, #4
 8004cc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cc2:	f107 0314 	add.w	r3, r7, #20
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	4806      	ldr	r0, [pc, #24]	; (8004ce4 <HAL_TIM_MspPostInit+0xcc>)
 8004cca:	f003 fa79 	bl	80081c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004cce:	bf00      	nop
 8004cd0:	3728      	adds	r7, #40	; 0x28
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	40012c00 	.word	0x40012c00
 8004cdc:	40021000 	.word	0x40021000
 8004ce0:	48000800 	.word	0x48000800
 8004ce4:	48000400 	.word	0x48000400

08004ce8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004cec:	4b22      	ldr	r3, [pc, #136]	; (8004d78 <MX_USART1_UART_Init+0x90>)
 8004cee:	4a23      	ldr	r2, [pc, #140]	; (8004d7c <MX_USART1_UART_Init+0x94>)
 8004cf0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8004cf2:	4b21      	ldr	r3, [pc, #132]	; (8004d78 <MX_USART1_UART_Init+0x90>)
 8004cf4:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8004cf8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004cfa:	4b1f      	ldr	r3, [pc, #124]	; (8004d78 <MX_USART1_UART_Init+0x90>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004d00:	4b1d      	ldr	r3, [pc, #116]	; (8004d78 <MX_USART1_UART_Init+0x90>)
 8004d02:	2200      	movs	r2, #0
 8004d04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004d06:	4b1c      	ldr	r3, [pc, #112]	; (8004d78 <MX_USART1_UART_Init+0x90>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004d0c:	4b1a      	ldr	r3, [pc, #104]	; (8004d78 <MX_USART1_UART_Init+0x90>)
 8004d0e:	220c      	movs	r2, #12
 8004d10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d12:	4b19      	ldr	r3, [pc, #100]	; (8004d78 <MX_USART1_UART_Init+0x90>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d18:	4b17      	ldr	r3, [pc, #92]	; (8004d78 <MX_USART1_UART_Init+0x90>)
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004d1e:	4b16      	ldr	r3, [pc, #88]	; (8004d78 <MX_USART1_UART_Init+0x90>)
 8004d20:	2200      	movs	r2, #0
 8004d22:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004d24:	4b14      	ldr	r3, [pc, #80]	; (8004d78 <MX_USART1_UART_Init+0x90>)
 8004d26:	2200      	movs	r2, #0
 8004d28:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004d2a:	4b13      	ldr	r3, [pc, #76]	; (8004d78 <MX_USART1_UART_Init+0x90>)
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004d30:	4811      	ldr	r0, [pc, #68]	; (8004d78 <MX_USART1_UART_Init+0x90>)
 8004d32:	f006 fe5a 	bl	800b9ea <HAL_UART_Init>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d001      	beq.n	8004d40 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004d3c:	f7ff fab2 	bl	80042a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004d40:	2100      	movs	r1, #0
 8004d42:	480d      	ldr	r0, [pc, #52]	; (8004d78 <MX_USART1_UART_Init+0x90>)
 8004d44:	f008 f8d1 	bl	800ceea <HAL_UARTEx_SetTxFifoThreshold>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d001      	beq.n	8004d52 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004d4e:	f7ff faa9 	bl	80042a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004d52:	2100      	movs	r1, #0
 8004d54:	4808      	ldr	r0, [pc, #32]	; (8004d78 <MX_USART1_UART_Init+0x90>)
 8004d56:	f008 f906 	bl	800cf66 <HAL_UARTEx_SetRxFifoThreshold>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d001      	beq.n	8004d64 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004d60:	f7ff faa0 	bl	80042a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004d64:	4804      	ldr	r0, [pc, #16]	; (8004d78 <MX_USART1_UART_Init+0x90>)
 8004d66:	f008 f887 	bl	800ce78 <HAL_UARTEx_DisableFifoMode>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d001      	beq.n	8004d74 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004d70:	f7ff fa98 	bl	80042a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004d74:	bf00      	nop
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	200016d8 	.word	0x200016d8
 8004d7c:	40013800 	.word	0x40013800

08004d80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b09a      	sub	sp, #104	; 0x68
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d88:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	601a      	str	r2, [r3, #0]
 8004d90:	605a      	str	r2, [r3, #4]
 8004d92:	609a      	str	r2, [r3, #8]
 8004d94:	60da      	str	r2, [r3, #12]
 8004d96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004d98:	f107 0310 	add.w	r3, r7, #16
 8004d9c:	2244      	movs	r2, #68	; 0x44
 8004d9e:	2100      	movs	r1, #0
 8004da0:	4618      	mov	r0, r3
 8004da2:	f008 ff11 	bl	800dbc8 <memset>
  if(uartHandle->Instance==USART1)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a37      	ldr	r2, [pc, #220]	; (8004e88 <HAL_UART_MspInit+0x108>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d166      	bne.n	8004e7e <HAL_UART_MspInit+0xfe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004db0:	2301      	movs	r3, #1
 8004db2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004db4:	2300      	movs	r3, #0
 8004db6:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004db8:	f107 0310 	add.w	r3, r7, #16
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f004 f9c3 	bl	8009148 <HAL_RCCEx_PeriphCLKConfig>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d001      	beq.n	8004dcc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004dc8:	f7ff fa6c 	bl	80042a4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004dcc:	4b2f      	ldr	r3, [pc, #188]	; (8004e8c <HAL_UART_MspInit+0x10c>)
 8004dce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dd0:	4a2e      	ldr	r2, [pc, #184]	; (8004e8c <HAL_UART_MspInit+0x10c>)
 8004dd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004dd6:	6613      	str	r3, [r2, #96]	; 0x60
 8004dd8:	4b2c      	ldr	r3, [pc, #176]	; (8004e8c <HAL_UART_MspInit+0x10c>)
 8004dda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ddc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004de0:	60fb      	str	r3, [r7, #12]
 8004de2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004de4:	4b29      	ldr	r3, [pc, #164]	; (8004e8c <HAL_UART_MspInit+0x10c>)
 8004de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004de8:	4a28      	ldr	r2, [pc, #160]	; (8004e8c <HAL_UART_MspInit+0x10c>)
 8004dea:	f043 0304 	orr.w	r3, r3, #4
 8004dee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004df0:	4b26      	ldr	r3, [pc, #152]	; (8004e8c <HAL_UART_MspInit+0x10c>)
 8004df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004df4:	f003 0304 	and.w	r3, r3, #4
 8004df8:	60bb      	str	r3, [r7, #8]
 8004dfa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004dfc:	2330      	movs	r3, #48	; 0x30
 8004dfe:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e00:	2302      	movs	r3, #2
 8004e02:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e04:	2300      	movs	r3, #0
 8004e06:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004e0c:	2307      	movs	r3, #7
 8004e0e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e10:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004e14:	4619      	mov	r1, r3
 8004e16:	481e      	ldr	r0, [pc, #120]	; (8004e90 <HAL_UART_MspInit+0x110>)
 8004e18:	f003 f9d2 	bl	80081c0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel3;
 8004e1c:	4b1d      	ldr	r3, [pc, #116]	; (8004e94 <HAL_UART_MspInit+0x114>)
 8004e1e:	4a1e      	ldr	r2, [pc, #120]	; (8004e98 <HAL_UART_MspInit+0x118>)
 8004e20:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8004e22:	4b1c      	ldr	r3, [pc, #112]	; (8004e94 <HAL_UART_MspInit+0x114>)
 8004e24:	2219      	movs	r2, #25
 8004e26:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004e28:	4b1a      	ldr	r3, [pc, #104]	; (8004e94 <HAL_UART_MspInit+0x114>)
 8004e2a:	2210      	movs	r2, #16
 8004e2c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e2e:	4b19      	ldr	r3, [pc, #100]	; (8004e94 <HAL_UART_MspInit+0x114>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004e34:	4b17      	ldr	r3, [pc, #92]	; (8004e94 <HAL_UART_MspInit+0x114>)
 8004e36:	2280      	movs	r2, #128	; 0x80
 8004e38:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004e3a:	4b16      	ldr	r3, [pc, #88]	; (8004e94 <HAL_UART_MspInit+0x114>)
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004e40:	4b14      	ldr	r3, [pc, #80]	; (8004e94 <HAL_UART_MspInit+0x114>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004e46:	4b13      	ldr	r3, [pc, #76]	; (8004e94 <HAL_UART_MspInit+0x114>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004e4c:	4b11      	ldr	r3, [pc, #68]	; (8004e94 <HAL_UART_MspInit+0x114>)
 8004e4e:	2200      	movs	r2, #0
 8004e50:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004e52:	4810      	ldr	r0, [pc, #64]	; (8004e94 <HAL_UART_MspInit+0x114>)
 8004e54:	f002 f89c 	bl	8006f90 <HAL_DMA_Init>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d001      	beq.n	8004e62 <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 8004e5e:	f7ff fa21 	bl	80042a4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a0b      	ldr	r2, [pc, #44]	; (8004e94 <HAL_UART_MspInit+0x114>)
 8004e66:	679a      	str	r2, [r3, #120]	; 0x78
 8004e68:	4a0a      	ldr	r2, [pc, #40]	; (8004e94 <HAL_UART_MspInit+0x114>)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004e6e:	2200      	movs	r2, #0
 8004e70:	2100      	movs	r1, #0
 8004e72:	2025      	movs	r0, #37	; 0x25
 8004e74:	f001 fe3b 	bl	8006aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004e78:	2025      	movs	r0, #37	; 0x25
 8004e7a:	f001 fe52 	bl	8006b22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004e7e:	bf00      	nop
 8004e80:	3768      	adds	r7, #104	; 0x68
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	40013800 	.word	0x40013800
 8004e8c:	40021000 	.word	0x40021000
 8004e90:	48000800 	.word	0x48000800
 8004e94:	20001768 	.word	0x20001768
 8004e98:	40020430 	.word	0x40020430

08004e9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004e9c:	480d      	ldr	r0, [pc, #52]	; (8004ed4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004e9e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004ea0:	480d      	ldr	r0, [pc, #52]	; (8004ed8 <LoopForever+0x6>)
  ldr r1, =_edata
 8004ea2:	490e      	ldr	r1, [pc, #56]	; (8004edc <LoopForever+0xa>)
  ldr r2, =_sidata
 8004ea4:	4a0e      	ldr	r2, [pc, #56]	; (8004ee0 <LoopForever+0xe>)
  movs r3, #0
 8004ea6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004ea8:	e002      	b.n	8004eb0 <LoopCopyDataInit>

08004eaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004eaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004eac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004eae:	3304      	adds	r3, #4

08004eb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004eb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004eb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004eb4:	d3f9      	bcc.n	8004eaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004eb6:	4a0b      	ldr	r2, [pc, #44]	; (8004ee4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004eb8:	4c0b      	ldr	r4, [pc, #44]	; (8004ee8 <LoopForever+0x16>)
  movs r3, #0
 8004eba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ebc:	e001      	b.n	8004ec2 <LoopFillZerobss>

08004ebe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004ebe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ec0:	3204      	adds	r2, #4

08004ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004ec2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ec4:	d3fb      	bcc.n	8004ebe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004ec6:	f7ff fd45 	bl	8004954 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004eca:	f008 fed5 	bl	800dc78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004ece:	f7ff f975 	bl	80041bc <main>

08004ed2 <LoopForever>:

LoopForever:
    b LoopForever
 8004ed2:	e7fe      	b.n	8004ed2 <LoopForever>
  ldr   r0, =_estack
 8004ed4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8004ed8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004edc:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8004ee0:	08012988 	.word	0x08012988
  ldr r2, =_sbss
 8004ee4:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8004ee8:	20001918 	.word	0x20001918

08004eec <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004eec:	e7fe      	b.n	8004eec <COMP1_2_3_IRQHandler>

08004eee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b082      	sub	sp, #8
 8004ef2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ef8:	2003      	movs	r0, #3
 8004efa:	f001 fded 	bl	8006ad8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004efe:	200f      	movs	r0, #15
 8004f00:	f000 f80e 	bl	8004f20 <HAL_InitTick>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d002      	beq.n	8004f10 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	71fb      	strb	r3, [r7, #7]
 8004f0e:	e001      	b.n	8004f14 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004f10:	f7ff fb86 	bl	8004620 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004f14:	79fb      	ldrb	r3, [r7, #7]

}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3708      	adds	r7, #8
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
	...

08004f20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004f2c:	4b16      	ldr	r3, [pc, #88]	; (8004f88 <HAL_InitTick+0x68>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d022      	beq.n	8004f7a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004f34:	4b15      	ldr	r3, [pc, #84]	; (8004f8c <HAL_InitTick+0x6c>)
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	4b13      	ldr	r3, [pc, #76]	; (8004f88 <HAL_InitTick+0x68>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004f40:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f001 fdf8 	bl	8006b3e <HAL_SYSTICK_Config>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d10f      	bne.n	8004f74 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b0f      	cmp	r3, #15
 8004f58:	d809      	bhi.n	8004f6e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	6879      	ldr	r1, [r7, #4]
 8004f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f62:	f001 fdc4 	bl	8006aee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004f66:	4a0a      	ldr	r2, [pc, #40]	; (8004f90 <HAL_InitTick+0x70>)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6013      	str	r3, [r2, #0]
 8004f6c:	e007      	b.n	8004f7e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	73fb      	strb	r3, [r7, #15]
 8004f72:	e004      	b.n	8004f7e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	73fb      	strb	r3, [r7, #15]
 8004f78:	e001      	b.n	8004f7e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	20000014 	.word	0x20000014
 8004f8c:	2000000c 	.word	0x2000000c
 8004f90:	20000010 	.word	0x20000010

08004f94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f94:	b480      	push	{r7}
 8004f96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004f98:	4b05      	ldr	r3, [pc, #20]	; (8004fb0 <HAL_IncTick+0x1c>)
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	4b05      	ldr	r3, [pc, #20]	; (8004fb4 <HAL_IncTick+0x20>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	4a03      	ldr	r2, [pc, #12]	; (8004fb0 <HAL_IncTick+0x1c>)
 8004fa4:	6013      	str	r3, [r2, #0]
}
 8004fa6:	bf00      	nop
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr
 8004fb0:	200017c8 	.word	0x200017c8
 8004fb4:	20000014 	.word	0x20000014

08004fb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	af00      	add	r7, sp, #0
  return uwTick;
 8004fbc:	4b03      	ldr	r3, [pc, #12]	; (8004fcc <HAL_GetTick+0x14>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	200017c8 	.word	0x200017c8

08004fd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004fd8:	f7ff ffee 	bl	8004fb8 <HAL_GetTick>
 8004fdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe8:	d004      	beq.n	8004ff4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004fea:	4b09      	ldr	r3, [pc, #36]	; (8005010 <HAL_Delay+0x40>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004ff4:	bf00      	nop
 8004ff6:	f7ff ffdf 	bl	8004fb8 <HAL_GetTick>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	429a      	cmp	r2, r3
 8005004:	d8f7      	bhi.n	8004ff6 <HAL_Delay+0x26>
  {
  }
}
 8005006:	bf00      	nop
 8005008:	bf00      	nop
 800500a:	3710      	adds	r7, #16
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}
 8005010:	20000014 	.word	0x20000014

08005014 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	431a      	orrs	r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	609a      	str	r2, [r3, #8]
}
 800502e:	bf00      	nop
 8005030:	370c      	adds	r7, #12
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr

0800503a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800503a:	b480      	push	{r7}
 800503c:	b083      	sub	sp, #12
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
 8005042:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	431a      	orrs	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	609a      	str	r2, [r3, #8]
}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005070:	4618      	mov	r0, r3
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800507c:	b480      	push	{r7}
 800507e:	b087      	sub	sp, #28
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
 8005088:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	3360      	adds	r3, #96	; 0x60
 800508e:	461a      	mov	r2, r3
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	4b08      	ldr	r3, [pc, #32]	; (80050c0 <LL_ADC_SetOffset+0x44>)
 800509e:	4013      	ands	r3, r2
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80050a6:	683a      	ldr	r2, [r7, #0]
 80050a8:	430a      	orrs	r2, r1
 80050aa:	4313      	orrs	r3, r2
 80050ac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80050b4:	bf00      	nop
 80050b6:	371c      	adds	r7, #28
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr
 80050c0:	03fff000 	.word	0x03fff000

080050c4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	3360      	adds	r3, #96	; 0x60
 80050d2:	461a      	mov	r2, r3
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	4413      	add	r3, r2
 80050da:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3714      	adds	r7, #20
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b087      	sub	sp, #28
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	3360      	adds	r3, #96	; 0x60
 8005100:	461a      	mov	r2, r3
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	4413      	add	r3, r2
 8005108:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	431a      	orrs	r2, r3
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800511a:	bf00      	nop
 800511c:	371c      	adds	r7, #28
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr

08005126 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8005126:	b480      	push	{r7}
 8005128:	b087      	sub	sp, #28
 800512a:	af00      	add	r7, sp, #0
 800512c:	60f8      	str	r0, [r7, #12]
 800512e:	60b9      	str	r1, [r7, #8]
 8005130:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	3360      	adds	r3, #96	; 0x60
 8005136:	461a      	mov	r2, r3
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	4413      	add	r3, r2
 800513e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	431a      	orrs	r2, r3
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8005150:	bf00      	nop
 8005152:	371c      	adds	r7, #28
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800515c:	b480      	push	{r7}
 800515e:	b087      	sub	sp, #28
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	3360      	adds	r3, #96	; 0x60
 800516c:	461a      	mov	r2, r3
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	4413      	add	r3, r2
 8005174:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	431a      	orrs	r2, r3
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8005186:	bf00      	nop
 8005188:	371c      	adds	r7, #28
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr

08005192 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8005192:	b480      	push	{r7}
 8005194:	b083      	sub	sp, #12
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
 800519a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	695b      	ldr	r3, [r3, #20]
 80051a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	431a      	orrs	r2, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	615a      	str	r2, [r3, #20]
}
 80051ac:	bf00      	nop
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d101      	bne.n	80051d0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80051cc:	2301      	movs	r3, #1
 80051ce:	e000      	b.n	80051d2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	370c      	adds	r7, #12
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr

080051de <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80051de:	b480      	push	{r7}
 80051e0:	b087      	sub	sp, #28
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	60f8      	str	r0, [r7, #12]
 80051e6:	60b9      	str	r1, [r7, #8]
 80051e8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	3330      	adds	r3, #48	; 0x30
 80051ee:	461a      	mov	r2, r3
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	0a1b      	lsrs	r3, r3, #8
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	f003 030c 	and.w	r3, r3, #12
 80051fa:	4413      	add	r3, r2
 80051fc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	f003 031f 	and.w	r3, r3, #31
 8005208:	211f      	movs	r1, #31
 800520a:	fa01 f303 	lsl.w	r3, r1, r3
 800520e:	43db      	mvns	r3, r3
 8005210:	401a      	ands	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	0e9b      	lsrs	r3, r3, #26
 8005216:	f003 011f 	and.w	r1, r3, #31
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	f003 031f 	and.w	r3, r3, #31
 8005220:	fa01 f303 	lsl.w	r3, r1, r3
 8005224:	431a      	orrs	r2, r3
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800522a:	bf00      	nop
 800522c:	371c      	adds	r7, #28
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr

08005236 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005236:	b480      	push	{r7}
 8005238:	b083      	sub	sp, #12
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005242:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8005246:	2b00      	cmp	r3, #0
 8005248:	d101      	bne.n	800524e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800524a:	2301      	movs	r3, #1
 800524c:	e000      	b.n	8005250 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800525c:	b480      	push	{r7}
 800525e:	b087      	sub	sp, #28
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	3314      	adds	r3, #20
 800526c:	461a      	mov	r2, r3
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	0e5b      	lsrs	r3, r3, #25
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	f003 0304 	and.w	r3, r3, #4
 8005278:	4413      	add	r3, r2
 800527a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	0d1b      	lsrs	r3, r3, #20
 8005284:	f003 031f 	and.w	r3, r3, #31
 8005288:	2107      	movs	r1, #7
 800528a:	fa01 f303 	lsl.w	r3, r1, r3
 800528e:	43db      	mvns	r3, r3
 8005290:	401a      	ands	r2, r3
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	0d1b      	lsrs	r3, r3, #20
 8005296:	f003 031f 	and.w	r3, r3, #31
 800529a:	6879      	ldr	r1, [r7, #4]
 800529c:	fa01 f303 	lsl.w	r3, r1, r3
 80052a0:	431a      	orrs	r2, r3
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80052a6:	bf00      	nop
 80052a8:	371c      	adds	r7, #28
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
	...

080052b4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b085      	sub	sp, #20
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a0f      	ldr	r2, [pc, #60]	; (8005300 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d10a      	bne.n	80052de <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052d4:	431a      	orrs	r2, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80052dc:	e00a      	b.n	80052f4 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052ea:	43db      	mvns	r3, r3
 80052ec:	401a      	ands	r2, r3
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80052f4:	bf00      	nop
 80052f6:	3714      	adds	r7, #20
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr
 8005300:	407f0000 	.word	0x407f0000

08005304 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	f003 031f 	and.w	r3, r3, #31
}
 8005314:	4618      	mov	r0, r3
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8005330:	4618      	mov	r0, r3
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800534c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	6093      	str	r3, [r2, #8]
}
 8005354:	bf00      	nop
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005370:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005374:	d101      	bne.n	800537a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005376:	2301      	movs	r3, #1
 8005378:	e000      	b.n	800537c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800537a:	2300      	movs	r3, #0
}
 800537c:	4618      	mov	r0, r3
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005398:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800539c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80053a4:	bf00      	nop
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053c4:	d101      	bne.n	80053ca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80053c6:	2301      	movs	r3, #1
 80053c8:	e000      	b.n	80053cc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80053ec:	f043 0201 	orr.w	r2, r3, #1
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80053f4:	bf00      	nop
 80053f6:	370c      	adds	r7, #12
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	f003 0301 	and.w	r3, r3, #1
 8005410:	2b01      	cmp	r3, #1
 8005412:	d101      	bne.n	8005418 <LL_ADC_IsEnabled+0x18>
 8005414:	2301      	movs	r3, #1
 8005416:	e000      	b.n	800541a <LL_ADC_IsEnabled+0x1a>
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	370c      	adds	r7, #12
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr

08005426 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005426:	b480      	push	{r7}
 8005428:	b083      	sub	sp, #12
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005436:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800543a:	f043 0204 	orr.w	r2, r3, #4
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005442:	bf00      	nop
 8005444:	370c      	adds	r7, #12
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr

0800544e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800544e:	b480      	push	{r7}
 8005450:	b083      	sub	sp, #12
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f003 0304 	and.w	r3, r3, #4
 800545e:	2b04      	cmp	r3, #4
 8005460:	d101      	bne.n	8005466 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005462:	2301      	movs	r3, #1
 8005464:	e000      	b.n	8005468 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005466:	2300      	movs	r3, #0
}
 8005468:	4618      	mov	r0, r3
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	f003 0308 	and.w	r3, r3, #8
 8005484:	2b08      	cmp	r3, #8
 8005486:	d101      	bne.n	800548c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005488:	2301      	movs	r3, #1
 800548a:	e000      	b.n	800548e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
	...

0800549c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800549c:	b590      	push	{r4, r7, lr}
 800549e:	b089      	sub	sp, #36	; 0x24
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80054a4:	2300      	movs	r3, #0
 80054a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80054a8:	2300      	movs	r3, #0
 80054aa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d101      	bne.n	80054b6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e177      	b.n	80057a6 <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d109      	bne.n	80054d8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f7fe fad9 	bl	8003a7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4618      	mov	r0, r3
 80054de:	f7ff ff3f 	bl	8005360 <LL_ADC_IsDeepPowerDownEnabled>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d004      	beq.n	80054f2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4618      	mov	r0, r3
 80054ee:	f7ff ff25 	bl	800533c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4618      	mov	r0, r3
 80054f8:	f7ff ff5a 	bl	80053b0 <LL_ADC_IsInternalRegulatorEnabled>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d115      	bne.n	800552e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4618      	mov	r0, r3
 8005508:	f7ff ff3e 	bl	8005388 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800550c:	4b9c      	ldr	r3, [pc, #624]	; (8005780 <HAL_ADC_Init+0x2e4>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	099b      	lsrs	r3, r3, #6
 8005512:	4a9c      	ldr	r2, [pc, #624]	; (8005784 <HAL_ADC_Init+0x2e8>)
 8005514:	fba2 2303 	umull	r2, r3, r2, r3
 8005518:	099b      	lsrs	r3, r3, #6
 800551a:	3301      	adds	r3, #1
 800551c:	005b      	lsls	r3, r3, #1
 800551e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005520:	e002      	b.n	8005528 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	3b01      	subs	r3, #1
 8005526:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1f9      	bne.n	8005522 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4618      	mov	r0, r3
 8005534:	f7ff ff3c 	bl	80053b0 <LL_ADC_IsInternalRegulatorEnabled>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10d      	bne.n	800555a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005542:	f043 0210 	orr.w	r2, r3, #16
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800554e:	f043 0201 	orr.w	r2, r3, #1
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4618      	mov	r0, r3
 8005560:	f7ff ff75 	bl	800544e <LL_ADC_REG_IsConversionOngoing>
 8005564:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800556a:	f003 0310 	and.w	r3, r3, #16
 800556e:	2b00      	cmp	r3, #0
 8005570:	f040 8110 	bne.w	8005794 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	2b00      	cmp	r3, #0
 8005578:	f040 810c 	bne.w	8005794 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005580:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005584:	f043 0202 	orr.w	r2, r3, #2
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4618      	mov	r0, r3
 8005592:	f7ff ff35 	bl	8005400 <LL_ADC_IsEnabled>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d111      	bne.n	80055c0 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800559c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80055a0:	f7ff ff2e 	bl	8005400 <LL_ADC_IsEnabled>
 80055a4:	4604      	mov	r4, r0
 80055a6:	4878      	ldr	r0, [pc, #480]	; (8005788 <HAL_ADC_Init+0x2ec>)
 80055a8:	f7ff ff2a 	bl	8005400 <LL_ADC_IsEnabled>
 80055ac:	4603      	mov	r3, r0
 80055ae:	4323      	orrs	r3, r4
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d105      	bne.n	80055c0 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	4619      	mov	r1, r3
 80055ba:	4874      	ldr	r0, [pc, #464]	; (800578c <HAL_ADC_Init+0x2f0>)
 80055bc:	f7ff fd2a 	bl	8005014 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	7f5b      	ldrb	r3, [r3, #29]
 80055c4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80055ca:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80055d0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80055d6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80055de:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80055e0:	4313      	orrs	r3, r2
 80055e2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d106      	bne.n	80055fc <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f2:	3b01      	subs	r3, #1
 80055f4:	045b      	lsls	r3, r3, #17
 80055f6:	69ba      	ldr	r2, [r7, #24]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005600:	2b00      	cmp	r3, #0
 8005602:	d009      	beq.n	8005618 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005608:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005610:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005612:	69ba      	ldr	r2, [r7, #24]
 8005614:	4313      	orrs	r3, r2
 8005616:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68da      	ldr	r2, [r3, #12]
 800561e:	4b5c      	ldr	r3, [pc, #368]	; (8005790 <HAL_ADC_Init+0x2f4>)
 8005620:	4013      	ands	r3, r2
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	6812      	ldr	r2, [r2, #0]
 8005626:	69b9      	ldr	r1, [r7, #24]
 8005628:	430b      	orrs	r3, r1
 800562a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	430a      	orrs	r2, r1
 8005640:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4618      	mov	r0, r3
 8005648:	f7ff ff01 	bl	800544e <LL_ADC_REG_IsConversionOngoing>
 800564c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4618      	mov	r0, r3
 8005654:	f7ff ff0e 	bl	8005474 <LL_ADC_INJ_IsConversionOngoing>
 8005658:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d16d      	bne.n	800573c <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d16a      	bne.n	800573c <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800566a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005672:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005674:	4313      	orrs	r3, r2
 8005676:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005682:	f023 0302 	bic.w	r3, r3, #2
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	6812      	ldr	r2, [r2, #0]
 800568a:	69b9      	ldr	r1, [r7, #24]
 800568c:	430b      	orrs	r3, r1
 800568e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d017      	beq.n	80056c8 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	691a      	ldr	r2, [r3, #16]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80056a6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80056b0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80056b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	6911      	ldr	r1, [r2, #16]
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	6812      	ldr	r2, [r2, #0]
 80056c0:	430b      	orrs	r3, r1
 80056c2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80056c6:	e013      	b.n	80056f0 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	691a      	ldr	r2, [r3, #16]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80056d6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	6812      	ldr	r2, [r2, #0]
 80056e4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80056e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80056ec:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d118      	bne.n	800572c <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005704:	f023 0304 	bic.w	r3, r3, #4
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005710:	4311      	orrs	r1, r2
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005716:	4311      	orrs	r1, r2
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800571c:	430a      	orrs	r2, r1
 800571e:	431a      	orrs	r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f042 0201 	orr.w	r2, r2, #1
 8005728:	611a      	str	r2, [r3, #16]
 800572a:	e007      	b.n	800573c <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	691a      	ldr	r2, [r3, #16]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f022 0201 	bic.w	r2, r2, #1
 800573a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	695b      	ldr	r3, [r3, #20]
 8005740:	2b01      	cmp	r3, #1
 8005742:	d10c      	bne.n	800575e <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800574a:	f023 010f 	bic.w	r1, r3, #15
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	1e5a      	subs	r2, r3, #1
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	430a      	orrs	r2, r1
 800575a:	631a      	str	r2, [r3, #48]	; 0x30
 800575c:	e007      	b.n	800576e <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f022 020f 	bic.w	r2, r2, #15
 800576c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005772:	f023 0303 	bic.w	r3, r3, #3
 8005776:	f043 0201 	orr.w	r2, r3, #1
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	65da      	str	r2, [r3, #92]	; 0x5c
 800577e:	e011      	b.n	80057a4 <HAL_ADC_Init+0x308>
 8005780:	2000000c 	.word	0x2000000c
 8005784:	053e2d63 	.word	0x053e2d63
 8005788:	50000100 	.word	0x50000100
 800578c:	50000300 	.word	0x50000300
 8005790:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005798:	f043 0210 	orr.w	r2, r3, #16
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80057a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3724      	adds	r7, #36	; 0x24
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd90      	pop	{r4, r7, pc}
 80057ae:	bf00      	nop

080057b0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b086      	sub	sp, #24
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80057bc:	4851      	ldr	r0, [pc, #324]	; (8005904 <HAL_ADC_Start_DMA+0x154>)
 80057be:	f7ff fda1 	bl	8005304 <LL_ADC_GetMultimode>
 80057c2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4618      	mov	r0, r3
 80057ca:	f7ff fe40 	bl	800544e <LL_ADC_REG_IsConversionOngoing>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	f040 808f 	bne.w	80058f4 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d101      	bne.n	80057e4 <HAL_ADC_Start_DMA+0x34>
 80057e0:	2302      	movs	r3, #2
 80057e2:	e08a      	b.n	80058fa <HAL_ADC_Start_DMA+0x14a>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d005      	beq.n	80057fe <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	2b05      	cmp	r3, #5
 80057f6:	d002      	beq.n	80057fe <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	2b09      	cmp	r3, #9
 80057fc:	d173      	bne.n	80058e6 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80057fe:	68f8      	ldr	r0, [r7, #12]
 8005800:	f000 fea8 	bl	8006554 <ADC_Enable>
 8005804:	4603      	mov	r3, r0
 8005806:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005808:	7dfb      	ldrb	r3, [r7, #23]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d166      	bne.n	80058dc <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005812:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005816:	f023 0301 	bic.w	r3, r3, #1
 800581a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a38      	ldr	r2, [pc, #224]	; (8005908 <HAL_ADC_Start_DMA+0x158>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d002      	beq.n	8005832 <HAL_ADC_Start_DMA+0x82>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	e001      	b.n	8005836 <HAL_ADC_Start_DMA+0x86>
 8005832:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	6812      	ldr	r2, [r2, #0]
 800583a:	4293      	cmp	r3, r2
 800583c:	d002      	beq.n	8005844 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d105      	bne.n	8005850 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005848:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005854:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d006      	beq.n	800586a <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005860:	f023 0206 	bic.w	r2, r3, #6
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	661a      	str	r2, [r3, #96]	; 0x60
 8005868:	e002      	b.n	8005870 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2200      	movs	r2, #0
 800586e:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005874:	4a25      	ldr	r2, [pc, #148]	; (800590c <HAL_ADC_Start_DMA+0x15c>)
 8005876:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800587c:	4a24      	ldr	r2, [pc, #144]	; (8005910 <HAL_ADC_Start_DMA+0x160>)
 800587e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005884:	4a23      	ldr	r2, [pc, #140]	; (8005914 <HAL_ADC_Start_DMA+0x164>)
 8005886:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	221c      	movs	r2, #28
 800588e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	685a      	ldr	r2, [r3, #4]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f042 0210 	orr.w	r2, r2, #16
 80058a6:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68da      	ldr	r2, [r3, #12]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f042 0201 	orr.w	r2, r2, #1
 80058b6:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	3340      	adds	r3, #64	; 0x40
 80058c2:	4619      	mov	r1, r3
 80058c4:	68ba      	ldr	r2, [r7, #8]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f001 fc0a 	bl	80070e0 <HAL_DMA_Start_IT>
 80058cc:	4603      	mov	r3, r0
 80058ce:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4618      	mov	r0, r3
 80058d6:	f7ff fda6 	bl	8005426 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80058da:	e00d      	b.n	80058f8 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80058e4:	e008      	b.n	80058f8 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80058f2:	e001      	b.n	80058f8 <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80058f4:	2302      	movs	r3, #2
 80058f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80058f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3718      	adds	r7, #24
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	50000300 	.word	0x50000300
 8005908:	50000100 	.word	0x50000100
 800590c:	08006619 	.word	0x08006619
 8005910:	080066f1 	.word	0x080066f1
 8005914:	0800670d 	.word	0x0800670d

08005918 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b08a      	sub	sp, #40	; 0x28
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005920:	2300      	movs	r3, #0
 8005922:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005934:	4883      	ldr	r0, [pc, #524]	; (8005b44 <HAL_ADC_IRQHandler+0x22c>)
 8005936:	f7ff fce5 	bl	8005304 <LL_ADC_GetMultimode>
 800593a:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	2b00      	cmp	r3, #0
 8005944:	d017      	beq.n	8005976 <HAL_ADC_IRQHandler+0x5e>
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	f003 0302 	and.w	r3, r3, #2
 800594c:	2b00      	cmp	r3, #0
 800594e:	d012      	beq.n	8005976 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005954:	f003 0310 	and.w	r3, r3, #16
 8005958:	2b00      	cmp	r3, #0
 800595a:	d105      	bne.n	8005968 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005960:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 ff37 	bl	80067dc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2202      	movs	r2, #2
 8005974:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	f003 0304 	and.w	r3, r3, #4
 800597c:	2b00      	cmp	r3, #0
 800597e:	d004      	beq.n	800598a <HAL_ADC_IRQHandler+0x72>
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	f003 0304 	and.w	r3, r3, #4
 8005986:	2b00      	cmp	r3, #0
 8005988:	d10a      	bne.n	80059a0 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005990:	2b00      	cmp	r3, #0
 8005992:	f000 8085 	beq.w	8005aa0 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	f003 0308 	and.w	r3, r3, #8
 800599c:	2b00      	cmp	r3, #0
 800599e:	d07f      	beq.n	8005aa0 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059a4:	f003 0310 	and.w	r3, r3, #16
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d105      	bne.n	80059b8 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059b0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4618      	mov	r0, r3
 80059be:	f7ff fbfb 	bl	80051b8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d064      	beq.n	8005a92 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a5e      	ldr	r2, [pc, #376]	; (8005b48 <HAL_ADC_IRQHandler+0x230>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d002      	beq.n	80059d8 <HAL_ADC_IRQHandler+0xc0>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	e001      	b.n	80059dc <HAL_ADC_IRQHandler+0xc4>
 80059d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	6812      	ldr	r2, [r2, #0]
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d008      	beq.n	80059f6 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d005      	beq.n	80059f6 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	2b05      	cmp	r3, #5
 80059ee:	d002      	beq.n	80059f6 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	2b09      	cmp	r3, #9
 80059f4:	d104      	bne.n	8005a00 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	623b      	str	r3, [r7, #32]
 80059fe:	e00d      	b.n	8005a1c <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a50      	ldr	r2, [pc, #320]	; (8005b48 <HAL_ADC_IRQHandler+0x230>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d002      	beq.n	8005a10 <HAL_ADC_IRQHandler+0xf8>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	e001      	b.n	8005a14 <HAL_ADC_IRQHandler+0xfc>
 8005a10:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005a14:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8005a1c:	6a3b      	ldr	r3, [r7, #32]
 8005a1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d135      	bne.n	8005a92 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 0308 	and.w	r3, r3, #8
 8005a30:	2b08      	cmp	r3, #8
 8005a32:	d12e      	bne.n	8005a92 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f7ff fd08 	bl	800544e <LL_ADC_REG_IsConversionOngoing>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d11a      	bne.n	8005a7a <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	685a      	ldr	r2, [r3, #4]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f022 020c 	bic.w	r2, r2, #12
 8005a52:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d112      	bne.n	8005a92 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a70:	f043 0201 	orr.w	r2, r3, #1
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	65da      	str	r2, [r3, #92]	; 0x5c
 8005a78:	e00b      	b.n	8005a92 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a7e:	f043 0210 	orr.w	r2, r3, #16
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a8a:	f043 0201 	orr.w	r2, r3, #1
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f7fd fc54 	bl	8003340 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	220c      	movs	r2, #12
 8005a9e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	f003 0320 	and.w	r3, r3, #32
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d004      	beq.n	8005ab4 <HAL_ADC_IRQHandler+0x19c>
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	f003 0320 	and.w	r3, r3, #32
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d10b      	bne.n	8005acc <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	f000 809e 	beq.w	8005bfc <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	f000 8098 	beq.w	8005bfc <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ad0:	f003 0310 	and.w	r3, r3, #16
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d105      	bne.n	8005ae4 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005adc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f7ff fba4 	bl	8005236 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005aee:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4618      	mov	r0, r3
 8005af6:	f7ff fb5f 	bl	80051b8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005afa:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a11      	ldr	r2, [pc, #68]	; (8005b48 <HAL_ADC_IRQHandler+0x230>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d002      	beq.n	8005b0c <HAL_ADC_IRQHandler+0x1f4>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	e001      	b.n	8005b10 <HAL_ADC_IRQHandler+0x1f8>
 8005b0c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	6812      	ldr	r2, [r2, #0]
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d008      	beq.n	8005b2a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d005      	beq.n	8005b2a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	2b06      	cmp	r3, #6
 8005b22:	d002      	beq.n	8005b2a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	2b07      	cmp	r3, #7
 8005b28:	d104      	bne.n	8005b34 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	623b      	str	r3, [r7, #32]
 8005b32:	e011      	b.n	8005b58 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a03      	ldr	r2, [pc, #12]	; (8005b48 <HAL_ADC_IRQHandler+0x230>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d006      	beq.n	8005b4c <HAL_ADC_IRQHandler+0x234>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	e005      	b.n	8005b50 <HAL_ADC_IRQHandler+0x238>
 8005b44:	50000300 	.word	0x50000300
 8005b48:	50000100 	.word	0x50000100
 8005b4c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005b50:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d047      	beq.n	8005bee <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005b5e:	6a3b      	ldr	r3, [r7, #32]
 8005b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d007      	beq.n	8005b78 <HAL_ADC_IRQHandler+0x260>
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d03f      	beq.n	8005bee <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005b6e:	6a3b      	ldr	r3, [r7, #32]
 8005b70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d13a      	bne.n	8005bee <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b82:	2b40      	cmp	r3, #64	; 0x40
 8005b84:	d133      	bne.n	8005bee <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005b86:	6a3b      	ldr	r3, [r7, #32]
 8005b88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d12e      	bne.n	8005bee <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4618      	mov	r0, r3
 8005b96:	f7ff fc6d 	bl	8005474 <LL_ADC_INJ_IsConversionOngoing>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d11a      	bne.n	8005bd6 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	685a      	ldr	r2, [r3, #4]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005bae:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bb4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d112      	bne.n	8005bee <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bcc:	f043 0201 	orr.w	r2, r3, #1
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	65da      	str	r2, [r3, #92]	; 0x5c
 8005bd4:	e00b      	b.n	8005bee <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bda:	f043 0210 	orr.w	r2, r3, #16
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005be6:	f043 0201 	orr.w	r2, r3, #1
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 fdcc 	bl	800678c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2260      	movs	r2, #96	; 0x60
 8005bfa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d011      	beq.n	8005c2a <HAL_ADC_IRQHandler+0x312>
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d00c      	beq.n	8005c2a <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c14:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 f895 	bl	8005d4c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	2280      	movs	r2, #128	; 0x80
 8005c28:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d012      	beq.n	8005c5a <HAL_ADC_IRQHandler+0x342>
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00d      	beq.n	8005c5a <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c42:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 fdb2 	bl	80067b4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c58:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d012      	beq.n	8005c8a <HAL_ADC_IRQHandler+0x372>
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00d      	beq.n	8005c8a <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c72:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 fda4 	bl	80067c8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c88:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	f003 0310 	and.w	r3, r3, #16
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d036      	beq.n	8005d02 <HAL_ADC_IRQHandler+0x3ea>
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	f003 0310 	and.w	r3, r3, #16
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d031      	beq.n	8005d02 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d102      	bne.n	8005cac <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8005caa:	e014      	b.n	8005cd6 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d008      	beq.n	8005cc4 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005cb2:	4825      	ldr	r0, [pc, #148]	; (8005d48 <HAL_ADC_IRQHandler+0x430>)
 8005cb4:	f7ff fb34 	bl	8005320 <LL_ADC_GetMultiDMATransfer>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00b      	beq.n	8005cd6 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8005cc2:	e008      	b.n	8005cd6 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	f003 0301 	and.w	r3, r3, #1
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d001      	beq.n	8005cd6 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8005cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d10e      	bne.n	8005cfa <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ce0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cec:	f043 0202 	orr.w	r2, r3, #2
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 f833 	bl	8005d60 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2210      	movs	r2, #16
 8005d00:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d018      	beq.n	8005d3e <HAL_ADC_IRQHandler+0x426>
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d013      	beq.n	8005d3e <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d1a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d26:	f043 0208 	orr.w	r2, r3, #8
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005d36:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 fd31 	bl	80067a0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8005d3e:	bf00      	nop
 8005d40:	3728      	adds	r7, #40	; 0x28
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	50000300 	.word	0x50000300

08005d4c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005d54:	bf00      	nop
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005d68:	bf00      	nop
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b0b6      	sub	sp, #216	; 0xd8
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005d84:	2300      	movs	r3, #0
 8005d86:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d101      	bne.n	8005d96 <HAL_ADC_ConfigChannel+0x22>
 8005d92:	2302      	movs	r3, #2
 8005d94:	e3c8      	b.n	8006528 <HAL_ADC_ConfigChannel+0x7b4>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4618      	mov	r0, r3
 8005da4:	f7ff fb53 	bl	800544e <LL_ADC_REG_IsConversionOngoing>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	f040 83ad 	bne.w	800650a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6818      	ldr	r0, [r3, #0]
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	6859      	ldr	r1, [r3, #4]
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	f7ff fa0e 	bl	80051de <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f7ff fb41 	bl	800544e <LL_ADC_REG_IsConversionOngoing>
 8005dcc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f7ff fb4d 	bl	8005474 <LL_ADC_INJ_IsConversionOngoing>
 8005dda:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005dde:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	f040 81d9 	bne.w	800619a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005de8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	f040 81d4 	bne.w	800619a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dfa:	d10f      	bne.n	8005e1c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6818      	ldr	r0, [r3, #0]
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2200      	movs	r2, #0
 8005e06:	4619      	mov	r1, r3
 8005e08:	f7ff fa28 	bl	800525c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005e14:	4618      	mov	r0, r3
 8005e16:	f7ff f9bc 	bl	8005192 <LL_ADC_SetSamplingTimeCommonConfig>
 8005e1a:	e00e      	b.n	8005e3a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6818      	ldr	r0, [r3, #0]
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	6819      	ldr	r1, [r3, #0]
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	461a      	mov	r2, r3
 8005e2a:	f7ff fa17 	bl	800525c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2100      	movs	r1, #0
 8005e34:	4618      	mov	r0, r3
 8005e36:	f7ff f9ac 	bl	8005192 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	695a      	ldr	r2, [r3, #20]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	08db      	lsrs	r3, r3, #3
 8005e46:	f003 0303 	and.w	r3, r3, #3
 8005e4a:	005b      	lsls	r3, r3, #1
 8005e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e50:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	2b04      	cmp	r3, #4
 8005e5a:	d022      	beq.n	8005ea2 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6818      	ldr	r0, [r3, #0]
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	6919      	ldr	r1, [r3, #16]
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e6c:	f7ff f906 	bl	800507c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6818      	ldr	r0, [r3, #0]
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	6919      	ldr	r1, [r3, #16]
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	f7ff f952 	bl	8005126 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6818      	ldr	r0, [r3, #0]
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	6919      	ldr	r1, [r3, #16]
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	7f1b      	ldrb	r3, [r3, #28]
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d102      	bne.n	8005e98 <HAL_ADC_ConfigChannel+0x124>
 8005e92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e96:	e000      	b.n	8005e9a <HAL_ADC_ConfigChannel+0x126>
 8005e98:	2300      	movs	r3, #0
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	f7ff f95e 	bl	800515c <LL_ADC_SetOffsetSaturation>
 8005ea0:	e17b      	b.n	800619a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	2100      	movs	r1, #0
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f7ff f90b 	bl	80050c4 <LL_ADC_GetOffsetChannel>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d10a      	bne.n	8005ece <HAL_ADC_ConfigChannel+0x15a>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2100      	movs	r1, #0
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f7ff f900 	bl	80050c4 <LL_ADC_GetOffsetChannel>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	0e9b      	lsrs	r3, r3, #26
 8005ec8:	f003 021f 	and.w	r2, r3, #31
 8005ecc:	e01e      	b.n	8005f0c <HAL_ADC_ConfigChannel+0x198>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	2100      	movs	r1, #0
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f7ff f8f5 	bl	80050c4 <LL_ADC_GetOffsetChannel>
 8005eda:	4603      	mov	r3, r0
 8005edc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ee0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005ee4:	fa93 f3a3 	rbit	r3, r3
 8005ee8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005eec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ef0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005ef4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d101      	bne.n	8005f00 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8005efc:	2320      	movs	r3, #32
 8005efe:	e004      	b.n	8005f0a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8005f00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005f04:	fab3 f383 	clz	r3, r3
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d105      	bne.n	8005f24 <HAL_ADC_ConfigChannel+0x1b0>
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	0e9b      	lsrs	r3, r3, #26
 8005f1e:	f003 031f 	and.w	r3, r3, #31
 8005f22:	e018      	b.n	8005f56 <HAL_ADC_ConfigChannel+0x1e2>
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005f30:	fa93 f3a3 	rbit	r3, r3
 8005f34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8005f38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8005f40:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d101      	bne.n	8005f4c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8005f48:	2320      	movs	r3, #32
 8005f4a:	e004      	b.n	8005f56 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8005f4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005f50:	fab3 f383 	clz	r3, r3
 8005f54:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d106      	bne.n	8005f68 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	2100      	movs	r1, #0
 8005f62:	4618      	mov	r0, r3
 8005f64:	f7ff f8c4 	bl	80050f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2101      	movs	r1, #1
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f7ff f8a8 	bl	80050c4 <LL_ADC_GetOffsetChannel>
 8005f74:	4603      	mov	r3, r0
 8005f76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d10a      	bne.n	8005f94 <HAL_ADC_ConfigChannel+0x220>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2101      	movs	r1, #1
 8005f84:	4618      	mov	r0, r3
 8005f86:	f7ff f89d 	bl	80050c4 <LL_ADC_GetOffsetChannel>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	0e9b      	lsrs	r3, r3, #26
 8005f8e:	f003 021f 	and.w	r2, r3, #31
 8005f92:	e01e      	b.n	8005fd2 <HAL_ADC_ConfigChannel+0x25e>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2101      	movs	r1, #1
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f7ff f892 	bl	80050c4 <LL_ADC_GetOffsetChannel>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fa6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005faa:	fa93 f3a3 	rbit	r3, r3
 8005fae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8005fb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005fb6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8005fba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d101      	bne.n	8005fc6 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8005fc2:	2320      	movs	r3, #32
 8005fc4:	e004      	b.n	8005fd0 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8005fc6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005fca:	fab3 f383 	clz	r3, r3
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d105      	bne.n	8005fea <HAL_ADC_ConfigChannel+0x276>
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	0e9b      	lsrs	r3, r3, #26
 8005fe4:	f003 031f 	and.w	r3, r3, #31
 8005fe8:	e018      	b.n	800601c <HAL_ADC_ConfigChannel+0x2a8>
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ff2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ff6:	fa93 f3a3 	rbit	r3, r3
 8005ffa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8005ffe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006002:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8006006:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800600a:	2b00      	cmp	r3, #0
 800600c:	d101      	bne.n	8006012 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800600e:	2320      	movs	r3, #32
 8006010:	e004      	b.n	800601c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8006012:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006016:	fab3 f383 	clz	r3, r3
 800601a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800601c:	429a      	cmp	r2, r3
 800601e:	d106      	bne.n	800602e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2200      	movs	r2, #0
 8006026:	2101      	movs	r1, #1
 8006028:	4618      	mov	r0, r3
 800602a:	f7ff f861 	bl	80050f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2102      	movs	r1, #2
 8006034:	4618      	mov	r0, r3
 8006036:	f7ff f845 	bl	80050c4 <LL_ADC_GetOffsetChannel>
 800603a:	4603      	mov	r3, r0
 800603c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006040:	2b00      	cmp	r3, #0
 8006042:	d10a      	bne.n	800605a <HAL_ADC_ConfigChannel+0x2e6>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2102      	movs	r1, #2
 800604a:	4618      	mov	r0, r3
 800604c:	f7ff f83a 	bl	80050c4 <LL_ADC_GetOffsetChannel>
 8006050:	4603      	mov	r3, r0
 8006052:	0e9b      	lsrs	r3, r3, #26
 8006054:	f003 021f 	and.w	r2, r3, #31
 8006058:	e01e      	b.n	8006098 <HAL_ADC_ConfigChannel+0x324>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	2102      	movs	r1, #2
 8006060:	4618      	mov	r0, r3
 8006062:	f7ff f82f 	bl	80050c4 <LL_ADC_GetOffsetChannel>
 8006066:	4603      	mov	r3, r0
 8006068:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800606c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006070:	fa93 f3a3 	rbit	r3, r3
 8006074:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8006078:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800607c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8006080:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006084:	2b00      	cmp	r3, #0
 8006086:	d101      	bne.n	800608c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8006088:	2320      	movs	r3, #32
 800608a:	e004      	b.n	8006096 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 800608c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006090:	fab3 f383 	clz	r3, r3
 8006094:	b2db      	uxtb	r3, r3
 8006096:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d105      	bne.n	80060b0 <HAL_ADC_ConfigChannel+0x33c>
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	0e9b      	lsrs	r3, r3, #26
 80060aa:	f003 031f 	and.w	r3, r3, #31
 80060ae:	e016      	b.n	80060de <HAL_ADC_ConfigChannel+0x36a>
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80060bc:	fa93 f3a3 	rbit	r3, r3
 80060c0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80060c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80060c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80060c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d101      	bne.n	80060d4 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80060d0:	2320      	movs	r3, #32
 80060d2:	e004      	b.n	80060de <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80060d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060d8:	fab3 f383 	clz	r3, r3
 80060dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80060de:	429a      	cmp	r2, r3
 80060e0:	d106      	bne.n	80060f0 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2200      	movs	r2, #0
 80060e8:	2102      	movs	r1, #2
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7ff f800 	bl	80050f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2103      	movs	r1, #3
 80060f6:	4618      	mov	r0, r3
 80060f8:	f7fe ffe4 	bl	80050c4 <LL_ADC_GetOffsetChannel>
 80060fc:	4603      	mov	r3, r0
 80060fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006102:	2b00      	cmp	r3, #0
 8006104:	d10a      	bne.n	800611c <HAL_ADC_ConfigChannel+0x3a8>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2103      	movs	r1, #3
 800610c:	4618      	mov	r0, r3
 800610e:	f7fe ffd9 	bl	80050c4 <LL_ADC_GetOffsetChannel>
 8006112:	4603      	mov	r3, r0
 8006114:	0e9b      	lsrs	r3, r3, #26
 8006116:	f003 021f 	and.w	r2, r3, #31
 800611a:	e017      	b.n	800614c <HAL_ADC_ConfigChannel+0x3d8>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2103      	movs	r1, #3
 8006122:	4618      	mov	r0, r3
 8006124:	f7fe ffce 	bl	80050c4 <LL_ADC_GetOffsetChannel>
 8006128:	4603      	mov	r3, r0
 800612a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800612c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800612e:	fa93 f3a3 	rbit	r3, r3
 8006132:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8006134:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006136:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8006138:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800613a:	2b00      	cmp	r3, #0
 800613c:	d101      	bne.n	8006142 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800613e:	2320      	movs	r3, #32
 8006140:	e003      	b.n	800614a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8006142:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006144:	fab3 f383 	clz	r3, r3
 8006148:	b2db      	uxtb	r3, r3
 800614a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006154:	2b00      	cmp	r3, #0
 8006156:	d105      	bne.n	8006164 <HAL_ADC_ConfigChannel+0x3f0>
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	0e9b      	lsrs	r3, r3, #26
 800615e:	f003 031f 	and.w	r3, r3, #31
 8006162:	e011      	b.n	8006188 <HAL_ADC_ConfigChannel+0x414>
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800616a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800616c:	fa93 f3a3 	rbit	r3, r3
 8006170:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8006172:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006174:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8006176:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006178:	2b00      	cmp	r3, #0
 800617a:	d101      	bne.n	8006180 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 800617c:	2320      	movs	r3, #32
 800617e:	e003      	b.n	8006188 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8006180:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006182:	fab3 f383 	clz	r3, r3
 8006186:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006188:	429a      	cmp	r2, r3
 800618a:	d106      	bne.n	800619a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2200      	movs	r2, #0
 8006192:	2103      	movs	r1, #3
 8006194:	4618      	mov	r0, r3
 8006196:	f7fe ffab 	bl	80050f0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4618      	mov	r0, r3
 80061a0:	f7ff f92e 	bl	8005400 <LL_ADC_IsEnabled>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	f040 8140 	bne.w	800642c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6818      	ldr	r0, [r3, #0]
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	6819      	ldr	r1, [r3, #0]
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	461a      	mov	r2, r3
 80061ba:	f7ff f87b 	bl	80052b4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	4a8f      	ldr	r2, [pc, #572]	; (8006400 <HAL_ADC_ConfigChannel+0x68c>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	f040 8131 	bne.w	800642c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d10b      	bne.n	80061f2 <HAL_ADC_ConfigChannel+0x47e>
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	0e9b      	lsrs	r3, r3, #26
 80061e0:	3301      	adds	r3, #1
 80061e2:	f003 031f 	and.w	r3, r3, #31
 80061e6:	2b09      	cmp	r3, #9
 80061e8:	bf94      	ite	ls
 80061ea:	2301      	movls	r3, #1
 80061ec:	2300      	movhi	r3, #0
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	e019      	b.n	8006226 <HAL_ADC_ConfigChannel+0x4b2>
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061fa:	fa93 f3a3 	rbit	r3, r3
 80061fe:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8006200:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006202:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8006204:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006206:	2b00      	cmp	r3, #0
 8006208:	d101      	bne.n	800620e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800620a:	2320      	movs	r3, #32
 800620c:	e003      	b.n	8006216 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800620e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006210:	fab3 f383 	clz	r3, r3
 8006214:	b2db      	uxtb	r3, r3
 8006216:	3301      	adds	r3, #1
 8006218:	f003 031f 	and.w	r3, r3, #31
 800621c:	2b09      	cmp	r3, #9
 800621e:	bf94      	ite	ls
 8006220:	2301      	movls	r3, #1
 8006222:	2300      	movhi	r3, #0
 8006224:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006226:	2b00      	cmp	r3, #0
 8006228:	d079      	beq.n	800631e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006232:	2b00      	cmp	r3, #0
 8006234:	d107      	bne.n	8006246 <HAL_ADC_ConfigChannel+0x4d2>
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	0e9b      	lsrs	r3, r3, #26
 800623c:	3301      	adds	r3, #1
 800623e:	069b      	lsls	r3, r3, #26
 8006240:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006244:	e015      	b.n	8006272 <HAL_ADC_ConfigChannel+0x4fe>
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800624c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800624e:	fa93 f3a3 	rbit	r3, r3
 8006252:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006256:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8006258:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800625a:	2b00      	cmp	r3, #0
 800625c:	d101      	bne.n	8006262 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800625e:	2320      	movs	r3, #32
 8006260:	e003      	b.n	800626a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8006262:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006264:	fab3 f383 	clz	r3, r3
 8006268:	b2db      	uxtb	r3, r3
 800626a:	3301      	adds	r3, #1
 800626c:	069b      	lsls	r3, r3, #26
 800626e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800627a:	2b00      	cmp	r3, #0
 800627c:	d109      	bne.n	8006292 <HAL_ADC_ConfigChannel+0x51e>
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	0e9b      	lsrs	r3, r3, #26
 8006284:	3301      	adds	r3, #1
 8006286:	f003 031f 	and.w	r3, r3, #31
 800628a:	2101      	movs	r1, #1
 800628c:	fa01 f303 	lsl.w	r3, r1, r3
 8006290:	e017      	b.n	80062c2 <HAL_ADC_ConfigChannel+0x54e>
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006298:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800629a:	fa93 f3a3 	rbit	r3, r3
 800629e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80062a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062a2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80062a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d101      	bne.n	80062ae <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80062aa:	2320      	movs	r3, #32
 80062ac:	e003      	b.n	80062b6 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80062ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062b0:	fab3 f383 	clz	r3, r3
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	3301      	adds	r3, #1
 80062b8:	f003 031f 	and.w	r3, r3, #31
 80062bc:	2101      	movs	r1, #1
 80062be:	fa01 f303 	lsl.w	r3, r1, r3
 80062c2:	ea42 0103 	orr.w	r1, r2, r3
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d10a      	bne.n	80062e8 <HAL_ADC_ConfigChannel+0x574>
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	0e9b      	lsrs	r3, r3, #26
 80062d8:	3301      	adds	r3, #1
 80062da:	f003 021f 	and.w	r2, r3, #31
 80062de:	4613      	mov	r3, r2
 80062e0:	005b      	lsls	r3, r3, #1
 80062e2:	4413      	add	r3, r2
 80062e4:	051b      	lsls	r3, r3, #20
 80062e6:	e018      	b.n	800631a <HAL_ADC_ConfigChannel+0x5a6>
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f0:	fa93 f3a3 	rbit	r3, r3
 80062f4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80062f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80062fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d101      	bne.n	8006304 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8006300:	2320      	movs	r3, #32
 8006302:	e003      	b.n	800630c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8006304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006306:	fab3 f383 	clz	r3, r3
 800630a:	b2db      	uxtb	r3, r3
 800630c:	3301      	adds	r3, #1
 800630e:	f003 021f 	and.w	r2, r3, #31
 8006312:	4613      	mov	r3, r2
 8006314:	005b      	lsls	r3, r3, #1
 8006316:	4413      	add	r3, r2
 8006318:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800631a:	430b      	orrs	r3, r1
 800631c:	e081      	b.n	8006422 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006326:	2b00      	cmp	r3, #0
 8006328:	d107      	bne.n	800633a <HAL_ADC_ConfigChannel+0x5c6>
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	0e9b      	lsrs	r3, r3, #26
 8006330:	3301      	adds	r3, #1
 8006332:	069b      	lsls	r3, r3, #26
 8006334:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006338:	e015      	b.n	8006366 <HAL_ADC_ConfigChannel+0x5f2>
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006342:	fa93 f3a3 	rbit	r3, r3
 8006346:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8006348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800634c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634e:	2b00      	cmp	r3, #0
 8006350:	d101      	bne.n	8006356 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8006352:	2320      	movs	r3, #32
 8006354:	e003      	b.n	800635e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8006356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006358:	fab3 f383 	clz	r3, r3
 800635c:	b2db      	uxtb	r3, r3
 800635e:	3301      	adds	r3, #1
 8006360:	069b      	lsls	r3, r3, #26
 8006362:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800636e:	2b00      	cmp	r3, #0
 8006370:	d109      	bne.n	8006386 <HAL_ADC_ConfigChannel+0x612>
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	0e9b      	lsrs	r3, r3, #26
 8006378:	3301      	adds	r3, #1
 800637a:	f003 031f 	and.w	r3, r3, #31
 800637e:	2101      	movs	r1, #1
 8006380:	fa01 f303 	lsl.w	r3, r1, r3
 8006384:	e017      	b.n	80063b6 <HAL_ADC_ConfigChannel+0x642>
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800638c:	6a3b      	ldr	r3, [r7, #32]
 800638e:	fa93 f3a3 	rbit	r3, r3
 8006392:	61fb      	str	r3, [r7, #28]
  return result;
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639a:	2b00      	cmp	r3, #0
 800639c:	d101      	bne.n	80063a2 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800639e:	2320      	movs	r3, #32
 80063a0:	e003      	b.n	80063aa <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80063a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a4:	fab3 f383 	clz	r3, r3
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	3301      	adds	r3, #1
 80063ac:	f003 031f 	and.w	r3, r3, #31
 80063b0:	2101      	movs	r1, #1
 80063b2:	fa01 f303 	lsl.w	r3, r1, r3
 80063b6:	ea42 0103 	orr.w	r1, r2, r3
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d10d      	bne.n	80063e2 <HAL_ADC_ConfigChannel+0x66e>
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	0e9b      	lsrs	r3, r3, #26
 80063cc:	3301      	adds	r3, #1
 80063ce:	f003 021f 	and.w	r2, r3, #31
 80063d2:	4613      	mov	r3, r2
 80063d4:	005b      	lsls	r3, r3, #1
 80063d6:	4413      	add	r3, r2
 80063d8:	3b1e      	subs	r3, #30
 80063da:	051b      	lsls	r3, r3, #20
 80063dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80063e0:	e01e      	b.n	8006420 <HAL_ADC_ConfigChannel+0x6ac>
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	fa93 f3a3 	rbit	r3, r3
 80063ee:	613b      	str	r3, [r7, #16]
  return result;
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d104      	bne.n	8006404 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80063fa:	2320      	movs	r3, #32
 80063fc:	e006      	b.n	800640c <HAL_ADC_ConfigChannel+0x698>
 80063fe:	bf00      	nop
 8006400:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8006404:	69bb      	ldr	r3, [r7, #24]
 8006406:	fab3 f383 	clz	r3, r3
 800640a:	b2db      	uxtb	r3, r3
 800640c:	3301      	adds	r3, #1
 800640e:	f003 021f 	and.w	r2, r3, #31
 8006412:	4613      	mov	r3, r2
 8006414:	005b      	lsls	r3, r3, #1
 8006416:	4413      	add	r3, r2
 8006418:	3b1e      	subs	r3, #30
 800641a:	051b      	lsls	r3, r3, #20
 800641c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006420:	430b      	orrs	r3, r1
 8006422:	683a      	ldr	r2, [r7, #0]
 8006424:	6892      	ldr	r2, [r2, #8]
 8006426:	4619      	mov	r1, r3
 8006428:	f7fe ff18 	bl	800525c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	4b3f      	ldr	r3, [pc, #252]	; (8006530 <HAL_ADC_ConfigChannel+0x7bc>)
 8006432:	4013      	ands	r3, r2
 8006434:	2b00      	cmp	r3, #0
 8006436:	d071      	beq.n	800651c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006438:	483e      	ldr	r0, [pc, #248]	; (8006534 <HAL_ADC_ConfigChannel+0x7c0>)
 800643a:	f7fe fe11 	bl	8005060 <LL_ADC_GetCommonPathInternalCh>
 800643e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a3c      	ldr	r2, [pc, #240]	; (8006538 <HAL_ADC_ConfigChannel+0x7c4>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d004      	beq.n	8006456 <HAL_ADC_ConfigChannel+0x6e2>
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a3a      	ldr	r2, [pc, #232]	; (800653c <HAL_ADC_ConfigChannel+0x7c8>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d127      	bne.n	80064a6 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006456:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800645a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800645e:	2b00      	cmp	r3, #0
 8006460:	d121      	bne.n	80064a6 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800646a:	d157      	bne.n	800651c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800646c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006470:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006474:	4619      	mov	r1, r3
 8006476:	482f      	ldr	r0, [pc, #188]	; (8006534 <HAL_ADC_ConfigChannel+0x7c0>)
 8006478:	f7fe fddf 	bl	800503a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800647c:	4b30      	ldr	r3, [pc, #192]	; (8006540 <HAL_ADC_ConfigChannel+0x7cc>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	099b      	lsrs	r3, r3, #6
 8006482:	4a30      	ldr	r2, [pc, #192]	; (8006544 <HAL_ADC_ConfigChannel+0x7d0>)
 8006484:	fba2 2303 	umull	r2, r3, r2, r3
 8006488:	099b      	lsrs	r3, r3, #6
 800648a:	1c5a      	adds	r2, r3, #1
 800648c:	4613      	mov	r3, r2
 800648e:	005b      	lsls	r3, r3, #1
 8006490:	4413      	add	r3, r2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006496:	e002      	b.n	800649e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	3b01      	subs	r3, #1
 800649c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d1f9      	bne.n	8006498 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80064a4:	e03a      	b.n	800651c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a27      	ldr	r2, [pc, #156]	; (8006548 <HAL_ADC_ConfigChannel+0x7d4>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d113      	bne.n	80064d8 <HAL_ADC_ConfigChannel+0x764>
 80064b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80064b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d10d      	bne.n	80064d8 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a22      	ldr	r2, [pc, #136]	; (800654c <HAL_ADC_ConfigChannel+0x7d8>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d02a      	beq.n	800651c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80064c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80064ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80064ce:	4619      	mov	r1, r3
 80064d0:	4818      	ldr	r0, [pc, #96]	; (8006534 <HAL_ADC_ConfigChannel+0x7c0>)
 80064d2:	f7fe fdb2 	bl	800503a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80064d6:	e021      	b.n	800651c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a1c      	ldr	r2, [pc, #112]	; (8006550 <HAL_ADC_ConfigChannel+0x7dc>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d11c      	bne.n	800651c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80064e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80064e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d116      	bne.n	800651c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a16      	ldr	r2, [pc, #88]	; (800654c <HAL_ADC_ConfigChannel+0x7d8>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d011      	beq.n	800651c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80064f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80064fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006500:	4619      	mov	r1, r3
 8006502:	480c      	ldr	r0, [pc, #48]	; (8006534 <HAL_ADC_ConfigChannel+0x7c0>)
 8006504:	f7fe fd99 	bl	800503a <LL_ADC_SetCommonPathInternalCh>
 8006508:	e008      	b.n	800651c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800650e:	f043 0220 	orr.w	r2, r3, #32
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8006524:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8006528:	4618      	mov	r0, r3
 800652a:	37d8      	adds	r7, #216	; 0xd8
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}
 8006530:	80080000 	.word	0x80080000
 8006534:	50000300 	.word	0x50000300
 8006538:	c3210000 	.word	0xc3210000
 800653c:	90c00010 	.word	0x90c00010
 8006540:	2000000c 	.word	0x2000000c
 8006544:	053e2d63 	.word	0x053e2d63
 8006548:	c7520000 	.word	0xc7520000
 800654c:	50000100 	.word	0x50000100
 8006550:	cb840000 	.word	0xcb840000

08006554 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4618      	mov	r0, r3
 8006562:	f7fe ff4d 	bl	8005400 <LL_ADC_IsEnabled>
 8006566:	4603      	mov	r3, r0
 8006568:	2b00      	cmp	r3, #0
 800656a:	d14d      	bne.n	8006608 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	689a      	ldr	r2, [r3, #8]
 8006572:	4b28      	ldr	r3, [pc, #160]	; (8006614 <ADC_Enable+0xc0>)
 8006574:	4013      	ands	r3, r2
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00d      	beq.n	8006596 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800657e:	f043 0210 	orr.w	r2, r3, #16
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800658a:	f043 0201 	orr.w	r2, r3, #1
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e039      	b.n	800660a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4618      	mov	r0, r3
 800659c:	f7fe ff1c 	bl	80053d8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80065a0:	f7fe fd0a 	bl	8004fb8 <HAL_GetTick>
 80065a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80065a6:	e028      	b.n	80065fa <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4618      	mov	r0, r3
 80065ae:	f7fe ff27 	bl	8005400 <LL_ADC_IsEnabled>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d104      	bne.n	80065c2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4618      	mov	r0, r3
 80065be:	f7fe ff0b 	bl	80053d8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80065c2:	f7fe fcf9 	bl	8004fb8 <HAL_GetTick>
 80065c6:	4602      	mov	r2, r0
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	1ad3      	subs	r3, r2, r3
 80065cc:	2b02      	cmp	r3, #2
 80065ce:	d914      	bls.n	80065fa <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 0301 	and.w	r3, r3, #1
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d00d      	beq.n	80065fa <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065e2:	f043 0210 	orr.w	r2, r3, #16
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065ee:	f043 0201 	orr.w	r2, r3, #1
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e007      	b.n	800660a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0301 	and.w	r3, r3, #1
 8006604:	2b01      	cmp	r3, #1
 8006606:	d1cf      	bne.n	80065a8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006608:	2300      	movs	r3, #0
}
 800660a:	4618      	mov	r0, r3
 800660c:	3710      	adds	r7, #16
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	8000003f 	.word	0x8000003f

08006618 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006624:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800662a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800662e:	2b00      	cmp	r3, #0
 8006630:	d14b      	bne.n	80066ca <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006636:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 0308 	and.w	r3, r3, #8
 8006648:	2b00      	cmp	r3, #0
 800664a:	d021      	beq.n	8006690 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4618      	mov	r0, r3
 8006652:	f7fe fdb1 	bl	80051b8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006656:	4603      	mov	r3, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d032      	beq.n	80066c2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006666:	2b00      	cmp	r3, #0
 8006668:	d12b      	bne.n	80066c2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800666e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800667a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800667e:	2b00      	cmp	r3, #0
 8006680:	d11f      	bne.n	80066c2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006686:	f043 0201 	orr.w	r2, r3, #1
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	65da      	str	r2, [r3, #92]	; 0x5c
 800668e:	e018      	b.n	80066c2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	f003 0302 	and.w	r3, r3, #2
 800669a:	2b00      	cmp	r3, #0
 800669c:	d111      	bne.n	80066c2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d105      	bne.n	80066c2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066ba:	f043 0201 	orr.w	r2, r3, #1
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	f7fc fe3c 	bl	8003340 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80066c8:	e00e      	b.n	80066e8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066ce:	f003 0310 	and.w	r3, r3, #16
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d003      	beq.n	80066de <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80066d6:	68f8      	ldr	r0, [r7, #12]
 80066d8:	f7ff fb42 	bl	8005d60 <HAL_ADC_ErrorCallback>
}
 80066dc:	e004      	b.n	80066e8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	4798      	blx	r3
}
 80066e8:	bf00      	nop
 80066ea:	3710      	adds	r7, #16
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066fc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80066fe:	68f8      	ldr	r0, [r7, #12]
 8006700:	f7fc fce4 	bl	80030cc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006704:	bf00      	nop
 8006706:	3710      	adds	r7, #16
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006718:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800671e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800672a:	f043 0204 	orr.w	r2, r3, #4
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006732:	68f8      	ldr	r0, [r7, #12]
 8006734:	f7ff fb14 	bl	8005d60 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006738:	bf00      	nop
 800673a:	3710      	adds	r7, #16
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <LL_ADC_IsEnabled>:
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	f003 0301 	and.w	r3, r3, #1
 8006750:	2b01      	cmp	r3, #1
 8006752:	d101      	bne.n	8006758 <LL_ADC_IsEnabled+0x18>
 8006754:	2301      	movs	r3, #1
 8006756:	e000      	b.n	800675a <LL_ADC_IsEnabled+0x1a>
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	370c      	adds	r7, #12
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr

08006766 <LL_ADC_REG_IsConversionOngoing>:
{
 8006766:	b480      	push	{r7}
 8006768:	b083      	sub	sp, #12
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	f003 0304 	and.w	r3, r3, #4
 8006776:	2b04      	cmp	r3, #4
 8006778:	d101      	bne.n	800677e <LL_ADC_REG_IsConversionOngoing+0x18>
 800677a:	2301      	movs	r3, #1
 800677c:	e000      	b.n	8006780 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8006794:	bf00      	nop
 8006796:	370c      	adds	r7, #12
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80067a8:	bf00      	nop
 80067aa:	370c      	adds	r7, #12
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80067bc:	bf00      	nop
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80067d0:	bf00      	nop
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80067e4:	bf00      	nop
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80067f0:	b590      	push	{r4, r7, lr}
 80067f2:	b0a1      	sub	sp, #132	; 0x84
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80067fa:	2300      	movs	r3, #0
 80067fc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006806:	2b01      	cmp	r3, #1
 8006808:	d101      	bne.n	800680e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800680a:	2302      	movs	r3, #2
 800680c:	e08b      	b.n	8006926 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2201      	movs	r2, #1
 8006812:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8006816:	2300      	movs	r3, #0
 8006818:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800681a:	2300      	movs	r3, #0
 800681c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006826:	d102      	bne.n	800682e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006828:	4b41      	ldr	r3, [pc, #260]	; (8006930 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800682a:	60bb      	str	r3, [r7, #8]
 800682c:	e001      	b.n	8006832 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800682e:	2300      	movs	r3, #0
 8006830:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d10b      	bne.n	8006850 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800683c:	f043 0220 	orr.w	r2, r3, #32
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	e06a      	b.n	8006926 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	4618      	mov	r0, r3
 8006854:	f7ff ff87 	bl	8006766 <LL_ADC_REG_IsConversionOngoing>
 8006858:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4618      	mov	r0, r3
 8006860:	f7ff ff81 	bl	8006766 <LL_ADC_REG_IsConversionOngoing>
 8006864:	4603      	mov	r3, r0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d14c      	bne.n	8006904 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800686a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800686c:	2b00      	cmp	r3, #0
 800686e:	d149      	bne.n	8006904 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006870:	4b30      	ldr	r3, [pc, #192]	; (8006934 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8006872:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d028      	beq.n	80068ce <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800687c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	6859      	ldr	r1, [r3, #4]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800688e:	035b      	lsls	r3, r3, #13
 8006890:	430b      	orrs	r3, r1
 8006892:	431a      	orrs	r2, r3
 8006894:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006896:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006898:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800689c:	f7ff ff50 	bl	8006740 <LL_ADC_IsEnabled>
 80068a0:	4604      	mov	r4, r0
 80068a2:	4823      	ldr	r0, [pc, #140]	; (8006930 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80068a4:	f7ff ff4c 	bl	8006740 <LL_ADC_IsEnabled>
 80068a8:	4603      	mov	r3, r0
 80068aa:	4323      	orrs	r3, r4
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d133      	bne.n	8006918 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80068b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80068b8:	f023 030f 	bic.w	r3, r3, #15
 80068bc:	683a      	ldr	r2, [r7, #0]
 80068be:	6811      	ldr	r1, [r2, #0]
 80068c0:	683a      	ldr	r2, [r7, #0]
 80068c2:	6892      	ldr	r2, [r2, #8]
 80068c4:	430a      	orrs	r2, r1
 80068c6:	431a      	orrs	r2, r3
 80068c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068ca:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80068cc:	e024      	b.n	8006918 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80068ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80068d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068d8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80068da:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80068de:	f7ff ff2f 	bl	8006740 <LL_ADC_IsEnabled>
 80068e2:	4604      	mov	r4, r0
 80068e4:	4812      	ldr	r0, [pc, #72]	; (8006930 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80068e6:	f7ff ff2b 	bl	8006740 <LL_ADC_IsEnabled>
 80068ea:	4603      	mov	r3, r0
 80068ec:	4323      	orrs	r3, r4
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d112      	bne.n	8006918 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80068f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80068fa:	f023 030f 	bic.w	r3, r3, #15
 80068fe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006900:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006902:	e009      	b.n	8006918 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006908:	f043 0220 	orr.w	r2, r3, #32
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8006916:	e000      	b.n	800691a <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006918:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8006922:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006926:	4618      	mov	r0, r3
 8006928:	3784      	adds	r7, #132	; 0x84
 800692a:	46bd      	mov	sp, r7
 800692c:	bd90      	pop	{r4, r7, pc}
 800692e:	bf00      	nop
 8006930:	50000100 	.word	0x50000100
 8006934:	50000300 	.word	0x50000300

08006938 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f003 0307 	and.w	r3, r3, #7
 8006946:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006948:	4b0c      	ldr	r3, [pc, #48]	; (800697c <__NVIC_SetPriorityGrouping+0x44>)
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800694e:	68ba      	ldr	r2, [r7, #8]
 8006950:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006954:	4013      	ands	r3, r2
 8006956:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006960:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006968:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800696a:	4a04      	ldr	r2, [pc, #16]	; (800697c <__NVIC_SetPriorityGrouping+0x44>)
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	60d3      	str	r3, [r2, #12]
}
 8006970:	bf00      	nop
 8006972:	3714      	adds	r7, #20
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr
 800697c:	e000ed00 	.word	0xe000ed00

08006980 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006980:	b480      	push	{r7}
 8006982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006984:	4b04      	ldr	r3, [pc, #16]	; (8006998 <__NVIC_GetPriorityGrouping+0x18>)
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	0a1b      	lsrs	r3, r3, #8
 800698a:	f003 0307 	and.w	r3, r3, #7
}
 800698e:	4618      	mov	r0, r3
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr
 8006998:	e000ed00 	.word	0xe000ed00

0800699c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	4603      	mov	r3, r0
 80069a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	db0b      	blt.n	80069c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80069ae:	79fb      	ldrb	r3, [r7, #7]
 80069b0:	f003 021f 	and.w	r2, r3, #31
 80069b4:	4907      	ldr	r1, [pc, #28]	; (80069d4 <__NVIC_EnableIRQ+0x38>)
 80069b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069ba:	095b      	lsrs	r3, r3, #5
 80069bc:	2001      	movs	r0, #1
 80069be:	fa00 f202 	lsl.w	r2, r0, r2
 80069c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80069c6:	bf00      	nop
 80069c8:	370c      	adds	r7, #12
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	e000e100 	.word	0xe000e100

080069d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	4603      	mov	r3, r0
 80069e0:	6039      	str	r1, [r7, #0]
 80069e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	db0a      	blt.n	8006a02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	b2da      	uxtb	r2, r3
 80069f0:	490c      	ldr	r1, [pc, #48]	; (8006a24 <__NVIC_SetPriority+0x4c>)
 80069f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069f6:	0112      	lsls	r2, r2, #4
 80069f8:	b2d2      	uxtb	r2, r2
 80069fa:	440b      	add	r3, r1
 80069fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006a00:	e00a      	b.n	8006a18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	b2da      	uxtb	r2, r3
 8006a06:	4908      	ldr	r1, [pc, #32]	; (8006a28 <__NVIC_SetPriority+0x50>)
 8006a08:	79fb      	ldrb	r3, [r7, #7]
 8006a0a:	f003 030f 	and.w	r3, r3, #15
 8006a0e:	3b04      	subs	r3, #4
 8006a10:	0112      	lsls	r2, r2, #4
 8006a12:	b2d2      	uxtb	r2, r2
 8006a14:	440b      	add	r3, r1
 8006a16:	761a      	strb	r2, [r3, #24]
}
 8006a18:	bf00      	nop
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr
 8006a24:	e000e100 	.word	0xe000e100
 8006a28:	e000ed00 	.word	0xe000ed00

08006a2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b089      	sub	sp, #36	; 0x24
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f003 0307 	and.w	r3, r3, #7
 8006a3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	f1c3 0307 	rsb	r3, r3, #7
 8006a46:	2b04      	cmp	r3, #4
 8006a48:	bf28      	it	cs
 8006a4a:	2304      	movcs	r3, #4
 8006a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	3304      	adds	r3, #4
 8006a52:	2b06      	cmp	r3, #6
 8006a54:	d902      	bls.n	8006a5c <NVIC_EncodePriority+0x30>
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	3b03      	subs	r3, #3
 8006a5a:	e000      	b.n	8006a5e <NVIC_EncodePriority+0x32>
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a60:	f04f 32ff 	mov.w	r2, #4294967295
 8006a64:	69bb      	ldr	r3, [r7, #24]
 8006a66:	fa02 f303 	lsl.w	r3, r2, r3
 8006a6a:	43da      	mvns	r2, r3
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	401a      	ands	r2, r3
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006a74:	f04f 31ff 	mov.w	r1, #4294967295
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a7e:	43d9      	mvns	r1, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a84:	4313      	orrs	r3, r2
         );
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3724      	adds	r7, #36	; 0x24
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr
	...

08006a94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b082      	sub	sp, #8
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006aa4:	d301      	bcc.n	8006aaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e00f      	b.n	8006aca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006aaa:	4a0a      	ldr	r2, [pc, #40]	; (8006ad4 <SysTick_Config+0x40>)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006ab2:	210f      	movs	r1, #15
 8006ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab8:	f7ff ff8e 	bl	80069d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006abc:	4b05      	ldr	r3, [pc, #20]	; (8006ad4 <SysTick_Config+0x40>)
 8006abe:	2200      	movs	r2, #0
 8006ac0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006ac2:	4b04      	ldr	r3, [pc, #16]	; (8006ad4 <SysTick_Config+0x40>)
 8006ac4:	2207      	movs	r2, #7
 8006ac6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3708      	adds	r7, #8
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	e000e010 	.word	0xe000e010

08006ad8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f7ff ff29 	bl	8006938 <__NVIC_SetPriorityGrouping>
}
 8006ae6:	bf00      	nop
 8006ae8:	3708      	adds	r7, #8
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}

08006aee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006aee:	b580      	push	{r7, lr}
 8006af0:	b086      	sub	sp, #24
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	4603      	mov	r3, r0
 8006af6:	60b9      	str	r1, [r7, #8]
 8006af8:	607a      	str	r2, [r7, #4]
 8006afa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006afc:	f7ff ff40 	bl	8006980 <__NVIC_GetPriorityGrouping>
 8006b00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	68b9      	ldr	r1, [r7, #8]
 8006b06:	6978      	ldr	r0, [r7, #20]
 8006b08:	f7ff ff90 	bl	8006a2c <NVIC_EncodePriority>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b12:	4611      	mov	r1, r2
 8006b14:	4618      	mov	r0, r3
 8006b16:	f7ff ff5f 	bl	80069d8 <__NVIC_SetPriority>
}
 8006b1a:	bf00      	nop
 8006b1c:	3718      	adds	r7, #24
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b082      	sub	sp, #8
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	4603      	mov	r3, r0
 8006b2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b30:	4618      	mov	r0, r3
 8006b32:	f7ff ff33 	bl	800699c <__NVIC_EnableIRQ>
}
 8006b36:	bf00      	nop
 8006b38:	3708      	adds	r7, #8
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b082      	sub	sp, #8
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f7ff ffa4 	bl	8006a94 <SysTick_Config>
 8006b4c:	4603      	mov	r3, r0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3708      	adds	r7, #8
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}

08006b56 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8006b56:	b580      	push	{r7, lr}
 8006b58:	b082      	sub	sp, #8
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d101      	bne.n	8006b68 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	e014      	b.n	8006b92 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	791b      	ldrb	r3, [r3, #4]
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d105      	bne.n	8006b7e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f7fd f8e7 	bl	8003d4c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2202      	movs	r2, #2
 8006b82:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3708      	adds	r7, #8
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b082      	sub	sp, #8
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
 8006ba2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	795b      	ldrb	r3, [r3, #5]
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d101      	bne.n	8006bb0 <HAL_DAC_Start+0x16>
 8006bac:	2302      	movs	r3, #2
 8006bae:	e043      	b.n	8006c38 <HAL_DAC_Start+0x9e>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2202      	movs	r2, #2
 8006bba:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	6819      	ldr	r1, [r3, #0]
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	f003 0310 	and.w	r3, r3, #16
 8006bc8:	2201      	movs	r2, #1
 8006bca:	409a      	lsls	r2, r3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	430a      	orrs	r2, r1
 8006bd2:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8006bd4:	2001      	movs	r0, #1
 8006bd6:	f7fe f9fb 	bl	8004fd0 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d10f      	bne.n	8006c00 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8006bea:	2b02      	cmp	r3, #2
 8006bec:	d11d      	bne.n	8006c2a <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	685a      	ldr	r2, [r3, #4]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f042 0201 	orr.w	r2, r2, #1
 8006bfc:	605a      	str	r2, [r3, #4]
 8006bfe:	e014      	b.n	8006c2a <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	f003 0310 	and.w	r3, r3, #16
 8006c10:	2102      	movs	r1, #2
 8006c12:	fa01 f303 	lsl.w	r3, r1, r3
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d107      	bne.n	8006c2a <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	685a      	ldr	r2, [r3, #4]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f042 0202 	orr.w	r2, r2, #2
 8006c28:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006c36:	2300      	movs	r3, #0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3708      	adds	r7, #8
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b08a      	sub	sp, #40	; 0x28
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	795b      	ldrb	r3, [r3, #5]
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d101      	bne.n	8006c58 <HAL_DAC_ConfigChannel+0x18>
 8006c54:	2302      	movs	r3, #2
 8006c56:	e192      	b.n	8006f7e <HAL_DAC_ConfigChannel+0x33e>
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2202      	movs	r2, #2
 8006c62:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	2b04      	cmp	r3, #4
 8006c6a:	d174      	bne.n	8006d56 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8006c6c:	f7fe f9a4 	bl	8004fb8 <HAL_GetTick>
 8006c70:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d134      	bne.n	8006ce2 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006c78:	e011      	b.n	8006c9e <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006c7a:	f7fe f99d 	bl	8004fb8 <HAL_GetTick>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	1ad3      	subs	r3, r2, r3
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d90a      	bls.n	8006c9e <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	691b      	ldr	r3, [r3, #16]
 8006c8c:	f043 0208 	orr.w	r2, r3, #8
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2203      	movs	r2, #3
 8006c98:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	e16f      	b.n	8006f7e <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ca4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d1e6      	bne.n	8006c7a <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8006cac:	2001      	movs	r0, #1
 8006cae:	f7fe f98f 	bl	8004fd0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	68ba      	ldr	r2, [r7, #8]
 8006cb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006cba:	641a      	str	r2, [r3, #64]	; 0x40
 8006cbc:	e01e      	b.n	8006cfc <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006cbe:	f7fe f97b 	bl	8004fb8 <HAL_GetTick>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	1ad3      	subs	r3, r2, r3
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d90a      	bls.n	8006ce2 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	691b      	ldr	r3, [r3, #16]
 8006cd0:	f043 0208 	orr.w	r2, r3, #8
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2203      	movs	r2, #3
 8006cdc:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8006cde:	2303      	movs	r3, #3
 8006ce0:	e14d      	b.n	8006f7e <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	dbe8      	blt.n	8006cbe <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8006cec:	2001      	movs	r0, #1
 8006cee:	f7fe f96f 	bl	8004fd0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	68ba      	ldr	r2, [r7, #8]
 8006cf8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006cfa:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f003 0310 	and.w	r3, r3, #16
 8006d08:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d10:	43db      	mvns	r3, r3
 8006d12:	ea02 0103 	and.w	r1, r2, r3
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f003 0310 	and.w	r3, r3, #16
 8006d20:	409a      	lsls	r2, r3
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	430a      	orrs	r2, r1
 8006d28:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f003 0310 	and.w	r3, r3, #16
 8006d36:	21ff      	movs	r1, #255	; 0xff
 8006d38:	fa01 f303 	lsl.w	r3, r1, r3
 8006d3c:	43db      	mvns	r3, r3
 8006d3e:	ea02 0103 	and.w	r1, r2, r3
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f003 0310 	and.w	r3, r3, #16
 8006d4c:	409a      	lsls	r2, r3
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	430a      	orrs	r2, r1
 8006d54:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	69db      	ldr	r3, [r3, #28]
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d11d      	bne.n	8006d9a <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d64:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f003 0310 	and.w	r3, r3, #16
 8006d6c:	221f      	movs	r2, #31
 8006d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d72:	43db      	mvns	r3, r3
 8006d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d76:	4013      	ands	r3, r2
 8006d78:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	6a1b      	ldr	r3, [r3, #32]
 8006d7e:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f003 0310 	and.w	r3, r3, #16
 8006d86:	69ba      	ldr	r2, [r7, #24]
 8006d88:	fa02 f303 	lsl.w	r3, r2, r3
 8006d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d98:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006da0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f003 0310 	and.w	r3, r3, #16
 8006da8:	2207      	movs	r2, #7
 8006daa:	fa02 f303 	lsl.w	r3, r2, r3
 8006dae:	43db      	mvns	r3, r3
 8006db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006db2:	4013      	ands	r3, r2
 8006db4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	699b      	ldr	r3, [r3, #24]
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d102      	bne.n	8006dc4 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	623b      	str	r3, [r7, #32]
 8006dc2:	e00f      	b.n	8006de4 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	699b      	ldr	r3, [r3, #24]
 8006dc8:	2b02      	cmp	r3, #2
 8006dca:	d102      	bne.n	8006dd2 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	623b      	str	r3, [r7, #32]
 8006dd0:	e008      	b.n	8006de4 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	695b      	ldr	r3, [r3, #20]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d102      	bne.n	8006de0 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	623b      	str	r3, [r7, #32]
 8006dde:	e001      	b.n	8006de4 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8006de0:	2300      	movs	r3, #0
 8006de2:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	689a      	ldr	r2, [r3, #8]
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	695b      	ldr	r3, [r3, #20]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	6a3a      	ldr	r2, [r7, #32]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f003 0310 	and.w	r3, r3, #16
 8006dfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8006e02:	43db      	mvns	r3, r3
 8006e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e06:	4013      	ands	r3, r2
 8006e08:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	791b      	ldrb	r3, [r3, #4]
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d102      	bne.n	8006e18 <HAL_DAC_ConfigChannel+0x1d8>
 8006e12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e16:	e000      	b.n	8006e1a <HAL_DAC_ConfigChannel+0x1da>
 8006e18:	2300      	movs	r3, #0
 8006e1a:	69ba      	ldr	r2, [r7, #24]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f003 0310 	and.w	r3, r3, #16
 8006e26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e2e:	43db      	mvns	r3, r3
 8006e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e32:	4013      	ands	r3, r2
 8006e34:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	795b      	ldrb	r3, [r3, #5]
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d102      	bne.n	8006e44 <HAL_DAC_ConfigChannel+0x204>
 8006e3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e42:	e000      	b.n	8006e46 <HAL_DAC_ConfigChannel+0x206>
 8006e44:	2300      	movs	r3, #0
 8006e46:	69ba      	ldr	r2, [r7, #24]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8006e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8006e52:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	2b02      	cmp	r3, #2
 8006e5a:	d114      	bne.n	8006e86 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8006e5c:	f002 f8f8 	bl	8009050 <HAL_RCC_GetHCLKFreq>
 8006e60:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	4a48      	ldr	r2, [pc, #288]	; (8006f88 <HAL_DAC_ConfigChannel+0x348>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d904      	bls.n	8006e74 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8006e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e70:	627b      	str	r3, [r7, #36]	; 0x24
 8006e72:	e00f      	b.n	8006e94 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	4a45      	ldr	r2, [pc, #276]	; (8006f8c <HAL_DAC_ConfigChannel+0x34c>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d90a      	bls.n	8006e92 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006e82:	627b      	str	r3, [r7, #36]	; 0x24
 8006e84:	e006      	b.n	8006e94 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	627b      	str	r3, [r7, #36]	; 0x24
 8006e90:	e000      	b.n	8006e94 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8006e92:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f003 0310 	and.w	r3, r3, #16
 8006e9a:	69ba      	ldr	r2, [r7, #24]
 8006e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	6819      	ldr	r1, [r3, #0]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f003 0310 	and.w	r3, r3, #16
 8006eba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8006ec2:	43da      	mvns	r2, r3
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	400a      	ands	r2, r1
 8006eca:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f003 0310 	and.w	r3, r3, #16
 8006eda:	f640 72fe 	movw	r2, #4094	; 0xffe
 8006ede:	fa02 f303 	lsl.w	r3, r2, r3
 8006ee2:	43db      	mvns	r3, r3
 8006ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ee6:	4013      	ands	r3, r2
 8006ee8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f003 0310 	and.w	r3, r3, #16
 8006ef6:	69ba      	ldr	r2, [r7, #24]
 8006ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8006efc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006efe:	4313      	orrs	r3, r2
 8006f00:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f08:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	6819      	ldr	r1, [r3, #0]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f003 0310 	and.w	r3, r3, #16
 8006f16:	22c0      	movs	r2, #192	; 0xc0
 8006f18:	fa02 f303 	lsl.w	r3, r2, r3
 8006f1c:	43da      	mvns	r2, r3
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	400a      	ands	r2, r1
 8006f24:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	089b      	lsrs	r3, r3, #2
 8006f2c:	f003 030f 	and.w	r3, r3, #15
 8006f30:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	089b      	lsrs	r3, r3, #2
 8006f38:	021b      	lsls	r3, r3, #8
 8006f3a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006f3e:	69ba      	ldr	r2, [r7, #24]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f003 0310 	and.w	r3, r3, #16
 8006f50:	f640 710f 	movw	r1, #3855	; 0xf0f
 8006f54:	fa01 f303 	lsl.w	r3, r1, r3
 8006f58:	43db      	mvns	r3, r3
 8006f5a:	ea02 0103 	and.w	r1, r2, r3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f003 0310 	and.w	r3, r3, #16
 8006f64:	69ba      	ldr	r2, [r7, #24]
 8006f66:	409a      	lsls	r2, r3
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	430a      	orrs	r2, r1
 8006f6e:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2201      	movs	r2, #1
 8006f74:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3728      	adds	r7, #40	; 0x28
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	09896800 	.word	0x09896800
 8006f8c:	04c4b400 	.word	0x04c4b400

08006f90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d101      	bne.n	8006fa2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e08d      	b.n	80070be <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	4b47      	ldr	r3, [pc, #284]	; (80070c8 <HAL_DMA_Init+0x138>)
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d80f      	bhi.n	8006fce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	4b45      	ldr	r3, [pc, #276]	; (80070cc <HAL_DMA_Init+0x13c>)
 8006fb6:	4413      	add	r3, r2
 8006fb8:	4a45      	ldr	r2, [pc, #276]	; (80070d0 <HAL_DMA_Init+0x140>)
 8006fba:	fba2 2303 	umull	r2, r3, r2, r3
 8006fbe:	091b      	lsrs	r3, r3, #4
 8006fc0:	009a      	lsls	r2, r3, #2
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a42      	ldr	r2, [pc, #264]	; (80070d4 <HAL_DMA_Init+0x144>)
 8006fca:	641a      	str	r2, [r3, #64]	; 0x40
 8006fcc:	e00e      	b.n	8006fec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	4b40      	ldr	r3, [pc, #256]	; (80070d8 <HAL_DMA_Init+0x148>)
 8006fd6:	4413      	add	r3, r2
 8006fd8:	4a3d      	ldr	r2, [pc, #244]	; (80070d0 <HAL_DMA_Init+0x140>)
 8006fda:	fba2 2303 	umull	r2, r3, r2, r3
 8006fde:	091b      	lsrs	r3, r3, #4
 8006fe0:	009a      	lsls	r2, r3, #2
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	4a3c      	ldr	r2, [pc, #240]	; (80070dc <HAL_DMA_Init+0x14c>)
 8006fea:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2202      	movs	r2, #2
 8006ff0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007006:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007010:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	691b      	ldr	r3, [r3, #16]
 8007016:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800701c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	699b      	ldr	r3, [r3, #24]
 8007022:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007028:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6a1b      	ldr	r3, [r3, #32]
 800702e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007030:	68fa      	ldr	r2, [r7, #12]
 8007032:	4313      	orrs	r3, r2
 8007034:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	68fa      	ldr	r2, [r7, #12]
 800703c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 fa76 	bl	8007530 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800704c:	d102      	bne.n	8007054 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	685a      	ldr	r2, [r3, #4]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800705c:	b2d2      	uxtb	r2, r2
 800705e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007068:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d010      	beq.n	8007094 <HAL_DMA_Init+0x104>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	2b04      	cmp	r3, #4
 8007078:	d80c      	bhi.n	8007094 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 fa96 	bl	80075ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007084:	2200      	movs	r2, #0
 8007086:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007090:	605a      	str	r2, [r3, #4]
 8007092:	e008      	b.n	80070a6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2200      	movs	r2, #0
 800709e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2200      	movs	r2, #0
 80070a4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80070bc:	2300      	movs	r3, #0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3710      	adds	r7, #16
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	40020407 	.word	0x40020407
 80070cc:	bffdfff8 	.word	0xbffdfff8
 80070d0:	cccccccd 	.word	0xcccccccd
 80070d4:	40020000 	.word	0x40020000
 80070d8:	bffdfbf8 	.word	0xbffdfbf8
 80070dc:	40020400 	.word	0x40020400

080070e0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b086      	sub	sp, #24
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	607a      	str	r2, [r7, #4]
 80070ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80070ee:	2300      	movs	r3, #0
 80070f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d101      	bne.n	8007100 <HAL_DMA_Start_IT+0x20>
 80070fc:	2302      	movs	r3, #2
 80070fe:	e066      	b.n	80071ce <HAL_DMA_Start_IT+0xee>
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800710e:	b2db      	uxtb	r3, r3
 8007110:	2b01      	cmp	r3, #1
 8007112:	d155      	bne.n	80071c0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2202      	movs	r2, #2
 8007118:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2200      	movs	r2, #0
 8007120:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f022 0201 	bic.w	r2, r2, #1
 8007130:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	68b9      	ldr	r1, [r7, #8]
 8007138:	68f8      	ldr	r0, [r7, #12]
 800713a:	f000 f9bb 	bl	80074b4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007142:	2b00      	cmp	r3, #0
 8007144:	d008      	beq.n	8007158 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f042 020e 	orr.w	r2, r2, #14
 8007154:	601a      	str	r2, [r3, #0]
 8007156:	e00f      	b.n	8007178 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f022 0204 	bic.w	r2, r2, #4
 8007166:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f042 020a 	orr.w	r2, r2, #10
 8007176:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007182:	2b00      	cmp	r3, #0
 8007184:	d007      	beq.n	8007196 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007190:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007194:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800719a:	2b00      	cmp	r3, #0
 800719c:	d007      	beq.n	80071ae <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071ac:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f042 0201 	orr.w	r2, r2, #1
 80071bc:	601a      	str	r2, [r3, #0]
 80071be:	e005      	b.n	80071cc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80071c8:	2302      	movs	r3, #2
 80071ca:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80071cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3718      	adds	r7, #24
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}

080071d6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80071d6:	b480      	push	{r7}
 80071d8:	b085      	sub	sp, #20
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071de:	2300      	movs	r3, #0
 80071e0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80071e8:	b2db      	uxtb	r3, r3
 80071ea:	2b02      	cmp	r3, #2
 80071ec:	d005      	beq.n	80071fa <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2204      	movs	r2, #4
 80071f2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80071f4:	2301      	movs	r3, #1
 80071f6:	73fb      	strb	r3, [r7, #15]
 80071f8:	e037      	b.n	800726a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f022 020e 	bic.w	r2, r2, #14
 8007208:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007214:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007218:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f022 0201 	bic.w	r2, r2, #1
 8007228:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800722e:	f003 021f 	and.w	r2, r3, #31
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007236:	2101      	movs	r1, #1
 8007238:	fa01 f202 	lsl.w	r2, r1, r2
 800723c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007246:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800724c:	2b00      	cmp	r3, #0
 800724e:	d00c      	beq.n	800726a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800725a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800725e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007268:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2201      	movs	r2, #1
 800726e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800727a:	7bfb      	ldrb	r3, [r7, #15]
}
 800727c:	4618      	mov	r0, r3
 800727e:	3714      	adds	r7, #20
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007290:	2300      	movs	r3, #0
 8007292:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800729a:	b2db      	uxtb	r3, r3
 800729c:	2b02      	cmp	r3, #2
 800729e:	d00d      	beq.n	80072bc <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2204      	movs	r2, #4
 80072a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2201      	movs	r2, #1
 80072aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	73fb      	strb	r3, [r7, #15]
 80072ba:	e047      	b.n	800734c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f022 020e 	bic.w	r2, r2, #14
 80072ca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f022 0201 	bic.w	r2, r2, #1
 80072da:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072f0:	f003 021f 	and.w	r2, r3, #31
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f8:	2101      	movs	r1, #1
 80072fa:	fa01 f202 	lsl.w	r2, r1, r2
 80072fe:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007308:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00c      	beq.n	800732c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800731c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007320:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800732a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007340:	2b00      	cmp	r3, #0
 8007342:	d003      	beq.n	800734c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	4798      	blx	r3
    }
  }
  return status;
 800734c:	7bfb      	ldrb	r3, [r7, #15]
}
 800734e:	4618      	mov	r0, r3
 8007350:	3710      	adds	r7, #16
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}

08007356 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007356:	b580      	push	{r7, lr}
 8007358:	b084      	sub	sp, #16
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007372:	f003 031f 	and.w	r3, r3, #31
 8007376:	2204      	movs	r2, #4
 8007378:	409a      	lsls	r2, r3
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	4013      	ands	r3, r2
 800737e:	2b00      	cmp	r3, #0
 8007380:	d026      	beq.n	80073d0 <HAL_DMA_IRQHandler+0x7a>
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	f003 0304 	and.w	r3, r3, #4
 8007388:	2b00      	cmp	r3, #0
 800738a:	d021      	beq.n	80073d0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 0320 	and.w	r3, r3, #32
 8007396:	2b00      	cmp	r3, #0
 8007398:	d107      	bne.n	80073aa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f022 0204 	bic.w	r2, r2, #4
 80073a8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ae:	f003 021f 	and.w	r2, r3, #31
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b6:	2104      	movs	r1, #4
 80073b8:	fa01 f202 	lsl.w	r2, r1, r2
 80073bc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d071      	beq.n	80074aa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80073ce:	e06c      	b.n	80074aa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073d4:	f003 031f 	and.w	r3, r3, #31
 80073d8:	2202      	movs	r2, #2
 80073da:	409a      	lsls	r2, r3
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	4013      	ands	r3, r2
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d02e      	beq.n	8007442 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	f003 0302 	and.w	r3, r3, #2
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d029      	beq.n	8007442 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f003 0320 	and.w	r3, r3, #32
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d10b      	bne.n	8007414 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f022 020a 	bic.w	r2, r2, #10
 800740a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007418:	f003 021f 	and.w	r2, r3, #31
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007420:	2102      	movs	r1, #2
 8007422:	fa01 f202 	lsl.w	r2, r1, r2
 8007426:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007434:	2b00      	cmp	r3, #0
 8007436:	d038      	beq.n	80074aa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007440:	e033      	b.n	80074aa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007446:	f003 031f 	and.w	r3, r3, #31
 800744a:	2208      	movs	r2, #8
 800744c:	409a      	lsls	r2, r3
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	4013      	ands	r3, r2
 8007452:	2b00      	cmp	r3, #0
 8007454:	d02a      	beq.n	80074ac <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	f003 0308 	and.w	r3, r3, #8
 800745c:	2b00      	cmp	r3, #0
 800745e:	d025      	beq.n	80074ac <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f022 020e 	bic.w	r2, r2, #14
 800746e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007474:	f003 021f 	and.w	r2, r3, #31
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800747c:	2101      	movs	r1, #1
 800747e:	fa01 f202 	lsl.w	r2, r1, r2
 8007482:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2201      	movs	r2, #1
 800748e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d004      	beq.n	80074ac <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80074aa:	bf00      	nop
 80074ac:	bf00      	nop
}
 80074ae:	3710      	adds	r7, #16
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b085      	sub	sp, #20
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	607a      	str	r2, [r7, #4]
 80074c0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074c6:	68fa      	ldr	r2, [r7, #12]
 80074c8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80074ca:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d004      	beq.n	80074de <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074d8:	68fa      	ldr	r2, [r7, #12]
 80074da:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80074dc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074e2:	f003 021f 	and.w	r2, r3, #31
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ea:	2101      	movs	r1, #1
 80074ec:	fa01 f202 	lsl.w	r2, r1, r2
 80074f0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	683a      	ldr	r2, [r7, #0]
 80074f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	2b10      	cmp	r3, #16
 8007500:	d108      	bne.n	8007514 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	68ba      	ldr	r2, [r7, #8]
 8007510:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007512:	e007      	b.n	8007524 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	68ba      	ldr	r2, [r7, #8]
 800751a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	60da      	str	r2, [r3, #12]
}
 8007524:	bf00      	nop
 8007526:	3714      	adds	r7, #20
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007530:	b480      	push	{r7}
 8007532:	b087      	sub	sp, #28
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	461a      	mov	r2, r3
 800753e:	4b16      	ldr	r3, [pc, #88]	; (8007598 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8007540:	429a      	cmp	r2, r3
 8007542:	d802      	bhi.n	800754a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8007544:	4b15      	ldr	r3, [pc, #84]	; (800759c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007546:	617b      	str	r3, [r7, #20]
 8007548:	e001      	b.n	800754e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800754a:	4b15      	ldr	r3, [pc, #84]	; (80075a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800754c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	b2db      	uxtb	r3, r3
 8007558:	3b08      	subs	r3, #8
 800755a:	4a12      	ldr	r2, [pc, #72]	; (80075a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800755c:	fba2 2303 	umull	r2, r3, r2, r3
 8007560:	091b      	lsrs	r3, r3, #4
 8007562:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007568:	089b      	lsrs	r3, r3, #2
 800756a:	009a      	lsls	r2, r3, #2
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	4413      	add	r3, r2
 8007570:	461a      	mov	r2, r3
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	4a0b      	ldr	r2, [pc, #44]	; (80075a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800757a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f003 031f 	and.w	r3, r3, #31
 8007582:	2201      	movs	r2, #1
 8007584:	409a      	lsls	r2, r3
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	651a      	str	r2, [r3, #80]	; 0x50
}
 800758a:	bf00      	nop
 800758c:	371c      	adds	r7, #28
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr
 8007596:	bf00      	nop
 8007598:	40020407 	.word	0x40020407
 800759c:	40020800 	.word	0x40020800
 80075a0:	40020820 	.word	0x40020820
 80075a4:	cccccccd 	.word	0xcccccccd
 80075a8:	40020880 	.word	0x40020880

080075ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b085      	sub	sp, #20
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80075bc:	68fa      	ldr	r2, [r7, #12]
 80075be:	4b0b      	ldr	r3, [pc, #44]	; (80075ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80075c0:	4413      	add	r3, r2
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	461a      	mov	r2, r3
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a08      	ldr	r2, [pc, #32]	; (80075f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80075ce:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	3b01      	subs	r3, #1
 80075d4:	f003 031f 	and.w	r3, r3, #31
 80075d8:	2201      	movs	r2, #1
 80075da:	409a      	lsls	r2, r3
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80075e0:	bf00      	nop
 80075e2:	3714      	adds	r7, #20
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr
 80075ec:	1000823f 	.word	0x1000823f
 80075f0:	40020940 	.word	0x40020940

080075f4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d101      	bne.n	8007606 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	e147      	b.n	8007896 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800760c:	b2db      	uxtb	r3, r3
 800760e:	2b00      	cmp	r3, #0
 8007610:	d106      	bne.n	8007620 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f7fc fc82 	bl	8003f24 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	699a      	ldr	r2, [r3, #24]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f022 0210 	bic.w	r2, r2, #16
 800762e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007630:	f7fd fcc2 	bl	8004fb8 <HAL_GetTick>
 8007634:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007636:	e012      	b.n	800765e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007638:	f7fd fcbe 	bl	8004fb8 <HAL_GetTick>
 800763c:	4602      	mov	r2, r0
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	1ad3      	subs	r3, r2, r3
 8007642:	2b0a      	cmp	r3, #10
 8007644:	d90b      	bls.n	800765e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800764a:	f043 0201 	orr.w	r2, r3, #1
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2203      	movs	r2, #3
 8007656:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	e11b      	b.n	8007896 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	699b      	ldr	r3, [r3, #24]
 8007664:	f003 0308 	and.w	r3, r3, #8
 8007668:	2b08      	cmp	r3, #8
 800766a:	d0e5      	beq.n	8007638 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	699a      	ldr	r2, [r3, #24]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f042 0201 	orr.w	r2, r2, #1
 800767a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800767c:	f7fd fc9c 	bl	8004fb8 <HAL_GetTick>
 8007680:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007682:	e012      	b.n	80076aa <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007684:	f7fd fc98 	bl	8004fb8 <HAL_GetTick>
 8007688:	4602      	mov	r2, r0
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	1ad3      	subs	r3, r2, r3
 800768e:	2b0a      	cmp	r3, #10
 8007690:	d90b      	bls.n	80076aa <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007696:	f043 0201 	orr.w	r2, r3, #1
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2203      	movs	r2, #3
 80076a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	e0f5      	b.n	8007896 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	699b      	ldr	r3, [r3, #24]
 80076b0:	f003 0301 	and.w	r3, r3, #1
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d0e5      	beq.n	8007684 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	699a      	ldr	r2, [r3, #24]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f042 0202 	orr.w	r2, r2, #2
 80076c6:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a74      	ldr	r2, [pc, #464]	; (80078a0 <HAL_FDCAN_Init+0x2ac>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d103      	bne.n	80076da <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80076d2:	4a74      	ldr	r2, [pc, #464]	; (80078a4 <HAL_FDCAN_Init+0x2b0>)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	7c1b      	ldrb	r3, [r3, #16]
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d108      	bne.n	80076f4 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	699a      	ldr	r2, [r3, #24]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076f0:	619a      	str	r2, [r3, #24]
 80076f2:	e007      	b.n	8007704 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	699a      	ldr	r2, [r3, #24]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007702:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	7c5b      	ldrb	r3, [r3, #17]
 8007708:	2b01      	cmp	r3, #1
 800770a:	d108      	bne.n	800771e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	699a      	ldr	r2, [r3, #24]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800771a:	619a      	str	r2, [r3, #24]
 800771c:	e007      	b.n	800772e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	699a      	ldr	r2, [r3, #24]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800772c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	7c9b      	ldrb	r3, [r3, #18]
 8007732:	2b01      	cmp	r3, #1
 8007734:	d108      	bne.n	8007748 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	699a      	ldr	r2, [r3, #24]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007744:	619a      	str	r2, [r3, #24]
 8007746:	e007      	b.n	8007758 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	699a      	ldr	r2, [r3, #24]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007756:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	699b      	ldr	r3, [r3, #24]
 800775e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	689a      	ldr	r2, [r3, #8]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	430a      	orrs	r2, r1
 800776c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	699a      	ldr	r2, [r3, #24]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800777c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	691a      	ldr	r2, [r3, #16]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f022 0210 	bic.w	r2, r2, #16
 800778c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	68db      	ldr	r3, [r3, #12]
 8007792:	2b01      	cmp	r3, #1
 8007794:	d108      	bne.n	80077a8 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	699a      	ldr	r2, [r3, #24]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f042 0204 	orr.w	r2, r2, #4
 80077a4:	619a      	str	r2, [r3, #24]
 80077a6:	e02c      	b.n	8007802 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d028      	beq.n	8007802 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	2b02      	cmp	r3, #2
 80077b6:	d01c      	beq.n	80077f2 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	699a      	ldr	r2, [r3, #24]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80077c6:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	691a      	ldr	r2, [r3, #16]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f042 0210 	orr.w	r2, r2, #16
 80077d6:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	2b03      	cmp	r3, #3
 80077de:	d110      	bne.n	8007802 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	699a      	ldr	r2, [r3, #24]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f042 0220 	orr.w	r2, r2, #32
 80077ee:	619a      	str	r2, [r3, #24]
 80077f0:	e007      	b.n	8007802 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	699a      	ldr	r2, [r3, #24]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f042 0220 	orr.w	r2, r2, #32
 8007800:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	699b      	ldr	r3, [r3, #24]
 8007806:	3b01      	subs	r3, #1
 8007808:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	69db      	ldr	r3, [r3, #28]
 800780e:	3b01      	subs	r3, #1
 8007810:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007812:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6a1b      	ldr	r3, [r3, #32]
 8007818:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800781a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	695b      	ldr	r3, [r3, #20]
 8007822:	3b01      	subs	r3, #1
 8007824:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800782a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800782c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007836:	d115      	bne.n	8007864 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800783c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007842:	3b01      	subs	r3, #1
 8007844:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007846:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800784c:	3b01      	subs	r3, #1
 800784e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007850:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007858:	3b01      	subs	r3, #1
 800785a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007860:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007862:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	430a      	orrs	r2, r1
 8007876:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 fb9e 	bl	8007fbc <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2200      	movs	r2, #0
 8007884:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2201      	movs	r2, #1
 8007890:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8007894:	2300      	movs	r3, #0
}
 8007896:	4618      	mov	r0, r3
 8007898:	3710      	adds	r7, #16
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
 800789e:	bf00      	nop
 80078a0:	40006400 	.word	0x40006400
 80078a4:	40006500 	.word	0x40006500

080078a8 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b083      	sub	sp, #12
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d110      	bne.n	80078de <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2202      	movs	r2, #2
 80078c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	699a      	ldr	r2, [r3, #24]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f022 0201 	bic.w	r2, r2, #1
 80078d2:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 80078da:	2300      	movs	r3, #0
 80078dc:	e006      	b.n	80078ec <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078e2:	f043 0204 	orr.w	r2, r3, #4
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80078ea:	2301      	movs	r3, #1
  }
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	370c      	adds	r7, #12
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b08b      	sub	sp, #44	; 0x2c
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	60b9      	str	r1, [r7, #8]
 8007902:	607a      	str	r2, [r7, #4]
 8007904:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800790c:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800790e:	7efb      	ldrb	r3, [r7, #27]
 8007910:	2b02      	cmp	r3, #2
 8007912:	f040 80bc 	bne.w	8007a8e <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	2b40      	cmp	r3, #64	; 0x40
 800791a:	d121      	bne.n	8007960 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007924:	f003 030f 	and.w	r3, r3, #15
 8007928:	2b00      	cmp	r3, #0
 800792a:	d107      	bne.n	800793c <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007930:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8007938:	2301      	movs	r3, #1
 800793a:	e0af      	b.n	8007a9c <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007944:	0a1b      	lsrs	r3, r3, #8
 8007946:	f003 0303 	and.w	r3, r3, #3
 800794a:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8007950:	69fa      	ldr	r2, [r7, #28]
 8007952:	4613      	mov	r3, r2
 8007954:	00db      	lsls	r3, r3, #3
 8007956:	4413      	add	r3, r2
 8007958:	00db      	lsls	r3, r3, #3
 800795a:	440b      	add	r3, r1
 800795c:	627b      	str	r3, [r7, #36]	; 0x24
 800795e:	e020      	b.n	80079a2 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007968:	f003 030f 	and.w	r3, r3, #15
 800796c:	2b00      	cmp	r3, #0
 800796e:	d107      	bne.n	8007980 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007974:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800797c:	2301      	movs	r3, #1
 800797e:	e08d      	b.n	8007a9c <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007988:	0a1b      	lsrs	r3, r3, #8
 800798a:	f003 0303 	and.w	r3, r3, #3
 800798e:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007994:	69fa      	ldr	r2, [r7, #28]
 8007996:	4613      	mov	r3, r2
 8007998:	00db      	lsls	r3, r3, #3
 800799a:	4413      	add	r3, r2
 800799c:	00db      	lsls	r3, r3, #3
 800799e:	440b      	add	r3, r1
 80079a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80079a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d107      	bne.n	80079c6 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80079b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	0c9b      	lsrs	r3, r3, #18
 80079bc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	601a      	str	r2, [r3, #0]
 80079c4:	e005      	b.n	80079d2 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80079c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80079d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80079de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80079ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ec:	3304      	adds	r3, #4
 80079ee:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80079f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	b29a      	uxth	r2, r3
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80079fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8007a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8007a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8007a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	0e1b      	lsrs	r3, r3, #24
 8007a24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8007a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	0fda      	lsrs	r2, r3, #31
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8007a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a38:	3304      	adds	r3, #4
 8007a3a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8007a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3e:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8007a40:	2300      	movs	r3, #0
 8007a42:	623b      	str	r3, [r7, #32]
 8007a44:	e00a      	b.n	8007a5c <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8007a46:	697a      	ldr	r2, [r7, #20]
 8007a48:	6a3b      	ldr	r3, [r7, #32]
 8007a4a:	441a      	add	r2, r3
 8007a4c:	6839      	ldr	r1, [r7, #0]
 8007a4e:	6a3b      	ldr	r3, [r7, #32]
 8007a50:	440b      	add	r3, r1
 8007a52:	7812      	ldrb	r2, [r2, #0]
 8007a54:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8007a56:	6a3b      	ldr	r3, [r7, #32]
 8007a58:	3301      	adds	r3, #1
 8007a5a:	623b      	str	r3, [r7, #32]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	0c1b      	lsrs	r3, r3, #16
 8007a62:	4a11      	ldr	r2, [pc, #68]	; (8007aa8 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8007a64:	5cd3      	ldrb	r3, [r2, r3]
 8007a66:	461a      	mov	r2, r3
 8007a68:	6a3b      	ldr	r3, [r7, #32]
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d3eb      	bcc.n	8007a46 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	2b40      	cmp	r3, #64	; 0x40
 8007a72:	d105      	bne.n	8007a80 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	69fa      	ldr	r2, [r7, #28]
 8007a7a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8007a7e:	e004      	b.n	8007a8a <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	69fa      	ldr	r2, [r7, #28]
 8007a86:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	e006      	b.n	8007a9c <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a92:	f043 0208 	orr.w	r2, r3, #8
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
  }
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	372c      	adds	r7, #44	; 0x2c
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr
 8007aa8:	08012010 	.word	0x08012010

08007aac <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b087      	sub	sp, #28
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007abe:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8007ac0:	7dfb      	ldrb	r3, [r7, #23]
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d003      	beq.n	8007ace <HAL_FDCAN_ActivateNotification+0x22>
 8007ac6:	7dfb      	ldrb	r3, [r7, #23]
 8007ac8:	2b02      	cmp	r3, #2
 8007aca:	f040 80c8 	bne.w	8007c5e <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ad4:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	f003 0307 	and.w	r3, r3, #7
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d004      	beq.n	8007aea <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	f003 0301 	and.w	r3, r3, #1
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d03b      	beq.n	8007b62 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d004      	beq.n	8007afe <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	f003 0302 	and.w	r3, r3, #2
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d031      	beq.n	8007b62 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d004      	beq.n	8007b12 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	f003 0304 	and.w	r3, r3, #4
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d027      	beq.n	8007b62 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d004      	beq.n	8007b26 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	f003 0308 	and.w	r3, r3, #8
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d01d      	beq.n	8007b62 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d004      	beq.n	8007b3a <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	f003 0310 	and.w	r3, r3, #16
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d013      	beq.n	8007b62 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d004      	beq.n	8007b4e <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	f003 0320 	and.w	r3, r3, #32
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d009      	beq.n	8007b62 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d00c      	beq.n	8007b72 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d107      	bne.n	8007b72 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f042 0201 	orr.w	r2, r2, #1
 8007b70:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	f003 0307 	and.w	r3, r3, #7
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d004      	beq.n	8007b86 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	f003 0301 	and.w	r3, r3, #1
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d13b      	bne.n	8007bfe <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d004      	beq.n	8007b9a <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	f003 0302 	and.w	r3, r3, #2
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d131      	bne.n	8007bfe <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d004      	beq.n	8007bae <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	f003 0304 	and.w	r3, r3, #4
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d127      	bne.n	8007bfe <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d004      	beq.n	8007bc2 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	f003 0308 	and.w	r3, r3, #8
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d11d      	bne.n	8007bfe <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d004      	beq.n	8007bd6 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	f003 0310 	and.w	r3, r3, #16
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d113      	bne.n	8007bfe <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d004      	beq.n	8007bea <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	f003 0320 	and.w	r3, r3, #32
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d109      	bne.n	8007bfe <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d00c      	beq.n	8007c0e <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d007      	beq.n	8007c0e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f042 0202 	orr.w	r2, r2, #2
 8007c0c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d009      	beq.n	8007c2c <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	430a      	orrs	r2, r1
 8007c28:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d009      	beq.n	8007c4a <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	430a      	orrs	r2, r1
 8007c46:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	68ba      	ldr	r2, [r7, #8]
 8007c56:	430a      	orrs	r2, r1
 8007c58:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	e006      	b.n	8007c6c <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c62:	f043 0202 	orr.w	r2, r3, #2
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
  }
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	371c      	adds	r7, #28
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b08a      	sub	sp, #40	; 0x28
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c86:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8007c8a:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c94:	4013      	ands	r3, r2
 8007c96:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c9e:	f003 0307 	and.w	r3, r3, #7
 8007ca2:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007caa:	6a3a      	ldr	r2, [r7, #32]
 8007cac:	4013      	ands	r3, r2
 8007cae:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007cba:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cc2:	69fa      	ldr	r2, [r7, #28]
 8007cc4:	4013      	ands	r3, r2
 8007cc6:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cce:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8007cd2:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cda:	69ba      	ldr	r2, [r7, #24]
 8007cdc:	4013      	ands	r3, r2
 8007cde:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ce6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8007cea:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cf2:	697a      	ldr	r2, [r7, #20]
 8007cf4:	4013      	ands	r3, r2
 8007cf6:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00d      	beq.n	8007d22 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d006      	beq.n	8007d22 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2240      	movs	r2, #64	; 0x40
 8007d1a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 f92e 	bl	8007f7e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d01b      	beq.n	8007d68 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d014      	beq.n	8007d68 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007d46:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d50:	693a      	ldr	r2, [r7, #16]
 8007d52:	4013      	ands	r3, r2
 8007d54:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d5e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8007d60:	6939      	ldr	r1, [r7, #16]
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 f8ec 	bl	8007f40 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8007d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d007      	beq.n	8007d7e <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d74:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8007d76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 f8b6 	bl	8007eea <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8007d7e:	6a3b      	ldr	r3, [r7, #32]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d007      	beq.n	8007d94 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	6a3a      	ldr	r2, [r7, #32]
 8007d8a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8007d8c:	6a39      	ldr	r1, [r7, #32]
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f7fb fce6 	bl	8003760 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8007d94:	69fb      	ldr	r3, [r7, #28]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d007      	beq.n	8007daa <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	69fa      	ldr	r2, [r7, #28]
 8007da0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8007da2:	69f9      	ldr	r1, [r7, #28]
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 f8ab 	bl	8007f00 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007db0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d00e      	beq.n	8007dd6 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d007      	beq.n	8007dd6 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007dce:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 f8a0 	bl	8007f16 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d01a      	beq.n	8007e1a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d013      	beq.n	8007e1a <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8007dfa:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007e04:	68fa      	ldr	r2, [r7, #12]
 8007e06:	4013      	ands	r3, r2
 8007e08:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	2280      	movs	r2, #128	; 0x80
 8007e10:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8007e12:	68f9      	ldr	r1, [r7, #12]
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 f888 	bl	8007f2a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d00e      	beq.n	8007e46 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d007      	beq.n	8007e46 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007e3e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 f888 	bl	8007f56 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d00e      	beq.n	8007e72 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d007      	beq.n	8007e72 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007e6a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 f87c 	bl	8007f6a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d011      	beq.n	8007ea4 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d00a      	beq.n	8007ea4 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007e96:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e9c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d007      	beq.n	8007eba <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	697a      	ldr	r2, [r7, #20]
 8007eb0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8007eb2:	6979      	ldr	r1, [r7, #20]
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 f876 	bl	8007fa6 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8007eba:	69bb      	ldr	r3, [r7, #24]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d009      	beq.n	8007ed4 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	69ba      	ldr	r2, [r7, #24]
 8007ec6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007ecc:	69bb      	ldr	r3, [r7, #24]
 8007ece:	431a      	orrs	r2, r3
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d002      	beq.n	8007ee2 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 f858 	bl	8007f92 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8007ee2:	bf00      	nop
 8007ee4:	3728      	adds	r7, #40	; 0x28
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}

08007eea <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8007eea:	b480      	push	{r7}
 8007eec:	b083      	sub	sp, #12
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
 8007ef2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8007ef4:	bf00      	nop
 8007ef6:	370c      	adds	r7, #12
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr

08007f00 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b083      	sub	sp, #12
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8007f0a:	bf00      	nop
 8007f0c:	370c      	adds	r7, #12
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr

08007f16 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007f16:	b480      	push	{r7}
 8007f18:	b083      	sub	sp, #12
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8007f1e:	bf00      	nop
 8007f20:	370c      	adds	r7, #12
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr

08007f2a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007f2a:	b480      	push	{r7}
 8007f2c:	b083      	sub	sp, #12
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
 8007f32:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8007f34:	bf00      	nop
 8007f36:	370c      	adds	r7, #12
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b083      	sub	sp, #12
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8007f4a:	bf00      	nop
 8007f4c:	370c      	adds	r7, #12
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f54:	4770      	bx	lr

08007f56 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007f56:	b480      	push	{r7}
 8007f58:	b083      	sub	sp, #12
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8007f5e:	bf00      	nop
 8007f60:	370c      	adds	r7, #12
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr

08007f6a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007f6a:	b480      	push	{r7}
 8007f6c:	b083      	sub	sp, #12
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8007f72:	bf00      	nop
 8007f74:	370c      	adds	r7, #12
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr

08007f7e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007f7e:	b480      	push	{r7}
 8007f80:	b083      	sub	sp, #12
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8007f86:	bf00      	nop
 8007f88:	370c      	adds	r7, #12
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr

08007f92 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007f92:	b480      	push	{r7}
 8007f94:	b083      	sub	sp, #12
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8007f9a:	bf00      	nop
 8007f9c:	370c      	adds	r7, #12
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa4:	4770      	bx	lr

08007fa6 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8007fa6:	b480      	push	{r7}
 8007fa8:	b083      	sub	sp, #12
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	6078      	str	r0, [r7, #4]
 8007fae:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8007fb0:	bf00      	nop
 8007fb2:	370c      	adds	r7, #12
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr

08007fbc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b085      	sub	sp, #20
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8007fc4:	4b27      	ldr	r3, [pc, #156]	; (8008064 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8007fc6:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	68ba      	ldr	r2, [r7, #8]
 8007fcc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fd6:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fde:	041a      	lsls	r2, r3, #16
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	430a      	orrs	r2, r1
 8007fe6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ffc:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008004:	061a      	lsls	r2, r3, #24
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	430a      	orrs	r2, r1
 800800c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	f503 7218 	add.w	r2, r3, #608	; 0x260
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	60fb      	str	r3, [r7, #12]
 800803c:	e005      	b.n	800804a <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2200      	movs	r2, #0
 8008042:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	3304      	adds	r3, #4
 8008048:	60fb      	str	r3, [r7, #12]
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008050:	68fa      	ldr	r2, [r7, #12]
 8008052:	429a      	cmp	r2, r3
 8008054:	d3f3      	bcc.n	800803e <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8008056:	bf00      	nop
 8008058:	bf00      	nop
 800805a:	3714      	adds	r7, #20
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr
 8008064:	4000a400 	.word	0x4000a400

08008068 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d101      	bne.n	800807a <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 8008076:	2301      	movs	r3, #1
 8008078:	e033      	b.n	80080e2 <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008080:	b2db      	uxtb	r3, r3
 8008082:	2b00      	cmp	r3, #0
 8008084:	d106      	bne.n	8008094 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2200      	movs	r2, #0
 800808a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f7fb ffbe 	bl	8004010 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 f854 	bl	8008148 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 f822 	bl	80080ea <FMAC_Reset>
 80080a6:	4603      	mov	r3, r0
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d10c      	bne.n	80080c6 <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080b0:	f043 0210 	orr.w	r2, r3, #16
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	22a0      	movs	r2, #160	; 0xa0
 80080bc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_ERROR;
 80080c0:	2301      	movs	r3, #1
 80080c2:	73fb      	strb	r3, [r7, #15]
 80080c4:	e008      	b.n	80080d8 <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2200      	movs	r2, #0
 80080ca:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2220      	movs	r2, #32
 80080d0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 80080d4:	2300      	movs	r3, #0
 80080d6:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2200      	movs	r2, #0
 80080dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 80080e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3710      	adds	r7, #16
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b084      	sub	sp, #16
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80080f2:	f7fc ff61 	bl	8004fb8 <HAL_GetTick>
 80080f6:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	691a      	ldr	r2, [r3, #16]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008106:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8008108:	e00f      	b.n	800812a <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 800810a:	f7fc ff55 	bl	8004fb8 <HAL_GetTick>
 800810e:	4602      	mov	r2, r0
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	1ad3      	subs	r3, r2, r3
 8008114:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008118:	d907      	bls.n	800812a <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800811e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008126:	2301      	movs	r3, #1
 8008128:	e00a      	b.n	8008140 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	691b      	ldr	r3, [r3, #16]
 8008130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008134:	2b00      	cmp	r3, #0
 8008136:	d1e8      	bne.n	800810a <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2200      	movs	r2, #0
 800813c:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 800813e:	2300      	movs	r3, #0
}
 8008140:	4618      	mov	r0, r3
 8008142:	3710      	adds	r7, #16
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 f807 	bl	8008164 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 f81b 	bl	8008192 <FMAC_ResetOutputStateAndDataPointers>
}
 800815c:	bf00      	nop
 800815e:	3708      	adds	r7, #8
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8008164:	b480      	push	{r7}
 8008166:	b083      	sub	sp, #12
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2200      	movs	r2, #0
 800817c:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2220      	movs	r2, #32
 8008182:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 8008186:	bf00      	nop
 8008188:	370c      	adds	r7, #12
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr

08008192 <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8008192:	b480      	push	{r7}
 8008194:	b083      	sub	sp, #12
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2200      	movs	r2, #0
 80081a4:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2220      	movs	r2, #32
 80081b0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 80081b4:	bf00      	nop
 80081b6:	370c      	adds	r7, #12
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr

080081c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b087      	sub	sp, #28
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80081ca:	2300      	movs	r3, #0
 80081cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80081ce:	e15a      	b.n	8008486 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	2101      	movs	r1, #1
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	fa01 f303 	lsl.w	r3, r1, r3
 80081dc:	4013      	ands	r3, r2
 80081de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	f000 814c 	beq.w	8008480 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	f003 0303 	and.w	r3, r3, #3
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	d005      	beq.n	8008200 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80081fc:	2b02      	cmp	r3, #2
 80081fe:	d130      	bne.n	8008262 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	005b      	lsls	r3, r3, #1
 800820a:	2203      	movs	r2, #3
 800820c:	fa02 f303 	lsl.w	r3, r2, r3
 8008210:	43db      	mvns	r3, r3
 8008212:	693a      	ldr	r2, [r7, #16]
 8008214:	4013      	ands	r3, r2
 8008216:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	68da      	ldr	r2, [r3, #12]
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	005b      	lsls	r3, r3, #1
 8008220:	fa02 f303 	lsl.w	r3, r2, r3
 8008224:	693a      	ldr	r2, [r7, #16]
 8008226:	4313      	orrs	r3, r2
 8008228:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	693a      	ldr	r2, [r7, #16]
 800822e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008236:	2201      	movs	r2, #1
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	fa02 f303 	lsl.w	r3, r2, r3
 800823e:	43db      	mvns	r3, r3
 8008240:	693a      	ldr	r2, [r7, #16]
 8008242:	4013      	ands	r3, r2
 8008244:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	091b      	lsrs	r3, r3, #4
 800824c:	f003 0201 	and.w	r2, r3, #1
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	fa02 f303 	lsl.w	r3, r2, r3
 8008256:	693a      	ldr	r2, [r7, #16]
 8008258:	4313      	orrs	r3, r2
 800825a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	693a      	ldr	r2, [r7, #16]
 8008260:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	f003 0303 	and.w	r3, r3, #3
 800826a:	2b03      	cmp	r3, #3
 800826c:	d017      	beq.n	800829e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	68db      	ldr	r3, [r3, #12]
 8008272:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	005b      	lsls	r3, r3, #1
 8008278:	2203      	movs	r2, #3
 800827a:	fa02 f303 	lsl.w	r3, r2, r3
 800827e:	43db      	mvns	r3, r3
 8008280:	693a      	ldr	r2, [r7, #16]
 8008282:	4013      	ands	r3, r2
 8008284:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	689a      	ldr	r2, [r3, #8]
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	005b      	lsls	r3, r3, #1
 800828e:	fa02 f303 	lsl.w	r3, r2, r3
 8008292:	693a      	ldr	r2, [r7, #16]
 8008294:	4313      	orrs	r3, r2
 8008296:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	693a      	ldr	r2, [r7, #16]
 800829c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	f003 0303 	and.w	r3, r3, #3
 80082a6:	2b02      	cmp	r3, #2
 80082a8:	d123      	bne.n	80082f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	08da      	lsrs	r2, r3, #3
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	3208      	adds	r2, #8
 80082b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	f003 0307 	and.w	r3, r3, #7
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	220f      	movs	r2, #15
 80082c2:	fa02 f303 	lsl.w	r3, r2, r3
 80082c6:	43db      	mvns	r3, r3
 80082c8:	693a      	ldr	r2, [r7, #16]
 80082ca:	4013      	ands	r3, r2
 80082cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	691a      	ldr	r2, [r3, #16]
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	f003 0307 	and.w	r3, r3, #7
 80082d8:	009b      	lsls	r3, r3, #2
 80082da:	fa02 f303 	lsl.w	r3, r2, r3
 80082de:	693a      	ldr	r2, [r7, #16]
 80082e0:	4313      	orrs	r3, r2
 80082e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	08da      	lsrs	r2, r3, #3
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	3208      	adds	r2, #8
 80082ec:	6939      	ldr	r1, [r7, #16]
 80082ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	005b      	lsls	r3, r3, #1
 80082fc:	2203      	movs	r2, #3
 80082fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008302:	43db      	mvns	r3, r3
 8008304:	693a      	ldr	r2, [r7, #16]
 8008306:	4013      	ands	r3, r2
 8008308:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	f003 0203 	and.w	r2, r3, #3
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	005b      	lsls	r3, r3, #1
 8008316:	fa02 f303 	lsl.w	r3, r2, r3
 800831a:	693a      	ldr	r2, [r7, #16]
 800831c:	4313      	orrs	r3, r2
 800831e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	693a      	ldr	r2, [r7, #16]
 8008324:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800832e:	2b00      	cmp	r3, #0
 8008330:	f000 80a6 	beq.w	8008480 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008334:	4b5b      	ldr	r3, [pc, #364]	; (80084a4 <HAL_GPIO_Init+0x2e4>)
 8008336:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008338:	4a5a      	ldr	r2, [pc, #360]	; (80084a4 <HAL_GPIO_Init+0x2e4>)
 800833a:	f043 0301 	orr.w	r3, r3, #1
 800833e:	6613      	str	r3, [r2, #96]	; 0x60
 8008340:	4b58      	ldr	r3, [pc, #352]	; (80084a4 <HAL_GPIO_Init+0x2e4>)
 8008342:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008344:	f003 0301 	and.w	r3, r3, #1
 8008348:	60bb      	str	r3, [r7, #8]
 800834a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800834c:	4a56      	ldr	r2, [pc, #344]	; (80084a8 <HAL_GPIO_Init+0x2e8>)
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	089b      	lsrs	r3, r3, #2
 8008352:	3302      	adds	r3, #2
 8008354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008358:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	f003 0303 	and.w	r3, r3, #3
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	220f      	movs	r2, #15
 8008364:	fa02 f303 	lsl.w	r3, r2, r3
 8008368:	43db      	mvns	r3, r3
 800836a:	693a      	ldr	r2, [r7, #16]
 800836c:	4013      	ands	r3, r2
 800836e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008376:	d01f      	beq.n	80083b8 <HAL_GPIO_Init+0x1f8>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	4a4c      	ldr	r2, [pc, #304]	; (80084ac <HAL_GPIO_Init+0x2ec>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d019      	beq.n	80083b4 <HAL_GPIO_Init+0x1f4>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	4a4b      	ldr	r2, [pc, #300]	; (80084b0 <HAL_GPIO_Init+0x2f0>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d013      	beq.n	80083b0 <HAL_GPIO_Init+0x1f0>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	4a4a      	ldr	r2, [pc, #296]	; (80084b4 <HAL_GPIO_Init+0x2f4>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d00d      	beq.n	80083ac <HAL_GPIO_Init+0x1ec>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	4a49      	ldr	r2, [pc, #292]	; (80084b8 <HAL_GPIO_Init+0x2f8>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d007      	beq.n	80083a8 <HAL_GPIO_Init+0x1e8>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4a48      	ldr	r2, [pc, #288]	; (80084bc <HAL_GPIO_Init+0x2fc>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d101      	bne.n	80083a4 <HAL_GPIO_Init+0x1e4>
 80083a0:	2305      	movs	r3, #5
 80083a2:	e00a      	b.n	80083ba <HAL_GPIO_Init+0x1fa>
 80083a4:	2306      	movs	r3, #6
 80083a6:	e008      	b.n	80083ba <HAL_GPIO_Init+0x1fa>
 80083a8:	2304      	movs	r3, #4
 80083aa:	e006      	b.n	80083ba <HAL_GPIO_Init+0x1fa>
 80083ac:	2303      	movs	r3, #3
 80083ae:	e004      	b.n	80083ba <HAL_GPIO_Init+0x1fa>
 80083b0:	2302      	movs	r3, #2
 80083b2:	e002      	b.n	80083ba <HAL_GPIO_Init+0x1fa>
 80083b4:	2301      	movs	r3, #1
 80083b6:	e000      	b.n	80083ba <HAL_GPIO_Init+0x1fa>
 80083b8:	2300      	movs	r3, #0
 80083ba:	697a      	ldr	r2, [r7, #20]
 80083bc:	f002 0203 	and.w	r2, r2, #3
 80083c0:	0092      	lsls	r2, r2, #2
 80083c2:	4093      	lsls	r3, r2
 80083c4:	693a      	ldr	r2, [r7, #16]
 80083c6:	4313      	orrs	r3, r2
 80083c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80083ca:	4937      	ldr	r1, [pc, #220]	; (80084a8 <HAL_GPIO_Init+0x2e8>)
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	089b      	lsrs	r3, r3, #2
 80083d0:	3302      	adds	r3, #2
 80083d2:	693a      	ldr	r2, [r7, #16]
 80083d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80083d8:	4b39      	ldr	r3, [pc, #228]	; (80084c0 <HAL_GPIO_Init+0x300>)
 80083da:	689b      	ldr	r3, [r3, #8]
 80083dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	43db      	mvns	r3, r3
 80083e2:	693a      	ldr	r2, [r7, #16]
 80083e4:	4013      	ands	r3, r2
 80083e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d003      	beq.n	80083fc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80083f4:	693a      	ldr	r2, [r7, #16]
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	4313      	orrs	r3, r2
 80083fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80083fc:	4a30      	ldr	r2, [pc, #192]	; (80084c0 <HAL_GPIO_Init+0x300>)
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008402:	4b2f      	ldr	r3, [pc, #188]	; (80084c0 <HAL_GPIO_Init+0x300>)
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	43db      	mvns	r3, r3
 800840c:	693a      	ldr	r2, [r7, #16]
 800840e:	4013      	ands	r3, r2
 8008410:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800841a:	2b00      	cmp	r3, #0
 800841c:	d003      	beq.n	8008426 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800841e:	693a      	ldr	r2, [r7, #16]
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	4313      	orrs	r3, r2
 8008424:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008426:	4a26      	ldr	r2, [pc, #152]	; (80084c0 <HAL_GPIO_Init+0x300>)
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800842c:	4b24      	ldr	r3, [pc, #144]	; (80084c0 <HAL_GPIO_Init+0x300>)
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	43db      	mvns	r3, r3
 8008436:	693a      	ldr	r2, [r7, #16]
 8008438:	4013      	ands	r3, r2
 800843a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008444:	2b00      	cmp	r3, #0
 8008446:	d003      	beq.n	8008450 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8008448:	693a      	ldr	r2, [r7, #16]
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	4313      	orrs	r3, r2
 800844e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008450:	4a1b      	ldr	r2, [pc, #108]	; (80084c0 <HAL_GPIO_Init+0x300>)
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008456:	4b1a      	ldr	r3, [pc, #104]	; (80084c0 <HAL_GPIO_Init+0x300>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	43db      	mvns	r3, r3
 8008460:	693a      	ldr	r2, [r7, #16]
 8008462:	4013      	ands	r3, r2
 8008464:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800846e:	2b00      	cmp	r3, #0
 8008470:	d003      	beq.n	800847a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8008472:	693a      	ldr	r2, [r7, #16]
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	4313      	orrs	r3, r2
 8008478:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800847a:	4a11      	ldr	r2, [pc, #68]	; (80084c0 <HAL_GPIO_Init+0x300>)
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	3301      	adds	r3, #1
 8008484:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	681a      	ldr	r2, [r3, #0]
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	fa22 f303 	lsr.w	r3, r2, r3
 8008490:	2b00      	cmp	r3, #0
 8008492:	f47f ae9d 	bne.w	80081d0 <HAL_GPIO_Init+0x10>
  }
}
 8008496:	bf00      	nop
 8008498:	bf00      	nop
 800849a:	371c      	adds	r7, #28
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr
 80084a4:	40021000 	.word	0x40021000
 80084a8:	40010000 	.word	0x40010000
 80084ac:	48000400 	.word	0x48000400
 80084b0:	48000800 	.word	0x48000800
 80084b4:	48000c00 	.word	0x48000c00
 80084b8:	48001000 	.word	0x48001000
 80084bc:	48001400 	.word	0x48001400
 80084c0:	40010400 	.word	0x40010400

080084c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	460b      	mov	r3, r1
 80084ce:	807b      	strh	r3, [r7, #2]
 80084d0:	4613      	mov	r3, r2
 80084d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80084d4:	787b      	ldrb	r3, [r7, #1]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d003      	beq.n	80084e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80084da:	887a      	ldrh	r2, [r7, #2]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80084e0:	e002      	b.n	80084e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80084e2:	887a      	ldrh	r2, [r7, #2]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80084e8:	bf00      	nop
 80084ea:	370c      	adds	r7, #12
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr

080084f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b085      	sub	sp, #20
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d141      	bne.n	8008586 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008502:	4b4b      	ldr	r3, [pc, #300]	; (8008630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800850a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800850e:	d131      	bne.n	8008574 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008510:	4b47      	ldr	r3, [pc, #284]	; (8008630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008512:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008516:	4a46      	ldr	r2, [pc, #280]	; (8008630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008518:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800851c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008520:	4b43      	ldr	r3, [pc, #268]	; (8008630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008528:	4a41      	ldr	r2, [pc, #260]	; (8008630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800852a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800852e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008530:	4b40      	ldr	r3, [pc, #256]	; (8008634 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	2232      	movs	r2, #50	; 0x32
 8008536:	fb02 f303 	mul.w	r3, r2, r3
 800853a:	4a3f      	ldr	r2, [pc, #252]	; (8008638 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800853c:	fba2 2303 	umull	r2, r3, r2, r3
 8008540:	0c9b      	lsrs	r3, r3, #18
 8008542:	3301      	adds	r3, #1
 8008544:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008546:	e002      	b.n	800854e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	3b01      	subs	r3, #1
 800854c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800854e:	4b38      	ldr	r3, [pc, #224]	; (8008630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008550:	695b      	ldr	r3, [r3, #20]
 8008552:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008556:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800855a:	d102      	bne.n	8008562 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d1f2      	bne.n	8008548 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008562:	4b33      	ldr	r3, [pc, #204]	; (8008630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008564:	695b      	ldr	r3, [r3, #20]
 8008566:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800856a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800856e:	d158      	bne.n	8008622 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008570:	2303      	movs	r3, #3
 8008572:	e057      	b.n	8008624 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008574:	4b2e      	ldr	r3, [pc, #184]	; (8008630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008576:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800857a:	4a2d      	ldr	r2, [pc, #180]	; (8008630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800857c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008580:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008584:	e04d      	b.n	8008622 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800858c:	d141      	bne.n	8008612 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800858e:	4b28      	ldr	r3, [pc, #160]	; (8008630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008596:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800859a:	d131      	bne.n	8008600 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800859c:	4b24      	ldr	r3, [pc, #144]	; (8008630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800859e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085a2:	4a23      	ldr	r2, [pc, #140]	; (8008630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80085a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80085ac:	4b20      	ldr	r3, [pc, #128]	; (8008630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80085b4:	4a1e      	ldr	r2, [pc, #120]	; (8008630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80085b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80085ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80085bc:	4b1d      	ldr	r3, [pc, #116]	; (8008634 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	2232      	movs	r2, #50	; 0x32
 80085c2:	fb02 f303 	mul.w	r3, r2, r3
 80085c6:	4a1c      	ldr	r2, [pc, #112]	; (8008638 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80085c8:	fba2 2303 	umull	r2, r3, r2, r3
 80085cc:	0c9b      	lsrs	r3, r3, #18
 80085ce:	3301      	adds	r3, #1
 80085d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80085d2:	e002      	b.n	80085da <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	3b01      	subs	r3, #1
 80085d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80085da:	4b15      	ldr	r3, [pc, #84]	; (8008630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80085dc:	695b      	ldr	r3, [r3, #20]
 80085de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085e6:	d102      	bne.n	80085ee <HAL_PWREx_ControlVoltageScaling+0xfa>
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d1f2      	bne.n	80085d4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80085ee:	4b10      	ldr	r3, [pc, #64]	; (8008630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80085f0:	695b      	ldr	r3, [r3, #20]
 80085f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085fa:	d112      	bne.n	8008622 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80085fc:	2303      	movs	r3, #3
 80085fe:	e011      	b.n	8008624 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008600:	4b0b      	ldr	r3, [pc, #44]	; (8008630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008602:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008606:	4a0a      	ldr	r2, [pc, #40]	; (8008630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800860c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008610:	e007      	b.n	8008622 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008612:	4b07      	ldr	r3, [pc, #28]	; (8008630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800861a:	4a05      	ldr	r2, [pc, #20]	; (8008630 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800861c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008620:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008622:	2300      	movs	r3, #0
}
 8008624:	4618      	mov	r0, r3
 8008626:	3714      	adds	r7, #20
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr
 8008630:	40007000 	.word	0x40007000
 8008634:	2000000c 	.word	0x2000000c
 8008638:	431bde83 	.word	0x431bde83

0800863c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800863c:	b480      	push	{r7}
 800863e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008640:	4b05      	ldr	r3, [pc, #20]	; (8008658 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	4a04      	ldr	r2, [pc, #16]	; (8008658 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008646:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800864a:	6093      	str	r3, [r2, #8]
}
 800864c:	bf00      	nop
 800864e:	46bd      	mov	sp, r7
 8008650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008654:	4770      	bx	lr
 8008656:	bf00      	nop
 8008658:	40007000 	.word	0x40007000

0800865c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b088      	sub	sp, #32
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d101      	bne.n	800866e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800866a:	2301      	movs	r3, #1
 800866c:	e306      	b.n	8008c7c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f003 0301 	and.w	r3, r3, #1
 8008676:	2b00      	cmp	r3, #0
 8008678:	d075      	beq.n	8008766 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800867a:	4b97      	ldr	r3, [pc, #604]	; (80088d8 <HAL_RCC_OscConfig+0x27c>)
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	f003 030c 	and.w	r3, r3, #12
 8008682:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008684:	4b94      	ldr	r3, [pc, #592]	; (80088d8 <HAL_RCC_OscConfig+0x27c>)
 8008686:	68db      	ldr	r3, [r3, #12]
 8008688:	f003 0303 	and.w	r3, r3, #3
 800868c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800868e:	69bb      	ldr	r3, [r7, #24]
 8008690:	2b0c      	cmp	r3, #12
 8008692:	d102      	bne.n	800869a <HAL_RCC_OscConfig+0x3e>
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	2b03      	cmp	r3, #3
 8008698:	d002      	beq.n	80086a0 <HAL_RCC_OscConfig+0x44>
 800869a:	69bb      	ldr	r3, [r7, #24]
 800869c:	2b08      	cmp	r3, #8
 800869e:	d10b      	bne.n	80086b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086a0:	4b8d      	ldr	r3, [pc, #564]	; (80088d8 <HAL_RCC_OscConfig+0x27c>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d05b      	beq.n	8008764 <HAL_RCC_OscConfig+0x108>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d157      	bne.n	8008764 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80086b4:	2301      	movs	r3, #1
 80086b6:	e2e1      	b.n	8008c7c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086c0:	d106      	bne.n	80086d0 <HAL_RCC_OscConfig+0x74>
 80086c2:	4b85      	ldr	r3, [pc, #532]	; (80088d8 <HAL_RCC_OscConfig+0x27c>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a84      	ldr	r2, [pc, #528]	; (80088d8 <HAL_RCC_OscConfig+0x27c>)
 80086c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086cc:	6013      	str	r3, [r2, #0]
 80086ce:	e01d      	b.n	800870c <HAL_RCC_OscConfig+0xb0>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80086d8:	d10c      	bne.n	80086f4 <HAL_RCC_OscConfig+0x98>
 80086da:	4b7f      	ldr	r3, [pc, #508]	; (80088d8 <HAL_RCC_OscConfig+0x27c>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a7e      	ldr	r2, [pc, #504]	; (80088d8 <HAL_RCC_OscConfig+0x27c>)
 80086e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80086e4:	6013      	str	r3, [r2, #0]
 80086e6:	4b7c      	ldr	r3, [pc, #496]	; (80088d8 <HAL_RCC_OscConfig+0x27c>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a7b      	ldr	r2, [pc, #492]	; (80088d8 <HAL_RCC_OscConfig+0x27c>)
 80086ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086f0:	6013      	str	r3, [r2, #0]
 80086f2:	e00b      	b.n	800870c <HAL_RCC_OscConfig+0xb0>
 80086f4:	4b78      	ldr	r3, [pc, #480]	; (80088d8 <HAL_RCC_OscConfig+0x27c>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a77      	ldr	r2, [pc, #476]	; (80088d8 <HAL_RCC_OscConfig+0x27c>)
 80086fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086fe:	6013      	str	r3, [r2, #0]
 8008700:	4b75      	ldr	r3, [pc, #468]	; (80088d8 <HAL_RCC_OscConfig+0x27c>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a74      	ldr	r2, [pc, #464]	; (80088d8 <HAL_RCC_OscConfig+0x27c>)
 8008706:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800870a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d013      	beq.n	800873c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008714:	f7fc fc50 	bl	8004fb8 <HAL_GetTick>
 8008718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800871a:	e008      	b.n	800872e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800871c:	f7fc fc4c 	bl	8004fb8 <HAL_GetTick>
 8008720:	4602      	mov	r2, r0
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	1ad3      	subs	r3, r2, r3
 8008726:	2b64      	cmp	r3, #100	; 0x64
 8008728:	d901      	bls.n	800872e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800872a:	2303      	movs	r3, #3
 800872c:	e2a6      	b.n	8008c7c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800872e:	4b6a      	ldr	r3, [pc, #424]	; (80088d8 <HAL_RCC_OscConfig+0x27c>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008736:	2b00      	cmp	r3, #0
 8008738:	d0f0      	beq.n	800871c <HAL_RCC_OscConfig+0xc0>
 800873a:	e014      	b.n	8008766 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800873c:	f7fc fc3c 	bl	8004fb8 <HAL_GetTick>
 8008740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008742:	e008      	b.n	8008756 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008744:	f7fc fc38 	bl	8004fb8 <HAL_GetTick>
 8008748:	4602      	mov	r2, r0
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	1ad3      	subs	r3, r2, r3
 800874e:	2b64      	cmp	r3, #100	; 0x64
 8008750:	d901      	bls.n	8008756 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008752:	2303      	movs	r3, #3
 8008754:	e292      	b.n	8008c7c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008756:	4b60      	ldr	r3, [pc, #384]	; (80088d8 <HAL_RCC_OscConfig+0x27c>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800875e:	2b00      	cmp	r3, #0
 8008760:	d1f0      	bne.n	8008744 <HAL_RCC_OscConfig+0xe8>
 8008762:	e000      	b.n	8008766 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008764:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f003 0302 	and.w	r3, r3, #2
 800876e:	2b00      	cmp	r3, #0
 8008770:	d075      	beq.n	800885e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008772:	4b59      	ldr	r3, [pc, #356]	; (80088d8 <HAL_RCC_OscConfig+0x27c>)
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	f003 030c 	and.w	r3, r3, #12
 800877a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800877c:	4b56      	ldr	r3, [pc, #344]	; (80088d8 <HAL_RCC_OscConfig+0x27c>)
 800877e:	68db      	ldr	r3, [r3, #12]
 8008780:	f003 0303 	and.w	r3, r3, #3
 8008784:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008786:	69bb      	ldr	r3, [r7, #24]
 8008788:	2b0c      	cmp	r3, #12
 800878a:	d102      	bne.n	8008792 <HAL_RCC_OscConfig+0x136>
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	2b02      	cmp	r3, #2
 8008790:	d002      	beq.n	8008798 <HAL_RCC_OscConfig+0x13c>
 8008792:	69bb      	ldr	r3, [r7, #24]
 8008794:	2b04      	cmp	r3, #4
 8008796:	d11f      	bne.n	80087d8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008798:	4b4f      	ldr	r3, [pc, #316]	; (80088d8 <HAL_RCC_OscConfig+0x27c>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d005      	beq.n	80087b0 <HAL_RCC_OscConfig+0x154>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	68db      	ldr	r3, [r3, #12]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d101      	bne.n	80087b0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80087ac:	2301      	movs	r3, #1
 80087ae:	e265      	b.n	8008c7c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087b0:	4b49      	ldr	r3, [pc, #292]	; (80088d8 <HAL_RCC_OscConfig+0x27c>)
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	691b      	ldr	r3, [r3, #16]
 80087bc:	061b      	lsls	r3, r3, #24
 80087be:	4946      	ldr	r1, [pc, #280]	; (80088d8 <HAL_RCC_OscConfig+0x27c>)
 80087c0:	4313      	orrs	r3, r2
 80087c2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80087c4:	4b45      	ldr	r3, [pc, #276]	; (80088dc <HAL_RCC_OscConfig+0x280>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4618      	mov	r0, r3
 80087ca:	f7fc fba9 	bl	8004f20 <HAL_InitTick>
 80087ce:	4603      	mov	r3, r0
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d043      	beq.n	800885c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80087d4:	2301      	movs	r3, #1
 80087d6:	e251      	b.n	8008c7c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	68db      	ldr	r3, [r3, #12]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d023      	beq.n	8008828 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80087e0:	4b3d      	ldr	r3, [pc, #244]	; (80088d8 <HAL_RCC_OscConfig+0x27c>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a3c      	ldr	r2, [pc, #240]	; (80088d8 <HAL_RCC_OscConfig+0x27c>)
 80087e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087ec:	f7fc fbe4 	bl	8004fb8 <HAL_GetTick>
 80087f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80087f2:	e008      	b.n	8008806 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80087f4:	f7fc fbe0 	bl	8004fb8 <HAL_GetTick>
 80087f8:	4602      	mov	r2, r0
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	1ad3      	subs	r3, r2, r3
 80087fe:	2b02      	cmp	r3, #2
 8008800:	d901      	bls.n	8008806 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008802:	2303      	movs	r3, #3
 8008804:	e23a      	b.n	8008c7c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008806:	4b34      	ldr	r3, [pc, #208]	; (80088d8 <HAL_RCC_OscConfig+0x27c>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800880e:	2b00      	cmp	r3, #0
 8008810:	d0f0      	beq.n	80087f4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008812:	4b31      	ldr	r3, [pc, #196]	; (80088d8 <HAL_RCC_OscConfig+0x27c>)
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	691b      	ldr	r3, [r3, #16]
 800881e:	061b      	lsls	r3, r3, #24
 8008820:	492d      	ldr	r1, [pc, #180]	; (80088d8 <HAL_RCC_OscConfig+0x27c>)
 8008822:	4313      	orrs	r3, r2
 8008824:	604b      	str	r3, [r1, #4]
 8008826:	e01a      	b.n	800885e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008828:	4b2b      	ldr	r3, [pc, #172]	; (80088d8 <HAL_RCC_OscConfig+0x27c>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a2a      	ldr	r2, [pc, #168]	; (80088d8 <HAL_RCC_OscConfig+0x27c>)
 800882e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008832:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008834:	f7fc fbc0 	bl	8004fb8 <HAL_GetTick>
 8008838:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800883a:	e008      	b.n	800884e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800883c:	f7fc fbbc 	bl	8004fb8 <HAL_GetTick>
 8008840:	4602      	mov	r2, r0
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	1ad3      	subs	r3, r2, r3
 8008846:	2b02      	cmp	r3, #2
 8008848:	d901      	bls.n	800884e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800884a:	2303      	movs	r3, #3
 800884c:	e216      	b.n	8008c7c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800884e:	4b22      	ldr	r3, [pc, #136]	; (80088d8 <HAL_RCC_OscConfig+0x27c>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008856:	2b00      	cmp	r3, #0
 8008858:	d1f0      	bne.n	800883c <HAL_RCC_OscConfig+0x1e0>
 800885a:	e000      	b.n	800885e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800885c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f003 0308 	and.w	r3, r3, #8
 8008866:	2b00      	cmp	r3, #0
 8008868:	d041      	beq.n	80088ee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	695b      	ldr	r3, [r3, #20]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d01c      	beq.n	80088ac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008872:	4b19      	ldr	r3, [pc, #100]	; (80088d8 <HAL_RCC_OscConfig+0x27c>)
 8008874:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008878:	4a17      	ldr	r2, [pc, #92]	; (80088d8 <HAL_RCC_OscConfig+0x27c>)
 800887a:	f043 0301 	orr.w	r3, r3, #1
 800887e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008882:	f7fc fb99 	bl	8004fb8 <HAL_GetTick>
 8008886:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008888:	e008      	b.n	800889c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800888a:	f7fc fb95 	bl	8004fb8 <HAL_GetTick>
 800888e:	4602      	mov	r2, r0
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	1ad3      	subs	r3, r2, r3
 8008894:	2b02      	cmp	r3, #2
 8008896:	d901      	bls.n	800889c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008898:	2303      	movs	r3, #3
 800889a:	e1ef      	b.n	8008c7c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800889c:	4b0e      	ldr	r3, [pc, #56]	; (80088d8 <HAL_RCC_OscConfig+0x27c>)
 800889e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088a2:	f003 0302 	and.w	r3, r3, #2
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d0ef      	beq.n	800888a <HAL_RCC_OscConfig+0x22e>
 80088aa:	e020      	b.n	80088ee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80088ac:	4b0a      	ldr	r3, [pc, #40]	; (80088d8 <HAL_RCC_OscConfig+0x27c>)
 80088ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088b2:	4a09      	ldr	r2, [pc, #36]	; (80088d8 <HAL_RCC_OscConfig+0x27c>)
 80088b4:	f023 0301 	bic.w	r3, r3, #1
 80088b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088bc:	f7fc fb7c 	bl	8004fb8 <HAL_GetTick>
 80088c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80088c2:	e00d      	b.n	80088e0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80088c4:	f7fc fb78 	bl	8004fb8 <HAL_GetTick>
 80088c8:	4602      	mov	r2, r0
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	1ad3      	subs	r3, r2, r3
 80088ce:	2b02      	cmp	r3, #2
 80088d0:	d906      	bls.n	80088e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80088d2:	2303      	movs	r3, #3
 80088d4:	e1d2      	b.n	8008c7c <HAL_RCC_OscConfig+0x620>
 80088d6:	bf00      	nop
 80088d8:	40021000 	.word	0x40021000
 80088dc:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80088e0:	4b8c      	ldr	r3, [pc, #560]	; (8008b14 <HAL_RCC_OscConfig+0x4b8>)
 80088e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088e6:	f003 0302 	and.w	r3, r3, #2
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d1ea      	bne.n	80088c4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f003 0304 	and.w	r3, r3, #4
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	f000 80a6 	beq.w	8008a48 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80088fc:	2300      	movs	r3, #0
 80088fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008900:	4b84      	ldr	r3, [pc, #528]	; (8008b14 <HAL_RCC_OscConfig+0x4b8>)
 8008902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008908:	2b00      	cmp	r3, #0
 800890a:	d101      	bne.n	8008910 <HAL_RCC_OscConfig+0x2b4>
 800890c:	2301      	movs	r3, #1
 800890e:	e000      	b.n	8008912 <HAL_RCC_OscConfig+0x2b6>
 8008910:	2300      	movs	r3, #0
 8008912:	2b00      	cmp	r3, #0
 8008914:	d00d      	beq.n	8008932 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008916:	4b7f      	ldr	r3, [pc, #508]	; (8008b14 <HAL_RCC_OscConfig+0x4b8>)
 8008918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800891a:	4a7e      	ldr	r2, [pc, #504]	; (8008b14 <HAL_RCC_OscConfig+0x4b8>)
 800891c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008920:	6593      	str	r3, [r2, #88]	; 0x58
 8008922:	4b7c      	ldr	r3, [pc, #496]	; (8008b14 <HAL_RCC_OscConfig+0x4b8>)
 8008924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800892a:	60fb      	str	r3, [r7, #12]
 800892c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800892e:	2301      	movs	r3, #1
 8008930:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008932:	4b79      	ldr	r3, [pc, #484]	; (8008b18 <HAL_RCC_OscConfig+0x4bc>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800893a:	2b00      	cmp	r3, #0
 800893c:	d118      	bne.n	8008970 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800893e:	4b76      	ldr	r3, [pc, #472]	; (8008b18 <HAL_RCC_OscConfig+0x4bc>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4a75      	ldr	r2, [pc, #468]	; (8008b18 <HAL_RCC_OscConfig+0x4bc>)
 8008944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008948:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800894a:	f7fc fb35 	bl	8004fb8 <HAL_GetTick>
 800894e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008950:	e008      	b.n	8008964 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008952:	f7fc fb31 	bl	8004fb8 <HAL_GetTick>
 8008956:	4602      	mov	r2, r0
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	1ad3      	subs	r3, r2, r3
 800895c:	2b02      	cmp	r3, #2
 800895e:	d901      	bls.n	8008964 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008960:	2303      	movs	r3, #3
 8008962:	e18b      	b.n	8008c7c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008964:	4b6c      	ldr	r3, [pc, #432]	; (8008b18 <HAL_RCC_OscConfig+0x4bc>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800896c:	2b00      	cmp	r3, #0
 800896e:	d0f0      	beq.n	8008952 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	2b01      	cmp	r3, #1
 8008976:	d108      	bne.n	800898a <HAL_RCC_OscConfig+0x32e>
 8008978:	4b66      	ldr	r3, [pc, #408]	; (8008b14 <HAL_RCC_OscConfig+0x4b8>)
 800897a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800897e:	4a65      	ldr	r2, [pc, #404]	; (8008b14 <HAL_RCC_OscConfig+0x4b8>)
 8008980:	f043 0301 	orr.w	r3, r3, #1
 8008984:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008988:	e024      	b.n	80089d4 <HAL_RCC_OscConfig+0x378>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	689b      	ldr	r3, [r3, #8]
 800898e:	2b05      	cmp	r3, #5
 8008990:	d110      	bne.n	80089b4 <HAL_RCC_OscConfig+0x358>
 8008992:	4b60      	ldr	r3, [pc, #384]	; (8008b14 <HAL_RCC_OscConfig+0x4b8>)
 8008994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008998:	4a5e      	ldr	r2, [pc, #376]	; (8008b14 <HAL_RCC_OscConfig+0x4b8>)
 800899a:	f043 0304 	orr.w	r3, r3, #4
 800899e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80089a2:	4b5c      	ldr	r3, [pc, #368]	; (8008b14 <HAL_RCC_OscConfig+0x4b8>)
 80089a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089a8:	4a5a      	ldr	r2, [pc, #360]	; (8008b14 <HAL_RCC_OscConfig+0x4b8>)
 80089aa:	f043 0301 	orr.w	r3, r3, #1
 80089ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80089b2:	e00f      	b.n	80089d4 <HAL_RCC_OscConfig+0x378>
 80089b4:	4b57      	ldr	r3, [pc, #348]	; (8008b14 <HAL_RCC_OscConfig+0x4b8>)
 80089b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089ba:	4a56      	ldr	r2, [pc, #344]	; (8008b14 <HAL_RCC_OscConfig+0x4b8>)
 80089bc:	f023 0301 	bic.w	r3, r3, #1
 80089c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80089c4:	4b53      	ldr	r3, [pc, #332]	; (8008b14 <HAL_RCC_OscConfig+0x4b8>)
 80089c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089ca:	4a52      	ldr	r2, [pc, #328]	; (8008b14 <HAL_RCC_OscConfig+0x4b8>)
 80089cc:	f023 0304 	bic.w	r3, r3, #4
 80089d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d016      	beq.n	8008a0a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089dc:	f7fc faec 	bl	8004fb8 <HAL_GetTick>
 80089e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80089e2:	e00a      	b.n	80089fa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089e4:	f7fc fae8 	bl	8004fb8 <HAL_GetTick>
 80089e8:	4602      	mov	r2, r0
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	1ad3      	subs	r3, r2, r3
 80089ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d901      	bls.n	80089fa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80089f6:	2303      	movs	r3, #3
 80089f8:	e140      	b.n	8008c7c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80089fa:	4b46      	ldr	r3, [pc, #280]	; (8008b14 <HAL_RCC_OscConfig+0x4b8>)
 80089fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a00:	f003 0302 	and.w	r3, r3, #2
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d0ed      	beq.n	80089e4 <HAL_RCC_OscConfig+0x388>
 8008a08:	e015      	b.n	8008a36 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a0a:	f7fc fad5 	bl	8004fb8 <HAL_GetTick>
 8008a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008a10:	e00a      	b.n	8008a28 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a12:	f7fc fad1 	bl	8004fb8 <HAL_GetTick>
 8008a16:	4602      	mov	r2, r0
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	1ad3      	subs	r3, r2, r3
 8008a1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d901      	bls.n	8008a28 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008a24:	2303      	movs	r3, #3
 8008a26:	e129      	b.n	8008c7c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008a28:	4b3a      	ldr	r3, [pc, #232]	; (8008b14 <HAL_RCC_OscConfig+0x4b8>)
 8008a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a2e:	f003 0302 	and.w	r3, r3, #2
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d1ed      	bne.n	8008a12 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008a36:	7ffb      	ldrb	r3, [r7, #31]
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d105      	bne.n	8008a48 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a3c:	4b35      	ldr	r3, [pc, #212]	; (8008b14 <HAL_RCC_OscConfig+0x4b8>)
 8008a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a40:	4a34      	ldr	r2, [pc, #208]	; (8008b14 <HAL_RCC_OscConfig+0x4b8>)
 8008a42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a46:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f003 0320 	and.w	r3, r3, #32
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d03c      	beq.n	8008ace <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	699b      	ldr	r3, [r3, #24]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d01c      	beq.n	8008a96 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008a5c:	4b2d      	ldr	r3, [pc, #180]	; (8008b14 <HAL_RCC_OscConfig+0x4b8>)
 8008a5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008a62:	4a2c      	ldr	r2, [pc, #176]	; (8008b14 <HAL_RCC_OscConfig+0x4b8>)
 8008a64:	f043 0301 	orr.w	r3, r3, #1
 8008a68:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a6c:	f7fc faa4 	bl	8004fb8 <HAL_GetTick>
 8008a70:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008a72:	e008      	b.n	8008a86 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008a74:	f7fc faa0 	bl	8004fb8 <HAL_GetTick>
 8008a78:	4602      	mov	r2, r0
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	1ad3      	subs	r3, r2, r3
 8008a7e:	2b02      	cmp	r3, #2
 8008a80:	d901      	bls.n	8008a86 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008a82:	2303      	movs	r3, #3
 8008a84:	e0fa      	b.n	8008c7c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008a86:	4b23      	ldr	r3, [pc, #140]	; (8008b14 <HAL_RCC_OscConfig+0x4b8>)
 8008a88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008a8c:	f003 0302 	and.w	r3, r3, #2
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d0ef      	beq.n	8008a74 <HAL_RCC_OscConfig+0x418>
 8008a94:	e01b      	b.n	8008ace <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008a96:	4b1f      	ldr	r3, [pc, #124]	; (8008b14 <HAL_RCC_OscConfig+0x4b8>)
 8008a98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008a9c:	4a1d      	ldr	r2, [pc, #116]	; (8008b14 <HAL_RCC_OscConfig+0x4b8>)
 8008a9e:	f023 0301 	bic.w	r3, r3, #1
 8008aa2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008aa6:	f7fc fa87 	bl	8004fb8 <HAL_GetTick>
 8008aaa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008aac:	e008      	b.n	8008ac0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008aae:	f7fc fa83 	bl	8004fb8 <HAL_GetTick>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	1ad3      	subs	r3, r2, r3
 8008ab8:	2b02      	cmp	r3, #2
 8008aba:	d901      	bls.n	8008ac0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008abc:	2303      	movs	r3, #3
 8008abe:	e0dd      	b.n	8008c7c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008ac0:	4b14      	ldr	r3, [pc, #80]	; (8008b14 <HAL_RCC_OscConfig+0x4b8>)
 8008ac2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008ac6:	f003 0302 	and.w	r3, r3, #2
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d1ef      	bne.n	8008aae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	69db      	ldr	r3, [r3, #28]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	f000 80d1 	beq.w	8008c7a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008ad8:	4b0e      	ldr	r3, [pc, #56]	; (8008b14 <HAL_RCC_OscConfig+0x4b8>)
 8008ada:	689b      	ldr	r3, [r3, #8]
 8008adc:	f003 030c 	and.w	r3, r3, #12
 8008ae0:	2b0c      	cmp	r3, #12
 8008ae2:	f000 808b 	beq.w	8008bfc <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	69db      	ldr	r3, [r3, #28]
 8008aea:	2b02      	cmp	r3, #2
 8008aec:	d15e      	bne.n	8008bac <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008aee:	4b09      	ldr	r3, [pc, #36]	; (8008b14 <HAL_RCC_OscConfig+0x4b8>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4a08      	ldr	r2, [pc, #32]	; (8008b14 <HAL_RCC_OscConfig+0x4b8>)
 8008af4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008af8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008afa:	f7fc fa5d 	bl	8004fb8 <HAL_GetTick>
 8008afe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008b00:	e00c      	b.n	8008b1c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b02:	f7fc fa59 	bl	8004fb8 <HAL_GetTick>
 8008b06:	4602      	mov	r2, r0
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	1ad3      	subs	r3, r2, r3
 8008b0c:	2b02      	cmp	r3, #2
 8008b0e:	d905      	bls.n	8008b1c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008b10:	2303      	movs	r3, #3
 8008b12:	e0b3      	b.n	8008c7c <HAL_RCC_OscConfig+0x620>
 8008b14:	40021000 	.word	0x40021000
 8008b18:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008b1c:	4b59      	ldr	r3, [pc, #356]	; (8008c84 <HAL_RCC_OscConfig+0x628>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d1ec      	bne.n	8008b02 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008b28:	4b56      	ldr	r3, [pc, #344]	; (8008c84 <HAL_RCC_OscConfig+0x628>)
 8008b2a:	68da      	ldr	r2, [r3, #12]
 8008b2c:	4b56      	ldr	r3, [pc, #344]	; (8008c88 <HAL_RCC_OscConfig+0x62c>)
 8008b2e:	4013      	ands	r3, r2
 8008b30:	687a      	ldr	r2, [r7, #4]
 8008b32:	6a11      	ldr	r1, [r2, #32]
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008b38:	3a01      	subs	r2, #1
 8008b3a:	0112      	lsls	r2, r2, #4
 8008b3c:	4311      	orrs	r1, r2
 8008b3e:	687a      	ldr	r2, [r7, #4]
 8008b40:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008b42:	0212      	lsls	r2, r2, #8
 8008b44:	4311      	orrs	r1, r2
 8008b46:	687a      	ldr	r2, [r7, #4]
 8008b48:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008b4a:	0852      	lsrs	r2, r2, #1
 8008b4c:	3a01      	subs	r2, #1
 8008b4e:	0552      	lsls	r2, r2, #21
 8008b50:	4311      	orrs	r1, r2
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008b56:	0852      	lsrs	r2, r2, #1
 8008b58:	3a01      	subs	r2, #1
 8008b5a:	0652      	lsls	r2, r2, #25
 8008b5c:	4311      	orrs	r1, r2
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008b62:	06d2      	lsls	r2, r2, #27
 8008b64:	430a      	orrs	r2, r1
 8008b66:	4947      	ldr	r1, [pc, #284]	; (8008c84 <HAL_RCC_OscConfig+0x628>)
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008b6c:	4b45      	ldr	r3, [pc, #276]	; (8008c84 <HAL_RCC_OscConfig+0x628>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a44      	ldr	r2, [pc, #272]	; (8008c84 <HAL_RCC_OscConfig+0x628>)
 8008b72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008b76:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008b78:	4b42      	ldr	r3, [pc, #264]	; (8008c84 <HAL_RCC_OscConfig+0x628>)
 8008b7a:	68db      	ldr	r3, [r3, #12]
 8008b7c:	4a41      	ldr	r2, [pc, #260]	; (8008c84 <HAL_RCC_OscConfig+0x628>)
 8008b7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008b82:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b84:	f7fc fa18 	bl	8004fb8 <HAL_GetTick>
 8008b88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008b8a:	e008      	b.n	8008b9e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b8c:	f7fc fa14 	bl	8004fb8 <HAL_GetTick>
 8008b90:	4602      	mov	r2, r0
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	1ad3      	subs	r3, r2, r3
 8008b96:	2b02      	cmp	r3, #2
 8008b98:	d901      	bls.n	8008b9e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008b9a:	2303      	movs	r3, #3
 8008b9c:	e06e      	b.n	8008c7c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008b9e:	4b39      	ldr	r3, [pc, #228]	; (8008c84 <HAL_RCC_OscConfig+0x628>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d0f0      	beq.n	8008b8c <HAL_RCC_OscConfig+0x530>
 8008baa:	e066      	b.n	8008c7a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008bac:	4b35      	ldr	r3, [pc, #212]	; (8008c84 <HAL_RCC_OscConfig+0x628>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a34      	ldr	r2, [pc, #208]	; (8008c84 <HAL_RCC_OscConfig+0x628>)
 8008bb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008bb6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8008bb8:	4b32      	ldr	r3, [pc, #200]	; (8008c84 <HAL_RCC_OscConfig+0x628>)
 8008bba:	68db      	ldr	r3, [r3, #12]
 8008bbc:	4a31      	ldr	r2, [pc, #196]	; (8008c84 <HAL_RCC_OscConfig+0x628>)
 8008bbe:	f023 0303 	bic.w	r3, r3, #3
 8008bc2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008bc4:	4b2f      	ldr	r3, [pc, #188]	; (8008c84 <HAL_RCC_OscConfig+0x628>)
 8008bc6:	68db      	ldr	r3, [r3, #12]
 8008bc8:	4a2e      	ldr	r2, [pc, #184]	; (8008c84 <HAL_RCC_OscConfig+0x628>)
 8008bca:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8008bce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008bd2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bd4:	f7fc f9f0 	bl	8004fb8 <HAL_GetTick>
 8008bd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008bda:	e008      	b.n	8008bee <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008bdc:	f7fc f9ec 	bl	8004fb8 <HAL_GetTick>
 8008be0:	4602      	mov	r2, r0
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	1ad3      	subs	r3, r2, r3
 8008be6:	2b02      	cmp	r3, #2
 8008be8:	d901      	bls.n	8008bee <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8008bea:	2303      	movs	r3, #3
 8008bec:	e046      	b.n	8008c7c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008bee:	4b25      	ldr	r3, [pc, #148]	; (8008c84 <HAL_RCC_OscConfig+0x628>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d1f0      	bne.n	8008bdc <HAL_RCC_OscConfig+0x580>
 8008bfa:	e03e      	b.n	8008c7a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	69db      	ldr	r3, [r3, #28]
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d101      	bne.n	8008c08 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8008c04:	2301      	movs	r3, #1
 8008c06:	e039      	b.n	8008c7c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008c08:	4b1e      	ldr	r3, [pc, #120]	; (8008c84 <HAL_RCC_OscConfig+0x628>)
 8008c0a:	68db      	ldr	r3, [r3, #12]
 8008c0c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	f003 0203 	and.w	r2, r3, #3
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6a1b      	ldr	r3, [r3, #32]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d12c      	bne.n	8008c76 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c26:	3b01      	subs	r3, #1
 8008c28:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d123      	bne.n	8008c76 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c38:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d11b      	bne.n	8008c76 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c48:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d113      	bne.n	8008c76 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c58:	085b      	lsrs	r3, r3, #1
 8008c5a:	3b01      	subs	r3, #1
 8008c5c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d109      	bne.n	8008c76 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c6c:	085b      	lsrs	r3, r3, #1
 8008c6e:	3b01      	subs	r3, #1
 8008c70:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d001      	beq.n	8008c7a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8008c76:	2301      	movs	r3, #1
 8008c78:	e000      	b.n	8008c7c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8008c7a:	2300      	movs	r3, #0
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3720      	adds	r7, #32
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}
 8008c84:	40021000 	.word	0x40021000
 8008c88:	019f800c 	.word	0x019f800c

08008c8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b086      	sub	sp, #24
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
 8008c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008c96:	2300      	movs	r3, #0
 8008c98:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d101      	bne.n	8008ca4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	e11e      	b.n	8008ee2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008ca4:	4b91      	ldr	r3, [pc, #580]	; (8008eec <HAL_RCC_ClockConfig+0x260>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f003 030f 	and.w	r3, r3, #15
 8008cac:	683a      	ldr	r2, [r7, #0]
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d910      	bls.n	8008cd4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008cb2:	4b8e      	ldr	r3, [pc, #568]	; (8008eec <HAL_RCC_ClockConfig+0x260>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f023 020f 	bic.w	r2, r3, #15
 8008cba:	498c      	ldr	r1, [pc, #560]	; (8008eec <HAL_RCC_ClockConfig+0x260>)
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008cc2:	4b8a      	ldr	r3, [pc, #552]	; (8008eec <HAL_RCC_ClockConfig+0x260>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f003 030f 	and.w	r3, r3, #15
 8008cca:	683a      	ldr	r2, [r7, #0]
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	d001      	beq.n	8008cd4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	e106      	b.n	8008ee2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f003 0301 	and.w	r3, r3, #1
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d073      	beq.n	8008dc8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	2b03      	cmp	r3, #3
 8008ce6:	d129      	bne.n	8008d3c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008ce8:	4b81      	ldr	r3, [pc, #516]	; (8008ef0 <HAL_RCC_ClockConfig+0x264>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d101      	bne.n	8008cf8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	e0f4      	b.n	8008ee2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008cf8:	f000 f9e2 	bl	80090c0 <RCC_GetSysClockFreqFromPLLSource>
 8008cfc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	4a7c      	ldr	r2, [pc, #496]	; (8008ef4 <HAL_RCC_ClockConfig+0x268>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d93f      	bls.n	8008d86 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008d06:	4b7a      	ldr	r3, [pc, #488]	; (8008ef0 <HAL_RCC_ClockConfig+0x264>)
 8008d08:	689b      	ldr	r3, [r3, #8]
 8008d0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d009      	beq.n	8008d26 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d033      	beq.n	8008d86 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d12f      	bne.n	8008d86 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008d26:	4b72      	ldr	r3, [pc, #456]	; (8008ef0 <HAL_RCC_ClockConfig+0x264>)
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008d2e:	4a70      	ldr	r2, [pc, #448]	; (8008ef0 <HAL_RCC_ClockConfig+0x264>)
 8008d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d34:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008d36:	2380      	movs	r3, #128	; 0x80
 8008d38:	617b      	str	r3, [r7, #20]
 8008d3a:	e024      	b.n	8008d86 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	2b02      	cmp	r3, #2
 8008d42:	d107      	bne.n	8008d54 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008d44:	4b6a      	ldr	r3, [pc, #424]	; (8008ef0 <HAL_RCC_ClockConfig+0x264>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d109      	bne.n	8008d64 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008d50:	2301      	movs	r3, #1
 8008d52:	e0c6      	b.n	8008ee2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008d54:	4b66      	ldr	r3, [pc, #408]	; (8008ef0 <HAL_RCC_ClockConfig+0x264>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d101      	bne.n	8008d64 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008d60:	2301      	movs	r3, #1
 8008d62:	e0be      	b.n	8008ee2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008d64:	f000 f914 	bl	8008f90 <HAL_RCC_GetSysClockFreq>
 8008d68:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	4a61      	ldr	r2, [pc, #388]	; (8008ef4 <HAL_RCC_ClockConfig+0x268>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d909      	bls.n	8008d86 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008d72:	4b5f      	ldr	r3, [pc, #380]	; (8008ef0 <HAL_RCC_ClockConfig+0x264>)
 8008d74:	689b      	ldr	r3, [r3, #8]
 8008d76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008d7a:	4a5d      	ldr	r2, [pc, #372]	; (8008ef0 <HAL_RCC_ClockConfig+0x264>)
 8008d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d80:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008d82:	2380      	movs	r3, #128	; 0x80
 8008d84:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008d86:	4b5a      	ldr	r3, [pc, #360]	; (8008ef0 <HAL_RCC_ClockConfig+0x264>)
 8008d88:	689b      	ldr	r3, [r3, #8]
 8008d8a:	f023 0203 	bic.w	r2, r3, #3
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	4957      	ldr	r1, [pc, #348]	; (8008ef0 <HAL_RCC_ClockConfig+0x264>)
 8008d94:	4313      	orrs	r3, r2
 8008d96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d98:	f7fc f90e 	bl	8004fb8 <HAL_GetTick>
 8008d9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d9e:	e00a      	b.n	8008db6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008da0:	f7fc f90a 	bl	8004fb8 <HAL_GetTick>
 8008da4:	4602      	mov	r2, r0
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	1ad3      	subs	r3, r2, r3
 8008daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d901      	bls.n	8008db6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8008db2:	2303      	movs	r3, #3
 8008db4:	e095      	b.n	8008ee2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008db6:	4b4e      	ldr	r3, [pc, #312]	; (8008ef0 <HAL_RCC_ClockConfig+0x264>)
 8008db8:	689b      	ldr	r3, [r3, #8]
 8008dba:	f003 020c 	and.w	r2, r3, #12
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d1eb      	bne.n	8008da0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f003 0302 	and.w	r3, r3, #2
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d023      	beq.n	8008e1c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f003 0304 	and.w	r3, r3, #4
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d005      	beq.n	8008dec <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008de0:	4b43      	ldr	r3, [pc, #268]	; (8008ef0 <HAL_RCC_ClockConfig+0x264>)
 8008de2:	689b      	ldr	r3, [r3, #8]
 8008de4:	4a42      	ldr	r2, [pc, #264]	; (8008ef0 <HAL_RCC_ClockConfig+0x264>)
 8008de6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008dea:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f003 0308 	and.w	r3, r3, #8
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d007      	beq.n	8008e08 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008df8:	4b3d      	ldr	r3, [pc, #244]	; (8008ef0 <HAL_RCC_ClockConfig+0x264>)
 8008dfa:	689b      	ldr	r3, [r3, #8]
 8008dfc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008e00:	4a3b      	ldr	r2, [pc, #236]	; (8008ef0 <HAL_RCC_ClockConfig+0x264>)
 8008e02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008e06:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e08:	4b39      	ldr	r3, [pc, #228]	; (8008ef0 <HAL_RCC_ClockConfig+0x264>)
 8008e0a:	689b      	ldr	r3, [r3, #8]
 8008e0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	689b      	ldr	r3, [r3, #8]
 8008e14:	4936      	ldr	r1, [pc, #216]	; (8008ef0 <HAL_RCC_ClockConfig+0x264>)
 8008e16:	4313      	orrs	r3, r2
 8008e18:	608b      	str	r3, [r1, #8]
 8008e1a:	e008      	b.n	8008e2e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	2b80      	cmp	r3, #128	; 0x80
 8008e20:	d105      	bne.n	8008e2e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008e22:	4b33      	ldr	r3, [pc, #204]	; (8008ef0 <HAL_RCC_ClockConfig+0x264>)
 8008e24:	689b      	ldr	r3, [r3, #8]
 8008e26:	4a32      	ldr	r2, [pc, #200]	; (8008ef0 <HAL_RCC_ClockConfig+0x264>)
 8008e28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008e2c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008e2e:	4b2f      	ldr	r3, [pc, #188]	; (8008eec <HAL_RCC_ClockConfig+0x260>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f003 030f 	and.w	r3, r3, #15
 8008e36:	683a      	ldr	r2, [r7, #0]
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	d21d      	bcs.n	8008e78 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e3c:	4b2b      	ldr	r3, [pc, #172]	; (8008eec <HAL_RCC_ClockConfig+0x260>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f023 020f 	bic.w	r2, r3, #15
 8008e44:	4929      	ldr	r1, [pc, #164]	; (8008eec <HAL_RCC_ClockConfig+0x260>)
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008e4c:	f7fc f8b4 	bl	8004fb8 <HAL_GetTick>
 8008e50:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e52:	e00a      	b.n	8008e6a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e54:	f7fc f8b0 	bl	8004fb8 <HAL_GetTick>
 8008e58:	4602      	mov	r2, r0
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	1ad3      	subs	r3, r2, r3
 8008e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d901      	bls.n	8008e6a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008e66:	2303      	movs	r3, #3
 8008e68:	e03b      	b.n	8008ee2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e6a:	4b20      	ldr	r3, [pc, #128]	; (8008eec <HAL_RCC_ClockConfig+0x260>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f003 030f 	and.w	r3, r3, #15
 8008e72:	683a      	ldr	r2, [r7, #0]
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d1ed      	bne.n	8008e54 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f003 0304 	and.w	r3, r3, #4
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d008      	beq.n	8008e96 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008e84:	4b1a      	ldr	r3, [pc, #104]	; (8008ef0 <HAL_RCC_ClockConfig+0x264>)
 8008e86:	689b      	ldr	r3, [r3, #8]
 8008e88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	68db      	ldr	r3, [r3, #12]
 8008e90:	4917      	ldr	r1, [pc, #92]	; (8008ef0 <HAL_RCC_ClockConfig+0x264>)
 8008e92:	4313      	orrs	r3, r2
 8008e94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f003 0308 	and.w	r3, r3, #8
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d009      	beq.n	8008eb6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008ea2:	4b13      	ldr	r3, [pc, #76]	; (8008ef0 <HAL_RCC_ClockConfig+0x264>)
 8008ea4:	689b      	ldr	r3, [r3, #8]
 8008ea6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	691b      	ldr	r3, [r3, #16]
 8008eae:	00db      	lsls	r3, r3, #3
 8008eb0:	490f      	ldr	r1, [pc, #60]	; (8008ef0 <HAL_RCC_ClockConfig+0x264>)
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008eb6:	f000 f86b 	bl	8008f90 <HAL_RCC_GetSysClockFreq>
 8008eba:	4602      	mov	r2, r0
 8008ebc:	4b0c      	ldr	r3, [pc, #48]	; (8008ef0 <HAL_RCC_ClockConfig+0x264>)
 8008ebe:	689b      	ldr	r3, [r3, #8]
 8008ec0:	091b      	lsrs	r3, r3, #4
 8008ec2:	f003 030f 	and.w	r3, r3, #15
 8008ec6:	490c      	ldr	r1, [pc, #48]	; (8008ef8 <HAL_RCC_ClockConfig+0x26c>)
 8008ec8:	5ccb      	ldrb	r3, [r1, r3]
 8008eca:	f003 031f 	and.w	r3, r3, #31
 8008ece:	fa22 f303 	lsr.w	r3, r2, r3
 8008ed2:	4a0a      	ldr	r2, [pc, #40]	; (8008efc <HAL_RCC_ClockConfig+0x270>)
 8008ed4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008ed6:	4b0a      	ldr	r3, [pc, #40]	; (8008f00 <HAL_RCC_ClockConfig+0x274>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4618      	mov	r0, r3
 8008edc:	f7fc f820 	bl	8004f20 <HAL_InitTick>
 8008ee0:	4603      	mov	r3, r0
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3718      	adds	r7, #24
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}
 8008eea:	bf00      	nop
 8008eec:	40022000 	.word	0x40022000
 8008ef0:	40021000 	.word	0x40021000
 8008ef4:	04c4b400 	.word	0x04c4b400
 8008ef8:	08011ff8 	.word	0x08011ff8
 8008efc:	2000000c 	.word	0x2000000c
 8008f00:	20000010 	.word	0x20000010

08008f04 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b08c      	sub	sp, #48	; 0x30
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	60f8      	str	r0, [r7, #12]
 8008f0c:	60b9      	str	r1, [r7, #8]
 8008f0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 8008f10:	2302      	movs	r3, #2
 8008f12:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8008f14:	2303      	movs	r3, #3
 8008f16:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	61bb      	str	r3, [r7, #24]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f22:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	0c1b      	lsrs	r3, r3, #16
 8008f28:	f003 030f 	and.w	r3, r3, #15
 8008f2c:	f503 1390 	add.w	r3, r3, #1179648	; 0x120000
 8008f30:	029b      	lsls	r3, r3, #10
 8008f32:	62bb      	str	r3, [r7, #40]	; 0x28

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	0c1b      	lsrs	r3, r3, #16
 8008f38:	f003 030f 	and.w	r3, r3, #15
 8008f3c:	627b      	str	r3, [r7, #36]	; 0x24
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 8008f3e:	4b13      	ldr	r3, [pc, #76]	; (8008f8c <HAL_RCC_MCOConfig+0x88>)
 8008f40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f42:	2101      	movs	r1, #1
 8008f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f46:	fa01 f303 	lsl.w	r3, r1, r3
 8008f4a:	4910      	ldr	r1, [pc, #64]	; (8008f8c <HAL_RCC_MCOConfig+0x88>)
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	64cb      	str	r3, [r1, #76]	; 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	b29b      	uxth	r3, r3
 8008f54:	613b      	str	r3, [r7, #16]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	0d1b      	lsrs	r3, r3, #20
 8008f5a:	b2db      	uxtb	r3, r3
 8008f5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 8008f5e:	f107 0310 	add.w	r3, r7, #16
 8008f62:	4619      	mov	r1, r3
 8008f64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f66:	f7ff f92b 	bl	80081c0 <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 8008f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d109      	bne.n	8008f84 <HAL_RCC_MCOConfig+0x80>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 8008f70:	4b06      	ldr	r3, [pc, #24]	; (8008f8c <HAL_RCC_MCOConfig+0x88>)
 8008f72:	689b      	ldr	r3, [r3, #8]
 8008f74:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008f78:	68b9      	ldr	r1, [r7, #8]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	430b      	orrs	r3, r1
 8008f7e:	4903      	ldr	r1, [pc, #12]	; (8008f8c <HAL_RCC_MCOConfig+0x88>)
 8008f80:	4313      	orrs	r3, r2
 8008f82:	608b      	str	r3, [r1, #8]
  }
}
 8008f84:	bf00      	nop
 8008f86:	3730      	adds	r7, #48	; 0x30
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	40021000 	.word	0x40021000

08008f90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b087      	sub	sp, #28
 8008f94:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008f96:	4b2c      	ldr	r3, [pc, #176]	; (8009048 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008f98:	689b      	ldr	r3, [r3, #8]
 8008f9a:	f003 030c 	and.w	r3, r3, #12
 8008f9e:	2b04      	cmp	r3, #4
 8008fa0:	d102      	bne.n	8008fa8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008fa2:	4b2a      	ldr	r3, [pc, #168]	; (800904c <HAL_RCC_GetSysClockFreq+0xbc>)
 8008fa4:	613b      	str	r3, [r7, #16]
 8008fa6:	e047      	b.n	8009038 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008fa8:	4b27      	ldr	r3, [pc, #156]	; (8009048 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	f003 030c 	and.w	r3, r3, #12
 8008fb0:	2b08      	cmp	r3, #8
 8008fb2:	d102      	bne.n	8008fba <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008fb4:	4b25      	ldr	r3, [pc, #148]	; (800904c <HAL_RCC_GetSysClockFreq+0xbc>)
 8008fb6:	613b      	str	r3, [r7, #16]
 8008fb8:	e03e      	b.n	8009038 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008fba:	4b23      	ldr	r3, [pc, #140]	; (8009048 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008fbc:	689b      	ldr	r3, [r3, #8]
 8008fbe:	f003 030c 	and.w	r3, r3, #12
 8008fc2:	2b0c      	cmp	r3, #12
 8008fc4:	d136      	bne.n	8009034 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008fc6:	4b20      	ldr	r3, [pc, #128]	; (8009048 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008fc8:	68db      	ldr	r3, [r3, #12]
 8008fca:	f003 0303 	and.w	r3, r3, #3
 8008fce:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008fd0:	4b1d      	ldr	r3, [pc, #116]	; (8009048 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008fd2:	68db      	ldr	r3, [r3, #12]
 8008fd4:	091b      	lsrs	r3, r3, #4
 8008fd6:	f003 030f 	and.w	r3, r3, #15
 8008fda:	3301      	adds	r3, #1
 8008fdc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2b03      	cmp	r3, #3
 8008fe2:	d10c      	bne.n	8008ffe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008fe4:	4a19      	ldr	r2, [pc, #100]	; (800904c <HAL_RCC_GetSysClockFreq+0xbc>)
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fec:	4a16      	ldr	r2, [pc, #88]	; (8009048 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008fee:	68d2      	ldr	r2, [r2, #12]
 8008ff0:	0a12      	lsrs	r2, r2, #8
 8008ff2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008ff6:	fb02 f303 	mul.w	r3, r2, r3
 8008ffa:	617b      	str	r3, [r7, #20]
      break;
 8008ffc:	e00c      	b.n	8009018 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008ffe:	4a13      	ldr	r2, [pc, #76]	; (800904c <HAL_RCC_GetSysClockFreq+0xbc>)
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	fbb2 f3f3 	udiv	r3, r2, r3
 8009006:	4a10      	ldr	r2, [pc, #64]	; (8009048 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009008:	68d2      	ldr	r2, [r2, #12]
 800900a:	0a12      	lsrs	r2, r2, #8
 800900c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009010:	fb02 f303 	mul.w	r3, r2, r3
 8009014:	617b      	str	r3, [r7, #20]
      break;
 8009016:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009018:	4b0b      	ldr	r3, [pc, #44]	; (8009048 <HAL_RCC_GetSysClockFreq+0xb8>)
 800901a:	68db      	ldr	r3, [r3, #12]
 800901c:	0e5b      	lsrs	r3, r3, #25
 800901e:	f003 0303 	and.w	r3, r3, #3
 8009022:	3301      	adds	r3, #1
 8009024:	005b      	lsls	r3, r3, #1
 8009026:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8009028:	697a      	ldr	r2, [r7, #20]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009030:	613b      	str	r3, [r7, #16]
 8009032:	e001      	b.n	8009038 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8009034:	2300      	movs	r3, #0
 8009036:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8009038:	693b      	ldr	r3, [r7, #16]
}
 800903a:	4618      	mov	r0, r3
 800903c:	371c      	adds	r7, #28
 800903e:	46bd      	mov	sp, r7
 8009040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009044:	4770      	bx	lr
 8009046:	bf00      	nop
 8009048:	40021000 	.word	0x40021000
 800904c:	00f42400 	.word	0x00f42400

08009050 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009050:	b480      	push	{r7}
 8009052:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009054:	4b03      	ldr	r3, [pc, #12]	; (8009064 <HAL_RCC_GetHCLKFreq+0x14>)
 8009056:	681b      	ldr	r3, [r3, #0]
}
 8009058:	4618      	mov	r0, r3
 800905a:	46bd      	mov	sp, r7
 800905c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009060:	4770      	bx	lr
 8009062:	bf00      	nop
 8009064:	2000000c 	.word	0x2000000c

08009068 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800906c:	f7ff fff0 	bl	8009050 <HAL_RCC_GetHCLKFreq>
 8009070:	4602      	mov	r2, r0
 8009072:	4b06      	ldr	r3, [pc, #24]	; (800908c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	0a1b      	lsrs	r3, r3, #8
 8009078:	f003 0307 	and.w	r3, r3, #7
 800907c:	4904      	ldr	r1, [pc, #16]	; (8009090 <HAL_RCC_GetPCLK1Freq+0x28>)
 800907e:	5ccb      	ldrb	r3, [r1, r3]
 8009080:	f003 031f 	and.w	r3, r3, #31
 8009084:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009088:	4618      	mov	r0, r3
 800908a:	bd80      	pop	{r7, pc}
 800908c:	40021000 	.word	0x40021000
 8009090:	08012008 	.word	0x08012008

08009094 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009098:	f7ff ffda 	bl	8009050 <HAL_RCC_GetHCLKFreq>
 800909c:	4602      	mov	r2, r0
 800909e:	4b06      	ldr	r3, [pc, #24]	; (80090b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80090a0:	689b      	ldr	r3, [r3, #8]
 80090a2:	0adb      	lsrs	r3, r3, #11
 80090a4:	f003 0307 	and.w	r3, r3, #7
 80090a8:	4904      	ldr	r1, [pc, #16]	; (80090bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80090aa:	5ccb      	ldrb	r3, [r1, r3]
 80090ac:	f003 031f 	and.w	r3, r3, #31
 80090b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	bd80      	pop	{r7, pc}
 80090b8:	40021000 	.word	0x40021000
 80090bc:	08012008 	.word	0x08012008

080090c0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b087      	sub	sp, #28
 80090c4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80090c6:	4b1e      	ldr	r3, [pc, #120]	; (8009140 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80090c8:	68db      	ldr	r3, [r3, #12]
 80090ca:	f003 0303 	and.w	r3, r3, #3
 80090ce:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80090d0:	4b1b      	ldr	r3, [pc, #108]	; (8009140 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80090d2:	68db      	ldr	r3, [r3, #12]
 80090d4:	091b      	lsrs	r3, r3, #4
 80090d6:	f003 030f 	and.w	r3, r3, #15
 80090da:	3301      	adds	r3, #1
 80090dc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	2b03      	cmp	r3, #3
 80090e2:	d10c      	bne.n	80090fe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80090e4:	4a17      	ldr	r2, [pc, #92]	; (8009144 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80090ec:	4a14      	ldr	r2, [pc, #80]	; (8009140 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80090ee:	68d2      	ldr	r2, [r2, #12]
 80090f0:	0a12      	lsrs	r2, r2, #8
 80090f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80090f6:	fb02 f303 	mul.w	r3, r2, r3
 80090fa:	617b      	str	r3, [r7, #20]
    break;
 80090fc:	e00c      	b.n	8009118 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80090fe:	4a11      	ldr	r2, [pc, #68]	; (8009144 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	fbb2 f3f3 	udiv	r3, r2, r3
 8009106:	4a0e      	ldr	r2, [pc, #56]	; (8009140 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009108:	68d2      	ldr	r2, [r2, #12]
 800910a:	0a12      	lsrs	r2, r2, #8
 800910c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009110:	fb02 f303 	mul.w	r3, r2, r3
 8009114:	617b      	str	r3, [r7, #20]
    break;
 8009116:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009118:	4b09      	ldr	r3, [pc, #36]	; (8009140 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800911a:	68db      	ldr	r3, [r3, #12]
 800911c:	0e5b      	lsrs	r3, r3, #25
 800911e:	f003 0303 	and.w	r3, r3, #3
 8009122:	3301      	adds	r3, #1
 8009124:	005b      	lsls	r3, r3, #1
 8009126:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009128:	697a      	ldr	r2, [r7, #20]
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009130:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8009132:	687b      	ldr	r3, [r7, #4]
}
 8009134:	4618      	mov	r0, r3
 8009136:	371c      	adds	r7, #28
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr
 8009140:	40021000 	.word	0x40021000
 8009144:	00f42400 	.word	0x00f42400

08009148 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b086      	sub	sp, #24
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009150:	2300      	movs	r3, #0
 8009152:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009154:	2300      	movs	r3, #0
 8009156:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009160:	2b00      	cmp	r3, #0
 8009162:	f000 8098 	beq.w	8009296 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009166:	2300      	movs	r3, #0
 8009168:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800916a:	4b43      	ldr	r3, [pc, #268]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800916c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800916e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009172:	2b00      	cmp	r3, #0
 8009174:	d10d      	bne.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009176:	4b40      	ldr	r3, [pc, #256]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800917a:	4a3f      	ldr	r2, [pc, #252]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800917c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009180:	6593      	str	r3, [r2, #88]	; 0x58
 8009182:	4b3d      	ldr	r3, [pc, #244]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800918a:	60bb      	str	r3, [r7, #8]
 800918c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800918e:	2301      	movs	r3, #1
 8009190:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009192:	4b3a      	ldr	r3, [pc, #232]	; (800927c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4a39      	ldr	r2, [pc, #228]	; (800927c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800919c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800919e:	f7fb ff0b 	bl	8004fb8 <HAL_GetTick>
 80091a2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80091a4:	e009      	b.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80091a6:	f7fb ff07 	bl	8004fb8 <HAL_GetTick>
 80091aa:	4602      	mov	r2, r0
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	1ad3      	subs	r3, r2, r3
 80091b0:	2b02      	cmp	r3, #2
 80091b2:	d902      	bls.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80091b4:	2303      	movs	r3, #3
 80091b6:	74fb      	strb	r3, [r7, #19]
        break;
 80091b8:	e005      	b.n	80091c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80091ba:	4b30      	ldr	r3, [pc, #192]	; (800927c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d0ef      	beq.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80091c6:	7cfb      	ldrb	r3, [r7, #19]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d159      	bne.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80091cc:	4b2a      	ldr	r3, [pc, #168]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80091ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091d6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d01e      	beq.n	800921c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091e2:	697a      	ldr	r2, [r7, #20]
 80091e4:	429a      	cmp	r2, r3
 80091e6:	d019      	beq.n	800921c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80091e8:	4b23      	ldr	r3, [pc, #140]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80091ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80091f4:	4b20      	ldr	r3, [pc, #128]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80091f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091fa:	4a1f      	ldr	r2, [pc, #124]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80091fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009200:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009204:	4b1c      	ldr	r3, [pc, #112]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800920a:	4a1b      	ldr	r2, [pc, #108]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800920c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009210:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009214:	4a18      	ldr	r2, [pc, #96]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	f003 0301 	and.w	r3, r3, #1
 8009222:	2b00      	cmp	r3, #0
 8009224:	d016      	beq.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009226:	f7fb fec7 	bl	8004fb8 <HAL_GetTick>
 800922a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800922c:	e00b      	b.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800922e:	f7fb fec3 	bl	8004fb8 <HAL_GetTick>
 8009232:	4602      	mov	r2, r0
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	1ad3      	subs	r3, r2, r3
 8009238:	f241 3288 	movw	r2, #5000	; 0x1388
 800923c:	4293      	cmp	r3, r2
 800923e:	d902      	bls.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8009240:	2303      	movs	r3, #3
 8009242:	74fb      	strb	r3, [r7, #19]
            break;
 8009244:	e006      	b.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009246:	4b0c      	ldr	r3, [pc, #48]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800924c:	f003 0302 	and.w	r3, r3, #2
 8009250:	2b00      	cmp	r3, #0
 8009252:	d0ec      	beq.n	800922e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009254:	7cfb      	ldrb	r3, [r7, #19]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d10b      	bne.n	8009272 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800925a:	4b07      	ldr	r3, [pc, #28]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800925c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009260:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009268:	4903      	ldr	r1, [pc, #12]	; (8009278 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800926a:	4313      	orrs	r3, r2
 800926c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009270:	e008      	b.n	8009284 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009272:	7cfb      	ldrb	r3, [r7, #19]
 8009274:	74bb      	strb	r3, [r7, #18]
 8009276:	e005      	b.n	8009284 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009278:	40021000 	.word	0x40021000
 800927c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009280:	7cfb      	ldrb	r3, [r7, #19]
 8009282:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009284:	7c7b      	ldrb	r3, [r7, #17]
 8009286:	2b01      	cmp	r3, #1
 8009288:	d105      	bne.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800928a:	4ba6      	ldr	r3, [pc, #664]	; (8009524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800928c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800928e:	4aa5      	ldr	r2, [pc, #660]	; (8009524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009290:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009294:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f003 0301 	and.w	r3, r3, #1
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d00a      	beq.n	80092b8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80092a2:	4ba0      	ldr	r3, [pc, #640]	; (8009524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80092a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092a8:	f023 0203 	bic.w	r2, r3, #3
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	685b      	ldr	r3, [r3, #4]
 80092b0:	499c      	ldr	r1, [pc, #624]	; (8009524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80092b2:	4313      	orrs	r3, r2
 80092b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f003 0302 	and.w	r3, r3, #2
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d00a      	beq.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80092c4:	4b97      	ldr	r3, [pc, #604]	; (8009524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80092c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092ca:	f023 020c 	bic.w	r2, r3, #12
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	689b      	ldr	r3, [r3, #8]
 80092d2:	4994      	ldr	r1, [pc, #592]	; (8009524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80092d4:	4313      	orrs	r3, r2
 80092d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f003 0304 	and.w	r3, r3, #4
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d00a      	beq.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80092e6:	4b8f      	ldr	r3, [pc, #572]	; (8009524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80092e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	68db      	ldr	r3, [r3, #12]
 80092f4:	498b      	ldr	r1, [pc, #556]	; (8009524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80092f6:	4313      	orrs	r3, r2
 80092f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f003 0308 	and.w	r3, r3, #8
 8009304:	2b00      	cmp	r3, #0
 8009306:	d00a      	beq.n	800931e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009308:	4b86      	ldr	r3, [pc, #536]	; (8009524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800930a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800930e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	691b      	ldr	r3, [r3, #16]
 8009316:	4983      	ldr	r1, [pc, #524]	; (8009524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009318:	4313      	orrs	r3, r2
 800931a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f003 0320 	and.w	r3, r3, #32
 8009326:	2b00      	cmp	r3, #0
 8009328:	d00a      	beq.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800932a:	4b7e      	ldr	r3, [pc, #504]	; (8009524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800932c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009330:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	695b      	ldr	r3, [r3, #20]
 8009338:	497a      	ldr	r1, [pc, #488]	; (8009524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800933a:	4313      	orrs	r3, r2
 800933c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009348:	2b00      	cmp	r3, #0
 800934a:	d00a      	beq.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800934c:	4b75      	ldr	r3, [pc, #468]	; (8009524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800934e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009352:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	699b      	ldr	r3, [r3, #24]
 800935a:	4972      	ldr	r1, [pc, #456]	; (8009524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800935c:	4313      	orrs	r3, r2
 800935e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800936a:	2b00      	cmp	r3, #0
 800936c:	d00a      	beq.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800936e:	4b6d      	ldr	r3, [pc, #436]	; (8009524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009374:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	69db      	ldr	r3, [r3, #28]
 800937c:	4969      	ldr	r1, [pc, #420]	; (8009524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800937e:	4313      	orrs	r3, r2
 8009380:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800938c:	2b00      	cmp	r3, #0
 800938e:	d00a      	beq.n	80093a6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009390:	4b64      	ldr	r3, [pc, #400]	; (8009524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009396:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6a1b      	ldr	r3, [r3, #32]
 800939e:	4961      	ldr	r1, [pc, #388]	; (8009524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80093a0:	4313      	orrs	r3, r2
 80093a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d00a      	beq.n	80093c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80093b2:	4b5c      	ldr	r3, [pc, #368]	; (8009524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80093b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093c0:	4958      	ldr	r1, [pc, #352]	; (8009524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80093c2:	4313      	orrs	r3, r2
 80093c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d015      	beq.n	8009400 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80093d4:	4b53      	ldr	r3, [pc, #332]	; (8009524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80093d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093e2:	4950      	ldr	r1, [pc, #320]	; (8009524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80093e4:	4313      	orrs	r3, r2
 80093e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80093f2:	d105      	bne.n	8009400 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80093f4:	4b4b      	ldr	r3, [pc, #300]	; (8009524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80093f6:	68db      	ldr	r3, [r3, #12]
 80093f8:	4a4a      	ldr	r2, [pc, #296]	; (8009524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80093fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80093fe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009408:	2b00      	cmp	r3, #0
 800940a:	d015      	beq.n	8009438 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800940c:	4b45      	ldr	r3, [pc, #276]	; (8009524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800940e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009412:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800941a:	4942      	ldr	r1, [pc, #264]	; (8009524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800941c:	4313      	orrs	r3, r2
 800941e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009426:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800942a:	d105      	bne.n	8009438 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800942c:	4b3d      	ldr	r3, [pc, #244]	; (8009524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800942e:	68db      	ldr	r3, [r3, #12]
 8009430:	4a3c      	ldr	r2, [pc, #240]	; (8009524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009432:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009436:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009440:	2b00      	cmp	r3, #0
 8009442:	d015      	beq.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009444:	4b37      	ldr	r3, [pc, #220]	; (8009524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800944a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009452:	4934      	ldr	r1, [pc, #208]	; (8009524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009454:	4313      	orrs	r3, r2
 8009456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800945e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009462:	d105      	bne.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009464:	4b2f      	ldr	r3, [pc, #188]	; (8009524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009466:	68db      	ldr	r3, [r3, #12]
 8009468:	4a2e      	ldr	r2, [pc, #184]	; (8009524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800946a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800946e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009478:	2b00      	cmp	r3, #0
 800947a:	d015      	beq.n	80094a8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800947c:	4b29      	ldr	r3, [pc, #164]	; (8009524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800947e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009482:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800948a:	4926      	ldr	r1, [pc, #152]	; (8009524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800948c:	4313      	orrs	r3, r2
 800948e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009496:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800949a:	d105      	bne.n	80094a8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800949c:	4b21      	ldr	r3, [pc, #132]	; (8009524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800949e:	68db      	ldr	r3, [r3, #12]
 80094a0:	4a20      	ldr	r2, [pc, #128]	; (8009524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80094a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80094a6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d015      	beq.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80094b4:	4b1b      	ldr	r3, [pc, #108]	; (8009524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80094b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094c2:	4918      	ldr	r1, [pc, #96]	; (8009524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80094c4:	4313      	orrs	r3, r2
 80094c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80094d2:	d105      	bne.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80094d4:	4b13      	ldr	r3, [pc, #76]	; (8009524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80094d6:	68db      	ldr	r3, [r3, #12]
 80094d8:	4a12      	ldr	r2, [pc, #72]	; (8009524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80094da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80094de:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d015      	beq.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80094ec:	4b0d      	ldr	r3, [pc, #52]	; (8009524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80094ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094fa:	490a      	ldr	r1, [pc, #40]	; (8009524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80094fc:	4313      	orrs	r3, r2
 80094fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009506:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800950a:	d105      	bne.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800950c:	4b05      	ldr	r3, [pc, #20]	; (8009524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800950e:	68db      	ldr	r3, [r3, #12]
 8009510:	4a04      	ldr	r2, [pc, #16]	; (8009524 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009512:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009516:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009518:	7cbb      	ldrb	r3, [r7, #18]
}
 800951a:	4618      	mov	r0, r3
 800951c:	3718      	adds	r7, #24
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}
 8009522:	bf00      	nop
 8009524:	40021000 	.word	0x40021000

08009528 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b084      	sub	sp, #16
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d101      	bne.n	800953a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009536:	2301      	movs	r3, #1
 8009538:	e09d      	b.n	8009676 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800953e:	2b00      	cmp	r3, #0
 8009540:	d108      	bne.n	8009554 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800954a:	d009      	beq.n	8009560 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2200      	movs	r2, #0
 8009550:	61da      	str	r2, [r3, #28]
 8009552:	e005      	b.n	8009560 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2200      	movs	r2, #0
 8009558:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2200      	movs	r2, #0
 800955e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2200      	movs	r2, #0
 8009564:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800956c:	b2db      	uxtb	r3, r3
 800956e:	2b00      	cmp	r3, #0
 8009570:	d106      	bne.n	8009580 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2200      	movs	r2, #0
 8009576:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f7fa ff14 	bl	80043a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2202      	movs	r2, #2
 8009584:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	681a      	ldr	r2, [r3, #0]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009596:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	68db      	ldr	r3, [r3, #12]
 800959c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80095a0:	d902      	bls.n	80095a8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80095a2:	2300      	movs	r3, #0
 80095a4:	60fb      	str	r3, [r7, #12]
 80095a6:	e002      	b.n	80095ae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80095a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80095ac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	68db      	ldr	r3, [r3, #12]
 80095b2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80095b6:	d007      	beq.n	80095c8 <HAL_SPI_Init+0xa0>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	68db      	ldr	r3, [r3, #12]
 80095bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80095c0:	d002      	beq.n	80095c8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2200      	movs	r2, #0
 80095c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	689b      	ldr	r3, [r3, #8]
 80095d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80095d8:	431a      	orrs	r2, r3
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	691b      	ldr	r3, [r3, #16]
 80095de:	f003 0302 	and.w	r3, r3, #2
 80095e2:	431a      	orrs	r2, r3
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	695b      	ldr	r3, [r3, #20]
 80095e8:	f003 0301 	and.w	r3, r3, #1
 80095ec:	431a      	orrs	r2, r3
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	699b      	ldr	r3, [r3, #24]
 80095f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80095f6:	431a      	orrs	r2, r3
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	69db      	ldr	r3, [r3, #28]
 80095fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009600:	431a      	orrs	r2, r3
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6a1b      	ldr	r3, [r3, #32]
 8009606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800960a:	ea42 0103 	orr.w	r1, r2, r3
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009612:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	430a      	orrs	r2, r1
 800961c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	699b      	ldr	r3, [r3, #24]
 8009622:	0c1b      	lsrs	r3, r3, #16
 8009624:	f003 0204 	and.w	r2, r3, #4
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800962c:	f003 0310 	and.w	r3, r3, #16
 8009630:	431a      	orrs	r2, r3
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009636:	f003 0308 	and.w	r3, r3, #8
 800963a:	431a      	orrs	r2, r3
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	68db      	ldr	r3, [r3, #12]
 8009640:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009644:	ea42 0103 	orr.w	r1, r2, r3
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	430a      	orrs	r2, r1
 8009654:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	69da      	ldr	r2, [r3, #28]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009664:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2200      	movs	r2, #0
 800966a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2201      	movs	r2, #1
 8009670:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009674:	2300      	movs	r3, #0
}
 8009676:	4618      	mov	r0, r3
 8009678:	3710      	adds	r7, #16
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}
	...

08009680 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b086      	sub	sp, #24
 8009684:	af00      	add	r7, sp, #0
 8009686:	60f8      	str	r0, [r7, #12]
 8009688:	60b9      	str	r1, [r7, #8]
 800968a:	607a      	str	r2, [r7, #4]
 800968c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800968e:	2300      	movs	r3, #0
 8009690:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009698:	2b01      	cmp	r3, #1
 800969a:	d101      	bne.n	80096a0 <HAL_SPI_TransmitReceive_DMA+0x20>
 800969c:	2302      	movs	r3, #2
 800969e:	e16c      	b.n	800997a <HAL_SPI_TransmitReceive_DMA+0x2fa>
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	2201      	movs	r2, #1
 80096a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80096ae:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	685b      	ldr	r3, [r3, #4]
 80096b4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80096b6:	7dbb      	ldrb	r3, [r7, #22]
 80096b8:	2b01      	cmp	r3, #1
 80096ba:	d00d      	beq.n	80096d8 <HAL_SPI_TransmitReceive_DMA+0x58>
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80096c2:	d106      	bne.n	80096d2 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	689b      	ldr	r3, [r3, #8]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d102      	bne.n	80096d2 <HAL_SPI_TransmitReceive_DMA+0x52>
 80096cc:	7dbb      	ldrb	r3, [r7, #22]
 80096ce:	2b04      	cmp	r3, #4
 80096d0:	d002      	beq.n	80096d8 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80096d2:	2302      	movs	r3, #2
 80096d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80096d6:	e14b      	b.n	8009970 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d005      	beq.n	80096ea <HAL_SPI_TransmitReceive_DMA+0x6a>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d002      	beq.n	80096ea <HAL_SPI_TransmitReceive_DMA+0x6a>
 80096e4:	887b      	ldrh	r3, [r7, #2]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d102      	bne.n	80096f0 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 80096ea:	2301      	movs	r3, #1
 80096ec:	75fb      	strb	r3, [r7, #23]
    goto error;
 80096ee:	e13f      	b.n	8009970 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80096f6:	b2db      	uxtb	r3, r3
 80096f8:	2b04      	cmp	r3, #4
 80096fa:	d003      	beq.n	8009704 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	2205      	movs	r2, #5
 8009700:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2200      	movs	r2, #0
 8009708:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	68ba      	ldr	r2, [r7, #8]
 800970e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	887a      	ldrh	r2, [r7, #2]
 8009714:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	887a      	ldrh	r2, [r7, #2]
 800971a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	687a      	ldr	r2, [r7, #4]
 8009720:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	887a      	ldrh	r2, [r7, #2]
 8009726:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	887a      	ldrh	r2, [r7, #2]
 800972e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	2200      	movs	r2, #0
 8009736:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	2200      	movs	r2, #0
 800973c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	685a      	ldr	r2, [r3, #4]
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800974c:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	68db      	ldr	r3, [r3, #12]
 8009752:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009756:	d908      	bls.n	800976a <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	685a      	ldr	r2, [r3, #4]
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009766:	605a      	str	r2, [r3, #4]
 8009768:	e06f      	b.n	800984a <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	685a      	ldr	r2, [r3, #4]
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009778:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800977e:	699b      	ldr	r3, [r3, #24]
 8009780:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009784:	d126      	bne.n	80097d4 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800978a:	f003 0301 	and.w	r3, r3, #1
 800978e:	2b00      	cmp	r3, #0
 8009790:	d10f      	bne.n	80097b2 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	685a      	ldr	r2, [r3, #4]
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80097a0:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097a6:	b29b      	uxth	r3, r3
 80097a8:	085b      	lsrs	r3, r3, #1
 80097aa:	b29a      	uxth	r2, r3
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80097b0:	e010      	b.n	80097d4 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	685a      	ldr	r2, [r3, #4]
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80097c0:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097c6:	b29b      	uxth	r3, r3
 80097c8:	085b      	lsrs	r3, r3, #1
 80097ca:	b29b      	uxth	r3, r3
 80097cc:	3301      	adds	r3, #1
 80097ce:	b29a      	uxth	r2, r3
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097d8:	699b      	ldr	r3, [r3, #24]
 80097da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097de:	d134      	bne.n	800984a <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	685a      	ldr	r2, [r3, #4]
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80097ee:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80097f6:	b29b      	uxth	r3, r3
 80097f8:	f003 0301 	and.w	r3, r3, #1
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d111      	bne.n	8009824 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	685a      	ldr	r2, [r3, #4]
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800980e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009816:	b29b      	uxth	r3, r3
 8009818:	085b      	lsrs	r3, r3, #1
 800981a:	b29a      	uxth	r2, r3
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8009822:	e012      	b.n	800984a <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	685a      	ldr	r2, [r3, #4]
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009832:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800983a:	b29b      	uxth	r3, r3
 800983c:	085b      	lsrs	r3, r3, #1
 800983e:	b29b      	uxth	r3, r3
 8009840:	3301      	adds	r3, #1
 8009842:	b29a      	uxth	r2, r3
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009850:	b2db      	uxtb	r3, r3
 8009852:	2b04      	cmp	r3, #4
 8009854:	d108      	bne.n	8009868 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800985a:	4a4a      	ldr	r2, [pc, #296]	; (8009984 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800985c:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009862:	4a49      	ldr	r2, [pc, #292]	; (8009988 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8009864:	62da      	str	r2, [r3, #44]	; 0x2c
 8009866:	e007      	b.n	8009878 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800986c:	4a47      	ldr	r2, [pc, #284]	; (800998c <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800986e:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009874:	4a46      	ldr	r2, [pc, #280]	; (8009990 <HAL_SPI_TransmitReceive_DMA+0x310>)
 8009876:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800987c:	4a45      	ldr	r2, [pc, #276]	; (8009994 <HAL_SPI_TransmitReceive_DMA+0x314>)
 800987e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009884:	2200      	movs	r2, #0
 8009886:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	330c      	adds	r3, #12
 8009892:	4619      	mov	r1, r3
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009898:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80098a0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80098a2:	f7fd fc1d 	bl	80070e0 <HAL_DMA_Start_IT>
 80098a6:	4603      	mov	r3, r0
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d00c      	beq.n	80098c6 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098b0:	f043 0210 	orr.w	r2, r3, #16
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80098b8:	2301      	movs	r3, #1
 80098ba:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	2201      	movs	r2, #1
 80098c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80098c4:	e054      	b.n	8009970 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	685a      	ldr	r2, [r3, #4]
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f042 0201 	orr.w	r2, r2, #1
 80098d4:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098da:	2200      	movs	r2, #0
 80098dc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098e2:	2200      	movs	r2, #0
 80098e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098ea:	2200      	movs	r2, #0
 80098ec:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098f2:	2200      	movs	r2, #0
 80098f4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098fe:	4619      	mov	r1, r3
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	330c      	adds	r3, #12
 8009906:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800990c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800990e:	f7fd fbe7 	bl	80070e0 <HAL_DMA_Start_IT>
 8009912:	4603      	mov	r3, r0
 8009914:	2b00      	cmp	r3, #0
 8009916:	d00c      	beq.n	8009932 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800991c:	f043 0210 	orr.w	r2, r3, #16
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8009924:	2301      	movs	r3, #1
 8009926:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	2201      	movs	r2, #1
 800992c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8009930:	e01e      	b.n	8009970 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800993c:	2b40      	cmp	r3, #64	; 0x40
 800993e:	d007      	beq.n	8009950 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800994e:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	685a      	ldr	r2, [r3, #4]
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f042 0220 	orr.w	r2, r2, #32
 800995e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	685a      	ldr	r2, [r3, #4]
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f042 0202 	orr.w	r2, r2, #2
 800996e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2200      	movs	r2, #0
 8009974:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009978:	7dfb      	ldrb	r3, [r7, #23]
}
 800997a:	4618      	mov	r0, r3
 800997c:	3718      	adds	r7, #24
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}
 8009982:	bf00      	nop
 8009984:	08009d09 	.word	0x08009d09
 8009988:	08009bd1 	.word	0x08009bd1
 800998c:	08009d25 	.word	0x08009d25
 8009990:	08009c79 	.word	0x08009c79
 8009994:	08009d41 	.word	0x08009d41

08009998 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b088      	sub	sp, #32
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	689b      	ldr	r3, [r3, #8]
 80099ae:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80099b0:	69bb      	ldr	r3, [r7, #24]
 80099b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d10e      	bne.n	80099d8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80099ba:	69bb      	ldr	r3, [r7, #24]
 80099bc:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d009      	beq.n	80099d8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80099c4:	69fb      	ldr	r3, [r7, #28]
 80099c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d004      	beq.n	80099d8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	4798      	blx	r3
    return;
 80099d6:	e0ce      	b.n	8009b76 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80099d8:	69bb      	ldr	r3, [r7, #24]
 80099da:	f003 0302 	and.w	r3, r3, #2
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d009      	beq.n	80099f6 <HAL_SPI_IRQHandler+0x5e>
 80099e2:	69fb      	ldr	r3, [r7, #28]
 80099e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d004      	beq.n	80099f6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	4798      	blx	r3
    return;
 80099f4:	e0bf      	b.n	8009b76 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80099f6:	69bb      	ldr	r3, [r7, #24]
 80099f8:	f003 0320 	and.w	r3, r3, #32
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d10a      	bne.n	8009a16 <HAL_SPI_IRQHandler+0x7e>
 8009a00:	69bb      	ldr	r3, [r7, #24]
 8009a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d105      	bne.n	8009a16 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009a0a:	69bb      	ldr	r3, [r7, #24]
 8009a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	f000 80b0 	beq.w	8009b76 <HAL_SPI_IRQHandler+0x1de>
 8009a16:	69fb      	ldr	r3, [r7, #28]
 8009a18:	f003 0320 	and.w	r3, r3, #32
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	f000 80aa 	beq.w	8009b76 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009a22:	69bb      	ldr	r3, [r7, #24]
 8009a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d023      	beq.n	8009a74 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	2b03      	cmp	r3, #3
 8009a36:	d011      	beq.n	8009a5c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a3c:	f043 0204 	orr.w	r2, r3, #4
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009a44:	2300      	movs	r3, #0
 8009a46:	617b      	str	r3, [r7, #20]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	68db      	ldr	r3, [r3, #12]
 8009a4e:	617b      	str	r3, [r7, #20]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	689b      	ldr	r3, [r3, #8]
 8009a56:	617b      	str	r3, [r7, #20]
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	e00b      	b.n	8009a74 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	613b      	str	r3, [r7, #16]
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	68db      	ldr	r3, [r3, #12]
 8009a66:	613b      	str	r3, [r7, #16]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	689b      	ldr	r3, [r3, #8]
 8009a6e:	613b      	str	r3, [r7, #16]
 8009a70:	693b      	ldr	r3, [r7, #16]
        return;
 8009a72:	e080      	b.n	8009b76 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009a74:	69bb      	ldr	r3, [r7, #24]
 8009a76:	f003 0320 	and.w	r3, r3, #32
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d014      	beq.n	8009aa8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a82:	f043 0201 	orr.w	r2, r3, #1
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	60fb      	str	r3, [r7, #12]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	689b      	ldr	r3, [r3, #8]
 8009a94:	60fb      	str	r3, [r7, #12]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009aa4:	601a      	str	r2, [r3, #0]
 8009aa6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009aa8:	69bb      	ldr	r3, [r7, #24]
 8009aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d00c      	beq.n	8009acc <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ab6:	f043 0208 	orr.w	r2, r3, #8
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009abe:	2300      	movs	r3, #0
 8009ac0:	60bb      	str	r3, [r7, #8]
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	689b      	ldr	r3, [r3, #8]
 8009ac8:	60bb      	str	r3, [r7, #8]
 8009aca:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d04f      	beq.n	8009b74 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	685a      	ldr	r2, [r3, #4]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009ae2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009aec:	69fb      	ldr	r3, [r7, #28]
 8009aee:	f003 0302 	and.w	r3, r3, #2
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d104      	bne.n	8009b00 <HAL_SPI_IRQHandler+0x168>
 8009af6:	69fb      	ldr	r3, [r7, #28]
 8009af8:	f003 0301 	and.w	r3, r3, #1
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d034      	beq.n	8009b6a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	685a      	ldr	r2, [r3, #4]
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f022 0203 	bic.w	r2, r2, #3
 8009b0e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d011      	beq.n	8009b3c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b1c:	4a17      	ldr	r2, [pc, #92]	; (8009b7c <HAL_SPI_IRQHandler+0x1e4>)
 8009b1e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b24:	4618      	mov	r0, r3
 8009b26:	f7fd fbaf 	bl	8007288 <HAL_DMA_Abort_IT>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d005      	beq.n	8009b3c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b34:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d016      	beq.n	8009b72 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b48:	4a0c      	ldr	r2, [pc, #48]	; (8009b7c <HAL_SPI_IRQHandler+0x1e4>)
 8009b4a:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b50:	4618      	mov	r0, r3
 8009b52:	f7fd fb99 	bl	8007288 <HAL_DMA_Abort_IT>
 8009b56:	4603      	mov	r3, r0
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d00a      	beq.n	8009b72 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b60:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8009b68:	e003      	b.n	8009b72 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f000 f826 	bl	8009bbc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009b70:	e000      	b.n	8009b74 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8009b72:	bf00      	nop
    return;
 8009b74:	bf00      	nop
  }
}
 8009b76:	3720      	adds	r7, #32
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}
 8009b7c:	08009d81 	.word	0x08009d81

08009b80 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b083      	sub	sp, #12
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8009b88:	bf00      	nop
 8009b8a:	370c      	adds	r7, #12
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b92:	4770      	bx	lr

08009b94 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b083      	sub	sp, #12
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8009b9c:	bf00      	nop
 8009b9e:	370c      	adds	r7, #12
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba6:	4770      	bx	lr

08009ba8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b083      	sub	sp, #12
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8009bb0:	bf00      	nop
 8009bb2:	370c      	adds	r7, #12
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bba:	4770      	bx	lr

08009bbc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b083      	sub	sp, #12
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009bc4:	bf00      	nop
 8009bc6:	370c      	adds	r7, #12
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bce:	4770      	bx	lr

08009bd0 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b084      	sub	sp, #16
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bdc:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009bde:	f7fb f9eb 	bl	8004fb8 <HAL_GetTick>
 8009be2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f003 0320 	and.w	r3, r3, #32
 8009bee:	2b20      	cmp	r3, #32
 8009bf0:	d03c      	beq.n	8009c6c <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	685a      	ldr	r2, [r3, #4]
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f022 0220 	bic.w	r2, r2, #32
 8009c00:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	689b      	ldr	r3, [r3, #8]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d10d      	bne.n	8009c26 <SPI_DMAReceiveCplt+0x56>
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	685b      	ldr	r3, [r3, #4]
 8009c0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c12:	d108      	bne.n	8009c26 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	685a      	ldr	r2, [r3, #4]
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f022 0203 	bic.w	r2, r2, #3
 8009c22:	605a      	str	r2, [r3, #4]
 8009c24:	e007      	b.n	8009c36 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	685a      	ldr	r2, [r3, #4]
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f022 0201 	bic.w	r2, r2, #1
 8009c34:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009c36:	68ba      	ldr	r2, [r7, #8]
 8009c38:	2164      	movs	r1, #100	; 0x64
 8009c3a:	68f8      	ldr	r0, [r7, #12]
 8009c3c:	f000 f9d4 	bl	8009fe8 <SPI_EndRxTransaction>
 8009c40:	4603      	mov	r3, r0
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d002      	beq.n	8009c4c <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2220      	movs	r2, #32
 8009c4a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	2201      	movs	r2, #1
 8009c58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d003      	beq.n	8009c6c <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009c64:	68f8      	ldr	r0, [r7, #12]
 8009c66:	f7ff ffa9 	bl	8009bbc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009c6a:	e002      	b.n	8009c72 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8009c6c:	68f8      	ldr	r0, [r7, #12]
 8009c6e:	f7ff ff87 	bl	8009b80 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009c72:	3710      	adds	r7, #16
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}

08009c78 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b084      	sub	sp, #16
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c84:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009c86:	f7fb f997 	bl	8004fb8 <HAL_GetTick>
 8009c8a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f003 0320 	and.w	r3, r3, #32
 8009c96:	2b20      	cmp	r3, #32
 8009c98:	d030      	beq.n	8009cfc <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	685a      	ldr	r2, [r3, #4]
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f022 0220 	bic.w	r2, r2, #32
 8009ca8:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009caa:	68ba      	ldr	r2, [r7, #8]
 8009cac:	2164      	movs	r1, #100	; 0x64
 8009cae:	68f8      	ldr	r0, [r7, #12]
 8009cb0:	f000 f9f2 	bl	800a098 <SPI_EndRxTxTransaction>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d005      	beq.n	8009cc6 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cbe:	f043 0220 	orr.w	r2, r3, #32
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	685a      	ldr	r2, [r3, #4]
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f022 0203 	bic.w	r2, r2, #3
 8009cd4:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d003      	beq.n	8009cfc <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009cf4:	68f8      	ldr	r0, [r7, #12]
 8009cf6:	f7ff ff61 	bl	8009bbc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009cfa:	e002      	b.n	8009d02 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8009cfc:	68f8      	ldr	r0, [r7, #12]
 8009cfe:	f7f8 fdf9 	bl	80028f4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009d02:	3710      	adds	r7, #16
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}

08009d08 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b084      	sub	sp, #16
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d14:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8009d16:	68f8      	ldr	r0, [r7, #12]
 8009d18:	f7ff ff3c 	bl	8009b94 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009d1c:	bf00      	nop
 8009d1e:	3710      	adds	r7, #16
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}

08009d24 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b084      	sub	sp, #16
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d30:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8009d32:	68f8      	ldr	r0, [r7, #12]
 8009d34:	f7ff ff38 	bl	8009ba8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009d38:	bf00      	nop
 8009d3a:	3710      	adds	r7, #16
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}

08009d40 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b084      	sub	sp, #16
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d4c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	685a      	ldr	r2, [r3, #4]
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f022 0203 	bic.w	r2, r2, #3
 8009d5c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d62:	f043 0210 	orr.w	r2, r3, #16
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	2201      	movs	r2, #1
 8009d6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009d72:	68f8      	ldr	r0, [r7, #12]
 8009d74:	f7ff ff22 	bl	8009bbc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009d78:	bf00      	nop
 8009d7a:	3710      	adds	r7, #16
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}

08009d80 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b084      	sub	sp, #16
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d8c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	2200      	movs	r2, #0
 8009d92:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009d9c:	68f8      	ldr	r0, [r7, #12]
 8009d9e:	f7ff ff0d 	bl	8009bbc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009da2:	bf00      	nop
 8009da4:	3710      	adds	r7, #16
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}
	...

08009dac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b088      	sub	sp, #32
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	60f8      	str	r0, [r7, #12]
 8009db4:	60b9      	str	r1, [r7, #8]
 8009db6:	603b      	str	r3, [r7, #0]
 8009db8:	4613      	mov	r3, r2
 8009dba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009dbc:	f7fb f8fc 	bl	8004fb8 <HAL_GetTick>
 8009dc0:	4602      	mov	r2, r0
 8009dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dc4:	1a9b      	subs	r3, r3, r2
 8009dc6:	683a      	ldr	r2, [r7, #0]
 8009dc8:	4413      	add	r3, r2
 8009dca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009dcc:	f7fb f8f4 	bl	8004fb8 <HAL_GetTick>
 8009dd0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009dd2:	4b39      	ldr	r3, [pc, #228]	; (8009eb8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	015b      	lsls	r3, r3, #5
 8009dd8:	0d1b      	lsrs	r3, r3, #20
 8009dda:	69fa      	ldr	r2, [r7, #28]
 8009ddc:	fb02 f303 	mul.w	r3, r2, r3
 8009de0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009de2:	e054      	b.n	8009e8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dea:	d050      	beq.n	8009e8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009dec:	f7fb f8e4 	bl	8004fb8 <HAL_GetTick>
 8009df0:	4602      	mov	r2, r0
 8009df2:	69bb      	ldr	r3, [r7, #24]
 8009df4:	1ad3      	subs	r3, r2, r3
 8009df6:	69fa      	ldr	r2, [r7, #28]
 8009df8:	429a      	cmp	r2, r3
 8009dfa:	d902      	bls.n	8009e02 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009dfc:	69fb      	ldr	r3, [r7, #28]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d13d      	bne.n	8009e7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	685a      	ldr	r2, [r3, #4]
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009e10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009e1a:	d111      	bne.n	8009e40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	689b      	ldr	r3, [r3, #8]
 8009e20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e24:	d004      	beq.n	8009e30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	689b      	ldr	r3, [r3, #8]
 8009e2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e2e:	d107      	bne.n	8009e40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	681a      	ldr	r2, [r3, #0]
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e48:	d10f      	bne.n	8009e6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	681a      	ldr	r2, [r3, #0]
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009e58:	601a      	str	r2, [r3, #0]
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	681a      	ldr	r2, [r3, #0]
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009e68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	2201      	movs	r2, #1
 8009e6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	2200      	movs	r2, #0
 8009e76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009e7a:	2303      	movs	r3, #3
 8009e7c:	e017      	b.n	8009eae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009e7e:	697b      	ldr	r3, [r7, #20]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d101      	bne.n	8009e88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009e84:	2300      	movs	r3, #0
 8009e86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	3b01      	subs	r3, #1
 8009e8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	689a      	ldr	r2, [r3, #8]
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	4013      	ands	r3, r2
 8009e98:	68ba      	ldr	r2, [r7, #8]
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	bf0c      	ite	eq
 8009e9e:	2301      	moveq	r3, #1
 8009ea0:	2300      	movne	r3, #0
 8009ea2:	b2db      	uxtb	r3, r3
 8009ea4:	461a      	mov	r2, r3
 8009ea6:	79fb      	ldrb	r3, [r7, #7]
 8009ea8:	429a      	cmp	r2, r3
 8009eaa:	d19b      	bne.n	8009de4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009eac:	2300      	movs	r3, #0
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3720      	adds	r7, #32
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}
 8009eb6:	bf00      	nop
 8009eb8:	2000000c 	.word	0x2000000c

08009ebc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b08a      	sub	sp, #40	; 0x28
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	60f8      	str	r0, [r7, #12]
 8009ec4:	60b9      	str	r1, [r7, #8]
 8009ec6:	607a      	str	r2, [r7, #4]
 8009ec8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009ece:	f7fb f873 	bl	8004fb8 <HAL_GetTick>
 8009ed2:	4602      	mov	r2, r0
 8009ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed6:	1a9b      	subs	r3, r3, r2
 8009ed8:	683a      	ldr	r2, [r7, #0]
 8009eda:	4413      	add	r3, r2
 8009edc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8009ede:	f7fb f86b 	bl	8004fb8 <HAL_GetTick>
 8009ee2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	330c      	adds	r3, #12
 8009eea:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009eec:	4b3d      	ldr	r3, [pc, #244]	; (8009fe4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009eee:	681a      	ldr	r2, [r3, #0]
 8009ef0:	4613      	mov	r3, r2
 8009ef2:	009b      	lsls	r3, r3, #2
 8009ef4:	4413      	add	r3, r2
 8009ef6:	00da      	lsls	r2, r3, #3
 8009ef8:	1ad3      	subs	r3, r2, r3
 8009efa:	0d1b      	lsrs	r3, r3, #20
 8009efc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009efe:	fb02 f303 	mul.w	r3, r2, r3
 8009f02:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009f04:	e060      	b.n	8009fc8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009f06:	68bb      	ldr	r3, [r7, #8]
 8009f08:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009f0c:	d107      	bne.n	8009f1e <SPI_WaitFifoStateUntilTimeout+0x62>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d104      	bne.n	8009f1e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009f14:	69fb      	ldr	r3, [r7, #28]
 8009f16:	781b      	ldrb	r3, [r3, #0]
 8009f18:	b2db      	uxtb	r3, r3
 8009f1a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009f1c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f24:	d050      	beq.n	8009fc8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009f26:	f7fb f847 	bl	8004fb8 <HAL_GetTick>
 8009f2a:	4602      	mov	r2, r0
 8009f2c:	6a3b      	ldr	r3, [r7, #32]
 8009f2e:	1ad3      	subs	r3, r2, r3
 8009f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f32:	429a      	cmp	r2, r3
 8009f34:	d902      	bls.n	8009f3c <SPI_WaitFifoStateUntilTimeout+0x80>
 8009f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d13d      	bne.n	8009fb8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	685a      	ldr	r2, [r3, #4]
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009f4a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	685b      	ldr	r3, [r3, #4]
 8009f50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f54:	d111      	bne.n	8009f7a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	689b      	ldr	r3, [r3, #8]
 8009f5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f5e:	d004      	beq.n	8009f6a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	689b      	ldr	r3, [r3, #8]
 8009f64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f68:	d107      	bne.n	8009f7a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	681a      	ldr	r2, [r3, #0]
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f78:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f82:	d10f      	bne.n	8009fa4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	681a      	ldr	r2, [r3, #0]
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009f92:	601a      	str	r2, [r3, #0]
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	681a      	ldr	r2, [r3, #0]
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009fa2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009fb4:	2303      	movs	r3, #3
 8009fb6:	e010      	b.n	8009fda <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009fb8:	69bb      	ldr	r3, [r7, #24]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d101      	bne.n	8009fc2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8009fc2:	69bb      	ldr	r3, [r7, #24]
 8009fc4:	3b01      	subs	r3, #1
 8009fc6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	689a      	ldr	r2, [r3, #8]
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	4013      	ands	r3, r2
 8009fd2:	687a      	ldr	r2, [r7, #4]
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d196      	bne.n	8009f06 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009fd8:	2300      	movs	r3, #0
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3728      	adds	r7, #40	; 0x28
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}
 8009fe2:	bf00      	nop
 8009fe4:	2000000c 	.word	0x2000000c

08009fe8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b086      	sub	sp, #24
 8009fec:	af02      	add	r7, sp, #8
 8009fee:	60f8      	str	r0, [r7, #12]
 8009ff0:	60b9      	str	r1, [r7, #8]
 8009ff2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	685b      	ldr	r3, [r3, #4]
 8009ff8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009ffc:	d111      	bne.n	800a022 <SPI_EndRxTransaction+0x3a>
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	689b      	ldr	r3, [r3, #8]
 800a002:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a006:	d004      	beq.n	800a012 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	689b      	ldr	r3, [r3, #8]
 800a00c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a010:	d107      	bne.n	800a022 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	681a      	ldr	r2, [r3, #0]
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a020:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	9300      	str	r3, [sp, #0]
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	2200      	movs	r2, #0
 800a02a:	2180      	movs	r1, #128	; 0x80
 800a02c:	68f8      	ldr	r0, [r7, #12]
 800a02e:	f7ff febd 	bl	8009dac <SPI_WaitFlagStateUntilTimeout>
 800a032:	4603      	mov	r3, r0
 800a034:	2b00      	cmp	r3, #0
 800a036:	d007      	beq.n	800a048 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a03c:	f043 0220 	orr.w	r2, r3, #32
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a044:	2303      	movs	r3, #3
 800a046:	e023      	b.n	800a090 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	685b      	ldr	r3, [r3, #4]
 800a04c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a050:	d11d      	bne.n	800a08e <SPI_EndRxTransaction+0xa6>
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	689b      	ldr	r3, [r3, #8]
 800a056:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a05a:	d004      	beq.n	800a066 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	689b      	ldr	r3, [r3, #8]
 800a060:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a064:	d113      	bne.n	800a08e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	9300      	str	r3, [sp, #0]
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	2200      	movs	r2, #0
 800a06e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a072:	68f8      	ldr	r0, [r7, #12]
 800a074:	f7ff ff22 	bl	8009ebc <SPI_WaitFifoStateUntilTimeout>
 800a078:	4603      	mov	r3, r0
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d007      	beq.n	800a08e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a082:	f043 0220 	orr.w	r2, r3, #32
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800a08a:	2303      	movs	r3, #3
 800a08c:	e000      	b.n	800a090 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800a08e:	2300      	movs	r3, #0
}
 800a090:	4618      	mov	r0, r3
 800a092:	3710      	adds	r7, #16
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}

0800a098 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b086      	sub	sp, #24
 800a09c:	af02      	add	r7, sp, #8
 800a09e:	60f8      	str	r0, [r7, #12]
 800a0a0:	60b9      	str	r1, [r7, #8]
 800a0a2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	9300      	str	r3, [sp, #0]
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800a0b0:	68f8      	ldr	r0, [r7, #12]
 800a0b2:	f7ff ff03 	bl	8009ebc <SPI_WaitFifoStateUntilTimeout>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d007      	beq.n	800a0cc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0c0:	f043 0220 	orr.w	r2, r3, #32
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a0c8:	2303      	movs	r3, #3
 800a0ca:	e027      	b.n	800a11c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	9300      	str	r3, [sp, #0]
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	2180      	movs	r1, #128	; 0x80
 800a0d6:	68f8      	ldr	r0, [r7, #12]
 800a0d8:	f7ff fe68 	bl	8009dac <SPI_WaitFlagStateUntilTimeout>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d007      	beq.n	800a0f2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0e6:	f043 0220 	orr.w	r2, r3, #32
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a0ee:	2303      	movs	r3, #3
 800a0f0:	e014      	b.n	800a11c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	9300      	str	r3, [sp, #0]
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a0fe:	68f8      	ldr	r0, [r7, #12]
 800a100:	f7ff fedc 	bl	8009ebc <SPI_WaitFifoStateUntilTimeout>
 800a104:	4603      	mov	r3, r0
 800a106:	2b00      	cmp	r3, #0
 800a108:	d007      	beq.n	800a11a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a10e:	f043 0220 	orr.w	r2, r3, #32
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a116:	2303      	movs	r3, #3
 800a118:	e000      	b.n	800a11c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a11a:	2300      	movs	r3, #0
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3710      	adds	r7, #16
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}

0800a124 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b082      	sub	sp, #8
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d101      	bne.n	800a136 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a132:	2301      	movs	r3, #1
 800a134:	e049      	b.n	800a1ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a13c:	b2db      	uxtb	r3, r3
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d106      	bne.n	800a150 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2200      	movs	r2, #0
 800a146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f7fa fd2a 	bl	8004ba4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2202      	movs	r2, #2
 800a154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681a      	ldr	r2, [r3, #0]
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	3304      	adds	r3, #4
 800a160:	4619      	mov	r1, r3
 800a162:	4610      	mov	r0, r2
 800a164:	f000 fdb8 	bl	800acd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2201      	movs	r2, #1
 800a16c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2201      	movs	r2, #1
 800a174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2201      	movs	r2, #1
 800a17c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2201      	movs	r2, #1
 800a184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2201      	movs	r2, #1
 800a18c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2201      	movs	r2, #1
 800a194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2201      	movs	r2, #1
 800a19c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2201      	movs	r2, #1
 800a1a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2201      	movs	r2, #1
 800a1b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a1c8:	2300      	movs	r3, #0
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3708      	adds	r7, #8
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}
	...

0800a1d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b085      	sub	sp, #20
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1e2:	b2db      	uxtb	r3, r3
 800a1e4:	2b01      	cmp	r3, #1
 800a1e6:	d001      	beq.n	800a1ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	e04a      	b.n	800a282 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2202      	movs	r2, #2
 800a1f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	68da      	ldr	r2, [r3, #12]
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f042 0201 	orr.w	r2, r2, #1
 800a202:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	4a21      	ldr	r2, [pc, #132]	; (800a290 <HAL_TIM_Base_Start_IT+0xbc>)
 800a20a:	4293      	cmp	r3, r2
 800a20c:	d018      	beq.n	800a240 <HAL_TIM_Base_Start_IT+0x6c>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a216:	d013      	beq.n	800a240 <HAL_TIM_Base_Start_IT+0x6c>
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	4a1d      	ldr	r2, [pc, #116]	; (800a294 <HAL_TIM_Base_Start_IT+0xc0>)
 800a21e:	4293      	cmp	r3, r2
 800a220:	d00e      	beq.n	800a240 <HAL_TIM_Base_Start_IT+0x6c>
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	4a1c      	ldr	r2, [pc, #112]	; (800a298 <HAL_TIM_Base_Start_IT+0xc4>)
 800a228:	4293      	cmp	r3, r2
 800a22a:	d009      	beq.n	800a240 <HAL_TIM_Base_Start_IT+0x6c>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	4a1a      	ldr	r2, [pc, #104]	; (800a29c <HAL_TIM_Base_Start_IT+0xc8>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d004      	beq.n	800a240 <HAL_TIM_Base_Start_IT+0x6c>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4a19      	ldr	r2, [pc, #100]	; (800a2a0 <HAL_TIM_Base_Start_IT+0xcc>)
 800a23c:	4293      	cmp	r3, r2
 800a23e:	d115      	bne.n	800a26c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	689a      	ldr	r2, [r3, #8]
 800a246:	4b17      	ldr	r3, [pc, #92]	; (800a2a4 <HAL_TIM_Base_Start_IT+0xd0>)
 800a248:	4013      	ands	r3, r2
 800a24a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	2b06      	cmp	r3, #6
 800a250:	d015      	beq.n	800a27e <HAL_TIM_Base_Start_IT+0xaa>
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a258:	d011      	beq.n	800a27e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	681a      	ldr	r2, [r3, #0]
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f042 0201 	orr.w	r2, r2, #1
 800a268:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a26a:	e008      	b.n	800a27e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	681a      	ldr	r2, [r3, #0]
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f042 0201 	orr.w	r2, r2, #1
 800a27a:	601a      	str	r2, [r3, #0]
 800a27c:	e000      	b.n	800a280 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a27e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a280:	2300      	movs	r3, #0
}
 800a282:	4618      	mov	r0, r3
 800a284:	3714      	adds	r7, #20
 800a286:	46bd      	mov	sp, r7
 800a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28c:	4770      	bx	lr
 800a28e:	bf00      	nop
 800a290:	40012c00 	.word	0x40012c00
 800a294:	40000400 	.word	0x40000400
 800a298:	40000800 	.word	0x40000800
 800a29c:	40013400 	.word	0x40013400
 800a2a0:	40014000 	.word	0x40014000
 800a2a4:	00010007 	.word	0x00010007

0800a2a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b082      	sub	sp, #8
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d101      	bne.n	800a2ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	e049      	b.n	800a34e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2c0:	b2db      	uxtb	r3, r3
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d106      	bne.n	800a2d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f000 f841 	bl	800a356 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2202      	movs	r2, #2
 800a2d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681a      	ldr	r2, [r3, #0]
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	3304      	adds	r3, #4
 800a2e4:	4619      	mov	r1, r3
 800a2e6:	4610      	mov	r0, r2
 800a2e8:	f000 fcf6 	bl	800acd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2201      	movs	r2, #1
 800a300:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2201      	movs	r2, #1
 800a308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2201      	movs	r2, #1
 800a310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2201      	movs	r2, #1
 800a318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2201      	movs	r2, #1
 800a320:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2201      	movs	r2, #1
 800a328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2201      	movs	r2, #1
 800a330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2201      	movs	r2, #1
 800a338:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2201      	movs	r2, #1
 800a340:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2201      	movs	r2, #1
 800a348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a34c:	2300      	movs	r3, #0
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3708      	adds	r7, #8
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}

0800a356 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a356:	b480      	push	{r7}
 800a358:	b083      	sub	sp, #12
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a35e:	bf00      	nop
 800a360:	370c      	adds	r7, #12
 800a362:	46bd      	mov	sp, r7
 800a364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a368:	4770      	bx	lr
	...

0800a36c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b084      	sub	sp, #16
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
 800a374:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d109      	bne.n	800a390 <HAL_TIM_PWM_Start+0x24>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a382:	b2db      	uxtb	r3, r3
 800a384:	2b01      	cmp	r3, #1
 800a386:	bf14      	ite	ne
 800a388:	2301      	movne	r3, #1
 800a38a:	2300      	moveq	r3, #0
 800a38c:	b2db      	uxtb	r3, r3
 800a38e:	e03c      	b.n	800a40a <HAL_TIM_PWM_Start+0x9e>
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	2b04      	cmp	r3, #4
 800a394:	d109      	bne.n	800a3aa <HAL_TIM_PWM_Start+0x3e>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a39c:	b2db      	uxtb	r3, r3
 800a39e:	2b01      	cmp	r3, #1
 800a3a0:	bf14      	ite	ne
 800a3a2:	2301      	movne	r3, #1
 800a3a4:	2300      	moveq	r3, #0
 800a3a6:	b2db      	uxtb	r3, r3
 800a3a8:	e02f      	b.n	800a40a <HAL_TIM_PWM_Start+0x9e>
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	2b08      	cmp	r3, #8
 800a3ae:	d109      	bne.n	800a3c4 <HAL_TIM_PWM_Start+0x58>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a3b6:	b2db      	uxtb	r3, r3
 800a3b8:	2b01      	cmp	r3, #1
 800a3ba:	bf14      	ite	ne
 800a3bc:	2301      	movne	r3, #1
 800a3be:	2300      	moveq	r3, #0
 800a3c0:	b2db      	uxtb	r3, r3
 800a3c2:	e022      	b.n	800a40a <HAL_TIM_PWM_Start+0x9e>
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	2b0c      	cmp	r3, #12
 800a3c8:	d109      	bne.n	800a3de <HAL_TIM_PWM_Start+0x72>
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a3d0:	b2db      	uxtb	r3, r3
 800a3d2:	2b01      	cmp	r3, #1
 800a3d4:	bf14      	ite	ne
 800a3d6:	2301      	movne	r3, #1
 800a3d8:	2300      	moveq	r3, #0
 800a3da:	b2db      	uxtb	r3, r3
 800a3dc:	e015      	b.n	800a40a <HAL_TIM_PWM_Start+0x9e>
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	2b10      	cmp	r3, #16
 800a3e2:	d109      	bne.n	800a3f8 <HAL_TIM_PWM_Start+0x8c>
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a3ea:	b2db      	uxtb	r3, r3
 800a3ec:	2b01      	cmp	r3, #1
 800a3ee:	bf14      	ite	ne
 800a3f0:	2301      	movne	r3, #1
 800a3f2:	2300      	moveq	r3, #0
 800a3f4:	b2db      	uxtb	r3, r3
 800a3f6:	e008      	b.n	800a40a <HAL_TIM_PWM_Start+0x9e>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a3fe:	b2db      	uxtb	r3, r3
 800a400:	2b01      	cmp	r3, #1
 800a402:	bf14      	ite	ne
 800a404:	2301      	movne	r3, #1
 800a406:	2300      	moveq	r3, #0
 800a408:	b2db      	uxtb	r3, r3
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d001      	beq.n	800a412 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a40e:	2301      	movs	r3, #1
 800a410:	e097      	b.n	800a542 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d104      	bne.n	800a422 <HAL_TIM_PWM_Start+0xb6>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2202      	movs	r2, #2
 800a41c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a420:	e023      	b.n	800a46a <HAL_TIM_PWM_Start+0xfe>
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	2b04      	cmp	r3, #4
 800a426:	d104      	bne.n	800a432 <HAL_TIM_PWM_Start+0xc6>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2202      	movs	r2, #2
 800a42c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a430:	e01b      	b.n	800a46a <HAL_TIM_PWM_Start+0xfe>
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	2b08      	cmp	r3, #8
 800a436:	d104      	bne.n	800a442 <HAL_TIM_PWM_Start+0xd6>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2202      	movs	r2, #2
 800a43c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a440:	e013      	b.n	800a46a <HAL_TIM_PWM_Start+0xfe>
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	2b0c      	cmp	r3, #12
 800a446:	d104      	bne.n	800a452 <HAL_TIM_PWM_Start+0xe6>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2202      	movs	r2, #2
 800a44c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a450:	e00b      	b.n	800a46a <HAL_TIM_PWM_Start+0xfe>
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	2b10      	cmp	r3, #16
 800a456:	d104      	bne.n	800a462 <HAL_TIM_PWM_Start+0xf6>
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2202      	movs	r2, #2
 800a45c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a460:	e003      	b.n	800a46a <HAL_TIM_PWM_Start+0xfe>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2202      	movs	r2, #2
 800a466:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	2201      	movs	r2, #1
 800a470:	6839      	ldr	r1, [r7, #0]
 800a472:	4618      	mov	r0, r3
 800a474:	f001 f852 	bl	800b51c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4a33      	ldr	r2, [pc, #204]	; (800a54c <HAL_TIM_PWM_Start+0x1e0>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d013      	beq.n	800a4aa <HAL_TIM_PWM_Start+0x13e>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	4a32      	ldr	r2, [pc, #200]	; (800a550 <HAL_TIM_PWM_Start+0x1e4>)
 800a488:	4293      	cmp	r3, r2
 800a48a:	d00e      	beq.n	800a4aa <HAL_TIM_PWM_Start+0x13e>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	4a30      	ldr	r2, [pc, #192]	; (800a554 <HAL_TIM_PWM_Start+0x1e8>)
 800a492:	4293      	cmp	r3, r2
 800a494:	d009      	beq.n	800a4aa <HAL_TIM_PWM_Start+0x13e>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	4a2f      	ldr	r2, [pc, #188]	; (800a558 <HAL_TIM_PWM_Start+0x1ec>)
 800a49c:	4293      	cmp	r3, r2
 800a49e:	d004      	beq.n	800a4aa <HAL_TIM_PWM_Start+0x13e>
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	4a2d      	ldr	r2, [pc, #180]	; (800a55c <HAL_TIM_PWM_Start+0x1f0>)
 800a4a6:	4293      	cmp	r3, r2
 800a4a8:	d101      	bne.n	800a4ae <HAL_TIM_PWM_Start+0x142>
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	e000      	b.n	800a4b0 <HAL_TIM_PWM_Start+0x144>
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d007      	beq.n	800a4c4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a4c2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	4a20      	ldr	r2, [pc, #128]	; (800a54c <HAL_TIM_PWM_Start+0x1e0>)
 800a4ca:	4293      	cmp	r3, r2
 800a4cc:	d018      	beq.n	800a500 <HAL_TIM_PWM_Start+0x194>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4d6:	d013      	beq.n	800a500 <HAL_TIM_PWM_Start+0x194>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	4a20      	ldr	r2, [pc, #128]	; (800a560 <HAL_TIM_PWM_Start+0x1f4>)
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d00e      	beq.n	800a500 <HAL_TIM_PWM_Start+0x194>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	4a1f      	ldr	r2, [pc, #124]	; (800a564 <HAL_TIM_PWM_Start+0x1f8>)
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d009      	beq.n	800a500 <HAL_TIM_PWM_Start+0x194>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	4a17      	ldr	r2, [pc, #92]	; (800a550 <HAL_TIM_PWM_Start+0x1e4>)
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d004      	beq.n	800a500 <HAL_TIM_PWM_Start+0x194>
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	4a16      	ldr	r2, [pc, #88]	; (800a554 <HAL_TIM_PWM_Start+0x1e8>)
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	d115      	bne.n	800a52c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	689a      	ldr	r2, [r3, #8]
 800a506:	4b18      	ldr	r3, [pc, #96]	; (800a568 <HAL_TIM_PWM_Start+0x1fc>)
 800a508:	4013      	ands	r3, r2
 800a50a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	2b06      	cmp	r3, #6
 800a510:	d015      	beq.n	800a53e <HAL_TIM_PWM_Start+0x1d2>
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a518:	d011      	beq.n	800a53e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	681a      	ldr	r2, [r3, #0]
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f042 0201 	orr.w	r2, r2, #1
 800a528:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a52a:	e008      	b.n	800a53e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	681a      	ldr	r2, [r3, #0]
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f042 0201 	orr.w	r2, r2, #1
 800a53a:	601a      	str	r2, [r3, #0]
 800a53c:	e000      	b.n	800a540 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a53e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a540:	2300      	movs	r3, #0
}
 800a542:	4618      	mov	r0, r3
 800a544:	3710      	adds	r7, #16
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}
 800a54a:	bf00      	nop
 800a54c:	40012c00 	.word	0x40012c00
 800a550:	40013400 	.word	0x40013400
 800a554:	40014000 	.word	0x40014000
 800a558:	40014400 	.word	0x40014400
 800a55c:	40014800 	.word	0x40014800
 800a560:	40000400 	.word	0x40000400
 800a564:	40000800 	.word	0x40000800
 800a568:	00010007 	.word	0x00010007

0800a56c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b082      	sub	sp, #8
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	691b      	ldr	r3, [r3, #16]
 800a57a:	f003 0302 	and.w	r3, r3, #2
 800a57e:	2b02      	cmp	r3, #2
 800a580:	d122      	bne.n	800a5c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	68db      	ldr	r3, [r3, #12]
 800a588:	f003 0302 	and.w	r3, r3, #2
 800a58c:	2b02      	cmp	r3, #2
 800a58e:	d11b      	bne.n	800a5c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f06f 0202 	mvn.w	r2, #2
 800a598:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2201      	movs	r2, #1
 800a59e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	699b      	ldr	r3, [r3, #24]
 800a5a6:	f003 0303 	and.w	r3, r3, #3
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d003      	beq.n	800a5b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f000 fb74 	bl	800ac9c <HAL_TIM_IC_CaptureCallback>
 800a5b4:	e005      	b.n	800a5c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f000 fb66 	bl	800ac88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f000 fb77 	bl	800acb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	691b      	ldr	r3, [r3, #16]
 800a5ce:	f003 0304 	and.w	r3, r3, #4
 800a5d2:	2b04      	cmp	r3, #4
 800a5d4:	d122      	bne.n	800a61c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	68db      	ldr	r3, [r3, #12]
 800a5dc:	f003 0304 	and.w	r3, r3, #4
 800a5e0:	2b04      	cmp	r3, #4
 800a5e2:	d11b      	bne.n	800a61c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f06f 0204 	mvn.w	r2, #4
 800a5ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2202      	movs	r2, #2
 800a5f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	699b      	ldr	r3, [r3, #24]
 800a5fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d003      	beq.n	800a60a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f000 fb4a 	bl	800ac9c <HAL_TIM_IC_CaptureCallback>
 800a608:	e005      	b.n	800a616 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f000 fb3c 	bl	800ac88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f000 fb4d 	bl	800acb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2200      	movs	r2, #0
 800a61a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	691b      	ldr	r3, [r3, #16]
 800a622:	f003 0308 	and.w	r3, r3, #8
 800a626:	2b08      	cmp	r3, #8
 800a628:	d122      	bne.n	800a670 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	68db      	ldr	r3, [r3, #12]
 800a630:	f003 0308 	and.w	r3, r3, #8
 800a634:	2b08      	cmp	r3, #8
 800a636:	d11b      	bne.n	800a670 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f06f 0208 	mvn.w	r2, #8
 800a640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2204      	movs	r2, #4
 800a646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	69db      	ldr	r3, [r3, #28]
 800a64e:	f003 0303 	and.w	r3, r3, #3
 800a652:	2b00      	cmp	r3, #0
 800a654:	d003      	beq.n	800a65e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f000 fb20 	bl	800ac9c <HAL_TIM_IC_CaptureCallback>
 800a65c:	e005      	b.n	800a66a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f000 fb12 	bl	800ac88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f000 fb23 	bl	800acb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2200      	movs	r2, #0
 800a66e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	691b      	ldr	r3, [r3, #16]
 800a676:	f003 0310 	and.w	r3, r3, #16
 800a67a:	2b10      	cmp	r3, #16
 800a67c:	d122      	bne.n	800a6c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	68db      	ldr	r3, [r3, #12]
 800a684:	f003 0310 	and.w	r3, r3, #16
 800a688:	2b10      	cmp	r3, #16
 800a68a:	d11b      	bne.n	800a6c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f06f 0210 	mvn.w	r2, #16
 800a694:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2208      	movs	r2, #8
 800a69a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	69db      	ldr	r3, [r3, #28]
 800a6a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d003      	beq.n	800a6b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f000 faf6 	bl	800ac9c <HAL_TIM_IC_CaptureCallback>
 800a6b0:	e005      	b.n	800a6be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f000 fae8 	bl	800ac88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f000 faf9 	bl	800acb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	691b      	ldr	r3, [r3, #16]
 800a6ca:	f003 0301 	and.w	r3, r3, #1
 800a6ce:	2b01      	cmp	r3, #1
 800a6d0:	d10e      	bne.n	800a6f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	68db      	ldr	r3, [r3, #12]
 800a6d8:	f003 0301 	and.w	r3, r3, #1
 800a6dc:	2b01      	cmp	r3, #1
 800a6de:	d107      	bne.n	800a6f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f06f 0201 	mvn.w	r2, #1
 800a6e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f7f8 fa06 	bl	8002afc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	691b      	ldr	r3, [r3, #16]
 800a6f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6fa:	2b80      	cmp	r3, #128	; 0x80
 800a6fc:	d10e      	bne.n	800a71c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	68db      	ldr	r3, [r3, #12]
 800a704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a708:	2b80      	cmp	r3, #128	; 0x80
 800a70a:	d107      	bne.n	800a71c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f001 f906 	bl	800b928 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	691b      	ldr	r3, [r3, #16]
 800a722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a72a:	d10e      	bne.n	800a74a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	68db      	ldr	r3, [r3, #12]
 800a732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a736:	2b80      	cmp	r3, #128	; 0x80
 800a738:	d107      	bne.n	800a74a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a742:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f001 f8f9 	bl	800b93c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	691b      	ldr	r3, [r3, #16]
 800a750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a754:	2b40      	cmp	r3, #64	; 0x40
 800a756:	d10e      	bne.n	800a776 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	68db      	ldr	r3, [r3, #12]
 800a75e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a762:	2b40      	cmp	r3, #64	; 0x40
 800a764:	d107      	bne.n	800a776 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a76e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f000 faa7 	bl	800acc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	691b      	ldr	r3, [r3, #16]
 800a77c:	f003 0320 	and.w	r3, r3, #32
 800a780:	2b20      	cmp	r3, #32
 800a782:	d10e      	bne.n	800a7a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	68db      	ldr	r3, [r3, #12]
 800a78a:	f003 0320 	and.w	r3, r3, #32
 800a78e:	2b20      	cmp	r3, #32
 800a790:	d107      	bne.n	800a7a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f06f 0220 	mvn.w	r2, #32
 800a79a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f001 f8b9 	bl	800b914 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	691b      	ldr	r3, [r3, #16]
 800a7a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a7ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7b0:	d10f      	bne.n	800a7d2 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	68db      	ldr	r3, [r3, #12]
 800a7b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a7bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7c0:	d107      	bne.n	800a7d2 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800a7ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f001 f8bf 	bl	800b950 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	691b      	ldr	r3, [r3, #16]
 800a7d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a7dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a7e0:	d10f      	bne.n	800a802 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	68db      	ldr	r3, [r3, #12]
 800a7e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a7ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a7f0:	d107      	bne.n	800a802 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800a7fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f001 f8b1 	bl	800b964 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	691b      	ldr	r3, [r3, #16]
 800a808:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a80c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a810:	d10f      	bne.n	800a832 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	68db      	ldr	r3, [r3, #12]
 800a818:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a81c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a820:	d107      	bne.n	800a832 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800a82a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f001 f8a3 	bl	800b978 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	691b      	ldr	r3, [r3, #16]
 800a838:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a83c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a840:	d10f      	bne.n	800a862 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	68db      	ldr	r3, [r3, #12]
 800a848:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a84c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a850:	d107      	bne.n	800a862 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800a85a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f001 f895 	bl	800b98c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a862:	bf00      	nop
 800a864:	3708      	adds	r7, #8
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}
	...

0800a86c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b086      	sub	sp, #24
 800a870:	af00      	add	r7, sp, #0
 800a872:	60f8      	str	r0, [r7, #12]
 800a874:	60b9      	str	r1, [r7, #8]
 800a876:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a878:	2300      	movs	r3, #0
 800a87a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a882:	2b01      	cmp	r3, #1
 800a884:	d101      	bne.n	800a88a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a886:	2302      	movs	r3, #2
 800a888:	e0ff      	b.n	800aa8a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	2201      	movs	r2, #1
 800a88e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2b14      	cmp	r3, #20
 800a896:	f200 80f0 	bhi.w	800aa7a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a89a:	a201      	add	r2, pc, #4	; (adr r2, 800a8a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a89c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8a0:	0800a8f5 	.word	0x0800a8f5
 800a8a4:	0800aa7b 	.word	0x0800aa7b
 800a8a8:	0800aa7b 	.word	0x0800aa7b
 800a8ac:	0800aa7b 	.word	0x0800aa7b
 800a8b0:	0800a935 	.word	0x0800a935
 800a8b4:	0800aa7b 	.word	0x0800aa7b
 800a8b8:	0800aa7b 	.word	0x0800aa7b
 800a8bc:	0800aa7b 	.word	0x0800aa7b
 800a8c0:	0800a977 	.word	0x0800a977
 800a8c4:	0800aa7b 	.word	0x0800aa7b
 800a8c8:	0800aa7b 	.word	0x0800aa7b
 800a8cc:	0800aa7b 	.word	0x0800aa7b
 800a8d0:	0800a9b7 	.word	0x0800a9b7
 800a8d4:	0800aa7b 	.word	0x0800aa7b
 800a8d8:	0800aa7b 	.word	0x0800aa7b
 800a8dc:	0800aa7b 	.word	0x0800aa7b
 800a8e0:	0800a9f9 	.word	0x0800a9f9
 800a8e4:	0800aa7b 	.word	0x0800aa7b
 800a8e8:	0800aa7b 	.word	0x0800aa7b
 800a8ec:	0800aa7b 	.word	0x0800aa7b
 800a8f0:	0800aa39 	.word	0x0800aa39
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	68b9      	ldr	r1, [r7, #8]
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f000 fa7c 	bl	800adf8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	699a      	ldr	r2, [r3, #24]
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f042 0208 	orr.w	r2, r2, #8
 800a90e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	699a      	ldr	r2, [r3, #24]
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f022 0204 	bic.w	r2, r2, #4
 800a91e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	6999      	ldr	r1, [r3, #24]
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	691a      	ldr	r2, [r3, #16]
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	430a      	orrs	r2, r1
 800a930:	619a      	str	r2, [r3, #24]
      break;
 800a932:	e0a5      	b.n	800aa80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	68b9      	ldr	r1, [r7, #8]
 800a93a:	4618      	mov	r0, r3
 800a93c:	f000 faec 	bl	800af18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	699a      	ldr	r2, [r3, #24]
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a94e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	699a      	ldr	r2, [r3, #24]
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a95e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	6999      	ldr	r1, [r3, #24]
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	691b      	ldr	r3, [r3, #16]
 800a96a:	021a      	lsls	r2, r3, #8
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	430a      	orrs	r2, r1
 800a972:	619a      	str	r2, [r3, #24]
      break;
 800a974:	e084      	b.n	800aa80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	68b9      	ldr	r1, [r7, #8]
 800a97c:	4618      	mov	r0, r3
 800a97e:	f000 fb55 	bl	800b02c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	69da      	ldr	r2, [r3, #28]
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f042 0208 	orr.w	r2, r2, #8
 800a990:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	69da      	ldr	r2, [r3, #28]
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f022 0204 	bic.w	r2, r2, #4
 800a9a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	69d9      	ldr	r1, [r3, #28]
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	691a      	ldr	r2, [r3, #16]
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	430a      	orrs	r2, r1
 800a9b2:	61da      	str	r2, [r3, #28]
      break;
 800a9b4:	e064      	b.n	800aa80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	68b9      	ldr	r1, [r7, #8]
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f000 fbbd 	bl	800b13c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	69da      	ldr	r2, [r3, #28]
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a9d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	69da      	ldr	r2, [r3, #28]
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a9e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	69d9      	ldr	r1, [r3, #28]
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	691b      	ldr	r3, [r3, #16]
 800a9ec:	021a      	lsls	r2, r3, #8
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	430a      	orrs	r2, r1
 800a9f4:	61da      	str	r2, [r3, #28]
      break;
 800a9f6:	e043      	b.n	800aa80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	68b9      	ldr	r1, [r7, #8]
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f000 fc26 	bl	800b250 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f042 0208 	orr.w	r2, r2, #8
 800aa12:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f022 0204 	bic.w	r2, r2, #4
 800aa22:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	691a      	ldr	r2, [r3, #16]
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	430a      	orrs	r2, r1
 800aa34:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800aa36:	e023      	b.n	800aa80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	68b9      	ldr	r1, [r7, #8]
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f000 fc6a 	bl	800b318 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aa52:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa62:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	691b      	ldr	r3, [r3, #16]
 800aa6e:	021a      	lsls	r2, r3, #8
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	430a      	orrs	r2, r1
 800aa76:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800aa78:	e002      	b.n	800aa80 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	75fb      	strb	r3, [r7, #23]
      break;
 800aa7e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	2200      	movs	r2, #0
 800aa84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800aa88:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	3718      	adds	r7, #24
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}
 800aa92:	bf00      	nop

0800aa94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b084      	sub	sp, #16
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
 800aa9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aaa8:	2b01      	cmp	r3, #1
 800aaaa:	d101      	bne.n	800aab0 <HAL_TIM_ConfigClockSource+0x1c>
 800aaac:	2302      	movs	r3, #2
 800aaae:	e0de      	b.n	800ac6e <HAL_TIM_ConfigClockSource+0x1da>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2201      	movs	r2, #1
 800aab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2202      	movs	r2, #2
 800aabc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	689b      	ldr	r3, [r3, #8]
 800aac6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800aace:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800aad2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aada:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	68ba      	ldr	r2, [r7, #8]
 800aae2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	4a63      	ldr	r2, [pc, #396]	; (800ac78 <HAL_TIM_ConfigClockSource+0x1e4>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	f000 80a9 	beq.w	800ac42 <HAL_TIM_ConfigClockSource+0x1ae>
 800aaf0:	4a61      	ldr	r2, [pc, #388]	; (800ac78 <HAL_TIM_ConfigClockSource+0x1e4>)
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	f200 80ae 	bhi.w	800ac54 <HAL_TIM_ConfigClockSource+0x1c0>
 800aaf8:	4a60      	ldr	r2, [pc, #384]	; (800ac7c <HAL_TIM_ConfigClockSource+0x1e8>)
 800aafa:	4293      	cmp	r3, r2
 800aafc:	f000 80a1 	beq.w	800ac42 <HAL_TIM_ConfigClockSource+0x1ae>
 800ab00:	4a5e      	ldr	r2, [pc, #376]	; (800ac7c <HAL_TIM_ConfigClockSource+0x1e8>)
 800ab02:	4293      	cmp	r3, r2
 800ab04:	f200 80a6 	bhi.w	800ac54 <HAL_TIM_ConfigClockSource+0x1c0>
 800ab08:	4a5d      	ldr	r2, [pc, #372]	; (800ac80 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ab0a:	4293      	cmp	r3, r2
 800ab0c:	f000 8099 	beq.w	800ac42 <HAL_TIM_ConfigClockSource+0x1ae>
 800ab10:	4a5b      	ldr	r2, [pc, #364]	; (800ac80 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ab12:	4293      	cmp	r3, r2
 800ab14:	f200 809e 	bhi.w	800ac54 <HAL_TIM_ConfigClockSource+0x1c0>
 800ab18:	4a5a      	ldr	r2, [pc, #360]	; (800ac84 <HAL_TIM_ConfigClockSource+0x1f0>)
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	f000 8091 	beq.w	800ac42 <HAL_TIM_ConfigClockSource+0x1ae>
 800ab20:	4a58      	ldr	r2, [pc, #352]	; (800ac84 <HAL_TIM_ConfigClockSource+0x1f0>)
 800ab22:	4293      	cmp	r3, r2
 800ab24:	f200 8096 	bhi.w	800ac54 <HAL_TIM_ConfigClockSource+0x1c0>
 800ab28:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ab2c:	f000 8089 	beq.w	800ac42 <HAL_TIM_ConfigClockSource+0x1ae>
 800ab30:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ab34:	f200 808e 	bhi.w	800ac54 <HAL_TIM_ConfigClockSource+0x1c0>
 800ab38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab3c:	d03e      	beq.n	800abbc <HAL_TIM_ConfigClockSource+0x128>
 800ab3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab42:	f200 8087 	bhi.w	800ac54 <HAL_TIM_ConfigClockSource+0x1c0>
 800ab46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab4a:	f000 8086 	beq.w	800ac5a <HAL_TIM_ConfigClockSource+0x1c6>
 800ab4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab52:	d87f      	bhi.n	800ac54 <HAL_TIM_ConfigClockSource+0x1c0>
 800ab54:	2b70      	cmp	r3, #112	; 0x70
 800ab56:	d01a      	beq.n	800ab8e <HAL_TIM_ConfigClockSource+0xfa>
 800ab58:	2b70      	cmp	r3, #112	; 0x70
 800ab5a:	d87b      	bhi.n	800ac54 <HAL_TIM_ConfigClockSource+0x1c0>
 800ab5c:	2b60      	cmp	r3, #96	; 0x60
 800ab5e:	d050      	beq.n	800ac02 <HAL_TIM_ConfigClockSource+0x16e>
 800ab60:	2b60      	cmp	r3, #96	; 0x60
 800ab62:	d877      	bhi.n	800ac54 <HAL_TIM_ConfigClockSource+0x1c0>
 800ab64:	2b50      	cmp	r3, #80	; 0x50
 800ab66:	d03c      	beq.n	800abe2 <HAL_TIM_ConfigClockSource+0x14e>
 800ab68:	2b50      	cmp	r3, #80	; 0x50
 800ab6a:	d873      	bhi.n	800ac54 <HAL_TIM_ConfigClockSource+0x1c0>
 800ab6c:	2b40      	cmp	r3, #64	; 0x40
 800ab6e:	d058      	beq.n	800ac22 <HAL_TIM_ConfigClockSource+0x18e>
 800ab70:	2b40      	cmp	r3, #64	; 0x40
 800ab72:	d86f      	bhi.n	800ac54 <HAL_TIM_ConfigClockSource+0x1c0>
 800ab74:	2b30      	cmp	r3, #48	; 0x30
 800ab76:	d064      	beq.n	800ac42 <HAL_TIM_ConfigClockSource+0x1ae>
 800ab78:	2b30      	cmp	r3, #48	; 0x30
 800ab7a:	d86b      	bhi.n	800ac54 <HAL_TIM_ConfigClockSource+0x1c0>
 800ab7c:	2b20      	cmp	r3, #32
 800ab7e:	d060      	beq.n	800ac42 <HAL_TIM_ConfigClockSource+0x1ae>
 800ab80:	2b20      	cmp	r3, #32
 800ab82:	d867      	bhi.n	800ac54 <HAL_TIM_ConfigClockSource+0x1c0>
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d05c      	beq.n	800ac42 <HAL_TIM_ConfigClockSource+0x1ae>
 800ab88:	2b10      	cmp	r3, #16
 800ab8a:	d05a      	beq.n	800ac42 <HAL_TIM_ConfigClockSource+0x1ae>
 800ab8c:	e062      	b.n	800ac54 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6818      	ldr	r0, [r3, #0]
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	6899      	ldr	r1, [r3, #8]
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	685a      	ldr	r2, [r3, #4]
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	68db      	ldr	r3, [r3, #12]
 800ab9e:	f000 fc9d 	bl	800b4dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	689b      	ldr	r3, [r3, #8]
 800aba8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800abb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	68ba      	ldr	r2, [r7, #8]
 800abb8:	609a      	str	r2, [r3, #8]
      break;
 800abba:	e04f      	b.n	800ac5c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6818      	ldr	r0, [r3, #0]
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	6899      	ldr	r1, [r3, #8]
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	685a      	ldr	r2, [r3, #4]
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	68db      	ldr	r3, [r3, #12]
 800abcc:	f000 fc86 	bl	800b4dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	689a      	ldr	r2, [r3, #8]
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800abde:	609a      	str	r2, [r3, #8]
      break;
 800abe0:	e03c      	b.n	800ac5c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6818      	ldr	r0, [r3, #0]
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	6859      	ldr	r1, [r3, #4]
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	68db      	ldr	r3, [r3, #12]
 800abee:	461a      	mov	r2, r3
 800abf0:	f000 fbf8 	bl	800b3e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	2150      	movs	r1, #80	; 0x50
 800abfa:	4618      	mov	r0, r3
 800abfc:	f000 fc51 	bl	800b4a2 <TIM_ITRx_SetConfig>
      break;
 800ac00:	e02c      	b.n	800ac5c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6818      	ldr	r0, [r3, #0]
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	6859      	ldr	r1, [r3, #4]
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	68db      	ldr	r3, [r3, #12]
 800ac0e:	461a      	mov	r2, r3
 800ac10:	f000 fc17 	bl	800b442 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	2160      	movs	r1, #96	; 0x60
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f000 fc41 	bl	800b4a2 <TIM_ITRx_SetConfig>
      break;
 800ac20:	e01c      	b.n	800ac5c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6818      	ldr	r0, [r3, #0]
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	6859      	ldr	r1, [r3, #4]
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	68db      	ldr	r3, [r3, #12]
 800ac2e:	461a      	mov	r2, r3
 800ac30:	f000 fbd8 	bl	800b3e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	2140      	movs	r1, #64	; 0x40
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f000 fc31 	bl	800b4a2 <TIM_ITRx_SetConfig>
      break;
 800ac40:	e00c      	b.n	800ac5c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681a      	ldr	r2, [r3, #0]
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	4619      	mov	r1, r3
 800ac4c:	4610      	mov	r0, r2
 800ac4e:	f000 fc28 	bl	800b4a2 <TIM_ITRx_SetConfig>
      break;
 800ac52:	e003      	b.n	800ac5c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800ac54:	2301      	movs	r3, #1
 800ac56:	73fb      	strb	r3, [r7, #15]
      break;
 800ac58:	e000      	b.n	800ac5c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800ac5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2201      	movs	r2, #1
 800ac60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2200      	movs	r2, #0
 800ac68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ac6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	3710      	adds	r7, #16
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}
 800ac76:	bf00      	nop
 800ac78:	00100070 	.word	0x00100070
 800ac7c:	00100040 	.word	0x00100040
 800ac80:	00100030 	.word	0x00100030
 800ac84:	00100020 	.word	0x00100020

0800ac88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b083      	sub	sp, #12
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ac90:	bf00      	nop
 800ac92:	370c      	adds	r7, #12
 800ac94:	46bd      	mov	sp, r7
 800ac96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9a:	4770      	bx	lr

0800ac9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b083      	sub	sp, #12
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aca4:	bf00      	nop
 800aca6:	370c      	adds	r7, #12
 800aca8:	46bd      	mov	sp, r7
 800acaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acae:	4770      	bx	lr

0800acb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800acb0:	b480      	push	{r7}
 800acb2:	b083      	sub	sp, #12
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800acb8:	bf00      	nop
 800acba:	370c      	adds	r7, #12
 800acbc:	46bd      	mov	sp, r7
 800acbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc2:	4770      	bx	lr

0800acc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800acc4:	b480      	push	{r7}
 800acc6:	b083      	sub	sp, #12
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800accc:	bf00      	nop
 800acce:	370c      	adds	r7, #12
 800acd0:	46bd      	mov	sp, r7
 800acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd6:	4770      	bx	lr

0800acd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800acd8:	b480      	push	{r7}
 800acda:	b085      	sub	sp, #20
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	4a3c      	ldr	r2, [pc, #240]	; (800addc <TIM_Base_SetConfig+0x104>)
 800acec:	4293      	cmp	r3, r2
 800acee:	d00f      	beq.n	800ad10 <TIM_Base_SetConfig+0x38>
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acf6:	d00b      	beq.n	800ad10 <TIM_Base_SetConfig+0x38>
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	4a39      	ldr	r2, [pc, #228]	; (800ade0 <TIM_Base_SetConfig+0x108>)
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d007      	beq.n	800ad10 <TIM_Base_SetConfig+0x38>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	4a38      	ldr	r2, [pc, #224]	; (800ade4 <TIM_Base_SetConfig+0x10c>)
 800ad04:	4293      	cmp	r3, r2
 800ad06:	d003      	beq.n	800ad10 <TIM_Base_SetConfig+0x38>
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	4a37      	ldr	r2, [pc, #220]	; (800ade8 <TIM_Base_SetConfig+0x110>)
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d108      	bne.n	800ad22 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	685b      	ldr	r3, [r3, #4]
 800ad1c:	68fa      	ldr	r2, [r7, #12]
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	4a2d      	ldr	r2, [pc, #180]	; (800addc <TIM_Base_SetConfig+0x104>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d01b      	beq.n	800ad62 <TIM_Base_SetConfig+0x8a>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad30:	d017      	beq.n	800ad62 <TIM_Base_SetConfig+0x8a>
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	4a2a      	ldr	r2, [pc, #168]	; (800ade0 <TIM_Base_SetConfig+0x108>)
 800ad36:	4293      	cmp	r3, r2
 800ad38:	d013      	beq.n	800ad62 <TIM_Base_SetConfig+0x8a>
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	4a29      	ldr	r2, [pc, #164]	; (800ade4 <TIM_Base_SetConfig+0x10c>)
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	d00f      	beq.n	800ad62 <TIM_Base_SetConfig+0x8a>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	4a28      	ldr	r2, [pc, #160]	; (800ade8 <TIM_Base_SetConfig+0x110>)
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d00b      	beq.n	800ad62 <TIM_Base_SetConfig+0x8a>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	4a27      	ldr	r2, [pc, #156]	; (800adec <TIM_Base_SetConfig+0x114>)
 800ad4e:	4293      	cmp	r3, r2
 800ad50:	d007      	beq.n	800ad62 <TIM_Base_SetConfig+0x8a>
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	4a26      	ldr	r2, [pc, #152]	; (800adf0 <TIM_Base_SetConfig+0x118>)
 800ad56:	4293      	cmp	r3, r2
 800ad58:	d003      	beq.n	800ad62 <TIM_Base_SetConfig+0x8a>
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	4a25      	ldr	r2, [pc, #148]	; (800adf4 <TIM_Base_SetConfig+0x11c>)
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	d108      	bne.n	800ad74 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	68db      	ldr	r3, [r3, #12]
 800ad6e:	68fa      	ldr	r2, [r7, #12]
 800ad70:	4313      	orrs	r3, r2
 800ad72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	695b      	ldr	r3, [r3, #20]
 800ad7e:	4313      	orrs	r3, r2
 800ad80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	68fa      	ldr	r2, [r7, #12]
 800ad86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	689a      	ldr	r2, [r3, #8]
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	681a      	ldr	r2, [r3, #0]
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	4a10      	ldr	r2, [pc, #64]	; (800addc <TIM_Base_SetConfig+0x104>)
 800ad9c:	4293      	cmp	r3, r2
 800ad9e:	d00f      	beq.n	800adc0 <TIM_Base_SetConfig+0xe8>
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	4a11      	ldr	r2, [pc, #68]	; (800ade8 <TIM_Base_SetConfig+0x110>)
 800ada4:	4293      	cmp	r3, r2
 800ada6:	d00b      	beq.n	800adc0 <TIM_Base_SetConfig+0xe8>
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	4a10      	ldr	r2, [pc, #64]	; (800adec <TIM_Base_SetConfig+0x114>)
 800adac:	4293      	cmp	r3, r2
 800adae:	d007      	beq.n	800adc0 <TIM_Base_SetConfig+0xe8>
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	4a0f      	ldr	r2, [pc, #60]	; (800adf0 <TIM_Base_SetConfig+0x118>)
 800adb4:	4293      	cmp	r3, r2
 800adb6:	d003      	beq.n	800adc0 <TIM_Base_SetConfig+0xe8>
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	4a0e      	ldr	r2, [pc, #56]	; (800adf4 <TIM_Base_SetConfig+0x11c>)
 800adbc:	4293      	cmp	r3, r2
 800adbe:	d103      	bne.n	800adc8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	691a      	ldr	r2, [r3, #16]
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2201      	movs	r2, #1
 800adcc:	615a      	str	r2, [r3, #20]
}
 800adce:	bf00      	nop
 800add0:	3714      	adds	r7, #20
 800add2:	46bd      	mov	sp, r7
 800add4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add8:	4770      	bx	lr
 800adda:	bf00      	nop
 800addc:	40012c00 	.word	0x40012c00
 800ade0:	40000400 	.word	0x40000400
 800ade4:	40000800 	.word	0x40000800
 800ade8:	40013400 	.word	0x40013400
 800adec:	40014000 	.word	0x40014000
 800adf0:	40014400 	.word	0x40014400
 800adf4:	40014800 	.word	0x40014800

0800adf8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800adf8:	b480      	push	{r7}
 800adfa:	b087      	sub	sp, #28
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
 800ae00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6a1b      	ldr	r3, [r3, #32]
 800ae06:	f023 0201 	bic.w	r2, r3, #1
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6a1b      	ldr	r3, [r3, #32]
 800ae12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	685b      	ldr	r3, [r3, #4]
 800ae18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	699b      	ldr	r3, [r3, #24]
 800ae1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ae26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	f023 0303 	bic.w	r3, r3, #3
 800ae32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	68fa      	ldr	r2, [r7, #12]
 800ae3a:	4313      	orrs	r3, r2
 800ae3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ae3e:	697b      	ldr	r3, [r7, #20]
 800ae40:	f023 0302 	bic.w	r3, r3, #2
 800ae44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	689b      	ldr	r3, [r3, #8]
 800ae4a:	697a      	ldr	r2, [r7, #20]
 800ae4c:	4313      	orrs	r3, r2
 800ae4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	4a2c      	ldr	r2, [pc, #176]	; (800af04 <TIM_OC1_SetConfig+0x10c>)
 800ae54:	4293      	cmp	r3, r2
 800ae56:	d00f      	beq.n	800ae78 <TIM_OC1_SetConfig+0x80>
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	4a2b      	ldr	r2, [pc, #172]	; (800af08 <TIM_OC1_SetConfig+0x110>)
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	d00b      	beq.n	800ae78 <TIM_OC1_SetConfig+0x80>
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	4a2a      	ldr	r2, [pc, #168]	; (800af0c <TIM_OC1_SetConfig+0x114>)
 800ae64:	4293      	cmp	r3, r2
 800ae66:	d007      	beq.n	800ae78 <TIM_OC1_SetConfig+0x80>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	4a29      	ldr	r2, [pc, #164]	; (800af10 <TIM_OC1_SetConfig+0x118>)
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	d003      	beq.n	800ae78 <TIM_OC1_SetConfig+0x80>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	4a28      	ldr	r2, [pc, #160]	; (800af14 <TIM_OC1_SetConfig+0x11c>)
 800ae74:	4293      	cmp	r3, r2
 800ae76:	d10c      	bne.n	800ae92 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	f023 0308 	bic.w	r3, r3, #8
 800ae7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	68db      	ldr	r3, [r3, #12]
 800ae84:	697a      	ldr	r2, [r7, #20]
 800ae86:	4313      	orrs	r3, r2
 800ae88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	f023 0304 	bic.w	r3, r3, #4
 800ae90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	4a1b      	ldr	r2, [pc, #108]	; (800af04 <TIM_OC1_SetConfig+0x10c>)
 800ae96:	4293      	cmp	r3, r2
 800ae98:	d00f      	beq.n	800aeba <TIM_OC1_SetConfig+0xc2>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	4a1a      	ldr	r2, [pc, #104]	; (800af08 <TIM_OC1_SetConfig+0x110>)
 800ae9e:	4293      	cmp	r3, r2
 800aea0:	d00b      	beq.n	800aeba <TIM_OC1_SetConfig+0xc2>
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	4a19      	ldr	r2, [pc, #100]	; (800af0c <TIM_OC1_SetConfig+0x114>)
 800aea6:	4293      	cmp	r3, r2
 800aea8:	d007      	beq.n	800aeba <TIM_OC1_SetConfig+0xc2>
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	4a18      	ldr	r2, [pc, #96]	; (800af10 <TIM_OC1_SetConfig+0x118>)
 800aeae:	4293      	cmp	r3, r2
 800aeb0:	d003      	beq.n	800aeba <TIM_OC1_SetConfig+0xc2>
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	4a17      	ldr	r2, [pc, #92]	; (800af14 <TIM_OC1_SetConfig+0x11c>)
 800aeb6:	4293      	cmp	r3, r2
 800aeb8:	d111      	bne.n	800aede <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800aeba:	693b      	ldr	r3, [r7, #16]
 800aebc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aec0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aec2:	693b      	ldr	r3, [r7, #16]
 800aec4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aec8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	695b      	ldr	r3, [r3, #20]
 800aece:	693a      	ldr	r2, [r7, #16]
 800aed0:	4313      	orrs	r3, r2
 800aed2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	699b      	ldr	r3, [r3, #24]
 800aed8:	693a      	ldr	r2, [r7, #16]
 800aeda:	4313      	orrs	r3, r2
 800aedc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	693a      	ldr	r2, [r7, #16]
 800aee2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	68fa      	ldr	r2, [r7, #12]
 800aee8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	685a      	ldr	r2, [r3, #4]
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	697a      	ldr	r2, [r7, #20]
 800aef6:	621a      	str	r2, [r3, #32]
}
 800aef8:	bf00      	nop
 800aefa:	371c      	adds	r7, #28
 800aefc:	46bd      	mov	sp, r7
 800aefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af02:	4770      	bx	lr
 800af04:	40012c00 	.word	0x40012c00
 800af08:	40013400 	.word	0x40013400
 800af0c:	40014000 	.word	0x40014000
 800af10:	40014400 	.word	0x40014400
 800af14:	40014800 	.word	0x40014800

0800af18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800af18:	b480      	push	{r7}
 800af1a:	b087      	sub	sp, #28
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6a1b      	ldr	r3, [r3, #32]
 800af26:	f023 0210 	bic.w	r2, r3, #16
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6a1b      	ldr	r3, [r3, #32]
 800af32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	685b      	ldr	r3, [r3, #4]
 800af38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	699b      	ldr	r3, [r3, #24]
 800af3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800af46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	021b      	lsls	r3, r3, #8
 800af5a:	68fa      	ldr	r2, [r7, #12]
 800af5c:	4313      	orrs	r3, r2
 800af5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800af60:	697b      	ldr	r3, [r7, #20]
 800af62:	f023 0320 	bic.w	r3, r3, #32
 800af66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	689b      	ldr	r3, [r3, #8]
 800af6c:	011b      	lsls	r3, r3, #4
 800af6e:	697a      	ldr	r2, [r7, #20]
 800af70:	4313      	orrs	r3, r2
 800af72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	4a28      	ldr	r2, [pc, #160]	; (800b018 <TIM_OC2_SetConfig+0x100>)
 800af78:	4293      	cmp	r3, r2
 800af7a:	d003      	beq.n	800af84 <TIM_OC2_SetConfig+0x6c>
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	4a27      	ldr	r2, [pc, #156]	; (800b01c <TIM_OC2_SetConfig+0x104>)
 800af80:	4293      	cmp	r3, r2
 800af82:	d10d      	bne.n	800afa0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800af84:	697b      	ldr	r3, [r7, #20]
 800af86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	68db      	ldr	r3, [r3, #12]
 800af90:	011b      	lsls	r3, r3, #4
 800af92:	697a      	ldr	r2, [r7, #20]
 800af94:	4313      	orrs	r3, r2
 800af96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	4a1d      	ldr	r2, [pc, #116]	; (800b018 <TIM_OC2_SetConfig+0x100>)
 800afa4:	4293      	cmp	r3, r2
 800afa6:	d00f      	beq.n	800afc8 <TIM_OC2_SetConfig+0xb0>
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	4a1c      	ldr	r2, [pc, #112]	; (800b01c <TIM_OC2_SetConfig+0x104>)
 800afac:	4293      	cmp	r3, r2
 800afae:	d00b      	beq.n	800afc8 <TIM_OC2_SetConfig+0xb0>
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	4a1b      	ldr	r2, [pc, #108]	; (800b020 <TIM_OC2_SetConfig+0x108>)
 800afb4:	4293      	cmp	r3, r2
 800afb6:	d007      	beq.n	800afc8 <TIM_OC2_SetConfig+0xb0>
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	4a1a      	ldr	r2, [pc, #104]	; (800b024 <TIM_OC2_SetConfig+0x10c>)
 800afbc:	4293      	cmp	r3, r2
 800afbe:	d003      	beq.n	800afc8 <TIM_OC2_SetConfig+0xb0>
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	4a19      	ldr	r2, [pc, #100]	; (800b028 <TIM_OC2_SetConfig+0x110>)
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d113      	bne.n	800aff0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800afce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800afd6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	695b      	ldr	r3, [r3, #20]
 800afdc:	009b      	lsls	r3, r3, #2
 800afde:	693a      	ldr	r2, [r7, #16]
 800afe0:	4313      	orrs	r3, r2
 800afe2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	699b      	ldr	r3, [r3, #24]
 800afe8:	009b      	lsls	r3, r3, #2
 800afea:	693a      	ldr	r2, [r7, #16]
 800afec:	4313      	orrs	r3, r2
 800afee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	693a      	ldr	r2, [r7, #16]
 800aff4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	68fa      	ldr	r2, [r7, #12]
 800affa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	685a      	ldr	r2, [r3, #4]
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	697a      	ldr	r2, [r7, #20]
 800b008:	621a      	str	r2, [r3, #32]
}
 800b00a:	bf00      	nop
 800b00c:	371c      	adds	r7, #28
 800b00e:	46bd      	mov	sp, r7
 800b010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b014:	4770      	bx	lr
 800b016:	bf00      	nop
 800b018:	40012c00 	.word	0x40012c00
 800b01c:	40013400 	.word	0x40013400
 800b020:	40014000 	.word	0x40014000
 800b024:	40014400 	.word	0x40014400
 800b028:	40014800 	.word	0x40014800

0800b02c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b02c:	b480      	push	{r7}
 800b02e:	b087      	sub	sp, #28
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
 800b034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6a1b      	ldr	r3, [r3, #32]
 800b03a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6a1b      	ldr	r3, [r3, #32]
 800b046:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	685b      	ldr	r3, [r3, #4]
 800b04c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	69db      	ldr	r3, [r3, #28]
 800b052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b05a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b05e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	f023 0303 	bic.w	r3, r3, #3
 800b066:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	68fa      	ldr	r2, [r7, #12]
 800b06e:	4313      	orrs	r3, r2
 800b070:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b072:	697b      	ldr	r3, [r7, #20]
 800b074:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b078:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	689b      	ldr	r3, [r3, #8]
 800b07e:	021b      	lsls	r3, r3, #8
 800b080:	697a      	ldr	r2, [r7, #20]
 800b082:	4313      	orrs	r3, r2
 800b084:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	4a27      	ldr	r2, [pc, #156]	; (800b128 <TIM_OC3_SetConfig+0xfc>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d003      	beq.n	800b096 <TIM_OC3_SetConfig+0x6a>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	4a26      	ldr	r2, [pc, #152]	; (800b12c <TIM_OC3_SetConfig+0x100>)
 800b092:	4293      	cmp	r3, r2
 800b094:	d10d      	bne.n	800b0b2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b09c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	68db      	ldr	r3, [r3, #12]
 800b0a2:	021b      	lsls	r3, r3, #8
 800b0a4:	697a      	ldr	r2, [r7, #20]
 800b0a6:	4313      	orrs	r3, r2
 800b0a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b0aa:	697b      	ldr	r3, [r7, #20]
 800b0ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b0b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	4a1c      	ldr	r2, [pc, #112]	; (800b128 <TIM_OC3_SetConfig+0xfc>)
 800b0b6:	4293      	cmp	r3, r2
 800b0b8:	d00f      	beq.n	800b0da <TIM_OC3_SetConfig+0xae>
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	4a1b      	ldr	r2, [pc, #108]	; (800b12c <TIM_OC3_SetConfig+0x100>)
 800b0be:	4293      	cmp	r3, r2
 800b0c0:	d00b      	beq.n	800b0da <TIM_OC3_SetConfig+0xae>
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	4a1a      	ldr	r2, [pc, #104]	; (800b130 <TIM_OC3_SetConfig+0x104>)
 800b0c6:	4293      	cmp	r3, r2
 800b0c8:	d007      	beq.n	800b0da <TIM_OC3_SetConfig+0xae>
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	4a19      	ldr	r2, [pc, #100]	; (800b134 <TIM_OC3_SetConfig+0x108>)
 800b0ce:	4293      	cmp	r3, r2
 800b0d0:	d003      	beq.n	800b0da <TIM_OC3_SetConfig+0xae>
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	4a18      	ldr	r2, [pc, #96]	; (800b138 <TIM_OC3_SetConfig+0x10c>)
 800b0d6:	4293      	cmp	r3, r2
 800b0d8:	d113      	bne.n	800b102 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b0e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b0e2:	693b      	ldr	r3, [r7, #16]
 800b0e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b0e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	695b      	ldr	r3, [r3, #20]
 800b0ee:	011b      	lsls	r3, r3, #4
 800b0f0:	693a      	ldr	r2, [r7, #16]
 800b0f2:	4313      	orrs	r3, r2
 800b0f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	699b      	ldr	r3, [r3, #24]
 800b0fa:	011b      	lsls	r3, r3, #4
 800b0fc:	693a      	ldr	r2, [r7, #16]
 800b0fe:	4313      	orrs	r3, r2
 800b100:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	693a      	ldr	r2, [r7, #16]
 800b106:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	68fa      	ldr	r2, [r7, #12]
 800b10c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	685a      	ldr	r2, [r3, #4]
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	697a      	ldr	r2, [r7, #20]
 800b11a:	621a      	str	r2, [r3, #32]
}
 800b11c:	bf00      	nop
 800b11e:	371c      	adds	r7, #28
 800b120:	46bd      	mov	sp, r7
 800b122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b126:	4770      	bx	lr
 800b128:	40012c00 	.word	0x40012c00
 800b12c:	40013400 	.word	0x40013400
 800b130:	40014000 	.word	0x40014000
 800b134:	40014400 	.word	0x40014400
 800b138:	40014800 	.word	0x40014800

0800b13c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b13c:	b480      	push	{r7}
 800b13e:	b087      	sub	sp, #28
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
 800b144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6a1b      	ldr	r3, [r3, #32]
 800b14a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6a1b      	ldr	r3, [r3, #32]
 800b156:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	685b      	ldr	r3, [r3, #4]
 800b15c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	69db      	ldr	r3, [r3, #28]
 800b162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b16a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b16e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b176:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	021b      	lsls	r3, r3, #8
 800b17e:	68fa      	ldr	r2, [r7, #12]
 800b180:	4313      	orrs	r3, r2
 800b182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b184:	697b      	ldr	r3, [r7, #20]
 800b186:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b18a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	689b      	ldr	r3, [r3, #8]
 800b190:	031b      	lsls	r3, r3, #12
 800b192:	697a      	ldr	r2, [r7, #20]
 800b194:	4313      	orrs	r3, r2
 800b196:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	4a28      	ldr	r2, [pc, #160]	; (800b23c <TIM_OC4_SetConfig+0x100>)
 800b19c:	4293      	cmp	r3, r2
 800b19e:	d003      	beq.n	800b1a8 <TIM_OC4_SetConfig+0x6c>
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	4a27      	ldr	r2, [pc, #156]	; (800b240 <TIM_OC4_SetConfig+0x104>)
 800b1a4:	4293      	cmp	r3, r2
 800b1a6:	d10d      	bne.n	800b1c4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b1a8:	697b      	ldr	r3, [r7, #20]
 800b1aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b1ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	68db      	ldr	r3, [r3, #12]
 800b1b4:	031b      	lsls	r3, r3, #12
 800b1b6:	697a      	ldr	r2, [r7, #20]
 800b1b8:	4313      	orrs	r3, r2
 800b1ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b1bc:	697b      	ldr	r3, [r7, #20]
 800b1be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b1c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	4a1d      	ldr	r2, [pc, #116]	; (800b23c <TIM_OC4_SetConfig+0x100>)
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	d00f      	beq.n	800b1ec <TIM_OC4_SetConfig+0xb0>
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	4a1c      	ldr	r2, [pc, #112]	; (800b240 <TIM_OC4_SetConfig+0x104>)
 800b1d0:	4293      	cmp	r3, r2
 800b1d2:	d00b      	beq.n	800b1ec <TIM_OC4_SetConfig+0xb0>
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	4a1b      	ldr	r2, [pc, #108]	; (800b244 <TIM_OC4_SetConfig+0x108>)
 800b1d8:	4293      	cmp	r3, r2
 800b1da:	d007      	beq.n	800b1ec <TIM_OC4_SetConfig+0xb0>
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	4a1a      	ldr	r2, [pc, #104]	; (800b248 <TIM_OC4_SetConfig+0x10c>)
 800b1e0:	4293      	cmp	r3, r2
 800b1e2:	d003      	beq.n	800b1ec <TIM_OC4_SetConfig+0xb0>
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	4a19      	ldr	r2, [pc, #100]	; (800b24c <TIM_OC4_SetConfig+0x110>)
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	d113      	bne.n	800b214 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b1ec:	693b      	ldr	r3, [r7, #16]
 800b1ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b1f2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b1fa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	695b      	ldr	r3, [r3, #20]
 800b200:	019b      	lsls	r3, r3, #6
 800b202:	693a      	ldr	r2, [r7, #16]
 800b204:	4313      	orrs	r3, r2
 800b206:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	699b      	ldr	r3, [r3, #24]
 800b20c:	019b      	lsls	r3, r3, #6
 800b20e:	693a      	ldr	r2, [r7, #16]
 800b210:	4313      	orrs	r3, r2
 800b212:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	693a      	ldr	r2, [r7, #16]
 800b218:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	68fa      	ldr	r2, [r7, #12]
 800b21e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	685a      	ldr	r2, [r3, #4]
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	697a      	ldr	r2, [r7, #20]
 800b22c:	621a      	str	r2, [r3, #32]
}
 800b22e:	bf00      	nop
 800b230:	371c      	adds	r7, #28
 800b232:	46bd      	mov	sp, r7
 800b234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b238:	4770      	bx	lr
 800b23a:	bf00      	nop
 800b23c:	40012c00 	.word	0x40012c00
 800b240:	40013400 	.word	0x40013400
 800b244:	40014000 	.word	0x40014000
 800b248:	40014400 	.word	0x40014400
 800b24c:	40014800 	.word	0x40014800

0800b250 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b250:	b480      	push	{r7}
 800b252:	b087      	sub	sp, #28
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
 800b258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6a1b      	ldr	r3, [r3, #32]
 800b25e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6a1b      	ldr	r3, [r3, #32]
 800b26a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	685b      	ldr	r3, [r3, #4]
 800b270:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b27e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b282:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	68fa      	ldr	r2, [r7, #12]
 800b28a:	4313      	orrs	r3, r2
 800b28c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b294:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	689b      	ldr	r3, [r3, #8]
 800b29a:	041b      	lsls	r3, r3, #16
 800b29c:	693a      	ldr	r2, [r7, #16]
 800b29e:	4313      	orrs	r3, r2
 800b2a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	4a17      	ldr	r2, [pc, #92]	; (800b304 <TIM_OC5_SetConfig+0xb4>)
 800b2a6:	4293      	cmp	r3, r2
 800b2a8:	d00f      	beq.n	800b2ca <TIM_OC5_SetConfig+0x7a>
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	4a16      	ldr	r2, [pc, #88]	; (800b308 <TIM_OC5_SetConfig+0xb8>)
 800b2ae:	4293      	cmp	r3, r2
 800b2b0:	d00b      	beq.n	800b2ca <TIM_OC5_SetConfig+0x7a>
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	4a15      	ldr	r2, [pc, #84]	; (800b30c <TIM_OC5_SetConfig+0xbc>)
 800b2b6:	4293      	cmp	r3, r2
 800b2b8:	d007      	beq.n	800b2ca <TIM_OC5_SetConfig+0x7a>
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	4a14      	ldr	r2, [pc, #80]	; (800b310 <TIM_OC5_SetConfig+0xc0>)
 800b2be:	4293      	cmp	r3, r2
 800b2c0:	d003      	beq.n	800b2ca <TIM_OC5_SetConfig+0x7a>
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	4a13      	ldr	r2, [pc, #76]	; (800b314 <TIM_OC5_SetConfig+0xc4>)
 800b2c6:	4293      	cmp	r3, r2
 800b2c8:	d109      	bne.n	800b2de <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b2d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	695b      	ldr	r3, [r3, #20]
 800b2d6:	021b      	lsls	r3, r3, #8
 800b2d8:	697a      	ldr	r2, [r7, #20]
 800b2da:	4313      	orrs	r3, r2
 800b2dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	697a      	ldr	r2, [r7, #20]
 800b2e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	68fa      	ldr	r2, [r7, #12]
 800b2e8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	685a      	ldr	r2, [r3, #4]
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	693a      	ldr	r2, [r7, #16]
 800b2f6:	621a      	str	r2, [r3, #32]
}
 800b2f8:	bf00      	nop
 800b2fa:	371c      	adds	r7, #28
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b302:	4770      	bx	lr
 800b304:	40012c00 	.word	0x40012c00
 800b308:	40013400 	.word	0x40013400
 800b30c:	40014000 	.word	0x40014000
 800b310:	40014400 	.word	0x40014400
 800b314:	40014800 	.word	0x40014800

0800b318 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b318:	b480      	push	{r7}
 800b31a:	b087      	sub	sp, #28
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
 800b320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6a1b      	ldr	r3, [r3, #32]
 800b326:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6a1b      	ldr	r3, [r3, #32]
 800b332:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	685b      	ldr	r3, [r3, #4]
 800b338:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b33e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b34a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	021b      	lsls	r3, r3, #8
 800b352:	68fa      	ldr	r2, [r7, #12]
 800b354:	4313      	orrs	r3, r2
 800b356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b358:	693b      	ldr	r3, [r7, #16]
 800b35a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b35e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	689b      	ldr	r3, [r3, #8]
 800b364:	051b      	lsls	r3, r3, #20
 800b366:	693a      	ldr	r2, [r7, #16]
 800b368:	4313      	orrs	r3, r2
 800b36a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	4a18      	ldr	r2, [pc, #96]	; (800b3d0 <TIM_OC6_SetConfig+0xb8>)
 800b370:	4293      	cmp	r3, r2
 800b372:	d00f      	beq.n	800b394 <TIM_OC6_SetConfig+0x7c>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	4a17      	ldr	r2, [pc, #92]	; (800b3d4 <TIM_OC6_SetConfig+0xbc>)
 800b378:	4293      	cmp	r3, r2
 800b37a:	d00b      	beq.n	800b394 <TIM_OC6_SetConfig+0x7c>
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	4a16      	ldr	r2, [pc, #88]	; (800b3d8 <TIM_OC6_SetConfig+0xc0>)
 800b380:	4293      	cmp	r3, r2
 800b382:	d007      	beq.n	800b394 <TIM_OC6_SetConfig+0x7c>
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	4a15      	ldr	r2, [pc, #84]	; (800b3dc <TIM_OC6_SetConfig+0xc4>)
 800b388:	4293      	cmp	r3, r2
 800b38a:	d003      	beq.n	800b394 <TIM_OC6_SetConfig+0x7c>
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	4a14      	ldr	r2, [pc, #80]	; (800b3e0 <TIM_OC6_SetConfig+0xc8>)
 800b390:	4293      	cmp	r3, r2
 800b392:	d109      	bne.n	800b3a8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b394:	697b      	ldr	r3, [r7, #20]
 800b396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b39a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	695b      	ldr	r3, [r3, #20]
 800b3a0:	029b      	lsls	r3, r3, #10
 800b3a2:	697a      	ldr	r2, [r7, #20]
 800b3a4:	4313      	orrs	r3, r2
 800b3a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	697a      	ldr	r2, [r7, #20]
 800b3ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	68fa      	ldr	r2, [r7, #12]
 800b3b2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	685a      	ldr	r2, [r3, #4]
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	693a      	ldr	r2, [r7, #16]
 800b3c0:	621a      	str	r2, [r3, #32]
}
 800b3c2:	bf00      	nop
 800b3c4:	371c      	adds	r7, #28
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3cc:	4770      	bx	lr
 800b3ce:	bf00      	nop
 800b3d0:	40012c00 	.word	0x40012c00
 800b3d4:	40013400 	.word	0x40013400
 800b3d8:	40014000 	.word	0x40014000
 800b3dc:	40014400 	.word	0x40014400
 800b3e0:	40014800 	.word	0x40014800

0800b3e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b3e4:	b480      	push	{r7}
 800b3e6:	b087      	sub	sp, #28
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	60f8      	str	r0, [r7, #12]
 800b3ec:	60b9      	str	r1, [r7, #8]
 800b3ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	6a1b      	ldr	r3, [r3, #32]
 800b3f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	6a1b      	ldr	r3, [r3, #32]
 800b3fa:	f023 0201 	bic.w	r2, r3, #1
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	699b      	ldr	r3, [r3, #24]
 800b406:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b408:	693b      	ldr	r3, [r7, #16]
 800b40a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b40e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	011b      	lsls	r3, r3, #4
 800b414:	693a      	ldr	r2, [r7, #16]
 800b416:	4313      	orrs	r3, r2
 800b418:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b41a:	697b      	ldr	r3, [r7, #20]
 800b41c:	f023 030a 	bic.w	r3, r3, #10
 800b420:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b422:	697a      	ldr	r2, [r7, #20]
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	4313      	orrs	r3, r2
 800b428:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	693a      	ldr	r2, [r7, #16]
 800b42e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	697a      	ldr	r2, [r7, #20]
 800b434:	621a      	str	r2, [r3, #32]
}
 800b436:	bf00      	nop
 800b438:	371c      	adds	r7, #28
 800b43a:	46bd      	mov	sp, r7
 800b43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b440:	4770      	bx	lr

0800b442 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b442:	b480      	push	{r7}
 800b444:	b087      	sub	sp, #28
 800b446:	af00      	add	r7, sp, #0
 800b448:	60f8      	str	r0, [r7, #12]
 800b44a:	60b9      	str	r1, [r7, #8]
 800b44c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	6a1b      	ldr	r3, [r3, #32]
 800b452:	f023 0210 	bic.w	r2, r3, #16
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	699b      	ldr	r3, [r3, #24]
 800b45e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	6a1b      	ldr	r3, [r3, #32]
 800b464:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b466:	697b      	ldr	r3, [r7, #20]
 800b468:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b46c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	031b      	lsls	r3, r3, #12
 800b472:	697a      	ldr	r2, [r7, #20]
 800b474:	4313      	orrs	r3, r2
 800b476:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b478:	693b      	ldr	r3, [r7, #16]
 800b47a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b47e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	011b      	lsls	r3, r3, #4
 800b484:	693a      	ldr	r2, [r7, #16]
 800b486:	4313      	orrs	r3, r2
 800b488:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	697a      	ldr	r2, [r7, #20]
 800b48e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	693a      	ldr	r2, [r7, #16]
 800b494:	621a      	str	r2, [r3, #32]
}
 800b496:	bf00      	nop
 800b498:	371c      	adds	r7, #28
 800b49a:	46bd      	mov	sp, r7
 800b49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a0:	4770      	bx	lr

0800b4a2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b4a2:	b480      	push	{r7}
 800b4a4:	b085      	sub	sp, #20
 800b4a6:	af00      	add	r7, sp, #0
 800b4a8:	6078      	str	r0, [r7, #4]
 800b4aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	689b      	ldr	r3, [r3, #8]
 800b4b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800b4b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b4be:	683a      	ldr	r2, [r7, #0]
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	4313      	orrs	r3, r2
 800b4c4:	f043 0307 	orr.w	r3, r3, #7
 800b4c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	68fa      	ldr	r2, [r7, #12]
 800b4ce:	609a      	str	r2, [r3, #8]
}
 800b4d0:	bf00      	nop
 800b4d2:	3714      	adds	r7, #20
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4da:	4770      	bx	lr

0800b4dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b4dc:	b480      	push	{r7}
 800b4de:	b087      	sub	sp, #28
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	60f8      	str	r0, [r7, #12]
 800b4e4:	60b9      	str	r1, [r7, #8]
 800b4e6:	607a      	str	r2, [r7, #4]
 800b4e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	689b      	ldr	r3, [r3, #8]
 800b4ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b4f0:	697b      	ldr	r3, [r7, #20]
 800b4f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b4f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	021a      	lsls	r2, r3, #8
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	431a      	orrs	r2, r3
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	4313      	orrs	r3, r2
 800b504:	697a      	ldr	r2, [r7, #20]
 800b506:	4313      	orrs	r3, r2
 800b508:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	697a      	ldr	r2, [r7, #20]
 800b50e:	609a      	str	r2, [r3, #8]
}
 800b510:	bf00      	nop
 800b512:	371c      	adds	r7, #28
 800b514:	46bd      	mov	sp, r7
 800b516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51a:	4770      	bx	lr

0800b51c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b51c:	b480      	push	{r7}
 800b51e:	b087      	sub	sp, #28
 800b520:	af00      	add	r7, sp, #0
 800b522:	60f8      	str	r0, [r7, #12]
 800b524:	60b9      	str	r1, [r7, #8]
 800b526:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	f003 031f 	and.w	r3, r3, #31
 800b52e:	2201      	movs	r2, #1
 800b530:	fa02 f303 	lsl.w	r3, r2, r3
 800b534:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	6a1a      	ldr	r2, [r3, #32]
 800b53a:	697b      	ldr	r3, [r7, #20]
 800b53c:	43db      	mvns	r3, r3
 800b53e:	401a      	ands	r2, r3
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	6a1a      	ldr	r2, [r3, #32]
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	f003 031f 	and.w	r3, r3, #31
 800b54e:	6879      	ldr	r1, [r7, #4]
 800b550:	fa01 f303 	lsl.w	r3, r1, r3
 800b554:	431a      	orrs	r2, r3
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	621a      	str	r2, [r3, #32]
}
 800b55a:	bf00      	nop
 800b55c:	371c      	adds	r7, #28
 800b55e:	46bd      	mov	sp, r7
 800b560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b564:	4770      	bx	lr
	...

0800b568 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b084      	sub	sp, #16
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d109      	bne.n	800b58c <HAL_TIMEx_PWMN_Start+0x24>
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b57e:	b2db      	uxtb	r3, r3
 800b580:	2b01      	cmp	r3, #1
 800b582:	bf14      	ite	ne
 800b584:	2301      	movne	r3, #1
 800b586:	2300      	moveq	r3, #0
 800b588:	b2db      	uxtb	r3, r3
 800b58a:	e022      	b.n	800b5d2 <HAL_TIMEx_PWMN_Start+0x6a>
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	2b04      	cmp	r3, #4
 800b590:	d109      	bne.n	800b5a6 <HAL_TIMEx_PWMN_Start+0x3e>
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b598:	b2db      	uxtb	r3, r3
 800b59a:	2b01      	cmp	r3, #1
 800b59c:	bf14      	ite	ne
 800b59e:	2301      	movne	r3, #1
 800b5a0:	2300      	moveq	r3, #0
 800b5a2:	b2db      	uxtb	r3, r3
 800b5a4:	e015      	b.n	800b5d2 <HAL_TIMEx_PWMN_Start+0x6a>
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	2b08      	cmp	r3, #8
 800b5aa:	d109      	bne.n	800b5c0 <HAL_TIMEx_PWMN_Start+0x58>
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b5b2:	b2db      	uxtb	r3, r3
 800b5b4:	2b01      	cmp	r3, #1
 800b5b6:	bf14      	ite	ne
 800b5b8:	2301      	movne	r3, #1
 800b5ba:	2300      	moveq	r3, #0
 800b5bc:	b2db      	uxtb	r3, r3
 800b5be:	e008      	b.n	800b5d2 <HAL_TIMEx_PWMN_Start+0x6a>
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800b5c6:	b2db      	uxtb	r3, r3
 800b5c8:	2b01      	cmp	r3, #1
 800b5ca:	bf14      	ite	ne
 800b5cc:	2301      	movne	r3, #1
 800b5ce:	2300      	moveq	r3, #0
 800b5d0:	b2db      	uxtb	r3, r3
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d001      	beq.n	800b5da <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	e069      	b.n	800b6ae <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d104      	bne.n	800b5ea <HAL_TIMEx_PWMN_Start+0x82>
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2202      	movs	r2, #2
 800b5e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b5e8:	e013      	b.n	800b612 <HAL_TIMEx_PWMN_Start+0xaa>
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	2b04      	cmp	r3, #4
 800b5ee:	d104      	bne.n	800b5fa <HAL_TIMEx_PWMN_Start+0x92>
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2202      	movs	r2, #2
 800b5f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b5f8:	e00b      	b.n	800b612 <HAL_TIMEx_PWMN_Start+0xaa>
 800b5fa:	683b      	ldr	r3, [r7, #0]
 800b5fc:	2b08      	cmp	r3, #8
 800b5fe:	d104      	bne.n	800b60a <HAL_TIMEx_PWMN_Start+0xa2>
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2202      	movs	r2, #2
 800b604:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b608:	e003      	b.n	800b612 <HAL_TIMEx_PWMN_Start+0xaa>
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	2202      	movs	r2, #2
 800b60e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	2204      	movs	r2, #4
 800b618:	6839      	ldr	r1, [r7, #0]
 800b61a:	4618      	mov	r0, r3
 800b61c:	f000 f9c0 	bl	800b9a0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b62e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	4a20      	ldr	r2, [pc, #128]	; (800b6b8 <HAL_TIMEx_PWMN_Start+0x150>)
 800b636:	4293      	cmp	r3, r2
 800b638:	d018      	beq.n	800b66c <HAL_TIMEx_PWMN_Start+0x104>
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b642:	d013      	beq.n	800b66c <HAL_TIMEx_PWMN_Start+0x104>
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	4a1c      	ldr	r2, [pc, #112]	; (800b6bc <HAL_TIMEx_PWMN_Start+0x154>)
 800b64a:	4293      	cmp	r3, r2
 800b64c:	d00e      	beq.n	800b66c <HAL_TIMEx_PWMN_Start+0x104>
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	4a1b      	ldr	r2, [pc, #108]	; (800b6c0 <HAL_TIMEx_PWMN_Start+0x158>)
 800b654:	4293      	cmp	r3, r2
 800b656:	d009      	beq.n	800b66c <HAL_TIMEx_PWMN_Start+0x104>
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	4a19      	ldr	r2, [pc, #100]	; (800b6c4 <HAL_TIMEx_PWMN_Start+0x15c>)
 800b65e:	4293      	cmp	r3, r2
 800b660:	d004      	beq.n	800b66c <HAL_TIMEx_PWMN_Start+0x104>
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	4a18      	ldr	r2, [pc, #96]	; (800b6c8 <HAL_TIMEx_PWMN_Start+0x160>)
 800b668:	4293      	cmp	r3, r2
 800b66a:	d115      	bne.n	800b698 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	689a      	ldr	r2, [r3, #8]
 800b672:	4b16      	ldr	r3, [pc, #88]	; (800b6cc <HAL_TIMEx_PWMN_Start+0x164>)
 800b674:	4013      	ands	r3, r2
 800b676:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	2b06      	cmp	r3, #6
 800b67c:	d015      	beq.n	800b6aa <HAL_TIMEx_PWMN_Start+0x142>
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b684:	d011      	beq.n	800b6aa <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	681a      	ldr	r2, [r3, #0]
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	f042 0201 	orr.w	r2, r2, #1
 800b694:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b696:	e008      	b.n	800b6aa <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	681a      	ldr	r2, [r3, #0]
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	f042 0201 	orr.w	r2, r2, #1
 800b6a6:	601a      	str	r2, [r3, #0]
 800b6a8:	e000      	b.n	800b6ac <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b6aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b6ac:	2300      	movs	r3, #0
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	3710      	adds	r7, #16
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd80      	pop	{r7, pc}
 800b6b6:	bf00      	nop
 800b6b8:	40012c00 	.word	0x40012c00
 800b6bc:	40000400 	.word	0x40000400
 800b6c0:	40000800 	.word	0x40000800
 800b6c4:	40013400 	.word	0x40013400
 800b6c8:	40014000 	.word	0x40014000
 800b6cc:	00010007 	.word	0x00010007

0800b6d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b6d0:	b480      	push	{r7}
 800b6d2:	b085      	sub	sp, #20
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
 800b6d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b6e0:	2b01      	cmp	r3, #1
 800b6e2:	d101      	bne.n	800b6e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b6e4:	2302      	movs	r3, #2
 800b6e6:	e065      	b.n	800b7b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2201      	movs	r2, #1
 800b6ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2202      	movs	r2, #2
 800b6f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	685b      	ldr	r3, [r3, #4]
 800b6fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	689b      	ldr	r3, [r3, #8]
 800b706:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	4a2c      	ldr	r2, [pc, #176]	; (800b7c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b70e:	4293      	cmp	r3, r2
 800b710:	d004      	beq.n	800b71c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	4a2b      	ldr	r2, [pc, #172]	; (800b7c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b718:	4293      	cmp	r3, r2
 800b71a:	d108      	bne.n	800b72e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b722:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	685b      	ldr	r3, [r3, #4]
 800b728:	68fa      	ldr	r2, [r7, #12]
 800b72a:	4313      	orrs	r3, r2
 800b72c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800b734:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b738:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	68fa      	ldr	r2, [r7, #12]
 800b740:	4313      	orrs	r3, r2
 800b742:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	68fa      	ldr	r2, [r7, #12]
 800b74a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	4a1b      	ldr	r2, [pc, #108]	; (800b7c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b752:	4293      	cmp	r3, r2
 800b754:	d018      	beq.n	800b788 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b75e:	d013      	beq.n	800b788 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	4a18      	ldr	r2, [pc, #96]	; (800b7c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b766:	4293      	cmp	r3, r2
 800b768:	d00e      	beq.n	800b788 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	4a17      	ldr	r2, [pc, #92]	; (800b7cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b770:	4293      	cmp	r3, r2
 800b772:	d009      	beq.n	800b788 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	4a12      	ldr	r2, [pc, #72]	; (800b7c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b77a:	4293      	cmp	r3, r2
 800b77c:	d004      	beq.n	800b788 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	4a13      	ldr	r2, [pc, #76]	; (800b7d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b784:	4293      	cmp	r3, r2
 800b786:	d10c      	bne.n	800b7a2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b78e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	689b      	ldr	r3, [r3, #8]
 800b794:	68ba      	ldr	r2, [r7, #8]
 800b796:	4313      	orrs	r3, r2
 800b798:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	68ba      	ldr	r2, [r7, #8]
 800b7a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2201      	movs	r2, #1
 800b7a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b7b2:	2300      	movs	r3, #0
}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	3714      	adds	r7, #20
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7be:	4770      	bx	lr
 800b7c0:	40012c00 	.word	0x40012c00
 800b7c4:	40013400 	.word	0x40013400
 800b7c8:	40000400 	.word	0x40000400
 800b7cc:	40000800 	.word	0x40000800
 800b7d0:	40014000 	.word	0x40014000

0800b7d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b7d4:	b480      	push	{r7}
 800b7d6:	b085      	sub	sp, #20
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
 800b7dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b7e8:	2b01      	cmp	r3, #1
 800b7ea:	d101      	bne.n	800b7f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b7ec:	2302      	movs	r3, #2
 800b7ee:	e087      	b.n	800b900 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2201      	movs	r2, #1
 800b7f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	68db      	ldr	r3, [r3, #12]
 800b802:	4313      	orrs	r3, r2
 800b804:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	689b      	ldr	r3, [r3, #8]
 800b810:	4313      	orrs	r3, r2
 800b812:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	685b      	ldr	r3, [r3, #4]
 800b81e:	4313      	orrs	r3, r2
 800b820:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	4313      	orrs	r3, r2
 800b82e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	691b      	ldr	r3, [r3, #16]
 800b83a:	4313      	orrs	r3, r2
 800b83c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	695b      	ldr	r3, [r3, #20]
 800b848:	4313      	orrs	r3, r2
 800b84a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b856:	4313      	orrs	r3, r2
 800b858:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	699b      	ldr	r3, [r3, #24]
 800b864:	041b      	lsls	r3, r3, #16
 800b866:	4313      	orrs	r3, r2
 800b868:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	4a27      	ldr	r2, [pc, #156]	; (800b90c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b870:	4293      	cmp	r3, r2
 800b872:	d004      	beq.n	800b87e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	4a25      	ldr	r2, [pc, #148]	; (800b910 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b87a:	4293      	cmp	r3, r2
 800b87c:	d106      	bne.n	800b88c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	69db      	ldr	r3, [r3, #28]
 800b888:	4313      	orrs	r3, r2
 800b88a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	4a1e      	ldr	r2, [pc, #120]	; (800b90c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b892:	4293      	cmp	r3, r2
 800b894:	d004      	beq.n	800b8a0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	4a1d      	ldr	r2, [pc, #116]	; (800b910 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b89c:	4293      	cmp	r3, r2
 800b89e:	d126      	bne.n	800b8ee <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8aa:	051b      	lsls	r3, r3, #20
 800b8ac:	4313      	orrs	r3, r2
 800b8ae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	6a1b      	ldr	r3, [r3, #32]
 800b8ba:	4313      	orrs	r3, r2
 800b8bc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8c8:	4313      	orrs	r3, r2
 800b8ca:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	4a0e      	ldr	r2, [pc, #56]	; (800b90c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b8d2:	4293      	cmp	r3, r2
 800b8d4:	d004      	beq.n	800b8e0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	4a0d      	ldr	r2, [pc, #52]	; (800b910 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b8dc:	4293      	cmp	r3, r2
 800b8de:	d106      	bne.n	800b8ee <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800b8e6:	683b      	ldr	r3, [r7, #0]
 800b8e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8ea:	4313      	orrs	r3, r2
 800b8ec:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	68fa      	ldr	r2, [r7, #12]
 800b8f4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b8fe:	2300      	movs	r3, #0
}
 800b900:	4618      	mov	r0, r3
 800b902:	3714      	adds	r7, #20
 800b904:	46bd      	mov	sp, r7
 800b906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90a:	4770      	bx	lr
 800b90c:	40012c00 	.word	0x40012c00
 800b910:	40013400 	.word	0x40013400

0800b914 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b914:	b480      	push	{r7}
 800b916:	b083      	sub	sp, #12
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b91c:	bf00      	nop
 800b91e:	370c      	adds	r7, #12
 800b920:	46bd      	mov	sp, r7
 800b922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b926:	4770      	bx	lr

0800b928 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b928:	b480      	push	{r7}
 800b92a:	b083      	sub	sp, #12
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b930:	bf00      	nop
 800b932:	370c      	adds	r7, #12
 800b934:	46bd      	mov	sp, r7
 800b936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93a:	4770      	bx	lr

0800b93c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b93c:	b480      	push	{r7}
 800b93e:	b083      	sub	sp, #12
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b944:	bf00      	nop
 800b946:	370c      	adds	r7, #12
 800b948:	46bd      	mov	sp, r7
 800b94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94e:	4770      	bx	lr

0800b950 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b950:	b480      	push	{r7}
 800b952:	b083      	sub	sp, #12
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b958:	bf00      	nop
 800b95a:	370c      	adds	r7, #12
 800b95c:	46bd      	mov	sp, r7
 800b95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b962:	4770      	bx	lr

0800b964 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b964:	b480      	push	{r7}
 800b966:	b083      	sub	sp, #12
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b96c:	bf00      	nop
 800b96e:	370c      	adds	r7, #12
 800b970:	46bd      	mov	sp, r7
 800b972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b976:	4770      	bx	lr

0800b978 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b978:	b480      	push	{r7}
 800b97a:	b083      	sub	sp, #12
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b980:	bf00      	nop
 800b982:	370c      	adds	r7, #12
 800b984:	46bd      	mov	sp, r7
 800b986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98a:	4770      	bx	lr

0800b98c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b98c:	b480      	push	{r7}
 800b98e:	b083      	sub	sp, #12
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b994:	bf00      	nop
 800b996:	370c      	adds	r7, #12
 800b998:	46bd      	mov	sp, r7
 800b99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99e:	4770      	bx	lr

0800b9a0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800b9a0:	b480      	push	{r7}
 800b9a2:	b087      	sub	sp, #28
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	60f8      	str	r0, [r7, #12]
 800b9a8:	60b9      	str	r1, [r7, #8]
 800b9aa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	f003 031f 	and.w	r3, r3, #31
 800b9b2:	2204      	movs	r2, #4
 800b9b4:	fa02 f303 	lsl.w	r3, r2, r3
 800b9b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	6a1a      	ldr	r2, [r3, #32]
 800b9be:	697b      	ldr	r3, [r7, #20]
 800b9c0:	43db      	mvns	r3, r3
 800b9c2:	401a      	ands	r2, r3
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	6a1a      	ldr	r2, [r3, #32]
 800b9cc:	68bb      	ldr	r3, [r7, #8]
 800b9ce:	f003 031f 	and.w	r3, r3, #31
 800b9d2:	6879      	ldr	r1, [r7, #4]
 800b9d4:	fa01 f303 	lsl.w	r3, r1, r3
 800b9d8:	431a      	orrs	r2, r3
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	621a      	str	r2, [r3, #32]
}
 800b9de:	bf00      	nop
 800b9e0:	371c      	adds	r7, #28
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e8:	4770      	bx	lr

0800b9ea <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b9ea:	b580      	push	{r7, lr}
 800b9ec:	b082      	sub	sp, #8
 800b9ee:	af00      	add	r7, sp, #0
 800b9f0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d101      	bne.n	800b9fc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	e042      	b.n	800ba82 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d106      	bne.n	800ba14 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2200      	movs	r2, #0
 800ba0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	f7f9 f9b6 	bl	8004d80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2224      	movs	r2, #36	; 0x24
 800ba18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	681a      	ldr	r2, [r3, #0]
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	f022 0201 	bic.w	r2, r2, #1
 800ba2a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f000 fc01 	bl	800c234 <UART_SetConfig>
 800ba32:	4603      	mov	r3, r0
 800ba34:	2b01      	cmp	r3, #1
 800ba36:	d101      	bne.n	800ba3c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ba38:	2301      	movs	r3, #1
 800ba3a:	e022      	b.n	800ba82 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d002      	beq.n	800ba4a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f000 fec1 	bl	800c7cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	685a      	ldr	r2, [r3, #4]
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ba58:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	689a      	ldr	r2, [r3, #8]
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ba68:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	681a      	ldr	r2, [r3, #0]
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	f042 0201 	orr.w	r2, r2, #1
 800ba78:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f000 ff48 	bl	800c910 <UART_CheckIdleState>
 800ba80:	4603      	mov	r3, r0
}
 800ba82:	4618      	mov	r0, r3
 800ba84:	3708      	adds	r7, #8
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}
	...

0800ba8c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b08a      	sub	sp, #40	; 0x28
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	60f8      	str	r0, [r7, #12]
 800ba94:	60b9      	str	r1, [r7, #8]
 800ba96:	4613      	mov	r3, r2
 800ba98:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800baa0:	2b20      	cmp	r3, #32
 800baa2:	d17a      	bne.n	800bb9a <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d002      	beq.n	800bab0 <HAL_UART_Transmit_DMA+0x24>
 800baaa:	88fb      	ldrh	r3, [r7, #6]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d101      	bne.n	800bab4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800bab0:	2301      	movs	r3, #1
 800bab2:	e073      	b.n	800bb9c <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800baba:	2b01      	cmp	r3, #1
 800babc:	d101      	bne.n	800bac2 <HAL_UART_Transmit_DMA+0x36>
 800babe:	2302      	movs	r3, #2
 800bac0:	e06c      	b.n	800bb9c <HAL_UART_Transmit_DMA+0x110>
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	2201      	movs	r2, #1
 800bac6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	68ba      	ldr	r2, [r7, #8]
 800bace:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	88fa      	ldrh	r2, [r7, #6]
 800bad4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	88fa      	ldrh	r2, [r7, #6]
 800badc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	2200      	movs	r2, #0
 800bae4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	2221      	movs	r2, #33	; 0x21
 800baec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d02c      	beq.n	800bb52 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bafc:	4a29      	ldr	r2, [pc, #164]	; (800bba4 <HAL_UART_Transmit_DMA+0x118>)
 800bafe:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb04:	4a28      	ldr	r2, [pc, #160]	; (800bba8 <HAL_UART_Transmit_DMA+0x11c>)
 800bb06:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb0c:	4a27      	ldr	r2, [pc, #156]	; (800bbac <HAL_UART_Transmit_DMA+0x120>)
 800bb0e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb14:	2200      	movs	r2, #0
 800bb16:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb20:	4619      	mov	r1, r3
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	3328      	adds	r3, #40	; 0x28
 800bb28:	461a      	mov	r2, r3
 800bb2a:	88fb      	ldrh	r3, [r7, #6]
 800bb2c:	f7fb fad8 	bl	80070e0 <HAL_DMA_Start_IT>
 800bb30:	4603      	mov	r3, r0
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d00d      	beq.n	800bb52 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	2210      	movs	r2, #16
 800bb3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	2200      	movs	r2, #0
 800bb42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	2220      	movs	r2, #32
 800bb4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800bb4e:	2301      	movs	r3, #1
 800bb50:	e024      	b.n	800bb9c <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	2240      	movs	r2, #64	; 0x40
 800bb58:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	3308      	adds	r3, #8
 800bb68:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb6a:	697b      	ldr	r3, [r7, #20]
 800bb6c:	e853 3f00 	ldrex	r3, [r3]
 800bb70:	613b      	str	r3, [r7, #16]
   return(result);
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb78:	627b      	str	r3, [r7, #36]	; 0x24
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	3308      	adds	r3, #8
 800bb80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb82:	623a      	str	r2, [r7, #32]
 800bb84:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb86:	69f9      	ldr	r1, [r7, #28]
 800bb88:	6a3a      	ldr	r2, [r7, #32]
 800bb8a:	e841 2300 	strex	r3, r2, [r1]
 800bb8e:	61bb      	str	r3, [r7, #24]
   return(result);
 800bb90:	69bb      	ldr	r3, [r7, #24]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d1e5      	bne.n	800bb62 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800bb96:	2300      	movs	r3, #0
 800bb98:	e000      	b.n	800bb9c <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800bb9a:	2302      	movs	r3, #2
  }
}
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	3728      	adds	r7, #40	; 0x28
 800bba0:	46bd      	mov	sp, r7
 800bba2:	bd80      	pop	{r7, pc}
 800bba4:	0800cc85 	.word	0x0800cc85
 800bba8:	0800cd1f 	.word	0x0800cd1f
 800bbac:	0800cd3b 	.word	0x0800cd3b

0800bbb0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b0ba      	sub	sp, #232	; 0xe8
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	69db      	ldr	r3, [r3, #28]
 800bbbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	689b      	ldr	r3, [r3, #8]
 800bbd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bbd6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800bbda:	f640 030f 	movw	r3, #2063	; 0x80f
 800bbde:	4013      	ands	r3, r2
 800bbe0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800bbe4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d11b      	bne.n	800bc24 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bbec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbf0:	f003 0320 	and.w	r3, r3, #32
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d015      	beq.n	800bc24 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bbf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bbfc:	f003 0320 	and.w	r3, r3, #32
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d105      	bne.n	800bc10 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bc04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d009      	beq.n	800bc24 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	f000 82d6 	beq.w	800c1c6 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc1e:	6878      	ldr	r0, [r7, #4]
 800bc20:	4798      	blx	r3
      }
      return;
 800bc22:	e2d0      	b.n	800c1c6 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bc24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	f000 811f 	beq.w	800be6c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bc2e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bc32:	4b8b      	ldr	r3, [pc, #556]	; (800be60 <HAL_UART_IRQHandler+0x2b0>)
 800bc34:	4013      	ands	r3, r2
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d106      	bne.n	800bc48 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bc3a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800bc3e:	4b89      	ldr	r3, [pc, #548]	; (800be64 <HAL_UART_IRQHandler+0x2b4>)
 800bc40:	4013      	ands	r3, r2
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	f000 8112 	beq.w	800be6c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bc48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc4c:	f003 0301 	and.w	r3, r3, #1
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d011      	beq.n	800bc78 <HAL_UART_IRQHandler+0xc8>
 800bc54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d00b      	beq.n	800bc78 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	2201      	movs	r2, #1
 800bc66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc6e:	f043 0201 	orr.w	r2, r3, #1
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bc78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc7c:	f003 0302 	and.w	r3, r3, #2
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d011      	beq.n	800bca8 <HAL_UART_IRQHandler+0xf8>
 800bc84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc88:	f003 0301 	and.w	r3, r3, #1
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d00b      	beq.n	800bca8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	2202      	movs	r2, #2
 800bc96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc9e:	f043 0204 	orr.w	r2, r3, #4
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcac:	f003 0304 	and.w	r3, r3, #4
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d011      	beq.n	800bcd8 <HAL_UART_IRQHandler+0x128>
 800bcb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bcb8:	f003 0301 	and.w	r3, r3, #1
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d00b      	beq.n	800bcd8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	2204      	movs	r2, #4
 800bcc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bcce:	f043 0202 	orr.w	r2, r3, #2
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bcd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcdc:	f003 0308 	and.w	r3, r3, #8
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d017      	beq.n	800bd14 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bce8:	f003 0320 	and.w	r3, r3, #32
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d105      	bne.n	800bcfc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bcf0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bcf4:	4b5a      	ldr	r3, [pc, #360]	; (800be60 <HAL_UART_IRQHandler+0x2b0>)
 800bcf6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d00b      	beq.n	800bd14 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	2208      	movs	r2, #8
 800bd02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd0a:	f043 0208 	orr.w	r2, r3, #8
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bd14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d012      	beq.n	800bd46 <HAL_UART_IRQHandler+0x196>
 800bd20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d00c      	beq.n	800bd46 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bd34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd3c:	f043 0220 	orr.w	r2, r3, #32
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	f000 823c 	beq.w	800c1ca <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bd52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd56:	f003 0320 	and.w	r3, r3, #32
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d013      	beq.n	800bd86 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bd5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd62:	f003 0320 	and.w	r3, r3, #32
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d105      	bne.n	800bd76 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bd6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d007      	beq.n	800bd86 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d003      	beq.n	800bd86 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd82:	6878      	ldr	r0, [r7, #4]
 800bd84:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd8c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	689b      	ldr	r3, [r3, #8]
 800bd96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd9a:	2b40      	cmp	r3, #64	; 0x40
 800bd9c:	d005      	beq.n	800bdaa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bd9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bda2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d04f      	beq.n	800be4a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bdaa:	6878      	ldr	r0, [r7, #4]
 800bdac:	f000 ff04 	bl	800cbb8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	689b      	ldr	r3, [r3, #8]
 800bdb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdba:	2b40      	cmp	r3, #64	; 0x40
 800bdbc:	d141      	bne.n	800be42 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	3308      	adds	r3, #8
 800bdc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bdcc:	e853 3f00 	ldrex	r3, [r3]
 800bdd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bdd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bdd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bddc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	3308      	adds	r3, #8
 800bde6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bdea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bdee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdf2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bdf6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bdfa:	e841 2300 	strex	r3, r2, [r1]
 800bdfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800be02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800be06:	2b00      	cmp	r3, #0
 800be08:	d1d9      	bne.n	800bdbe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d013      	beq.n	800be3a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be16:	4a14      	ldr	r2, [pc, #80]	; (800be68 <HAL_UART_IRQHandler+0x2b8>)
 800be18:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be1e:	4618      	mov	r0, r3
 800be20:	f7fb fa32 	bl	8007288 <HAL_DMA_Abort_IT>
 800be24:	4603      	mov	r3, r0
 800be26:	2b00      	cmp	r3, #0
 800be28:	d017      	beq.n	800be5a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be30:	687a      	ldr	r2, [r7, #4]
 800be32:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800be34:	4610      	mov	r0, r2
 800be36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be38:	e00f      	b.n	800be5a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f000 f9e4 	bl	800c208 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be40:	e00b      	b.n	800be5a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800be42:	6878      	ldr	r0, [r7, #4]
 800be44:	f000 f9e0 	bl	800c208 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be48:	e007      	b.n	800be5a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	f000 f9dc 	bl	800c208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2200      	movs	r2, #0
 800be54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800be58:	e1b7      	b.n	800c1ca <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be5a:	bf00      	nop
    return;
 800be5c:	e1b5      	b.n	800c1ca <HAL_UART_IRQHandler+0x61a>
 800be5e:	bf00      	nop
 800be60:	10000001 	.word	0x10000001
 800be64:	04000120 	.word	0x04000120
 800be68:	0800cdbb 	.word	0x0800cdbb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be70:	2b01      	cmp	r3, #1
 800be72:	f040 814a 	bne.w	800c10a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800be76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be7a:	f003 0310 	and.w	r3, r3, #16
 800be7e:	2b00      	cmp	r3, #0
 800be80:	f000 8143 	beq.w	800c10a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800be84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be88:	f003 0310 	and.w	r3, r3, #16
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	f000 813c 	beq.w	800c10a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	2210      	movs	r2, #16
 800be98:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	689b      	ldr	r3, [r3, #8]
 800bea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bea4:	2b40      	cmp	r3, #64	; 0x40
 800bea6:	f040 80b5 	bne.w	800c014 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	685b      	ldr	r3, [r3, #4]
 800beb2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800beb6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800beba:	2b00      	cmp	r3, #0
 800bebc:	f000 8187 	beq.w	800c1ce <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bec6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800beca:	429a      	cmp	r2, r3
 800becc:	f080 817f 	bcs.w	800c1ce <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bed6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	f003 0320 	and.w	r3, r3, #32
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	f040 8086 	bne.w	800bff8 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bef4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bef8:	e853 3f00 	ldrex	r3, [r3]
 800befc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bf00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bf04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bf08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	461a      	mov	r2, r3
 800bf12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bf16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bf1a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bf22:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bf26:	e841 2300 	strex	r3, r2, [r1]
 800bf2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bf2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d1da      	bne.n	800beec <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	3308      	adds	r3, #8
 800bf3c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf40:	e853 3f00 	ldrex	r3, [r3]
 800bf44:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bf46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bf48:	f023 0301 	bic.w	r3, r3, #1
 800bf4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	3308      	adds	r3, #8
 800bf56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bf5a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bf5e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf60:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bf62:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bf66:	e841 2300 	strex	r3, r2, [r1]
 800bf6a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bf6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d1e1      	bne.n	800bf36 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	3308      	adds	r3, #8
 800bf78:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bf7c:	e853 3f00 	ldrex	r3, [r3]
 800bf80:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bf82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	3308      	adds	r3, #8
 800bf92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bf96:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bf98:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf9a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bf9c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bf9e:	e841 2300 	strex	r3, r2, [r1]
 800bfa2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bfa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d1e3      	bne.n	800bf72 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2220      	movs	r2, #32
 800bfae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfc0:	e853 3f00 	ldrex	r3, [r3]
 800bfc4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bfc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bfc8:	f023 0310 	bic.w	r3, r3, #16
 800bfcc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	461a      	mov	r2, r3
 800bfd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bfda:	65bb      	str	r3, [r7, #88]	; 0x58
 800bfdc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfde:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bfe0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bfe2:	e841 2300 	strex	r3, r2, [r1]
 800bfe6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bfe8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d1e4      	bne.n	800bfb8 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bff2:	4618      	mov	r0, r3
 800bff4:	f7fb f8ef 	bl	80071d6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c004:	b29b      	uxth	r3, r3
 800c006:	1ad3      	subs	r3, r2, r3
 800c008:	b29b      	uxth	r3, r3
 800c00a:	4619      	mov	r1, r3
 800c00c:	6878      	ldr	r0, [r7, #4]
 800c00e:	f000 f905 	bl	800c21c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c012:	e0dc      	b.n	800c1ce <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c020:	b29b      	uxth	r3, r3
 800c022:	1ad3      	subs	r3, r2, r3
 800c024:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c02e:	b29b      	uxth	r3, r3
 800c030:	2b00      	cmp	r3, #0
 800c032:	f000 80ce 	beq.w	800c1d2 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800c036:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	f000 80c9 	beq.w	800c1d2 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c048:	e853 3f00 	ldrex	r3, [r3]
 800c04c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c04e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c050:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c054:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	461a      	mov	r2, r3
 800c05e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c062:	647b      	str	r3, [r7, #68]	; 0x44
 800c064:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c066:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c068:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c06a:	e841 2300 	strex	r3, r2, [r1]
 800c06e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c072:	2b00      	cmp	r3, #0
 800c074:	d1e4      	bne.n	800c040 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	3308      	adds	r3, #8
 800c07c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c080:	e853 3f00 	ldrex	r3, [r3]
 800c084:	623b      	str	r3, [r7, #32]
   return(result);
 800c086:	6a3b      	ldr	r3, [r7, #32]
 800c088:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c08c:	f023 0301 	bic.w	r3, r3, #1
 800c090:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	3308      	adds	r3, #8
 800c09a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c09e:	633a      	str	r2, [r7, #48]	; 0x30
 800c0a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c0a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c0a6:	e841 2300 	strex	r3, r2, [r1]
 800c0aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d1e1      	bne.n	800c076 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	2220      	movs	r2, #32
 800c0b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	2200      	movs	r2, #0
 800c0be:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0cc:	693b      	ldr	r3, [r7, #16]
 800c0ce:	e853 3f00 	ldrex	r3, [r3]
 800c0d2:	60fb      	str	r3, [r7, #12]
   return(result);
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	f023 0310 	bic.w	r3, r3, #16
 800c0da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	461a      	mov	r2, r3
 800c0e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c0e8:	61fb      	str	r3, [r7, #28]
 800c0ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0ec:	69b9      	ldr	r1, [r7, #24]
 800c0ee:	69fa      	ldr	r2, [r7, #28]
 800c0f0:	e841 2300 	strex	r3, r2, [r1]
 800c0f4:	617b      	str	r3, [r7, #20]
   return(result);
 800c0f6:	697b      	ldr	r3, [r7, #20]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d1e4      	bne.n	800c0c6 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c0fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c100:	4619      	mov	r1, r3
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	f000 f88a 	bl	800c21c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c108:	e063      	b.n	800c1d2 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c10a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c10e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c112:	2b00      	cmp	r3, #0
 800c114:	d00e      	beq.n	800c134 <HAL_UART_IRQHandler+0x584>
 800c116:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c11a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d008      	beq.n	800c134 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c12a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	f000 fe85 	bl	800ce3c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c132:	e051      	b.n	800c1d8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c138:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d014      	beq.n	800c16a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d105      	bne.n	800c158 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c14c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c150:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c154:	2b00      	cmp	r3, #0
 800c156:	d008      	beq.n	800c16a <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d03a      	beq.n	800c1d6 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c164:	6878      	ldr	r0, [r7, #4]
 800c166:	4798      	blx	r3
    }
    return;
 800c168:	e035      	b.n	800c1d6 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c16a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c16e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c172:	2b00      	cmp	r3, #0
 800c174:	d009      	beq.n	800c18a <HAL_UART_IRQHandler+0x5da>
 800c176:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c17a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d003      	beq.n	800c18a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	f000 fe2f 	bl	800cde6 <UART_EndTransmit_IT>
    return;
 800c188:	e026      	b.n	800c1d8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c18a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c18e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c192:	2b00      	cmp	r3, #0
 800c194:	d009      	beq.n	800c1aa <HAL_UART_IRQHandler+0x5fa>
 800c196:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c19a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d003      	beq.n	800c1aa <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f000 fe5e 	bl	800ce64 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c1a8:	e016      	b.n	800c1d8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c1aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d010      	beq.n	800c1d8 <HAL_UART_IRQHandler+0x628>
 800c1b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	da0c      	bge.n	800c1d8 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f000 fe46 	bl	800ce50 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c1c4:	e008      	b.n	800c1d8 <HAL_UART_IRQHandler+0x628>
      return;
 800c1c6:	bf00      	nop
 800c1c8:	e006      	b.n	800c1d8 <HAL_UART_IRQHandler+0x628>
    return;
 800c1ca:	bf00      	nop
 800c1cc:	e004      	b.n	800c1d8 <HAL_UART_IRQHandler+0x628>
      return;
 800c1ce:	bf00      	nop
 800c1d0:	e002      	b.n	800c1d8 <HAL_UART_IRQHandler+0x628>
      return;
 800c1d2:	bf00      	nop
 800c1d4:	e000      	b.n	800c1d8 <HAL_UART_IRQHandler+0x628>
    return;
 800c1d6:	bf00      	nop
  }
}
 800c1d8:	37e8      	adds	r7, #232	; 0xe8
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd80      	pop	{r7, pc}
 800c1de:	bf00      	nop

0800c1e0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c1e0:	b480      	push	{r7}
 800c1e2:	b083      	sub	sp, #12
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c1e8:	bf00      	nop
 800c1ea:	370c      	adds	r7, #12
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f2:	4770      	bx	lr

0800c1f4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c1f4:	b480      	push	{r7}
 800c1f6:	b083      	sub	sp, #12
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c1fc:	bf00      	nop
 800c1fe:	370c      	adds	r7, #12
 800c200:	46bd      	mov	sp, r7
 800c202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c206:	4770      	bx	lr

0800c208 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c208:	b480      	push	{r7}
 800c20a:	b083      	sub	sp, #12
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c210:	bf00      	nop
 800c212:	370c      	adds	r7, #12
 800c214:	46bd      	mov	sp, r7
 800c216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21a:	4770      	bx	lr

0800c21c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c21c:	b480      	push	{r7}
 800c21e:	b083      	sub	sp, #12
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
 800c224:	460b      	mov	r3, r1
 800c226:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c228:	bf00      	nop
 800c22a:	370c      	adds	r7, #12
 800c22c:	46bd      	mov	sp, r7
 800c22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c232:	4770      	bx	lr

0800c234 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c234:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c238:	b08c      	sub	sp, #48	; 0x30
 800c23a:	af00      	add	r7, sp, #0
 800c23c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c23e:	2300      	movs	r3, #0
 800c240:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c244:	697b      	ldr	r3, [r7, #20]
 800c246:	689a      	ldr	r2, [r3, #8]
 800c248:	697b      	ldr	r3, [r7, #20]
 800c24a:	691b      	ldr	r3, [r3, #16]
 800c24c:	431a      	orrs	r2, r3
 800c24e:	697b      	ldr	r3, [r7, #20]
 800c250:	695b      	ldr	r3, [r3, #20]
 800c252:	431a      	orrs	r2, r3
 800c254:	697b      	ldr	r3, [r7, #20]
 800c256:	69db      	ldr	r3, [r3, #28]
 800c258:	4313      	orrs	r3, r2
 800c25a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c25c:	697b      	ldr	r3, [r7, #20]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	681a      	ldr	r2, [r3, #0]
 800c262:	4bab      	ldr	r3, [pc, #684]	; (800c510 <UART_SetConfig+0x2dc>)
 800c264:	4013      	ands	r3, r2
 800c266:	697a      	ldr	r2, [r7, #20]
 800c268:	6812      	ldr	r2, [r2, #0]
 800c26a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c26c:	430b      	orrs	r3, r1
 800c26e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c270:	697b      	ldr	r3, [r7, #20]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	685b      	ldr	r3, [r3, #4]
 800c276:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c27a:	697b      	ldr	r3, [r7, #20]
 800c27c:	68da      	ldr	r2, [r3, #12]
 800c27e:	697b      	ldr	r3, [r7, #20]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	430a      	orrs	r2, r1
 800c284:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c286:	697b      	ldr	r3, [r7, #20]
 800c288:	699b      	ldr	r3, [r3, #24]
 800c28a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c28c:	697b      	ldr	r3, [r7, #20]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	4aa0      	ldr	r2, [pc, #640]	; (800c514 <UART_SetConfig+0x2e0>)
 800c292:	4293      	cmp	r3, r2
 800c294:	d004      	beq.n	800c2a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c296:	697b      	ldr	r3, [r7, #20]
 800c298:	6a1b      	ldr	r3, [r3, #32]
 800c29a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c29c:	4313      	orrs	r3, r2
 800c29e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c2a0:	697b      	ldr	r3, [r7, #20]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	689b      	ldr	r3, [r3, #8]
 800c2a6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800c2aa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800c2ae:	697a      	ldr	r2, [r7, #20]
 800c2b0:	6812      	ldr	r2, [r2, #0]
 800c2b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c2b4:	430b      	orrs	r3, r1
 800c2b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c2b8:	697b      	ldr	r3, [r7, #20]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2be:	f023 010f 	bic.w	r1, r3, #15
 800c2c2:	697b      	ldr	r3, [r7, #20]
 800c2c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c2c6:	697b      	ldr	r3, [r7, #20]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	430a      	orrs	r2, r1
 800c2cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c2ce:	697b      	ldr	r3, [r7, #20]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	4a91      	ldr	r2, [pc, #580]	; (800c518 <UART_SetConfig+0x2e4>)
 800c2d4:	4293      	cmp	r3, r2
 800c2d6:	d125      	bne.n	800c324 <UART_SetConfig+0xf0>
 800c2d8:	4b90      	ldr	r3, [pc, #576]	; (800c51c <UART_SetConfig+0x2e8>)
 800c2da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2de:	f003 0303 	and.w	r3, r3, #3
 800c2e2:	2b03      	cmp	r3, #3
 800c2e4:	d81a      	bhi.n	800c31c <UART_SetConfig+0xe8>
 800c2e6:	a201      	add	r2, pc, #4	; (adr r2, 800c2ec <UART_SetConfig+0xb8>)
 800c2e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2ec:	0800c2fd 	.word	0x0800c2fd
 800c2f0:	0800c30d 	.word	0x0800c30d
 800c2f4:	0800c305 	.word	0x0800c305
 800c2f8:	0800c315 	.word	0x0800c315
 800c2fc:	2301      	movs	r3, #1
 800c2fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c302:	e0d6      	b.n	800c4b2 <UART_SetConfig+0x27e>
 800c304:	2302      	movs	r3, #2
 800c306:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c30a:	e0d2      	b.n	800c4b2 <UART_SetConfig+0x27e>
 800c30c:	2304      	movs	r3, #4
 800c30e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c312:	e0ce      	b.n	800c4b2 <UART_SetConfig+0x27e>
 800c314:	2308      	movs	r3, #8
 800c316:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c31a:	e0ca      	b.n	800c4b2 <UART_SetConfig+0x27e>
 800c31c:	2310      	movs	r3, #16
 800c31e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c322:	e0c6      	b.n	800c4b2 <UART_SetConfig+0x27e>
 800c324:	697b      	ldr	r3, [r7, #20]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	4a7d      	ldr	r2, [pc, #500]	; (800c520 <UART_SetConfig+0x2ec>)
 800c32a:	4293      	cmp	r3, r2
 800c32c:	d138      	bne.n	800c3a0 <UART_SetConfig+0x16c>
 800c32e:	4b7b      	ldr	r3, [pc, #492]	; (800c51c <UART_SetConfig+0x2e8>)
 800c330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c334:	f003 030c 	and.w	r3, r3, #12
 800c338:	2b0c      	cmp	r3, #12
 800c33a:	d82d      	bhi.n	800c398 <UART_SetConfig+0x164>
 800c33c:	a201      	add	r2, pc, #4	; (adr r2, 800c344 <UART_SetConfig+0x110>)
 800c33e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c342:	bf00      	nop
 800c344:	0800c379 	.word	0x0800c379
 800c348:	0800c399 	.word	0x0800c399
 800c34c:	0800c399 	.word	0x0800c399
 800c350:	0800c399 	.word	0x0800c399
 800c354:	0800c389 	.word	0x0800c389
 800c358:	0800c399 	.word	0x0800c399
 800c35c:	0800c399 	.word	0x0800c399
 800c360:	0800c399 	.word	0x0800c399
 800c364:	0800c381 	.word	0x0800c381
 800c368:	0800c399 	.word	0x0800c399
 800c36c:	0800c399 	.word	0x0800c399
 800c370:	0800c399 	.word	0x0800c399
 800c374:	0800c391 	.word	0x0800c391
 800c378:	2300      	movs	r3, #0
 800c37a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c37e:	e098      	b.n	800c4b2 <UART_SetConfig+0x27e>
 800c380:	2302      	movs	r3, #2
 800c382:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c386:	e094      	b.n	800c4b2 <UART_SetConfig+0x27e>
 800c388:	2304      	movs	r3, #4
 800c38a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c38e:	e090      	b.n	800c4b2 <UART_SetConfig+0x27e>
 800c390:	2308      	movs	r3, #8
 800c392:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c396:	e08c      	b.n	800c4b2 <UART_SetConfig+0x27e>
 800c398:	2310      	movs	r3, #16
 800c39a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c39e:	e088      	b.n	800c4b2 <UART_SetConfig+0x27e>
 800c3a0:	697b      	ldr	r3, [r7, #20]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	4a5f      	ldr	r2, [pc, #380]	; (800c524 <UART_SetConfig+0x2f0>)
 800c3a6:	4293      	cmp	r3, r2
 800c3a8:	d125      	bne.n	800c3f6 <UART_SetConfig+0x1c2>
 800c3aa:	4b5c      	ldr	r3, [pc, #368]	; (800c51c <UART_SetConfig+0x2e8>)
 800c3ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c3b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c3b4:	2b30      	cmp	r3, #48	; 0x30
 800c3b6:	d016      	beq.n	800c3e6 <UART_SetConfig+0x1b2>
 800c3b8:	2b30      	cmp	r3, #48	; 0x30
 800c3ba:	d818      	bhi.n	800c3ee <UART_SetConfig+0x1ba>
 800c3bc:	2b20      	cmp	r3, #32
 800c3be:	d00a      	beq.n	800c3d6 <UART_SetConfig+0x1a2>
 800c3c0:	2b20      	cmp	r3, #32
 800c3c2:	d814      	bhi.n	800c3ee <UART_SetConfig+0x1ba>
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d002      	beq.n	800c3ce <UART_SetConfig+0x19a>
 800c3c8:	2b10      	cmp	r3, #16
 800c3ca:	d008      	beq.n	800c3de <UART_SetConfig+0x1aa>
 800c3cc:	e00f      	b.n	800c3ee <UART_SetConfig+0x1ba>
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c3d4:	e06d      	b.n	800c4b2 <UART_SetConfig+0x27e>
 800c3d6:	2302      	movs	r3, #2
 800c3d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c3dc:	e069      	b.n	800c4b2 <UART_SetConfig+0x27e>
 800c3de:	2304      	movs	r3, #4
 800c3e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c3e4:	e065      	b.n	800c4b2 <UART_SetConfig+0x27e>
 800c3e6:	2308      	movs	r3, #8
 800c3e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c3ec:	e061      	b.n	800c4b2 <UART_SetConfig+0x27e>
 800c3ee:	2310      	movs	r3, #16
 800c3f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c3f4:	e05d      	b.n	800c4b2 <UART_SetConfig+0x27e>
 800c3f6:	697b      	ldr	r3, [r7, #20]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	4a4b      	ldr	r2, [pc, #300]	; (800c528 <UART_SetConfig+0x2f4>)
 800c3fc:	4293      	cmp	r3, r2
 800c3fe:	d125      	bne.n	800c44c <UART_SetConfig+0x218>
 800c400:	4b46      	ldr	r3, [pc, #280]	; (800c51c <UART_SetConfig+0x2e8>)
 800c402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c406:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c40a:	2bc0      	cmp	r3, #192	; 0xc0
 800c40c:	d016      	beq.n	800c43c <UART_SetConfig+0x208>
 800c40e:	2bc0      	cmp	r3, #192	; 0xc0
 800c410:	d818      	bhi.n	800c444 <UART_SetConfig+0x210>
 800c412:	2b80      	cmp	r3, #128	; 0x80
 800c414:	d00a      	beq.n	800c42c <UART_SetConfig+0x1f8>
 800c416:	2b80      	cmp	r3, #128	; 0x80
 800c418:	d814      	bhi.n	800c444 <UART_SetConfig+0x210>
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d002      	beq.n	800c424 <UART_SetConfig+0x1f0>
 800c41e:	2b40      	cmp	r3, #64	; 0x40
 800c420:	d008      	beq.n	800c434 <UART_SetConfig+0x200>
 800c422:	e00f      	b.n	800c444 <UART_SetConfig+0x210>
 800c424:	2300      	movs	r3, #0
 800c426:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c42a:	e042      	b.n	800c4b2 <UART_SetConfig+0x27e>
 800c42c:	2302      	movs	r3, #2
 800c42e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c432:	e03e      	b.n	800c4b2 <UART_SetConfig+0x27e>
 800c434:	2304      	movs	r3, #4
 800c436:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c43a:	e03a      	b.n	800c4b2 <UART_SetConfig+0x27e>
 800c43c:	2308      	movs	r3, #8
 800c43e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c442:	e036      	b.n	800c4b2 <UART_SetConfig+0x27e>
 800c444:	2310      	movs	r3, #16
 800c446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c44a:	e032      	b.n	800c4b2 <UART_SetConfig+0x27e>
 800c44c:	697b      	ldr	r3, [r7, #20]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	4a30      	ldr	r2, [pc, #192]	; (800c514 <UART_SetConfig+0x2e0>)
 800c452:	4293      	cmp	r3, r2
 800c454:	d12a      	bne.n	800c4ac <UART_SetConfig+0x278>
 800c456:	4b31      	ldr	r3, [pc, #196]	; (800c51c <UART_SetConfig+0x2e8>)
 800c458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c45c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c460:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c464:	d01a      	beq.n	800c49c <UART_SetConfig+0x268>
 800c466:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c46a:	d81b      	bhi.n	800c4a4 <UART_SetConfig+0x270>
 800c46c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c470:	d00c      	beq.n	800c48c <UART_SetConfig+0x258>
 800c472:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c476:	d815      	bhi.n	800c4a4 <UART_SetConfig+0x270>
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d003      	beq.n	800c484 <UART_SetConfig+0x250>
 800c47c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c480:	d008      	beq.n	800c494 <UART_SetConfig+0x260>
 800c482:	e00f      	b.n	800c4a4 <UART_SetConfig+0x270>
 800c484:	2300      	movs	r3, #0
 800c486:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c48a:	e012      	b.n	800c4b2 <UART_SetConfig+0x27e>
 800c48c:	2302      	movs	r3, #2
 800c48e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c492:	e00e      	b.n	800c4b2 <UART_SetConfig+0x27e>
 800c494:	2304      	movs	r3, #4
 800c496:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c49a:	e00a      	b.n	800c4b2 <UART_SetConfig+0x27e>
 800c49c:	2308      	movs	r3, #8
 800c49e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c4a2:	e006      	b.n	800c4b2 <UART_SetConfig+0x27e>
 800c4a4:	2310      	movs	r3, #16
 800c4a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c4aa:	e002      	b.n	800c4b2 <UART_SetConfig+0x27e>
 800c4ac:	2310      	movs	r3, #16
 800c4ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c4b2:	697b      	ldr	r3, [r7, #20]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	4a17      	ldr	r2, [pc, #92]	; (800c514 <UART_SetConfig+0x2e0>)
 800c4b8:	4293      	cmp	r3, r2
 800c4ba:	f040 80a8 	bne.w	800c60e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c4be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c4c2:	2b08      	cmp	r3, #8
 800c4c4:	d834      	bhi.n	800c530 <UART_SetConfig+0x2fc>
 800c4c6:	a201      	add	r2, pc, #4	; (adr r2, 800c4cc <UART_SetConfig+0x298>)
 800c4c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4cc:	0800c4f1 	.word	0x0800c4f1
 800c4d0:	0800c531 	.word	0x0800c531
 800c4d4:	0800c4f9 	.word	0x0800c4f9
 800c4d8:	0800c531 	.word	0x0800c531
 800c4dc:	0800c4ff 	.word	0x0800c4ff
 800c4e0:	0800c531 	.word	0x0800c531
 800c4e4:	0800c531 	.word	0x0800c531
 800c4e8:	0800c531 	.word	0x0800c531
 800c4ec:	0800c507 	.word	0x0800c507
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c4f0:	f7fc fdba 	bl	8009068 <HAL_RCC_GetPCLK1Freq>
 800c4f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c4f6:	e021      	b.n	800c53c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c4f8:	4b0c      	ldr	r3, [pc, #48]	; (800c52c <UART_SetConfig+0x2f8>)
 800c4fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c4fc:	e01e      	b.n	800c53c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c4fe:	f7fc fd47 	bl	8008f90 <HAL_RCC_GetSysClockFreq>
 800c502:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c504:	e01a      	b.n	800c53c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c50a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c50c:	e016      	b.n	800c53c <UART_SetConfig+0x308>
 800c50e:	bf00      	nop
 800c510:	cfff69f3 	.word	0xcfff69f3
 800c514:	40008000 	.word	0x40008000
 800c518:	40013800 	.word	0x40013800
 800c51c:	40021000 	.word	0x40021000
 800c520:	40004400 	.word	0x40004400
 800c524:	40004800 	.word	0x40004800
 800c528:	40004c00 	.word	0x40004c00
 800c52c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800c530:	2300      	movs	r3, #0
 800c532:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c534:	2301      	movs	r3, #1
 800c536:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c53a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c53e:	2b00      	cmp	r3, #0
 800c540:	f000 812a 	beq.w	800c798 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c544:	697b      	ldr	r3, [r7, #20]
 800c546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c548:	4a9e      	ldr	r2, [pc, #632]	; (800c7c4 <UART_SetConfig+0x590>)
 800c54a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c54e:	461a      	mov	r2, r3
 800c550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c552:	fbb3 f3f2 	udiv	r3, r3, r2
 800c556:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c558:	697b      	ldr	r3, [r7, #20]
 800c55a:	685a      	ldr	r2, [r3, #4]
 800c55c:	4613      	mov	r3, r2
 800c55e:	005b      	lsls	r3, r3, #1
 800c560:	4413      	add	r3, r2
 800c562:	69ba      	ldr	r2, [r7, #24]
 800c564:	429a      	cmp	r2, r3
 800c566:	d305      	bcc.n	800c574 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c568:	697b      	ldr	r3, [r7, #20]
 800c56a:	685b      	ldr	r3, [r3, #4]
 800c56c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c56e:	69ba      	ldr	r2, [r7, #24]
 800c570:	429a      	cmp	r2, r3
 800c572:	d903      	bls.n	800c57c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800c574:	2301      	movs	r3, #1
 800c576:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c57a:	e10d      	b.n	800c798 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c57e:	2200      	movs	r2, #0
 800c580:	60bb      	str	r3, [r7, #8]
 800c582:	60fa      	str	r2, [r7, #12]
 800c584:	697b      	ldr	r3, [r7, #20]
 800c586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c588:	4a8e      	ldr	r2, [pc, #568]	; (800c7c4 <UART_SetConfig+0x590>)
 800c58a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c58e:	b29b      	uxth	r3, r3
 800c590:	2200      	movs	r2, #0
 800c592:	603b      	str	r3, [r7, #0]
 800c594:	607a      	str	r2, [r7, #4]
 800c596:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c59a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c59e:	f7f4 fb7b 	bl	8000c98 <__aeabi_uldivmod>
 800c5a2:	4602      	mov	r2, r0
 800c5a4:	460b      	mov	r3, r1
 800c5a6:	4610      	mov	r0, r2
 800c5a8:	4619      	mov	r1, r3
 800c5aa:	f04f 0200 	mov.w	r2, #0
 800c5ae:	f04f 0300 	mov.w	r3, #0
 800c5b2:	020b      	lsls	r3, r1, #8
 800c5b4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c5b8:	0202      	lsls	r2, r0, #8
 800c5ba:	6979      	ldr	r1, [r7, #20]
 800c5bc:	6849      	ldr	r1, [r1, #4]
 800c5be:	0849      	lsrs	r1, r1, #1
 800c5c0:	2000      	movs	r0, #0
 800c5c2:	460c      	mov	r4, r1
 800c5c4:	4605      	mov	r5, r0
 800c5c6:	eb12 0804 	adds.w	r8, r2, r4
 800c5ca:	eb43 0905 	adc.w	r9, r3, r5
 800c5ce:	697b      	ldr	r3, [r7, #20]
 800c5d0:	685b      	ldr	r3, [r3, #4]
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	469a      	mov	sl, r3
 800c5d6:	4693      	mov	fp, r2
 800c5d8:	4652      	mov	r2, sl
 800c5da:	465b      	mov	r3, fp
 800c5dc:	4640      	mov	r0, r8
 800c5de:	4649      	mov	r1, r9
 800c5e0:	f7f4 fb5a 	bl	8000c98 <__aeabi_uldivmod>
 800c5e4:	4602      	mov	r2, r0
 800c5e6:	460b      	mov	r3, r1
 800c5e8:	4613      	mov	r3, r2
 800c5ea:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c5ec:	6a3b      	ldr	r3, [r7, #32]
 800c5ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c5f2:	d308      	bcc.n	800c606 <UART_SetConfig+0x3d2>
 800c5f4:	6a3b      	ldr	r3, [r7, #32]
 800c5f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c5fa:	d204      	bcs.n	800c606 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800c5fc:	697b      	ldr	r3, [r7, #20]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	6a3a      	ldr	r2, [r7, #32]
 800c602:	60da      	str	r2, [r3, #12]
 800c604:	e0c8      	b.n	800c798 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800c606:	2301      	movs	r3, #1
 800c608:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c60c:	e0c4      	b.n	800c798 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c60e:	697b      	ldr	r3, [r7, #20]
 800c610:	69db      	ldr	r3, [r3, #28]
 800c612:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c616:	d167      	bne.n	800c6e8 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800c618:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c61c:	2b08      	cmp	r3, #8
 800c61e:	d828      	bhi.n	800c672 <UART_SetConfig+0x43e>
 800c620:	a201      	add	r2, pc, #4	; (adr r2, 800c628 <UART_SetConfig+0x3f4>)
 800c622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c626:	bf00      	nop
 800c628:	0800c64d 	.word	0x0800c64d
 800c62c:	0800c655 	.word	0x0800c655
 800c630:	0800c65d 	.word	0x0800c65d
 800c634:	0800c673 	.word	0x0800c673
 800c638:	0800c663 	.word	0x0800c663
 800c63c:	0800c673 	.word	0x0800c673
 800c640:	0800c673 	.word	0x0800c673
 800c644:	0800c673 	.word	0x0800c673
 800c648:	0800c66b 	.word	0x0800c66b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c64c:	f7fc fd0c 	bl	8009068 <HAL_RCC_GetPCLK1Freq>
 800c650:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c652:	e014      	b.n	800c67e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c654:	f7fc fd1e 	bl	8009094 <HAL_RCC_GetPCLK2Freq>
 800c658:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c65a:	e010      	b.n	800c67e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c65c:	4b5a      	ldr	r3, [pc, #360]	; (800c7c8 <UART_SetConfig+0x594>)
 800c65e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c660:	e00d      	b.n	800c67e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c662:	f7fc fc95 	bl	8008f90 <HAL_RCC_GetSysClockFreq>
 800c666:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c668:	e009      	b.n	800c67e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c66a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c66e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c670:	e005      	b.n	800c67e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800c672:	2300      	movs	r3, #0
 800c674:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c676:	2301      	movs	r3, #1
 800c678:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c67c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c680:	2b00      	cmp	r3, #0
 800c682:	f000 8089 	beq.w	800c798 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c686:	697b      	ldr	r3, [r7, #20]
 800c688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c68a:	4a4e      	ldr	r2, [pc, #312]	; (800c7c4 <UART_SetConfig+0x590>)
 800c68c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c690:	461a      	mov	r2, r3
 800c692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c694:	fbb3 f3f2 	udiv	r3, r3, r2
 800c698:	005a      	lsls	r2, r3, #1
 800c69a:	697b      	ldr	r3, [r7, #20]
 800c69c:	685b      	ldr	r3, [r3, #4]
 800c69e:	085b      	lsrs	r3, r3, #1
 800c6a0:	441a      	add	r2, r3
 800c6a2:	697b      	ldr	r3, [r7, #20]
 800c6a4:	685b      	ldr	r3, [r3, #4]
 800c6a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6aa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c6ac:	6a3b      	ldr	r3, [r7, #32]
 800c6ae:	2b0f      	cmp	r3, #15
 800c6b0:	d916      	bls.n	800c6e0 <UART_SetConfig+0x4ac>
 800c6b2:	6a3b      	ldr	r3, [r7, #32]
 800c6b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c6b8:	d212      	bcs.n	800c6e0 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c6ba:	6a3b      	ldr	r3, [r7, #32]
 800c6bc:	b29b      	uxth	r3, r3
 800c6be:	f023 030f 	bic.w	r3, r3, #15
 800c6c2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c6c4:	6a3b      	ldr	r3, [r7, #32]
 800c6c6:	085b      	lsrs	r3, r3, #1
 800c6c8:	b29b      	uxth	r3, r3
 800c6ca:	f003 0307 	and.w	r3, r3, #7
 800c6ce:	b29a      	uxth	r2, r3
 800c6d0:	8bfb      	ldrh	r3, [r7, #30]
 800c6d2:	4313      	orrs	r3, r2
 800c6d4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	8bfa      	ldrh	r2, [r7, #30]
 800c6dc:	60da      	str	r2, [r3, #12]
 800c6de:	e05b      	b.n	800c798 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800c6e0:	2301      	movs	r3, #1
 800c6e2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c6e6:	e057      	b.n	800c798 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c6e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c6ec:	2b08      	cmp	r3, #8
 800c6ee:	d828      	bhi.n	800c742 <UART_SetConfig+0x50e>
 800c6f0:	a201      	add	r2, pc, #4	; (adr r2, 800c6f8 <UART_SetConfig+0x4c4>)
 800c6f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6f6:	bf00      	nop
 800c6f8:	0800c71d 	.word	0x0800c71d
 800c6fc:	0800c725 	.word	0x0800c725
 800c700:	0800c72d 	.word	0x0800c72d
 800c704:	0800c743 	.word	0x0800c743
 800c708:	0800c733 	.word	0x0800c733
 800c70c:	0800c743 	.word	0x0800c743
 800c710:	0800c743 	.word	0x0800c743
 800c714:	0800c743 	.word	0x0800c743
 800c718:	0800c73b 	.word	0x0800c73b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c71c:	f7fc fca4 	bl	8009068 <HAL_RCC_GetPCLK1Freq>
 800c720:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c722:	e014      	b.n	800c74e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c724:	f7fc fcb6 	bl	8009094 <HAL_RCC_GetPCLK2Freq>
 800c728:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c72a:	e010      	b.n	800c74e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c72c:	4b26      	ldr	r3, [pc, #152]	; (800c7c8 <UART_SetConfig+0x594>)
 800c72e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c730:	e00d      	b.n	800c74e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c732:	f7fc fc2d 	bl	8008f90 <HAL_RCC_GetSysClockFreq>
 800c736:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c738:	e009      	b.n	800c74e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c73a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c73e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c740:	e005      	b.n	800c74e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800c742:	2300      	movs	r3, #0
 800c744:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c746:	2301      	movs	r3, #1
 800c748:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c74c:	bf00      	nop
    }

    if (pclk != 0U)
 800c74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c750:	2b00      	cmp	r3, #0
 800c752:	d021      	beq.n	800c798 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c754:	697b      	ldr	r3, [r7, #20]
 800c756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c758:	4a1a      	ldr	r2, [pc, #104]	; (800c7c4 <UART_SetConfig+0x590>)
 800c75a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c75e:	461a      	mov	r2, r3
 800c760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c762:	fbb3 f2f2 	udiv	r2, r3, r2
 800c766:	697b      	ldr	r3, [r7, #20]
 800c768:	685b      	ldr	r3, [r3, #4]
 800c76a:	085b      	lsrs	r3, r3, #1
 800c76c:	441a      	add	r2, r3
 800c76e:	697b      	ldr	r3, [r7, #20]
 800c770:	685b      	ldr	r3, [r3, #4]
 800c772:	fbb2 f3f3 	udiv	r3, r2, r3
 800c776:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c778:	6a3b      	ldr	r3, [r7, #32]
 800c77a:	2b0f      	cmp	r3, #15
 800c77c:	d909      	bls.n	800c792 <UART_SetConfig+0x55e>
 800c77e:	6a3b      	ldr	r3, [r7, #32]
 800c780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c784:	d205      	bcs.n	800c792 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c786:	6a3b      	ldr	r3, [r7, #32]
 800c788:	b29a      	uxth	r2, r3
 800c78a:	697b      	ldr	r3, [r7, #20]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	60da      	str	r2, [r3, #12]
 800c790:	e002      	b.n	800c798 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800c792:	2301      	movs	r3, #1
 800c794:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c798:	697b      	ldr	r3, [r7, #20]
 800c79a:	2201      	movs	r2, #1
 800c79c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c7a0:	697b      	ldr	r3, [r7, #20]
 800c7a2:	2201      	movs	r2, #1
 800c7a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c7a8:	697b      	ldr	r3, [r7, #20]
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c7ae:	697b      	ldr	r3, [r7, #20]
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c7b4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	3730      	adds	r7, #48	; 0x30
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c7c2:	bf00      	nop
 800c7c4:	08012020 	.word	0x08012020
 800c7c8:	00f42400 	.word	0x00f42400

0800c7cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c7cc:	b480      	push	{r7}
 800c7ce:	b083      	sub	sp, #12
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7d8:	f003 0301 	and.w	r3, r3, #1
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d00a      	beq.n	800c7f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	685b      	ldr	r3, [r3, #4]
 800c7e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	430a      	orrs	r2, r1
 800c7f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7fa:	f003 0302 	and.w	r3, r3, #2
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d00a      	beq.n	800c818 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	685b      	ldr	r3, [r3, #4]
 800c808:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	430a      	orrs	r2, r1
 800c816:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c81c:	f003 0304 	and.w	r3, r3, #4
 800c820:	2b00      	cmp	r3, #0
 800c822:	d00a      	beq.n	800c83a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	685b      	ldr	r3, [r3, #4]
 800c82a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	430a      	orrs	r2, r1
 800c838:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c83e:	f003 0308 	and.w	r3, r3, #8
 800c842:	2b00      	cmp	r3, #0
 800c844:	d00a      	beq.n	800c85c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	685b      	ldr	r3, [r3, #4]
 800c84c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	430a      	orrs	r2, r1
 800c85a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c860:	f003 0310 	and.w	r3, r3, #16
 800c864:	2b00      	cmp	r3, #0
 800c866:	d00a      	beq.n	800c87e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	689b      	ldr	r3, [r3, #8]
 800c86e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	430a      	orrs	r2, r1
 800c87c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c882:	f003 0320 	and.w	r3, r3, #32
 800c886:	2b00      	cmp	r3, #0
 800c888:	d00a      	beq.n	800c8a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	689b      	ldr	r3, [r3, #8]
 800c890:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	430a      	orrs	r2, r1
 800c89e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d01a      	beq.n	800c8e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	685b      	ldr	r3, [r3, #4]
 800c8b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	430a      	orrs	r2, r1
 800c8c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c8ca:	d10a      	bne.n	800c8e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	685b      	ldr	r3, [r3, #4]
 800c8d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	430a      	orrs	r2, r1
 800c8e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d00a      	beq.n	800c904 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	685b      	ldr	r3, [r3, #4]
 800c8f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	430a      	orrs	r2, r1
 800c902:	605a      	str	r2, [r3, #4]
  }
}
 800c904:	bf00      	nop
 800c906:	370c      	adds	r7, #12
 800c908:	46bd      	mov	sp, r7
 800c90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90e:	4770      	bx	lr

0800c910 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b086      	sub	sp, #24
 800c914:	af02      	add	r7, sp, #8
 800c916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2200      	movs	r2, #0
 800c91c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c920:	f7f8 fb4a 	bl	8004fb8 <HAL_GetTick>
 800c924:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	f003 0308 	and.w	r3, r3, #8
 800c930:	2b08      	cmp	r3, #8
 800c932:	d10e      	bne.n	800c952 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c934:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c938:	9300      	str	r3, [sp, #0]
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	2200      	movs	r2, #0
 800c93e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c942:	6878      	ldr	r0, [r7, #4]
 800c944:	f000 f82f 	bl	800c9a6 <UART_WaitOnFlagUntilTimeout>
 800c948:	4603      	mov	r3, r0
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d001      	beq.n	800c952 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c94e:	2303      	movs	r3, #3
 800c950:	e025      	b.n	800c99e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	f003 0304 	and.w	r3, r3, #4
 800c95c:	2b04      	cmp	r3, #4
 800c95e:	d10e      	bne.n	800c97e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c960:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c964:	9300      	str	r3, [sp, #0]
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	2200      	movs	r2, #0
 800c96a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f000 f819 	bl	800c9a6 <UART_WaitOnFlagUntilTimeout>
 800c974:	4603      	mov	r3, r0
 800c976:	2b00      	cmp	r3, #0
 800c978:	d001      	beq.n	800c97e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c97a:	2303      	movs	r3, #3
 800c97c:	e00f      	b.n	800c99e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	2220      	movs	r2, #32
 800c982:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	2220      	movs	r2, #32
 800c98a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2200      	movs	r2, #0
 800c992:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2200      	movs	r2, #0
 800c998:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c99c:	2300      	movs	r3, #0
}
 800c99e:	4618      	mov	r0, r3
 800c9a0:	3710      	adds	r7, #16
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bd80      	pop	{r7, pc}

0800c9a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c9a6:	b580      	push	{r7, lr}
 800c9a8:	b09c      	sub	sp, #112	; 0x70
 800c9aa:	af00      	add	r7, sp, #0
 800c9ac:	60f8      	str	r0, [r7, #12]
 800c9ae:	60b9      	str	r1, [r7, #8]
 800c9b0:	603b      	str	r3, [r7, #0]
 800c9b2:	4613      	mov	r3, r2
 800c9b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c9b6:	e0a9      	b.n	800cb0c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c9b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c9ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9be:	f000 80a5 	beq.w	800cb0c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c9c2:	f7f8 faf9 	bl	8004fb8 <HAL_GetTick>
 800c9c6:	4602      	mov	r2, r0
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	1ad3      	subs	r3, r2, r3
 800c9cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c9ce:	429a      	cmp	r2, r3
 800c9d0:	d302      	bcc.n	800c9d8 <UART_WaitOnFlagUntilTimeout+0x32>
 800c9d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d140      	bne.n	800ca5a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9e0:	e853 3f00 	ldrex	r3, [r3]
 800c9e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c9e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c9ec:	667b      	str	r3, [r7, #100]	; 0x64
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	461a      	mov	r2, r3
 800c9f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c9f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c9f8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c9fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c9fe:	e841 2300 	strex	r3, r2, [r1]
 800ca02:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ca04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d1e6      	bne.n	800c9d8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	3308      	adds	r3, #8
 800ca10:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca14:	e853 3f00 	ldrex	r3, [r3]
 800ca18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ca1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca1c:	f023 0301 	bic.w	r3, r3, #1
 800ca20:	663b      	str	r3, [r7, #96]	; 0x60
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	3308      	adds	r3, #8
 800ca28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ca2a:	64ba      	str	r2, [r7, #72]	; 0x48
 800ca2c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ca30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ca32:	e841 2300 	strex	r3, r2, [r1]
 800ca36:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ca38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d1e5      	bne.n	800ca0a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	2220      	movs	r2, #32
 800ca42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	2220      	movs	r2, #32
 800ca4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	2200      	movs	r2, #0
 800ca52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800ca56:	2303      	movs	r3, #3
 800ca58:	e069      	b.n	800cb2e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	f003 0304 	and.w	r3, r3, #4
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d051      	beq.n	800cb0c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	69db      	ldr	r3, [r3, #28]
 800ca6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ca72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ca76:	d149      	bne.n	800cb0c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ca80:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca8a:	e853 3f00 	ldrex	r3, [r3]
 800ca8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ca90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca92:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ca96:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	461a      	mov	r2, r3
 800ca9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800caa0:	637b      	str	r3, [r7, #52]	; 0x34
 800caa2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caa4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800caa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800caa8:	e841 2300 	strex	r3, r2, [r1]
 800caac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800caae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d1e6      	bne.n	800ca82 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	3308      	adds	r3, #8
 800caba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cabc:	697b      	ldr	r3, [r7, #20]
 800cabe:	e853 3f00 	ldrex	r3, [r3]
 800cac2:	613b      	str	r3, [r7, #16]
   return(result);
 800cac4:	693b      	ldr	r3, [r7, #16]
 800cac6:	f023 0301 	bic.w	r3, r3, #1
 800caca:	66bb      	str	r3, [r7, #104]	; 0x68
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	3308      	adds	r3, #8
 800cad2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cad4:	623a      	str	r2, [r7, #32]
 800cad6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cad8:	69f9      	ldr	r1, [r7, #28]
 800cada:	6a3a      	ldr	r2, [r7, #32]
 800cadc:	e841 2300 	strex	r3, r2, [r1]
 800cae0:	61bb      	str	r3, [r7, #24]
   return(result);
 800cae2:	69bb      	ldr	r3, [r7, #24]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d1e5      	bne.n	800cab4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	2220      	movs	r2, #32
 800caec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	2220      	movs	r2, #32
 800caf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	2220      	movs	r2, #32
 800cafc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	2200      	movs	r2, #0
 800cb04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800cb08:	2303      	movs	r3, #3
 800cb0a:	e010      	b.n	800cb2e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	69da      	ldr	r2, [r3, #28]
 800cb12:	68bb      	ldr	r3, [r7, #8]
 800cb14:	4013      	ands	r3, r2
 800cb16:	68ba      	ldr	r2, [r7, #8]
 800cb18:	429a      	cmp	r2, r3
 800cb1a:	bf0c      	ite	eq
 800cb1c:	2301      	moveq	r3, #1
 800cb1e:	2300      	movne	r3, #0
 800cb20:	b2db      	uxtb	r3, r3
 800cb22:	461a      	mov	r2, r3
 800cb24:	79fb      	ldrb	r3, [r7, #7]
 800cb26:	429a      	cmp	r2, r3
 800cb28:	f43f af46 	beq.w	800c9b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cb2c:	2300      	movs	r3, #0
}
 800cb2e:	4618      	mov	r0, r3
 800cb30:	3770      	adds	r7, #112	; 0x70
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bd80      	pop	{r7, pc}

0800cb36 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800cb36:	b480      	push	{r7}
 800cb38:	b08f      	sub	sp, #60	; 0x3c
 800cb3a:	af00      	add	r7, sp, #0
 800cb3c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb44:	6a3b      	ldr	r3, [r7, #32]
 800cb46:	e853 3f00 	ldrex	r3, [r3]
 800cb4a:	61fb      	str	r3, [r7, #28]
   return(result);
 800cb4c:	69fb      	ldr	r3, [r7, #28]
 800cb4e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800cb52:	637b      	str	r3, [r7, #52]	; 0x34
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	461a      	mov	r2, r3
 800cb5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb5e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cb62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb64:	e841 2300 	strex	r3, r2, [r1]
 800cb68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cb6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d1e6      	bne.n	800cb3e <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	3308      	adds	r3, #8
 800cb76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	e853 3f00 	ldrex	r3, [r3]
 800cb7e:	60bb      	str	r3, [r7, #8]
   return(result);
 800cb80:	68bb      	ldr	r3, [r7, #8]
 800cb82:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800cb86:	633b      	str	r3, [r7, #48]	; 0x30
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	3308      	adds	r3, #8
 800cb8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb90:	61ba      	str	r2, [r7, #24]
 800cb92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb94:	6979      	ldr	r1, [r7, #20]
 800cb96:	69ba      	ldr	r2, [r7, #24]
 800cb98:	e841 2300 	strex	r3, r2, [r1]
 800cb9c:	613b      	str	r3, [r7, #16]
   return(result);
 800cb9e:	693b      	ldr	r3, [r7, #16]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d1e5      	bne.n	800cb70 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	2220      	movs	r2, #32
 800cba8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800cbac:	bf00      	nop
 800cbae:	373c      	adds	r7, #60	; 0x3c
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb6:	4770      	bx	lr

0800cbb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cbb8:	b480      	push	{r7}
 800cbba:	b095      	sub	sp, #84	; 0x54
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbc8:	e853 3f00 	ldrex	r3, [r3]
 800cbcc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cbce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbd0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cbd4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	461a      	mov	r2, r3
 800cbdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbde:	643b      	str	r3, [r7, #64]	; 0x40
 800cbe0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbe2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cbe4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cbe6:	e841 2300 	strex	r3, r2, [r1]
 800cbea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cbec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d1e6      	bne.n	800cbc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	3308      	adds	r3, #8
 800cbf8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbfa:	6a3b      	ldr	r3, [r7, #32]
 800cbfc:	e853 3f00 	ldrex	r3, [r3]
 800cc00:	61fb      	str	r3, [r7, #28]
   return(result);
 800cc02:	69fb      	ldr	r3, [r7, #28]
 800cc04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cc08:	f023 0301 	bic.w	r3, r3, #1
 800cc0c:	64bb      	str	r3, [r7, #72]	; 0x48
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	3308      	adds	r3, #8
 800cc14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cc16:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cc18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cc1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc1e:	e841 2300 	strex	r3, r2, [r1]
 800cc22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cc24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d1e3      	bne.n	800cbf2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc2e:	2b01      	cmp	r3, #1
 800cc30:	d118      	bne.n	800cc64 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	e853 3f00 	ldrex	r3, [r3]
 800cc3e:	60bb      	str	r3, [r7, #8]
   return(result);
 800cc40:	68bb      	ldr	r3, [r7, #8]
 800cc42:	f023 0310 	bic.w	r3, r3, #16
 800cc46:	647b      	str	r3, [r7, #68]	; 0x44
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	461a      	mov	r2, r3
 800cc4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc50:	61bb      	str	r3, [r7, #24]
 800cc52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc54:	6979      	ldr	r1, [r7, #20]
 800cc56:	69ba      	ldr	r2, [r7, #24]
 800cc58:	e841 2300 	strex	r3, r2, [r1]
 800cc5c:	613b      	str	r3, [r7, #16]
   return(result);
 800cc5e:	693b      	ldr	r3, [r7, #16]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d1e6      	bne.n	800cc32 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2220      	movs	r2, #32
 800cc68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2200      	movs	r2, #0
 800cc70:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	2200      	movs	r2, #0
 800cc76:	671a      	str	r2, [r3, #112]	; 0x70
}
 800cc78:	bf00      	nop
 800cc7a:	3754      	adds	r7, #84	; 0x54
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc82:	4770      	bx	lr

0800cc84 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b090      	sub	sp, #64	; 0x40
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc90:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	f003 0320 	and.w	r3, r3, #32
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d137      	bne.n	800cd10 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800cca0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cca2:	2200      	movs	r2, #0
 800cca4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	3308      	adds	r3, #8
 800ccae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccb2:	e853 3f00 	ldrex	r3, [r3]
 800ccb6:	623b      	str	r3, [r7, #32]
   return(result);
 800ccb8:	6a3b      	ldr	r3, [r7, #32]
 800ccba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ccbe:	63bb      	str	r3, [r7, #56]	; 0x38
 800ccc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	3308      	adds	r3, #8
 800ccc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ccc8:	633a      	str	r2, [r7, #48]	; 0x30
 800ccca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cccc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ccce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ccd0:	e841 2300 	strex	r3, r2, [r1]
 800ccd4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ccd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d1e5      	bne.n	800cca8 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ccdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cce2:	693b      	ldr	r3, [r7, #16]
 800cce4:	e853 3f00 	ldrex	r3, [r3]
 800cce8:	60fb      	str	r3, [r7, #12]
   return(result);
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccf0:	637b      	str	r3, [r7, #52]	; 0x34
 800ccf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	461a      	mov	r2, r3
 800ccf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccfa:	61fb      	str	r3, [r7, #28]
 800ccfc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccfe:	69b9      	ldr	r1, [r7, #24]
 800cd00:	69fa      	ldr	r2, [r7, #28]
 800cd02:	e841 2300 	strex	r3, r2, [r1]
 800cd06:	617b      	str	r3, [r7, #20]
   return(result);
 800cd08:	697b      	ldr	r3, [r7, #20]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d1e6      	bne.n	800ccdc <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cd0e:	e002      	b.n	800cd16 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800cd10:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800cd12:	f7ff fa65 	bl	800c1e0 <HAL_UART_TxCpltCallback>
}
 800cd16:	bf00      	nop
 800cd18:	3740      	adds	r7, #64	; 0x40
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bd80      	pop	{r7, pc}

0800cd1e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cd1e:	b580      	push	{r7, lr}
 800cd20:	b084      	sub	sp, #16
 800cd22:	af00      	add	r7, sp, #0
 800cd24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd2a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800cd2c:	68f8      	ldr	r0, [r7, #12]
 800cd2e:	f7ff fa61 	bl	800c1f4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cd32:	bf00      	nop
 800cd34:	3710      	adds	r7, #16
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bd80      	pop	{r7, pc}

0800cd3a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800cd3a:	b580      	push	{r7, lr}
 800cd3c:	b086      	sub	sp, #24
 800cd3e:	af00      	add	r7, sp, #0
 800cd40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd46:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800cd48:	697b      	ldr	r3, [r7, #20]
 800cd4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd4e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800cd50:	697b      	ldr	r3, [r7, #20]
 800cd52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cd56:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800cd58:	697b      	ldr	r3, [r7, #20]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	689b      	ldr	r3, [r3, #8]
 800cd5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd62:	2b80      	cmp	r3, #128	; 0x80
 800cd64:	d109      	bne.n	800cd7a <UART_DMAError+0x40>
 800cd66:	693b      	ldr	r3, [r7, #16]
 800cd68:	2b21      	cmp	r3, #33	; 0x21
 800cd6a:	d106      	bne.n	800cd7a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800cd6c:	697b      	ldr	r3, [r7, #20]
 800cd6e:	2200      	movs	r2, #0
 800cd70:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800cd74:	6978      	ldr	r0, [r7, #20]
 800cd76:	f7ff fede 	bl	800cb36 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800cd7a:	697b      	ldr	r3, [r7, #20]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	689b      	ldr	r3, [r3, #8]
 800cd80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd84:	2b40      	cmp	r3, #64	; 0x40
 800cd86:	d109      	bne.n	800cd9c <UART_DMAError+0x62>
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	2b22      	cmp	r3, #34	; 0x22
 800cd8c:	d106      	bne.n	800cd9c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800cd8e:	697b      	ldr	r3, [r7, #20]
 800cd90:	2200      	movs	r2, #0
 800cd92:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800cd96:	6978      	ldr	r0, [r7, #20]
 800cd98:	f7ff ff0e 	bl	800cbb8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800cd9c:	697b      	ldr	r3, [r7, #20]
 800cd9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cda2:	f043 0210 	orr.w	r2, r3, #16
 800cda6:	697b      	ldr	r3, [r7, #20]
 800cda8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cdac:	6978      	ldr	r0, [r7, #20]
 800cdae:	f7ff fa2b 	bl	800c208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cdb2:	bf00      	nop
 800cdb4:	3718      	adds	r7, #24
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd80      	pop	{r7, pc}

0800cdba <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cdba:	b580      	push	{r7, lr}
 800cdbc:	b084      	sub	sp, #16
 800cdbe:	af00      	add	r7, sp, #0
 800cdc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdc6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	2200      	movs	r2, #0
 800cdcc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cdd8:	68f8      	ldr	r0, [r7, #12]
 800cdda:	f7ff fa15 	bl	800c208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cdde:	bf00      	nop
 800cde0:	3710      	adds	r7, #16
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}

0800cde6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cde6:	b580      	push	{r7, lr}
 800cde8:	b088      	sub	sp, #32
 800cdea:	af00      	add	r7, sp, #0
 800cdec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	e853 3f00 	ldrex	r3, [r3]
 800cdfa:	60bb      	str	r3, [r7, #8]
   return(result);
 800cdfc:	68bb      	ldr	r3, [r7, #8]
 800cdfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ce02:	61fb      	str	r3, [r7, #28]
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	461a      	mov	r2, r3
 800ce0a:	69fb      	ldr	r3, [r7, #28]
 800ce0c:	61bb      	str	r3, [r7, #24]
 800ce0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce10:	6979      	ldr	r1, [r7, #20]
 800ce12:	69ba      	ldr	r2, [r7, #24]
 800ce14:	e841 2300 	strex	r3, r2, [r1]
 800ce18:	613b      	str	r3, [r7, #16]
   return(result);
 800ce1a:	693b      	ldr	r3, [r7, #16]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d1e6      	bne.n	800cdee <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2220      	movs	r2, #32
 800ce24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ce2e:	6878      	ldr	r0, [r7, #4]
 800ce30:	f7ff f9d6 	bl	800c1e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ce34:	bf00      	nop
 800ce36:	3720      	adds	r7, #32
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	bd80      	pop	{r7, pc}

0800ce3c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ce3c:	b480      	push	{r7}
 800ce3e:	b083      	sub	sp, #12
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ce44:	bf00      	nop
 800ce46:	370c      	adds	r7, #12
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4e:	4770      	bx	lr

0800ce50 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ce50:	b480      	push	{r7}
 800ce52:	b083      	sub	sp, #12
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ce58:	bf00      	nop
 800ce5a:	370c      	adds	r7, #12
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce62:	4770      	bx	lr

0800ce64 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ce64:	b480      	push	{r7}
 800ce66:	b083      	sub	sp, #12
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ce6c:	bf00      	nop
 800ce6e:	370c      	adds	r7, #12
 800ce70:	46bd      	mov	sp, r7
 800ce72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce76:	4770      	bx	lr

0800ce78 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ce78:	b480      	push	{r7}
 800ce7a:	b085      	sub	sp, #20
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ce86:	2b01      	cmp	r3, #1
 800ce88:	d101      	bne.n	800ce8e <HAL_UARTEx_DisableFifoMode+0x16>
 800ce8a:	2302      	movs	r3, #2
 800ce8c:	e027      	b.n	800cede <HAL_UARTEx_DisableFifoMode+0x66>
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	2201      	movs	r2, #1
 800ce92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2224      	movs	r2, #36	; 0x24
 800ce9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	681a      	ldr	r2, [r3, #0]
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	f022 0201 	bic.w	r2, r2, #1
 800ceb4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cebc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2200      	movs	r2, #0
 800cec2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	68fa      	ldr	r2, [r7, #12]
 800ceca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2220      	movs	r2, #32
 800ced0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2200      	movs	r2, #0
 800ced8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cedc:	2300      	movs	r3, #0
}
 800cede:	4618      	mov	r0, r3
 800cee0:	3714      	adds	r7, #20
 800cee2:	46bd      	mov	sp, r7
 800cee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee8:	4770      	bx	lr

0800ceea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ceea:	b580      	push	{r7, lr}
 800ceec:	b084      	sub	sp, #16
 800ceee:	af00      	add	r7, sp, #0
 800cef0:	6078      	str	r0, [r7, #4]
 800cef2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cefa:	2b01      	cmp	r3, #1
 800cefc:	d101      	bne.n	800cf02 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cefe:	2302      	movs	r3, #2
 800cf00:	e02d      	b.n	800cf5e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	2201      	movs	r2, #1
 800cf06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	2224      	movs	r2, #36	; 0x24
 800cf0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	681a      	ldr	r2, [r3, #0]
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	f022 0201 	bic.w	r2, r2, #1
 800cf28:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	689b      	ldr	r3, [r3, #8]
 800cf30:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	683a      	ldr	r2, [r7, #0]
 800cf3a:	430a      	orrs	r2, r1
 800cf3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cf3e:	6878      	ldr	r0, [r7, #4]
 800cf40:	f000 f850 	bl	800cfe4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	68fa      	ldr	r2, [r7, #12]
 800cf4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2220      	movs	r2, #32
 800cf50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2200      	movs	r2, #0
 800cf58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cf5c:	2300      	movs	r3, #0
}
 800cf5e:	4618      	mov	r0, r3
 800cf60:	3710      	adds	r7, #16
 800cf62:	46bd      	mov	sp, r7
 800cf64:	bd80      	pop	{r7, pc}

0800cf66 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cf66:	b580      	push	{r7, lr}
 800cf68:	b084      	sub	sp, #16
 800cf6a:	af00      	add	r7, sp, #0
 800cf6c:	6078      	str	r0, [r7, #4]
 800cf6e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cf76:	2b01      	cmp	r3, #1
 800cf78:	d101      	bne.n	800cf7e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cf7a:	2302      	movs	r3, #2
 800cf7c:	e02d      	b.n	800cfda <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2201      	movs	r2, #1
 800cf82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2224      	movs	r2, #36	; 0x24
 800cf8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	681a      	ldr	r2, [r3, #0]
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	f022 0201 	bic.w	r2, r2, #1
 800cfa4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	689b      	ldr	r3, [r3, #8]
 800cfac:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	683a      	ldr	r2, [r7, #0]
 800cfb6:	430a      	orrs	r2, r1
 800cfb8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cfba:	6878      	ldr	r0, [r7, #4]
 800cfbc:	f000 f812 	bl	800cfe4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	68fa      	ldr	r2, [r7, #12]
 800cfc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2220      	movs	r2, #32
 800cfcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cfd8:	2300      	movs	r3, #0
}
 800cfda:	4618      	mov	r0, r3
 800cfdc:	3710      	adds	r7, #16
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	bd80      	pop	{r7, pc}
	...

0800cfe4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cfe4:	b480      	push	{r7}
 800cfe6:	b085      	sub	sp, #20
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d108      	bne.n	800d006 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2201      	movs	r2, #1
 800cff8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	2201      	movs	r2, #1
 800d000:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d004:	e031      	b.n	800d06a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d006:	2308      	movs	r3, #8
 800d008:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d00a:	2308      	movs	r3, #8
 800d00c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	689b      	ldr	r3, [r3, #8]
 800d014:	0e5b      	lsrs	r3, r3, #25
 800d016:	b2db      	uxtb	r3, r3
 800d018:	f003 0307 	and.w	r3, r3, #7
 800d01c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	689b      	ldr	r3, [r3, #8]
 800d024:	0f5b      	lsrs	r3, r3, #29
 800d026:	b2db      	uxtb	r3, r3
 800d028:	f003 0307 	and.w	r3, r3, #7
 800d02c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d02e:	7bbb      	ldrb	r3, [r7, #14]
 800d030:	7b3a      	ldrb	r2, [r7, #12]
 800d032:	4911      	ldr	r1, [pc, #68]	; (800d078 <UARTEx_SetNbDataToProcess+0x94>)
 800d034:	5c8a      	ldrb	r2, [r1, r2]
 800d036:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d03a:	7b3a      	ldrb	r2, [r7, #12]
 800d03c:	490f      	ldr	r1, [pc, #60]	; (800d07c <UARTEx_SetNbDataToProcess+0x98>)
 800d03e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d040:	fb93 f3f2 	sdiv	r3, r3, r2
 800d044:	b29a      	uxth	r2, r3
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d04c:	7bfb      	ldrb	r3, [r7, #15]
 800d04e:	7b7a      	ldrb	r2, [r7, #13]
 800d050:	4909      	ldr	r1, [pc, #36]	; (800d078 <UARTEx_SetNbDataToProcess+0x94>)
 800d052:	5c8a      	ldrb	r2, [r1, r2]
 800d054:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d058:	7b7a      	ldrb	r2, [r7, #13]
 800d05a:	4908      	ldr	r1, [pc, #32]	; (800d07c <UARTEx_SetNbDataToProcess+0x98>)
 800d05c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d05e:	fb93 f3f2 	sdiv	r3, r3, r2
 800d062:	b29a      	uxth	r2, r3
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d06a:	bf00      	nop
 800d06c:	3714      	adds	r7, #20
 800d06e:	46bd      	mov	sp, r7
 800d070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d074:	4770      	bx	lr
 800d076:	bf00      	nop
 800d078:	08012038 	.word	0x08012038
 800d07c:	08012040 	.word	0x08012040

0800d080 <__cvt>:
 800d080:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d084:	ec55 4b10 	vmov	r4, r5, d0
 800d088:	2d00      	cmp	r5, #0
 800d08a:	460e      	mov	r6, r1
 800d08c:	4619      	mov	r1, r3
 800d08e:	462b      	mov	r3, r5
 800d090:	bfbb      	ittet	lt
 800d092:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d096:	461d      	movlt	r5, r3
 800d098:	2300      	movge	r3, #0
 800d09a:	232d      	movlt	r3, #45	; 0x2d
 800d09c:	700b      	strb	r3, [r1, #0]
 800d09e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d0a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d0a4:	4691      	mov	r9, r2
 800d0a6:	f023 0820 	bic.w	r8, r3, #32
 800d0aa:	bfbc      	itt	lt
 800d0ac:	4622      	movlt	r2, r4
 800d0ae:	4614      	movlt	r4, r2
 800d0b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d0b4:	d005      	beq.n	800d0c2 <__cvt+0x42>
 800d0b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d0ba:	d100      	bne.n	800d0be <__cvt+0x3e>
 800d0bc:	3601      	adds	r6, #1
 800d0be:	2102      	movs	r1, #2
 800d0c0:	e000      	b.n	800d0c4 <__cvt+0x44>
 800d0c2:	2103      	movs	r1, #3
 800d0c4:	ab03      	add	r3, sp, #12
 800d0c6:	9301      	str	r3, [sp, #4]
 800d0c8:	ab02      	add	r3, sp, #8
 800d0ca:	9300      	str	r3, [sp, #0]
 800d0cc:	ec45 4b10 	vmov	d0, r4, r5
 800d0d0:	4653      	mov	r3, sl
 800d0d2:	4632      	mov	r2, r6
 800d0d4:	f000 fe90 	bl	800ddf8 <_dtoa_r>
 800d0d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d0dc:	4607      	mov	r7, r0
 800d0de:	d102      	bne.n	800d0e6 <__cvt+0x66>
 800d0e0:	f019 0f01 	tst.w	r9, #1
 800d0e4:	d022      	beq.n	800d12c <__cvt+0xac>
 800d0e6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d0ea:	eb07 0906 	add.w	r9, r7, r6
 800d0ee:	d110      	bne.n	800d112 <__cvt+0x92>
 800d0f0:	783b      	ldrb	r3, [r7, #0]
 800d0f2:	2b30      	cmp	r3, #48	; 0x30
 800d0f4:	d10a      	bne.n	800d10c <__cvt+0x8c>
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	4620      	mov	r0, r4
 800d0fc:	4629      	mov	r1, r5
 800d0fe:	f7f3 fd0b 	bl	8000b18 <__aeabi_dcmpeq>
 800d102:	b918      	cbnz	r0, 800d10c <__cvt+0x8c>
 800d104:	f1c6 0601 	rsb	r6, r6, #1
 800d108:	f8ca 6000 	str.w	r6, [sl]
 800d10c:	f8da 3000 	ldr.w	r3, [sl]
 800d110:	4499      	add	r9, r3
 800d112:	2200      	movs	r2, #0
 800d114:	2300      	movs	r3, #0
 800d116:	4620      	mov	r0, r4
 800d118:	4629      	mov	r1, r5
 800d11a:	f7f3 fcfd 	bl	8000b18 <__aeabi_dcmpeq>
 800d11e:	b108      	cbz	r0, 800d124 <__cvt+0xa4>
 800d120:	f8cd 900c 	str.w	r9, [sp, #12]
 800d124:	2230      	movs	r2, #48	; 0x30
 800d126:	9b03      	ldr	r3, [sp, #12]
 800d128:	454b      	cmp	r3, r9
 800d12a:	d307      	bcc.n	800d13c <__cvt+0xbc>
 800d12c:	9b03      	ldr	r3, [sp, #12]
 800d12e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d130:	1bdb      	subs	r3, r3, r7
 800d132:	4638      	mov	r0, r7
 800d134:	6013      	str	r3, [r2, #0]
 800d136:	b004      	add	sp, #16
 800d138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d13c:	1c59      	adds	r1, r3, #1
 800d13e:	9103      	str	r1, [sp, #12]
 800d140:	701a      	strb	r2, [r3, #0]
 800d142:	e7f0      	b.n	800d126 <__cvt+0xa6>

0800d144 <__exponent>:
 800d144:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d146:	4603      	mov	r3, r0
 800d148:	2900      	cmp	r1, #0
 800d14a:	bfb8      	it	lt
 800d14c:	4249      	neglt	r1, r1
 800d14e:	f803 2b02 	strb.w	r2, [r3], #2
 800d152:	bfb4      	ite	lt
 800d154:	222d      	movlt	r2, #45	; 0x2d
 800d156:	222b      	movge	r2, #43	; 0x2b
 800d158:	2909      	cmp	r1, #9
 800d15a:	7042      	strb	r2, [r0, #1]
 800d15c:	dd2a      	ble.n	800d1b4 <__exponent+0x70>
 800d15e:	f10d 0207 	add.w	r2, sp, #7
 800d162:	4617      	mov	r7, r2
 800d164:	260a      	movs	r6, #10
 800d166:	4694      	mov	ip, r2
 800d168:	fb91 f5f6 	sdiv	r5, r1, r6
 800d16c:	fb06 1415 	mls	r4, r6, r5, r1
 800d170:	3430      	adds	r4, #48	; 0x30
 800d172:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800d176:	460c      	mov	r4, r1
 800d178:	2c63      	cmp	r4, #99	; 0x63
 800d17a:	f102 32ff 	add.w	r2, r2, #4294967295
 800d17e:	4629      	mov	r1, r5
 800d180:	dcf1      	bgt.n	800d166 <__exponent+0x22>
 800d182:	3130      	adds	r1, #48	; 0x30
 800d184:	f1ac 0402 	sub.w	r4, ip, #2
 800d188:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d18c:	1c41      	adds	r1, r0, #1
 800d18e:	4622      	mov	r2, r4
 800d190:	42ba      	cmp	r2, r7
 800d192:	d30a      	bcc.n	800d1aa <__exponent+0x66>
 800d194:	f10d 0209 	add.w	r2, sp, #9
 800d198:	eba2 020c 	sub.w	r2, r2, ip
 800d19c:	42bc      	cmp	r4, r7
 800d19e:	bf88      	it	hi
 800d1a0:	2200      	movhi	r2, #0
 800d1a2:	4413      	add	r3, r2
 800d1a4:	1a18      	subs	r0, r3, r0
 800d1a6:	b003      	add	sp, #12
 800d1a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1aa:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d1ae:	f801 5f01 	strb.w	r5, [r1, #1]!
 800d1b2:	e7ed      	b.n	800d190 <__exponent+0x4c>
 800d1b4:	2330      	movs	r3, #48	; 0x30
 800d1b6:	3130      	adds	r1, #48	; 0x30
 800d1b8:	7083      	strb	r3, [r0, #2]
 800d1ba:	70c1      	strb	r1, [r0, #3]
 800d1bc:	1d03      	adds	r3, r0, #4
 800d1be:	e7f1      	b.n	800d1a4 <__exponent+0x60>

0800d1c0 <_printf_float>:
 800d1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1c4:	ed2d 8b02 	vpush	{d8}
 800d1c8:	b08d      	sub	sp, #52	; 0x34
 800d1ca:	460c      	mov	r4, r1
 800d1cc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d1d0:	4616      	mov	r6, r2
 800d1d2:	461f      	mov	r7, r3
 800d1d4:	4605      	mov	r5, r0
 800d1d6:	f000 fcff 	bl	800dbd8 <_localeconv_r>
 800d1da:	f8d0 a000 	ldr.w	sl, [r0]
 800d1de:	4650      	mov	r0, sl
 800d1e0:	f7f3 f86e 	bl	80002c0 <strlen>
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	930a      	str	r3, [sp, #40]	; 0x28
 800d1e8:	6823      	ldr	r3, [r4, #0]
 800d1ea:	9305      	str	r3, [sp, #20]
 800d1ec:	f8d8 3000 	ldr.w	r3, [r8]
 800d1f0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d1f4:	3307      	adds	r3, #7
 800d1f6:	f023 0307 	bic.w	r3, r3, #7
 800d1fa:	f103 0208 	add.w	r2, r3, #8
 800d1fe:	f8c8 2000 	str.w	r2, [r8]
 800d202:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d206:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d20a:	9307      	str	r3, [sp, #28]
 800d20c:	f8cd 8018 	str.w	r8, [sp, #24]
 800d210:	ee08 0a10 	vmov	s16, r0
 800d214:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800d218:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d21c:	4b9e      	ldr	r3, [pc, #632]	; (800d498 <_printf_float+0x2d8>)
 800d21e:	f04f 32ff 	mov.w	r2, #4294967295
 800d222:	f7f3 fcab 	bl	8000b7c <__aeabi_dcmpun>
 800d226:	bb88      	cbnz	r0, 800d28c <_printf_float+0xcc>
 800d228:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d22c:	4b9a      	ldr	r3, [pc, #616]	; (800d498 <_printf_float+0x2d8>)
 800d22e:	f04f 32ff 	mov.w	r2, #4294967295
 800d232:	f7f3 fc85 	bl	8000b40 <__aeabi_dcmple>
 800d236:	bb48      	cbnz	r0, 800d28c <_printf_float+0xcc>
 800d238:	2200      	movs	r2, #0
 800d23a:	2300      	movs	r3, #0
 800d23c:	4640      	mov	r0, r8
 800d23e:	4649      	mov	r1, r9
 800d240:	f7f3 fc74 	bl	8000b2c <__aeabi_dcmplt>
 800d244:	b110      	cbz	r0, 800d24c <_printf_float+0x8c>
 800d246:	232d      	movs	r3, #45	; 0x2d
 800d248:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d24c:	4a93      	ldr	r2, [pc, #588]	; (800d49c <_printf_float+0x2dc>)
 800d24e:	4b94      	ldr	r3, [pc, #592]	; (800d4a0 <_printf_float+0x2e0>)
 800d250:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d254:	bf94      	ite	ls
 800d256:	4690      	movls	r8, r2
 800d258:	4698      	movhi	r8, r3
 800d25a:	2303      	movs	r3, #3
 800d25c:	6123      	str	r3, [r4, #16]
 800d25e:	9b05      	ldr	r3, [sp, #20]
 800d260:	f023 0304 	bic.w	r3, r3, #4
 800d264:	6023      	str	r3, [r4, #0]
 800d266:	f04f 0900 	mov.w	r9, #0
 800d26a:	9700      	str	r7, [sp, #0]
 800d26c:	4633      	mov	r3, r6
 800d26e:	aa0b      	add	r2, sp, #44	; 0x2c
 800d270:	4621      	mov	r1, r4
 800d272:	4628      	mov	r0, r5
 800d274:	f000 f9da 	bl	800d62c <_printf_common>
 800d278:	3001      	adds	r0, #1
 800d27a:	f040 8090 	bne.w	800d39e <_printf_float+0x1de>
 800d27e:	f04f 30ff 	mov.w	r0, #4294967295
 800d282:	b00d      	add	sp, #52	; 0x34
 800d284:	ecbd 8b02 	vpop	{d8}
 800d288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d28c:	4642      	mov	r2, r8
 800d28e:	464b      	mov	r3, r9
 800d290:	4640      	mov	r0, r8
 800d292:	4649      	mov	r1, r9
 800d294:	f7f3 fc72 	bl	8000b7c <__aeabi_dcmpun>
 800d298:	b140      	cbz	r0, 800d2ac <_printf_float+0xec>
 800d29a:	464b      	mov	r3, r9
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	bfbc      	itt	lt
 800d2a0:	232d      	movlt	r3, #45	; 0x2d
 800d2a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d2a6:	4a7f      	ldr	r2, [pc, #508]	; (800d4a4 <_printf_float+0x2e4>)
 800d2a8:	4b7f      	ldr	r3, [pc, #508]	; (800d4a8 <_printf_float+0x2e8>)
 800d2aa:	e7d1      	b.n	800d250 <_printf_float+0x90>
 800d2ac:	6863      	ldr	r3, [r4, #4]
 800d2ae:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d2b2:	9206      	str	r2, [sp, #24]
 800d2b4:	1c5a      	adds	r2, r3, #1
 800d2b6:	d13f      	bne.n	800d338 <_printf_float+0x178>
 800d2b8:	2306      	movs	r3, #6
 800d2ba:	6063      	str	r3, [r4, #4]
 800d2bc:	9b05      	ldr	r3, [sp, #20]
 800d2be:	6861      	ldr	r1, [r4, #4]
 800d2c0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	9303      	str	r3, [sp, #12]
 800d2c8:	ab0a      	add	r3, sp, #40	; 0x28
 800d2ca:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d2ce:	ab09      	add	r3, sp, #36	; 0x24
 800d2d0:	ec49 8b10 	vmov	d0, r8, r9
 800d2d4:	9300      	str	r3, [sp, #0]
 800d2d6:	6022      	str	r2, [r4, #0]
 800d2d8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d2dc:	4628      	mov	r0, r5
 800d2de:	f7ff fecf 	bl	800d080 <__cvt>
 800d2e2:	9b06      	ldr	r3, [sp, #24]
 800d2e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d2e6:	2b47      	cmp	r3, #71	; 0x47
 800d2e8:	4680      	mov	r8, r0
 800d2ea:	d108      	bne.n	800d2fe <_printf_float+0x13e>
 800d2ec:	1cc8      	adds	r0, r1, #3
 800d2ee:	db02      	blt.n	800d2f6 <_printf_float+0x136>
 800d2f0:	6863      	ldr	r3, [r4, #4]
 800d2f2:	4299      	cmp	r1, r3
 800d2f4:	dd41      	ble.n	800d37a <_printf_float+0x1ba>
 800d2f6:	f1ab 0302 	sub.w	r3, fp, #2
 800d2fa:	fa5f fb83 	uxtb.w	fp, r3
 800d2fe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d302:	d820      	bhi.n	800d346 <_printf_float+0x186>
 800d304:	3901      	subs	r1, #1
 800d306:	465a      	mov	r2, fp
 800d308:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d30c:	9109      	str	r1, [sp, #36]	; 0x24
 800d30e:	f7ff ff19 	bl	800d144 <__exponent>
 800d312:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d314:	1813      	adds	r3, r2, r0
 800d316:	2a01      	cmp	r2, #1
 800d318:	4681      	mov	r9, r0
 800d31a:	6123      	str	r3, [r4, #16]
 800d31c:	dc02      	bgt.n	800d324 <_printf_float+0x164>
 800d31e:	6822      	ldr	r2, [r4, #0]
 800d320:	07d2      	lsls	r2, r2, #31
 800d322:	d501      	bpl.n	800d328 <_printf_float+0x168>
 800d324:	3301      	adds	r3, #1
 800d326:	6123      	str	r3, [r4, #16]
 800d328:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d09c      	beq.n	800d26a <_printf_float+0xaa>
 800d330:	232d      	movs	r3, #45	; 0x2d
 800d332:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d336:	e798      	b.n	800d26a <_printf_float+0xaa>
 800d338:	9a06      	ldr	r2, [sp, #24]
 800d33a:	2a47      	cmp	r2, #71	; 0x47
 800d33c:	d1be      	bne.n	800d2bc <_printf_float+0xfc>
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d1bc      	bne.n	800d2bc <_printf_float+0xfc>
 800d342:	2301      	movs	r3, #1
 800d344:	e7b9      	b.n	800d2ba <_printf_float+0xfa>
 800d346:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d34a:	d118      	bne.n	800d37e <_printf_float+0x1be>
 800d34c:	2900      	cmp	r1, #0
 800d34e:	6863      	ldr	r3, [r4, #4]
 800d350:	dd0b      	ble.n	800d36a <_printf_float+0x1aa>
 800d352:	6121      	str	r1, [r4, #16]
 800d354:	b913      	cbnz	r3, 800d35c <_printf_float+0x19c>
 800d356:	6822      	ldr	r2, [r4, #0]
 800d358:	07d0      	lsls	r0, r2, #31
 800d35a:	d502      	bpl.n	800d362 <_printf_float+0x1a2>
 800d35c:	3301      	adds	r3, #1
 800d35e:	440b      	add	r3, r1
 800d360:	6123      	str	r3, [r4, #16]
 800d362:	65a1      	str	r1, [r4, #88]	; 0x58
 800d364:	f04f 0900 	mov.w	r9, #0
 800d368:	e7de      	b.n	800d328 <_printf_float+0x168>
 800d36a:	b913      	cbnz	r3, 800d372 <_printf_float+0x1b2>
 800d36c:	6822      	ldr	r2, [r4, #0]
 800d36e:	07d2      	lsls	r2, r2, #31
 800d370:	d501      	bpl.n	800d376 <_printf_float+0x1b6>
 800d372:	3302      	adds	r3, #2
 800d374:	e7f4      	b.n	800d360 <_printf_float+0x1a0>
 800d376:	2301      	movs	r3, #1
 800d378:	e7f2      	b.n	800d360 <_printf_float+0x1a0>
 800d37a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d37e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d380:	4299      	cmp	r1, r3
 800d382:	db05      	blt.n	800d390 <_printf_float+0x1d0>
 800d384:	6823      	ldr	r3, [r4, #0]
 800d386:	6121      	str	r1, [r4, #16]
 800d388:	07d8      	lsls	r0, r3, #31
 800d38a:	d5ea      	bpl.n	800d362 <_printf_float+0x1a2>
 800d38c:	1c4b      	adds	r3, r1, #1
 800d38e:	e7e7      	b.n	800d360 <_printf_float+0x1a0>
 800d390:	2900      	cmp	r1, #0
 800d392:	bfd4      	ite	le
 800d394:	f1c1 0202 	rsble	r2, r1, #2
 800d398:	2201      	movgt	r2, #1
 800d39a:	4413      	add	r3, r2
 800d39c:	e7e0      	b.n	800d360 <_printf_float+0x1a0>
 800d39e:	6823      	ldr	r3, [r4, #0]
 800d3a0:	055a      	lsls	r2, r3, #21
 800d3a2:	d407      	bmi.n	800d3b4 <_printf_float+0x1f4>
 800d3a4:	6923      	ldr	r3, [r4, #16]
 800d3a6:	4642      	mov	r2, r8
 800d3a8:	4631      	mov	r1, r6
 800d3aa:	4628      	mov	r0, r5
 800d3ac:	47b8      	blx	r7
 800d3ae:	3001      	adds	r0, #1
 800d3b0:	d12c      	bne.n	800d40c <_printf_float+0x24c>
 800d3b2:	e764      	b.n	800d27e <_printf_float+0xbe>
 800d3b4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d3b8:	f240 80e0 	bls.w	800d57c <_printf_float+0x3bc>
 800d3bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	f7f3 fba8 	bl	8000b18 <__aeabi_dcmpeq>
 800d3c8:	2800      	cmp	r0, #0
 800d3ca:	d034      	beq.n	800d436 <_printf_float+0x276>
 800d3cc:	4a37      	ldr	r2, [pc, #220]	; (800d4ac <_printf_float+0x2ec>)
 800d3ce:	2301      	movs	r3, #1
 800d3d0:	4631      	mov	r1, r6
 800d3d2:	4628      	mov	r0, r5
 800d3d4:	47b8      	blx	r7
 800d3d6:	3001      	adds	r0, #1
 800d3d8:	f43f af51 	beq.w	800d27e <_printf_float+0xbe>
 800d3dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d3e0:	429a      	cmp	r2, r3
 800d3e2:	db02      	blt.n	800d3ea <_printf_float+0x22a>
 800d3e4:	6823      	ldr	r3, [r4, #0]
 800d3e6:	07d8      	lsls	r0, r3, #31
 800d3e8:	d510      	bpl.n	800d40c <_printf_float+0x24c>
 800d3ea:	ee18 3a10 	vmov	r3, s16
 800d3ee:	4652      	mov	r2, sl
 800d3f0:	4631      	mov	r1, r6
 800d3f2:	4628      	mov	r0, r5
 800d3f4:	47b8      	blx	r7
 800d3f6:	3001      	adds	r0, #1
 800d3f8:	f43f af41 	beq.w	800d27e <_printf_float+0xbe>
 800d3fc:	f04f 0800 	mov.w	r8, #0
 800d400:	f104 091a 	add.w	r9, r4, #26
 800d404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d406:	3b01      	subs	r3, #1
 800d408:	4543      	cmp	r3, r8
 800d40a:	dc09      	bgt.n	800d420 <_printf_float+0x260>
 800d40c:	6823      	ldr	r3, [r4, #0]
 800d40e:	079b      	lsls	r3, r3, #30
 800d410:	f100 8107 	bmi.w	800d622 <_printf_float+0x462>
 800d414:	68e0      	ldr	r0, [r4, #12]
 800d416:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d418:	4298      	cmp	r0, r3
 800d41a:	bfb8      	it	lt
 800d41c:	4618      	movlt	r0, r3
 800d41e:	e730      	b.n	800d282 <_printf_float+0xc2>
 800d420:	2301      	movs	r3, #1
 800d422:	464a      	mov	r2, r9
 800d424:	4631      	mov	r1, r6
 800d426:	4628      	mov	r0, r5
 800d428:	47b8      	blx	r7
 800d42a:	3001      	adds	r0, #1
 800d42c:	f43f af27 	beq.w	800d27e <_printf_float+0xbe>
 800d430:	f108 0801 	add.w	r8, r8, #1
 800d434:	e7e6      	b.n	800d404 <_printf_float+0x244>
 800d436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d438:	2b00      	cmp	r3, #0
 800d43a:	dc39      	bgt.n	800d4b0 <_printf_float+0x2f0>
 800d43c:	4a1b      	ldr	r2, [pc, #108]	; (800d4ac <_printf_float+0x2ec>)
 800d43e:	2301      	movs	r3, #1
 800d440:	4631      	mov	r1, r6
 800d442:	4628      	mov	r0, r5
 800d444:	47b8      	blx	r7
 800d446:	3001      	adds	r0, #1
 800d448:	f43f af19 	beq.w	800d27e <_printf_float+0xbe>
 800d44c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d450:	4313      	orrs	r3, r2
 800d452:	d102      	bne.n	800d45a <_printf_float+0x29a>
 800d454:	6823      	ldr	r3, [r4, #0]
 800d456:	07d9      	lsls	r1, r3, #31
 800d458:	d5d8      	bpl.n	800d40c <_printf_float+0x24c>
 800d45a:	ee18 3a10 	vmov	r3, s16
 800d45e:	4652      	mov	r2, sl
 800d460:	4631      	mov	r1, r6
 800d462:	4628      	mov	r0, r5
 800d464:	47b8      	blx	r7
 800d466:	3001      	adds	r0, #1
 800d468:	f43f af09 	beq.w	800d27e <_printf_float+0xbe>
 800d46c:	f04f 0900 	mov.w	r9, #0
 800d470:	f104 0a1a 	add.w	sl, r4, #26
 800d474:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d476:	425b      	negs	r3, r3
 800d478:	454b      	cmp	r3, r9
 800d47a:	dc01      	bgt.n	800d480 <_printf_float+0x2c0>
 800d47c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d47e:	e792      	b.n	800d3a6 <_printf_float+0x1e6>
 800d480:	2301      	movs	r3, #1
 800d482:	4652      	mov	r2, sl
 800d484:	4631      	mov	r1, r6
 800d486:	4628      	mov	r0, r5
 800d488:	47b8      	blx	r7
 800d48a:	3001      	adds	r0, #1
 800d48c:	f43f aef7 	beq.w	800d27e <_printf_float+0xbe>
 800d490:	f109 0901 	add.w	r9, r9, #1
 800d494:	e7ee      	b.n	800d474 <_printf_float+0x2b4>
 800d496:	bf00      	nop
 800d498:	7fefffff 	.word	0x7fefffff
 800d49c:	08012048 	.word	0x08012048
 800d4a0:	0801204c 	.word	0x0801204c
 800d4a4:	08012050 	.word	0x08012050
 800d4a8:	08012054 	.word	0x08012054
 800d4ac:	08012058 	.word	0x08012058
 800d4b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d4b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d4b4:	429a      	cmp	r2, r3
 800d4b6:	bfa8      	it	ge
 800d4b8:	461a      	movge	r2, r3
 800d4ba:	2a00      	cmp	r2, #0
 800d4bc:	4691      	mov	r9, r2
 800d4be:	dc37      	bgt.n	800d530 <_printf_float+0x370>
 800d4c0:	f04f 0b00 	mov.w	fp, #0
 800d4c4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d4c8:	f104 021a 	add.w	r2, r4, #26
 800d4cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d4ce:	9305      	str	r3, [sp, #20]
 800d4d0:	eba3 0309 	sub.w	r3, r3, r9
 800d4d4:	455b      	cmp	r3, fp
 800d4d6:	dc33      	bgt.n	800d540 <_printf_float+0x380>
 800d4d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d4dc:	429a      	cmp	r2, r3
 800d4de:	db3b      	blt.n	800d558 <_printf_float+0x398>
 800d4e0:	6823      	ldr	r3, [r4, #0]
 800d4e2:	07da      	lsls	r2, r3, #31
 800d4e4:	d438      	bmi.n	800d558 <_printf_float+0x398>
 800d4e6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d4ea:	eba2 0903 	sub.w	r9, r2, r3
 800d4ee:	9b05      	ldr	r3, [sp, #20]
 800d4f0:	1ad2      	subs	r2, r2, r3
 800d4f2:	4591      	cmp	r9, r2
 800d4f4:	bfa8      	it	ge
 800d4f6:	4691      	movge	r9, r2
 800d4f8:	f1b9 0f00 	cmp.w	r9, #0
 800d4fc:	dc35      	bgt.n	800d56a <_printf_float+0x3aa>
 800d4fe:	f04f 0800 	mov.w	r8, #0
 800d502:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d506:	f104 0a1a 	add.w	sl, r4, #26
 800d50a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d50e:	1a9b      	subs	r3, r3, r2
 800d510:	eba3 0309 	sub.w	r3, r3, r9
 800d514:	4543      	cmp	r3, r8
 800d516:	f77f af79 	ble.w	800d40c <_printf_float+0x24c>
 800d51a:	2301      	movs	r3, #1
 800d51c:	4652      	mov	r2, sl
 800d51e:	4631      	mov	r1, r6
 800d520:	4628      	mov	r0, r5
 800d522:	47b8      	blx	r7
 800d524:	3001      	adds	r0, #1
 800d526:	f43f aeaa 	beq.w	800d27e <_printf_float+0xbe>
 800d52a:	f108 0801 	add.w	r8, r8, #1
 800d52e:	e7ec      	b.n	800d50a <_printf_float+0x34a>
 800d530:	4613      	mov	r3, r2
 800d532:	4631      	mov	r1, r6
 800d534:	4642      	mov	r2, r8
 800d536:	4628      	mov	r0, r5
 800d538:	47b8      	blx	r7
 800d53a:	3001      	adds	r0, #1
 800d53c:	d1c0      	bne.n	800d4c0 <_printf_float+0x300>
 800d53e:	e69e      	b.n	800d27e <_printf_float+0xbe>
 800d540:	2301      	movs	r3, #1
 800d542:	4631      	mov	r1, r6
 800d544:	4628      	mov	r0, r5
 800d546:	9205      	str	r2, [sp, #20]
 800d548:	47b8      	blx	r7
 800d54a:	3001      	adds	r0, #1
 800d54c:	f43f ae97 	beq.w	800d27e <_printf_float+0xbe>
 800d550:	9a05      	ldr	r2, [sp, #20]
 800d552:	f10b 0b01 	add.w	fp, fp, #1
 800d556:	e7b9      	b.n	800d4cc <_printf_float+0x30c>
 800d558:	ee18 3a10 	vmov	r3, s16
 800d55c:	4652      	mov	r2, sl
 800d55e:	4631      	mov	r1, r6
 800d560:	4628      	mov	r0, r5
 800d562:	47b8      	blx	r7
 800d564:	3001      	adds	r0, #1
 800d566:	d1be      	bne.n	800d4e6 <_printf_float+0x326>
 800d568:	e689      	b.n	800d27e <_printf_float+0xbe>
 800d56a:	9a05      	ldr	r2, [sp, #20]
 800d56c:	464b      	mov	r3, r9
 800d56e:	4442      	add	r2, r8
 800d570:	4631      	mov	r1, r6
 800d572:	4628      	mov	r0, r5
 800d574:	47b8      	blx	r7
 800d576:	3001      	adds	r0, #1
 800d578:	d1c1      	bne.n	800d4fe <_printf_float+0x33e>
 800d57a:	e680      	b.n	800d27e <_printf_float+0xbe>
 800d57c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d57e:	2a01      	cmp	r2, #1
 800d580:	dc01      	bgt.n	800d586 <_printf_float+0x3c6>
 800d582:	07db      	lsls	r3, r3, #31
 800d584:	d53a      	bpl.n	800d5fc <_printf_float+0x43c>
 800d586:	2301      	movs	r3, #1
 800d588:	4642      	mov	r2, r8
 800d58a:	4631      	mov	r1, r6
 800d58c:	4628      	mov	r0, r5
 800d58e:	47b8      	blx	r7
 800d590:	3001      	adds	r0, #1
 800d592:	f43f ae74 	beq.w	800d27e <_printf_float+0xbe>
 800d596:	ee18 3a10 	vmov	r3, s16
 800d59a:	4652      	mov	r2, sl
 800d59c:	4631      	mov	r1, r6
 800d59e:	4628      	mov	r0, r5
 800d5a0:	47b8      	blx	r7
 800d5a2:	3001      	adds	r0, #1
 800d5a4:	f43f ae6b 	beq.w	800d27e <_printf_float+0xbe>
 800d5a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800d5b4:	f7f3 fab0 	bl	8000b18 <__aeabi_dcmpeq>
 800d5b8:	b9d8      	cbnz	r0, 800d5f2 <_printf_float+0x432>
 800d5ba:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d5be:	f108 0201 	add.w	r2, r8, #1
 800d5c2:	4631      	mov	r1, r6
 800d5c4:	4628      	mov	r0, r5
 800d5c6:	47b8      	blx	r7
 800d5c8:	3001      	adds	r0, #1
 800d5ca:	d10e      	bne.n	800d5ea <_printf_float+0x42a>
 800d5cc:	e657      	b.n	800d27e <_printf_float+0xbe>
 800d5ce:	2301      	movs	r3, #1
 800d5d0:	4652      	mov	r2, sl
 800d5d2:	4631      	mov	r1, r6
 800d5d4:	4628      	mov	r0, r5
 800d5d6:	47b8      	blx	r7
 800d5d8:	3001      	adds	r0, #1
 800d5da:	f43f ae50 	beq.w	800d27e <_printf_float+0xbe>
 800d5de:	f108 0801 	add.w	r8, r8, #1
 800d5e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d5e4:	3b01      	subs	r3, #1
 800d5e6:	4543      	cmp	r3, r8
 800d5e8:	dcf1      	bgt.n	800d5ce <_printf_float+0x40e>
 800d5ea:	464b      	mov	r3, r9
 800d5ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d5f0:	e6da      	b.n	800d3a8 <_printf_float+0x1e8>
 800d5f2:	f04f 0800 	mov.w	r8, #0
 800d5f6:	f104 0a1a 	add.w	sl, r4, #26
 800d5fa:	e7f2      	b.n	800d5e2 <_printf_float+0x422>
 800d5fc:	2301      	movs	r3, #1
 800d5fe:	4642      	mov	r2, r8
 800d600:	e7df      	b.n	800d5c2 <_printf_float+0x402>
 800d602:	2301      	movs	r3, #1
 800d604:	464a      	mov	r2, r9
 800d606:	4631      	mov	r1, r6
 800d608:	4628      	mov	r0, r5
 800d60a:	47b8      	blx	r7
 800d60c:	3001      	adds	r0, #1
 800d60e:	f43f ae36 	beq.w	800d27e <_printf_float+0xbe>
 800d612:	f108 0801 	add.w	r8, r8, #1
 800d616:	68e3      	ldr	r3, [r4, #12]
 800d618:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d61a:	1a5b      	subs	r3, r3, r1
 800d61c:	4543      	cmp	r3, r8
 800d61e:	dcf0      	bgt.n	800d602 <_printf_float+0x442>
 800d620:	e6f8      	b.n	800d414 <_printf_float+0x254>
 800d622:	f04f 0800 	mov.w	r8, #0
 800d626:	f104 0919 	add.w	r9, r4, #25
 800d62a:	e7f4      	b.n	800d616 <_printf_float+0x456>

0800d62c <_printf_common>:
 800d62c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d630:	4616      	mov	r6, r2
 800d632:	4699      	mov	r9, r3
 800d634:	688a      	ldr	r2, [r1, #8]
 800d636:	690b      	ldr	r3, [r1, #16]
 800d638:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d63c:	4293      	cmp	r3, r2
 800d63e:	bfb8      	it	lt
 800d640:	4613      	movlt	r3, r2
 800d642:	6033      	str	r3, [r6, #0]
 800d644:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d648:	4607      	mov	r7, r0
 800d64a:	460c      	mov	r4, r1
 800d64c:	b10a      	cbz	r2, 800d652 <_printf_common+0x26>
 800d64e:	3301      	adds	r3, #1
 800d650:	6033      	str	r3, [r6, #0]
 800d652:	6823      	ldr	r3, [r4, #0]
 800d654:	0699      	lsls	r1, r3, #26
 800d656:	bf42      	ittt	mi
 800d658:	6833      	ldrmi	r3, [r6, #0]
 800d65a:	3302      	addmi	r3, #2
 800d65c:	6033      	strmi	r3, [r6, #0]
 800d65e:	6825      	ldr	r5, [r4, #0]
 800d660:	f015 0506 	ands.w	r5, r5, #6
 800d664:	d106      	bne.n	800d674 <_printf_common+0x48>
 800d666:	f104 0a19 	add.w	sl, r4, #25
 800d66a:	68e3      	ldr	r3, [r4, #12]
 800d66c:	6832      	ldr	r2, [r6, #0]
 800d66e:	1a9b      	subs	r3, r3, r2
 800d670:	42ab      	cmp	r3, r5
 800d672:	dc26      	bgt.n	800d6c2 <_printf_common+0x96>
 800d674:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d678:	1e13      	subs	r3, r2, #0
 800d67a:	6822      	ldr	r2, [r4, #0]
 800d67c:	bf18      	it	ne
 800d67e:	2301      	movne	r3, #1
 800d680:	0692      	lsls	r2, r2, #26
 800d682:	d42b      	bmi.n	800d6dc <_printf_common+0xb0>
 800d684:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d688:	4649      	mov	r1, r9
 800d68a:	4638      	mov	r0, r7
 800d68c:	47c0      	blx	r8
 800d68e:	3001      	adds	r0, #1
 800d690:	d01e      	beq.n	800d6d0 <_printf_common+0xa4>
 800d692:	6823      	ldr	r3, [r4, #0]
 800d694:	6922      	ldr	r2, [r4, #16]
 800d696:	f003 0306 	and.w	r3, r3, #6
 800d69a:	2b04      	cmp	r3, #4
 800d69c:	bf02      	ittt	eq
 800d69e:	68e5      	ldreq	r5, [r4, #12]
 800d6a0:	6833      	ldreq	r3, [r6, #0]
 800d6a2:	1aed      	subeq	r5, r5, r3
 800d6a4:	68a3      	ldr	r3, [r4, #8]
 800d6a6:	bf0c      	ite	eq
 800d6a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d6ac:	2500      	movne	r5, #0
 800d6ae:	4293      	cmp	r3, r2
 800d6b0:	bfc4      	itt	gt
 800d6b2:	1a9b      	subgt	r3, r3, r2
 800d6b4:	18ed      	addgt	r5, r5, r3
 800d6b6:	2600      	movs	r6, #0
 800d6b8:	341a      	adds	r4, #26
 800d6ba:	42b5      	cmp	r5, r6
 800d6bc:	d11a      	bne.n	800d6f4 <_printf_common+0xc8>
 800d6be:	2000      	movs	r0, #0
 800d6c0:	e008      	b.n	800d6d4 <_printf_common+0xa8>
 800d6c2:	2301      	movs	r3, #1
 800d6c4:	4652      	mov	r2, sl
 800d6c6:	4649      	mov	r1, r9
 800d6c8:	4638      	mov	r0, r7
 800d6ca:	47c0      	blx	r8
 800d6cc:	3001      	adds	r0, #1
 800d6ce:	d103      	bne.n	800d6d8 <_printf_common+0xac>
 800d6d0:	f04f 30ff 	mov.w	r0, #4294967295
 800d6d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6d8:	3501      	adds	r5, #1
 800d6da:	e7c6      	b.n	800d66a <_printf_common+0x3e>
 800d6dc:	18e1      	adds	r1, r4, r3
 800d6de:	1c5a      	adds	r2, r3, #1
 800d6e0:	2030      	movs	r0, #48	; 0x30
 800d6e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d6e6:	4422      	add	r2, r4
 800d6e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d6ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d6f0:	3302      	adds	r3, #2
 800d6f2:	e7c7      	b.n	800d684 <_printf_common+0x58>
 800d6f4:	2301      	movs	r3, #1
 800d6f6:	4622      	mov	r2, r4
 800d6f8:	4649      	mov	r1, r9
 800d6fa:	4638      	mov	r0, r7
 800d6fc:	47c0      	blx	r8
 800d6fe:	3001      	adds	r0, #1
 800d700:	d0e6      	beq.n	800d6d0 <_printf_common+0xa4>
 800d702:	3601      	adds	r6, #1
 800d704:	e7d9      	b.n	800d6ba <_printf_common+0x8e>
	...

0800d708 <_printf_i>:
 800d708:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d70c:	7e0f      	ldrb	r7, [r1, #24]
 800d70e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d710:	2f78      	cmp	r7, #120	; 0x78
 800d712:	4691      	mov	r9, r2
 800d714:	4680      	mov	r8, r0
 800d716:	460c      	mov	r4, r1
 800d718:	469a      	mov	sl, r3
 800d71a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d71e:	d807      	bhi.n	800d730 <_printf_i+0x28>
 800d720:	2f62      	cmp	r7, #98	; 0x62
 800d722:	d80a      	bhi.n	800d73a <_printf_i+0x32>
 800d724:	2f00      	cmp	r7, #0
 800d726:	f000 80d4 	beq.w	800d8d2 <_printf_i+0x1ca>
 800d72a:	2f58      	cmp	r7, #88	; 0x58
 800d72c:	f000 80c0 	beq.w	800d8b0 <_printf_i+0x1a8>
 800d730:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d734:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d738:	e03a      	b.n	800d7b0 <_printf_i+0xa8>
 800d73a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d73e:	2b15      	cmp	r3, #21
 800d740:	d8f6      	bhi.n	800d730 <_printf_i+0x28>
 800d742:	a101      	add	r1, pc, #4	; (adr r1, 800d748 <_printf_i+0x40>)
 800d744:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d748:	0800d7a1 	.word	0x0800d7a1
 800d74c:	0800d7b5 	.word	0x0800d7b5
 800d750:	0800d731 	.word	0x0800d731
 800d754:	0800d731 	.word	0x0800d731
 800d758:	0800d731 	.word	0x0800d731
 800d75c:	0800d731 	.word	0x0800d731
 800d760:	0800d7b5 	.word	0x0800d7b5
 800d764:	0800d731 	.word	0x0800d731
 800d768:	0800d731 	.word	0x0800d731
 800d76c:	0800d731 	.word	0x0800d731
 800d770:	0800d731 	.word	0x0800d731
 800d774:	0800d8b9 	.word	0x0800d8b9
 800d778:	0800d7e1 	.word	0x0800d7e1
 800d77c:	0800d873 	.word	0x0800d873
 800d780:	0800d731 	.word	0x0800d731
 800d784:	0800d731 	.word	0x0800d731
 800d788:	0800d8db 	.word	0x0800d8db
 800d78c:	0800d731 	.word	0x0800d731
 800d790:	0800d7e1 	.word	0x0800d7e1
 800d794:	0800d731 	.word	0x0800d731
 800d798:	0800d731 	.word	0x0800d731
 800d79c:	0800d87b 	.word	0x0800d87b
 800d7a0:	682b      	ldr	r3, [r5, #0]
 800d7a2:	1d1a      	adds	r2, r3, #4
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	602a      	str	r2, [r5, #0]
 800d7a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d7ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d7b0:	2301      	movs	r3, #1
 800d7b2:	e09f      	b.n	800d8f4 <_printf_i+0x1ec>
 800d7b4:	6820      	ldr	r0, [r4, #0]
 800d7b6:	682b      	ldr	r3, [r5, #0]
 800d7b8:	0607      	lsls	r7, r0, #24
 800d7ba:	f103 0104 	add.w	r1, r3, #4
 800d7be:	6029      	str	r1, [r5, #0]
 800d7c0:	d501      	bpl.n	800d7c6 <_printf_i+0xbe>
 800d7c2:	681e      	ldr	r6, [r3, #0]
 800d7c4:	e003      	b.n	800d7ce <_printf_i+0xc6>
 800d7c6:	0646      	lsls	r6, r0, #25
 800d7c8:	d5fb      	bpl.n	800d7c2 <_printf_i+0xba>
 800d7ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d7ce:	2e00      	cmp	r6, #0
 800d7d0:	da03      	bge.n	800d7da <_printf_i+0xd2>
 800d7d2:	232d      	movs	r3, #45	; 0x2d
 800d7d4:	4276      	negs	r6, r6
 800d7d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d7da:	485a      	ldr	r0, [pc, #360]	; (800d944 <_printf_i+0x23c>)
 800d7dc:	230a      	movs	r3, #10
 800d7de:	e012      	b.n	800d806 <_printf_i+0xfe>
 800d7e0:	682b      	ldr	r3, [r5, #0]
 800d7e2:	6820      	ldr	r0, [r4, #0]
 800d7e4:	1d19      	adds	r1, r3, #4
 800d7e6:	6029      	str	r1, [r5, #0]
 800d7e8:	0605      	lsls	r5, r0, #24
 800d7ea:	d501      	bpl.n	800d7f0 <_printf_i+0xe8>
 800d7ec:	681e      	ldr	r6, [r3, #0]
 800d7ee:	e002      	b.n	800d7f6 <_printf_i+0xee>
 800d7f0:	0641      	lsls	r1, r0, #25
 800d7f2:	d5fb      	bpl.n	800d7ec <_printf_i+0xe4>
 800d7f4:	881e      	ldrh	r6, [r3, #0]
 800d7f6:	4853      	ldr	r0, [pc, #332]	; (800d944 <_printf_i+0x23c>)
 800d7f8:	2f6f      	cmp	r7, #111	; 0x6f
 800d7fa:	bf0c      	ite	eq
 800d7fc:	2308      	moveq	r3, #8
 800d7fe:	230a      	movne	r3, #10
 800d800:	2100      	movs	r1, #0
 800d802:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d806:	6865      	ldr	r5, [r4, #4]
 800d808:	60a5      	str	r5, [r4, #8]
 800d80a:	2d00      	cmp	r5, #0
 800d80c:	bfa2      	ittt	ge
 800d80e:	6821      	ldrge	r1, [r4, #0]
 800d810:	f021 0104 	bicge.w	r1, r1, #4
 800d814:	6021      	strge	r1, [r4, #0]
 800d816:	b90e      	cbnz	r6, 800d81c <_printf_i+0x114>
 800d818:	2d00      	cmp	r5, #0
 800d81a:	d04b      	beq.n	800d8b4 <_printf_i+0x1ac>
 800d81c:	4615      	mov	r5, r2
 800d81e:	fbb6 f1f3 	udiv	r1, r6, r3
 800d822:	fb03 6711 	mls	r7, r3, r1, r6
 800d826:	5dc7      	ldrb	r7, [r0, r7]
 800d828:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d82c:	4637      	mov	r7, r6
 800d82e:	42bb      	cmp	r3, r7
 800d830:	460e      	mov	r6, r1
 800d832:	d9f4      	bls.n	800d81e <_printf_i+0x116>
 800d834:	2b08      	cmp	r3, #8
 800d836:	d10b      	bne.n	800d850 <_printf_i+0x148>
 800d838:	6823      	ldr	r3, [r4, #0]
 800d83a:	07de      	lsls	r6, r3, #31
 800d83c:	d508      	bpl.n	800d850 <_printf_i+0x148>
 800d83e:	6923      	ldr	r3, [r4, #16]
 800d840:	6861      	ldr	r1, [r4, #4]
 800d842:	4299      	cmp	r1, r3
 800d844:	bfde      	ittt	le
 800d846:	2330      	movle	r3, #48	; 0x30
 800d848:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d84c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d850:	1b52      	subs	r2, r2, r5
 800d852:	6122      	str	r2, [r4, #16]
 800d854:	f8cd a000 	str.w	sl, [sp]
 800d858:	464b      	mov	r3, r9
 800d85a:	aa03      	add	r2, sp, #12
 800d85c:	4621      	mov	r1, r4
 800d85e:	4640      	mov	r0, r8
 800d860:	f7ff fee4 	bl	800d62c <_printf_common>
 800d864:	3001      	adds	r0, #1
 800d866:	d14a      	bne.n	800d8fe <_printf_i+0x1f6>
 800d868:	f04f 30ff 	mov.w	r0, #4294967295
 800d86c:	b004      	add	sp, #16
 800d86e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d872:	6823      	ldr	r3, [r4, #0]
 800d874:	f043 0320 	orr.w	r3, r3, #32
 800d878:	6023      	str	r3, [r4, #0]
 800d87a:	4833      	ldr	r0, [pc, #204]	; (800d948 <_printf_i+0x240>)
 800d87c:	2778      	movs	r7, #120	; 0x78
 800d87e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d882:	6823      	ldr	r3, [r4, #0]
 800d884:	6829      	ldr	r1, [r5, #0]
 800d886:	061f      	lsls	r7, r3, #24
 800d888:	f851 6b04 	ldr.w	r6, [r1], #4
 800d88c:	d402      	bmi.n	800d894 <_printf_i+0x18c>
 800d88e:	065f      	lsls	r7, r3, #25
 800d890:	bf48      	it	mi
 800d892:	b2b6      	uxthmi	r6, r6
 800d894:	07df      	lsls	r7, r3, #31
 800d896:	bf48      	it	mi
 800d898:	f043 0320 	orrmi.w	r3, r3, #32
 800d89c:	6029      	str	r1, [r5, #0]
 800d89e:	bf48      	it	mi
 800d8a0:	6023      	strmi	r3, [r4, #0]
 800d8a2:	b91e      	cbnz	r6, 800d8ac <_printf_i+0x1a4>
 800d8a4:	6823      	ldr	r3, [r4, #0]
 800d8a6:	f023 0320 	bic.w	r3, r3, #32
 800d8aa:	6023      	str	r3, [r4, #0]
 800d8ac:	2310      	movs	r3, #16
 800d8ae:	e7a7      	b.n	800d800 <_printf_i+0xf8>
 800d8b0:	4824      	ldr	r0, [pc, #144]	; (800d944 <_printf_i+0x23c>)
 800d8b2:	e7e4      	b.n	800d87e <_printf_i+0x176>
 800d8b4:	4615      	mov	r5, r2
 800d8b6:	e7bd      	b.n	800d834 <_printf_i+0x12c>
 800d8b8:	682b      	ldr	r3, [r5, #0]
 800d8ba:	6826      	ldr	r6, [r4, #0]
 800d8bc:	6961      	ldr	r1, [r4, #20]
 800d8be:	1d18      	adds	r0, r3, #4
 800d8c0:	6028      	str	r0, [r5, #0]
 800d8c2:	0635      	lsls	r5, r6, #24
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	d501      	bpl.n	800d8cc <_printf_i+0x1c4>
 800d8c8:	6019      	str	r1, [r3, #0]
 800d8ca:	e002      	b.n	800d8d2 <_printf_i+0x1ca>
 800d8cc:	0670      	lsls	r0, r6, #25
 800d8ce:	d5fb      	bpl.n	800d8c8 <_printf_i+0x1c0>
 800d8d0:	8019      	strh	r1, [r3, #0]
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	6123      	str	r3, [r4, #16]
 800d8d6:	4615      	mov	r5, r2
 800d8d8:	e7bc      	b.n	800d854 <_printf_i+0x14c>
 800d8da:	682b      	ldr	r3, [r5, #0]
 800d8dc:	1d1a      	adds	r2, r3, #4
 800d8de:	602a      	str	r2, [r5, #0]
 800d8e0:	681d      	ldr	r5, [r3, #0]
 800d8e2:	6862      	ldr	r2, [r4, #4]
 800d8e4:	2100      	movs	r1, #0
 800d8e6:	4628      	mov	r0, r5
 800d8e8:	f7f2 fc9a 	bl	8000220 <memchr>
 800d8ec:	b108      	cbz	r0, 800d8f2 <_printf_i+0x1ea>
 800d8ee:	1b40      	subs	r0, r0, r5
 800d8f0:	6060      	str	r0, [r4, #4]
 800d8f2:	6863      	ldr	r3, [r4, #4]
 800d8f4:	6123      	str	r3, [r4, #16]
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d8fc:	e7aa      	b.n	800d854 <_printf_i+0x14c>
 800d8fe:	6923      	ldr	r3, [r4, #16]
 800d900:	462a      	mov	r2, r5
 800d902:	4649      	mov	r1, r9
 800d904:	4640      	mov	r0, r8
 800d906:	47d0      	blx	sl
 800d908:	3001      	adds	r0, #1
 800d90a:	d0ad      	beq.n	800d868 <_printf_i+0x160>
 800d90c:	6823      	ldr	r3, [r4, #0]
 800d90e:	079b      	lsls	r3, r3, #30
 800d910:	d413      	bmi.n	800d93a <_printf_i+0x232>
 800d912:	68e0      	ldr	r0, [r4, #12]
 800d914:	9b03      	ldr	r3, [sp, #12]
 800d916:	4298      	cmp	r0, r3
 800d918:	bfb8      	it	lt
 800d91a:	4618      	movlt	r0, r3
 800d91c:	e7a6      	b.n	800d86c <_printf_i+0x164>
 800d91e:	2301      	movs	r3, #1
 800d920:	4632      	mov	r2, r6
 800d922:	4649      	mov	r1, r9
 800d924:	4640      	mov	r0, r8
 800d926:	47d0      	blx	sl
 800d928:	3001      	adds	r0, #1
 800d92a:	d09d      	beq.n	800d868 <_printf_i+0x160>
 800d92c:	3501      	adds	r5, #1
 800d92e:	68e3      	ldr	r3, [r4, #12]
 800d930:	9903      	ldr	r1, [sp, #12]
 800d932:	1a5b      	subs	r3, r3, r1
 800d934:	42ab      	cmp	r3, r5
 800d936:	dcf2      	bgt.n	800d91e <_printf_i+0x216>
 800d938:	e7eb      	b.n	800d912 <_printf_i+0x20a>
 800d93a:	2500      	movs	r5, #0
 800d93c:	f104 0619 	add.w	r6, r4, #25
 800d940:	e7f5      	b.n	800d92e <_printf_i+0x226>
 800d942:	bf00      	nop
 800d944:	0801205a 	.word	0x0801205a
 800d948:	0801206b 	.word	0x0801206b

0800d94c <std>:
 800d94c:	2300      	movs	r3, #0
 800d94e:	b510      	push	{r4, lr}
 800d950:	4604      	mov	r4, r0
 800d952:	e9c0 3300 	strd	r3, r3, [r0]
 800d956:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d95a:	6083      	str	r3, [r0, #8]
 800d95c:	8181      	strh	r1, [r0, #12]
 800d95e:	6643      	str	r3, [r0, #100]	; 0x64
 800d960:	81c2      	strh	r2, [r0, #14]
 800d962:	6183      	str	r3, [r0, #24]
 800d964:	4619      	mov	r1, r3
 800d966:	2208      	movs	r2, #8
 800d968:	305c      	adds	r0, #92	; 0x5c
 800d96a:	f000 f92d 	bl	800dbc8 <memset>
 800d96e:	4b0d      	ldr	r3, [pc, #52]	; (800d9a4 <std+0x58>)
 800d970:	6263      	str	r3, [r4, #36]	; 0x24
 800d972:	4b0d      	ldr	r3, [pc, #52]	; (800d9a8 <std+0x5c>)
 800d974:	62a3      	str	r3, [r4, #40]	; 0x28
 800d976:	4b0d      	ldr	r3, [pc, #52]	; (800d9ac <std+0x60>)
 800d978:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d97a:	4b0d      	ldr	r3, [pc, #52]	; (800d9b0 <std+0x64>)
 800d97c:	6323      	str	r3, [r4, #48]	; 0x30
 800d97e:	4b0d      	ldr	r3, [pc, #52]	; (800d9b4 <std+0x68>)
 800d980:	6224      	str	r4, [r4, #32]
 800d982:	429c      	cmp	r4, r3
 800d984:	d006      	beq.n	800d994 <std+0x48>
 800d986:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d98a:	4294      	cmp	r4, r2
 800d98c:	d002      	beq.n	800d994 <std+0x48>
 800d98e:	33d0      	adds	r3, #208	; 0xd0
 800d990:	429c      	cmp	r4, r3
 800d992:	d105      	bne.n	800d9a0 <std+0x54>
 800d994:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d99c:	f000 b990 	b.w	800dcc0 <__retarget_lock_init_recursive>
 800d9a0:	bd10      	pop	{r4, pc}
 800d9a2:	bf00      	nop
 800d9a4:	0800dad1 	.word	0x0800dad1
 800d9a8:	0800daf3 	.word	0x0800daf3
 800d9ac:	0800db2b 	.word	0x0800db2b
 800d9b0:	0800db4f 	.word	0x0800db4f
 800d9b4:	200017cc 	.word	0x200017cc

0800d9b8 <stdio_exit_handler>:
 800d9b8:	4a02      	ldr	r2, [pc, #8]	; (800d9c4 <stdio_exit_handler+0xc>)
 800d9ba:	4903      	ldr	r1, [pc, #12]	; (800d9c8 <stdio_exit_handler+0x10>)
 800d9bc:	4803      	ldr	r0, [pc, #12]	; (800d9cc <stdio_exit_handler+0x14>)
 800d9be:	f000 b869 	b.w	800da94 <_fwalk_sglue>
 800d9c2:	bf00      	nop
 800d9c4:	20000018 	.word	0x20000018
 800d9c8:	0800f691 	.word	0x0800f691
 800d9cc:	20000024 	.word	0x20000024

0800d9d0 <cleanup_stdio>:
 800d9d0:	6841      	ldr	r1, [r0, #4]
 800d9d2:	4b0c      	ldr	r3, [pc, #48]	; (800da04 <cleanup_stdio+0x34>)
 800d9d4:	4299      	cmp	r1, r3
 800d9d6:	b510      	push	{r4, lr}
 800d9d8:	4604      	mov	r4, r0
 800d9da:	d001      	beq.n	800d9e0 <cleanup_stdio+0x10>
 800d9dc:	f001 fe58 	bl	800f690 <_fflush_r>
 800d9e0:	68a1      	ldr	r1, [r4, #8]
 800d9e2:	4b09      	ldr	r3, [pc, #36]	; (800da08 <cleanup_stdio+0x38>)
 800d9e4:	4299      	cmp	r1, r3
 800d9e6:	d002      	beq.n	800d9ee <cleanup_stdio+0x1e>
 800d9e8:	4620      	mov	r0, r4
 800d9ea:	f001 fe51 	bl	800f690 <_fflush_r>
 800d9ee:	68e1      	ldr	r1, [r4, #12]
 800d9f0:	4b06      	ldr	r3, [pc, #24]	; (800da0c <cleanup_stdio+0x3c>)
 800d9f2:	4299      	cmp	r1, r3
 800d9f4:	d004      	beq.n	800da00 <cleanup_stdio+0x30>
 800d9f6:	4620      	mov	r0, r4
 800d9f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9fc:	f001 be48 	b.w	800f690 <_fflush_r>
 800da00:	bd10      	pop	{r4, pc}
 800da02:	bf00      	nop
 800da04:	200017cc 	.word	0x200017cc
 800da08:	20001834 	.word	0x20001834
 800da0c:	2000189c 	.word	0x2000189c

0800da10 <global_stdio_init.part.0>:
 800da10:	b510      	push	{r4, lr}
 800da12:	4b0b      	ldr	r3, [pc, #44]	; (800da40 <global_stdio_init.part.0+0x30>)
 800da14:	4c0b      	ldr	r4, [pc, #44]	; (800da44 <global_stdio_init.part.0+0x34>)
 800da16:	4a0c      	ldr	r2, [pc, #48]	; (800da48 <global_stdio_init.part.0+0x38>)
 800da18:	601a      	str	r2, [r3, #0]
 800da1a:	4620      	mov	r0, r4
 800da1c:	2200      	movs	r2, #0
 800da1e:	2104      	movs	r1, #4
 800da20:	f7ff ff94 	bl	800d94c <std>
 800da24:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800da28:	2201      	movs	r2, #1
 800da2a:	2109      	movs	r1, #9
 800da2c:	f7ff ff8e 	bl	800d94c <std>
 800da30:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800da34:	2202      	movs	r2, #2
 800da36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da3a:	2112      	movs	r1, #18
 800da3c:	f7ff bf86 	b.w	800d94c <std>
 800da40:	20001904 	.word	0x20001904
 800da44:	200017cc 	.word	0x200017cc
 800da48:	0800d9b9 	.word	0x0800d9b9

0800da4c <__sfp_lock_acquire>:
 800da4c:	4801      	ldr	r0, [pc, #4]	; (800da54 <__sfp_lock_acquire+0x8>)
 800da4e:	f000 b938 	b.w	800dcc2 <__retarget_lock_acquire_recursive>
 800da52:	bf00      	nop
 800da54:	2000190d 	.word	0x2000190d

0800da58 <__sfp_lock_release>:
 800da58:	4801      	ldr	r0, [pc, #4]	; (800da60 <__sfp_lock_release+0x8>)
 800da5a:	f000 b933 	b.w	800dcc4 <__retarget_lock_release_recursive>
 800da5e:	bf00      	nop
 800da60:	2000190d 	.word	0x2000190d

0800da64 <__sinit>:
 800da64:	b510      	push	{r4, lr}
 800da66:	4604      	mov	r4, r0
 800da68:	f7ff fff0 	bl	800da4c <__sfp_lock_acquire>
 800da6c:	6a23      	ldr	r3, [r4, #32]
 800da6e:	b11b      	cbz	r3, 800da78 <__sinit+0x14>
 800da70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da74:	f7ff bff0 	b.w	800da58 <__sfp_lock_release>
 800da78:	4b04      	ldr	r3, [pc, #16]	; (800da8c <__sinit+0x28>)
 800da7a:	6223      	str	r3, [r4, #32]
 800da7c:	4b04      	ldr	r3, [pc, #16]	; (800da90 <__sinit+0x2c>)
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d1f5      	bne.n	800da70 <__sinit+0xc>
 800da84:	f7ff ffc4 	bl	800da10 <global_stdio_init.part.0>
 800da88:	e7f2      	b.n	800da70 <__sinit+0xc>
 800da8a:	bf00      	nop
 800da8c:	0800d9d1 	.word	0x0800d9d1
 800da90:	20001904 	.word	0x20001904

0800da94 <_fwalk_sglue>:
 800da94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da98:	4607      	mov	r7, r0
 800da9a:	4688      	mov	r8, r1
 800da9c:	4614      	mov	r4, r2
 800da9e:	2600      	movs	r6, #0
 800daa0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800daa4:	f1b9 0901 	subs.w	r9, r9, #1
 800daa8:	d505      	bpl.n	800dab6 <_fwalk_sglue+0x22>
 800daaa:	6824      	ldr	r4, [r4, #0]
 800daac:	2c00      	cmp	r4, #0
 800daae:	d1f7      	bne.n	800daa0 <_fwalk_sglue+0xc>
 800dab0:	4630      	mov	r0, r6
 800dab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dab6:	89ab      	ldrh	r3, [r5, #12]
 800dab8:	2b01      	cmp	r3, #1
 800daba:	d907      	bls.n	800dacc <_fwalk_sglue+0x38>
 800dabc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dac0:	3301      	adds	r3, #1
 800dac2:	d003      	beq.n	800dacc <_fwalk_sglue+0x38>
 800dac4:	4629      	mov	r1, r5
 800dac6:	4638      	mov	r0, r7
 800dac8:	47c0      	blx	r8
 800daca:	4306      	orrs	r6, r0
 800dacc:	3568      	adds	r5, #104	; 0x68
 800dace:	e7e9      	b.n	800daa4 <_fwalk_sglue+0x10>

0800dad0 <__sread>:
 800dad0:	b510      	push	{r4, lr}
 800dad2:	460c      	mov	r4, r1
 800dad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dad8:	f000 f8a4 	bl	800dc24 <_read_r>
 800dadc:	2800      	cmp	r0, #0
 800dade:	bfab      	itete	ge
 800dae0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dae2:	89a3      	ldrhlt	r3, [r4, #12]
 800dae4:	181b      	addge	r3, r3, r0
 800dae6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800daea:	bfac      	ite	ge
 800daec:	6563      	strge	r3, [r4, #84]	; 0x54
 800daee:	81a3      	strhlt	r3, [r4, #12]
 800daf0:	bd10      	pop	{r4, pc}

0800daf2 <__swrite>:
 800daf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800daf6:	461f      	mov	r7, r3
 800daf8:	898b      	ldrh	r3, [r1, #12]
 800dafa:	05db      	lsls	r3, r3, #23
 800dafc:	4605      	mov	r5, r0
 800dafe:	460c      	mov	r4, r1
 800db00:	4616      	mov	r6, r2
 800db02:	d505      	bpl.n	800db10 <__swrite+0x1e>
 800db04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db08:	2302      	movs	r3, #2
 800db0a:	2200      	movs	r2, #0
 800db0c:	f000 f878 	bl	800dc00 <_lseek_r>
 800db10:	89a3      	ldrh	r3, [r4, #12]
 800db12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800db16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800db1a:	81a3      	strh	r3, [r4, #12]
 800db1c:	4632      	mov	r2, r6
 800db1e:	463b      	mov	r3, r7
 800db20:	4628      	mov	r0, r5
 800db22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db26:	f000 b88f 	b.w	800dc48 <_write_r>

0800db2a <__sseek>:
 800db2a:	b510      	push	{r4, lr}
 800db2c:	460c      	mov	r4, r1
 800db2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db32:	f000 f865 	bl	800dc00 <_lseek_r>
 800db36:	1c43      	adds	r3, r0, #1
 800db38:	89a3      	ldrh	r3, [r4, #12]
 800db3a:	bf15      	itete	ne
 800db3c:	6560      	strne	r0, [r4, #84]	; 0x54
 800db3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800db42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800db46:	81a3      	strheq	r3, [r4, #12]
 800db48:	bf18      	it	ne
 800db4a:	81a3      	strhne	r3, [r4, #12]
 800db4c:	bd10      	pop	{r4, pc}

0800db4e <__sclose>:
 800db4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db52:	f000 b845 	b.w	800dbe0 <_close_r>

0800db56 <_vsniprintf_r>:
 800db56:	b530      	push	{r4, r5, lr}
 800db58:	4614      	mov	r4, r2
 800db5a:	2c00      	cmp	r4, #0
 800db5c:	b09b      	sub	sp, #108	; 0x6c
 800db5e:	4605      	mov	r5, r0
 800db60:	461a      	mov	r2, r3
 800db62:	da05      	bge.n	800db70 <_vsniprintf_r+0x1a>
 800db64:	238b      	movs	r3, #139	; 0x8b
 800db66:	6003      	str	r3, [r0, #0]
 800db68:	f04f 30ff 	mov.w	r0, #4294967295
 800db6c:	b01b      	add	sp, #108	; 0x6c
 800db6e:	bd30      	pop	{r4, r5, pc}
 800db70:	f44f 7302 	mov.w	r3, #520	; 0x208
 800db74:	f8ad 300c 	strh.w	r3, [sp, #12]
 800db78:	bf14      	ite	ne
 800db7a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800db7e:	4623      	moveq	r3, r4
 800db80:	9302      	str	r3, [sp, #8]
 800db82:	9305      	str	r3, [sp, #20]
 800db84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800db88:	9100      	str	r1, [sp, #0]
 800db8a:	9104      	str	r1, [sp, #16]
 800db8c:	f8ad 300e 	strh.w	r3, [sp, #14]
 800db90:	4669      	mov	r1, sp
 800db92:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800db94:	f001 fbf8 	bl	800f388 <_svfiprintf_r>
 800db98:	1c43      	adds	r3, r0, #1
 800db9a:	bfbc      	itt	lt
 800db9c:	238b      	movlt	r3, #139	; 0x8b
 800db9e:	602b      	strlt	r3, [r5, #0]
 800dba0:	2c00      	cmp	r4, #0
 800dba2:	d0e3      	beq.n	800db6c <_vsniprintf_r+0x16>
 800dba4:	9b00      	ldr	r3, [sp, #0]
 800dba6:	2200      	movs	r2, #0
 800dba8:	701a      	strb	r2, [r3, #0]
 800dbaa:	e7df      	b.n	800db6c <_vsniprintf_r+0x16>

0800dbac <vsniprintf>:
 800dbac:	b507      	push	{r0, r1, r2, lr}
 800dbae:	9300      	str	r3, [sp, #0]
 800dbb0:	4613      	mov	r3, r2
 800dbb2:	460a      	mov	r2, r1
 800dbb4:	4601      	mov	r1, r0
 800dbb6:	4803      	ldr	r0, [pc, #12]	; (800dbc4 <vsniprintf+0x18>)
 800dbb8:	6800      	ldr	r0, [r0, #0]
 800dbba:	f7ff ffcc 	bl	800db56 <_vsniprintf_r>
 800dbbe:	b003      	add	sp, #12
 800dbc0:	f85d fb04 	ldr.w	pc, [sp], #4
 800dbc4:	20000070 	.word	0x20000070

0800dbc8 <memset>:
 800dbc8:	4402      	add	r2, r0
 800dbca:	4603      	mov	r3, r0
 800dbcc:	4293      	cmp	r3, r2
 800dbce:	d100      	bne.n	800dbd2 <memset+0xa>
 800dbd0:	4770      	bx	lr
 800dbd2:	f803 1b01 	strb.w	r1, [r3], #1
 800dbd6:	e7f9      	b.n	800dbcc <memset+0x4>

0800dbd8 <_localeconv_r>:
 800dbd8:	4800      	ldr	r0, [pc, #0]	; (800dbdc <_localeconv_r+0x4>)
 800dbda:	4770      	bx	lr
 800dbdc:	20000164 	.word	0x20000164

0800dbe0 <_close_r>:
 800dbe0:	b538      	push	{r3, r4, r5, lr}
 800dbe2:	4d06      	ldr	r5, [pc, #24]	; (800dbfc <_close_r+0x1c>)
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	4604      	mov	r4, r0
 800dbe8:	4608      	mov	r0, r1
 800dbea:	602b      	str	r3, [r5, #0]
 800dbec:	f7f6 fe47 	bl	800487e <_close>
 800dbf0:	1c43      	adds	r3, r0, #1
 800dbf2:	d102      	bne.n	800dbfa <_close_r+0x1a>
 800dbf4:	682b      	ldr	r3, [r5, #0]
 800dbf6:	b103      	cbz	r3, 800dbfa <_close_r+0x1a>
 800dbf8:	6023      	str	r3, [r4, #0]
 800dbfa:	bd38      	pop	{r3, r4, r5, pc}
 800dbfc:	20001908 	.word	0x20001908

0800dc00 <_lseek_r>:
 800dc00:	b538      	push	{r3, r4, r5, lr}
 800dc02:	4d07      	ldr	r5, [pc, #28]	; (800dc20 <_lseek_r+0x20>)
 800dc04:	4604      	mov	r4, r0
 800dc06:	4608      	mov	r0, r1
 800dc08:	4611      	mov	r1, r2
 800dc0a:	2200      	movs	r2, #0
 800dc0c:	602a      	str	r2, [r5, #0]
 800dc0e:	461a      	mov	r2, r3
 800dc10:	f7f6 fe5c 	bl	80048cc <_lseek>
 800dc14:	1c43      	adds	r3, r0, #1
 800dc16:	d102      	bne.n	800dc1e <_lseek_r+0x1e>
 800dc18:	682b      	ldr	r3, [r5, #0]
 800dc1a:	b103      	cbz	r3, 800dc1e <_lseek_r+0x1e>
 800dc1c:	6023      	str	r3, [r4, #0]
 800dc1e:	bd38      	pop	{r3, r4, r5, pc}
 800dc20:	20001908 	.word	0x20001908

0800dc24 <_read_r>:
 800dc24:	b538      	push	{r3, r4, r5, lr}
 800dc26:	4d07      	ldr	r5, [pc, #28]	; (800dc44 <_read_r+0x20>)
 800dc28:	4604      	mov	r4, r0
 800dc2a:	4608      	mov	r0, r1
 800dc2c:	4611      	mov	r1, r2
 800dc2e:	2200      	movs	r2, #0
 800dc30:	602a      	str	r2, [r5, #0]
 800dc32:	461a      	mov	r2, r3
 800dc34:	f7f6 fdea 	bl	800480c <_read>
 800dc38:	1c43      	adds	r3, r0, #1
 800dc3a:	d102      	bne.n	800dc42 <_read_r+0x1e>
 800dc3c:	682b      	ldr	r3, [r5, #0]
 800dc3e:	b103      	cbz	r3, 800dc42 <_read_r+0x1e>
 800dc40:	6023      	str	r3, [r4, #0]
 800dc42:	bd38      	pop	{r3, r4, r5, pc}
 800dc44:	20001908 	.word	0x20001908

0800dc48 <_write_r>:
 800dc48:	b538      	push	{r3, r4, r5, lr}
 800dc4a:	4d07      	ldr	r5, [pc, #28]	; (800dc68 <_write_r+0x20>)
 800dc4c:	4604      	mov	r4, r0
 800dc4e:	4608      	mov	r0, r1
 800dc50:	4611      	mov	r1, r2
 800dc52:	2200      	movs	r2, #0
 800dc54:	602a      	str	r2, [r5, #0]
 800dc56:	461a      	mov	r2, r3
 800dc58:	f7f6 fdf5 	bl	8004846 <_write>
 800dc5c:	1c43      	adds	r3, r0, #1
 800dc5e:	d102      	bne.n	800dc66 <_write_r+0x1e>
 800dc60:	682b      	ldr	r3, [r5, #0]
 800dc62:	b103      	cbz	r3, 800dc66 <_write_r+0x1e>
 800dc64:	6023      	str	r3, [r4, #0]
 800dc66:	bd38      	pop	{r3, r4, r5, pc}
 800dc68:	20001908 	.word	0x20001908

0800dc6c <__errno>:
 800dc6c:	4b01      	ldr	r3, [pc, #4]	; (800dc74 <__errno+0x8>)
 800dc6e:	6818      	ldr	r0, [r3, #0]
 800dc70:	4770      	bx	lr
 800dc72:	bf00      	nop
 800dc74:	20000070 	.word	0x20000070

0800dc78 <__libc_init_array>:
 800dc78:	b570      	push	{r4, r5, r6, lr}
 800dc7a:	4d0d      	ldr	r5, [pc, #52]	; (800dcb0 <__libc_init_array+0x38>)
 800dc7c:	4c0d      	ldr	r4, [pc, #52]	; (800dcb4 <__libc_init_array+0x3c>)
 800dc7e:	1b64      	subs	r4, r4, r5
 800dc80:	10a4      	asrs	r4, r4, #2
 800dc82:	2600      	movs	r6, #0
 800dc84:	42a6      	cmp	r6, r4
 800dc86:	d109      	bne.n	800dc9c <__libc_init_array+0x24>
 800dc88:	4d0b      	ldr	r5, [pc, #44]	; (800dcb8 <__libc_init_array+0x40>)
 800dc8a:	4c0c      	ldr	r4, [pc, #48]	; (800dcbc <__libc_init_array+0x44>)
 800dc8c:	f004 f8a2 	bl	8011dd4 <_init>
 800dc90:	1b64      	subs	r4, r4, r5
 800dc92:	10a4      	asrs	r4, r4, #2
 800dc94:	2600      	movs	r6, #0
 800dc96:	42a6      	cmp	r6, r4
 800dc98:	d105      	bne.n	800dca6 <__libc_init_array+0x2e>
 800dc9a:	bd70      	pop	{r4, r5, r6, pc}
 800dc9c:	f855 3b04 	ldr.w	r3, [r5], #4
 800dca0:	4798      	blx	r3
 800dca2:	3601      	adds	r6, #1
 800dca4:	e7ee      	b.n	800dc84 <__libc_init_array+0xc>
 800dca6:	f855 3b04 	ldr.w	r3, [r5], #4
 800dcaa:	4798      	blx	r3
 800dcac:	3601      	adds	r6, #1
 800dcae:	e7f2      	b.n	800dc96 <__libc_init_array+0x1e>
 800dcb0:	08012980 	.word	0x08012980
 800dcb4:	08012980 	.word	0x08012980
 800dcb8:	08012980 	.word	0x08012980
 800dcbc:	08012984 	.word	0x08012984

0800dcc0 <__retarget_lock_init_recursive>:
 800dcc0:	4770      	bx	lr

0800dcc2 <__retarget_lock_acquire_recursive>:
 800dcc2:	4770      	bx	lr

0800dcc4 <__retarget_lock_release_recursive>:
 800dcc4:	4770      	bx	lr

0800dcc6 <memcpy>:
 800dcc6:	440a      	add	r2, r1
 800dcc8:	4291      	cmp	r1, r2
 800dcca:	f100 33ff 	add.w	r3, r0, #4294967295
 800dcce:	d100      	bne.n	800dcd2 <memcpy+0xc>
 800dcd0:	4770      	bx	lr
 800dcd2:	b510      	push	{r4, lr}
 800dcd4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dcd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dcdc:	4291      	cmp	r1, r2
 800dcde:	d1f9      	bne.n	800dcd4 <memcpy+0xe>
 800dce0:	bd10      	pop	{r4, pc}

0800dce2 <quorem>:
 800dce2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dce6:	6903      	ldr	r3, [r0, #16]
 800dce8:	690c      	ldr	r4, [r1, #16]
 800dcea:	42a3      	cmp	r3, r4
 800dcec:	4607      	mov	r7, r0
 800dcee:	db7e      	blt.n	800ddee <quorem+0x10c>
 800dcf0:	3c01      	subs	r4, #1
 800dcf2:	f101 0814 	add.w	r8, r1, #20
 800dcf6:	f100 0514 	add.w	r5, r0, #20
 800dcfa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dcfe:	9301      	str	r3, [sp, #4]
 800dd00:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dd04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dd08:	3301      	adds	r3, #1
 800dd0a:	429a      	cmp	r2, r3
 800dd0c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800dd10:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dd14:	fbb2 f6f3 	udiv	r6, r2, r3
 800dd18:	d331      	bcc.n	800dd7e <quorem+0x9c>
 800dd1a:	f04f 0e00 	mov.w	lr, #0
 800dd1e:	4640      	mov	r0, r8
 800dd20:	46ac      	mov	ip, r5
 800dd22:	46f2      	mov	sl, lr
 800dd24:	f850 2b04 	ldr.w	r2, [r0], #4
 800dd28:	b293      	uxth	r3, r2
 800dd2a:	fb06 e303 	mla	r3, r6, r3, lr
 800dd2e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800dd32:	0c1a      	lsrs	r2, r3, #16
 800dd34:	b29b      	uxth	r3, r3
 800dd36:	ebaa 0303 	sub.w	r3, sl, r3
 800dd3a:	f8dc a000 	ldr.w	sl, [ip]
 800dd3e:	fa13 f38a 	uxtah	r3, r3, sl
 800dd42:	fb06 220e 	mla	r2, r6, lr, r2
 800dd46:	9300      	str	r3, [sp, #0]
 800dd48:	9b00      	ldr	r3, [sp, #0]
 800dd4a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800dd4e:	b292      	uxth	r2, r2
 800dd50:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800dd54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dd58:	f8bd 3000 	ldrh.w	r3, [sp]
 800dd5c:	4581      	cmp	r9, r0
 800dd5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dd62:	f84c 3b04 	str.w	r3, [ip], #4
 800dd66:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800dd6a:	d2db      	bcs.n	800dd24 <quorem+0x42>
 800dd6c:	f855 300b 	ldr.w	r3, [r5, fp]
 800dd70:	b92b      	cbnz	r3, 800dd7e <quorem+0x9c>
 800dd72:	9b01      	ldr	r3, [sp, #4]
 800dd74:	3b04      	subs	r3, #4
 800dd76:	429d      	cmp	r5, r3
 800dd78:	461a      	mov	r2, r3
 800dd7a:	d32c      	bcc.n	800ddd6 <quorem+0xf4>
 800dd7c:	613c      	str	r4, [r7, #16]
 800dd7e:	4638      	mov	r0, r7
 800dd80:	f001 f9a8 	bl	800f0d4 <__mcmp>
 800dd84:	2800      	cmp	r0, #0
 800dd86:	db22      	blt.n	800ddce <quorem+0xec>
 800dd88:	3601      	adds	r6, #1
 800dd8a:	4629      	mov	r1, r5
 800dd8c:	2000      	movs	r0, #0
 800dd8e:	f858 2b04 	ldr.w	r2, [r8], #4
 800dd92:	f8d1 c000 	ldr.w	ip, [r1]
 800dd96:	b293      	uxth	r3, r2
 800dd98:	1ac3      	subs	r3, r0, r3
 800dd9a:	0c12      	lsrs	r2, r2, #16
 800dd9c:	fa13 f38c 	uxtah	r3, r3, ip
 800dda0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800dda4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dda8:	b29b      	uxth	r3, r3
 800ddaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ddae:	45c1      	cmp	r9, r8
 800ddb0:	f841 3b04 	str.w	r3, [r1], #4
 800ddb4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ddb8:	d2e9      	bcs.n	800dd8e <quorem+0xac>
 800ddba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ddbe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ddc2:	b922      	cbnz	r2, 800ddce <quorem+0xec>
 800ddc4:	3b04      	subs	r3, #4
 800ddc6:	429d      	cmp	r5, r3
 800ddc8:	461a      	mov	r2, r3
 800ddca:	d30a      	bcc.n	800dde2 <quorem+0x100>
 800ddcc:	613c      	str	r4, [r7, #16]
 800ddce:	4630      	mov	r0, r6
 800ddd0:	b003      	add	sp, #12
 800ddd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddd6:	6812      	ldr	r2, [r2, #0]
 800ddd8:	3b04      	subs	r3, #4
 800ddda:	2a00      	cmp	r2, #0
 800dddc:	d1ce      	bne.n	800dd7c <quorem+0x9a>
 800ddde:	3c01      	subs	r4, #1
 800dde0:	e7c9      	b.n	800dd76 <quorem+0x94>
 800dde2:	6812      	ldr	r2, [r2, #0]
 800dde4:	3b04      	subs	r3, #4
 800dde6:	2a00      	cmp	r2, #0
 800dde8:	d1f0      	bne.n	800ddcc <quorem+0xea>
 800ddea:	3c01      	subs	r4, #1
 800ddec:	e7eb      	b.n	800ddc6 <quorem+0xe4>
 800ddee:	2000      	movs	r0, #0
 800ddf0:	e7ee      	b.n	800ddd0 <quorem+0xee>
 800ddf2:	0000      	movs	r0, r0
 800ddf4:	0000      	movs	r0, r0
	...

0800ddf8 <_dtoa_r>:
 800ddf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddfc:	ed2d 8b04 	vpush	{d8-d9}
 800de00:	69c5      	ldr	r5, [r0, #28]
 800de02:	b093      	sub	sp, #76	; 0x4c
 800de04:	ed8d 0b02 	vstr	d0, [sp, #8]
 800de08:	ec57 6b10 	vmov	r6, r7, d0
 800de0c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800de10:	9107      	str	r1, [sp, #28]
 800de12:	4604      	mov	r4, r0
 800de14:	920a      	str	r2, [sp, #40]	; 0x28
 800de16:	930d      	str	r3, [sp, #52]	; 0x34
 800de18:	b975      	cbnz	r5, 800de38 <_dtoa_r+0x40>
 800de1a:	2010      	movs	r0, #16
 800de1c:	f000 fe2a 	bl	800ea74 <malloc>
 800de20:	4602      	mov	r2, r0
 800de22:	61e0      	str	r0, [r4, #28]
 800de24:	b920      	cbnz	r0, 800de30 <_dtoa_r+0x38>
 800de26:	4bae      	ldr	r3, [pc, #696]	; (800e0e0 <_dtoa_r+0x2e8>)
 800de28:	21ef      	movs	r1, #239	; 0xef
 800de2a:	48ae      	ldr	r0, [pc, #696]	; (800e0e4 <_dtoa_r+0x2ec>)
 800de2c:	f001 fc82 	bl	800f734 <__assert_func>
 800de30:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800de34:	6005      	str	r5, [r0, #0]
 800de36:	60c5      	str	r5, [r0, #12]
 800de38:	69e3      	ldr	r3, [r4, #28]
 800de3a:	6819      	ldr	r1, [r3, #0]
 800de3c:	b151      	cbz	r1, 800de54 <_dtoa_r+0x5c>
 800de3e:	685a      	ldr	r2, [r3, #4]
 800de40:	604a      	str	r2, [r1, #4]
 800de42:	2301      	movs	r3, #1
 800de44:	4093      	lsls	r3, r2
 800de46:	608b      	str	r3, [r1, #8]
 800de48:	4620      	mov	r0, r4
 800de4a:	f000 ff07 	bl	800ec5c <_Bfree>
 800de4e:	69e3      	ldr	r3, [r4, #28]
 800de50:	2200      	movs	r2, #0
 800de52:	601a      	str	r2, [r3, #0]
 800de54:	1e3b      	subs	r3, r7, #0
 800de56:	bfbb      	ittet	lt
 800de58:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800de5c:	9303      	strlt	r3, [sp, #12]
 800de5e:	2300      	movge	r3, #0
 800de60:	2201      	movlt	r2, #1
 800de62:	bfac      	ite	ge
 800de64:	f8c8 3000 	strge.w	r3, [r8]
 800de68:	f8c8 2000 	strlt.w	r2, [r8]
 800de6c:	4b9e      	ldr	r3, [pc, #632]	; (800e0e8 <_dtoa_r+0x2f0>)
 800de6e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800de72:	ea33 0308 	bics.w	r3, r3, r8
 800de76:	d11b      	bne.n	800deb0 <_dtoa_r+0xb8>
 800de78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800de7a:	f242 730f 	movw	r3, #9999	; 0x270f
 800de7e:	6013      	str	r3, [r2, #0]
 800de80:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800de84:	4333      	orrs	r3, r6
 800de86:	f000 8593 	beq.w	800e9b0 <_dtoa_r+0xbb8>
 800de8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800de8c:	b963      	cbnz	r3, 800dea8 <_dtoa_r+0xb0>
 800de8e:	4b97      	ldr	r3, [pc, #604]	; (800e0ec <_dtoa_r+0x2f4>)
 800de90:	e027      	b.n	800dee2 <_dtoa_r+0xea>
 800de92:	4b97      	ldr	r3, [pc, #604]	; (800e0f0 <_dtoa_r+0x2f8>)
 800de94:	9300      	str	r3, [sp, #0]
 800de96:	3308      	adds	r3, #8
 800de98:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800de9a:	6013      	str	r3, [r2, #0]
 800de9c:	9800      	ldr	r0, [sp, #0]
 800de9e:	b013      	add	sp, #76	; 0x4c
 800dea0:	ecbd 8b04 	vpop	{d8-d9}
 800dea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dea8:	4b90      	ldr	r3, [pc, #576]	; (800e0ec <_dtoa_r+0x2f4>)
 800deaa:	9300      	str	r3, [sp, #0]
 800deac:	3303      	adds	r3, #3
 800deae:	e7f3      	b.n	800de98 <_dtoa_r+0xa0>
 800deb0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800deb4:	2200      	movs	r2, #0
 800deb6:	ec51 0b17 	vmov	r0, r1, d7
 800deba:	eeb0 8a47 	vmov.f32	s16, s14
 800debe:	eef0 8a67 	vmov.f32	s17, s15
 800dec2:	2300      	movs	r3, #0
 800dec4:	f7f2 fe28 	bl	8000b18 <__aeabi_dcmpeq>
 800dec8:	4681      	mov	r9, r0
 800deca:	b160      	cbz	r0, 800dee6 <_dtoa_r+0xee>
 800decc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dece:	2301      	movs	r3, #1
 800ded0:	6013      	str	r3, [r2, #0]
 800ded2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	f000 8568 	beq.w	800e9aa <_dtoa_r+0xbb2>
 800deda:	4b86      	ldr	r3, [pc, #536]	; (800e0f4 <_dtoa_r+0x2fc>)
 800dedc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dede:	6013      	str	r3, [r2, #0]
 800dee0:	3b01      	subs	r3, #1
 800dee2:	9300      	str	r3, [sp, #0]
 800dee4:	e7da      	b.n	800de9c <_dtoa_r+0xa4>
 800dee6:	aa10      	add	r2, sp, #64	; 0x40
 800dee8:	a911      	add	r1, sp, #68	; 0x44
 800deea:	4620      	mov	r0, r4
 800deec:	eeb0 0a48 	vmov.f32	s0, s16
 800def0:	eef0 0a68 	vmov.f32	s1, s17
 800def4:	f001 f994 	bl	800f220 <__d2b>
 800def8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800defc:	4682      	mov	sl, r0
 800defe:	2d00      	cmp	r5, #0
 800df00:	d07f      	beq.n	800e002 <_dtoa_r+0x20a>
 800df02:	ee18 3a90 	vmov	r3, s17
 800df06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800df0a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800df0e:	ec51 0b18 	vmov	r0, r1, d8
 800df12:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800df16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800df1a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800df1e:	4619      	mov	r1, r3
 800df20:	2200      	movs	r2, #0
 800df22:	4b75      	ldr	r3, [pc, #468]	; (800e0f8 <_dtoa_r+0x300>)
 800df24:	f7f2 f9d8 	bl	80002d8 <__aeabi_dsub>
 800df28:	a367      	add	r3, pc, #412	; (adr r3, 800e0c8 <_dtoa_r+0x2d0>)
 800df2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df2e:	f7f2 fb8b 	bl	8000648 <__aeabi_dmul>
 800df32:	a367      	add	r3, pc, #412	; (adr r3, 800e0d0 <_dtoa_r+0x2d8>)
 800df34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df38:	f7f2 f9d0 	bl	80002dc <__adddf3>
 800df3c:	4606      	mov	r6, r0
 800df3e:	4628      	mov	r0, r5
 800df40:	460f      	mov	r7, r1
 800df42:	f7f2 fb17 	bl	8000574 <__aeabi_i2d>
 800df46:	a364      	add	r3, pc, #400	; (adr r3, 800e0d8 <_dtoa_r+0x2e0>)
 800df48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df4c:	f7f2 fb7c 	bl	8000648 <__aeabi_dmul>
 800df50:	4602      	mov	r2, r0
 800df52:	460b      	mov	r3, r1
 800df54:	4630      	mov	r0, r6
 800df56:	4639      	mov	r1, r7
 800df58:	f7f2 f9c0 	bl	80002dc <__adddf3>
 800df5c:	4606      	mov	r6, r0
 800df5e:	460f      	mov	r7, r1
 800df60:	f7f2 fe22 	bl	8000ba8 <__aeabi_d2iz>
 800df64:	2200      	movs	r2, #0
 800df66:	4683      	mov	fp, r0
 800df68:	2300      	movs	r3, #0
 800df6a:	4630      	mov	r0, r6
 800df6c:	4639      	mov	r1, r7
 800df6e:	f7f2 fddd 	bl	8000b2c <__aeabi_dcmplt>
 800df72:	b148      	cbz	r0, 800df88 <_dtoa_r+0x190>
 800df74:	4658      	mov	r0, fp
 800df76:	f7f2 fafd 	bl	8000574 <__aeabi_i2d>
 800df7a:	4632      	mov	r2, r6
 800df7c:	463b      	mov	r3, r7
 800df7e:	f7f2 fdcb 	bl	8000b18 <__aeabi_dcmpeq>
 800df82:	b908      	cbnz	r0, 800df88 <_dtoa_r+0x190>
 800df84:	f10b 3bff 	add.w	fp, fp, #4294967295
 800df88:	f1bb 0f16 	cmp.w	fp, #22
 800df8c:	d857      	bhi.n	800e03e <_dtoa_r+0x246>
 800df8e:	4b5b      	ldr	r3, [pc, #364]	; (800e0fc <_dtoa_r+0x304>)
 800df90:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800df94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df98:	ec51 0b18 	vmov	r0, r1, d8
 800df9c:	f7f2 fdc6 	bl	8000b2c <__aeabi_dcmplt>
 800dfa0:	2800      	cmp	r0, #0
 800dfa2:	d04e      	beq.n	800e042 <_dtoa_r+0x24a>
 800dfa4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	930c      	str	r3, [sp, #48]	; 0x30
 800dfac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dfae:	1b5b      	subs	r3, r3, r5
 800dfb0:	1e5a      	subs	r2, r3, #1
 800dfb2:	bf45      	ittet	mi
 800dfb4:	f1c3 0301 	rsbmi	r3, r3, #1
 800dfb8:	9305      	strmi	r3, [sp, #20]
 800dfba:	2300      	movpl	r3, #0
 800dfbc:	2300      	movmi	r3, #0
 800dfbe:	9206      	str	r2, [sp, #24]
 800dfc0:	bf54      	ite	pl
 800dfc2:	9305      	strpl	r3, [sp, #20]
 800dfc4:	9306      	strmi	r3, [sp, #24]
 800dfc6:	f1bb 0f00 	cmp.w	fp, #0
 800dfca:	db3c      	blt.n	800e046 <_dtoa_r+0x24e>
 800dfcc:	9b06      	ldr	r3, [sp, #24]
 800dfce:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800dfd2:	445b      	add	r3, fp
 800dfd4:	9306      	str	r3, [sp, #24]
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	9308      	str	r3, [sp, #32]
 800dfda:	9b07      	ldr	r3, [sp, #28]
 800dfdc:	2b09      	cmp	r3, #9
 800dfde:	d868      	bhi.n	800e0b2 <_dtoa_r+0x2ba>
 800dfe0:	2b05      	cmp	r3, #5
 800dfe2:	bfc4      	itt	gt
 800dfe4:	3b04      	subgt	r3, #4
 800dfe6:	9307      	strgt	r3, [sp, #28]
 800dfe8:	9b07      	ldr	r3, [sp, #28]
 800dfea:	f1a3 0302 	sub.w	r3, r3, #2
 800dfee:	bfcc      	ite	gt
 800dff0:	2500      	movgt	r5, #0
 800dff2:	2501      	movle	r5, #1
 800dff4:	2b03      	cmp	r3, #3
 800dff6:	f200 8085 	bhi.w	800e104 <_dtoa_r+0x30c>
 800dffa:	e8df f003 	tbb	[pc, r3]
 800dffe:	3b2e      	.short	0x3b2e
 800e000:	5839      	.short	0x5839
 800e002:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e006:	441d      	add	r5, r3
 800e008:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e00c:	2b20      	cmp	r3, #32
 800e00e:	bfc1      	itttt	gt
 800e010:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e014:	fa08 f803 	lslgt.w	r8, r8, r3
 800e018:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800e01c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800e020:	bfd6      	itet	le
 800e022:	f1c3 0320 	rsble	r3, r3, #32
 800e026:	ea48 0003 	orrgt.w	r0, r8, r3
 800e02a:	fa06 f003 	lslle.w	r0, r6, r3
 800e02e:	f7f2 fa91 	bl	8000554 <__aeabi_ui2d>
 800e032:	2201      	movs	r2, #1
 800e034:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800e038:	3d01      	subs	r5, #1
 800e03a:	920e      	str	r2, [sp, #56]	; 0x38
 800e03c:	e76f      	b.n	800df1e <_dtoa_r+0x126>
 800e03e:	2301      	movs	r3, #1
 800e040:	e7b3      	b.n	800dfaa <_dtoa_r+0x1b2>
 800e042:	900c      	str	r0, [sp, #48]	; 0x30
 800e044:	e7b2      	b.n	800dfac <_dtoa_r+0x1b4>
 800e046:	9b05      	ldr	r3, [sp, #20]
 800e048:	eba3 030b 	sub.w	r3, r3, fp
 800e04c:	9305      	str	r3, [sp, #20]
 800e04e:	f1cb 0300 	rsb	r3, fp, #0
 800e052:	9308      	str	r3, [sp, #32]
 800e054:	2300      	movs	r3, #0
 800e056:	930b      	str	r3, [sp, #44]	; 0x2c
 800e058:	e7bf      	b.n	800dfda <_dtoa_r+0x1e2>
 800e05a:	2300      	movs	r3, #0
 800e05c:	9309      	str	r3, [sp, #36]	; 0x24
 800e05e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e060:	2b00      	cmp	r3, #0
 800e062:	dc52      	bgt.n	800e10a <_dtoa_r+0x312>
 800e064:	2301      	movs	r3, #1
 800e066:	9301      	str	r3, [sp, #4]
 800e068:	9304      	str	r3, [sp, #16]
 800e06a:	461a      	mov	r2, r3
 800e06c:	920a      	str	r2, [sp, #40]	; 0x28
 800e06e:	e00b      	b.n	800e088 <_dtoa_r+0x290>
 800e070:	2301      	movs	r3, #1
 800e072:	e7f3      	b.n	800e05c <_dtoa_r+0x264>
 800e074:	2300      	movs	r3, #0
 800e076:	9309      	str	r3, [sp, #36]	; 0x24
 800e078:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e07a:	445b      	add	r3, fp
 800e07c:	9301      	str	r3, [sp, #4]
 800e07e:	3301      	adds	r3, #1
 800e080:	2b01      	cmp	r3, #1
 800e082:	9304      	str	r3, [sp, #16]
 800e084:	bfb8      	it	lt
 800e086:	2301      	movlt	r3, #1
 800e088:	69e0      	ldr	r0, [r4, #28]
 800e08a:	2100      	movs	r1, #0
 800e08c:	2204      	movs	r2, #4
 800e08e:	f102 0614 	add.w	r6, r2, #20
 800e092:	429e      	cmp	r6, r3
 800e094:	d93d      	bls.n	800e112 <_dtoa_r+0x31a>
 800e096:	6041      	str	r1, [r0, #4]
 800e098:	4620      	mov	r0, r4
 800e09a:	f000 fd9f 	bl	800ebdc <_Balloc>
 800e09e:	9000      	str	r0, [sp, #0]
 800e0a0:	2800      	cmp	r0, #0
 800e0a2:	d139      	bne.n	800e118 <_dtoa_r+0x320>
 800e0a4:	4b16      	ldr	r3, [pc, #88]	; (800e100 <_dtoa_r+0x308>)
 800e0a6:	4602      	mov	r2, r0
 800e0a8:	f240 11af 	movw	r1, #431	; 0x1af
 800e0ac:	e6bd      	b.n	800de2a <_dtoa_r+0x32>
 800e0ae:	2301      	movs	r3, #1
 800e0b0:	e7e1      	b.n	800e076 <_dtoa_r+0x27e>
 800e0b2:	2501      	movs	r5, #1
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	9307      	str	r3, [sp, #28]
 800e0b8:	9509      	str	r5, [sp, #36]	; 0x24
 800e0ba:	f04f 33ff 	mov.w	r3, #4294967295
 800e0be:	9301      	str	r3, [sp, #4]
 800e0c0:	9304      	str	r3, [sp, #16]
 800e0c2:	2200      	movs	r2, #0
 800e0c4:	2312      	movs	r3, #18
 800e0c6:	e7d1      	b.n	800e06c <_dtoa_r+0x274>
 800e0c8:	636f4361 	.word	0x636f4361
 800e0cc:	3fd287a7 	.word	0x3fd287a7
 800e0d0:	8b60c8b3 	.word	0x8b60c8b3
 800e0d4:	3fc68a28 	.word	0x3fc68a28
 800e0d8:	509f79fb 	.word	0x509f79fb
 800e0dc:	3fd34413 	.word	0x3fd34413
 800e0e0:	08012089 	.word	0x08012089
 800e0e4:	080120a0 	.word	0x080120a0
 800e0e8:	7ff00000 	.word	0x7ff00000
 800e0ec:	08012085 	.word	0x08012085
 800e0f0:	0801207c 	.word	0x0801207c
 800e0f4:	08012059 	.word	0x08012059
 800e0f8:	3ff80000 	.word	0x3ff80000
 800e0fc:	08012190 	.word	0x08012190
 800e100:	080120f8 	.word	0x080120f8
 800e104:	2301      	movs	r3, #1
 800e106:	9309      	str	r3, [sp, #36]	; 0x24
 800e108:	e7d7      	b.n	800e0ba <_dtoa_r+0x2c2>
 800e10a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e10c:	9301      	str	r3, [sp, #4]
 800e10e:	9304      	str	r3, [sp, #16]
 800e110:	e7ba      	b.n	800e088 <_dtoa_r+0x290>
 800e112:	3101      	adds	r1, #1
 800e114:	0052      	lsls	r2, r2, #1
 800e116:	e7ba      	b.n	800e08e <_dtoa_r+0x296>
 800e118:	69e3      	ldr	r3, [r4, #28]
 800e11a:	9a00      	ldr	r2, [sp, #0]
 800e11c:	601a      	str	r2, [r3, #0]
 800e11e:	9b04      	ldr	r3, [sp, #16]
 800e120:	2b0e      	cmp	r3, #14
 800e122:	f200 80a8 	bhi.w	800e276 <_dtoa_r+0x47e>
 800e126:	2d00      	cmp	r5, #0
 800e128:	f000 80a5 	beq.w	800e276 <_dtoa_r+0x47e>
 800e12c:	f1bb 0f00 	cmp.w	fp, #0
 800e130:	dd38      	ble.n	800e1a4 <_dtoa_r+0x3ac>
 800e132:	4bc0      	ldr	r3, [pc, #768]	; (800e434 <_dtoa_r+0x63c>)
 800e134:	f00b 020f 	and.w	r2, fp, #15
 800e138:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e13c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800e140:	e9d3 6700 	ldrd	r6, r7, [r3]
 800e144:	ea4f 182b 	mov.w	r8, fp, asr #4
 800e148:	d019      	beq.n	800e17e <_dtoa_r+0x386>
 800e14a:	4bbb      	ldr	r3, [pc, #748]	; (800e438 <_dtoa_r+0x640>)
 800e14c:	ec51 0b18 	vmov	r0, r1, d8
 800e150:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e154:	f7f2 fba2 	bl	800089c <__aeabi_ddiv>
 800e158:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e15c:	f008 080f 	and.w	r8, r8, #15
 800e160:	2503      	movs	r5, #3
 800e162:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800e438 <_dtoa_r+0x640>
 800e166:	f1b8 0f00 	cmp.w	r8, #0
 800e16a:	d10a      	bne.n	800e182 <_dtoa_r+0x38a>
 800e16c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e170:	4632      	mov	r2, r6
 800e172:	463b      	mov	r3, r7
 800e174:	f7f2 fb92 	bl	800089c <__aeabi_ddiv>
 800e178:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e17c:	e02b      	b.n	800e1d6 <_dtoa_r+0x3de>
 800e17e:	2502      	movs	r5, #2
 800e180:	e7ef      	b.n	800e162 <_dtoa_r+0x36a>
 800e182:	f018 0f01 	tst.w	r8, #1
 800e186:	d008      	beq.n	800e19a <_dtoa_r+0x3a2>
 800e188:	4630      	mov	r0, r6
 800e18a:	4639      	mov	r1, r7
 800e18c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e190:	f7f2 fa5a 	bl	8000648 <__aeabi_dmul>
 800e194:	3501      	adds	r5, #1
 800e196:	4606      	mov	r6, r0
 800e198:	460f      	mov	r7, r1
 800e19a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e19e:	f109 0908 	add.w	r9, r9, #8
 800e1a2:	e7e0      	b.n	800e166 <_dtoa_r+0x36e>
 800e1a4:	f000 809f 	beq.w	800e2e6 <_dtoa_r+0x4ee>
 800e1a8:	f1cb 0600 	rsb	r6, fp, #0
 800e1ac:	4ba1      	ldr	r3, [pc, #644]	; (800e434 <_dtoa_r+0x63c>)
 800e1ae:	4fa2      	ldr	r7, [pc, #648]	; (800e438 <_dtoa_r+0x640>)
 800e1b0:	f006 020f 	and.w	r2, r6, #15
 800e1b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1bc:	ec51 0b18 	vmov	r0, r1, d8
 800e1c0:	f7f2 fa42 	bl	8000648 <__aeabi_dmul>
 800e1c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e1c8:	1136      	asrs	r6, r6, #4
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	2502      	movs	r5, #2
 800e1ce:	2e00      	cmp	r6, #0
 800e1d0:	d17e      	bne.n	800e2d0 <_dtoa_r+0x4d8>
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d1d0      	bne.n	800e178 <_dtoa_r+0x380>
 800e1d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e1d8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	f000 8084 	beq.w	800e2ea <_dtoa_r+0x4f2>
 800e1e2:	4b96      	ldr	r3, [pc, #600]	; (800e43c <_dtoa_r+0x644>)
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	4640      	mov	r0, r8
 800e1e8:	4649      	mov	r1, r9
 800e1ea:	f7f2 fc9f 	bl	8000b2c <__aeabi_dcmplt>
 800e1ee:	2800      	cmp	r0, #0
 800e1f0:	d07b      	beq.n	800e2ea <_dtoa_r+0x4f2>
 800e1f2:	9b04      	ldr	r3, [sp, #16]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d078      	beq.n	800e2ea <_dtoa_r+0x4f2>
 800e1f8:	9b01      	ldr	r3, [sp, #4]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	dd39      	ble.n	800e272 <_dtoa_r+0x47a>
 800e1fe:	4b90      	ldr	r3, [pc, #576]	; (800e440 <_dtoa_r+0x648>)
 800e200:	2200      	movs	r2, #0
 800e202:	4640      	mov	r0, r8
 800e204:	4649      	mov	r1, r9
 800e206:	f7f2 fa1f 	bl	8000648 <__aeabi_dmul>
 800e20a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e20e:	9e01      	ldr	r6, [sp, #4]
 800e210:	f10b 37ff 	add.w	r7, fp, #4294967295
 800e214:	3501      	adds	r5, #1
 800e216:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e21a:	4628      	mov	r0, r5
 800e21c:	f7f2 f9aa 	bl	8000574 <__aeabi_i2d>
 800e220:	4642      	mov	r2, r8
 800e222:	464b      	mov	r3, r9
 800e224:	f7f2 fa10 	bl	8000648 <__aeabi_dmul>
 800e228:	4b86      	ldr	r3, [pc, #536]	; (800e444 <_dtoa_r+0x64c>)
 800e22a:	2200      	movs	r2, #0
 800e22c:	f7f2 f856 	bl	80002dc <__adddf3>
 800e230:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800e234:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e238:	9303      	str	r3, [sp, #12]
 800e23a:	2e00      	cmp	r6, #0
 800e23c:	d158      	bne.n	800e2f0 <_dtoa_r+0x4f8>
 800e23e:	4b82      	ldr	r3, [pc, #520]	; (800e448 <_dtoa_r+0x650>)
 800e240:	2200      	movs	r2, #0
 800e242:	4640      	mov	r0, r8
 800e244:	4649      	mov	r1, r9
 800e246:	f7f2 f847 	bl	80002d8 <__aeabi_dsub>
 800e24a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e24e:	4680      	mov	r8, r0
 800e250:	4689      	mov	r9, r1
 800e252:	f7f2 fc89 	bl	8000b68 <__aeabi_dcmpgt>
 800e256:	2800      	cmp	r0, #0
 800e258:	f040 8296 	bne.w	800e788 <_dtoa_r+0x990>
 800e25c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e260:	4640      	mov	r0, r8
 800e262:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e266:	4649      	mov	r1, r9
 800e268:	f7f2 fc60 	bl	8000b2c <__aeabi_dcmplt>
 800e26c:	2800      	cmp	r0, #0
 800e26e:	f040 8289 	bne.w	800e784 <_dtoa_r+0x98c>
 800e272:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e276:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e278:	2b00      	cmp	r3, #0
 800e27a:	f2c0 814e 	blt.w	800e51a <_dtoa_r+0x722>
 800e27e:	f1bb 0f0e 	cmp.w	fp, #14
 800e282:	f300 814a 	bgt.w	800e51a <_dtoa_r+0x722>
 800e286:	4b6b      	ldr	r3, [pc, #428]	; (800e434 <_dtoa_r+0x63c>)
 800e288:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e28c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e290:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e292:	2b00      	cmp	r3, #0
 800e294:	f280 80dc 	bge.w	800e450 <_dtoa_r+0x658>
 800e298:	9b04      	ldr	r3, [sp, #16]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	f300 80d8 	bgt.w	800e450 <_dtoa_r+0x658>
 800e2a0:	f040 826f 	bne.w	800e782 <_dtoa_r+0x98a>
 800e2a4:	4b68      	ldr	r3, [pc, #416]	; (800e448 <_dtoa_r+0x650>)
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	4640      	mov	r0, r8
 800e2aa:	4649      	mov	r1, r9
 800e2ac:	f7f2 f9cc 	bl	8000648 <__aeabi_dmul>
 800e2b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e2b4:	f7f2 fc4e 	bl	8000b54 <__aeabi_dcmpge>
 800e2b8:	9e04      	ldr	r6, [sp, #16]
 800e2ba:	4637      	mov	r7, r6
 800e2bc:	2800      	cmp	r0, #0
 800e2be:	f040 8245 	bne.w	800e74c <_dtoa_r+0x954>
 800e2c2:	9d00      	ldr	r5, [sp, #0]
 800e2c4:	2331      	movs	r3, #49	; 0x31
 800e2c6:	f805 3b01 	strb.w	r3, [r5], #1
 800e2ca:	f10b 0b01 	add.w	fp, fp, #1
 800e2ce:	e241      	b.n	800e754 <_dtoa_r+0x95c>
 800e2d0:	07f2      	lsls	r2, r6, #31
 800e2d2:	d505      	bpl.n	800e2e0 <_dtoa_r+0x4e8>
 800e2d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e2d8:	f7f2 f9b6 	bl	8000648 <__aeabi_dmul>
 800e2dc:	3501      	adds	r5, #1
 800e2de:	2301      	movs	r3, #1
 800e2e0:	1076      	asrs	r6, r6, #1
 800e2e2:	3708      	adds	r7, #8
 800e2e4:	e773      	b.n	800e1ce <_dtoa_r+0x3d6>
 800e2e6:	2502      	movs	r5, #2
 800e2e8:	e775      	b.n	800e1d6 <_dtoa_r+0x3de>
 800e2ea:	9e04      	ldr	r6, [sp, #16]
 800e2ec:	465f      	mov	r7, fp
 800e2ee:	e792      	b.n	800e216 <_dtoa_r+0x41e>
 800e2f0:	9900      	ldr	r1, [sp, #0]
 800e2f2:	4b50      	ldr	r3, [pc, #320]	; (800e434 <_dtoa_r+0x63c>)
 800e2f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e2f8:	4431      	add	r1, r6
 800e2fa:	9102      	str	r1, [sp, #8]
 800e2fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e2fe:	eeb0 9a47 	vmov.f32	s18, s14
 800e302:	eef0 9a67 	vmov.f32	s19, s15
 800e306:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e30a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e30e:	2900      	cmp	r1, #0
 800e310:	d044      	beq.n	800e39c <_dtoa_r+0x5a4>
 800e312:	494e      	ldr	r1, [pc, #312]	; (800e44c <_dtoa_r+0x654>)
 800e314:	2000      	movs	r0, #0
 800e316:	f7f2 fac1 	bl	800089c <__aeabi_ddiv>
 800e31a:	ec53 2b19 	vmov	r2, r3, d9
 800e31e:	f7f1 ffdb 	bl	80002d8 <__aeabi_dsub>
 800e322:	9d00      	ldr	r5, [sp, #0]
 800e324:	ec41 0b19 	vmov	d9, r0, r1
 800e328:	4649      	mov	r1, r9
 800e32a:	4640      	mov	r0, r8
 800e32c:	f7f2 fc3c 	bl	8000ba8 <__aeabi_d2iz>
 800e330:	4606      	mov	r6, r0
 800e332:	f7f2 f91f 	bl	8000574 <__aeabi_i2d>
 800e336:	4602      	mov	r2, r0
 800e338:	460b      	mov	r3, r1
 800e33a:	4640      	mov	r0, r8
 800e33c:	4649      	mov	r1, r9
 800e33e:	f7f1 ffcb 	bl	80002d8 <__aeabi_dsub>
 800e342:	3630      	adds	r6, #48	; 0x30
 800e344:	f805 6b01 	strb.w	r6, [r5], #1
 800e348:	ec53 2b19 	vmov	r2, r3, d9
 800e34c:	4680      	mov	r8, r0
 800e34e:	4689      	mov	r9, r1
 800e350:	f7f2 fbec 	bl	8000b2c <__aeabi_dcmplt>
 800e354:	2800      	cmp	r0, #0
 800e356:	d164      	bne.n	800e422 <_dtoa_r+0x62a>
 800e358:	4642      	mov	r2, r8
 800e35a:	464b      	mov	r3, r9
 800e35c:	4937      	ldr	r1, [pc, #220]	; (800e43c <_dtoa_r+0x644>)
 800e35e:	2000      	movs	r0, #0
 800e360:	f7f1 ffba 	bl	80002d8 <__aeabi_dsub>
 800e364:	ec53 2b19 	vmov	r2, r3, d9
 800e368:	f7f2 fbe0 	bl	8000b2c <__aeabi_dcmplt>
 800e36c:	2800      	cmp	r0, #0
 800e36e:	f040 80b6 	bne.w	800e4de <_dtoa_r+0x6e6>
 800e372:	9b02      	ldr	r3, [sp, #8]
 800e374:	429d      	cmp	r5, r3
 800e376:	f43f af7c 	beq.w	800e272 <_dtoa_r+0x47a>
 800e37a:	4b31      	ldr	r3, [pc, #196]	; (800e440 <_dtoa_r+0x648>)
 800e37c:	ec51 0b19 	vmov	r0, r1, d9
 800e380:	2200      	movs	r2, #0
 800e382:	f7f2 f961 	bl	8000648 <__aeabi_dmul>
 800e386:	4b2e      	ldr	r3, [pc, #184]	; (800e440 <_dtoa_r+0x648>)
 800e388:	ec41 0b19 	vmov	d9, r0, r1
 800e38c:	2200      	movs	r2, #0
 800e38e:	4640      	mov	r0, r8
 800e390:	4649      	mov	r1, r9
 800e392:	f7f2 f959 	bl	8000648 <__aeabi_dmul>
 800e396:	4680      	mov	r8, r0
 800e398:	4689      	mov	r9, r1
 800e39a:	e7c5      	b.n	800e328 <_dtoa_r+0x530>
 800e39c:	ec51 0b17 	vmov	r0, r1, d7
 800e3a0:	f7f2 f952 	bl	8000648 <__aeabi_dmul>
 800e3a4:	9b02      	ldr	r3, [sp, #8]
 800e3a6:	9d00      	ldr	r5, [sp, #0]
 800e3a8:	930f      	str	r3, [sp, #60]	; 0x3c
 800e3aa:	ec41 0b19 	vmov	d9, r0, r1
 800e3ae:	4649      	mov	r1, r9
 800e3b0:	4640      	mov	r0, r8
 800e3b2:	f7f2 fbf9 	bl	8000ba8 <__aeabi_d2iz>
 800e3b6:	4606      	mov	r6, r0
 800e3b8:	f7f2 f8dc 	bl	8000574 <__aeabi_i2d>
 800e3bc:	3630      	adds	r6, #48	; 0x30
 800e3be:	4602      	mov	r2, r0
 800e3c0:	460b      	mov	r3, r1
 800e3c2:	4640      	mov	r0, r8
 800e3c4:	4649      	mov	r1, r9
 800e3c6:	f7f1 ff87 	bl	80002d8 <__aeabi_dsub>
 800e3ca:	f805 6b01 	strb.w	r6, [r5], #1
 800e3ce:	9b02      	ldr	r3, [sp, #8]
 800e3d0:	429d      	cmp	r5, r3
 800e3d2:	4680      	mov	r8, r0
 800e3d4:	4689      	mov	r9, r1
 800e3d6:	f04f 0200 	mov.w	r2, #0
 800e3da:	d124      	bne.n	800e426 <_dtoa_r+0x62e>
 800e3dc:	4b1b      	ldr	r3, [pc, #108]	; (800e44c <_dtoa_r+0x654>)
 800e3de:	ec51 0b19 	vmov	r0, r1, d9
 800e3e2:	f7f1 ff7b 	bl	80002dc <__adddf3>
 800e3e6:	4602      	mov	r2, r0
 800e3e8:	460b      	mov	r3, r1
 800e3ea:	4640      	mov	r0, r8
 800e3ec:	4649      	mov	r1, r9
 800e3ee:	f7f2 fbbb 	bl	8000b68 <__aeabi_dcmpgt>
 800e3f2:	2800      	cmp	r0, #0
 800e3f4:	d173      	bne.n	800e4de <_dtoa_r+0x6e6>
 800e3f6:	ec53 2b19 	vmov	r2, r3, d9
 800e3fa:	4914      	ldr	r1, [pc, #80]	; (800e44c <_dtoa_r+0x654>)
 800e3fc:	2000      	movs	r0, #0
 800e3fe:	f7f1 ff6b 	bl	80002d8 <__aeabi_dsub>
 800e402:	4602      	mov	r2, r0
 800e404:	460b      	mov	r3, r1
 800e406:	4640      	mov	r0, r8
 800e408:	4649      	mov	r1, r9
 800e40a:	f7f2 fb8f 	bl	8000b2c <__aeabi_dcmplt>
 800e40e:	2800      	cmp	r0, #0
 800e410:	f43f af2f 	beq.w	800e272 <_dtoa_r+0x47a>
 800e414:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e416:	1e6b      	subs	r3, r5, #1
 800e418:	930f      	str	r3, [sp, #60]	; 0x3c
 800e41a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e41e:	2b30      	cmp	r3, #48	; 0x30
 800e420:	d0f8      	beq.n	800e414 <_dtoa_r+0x61c>
 800e422:	46bb      	mov	fp, r7
 800e424:	e04a      	b.n	800e4bc <_dtoa_r+0x6c4>
 800e426:	4b06      	ldr	r3, [pc, #24]	; (800e440 <_dtoa_r+0x648>)
 800e428:	f7f2 f90e 	bl	8000648 <__aeabi_dmul>
 800e42c:	4680      	mov	r8, r0
 800e42e:	4689      	mov	r9, r1
 800e430:	e7bd      	b.n	800e3ae <_dtoa_r+0x5b6>
 800e432:	bf00      	nop
 800e434:	08012190 	.word	0x08012190
 800e438:	08012168 	.word	0x08012168
 800e43c:	3ff00000 	.word	0x3ff00000
 800e440:	40240000 	.word	0x40240000
 800e444:	401c0000 	.word	0x401c0000
 800e448:	40140000 	.word	0x40140000
 800e44c:	3fe00000 	.word	0x3fe00000
 800e450:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e454:	9d00      	ldr	r5, [sp, #0]
 800e456:	4642      	mov	r2, r8
 800e458:	464b      	mov	r3, r9
 800e45a:	4630      	mov	r0, r6
 800e45c:	4639      	mov	r1, r7
 800e45e:	f7f2 fa1d 	bl	800089c <__aeabi_ddiv>
 800e462:	f7f2 fba1 	bl	8000ba8 <__aeabi_d2iz>
 800e466:	9001      	str	r0, [sp, #4]
 800e468:	f7f2 f884 	bl	8000574 <__aeabi_i2d>
 800e46c:	4642      	mov	r2, r8
 800e46e:	464b      	mov	r3, r9
 800e470:	f7f2 f8ea 	bl	8000648 <__aeabi_dmul>
 800e474:	4602      	mov	r2, r0
 800e476:	460b      	mov	r3, r1
 800e478:	4630      	mov	r0, r6
 800e47a:	4639      	mov	r1, r7
 800e47c:	f7f1 ff2c 	bl	80002d8 <__aeabi_dsub>
 800e480:	9e01      	ldr	r6, [sp, #4]
 800e482:	9f04      	ldr	r7, [sp, #16]
 800e484:	3630      	adds	r6, #48	; 0x30
 800e486:	f805 6b01 	strb.w	r6, [r5], #1
 800e48a:	9e00      	ldr	r6, [sp, #0]
 800e48c:	1bae      	subs	r6, r5, r6
 800e48e:	42b7      	cmp	r7, r6
 800e490:	4602      	mov	r2, r0
 800e492:	460b      	mov	r3, r1
 800e494:	d134      	bne.n	800e500 <_dtoa_r+0x708>
 800e496:	f7f1 ff21 	bl	80002dc <__adddf3>
 800e49a:	4642      	mov	r2, r8
 800e49c:	464b      	mov	r3, r9
 800e49e:	4606      	mov	r6, r0
 800e4a0:	460f      	mov	r7, r1
 800e4a2:	f7f2 fb61 	bl	8000b68 <__aeabi_dcmpgt>
 800e4a6:	b9c8      	cbnz	r0, 800e4dc <_dtoa_r+0x6e4>
 800e4a8:	4642      	mov	r2, r8
 800e4aa:	464b      	mov	r3, r9
 800e4ac:	4630      	mov	r0, r6
 800e4ae:	4639      	mov	r1, r7
 800e4b0:	f7f2 fb32 	bl	8000b18 <__aeabi_dcmpeq>
 800e4b4:	b110      	cbz	r0, 800e4bc <_dtoa_r+0x6c4>
 800e4b6:	9b01      	ldr	r3, [sp, #4]
 800e4b8:	07db      	lsls	r3, r3, #31
 800e4ba:	d40f      	bmi.n	800e4dc <_dtoa_r+0x6e4>
 800e4bc:	4651      	mov	r1, sl
 800e4be:	4620      	mov	r0, r4
 800e4c0:	f000 fbcc 	bl	800ec5c <_Bfree>
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e4c8:	702b      	strb	r3, [r5, #0]
 800e4ca:	f10b 0301 	add.w	r3, fp, #1
 800e4ce:	6013      	str	r3, [r2, #0]
 800e4d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	f43f ace2 	beq.w	800de9c <_dtoa_r+0xa4>
 800e4d8:	601d      	str	r5, [r3, #0]
 800e4da:	e4df      	b.n	800de9c <_dtoa_r+0xa4>
 800e4dc:	465f      	mov	r7, fp
 800e4de:	462b      	mov	r3, r5
 800e4e0:	461d      	mov	r5, r3
 800e4e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e4e6:	2a39      	cmp	r2, #57	; 0x39
 800e4e8:	d106      	bne.n	800e4f8 <_dtoa_r+0x700>
 800e4ea:	9a00      	ldr	r2, [sp, #0]
 800e4ec:	429a      	cmp	r2, r3
 800e4ee:	d1f7      	bne.n	800e4e0 <_dtoa_r+0x6e8>
 800e4f0:	9900      	ldr	r1, [sp, #0]
 800e4f2:	2230      	movs	r2, #48	; 0x30
 800e4f4:	3701      	adds	r7, #1
 800e4f6:	700a      	strb	r2, [r1, #0]
 800e4f8:	781a      	ldrb	r2, [r3, #0]
 800e4fa:	3201      	adds	r2, #1
 800e4fc:	701a      	strb	r2, [r3, #0]
 800e4fe:	e790      	b.n	800e422 <_dtoa_r+0x62a>
 800e500:	4ba3      	ldr	r3, [pc, #652]	; (800e790 <_dtoa_r+0x998>)
 800e502:	2200      	movs	r2, #0
 800e504:	f7f2 f8a0 	bl	8000648 <__aeabi_dmul>
 800e508:	2200      	movs	r2, #0
 800e50a:	2300      	movs	r3, #0
 800e50c:	4606      	mov	r6, r0
 800e50e:	460f      	mov	r7, r1
 800e510:	f7f2 fb02 	bl	8000b18 <__aeabi_dcmpeq>
 800e514:	2800      	cmp	r0, #0
 800e516:	d09e      	beq.n	800e456 <_dtoa_r+0x65e>
 800e518:	e7d0      	b.n	800e4bc <_dtoa_r+0x6c4>
 800e51a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e51c:	2a00      	cmp	r2, #0
 800e51e:	f000 80ca 	beq.w	800e6b6 <_dtoa_r+0x8be>
 800e522:	9a07      	ldr	r2, [sp, #28]
 800e524:	2a01      	cmp	r2, #1
 800e526:	f300 80ad 	bgt.w	800e684 <_dtoa_r+0x88c>
 800e52a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e52c:	2a00      	cmp	r2, #0
 800e52e:	f000 80a5 	beq.w	800e67c <_dtoa_r+0x884>
 800e532:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e536:	9e08      	ldr	r6, [sp, #32]
 800e538:	9d05      	ldr	r5, [sp, #20]
 800e53a:	9a05      	ldr	r2, [sp, #20]
 800e53c:	441a      	add	r2, r3
 800e53e:	9205      	str	r2, [sp, #20]
 800e540:	9a06      	ldr	r2, [sp, #24]
 800e542:	2101      	movs	r1, #1
 800e544:	441a      	add	r2, r3
 800e546:	4620      	mov	r0, r4
 800e548:	9206      	str	r2, [sp, #24]
 800e54a:	f000 fc3d 	bl	800edc8 <__i2b>
 800e54e:	4607      	mov	r7, r0
 800e550:	b165      	cbz	r5, 800e56c <_dtoa_r+0x774>
 800e552:	9b06      	ldr	r3, [sp, #24]
 800e554:	2b00      	cmp	r3, #0
 800e556:	dd09      	ble.n	800e56c <_dtoa_r+0x774>
 800e558:	42ab      	cmp	r3, r5
 800e55a:	9a05      	ldr	r2, [sp, #20]
 800e55c:	bfa8      	it	ge
 800e55e:	462b      	movge	r3, r5
 800e560:	1ad2      	subs	r2, r2, r3
 800e562:	9205      	str	r2, [sp, #20]
 800e564:	9a06      	ldr	r2, [sp, #24]
 800e566:	1aed      	subs	r5, r5, r3
 800e568:	1ad3      	subs	r3, r2, r3
 800e56a:	9306      	str	r3, [sp, #24]
 800e56c:	9b08      	ldr	r3, [sp, #32]
 800e56e:	b1f3      	cbz	r3, 800e5ae <_dtoa_r+0x7b6>
 800e570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e572:	2b00      	cmp	r3, #0
 800e574:	f000 80a3 	beq.w	800e6be <_dtoa_r+0x8c6>
 800e578:	2e00      	cmp	r6, #0
 800e57a:	dd10      	ble.n	800e59e <_dtoa_r+0x7a6>
 800e57c:	4639      	mov	r1, r7
 800e57e:	4632      	mov	r2, r6
 800e580:	4620      	mov	r0, r4
 800e582:	f000 fce1 	bl	800ef48 <__pow5mult>
 800e586:	4652      	mov	r2, sl
 800e588:	4601      	mov	r1, r0
 800e58a:	4607      	mov	r7, r0
 800e58c:	4620      	mov	r0, r4
 800e58e:	f000 fc31 	bl	800edf4 <__multiply>
 800e592:	4651      	mov	r1, sl
 800e594:	4680      	mov	r8, r0
 800e596:	4620      	mov	r0, r4
 800e598:	f000 fb60 	bl	800ec5c <_Bfree>
 800e59c:	46c2      	mov	sl, r8
 800e59e:	9b08      	ldr	r3, [sp, #32]
 800e5a0:	1b9a      	subs	r2, r3, r6
 800e5a2:	d004      	beq.n	800e5ae <_dtoa_r+0x7b6>
 800e5a4:	4651      	mov	r1, sl
 800e5a6:	4620      	mov	r0, r4
 800e5a8:	f000 fcce 	bl	800ef48 <__pow5mult>
 800e5ac:	4682      	mov	sl, r0
 800e5ae:	2101      	movs	r1, #1
 800e5b0:	4620      	mov	r0, r4
 800e5b2:	f000 fc09 	bl	800edc8 <__i2b>
 800e5b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	4606      	mov	r6, r0
 800e5bc:	f340 8081 	ble.w	800e6c2 <_dtoa_r+0x8ca>
 800e5c0:	461a      	mov	r2, r3
 800e5c2:	4601      	mov	r1, r0
 800e5c4:	4620      	mov	r0, r4
 800e5c6:	f000 fcbf 	bl	800ef48 <__pow5mult>
 800e5ca:	9b07      	ldr	r3, [sp, #28]
 800e5cc:	2b01      	cmp	r3, #1
 800e5ce:	4606      	mov	r6, r0
 800e5d0:	dd7a      	ble.n	800e6c8 <_dtoa_r+0x8d0>
 800e5d2:	f04f 0800 	mov.w	r8, #0
 800e5d6:	6933      	ldr	r3, [r6, #16]
 800e5d8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e5dc:	6918      	ldr	r0, [r3, #16]
 800e5de:	f000 fba5 	bl	800ed2c <__hi0bits>
 800e5e2:	f1c0 0020 	rsb	r0, r0, #32
 800e5e6:	9b06      	ldr	r3, [sp, #24]
 800e5e8:	4418      	add	r0, r3
 800e5ea:	f010 001f 	ands.w	r0, r0, #31
 800e5ee:	f000 8094 	beq.w	800e71a <_dtoa_r+0x922>
 800e5f2:	f1c0 0320 	rsb	r3, r0, #32
 800e5f6:	2b04      	cmp	r3, #4
 800e5f8:	f340 8085 	ble.w	800e706 <_dtoa_r+0x90e>
 800e5fc:	9b05      	ldr	r3, [sp, #20]
 800e5fe:	f1c0 001c 	rsb	r0, r0, #28
 800e602:	4403      	add	r3, r0
 800e604:	9305      	str	r3, [sp, #20]
 800e606:	9b06      	ldr	r3, [sp, #24]
 800e608:	4403      	add	r3, r0
 800e60a:	4405      	add	r5, r0
 800e60c:	9306      	str	r3, [sp, #24]
 800e60e:	9b05      	ldr	r3, [sp, #20]
 800e610:	2b00      	cmp	r3, #0
 800e612:	dd05      	ble.n	800e620 <_dtoa_r+0x828>
 800e614:	4651      	mov	r1, sl
 800e616:	461a      	mov	r2, r3
 800e618:	4620      	mov	r0, r4
 800e61a:	f000 fcef 	bl	800effc <__lshift>
 800e61e:	4682      	mov	sl, r0
 800e620:	9b06      	ldr	r3, [sp, #24]
 800e622:	2b00      	cmp	r3, #0
 800e624:	dd05      	ble.n	800e632 <_dtoa_r+0x83a>
 800e626:	4631      	mov	r1, r6
 800e628:	461a      	mov	r2, r3
 800e62a:	4620      	mov	r0, r4
 800e62c:	f000 fce6 	bl	800effc <__lshift>
 800e630:	4606      	mov	r6, r0
 800e632:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e634:	2b00      	cmp	r3, #0
 800e636:	d072      	beq.n	800e71e <_dtoa_r+0x926>
 800e638:	4631      	mov	r1, r6
 800e63a:	4650      	mov	r0, sl
 800e63c:	f000 fd4a 	bl	800f0d4 <__mcmp>
 800e640:	2800      	cmp	r0, #0
 800e642:	da6c      	bge.n	800e71e <_dtoa_r+0x926>
 800e644:	2300      	movs	r3, #0
 800e646:	4651      	mov	r1, sl
 800e648:	220a      	movs	r2, #10
 800e64a:	4620      	mov	r0, r4
 800e64c:	f000 fb28 	bl	800eca0 <__multadd>
 800e650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e652:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e656:	4682      	mov	sl, r0
 800e658:	2b00      	cmp	r3, #0
 800e65a:	f000 81b0 	beq.w	800e9be <_dtoa_r+0xbc6>
 800e65e:	2300      	movs	r3, #0
 800e660:	4639      	mov	r1, r7
 800e662:	220a      	movs	r2, #10
 800e664:	4620      	mov	r0, r4
 800e666:	f000 fb1b 	bl	800eca0 <__multadd>
 800e66a:	9b01      	ldr	r3, [sp, #4]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	4607      	mov	r7, r0
 800e670:	f300 8096 	bgt.w	800e7a0 <_dtoa_r+0x9a8>
 800e674:	9b07      	ldr	r3, [sp, #28]
 800e676:	2b02      	cmp	r3, #2
 800e678:	dc59      	bgt.n	800e72e <_dtoa_r+0x936>
 800e67a:	e091      	b.n	800e7a0 <_dtoa_r+0x9a8>
 800e67c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e67e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e682:	e758      	b.n	800e536 <_dtoa_r+0x73e>
 800e684:	9b04      	ldr	r3, [sp, #16]
 800e686:	1e5e      	subs	r6, r3, #1
 800e688:	9b08      	ldr	r3, [sp, #32]
 800e68a:	42b3      	cmp	r3, r6
 800e68c:	bfbf      	itttt	lt
 800e68e:	9b08      	ldrlt	r3, [sp, #32]
 800e690:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800e692:	9608      	strlt	r6, [sp, #32]
 800e694:	1af3      	sublt	r3, r6, r3
 800e696:	bfb4      	ite	lt
 800e698:	18d2      	addlt	r2, r2, r3
 800e69a:	1b9e      	subge	r6, r3, r6
 800e69c:	9b04      	ldr	r3, [sp, #16]
 800e69e:	bfbc      	itt	lt
 800e6a0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800e6a2:	2600      	movlt	r6, #0
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	bfb7      	itett	lt
 800e6a8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800e6ac:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800e6b0:	1a9d      	sublt	r5, r3, r2
 800e6b2:	2300      	movlt	r3, #0
 800e6b4:	e741      	b.n	800e53a <_dtoa_r+0x742>
 800e6b6:	9e08      	ldr	r6, [sp, #32]
 800e6b8:	9d05      	ldr	r5, [sp, #20]
 800e6ba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e6bc:	e748      	b.n	800e550 <_dtoa_r+0x758>
 800e6be:	9a08      	ldr	r2, [sp, #32]
 800e6c0:	e770      	b.n	800e5a4 <_dtoa_r+0x7ac>
 800e6c2:	9b07      	ldr	r3, [sp, #28]
 800e6c4:	2b01      	cmp	r3, #1
 800e6c6:	dc19      	bgt.n	800e6fc <_dtoa_r+0x904>
 800e6c8:	9b02      	ldr	r3, [sp, #8]
 800e6ca:	b9bb      	cbnz	r3, 800e6fc <_dtoa_r+0x904>
 800e6cc:	9b03      	ldr	r3, [sp, #12]
 800e6ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e6d2:	b99b      	cbnz	r3, 800e6fc <_dtoa_r+0x904>
 800e6d4:	9b03      	ldr	r3, [sp, #12]
 800e6d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e6da:	0d1b      	lsrs	r3, r3, #20
 800e6dc:	051b      	lsls	r3, r3, #20
 800e6de:	b183      	cbz	r3, 800e702 <_dtoa_r+0x90a>
 800e6e0:	9b05      	ldr	r3, [sp, #20]
 800e6e2:	3301      	adds	r3, #1
 800e6e4:	9305      	str	r3, [sp, #20]
 800e6e6:	9b06      	ldr	r3, [sp, #24]
 800e6e8:	3301      	adds	r3, #1
 800e6ea:	9306      	str	r3, [sp, #24]
 800e6ec:	f04f 0801 	mov.w	r8, #1
 800e6f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	f47f af6f 	bne.w	800e5d6 <_dtoa_r+0x7de>
 800e6f8:	2001      	movs	r0, #1
 800e6fa:	e774      	b.n	800e5e6 <_dtoa_r+0x7ee>
 800e6fc:	f04f 0800 	mov.w	r8, #0
 800e700:	e7f6      	b.n	800e6f0 <_dtoa_r+0x8f8>
 800e702:	4698      	mov	r8, r3
 800e704:	e7f4      	b.n	800e6f0 <_dtoa_r+0x8f8>
 800e706:	d082      	beq.n	800e60e <_dtoa_r+0x816>
 800e708:	9a05      	ldr	r2, [sp, #20]
 800e70a:	331c      	adds	r3, #28
 800e70c:	441a      	add	r2, r3
 800e70e:	9205      	str	r2, [sp, #20]
 800e710:	9a06      	ldr	r2, [sp, #24]
 800e712:	441a      	add	r2, r3
 800e714:	441d      	add	r5, r3
 800e716:	9206      	str	r2, [sp, #24]
 800e718:	e779      	b.n	800e60e <_dtoa_r+0x816>
 800e71a:	4603      	mov	r3, r0
 800e71c:	e7f4      	b.n	800e708 <_dtoa_r+0x910>
 800e71e:	9b04      	ldr	r3, [sp, #16]
 800e720:	2b00      	cmp	r3, #0
 800e722:	dc37      	bgt.n	800e794 <_dtoa_r+0x99c>
 800e724:	9b07      	ldr	r3, [sp, #28]
 800e726:	2b02      	cmp	r3, #2
 800e728:	dd34      	ble.n	800e794 <_dtoa_r+0x99c>
 800e72a:	9b04      	ldr	r3, [sp, #16]
 800e72c:	9301      	str	r3, [sp, #4]
 800e72e:	9b01      	ldr	r3, [sp, #4]
 800e730:	b963      	cbnz	r3, 800e74c <_dtoa_r+0x954>
 800e732:	4631      	mov	r1, r6
 800e734:	2205      	movs	r2, #5
 800e736:	4620      	mov	r0, r4
 800e738:	f000 fab2 	bl	800eca0 <__multadd>
 800e73c:	4601      	mov	r1, r0
 800e73e:	4606      	mov	r6, r0
 800e740:	4650      	mov	r0, sl
 800e742:	f000 fcc7 	bl	800f0d4 <__mcmp>
 800e746:	2800      	cmp	r0, #0
 800e748:	f73f adbb 	bgt.w	800e2c2 <_dtoa_r+0x4ca>
 800e74c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e74e:	9d00      	ldr	r5, [sp, #0]
 800e750:	ea6f 0b03 	mvn.w	fp, r3
 800e754:	f04f 0800 	mov.w	r8, #0
 800e758:	4631      	mov	r1, r6
 800e75a:	4620      	mov	r0, r4
 800e75c:	f000 fa7e 	bl	800ec5c <_Bfree>
 800e760:	2f00      	cmp	r7, #0
 800e762:	f43f aeab 	beq.w	800e4bc <_dtoa_r+0x6c4>
 800e766:	f1b8 0f00 	cmp.w	r8, #0
 800e76a:	d005      	beq.n	800e778 <_dtoa_r+0x980>
 800e76c:	45b8      	cmp	r8, r7
 800e76e:	d003      	beq.n	800e778 <_dtoa_r+0x980>
 800e770:	4641      	mov	r1, r8
 800e772:	4620      	mov	r0, r4
 800e774:	f000 fa72 	bl	800ec5c <_Bfree>
 800e778:	4639      	mov	r1, r7
 800e77a:	4620      	mov	r0, r4
 800e77c:	f000 fa6e 	bl	800ec5c <_Bfree>
 800e780:	e69c      	b.n	800e4bc <_dtoa_r+0x6c4>
 800e782:	2600      	movs	r6, #0
 800e784:	4637      	mov	r7, r6
 800e786:	e7e1      	b.n	800e74c <_dtoa_r+0x954>
 800e788:	46bb      	mov	fp, r7
 800e78a:	4637      	mov	r7, r6
 800e78c:	e599      	b.n	800e2c2 <_dtoa_r+0x4ca>
 800e78e:	bf00      	nop
 800e790:	40240000 	.word	0x40240000
 800e794:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e796:	2b00      	cmp	r3, #0
 800e798:	f000 80c8 	beq.w	800e92c <_dtoa_r+0xb34>
 800e79c:	9b04      	ldr	r3, [sp, #16]
 800e79e:	9301      	str	r3, [sp, #4]
 800e7a0:	2d00      	cmp	r5, #0
 800e7a2:	dd05      	ble.n	800e7b0 <_dtoa_r+0x9b8>
 800e7a4:	4639      	mov	r1, r7
 800e7a6:	462a      	mov	r2, r5
 800e7a8:	4620      	mov	r0, r4
 800e7aa:	f000 fc27 	bl	800effc <__lshift>
 800e7ae:	4607      	mov	r7, r0
 800e7b0:	f1b8 0f00 	cmp.w	r8, #0
 800e7b4:	d05b      	beq.n	800e86e <_dtoa_r+0xa76>
 800e7b6:	6879      	ldr	r1, [r7, #4]
 800e7b8:	4620      	mov	r0, r4
 800e7ba:	f000 fa0f 	bl	800ebdc <_Balloc>
 800e7be:	4605      	mov	r5, r0
 800e7c0:	b928      	cbnz	r0, 800e7ce <_dtoa_r+0x9d6>
 800e7c2:	4b83      	ldr	r3, [pc, #524]	; (800e9d0 <_dtoa_r+0xbd8>)
 800e7c4:	4602      	mov	r2, r0
 800e7c6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800e7ca:	f7ff bb2e 	b.w	800de2a <_dtoa_r+0x32>
 800e7ce:	693a      	ldr	r2, [r7, #16]
 800e7d0:	3202      	adds	r2, #2
 800e7d2:	0092      	lsls	r2, r2, #2
 800e7d4:	f107 010c 	add.w	r1, r7, #12
 800e7d8:	300c      	adds	r0, #12
 800e7da:	f7ff fa74 	bl	800dcc6 <memcpy>
 800e7de:	2201      	movs	r2, #1
 800e7e0:	4629      	mov	r1, r5
 800e7e2:	4620      	mov	r0, r4
 800e7e4:	f000 fc0a 	bl	800effc <__lshift>
 800e7e8:	9b00      	ldr	r3, [sp, #0]
 800e7ea:	3301      	adds	r3, #1
 800e7ec:	9304      	str	r3, [sp, #16]
 800e7ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e7f2:	4413      	add	r3, r2
 800e7f4:	9308      	str	r3, [sp, #32]
 800e7f6:	9b02      	ldr	r3, [sp, #8]
 800e7f8:	f003 0301 	and.w	r3, r3, #1
 800e7fc:	46b8      	mov	r8, r7
 800e7fe:	9306      	str	r3, [sp, #24]
 800e800:	4607      	mov	r7, r0
 800e802:	9b04      	ldr	r3, [sp, #16]
 800e804:	4631      	mov	r1, r6
 800e806:	3b01      	subs	r3, #1
 800e808:	4650      	mov	r0, sl
 800e80a:	9301      	str	r3, [sp, #4]
 800e80c:	f7ff fa69 	bl	800dce2 <quorem>
 800e810:	4641      	mov	r1, r8
 800e812:	9002      	str	r0, [sp, #8]
 800e814:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e818:	4650      	mov	r0, sl
 800e81a:	f000 fc5b 	bl	800f0d4 <__mcmp>
 800e81e:	463a      	mov	r2, r7
 800e820:	9005      	str	r0, [sp, #20]
 800e822:	4631      	mov	r1, r6
 800e824:	4620      	mov	r0, r4
 800e826:	f000 fc71 	bl	800f10c <__mdiff>
 800e82a:	68c2      	ldr	r2, [r0, #12]
 800e82c:	4605      	mov	r5, r0
 800e82e:	bb02      	cbnz	r2, 800e872 <_dtoa_r+0xa7a>
 800e830:	4601      	mov	r1, r0
 800e832:	4650      	mov	r0, sl
 800e834:	f000 fc4e 	bl	800f0d4 <__mcmp>
 800e838:	4602      	mov	r2, r0
 800e83a:	4629      	mov	r1, r5
 800e83c:	4620      	mov	r0, r4
 800e83e:	9209      	str	r2, [sp, #36]	; 0x24
 800e840:	f000 fa0c 	bl	800ec5c <_Bfree>
 800e844:	9b07      	ldr	r3, [sp, #28]
 800e846:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e848:	9d04      	ldr	r5, [sp, #16]
 800e84a:	ea43 0102 	orr.w	r1, r3, r2
 800e84e:	9b06      	ldr	r3, [sp, #24]
 800e850:	4319      	orrs	r1, r3
 800e852:	d110      	bne.n	800e876 <_dtoa_r+0xa7e>
 800e854:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e858:	d029      	beq.n	800e8ae <_dtoa_r+0xab6>
 800e85a:	9b05      	ldr	r3, [sp, #20]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	dd02      	ble.n	800e866 <_dtoa_r+0xa6e>
 800e860:	9b02      	ldr	r3, [sp, #8]
 800e862:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800e866:	9b01      	ldr	r3, [sp, #4]
 800e868:	f883 9000 	strb.w	r9, [r3]
 800e86c:	e774      	b.n	800e758 <_dtoa_r+0x960>
 800e86e:	4638      	mov	r0, r7
 800e870:	e7ba      	b.n	800e7e8 <_dtoa_r+0x9f0>
 800e872:	2201      	movs	r2, #1
 800e874:	e7e1      	b.n	800e83a <_dtoa_r+0xa42>
 800e876:	9b05      	ldr	r3, [sp, #20]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	db04      	blt.n	800e886 <_dtoa_r+0xa8e>
 800e87c:	9907      	ldr	r1, [sp, #28]
 800e87e:	430b      	orrs	r3, r1
 800e880:	9906      	ldr	r1, [sp, #24]
 800e882:	430b      	orrs	r3, r1
 800e884:	d120      	bne.n	800e8c8 <_dtoa_r+0xad0>
 800e886:	2a00      	cmp	r2, #0
 800e888:	dded      	ble.n	800e866 <_dtoa_r+0xa6e>
 800e88a:	4651      	mov	r1, sl
 800e88c:	2201      	movs	r2, #1
 800e88e:	4620      	mov	r0, r4
 800e890:	f000 fbb4 	bl	800effc <__lshift>
 800e894:	4631      	mov	r1, r6
 800e896:	4682      	mov	sl, r0
 800e898:	f000 fc1c 	bl	800f0d4 <__mcmp>
 800e89c:	2800      	cmp	r0, #0
 800e89e:	dc03      	bgt.n	800e8a8 <_dtoa_r+0xab0>
 800e8a0:	d1e1      	bne.n	800e866 <_dtoa_r+0xa6e>
 800e8a2:	f019 0f01 	tst.w	r9, #1
 800e8a6:	d0de      	beq.n	800e866 <_dtoa_r+0xa6e>
 800e8a8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e8ac:	d1d8      	bne.n	800e860 <_dtoa_r+0xa68>
 800e8ae:	9a01      	ldr	r2, [sp, #4]
 800e8b0:	2339      	movs	r3, #57	; 0x39
 800e8b2:	7013      	strb	r3, [r2, #0]
 800e8b4:	462b      	mov	r3, r5
 800e8b6:	461d      	mov	r5, r3
 800e8b8:	3b01      	subs	r3, #1
 800e8ba:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e8be:	2a39      	cmp	r2, #57	; 0x39
 800e8c0:	d06c      	beq.n	800e99c <_dtoa_r+0xba4>
 800e8c2:	3201      	adds	r2, #1
 800e8c4:	701a      	strb	r2, [r3, #0]
 800e8c6:	e747      	b.n	800e758 <_dtoa_r+0x960>
 800e8c8:	2a00      	cmp	r2, #0
 800e8ca:	dd07      	ble.n	800e8dc <_dtoa_r+0xae4>
 800e8cc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e8d0:	d0ed      	beq.n	800e8ae <_dtoa_r+0xab6>
 800e8d2:	9a01      	ldr	r2, [sp, #4]
 800e8d4:	f109 0301 	add.w	r3, r9, #1
 800e8d8:	7013      	strb	r3, [r2, #0]
 800e8da:	e73d      	b.n	800e758 <_dtoa_r+0x960>
 800e8dc:	9b04      	ldr	r3, [sp, #16]
 800e8de:	9a08      	ldr	r2, [sp, #32]
 800e8e0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800e8e4:	4293      	cmp	r3, r2
 800e8e6:	d043      	beq.n	800e970 <_dtoa_r+0xb78>
 800e8e8:	4651      	mov	r1, sl
 800e8ea:	2300      	movs	r3, #0
 800e8ec:	220a      	movs	r2, #10
 800e8ee:	4620      	mov	r0, r4
 800e8f0:	f000 f9d6 	bl	800eca0 <__multadd>
 800e8f4:	45b8      	cmp	r8, r7
 800e8f6:	4682      	mov	sl, r0
 800e8f8:	f04f 0300 	mov.w	r3, #0
 800e8fc:	f04f 020a 	mov.w	r2, #10
 800e900:	4641      	mov	r1, r8
 800e902:	4620      	mov	r0, r4
 800e904:	d107      	bne.n	800e916 <_dtoa_r+0xb1e>
 800e906:	f000 f9cb 	bl	800eca0 <__multadd>
 800e90a:	4680      	mov	r8, r0
 800e90c:	4607      	mov	r7, r0
 800e90e:	9b04      	ldr	r3, [sp, #16]
 800e910:	3301      	adds	r3, #1
 800e912:	9304      	str	r3, [sp, #16]
 800e914:	e775      	b.n	800e802 <_dtoa_r+0xa0a>
 800e916:	f000 f9c3 	bl	800eca0 <__multadd>
 800e91a:	4639      	mov	r1, r7
 800e91c:	4680      	mov	r8, r0
 800e91e:	2300      	movs	r3, #0
 800e920:	220a      	movs	r2, #10
 800e922:	4620      	mov	r0, r4
 800e924:	f000 f9bc 	bl	800eca0 <__multadd>
 800e928:	4607      	mov	r7, r0
 800e92a:	e7f0      	b.n	800e90e <_dtoa_r+0xb16>
 800e92c:	9b04      	ldr	r3, [sp, #16]
 800e92e:	9301      	str	r3, [sp, #4]
 800e930:	9d00      	ldr	r5, [sp, #0]
 800e932:	4631      	mov	r1, r6
 800e934:	4650      	mov	r0, sl
 800e936:	f7ff f9d4 	bl	800dce2 <quorem>
 800e93a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e93e:	9b00      	ldr	r3, [sp, #0]
 800e940:	f805 9b01 	strb.w	r9, [r5], #1
 800e944:	1aea      	subs	r2, r5, r3
 800e946:	9b01      	ldr	r3, [sp, #4]
 800e948:	4293      	cmp	r3, r2
 800e94a:	dd07      	ble.n	800e95c <_dtoa_r+0xb64>
 800e94c:	4651      	mov	r1, sl
 800e94e:	2300      	movs	r3, #0
 800e950:	220a      	movs	r2, #10
 800e952:	4620      	mov	r0, r4
 800e954:	f000 f9a4 	bl	800eca0 <__multadd>
 800e958:	4682      	mov	sl, r0
 800e95a:	e7ea      	b.n	800e932 <_dtoa_r+0xb3a>
 800e95c:	9b01      	ldr	r3, [sp, #4]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	bfc8      	it	gt
 800e962:	461d      	movgt	r5, r3
 800e964:	9b00      	ldr	r3, [sp, #0]
 800e966:	bfd8      	it	le
 800e968:	2501      	movle	r5, #1
 800e96a:	441d      	add	r5, r3
 800e96c:	f04f 0800 	mov.w	r8, #0
 800e970:	4651      	mov	r1, sl
 800e972:	2201      	movs	r2, #1
 800e974:	4620      	mov	r0, r4
 800e976:	f000 fb41 	bl	800effc <__lshift>
 800e97a:	4631      	mov	r1, r6
 800e97c:	4682      	mov	sl, r0
 800e97e:	f000 fba9 	bl	800f0d4 <__mcmp>
 800e982:	2800      	cmp	r0, #0
 800e984:	dc96      	bgt.n	800e8b4 <_dtoa_r+0xabc>
 800e986:	d102      	bne.n	800e98e <_dtoa_r+0xb96>
 800e988:	f019 0f01 	tst.w	r9, #1
 800e98c:	d192      	bne.n	800e8b4 <_dtoa_r+0xabc>
 800e98e:	462b      	mov	r3, r5
 800e990:	461d      	mov	r5, r3
 800e992:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e996:	2a30      	cmp	r2, #48	; 0x30
 800e998:	d0fa      	beq.n	800e990 <_dtoa_r+0xb98>
 800e99a:	e6dd      	b.n	800e758 <_dtoa_r+0x960>
 800e99c:	9a00      	ldr	r2, [sp, #0]
 800e99e:	429a      	cmp	r2, r3
 800e9a0:	d189      	bne.n	800e8b6 <_dtoa_r+0xabe>
 800e9a2:	f10b 0b01 	add.w	fp, fp, #1
 800e9a6:	2331      	movs	r3, #49	; 0x31
 800e9a8:	e796      	b.n	800e8d8 <_dtoa_r+0xae0>
 800e9aa:	4b0a      	ldr	r3, [pc, #40]	; (800e9d4 <_dtoa_r+0xbdc>)
 800e9ac:	f7ff ba99 	b.w	800dee2 <_dtoa_r+0xea>
 800e9b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	f47f aa6d 	bne.w	800de92 <_dtoa_r+0x9a>
 800e9b8:	4b07      	ldr	r3, [pc, #28]	; (800e9d8 <_dtoa_r+0xbe0>)
 800e9ba:	f7ff ba92 	b.w	800dee2 <_dtoa_r+0xea>
 800e9be:	9b01      	ldr	r3, [sp, #4]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	dcb5      	bgt.n	800e930 <_dtoa_r+0xb38>
 800e9c4:	9b07      	ldr	r3, [sp, #28]
 800e9c6:	2b02      	cmp	r3, #2
 800e9c8:	f73f aeb1 	bgt.w	800e72e <_dtoa_r+0x936>
 800e9cc:	e7b0      	b.n	800e930 <_dtoa_r+0xb38>
 800e9ce:	bf00      	nop
 800e9d0:	080120f8 	.word	0x080120f8
 800e9d4:	08012058 	.word	0x08012058
 800e9d8:	0801207c 	.word	0x0801207c

0800e9dc <_free_r>:
 800e9dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e9de:	2900      	cmp	r1, #0
 800e9e0:	d044      	beq.n	800ea6c <_free_r+0x90>
 800e9e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e9e6:	9001      	str	r0, [sp, #4]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	f1a1 0404 	sub.w	r4, r1, #4
 800e9ee:	bfb8      	it	lt
 800e9f0:	18e4      	addlt	r4, r4, r3
 800e9f2:	f000 f8e7 	bl	800ebc4 <__malloc_lock>
 800e9f6:	4a1e      	ldr	r2, [pc, #120]	; (800ea70 <_free_r+0x94>)
 800e9f8:	9801      	ldr	r0, [sp, #4]
 800e9fa:	6813      	ldr	r3, [r2, #0]
 800e9fc:	b933      	cbnz	r3, 800ea0c <_free_r+0x30>
 800e9fe:	6063      	str	r3, [r4, #4]
 800ea00:	6014      	str	r4, [r2, #0]
 800ea02:	b003      	add	sp, #12
 800ea04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ea08:	f000 b8e2 	b.w	800ebd0 <__malloc_unlock>
 800ea0c:	42a3      	cmp	r3, r4
 800ea0e:	d908      	bls.n	800ea22 <_free_r+0x46>
 800ea10:	6825      	ldr	r5, [r4, #0]
 800ea12:	1961      	adds	r1, r4, r5
 800ea14:	428b      	cmp	r3, r1
 800ea16:	bf01      	itttt	eq
 800ea18:	6819      	ldreq	r1, [r3, #0]
 800ea1a:	685b      	ldreq	r3, [r3, #4]
 800ea1c:	1949      	addeq	r1, r1, r5
 800ea1e:	6021      	streq	r1, [r4, #0]
 800ea20:	e7ed      	b.n	800e9fe <_free_r+0x22>
 800ea22:	461a      	mov	r2, r3
 800ea24:	685b      	ldr	r3, [r3, #4]
 800ea26:	b10b      	cbz	r3, 800ea2c <_free_r+0x50>
 800ea28:	42a3      	cmp	r3, r4
 800ea2a:	d9fa      	bls.n	800ea22 <_free_r+0x46>
 800ea2c:	6811      	ldr	r1, [r2, #0]
 800ea2e:	1855      	adds	r5, r2, r1
 800ea30:	42a5      	cmp	r5, r4
 800ea32:	d10b      	bne.n	800ea4c <_free_r+0x70>
 800ea34:	6824      	ldr	r4, [r4, #0]
 800ea36:	4421      	add	r1, r4
 800ea38:	1854      	adds	r4, r2, r1
 800ea3a:	42a3      	cmp	r3, r4
 800ea3c:	6011      	str	r1, [r2, #0]
 800ea3e:	d1e0      	bne.n	800ea02 <_free_r+0x26>
 800ea40:	681c      	ldr	r4, [r3, #0]
 800ea42:	685b      	ldr	r3, [r3, #4]
 800ea44:	6053      	str	r3, [r2, #4]
 800ea46:	440c      	add	r4, r1
 800ea48:	6014      	str	r4, [r2, #0]
 800ea4a:	e7da      	b.n	800ea02 <_free_r+0x26>
 800ea4c:	d902      	bls.n	800ea54 <_free_r+0x78>
 800ea4e:	230c      	movs	r3, #12
 800ea50:	6003      	str	r3, [r0, #0]
 800ea52:	e7d6      	b.n	800ea02 <_free_r+0x26>
 800ea54:	6825      	ldr	r5, [r4, #0]
 800ea56:	1961      	adds	r1, r4, r5
 800ea58:	428b      	cmp	r3, r1
 800ea5a:	bf04      	itt	eq
 800ea5c:	6819      	ldreq	r1, [r3, #0]
 800ea5e:	685b      	ldreq	r3, [r3, #4]
 800ea60:	6063      	str	r3, [r4, #4]
 800ea62:	bf04      	itt	eq
 800ea64:	1949      	addeq	r1, r1, r5
 800ea66:	6021      	streq	r1, [r4, #0]
 800ea68:	6054      	str	r4, [r2, #4]
 800ea6a:	e7ca      	b.n	800ea02 <_free_r+0x26>
 800ea6c:	b003      	add	sp, #12
 800ea6e:	bd30      	pop	{r4, r5, pc}
 800ea70:	20001910 	.word	0x20001910

0800ea74 <malloc>:
 800ea74:	4b02      	ldr	r3, [pc, #8]	; (800ea80 <malloc+0xc>)
 800ea76:	4601      	mov	r1, r0
 800ea78:	6818      	ldr	r0, [r3, #0]
 800ea7a:	f000 b823 	b.w	800eac4 <_malloc_r>
 800ea7e:	bf00      	nop
 800ea80:	20000070 	.word	0x20000070

0800ea84 <sbrk_aligned>:
 800ea84:	b570      	push	{r4, r5, r6, lr}
 800ea86:	4e0e      	ldr	r6, [pc, #56]	; (800eac0 <sbrk_aligned+0x3c>)
 800ea88:	460c      	mov	r4, r1
 800ea8a:	6831      	ldr	r1, [r6, #0]
 800ea8c:	4605      	mov	r5, r0
 800ea8e:	b911      	cbnz	r1, 800ea96 <sbrk_aligned+0x12>
 800ea90:	f000 fe40 	bl	800f714 <_sbrk_r>
 800ea94:	6030      	str	r0, [r6, #0]
 800ea96:	4621      	mov	r1, r4
 800ea98:	4628      	mov	r0, r5
 800ea9a:	f000 fe3b 	bl	800f714 <_sbrk_r>
 800ea9e:	1c43      	adds	r3, r0, #1
 800eaa0:	d00a      	beq.n	800eab8 <sbrk_aligned+0x34>
 800eaa2:	1cc4      	adds	r4, r0, #3
 800eaa4:	f024 0403 	bic.w	r4, r4, #3
 800eaa8:	42a0      	cmp	r0, r4
 800eaaa:	d007      	beq.n	800eabc <sbrk_aligned+0x38>
 800eaac:	1a21      	subs	r1, r4, r0
 800eaae:	4628      	mov	r0, r5
 800eab0:	f000 fe30 	bl	800f714 <_sbrk_r>
 800eab4:	3001      	adds	r0, #1
 800eab6:	d101      	bne.n	800eabc <sbrk_aligned+0x38>
 800eab8:	f04f 34ff 	mov.w	r4, #4294967295
 800eabc:	4620      	mov	r0, r4
 800eabe:	bd70      	pop	{r4, r5, r6, pc}
 800eac0:	20001914 	.word	0x20001914

0800eac4 <_malloc_r>:
 800eac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eac8:	1ccd      	adds	r5, r1, #3
 800eaca:	f025 0503 	bic.w	r5, r5, #3
 800eace:	3508      	adds	r5, #8
 800ead0:	2d0c      	cmp	r5, #12
 800ead2:	bf38      	it	cc
 800ead4:	250c      	movcc	r5, #12
 800ead6:	2d00      	cmp	r5, #0
 800ead8:	4607      	mov	r7, r0
 800eada:	db01      	blt.n	800eae0 <_malloc_r+0x1c>
 800eadc:	42a9      	cmp	r1, r5
 800eade:	d905      	bls.n	800eaec <_malloc_r+0x28>
 800eae0:	230c      	movs	r3, #12
 800eae2:	603b      	str	r3, [r7, #0]
 800eae4:	2600      	movs	r6, #0
 800eae6:	4630      	mov	r0, r6
 800eae8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eaec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ebc0 <_malloc_r+0xfc>
 800eaf0:	f000 f868 	bl	800ebc4 <__malloc_lock>
 800eaf4:	f8d8 3000 	ldr.w	r3, [r8]
 800eaf8:	461c      	mov	r4, r3
 800eafa:	bb5c      	cbnz	r4, 800eb54 <_malloc_r+0x90>
 800eafc:	4629      	mov	r1, r5
 800eafe:	4638      	mov	r0, r7
 800eb00:	f7ff ffc0 	bl	800ea84 <sbrk_aligned>
 800eb04:	1c43      	adds	r3, r0, #1
 800eb06:	4604      	mov	r4, r0
 800eb08:	d155      	bne.n	800ebb6 <_malloc_r+0xf2>
 800eb0a:	f8d8 4000 	ldr.w	r4, [r8]
 800eb0e:	4626      	mov	r6, r4
 800eb10:	2e00      	cmp	r6, #0
 800eb12:	d145      	bne.n	800eba0 <_malloc_r+0xdc>
 800eb14:	2c00      	cmp	r4, #0
 800eb16:	d048      	beq.n	800ebaa <_malloc_r+0xe6>
 800eb18:	6823      	ldr	r3, [r4, #0]
 800eb1a:	4631      	mov	r1, r6
 800eb1c:	4638      	mov	r0, r7
 800eb1e:	eb04 0903 	add.w	r9, r4, r3
 800eb22:	f000 fdf7 	bl	800f714 <_sbrk_r>
 800eb26:	4581      	cmp	r9, r0
 800eb28:	d13f      	bne.n	800ebaa <_malloc_r+0xe6>
 800eb2a:	6821      	ldr	r1, [r4, #0]
 800eb2c:	1a6d      	subs	r5, r5, r1
 800eb2e:	4629      	mov	r1, r5
 800eb30:	4638      	mov	r0, r7
 800eb32:	f7ff ffa7 	bl	800ea84 <sbrk_aligned>
 800eb36:	3001      	adds	r0, #1
 800eb38:	d037      	beq.n	800ebaa <_malloc_r+0xe6>
 800eb3a:	6823      	ldr	r3, [r4, #0]
 800eb3c:	442b      	add	r3, r5
 800eb3e:	6023      	str	r3, [r4, #0]
 800eb40:	f8d8 3000 	ldr.w	r3, [r8]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d038      	beq.n	800ebba <_malloc_r+0xf6>
 800eb48:	685a      	ldr	r2, [r3, #4]
 800eb4a:	42a2      	cmp	r2, r4
 800eb4c:	d12b      	bne.n	800eba6 <_malloc_r+0xe2>
 800eb4e:	2200      	movs	r2, #0
 800eb50:	605a      	str	r2, [r3, #4]
 800eb52:	e00f      	b.n	800eb74 <_malloc_r+0xb0>
 800eb54:	6822      	ldr	r2, [r4, #0]
 800eb56:	1b52      	subs	r2, r2, r5
 800eb58:	d41f      	bmi.n	800eb9a <_malloc_r+0xd6>
 800eb5a:	2a0b      	cmp	r2, #11
 800eb5c:	d917      	bls.n	800eb8e <_malloc_r+0xca>
 800eb5e:	1961      	adds	r1, r4, r5
 800eb60:	42a3      	cmp	r3, r4
 800eb62:	6025      	str	r5, [r4, #0]
 800eb64:	bf18      	it	ne
 800eb66:	6059      	strne	r1, [r3, #4]
 800eb68:	6863      	ldr	r3, [r4, #4]
 800eb6a:	bf08      	it	eq
 800eb6c:	f8c8 1000 	streq.w	r1, [r8]
 800eb70:	5162      	str	r2, [r4, r5]
 800eb72:	604b      	str	r3, [r1, #4]
 800eb74:	4638      	mov	r0, r7
 800eb76:	f104 060b 	add.w	r6, r4, #11
 800eb7a:	f000 f829 	bl	800ebd0 <__malloc_unlock>
 800eb7e:	f026 0607 	bic.w	r6, r6, #7
 800eb82:	1d23      	adds	r3, r4, #4
 800eb84:	1af2      	subs	r2, r6, r3
 800eb86:	d0ae      	beq.n	800eae6 <_malloc_r+0x22>
 800eb88:	1b9b      	subs	r3, r3, r6
 800eb8a:	50a3      	str	r3, [r4, r2]
 800eb8c:	e7ab      	b.n	800eae6 <_malloc_r+0x22>
 800eb8e:	42a3      	cmp	r3, r4
 800eb90:	6862      	ldr	r2, [r4, #4]
 800eb92:	d1dd      	bne.n	800eb50 <_malloc_r+0x8c>
 800eb94:	f8c8 2000 	str.w	r2, [r8]
 800eb98:	e7ec      	b.n	800eb74 <_malloc_r+0xb0>
 800eb9a:	4623      	mov	r3, r4
 800eb9c:	6864      	ldr	r4, [r4, #4]
 800eb9e:	e7ac      	b.n	800eafa <_malloc_r+0x36>
 800eba0:	4634      	mov	r4, r6
 800eba2:	6876      	ldr	r6, [r6, #4]
 800eba4:	e7b4      	b.n	800eb10 <_malloc_r+0x4c>
 800eba6:	4613      	mov	r3, r2
 800eba8:	e7cc      	b.n	800eb44 <_malloc_r+0x80>
 800ebaa:	230c      	movs	r3, #12
 800ebac:	603b      	str	r3, [r7, #0]
 800ebae:	4638      	mov	r0, r7
 800ebb0:	f000 f80e 	bl	800ebd0 <__malloc_unlock>
 800ebb4:	e797      	b.n	800eae6 <_malloc_r+0x22>
 800ebb6:	6025      	str	r5, [r4, #0]
 800ebb8:	e7dc      	b.n	800eb74 <_malloc_r+0xb0>
 800ebba:	605b      	str	r3, [r3, #4]
 800ebbc:	deff      	udf	#255	; 0xff
 800ebbe:	bf00      	nop
 800ebc0:	20001910 	.word	0x20001910

0800ebc4 <__malloc_lock>:
 800ebc4:	4801      	ldr	r0, [pc, #4]	; (800ebcc <__malloc_lock+0x8>)
 800ebc6:	f7ff b87c 	b.w	800dcc2 <__retarget_lock_acquire_recursive>
 800ebca:	bf00      	nop
 800ebcc:	2000190c 	.word	0x2000190c

0800ebd0 <__malloc_unlock>:
 800ebd0:	4801      	ldr	r0, [pc, #4]	; (800ebd8 <__malloc_unlock+0x8>)
 800ebd2:	f7ff b877 	b.w	800dcc4 <__retarget_lock_release_recursive>
 800ebd6:	bf00      	nop
 800ebd8:	2000190c 	.word	0x2000190c

0800ebdc <_Balloc>:
 800ebdc:	b570      	push	{r4, r5, r6, lr}
 800ebde:	69c6      	ldr	r6, [r0, #28]
 800ebe0:	4604      	mov	r4, r0
 800ebe2:	460d      	mov	r5, r1
 800ebe4:	b976      	cbnz	r6, 800ec04 <_Balloc+0x28>
 800ebe6:	2010      	movs	r0, #16
 800ebe8:	f7ff ff44 	bl	800ea74 <malloc>
 800ebec:	4602      	mov	r2, r0
 800ebee:	61e0      	str	r0, [r4, #28]
 800ebf0:	b920      	cbnz	r0, 800ebfc <_Balloc+0x20>
 800ebf2:	4b18      	ldr	r3, [pc, #96]	; (800ec54 <_Balloc+0x78>)
 800ebf4:	4818      	ldr	r0, [pc, #96]	; (800ec58 <_Balloc+0x7c>)
 800ebf6:	216b      	movs	r1, #107	; 0x6b
 800ebf8:	f000 fd9c 	bl	800f734 <__assert_func>
 800ebfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ec00:	6006      	str	r6, [r0, #0]
 800ec02:	60c6      	str	r6, [r0, #12]
 800ec04:	69e6      	ldr	r6, [r4, #28]
 800ec06:	68f3      	ldr	r3, [r6, #12]
 800ec08:	b183      	cbz	r3, 800ec2c <_Balloc+0x50>
 800ec0a:	69e3      	ldr	r3, [r4, #28]
 800ec0c:	68db      	ldr	r3, [r3, #12]
 800ec0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ec12:	b9b8      	cbnz	r0, 800ec44 <_Balloc+0x68>
 800ec14:	2101      	movs	r1, #1
 800ec16:	fa01 f605 	lsl.w	r6, r1, r5
 800ec1a:	1d72      	adds	r2, r6, #5
 800ec1c:	0092      	lsls	r2, r2, #2
 800ec1e:	4620      	mov	r0, r4
 800ec20:	f000 fda6 	bl	800f770 <_calloc_r>
 800ec24:	b160      	cbz	r0, 800ec40 <_Balloc+0x64>
 800ec26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ec2a:	e00e      	b.n	800ec4a <_Balloc+0x6e>
 800ec2c:	2221      	movs	r2, #33	; 0x21
 800ec2e:	2104      	movs	r1, #4
 800ec30:	4620      	mov	r0, r4
 800ec32:	f000 fd9d 	bl	800f770 <_calloc_r>
 800ec36:	69e3      	ldr	r3, [r4, #28]
 800ec38:	60f0      	str	r0, [r6, #12]
 800ec3a:	68db      	ldr	r3, [r3, #12]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d1e4      	bne.n	800ec0a <_Balloc+0x2e>
 800ec40:	2000      	movs	r0, #0
 800ec42:	bd70      	pop	{r4, r5, r6, pc}
 800ec44:	6802      	ldr	r2, [r0, #0]
 800ec46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ec50:	e7f7      	b.n	800ec42 <_Balloc+0x66>
 800ec52:	bf00      	nop
 800ec54:	08012089 	.word	0x08012089
 800ec58:	08012109 	.word	0x08012109

0800ec5c <_Bfree>:
 800ec5c:	b570      	push	{r4, r5, r6, lr}
 800ec5e:	69c6      	ldr	r6, [r0, #28]
 800ec60:	4605      	mov	r5, r0
 800ec62:	460c      	mov	r4, r1
 800ec64:	b976      	cbnz	r6, 800ec84 <_Bfree+0x28>
 800ec66:	2010      	movs	r0, #16
 800ec68:	f7ff ff04 	bl	800ea74 <malloc>
 800ec6c:	4602      	mov	r2, r0
 800ec6e:	61e8      	str	r0, [r5, #28]
 800ec70:	b920      	cbnz	r0, 800ec7c <_Bfree+0x20>
 800ec72:	4b09      	ldr	r3, [pc, #36]	; (800ec98 <_Bfree+0x3c>)
 800ec74:	4809      	ldr	r0, [pc, #36]	; (800ec9c <_Bfree+0x40>)
 800ec76:	218f      	movs	r1, #143	; 0x8f
 800ec78:	f000 fd5c 	bl	800f734 <__assert_func>
 800ec7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ec80:	6006      	str	r6, [r0, #0]
 800ec82:	60c6      	str	r6, [r0, #12]
 800ec84:	b13c      	cbz	r4, 800ec96 <_Bfree+0x3a>
 800ec86:	69eb      	ldr	r3, [r5, #28]
 800ec88:	6862      	ldr	r2, [r4, #4]
 800ec8a:	68db      	ldr	r3, [r3, #12]
 800ec8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ec90:	6021      	str	r1, [r4, #0]
 800ec92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ec96:	bd70      	pop	{r4, r5, r6, pc}
 800ec98:	08012089 	.word	0x08012089
 800ec9c:	08012109 	.word	0x08012109

0800eca0 <__multadd>:
 800eca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eca4:	690d      	ldr	r5, [r1, #16]
 800eca6:	4607      	mov	r7, r0
 800eca8:	460c      	mov	r4, r1
 800ecaa:	461e      	mov	r6, r3
 800ecac:	f101 0c14 	add.w	ip, r1, #20
 800ecb0:	2000      	movs	r0, #0
 800ecb2:	f8dc 3000 	ldr.w	r3, [ip]
 800ecb6:	b299      	uxth	r1, r3
 800ecb8:	fb02 6101 	mla	r1, r2, r1, r6
 800ecbc:	0c1e      	lsrs	r6, r3, #16
 800ecbe:	0c0b      	lsrs	r3, r1, #16
 800ecc0:	fb02 3306 	mla	r3, r2, r6, r3
 800ecc4:	b289      	uxth	r1, r1
 800ecc6:	3001      	adds	r0, #1
 800ecc8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800eccc:	4285      	cmp	r5, r0
 800ecce:	f84c 1b04 	str.w	r1, [ip], #4
 800ecd2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ecd6:	dcec      	bgt.n	800ecb2 <__multadd+0x12>
 800ecd8:	b30e      	cbz	r6, 800ed1e <__multadd+0x7e>
 800ecda:	68a3      	ldr	r3, [r4, #8]
 800ecdc:	42ab      	cmp	r3, r5
 800ecde:	dc19      	bgt.n	800ed14 <__multadd+0x74>
 800ece0:	6861      	ldr	r1, [r4, #4]
 800ece2:	4638      	mov	r0, r7
 800ece4:	3101      	adds	r1, #1
 800ece6:	f7ff ff79 	bl	800ebdc <_Balloc>
 800ecea:	4680      	mov	r8, r0
 800ecec:	b928      	cbnz	r0, 800ecfa <__multadd+0x5a>
 800ecee:	4602      	mov	r2, r0
 800ecf0:	4b0c      	ldr	r3, [pc, #48]	; (800ed24 <__multadd+0x84>)
 800ecf2:	480d      	ldr	r0, [pc, #52]	; (800ed28 <__multadd+0x88>)
 800ecf4:	21ba      	movs	r1, #186	; 0xba
 800ecf6:	f000 fd1d 	bl	800f734 <__assert_func>
 800ecfa:	6922      	ldr	r2, [r4, #16]
 800ecfc:	3202      	adds	r2, #2
 800ecfe:	f104 010c 	add.w	r1, r4, #12
 800ed02:	0092      	lsls	r2, r2, #2
 800ed04:	300c      	adds	r0, #12
 800ed06:	f7fe ffde 	bl	800dcc6 <memcpy>
 800ed0a:	4621      	mov	r1, r4
 800ed0c:	4638      	mov	r0, r7
 800ed0e:	f7ff ffa5 	bl	800ec5c <_Bfree>
 800ed12:	4644      	mov	r4, r8
 800ed14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ed18:	3501      	adds	r5, #1
 800ed1a:	615e      	str	r6, [r3, #20]
 800ed1c:	6125      	str	r5, [r4, #16]
 800ed1e:	4620      	mov	r0, r4
 800ed20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed24:	080120f8 	.word	0x080120f8
 800ed28:	08012109 	.word	0x08012109

0800ed2c <__hi0bits>:
 800ed2c:	0c03      	lsrs	r3, r0, #16
 800ed2e:	041b      	lsls	r3, r3, #16
 800ed30:	b9d3      	cbnz	r3, 800ed68 <__hi0bits+0x3c>
 800ed32:	0400      	lsls	r0, r0, #16
 800ed34:	2310      	movs	r3, #16
 800ed36:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ed3a:	bf04      	itt	eq
 800ed3c:	0200      	lsleq	r0, r0, #8
 800ed3e:	3308      	addeq	r3, #8
 800ed40:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ed44:	bf04      	itt	eq
 800ed46:	0100      	lsleq	r0, r0, #4
 800ed48:	3304      	addeq	r3, #4
 800ed4a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ed4e:	bf04      	itt	eq
 800ed50:	0080      	lsleq	r0, r0, #2
 800ed52:	3302      	addeq	r3, #2
 800ed54:	2800      	cmp	r0, #0
 800ed56:	db05      	blt.n	800ed64 <__hi0bits+0x38>
 800ed58:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ed5c:	f103 0301 	add.w	r3, r3, #1
 800ed60:	bf08      	it	eq
 800ed62:	2320      	moveq	r3, #32
 800ed64:	4618      	mov	r0, r3
 800ed66:	4770      	bx	lr
 800ed68:	2300      	movs	r3, #0
 800ed6a:	e7e4      	b.n	800ed36 <__hi0bits+0xa>

0800ed6c <__lo0bits>:
 800ed6c:	6803      	ldr	r3, [r0, #0]
 800ed6e:	f013 0207 	ands.w	r2, r3, #7
 800ed72:	d00c      	beq.n	800ed8e <__lo0bits+0x22>
 800ed74:	07d9      	lsls	r1, r3, #31
 800ed76:	d422      	bmi.n	800edbe <__lo0bits+0x52>
 800ed78:	079a      	lsls	r2, r3, #30
 800ed7a:	bf49      	itett	mi
 800ed7c:	085b      	lsrmi	r3, r3, #1
 800ed7e:	089b      	lsrpl	r3, r3, #2
 800ed80:	6003      	strmi	r3, [r0, #0]
 800ed82:	2201      	movmi	r2, #1
 800ed84:	bf5c      	itt	pl
 800ed86:	6003      	strpl	r3, [r0, #0]
 800ed88:	2202      	movpl	r2, #2
 800ed8a:	4610      	mov	r0, r2
 800ed8c:	4770      	bx	lr
 800ed8e:	b299      	uxth	r1, r3
 800ed90:	b909      	cbnz	r1, 800ed96 <__lo0bits+0x2a>
 800ed92:	0c1b      	lsrs	r3, r3, #16
 800ed94:	2210      	movs	r2, #16
 800ed96:	b2d9      	uxtb	r1, r3
 800ed98:	b909      	cbnz	r1, 800ed9e <__lo0bits+0x32>
 800ed9a:	3208      	adds	r2, #8
 800ed9c:	0a1b      	lsrs	r3, r3, #8
 800ed9e:	0719      	lsls	r1, r3, #28
 800eda0:	bf04      	itt	eq
 800eda2:	091b      	lsreq	r3, r3, #4
 800eda4:	3204      	addeq	r2, #4
 800eda6:	0799      	lsls	r1, r3, #30
 800eda8:	bf04      	itt	eq
 800edaa:	089b      	lsreq	r3, r3, #2
 800edac:	3202      	addeq	r2, #2
 800edae:	07d9      	lsls	r1, r3, #31
 800edb0:	d403      	bmi.n	800edba <__lo0bits+0x4e>
 800edb2:	085b      	lsrs	r3, r3, #1
 800edb4:	f102 0201 	add.w	r2, r2, #1
 800edb8:	d003      	beq.n	800edc2 <__lo0bits+0x56>
 800edba:	6003      	str	r3, [r0, #0]
 800edbc:	e7e5      	b.n	800ed8a <__lo0bits+0x1e>
 800edbe:	2200      	movs	r2, #0
 800edc0:	e7e3      	b.n	800ed8a <__lo0bits+0x1e>
 800edc2:	2220      	movs	r2, #32
 800edc4:	e7e1      	b.n	800ed8a <__lo0bits+0x1e>
	...

0800edc8 <__i2b>:
 800edc8:	b510      	push	{r4, lr}
 800edca:	460c      	mov	r4, r1
 800edcc:	2101      	movs	r1, #1
 800edce:	f7ff ff05 	bl	800ebdc <_Balloc>
 800edd2:	4602      	mov	r2, r0
 800edd4:	b928      	cbnz	r0, 800ede2 <__i2b+0x1a>
 800edd6:	4b05      	ldr	r3, [pc, #20]	; (800edec <__i2b+0x24>)
 800edd8:	4805      	ldr	r0, [pc, #20]	; (800edf0 <__i2b+0x28>)
 800edda:	f240 1145 	movw	r1, #325	; 0x145
 800edde:	f000 fca9 	bl	800f734 <__assert_func>
 800ede2:	2301      	movs	r3, #1
 800ede4:	6144      	str	r4, [r0, #20]
 800ede6:	6103      	str	r3, [r0, #16]
 800ede8:	bd10      	pop	{r4, pc}
 800edea:	bf00      	nop
 800edec:	080120f8 	.word	0x080120f8
 800edf0:	08012109 	.word	0x08012109

0800edf4 <__multiply>:
 800edf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edf8:	4691      	mov	r9, r2
 800edfa:	690a      	ldr	r2, [r1, #16]
 800edfc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ee00:	429a      	cmp	r2, r3
 800ee02:	bfb8      	it	lt
 800ee04:	460b      	movlt	r3, r1
 800ee06:	460c      	mov	r4, r1
 800ee08:	bfbc      	itt	lt
 800ee0a:	464c      	movlt	r4, r9
 800ee0c:	4699      	movlt	r9, r3
 800ee0e:	6927      	ldr	r7, [r4, #16]
 800ee10:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ee14:	68a3      	ldr	r3, [r4, #8]
 800ee16:	6861      	ldr	r1, [r4, #4]
 800ee18:	eb07 060a 	add.w	r6, r7, sl
 800ee1c:	42b3      	cmp	r3, r6
 800ee1e:	b085      	sub	sp, #20
 800ee20:	bfb8      	it	lt
 800ee22:	3101      	addlt	r1, #1
 800ee24:	f7ff feda 	bl	800ebdc <_Balloc>
 800ee28:	b930      	cbnz	r0, 800ee38 <__multiply+0x44>
 800ee2a:	4602      	mov	r2, r0
 800ee2c:	4b44      	ldr	r3, [pc, #272]	; (800ef40 <__multiply+0x14c>)
 800ee2e:	4845      	ldr	r0, [pc, #276]	; (800ef44 <__multiply+0x150>)
 800ee30:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ee34:	f000 fc7e 	bl	800f734 <__assert_func>
 800ee38:	f100 0514 	add.w	r5, r0, #20
 800ee3c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ee40:	462b      	mov	r3, r5
 800ee42:	2200      	movs	r2, #0
 800ee44:	4543      	cmp	r3, r8
 800ee46:	d321      	bcc.n	800ee8c <__multiply+0x98>
 800ee48:	f104 0314 	add.w	r3, r4, #20
 800ee4c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ee50:	f109 0314 	add.w	r3, r9, #20
 800ee54:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ee58:	9202      	str	r2, [sp, #8]
 800ee5a:	1b3a      	subs	r2, r7, r4
 800ee5c:	3a15      	subs	r2, #21
 800ee5e:	f022 0203 	bic.w	r2, r2, #3
 800ee62:	3204      	adds	r2, #4
 800ee64:	f104 0115 	add.w	r1, r4, #21
 800ee68:	428f      	cmp	r7, r1
 800ee6a:	bf38      	it	cc
 800ee6c:	2204      	movcc	r2, #4
 800ee6e:	9201      	str	r2, [sp, #4]
 800ee70:	9a02      	ldr	r2, [sp, #8]
 800ee72:	9303      	str	r3, [sp, #12]
 800ee74:	429a      	cmp	r2, r3
 800ee76:	d80c      	bhi.n	800ee92 <__multiply+0x9e>
 800ee78:	2e00      	cmp	r6, #0
 800ee7a:	dd03      	ble.n	800ee84 <__multiply+0x90>
 800ee7c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d05b      	beq.n	800ef3c <__multiply+0x148>
 800ee84:	6106      	str	r6, [r0, #16]
 800ee86:	b005      	add	sp, #20
 800ee88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee8c:	f843 2b04 	str.w	r2, [r3], #4
 800ee90:	e7d8      	b.n	800ee44 <__multiply+0x50>
 800ee92:	f8b3 a000 	ldrh.w	sl, [r3]
 800ee96:	f1ba 0f00 	cmp.w	sl, #0
 800ee9a:	d024      	beq.n	800eee6 <__multiply+0xf2>
 800ee9c:	f104 0e14 	add.w	lr, r4, #20
 800eea0:	46a9      	mov	r9, r5
 800eea2:	f04f 0c00 	mov.w	ip, #0
 800eea6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800eeaa:	f8d9 1000 	ldr.w	r1, [r9]
 800eeae:	fa1f fb82 	uxth.w	fp, r2
 800eeb2:	b289      	uxth	r1, r1
 800eeb4:	fb0a 110b 	mla	r1, sl, fp, r1
 800eeb8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800eebc:	f8d9 2000 	ldr.w	r2, [r9]
 800eec0:	4461      	add	r1, ip
 800eec2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800eec6:	fb0a c20b 	mla	r2, sl, fp, ip
 800eeca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800eece:	b289      	uxth	r1, r1
 800eed0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800eed4:	4577      	cmp	r7, lr
 800eed6:	f849 1b04 	str.w	r1, [r9], #4
 800eeda:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800eede:	d8e2      	bhi.n	800eea6 <__multiply+0xb2>
 800eee0:	9a01      	ldr	r2, [sp, #4]
 800eee2:	f845 c002 	str.w	ip, [r5, r2]
 800eee6:	9a03      	ldr	r2, [sp, #12]
 800eee8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800eeec:	3304      	adds	r3, #4
 800eeee:	f1b9 0f00 	cmp.w	r9, #0
 800eef2:	d021      	beq.n	800ef38 <__multiply+0x144>
 800eef4:	6829      	ldr	r1, [r5, #0]
 800eef6:	f104 0c14 	add.w	ip, r4, #20
 800eefa:	46ae      	mov	lr, r5
 800eefc:	f04f 0a00 	mov.w	sl, #0
 800ef00:	f8bc b000 	ldrh.w	fp, [ip]
 800ef04:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ef08:	fb09 220b 	mla	r2, r9, fp, r2
 800ef0c:	4452      	add	r2, sl
 800ef0e:	b289      	uxth	r1, r1
 800ef10:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ef14:	f84e 1b04 	str.w	r1, [lr], #4
 800ef18:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ef1c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ef20:	f8be 1000 	ldrh.w	r1, [lr]
 800ef24:	fb09 110a 	mla	r1, r9, sl, r1
 800ef28:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ef2c:	4567      	cmp	r7, ip
 800ef2e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ef32:	d8e5      	bhi.n	800ef00 <__multiply+0x10c>
 800ef34:	9a01      	ldr	r2, [sp, #4]
 800ef36:	50a9      	str	r1, [r5, r2]
 800ef38:	3504      	adds	r5, #4
 800ef3a:	e799      	b.n	800ee70 <__multiply+0x7c>
 800ef3c:	3e01      	subs	r6, #1
 800ef3e:	e79b      	b.n	800ee78 <__multiply+0x84>
 800ef40:	080120f8 	.word	0x080120f8
 800ef44:	08012109 	.word	0x08012109

0800ef48 <__pow5mult>:
 800ef48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef4c:	4615      	mov	r5, r2
 800ef4e:	f012 0203 	ands.w	r2, r2, #3
 800ef52:	4606      	mov	r6, r0
 800ef54:	460f      	mov	r7, r1
 800ef56:	d007      	beq.n	800ef68 <__pow5mult+0x20>
 800ef58:	4c25      	ldr	r4, [pc, #148]	; (800eff0 <__pow5mult+0xa8>)
 800ef5a:	3a01      	subs	r2, #1
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ef62:	f7ff fe9d 	bl	800eca0 <__multadd>
 800ef66:	4607      	mov	r7, r0
 800ef68:	10ad      	asrs	r5, r5, #2
 800ef6a:	d03d      	beq.n	800efe8 <__pow5mult+0xa0>
 800ef6c:	69f4      	ldr	r4, [r6, #28]
 800ef6e:	b97c      	cbnz	r4, 800ef90 <__pow5mult+0x48>
 800ef70:	2010      	movs	r0, #16
 800ef72:	f7ff fd7f 	bl	800ea74 <malloc>
 800ef76:	4602      	mov	r2, r0
 800ef78:	61f0      	str	r0, [r6, #28]
 800ef7a:	b928      	cbnz	r0, 800ef88 <__pow5mult+0x40>
 800ef7c:	4b1d      	ldr	r3, [pc, #116]	; (800eff4 <__pow5mult+0xac>)
 800ef7e:	481e      	ldr	r0, [pc, #120]	; (800eff8 <__pow5mult+0xb0>)
 800ef80:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ef84:	f000 fbd6 	bl	800f734 <__assert_func>
 800ef88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ef8c:	6004      	str	r4, [r0, #0]
 800ef8e:	60c4      	str	r4, [r0, #12]
 800ef90:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ef94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ef98:	b94c      	cbnz	r4, 800efae <__pow5mult+0x66>
 800ef9a:	f240 2171 	movw	r1, #625	; 0x271
 800ef9e:	4630      	mov	r0, r6
 800efa0:	f7ff ff12 	bl	800edc8 <__i2b>
 800efa4:	2300      	movs	r3, #0
 800efa6:	f8c8 0008 	str.w	r0, [r8, #8]
 800efaa:	4604      	mov	r4, r0
 800efac:	6003      	str	r3, [r0, #0]
 800efae:	f04f 0900 	mov.w	r9, #0
 800efb2:	07eb      	lsls	r3, r5, #31
 800efb4:	d50a      	bpl.n	800efcc <__pow5mult+0x84>
 800efb6:	4639      	mov	r1, r7
 800efb8:	4622      	mov	r2, r4
 800efba:	4630      	mov	r0, r6
 800efbc:	f7ff ff1a 	bl	800edf4 <__multiply>
 800efc0:	4639      	mov	r1, r7
 800efc2:	4680      	mov	r8, r0
 800efc4:	4630      	mov	r0, r6
 800efc6:	f7ff fe49 	bl	800ec5c <_Bfree>
 800efca:	4647      	mov	r7, r8
 800efcc:	106d      	asrs	r5, r5, #1
 800efce:	d00b      	beq.n	800efe8 <__pow5mult+0xa0>
 800efd0:	6820      	ldr	r0, [r4, #0]
 800efd2:	b938      	cbnz	r0, 800efe4 <__pow5mult+0x9c>
 800efd4:	4622      	mov	r2, r4
 800efd6:	4621      	mov	r1, r4
 800efd8:	4630      	mov	r0, r6
 800efda:	f7ff ff0b 	bl	800edf4 <__multiply>
 800efde:	6020      	str	r0, [r4, #0]
 800efe0:	f8c0 9000 	str.w	r9, [r0]
 800efe4:	4604      	mov	r4, r0
 800efe6:	e7e4      	b.n	800efb2 <__pow5mult+0x6a>
 800efe8:	4638      	mov	r0, r7
 800efea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800efee:	bf00      	nop
 800eff0:	08012258 	.word	0x08012258
 800eff4:	08012089 	.word	0x08012089
 800eff8:	08012109 	.word	0x08012109

0800effc <__lshift>:
 800effc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f000:	460c      	mov	r4, r1
 800f002:	6849      	ldr	r1, [r1, #4]
 800f004:	6923      	ldr	r3, [r4, #16]
 800f006:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f00a:	68a3      	ldr	r3, [r4, #8]
 800f00c:	4607      	mov	r7, r0
 800f00e:	4691      	mov	r9, r2
 800f010:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f014:	f108 0601 	add.w	r6, r8, #1
 800f018:	42b3      	cmp	r3, r6
 800f01a:	db0b      	blt.n	800f034 <__lshift+0x38>
 800f01c:	4638      	mov	r0, r7
 800f01e:	f7ff fddd 	bl	800ebdc <_Balloc>
 800f022:	4605      	mov	r5, r0
 800f024:	b948      	cbnz	r0, 800f03a <__lshift+0x3e>
 800f026:	4602      	mov	r2, r0
 800f028:	4b28      	ldr	r3, [pc, #160]	; (800f0cc <__lshift+0xd0>)
 800f02a:	4829      	ldr	r0, [pc, #164]	; (800f0d0 <__lshift+0xd4>)
 800f02c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800f030:	f000 fb80 	bl	800f734 <__assert_func>
 800f034:	3101      	adds	r1, #1
 800f036:	005b      	lsls	r3, r3, #1
 800f038:	e7ee      	b.n	800f018 <__lshift+0x1c>
 800f03a:	2300      	movs	r3, #0
 800f03c:	f100 0114 	add.w	r1, r0, #20
 800f040:	f100 0210 	add.w	r2, r0, #16
 800f044:	4618      	mov	r0, r3
 800f046:	4553      	cmp	r3, sl
 800f048:	db33      	blt.n	800f0b2 <__lshift+0xb6>
 800f04a:	6920      	ldr	r0, [r4, #16]
 800f04c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f050:	f104 0314 	add.w	r3, r4, #20
 800f054:	f019 091f 	ands.w	r9, r9, #31
 800f058:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f05c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f060:	d02b      	beq.n	800f0ba <__lshift+0xbe>
 800f062:	f1c9 0e20 	rsb	lr, r9, #32
 800f066:	468a      	mov	sl, r1
 800f068:	2200      	movs	r2, #0
 800f06a:	6818      	ldr	r0, [r3, #0]
 800f06c:	fa00 f009 	lsl.w	r0, r0, r9
 800f070:	4310      	orrs	r0, r2
 800f072:	f84a 0b04 	str.w	r0, [sl], #4
 800f076:	f853 2b04 	ldr.w	r2, [r3], #4
 800f07a:	459c      	cmp	ip, r3
 800f07c:	fa22 f20e 	lsr.w	r2, r2, lr
 800f080:	d8f3      	bhi.n	800f06a <__lshift+0x6e>
 800f082:	ebac 0304 	sub.w	r3, ip, r4
 800f086:	3b15      	subs	r3, #21
 800f088:	f023 0303 	bic.w	r3, r3, #3
 800f08c:	3304      	adds	r3, #4
 800f08e:	f104 0015 	add.w	r0, r4, #21
 800f092:	4584      	cmp	ip, r0
 800f094:	bf38      	it	cc
 800f096:	2304      	movcc	r3, #4
 800f098:	50ca      	str	r2, [r1, r3]
 800f09a:	b10a      	cbz	r2, 800f0a0 <__lshift+0xa4>
 800f09c:	f108 0602 	add.w	r6, r8, #2
 800f0a0:	3e01      	subs	r6, #1
 800f0a2:	4638      	mov	r0, r7
 800f0a4:	612e      	str	r6, [r5, #16]
 800f0a6:	4621      	mov	r1, r4
 800f0a8:	f7ff fdd8 	bl	800ec5c <_Bfree>
 800f0ac:	4628      	mov	r0, r5
 800f0ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0b2:	f842 0f04 	str.w	r0, [r2, #4]!
 800f0b6:	3301      	adds	r3, #1
 800f0b8:	e7c5      	b.n	800f046 <__lshift+0x4a>
 800f0ba:	3904      	subs	r1, #4
 800f0bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800f0c0:	f841 2f04 	str.w	r2, [r1, #4]!
 800f0c4:	459c      	cmp	ip, r3
 800f0c6:	d8f9      	bhi.n	800f0bc <__lshift+0xc0>
 800f0c8:	e7ea      	b.n	800f0a0 <__lshift+0xa4>
 800f0ca:	bf00      	nop
 800f0cc:	080120f8 	.word	0x080120f8
 800f0d0:	08012109 	.word	0x08012109

0800f0d4 <__mcmp>:
 800f0d4:	b530      	push	{r4, r5, lr}
 800f0d6:	6902      	ldr	r2, [r0, #16]
 800f0d8:	690c      	ldr	r4, [r1, #16]
 800f0da:	1b12      	subs	r2, r2, r4
 800f0dc:	d10e      	bne.n	800f0fc <__mcmp+0x28>
 800f0de:	f100 0314 	add.w	r3, r0, #20
 800f0e2:	3114      	adds	r1, #20
 800f0e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f0e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f0ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f0f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f0f4:	42a5      	cmp	r5, r4
 800f0f6:	d003      	beq.n	800f100 <__mcmp+0x2c>
 800f0f8:	d305      	bcc.n	800f106 <__mcmp+0x32>
 800f0fa:	2201      	movs	r2, #1
 800f0fc:	4610      	mov	r0, r2
 800f0fe:	bd30      	pop	{r4, r5, pc}
 800f100:	4283      	cmp	r3, r0
 800f102:	d3f3      	bcc.n	800f0ec <__mcmp+0x18>
 800f104:	e7fa      	b.n	800f0fc <__mcmp+0x28>
 800f106:	f04f 32ff 	mov.w	r2, #4294967295
 800f10a:	e7f7      	b.n	800f0fc <__mcmp+0x28>

0800f10c <__mdiff>:
 800f10c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f110:	460c      	mov	r4, r1
 800f112:	4606      	mov	r6, r0
 800f114:	4611      	mov	r1, r2
 800f116:	4620      	mov	r0, r4
 800f118:	4690      	mov	r8, r2
 800f11a:	f7ff ffdb 	bl	800f0d4 <__mcmp>
 800f11e:	1e05      	subs	r5, r0, #0
 800f120:	d110      	bne.n	800f144 <__mdiff+0x38>
 800f122:	4629      	mov	r1, r5
 800f124:	4630      	mov	r0, r6
 800f126:	f7ff fd59 	bl	800ebdc <_Balloc>
 800f12a:	b930      	cbnz	r0, 800f13a <__mdiff+0x2e>
 800f12c:	4b3a      	ldr	r3, [pc, #232]	; (800f218 <__mdiff+0x10c>)
 800f12e:	4602      	mov	r2, r0
 800f130:	f240 2137 	movw	r1, #567	; 0x237
 800f134:	4839      	ldr	r0, [pc, #228]	; (800f21c <__mdiff+0x110>)
 800f136:	f000 fafd 	bl	800f734 <__assert_func>
 800f13a:	2301      	movs	r3, #1
 800f13c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f140:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f144:	bfa4      	itt	ge
 800f146:	4643      	movge	r3, r8
 800f148:	46a0      	movge	r8, r4
 800f14a:	4630      	mov	r0, r6
 800f14c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f150:	bfa6      	itte	ge
 800f152:	461c      	movge	r4, r3
 800f154:	2500      	movge	r5, #0
 800f156:	2501      	movlt	r5, #1
 800f158:	f7ff fd40 	bl	800ebdc <_Balloc>
 800f15c:	b920      	cbnz	r0, 800f168 <__mdiff+0x5c>
 800f15e:	4b2e      	ldr	r3, [pc, #184]	; (800f218 <__mdiff+0x10c>)
 800f160:	4602      	mov	r2, r0
 800f162:	f240 2145 	movw	r1, #581	; 0x245
 800f166:	e7e5      	b.n	800f134 <__mdiff+0x28>
 800f168:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f16c:	6926      	ldr	r6, [r4, #16]
 800f16e:	60c5      	str	r5, [r0, #12]
 800f170:	f104 0914 	add.w	r9, r4, #20
 800f174:	f108 0514 	add.w	r5, r8, #20
 800f178:	f100 0e14 	add.w	lr, r0, #20
 800f17c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f180:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f184:	f108 0210 	add.w	r2, r8, #16
 800f188:	46f2      	mov	sl, lr
 800f18a:	2100      	movs	r1, #0
 800f18c:	f859 3b04 	ldr.w	r3, [r9], #4
 800f190:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f194:	fa11 f88b 	uxtah	r8, r1, fp
 800f198:	b299      	uxth	r1, r3
 800f19a:	0c1b      	lsrs	r3, r3, #16
 800f19c:	eba8 0801 	sub.w	r8, r8, r1
 800f1a0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f1a4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f1a8:	fa1f f888 	uxth.w	r8, r8
 800f1ac:	1419      	asrs	r1, r3, #16
 800f1ae:	454e      	cmp	r6, r9
 800f1b0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f1b4:	f84a 3b04 	str.w	r3, [sl], #4
 800f1b8:	d8e8      	bhi.n	800f18c <__mdiff+0x80>
 800f1ba:	1b33      	subs	r3, r6, r4
 800f1bc:	3b15      	subs	r3, #21
 800f1be:	f023 0303 	bic.w	r3, r3, #3
 800f1c2:	3304      	adds	r3, #4
 800f1c4:	3415      	adds	r4, #21
 800f1c6:	42a6      	cmp	r6, r4
 800f1c8:	bf38      	it	cc
 800f1ca:	2304      	movcc	r3, #4
 800f1cc:	441d      	add	r5, r3
 800f1ce:	4473      	add	r3, lr
 800f1d0:	469e      	mov	lr, r3
 800f1d2:	462e      	mov	r6, r5
 800f1d4:	4566      	cmp	r6, ip
 800f1d6:	d30e      	bcc.n	800f1f6 <__mdiff+0xea>
 800f1d8:	f10c 0203 	add.w	r2, ip, #3
 800f1dc:	1b52      	subs	r2, r2, r5
 800f1de:	f022 0203 	bic.w	r2, r2, #3
 800f1e2:	3d03      	subs	r5, #3
 800f1e4:	45ac      	cmp	ip, r5
 800f1e6:	bf38      	it	cc
 800f1e8:	2200      	movcc	r2, #0
 800f1ea:	4413      	add	r3, r2
 800f1ec:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f1f0:	b17a      	cbz	r2, 800f212 <__mdiff+0x106>
 800f1f2:	6107      	str	r7, [r0, #16]
 800f1f4:	e7a4      	b.n	800f140 <__mdiff+0x34>
 800f1f6:	f856 8b04 	ldr.w	r8, [r6], #4
 800f1fa:	fa11 f288 	uxtah	r2, r1, r8
 800f1fe:	1414      	asrs	r4, r2, #16
 800f200:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f204:	b292      	uxth	r2, r2
 800f206:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f20a:	f84e 2b04 	str.w	r2, [lr], #4
 800f20e:	1421      	asrs	r1, r4, #16
 800f210:	e7e0      	b.n	800f1d4 <__mdiff+0xc8>
 800f212:	3f01      	subs	r7, #1
 800f214:	e7ea      	b.n	800f1ec <__mdiff+0xe0>
 800f216:	bf00      	nop
 800f218:	080120f8 	.word	0x080120f8
 800f21c:	08012109 	.word	0x08012109

0800f220 <__d2b>:
 800f220:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f224:	460f      	mov	r7, r1
 800f226:	2101      	movs	r1, #1
 800f228:	ec59 8b10 	vmov	r8, r9, d0
 800f22c:	4616      	mov	r6, r2
 800f22e:	f7ff fcd5 	bl	800ebdc <_Balloc>
 800f232:	4604      	mov	r4, r0
 800f234:	b930      	cbnz	r0, 800f244 <__d2b+0x24>
 800f236:	4602      	mov	r2, r0
 800f238:	4b24      	ldr	r3, [pc, #144]	; (800f2cc <__d2b+0xac>)
 800f23a:	4825      	ldr	r0, [pc, #148]	; (800f2d0 <__d2b+0xb0>)
 800f23c:	f240 310f 	movw	r1, #783	; 0x30f
 800f240:	f000 fa78 	bl	800f734 <__assert_func>
 800f244:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f248:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f24c:	bb2d      	cbnz	r5, 800f29a <__d2b+0x7a>
 800f24e:	9301      	str	r3, [sp, #4]
 800f250:	f1b8 0300 	subs.w	r3, r8, #0
 800f254:	d026      	beq.n	800f2a4 <__d2b+0x84>
 800f256:	4668      	mov	r0, sp
 800f258:	9300      	str	r3, [sp, #0]
 800f25a:	f7ff fd87 	bl	800ed6c <__lo0bits>
 800f25e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f262:	b1e8      	cbz	r0, 800f2a0 <__d2b+0x80>
 800f264:	f1c0 0320 	rsb	r3, r0, #32
 800f268:	fa02 f303 	lsl.w	r3, r2, r3
 800f26c:	430b      	orrs	r3, r1
 800f26e:	40c2      	lsrs	r2, r0
 800f270:	6163      	str	r3, [r4, #20]
 800f272:	9201      	str	r2, [sp, #4]
 800f274:	9b01      	ldr	r3, [sp, #4]
 800f276:	61a3      	str	r3, [r4, #24]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	bf14      	ite	ne
 800f27c:	2202      	movne	r2, #2
 800f27e:	2201      	moveq	r2, #1
 800f280:	6122      	str	r2, [r4, #16]
 800f282:	b1bd      	cbz	r5, 800f2b4 <__d2b+0x94>
 800f284:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f288:	4405      	add	r5, r0
 800f28a:	603d      	str	r5, [r7, #0]
 800f28c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f290:	6030      	str	r0, [r6, #0]
 800f292:	4620      	mov	r0, r4
 800f294:	b003      	add	sp, #12
 800f296:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f29a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f29e:	e7d6      	b.n	800f24e <__d2b+0x2e>
 800f2a0:	6161      	str	r1, [r4, #20]
 800f2a2:	e7e7      	b.n	800f274 <__d2b+0x54>
 800f2a4:	a801      	add	r0, sp, #4
 800f2a6:	f7ff fd61 	bl	800ed6c <__lo0bits>
 800f2aa:	9b01      	ldr	r3, [sp, #4]
 800f2ac:	6163      	str	r3, [r4, #20]
 800f2ae:	3020      	adds	r0, #32
 800f2b0:	2201      	movs	r2, #1
 800f2b2:	e7e5      	b.n	800f280 <__d2b+0x60>
 800f2b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f2b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f2bc:	6038      	str	r0, [r7, #0]
 800f2be:	6918      	ldr	r0, [r3, #16]
 800f2c0:	f7ff fd34 	bl	800ed2c <__hi0bits>
 800f2c4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f2c8:	e7e2      	b.n	800f290 <__d2b+0x70>
 800f2ca:	bf00      	nop
 800f2cc:	080120f8 	.word	0x080120f8
 800f2d0:	08012109 	.word	0x08012109

0800f2d4 <__ssputs_r>:
 800f2d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2d8:	688e      	ldr	r6, [r1, #8]
 800f2da:	461f      	mov	r7, r3
 800f2dc:	42be      	cmp	r6, r7
 800f2de:	680b      	ldr	r3, [r1, #0]
 800f2e0:	4682      	mov	sl, r0
 800f2e2:	460c      	mov	r4, r1
 800f2e4:	4690      	mov	r8, r2
 800f2e6:	d82c      	bhi.n	800f342 <__ssputs_r+0x6e>
 800f2e8:	898a      	ldrh	r2, [r1, #12]
 800f2ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f2ee:	d026      	beq.n	800f33e <__ssputs_r+0x6a>
 800f2f0:	6965      	ldr	r5, [r4, #20]
 800f2f2:	6909      	ldr	r1, [r1, #16]
 800f2f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f2f8:	eba3 0901 	sub.w	r9, r3, r1
 800f2fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f300:	1c7b      	adds	r3, r7, #1
 800f302:	444b      	add	r3, r9
 800f304:	106d      	asrs	r5, r5, #1
 800f306:	429d      	cmp	r5, r3
 800f308:	bf38      	it	cc
 800f30a:	461d      	movcc	r5, r3
 800f30c:	0553      	lsls	r3, r2, #21
 800f30e:	d527      	bpl.n	800f360 <__ssputs_r+0x8c>
 800f310:	4629      	mov	r1, r5
 800f312:	f7ff fbd7 	bl	800eac4 <_malloc_r>
 800f316:	4606      	mov	r6, r0
 800f318:	b360      	cbz	r0, 800f374 <__ssputs_r+0xa0>
 800f31a:	6921      	ldr	r1, [r4, #16]
 800f31c:	464a      	mov	r2, r9
 800f31e:	f7fe fcd2 	bl	800dcc6 <memcpy>
 800f322:	89a3      	ldrh	r3, [r4, #12]
 800f324:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f32c:	81a3      	strh	r3, [r4, #12]
 800f32e:	6126      	str	r6, [r4, #16]
 800f330:	6165      	str	r5, [r4, #20]
 800f332:	444e      	add	r6, r9
 800f334:	eba5 0509 	sub.w	r5, r5, r9
 800f338:	6026      	str	r6, [r4, #0]
 800f33a:	60a5      	str	r5, [r4, #8]
 800f33c:	463e      	mov	r6, r7
 800f33e:	42be      	cmp	r6, r7
 800f340:	d900      	bls.n	800f344 <__ssputs_r+0x70>
 800f342:	463e      	mov	r6, r7
 800f344:	6820      	ldr	r0, [r4, #0]
 800f346:	4632      	mov	r2, r6
 800f348:	4641      	mov	r1, r8
 800f34a:	f000 f9c9 	bl	800f6e0 <memmove>
 800f34e:	68a3      	ldr	r3, [r4, #8]
 800f350:	1b9b      	subs	r3, r3, r6
 800f352:	60a3      	str	r3, [r4, #8]
 800f354:	6823      	ldr	r3, [r4, #0]
 800f356:	4433      	add	r3, r6
 800f358:	6023      	str	r3, [r4, #0]
 800f35a:	2000      	movs	r0, #0
 800f35c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f360:	462a      	mov	r2, r5
 800f362:	f000 fa2d 	bl	800f7c0 <_realloc_r>
 800f366:	4606      	mov	r6, r0
 800f368:	2800      	cmp	r0, #0
 800f36a:	d1e0      	bne.n	800f32e <__ssputs_r+0x5a>
 800f36c:	6921      	ldr	r1, [r4, #16]
 800f36e:	4650      	mov	r0, sl
 800f370:	f7ff fb34 	bl	800e9dc <_free_r>
 800f374:	230c      	movs	r3, #12
 800f376:	f8ca 3000 	str.w	r3, [sl]
 800f37a:	89a3      	ldrh	r3, [r4, #12]
 800f37c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f380:	81a3      	strh	r3, [r4, #12]
 800f382:	f04f 30ff 	mov.w	r0, #4294967295
 800f386:	e7e9      	b.n	800f35c <__ssputs_r+0x88>

0800f388 <_svfiprintf_r>:
 800f388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f38c:	4698      	mov	r8, r3
 800f38e:	898b      	ldrh	r3, [r1, #12]
 800f390:	061b      	lsls	r3, r3, #24
 800f392:	b09d      	sub	sp, #116	; 0x74
 800f394:	4607      	mov	r7, r0
 800f396:	460d      	mov	r5, r1
 800f398:	4614      	mov	r4, r2
 800f39a:	d50e      	bpl.n	800f3ba <_svfiprintf_r+0x32>
 800f39c:	690b      	ldr	r3, [r1, #16]
 800f39e:	b963      	cbnz	r3, 800f3ba <_svfiprintf_r+0x32>
 800f3a0:	2140      	movs	r1, #64	; 0x40
 800f3a2:	f7ff fb8f 	bl	800eac4 <_malloc_r>
 800f3a6:	6028      	str	r0, [r5, #0]
 800f3a8:	6128      	str	r0, [r5, #16]
 800f3aa:	b920      	cbnz	r0, 800f3b6 <_svfiprintf_r+0x2e>
 800f3ac:	230c      	movs	r3, #12
 800f3ae:	603b      	str	r3, [r7, #0]
 800f3b0:	f04f 30ff 	mov.w	r0, #4294967295
 800f3b4:	e0d0      	b.n	800f558 <_svfiprintf_r+0x1d0>
 800f3b6:	2340      	movs	r3, #64	; 0x40
 800f3b8:	616b      	str	r3, [r5, #20]
 800f3ba:	2300      	movs	r3, #0
 800f3bc:	9309      	str	r3, [sp, #36]	; 0x24
 800f3be:	2320      	movs	r3, #32
 800f3c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f3c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800f3c8:	2330      	movs	r3, #48	; 0x30
 800f3ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f570 <_svfiprintf_r+0x1e8>
 800f3ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f3d2:	f04f 0901 	mov.w	r9, #1
 800f3d6:	4623      	mov	r3, r4
 800f3d8:	469a      	mov	sl, r3
 800f3da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f3de:	b10a      	cbz	r2, 800f3e4 <_svfiprintf_r+0x5c>
 800f3e0:	2a25      	cmp	r2, #37	; 0x25
 800f3e2:	d1f9      	bne.n	800f3d8 <_svfiprintf_r+0x50>
 800f3e4:	ebba 0b04 	subs.w	fp, sl, r4
 800f3e8:	d00b      	beq.n	800f402 <_svfiprintf_r+0x7a>
 800f3ea:	465b      	mov	r3, fp
 800f3ec:	4622      	mov	r2, r4
 800f3ee:	4629      	mov	r1, r5
 800f3f0:	4638      	mov	r0, r7
 800f3f2:	f7ff ff6f 	bl	800f2d4 <__ssputs_r>
 800f3f6:	3001      	adds	r0, #1
 800f3f8:	f000 80a9 	beq.w	800f54e <_svfiprintf_r+0x1c6>
 800f3fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f3fe:	445a      	add	r2, fp
 800f400:	9209      	str	r2, [sp, #36]	; 0x24
 800f402:	f89a 3000 	ldrb.w	r3, [sl]
 800f406:	2b00      	cmp	r3, #0
 800f408:	f000 80a1 	beq.w	800f54e <_svfiprintf_r+0x1c6>
 800f40c:	2300      	movs	r3, #0
 800f40e:	f04f 32ff 	mov.w	r2, #4294967295
 800f412:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f416:	f10a 0a01 	add.w	sl, sl, #1
 800f41a:	9304      	str	r3, [sp, #16]
 800f41c:	9307      	str	r3, [sp, #28]
 800f41e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f422:	931a      	str	r3, [sp, #104]	; 0x68
 800f424:	4654      	mov	r4, sl
 800f426:	2205      	movs	r2, #5
 800f428:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f42c:	4850      	ldr	r0, [pc, #320]	; (800f570 <_svfiprintf_r+0x1e8>)
 800f42e:	f7f0 fef7 	bl	8000220 <memchr>
 800f432:	9a04      	ldr	r2, [sp, #16]
 800f434:	b9d8      	cbnz	r0, 800f46e <_svfiprintf_r+0xe6>
 800f436:	06d0      	lsls	r0, r2, #27
 800f438:	bf44      	itt	mi
 800f43a:	2320      	movmi	r3, #32
 800f43c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f440:	0711      	lsls	r1, r2, #28
 800f442:	bf44      	itt	mi
 800f444:	232b      	movmi	r3, #43	; 0x2b
 800f446:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f44a:	f89a 3000 	ldrb.w	r3, [sl]
 800f44e:	2b2a      	cmp	r3, #42	; 0x2a
 800f450:	d015      	beq.n	800f47e <_svfiprintf_r+0xf6>
 800f452:	9a07      	ldr	r2, [sp, #28]
 800f454:	4654      	mov	r4, sl
 800f456:	2000      	movs	r0, #0
 800f458:	f04f 0c0a 	mov.w	ip, #10
 800f45c:	4621      	mov	r1, r4
 800f45e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f462:	3b30      	subs	r3, #48	; 0x30
 800f464:	2b09      	cmp	r3, #9
 800f466:	d94d      	bls.n	800f504 <_svfiprintf_r+0x17c>
 800f468:	b1b0      	cbz	r0, 800f498 <_svfiprintf_r+0x110>
 800f46a:	9207      	str	r2, [sp, #28]
 800f46c:	e014      	b.n	800f498 <_svfiprintf_r+0x110>
 800f46e:	eba0 0308 	sub.w	r3, r0, r8
 800f472:	fa09 f303 	lsl.w	r3, r9, r3
 800f476:	4313      	orrs	r3, r2
 800f478:	9304      	str	r3, [sp, #16]
 800f47a:	46a2      	mov	sl, r4
 800f47c:	e7d2      	b.n	800f424 <_svfiprintf_r+0x9c>
 800f47e:	9b03      	ldr	r3, [sp, #12]
 800f480:	1d19      	adds	r1, r3, #4
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	9103      	str	r1, [sp, #12]
 800f486:	2b00      	cmp	r3, #0
 800f488:	bfbb      	ittet	lt
 800f48a:	425b      	neglt	r3, r3
 800f48c:	f042 0202 	orrlt.w	r2, r2, #2
 800f490:	9307      	strge	r3, [sp, #28]
 800f492:	9307      	strlt	r3, [sp, #28]
 800f494:	bfb8      	it	lt
 800f496:	9204      	strlt	r2, [sp, #16]
 800f498:	7823      	ldrb	r3, [r4, #0]
 800f49a:	2b2e      	cmp	r3, #46	; 0x2e
 800f49c:	d10c      	bne.n	800f4b8 <_svfiprintf_r+0x130>
 800f49e:	7863      	ldrb	r3, [r4, #1]
 800f4a0:	2b2a      	cmp	r3, #42	; 0x2a
 800f4a2:	d134      	bne.n	800f50e <_svfiprintf_r+0x186>
 800f4a4:	9b03      	ldr	r3, [sp, #12]
 800f4a6:	1d1a      	adds	r2, r3, #4
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	9203      	str	r2, [sp, #12]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	bfb8      	it	lt
 800f4b0:	f04f 33ff 	movlt.w	r3, #4294967295
 800f4b4:	3402      	adds	r4, #2
 800f4b6:	9305      	str	r3, [sp, #20]
 800f4b8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f580 <_svfiprintf_r+0x1f8>
 800f4bc:	7821      	ldrb	r1, [r4, #0]
 800f4be:	2203      	movs	r2, #3
 800f4c0:	4650      	mov	r0, sl
 800f4c2:	f7f0 fead 	bl	8000220 <memchr>
 800f4c6:	b138      	cbz	r0, 800f4d8 <_svfiprintf_r+0x150>
 800f4c8:	9b04      	ldr	r3, [sp, #16]
 800f4ca:	eba0 000a 	sub.w	r0, r0, sl
 800f4ce:	2240      	movs	r2, #64	; 0x40
 800f4d0:	4082      	lsls	r2, r0
 800f4d2:	4313      	orrs	r3, r2
 800f4d4:	3401      	adds	r4, #1
 800f4d6:	9304      	str	r3, [sp, #16]
 800f4d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4dc:	4825      	ldr	r0, [pc, #148]	; (800f574 <_svfiprintf_r+0x1ec>)
 800f4de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f4e2:	2206      	movs	r2, #6
 800f4e4:	f7f0 fe9c 	bl	8000220 <memchr>
 800f4e8:	2800      	cmp	r0, #0
 800f4ea:	d038      	beq.n	800f55e <_svfiprintf_r+0x1d6>
 800f4ec:	4b22      	ldr	r3, [pc, #136]	; (800f578 <_svfiprintf_r+0x1f0>)
 800f4ee:	bb1b      	cbnz	r3, 800f538 <_svfiprintf_r+0x1b0>
 800f4f0:	9b03      	ldr	r3, [sp, #12]
 800f4f2:	3307      	adds	r3, #7
 800f4f4:	f023 0307 	bic.w	r3, r3, #7
 800f4f8:	3308      	adds	r3, #8
 800f4fa:	9303      	str	r3, [sp, #12]
 800f4fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4fe:	4433      	add	r3, r6
 800f500:	9309      	str	r3, [sp, #36]	; 0x24
 800f502:	e768      	b.n	800f3d6 <_svfiprintf_r+0x4e>
 800f504:	fb0c 3202 	mla	r2, ip, r2, r3
 800f508:	460c      	mov	r4, r1
 800f50a:	2001      	movs	r0, #1
 800f50c:	e7a6      	b.n	800f45c <_svfiprintf_r+0xd4>
 800f50e:	2300      	movs	r3, #0
 800f510:	3401      	adds	r4, #1
 800f512:	9305      	str	r3, [sp, #20]
 800f514:	4619      	mov	r1, r3
 800f516:	f04f 0c0a 	mov.w	ip, #10
 800f51a:	4620      	mov	r0, r4
 800f51c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f520:	3a30      	subs	r2, #48	; 0x30
 800f522:	2a09      	cmp	r2, #9
 800f524:	d903      	bls.n	800f52e <_svfiprintf_r+0x1a6>
 800f526:	2b00      	cmp	r3, #0
 800f528:	d0c6      	beq.n	800f4b8 <_svfiprintf_r+0x130>
 800f52a:	9105      	str	r1, [sp, #20]
 800f52c:	e7c4      	b.n	800f4b8 <_svfiprintf_r+0x130>
 800f52e:	fb0c 2101 	mla	r1, ip, r1, r2
 800f532:	4604      	mov	r4, r0
 800f534:	2301      	movs	r3, #1
 800f536:	e7f0      	b.n	800f51a <_svfiprintf_r+0x192>
 800f538:	ab03      	add	r3, sp, #12
 800f53a:	9300      	str	r3, [sp, #0]
 800f53c:	462a      	mov	r2, r5
 800f53e:	4b0f      	ldr	r3, [pc, #60]	; (800f57c <_svfiprintf_r+0x1f4>)
 800f540:	a904      	add	r1, sp, #16
 800f542:	4638      	mov	r0, r7
 800f544:	f7fd fe3c 	bl	800d1c0 <_printf_float>
 800f548:	1c42      	adds	r2, r0, #1
 800f54a:	4606      	mov	r6, r0
 800f54c:	d1d6      	bne.n	800f4fc <_svfiprintf_r+0x174>
 800f54e:	89ab      	ldrh	r3, [r5, #12]
 800f550:	065b      	lsls	r3, r3, #25
 800f552:	f53f af2d 	bmi.w	800f3b0 <_svfiprintf_r+0x28>
 800f556:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f558:	b01d      	add	sp, #116	; 0x74
 800f55a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f55e:	ab03      	add	r3, sp, #12
 800f560:	9300      	str	r3, [sp, #0]
 800f562:	462a      	mov	r2, r5
 800f564:	4b05      	ldr	r3, [pc, #20]	; (800f57c <_svfiprintf_r+0x1f4>)
 800f566:	a904      	add	r1, sp, #16
 800f568:	4638      	mov	r0, r7
 800f56a:	f7fe f8cd 	bl	800d708 <_printf_i>
 800f56e:	e7eb      	b.n	800f548 <_svfiprintf_r+0x1c0>
 800f570:	08012264 	.word	0x08012264
 800f574:	0801226e 	.word	0x0801226e
 800f578:	0800d1c1 	.word	0x0800d1c1
 800f57c:	0800f2d5 	.word	0x0800f2d5
 800f580:	0801226a 	.word	0x0801226a

0800f584 <__sflush_r>:
 800f584:	898a      	ldrh	r2, [r1, #12]
 800f586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f58a:	4605      	mov	r5, r0
 800f58c:	0710      	lsls	r0, r2, #28
 800f58e:	460c      	mov	r4, r1
 800f590:	d458      	bmi.n	800f644 <__sflush_r+0xc0>
 800f592:	684b      	ldr	r3, [r1, #4]
 800f594:	2b00      	cmp	r3, #0
 800f596:	dc05      	bgt.n	800f5a4 <__sflush_r+0x20>
 800f598:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	dc02      	bgt.n	800f5a4 <__sflush_r+0x20>
 800f59e:	2000      	movs	r0, #0
 800f5a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f5a6:	2e00      	cmp	r6, #0
 800f5a8:	d0f9      	beq.n	800f59e <__sflush_r+0x1a>
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f5b0:	682f      	ldr	r7, [r5, #0]
 800f5b2:	6a21      	ldr	r1, [r4, #32]
 800f5b4:	602b      	str	r3, [r5, #0]
 800f5b6:	d032      	beq.n	800f61e <__sflush_r+0x9a>
 800f5b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f5ba:	89a3      	ldrh	r3, [r4, #12]
 800f5bc:	075a      	lsls	r2, r3, #29
 800f5be:	d505      	bpl.n	800f5cc <__sflush_r+0x48>
 800f5c0:	6863      	ldr	r3, [r4, #4]
 800f5c2:	1ac0      	subs	r0, r0, r3
 800f5c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f5c6:	b10b      	cbz	r3, 800f5cc <__sflush_r+0x48>
 800f5c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f5ca:	1ac0      	subs	r0, r0, r3
 800f5cc:	2300      	movs	r3, #0
 800f5ce:	4602      	mov	r2, r0
 800f5d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f5d2:	6a21      	ldr	r1, [r4, #32]
 800f5d4:	4628      	mov	r0, r5
 800f5d6:	47b0      	blx	r6
 800f5d8:	1c43      	adds	r3, r0, #1
 800f5da:	89a3      	ldrh	r3, [r4, #12]
 800f5dc:	d106      	bne.n	800f5ec <__sflush_r+0x68>
 800f5de:	6829      	ldr	r1, [r5, #0]
 800f5e0:	291d      	cmp	r1, #29
 800f5e2:	d82b      	bhi.n	800f63c <__sflush_r+0xb8>
 800f5e4:	4a29      	ldr	r2, [pc, #164]	; (800f68c <__sflush_r+0x108>)
 800f5e6:	410a      	asrs	r2, r1
 800f5e8:	07d6      	lsls	r6, r2, #31
 800f5ea:	d427      	bmi.n	800f63c <__sflush_r+0xb8>
 800f5ec:	2200      	movs	r2, #0
 800f5ee:	6062      	str	r2, [r4, #4]
 800f5f0:	04d9      	lsls	r1, r3, #19
 800f5f2:	6922      	ldr	r2, [r4, #16]
 800f5f4:	6022      	str	r2, [r4, #0]
 800f5f6:	d504      	bpl.n	800f602 <__sflush_r+0x7e>
 800f5f8:	1c42      	adds	r2, r0, #1
 800f5fa:	d101      	bne.n	800f600 <__sflush_r+0x7c>
 800f5fc:	682b      	ldr	r3, [r5, #0]
 800f5fe:	b903      	cbnz	r3, 800f602 <__sflush_r+0x7e>
 800f600:	6560      	str	r0, [r4, #84]	; 0x54
 800f602:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f604:	602f      	str	r7, [r5, #0]
 800f606:	2900      	cmp	r1, #0
 800f608:	d0c9      	beq.n	800f59e <__sflush_r+0x1a>
 800f60a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f60e:	4299      	cmp	r1, r3
 800f610:	d002      	beq.n	800f618 <__sflush_r+0x94>
 800f612:	4628      	mov	r0, r5
 800f614:	f7ff f9e2 	bl	800e9dc <_free_r>
 800f618:	2000      	movs	r0, #0
 800f61a:	6360      	str	r0, [r4, #52]	; 0x34
 800f61c:	e7c0      	b.n	800f5a0 <__sflush_r+0x1c>
 800f61e:	2301      	movs	r3, #1
 800f620:	4628      	mov	r0, r5
 800f622:	47b0      	blx	r6
 800f624:	1c41      	adds	r1, r0, #1
 800f626:	d1c8      	bne.n	800f5ba <__sflush_r+0x36>
 800f628:	682b      	ldr	r3, [r5, #0]
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d0c5      	beq.n	800f5ba <__sflush_r+0x36>
 800f62e:	2b1d      	cmp	r3, #29
 800f630:	d001      	beq.n	800f636 <__sflush_r+0xb2>
 800f632:	2b16      	cmp	r3, #22
 800f634:	d101      	bne.n	800f63a <__sflush_r+0xb6>
 800f636:	602f      	str	r7, [r5, #0]
 800f638:	e7b1      	b.n	800f59e <__sflush_r+0x1a>
 800f63a:	89a3      	ldrh	r3, [r4, #12]
 800f63c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f640:	81a3      	strh	r3, [r4, #12]
 800f642:	e7ad      	b.n	800f5a0 <__sflush_r+0x1c>
 800f644:	690f      	ldr	r7, [r1, #16]
 800f646:	2f00      	cmp	r7, #0
 800f648:	d0a9      	beq.n	800f59e <__sflush_r+0x1a>
 800f64a:	0793      	lsls	r3, r2, #30
 800f64c:	680e      	ldr	r6, [r1, #0]
 800f64e:	bf08      	it	eq
 800f650:	694b      	ldreq	r3, [r1, #20]
 800f652:	600f      	str	r7, [r1, #0]
 800f654:	bf18      	it	ne
 800f656:	2300      	movne	r3, #0
 800f658:	eba6 0807 	sub.w	r8, r6, r7
 800f65c:	608b      	str	r3, [r1, #8]
 800f65e:	f1b8 0f00 	cmp.w	r8, #0
 800f662:	dd9c      	ble.n	800f59e <__sflush_r+0x1a>
 800f664:	6a21      	ldr	r1, [r4, #32]
 800f666:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f668:	4643      	mov	r3, r8
 800f66a:	463a      	mov	r2, r7
 800f66c:	4628      	mov	r0, r5
 800f66e:	47b0      	blx	r6
 800f670:	2800      	cmp	r0, #0
 800f672:	dc06      	bgt.n	800f682 <__sflush_r+0xfe>
 800f674:	89a3      	ldrh	r3, [r4, #12]
 800f676:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f67a:	81a3      	strh	r3, [r4, #12]
 800f67c:	f04f 30ff 	mov.w	r0, #4294967295
 800f680:	e78e      	b.n	800f5a0 <__sflush_r+0x1c>
 800f682:	4407      	add	r7, r0
 800f684:	eba8 0800 	sub.w	r8, r8, r0
 800f688:	e7e9      	b.n	800f65e <__sflush_r+0xda>
 800f68a:	bf00      	nop
 800f68c:	dfbffffe 	.word	0xdfbffffe

0800f690 <_fflush_r>:
 800f690:	b538      	push	{r3, r4, r5, lr}
 800f692:	690b      	ldr	r3, [r1, #16]
 800f694:	4605      	mov	r5, r0
 800f696:	460c      	mov	r4, r1
 800f698:	b913      	cbnz	r3, 800f6a0 <_fflush_r+0x10>
 800f69a:	2500      	movs	r5, #0
 800f69c:	4628      	mov	r0, r5
 800f69e:	bd38      	pop	{r3, r4, r5, pc}
 800f6a0:	b118      	cbz	r0, 800f6aa <_fflush_r+0x1a>
 800f6a2:	6a03      	ldr	r3, [r0, #32]
 800f6a4:	b90b      	cbnz	r3, 800f6aa <_fflush_r+0x1a>
 800f6a6:	f7fe f9dd 	bl	800da64 <__sinit>
 800f6aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d0f3      	beq.n	800f69a <_fflush_r+0xa>
 800f6b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f6b4:	07d0      	lsls	r0, r2, #31
 800f6b6:	d404      	bmi.n	800f6c2 <_fflush_r+0x32>
 800f6b8:	0599      	lsls	r1, r3, #22
 800f6ba:	d402      	bmi.n	800f6c2 <_fflush_r+0x32>
 800f6bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f6be:	f7fe fb00 	bl	800dcc2 <__retarget_lock_acquire_recursive>
 800f6c2:	4628      	mov	r0, r5
 800f6c4:	4621      	mov	r1, r4
 800f6c6:	f7ff ff5d 	bl	800f584 <__sflush_r>
 800f6ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f6cc:	07da      	lsls	r2, r3, #31
 800f6ce:	4605      	mov	r5, r0
 800f6d0:	d4e4      	bmi.n	800f69c <_fflush_r+0xc>
 800f6d2:	89a3      	ldrh	r3, [r4, #12]
 800f6d4:	059b      	lsls	r3, r3, #22
 800f6d6:	d4e1      	bmi.n	800f69c <_fflush_r+0xc>
 800f6d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f6da:	f7fe faf3 	bl	800dcc4 <__retarget_lock_release_recursive>
 800f6de:	e7dd      	b.n	800f69c <_fflush_r+0xc>

0800f6e0 <memmove>:
 800f6e0:	4288      	cmp	r0, r1
 800f6e2:	b510      	push	{r4, lr}
 800f6e4:	eb01 0402 	add.w	r4, r1, r2
 800f6e8:	d902      	bls.n	800f6f0 <memmove+0x10>
 800f6ea:	4284      	cmp	r4, r0
 800f6ec:	4623      	mov	r3, r4
 800f6ee:	d807      	bhi.n	800f700 <memmove+0x20>
 800f6f0:	1e43      	subs	r3, r0, #1
 800f6f2:	42a1      	cmp	r1, r4
 800f6f4:	d008      	beq.n	800f708 <memmove+0x28>
 800f6f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f6fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f6fe:	e7f8      	b.n	800f6f2 <memmove+0x12>
 800f700:	4402      	add	r2, r0
 800f702:	4601      	mov	r1, r0
 800f704:	428a      	cmp	r2, r1
 800f706:	d100      	bne.n	800f70a <memmove+0x2a>
 800f708:	bd10      	pop	{r4, pc}
 800f70a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f70e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f712:	e7f7      	b.n	800f704 <memmove+0x24>

0800f714 <_sbrk_r>:
 800f714:	b538      	push	{r3, r4, r5, lr}
 800f716:	4d06      	ldr	r5, [pc, #24]	; (800f730 <_sbrk_r+0x1c>)
 800f718:	2300      	movs	r3, #0
 800f71a:	4604      	mov	r4, r0
 800f71c:	4608      	mov	r0, r1
 800f71e:	602b      	str	r3, [r5, #0]
 800f720:	f7f5 f8e2 	bl	80048e8 <_sbrk>
 800f724:	1c43      	adds	r3, r0, #1
 800f726:	d102      	bne.n	800f72e <_sbrk_r+0x1a>
 800f728:	682b      	ldr	r3, [r5, #0]
 800f72a:	b103      	cbz	r3, 800f72e <_sbrk_r+0x1a>
 800f72c:	6023      	str	r3, [r4, #0]
 800f72e:	bd38      	pop	{r3, r4, r5, pc}
 800f730:	20001908 	.word	0x20001908

0800f734 <__assert_func>:
 800f734:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f736:	4614      	mov	r4, r2
 800f738:	461a      	mov	r2, r3
 800f73a:	4b09      	ldr	r3, [pc, #36]	; (800f760 <__assert_func+0x2c>)
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	4605      	mov	r5, r0
 800f740:	68d8      	ldr	r0, [r3, #12]
 800f742:	b14c      	cbz	r4, 800f758 <__assert_func+0x24>
 800f744:	4b07      	ldr	r3, [pc, #28]	; (800f764 <__assert_func+0x30>)
 800f746:	9100      	str	r1, [sp, #0]
 800f748:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f74c:	4906      	ldr	r1, [pc, #24]	; (800f768 <__assert_func+0x34>)
 800f74e:	462b      	mov	r3, r5
 800f750:	f000 f872 	bl	800f838 <fiprintf>
 800f754:	f000 f882 	bl	800f85c <abort>
 800f758:	4b04      	ldr	r3, [pc, #16]	; (800f76c <__assert_func+0x38>)
 800f75a:	461c      	mov	r4, r3
 800f75c:	e7f3      	b.n	800f746 <__assert_func+0x12>
 800f75e:	bf00      	nop
 800f760:	20000070 	.word	0x20000070
 800f764:	0801227f 	.word	0x0801227f
 800f768:	0801228c 	.word	0x0801228c
 800f76c:	080122ba 	.word	0x080122ba

0800f770 <_calloc_r>:
 800f770:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f772:	fba1 2402 	umull	r2, r4, r1, r2
 800f776:	b94c      	cbnz	r4, 800f78c <_calloc_r+0x1c>
 800f778:	4611      	mov	r1, r2
 800f77a:	9201      	str	r2, [sp, #4]
 800f77c:	f7ff f9a2 	bl	800eac4 <_malloc_r>
 800f780:	9a01      	ldr	r2, [sp, #4]
 800f782:	4605      	mov	r5, r0
 800f784:	b930      	cbnz	r0, 800f794 <_calloc_r+0x24>
 800f786:	4628      	mov	r0, r5
 800f788:	b003      	add	sp, #12
 800f78a:	bd30      	pop	{r4, r5, pc}
 800f78c:	220c      	movs	r2, #12
 800f78e:	6002      	str	r2, [r0, #0]
 800f790:	2500      	movs	r5, #0
 800f792:	e7f8      	b.n	800f786 <_calloc_r+0x16>
 800f794:	4621      	mov	r1, r4
 800f796:	f7fe fa17 	bl	800dbc8 <memset>
 800f79a:	e7f4      	b.n	800f786 <_calloc_r+0x16>

0800f79c <__ascii_mbtowc>:
 800f79c:	b082      	sub	sp, #8
 800f79e:	b901      	cbnz	r1, 800f7a2 <__ascii_mbtowc+0x6>
 800f7a0:	a901      	add	r1, sp, #4
 800f7a2:	b142      	cbz	r2, 800f7b6 <__ascii_mbtowc+0x1a>
 800f7a4:	b14b      	cbz	r3, 800f7ba <__ascii_mbtowc+0x1e>
 800f7a6:	7813      	ldrb	r3, [r2, #0]
 800f7a8:	600b      	str	r3, [r1, #0]
 800f7aa:	7812      	ldrb	r2, [r2, #0]
 800f7ac:	1e10      	subs	r0, r2, #0
 800f7ae:	bf18      	it	ne
 800f7b0:	2001      	movne	r0, #1
 800f7b2:	b002      	add	sp, #8
 800f7b4:	4770      	bx	lr
 800f7b6:	4610      	mov	r0, r2
 800f7b8:	e7fb      	b.n	800f7b2 <__ascii_mbtowc+0x16>
 800f7ba:	f06f 0001 	mvn.w	r0, #1
 800f7be:	e7f8      	b.n	800f7b2 <__ascii_mbtowc+0x16>

0800f7c0 <_realloc_r>:
 800f7c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7c4:	4680      	mov	r8, r0
 800f7c6:	4614      	mov	r4, r2
 800f7c8:	460e      	mov	r6, r1
 800f7ca:	b921      	cbnz	r1, 800f7d6 <_realloc_r+0x16>
 800f7cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f7d0:	4611      	mov	r1, r2
 800f7d2:	f7ff b977 	b.w	800eac4 <_malloc_r>
 800f7d6:	b92a      	cbnz	r2, 800f7e4 <_realloc_r+0x24>
 800f7d8:	f7ff f900 	bl	800e9dc <_free_r>
 800f7dc:	4625      	mov	r5, r4
 800f7de:	4628      	mov	r0, r5
 800f7e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7e4:	f000 f841 	bl	800f86a <_malloc_usable_size_r>
 800f7e8:	4284      	cmp	r4, r0
 800f7ea:	4607      	mov	r7, r0
 800f7ec:	d802      	bhi.n	800f7f4 <_realloc_r+0x34>
 800f7ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f7f2:	d812      	bhi.n	800f81a <_realloc_r+0x5a>
 800f7f4:	4621      	mov	r1, r4
 800f7f6:	4640      	mov	r0, r8
 800f7f8:	f7ff f964 	bl	800eac4 <_malloc_r>
 800f7fc:	4605      	mov	r5, r0
 800f7fe:	2800      	cmp	r0, #0
 800f800:	d0ed      	beq.n	800f7de <_realloc_r+0x1e>
 800f802:	42bc      	cmp	r4, r7
 800f804:	4622      	mov	r2, r4
 800f806:	4631      	mov	r1, r6
 800f808:	bf28      	it	cs
 800f80a:	463a      	movcs	r2, r7
 800f80c:	f7fe fa5b 	bl	800dcc6 <memcpy>
 800f810:	4631      	mov	r1, r6
 800f812:	4640      	mov	r0, r8
 800f814:	f7ff f8e2 	bl	800e9dc <_free_r>
 800f818:	e7e1      	b.n	800f7de <_realloc_r+0x1e>
 800f81a:	4635      	mov	r5, r6
 800f81c:	e7df      	b.n	800f7de <_realloc_r+0x1e>

0800f81e <__ascii_wctomb>:
 800f81e:	b149      	cbz	r1, 800f834 <__ascii_wctomb+0x16>
 800f820:	2aff      	cmp	r2, #255	; 0xff
 800f822:	bf85      	ittet	hi
 800f824:	238a      	movhi	r3, #138	; 0x8a
 800f826:	6003      	strhi	r3, [r0, #0]
 800f828:	700a      	strbls	r2, [r1, #0]
 800f82a:	f04f 30ff 	movhi.w	r0, #4294967295
 800f82e:	bf98      	it	ls
 800f830:	2001      	movls	r0, #1
 800f832:	4770      	bx	lr
 800f834:	4608      	mov	r0, r1
 800f836:	4770      	bx	lr

0800f838 <fiprintf>:
 800f838:	b40e      	push	{r1, r2, r3}
 800f83a:	b503      	push	{r0, r1, lr}
 800f83c:	4601      	mov	r1, r0
 800f83e:	ab03      	add	r3, sp, #12
 800f840:	4805      	ldr	r0, [pc, #20]	; (800f858 <fiprintf+0x20>)
 800f842:	f853 2b04 	ldr.w	r2, [r3], #4
 800f846:	6800      	ldr	r0, [r0, #0]
 800f848:	9301      	str	r3, [sp, #4]
 800f84a:	f000 f83f 	bl	800f8cc <_vfiprintf_r>
 800f84e:	b002      	add	sp, #8
 800f850:	f85d eb04 	ldr.w	lr, [sp], #4
 800f854:	b003      	add	sp, #12
 800f856:	4770      	bx	lr
 800f858:	20000070 	.word	0x20000070

0800f85c <abort>:
 800f85c:	b508      	push	{r3, lr}
 800f85e:	2006      	movs	r0, #6
 800f860:	f000 fa0c 	bl	800fc7c <raise>
 800f864:	2001      	movs	r0, #1
 800f866:	f7f4 ffc7 	bl	80047f8 <_exit>

0800f86a <_malloc_usable_size_r>:
 800f86a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f86e:	1f18      	subs	r0, r3, #4
 800f870:	2b00      	cmp	r3, #0
 800f872:	bfbc      	itt	lt
 800f874:	580b      	ldrlt	r3, [r1, r0]
 800f876:	18c0      	addlt	r0, r0, r3
 800f878:	4770      	bx	lr

0800f87a <__sfputc_r>:
 800f87a:	6893      	ldr	r3, [r2, #8]
 800f87c:	3b01      	subs	r3, #1
 800f87e:	2b00      	cmp	r3, #0
 800f880:	b410      	push	{r4}
 800f882:	6093      	str	r3, [r2, #8]
 800f884:	da08      	bge.n	800f898 <__sfputc_r+0x1e>
 800f886:	6994      	ldr	r4, [r2, #24]
 800f888:	42a3      	cmp	r3, r4
 800f88a:	db01      	blt.n	800f890 <__sfputc_r+0x16>
 800f88c:	290a      	cmp	r1, #10
 800f88e:	d103      	bne.n	800f898 <__sfputc_r+0x1e>
 800f890:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f894:	f000 b934 	b.w	800fb00 <__swbuf_r>
 800f898:	6813      	ldr	r3, [r2, #0]
 800f89a:	1c58      	adds	r0, r3, #1
 800f89c:	6010      	str	r0, [r2, #0]
 800f89e:	7019      	strb	r1, [r3, #0]
 800f8a0:	4608      	mov	r0, r1
 800f8a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f8a6:	4770      	bx	lr

0800f8a8 <__sfputs_r>:
 800f8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8aa:	4606      	mov	r6, r0
 800f8ac:	460f      	mov	r7, r1
 800f8ae:	4614      	mov	r4, r2
 800f8b0:	18d5      	adds	r5, r2, r3
 800f8b2:	42ac      	cmp	r4, r5
 800f8b4:	d101      	bne.n	800f8ba <__sfputs_r+0x12>
 800f8b6:	2000      	movs	r0, #0
 800f8b8:	e007      	b.n	800f8ca <__sfputs_r+0x22>
 800f8ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8be:	463a      	mov	r2, r7
 800f8c0:	4630      	mov	r0, r6
 800f8c2:	f7ff ffda 	bl	800f87a <__sfputc_r>
 800f8c6:	1c43      	adds	r3, r0, #1
 800f8c8:	d1f3      	bne.n	800f8b2 <__sfputs_r+0xa>
 800f8ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f8cc <_vfiprintf_r>:
 800f8cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8d0:	460d      	mov	r5, r1
 800f8d2:	b09d      	sub	sp, #116	; 0x74
 800f8d4:	4614      	mov	r4, r2
 800f8d6:	4698      	mov	r8, r3
 800f8d8:	4606      	mov	r6, r0
 800f8da:	b118      	cbz	r0, 800f8e4 <_vfiprintf_r+0x18>
 800f8dc:	6a03      	ldr	r3, [r0, #32]
 800f8de:	b90b      	cbnz	r3, 800f8e4 <_vfiprintf_r+0x18>
 800f8e0:	f7fe f8c0 	bl	800da64 <__sinit>
 800f8e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f8e6:	07d9      	lsls	r1, r3, #31
 800f8e8:	d405      	bmi.n	800f8f6 <_vfiprintf_r+0x2a>
 800f8ea:	89ab      	ldrh	r3, [r5, #12]
 800f8ec:	059a      	lsls	r2, r3, #22
 800f8ee:	d402      	bmi.n	800f8f6 <_vfiprintf_r+0x2a>
 800f8f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f8f2:	f7fe f9e6 	bl	800dcc2 <__retarget_lock_acquire_recursive>
 800f8f6:	89ab      	ldrh	r3, [r5, #12]
 800f8f8:	071b      	lsls	r3, r3, #28
 800f8fa:	d501      	bpl.n	800f900 <_vfiprintf_r+0x34>
 800f8fc:	692b      	ldr	r3, [r5, #16]
 800f8fe:	b99b      	cbnz	r3, 800f928 <_vfiprintf_r+0x5c>
 800f900:	4629      	mov	r1, r5
 800f902:	4630      	mov	r0, r6
 800f904:	f000 f93a 	bl	800fb7c <__swsetup_r>
 800f908:	b170      	cbz	r0, 800f928 <_vfiprintf_r+0x5c>
 800f90a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f90c:	07dc      	lsls	r4, r3, #31
 800f90e:	d504      	bpl.n	800f91a <_vfiprintf_r+0x4e>
 800f910:	f04f 30ff 	mov.w	r0, #4294967295
 800f914:	b01d      	add	sp, #116	; 0x74
 800f916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f91a:	89ab      	ldrh	r3, [r5, #12]
 800f91c:	0598      	lsls	r0, r3, #22
 800f91e:	d4f7      	bmi.n	800f910 <_vfiprintf_r+0x44>
 800f920:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f922:	f7fe f9cf 	bl	800dcc4 <__retarget_lock_release_recursive>
 800f926:	e7f3      	b.n	800f910 <_vfiprintf_r+0x44>
 800f928:	2300      	movs	r3, #0
 800f92a:	9309      	str	r3, [sp, #36]	; 0x24
 800f92c:	2320      	movs	r3, #32
 800f92e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f932:	f8cd 800c 	str.w	r8, [sp, #12]
 800f936:	2330      	movs	r3, #48	; 0x30
 800f938:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800faec <_vfiprintf_r+0x220>
 800f93c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f940:	f04f 0901 	mov.w	r9, #1
 800f944:	4623      	mov	r3, r4
 800f946:	469a      	mov	sl, r3
 800f948:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f94c:	b10a      	cbz	r2, 800f952 <_vfiprintf_r+0x86>
 800f94e:	2a25      	cmp	r2, #37	; 0x25
 800f950:	d1f9      	bne.n	800f946 <_vfiprintf_r+0x7a>
 800f952:	ebba 0b04 	subs.w	fp, sl, r4
 800f956:	d00b      	beq.n	800f970 <_vfiprintf_r+0xa4>
 800f958:	465b      	mov	r3, fp
 800f95a:	4622      	mov	r2, r4
 800f95c:	4629      	mov	r1, r5
 800f95e:	4630      	mov	r0, r6
 800f960:	f7ff ffa2 	bl	800f8a8 <__sfputs_r>
 800f964:	3001      	adds	r0, #1
 800f966:	f000 80a9 	beq.w	800fabc <_vfiprintf_r+0x1f0>
 800f96a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f96c:	445a      	add	r2, fp
 800f96e:	9209      	str	r2, [sp, #36]	; 0x24
 800f970:	f89a 3000 	ldrb.w	r3, [sl]
 800f974:	2b00      	cmp	r3, #0
 800f976:	f000 80a1 	beq.w	800fabc <_vfiprintf_r+0x1f0>
 800f97a:	2300      	movs	r3, #0
 800f97c:	f04f 32ff 	mov.w	r2, #4294967295
 800f980:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f984:	f10a 0a01 	add.w	sl, sl, #1
 800f988:	9304      	str	r3, [sp, #16]
 800f98a:	9307      	str	r3, [sp, #28]
 800f98c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f990:	931a      	str	r3, [sp, #104]	; 0x68
 800f992:	4654      	mov	r4, sl
 800f994:	2205      	movs	r2, #5
 800f996:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f99a:	4854      	ldr	r0, [pc, #336]	; (800faec <_vfiprintf_r+0x220>)
 800f99c:	f7f0 fc40 	bl	8000220 <memchr>
 800f9a0:	9a04      	ldr	r2, [sp, #16]
 800f9a2:	b9d8      	cbnz	r0, 800f9dc <_vfiprintf_r+0x110>
 800f9a4:	06d1      	lsls	r1, r2, #27
 800f9a6:	bf44      	itt	mi
 800f9a8:	2320      	movmi	r3, #32
 800f9aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f9ae:	0713      	lsls	r3, r2, #28
 800f9b0:	bf44      	itt	mi
 800f9b2:	232b      	movmi	r3, #43	; 0x2b
 800f9b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f9b8:	f89a 3000 	ldrb.w	r3, [sl]
 800f9bc:	2b2a      	cmp	r3, #42	; 0x2a
 800f9be:	d015      	beq.n	800f9ec <_vfiprintf_r+0x120>
 800f9c0:	9a07      	ldr	r2, [sp, #28]
 800f9c2:	4654      	mov	r4, sl
 800f9c4:	2000      	movs	r0, #0
 800f9c6:	f04f 0c0a 	mov.w	ip, #10
 800f9ca:	4621      	mov	r1, r4
 800f9cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f9d0:	3b30      	subs	r3, #48	; 0x30
 800f9d2:	2b09      	cmp	r3, #9
 800f9d4:	d94d      	bls.n	800fa72 <_vfiprintf_r+0x1a6>
 800f9d6:	b1b0      	cbz	r0, 800fa06 <_vfiprintf_r+0x13a>
 800f9d8:	9207      	str	r2, [sp, #28]
 800f9da:	e014      	b.n	800fa06 <_vfiprintf_r+0x13a>
 800f9dc:	eba0 0308 	sub.w	r3, r0, r8
 800f9e0:	fa09 f303 	lsl.w	r3, r9, r3
 800f9e4:	4313      	orrs	r3, r2
 800f9e6:	9304      	str	r3, [sp, #16]
 800f9e8:	46a2      	mov	sl, r4
 800f9ea:	e7d2      	b.n	800f992 <_vfiprintf_r+0xc6>
 800f9ec:	9b03      	ldr	r3, [sp, #12]
 800f9ee:	1d19      	adds	r1, r3, #4
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	9103      	str	r1, [sp, #12]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	bfbb      	ittet	lt
 800f9f8:	425b      	neglt	r3, r3
 800f9fa:	f042 0202 	orrlt.w	r2, r2, #2
 800f9fe:	9307      	strge	r3, [sp, #28]
 800fa00:	9307      	strlt	r3, [sp, #28]
 800fa02:	bfb8      	it	lt
 800fa04:	9204      	strlt	r2, [sp, #16]
 800fa06:	7823      	ldrb	r3, [r4, #0]
 800fa08:	2b2e      	cmp	r3, #46	; 0x2e
 800fa0a:	d10c      	bne.n	800fa26 <_vfiprintf_r+0x15a>
 800fa0c:	7863      	ldrb	r3, [r4, #1]
 800fa0e:	2b2a      	cmp	r3, #42	; 0x2a
 800fa10:	d134      	bne.n	800fa7c <_vfiprintf_r+0x1b0>
 800fa12:	9b03      	ldr	r3, [sp, #12]
 800fa14:	1d1a      	adds	r2, r3, #4
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	9203      	str	r2, [sp, #12]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	bfb8      	it	lt
 800fa1e:	f04f 33ff 	movlt.w	r3, #4294967295
 800fa22:	3402      	adds	r4, #2
 800fa24:	9305      	str	r3, [sp, #20]
 800fa26:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800fafc <_vfiprintf_r+0x230>
 800fa2a:	7821      	ldrb	r1, [r4, #0]
 800fa2c:	2203      	movs	r2, #3
 800fa2e:	4650      	mov	r0, sl
 800fa30:	f7f0 fbf6 	bl	8000220 <memchr>
 800fa34:	b138      	cbz	r0, 800fa46 <_vfiprintf_r+0x17a>
 800fa36:	9b04      	ldr	r3, [sp, #16]
 800fa38:	eba0 000a 	sub.w	r0, r0, sl
 800fa3c:	2240      	movs	r2, #64	; 0x40
 800fa3e:	4082      	lsls	r2, r0
 800fa40:	4313      	orrs	r3, r2
 800fa42:	3401      	adds	r4, #1
 800fa44:	9304      	str	r3, [sp, #16]
 800fa46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa4a:	4829      	ldr	r0, [pc, #164]	; (800faf0 <_vfiprintf_r+0x224>)
 800fa4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fa50:	2206      	movs	r2, #6
 800fa52:	f7f0 fbe5 	bl	8000220 <memchr>
 800fa56:	2800      	cmp	r0, #0
 800fa58:	d03f      	beq.n	800fada <_vfiprintf_r+0x20e>
 800fa5a:	4b26      	ldr	r3, [pc, #152]	; (800faf4 <_vfiprintf_r+0x228>)
 800fa5c:	bb1b      	cbnz	r3, 800faa6 <_vfiprintf_r+0x1da>
 800fa5e:	9b03      	ldr	r3, [sp, #12]
 800fa60:	3307      	adds	r3, #7
 800fa62:	f023 0307 	bic.w	r3, r3, #7
 800fa66:	3308      	adds	r3, #8
 800fa68:	9303      	str	r3, [sp, #12]
 800fa6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa6c:	443b      	add	r3, r7
 800fa6e:	9309      	str	r3, [sp, #36]	; 0x24
 800fa70:	e768      	b.n	800f944 <_vfiprintf_r+0x78>
 800fa72:	fb0c 3202 	mla	r2, ip, r2, r3
 800fa76:	460c      	mov	r4, r1
 800fa78:	2001      	movs	r0, #1
 800fa7a:	e7a6      	b.n	800f9ca <_vfiprintf_r+0xfe>
 800fa7c:	2300      	movs	r3, #0
 800fa7e:	3401      	adds	r4, #1
 800fa80:	9305      	str	r3, [sp, #20]
 800fa82:	4619      	mov	r1, r3
 800fa84:	f04f 0c0a 	mov.w	ip, #10
 800fa88:	4620      	mov	r0, r4
 800fa8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fa8e:	3a30      	subs	r2, #48	; 0x30
 800fa90:	2a09      	cmp	r2, #9
 800fa92:	d903      	bls.n	800fa9c <_vfiprintf_r+0x1d0>
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d0c6      	beq.n	800fa26 <_vfiprintf_r+0x15a>
 800fa98:	9105      	str	r1, [sp, #20]
 800fa9a:	e7c4      	b.n	800fa26 <_vfiprintf_r+0x15a>
 800fa9c:	fb0c 2101 	mla	r1, ip, r1, r2
 800faa0:	4604      	mov	r4, r0
 800faa2:	2301      	movs	r3, #1
 800faa4:	e7f0      	b.n	800fa88 <_vfiprintf_r+0x1bc>
 800faa6:	ab03      	add	r3, sp, #12
 800faa8:	9300      	str	r3, [sp, #0]
 800faaa:	462a      	mov	r2, r5
 800faac:	4b12      	ldr	r3, [pc, #72]	; (800faf8 <_vfiprintf_r+0x22c>)
 800faae:	a904      	add	r1, sp, #16
 800fab0:	4630      	mov	r0, r6
 800fab2:	f7fd fb85 	bl	800d1c0 <_printf_float>
 800fab6:	4607      	mov	r7, r0
 800fab8:	1c78      	adds	r0, r7, #1
 800faba:	d1d6      	bne.n	800fa6a <_vfiprintf_r+0x19e>
 800fabc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fabe:	07d9      	lsls	r1, r3, #31
 800fac0:	d405      	bmi.n	800face <_vfiprintf_r+0x202>
 800fac2:	89ab      	ldrh	r3, [r5, #12]
 800fac4:	059a      	lsls	r2, r3, #22
 800fac6:	d402      	bmi.n	800face <_vfiprintf_r+0x202>
 800fac8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800faca:	f7fe f8fb 	bl	800dcc4 <__retarget_lock_release_recursive>
 800face:	89ab      	ldrh	r3, [r5, #12]
 800fad0:	065b      	lsls	r3, r3, #25
 800fad2:	f53f af1d 	bmi.w	800f910 <_vfiprintf_r+0x44>
 800fad6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fad8:	e71c      	b.n	800f914 <_vfiprintf_r+0x48>
 800fada:	ab03      	add	r3, sp, #12
 800fadc:	9300      	str	r3, [sp, #0]
 800fade:	462a      	mov	r2, r5
 800fae0:	4b05      	ldr	r3, [pc, #20]	; (800faf8 <_vfiprintf_r+0x22c>)
 800fae2:	a904      	add	r1, sp, #16
 800fae4:	4630      	mov	r0, r6
 800fae6:	f7fd fe0f 	bl	800d708 <_printf_i>
 800faea:	e7e4      	b.n	800fab6 <_vfiprintf_r+0x1ea>
 800faec:	08012264 	.word	0x08012264
 800faf0:	0801226e 	.word	0x0801226e
 800faf4:	0800d1c1 	.word	0x0800d1c1
 800faf8:	0800f8a9 	.word	0x0800f8a9
 800fafc:	0801226a 	.word	0x0801226a

0800fb00 <__swbuf_r>:
 800fb00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb02:	460e      	mov	r6, r1
 800fb04:	4614      	mov	r4, r2
 800fb06:	4605      	mov	r5, r0
 800fb08:	b118      	cbz	r0, 800fb12 <__swbuf_r+0x12>
 800fb0a:	6a03      	ldr	r3, [r0, #32]
 800fb0c:	b90b      	cbnz	r3, 800fb12 <__swbuf_r+0x12>
 800fb0e:	f7fd ffa9 	bl	800da64 <__sinit>
 800fb12:	69a3      	ldr	r3, [r4, #24]
 800fb14:	60a3      	str	r3, [r4, #8]
 800fb16:	89a3      	ldrh	r3, [r4, #12]
 800fb18:	071a      	lsls	r2, r3, #28
 800fb1a:	d525      	bpl.n	800fb68 <__swbuf_r+0x68>
 800fb1c:	6923      	ldr	r3, [r4, #16]
 800fb1e:	b31b      	cbz	r3, 800fb68 <__swbuf_r+0x68>
 800fb20:	6823      	ldr	r3, [r4, #0]
 800fb22:	6922      	ldr	r2, [r4, #16]
 800fb24:	1a98      	subs	r0, r3, r2
 800fb26:	6963      	ldr	r3, [r4, #20]
 800fb28:	b2f6      	uxtb	r6, r6
 800fb2a:	4283      	cmp	r3, r0
 800fb2c:	4637      	mov	r7, r6
 800fb2e:	dc04      	bgt.n	800fb3a <__swbuf_r+0x3a>
 800fb30:	4621      	mov	r1, r4
 800fb32:	4628      	mov	r0, r5
 800fb34:	f7ff fdac 	bl	800f690 <_fflush_r>
 800fb38:	b9e0      	cbnz	r0, 800fb74 <__swbuf_r+0x74>
 800fb3a:	68a3      	ldr	r3, [r4, #8]
 800fb3c:	3b01      	subs	r3, #1
 800fb3e:	60a3      	str	r3, [r4, #8]
 800fb40:	6823      	ldr	r3, [r4, #0]
 800fb42:	1c5a      	adds	r2, r3, #1
 800fb44:	6022      	str	r2, [r4, #0]
 800fb46:	701e      	strb	r6, [r3, #0]
 800fb48:	6962      	ldr	r2, [r4, #20]
 800fb4a:	1c43      	adds	r3, r0, #1
 800fb4c:	429a      	cmp	r2, r3
 800fb4e:	d004      	beq.n	800fb5a <__swbuf_r+0x5a>
 800fb50:	89a3      	ldrh	r3, [r4, #12]
 800fb52:	07db      	lsls	r3, r3, #31
 800fb54:	d506      	bpl.n	800fb64 <__swbuf_r+0x64>
 800fb56:	2e0a      	cmp	r6, #10
 800fb58:	d104      	bne.n	800fb64 <__swbuf_r+0x64>
 800fb5a:	4621      	mov	r1, r4
 800fb5c:	4628      	mov	r0, r5
 800fb5e:	f7ff fd97 	bl	800f690 <_fflush_r>
 800fb62:	b938      	cbnz	r0, 800fb74 <__swbuf_r+0x74>
 800fb64:	4638      	mov	r0, r7
 800fb66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb68:	4621      	mov	r1, r4
 800fb6a:	4628      	mov	r0, r5
 800fb6c:	f000 f806 	bl	800fb7c <__swsetup_r>
 800fb70:	2800      	cmp	r0, #0
 800fb72:	d0d5      	beq.n	800fb20 <__swbuf_r+0x20>
 800fb74:	f04f 37ff 	mov.w	r7, #4294967295
 800fb78:	e7f4      	b.n	800fb64 <__swbuf_r+0x64>
	...

0800fb7c <__swsetup_r>:
 800fb7c:	b538      	push	{r3, r4, r5, lr}
 800fb7e:	4b2a      	ldr	r3, [pc, #168]	; (800fc28 <__swsetup_r+0xac>)
 800fb80:	4605      	mov	r5, r0
 800fb82:	6818      	ldr	r0, [r3, #0]
 800fb84:	460c      	mov	r4, r1
 800fb86:	b118      	cbz	r0, 800fb90 <__swsetup_r+0x14>
 800fb88:	6a03      	ldr	r3, [r0, #32]
 800fb8a:	b90b      	cbnz	r3, 800fb90 <__swsetup_r+0x14>
 800fb8c:	f7fd ff6a 	bl	800da64 <__sinit>
 800fb90:	89a3      	ldrh	r3, [r4, #12]
 800fb92:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fb96:	0718      	lsls	r0, r3, #28
 800fb98:	d422      	bmi.n	800fbe0 <__swsetup_r+0x64>
 800fb9a:	06d9      	lsls	r1, r3, #27
 800fb9c:	d407      	bmi.n	800fbae <__swsetup_r+0x32>
 800fb9e:	2309      	movs	r3, #9
 800fba0:	602b      	str	r3, [r5, #0]
 800fba2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fba6:	81a3      	strh	r3, [r4, #12]
 800fba8:	f04f 30ff 	mov.w	r0, #4294967295
 800fbac:	e034      	b.n	800fc18 <__swsetup_r+0x9c>
 800fbae:	0758      	lsls	r0, r3, #29
 800fbb0:	d512      	bpl.n	800fbd8 <__swsetup_r+0x5c>
 800fbb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fbb4:	b141      	cbz	r1, 800fbc8 <__swsetup_r+0x4c>
 800fbb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fbba:	4299      	cmp	r1, r3
 800fbbc:	d002      	beq.n	800fbc4 <__swsetup_r+0x48>
 800fbbe:	4628      	mov	r0, r5
 800fbc0:	f7fe ff0c 	bl	800e9dc <_free_r>
 800fbc4:	2300      	movs	r3, #0
 800fbc6:	6363      	str	r3, [r4, #52]	; 0x34
 800fbc8:	89a3      	ldrh	r3, [r4, #12]
 800fbca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fbce:	81a3      	strh	r3, [r4, #12]
 800fbd0:	2300      	movs	r3, #0
 800fbd2:	6063      	str	r3, [r4, #4]
 800fbd4:	6923      	ldr	r3, [r4, #16]
 800fbd6:	6023      	str	r3, [r4, #0]
 800fbd8:	89a3      	ldrh	r3, [r4, #12]
 800fbda:	f043 0308 	orr.w	r3, r3, #8
 800fbde:	81a3      	strh	r3, [r4, #12]
 800fbe0:	6923      	ldr	r3, [r4, #16]
 800fbe2:	b94b      	cbnz	r3, 800fbf8 <__swsetup_r+0x7c>
 800fbe4:	89a3      	ldrh	r3, [r4, #12]
 800fbe6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fbea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fbee:	d003      	beq.n	800fbf8 <__swsetup_r+0x7c>
 800fbf0:	4621      	mov	r1, r4
 800fbf2:	4628      	mov	r0, r5
 800fbf4:	f000 f884 	bl	800fd00 <__smakebuf_r>
 800fbf8:	89a0      	ldrh	r0, [r4, #12]
 800fbfa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fbfe:	f010 0301 	ands.w	r3, r0, #1
 800fc02:	d00a      	beq.n	800fc1a <__swsetup_r+0x9e>
 800fc04:	2300      	movs	r3, #0
 800fc06:	60a3      	str	r3, [r4, #8]
 800fc08:	6963      	ldr	r3, [r4, #20]
 800fc0a:	425b      	negs	r3, r3
 800fc0c:	61a3      	str	r3, [r4, #24]
 800fc0e:	6923      	ldr	r3, [r4, #16]
 800fc10:	b943      	cbnz	r3, 800fc24 <__swsetup_r+0xa8>
 800fc12:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fc16:	d1c4      	bne.n	800fba2 <__swsetup_r+0x26>
 800fc18:	bd38      	pop	{r3, r4, r5, pc}
 800fc1a:	0781      	lsls	r1, r0, #30
 800fc1c:	bf58      	it	pl
 800fc1e:	6963      	ldrpl	r3, [r4, #20]
 800fc20:	60a3      	str	r3, [r4, #8]
 800fc22:	e7f4      	b.n	800fc0e <__swsetup_r+0x92>
 800fc24:	2000      	movs	r0, #0
 800fc26:	e7f7      	b.n	800fc18 <__swsetup_r+0x9c>
 800fc28:	20000070 	.word	0x20000070

0800fc2c <_raise_r>:
 800fc2c:	291f      	cmp	r1, #31
 800fc2e:	b538      	push	{r3, r4, r5, lr}
 800fc30:	4604      	mov	r4, r0
 800fc32:	460d      	mov	r5, r1
 800fc34:	d904      	bls.n	800fc40 <_raise_r+0x14>
 800fc36:	2316      	movs	r3, #22
 800fc38:	6003      	str	r3, [r0, #0]
 800fc3a:	f04f 30ff 	mov.w	r0, #4294967295
 800fc3e:	bd38      	pop	{r3, r4, r5, pc}
 800fc40:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800fc42:	b112      	cbz	r2, 800fc4a <_raise_r+0x1e>
 800fc44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fc48:	b94b      	cbnz	r3, 800fc5e <_raise_r+0x32>
 800fc4a:	4620      	mov	r0, r4
 800fc4c:	f000 f830 	bl	800fcb0 <_getpid_r>
 800fc50:	462a      	mov	r2, r5
 800fc52:	4601      	mov	r1, r0
 800fc54:	4620      	mov	r0, r4
 800fc56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc5a:	f000 b817 	b.w	800fc8c <_kill_r>
 800fc5e:	2b01      	cmp	r3, #1
 800fc60:	d00a      	beq.n	800fc78 <_raise_r+0x4c>
 800fc62:	1c59      	adds	r1, r3, #1
 800fc64:	d103      	bne.n	800fc6e <_raise_r+0x42>
 800fc66:	2316      	movs	r3, #22
 800fc68:	6003      	str	r3, [r0, #0]
 800fc6a:	2001      	movs	r0, #1
 800fc6c:	e7e7      	b.n	800fc3e <_raise_r+0x12>
 800fc6e:	2400      	movs	r4, #0
 800fc70:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fc74:	4628      	mov	r0, r5
 800fc76:	4798      	blx	r3
 800fc78:	2000      	movs	r0, #0
 800fc7a:	e7e0      	b.n	800fc3e <_raise_r+0x12>

0800fc7c <raise>:
 800fc7c:	4b02      	ldr	r3, [pc, #8]	; (800fc88 <raise+0xc>)
 800fc7e:	4601      	mov	r1, r0
 800fc80:	6818      	ldr	r0, [r3, #0]
 800fc82:	f7ff bfd3 	b.w	800fc2c <_raise_r>
 800fc86:	bf00      	nop
 800fc88:	20000070 	.word	0x20000070

0800fc8c <_kill_r>:
 800fc8c:	b538      	push	{r3, r4, r5, lr}
 800fc8e:	4d07      	ldr	r5, [pc, #28]	; (800fcac <_kill_r+0x20>)
 800fc90:	2300      	movs	r3, #0
 800fc92:	4604      	mov	r4, r0
 800fc94:	4608      	mov	r0, r1
 800fc96:	4611      	mov	r1, r2
 800fc98:	602b      	str	r3, [r5, #0]
 800fc9a:	f7f4 fd9d 	bl	80047d8 <_kill>
 800fc9e:	1c43      	adds	r3, r0, #1
 800fca0:	d102      	bne.n	800fca8 <_kill_r+0x1c>
 800fca2:	682b      	ldr	r3, [r5, #0]
 800fca4:	b103      	cbz	r3, 800fca8 <_kill_r+0x1c>
 800fca6:	6023      	str	r3, [r4, #0]
 800fca8:	bd38      	pop	{r3, r4, r5, pc}
 800fcaa:	bf00      	nop
 800fcac:	20001908 	.word	0x20001908

0800fcb0 <_getpid_r>:
 800fcb0:	f7f4 bd8a 	b.w	80047c8 <_getpid>

0800fcb4 <__swhatbuf_r>:
 800fcb4:	b570      	push	{r4, r5, r6, lr}
 800fcb6:	460c      	mov	r4, r1
 800fcb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fcbc:	2900      	cmp	r1, #0
 800fcbe:	b096      	sub	sp, #88	; 0x58
 800fcc0:	4615      	mov	r5, r2
 800fcc2:	461e      	mov	r6, r3
 800fcc4:	da0d      	bge.n	800fce2 <__swhatbuf_r+0x2e>
 800fcc6:	89a3      	ldrh	r3, [r4, #12]
 800fcc8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800fccc:	f04f 0100 	mov.w	r1, #0
 800fcd0:	bf0c      	ite	eq
 800fcd2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800fcd6:	2340      	movne	r3, #64	; 0x40
 800fcd8:	2000      	movs	r0, #0
 800fcda:	6031      	str	r1, [r6, #0]
 800fcdc:	602b      	str	r3, [r5, #0]
 800fcde:	b016      	add	sp, #88	; 0x58
 800fce0:	bd70      	pop	{r4, r5, r6, pc}
 800fce2:	466a      	mov	r2, sp
 800fce4:	f000 f848 	bl	800fd78 <_fstat_r>
 800fce8:	2800      	cmp	r0, #0
 800fcea:	dbec      	blt.n	800fcc6 <__swhatbuf_r+0x12>
 800fcec:	9901      	ldr	r1, [sp, #4]
 800fcee:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800fcf2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800fcf6:	4259      	negs	r1, r3
 800fcf8:	4159      	adcs	r1, r3
 800fcfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fcfe:	e7eb      	b.n	800fcd8 <__swhatbuf_r+0x24>

0800fd00 <__smakebuf_r>:
 800fd00:	898b      	ldrh	r3, [r1, #12]
 800fd02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fd04:	079d      	lsls	r5, r3, #30
 800fd06:	4606      	mov	r6, r0
 800fd08:	460c      	mov	r4, r1
 800fd0a:	d507      	bpl.n	800fd1c <__smakebuf_r+0x1c>
 800fd0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fd10:	6023      	str	r3, [r4, #0]
 800fd12:	6123      	str	r3, [r4, #16]
 800fd14:	2301      	movs	r3, #1
 800fd16:	6163      	str	r3, [r4, #20]
 800fd18:	b002      	add	sp, #8
 800fd1a:	bd70      	pop	{r4, r5, r6, pc}
 800fd1c:	ab01      	add	r3, sp, #4
 800fd1e:	466a      	mov	r2, sp
 800fd20:	f7ff ffc8 	bl	800fcb4 <__swhatbuf_r>
 800fd24:	9900      	ldr	r1, [sp, #0]
 800fd26:	4605      	mov	r5, r0
 800fd28:	4630      	mov	r0, r6
 800fd2a:	f7fe fecb 	bl	800eac4 <_malloc_r>
 800fd2e:	b948      	cbnz	r0, 800fd44 <__smakebuf_r+0x44>
 800fd30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd34:	059a      	lsls	r2, r3, #22
 800fd36:	d4ef      	bmi.n	800fd18 <__smakebuf_r+0x18>
 800fd38:	f023 0303 	bic.w	r3, r3, #3
 800fd3c:	f043 0302 	orr.w	r3, r3, #2
 800fd40:	81a3      	strh	r3, [r4, #12]
 800fd42:	e7e3      	b.n	800fd0c <__smakebuf_r+0xc>
 800fd44:	89a3      	ldrh	r3, [r4, #12]
 800fd46:	6020      	str	r0, [r4, #0]
 800fd48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd4c:	81a3      	strh	r3, [r4, #12]
 800fd4e:	9b00      	ldr	r3, [sp, #0]
 800fd50:	6163      	str	r3, [r4, #20]
 800fd52:	9b01      	ldr	r3, [sp, #4]
 800fd54:	6120      	str	r0, [r4, #16]
 800fd56:	b15b      	cbz	r3, 800fd70 <__smakebuf_r+0x70>
 800fd58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fd5c:	4630      	mov	r0, r6
 800fd5e:	f000 f81d 	bl	800fd9c <_isatty_r>
 800fd62:	b128      	cbz	r0, 800fd70 <__smakebuf_r+0x70>
 800fd64:	89a3      	ldrh	r3, [r4, #12]
 800fd66:	f023 0303 	bic.w	r3, r3, #3
 800fd6a:	f043 0301 	orr.w	r3, r3, #1
 800fd6e:	81a3      	strh	r3, [r4, #12]
 800fd70:	89a3      	ldrh	r3, [r4, #12]
 800fd72:	431d      	orrs	r5, r3
 800fd74:	81a5      	strh	r5, [r4, #12]
 800fd76:	e7cf      	b.n	800fd18 <__smakebuf_r+0x18>

0800fd78 <_fstat_r>:
 800fd78:	b538      	push	{r3, r4, r5, lr}
 800fd7a:	4d07      	ldr	r5, [pc, #28]	; (800fd98 <_fstat_r+0x20>)
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	4604      	mov	r4, r0
 800fd80:	4608      	mov	r0, r1
 800fd82:	4611      	mov	r1, r2
 800fd84:	602b      	str	r3, [r5, #0]
 800fd86:	f7f4 fd86 	bl	8004896 <_fstat>
 800fd8a:	1c43      	adds	r3, r0, #1
 800fd8c:	d102      	bne.n	800fd94 <_fstat_r+0x1c>
 800fd8e:	682b      	ldr	r3, [r5, #0]
 800fd90:	b103      	cbz	r3, 800fd94 <_fstat_r+0x1c>
 800fd92:	6023      	str	r3, [r4, #0]
 800fd94:	bd38      	pop	{r3, r4, r5, pc}
 800fd96:	bf00      	nop
 800fd98:	20001908 	.word	0x20001908

0800fd9c <_isatty_r>:
 800fd9c:	b538      	push	{r3, r4, r5, lr}
 800fd9e:	4d06      	ldr	r5, [pc, #24]	; (800fdb8 <_isatty_r+0x1c>)
 800fda0:	2300      	movs	r3, #0
 800fda2:	4604      	mov	r4, r0
 800fda4:	4608      	mov	r0, r1
 800fda6:	602b      	str	r3, [r5, #0]
 800fda8:	f7f4 fd85 	bl	80048b6 <_isatty>
 800fdac:	1c43      	adds	r3, r0, #1
 800fdae:	d102      	bne.n	800fdb6 <_isatty_r+0x1a>
 800fdb0:	682b      	ldr	r3, [r5, #0]
 800fdb2:	b103      	cbz	r3, 800fdb6 <_isatty_r+0x1a>
 800fdb4:	6023      	str	r3, [r4, #0]
 800fdb6:	bd38      	pop	{r3, r4, r5, pc}
 800fdb8:	20001908 	.word	0x20001908

0800fdbc <fmod>:
 800fdbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdbe:	ed2d 8b02 	vpush	{d8}
 800fdc2:	ec57 6b10 	vmov	r6, r7, d0
 800fdc6:	ec55 4b11 	vmov	r4, r5, d1
 800fdca:	f000 fba3 	bl	8010514 <__ieee754_fmod>
 800fdce:	4622      	mov	r2, r4
 800fdd0:	462b      	mov	r3, r5
 800fdd2:	4630      	mov	r0, r6
 800fdd4:	4639      	mov	r1, r7
 800fdd6:	eeb0 8a40 	vmov.f32	s16, s0
 800fdda:	eef0 8a60 	vmov.f32	s17, s1
 800fdde:	f7f0 fecd 	bl	8000b7c <__aeabi_dcmpun>
 800fde2:	b990      	cbnz	r0, 800fe0a <fmod+0x4e>
 800fde4:	2200      	movs	r2, #0
 800fde6:	2300      	movs	r3, #0
 800fde8:	4620      	mov	r0, r4
 800fdea:	4629      	mov	r1, r5
 800fdec:	f7f0 fe94 	bl	8000b18 <__aeabi_dcmpeq>
 800fdf0:	b158      	cbz	r0, 800fe0a <fmod+0x4e>
 800fdf2:	f7fd ff3b 	bl	800dc6c <__errno>
 800fdf6:	2321      	movs	r3, #33	; 0x21
 800fdf8:	6003      	str	r3, [r0, #0]
 800fdfa:	2200      	movs	r2, #0
 800fdfc:	2300      	movs	r3, #0
 800fdfe:	4610      	mov	r0, r2
 800fe00:	4619      	mov	r1, r3
 800fe02:	f7f0 fd4b 	bl	800089c <__aeabi_ddiv>
 800fe06:	ec41 0b18 	vmov	d8, r0, r1
 800fe0a:	eeb0 0a48 	vmov.f32	s0, s16
 800fe0e:	eef0 0a68 	vmov.f32	s1, s17
 800fe12:	ecbd 8b02 	vpop	{d8}
 800fe16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fe18 <sqrt>:
 800fe18:	b538      	push	{r3, r4, r5, lr}
 800fe1a:	ed2d 8b02 	vpush	{d8}
 800fe1e:	ec55 4b10 	vmov	r4, r5, d0
 800fe22:	f000 f917 	bl	8010054 <__ieee754_sqrt>
 800fe26:	4622      	mov	r2, r4
 800fe28:	462b      	mov	r3, r5
 800fe2a:	4620      	mov	r0, r4
 800fe2c:	4629      	mov	r1, r5
 800fe2e:	eeb0 8a40 	vmov.f32	s16, s0
 800fe32:	eef0 8a60 	vmov.f32	s17, s1
 800fe36:	f7f0 fea1 	bl	8000b7c <__aeabi_dcmpun>
 800fe3a:	b990      	cbnz	r0, 800fe62 <sqrt+0x4a>
 800fe3c:	2200      	movs	r2, #0
 800fe3e:	2300      	movs	r3, #0
 800fe40:	4620      	mov	r0, r4
 800fe42:	4629      	mov	r1, r5
 800fe44:	f7f0 fe72 	bl	8000b2c <__aeabi_dcmplt>
 800fe48:	b158      	cbz	r0, 800fe62 <sqrt+0x4a>
 800fe4a:	f7fd ff0f 	bl	800dc6c <__errno>
 800fe4e:	2321      	movs	r3, #33	; 0x21
 800fe50:	6003      	str	r3, [r0, #0]
 800fe52:	2200      	movs	r2, #0
 800fe54:	2300      	movs	r3, #0
 800fe56:	4610      	mov	r0, r2
 800fe58:	4619      	mov	r1, r3
 800fe5a:	f7f0 fd1f 	bl	800089c <__aeabi_ddiv>
 800fe5e:	ec41 0b18 	vmov	d8, r0, r1
 800fe62:	eeb0 0a48 	vmov.f32	s0, s16
 800fe66:	eef0 0a68 	vmov.f32	s1, s17
 800fe6a:	ecbd 8b02 	vpop	{d8}
 800fe6e:	bd38      	pop	{r3, r4, r5, pc}

0800fe70 <cos>:
 800fe70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fe72:	ec53 2b10 	vmov	r2, r3, d0
 800fe76:	4826      	ldr	r0, [pc, #152]	; (800ff10 <cos+0xa0>)
 800fe78:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800fe7c:	4281      	cmp	r1, r0
 800fe7e:	dc06      	bgt.n	800fe8e <cos+0x1e>
 800fe80:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800ff08 <cos+0x98>
 800fe84:	b005      	add	sp, #20
 800fe86:	f85d eb04 	ldr.w	lr, [sp], #4
 800fe8a:	f000 b9bd 	b.w	8010208 <__kernel_cos>
 800fe8e:	4821      	ldr	r0, [pc, #132]	; (800ff14 <cos+0xa4>)
 800fe90:	4281      	cmp	r1, r0
 800fe92:	dd09      	ble.n	800fea8 <cos+0x38>
 800fe94:	ee10 0a10 	vmov	r0, s0
 800fe98:	4619      	mov	r1, r3
 800fe9a:	f7f0 fa1d 	bl	80002d8 <__aeabi_dsub>
 800fe9e:	ec41 0b10 	vmov	d0, r0, r1
 800fea2:	b005      	add	sp, #20
 800fea4:	f85d fb04 	ldr.w	pc, [sp], #4
 800fea8:	4668      	mov	r0, sp
 800feaa:	f000 fc41 	bl	8010730 <__ieee754_rem_pio2>
 800feae:	f000 0003 	and.w	r0, r0, #3
 800feb2:	2801      	cmp	r0, #1
 800feb4:	d00b      	beq.n	800fece <cos+0x5e>
 800feb6:	2802      	cmp	r0, #2
 800feb8:	d016      	beq.n	800fee8 <cos+0x78>
 800feba:	b9e0      	cbnz	r0, 800fef6 <cos+0x86>
 800febc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fec0:	ed9d 0b00 	vldr	d0, [sp]
 800fec4:	f000 f9a0 	bl	8010208 <__kernel_cos>
 800fec8:	ec51 0b10 	vmov	r0, r1, d0
 800fecc:	e7e7      	b.n	800fe9e <cos+0x2e>
 800fece:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fed2:	ed9d 0b00 	vldr	d0, [sp]
 800fed6:	f000 fa5f 	bl	8010398 <__kernel_sin>
 800feda:	ec53 2b10 	vmov	r2, r3, d0
 800fede:	ee10 0a10 	vmov	r0, s0
 800fee2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800fee6:	e7da      	b.n	800fe9e <cos+0x2e>
 800fee8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800feec:	ed9d 0b00 	vldr	d0, [sp]
 800fef0:	f000 f98a 	bl	8010208 <__kernel_cos>
 800fef4:	e7f1      	b.n	800feda <cos+0x6a>
 800fef6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fefa:	ed9d 0b00 	vldr	d0, [sp]
 800fefe:	2001      	movs	r0, #1
 800ff00:	f000 fa4a 	bl	8010398 <__kernel_sin>
 800ff04:	e7e0      	b.n	800fec8 <cos+0x58>
 800ff06:	bf00      	nop
	...
 800ff10:	3fe921fb 	.word	0x3fe921fb
 800ff14:	7fefffff 	.word	0x7fefffff

0800ff18 <sin>:
 800ff18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ff1a:	ec53 2b10 	vmov	r2, r3, d0
 800ff1e:	4828      	ldr	r0, [pc, #160]	; (800ffc0 <sin+0xa8>)
 800ff20:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ff24:	4281      	cmp	r1, r0
 800ff26:	dc07      	bgt.n	800ff38 <sin+0x20>
 800ff28:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800ffb8 <sin+0xa0>
 800ff2c:	2000      	movs	r0, #0
 800ff2e:	b005      	add	sp, #20
 800ff30:	f85d eb04 	ldr.w	lr, [sp], #4
 800ff34:	f000 ba30 	b.w	8010398 <__kernel_sin>
 800ff38:	4822      	ldr	r0, [pc, #136]	; (800ffc4 <sin+0xac>)
 800ff3a:	4281      	cmp	r1, r0
 800ff3c:	dd09      	ble.n	800ff52 <sin+0x3a>
 800ff3e:	ee10 0a10 	vmov	r0, s0
 800ff42:	4619      	mov	r1, r3
 800ff44:	f7f0 f9c8 	bl	80002d8 <__aeabi_dsub>
 800ff48:	ec41 0b10 	vmov	d0, r0, r1
 800ff4c:	b005      	add	sp, #20
 800ff4e:	f85d fb04 	ldr.w	pc, [sp], #4
 800ff52:	4668      	mov	r0, sp
 800ff54:	f000 fbec 	bl	8010730 <__ieee754_rem_pio2>
 800ff58:	f000 0003 	and.w	r0, r0, #3
 800ff5c:	2801      	cmp	r0, #1
 800ff5e:	d00c      	beq.n	800ff7a <sin+0x62>
 800ff60:	2802      	cmp	r0, #2
 800ff62:	d011      	beq.n	800ff88 <sin+0x70>
 800ff64:	b9f0      	cbnz	r0, 800ffa4 <sin+0x8c>
 800ff66:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ff6a:	ed9d 0b00 	vldr	d0, [sp]
 800ff6e:	2001      	movs	r0, #1
 800ff70:	f000 fa12 	bl	8010398 <__kernel_sin>
 800ff74:	ec51 0b10 	vmov	r0, r1, d0
 800ff78:	e7e6      	b.n	800ff48 <sin+0x30>
 800ff7a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ff7e:	ed9d 0b00 	vldr	d0, [sp]
 800ff82:	f000 f941 	bl	8010208 <__kernel_cos>
 800ff86:	e7f5      	b.n	800ff74 <sin+0x5c>
 800ff88:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ff8c:	ed9d 0b00 	vldr	d0, [sp]
 800ff90:	2001      	movs	r0, #1
 800ff92:	f000 fa01 	bl	8010398 <__kernel_sin>
 800ff96:	ec53 2b10 	vmov	r2, r3, d0
 800ff9a:	ee10 0a10 	vmov	r0, s0
 800ff9e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ffa2:	e7d1      	b.n	800ff48 <sin+0x30>
 800ffa4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ffa8:	ed9d 0b00 	vldr	d0, [sp]
 800ffac:	f000 f92c 	bl	8010208 <__kernel_cos>
 800ffb0:	e7f1      	b.n	800ff96 <sin+0x7e>
 800ffb2:	bf00      	nop
 800ffb4:	f3af 8000 	nop.w
	...
 800ffc0:	3fe921fb 	.word	0x3fe921fb
 800ffc4:	7fefffff 	.word	0x7fefffff

0800ffc8 <sinf>:
 800ffc8:	ee10 3a10 	vmov	r3, s0
 800ffcc:	b507      	push	{r0, r1, r2, lr}
 800ffce:	4a1f      	ldr	r2, [pc, #124]	; (801004c <sinf+0x84>)
 800ffd0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ffd4:	4293      	cmp	r3, r2
 800ffd6:	dc07      	bgt.n	800ffe8 <sinf+0x20>
 800ffd8:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8010050 <sinf+0x88>
 800ffdc:	2000      	movs	r0, #0
 800ffde:	b003      	add	sp, #12
 800ffe0:	f85d eb04 	ldr.w	lr, [sp], #4
 800ffe4:	f000 be12 	b.w	8010c0c <__kernel_sinf>
 800ffe8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ffec:	db04      	blt.n	800fff8 <sinf+0x30>
 800ffee:	ee30 0a40 	vsub.f32	s0, s0, s0
 800fff2:	b003      	add	sp, #12
 800fff4:	f85d fb04 	ldr.w	pc, [sp], #4
 800fff8:	4668      	mov	r0, sp
 800fffa:	f000 fe4f 	bl	8010c9c <__ieee754_rem_pio2f>
 800fffe:	f000 0003 	and.w	r0, r0, #3
 8010002:	2801      	cmp	r0, #1
 8010004:	d00a      	beq.n	801001c <sinf+0x54>
 8010006:	2802      	cmp	r0, #2
 8010008:	d00f      	beq.n	801002a <sinf+0x62>
 801000a:	b9c0      	cbnz	r0, 801003e <sinf+0x76>
 801000c:	eddd 0a01 	vldr	s1, [sp, #4]
 8010010:	ed9d 0a00 	vldr	s0, [sp]
 8010014:	2001      	movs	r0, #1
 8010016:	f000 fdf9 	bl	8010c0c <__kernel_sinf>
 801001a:	e7ea      	b.n	800fff2 <sinf+0x2a>
 801001c:	eddd 0a01 	vldr	s1, [sp, #4]
 8010020:	ed9d 0a00 	vldr	s0, [sp]
 8010024:	f000 fd94 	bl	8010b50 <__kernel_cosf>
 8010028:	e7e3      	b.n	800fff2 <sinf+0x2a>
 801002a:	eddd 0a01 	vldr	s1, [sp, #4]
 801002e:	ed9d 0a00 	vldr	s0, [sp]
 8010032:	2001      	movs	r0, #1
 8010034:	f000 fdea 	bl	8010c0c <__kernel_sinf>
 8010038:	eeb1 0a40 	vneg.f32	s0, s0
 801003c:	e7d9      	b.n	800fff2 <sinf+0x2a>
 801003e:	eddd 0a01 	vldr	s1, [sp, #4]
 8010042:	ed9d 0a00 	vldr	s0, [sp]
 8010046:	f000 fd83 	bl	8010b50 <__kernel_cosf>
 801004a:	e7f5      	b.n	8010038 <sinf+0x70>
 801004c:	3f490fd8 	.word	0x3f490fd8
 8010050:	00000000 	.word	0x00000000

08010054 <__ieee754_sqrt>:
 8010054:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010058:	ec55 4b10 	vmov	r4, r5, d0
 801005c:	4e67      	ldr	r6, [pc, #412]	; (80101fc <__ieee754_sqrt+0x1a8>)
 801005e:	43ae      	bics	r6, r5
 8010060:	ee10 0a10 	vmov	r0, s0
 8010064:	ee10 2a10 	vmov	r2, s0
 8010068:	4629      	mov	r1, r5
 801006a:	462b      	mov	r3, r5
 801006c:	d10d      	bne.n	801008a <__ieee754_sqrt+0x36>
 801006e:	f7f0 faeb 	bl	8000648 <__aeabi_dmul>
 8010072:	4602      	mov	r2, r0
 8010074:	460b      	mov	r3, r1
 8010076:	4620      	mov	r0, r4
 8010078:	4629      	mov	r1, r5
 801007a:	f7f0 f92f 	bl	80002dc <__adddf3>
 801007e:	4604      	mov	r4, r0
 8010080:	460d      	mov	r5, r1
 8010082:	ec45 4b10 	vmov	d0, r4, r5
 8010086:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801008a:	2d00      	cmp	r5, #0
 801008c:	dc0b      	bgt.n	80100a6 <__ieee754_sqrt+0x52>
 801008e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010092:	4326      	orrs	r6, r4
 8010094:	d0f5      	beq.n	8010082 <__ieee754_sqrt+0x2e>
 8010096:	b135      	cbz	r5, 80100a6 <__ieee754_sqrt+0x52>
 8010098:	f7f0 f91e 	bl	80002d8 <__aeabi_dsub>
 801009c:	4602      	mov	r2, r0
 801009e:	460b      	mov	r3, r1
 80100a0:	f7f0 fbfc 	bl	800089c <__aeabi_ddiv>
 80100a4:	e7eb      	b.n	801007e <__ieee754_sqrt+0x2a>
 80100a6:	1509      	asrs	r1, r1, #20
 80100a8:	f000 808d 	beq.w	80101c6 <__ieee754_sqrt+0x172>
 80100ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80100b0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80100b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80100b8:	07c9      	lsls	r1, r1, #31
 80100ba:	bf5c      	itt	pl
 80100bc:	005b      	lslpl	r3, r3, #1
 80100be:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80100c2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80100c6:	bf58      	it	pl
 80100c8:	0052      	lslpl	r2, r2, #1
 80100ca:	2500      	movs	r5, #0
 80100cc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80100d0:	1076      	asrs	r6, r6, #1
 80100d2:	0052      	lsls	r2, r2, #1
 80100d4:	f04f 0e16 	mov.w	lr, #22
 80100d8:	46ac      	mov	ip, r5
 80100da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80100de:	eb0c 0001 	add.w	r0, ip, r1
 80100e2:	4298      	cmp	r0, r3
 80100e4:	bfde      	ittt	le
 80100e6:	1a1b      	suble	r3, r3, r0
 80100e8:	eb00 0c01 	addle.w	ip, r0, r1
 80100ec:	186d      	addle	r5, r5, r1
 80100ee:	005b      	lsls	r3, r3, #1
 80100f0:	f1be 0e01 	subs.w	lr, lr, #1
 80100f4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80100f8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80100fc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8010100:	d1ed      	bne.n	80100de <__ieee754_sqrt+0x8a>
 8010102:	4674      	mov	r4, lr
 8010104:	2720      	movs	r7, #32
 8010106:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801010a:	4563      	cmp	r3, ip
 801010c:	eb01 000e 	add.w	r0, r1, lr
 8010110:	dc02      	bgt.n	8010118 <__ieee754_sqrt+0xc4>
 8010112:	d113      	bne.n	801013c <__ieee754_sqrt+0xe8>
 8010114:	4290      	cmp	r0, r2
 8010116:	d811      	bhi.n	801013c <__ieee754_sqrt+0xe8>
 8010118:	2800      	cmp	r0, #0
 801011a:	eb00 0e01 	add.w	lr, r0, r1
 801011e:	da57      	bge.n	80101d0 <__ieee754_sqrt+0x17c>
 8010120:	f1be 0f00 	cmp.w	lr, #0
 8010124:	db54      	blt.n	80101d0 <__ieee754_sqrt+0x17c>
 8010126:	f10c 0801 	add.w	r8, ip, #1
 801012a:	eba3 030c 	sub.w	r3, r3, ip
 801012e:	4290      	cmp	r0, r2
 8010130:	bf88      	it	hi
 8010132:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8010136:	1a12      	subs	r2, r2, r0
 8010138:	440c      	add	r4, r1
 801013a:	46c4      	mov	ip, r8
 801013c:	005b      	lsls	r3, r3, #1
 801013e:	3f01      	subs	r7, #1
 8010140:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8010144:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8010148:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801014c:	d1dd      	bne.n	801010a <__ieee754_sqrt+0xb6>
 801014e:	4313      	orrs	r3, r2
 8010150:	d01b      	beq.n	801018a <__ieee754_sqrt+0x136>
 8010152:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8010200 <__ieee754_sqrt+0x1ac>
 8010156:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8010204 <__ieee754_sqrt+0x1b0>
 801015a:	e9da 0100 	ldrd	r0, r1, [sl]
 801015e:	e9db 2300 	ldrd	r2, r3, [fp]
 8010162:	f7f0 f8b9 	bl	80002d8 <__aeabi_dsub>
 8010166:	e9da 8900 	ldrd	r8, r9, [sl]
 801016a:	4602      	mov	r2, r0
 801016c:	460b      	mov	r3, r1
 801016e:	4640      	mov	r0, r8
 8010170:	4649      	mov	r1, r9
 8010172:	f7f0 fce5 	bl	8000b40 <__aeabi_dcmple>
 8010176:	b140      	cbz	r0, 801018a <__ieee754_sqrt+0x136>
 8010178:	f1b4 3fff 	cmp.w	r4, #4294967295
 801017c:	e9da 0100 	ldrd	r0, r1, [sl]
 8010180:	e9db 2300 	ldrd	r2, r3, [fp]
 8010184:	d126      	bne.n	80101d4 <__ieee754_sqrt+0x180>
 8010186:	3501      	adds	r5, #1
 8010188:	463c      	mov	r4, r7
 801018a:	106a      	asrs	r2, r5, #1
 801018c:	0863      	lsrs	r3, r4, #1
 801018e:	07e9      	lsls	r1, r5, #31
 8010190:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8010194:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8010198:	bf48      	it	mi
 801019a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801019e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80101a2:	461c      	mov	r4, r3
 80101a4:	e76d      	b.n	8010082 <__ieee754_sqrt+0x2e>
 80101a6:	0ad3      	lsrs	r3, r2, #11
 80101a8:	3815      	subs	r0, #21
 80101aa:	0552      	lsls	r2, r2, #21
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d0fa      	beq.n	80101a6 <__ieee754_sqrt+0x152>
 80101b0:	02dc      	lsls	r4, r3, #11
 80101b2:	d50a      	bpl.n	80101ca <__ieee754_sqrt+0x176>
 80101b4:	f1c1 0420 	rsb	r4, r1, #32
 80101b8:	fa22 f404 	lsr.w	r4, r2, r4
 80101bc:	1e4d      	subs	r5, r1, #1
 80101be:	408a      	lsls	r2, r1
 80101c0:	4323      	orrs	r3, r4
 80101c2:	1b41      	subs	r1, r0, r5
 80101c4:	e772      	b.n	80100ac <__ieee754_sqrt+0x58>
 80101c6:	4608      	mov	r0, r1
 80101c8:	e7f0      	b.n	80101ac <__ieee754_sqrt+0x158>
 80101ca:	005b      	lsls	r3, r3, #1
 80101cc:	3101      	adds	r1, #1
 80101ce:	e7ef      	b.n	80101b0 <__ieee754_sqrt+0x15c>
 80101d0:	46e0      	mov	r8, ip
 80101d2:	e7aa      	b.n	801012a <__ieee754_sqrt+0xd6>
 80101d4:	f7f0 f882 	bl	80002dc <__adddf3>
 80101d8:	e9da 8900 	ldrd	r8, r9, [sl]
 80101dc:	4602      	mov	r2, r0
 80101de:	460b      	mov	r3, r1
 80101e0:	4640      	mov	r0, r8
 80101e2:	4649      	mov	r1, r9
 80101e4:	f7f0 fca2 	bl	8000b2c <__aeabi_dcmplt>
 80101e8:	b120      	cbz	r0, 80101f4 <__ieee754_sqrt+0x1a0>
 80101ea:	1ca0      	adds	r0, r4, #2
 80101ec:	bf08      	it	eq
 80101ee:	3501      	addeq	r5, #1
 80101f0:	3402      	adds	r4, #2
 80101f2:	e7ca      	b.n	801018a <__ieee754_sqrt+0x136>
 80101f4:	3401      	adds	r4, #1
 80101f6:	f024 0401 	bic.w	r4, r4, #1
 80101fa:	e7c6      	b.n	801018a <__ieee754_sqrt+0x136>
 80101fc:	7ff00000 	.word	0x7ff00000
 8010200:	200001e0 	.word	0x200001e0
 8010204:	200001e8 	.word	0x200001e8

08010208 <__kernel_cos>:
 8010208:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801020c:	ec57 6b10 	vmov	r6, r7, d0
 8010210:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8010214:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8010218:	ed8d 1b00 	vstr	d1, [sp]
 801021c:	da07      	bge.n	801022e <__kernel_cos+0x26>
 801021e:	ee10 0a10 	vmov	r0, s0
 8010222:	4639      	mov	r1, r7
 8010224:	f7f0 fcc0 	bl	8000ba8 <__aeabi_d2iz>
 8010228:	2800      	cmp	r0, #0
 801022a:	f000 8088 	beq.w	801033e <__kernel_cos+0x136>
 801022e:	4632      	mov	r2, r6
 8010230:	463b      	mov	r3, r7
 8010232:	4630      	mov	r0, r6
 8010234:	4639      	mov	r1, r7
 8010236:	f7f0 fa07 	bl	8000648 <__aeabi_dmul>
 801023a:	4b51      	ldr	r3, [pc, #324]	; (8010380 <__kernel_cos+0x178>)
 801023c:	2200      	movs	r2, #0
 801023e:	4604      	mov	r4, r0
 8010240:	460d      	mov	r5, r1
 8010242:	f7f0 fa01 	bl	8000648 <__aeabi_dmul>
 8010246:	a340      	add	r3, pc, #256	; (adr r3, 8010348 <__kernel_cos+0x140>)
 8010248:	e9d3 2300 	ldrd	r2, r3, [r3]
 801024c:	4682      	mov	sl, r0
 801024e:	468b      	mov	fp, r1
 8010250:	4620      	mov	r0, r4
 8010252:	4629      	mov	r1, r5
 8010254:	f7f0 f9f8 	bl	8000648 <__aeabi_dmul>
 8010258:	a33d      	add	r3, pc, #244	; (adr r3, 8010350 <__kernel_cos+0x148>)
 801025a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801025e:	f7f0 f83d 	bl	80002dc <__adddf3>
 8010262:	4622      	mov	r2, r4
 8010264:	462b      	mov	r3, r5
 8010266:	f7f0 f9ef 	bl	8000648 <__aeabi_dmul>
 801026a:	a33b      	add	r3, pc, #236	; (adr r3, 8010358 <__kernel_cos+0x150>)
 801026c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010270:	f7f0 f832 	bl	80002d8 <__aeabi_dsub>
 8010274:	4622      	mov	r2, r4
 8010276:	462b      	mov	r3, r5
 8010278:	f7f0 f9e6 	bl	8000648 <__aeabi_dmul>
 801027c:	a338      	add	r3, pc, #224	; (adr r3, 8010360 <__kernel_cos+0x158>)
 801027e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010282:	f7f0 f82b 	bl	80002dc <__adddf3>
 8010286:	4622      	mov	r2, r4
 8010288:	462b      	mov	r3, r5
 801028a:	f7f0 f9dd 	bl	8000648 <__aeabi_dmul>
 801028e:	a336      	add	r3, pc, #216	; (adr r3, 8010368 <__kernel_cos+0x160>)
 8010290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010294:	f7f0 f820 	bl	80002d8 <__aeabi_dsub>
 8010298:	4622      	mov	r2, r4
 801029a:	462b      	mov	r3, r5
 801029c:	f7f0 f9d4 	bl	8000648 <__aeabi_dmul>
 80102a0:	a333      	add	r3, pc, #204	; (adr r3, 8010370 <__kernel_cos+0x168>)
 80102a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102a6:	f7f0 f819 	bl	80002dc <__adddf3>
 80102aa:	4622      	mov	r2, r4
 80102ac:	462b      	mov	r3, r5
 80102ae:	f7f0 f9cb 	bl	8000648 <__aeabi_dmul>
 80102b2:	4622      	mov	r2, r4
 80102b4:	462b      	mov	r3, r5
 80102b6:	f7f0 f9c7 	bl	8000648 <__aeabi_dmul>
 80102ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80102be:	4604      	mov	r4, r0
 80102c0:	460d      	mov	r5, r1
 80102c2:	4630      	mov	r0, r6
 80102c4:	4639      	mov	r1, r7
 80102c6:	f7f0 f9bf 	bl	8000648 <__aeabi_dmul>
 80102ca:	460b      	mov	r3, r1
 80102cc:	4602      	mov	r2, r0
 80102ce:	4629      	mov	r1, r5
 80102d0:	4620      	mov	r0, r4
 80102d2:	f7f0 f801 	bl	80002d8 <__aeabi_dsub>
 80102d6:	4b2b      	ldr	r3, [pc, #172]	; (8010384 <__kernel_cos+0x17c>)
 80102d8:	4598      	cmp	r8, r3
 80102da:	4606      	mov	r6, r0
 80102dc:	460f      	mov	r7, r1
 80102de:	dc10      	bgt.n	8010302 <__kernel_cos+0xfa>
 80102e0:	4602      	mov	r2, r0
 80102e2:	460b      	mov	r3, r1
 80102e4:	4650      	mov	r0, sl
 80102e6:	4659      	mov	r1, fp
 80102e8:	f7ef fff6 	bl	80002d8 <__aeabi_dsub>
 80102ec:	460b      	mov	r3, r1
 80102ee:	4926      	ldr	r1, [pc, #152]	; (8010388 <__kernel_cos+0x180>)
 80102f0:	4602      	mov	r2, r0
 80102f2:	2000      	movs	r0, #0
 80102f4:	f7ef fff0 	bl	80002d8 <__aeabi_dsub>
 80102f8:	ec41 0b10 	vmov	d0, r0, r1
 80102fc:	b003      	add	sp, #12
 80102fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010302:	4b22      	ldr	r3, [pc, #136]	; (801038c <__kernel_cos+0x184>)
 8010304:	4920      	ldr	r1, [pc, #128]	; (8010388 <__kernel_cos+0x180>)
 8010306:	4598      	cmp	r8, r3
 8010308:	bfcc      	ite	gt
 801030a:	4d21      	ldrgt	r5, [pc, #132]	; (8010390 <__kernel_cos+0x188>)
 801030c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8010310:	2400      	movs	r4, #0
 8010312:	4622      	mov	r2, r4
 8010314:	462b      	mov	r3, r5
 8010316:	2000      	movs	r0, #0
 8010318:	f7ef ffde 	bl	80002d8 <__aeabi_dsub>
 801031c:	4622      	mov	r2, r4
 801031e:	4680      	mov	r8, r0
 8010320:	4689      	mov	r9, r1
 8010322:	462b      	mov	r3, r5
 8010324:	4650      	mov	r0, sl
 8010326:	4659      	mov	r1, fp
 8010328:	f7ef ffd6 	bl	80002d8 <__aeabi_dsub>
 801032c:	4632      	mov	r2, r6
 801032e:	463b      	mov	r3, r7
 8010330:	f7ef ffd2 	bl	80002d8 <__aeabi_dsub>
 8010334:	4602      	mov	r2, r0
 8010336:	460b      	mov	r3, r1
 8010338:	4640      	mov	r0, r8
 801033a:	4649      	mov	r1, r9
 801033c:	e7da      	b.n	80102f4 <__kernel_cos+0xec>
 801033e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8010378 <__kernel_cos+0x170>
 8010342:	e7db      	b.n	80102fc <__kernel_cos+0xf4>
 8010344:	f3af 8000 	nop.w
 8010348:	be8838d4 	.word	0xbe8838d4
 801034c:	bda8fae9 	.word	0xbda8fae9
 8010350:	bdb4b1c4 	.word	0xbdb4b1c4
 8010354:	3e21ee9e 	.word	0x3e21ee9e
 8010358:	809c52ad 	.word	0x809c52ad
 801035c:	3e927e4f 	.word	0x3e927e4f
 8010360:	19cb1590 	.word	0x19cb1590
 8010364:	3efa01a0 	.word	0x3efa01a0
 8010368:	16c15177 	.word	0x16c15177
 801036c:	3f56c16c 	.word	0x3f56c16c
 8010370:	5555554c 	.word	0x5555554c
 8010374:	3fa55555 	.word	0x3fa55555
 8010378:	00000000 	.word	0x00000000
 801037c:	3ff00000 	.word	0x3ff00000
 8010380:	3fe00000 	.word	0x3fe00000
 8010384:	3fd33332 	.word	0x3fd33332
 8010388:	3ff00000 	.word	0x3ff00000
 801038c:	3fe90000 	.word	0x3fe90000
 8010390:	3fd20000 	.word	0x3fd20000
 8010394:	00000000 	.word	0x00000000

08010398 <__kernel_sin>:
 8010398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801039c:	ed2d 8b04 	vpush	{d8-d9}
 80103a0:	eeb0 8a41 	vmov.f32	s16, s2
 80103a4:	eef0 8a61 	vmov.f32	s17, s3
 80103a8:	ec55 4b10 	vmov	r4, r5, d0
 80103ac:	b083      	sub	sp, #12
 80103ae:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80103b2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80103b6:	9001      	str	r0, [sp, #4]
 80103b8:	da06      	bge.n	80103c8 <__kernel_sin+0x30>
 80103ba:	ee10 0a10 	vmov	r0, s0
 80103be:	4629      	mov	r1, r5
 80103c0:	f7f0 fbf2 	bl	8000ba8 <__aeabi_d2iz>
 80103c4:	2800      	cmp	r0, #0
 80103c6:	d051      	beq.n	801046c <__kernel_sin+0xd4>
 80103c8:	4622      	mov	r2, r4
 80103ca:	462b      	mov	r3, r5
 80103cc:	4620      	mov	r0, r4
 80103ce:	4629      	mov	r1, r5
 80103d0:	f7f0 f93a 	bl	8000648 <__aeabi_dmul>
 80103d4:	4682      	mov	sl, r0
 80103d6:	468b      	mov	fp, r1
 80103d8:	4602      	mov	r2, r0
 80103da:	460b      	mov	r3, r1
 80103dc:	4620      	mov	r0, r4
 80103de:	4629      	mov	r1, r5
 80103e0:	f7f0 f932 	bl	8000648 <__aeabi_dmul>
 80103e4:	a341      	add	r3, pc, #260	; (adr r3, 80104ec <__kernel_sin+0x154>)
 80103e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103ea:	4680      	mov	r8, r0
 80103ec:	4689      	mov	r9, r1
 80103ee:	4650      	mov	r0, sl
 80103f0:	4659      	mov	r1, fp
 80103f2:	f7f0 f929 	bl	8000648 <__aeabi_dmul>
 80103f6:	a33f      	add	r3, pc, #252	; (adr r3, 80104f4 <__kernel_sin+0x15c>)
 80103f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103fc:	f7ef ff6c 	bl	80002d8 <__aeabi_dsub>
 8010400:	4652      	mov	r2, sl
 8010402:	465b      	mov	r3, fp
 8010404:	f7f0 f920 	bl	8000648 <__aeabi_dmul>
 8010408:	a33c      	add	r3, pc, #240	; (adr r3, 80104fc <__kernel_sin+0x164>)
 801040a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801040e:	f7ef ff65 	bl	80002dc <__adddf3>
 8010412:	4652      	mov	r2, sl
 8010414:	465b      	mov	r3, fp
 8010416:	f7f0 f917 	bl	8000648 <__aeabi_dmul>
 801041a:	a33a      	add	r3, pc, #232	; (adr r3, 8010504 <__kernel_sin+0x16c>)
 801041c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010420:	f7ef ff5a 	bl	80002d8 <__aeabi_dsub>
 8010424:	4652      	mov	r2, sl
 8010426:	465b      	mov	r3, fp
 8010428:	f7f0 f90e 	bl	8000648 <__aeabi_dmul>
 801042c:	a337      	add	r3, pc, #220	; (adr r3, 801050c <__kernel_sin+0x174>)
 801042e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010432:	f7ef ff53 	bl	80002dc <__adddf3>
 8010436:	9b01      	ldr	r3, [sp, #4]
 8010438:	4606      	mov	r6, r0
 801043a:	460f      	mov	r7, r1
 801043c:	b9eb      	cbnz	r3, 801047a <__kernel_sin+0xe2>
 801043e:	4602      	mov	r2, r0
 8010440:	460b      	mov	r3, r1
 8010442:	4650      	mov	r0, sl
 8010444:	4659      	mov	r1, fp
 8010446:	f7f0 f8ff 	bl	8000648 <__aeabi_dmul>
 801044a:	a325      	add	r3, pc, #148	; (adr r3, 80104e0 <__kernel_sin+0x148>)
 801044c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010450:	f7ef ff42 	bl	80002d8 <__aeabi_dsub>
 8010454:	4642      	mov	r2, r8
 8010456:	464b      	mov	r3, r9
 8010458:	f7f0 f8f6 	bl	8000648 <__aeabi_dmul>
 801045c:	4602      	mov	r2, r0
 801045e:	460b      	mov	r3, r1
 8010460:	4620      	mov	r0, r4
 8010462:	4629      	mov	r1, r5
 8010464:	f7ef ff3a 	bl	80002dc <__adddf3>
 8010468:	4604      	mov	r4, r0
 801046a:	460d      	mov	r5, r1
 801046c:	ec45 4b10 	vmov	d0, r4, r5
 8010470:	b003      	add	sp, #12
 8010472:	ecbd 8b04 	vpop	{d8-d9}
 8010476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801047a:	4b1b      	ldr	r3, [pc, #108]	; (80104e8 <__kernel_sin+0x150>)
 801047c:	ec51 0b18 	vmov	r0, r1, d8
 8010480:	2200      	movs	r2, #0
 8010482:	f7f0 f8e1 	bl	8000648 <__aeabi_dmul>
 8010486:	4632      	mov	r2, r6
 8010488:	ec41 0b19 	vmov	d9, r0, r1
 801048c:	463b      	mov	r3, r7
 801048e:	4640      	mov	r0, r8
 8010490:	4649      	mov	r1, r9
 8010492:	f7f0 f8d9 	bl	8000648 <__aeabi_dmul>
 8010496:	4602      	mov	r2, r0
 8010498:	460b      	mov	r3, r1
 801049a:	ec51 0b19 	vmov	r0, r1, d9
 801049e:	f7ef ff1b 	bl	80002d8 <__aeabi_dsub>
 80104a2:	4652      	mov	r2, sl
 80104a4:	465b      	mov	r3, fp
 80104a6:	f7f0 f8cf 	bl	8000648 <__aeabi_dmul>
 80104aa:	ec53 2b18 	vmov	r2, r3, d8
 80104ae:	f7ef ff13 	bl	80002d8 <__aeabi_dsub>
 80104b2:	a30b      	add	r3, pc, #44	; (adr r3, 80104e0 <__kernel_sin+0x148>)
 80104b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104b8:	4606      	mov	r6, r0
 80104ba:	460f      	mov	r7, r1
 80104bc:	4640      	mov	r0, r8
 80104be:	4649      	mov	r1, r9
 80104c0:	f7f0 f8c2 	bl	8000648 <__aeabi_dmul>
 80104c4:	4602      	mov	r2, r0
 80104c6:	460b      	mov	r3, r1
 80104c8:	4630      	mov	r0, r6
 80104ca:	4639      	mov	r1, r7
 80104cc:	f7ef ff06 	bl	80002dc <__adddf3>
 80104d0:	4602      	mov	r2, r0
 80104d2:	460b      	mov	r3, r1
 80104d4:	4620      	mov	r0, r4
 80104d6:	4629      	mov	r1, r5
 80104d8:	f7ef fefe 	bl	80002d8 <__aeabi_dsub>
 80104dc:	e7c4      	b.n	8010468 <__kernel_sin+0xd0>
 80104de:	bf00      	nop
 80104e0:	55555549 	.word	0x55555549
 80104e4:	3fc55555 	.word	0x3fc55555
 80104e8:	3fe00000 	.word	0x3fe00000
 80104ec:	5acfd57c 	.word	0x5acfd57c
 80104f0:	3de5d93a 	.word	0x3de5d93a
 80104f4:	8a2b9ceb 	.word	0x8a2b9ceb
 80104f8:	3e5ae5e6 	.word	0x3e5ae5e6
 80104fc:	57b1fe7d 	.word	0x57b1fe7d
 8010500:	3ec71de3 	.word	0x3ec71de3
 8010504:	19c161d5 	.word	0x19c161d5
 8010508:	3f2a01a0 	.word	0x3f2a01a0
 801050c:	1110f8a6 	.word	0x1110f8a6
 8010510:	3f811111 	.word	0x3f811111

08010514 <__ieee754_fmod>:
 8010514:	ec53 2b11 	vmov	r2, r3, d1
 8010518:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 801051c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010520:	ea5c 0402 	orrs.w	r4, ip, r2
 8010524:	ec51 0b10 	vmov	r0, r1, d0
 8010528:	ee11 7a10 	vmov	r7, s2
 801052c:	ee11 ea10 	vmov	lr, s2
 8010530:	461e      	mov	r6, r3
 8010532:	d00c      	beq.n	801054e <__ieee754_fmod+0x3a>
 8010534:	4c78      	ldr	r4, [pc, #480]	; (8010718 <__ieee754_fmod+0x204>)
 8010536:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 801053a:	45a0      	cmp	r8, r4
 801053c:	4689      	mov	r9, r1
 801053e:	dc06      	bgt.n	801054e <__ieee754_fmod+0x3a>
 8010540:	4254      	negs	r4, r2
 8010542:	4d76      	ldr	r5, [pc, #472]	; (801071c <__ieee754_fmod+0x208>)
 8010544:	4314      	orrs	r4, r2
 8010546:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 801054a:	42ac      	cmp	r4, r5
 801054c:	d909      	bls.n	8010562 <__ieee754_fmod+0x4e>
 801054e:	f7f0 f87b 	bl	8000648 <__aeabi_dmul>
 8010552:	4602      	mov	r2, r0
 8010554:	460b      	mov	r3, r1
 8010556:	f7f0 f9a1 	bl	800089c <__aeabi_ddiv>
 801055a:	ec41 0b10 	vmov	d0, r0, r1
 801055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010562:	45e0      	cmp	r8, ip
 8010564:	ee10 aa10 	vmov	sl, s0
 8010568:	ee10 4a10 	vmov	r4, s0
 801056c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8010570:	dc09      	bgt.n	8010586 <__ieee754_fmod+0x72>
 8010572:	dbf2      	blt.n	801055a <__ieee754_fmod+0x46>
 8010574:	4290      	cmp	r0, r2
 8010576:	d3f0      	bcc.n	801055a <__ieee754_fmod+0x46>
 8010578:	d105      	bne.n	8010586 <__ieee754_fmod+0x72>
 801057a:	4b69      	ldr	r3, [pc, #420]	; (8010720 <__ieee754_fmod+0x20c>)
 801057c:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 8010580:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010584:	e7e9      	b.n	801055a <__ieee754_fmod+0x46>
 8010586:	4a65      	ldr	r2, [pc, #404]	; (801071c <__ieee754_fmod+0x208>)
 8010588:	ea19 0f02 	tst.w	r9, r2
 801058c:	d148      	bne.n	8010620 <__ieee754_fmod+0x10c>
 801058e:	f1b8 0f00 	cmp.w	r8, #0
 8010592:	d13d      	bne.n	8010610 <__ieee754_fmod+0xfc>
 8010594:	4963      	ldr	r1, [pc, #396]	; (8010724 <__ieee754_fmod+0x210>)
 8010596:	4653      	mov	r3, sl
 8010598:	2b00      	cmp	r3, #0
 801059a:	dc36      	bgt.n	801060a <__ieee754_fmod+0xf6>
 801059c:	4216      	tst	r6, r2
 801059e:	d14f      	bne.n	8010640 <__ieee754_fmod+0x12c>
 80105a0:	f1bc 0f00 	cmp.w	ip, #0
 80105a4:	d144      	bne.n	8010630 <__ieee754_fmod+0x11c>
 80105a6:	4a5f      	ldr	r2, [pc, #380]	; (8010724 <__ieee754_fmod+0x210>)
 80105a8:	463b      	mov	r3, r7
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	dc3d      	bgt.n	801062a <__ieee754_fmod+0x116>
 80105ae:	485e      	ldr	r0, [pc, #376]	; (8010728 <__ieee754_fmod+0x214>)
 80105b0:	4281      	cmp	r1, r0
 80105b2:	db4a      	blt.n	801064a <__ieee754_fmod+0x136>
 80105b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80105b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80105bc:	485a      	ldr	r0, [pc, #360]	; (8010728 <__ieee754_fmod+0x214>)
 80105be:	4282      	cmp	r2, r0
 80105c0:	db57      	blt.n	8010672 <__ieee754_fmod+0x15e>
 80105c2:	f3c6 0613 	ubfx	r6, r6, #0, #20
 80105c6:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 80105ca:	1a89      	subs	r1, r1, r2
 80105cc:	1b98      	subs	r0, r3, r6
 80105ce:	eba4 070e 	sub.w	r7, r4, lr
 80105d2:	2900      	cmp	r1, #0
 80105d4:	d162      	bne.n	801069c <__ieee754_fmod+0x188>
 80105d6:	4574      	cmp	r4, lr
 80105d8:	bf38      	it	cc
 80105da:	f100 30ff 	addcc.w	r0, r0, #4294967295
 80105de:	2800      	cmp	r0, #0
 80105e0:	bfa4      	itt	ge
 80105e2:	463c      	movge	r4, r7
 80105e4:	4603      	movge	r3, r0
 80105e6:	ea53 0104 	orrs.w	r1, r3, r4
 80105ea:	d0c6      	beq.n	801057a <__ieee754_fmod+0x66>
 80105ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80105f0:	db69      	blt.n	80106c6 <__ieee754_fmod+0x1b2>
 80105f2:	494d      	ldr	r1, [pc, #308]	; (8010728 <__ieee754_fmod+0x214>)
 80105f4:	428a      	cmp	r2, r1
 80105f6:	db6c      	blt.n	80106d2 <__ieee754_fmod+0x1be>
 80105f8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80105fc:	432b      	orrs	r3, r5
 80105fe:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8010602:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8010606:	4620      	mov	r0, r4
 8010608:	e7a7      	b.n	801055a <__ieee754_fmod+0x46>
 801060a:	3901      	subs	r1, #1
 801060c:	005b      	lsls	r3, r3, #1
 801060e:	e7c3      	b.n	8010598 <__ieee754_fmod+0x84>
 8010610:	4945      	ldr	r1, [pc, #276]	; (8010728 <__ieee754_fmod+0x214>)
 8010612:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8010616:	2b00      	cmp	r3, #0
 8010618:	ddc0      	ble.n	801059c <__ieee754_fmod+0x88>
 801061a:	3901      	subs	r1, #1
 801061c:	005b      	lsls	r3, r3, #1
 801061e:	e7fa      	b.n	8010616 <__ieee754_fmod+0x102>
 8010620:	ea4f 5128 	mov.w	r1, r8, asr #20
 8010624:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8010628:	e7b8      	b.n	801059c <__ieee754_fmod+0x88>
 801062a:	3a01      	subs	r2, #1
 801062c:	005b      	lsls	r3, r3, #1
 801062e:	e7bc      	b.n	80105aa <__ieee754_fmod+0x96>
 8010630:	4a3d      	ldr	r2, [pc, #244]	; (8010728 <__ieee754_fmod+0x214>)
 8010632:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 8010636:	2b00      	cmp	r3, #0
 8010638:	ddb9      	ble.n	80105ae <__ieee754_fmod+0x9a>
 801063a:	3a01      	subs	r2, #1
 801063c:	005b      	lsls	r3, r3, #1
 801063e:	e7fa      	b.n	8010636 <__ieee754_fmod+0x122>
 8010640:	ea4f 522c 	mov.w	r2, ip, asr #20
 8010644:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8010648:	e7b1      	b.n	80105ae <__ieee754_fmod+0x9a>
 801064a:	1a40      	subs	r0, r0, r1
 801064c:	281f      	cmp	r0, #31
 801064e:	dc0a      	bgt.n	8010666 <__ieee754_fmod+0x152>
 8010650:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 8010654:	fa08 f800 	lsl.w	r8, r8, r0
 8010658:	fa2a f303 	lsr.w	r3, sl, r3
 801065c:	ea43 0308 	orr.w	r3, r3, r8
 8010660:	fa0a f400 	lsl.w	r4, sl, r0
 8010664:	e7aa      	b.n	80105bc <__ieee754_fmod+0xa8>
 8010666:	4b31      	ldr	r3, [pc, #196]	; (801072c <__ieee754_fmod+0x218>)
 8010668:	1a5b      	subs	r3, r3, r1
 801066a:	fa0a f303 	lsl.w	r3, sl, r3
 801066e:	2400      	movs	r4, #0
 8010670:	e7a4      	b.n	80105bc <__ieee754_fmod+0xa8>
 8010672:	1a80      	subs	r0, r0, r2
 8010674:	281f      	cmp	r0, #31
 8010676:	dc0a      	bgt.n	801068e <__ieee754_fmod+0x17a>
 8010678:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 801067c:	fa0c fc00 	lsl.w	ip, ip, r0
 8010680:	fa27 f606 	lsr.w	r6, r7, r6
 8010684:	ea46 060c 	orr.w	r6, r6, ip
 8010688:	fa07 fe00 	lsl.w	lr, r7, r0
 801068c:	e79d      	b.n	80105ca <__ieee754_fmod+0xb6>
 801068e:	4e27      	ldr	r6, [pc, #156]	; (801072c <__ieee754_fmod+0x218>)
 8010690:	1ab6      	subs	r6, r6, r2
 8010692:	fa07 f606 	lsl.w	r6, r7, r6
 8010696:	f04f 0e00 	mov.w	lr, #0
 801069a:	e796      	b.n	80105ca <__ieee754_fmod+0xb6>
 801069c:	4574      	cmp	r4, lr
 801069e:	bf38      	it	cc
 80106a0:	f100 30ff 	addcc.w	r0, r0, #4294967295
 80106a4:	2800      	cmp	r0, #0
 80106a6:	da05      	bge.n	80106b4 <__ieee754_fmod+0x1a0>
 80106a8:	0fe0      	lsrs	r0, r4, #31
 80106aa:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80106ae:	0064      	lsls	r4, r4, #1
 80106b0:	3901      	subs	r1, #1
 80106b2:	e78b      	b.n	80105cc <__ieee754_fmod+0xb8>
 80106b4:	ea50 0307 	orrs.w	r3, r0, r7
 80106b8:	f43f af5f 	beq.w	801057a <__ieee754_fmod+0x66>
 80106bc:	0ffb      	lsrs	r3, r7, #31
 80106be:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80106c2:	007c      	lsls	r4, r7, #1
 80106c4:	e7f4      	b.n	80106b0 <__ieee754_fmod+0x19c>
 80106c6:	0fe1      	lsrs	r1, r4, #31
 80106c8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80106cc:	0064      	lsls	r4, r4, #1
 80106ce:	3a01      	subs	r2, #1
 80106d0:	e78c      	b.n	80105ec <__ieee754_fmod+0xd8>
 80106d2:	1a89      	subs	r1, r1, r2
 80106d4:	2914      	cmp	r1, #20
 80106d6:	dc0a      	bgt.n	80106ee <__ieee754_fmod+0x1da>
 80106d8:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 80106dc:	fa03 f202 	lsl.w	r2, r3, r2
 80106e0:	40cc      	lsrs	r4, r1
 80106e2:	4322      	orrs	r2, r4
 80106e4:	410b      	asrs	r3, r1
 80106e6:	ea43 0105 	orr.w	r1, r3, r5
 80106ea:	4610      	mov	r0, r2
 80106ec:	e735      	b.n	801055a <__ieee754_fmod+0x46>
 80106ee:	291f      	cmp	r1, #31
 80106f0:	dc07      	bgt.n	8010702 <__ieee754_fmod+0x1ee>
 80106f2:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 80106f6:	40cc      	lsrs	r4, r1
 80106f8:	fa03 f202 	lsl.w	r2, r3, r2
 80106fc:	4322      	orrs	r2, r4
 80106fe:	462b      	mov	r3, r5
 8010700:	e7f1      	b.n	80106e6 <__ieee754_fmod+0x1d2>
 8010702:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 8010706:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801070a:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 801070e:	32e2      	adds	r2, #226	; 0xe2
 8010710:	fa43 f202 	asr.w	r2, r3, r2
 8010714:	e7f3      	b.n	80106fe <__ieee754_fmod+0x1ea>
 8010716:	bf00      	nop
 8010718:	7fefffff 	.word	0x7fefffff
 801071c:	7ff00000 	.word	0x7ff00000
 8010720:	080123c0 	.word	0x080123c0
 8010724:	fffffbed 	.word	0xfffffbed
 8010728:	fffffc02 	.word	0xfffffc02
 801072c:	fffffbe2 	.word	0xfffffbe2

08010730 <__ieee754_rem_pio2>:
 8010730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010734:	ed2d 8b02 	vpush	{d8}
 8010738:	ec55 4b10 	vmov	r4, r5, d0
 801073c:	4bca      	ldr	r3, [pc, #808]	; (8010a68 <__ieee754_rem_pio2+0x338>)
 801073e:	b08b      	sub	sp, #44	; 0x2c
 8010740:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8010744:	4598      	cmp	r8, r3
 8010746:	4682      	mov	sl, r0
 8010748:	9502      	str	r5, [sp, #8]
 801074a:	dc08      	bgt.n	801075e <__ieee754_rem_pio2+0x2e>
 801074c:	2200      	movs	r2, #0
 801074e:	2300      	movs	r3, #0
 8010750:	ed80 0b00 	vstr	d0, [r0]
 8010754:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8010758:	f04f 0b00 	mov.w	fp, #0
 801075c:	e028      	b.n	80107b0 <__ieee754_rem_pio2+0x80>
 801075e:	4bc3      	ldr	r3, [pc, #780]	; (8010a6c <__ieee754_rem_pio2+0x33c>)
 8010760:	4598      	cmp	r8, r3
 8010762:	dc78      	bgt.n	8010856 <__ieee754_rem_pio2+0x126>
 8010764:	9b02      	ldr	r3, [sp, #8]
 8010766:	4ec2      	ldr	r6, [pc, #776]	; (8010a70 <__ieee754_rem_pio2+0x340>)
 8010768:	2b00      	cmp	r3, #0
 801076a:	ee10 0a10 	vmov	r0, s0
 801076e:	a3b0      	add	r3, pc, #704	; (adr r3, 8010a30 <__ieee754_rem_pio2+0x300>)
 8010770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010774:	4629      	mov	r1, r5
 8010776:	dd39      	ble.n	80107ec <__ieee754_rem_pio2+0xbc>
 8010778:	f7ef fdae 	bl	80002d8 <__aeabi_dsub>
 801077c:	45b0      	cmp	r8, r6
 801077e:	4604      	mov	r4, r0
 8010780:	460d      	mov	r5, r1
 8010782:	d01b      	beq.n	80107bc <__ieee754_rem_pio2+0x8c>
 8010784:	a3ac      	add	r3, pc, #688	; (adr r3, 8010a38 <__ieee754_rem_pio2+0x308>)
 8010786:	e9d3 2300 	ldrd	r2, r3, [r3]
 801078a:	f7ef fda5 	bl	80002d8 <__aeabi_dsub>
 801078e:	4602      	mov	r2, r0
 8010790:	460b      	mov	r3, r1
 8010792:	e9ca 2300 	strd	r2, r3, [sl]
 8010796:	4620      	mov	r0, r4
 8010798:	4629      	mov	r1, r5
 801079a:	f7ef fd9d 	bl	80002d8 <__aeabi_dsub>
 801079e:	a3a6      	add	r3, pc, #664	; (adr r3, 8010a38 <__ieee754_rem_pio2+0x308>)
 80107a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107a4:	f7ef fd98 	bl	80002d8 <__aeabi_dsub>
 80107a8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80107ac:	f04f 0b01 	mov.w	fp, #1
 80107b0:	4658      	mov	r0, fp
 80107b2:	b00b      	add	sp, #44	; 0x2c
 80107b4:	ecbd 8b02 	vpop	{d8}
 80107b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107bc:	a3a0      	add	r3, pc, #640	; (adr r3, 8010a40 <__ieee754_rem_pio2+0x310>)
 80107be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107c2:	f7ef fd89 	bl	80002d8 <__aeabi_dsub>
 80107c6:	a3a0      	add	r3, pc, #640	; (adr r3, 8010a48 <__ieee754_rem_pio2+0x318>)
 80107c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107cc:	4604      	mov	r4, r0
 80107ce:	460d      	mov	r5, r1
 80107d0:	f7ef fd82 	bl	80002d8 <__aeabi_dsub>
 80107d4:	4602      	mov	r2, r0
 80107d6:	460b      	mov	r3, r1
 80107d8:	e9ca 2300 	strd	r2, r3, [sl]
 80107dc:	4620      	mov	r0, r4
 80107de:	4629      	mov	r1, r5
 80107e0:	f7ef fd7a 	bl	80002d8 <__aeabi_dsub>
 80107e4:	a398      	add	r3, pc, #608	; (adr r3, 8010a48 <__ieee754_rem_pio2+0x318>)
 80107e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107ea:	e7db      	b.n	80107a4 <__ieee754_rem_pio2+0x74>
 80107ec:	f7ef fd76 	bl	80002dc <__adddf3>
 80107f0:	45b0      	cmp	r8, r6
 80107f2:	4604      	mov	r4, r0
 80107f4:	460d      	mov	r5, r1
 80107f6:	d016      	beq.n	8010826 <__ieee754_rem_pio2+0xf6>
 80107f8:	a38f      	add	r3, pc, #572	; (adr r3, 8010a38 <__ieee754_rem_pio2+0x308>)
 80107fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107fe:	f7ef fd6d 	bl	80002dc <__adddf3>
 8010802:	4602      	mov	r2, r0
 8010804:	460b      	mov	r3, r1
 8010806:	e9ca 2300 	strd	r2, r3, [sl]
 801080a:	4620      	mov	r0, r4
 801080c:	4629      	mov	r1, r5
 801080e:	f7ef fd63 	bl	80002d8 <__aeabi_dsub>
 8010812:	a389      	add	r3, pc, #548	; (adr r3, 8010a38 <__ieee754_rem_pio2+0x308>)
 8010814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010818:	f7ef fd60 	bl	80002dc <__adddf3>
 801081c:	f04f 3bff 	mov.w	fp, #4294967295
 8010820:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010824:	e7c4      	b.n	80107b0 <__ieee754_rem_pio2+0x80>
 8010826:	a386      	add	r3, pc, #536	; (adr r3, 8010a40 <__ieee754_rem_pio2+0x310>)
 8010828:	e9d3 2300 	ldrd	r2, r3, [r3]
 801082c:	f7ef fd56 	bl	80002dc <__adddf3>
 8010830:	a385      	add	r3, pc, #532	; (adr r3, 8010a48 <__ieee754_rem_pio2+0x318>)
 8010832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010836:	4604      	mov	r4, r0
 8010838:	460d      	mov	r5, r1
 801083a:	f7ef fd4f 	bl	80002dc <__adddf3>
 801083e:	4602      	mov	r2, r0
 8010840:	460b      	mov	r3, r1
 8010842:	e9ca 2300 	strd	r2, r3, [sl]
 8010846:	4620      	mov	r0, r4
 8010848:	4629      	mov	r1, r5
 801084a:	f7ef fd45 	bl	80002d8 <__aeabi_dsub>
 801084e:	a37e      	add	r3, pc, #504	; (adr r3, 8010a48 <__ieee754_rem_pio2+0x318>)
 8010850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010854:	e7e0      	b.n	8010818 <__ieee754_rem_pio2+0xe8>
 8010856:	4b87      	ldr	r3, [pc, #540]	; (8010a74 <__ieee754_rem_pio2+0x344>)
 8010858:	4598      	cmp	r8, r3
 801085a:	f300 80d8 	bgt.w	8010a0e <__ieee754_rem_pio2+0x2de>
 801085e:	f000 f96d 	bl	8010b3c <fabs>
 8010862:	ec55 4b10 	vmov	r4, r5, d0
 8010866:	ee10 0a10 	vmov	r0, s0
 801086a:	a379      	add	r3, pc, #484	; (adr r3, 8010a50 <__ieee754_rem_pio2+0x320>)
 801086c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010870:	4629      	mov	r1, r5
 8010872:	f7ef fee9 	bl	8000648 <__aeabi_dmul>
 8010876:	4b80      	ldr	r3, [pc, #512]	; (8010a78 <__ieee754_rem_pio2+0x348>)
 8010878:	2200      	movs	r2, #0
 801087a:	f7ef fd2f 	bl	80002dc <__adddf3>
 801087e:	f7f0 f993 	bl	8000ba8 <__aeabi_d2iz>
 8010882:	4683      	mov	fp, r0
 8010884:	f7ef fe76 	bl	8000574 <__aeabi_i2d>
 8010888:	4602      	mov	r2, r0
 801088a:	460b      	mov	r3, r1
 801088c:	ec43 2b18 	vmov	d8, r2, r3
 8010890:	a367      	add	r3, pc, #412	; (adr r3, 8010a30 <__ieee754_rem_pio2+0x300>)
 8010892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010896:	f7ef fed7 	bl	8000648 <__aeabi_dmul>
 801089a:	4602      	mov	r2, r0
 801089c:	460b      	mov	r3, r1
 801089e:	4620      	mov	r0, r4
 80108a0:	4629      	mov	r1, r5
 80108a2:	f7ef fd19 	bl	80002d8 <__aeabi_dsub>
 80108a6:	a364      	add	r3, pc, #400	; (adr r3, 8010a38 <__ieee754_rem_pio2+0x308>)
 80108a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108ac:	4606      	mov	r6, r0
 80108ae:	460f      	mov	r7, r1
 80108b0:	ec51 0b18 	vmov	r0, r1, d8
 80108b4:	f7ef fec8 	bl	8000648 <__aeabi_dmul>
 80108b8:	f1bb 0f1f 	cmp.w	fp, #31
 80108bc:	4604      	mov	r4, r0
 80108be:	460d      	mov	r5, r1
 80108c0:	dc0d      	bgt.n	80108de <__ieee754_rem_pio2+0x1ae>
 80108c2:	4b6e      	ldr	r3, [pc, #440]	; (8010a7c <__ieee754_rem_pio2+0x34c>)
 80108c4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80108c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80108cc:	4543      	cmp	r3, r8
 80108ce:	d006      	beq.n	80108de <__ieee754_rem_pio2+0x1ae>
 80108d0:	4622      	mov	r2, r4
 80108d2:	462b      	mov	r3, r5
 80108d4:	4630      	mov	r0, r6
 80108d6:	4639      	mov	r1, r7
 80108d8:	f7ef fcfe 	bl	80002d8 <__aeabi_dsub>
 80108dc:	e00e      	b.n	80108fc <__ieee754_rem_pio2+0x1cc>
 80108de:	462b      	mov	r3, r5
 80108e0:	4622      	mov	r2, r4
 80108e2:	4630      	mov	r0, r6
 80108e4:	4639      	mov	r1, r7
 80108e6:	f7ef fcf7 	bl	80002d8 <__aeabi_dsub>
 80108ea:	ea4f 5328 	mov.w	r3, r8, asr #20
 80108ee:	9303      	str	r3, [sp, #12]
 80108f0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80108f4:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80108f8:	2b10      	cmp	r3, #16
 80108fa:	dc02      	bgt.n	8010902 <__ieee754_rem_pio2+0x1d2>
 80108fc:	e9ca 0100 	strd	r0, r1, [sl]
 8010900:	e039      	b.n	8010976 <__ieee754_rem_pio2+0x246>
 8010902:	a34f      	add	r3, pc, #316	; (adr r3, 8010a40 <__ieee754_rem_pio2+0x310>)
 8010904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010908:	ec51 0b18 	vmov	r0, r1, d8
 801090c:	f7ef fe9c 	bl	8000648 <__aeabi_dmul>
 8010910:	4604      	mov	r4, r0
 8010912:	460d      	mov	r5, r1
 8010914:	4602      	mov	r2, r0
 8010916:	460b      	mov	r3, r1
 8010918:	4630      	mov	r0, r6
 801091a:	4639      	mov	r1, r7
 801091c:	f7ef fcdc 	bl	80002d8 <__aeabi_dsub>
 8010920:	4602      	mov	r2, r0
 8010922:	460b      	mov	r3, r1
 8010924:	4680      	mov	r8, r0
 8010926:	4689      	mov	r9, r1
 8010928:	4630      	mov	r0, r6
 801092a:	4639      	mov	r1, r7
 801092c:	f7ef fcd4 	bl	80002d8 <__aeabi_dsub>
 8010930:	4622      	mov	r2, r4
 8010932:	462b      	mov	r3, r5
 8010934:	f7ef fcd0 	bl	80002d8 <__aeabi_dsub>
 8010938:	a343      	add	r3, pc, #268	; (adr r3, 8010a48 <__ieee754_rem_pio2+0x318>)
 801093a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801093e:	4604      	mov	r4, r0
 8010940:	460d      	mov	r5, r1
 8010942:	ec51 0b18 	vmov	r0, r1, d8
 8010946:	f7ef fe7f 	bl	8000648 <__aeabi_dmul>
 801094a:	4622      	mov	r2, r4
 801094c:	462b      	mov	r3, r5
 801094e:	f7ef fcc3 	bl	80002d8 <__aeabi_dsub>
 8010952:	4602      	mov	r2, r0
 8010954:	460b      	mov	r3, r1
 8010956:	4604      	mov	r4, r0
 8010958:	460d      	mov	r5, r1
 801095a:	4640      	mov	r0, r8
 801095c:	4649      	mov	r1, r9
 801095e:	f7ef fcbb 	bl	80002d8 <__aeabi_dsub>
 8010962:	9a03      	ldr	r2, [sp, #12]
 8010964:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010968:	1ad3      	subs	r3, r2, r3
 801096a:	2b31      	cmp	r3, #49	; 0x31
 801096c:	dc24      	bgt.n	80109b8 <__ieee754_rem_pio2+0x288>
 801096e:	e9ca 0100 	strd	r0, r1, [sl]
 8010972:	4646      	mov	r6, r8
 8010974:	464f      	mov	r7, r9
 8010976:	e9da 8900 	ldrd	r8, r9, [sl]
 801097a:	4630      	mov	r0, r6
 801097c:	4642      	mov	r2, r8
 801097e:	464b      	mov	r3, r9
 8010980:	4639      	mov	r1, r7
 8010982:	f7ef fca9 	bl	80002d8 <__aeabi_dsub>
 8010986:	462b      	mov	r3, r5
 8010988:	4622      	mov	r2, r4
 801098a:	f7ef fca5 	bl	80002d8 <__aeabi_dsub>
 801098e:	9b02      	ldr	r3, [sp, #8]
 8010990:	2b00      	cmp	r3, #0
 8010992:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010996:	f6bf af0b 	bge.w	80107b0 <__ieee754_rem_pio2+0x80>
 801099a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801099e:	f8ca 3004 	str.w	r3, [sl, #4]
 80109a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80109a6:	f8ca 8000 	str.w	r8, [sl]
 80109aa:	f8ca 0008 	str.w	r0, [sl, #8]
 80109ae:	f8ca 300c 	str.w	r3, [sl, #12]
 80109b2:	f1cb 0b00 	rsb	fp, fp, #0
 80109b6:	e6fb      	b.n	80107b0 <__ieee754_rem_pio2+0x80>
 80109b8:	a327      	add	r3, pc, #156	; (adr r3, 8010a58 <__ieee754_rem_pio2+0x328>)
 80109ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109be:	ec51 0b18 	vmov	r0, r1, d8
 80109c2:	f7ef fe41 	bl	8000648 <__aeabi_dmul>
 80109c6:	4604      	mov	r4, r0
 80109c8:	460d      	mov	r5, r1
 80109ca:	4602      	mov	r2, r0
 80109cc:	460b      	mov	r3, r1
 80109ce:	4640      	mov	r0, r8
 80109d0:	4649      	mov	r1, r9
 80109d2:	f7ef fc81 	bl	80002d8 <__aeabi_dsub>
 80109d6:	4602      	mov	r2, r0
 80109d8:	460b      	mov	r3, r1
 80109da:	4606      	mov	r6, r0
 80109dc:	460f      	mov	r7, r1
 80109de:	4640      	mov	r0, r8
 80109e0:	4649      	mov	r1, r9
 80109e2:	f7ef fc79 	bl	80002d8 <__aeabi_dsub>
 80109e6:	4622      	mov	r2, r4
 80109e8:	462b      	mov	r3, r5
 80109ea:	f7ef fc75 	bl	80002d8 <__aeabi_dsub>
 80109ee:	a31c      	add	r3, pc, #112	; (adr r3, 8010a60 <__ieee754_rem_pio2+0x330>)
 80109f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109f4:	4604      	mov	r4, r0
 80109f6:	460d      	mov	r5, r1
 80109f8:	ec51 0b18 	vmov	r0, r1, d8
 80109fc:	f7ef fe24 	bl	8000648 <__aeabi_dmul>
 8010a00:	4622      	mov	r2, r4
 8010a02:	462b      	mov	r3, r5
 8010a04:	f7ef fc68 	bl	80002d8 <__aeabi_dsub>
 8010a08:	4604      	mov	r4, r0
 8010a0a:	460d      	mov	r5, r1
 8010a0c:	e760      	b.n	80108d0 <__ieee754_rem_pio2+0x1a0>
 8010a0e:	4b1c      	ldr	r3, [pc, #112]	; (8010a80 <__ieee754_rem_pio2+0x350>)
 8010a10:	4598      	cmp	r8, r3
 8010a12:	dd37      	ble.n	8010a84 <__ieee754_rem_pio2+0x354>
 8010a14:	ee10 2a10 	vmov	r2, s0
 8010a18:	462b      	mov	r3, r5
 8010a1a:	4620      	mov	r0, r4
 8010a1c:	4629      	mov	r1, r5
 8010a1e:	f7ef fc5b 	bl	80002d8 <__aeabi_dsub>
 8010a22:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010a26:	e9ca 0100 	strd	r0, r1, [sl]
 8010a2a:	e695      	b.n	8010758 <__ieee754_rem_pio2+0x28>
 8010a2c:	f3af 8000 	nop.w
 8010a30:	54400000 	.word	0x54400000
 8010a34:	3ff921fb 	.word	0x3ff921fb
 8010a38:	1a626331 	.word	0x1a626331
 8010a3c:	3dd0b461 	.word	0x3dd0b461
 8010a40:	1a600000 	.word	0x1a600000
 8010a44:	3dd0b461 	.word	0x3dd0b461
 8010a48:	2e037073 	.word	0x2e037073
 8010a4c:	3ba3198a 	.word	0x3ba3198a
 8010a50:	6dc9c883 	.word	0x6dc9c883
 8010a54:	3fe45f30 	.word	0x3fe45f30
 8010a58:	2e000000 	.word	0x2e000000
 8010a5c:	3ba3198a 	.word	0x3ba3198a
 8010a60:	252049c1 	.word	0x252049c1
 8010a64:	397b839a 	.word	0x397b839a
 8010a68:	3fe921fb 	.word	0x3fe921fb
 8010a6c:	4002d97b 	.word	0x4002d97b
 8010a70:	3ff921fb 	.word	0x3ff921fb
 8010a74:	413921fb 	.word	0x413921fb
 8010a78:	3fe00000 	.word	0x3fe00000
 8010a7c:	080123d0 	.word	0x080123d0
 8010a80:	7fefffff 	.word	0x7fefffff
 8010a84:	ea4f 5628 	mov.w	r6, r8, asr #20
 8010a88:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8010a8c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8010a90:	4620      	mov	r0, r4
 8010a92:	460d      	mov	r5, r1
 8010a94:	f7f0 f888 	bl	8000ba8 <__aeabi_d2iz>
 8010a98:	f7ef fd6c 	bl	8000574 <__aeabi_i2d>
 8010a9c:	4602      	mov	r2, r0
 8010a9e:	460b      	mov	r3, r1
 8010aa0:	4620      	mov	r0, r4
 8010aa2:	4629      	mov	r1, r5
 8010aa4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010aa8:	f7ef fc16 	bl	80002d8 <__aeabi_dsub>
 8010aac:	4b21      	ldr	r3, [pc, #132]	; (8010b34 <__ieee754_rem_pio2+0x404>)
 8010aae:	2200      	movs	r2, #0
 8010ab0:	f7ef fdca 	bl	8000648 <__aeabi_dmul>
 8010ab4:	460d      	mov	r5, r1
 8010ab6:	4604      	mov	r4, r0
 8010ab8:	f7f0 f876 	bl	8000ba8 <__aeabi_d2iz>
 8010abc:	f7ef fd5a 	bl	8000574 <__aeabi_i2d>
 8010ac0:	4602      	mov	r2, r0
 8010ac2:	460b      	mov	r3, r1
 8010ac4:	4620      	mov	r0, r4
 8010ac6:	4629      	mov	r1, r5
 8010ac8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010acc:	f7ef fc04 	bl	80002d8 <__aeabi_dsub>
 8010ad0:	4b18      	ldr	r3, [pc, #96]	; (8010b34 <__ieee754_rem_pio2+0x404>)
 8010ad2:	2200      	movs	r2, #0
 8010ad4:	f7ef fdb8 	bl	8000648 <__aeabi_dmul>
 8010ad8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010adc:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8010ae0:	2703      	movs	r7, #3
 8010ae2:	2400      	movs	r4, #0
 8010ae4:	2500      	movs	r5, #0
 8010ae6:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8010aea:	4622      	mov	r2, r4
 8010aec:	462b      	mov	r3, r5
 8010aee:	46b9      	mov	r9, r7
 8010af0:	3f01      	subs	r7, #1
 8010af2:	f7f0 f811 	bl	8000b18 <__aeabi_dcmpeq>
 8010af6:	2800      	cmp	r0, #0
 8010af8:	d1f5      	bne.n	8010ae6 <__ieee754_rem_pio2+0x3b6>
 8010afa:	4b0f      	ldr	r3, [pc, #60]	; (8010b38 <__ieee754_rem_pio2+0x408>)
 8010afc:	9301      	str	r3, [sp, #4]
 8010afe:	2302      	movs	r3, #2
 8010b00:	9300      	str	r3, [sp, #0]
 8010b02:	4632      	mov	r2, r6
 8010b04:	464b      	mov	r3, r9
 8010b06:	4651      	mov	r1, sl
 8010b08:	a804      	add	r0, sp, #16
 8010b0a:	f000 f9fd 	bl	8010f08 <__kernel_rem_pio2>
 8010b0e:	9b02      	ldr	r3, [sp, #8]
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	4683      	mov	fp, r0
 8010b14:	f6bf ae4c 	bge.w	80107b0 <__ieee754_rem_pio2+0x80>
 8010b18:	e9da 2100 	ldrd	r2, r1, [sl]
 8010b1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010b20:	e9ca 2300 	strd	r2, r3, [sl]
 8010b24:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8010b28:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010b2c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8010b30:	e73f      	b.n	80109b2 <__ieee754_rem_pio2+0x282>
 8010b32:	bf00      	nop
 8010b34:	41700000 	.word	0x41700000
 8010b38:	08012450 	.word	0x08012450

08010b3c <fabs>:
 8010b3c:	ec51 0b10 	vmov	r0, r1, d0
 8010b40:	ee10 2a10 	vmov	r2, s0
 8010b44:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010b48:	ec43 2b10 	vmov	d0, r2, r3
 8010b4c:	4770      	bx	lr
	...

08010b50 <__kernel_cosf>:
 8010b50:	ee10 3a10 	vmov	r3, s0
 8010b54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010b58:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8010b5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010b60:	da05      	bge.n	8010b6e <__kernel_cosf+0x1e>
 8010b62:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8010b66:	ee17 2a90 	vmov	r2, s15
 8010b6a:	2a00      	cmp	r2, #0
 8010b6c:	d03b      	beq.n	8010be6 <__kernel_cosf+0x96>
 8010b6e:	ee20 7a00 	vmul.f32	s14, s0, s0
 8010b72:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8010bec <__kernel_cosf+0x9c>
 8010b76:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8010bf0 <__kernel_cosf+0xa0>
 8010b7a:	4a1e      	ldr	r2, [pc, #120]	; (8010bf4 <__kernel_cosf+0xa4>)
 8010b7c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8010b80:	4293      	cmp	r3, r2
 8010b82:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8010bf8 <__kernel_cosf+0xa8>
 8010b86:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010b8a:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8010bfc <__kernel_cosf+0xac>
 8010b8e:	eea7 6a87 	vfma.f32	s12, s15, s14
 8010b92:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8010c00 <__kernel_cosf+0xb0>
 8010b96:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010b9a:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8010c04 <__kernel_cosf+0xb4>
 8010b9e:	eea7 6a87 	vfma.f32	s12, s15, s14
 8010ba2:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8010ba6:	ee26 6a07 	vmul.f32	s12, s12, s14
 8010baa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010bae:	eee7 0a06 	vfma.f32	s1, s14, s12
 8010bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010bb6:	dc04      	bgt.n	8010bc2 <__kernel_cosf+0x72>
 8010bb8:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8010bbc:	ee36 0ae7 	vsub.f32	s0, s13, s15
 8010bc0:	4770      	bx	lr
 8010bc2:	4a11      	ldr	r2, [pc, #68]	; (8010c08 <__kernel_cosf+0xb8>)
 8010bc4:	4293      	cmp	r3, r2
 8010bc6:	bfda      	itte	le
 8010bc8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8010bcc:	ee07 3a10 	vmovle	s14, r3
 8010bd0:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8010bd4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010bd8:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8010bdc:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8010be0:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010be4:	4770      	bx	lr
 8010be6:	eeb0 0a66 	vmov.f32	s0, s13
 8010bea:	4770      	bx	lr
 8010bec:	ad47d74e 	.word	0xad47d74e
 8010bf0:	310f74f6 	.word	0x310f74f6
 8010bf4:	3e999999 	.word	0x3e999999
 8010bf8:	b493f27c 	.word	0xb493f27c
 8010bfc:	37d00d01 	.word	0x37d00d01
 8010c00:	bab60b61 	.word	0xbab60b61
 8010c04:	3d2aaaab 	.word	0x3d2aaaab
 8010c08:	3f480000 	.word	0x3f480000

08010c0c <__kernel_sinf>:
 8010c0c:	ee10 3a10 	vmov	r3, s0
 8010c10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010c14:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8010c18:	da04      	bge.n	8010c24 <__kernel_sinf+0x18>
 8010c1a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8010c1e:	ee17 3a90 	vmov	r3, s15
 8010c22:	b35b      	cbz	r3, 8010c7c <__kernel_sinf+0x70>
 8010c24:	ee20 7a00 	vmul.f32	s14, s0, s0
 8010c28:	eddf 7a15 	vldr	s15, [pc, #84]	; 8010c80 <__kernel_sinf+0x74>
 8010c2c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8010c84 <__kernel_sinf+0x78>
 8010c30:	eea7 6a27 	vfma.f32	s12, s14, s15
 8010c34:	eddf 7a14 	vldr	s15, [pc, #80]	; 8010c88 <__kernel_sinf+0x7c>
 8010c38:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010c3c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8010c8c <__kernel_sinf+0x80>
 8010c40:	eea7 6a87 	vfma.f32	s12, s15, s14
 8010c44:	eddf 7a12 	vldr	s15, [pc, #72]	; 8010c90 <__kernel_sinf+0x84>
 8010c48:	ee60 6a07 	vmul.f32	s13, s0, s14
 8010c4c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010c50:	b930      	cbnz	r0, 8010c60 <__kernel_sinf+0x54>
 8010c52:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8010c94 <__kernel_sinf+0x88>
 8010c56:	eea7 6a27 	vfma.f32	s12, s14, s15
 8010c5a:	eea6 0a26 	vfma.f32	s0, s12, s13
 8010c5e:	4770      	bx	lr
 8010c60:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8010c64:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8010c68:	eee0 7a86 	vfma.f32	s15, s1, s12
 8010c6c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8010c70:	eddf 7a09 	vldr	s15, [pc, #36]	; 8010c98 <__kernel_sinf+0x8c>
 8010c74:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8010c78:	ee30 0a60 	vsub.f32	s0, s0, s1
 8010c7c:	4770      	bx	lr
 8010c7e:	bf00      	nop
 8010c80:	2f2ec9d3 	.word	0x2f2ec9d3
 8010c84:	b2d72f34 	.word	0xb2d72f34
 8010c88:	3638ef1b 	.word	0x3638ef1b
 8010c8c:	b9500d01 	.word	0xb9500d01
 8010c90:	3c088889 	.word	0x3c088889
 8010c94:	be2aaaab 	.word	0xbe2aaaab
 8010c98:	3e2aaaab 	.word	0x3e2aaaab

08010c9c <__ieee754_rem_pio2f>:
 8010c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c9e:	ee10 6a10 	vmov	r6, s0
 8010ca2:	4b86      	ldr	r3, [pc, #536]	; (8010ebc <__ieee754_rem_pio2f+0x220>)
 8010ca4:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8010ca8:	429d      	cmp	r5, r3
 8010caa:	b087      	sub	sp, #28
 8010cac:	4604      	mov	r4, r0
 8010cae:	dc05      	bgt.n	8010cbc <__ieee754_rem_pio2f+0x20>
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	ed80 0a00 	vstr	s0, [r0]
 8010cb6:	6043      	str	r3, [r0, #4]
 8010cb8:	2000      	movs	r0, #0
 8010cba:	e020      	b.n	8010cfe <__ieee754_rem_pio2f+0x62>
 8010cbc:	4b80      	ldr	r3, [pc, #512]	; (8010ec0 <__ieee754_rem_pio2f+0x224>)
 8010cbe:	429d      	cmp	r5, r3
 8010cc0:	dc38      	bgt.n	8010d34 <__ieee754_rem_pio2f+0x98>
 8010cc2:	2e00      	cmp	r6, #0
 8010cc4:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8010ec4 <__ieee754_rem_pio2f+0x228>
 8010cc8:	4b7f      	ldr	r3, [pc, #508]	; (8010ec8 <__ieee754_rem_pio2f+0x22c>)
 8010cca:	f025 050f 	bic.w	r5, r5, #15
 8010cce:	dd18      	ble.n	8010d02 <__ieee754_rem_pio2f+0x66>
 8010cd0:	429d      	cmp	r5, r3
 8010cd2:	ee70 7a47 	vsub.f32	s15, s0, s14
 8010cd6:	bf09      	itett	eq
 8010cd8:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8010ecc <__ieee754_rem_pio2f+0x230>
 8010cdc:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8010ed0 <__ieee754_rem_pio2f+0x234>
 8010ce0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8010ce4:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8010ed4 <__ieee754_rem_pio2f+0x238>
 8010ce8:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8010cec:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010cf0:	edc0 6a00 	vstr	s13, [r0]
 8010cf4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010cf8:	edc0 7a01 	vstr	s15, [r0, #4]
 8010cfc:	2001      	movs	r0, #1
 8010cfe:	b007      	add	sp, #28
 8010d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d02:	429d      	cmp	r5, r3
 8010d04:	ee70 7a07 	vadd.f32	s15, s0, s14
 8010d08:	bf09      	itett	eq
 8010d0a:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8010ecc <__ieee754_rem_pio2f+0x230>
 8010d0e:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8010ed0 <__ieee754_rem_pio2f+0x234>
 8010d12:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8010d16:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8010ed4 <__ieee754_rem_pio2f+0x238>
 8010d1a:	ee77 6a87 	vadd.f32	s13, s15, s14
 8010d1e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010d22:	edc0 6a00 	vstr	s13, [r0]
 8010d26:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010d2a:	edc0 7a01 	vstr	s15, [r0, #4]
 8010d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8010d32:	e7e4      	b.n	8010cfe <__ieee754_rem_pio2f+0x62>
 8010d34:	4b68      	ldr	r3, [pc, #416]	; (8010ed8 <__ieee754_rem_pio2f+0x23c>)
 8010d36:	429d      	cmp	r5, r3
 8010d38:	dc71      	bgt.n	8010e1e <__ieee754_rem_pio2f+0x182>
 8010d3a:	f000 f8db 	bl	8010ef4 <fabsf>
 8010d3e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8010edc <__ieee754_rem_pio2f+0x240>
 8010d42:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010d46:	eee0 7a07 	vfma.f32	s15, s0, s14
 8010d4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010d4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010d52:	ee17 0a90 	vmov	r0, s15
 8010d56:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8010ec4 <__ieee754_rem_pio2f+0x228>
 8010d5a:	eea7 0a67 	vfms.f32	s0, s14, s15
 8010d5e:	281f      	cmp	r0, #31
 8010d60:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8010ed0 <__ieee754_rem_pio2f+0x234>
 8010d64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010d68:	eeb1 6a47 	vneg.f32	s12, s14
 8010d6c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8010d70:	ee16 2a90 	vmov	r2, s13
 8010d74:	dc1c      	bgt.n	8010db0 <__ieee754_rem_pio2f+0x114>
 8010d76:	495a      	ldr	r1, [pc, #360]	; (8010ee0 <__ieee754_rem_pio2f+0x244>)
 8010d78:	1e47      	subs	r7, r0, #1
 8010d7a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8010d7e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8010d82:	428b      	cmp	r3, r1
 8010d84:	d014      	beq.n	8010db0 <__ieee754_rem_pio2f+0x114>
 8010d86:	6022      	str	r2, [r4, #0]
 8010d88:	ed94 7a00 	vldr	s14, [r4]
 8010d8c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8010d90:	2e00      	cmp	r6, #0
 8010d92:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010d96:	ed84 0a01 	vstr	s0, [r4, #4]
 8010d9a:	dab0      	bge.n	8010cfe <__ieee754_rem_pio2f+0x62>
 8010d9c:	eeb1 7a47 	vneg.f32	s14, s14
 8010da0:	eeb1 0a40 	vneg.f32	s0, s0
 8010da4:	ed84 7a00 	vstr	s14, [r4]
 8010da8:	ed84 0a01 	vstr	s0, [r4, #4]
 8010dac:	4240      	negs	r0, r0
 8010dae:	e7a6      	b.n	8010cfe <__ieee754_rem_pio2f+0x62>
 8010db0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8010db4:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 8010db8:	2908      	cmp	r1, #8
 8010dba:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8010dbe:	dde2      	ble.n	8010d86 <__ieee754_rem_pio2f+0xea>
 8010dc0:	eddf 5a42 	vldr	s11, [pc, #264]	; 8010ecc <__ieee754_rem_pio2f+0x230>
 8010dc4:	eef0 6a40 	vmov.f32	s13, s0
 8010dc8:	eee6 6a25 	vfma.f32	s13, s12, s11
 8010dcc:	ee70 7a66 	vsub.f32	s15, s0, s13
 8010dd0:	eee6 7a25 	vfma.f32	s15, s12, s11
 8010dd4:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8010ed4 <__ieee754_rem_pio2f+0x238>
 8010dd8:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8010ddc:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8010de0:	ee15 2a90 	vmov	r2, s11
 8010de4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8010de8:	1a5b      	subs	r3, r3, r1
 8010dea:	2b19      	cmp	r3, #25
 8010dec:	dc04      	bgt.n	8010df8 <__ieee754_rem_pio2f+0x15c>
 8010dee:	edc4 5a00 	vstr	s11, [r4]
 8010df2:	eeb0 0a66 	vmov.f32	s0, s13
 8010df6:	e7c7      	b.n	8010d88 <__ieee754_rem_pio2f+0xec>
 8010df8:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8010ee4 <__ieee754_rem_pio2f+0x248>
 8010dfc:	eeb0 0a66 	vmov.f32	s0, s13
 8010e00:	eea6 0a25 	vfma.f32	s0, s12, s11
 8010e04:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8010e08:	eddf 6a37 	vldr	s13, [pc, #220]	; 8010ee8 <__ieee754_rem_pio2f+0x24c>
 8010e0c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8010e10:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8010e14:	ee30 7a67 	vsub.f32	s14, s0, s15
 8010e18:	ed84 7a00 	vstr	s14, [r4]
 8010e1c:	e7b4      	b.n	8010d88 <__ieee754_rem_pio2f+0xec>
 8010e1e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8010e22:	db06      	blt.n	8010e32 <__ieee754_rem_pio2f+0x196>
 8010e24:	ee70 7a40 	vsub.f32	s15, s0, s0
 8010e28:	edc0 7a01 	vstr	s15, [r0, #4]
 8010e2c:	edc0 7a00 	vstr	s15, [r0]
 8010e30:	e742      	b.n	8010cb8 <__ieee754_rem_pio2f+0x1c>
 8010e32:	15ea      	asrs	r2, r5, #23
 8010e34:	3a86      	subs	r2, #134	; 0x86
 8010e36:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8010e3a:	ee07 3a90 	vmov	s15, r3
 8010e3e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8010e42:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8010eec <__ieee754_rem_pio2f+0x250>
 8010e46:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010e4a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010e4e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8010e52:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010e56:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8010e5a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010e5e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010e62:	ed8d 7a04 	vstr	s14, [sp, #16]
 8010e66:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010e6a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e72:	edcd 7a05 	vstr	s15, [sp, #20]
 8010e76:	d11e      	bne.n	8010eb6 <__ieee754_rem_pio2f+0x21a>
 8010e78:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8010e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e80:	bf14      	ite	ne
 8010e82:	2302      	movne	r3, #2
 8010e84:	2301      	moveq	r3, #1
 8010e86:	491a      	ldr	r1, [pc, #104]	; (8010ef0 <__ieee754_rem_pio2f+0x254>)
 8010e88:	9101      	str	r1, [sp, #4]
 8010e8a:	2102      	movs	r1, #2
 8010e8c:	9100      	str	r1, [sp, #0]
 8010e8e:	a803      	add	r0, sp, #12
 8010e90:	4621      	mov	r1, r4
 8010e92:	f000 fb87 	bl	80115a4 <__kernel_rem_pio2f>
 8010e96:	2e00      	cmp	r6, #0
 8010e98:	f6bf af31 	bge.w	8010cfe <__ieee754_rem_pio2f+0x62>
 8010e9c:	edd4 7a00 	vldr	s15, [r4]
 8010ea0:	eef1 7a67 	vneg.f32	s15, s15
 8010ea4:	edc4 7a00 	vstr	s15, [r4]
 8010ea8:	edd4 7a01 	vldr	s15, [r4, #4]
 8010eac:	eef1 7a67 	vneg.f32	s15, s15
 8010eb0:	edc4 7a01 	vstr	s15, [r4, #4]
 8010eb4:	e77a      	b.n	8010dac <__ieee754_rem_pio2f+0x110>
 8010eb6:	2303      	movs	r3, #3
 8010eb8:	e7e5      	b.n	8010e86 <__ieee754_rem_pio2f+0x1ea>
 8010eba:	bf00      	nop
 8010ebc:	3f490fd8 	.word	0x3f490fd8
 8010ec0:	4016cbe3 	.word	0x4016cbe3
 8010ec4:	3fc90f80 	.word	0x3fc90f80
 8010ec8:	3fc90fd0 	.word	0x3fc90fd0
 8010ecc:	37354400 	.word	0x37354400
 8010ed0:	37354443 	.word	0x37354443
 8010ed4:	2e85a308 	.word	0x2e85a308
 8010ed8:	43490f80 	.word	0x43490f80
 8010edc:	3f22f984 	.word	0x3f22f984
 8010ee0:	08012558 	.word	0x08012558
 8010ee4:	2e85a300 	.word	0x2e85a300
 8010ee8:	248d3132 	.word	0x248d3132
 8010eec:	43800000 	.word	0x43800000
 8010ef0:	080125d8 	.word	0x080125d8

08010ef4 <fabsf>:
 8010ef4:	ee10 3a10 	vmov	r3, s0
 8010ef8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010efc:	ee00 3a10 	vmov	s0, r3
 8010f00:	4770      	bx	lr
 8010f02:	0000      	movs	r0, r0
 8010f04:	0000      	movs	r0, r0
	...

08010f08 <__kernel_rem_pio2>:
 8010f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f0c:	ed2d 8b02 	vpush	{d8}
 8010f10:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8010f14:	f112 0f14 	cmn.w	r2, #20
 8010f18:	9306      	str	r3, [sp, #24]
 8010f1a:	9104      	str	r1, [sp, #16]
 8010f1c:	4bc2      	ldr	r3, [pc, #776]	; (8011228 <__kernel_rem_pio2+0x320>)
 8010f1e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8010f20:	9009      	str	r0, [sp, #36]	; 0x24
 8010f22:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010f26:	9300      	str	r3, [sp, #0]
 8010f28:	9b06      	ldr	r3, [sp, #24]
 8010f2a:	f103 33ff 	add.w	r3, r3, #4294967295
 8010f2e:	bfa8      	it	ge
 8010f30:	1ed4      	subge	r4, r2, #3
 8010f32:	9305      	str	r3, [sp, #20]
 8010f34:	bfb2      	itee	lt
 8010f36:	2400      	movlt	r4, #0
 8010f38:	2318      	movge	r3, #24
 8010f3a:	fb94 f4f3 	sdivge	r4, r4, r3
 8010f3e:	f06f 0317 	mvn.w	r3, #23
 8010f42:	fb04 3303 	mla	r3, r4, r3, r3
 8010f46:	eb03 0a02 	add.w	sl, r3, r2
 8010f4a:	9b00      	ldr	r3, [sp, #0]
 8010f4c:	9a05      	ldr	r2, [sp, #20]
 8010f4e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8011218 <__kernel_rem_pio2+0x310>
 8010f52:	eb03 0802 	add.w	r8, r3, r2
 8010f56:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8010f58:	1aa7      	subs	r7, r4, r2
 8010f5a:	ae20      	add	r6, sp, #128	; 0x80
 8010f5c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8010f60:	2500      	movs	r5, #0
 8010f62:	4545      	cmp	r5, r8
 8010f64:	dd13      	ble.n	8010f8e <__kernel_rem_pio2+0x86>
 8010f66:	9b06      	ldr	r3, [sp, #24]
 8010f68:	aa20      	add	r2, sp, #128	; 0x80
 8010f6a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8010f6e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8010f72:	f04f 0800 	mov.w	r8, #0
 8010f76:	9b00      	ldr	r3, [sp, #0]
 8010f78:	4598      	cmp	r8, r3
 8010f7a:	dc31      	bgt.n	8010fe0 <__kernel_rem_pio2+0xd8>
 8010f7c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8011218 <__kernel_rem_pio2+0x310>
 8010f80:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8010f84:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010f88:	462f      	mov	r7, r5
 8010f8a:	2600      	movs	r6, #0
 8010f8c:	e01b      	b.n	8010fc6 <__kernel_rem_pio2+0xbe>
 8010f8e:	42ef      	cmn	r7, r5
 8010f90:	d407      	bmi.n	8010fa2 <__kernel_rem_pio2+0x9a>
 8010f92:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8010f96:	f7ef faed 	bl	8000574 <__aeabi_i2d>
 8010f9a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010f9e:	3501      	adds	r5, #1
 8010fa0:	e7df      	b.n	8010f62 <__kernel_rem_pio2+0x5a>
 8010fa2:	ec51 0b18 	vmov	r0, r1, d8
 8010fa6:	e7f8      	b.n	8010f9a <__kernel_rem_pio2+0x92>
 8010fa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010fac:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8010fb0:	f7ef fb4a 	bl	8000648 <__aeabi_dmul>
 8010fb4:	4602      	mov	r2, r0
 8010fb6:	460b      	mov	r3, r1
 8010fb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010fbc:	f7ef f98e 	bl	80002dc <__adddf3>
 8010fc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010fc4:	3601      	adds	r6, #1
 8010fc6:	9b05      	ldr	r3, [sp, #20]
 8010fc8:	429e      	cmp	r6, r3
 8010fca:	f1a7 0708 	sub.w	r7, r7, #8
 8010fce:	ddeb      	ble.n	8010fa8 <__kernel_rem_pio2+0xa0>
 8010fd0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010fd4:	f108 0801 	add.w	r8, r8, #1
 8010fd8:	ecab 7b02 	vstmia	fp!, {d7}
 8010fdc:	3508      	adds	r5, #8
 8010fde:	e7ca      	b.n	8010f76 <__kernel_rem_pio2+0x6e>
 8010fe0:	9b00      	ldr	r3, [sp, #0]
 8010fe2:	aa0c      	add	r2, sp, #48	; 0x30
 8010fe4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010fe8:	930b      	str	r3, [sp, #44]	; 0x2c
 8010fea:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8010fec:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8010ff0:	9c00      	ldr	r4, [sp, #0]
 8010ff2:	930a      	str	r3, [sp, #40]	; 0x28
 8010ff4:	00e3      	lsls	r3, r4, #3
 8010ff6:	9308      	str	r3, [sp, #32]
 8010ff8:	ab98      	add	r3, sp, #608	; 0x260
 8010ffa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010ffe:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8011002:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8011006:	ab70      	add	r3, sp, #448	; 0x1c0
 8011008:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 801100c:	46c3      	mov	fp, r8
 801100e:	46a1      	mov	r9, r4
 8011010:	f1b9 0f00 	cmp.w	r9, #0
 8011014:	f1a5 0508 	sub.w	r5, r5, #8
 8011018:	dc77      	bgt.n	801110a <__kernel_rem_pio2+0x202>
 801101a:	ec47 6b10 	vmov	d0, r6, r7
 801101e:	4650      	mov	r0, sl
 8011020:	f000 fd32 	bl	8011a88 <scalbn>
 8011024:	ec57 6b10 	vmov	r6, r7, d0
 8011028:	2200      	movs	r2, #0
 801102a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801102e:	ee10 0a10 	vmov	r0, s0
 8011032:	4639      	mov	r1, r7
 8011034:	f7ef fb08 	bl	8000648 <__aeabi_dmul>
 8011038:	ec41 0b10 	vmov	d0, r0, r1
 801103c:	f000 fe08 	bl	8011c50 <floor>
 8011040:	4b7a      	ldr	r3, [pc, #488]	; (801122c <__kernel_rem_pio2+0x324>)
 8011042:	ec51 0b10 	vmov	r0, r1, d0
 8011046:	2200      	movs	r2, #0
 8011048:	f7ef fafe 	bl	8000648 <__aeabi_dmul>
 801104c:	4602      	mov	r2, r0
 801104e:	460b      	mov	r3, r1
 8011050:	4630      	mov	r0, r6
 8011052:	4639      	mov	r1, r7
 8011054:	f7ef f940 	bl	80002d8 <__aeabi_dsub>
 8011058:	460f      	mov	r7, r1
 801105a:	4606      	mov	r6, r0
 801105c:	f7ef fda4 	bl	8000ba8 <__aeabi_d2iz>
 8011060:	9002      	str	r0, [sp, #8]
 8011062:	f7ef fa87 	bl	8000574 <__aeabi_i2d>
 8011066:	4602      	mov	r2, r0
 8011068:	460b      	mov	r3, r1
 801106a:	4630      	mov	r0, r6
 801106c:	4639      	mov	r1, r7
 801106e:	f7ef f933 	bl	80002d8 <__aeabi_dsub>
 8011072:	f1ba 0f00 	cmp.w	sl, #0
 8011076:	4606      	mov	r6, r0
 8011078:	460f      	mov	r7, r1
 801107a:	dd6d      	ble.n	8011158 <__kernel_rem_pio2+0x250>
 801107c:	1e61      	subs	r1, r4, #1
 801107e:	ab0c      	add	r3, sp, #48	; 0x30
 8011080:	9d02      	ldr	r5, [sp, #8]
 8011082:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011086:	f1ca 0018 	rsb	r0, sl, #24
 801108a:	fa43 f200 	asr.w	r2, r3, r0
 801108e:	4415      	add	r5, r2
 8011090:	4082      	lsls	r2, r0
 8011092:	1a9b      	subs	r3, r3, r2
 8011094:	aa0c      	add	r2, sp, #48	; 0x30
 8011096:	9502      	str	r5, [sp, #8]
 8011098:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801109c:	f1ca 0217 	rsb	r2, sl, #23
 80110a0:	fa43 fb02 	asr.w	fp, r3, r2
 80110a4:	f1bb 0f00 	cmp.w	fp, #0
 80110a8:	dd65      	ble.n	8011176 <__kernel_rem_pio2+0x26e>
 80110aa:	9b02      	ldr	r3, [sp, #8]
 80110ac:	2200      	movs	r2, #0
 80110ae:	3301      	adds	r3, #1
 80110b0:	9302      	str	r3, [sp, #8]
 80110b2:	4615      	mov	r5, r2
 80110b4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80110b8:	4294      	cmp	r4, r2
 80110ba:	f300 809f 	bgt.w	80111fc <__kernel_rem_pio2+0x2f4>
 80110be:	f1ba 0f00 	cmp.w	sl, #0
 80110c2:	dd07      	ble.n	80110d4 <__kernel_rem_pio2+0x1cc>
 80110c4:	f1ba 0f01 	cmp.w	sl, #1
 80110c8:	f000 80c1 	beq.w	801124e <__kernel_rem_pio2+0x346>
 80110cc:	f1ba 0f02 	cmp.w	sl, #2
 80110d0:	f000 80c7 	beq.w	8011262 <__kernel_rem_pio2+0x35a>
 80110d4:	f1bb 0f02 	cmp.w	fp, #2
 80110d8:	d14d      	bne.n	8011176 <__kernel_rem_pio2+0x26e>
 80110da:	4632      	mov	r2, r6
 80110dc:	463b      	mov	r3, r7
 80110de:	4954      	ldr	r1, [pc, #336]	; (8011230 <__kernel_rem_pio2+0x328>)
 80110e0:	2000      	movs	r0, #0
 80110e2:	f7ef f8f9 	bl	80002d8 <__aeabi_dsub>
 80110e6:	4606      	mov	r6, r0
 80110e8:	460f      	mov	r7, r1
 80110ea:	2d00      	cmp	r5, #0
 80110ec:	d043      	beq.n	8011176 <__kernel_rem_pio2+0x26e>
 80110ee:	4650      	mov	r0, sl
 80110f0:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8011220 <__kernel_rem_pio2+0x318>
 80110f4:	f000 fcc8 	bl	8011a88 <scalbn>
 80110f8:	4630      	mov	r0, r6
 80110fa:	4639      	mov	r1, r7
 80110fc:	ec53 2b10 	vmov	r2, r3, d0
 8011100:	f7ef f8ea 	bl	80002d8 <__aeabi_dsub>
 8011104:	4606      	mov	r6, r0
 8011106:	460f      	mov	r7, r1
 8011108:	e035      	b.n	8011176 <__kernel_rem_pio2+0x26e>
 801110a:	4b4a      	ldr	r3, [pc, #296]	; (8011234 <__kernel_rem_pio2+0x32c>)
 801110c:	2200      	movs	r2, #0
 801110e:	4630      	mov	r0, r6
 8011110:	4639      	mov	r1, r7
 8011112:	f7ef fa99 	bl	8000648 <__aeabi_dmul>
 8011116:	f7ef fd47 	bl	8000ba8 <__aeabi_d2iz>
 801111a:	f7ef fa2b 	bl	8000574 <__aeabi_i2d>
 801111e:	4602      	mov	r2, r0
 8011120:	460b      	mov	r3, r1
 8011122:	ec43 2b18 	vmov	d8, r2, r3
 8011126:	4b44      	ldr	r3, [pc, #272]	; (8011238 <__kernel_rem_pio2+0x330>)
 8011128:	2200      	movs	r2, #0
 801112a:	f7ef fa8d 	bl	8000648 <__aeabi_dmul>
 801112e:	4602      	mov	r2, r0
 8011130:	460b      	mov	r3, r1
 8011132:	4630      	mov	r0, r6
 8011134:	4639      	mov	r1, r7
 8011136:	f7ef f8cf 	bl	80002d8 <__aeabi_dsub>
 801113a:	f7ef fd35 	bl	8000ba8 <__aeabi_d2iz>
 801113e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011142:	f84b 0b04 	str.w	r0, [fp], #4
 8011146:	ec51 0b18 	vmov	r0, r1, d8
 801114a:	f7ef f8c7 	bl	80002dc <__adddf3>
 801114e:	f109 39ff 	add.w	r9, r9, #4294967295
 8011152:	4606      	mov	r6, r0
 8011154:	460f      	mov	r7, r1
 8011156:	e75b      	b.n	8011010 <__kernel_rem_pio2+0x108>
 8011158:	d106      	bne.n	8011168 <__kernel_rem_pio2+0x260>
 801115a:	1e63      	subs	r3, r4, #1
 801115c:	aa0c      	add	r2, sp, #48	; 0x30
 801115e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011162:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8011166:	e79d      	b.n	80110a4 <__kernel_rem_pio2+0x19c>
 8011168:	4b34      	ldr	r3, [pc, #208]	; (801123c <__kernel_rem_pio2+0x334>)
 801116a:	2200      	movs	r2, #0
 801116c:	f7ef fcf2 	bl	8000b54 <__aeabi_dcmpge>
 8011170:	2800      	cmp	r0, #0
 8011172:	d140      	bne.n	80111f6 <__kernel_rem_pio2+0x2ee>
 8011174:	4683      	mov	fp, r0
 8011176:	2200      	movs	r2, #0
 8011178:	2300      	movs	r3, #0
 801117a:	4630      	mov	r0, r6
 801117c:	4639      	mov	r1, r7
 801117e:	f7ef fccb 	bl	8000b18 <__aeabi_dcmpeq>
 8011182:	2800      	cmp	r0, #0
 8011184:	f000 80c1 	beq.w	801130a <__kernel_rem_pio2+0x402>
 8011188:	1e65      	subs	r5, r4, #1
 801118a:	462b      	mov	r3, r5
 801118c:	2200      	movs	r2, #0
 801118e:	9900      	ldr	r1, [sp, #0]
 8011190:	428b      	cmp	r3, r1
 8011192:	da6d      	bge.n	8011270 <__kernel_rem_pio2+0x368>
 8011194:	2a00      	cmp	r2, #0
 8011196:	f000 808a 	beq.w	80112ae <__kernel_rem_pio2+0x3a6>
 801119a:	ab0c      	add	r3, sp, #48	; 0x30
 801119c:	f1aa 0a18 	sub.w	sl, sl, #24
 80111a0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	f000 80ae 	beq.w	8011306 <__kernel_rem_pio2+0x3fe>
 80111aa:	4650      	mov	r0, sl
 80111ac:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8011220 <__kernel_rem_pio2+0x318>
 80111b0:	f000 fc6a 	bl	8011a88 <scalbn>
 80111b4:	1c6b      	adds	r3, r5, #1
 80111b6:	00da      	lsls	r2, r3, #3
 80111b8:	9205      	str	r2, [sp, #20]
 80111ba:	ec57 6b10 	vmov	r6, r7, d0
 80111be:	aa70      	add	r2, sp, #448	; 0x1c0
 80111c0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8011234 <__kernel_rem_pio2+0x32c>
 80111c4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 80111c8:	462c      	mov	r4, r5
 80111ca:	f04f 0800 	mov.w	r8, #0
 80111ce:	2c00      	cmp	r4, #0
 80111d0:	f280 80d4 	bge.w	801137c <__kernel_rem_pio2+0x474>
 80111d4:	462c      	mov	r4, r5
 80111d6:	2c00      	cmp	r4, #0
 80111d8:	f2c0 8102 	blt.w	80113e0 <__kernel_rem_pio2+0x4d8>
 80111dc:	4b18      	ldr	r3, [pc, #96]	; (8011240 <__kernel_rem_pio2+0x338>)
 80111de:	461e      	mov	r6, r3
 80111e0:	ab70      	add	r3, sp, #448	; 0x1c0
 80111e2:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 80111e6:	1b2b      	subs	r3, r5, r4
 80111e8:	f04f 0900 	mov.w	r9, #0
 80111ec:	f04f 0a00 	mov.w	sl, #0
 80111f0:	2700      	movs	r7, #0
 80111f2:	9306      	str	r3, [sp, #24]
 80111f4:	e0e6      	b.n	80113c4 <__kernel_rem_pio2+0x4bc>
 80111f6:	f04f 0b02 	mov.w	fp, #2
 80111fa:	e756      	b.n	80110aa <__kernel_rem_pio2+0x1a2>
 80111fc:	f8d8 3000 	ldr.w	r3, [r8]
 8011200:	bb05      	cbnz	r5, 8011244 <__kernel_rem_pio2+0x33c>
 8011202:	b123      	cbz	r3, 801120e <__kernel_rem_pio2+0x306>
 8011204:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8011208:	f8c8 3000 	str.w	r3, [r8]
 801120c:	2301      	movs	r3, #1
 801120e:	3201      	adds	r2, #1
 8011210:	f108 0804 	add.w	r8, r8, #4
 8011214:	461d      	mov	r5, r3
 8011216:	e74f      	b.n	80110b8 <__kernel_rem_pio2+0x1b0>
	...
 8011224:	3ff00000 	.word	0x3ff00000
 8011228:	08012930 	.word	0x08012930
 801122c:	40200000 	.word	0x40200000
 8011230:	3ff00000 	.word	0x3ff00000
 8011234:	3e700000 	.word	0x3e700000
 8011238:	41700000 	.word	0x41700000
 801123c:	3fe00000 	.word	0x3fe00000
 8011240:	080128f0 	.word	0x080128f0
 8011244:	1acb      	subs	r3, r1, r3
 8011246:	f8c8 3000 	str.w	r3, [r8]
 801124a:	462b      	mov	r3, r5
 801124c:	e7df      	b.n	801120e <__kernel_rem_pio2+0x306>
 801124e:	1e62      	subs	r2, r4, #1
 8011250:	ab0c      	add	r3, sp, #48	; 0x30
 8011252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011256:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801125a:	a90c      	add	r1, sp, #48	; 0x30
 801125c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8011260:	e738      	b.n	80110d4 <__kernel_rem_pio2+0x1cc>
 8011262:	1e62      	subs	r2, r4, #1
 8011264:	ab0c      	add	r3, sp, #48	; 0x30
 8011266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801126a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801126e:	e7f4      	b.n	801125a <__kernel_rem_pio2+0x352>
 8011270:	a90c      	add	r1, sp, #48	; 0x30
 8011272:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8011276:	3b01      	subs	r3, #1
 8011278:	430a      	orrs	r2, r1
 801127a:	e788      	b.n	801118e <__kernel_rem_pio2+0x286>
 801127c:	3301      	adds	r3, #1
 801127e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8011282:	2900      	cmp	r1, #0
 8011284:	d0fa      	beq.n	801127c <__kernel_rem_pio2+0x374>
 8011286:	9a08      	ldr	r2, [sp, #32]
 8011288:	f502 7218 	add.w	r2, r2, #608	; 0x260
 801128c:	446a      	add	r2, sp
 801128e:	3a98      	subs	r2, #152	; 0x98
 8011290:	9208      	str	r2, [sp, #32]
 8011292:	9a06      	ldr	r2, [sp, #24]
 8011294:	a920      	add	r1, sp, #128	; 0x80
 8011296:	18a2      	adds	r2, r4, r2
 8011298:	18e3      	adds	r3, r4, r3
 801129a:	f104 0801 	add.w	r8, r4, #1
 801129e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80112a2:	9302      	str	r3, [sp, #8]
 80112a4:	9b02      	ldr	r3, [sp, #8]
 80112a6:	4543      	cmp	r3, r8
 80112a8:	da04      	bge.n	80112b4 <__kernel_rem_pio2+0x3ac>
 80112aa:	461c      	mov	r4, r3
 80112ac:	e6a2      	b.n	8010ff4 <__kernel_rem_pio2+0xec>
 80112ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80112b0:	2301      	movs	r3, #1
 80112b2:	e7e4      	b.n	801127e <__kernel_rem_pio2+0x376>
 80112b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80112b6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80112ba:	f7ef f95b 	bl	8000574 <__aeabi_i2d>
 80112be:	e8e5 0102 	strd	r0, r1, [r5], #8
 80112c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112c4:	46ab      	mov	fp, r5
 80112c6:	461c      	mov	r4, r3
 80112c8:	f04f 0900 	mov.w	r9, #0
 80112cc:	2600      	movs	r6, #0
 80112ce:	2700      	movs	r7, #0
 80112d0:	9b05      	ldr	r3, [sp, #20]
 80112d2:	4599      	cmp	r9, r3
 80112d4:	dd06      	ble.n	80112e4 <__kernel_rem_pio2+0x3dc>
 80112d6:	9b08      	ldr	r3, [sp, #32]
 80112d8:	e8e3 6702 	strd	r6, r7, [r3], #8
 80112dc:	f108 0801 	add.w	r8, r8, #1
 80112e0:	9308      	str	r3, [sp, #32]
 80112e2:	e7df      	b.n	80112a4 <__kernel_rem_pio2+0x39c>
 80112e4:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80112e8:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80112ec:	f7ef f9ac 	bl	8000648 <__aeabi_dmul>
 80112f0:	4602      	mov	r2, r0
 80112f2:	460b      	mov	r3, r1
 80112f4:	4630      	mov	r0, r6
 80112f6:	4639      	mov	r1, r7
 80112f8:	f7ee fff0 	bl	80002dc <__adddf3>
 80112fc:	f109 0901 	add.w	r9, r9, #1
 8011300:	4606      	mov	r6, r0
 8011302:	460f      	mov	r7, r1
 8011304:	e7e4      	b.n	80112d0 <__kernel_rem_pio2+0x3c8>
 8011306:	3d01      	subs	r5, #1
 8011308:	e747      	b.n	801119a <__kernel_rem_pio2+0x292>
 801130a:	ec47 6b10 	vmov	d0, r6, r7
 801130e:	f1ca 0000 	rsb	r0, sl, #0
 8011312:	f000 fbb9 	bl	8011a88 <scalbn>
 8011316:	ec57 6b10 	vmov	r6, r7, d0
 801131a:	4ba0      	ldr	r3, [pc, #640]	; (801159c <__kernel_rem_pio2+0x694>)
 801131c:	ee10 0a10 	vmov	r0, s0
 8011320:	2200      	movs	r2, #0
 8011322:	4639      	mov	r1, r7
 8011324:	f7ef fc16 	bl	8000b54 <__aeabi_dcmpge>
 8011328:	b1f8      	cbz	r0, 801136a <__kernel_rem_pio2+0x462>
 801132a:	4b9d      	ldr	r3, [pc, #628]	; (80115a0 <__kernel_rem_pio2+0x698>)
 801132c:	2200      	movs	r2, #0
 801132e:	4630      	mov	r0, r6
 8011330:	4639      	mov	r1, r7
 8011332:	f7ef f989 	bl	8000648 <__aeabi_dmul>
 8011336:	f7ef fc37 	bl	8000ba8 <__aeabi_d2iz>
 801133a:	4680      	mov	r8, r0
 801133c:	f7ef f91a 	bl	8000574 <__aeabi_i2d>
 8011340:	4b96      	ldr	r3, [pc, #600]	; (801159c <__kernel_rem_pio2+0x694>)
 8011342:	2200      	movs	r2, #0
 8011344:	f7ef f980 	bl	8000648 <__aeabi_dmul>
 8011348:	460b      	mov	r3, r1
 801134a:	4602      	mov	r2, r0
 801134c:	4639      	mov	r1, r7
 801134e:	4630      	mov	r0, r6
 8011350:	f7ee ffc2 	bl	80002d8 <__aeabi_dsub>
 8011354:	f7ef fc28 	bl	8000ba8 <__aeabi_d2iz>
 8011358:	1c65      	adds	r5, r4, #1
 801135a:	ab0c      	add	r3, sp, #48	; 0x30
 801135c:	f10a 0a18 	add.w	sl, sl, #24
 8011360:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011364:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8011368:	e71f      	b.n	80111aa <__kernel_rem_pio2+0x2a2>
 801136a:	4630      	mov	r0, r6
 801136c:	4639      	mov	r1, r7
 801136e:	f7ef fc1b 	bl	8000ba8 <__aeabi_d2iz>
 8011372:	ab0c      	add	r3, sp, #48	; 0x30
 8011374:	4625      	mov	r5, r4
 8011376:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801137a:	e716      	b.n	80111aa <__kernel_rem_pio2+0x2a2>
 801137c:	ab0c      	add	r3, sp, #48	; 0x30
 801137e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011382:	f7ef f8f7 	bl	8000574 <__aeabi_i2d>
 8011386:	4632      	mov	r2, r6
 8011388:	463b      	mov	r3, r7
 801138a:	f7ef f95d 	bl	8000648 <__aeabi_dmul>
 801138e:	4642      	mov	r2, r8
 8011390:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8011394:	464b      	mov	r3, r9
 8011396:	4630      	mov	r0, r6
 8011398:	4639      	mov	r1, r7
 801139a:	f7ef f955 	bl	8000648 <__aeabi_dmul>
 801139e:	3c01      	subs	r4, #1
 80113a0:	4606      	mov	r6, r0
 80113a2:	460f      	mov	r7, r1
 80113a4:	e713      	b.n	80111ce <__kernel_rem_pio2+0x2c6>
 80113a6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80113aa:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 80113ae:	f7ef f94b 	bl	8000648 <__aeabi_dmul>
 80113b2:	4602      	mov	r2, r0
 80113b4:	460b      	mov	r3, r1
 80113b6:	4648      	mov	r0, r9
 80113b8:	4651      	mov	r1, sl
 80113ba:	f7ee ff8f 	bl	80002dc <__adddf3>
 80113be:	3701      	adds	r7, #1
 80113c0:	4681      	mov	r9, r0
 80113c2:	468a      	mov	sl, r1
 80113c4:	9b00      	ldr	r3, [sp, #0]
 80113c6:	429f      	cmp	r7, r3
 80113c8:	dc02      	bgt.n	80113d0 <__kernel_rem_pio2+0x4c8>
 80113ca:	9b06      	ldr	r3, [sp, #24]
 80113cc:	429f      	cmp	r7, r3
 80113ce:	ddea      	ble.n	80113a6 <__kernel_rem_pio2+0x49e>
 80113d0:	9a06      	ldr	r2, [sp, #24]
 80113d2:	ab48      	add	r3, sp, #288	; 0x120
 80113d4:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 80113d8:	e9c6 9a00 	strd	r9, sl, [r6]
 80113dc:	3c01      	subs	r4, #1
 80113de:	e6fa      	b.n	80111d6 <__kernel_rem_pio2+0x2ce>
 80113e0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80113e2:	2b02      	cmp	r3, #2
 80113e4:	dc0b      	bgt.n	80113fe <__kernel_rem_pio2+0x4f6>
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	dc39      	bgt.n	801145e <__kernel_rem_pio2+0x556>
 80113ea:	d05d      	beq.n	80114a8 <__kernel_rem_pio2+0x5a0>
 80113ec:	9b02      	ldr	r3, [sp, #8]
 80113ee:	f003 0007 	and.w	r0, r3, #7
 80113f2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80113f6:	ecbd 8b02 	vpop	{d8}
 80113fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113fe:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8011400:	2b03      	cmp	r3, #3
 8011402:	d1f3      	bne.n	80113ec <__kernel_rem_pio2+0x4e4>
 8011404:	9b05      	ldr	r3, [sp, #20]
 8011406:	9500      	str	r5, [sp, #0]
 8011408:	f503 7318 	add.w	r3, r3, #608	; 0x260
 801140c:	eb0d 0403 	add.w	r4, sp, r3
 8011410:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8011414:	46a2      	mov	sl, r4
 8011416:	9b00      	ldr	r3, [sp, #0]
 8011418:	2b00      	cmp	r3, #0
 801141a:	f1aa 0a08 	sub.w	sl, sl, #8
 801141e:	dc69      	bgt.n	80114f4 <__kernel_rem_pio2+0x5ec>
 8011420:	46aa      	mov	sl, r5
 8011422:	f1ba 0f01 	cmp.w	sl, #1
 8011426:	f1a4 0408 	sub.w	r4, r4, #8
 801142a:	f300 8083 	bgt.w	8011534 <__kernel_rem_pio2+0x62c>
 801142e:	9c05      	ldr	r4, [sp, #20]
 8011430:	ab48      	add	r3, sp, #288	; 0x120
 8011432:	441c      	add	r4, r3
 8011434:	2000      	movs	r0, #0
 8011436:	2100      	movs	r1, #0
 8011438:	2d01      	cmp	r5, #1
 801143a:	f300 809a 	bgt.w	8011572 <__kernel_rem_pio2+0x66a>
 801143e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8011442:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8011446:	f1bb 0f00 	cmp.w	fp, #0
 801144a:	f040 8098 	bne.w	801157e <__kernel_rem_pio2+0x676>
 801144e:	9b04      	ldr	r3, [sp, #16]
 8011450:	e9c3 7800 	strd	r7, r8, [r3]
 8011454:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8011458:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801145c:	e7c6      	b.n	80113ec <__kernel_rem_pio2+0x4e4>
 801145e:	9e05      	ldr	r6, [sp, #20]
 8011460:	ab48      	add	r3, sp, #288	; 0x120
 8011462:	441e      	add	r6, r3
 8011464:	462c      	mov	r4, r5
 8011466:	2000      	movs	r0, #0
 8011468:	2100      	movs	r1, #0
 801146a:	2c00      	cmp	r4, #0
 801146c:	da33      	bge.n	80114d6 <__kernel_rem_pio2+0x5ce>
 801146e:	f1bb 0f00 	cmp.w	fp, #0
 8011472:	d036      	beq.n	80114e2 <__kernel_rem_pio2+0x5da>
 8011474:	4602      	mov	r2, r0
 8011476:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801147a:	9c04      	ldr	r4, [sp, #16]
 801147c:	e9c4 2300 	strd	r2, r3, [r4]
 8011480:	4602      	mov	r2, r0
 8011482:	460b      	mov	r3, r1
 8011484:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8011488:	f7ee ff26 	bl	80002d8 <__aeabi_dsub>
 801148c:	ae4a      	add	r6, sp, #296	; 0x128
 801148e:	2401      	movs	r4, #1
 8011490:	42a5      	cmp	r5, r4
 8011492:	da29      	bge.n	80114e8 <__kernel_rem_pio2+0x5e0>
 8011494:	f1bb 0f00 	cmp.w	fp, #0
 8011498:	d002      	beq.n	80114a0 <__kernel_rem_pio2+0x598>
 801149a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801149e:	4619      	mov	r1, r3
 80114a0:	9b04      	ldr	r3, [sp, #16]
 80114a2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80114a6:	e7a1      	b.n	80113ec <__kernel_rem_pio2+0x4e4>
 80114a8:	9c05      	ldr	r4, [sp, #20]
 80114aa:	ab48      	add	r3, sp, #288	; 0x120
 80114ac:	441c      	add	r4, r3
 80114ae:	2000      	movs	r0, #0
 80114b0:	2100      	movs	r1, #0
 80114b2:	2d00      	cmp	r5, #0
 80114b4:	da09      	bge.n	80114ca <__kernel_rem_pio2+0x5c2>
 80114b6:	f1bb 0f00 	cmp.w	fp, #0
 80114ba:	d002      	beq.n	80114c2 <__kernel_rem_pio2+0x5ba>
 80114bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80114c0:	4619      	mov	r1, r3
 80114c2:	9b04      	ldr	r3, [sp, #16]
 80114c4:	e9c3 0100 	strd	r0, r1, [r3]
 80114c8:	e790      	b.n	80113ec <__kernel_rem_pio2+0x4e4>
 80114ca:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80114ce:	f7ee ff05 	bl	80002dc <__adddf3>
 80114d2:	3d01      	subs	r5, #1
 80114d4:	e7ed      	b.n	80114b2 <__kernel_rem_pio2+0x5aa>
 80114d6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80114da:	f7ee feff 	bl	80002dc <__adddf3>
 80114de:	3c01      	subs	r4, #1
 80114e0:	e7c3      	b.n	801146a <__kernel_rem_pio2+0x562>
 80114e2:	4602      	mov	r2, r0
 80114e4:	460b      	mov	r3, r1
 80114e6:	e7c8      	b.n	801147a <__kernel_rem_pio2+0x572>
 80114e8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80114ec:	f7ee fef6 	bl	80002dc <__adddf3>
 80114f0:	3401      	adds	r4, #1
 80114f2:	e7cd      	b.n	8011490 <__kernel_rem_pio2+0x588>
 80114f4:	e9da 8900 	ldrd	r8, r9, [sl]
 80114f8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80114fc:	9b00      	ldr	r3, [sp, #0]
 80114fe:	3b01      	subs	r3, #1
 8011500:	9300      	str	r3, [sp, #0]
 8011502:	4632      	mov	r2, r6
 8011504:	463b      	mov	r3, r7
 8011506:	4640      	mov	r0, r8
 8011508:	4649      	mov	r1, r9
 801150a:	f7ee fee7 	bl	80002dc <__adddf3>
 801150e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011512:	4602      	mov	r2, r0
 8011514:	460b      	mov	r3, r1
 8011516:	4640      	mov	r0, r8
 8011518:	4649      	mov	r1, r9
 801151a:	f7ee fedd 	bl	80002d8 <__aeabi_dsub>
 801151e:	4632      	mov	r2, r6
 8011520:	463b      	mov	r3, r7
 8011522:	f7ee fedb 	bl	80002dc <__adddf3>
 8011526:	ed9d 7b06 	vldr	d7, [sp, #24]
 801152a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801152e:	ed8a 7b00 	vstr	d7, [sl]
 8011532:	e770      	b.n	8011416 <__kernel_rem_pio2+0x50e>
 8011534:	e9d4 8900 	ldrd	r8, r9, [r4]
 8011538:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 801153c:	4640      	mov	r0, r8
 801153e:	4632      	mov	r2, r6
 8011540:	463b      	mov	r3, r7
 8011542:	4649      	mov	r1, r9
 8011544:	f7ee feca 	bl	80002dc <__adddf3>
 8011548:	e9cd 0100 	strd	r0, r1, [sp]
 801154c:	4602      	mov	r2, r0
 801154e:	460b      	mov	r3, r1
 8011550:	4640      	mov	r0, r8
 8011552:	4649      	mov	r1, r9
 8011554:	f7ee fec0 	bl	80002d8 <__aeabi_dsub>
 8011558:	4632      	mov	r2, r6
 801155a:	463b      	mov	r3, r7
 801155c:	f7ee febe 	bl	80002dc <__adddf3>
 8011560:	ed9d 7b00 	vldr	d7, [sp]
 8011564:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011568:	ed84 7b00 	vstr	d7, [r4]
 801156c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011570:	e757      	b.n	8011422 <__kernel_rem_pio2+0x51a>
 8011572:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011576:	f7ee feb1 	bl	80002dc <__adddf3>
 801157a:	3d01      	subs	r5, #1
 801157c:	e75c      	b.n	8011438 <__kernel_rem_pio2+0x530>
 801157e:	9b04      	ldr	r3, [sp, #16]
 8011580:	9a04      	ldr	r2, [sp, #16]
 8011582:	601f      	str	r7, [r3, #0]
 8011584:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8011588:	605c      	str	r4, [r3, #4]
 801158a:	609d      	str	r5, [r3, #8]
 801158c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8011590:	60d3      	str	r3, [r2, #12]
 8011592:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011596:	6110      	str	r0, [r2, #16]
 8011598:	6153      	str	r3, [r2, #20]
 801159a:	e727      	b.n	80113ec <__kernel_rem_pio2+0x4e4>
 801159c:	41700000 	.word	0x41700000
 80115a0:	3e700000 	.word	0x3e700000

080115a4 <__kernel_rem_pio2f>:
 80115a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115a8:	ed2d 8b04 	vpush	{d8-d9}
 80115ac:	b0d9      	sub	sp, #356	; 0x164
 80115ae:	4688      	mov	r8, r1
 80115b0:	9002      	str	r0, [sp, #8]
 80115b2:	49b8      	ldr	r1, [pc, #736]	; (8011894 <__kernel_rem_pio2f+0x2f0>)
 80115b4:	9866      	ldr	r0, [sp, #408]	; 0x198
 80115b6:	9301      	str	r3, [sp, #4]
 80115b8:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 80115bc:	9901      	ldr	r1, [sp, #4]
 80115be:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 80115c0:	f101 3bff 	add.w	fp, r1, #4294967295
 80115c4:	1d11      	adds	r1, r2, #4
 80115c6:	db25      	blt.n	8011614 <__kernel_rem_pio2f+0x70>
 80115c8:	1ed0      	subs	r0, r2, #3
 80115ca:	bf48      	it	mi
 80115cc:	1d10      	addmi	r0, r2, #4
 80115ce:	10c0      	asrs	r0, r0, #3
 80115d0:	1c45      	adds	r5, r0, #1
 80115d2:	00e9      	lsls	r1, r5, #3
 80115d4:	eba0 070b 	sub.w	r7, r0, fp
 80115d8:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 80118a4 <__kernel_rem_pio2f+0x300>
 80115dc:	9103      	str	r1, [sp, #12]
 80115de:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 80115e2:	eb0a 0c0b 	add.w	ip, sl, fp
 80115e6:	ae1c      	add	r6, sp, #112	; 0x70
 80115e8:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 80115ec:	2400      	movs	r4, #0
 80115ee:	4564      	cmp	r4, ip
 80115f0:	dd12      	ble.n	8011618 <__kernel_rem_pio2f+0x74>
 80115f2:	9901      	ldr	r1, [sp, #4]
 80115f4:	ac1c      	add	r4, sp, #112	; 0x70
 80115f6:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80115fa:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 80115fe:	f04f 0c00 	mov.w	ip, #0
 8011602:	45d4      	cmp	ip, sl
 8011604:	dc27      	bgt.n	8011656 <__kernel_rem_pio2f+0xb2>
 8011606:	f8dd e008 	ldr.w	lr, [sp, #8]
 801160a:	eddf 7aa6 	vldr	s15, [pc, #664]	; 80118a4 <__kernel_rem_pio2f+0x300>
 801160e:	4627      	mov	r7, r4
 8011610:	2600      	movs	r6, #0
 8011612:	e016      	b.n	8011642 <__kernel_rem_pio2f+0x9e>
 8011614:	2000      	movs	r0, #0
 8011616:	e7db      	b.n	80115d0 <__kernel_rem_pio2f+0x2c>
 8011618:	42e7      	cmn	r7, r4
 801161a:	bf5d      	ittte	pl
 801161c:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 8011620:	ee07 1a90 	vmovpl	s15, r1
 8011624:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8011628:	eef0 7a47 	vmovmi.f32	s15, s14
 801162c:	ece6 7a01 	vstmia	r6!, {s15}
 8011630:	3401      	adds	r4, #1
 8011632:	e7dc      	b.n	80115ee <__kernel_rem_pio2f+0x4a>
 8011634:	ecfe 6a01 	vldmia	lr!, {s13}
 8011638:	ed97 7a00 	vldr	s14, [r7]
 801163c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011640:	3601      	adds	r6, #1
 8011642:	455e      	cmp	r6, fp
 8011644:	f1a7 0704 	sub.w	r7, r7, #4
 8011648:	ddf4      	ble.n	8011634 <__kernel_rem_pio2f+0x90>
 801164a:	ece9 7a01 	vstmia	r9!, {s15}
 801164e:	f10c 0c01 	add.w	ip, ip, #1
 8011652:	3404      	adds	r4, #4
 8011654:	e7d5      	b.n	8011602 <__kernel_rem_pio2f+0x5e>
 8011656:	a908      	add	r1, sp, #32
 8011658:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801165c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8011660:	eddf 8a8f 	vldr	s17, [pc, #572]	; 80118a0 <__kernel_rem_pio2f+0x2fc>
 8011664:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 801189c <__kernel_rem_pio2f+0x2f8>
 8011668:	9105      	str	r1, [sp, #20]
 801166a:	9304      	str	r3, [sp, #16]
 801166c:	4656      	mov	r6, sl
 801166e:	00b3      	lsls	r3, r6, #2
 8011670:	9306      	str	r3, [sp, #24]
 8011672:	ab58      	add	r3, sp, #352	; 0x160
 8011674:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8011678:	ac08      	add	r4, sp, #32
 801167a:	ab44      	add	r3, sp, #272	; 0x110
 801167c:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8011680:	46a4      	mov	ip, r4
 8011682:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8011686:	4637      	mov	r7, r6
 8011688:	2f00      	cmp	r7, #0
 801168a:	f1a0 0004 	sub.w	r0, r0, #4
 801168e:	dc4a      	bgt.n	8011726 <__kernel_rem_pio2f+0x182>
 8011690:	4628      	mov	r0, r5
 8011692:	9207      	str	r2, [sp, #28]
 8011694:	f000 fa76 	bl	8011b84 <scalbnf>
 8011698:	eeb0 8a40 	vmov.f32	s16, s0
 801169c:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80116a0:	ee28 0a00 	vmul.f32	s0, s16, s0
 80116a4:	f000 fb54 	bl	8011d50 <floorf>
 80116a8:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80116ac:	eea0 8a67 	vfms.f32	s16, s0, s15
 80116b0:	2d00      	cmp	r5, #0
 80116b2:	9a07      	ldr	r2, [sp, #28]
 80116b4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80116b8:	ee17 9a90 	vmov	r9, s15
 80116bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80116c0:	ee38 8a67 	vsub.f32	s16, s16, s15
 80116c4:	dd41      	ble.n	801174a <__kernel_rem_pio2f+0x1a6>
 80116c6:	f106 3cff 	add.w	ip, r6, #4294967295
 80116ca:	ab08      	add	r3, sp, #32
 80116cc:	f1c5 0e08 	rsb	lr, r5, #8
 80116d0:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 80116d4:	fa47 f00e 	asr.w	r0, r7, lr
 80116d8:	4481      	add	r9, r0
 80116da:	fa00 f00e 	lsl.w	r0, r0, lr
 80116de:	1a3f      	subs	r7, r7, r0
 80116e0:	f1c5 0007 	rsb	r0, r5, #7
 80116e4:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 80116e8:	4107      	asrs	r7, r0
 80116ea:	2f00      	cmp	r7, #0
 80116ec:	dd3c      	ble.n	8011768 <__kernel_rem_pio2f+0x1c4>
 80116ee:	f04f 0e00 	mov.w	lr, #0
 80116f2:	f109 0901 	add.w	r9, r9, #1
 80116f6:	4671      	mov	r1, lr
 80116f8:	4576      	cmp	r6, lr
 80116fa:	dc67      	bgt.n	80117cc <__kernel_rem_pio2f+0x228>
 80116fc:	2d00      	cmp	r5, #0
 80116fe:	dd03      	ble.n	8011708 <__kernel_rem_pio2f+0x164>
 8011700:	2d01      	cmp	r5, #1
 8011702:	d074      	beq.n	80117ee <__kernel_rem_pio2f+0x24a>
 8011704:	2d02      	cmp	r5, #2
 8011706:	d07b      	beq.n	8011800 <__kernel_rem_pio2f+0x25c>
 8011708:	2f02      	cmp	r7, #2
 801170a:	d12d      	bne.n	8011768 <__kernel_rem_pio2f+0x1c4>
 801170c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8011710:	ee30 8a48 	vsub.f32	s16, s0, s16
 8011714:	b341      	cbz	r1, 8011768 <__kernel_rem_pio2f+0x1c4>
 8011716:	4628      	mov	r0, r5
 8011718:	9207      	str	r2, [sp, #28]
 801171a:	f000 fa33 	bl	8011b84 <scalbnf>
 801171e:	9a07      	ldr	r2, [sp, #28]
 8011720:	ee38 8a40 	vsub.f32	s16, s16, s0
 8011724:	e020      	b.n	8011768 <__kernel_rem_pio2f+0x1c4>
 8011726:	ee60 7a28 	vmul.f32	s15, s0, s17
 801172a:	3f01      	subs	r7, #1
 801172c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011730:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011734:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8011738:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801173c:	ecac 0a01 	vstmia	ip!, {s0}
 8011740:	ed90 0a00 	vldr	s0, [r0]
 8011744:	ee37 0a80 	vadd.f32	s0, s15, s0
 8011748:	e79e      	b.n	8011688 <__kernel_rem_pio2f+0xe4>
 801174a:	d105      	bne.n	8011758 <__kernel_rem_pio2f+0x1b4>
 801174c:	1e70      	subs	r0, r6, #1
 801174e:	ab08      	add	r3, sp, #32
 8011750:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8011754:	11ff      	asrs	r7, r7, #7
 8011756:	e7c8      	b.n	80116ea <__kernel_rem_pio2f+0x146>
 8011758:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801175c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8011760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011764:	da30      	bge.n	80117c8 <__kernel_rem_pio2f+0x224>
 8011766:	2700      	movs	r7, #0
 8011768:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801176c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011770:	f040 809a 	bne.w	80118a8 <__kernel_rem_pio2f+0x304>
 8011774:	1e74      	subs	r4, r6, #1
 8011776:	46a4      	mov	ip, r4
 8011778:	2100      	movs	r1, #0
 801177a:	45d4      	cmp	ip, sl
 801177c:	da47      	bge.n	801180e <__kernel_rem_pio2f+0x26a>
 801177e:	2900      	cmp	r1, #0
 8011780:	d063      	beq.n	801184a <__kernel_rem_pio2f+0x2a6>
 8011782:	ab08      	add	r3, sp, #32
 8011784:	3d08      	subs	r5, #8
 8011786:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801178a:	2b00      	cmp	r3, #0
 801178c:	d07f      	beq.n	801188e <__kernel_rem_pio2f+0x2ea>
 801178e:	4628      	mov	r0, r5
 8011790:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8011794:	f000 f9f6 	bl	8011b84 <scalbnf>
 8011798:	1c63      	adds	r3, r4, #1
 801179a:	aa44      	add	r2, sp, #272	; 0x110
 801179c:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80118a0 <__kernel_rem_pio2f+0x2fc>
 80117a0:	0099      	lsls	r1, r3, #2
 80117a2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80117a6:	4623      	mov	r3, r4
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	f280 80ad 	bge.w	8011908 <__kernel_rem_pio2f+0x364>
 80117ae:	4623      	mov	r3, r4
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	f2c0 80cb 	blt.w	801194c <__kernel_rem_pio2f+0x3a8>
 80117b6:	aa44      	add	r2, sp, #272	; 0x110
 80117b8:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80117bc:	4e36      	ldr	r6, [pc, #216]	; (8011898 <__kernel_rem_pio2f+0x2f4>)
 80117be:	eddf 7a39 	vldr	s15, [pc, #228]	; 80118a4 <__kernel_rem_pio2f+0x300>
 80117c2:	2000      	movs	r0, #0
 80117c4:	1ae2      	subs	r2, r4, r3
 80117c6:	e0b6      	b.n	8011936 <__kernel_rem_pio2f+0x392>
 80117c8:	2702      	movs	r7, #2
 80117ca:	e790      	b.n	80116ee <__kernel_rem_pio2f+0x14a>
 80117cc:	6820      	ldr	r0, [r4, #0]
 80117ce:	b949      	cbnz	r1, 80117e4 <__kernel_rem_pio2f+0x240>
 80117d0:	b118      	cbz	r0, 80117da <__kernel_rem_pio2f+0x236>
 80117d2:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80117d6:	6020      	str	r0, [r4, #0]
 80117d8:	2001      	movs	r0, #1
 80117da:	f10e 0e01 	add.w	lr, lr, #1
 80117de:	3404      	adds	r4, #4
 80117e0:	4601      	mov	r1, r0
 80117e2:	e789      	b.n	80116f8 <__kernel_rem_pio2f+0x154>
 80117e4:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 80117e8:	6020      	str	r0, [r4, #0]
 80117ea:	4608      	mov	r0, r1
 80117ec:	e7f5      	b.n	80117da <__kernel_rem_pio2f+0x236>
 80117ee:	1e74      	subs	r4, r6, #1
 80117f0:	ab08      	add	r3, sp, #32
 80117f2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80117f6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80117fa:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80117fe:	e783      	b.n	8011708 <__kernel_rem_pio2f+0x164>
 8011800:	1e74      	subs	r4, r6, #1
 8011802:	ab08      	add	r3, sp, #32
 8011804:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011808:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 801180c:	e7f5      	b.n	80117fa <__kernel_rem_pio2f+0x256>
 801180e:	ab08      	add	r3, sp, #32
 8011810:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8011814:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011818:	4301      	orrs	r1, r0
 801181a:	e7ae      	b.n	801177a <__kernel_rem_pio2f+0x1d6>
 801181c:	3001      	adds	r0, #1
 801181e:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 8011822:	2f00      	cmp	r7, #0
 8011824:	d0fa      	beq.n	801181c <__kernel_rem_pio2f+0x278>
 8011826:	9b06      	ldr	r3, [sp, #24]
 8011828:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801182c:	eb0d 0403 	add.w	r4, sp, r3
 8011830:	9b01      	ldr	r3, [sp, #4]
 8011832:	18f7      	adds	r7, r6, r3
 8011834:	ab1c      	add	r3, sp, #112	; 0x70
 8011836:	f106 0c01 	add.w	ip, r6, #1
 801183a:	3c4c      	subs	r4, #76	; 0x4c
 801183c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011840:	4430      	add	r0, r6
 8011842:	4560      	cmp	r0, ip
 8011844:	da04      	bge.n	8011850 <__kernel_rem_pio2f+0x2ac>
 8011846:	4606      	mov	r6, r0
 8011848:	e711      	b.n	801166e <__kernel_rem_pio2f+0xca>
 801184a:	9c05      	ldr	r4, [sp, #20]
 801184c:	2001      	movs	r0, #1
 801184e:	e7e6      	b.n	801181e <__kernel_rem_pio2f+0x27a>
 8011850:	9b04      	ldr	r3, [sp, #16]
 8011852:	f8dd e008 	ldr.w	lr, [sp, #8]
 8011856:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801185a:	9306      	str	r3, [sp, #24]
 801185c:	ee07 3a90 	vmov	s15, r3
 8011860:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011864:	2600      	movs	r6, #0
 8011866:	ece7 7a01 	vstmia	r7!, {s15}
 801186a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80118a4 <__kernel_rem_pio2f+0x300>
 801186e:	46b9      	mov	r9, r7
 8011870:	455e      	cmp	r6, fp
 8011872:	dd04      	ble.n	801187e <__kernel_rem_pio2f+0x2da>
 8011874:	ece4 7a01 	vstmia	r4!, {s15}
 8011878:	f10c 0c01 	add.w	ip, ip, #1
 801187c:	e7e1      	b.n	8011842 <__kernel_rem_pio2f+0x29e>
 801187e:	ecfe 6a01 	vldmia	lr!, {s13}
 8011882:	ed39 7a01 	vldmdb	r9!, {s14}
 8011886:	3601      	adds	r6, #1
 8011888:	eee6 7a87 	vfma.f32	s15, s13, s14
 801188c:	e7f0      	b.n	8011870 <__kernel_rem_pio2f+0x2cc>
 801188e:	3c01      	subs	r4, #1
 8011890:	e777      	b.n	8011782 <__kernel_rem_pio2f+0x1de>
 8011892:	bf00      	nop
 8011894:	0801296c 	.word	0x0801296c
 8011898:	08012940 	.word	0x08012940
 801189c:	43800000 	.word	0x43800000
 80118a0:	3b800000 	.word	0x3b800000
 80118a4:	00000000 	.word	0x00000000
 80118a8:	9b03      	ldr	r3, [sp, #12]
 80118aa:	eeb0 0a48 	vmov.f32	s0, s16
 80118ae:	1a98      	subs	r0, r3, r2
 80118b0:	f000 f968 	bl	8011b84 <scalbnf>
 80118b4:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 801189c <__kernel_rem_pio2f+0x2f8>
 80118b8:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80118bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118c0:	db19      	blt.n	80118f6 <__kernel_rem_pio2f+0x352>
 80118c2:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80118a0 <__kernel_rem_pio2f+0x2fc>
 80118c6:	ee60 7a27 	vmul.f32	s15, s0, s15
 80118ca:	aa08      	add	r2, sp, #32
 80118cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80118d0:	1c74      	adds	r4, r6, #1
 80118d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80118d6:	3508      	adds	r5, #8
 80118d8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80118dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80118e0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80118e4:	ee10 3a10 	vmov	r3, s0
 80118e8:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80118ec:	ee17 3a90 	vmov	r3, s15
 80118f0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80118f4:	e74b      	b.n	801178e <__kernel_rem_pio2f+0x1ea>
 80118f6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80118fa:	aa08      	add	r2, sp, #32
 80118fc:	ee10 3a10 	vmov	r3, s0
 8011900:	4634      	mov	r4, r6
 8011902:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8011906:	e742      	b.n	801178e <__kernel_rem_pio2f+0x1ea>
 8011908:	a808      	add	r0, sp, #32
 801190a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801190e:	9001      	str	r0, [sp, #4]
 8011910:	ee07 0a90 	vmov	s15, r0
 8011914:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011918:	3b01      	subs	r3, #1
 801191a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801191e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8011922:	ed62 7a01 	vstmdb	r2!, {s15}
 8011926:	e73f      	b.n	80117a8 <__kernel_rem_pio2f+0x204>
 8011928:	ecf6 6a01 	vldmia	r6!, {s13}
 801192c:	ecb5 7a01 	vldmia	r5!, {s14}
 8011930:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011934:	3001      	adds	r0, #1
 8011936:	4550      	cmp	r0, sl
 8011938:	dc01      	bgt.n	801193e <__kernel_rem_pio2f+0x39a>
 801193a:	4290      	cmp	r0, r2
 801193c:	ddf4      	ble.n	8011928 <__kernel_rem_pio2f+0x384>
 801193e:	a858      	add	r0, sp, #352	; 0x160
 8011940:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8011944:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 8011948:	3b01      	subs	r3, #1
 801194a:	e731      	b.n	80117b0 <__kernel_rem_pio2f+0x20c>
 801194c:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801194e:	2b02      	cmp	r3, #2
 8011950:	dc09      	bgt.n	8011966 <__kernel_rem_pio2f+0x3c2>
 8011952:	2b00      	cmp	r3, #0
 8011954:	dc2b      	bgt.n	80119ae <__kernel_rem_pio2f+0x40a>
 8011956:	d044      	beq.n	80119e2 <__kernel_rem_pio2f+0x43e>
 8011958:	f009 0007 	and.w	r0, r9, #7
 801195c:	b059      	add	sp, #356	; 0x164
 801195e:	ecbd 8b04 	vpop	{d8-d9}
 8011962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011966:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8011968:	2b03      	cmp	r3, #3
 801196a:	d1f5      	bne.n	8011958 <__kernel_rem_pio2f+0x3b4>
 801196c:	aa30      	add	r2, sp, #192	; 0xc0
 801196e:	1f0b      	subs	r3, r1, #4
 8011970:	4413      	add	r3, r2
 8011972:	461a      	mov	r2, r3
 8011974:	4620      	mov	r0, r4
 8011976:	2800      	cmp	r0, #0
 8011978:	f1a2 0204 	sub.w	r2, r2, #4
 801197c:	dc52      	bgt.n	8011a24 <__kernel_rem_pio2f+0x480>
 801197e:	4622      	mov	r2, r4
 8011980:	2a01      	cmp	r2, #1
 8011982:	f1a3 0304 	sub.w	r3, r3, #4
 8011986:	dc5d      	bgt.n	8011a44 <__kernel_rem_pio2f+0x4a0>
 8011988:	ab30      	add	r3, sp, #192	; 0xc0
 801198a:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 80118a4 <__kernel_rem_pio2f+0x300>
 801198e:	440b      	add	r3, r1
 8011990:	2c01      	cmp	r4, #1
 8011992:	dc67      	bgt.n	8011a64 <__kernel_rem_pio2f+0x4c0>
 8011994:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8011998:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 801199c:	2f00      	cmp	r7, #0
 801199e:	d167      	bne.n	8011a70 <__kernel_rem_pio2f+0x4cc>
 80119a0:	edc8 6a00 	vstr	s13, [r8]
 80119a4:	ed88 7a01 	vstr	s14, [r8, #4]
 80119a8:	edc8 7a02 	vstr	s15, [r8, #8]
 80119ac:	e7d4      	b.n	8011958 <__kernel_rem_pio2f+0x3b4>
 80119ae:	ab30      	add	r3, sp, #192	; 0xc0
 80119b0:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 80118a4 <__kernel_rem_pio2f+0x300>
 80119b4:	440b      	add	r3, r1
 80119b6:	4622      	mov	r2, r4
 80119b8:	2a00      	cmp	r2, #0
 80119ba:	da24      	bge.n	8011a06 <__kernel_rem_pio2f+0x462>
 80119bc:	b34f      	cbz	r7, 8011a12 <__kernel_rem_pio2f+0x46e>
 80119be:	eef1 7a47 	vneg.f32	s15, s14
 80119c2:	edc8 7a00 	vstr	s15, [r8]
 80119c6:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 80119ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80119ce:	aa31      	add	r2, sp, #196	; 0xc4
 80119d0:	2301      	movs	r3, #1
 80119d2:	429c      	cmp	r4, r3
 80119d4:	da20      	bge.n	8011a18 <__kernel_rem_pio2f+0x474>
 80119d6:	b10f      	cbz	r7, 80119dc <__kernel_rem_pio2f+0x438>
 80119d8:	eef1 7a67 	vneg.f32	s15, s15
 80119dc:	edc8 7a01 	vstr	s15, [r8, #4]
 80119e0:	e7ba      	b.n	8011958 <__kernel_rem_pio2f+0x3b4>
 80119e2:	ab30      	add	r3, sp, #192	; 0xc0
 80119e4:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 80118a4 <__kernel_rem_pio2f+0x300>
 80119e8:	440b      	add	r3, r1
 80119ea:	2c00      	cmp	r4, #0
 80119ec:	da05      	bge.n	80119fa <__kernel_rem_pio2f+0x456>
 80119ee:	b10f      	cbz	r7, 80119f4 <__kernel_rem_pio2f+0x450>
 80119f0:	eef1 7a67 	vneg.f32	s15, s15
 80119f4:	edc8 7a00 	vstr	s15, [r8]
 80119f8:	e7ae      	b.n	8011958 <__kernel_rem_pio2f+0x3b4>
 80119fa:	ed33 7a01 	vldmdb	r3!, {s14}
 80119fe:	3c01      	subs	r4, #1
 8011a00:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011a04:	e7f1      	b.n	80119ea <__kernel_rem_pio2f+0x446>
 8011a06:	ed73 7a01 	vldmdb	r3!, {s15}
 8011a0a:	3a01      	subs	r2, #1
 8011a0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011a10:	e7d2      	b.n	80119b8 <__kernel_rem_pio2f+0x414>
 8011a12:	eef0 7a47 	vmov.f32	s15, s14
 8011a16:	e7d4      	b.n	80119c2 <__kernel_rem_pio2f+0x41e>
 8011a18:	ecb2 7a01 	vldmia	r2!, {s14}
 8011a1c:	3301      	adds	r3, #1
 8011a1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011a22:	e7d6      	b.n	80119d2 <__kernel_rem_pio2f+0x42e>
 8011a24:	edd2 7a00 	vldr	s15, [r2]
 8011a28:	edd2 6a01 	vldr	s13, [r2, #4]
 8011a2c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8011a30:	3801      	subs	r0, #1
 8011a32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011a36:	ed82 7a00 	vstr	s14, [r2]
 8011a3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011a3e:	edc2 7a01 	vstr	s15, [r2, #4]
 8011a42:	e798      	b.n	8011976 <__kernel_rem_pio2f+0x3d2>
 8011a44:	edd3 7a00 	vldr	s15, [r3]
 8011a48:	edd3 6a01 	vldr	s13, [r3, #4]
 8011a4c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8011a50:	3a01      	subs	r2, #1
 8011a52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011a56:	ed83 7a00 	vstr	s14, [r3]
 8011a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011a5e:	edc3 7a01 	vstr	s15, [r3, #4]
 8011a62:	e78d      	b.n	8011980 <__kernel_rem_pio2f+0x3dc>
 8011a64:	ed33 7a01 	vldmdb	r3!, {s14}
 8011a68:	3c01      	subs	r4, #1
 8011a6a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011a6e:	e78f      	b.n	8011990 <__kernel_rem_pio2f+0x3ec>
 8011a70:	eef1 6a66 	vneg.f32	s13, s13
 8011a74:	eeb1 7a47 	vneg.f32	s14, s14
 8011a78:	edc8 6a00 	vstr	s13, [r8]
 8011a7c:	ed88 7a01 	vstr	s14, [r8, #4]
 8011a80:	eef1 7a67 	vneg.f32	s15, s15
 8011a84:	e790      	b.n	80119a8 <__kernel_rem_pio2f+0x404>
 8011a86:	bf00      	nop

08011a88 <scalbn>:
 8011a88:	b570      	push	{r4, r5, r6, lr}
 8011a8a:	ec55 4b10 	vmov	r4, r5, d0
 8011a8e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8011a92:	4606      	mov	r6, r0
 8011a94:	462b      	mov	r3, r5
 8011a96:	b999      	cbnz	r1, 8011ac0 <scalbn+0x38>
 8011a98:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011a9c:	4323      	orrs	r3, r4
 8011a9e:	d03f      	beq.n	8011b20 <scalbn+0x98>
 8011aa0:	4b35      	ldr	r3, [pc, #212]	; (8011b78 <scalbn+0xf0>)
 8011aa2:	4629      	mov	r1, r5
 8011aa4:	ee10 0a10 	vmov	r0, s0
 8011aa8:	2200      	movs	r2, #0
 8011aaa:	f7ee fdcd 	bl	8000648 <__aeabi_dmul>
 8011aae:	4b33      	ldr	r3, [pc, #204]	; (8011b7c <scalbn+0xf4>)
 8011ab0:	429e      	cmp	r6, r3
 8011ab2:	4604      	mov	r4, r0
 8011ab4:	460d      	mov	r5, r1
 8011ab6:	da10      	bge.n	8011ada <scalbn+0x52>
 8011ab8:	a327      	add	r3, pc, #156	; (adr r3, 8011b58 <scalbn+0xd0>)
 8011aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011abe:	e01f      	b.n	8011b00 <scalbn+0x78>
 8011ac0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8011ac4:	4291      	cmp	r1, r2
 8011ac6:	d10c      	bne.n	8011ae2 <scalbn+0x5a>
 8011ac8:	ee10 2a10 	vmov	r2, s0
 8011acc:	4620      	mov	r0, r4
 8011ace:	4629      	mov	r1, r5
 8011ad0:	f7ee fc04 	bl	80002dc <__adddf3>
 8011ad4:	4604      	mov	r4, r0
 8011ad6:	460d      	mov	r5, r1
 8011ad8:	e022      	b.n	8011b20 <scalbn+0x98>
 8011ada:	460b      	mov	r3, r1
 8011adc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8011ae0:	3936      	subs	r1, #54	; 0x36
 8011ae2:	f24c 3250 	movw	r2, #50000	; 0xc350
 8011ae6:	4296      	cmp	r6, r2
 8011ae8:	dd0d      	ble.n	8011b06 <scalbn+0x7e>
 8011aea:	2d00      	cmp	r5, #0
 8011aec:	a11c      	add	r1, pc, #112	; (adr r1, 8011b60 <scalbn+0xd8>)
 8011aee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011af2:	da02      	bge.n	8011afa <scalbn+0x72>
 8011af4:	a11c      	add	r1, pc, #112	; (adr r1, 8011b68 <scalbn+0xe0>)
 8011af6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011afa:	a319      	add	r3, pc, #100	; (adr r3, 8011b60 <scalbn+0xd8>)
 8011afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b00:	f7ee fda2 	bl	8000648 <__aeabi_dmul>
 8011b04:	e7e6      	b.n	8011ad4 <scalbn+0x4c>
 8011b06:	1872      	adds	r2, r6, r1
 8011b08:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8011b0c:	428a      	cmp	r2, r1
 8011b0e:	dcec      	bgt.n	8011aea <scalbn+0x62>
 8011b10:	2a00      	cmp	r2, #0
 8011b12:	dd08      	ble.n	8011b26 <scalbn+0x9e>
 8011b14:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011b18:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011b1c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011b20:	ec45 4b10 	vmov	d0, r4, r5
 8011b24:	bd70      	pop	{r4, r5, r6, pc}
 8011b26:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8011b2a:	da08      	bge.n	8011b3e <scalbn+0xb6>
 8011b2c:	2d00      	cmp	r5, #0
 8011b2e:	a10a      	add	r1, pc, #40	; (adr r1, 8011b58 <scalbn+0xd0>)
 8011b30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011b34:	dac0      	bge.n	8011ab8 <scalbn+0x30>
 8011b36:	a10e      	add	r1, pc, #56	; (adr r1, 8011b70 <scalbn+0xe8>)
 8011b38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011b3c:	e7bc      	b.n	8011ab8 <scalbn+0x30>
 8011b3e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011b42:	3236      	adds	r2, #54	; 0x36
 8011b44:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011b48:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011b4c:	4620      	mov	r0, r4
 8011b4e:	4b0c      	ldr	r3, [pc, #48]	; (8011b80 <scalbn+0xf8>)
 8011b50:	2200      	movs	r2, #0
 8011b52:	e7d5      	b.n	8011b00 <scalbn+0x78>
 8011b54:	f3af 8000 	nop.w
 8011b58:	c2f8f359 	.word	0xc2f8f359
 8011b5c:	01a56e1f 	.word	0x01a56e1f
 8011b60:	8800759c 	.word	0x8800759c
 8011b64:	7e37e43c 	.word	0x7e37e43c
 8011b68:	8800759c 	.word	0x8800759c
 8011b6c:	fe37e43c 	.word	0xfe37e43c
 8011b70:	c2f8f359 	.word	0xc2f8f359
 8011b74:	81a56e1f 	.word	0x81a56e1f
 8011b78:	43500000 	.word	0x43500000
 8011b7c:	ffff3cb0 	.word	0xffff3cb0
 8011b80:	3c900000 	.word	0x3c900000

08011b84 <scalbnf>:
 8011b84:	ee10 3a10 	vmov	r3, s0
 8011b88:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8011b8c:	d02b      	beq.n	8011be6 <scalbnf+0x62>
 8011b8e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8011b92:	d302      	bcc.n	8011b9a <scalbnf+0x16>
 8011b94:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011b98:	4770      	bx	lr
 8011b9a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8011b9e:	d123      	bne.n	8011be8 <scalbnf+0x64>
 8011ba0:	4b24      	ldr	r3, [pc, #144]	; (8011c34 <scalbnf+0xb0>)
 8011ba2:	eddf 7a25 	vldr	s15, [pc, #148]	; 8011c38 <scalbnf+0xb4>
 8011ba6:	4298      	cmp	r0, r3
 8011ba8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011bac:	db17      	blt.n	8011bde <scalbnf+0x5a>
 8011bae:	ee10 3a10 	vmov	r3, s0
 8011bb2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8011bb6:	3a19      	subs	r2, #25
 8011bb8:	f24c 3150 	movw	r1, #50000	; 0xc350
 8011bbc:	4288      	cmp	r0, r1
 8011bbe:	dd15      	ble.n	8011bec <scalbnf+0x68>
 8011bc0:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8011c3c <scalbnf+0xb8>
 8011bc4:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8011c40 <scalbnf+0xbc>
 8011bc8:	ee10 3a10 	vmov	r3, s0
 8011bcc:	eeb0 7a67 	vmov.f32	s14, s15
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	bfb8      	it	lt
 8011bd4:	eef0 7a66 	vmovlt.f32	s15, s13
 8011bd8:	ee27 0a87 	vmul.f32	s0, s15, s14
 8011bdc:	4770      	bx	lr
 8011bde:	eddf 7a19 	vldr	s15, [pc, #100]	; 8011c44 <scalbnf+0xc0>
 8011be2:	ee27 0a80 	vmul.f32	s0, s15, s0
 8011be6:	4770      	bx	lr
 8011be8:	0dd2      	lsrs	r2, r2, #23
 8011bea:	e7e5      	b.n	8011bb8 <scalbnf+0x34>
 8011bec:	4410      	add	r0, r2
 8011bee:	28fe      	cmp	r0, #254	; 0xfe
 8011bf0:	dce6      	bgt.n	8011bc0 <scalbnf+0x3c>
 8011bf2:	2800      	cmp	r0, #0
 8011bf4:	dd06      	ble.n	8011c04 <scalbnf+0x80>
 8011bf6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011bfa:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8011bfe:	ee00 3a10 	vmov	s0, r3
 8011c02:	4770      	bx	lr
 8011c04:	f110 0f16 	cmn.w	r0, #22
 8011c08:	da09      	bge.n	8011c1e <scalbnf+0x9a>
 8011c0a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8011c44 <scalbnf+0xc0>
 8011c0e:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8011c48 <scalbnf+0xc4>
 8011c12:	ee10 3a10 	vmov	r3, s0
 8011c16:	eeb0 7a67 	vmov.f32	s14, s15
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	e7d9      	b.n	8011bd2 <scalbnf+0x4e>
 8011c1e:	3019      	adds	r0, #25
 8011c20:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011c24:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8011c28:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8011c4c <scalbnf+0xc8>
 8011c2c:	ee07 3a90 	vmov	s15, r3
 8011c30:	e7d7      	b.n	8011be2 <scalbnf+0x5e>
 8011c32:	bf00      	nop
 8011c34:	ffff3cb0 	.word	0xffff3cb0
 8011c38:	4c000000 	.word	0x4c000000
 8011c3c:	7149f2ca 	.word	0x7149f2ca
 8011c40:	f149f2ca 	.word	0xf149f2ca
 8011c44:	0da24260 	.word	0x0da24260
 8011c48:	8da24260 	.word	0x8da24260
 8011c4c:	33000000 	.word	0x33000000

08011c50 <floor>:
 8011c50:	ec51 0b10 	vmov	r0, r1, d0
 8011c54:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c5c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8011c60:	2e13      	cmp	r6, #19
 8011c62:	ee10 5a10 	vmov	r5, s0
 8011c66:	ee10 8a10 	vmov	r8, s0
 8011c6a:	460c      	mov	r4, r1
 8011c6c:	dc31      	bgt.n	8011cd2 <floor+0x82>
 8011c6e:	2e00      	cmp	r6, #0
 8011c70:	da14      	bge.n	8011c9c <floor+0x4c>
 8011c72:	a333      	add	r3, pc, #204	; (adr r3, 8011d40 <floor+0xf0>)
 8011c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c78:	f7ee fb30 	bl	80002dc <__adddf3>
 8011c7c:	2200      	movs	r2, #0
 8011c7e:	2300      	movs	r3, #0
 8011c80:	f7ee ff72 	bl	8000b68 <__aeabi_dcmpgt>
 8011c84:	b138      	cbz	r0, 8011c96 <floor+0x46>
 8011c86:	2c00      	cmp	r4, #0
 8011c88:	da53      	bge.n	8011d32 <floor+0xe2>
 8011c8a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8011c8e:	4325      	orrs	r5, r4
 8011c90:	d052      	beq.n	8011d38 <floor+0xe8>
 8011c92:	4c2d      	ldr	r4, [pc, #180]	; (8011d48 <floor+0xf8>)
 8011c94:	2500      	movs	r5, #0
 8011c96:	4621      	mov	r1, r4
 8011c98:	4628      	mov	r0, r5
 8011c9a:	e024      	b.n	8011ce6 <floor+0x96>
 8011c9c:	4f2b      	ldr	r7, [pc, #172]	; (8011d4c <floor+0xfc>)
 8011c9e:	4137      	asrs	r7, r6
 8011ca0:	ea01 0307 	and.w	r3, r1, r7
 8011ca4:	4303      	orrs	r3, r0
 8011ca6:	d01e      	beq.n	8011ce6 <floor+0x96>
 8011ca8:	a325      	add	r3, pc, #148	; (adr r3, 8011d40 <floor+0xf0>)
 8011caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cae:	f7ee fb15 	bl	80002dc <__adddf3>
 8011cb2:	2200      	movs	r2, #0
 8011cb4:	2300      	movs	r3, #0
 8011cb6:	f7ee ff57 	bl	8000b68 <__aeabi_dcmpgt>
 8011cba:	2800      	cmp	r0, #0
 8011cbc:	d0eb      	beq.n	8011c96 <floor+0x46>
 8011cbe:	2c00      	cmp	r4, #0
 8011cc0:	bfbe      	ittt	lt
 8011cc2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8011cc6:	4133      	asrlt	r3, r6
 8011cc8:	18e4      	addlt	r4, r4, r3
 8011cca:	ea24 0407 	bic.w	r4, r4, r7
 8011cce:	2500      	movs	r5, #0
 8011cd0:	e7e1      	b.n	8011c96 <floor+0x46>
 8011cd2:	2e33      	cmp	r6, #51	; 0x33
 8011cd4:	dd0b      	ble.n	8011cee <floor+0x9e>
 8011cd6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8011cda:	d104      	bne.n	8011ce6 <floor+0x96>
 8011cdc:	ee10 2a10 	vmov	r2, s0
 8011ce0:	460b      	mov	r3, r1
 8011ce2:	f7ee fafb 	bl	80002dc <__adddf3>
 8011ce6:	ec41 0b10 	vmov	d0, r0, r1
 8011cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cee:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8011cf2:	f04f 37ff 	mov.w	r7, #4294967295
 8011cf6:	40df      	lsrs	r7, r3
 8011cf8:	4238      	tst	r0, r7
 8011cfa:	d0f4      	beq.n	8011ce6 <floor+0x96>
 8011cfc:	a310      	add	r3, pc, #64	; (adr r3, 8011d40 <floor+0xf0>)
 8011cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d02:	f7ee faeb 	bl	80002dc <__adddf3>
 8011d06:	2200      	movs	r2, #0
 8011d08:	2300      	movs	r3, #0
 8011d0a:	f7ee ff2d 	bl	8000b68 <__aeabi_dcmpgt>
 8011d0e:	2800      	cmp	r0, #0
 8011d10:	d0c1      	beq.n	8011c96 <floor+0x46>
 8011d12:	2c00      	cmp	r4, #0
 8011d14:	da0a      	bge.n	8011d2c <floor+0xdc>
 8011d16:	2e14      	cmp	r6, #20
 8011d18:	d101      	bne.n	8011d1e <floor+0xce>
 8011d1a:	3401      	adds	r4, #1
 8011d1c:	e006      	b.n	8011d2c <floor+0xdc>
 8011d1e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8011d22:	2301      	movs	r3, #1
 8011d24:	40b3      	lsls	r3, r6
 8011d26:	441d      	add	r5, r3
 8011d28:	45a8      	cmp	r8, r5
 8011d2a:	d8f6      	bhi.n	8011d1a <floor+0xca>
 8011d2c:	ea25 0507 	bic.w	r5, r5, r7
 8011d30:	e7b1      	b.n	8011c96 <floor+0x46>
 8011d32:	2500      	movs	r5, #0
 8011d34:	462c      	mov	r4, r5
 8011d36:	e7ae      	b.n	8011c96 <floor+0x46>
 8011d38:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8011d3c:	e7ab      	b.n	8011c96 <floor+0x46>
 8011d3e:	bf00      	nop
 8011d40:	8800759c 	.word	0x8800759c
 8011d44:	7e37e43c 	.word	0x7e37e43c
 8011d48:	bff00000 	.word	0xbff00000
 8011d4c:	000fffff 	.word	0x000fffff

08011d50 <floorf>:
 8011d50:	ee10 3a10 	vmov	r3, s0
 8011d54:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8011d58:	3a7f      	subs	r2, #127	; 0x7f
 8011d5a:	2a16      	cmp	r2, #22
 8011d5c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011d60:	dc2a      	bgt.n	8011db8 <floorf+0x68>
 8011d62:	2a00      	cmp	r2, #0
 8011d64:	da11      	bge.n	8011d8a <floorf+0x3a>
 8011d66:	eddf 7a18 	vldr	s15, [pc, #96]	; 8011dc8 <floorf+0x78>
 8011d6a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011d6e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8011d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d76:	dd05      	ble.n	8011d84 <floorf+0x34>
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	da23      	bge.n	8011dc4 <floorf+0x74>
 8011d7c:	4a13      	ldr	r2, [pc, #76]	; (8011dcc <floorf+0x7c>)
 8011d7e:	2900      	cmp	r1, #0
 8011d80:	bf18      	it	ne
 8011d82:	4613      	movne	r3, r2
 8011d84:	ee00 3a10 	vmov	s0, r3
 8011d88:	4770      	bx	lr
 8011d8a:	4911      	ldr	r1, [pc, #68]	; (8011dd0 <floorf+0x80>)
 8011d8c:	4111      	asrs	r1, r2
 8011d8e:	420b      	tst	r3, r1
 8011d90:	d0fa      	beq.n	8011d88 <floorf+0x38>
 8011d92:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8011dc8 <floorf+0x78>
 8011d96:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011d9a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8011d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011da2:	ddef      	ble.n	8011d84 <floorf+0x34>
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	bfbe      	ittt	lt
 8011da8:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8011dac:	fa40 f202 	asrlt.w	r2, r0, r2
 8011db0:	189b      	addlt	r3, r3, r2
 8011db2:	ea23 0301 	bic.w	r3, r3, r1
 8011db6:	e7e5      	b.n	8011d84 <floorf+0x34>
 8011db8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8011dbc:	d3e4      	bcc.n	8011d88 <floorf+0x38>
 8011dbe:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011dc2:	4770      	bx	lr
 8011dc4:	2300      	movs	r3, #0
 8011dc6:	e7dd      	b.n	8011d84 <floorf+0x34>
 8011dc8:	7149f2ca 	.word	0x7149f2ca
 8011dcc:	bf800000 	.word	0xbf800000
 8011dd0:	007fffff 	.word	0x007fffff

08011dd4 <_init>:
 8011dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011dd6:	bf00      	nop
 8011dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011dda:	bc08      	pop	{r3}
 8011ddc:	469e      	mov	lr, r3
 8011dde:	4770      	bx	lr

08011de0 <_fini>:
 8011de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011de2:	bf00      	nop
 8011de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011de6:	bc08      	pop	{r3}
 8011de8:	469e      	mov	lr, r3
 8011dea:	4770      	bx	lr
