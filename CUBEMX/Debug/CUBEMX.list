
CUBEMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f3ac  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b70  0800f590  0800f590  0001f590  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010100  08010100  00030758  2**0
                  CONTENTS
  4 .ARM          00000008  08010100  08010100  00020100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010108  08010108  00030758  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010108  08010108  00020108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801010c  0801010c  0002010c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000758  20000000  08010110  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018a0  20000758  08010868  00030758  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001ff8  08010868  00031ff8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030758  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030788  2**0
                  CONTENTS, READONLY
 13 .debug_info   00031477  00000000  00000000  000307cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006347  00000000  00000000  00061c42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001cf0  00000000  00000000  00067f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000190a  00000000  00000000  00069c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027a25  00000000  00000000  0006b58a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000387c3  00000000  00000000  00092faf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eb57e  00000000  00000000  000cb772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000632c  00000000  00000000  001b6cf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00012fe1  00000000  00000000  001bd01c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  001cfffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000758 	.word	0x20000758
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800f574 	.word	0x0800f574

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000075c 	.word	0x2000075c
 800021c:	0800f574 	.word	0x0800f574

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b970 	b.w	8000fd0 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9e08      	ldr	r6, [sp, #32]
 8000d0e:	460d      	mov	r5, r1
 8000d10:	4604      	mov	r4, r0
 8000d12:	460f      	mov	r7, r1
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d14a      	bne.n	8000dae <__udivmoddi4+0xa6>
 8000d18:	428a      	cmp	r2, r1
 8000d1a:	4694      	mov	ip, r2
 8000d1c:	d965      	bls.n	8000dea <__udivmoddi4+0xe2>
 8000d1e:	fab2 f382 	clz	r3, r2
 8000d22:	b143      	cbz	r3, 8000d36 <__udivmoddi4+0x2e>
 8000d24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d28:	f1c3 0220 	rsb	r2, r3, #32
 8000d2c:	409f      	lsls	r7, r3
 8000d2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d32:	4317      	orrs	r7, r2
 8000d34:	409c      	lsls	r4, r3
 8000d36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d3a:	fa1f f58c 	uxth.w	r5, ip
 8000d3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d42:	0c22      	lsrs	r2, r4, #16
 8000d44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d4c:	fb01 f005 	mul.w	r0, r1, r5
 8000d50:	4290      	cmp	r0, r2
 8000d52:	d90a      	bls.n	8000d6a <__udivmoddi4+0x62>
 8000d54:	eb1c 0202 	adds.w	r2, ip, r2
 8000d58:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d5c:	f080 811c 	bcs.w	8000f98 <__udivmoddi4+0x290>
 8000d60:	4290      	cmp	r0, r2
 8000d62:	f240 8119 	bls.w	8000f98 <__udivmoddi4+0x290>
 8000d66:	3902      	subs	r1, #2
 8000d68:	4462      	add	r2, ip
 8000d6a:	1a12      	subs	r2, r2, r0
 8000d6c:	b2a4      	uxth	r4, r4
 8000d6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d7a:	fb00 f505 	mul.w	r5, r0, r5
 8000d7e:	42a5      	cmp	r5, r4
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x90>
 8000d82:	eb1c 0404 	adds.w	r4, ip, r4
 8000d86:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d8a:	f080 8107 	bcs.w	8000f9c <__udivmoddi4+0x294>
 8000d8e:	42a5      	cmp	r5, r4
 8000d90:	f240 8104 	bls.w	8000f9c <__udivmoddi4+0x294>
 8000d94:	4464      	add	r4, ip
 8000d96:	3802      	subs	r0, #2
 8000d98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d9c:	1b64      	subs	r4, r4, r5
 8000d9e:	2100      	movs	r1, #0
 8000da0:	b11e      	cbz	r6, 8000daa <__udivmoddi4+0xa2>
 8000da2:	40dc      	lsrs	r4, r3
 8000da4:	2300      	movs	r3, #0
 8000da6:	e9c6 4300 	strd	r4, r3, [r6]
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0xbc>
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	f000 80ed 	beq.w	8000f92 <__udivmoddi4+0x28a>
 8000db8:	2100      	movs	r1, #0
 8000dba:	e9c6 0500 	strd	r0, r5, [r6]
 8000dbe:	4608      	mov	r0, r1
 8000dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc4:	fab3 f183 	clz	r1, r3
 8000dc8:	2900      	cmp	r1, #0
 8000dca:	d149      	bne.n	8000e60 <__udivmoddi4+0x158>
 8000dcc:	42ab      	cmp	r3, r5
 8000dce:	d302      	bcc.n	8000dd6 <__udivmoddi4+0xce>
 8000dd0:	4282      	cmp	r2, r0
 8000dd2:	f200 80f8 	bhi.w	8000fc6 <__udivmoddi4+0x2be>
 8000dd6:	1a84      	subs	r4, r0, r2
 8000dd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ddc:	2001      	movs	r0, #1
 8000dde:	4617      	mov	r7, r2
 8000de0:	2e00      	cmp	r6, #0
 8000de2:	d0e2      	beq.n	8000daa <__udivmoddi4+0xa2>
 8000de4:	e9c6 4700 	strd	r4, r7, [r6]
 8000de8:	e7df      	b.n	8000daa <__udivmoddi4+0xa2>
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xe6>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f382 	clz	r3, r2
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	f040 8090 	bne.w	8000f18 <__udivmoddi4+0x210>
 8000df8:	1a8a      	subs	r2, r1, r2
 8000dfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dfe:	fa1f fe8c 	uxth.w	lr, ip
 8000e02:	2101      	movs	r1, #1
 8000e04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e08:	fb07 2015 	mls	r0, r7, r5, r2
 8000e0c:	0c22      	lsrs	r2, r4, #16
 8000e0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e12:	fb0e f005 	mul.w	r0, lr, r5
 8000e16:	4290      	cmp	r0, r2
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x124>
 8000e1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e1e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x122>
 8000e24:	4290      	cmp	r0, r2
 8000e26:	f200 80cb 	bhi.w	8000fc0 <__udivmoddi4+0x2b8>
 8000e2a:	4645      	mov	r5, r8
 8000e2c:	1a12      	subs	r2, r2, r0
 8000e2e:	b2a4      	uxth	r4, r4
 8000e30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e34:	fb07 2210 	mls	r2, r7, r0, r2
 8000e38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e40:	45a6      	cmp	lr, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x14e>
 8000e44:	eb1c 0404 	adds.w	r4, ip, r4
 8000e48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e4c:	d202      	bcs.n	8000e54 <__udivmoddi4+0x14c>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f200 80bb 	bhi.w	8000fca <__udivmoddi4+0x2c2>
 8000e54:	4610      	mov	r0, r2
 8000e56:	eba4 040e 	sub.w	r4, r4, lr
 8000e5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e5e:	e79f      	b.n	8000da0 <__udivmoddi4+0x98>
 8000e60:	f1c1 0720 	rsb	r7, r1, #32
 8000e64:	408b      	lsls	r3, r1
 8000e66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e72:	fa20 f307 	lsr.w	r3, r0, r7
 8000e76:	40fd      	lsrs	r5, r7
 8000e78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e7c:	4323      	orrs	r3, r4
 8000e7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	fb09 5518 	mls	r5, r9, r8, r5
 8000e8a:	0c1c      	lsrs	r4, r3, #16
 8000e8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e90:	fb08 f50e 	mul.w	r5, r8, lr
 8000e94:	42a5      	cmp	r5, r4
 8000e96:	fa02 f201 	lsl.w	r2, r2, r1
 8000e9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e9e:	d90b      	bls.n	8000eb8 <__udivmoddi4+0x1b0>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ea8:	f080 8088 	bcs.w	8000fbc <__udivmoddi4+0x2b4>
 8000eac:	42a5      	cmp	r5, r4
 8000eae:	f240 8085 	bls.w	8000fbc <__udivmoddi4+0x2b4>
 8000eb2:	f1a8 0802 	sub.w	r8, r8, #2
 8000eb6:	4464      	add	r4, ip
 8000eb8:	1b64      	subs	r4, r4, r5
 8000eba:	b29d      	uxth	r5, r3
 8000ebc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ec0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ec4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ec8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ecc:	45a6      	cmp	lr, r4
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x1da>
 8000ed0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ed8:	d26c      	bcs.n	8000fb4 <__udivmoddi4+0x2ac>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	d96a      	bls.n	8000fb4 <__udivmoddi4+0x2ac>
 8000ede:	3b02      	subs	r3, #2
 8000ee0:	4464      	add	r4, ip
 8000ee2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ee6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eea:	eba4 040e 	sub.w	r4, r4, lr
 8000eee:	42ac      	cmp	r4, r5
 8000ef0:	46c8      	mov	r8, r9
 8000ef2:	46ae      	mov	lr, r5
 8000ef4:	d356      	bcc.n	8000fa4 <__udivmoddi4+0x29c>
 8000ef6:	d053      	beq.n	8000fa0 <__udivmoddi4+0x298>
 8000ef8:	b156      	cbz	r6, 8000f10 <__udivmoddi4+0x208>
 8000efa:	ebb0 0208 	subs.w	r2, r0, r8
 8000efe:	eb64 040e 	sbc.w	r4, r4, lr
 8000f02:	fa04 f707 	lsl.w	r7, r4, r7
 8000f06:	40ca      	lsrs	r2, r1
 8000f08:	40cc      	lsrs	r4, r1
 8000f0a:	4317      	orrs	r7, r2
 8000f0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f10:	4618      	mov	r0, r3
 8000f12:	2100      	movs	r1, #0
 8000f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f18:	f1c3 0120 	rsb	r1, r3, #32
 8000f1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f20:	fa20 f201 	lsr.w	r2, r0, r1
 8000f24:	fa25 f101 	lsr.w	r1, r5, r1
 8000f28:	409d      	lsls	r5, r3
 8000f2a:	432a      	orrs	r2, r5
 8000f2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f30:	fa1f fe8c 	uxth.w	lr, ip
 8000f34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f38:	fb07 1510 	mls	r5, r7, r0, r1
 8000f3c:	0c11      	lsrs	r1, r2, #16
 8000f3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f42:	fb00 f50e 	mul.w	r5, r0, lr
 8000f46:	428d      	cmp	r5, r1
 8000f48:	fa04 f403 	lsl.w	r4, r4, r3
 8000f4c:	d908      	bls.n	8000f60 <__udivmoddi4+0x258>
 8000f4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f56:	d22f      	bcs.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f58:	428d      	cmp	r5, r1
 8000f5a:	d92d      	bls.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	4461      	add	r1, ip
 8000f60:	1b49      	subs	r1, r1, r5
 8000f62:	b292      	uxth	r2, r2
 8000f64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f68:	fb07 1115 	mls	r1, r7, r5, r1
 8000f6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f70:	fb05 f10e 	mul.w	r1, r5, lr
 8000f74:	4291      	cmp	r1, r2
 8000f76:	d908      	bls.n	8000f8a <__udivmoddi4+0x282>
 8000f78:	eb1c 0202 	adds.w	r2, ip, r2
 8000f7c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f80:	d216      	bcs.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f82:	4291      	cmp	r1, r2
 8000f84:	d914      	bls.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f86:	3d02      	subs	r5, #2
 8000f88:	4462      	add	r2, ip
 8000f8a:	1a52      	subs	r2, r2, r1
 8000f8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f90:	e738      	b.n	8000e04 <__udivmoddi4+0xfc>
 8000f92:	4631      	mov	r1, r6
 8000f94:	4630      	mov	r0, r6
 8000f96:	e708      	b.n	8000daa <__udivmoddi4+0xa2>
 8000f98:	4639      	mov	r1, r7
 8000f9a:	e6e6      	b.n	8000d6a <__udivmoddi4+0x62>
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	e6fb      	b.n	8000d98 <__udivmoddi4+0x90>
 8000fa0:	4548      	cmp	r0, r9
 8000fa2:	d2a9      	bcs.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fa4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fac:	3b01      	subs	r3, #1
 8000fae:	e7a3      	b.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fb0:	4645      	mov	r5, r8
 8000fb2:	e7ea      	b.n	8000f8a <__udivmoddi4+0x282>
 8000fb4:	462b      	mov	r3, r5
 8000fb6:	e794      	b.n	8000ee2 <__udivmoddi4+0x1da>
 8000fb8:	4640      	mov	r0, r8
 8000fba:	e7d1      	b.n	8000f60 <__udivmoddi4+0x258>
 8000fbc:	46d0      	mov	r8, sl
 8000fbe:	e77b      	b.n	8000eb8 <__udivmoddi4+0x1b0>
 8000fc0:	3d02      	subs	r5, #2
 8000fc2:	4462      	add	r2, ip
 8000fc4:	e732      	b.n	8000e2c <__udivmoddi4+0x124>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e70a      	b.n	8000de0 <__udivmoddi4+0xd8>
 8000fca:	4464      	add	r4, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e742      	b.n	8000e56 <__udivmoddi4+0x14e>

08000fd0 <__aeabi_idiv0>:
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <Update_FIR_filter>:
//----------------------FIR-------------------
#define FIR_FILTER_LENGTH 10
static float FIR_INPULSE_RESPONSE[FIR_FILTER_LENGTH] = {0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f};
uint8_t FIR_index = 0;
float FIR_Values[FIR_FILTER_LENGTH] = {0};
float Update_FIR_filter(float input){
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	ed87 0a01 	vstr	s0, [r7, #4]
	FIR_Values[FIR_index] = input;
 8000fde:	4b1f      	ldr	r3, [pc, #124]	; (800105c <Update_FIR_filter+0x88>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	4a1f      	ldr	r2, [pc, #124]	; (8001060 <Update_FIR_filter+0x8c>)
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	4413      	add	r3, r2
 8000fe8:	687a      	ldr	r2, [r7, #4]
 8000fea:	601a      	str	r2, [r3, #0]
	float temp = 0.0f;
 8000fec:	f04f 0300 	mov.w	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < FIR_FILTER_LENGTH; i++){
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60bb      	str	r3, [r7, #8]
 8000ff6:	e016      	b.n	8001026 <Update_FIR_filter+0x52>
		temp += FIR_INPULSE_RESPONSE[i]*FIR_Values[i];
 8000ff8:	4a1a      	ldr	r2, [pc, #104]	; (8001064 <Update_FIR_filter+0x90>)
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	4413      	add	r3, r2
 8001000:	ed93 7a00 	vldr	s14, [r3]
 8001004:	4a16      	ldr	r2, [pc, #88]	; (8001060 <Update_FIR_filter+0x8c>)
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	4413      	add	r3, r2
 800100c:	edd3 7a00 	vldr	s15, [r3]
 8001010:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001014:	ed97 7a03 	vldr	s14, [r7, #12]
 8001018:	ee77 7a27 	vadd.f32	s15, s14, s15
 800101c:	edc7 7a03 	vstr	s15, [r7, #12]
	for(int i = 0; i < FIR_FILTER_LENGTH; i++){
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	3301      	adds	r3, #1
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	2b09      	cmp	r3, #9
 800102a:	dde5      	ble.n	8000ff8 <Update_FIR_filter+0x24>
	}
	if(FIR_index < FIR_FILTER_LENGTH-1)FIR_index++;
 800102c:	4b0b      	ldr	r3, [pc, #44]	; (800105c <Update_FIR_filter+0x88>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b08      	cmp	r3, #8
 8001032:	d806      	bhi.n	8001042 <Update_FIR_filter+0x6e>
 8001034:	4b09      	ldr	r3, [pc, #36]	; (800105c <Update_FIR_filter+0x88>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	3301      	adds	r3, #1
 800103a:	b2da      	uxtb	r2, r3
 800103c:	4b07      	ldr	r3, [pc, #28]	; (800105c <Update_FIR_filter+0x88>)
 800103e:	701a      	strb	r2, [r3, #0]
 8001040:	e002      	b.n	8001048 <Update_FIR_filter+0x74>
	else FIR_index = 0;
 8001042:	4b06      	ldr	r3, [pc, #24]	; (800105c <Update_FIR_filter+0x88>)
 8001044:	2200      	movs	r2, #0
 8001046:	701a      	strb	r2, [r3, #0]
	return temp;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	ee07 3a90 	vmov	s15, r3
}
 800104e:	eeb0 0a67 	vmov.f32	s0, s15
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	200007bc 	.word	0x200007bc
 8001060:	200007c0 	.word	0x200007c0
 8001064:	20000000 	.word	0x20000000

08001068 <Update_FIR_filter2>:

#define FIR_FILTER_LENGTH2 100
uint8_t FIR_index2 = 0;
float FIR_Values2[FIR_FILTER_LENGTH2] = {0};
float FIR2_value = 0;
float Update_FIR_filter2(float input){
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	ed87 0a01 	vstr	s0, [r7, #4]
	FIR2_value -= FIR_Values2[FIR_index];
 8001072:	4b22      	ldr	r3, [pc, #136]	; (80010fc <Update_FIR_filter2+0x94>)
 8001074:	ed93 7a00 	vldr	s14, [r3]
 8001078:	4b21      	ldr	r3, [pc, #132]	; (8001100 <Update_FIR_filter2+0x98>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	4a21      	ldr	r2, [pc, #132]	; (8001104 <Update_FIR_filter2+0x9c>)
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	4413      	add	r3, r2
 8001082:	edd3 7a00 	vldr	s15, [r3]
 8001086:	ee77 7a67 	vsub.f32	s15, s14, s15
 800108a:	4b1c      	ldr	r3, [pc, #112]	; (80010fc <Update_FIR_filter2+0x94>)
 800108c:	edc3 7a00 	vstr	s15, [r3]
	FIR_Values2[FIR_index] = input/FIR_FILTER_LENGTH2;
 8001090:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <Update_FIR_filter2+0x98>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	ed97 7a01 	vldr	s14, [r7, #4]
 8001098:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001108 <Update_FIR_filter2+0xa0>
 800109c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010a0:	4a18      	ldr	r2, [pc, #96]	; (8001104 <Update_FIR_filter2+0x9c>)
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	4413      	add	r3, r2
 80010a6:	edc3 7a00 	vstr	s15, [r3]
	FIR2_value += FIR_Values2[FIR_index] ;
 80010aa:	4b15      	ldr	r3, [pc, #84]	; (8001100 <Update_FIR_filter2+0x98>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	4a15      	ldr	r2, [pc, #84]	; (8001104 <Update_FIR_filter2+0x9c>)
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	4413      	add	r3, r2
 80010b4:	ed93 7a00 	vldr	s14, [r3]
 80010b8:	4b10      	ldr	r3, [pc, #64]	; (80010fc <Update_FIR_filter2+0x94>)
 80010ba:	edd3 7a00 	vldr	s15, [r3]
 80010be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010c2:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <Update_FIR_filter2+0x94>)
 80010c4:	edc3 7a00 	vstr	s15, [r3]
	if(FIR_index2 < FIR_FILTER_LENGTH2-1)FIR_index2++;
 80010c8:	4b10      	ldr	r3, [pc, #64]	; (800110c <Update_FIR_filter2+0xa4>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b62      	cmp	r3, #98	; 0x62
 80010ce:	d806      	bhi.n	80010de <Update_FIR_filter2+0x76>
 80010d0:	4b0e      	ldr	r3, [pc, #56]	; (800110c <Update_FIR_filter2+0xa4>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	3301      	adds	r3, #1
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	4b0c      	ldr	r3, [pc, #48]	; (800110c <Update_FIR_filter2+0xa4>)
 80010da:	701a      	strb	r2, [r3, #0]
 80010dc:	e002      	b.n	80010e4 <Update_FIR_filter2+0x7c>
	else FIR_index2 = 0;
 80010de:	4b0b      	ldr	r3, [pc, #44]	; (800110c <Update_FIR_filter2+0xa4>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]
	return FIR2_value;
 80010e4:	4b05      	ldr	r3, [pc, #20]	; (80010fc <Update_FIR_filter2+0x94>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	ee07 3a90 	vmov	s15, r3
}
 80010ec:	eeb0 0a67 	vmov.f32	s0, s15
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	2000097c 	.word	0x2000097c
 8001100:	200007bc 	.word	0x200007bc
 8001104:	200007ec 	.word	0x200007ec
 8001108:	42c80000 	.word	0x42c80000
 800110c:	200007e8 	.word	0x200007e8

08001110 <Current_IRQ>:
PID_instance Current_PID = {0};
PID_instance Velocity_PID = {0};
PID_instance Angle_PID = {0};

//-------------------IRQ handlers---------------------
void Current_IRQ(Current* ptr){
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	#ifdef RUNNING_LED_DEBUG2
	HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
	#endif


    if(ptr != NULL)memcpy(&IRQ_Current, ptr, sizeof(Current));
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d008      	beq.n	8001130 <Current_IRQ+0x20>
 800111e:	2210      	movs	r2, #16
 8001120:	6879      	ldr	r1, [r7, #4]
 8001122:	4805      	ldr	r0, [pc, #20]	; (8001138 <Current_IRQ+0x28>)
 8001124:	f00a f99f 	bl	800b466 <memcpy>
    else return;
    Current_Callback_flag = 1;
 8001128:	4b04      	ldr	r3, [pc, #16]	; (800113c <Current_IRQ+0x2c>)
 800112a:	2201      	movs	r2, #1
 800112c:	701a      	strb	r2, [r3, #0]
 800112e:	e000      	b.n	8001132 <Current_IRQ+0x22>
    else return;
 8001130:	bf00      	nop
}
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000784 	.word	0x20000784
 800113c:	20000774 	.word	0x20000774

08001140 <Voltage_Temp_IRQ>:
void Voltage_Temp_IRQ(Voltage_Temp* ptr){
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
	memcpy(&IRQ_Voltage_Temp, ptr, sizeof(Voltage_Temp));
 8001148:	220c      	movs	r2, #12
 800114a:	6879      	ldr	r1, [r7, #4]
 800114c:	4803      	ldr	r0, [pc, #12]	; (800115c <Voltage_Temp_IRQ+0x1c>)
 800114e:	f00a f98a 	bl	800b466 <memcpy>
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000794 	.word	0x20000794

08001160 <Encoders_IRQ>:
void Encoders_IRQ(Encoders* ptr){
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
	memcpy(&IRQ_Encoders, ptr, sizeof(Encoders));
 8001168:	221c      	movs	r2, #28
 800116a:	6879      	ldr	r1, [r7, #4]
 800116c:	4803      	ldr	r0, [pc, #12]	; (800117c <Encoders_IRQ+0x1c>)
 800116e:	f00a f97a 	bl	800b466 <memcpy>
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	200007a0 	.word	0x200007a0

08001180 <Can_RX_Status_IRQ>:

//-------------------CAN RX------------------------
void Can_RX_Status_IRQ(CAN_Status* ptr){
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
	memcpy(&IRQ_Status, ptr, sizeof(CAN_Status));
 8001188:	220c      	movs	r2, #12
 800118a:	6879      	ldr	r1, [r7, #4]
 800118c:	4803      	ldr	r0, [pc, #12]	; (800119c <Can_RX_Status_IRQ+0x1c>)
 800118e:	f00a f96a 	bl	800b466 <memcpy>

}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000980 	.word	0x20000980

080011a0 <check_value>:
	.max_warning = NAN,
	.min_warning = NAN,
};

//check value OK
LIMITS_t check_value(CAN_LIMITS* ptr, float value){
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	ed87 0a00 	vstr	s0, [r7]
	if(value >= ptr->max_error || value <= ptr->min_error) return LIMIT_ERROR;			//error
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	edd3 7a03 	vldr	s15, [r3, #12]
 80011b2:	ed97 7a00 	vldr	s14, [r7]
 80011b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011be:	da09      	bge.n	80011d4 <check_value+0x34>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80011c6:	ed97 7a00 	vldr	s14, [r7]
 80011ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d2:	d801      	bhi.n	80011d8 <check_value+0x38>
 80011d4:	2302      	movs	r3, #2
 80011d6:	e016      	b.n	8001206 <check_value+0x66>
	if(value >= ptr->max_warning || value <= ptr->min_warning) return LIMIT_WARNING;	//warning
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	edd3 7a02 	vldr	s15, [r3, #8]
 80011de:	ed97 7a00 	vldr	s14, [r7]
 80011e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ea:	da09      	bge.n	8001200 <check_value+0x60>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	edd3 7a00 	vldr	s15, [r3]
 80011f2:	ed97 7a00 	vldr	s14, [r7]
 80011f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011fe:	d801      	bhi.n	8001204 <check_value+0x64>
 8001200:	2301      	movs	r3, #1
 8001202:	e000      	b.n	8001206 <check_value+0x66>
	return LIMIT_OK;																	//OK
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <sqrtI>:

uint32_t sqrtI(uint32_t sqrtArg)
{
 8001212:	b480      	push	{r7}
 8001214:	b087      	sub	sp, #28
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
uint32_t answer, x;
uint32_t temp;
if ( sqrtArg == 0 ) return 0; // undefined result
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d101      	bne.n	8001224 <sqrtI+0x12>
 8001220:	2300      	movs	r3, #0
 8001222:	e027      	b.n	8001274 <sqrtI+0x62>
if ( sqrtArg == 1 ) return 1; // identity
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d101      	bne.n	800122e <sqrtI+0x1c>
 800122a:	2301      	movs	r3, #1
 800122c:	e022      	b.n	8001274 <sqrtI+0x62>
answer = 0; // integer square root
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]
for( x=0x8000; x>0; x=x>>1 )
 8001232:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	e016      	b.n	8001268 <sqrtI+0x56>
{ // 16 bit shift
answer |= x; // possible bit in root
 800123a:	697a      	ldr	r2, [r7, #20]
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	4313      	orrs	r3, r2
 8001240:	617b      	str	r3, [r7, #20]
temp = answer * answer; // fast unsigned multiply
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	fb03 f303 	mul.w	r3, r3, r3
 8001248:	60fb      	str	r3, [r7, #12]
if (temp == sqrtArg) break; // exact, found it
 800124a:	68fa      	ldr	r2, [r7, #12]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	429a      	cmp	r2, r3
 8001250:	d00e      	beq.n	8001270 <sqrtI+0x5e>
if (temp > sqrtArg) answer ^= x; // too large, reverse bit
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	429a      	cmp	r2, r3
 8001258:	d903      	bls.n	8001262 <sqrtI+0x50>
 800125a:	697a      	ldr	r2, [r7, #20]
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	4053      	eors	r3, r2
 8001260:	617b      	str	r3, [r7, #20]
for( x=0x8000; x>0; x=x>>1 )
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	085b      	lsrs	r3, r3, #1
 8001266:	613b      	str	r3, [r7, #16]
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1e5      	bne.n	800123a <sqrtI+0x28>
 800126e:	e000      	b.n	8001272 <sqrtI+0x60>
if (temp == sqrtArg) break; // exact, found it
 8001270:	bf00      	nop
}
return answer; // approximate root
 8001272:	697b      	ldr	r3, [r7, #20]
}
 8001274:	4618      	mov	r0, r3
 8001276:	371c      	adds	r7, #28
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <atan2_approximation2>:
#define PI_FLOAT     3.14159265f
#define PIBY2_FLOAT  1.5707963f
// |error| < 0.005
float atan2_approximation2( float y, float x )
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	ed87 0a01 	vstr	s0, [r7, #4]
 800128a:	edc7 0a00 	vstr	s1, [r7]
	if ( x == 0.0f )
 800128e:	edd7 7a00 	vldr	s15, [r7]
 8001292:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129a:	d116      	bne.n	80012ca <atan2_approximation2+0x4a>
	{
		if ( y > 0.0f ) return PIBY2_FLOAT;
 800129c:	edd7 7a01 	vldr	s15, [r7, #4]
 80012a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a8:	dd02      	ble.n	80012b0 <atan2_approximation2+0x30>
 80012aa:	eddf 7a3e 	vldr	s15, [pc, #248]	; 80013a4 <atan2_approximation2+0x124>
 80012ae:	e071      	b.n	8001394 <atan2_approximation2+0x114>
		if ( y == 0.0f ) return 0.0f;
 80012b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80012b4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80012b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012bc:	d102      	bne.n	80012c4 <atan2_approximation2+0x44>
 80012be:	eddf 7a3a 	vldr	s15, [pc, #232]	; 80013a8 <atan2_approximation2+0x128>
 80012c2:	e067      	b.n	8001394 <atan2_approximation2+0x114>
		return -PIBY2_FLOAT;
 80012c4:	eddf 7a39 	vldr	s15, [pc, #228]	; 80013ac <atan2_approximation2+0x12c>
 80012c8:	e064      	b.n	8001394 <atan2_approximation2+0x114>
	}
	float atan;
	float z = y/x;
 80012ca:	edd7 6a01 	vldr	s13, [r7, #4]
 80012ce:	ed97 7a00 	vldr	s14, [r7]
 80012d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012d6:	edc7 7a02 	vstr	s15, [r7, #8]
	if ( fabs( z ) < 1.0f )
 80012da:	edd7 7a02 	vldr	s15, [r7, #8]
 80012de:	eef0 7ae7 	vabs.f32	s15, s15
 80012e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ee:	d52f      	bpl.n	8001350 <atan2_approximation2+0xd0>
	{
		atan = z/(1.0f + 0.28f*z*z);
 80012f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80012f4:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80013b0 <atan2_approximation2+0x130>
 80012f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001300:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001304:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001308:	ee37 7a87 	vadd.f32	s14, s15, s14
 800130c:	edd7 6a02 	vldr	s13, [r7, #8]
 8001310:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001314:	edc7 7a03 	vstr	s15, [r7, #12]
		if ( x < 0.0f )
 8001318:	edd7 7a00 	vldr	s15, [r7]
 800131c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001324:	d534      	bpl.n	8001390 <atan2_approximation2+0x110>
		{
			if ( y < 0.0f ) return atan - PI_FLOAT;
 8001326:	edd7 7a01 	vldr	s15, [r7, #4]
 800132a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800132e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001332:	d506      	bpl.n	8001342 <atan2_approximation2+0xc2>
 8001334:	edd7 7a03 	vldr	s15, [r7, #12]
 8001338:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80013b4 <atan2_approximation2+0x134>
 800133c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001340:	e028      	b.n	8001394 <atan2_approximation2+0x114>
			return atan + PI_FLOAT;
 8001342:	edd7 7a03 	vldr	s15, [r7, #12]
 8001346:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80013b4 <atan2_approximation2+0x134>
 800134a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800134e:	e021      	b.n	8001394 <atan2_approximation2+0x114>
		}
	}
	else
	{
		atan = PIBY2_FLOAT - z/(z*z + 0.28f);
 8001350:	edd7 7a02 	vldr	s15, [r7, #8]
 8001354:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001358:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80013b0 <atan2_approximation2+0x130>
 800135c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001360:	edd7 6a02 	vldr	s13, [r7, #8]
 8001364:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001368:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80013a4 <atan2_approximation2+0x124>
 800136c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001370:	edc7 7a03 	vstr	s15, [r7, #12]
		if ( y < 0.0f ) return atan - PI_FLOAT;
 8001374:	edd7 7a01 	vldr	s15, [r7, #4]
 8001378:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800137c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001380:	d506      	bpl.n	8001390 <atan2_approximation2+0x110>
 8001382:	edd7 7a03 	vldr	s15, [r7, #12]
 8001386:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80013b4 <atan2_approximation2+0x134>
 800138a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800138e:	e001      	b.n	8001394 <atan2_approximation2+0x114>
	}
	return atan;
 8001390:	edd7 7a03 	vldr	s15, [r7, #12]
}
 8001394:	eeb0 0a67 	vmov.f32	s0, s15
 8001398:	3714      	adds	r7, #20
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	3fc90fda 	.word	0x3fc90fda
 80013a8:	00000000 	.word	0x00000000
 80013ac:	bfc90fda 	.word	0xbfc90fda
 80013b0:	3e8f5c29 	.word	0x3e8f5c29
 80013b4:	40490fdb 	.word	0x40490fdb

080013b8 <BLDC_main>:

//------------------------MAIN-------------------------
Flash *storage;
void BLDC_main(void){
 80013b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ba:	f2ad 4d0c 	subw	sp, sp, #1036	; 0x40c
 80013be:	af0a      	add	r7, sp, #40	; 0x28
	Flash_init();
 80013c0:	f002 f97c 	bl	80036bc <Flash_init>
	storage = Flash_get_values();
 80013c4:	f002 f9b2 	bl	800372c <Flash_get_values>
 80013c8:	4603      	mov	r3, r0
 80013ca:	4a92      	ldr	r2, [pc, #584]	; (8001614 <BLDC_main+0x25c>)
 80013cc:	6013      	str	r3, [r2, #0]


	PrintServerPrintf("\n\r%s %d 0x%x\n\r",storage->ID, (uint32_t)storage->Current_limit);
 80013ce:	4b91      	ldr	r3, [pc, #580]	; (8001614 <BLDC_main+0x25c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4619      	mov	r1, r3
 80013d4:	4b8f      	ldr	r3, [pc, #572]	; (8001614 <BLDC_main+0x25c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013da:	461a      	mov	r2, r3
 80013dc:	488e      	ldr	r0, [pc, #568]	; (8001618 <BLDC_main+0x260>)
 80013de:	f002 fc0d 	bl	8003bfc <PrintServerPrintf>

//	while(1);

	HAL_Delay(100);
 80013e2:	2064      	movs	r0, #100	; 0x64
 80013e4:	f004 f94c 	bl	8005680 <HAL_Delay>
	//----------------PID---------
	SetSampleTime(&Current_PID, 40); //40us = 25kHz
 80013e8:	2128      	movs	r1, #40	; 0x28
 80013ea:	488c      	ldr	r0, [pc, #560]	; (800161c <BLDC_main+0x264>)
 80013ec:	f002 fb14 	bl	8003a18 <SetSampleTime>
	SetTunings(&Current_PID, storage->Current_kp, storage->Current_ki, storage->Current_kd, 1); //alva
 80013f0:	4b88      	ldr	r3, [pc, #544]	; (8001614 <BLDC_main+0x25c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80013f8:	4b86      	ldr	r3, [pc, #536]	; (8001614 <BLDC_main+0x25c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8001400:	4b84      	ldr	r3, [pc, #528]	; (8001614 <BLDC_main+0x25c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8001408:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800140c:	eeb0 1a66 	vmov.f32	s2, s13
 8001410:	eef0 0a47 	vmov.f32	s1, s14
 8001414:	eeb0 0a67 	vmov.f32	s0, s15
 8001418:	4880      	ldr	r0, [pc, #512]	; (800161c <BLDC_main+0x264>)
 800141a:	f002 fa43 	bl	80038a4 <SetTunings>
//	SetTunings(&Current_PID, 0.005f, 40.0f, 0.0f, 1); //gimbal
	SetOutputLimits(&Current_PID, -1500, 1500);
 800141e:	eddf 0a80 	vldr	s1, [pc, #512]	; 8001620 <BLDC_main+0x268>
 8001422:	ed9f 0a80 	vldr	s0, [pc, #512]	; 8001624 <BLDC_main+0x26c>
 8001426:	487d      	ldr	r0, [pc, #500]	; (800161c <BLDC_main+0x264>)
 8001428:	f002 fb2a 	bl	8003a80 <SetOutputLimits>
	SetControllerDirection(&Current_PID, DIRECT);
 800142c:	2100      	movs	r1, #0
 800142e:	487b      	ldr	r0, [pc, #492]	; (800161c <BLDC_main+0x264>)
 8001430:	f002 fbd6 	bl	8003be0 <SetControllerDirection>
	SetMode(&Current_PID,  AUTOMATIC);
 8001434:	2101      	movs	r1, #1
 8001436:	4879      	ldr	r0, [pc, #484]	; (800161c <BLDC_main+0x264>)
 8001438:	f002 fb7e 	bl	8003b38 <SetMode>
	Initialize(&Current_PID);
 800143c:	4877      	ldr	r0, [pc, #476]	; (800161c <BLDC_main+0x264>)
 800143e:	f002 fb9d 	bl	8003b7c <Initialize>

	SetSampleTime(&Velocity_PID, 100); //100s = 10kHz
 8001442:	2164      	movs	r1, #100	; 0x64
 8001444:	4878      	ldr	r0, [pc, #480]	; (8001628 <BLDC_main+0x270>)
 8001446:	f002 fae7 	bl	8003a18 <SetSampleTime>
	SetTunings(&Velocity_PID, storage->Velocity_kp, storage->Velocity_ki, storage->Velocity_kd, 1);
 800144a:	4b72      	ldr	r3, [pc, #456]	; (8001614 <BLDC_main+0x25c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001452:	4b70      	ldr	r3, [pc, #448]	; (8001614 <BLDC_main+0x25c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800145a:	4b6e      	ldr	r3, [pc, #440]	; (8001614 <BLDC_main+0x25c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8001462:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8001466:	eeb0 1a66 	vmov.f32	s2, s13
 800146a:	eef0 0a47 	vmov.f32	s1, s14
 800146e:	eeb0 0a67 	vmov.f32	s0, s15
 8001472:	486d      	ldr	r0, [pc, #436]	; (8001628 <BLDC_main+0x270>)
 8001474:	f002 fa16 	bl	80038a4 <SetTunings>
	SetOutputLimits(&Velocity_PID, -(storage->Current_limit*1000.0f), (storage->Current_limit*1000.0f));
 8001478:	4b66      	ldr	r3, [pc, #408]	; (8001614 <BLDC_main+0x25c>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800147e:	ee07 3a90 	vmov	s15, r3
 8001482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001486:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800162c <BLDC_main+0x274>
 800148a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800148e:	eeb1 7a67 	vneg.f32	s14, s15
 8001492:	4b60      	ldr	r3, [pc, #384]	; (8001614 <BLDC_main+0x25c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001498:	ee07 3a90 	vmov	s15, r3
 800149c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014a0:	eddf 6a62 	vldr	s13, [pc, #392]	; 800162c <BLDC_main+0x274>
 80014a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80014a8:	eef0 0a67 	vmov.f32	s1, s15
 80014ac:	eeb0 0a47 	vmov.f32	s0, s14
 80014b0:	485d      	ldr	r0, [pc, #372]	; (8001628 <BLDC_main+0x270>)
 80014b2:	f002 fae5 	bl	8003a80 <SetOutputLimits>
	SetControllerDirection(&Velocity_PID, DIRECT);
 80014b6:	2100      	movs	r1, #0
 80014b8:	485b      	ldr	r0, [pc, #364]	; (8001628 <BLDC_main+0x270>)
 80014ba:	f002 fb91 	bl	8003be0 <SetControllerDirection>
	SetMode(&Velocity_PID,  AUTOMATIC);
 80014be:	2101      	movs	r1, #1
 80014c0:	4859      	ldr	r0, [pc, #356]	; (8001628 <BLDC_main+0x270>)
 80014c2:	f002 fb39 	bl	8003b38 <SetMode>
	Initialize(&Velocity_PID);
 80014c6:	4858      	ldr	r0, [pc, #352]	; (8001628 <BLDC_main+0x270>)
 80014c8:	f002 fb58 	bl	8003b7c <Initialize>


	SetSampleTime(&Angle_PID, 100); //100s = 10kHz
 80014cc:	2164      	movs	r1, #100	; 0x64
 80014ce:	4858      	ldr	r0, [pc, #352]	; (8001630 <BLDC_main+0x278>)
 80014d0:	f002 faa2 	bl	8003a18 <SetSampleTime>
	SetTunings(&Angle_PID, storage->Angle_kp, storage->Angle_ki, storage->Angle_kd, 1);
 80014d4:	4b4f      	ldr	r3, [pc, #316]	; (8001614 <BLDC_main+0x25c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	edd3 7a08 	vldr	s15, [r3, #32]
 80014dc:	4b4d      	ldr	r3, [pc, #308]	; (8001614 <BLDC_main+0x25c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80014e4:	4b4b      	ldr	r3, [pc, #300]	; (8001614 <BLDC_main+0x25c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80014ec:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80014f0:	eeb0 1a66 	vmov.f32	s2, s13
 80014f4:	eef0 0a47 	vmov.f32	s1, s14
 80014f8:	eeb0 0a67 	vmov.f32	s0, s15
 80014fc:	484c      	ldr	r0, [pc, #304]	; (8001630 <BLDC_main+0x278>)
 80014fe:	f002 f9d1 	bl	80038a4 <SetTunings>
	SetOutputLimits(&Angle_PID, -(storage->Velocity_limit*1000.0f), (storage->Velocity_limit*1000.0f));
 8001502:	4b44      	ldr	r3, [pc, #272]	; (8001614 <BLDC_main+0x25c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001508:	ee07 3a90 	vmov	s15, r3
 800150c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001510:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800162c <BLDC_main+0x274>
 8001514:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001518:	eeb1 7a67 	vneg.f32	s14, s15
 800151c:	4b3d      	ldr	r3, [pc, #244]	; (8001614 <BLDC_main+0x25c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001522:	ee07 3a90 	vmov	s15, r3
 8001526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800152a:	eddf 6a40 	vldr	s13, [pc, #256]	; 800162c <BLDC_main+0x274>
 800152e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001532:	eef0 0a67 	vmov.f32	s1, s15
 8001536:	eeb0 0a47 	vmov.f32	s0, s14
 800153a:	483d      	ldr	r0, [pc, #244]	; (8001630 <BLDC_main+0x278>)
 800153c:	f002 faa0 	bl	8003a80 <SetOutputLimits>
	SetControllerDirection(&Angle_PID, DIRECT);
 8001540:	2100      	movs	r1, #0
 8001542:	483b      	ldr	r0, [pc, #236]	; (8001630 <BLDC_main+0x278>)
 8001544:	f002 fb4c 	bl	8003be0 <SetControllerDirection>
	SetMode(&Angle_PID,  AUTOMATIC);
 8001548:	2101      	movs	r1, #1
 800154a:	4839      	ldr	r0, [pc, #228]	; (8001630 <BLDC_main+0x278>)
 800154c:	f002 faf4 	bl	8003b38 <SetMode>
	Initialize(&Angle_PID);
 8001550:	4837      	ldr	r0, [pc, #220]	; (8001630 <BLDC_main+0x278>)
 8001552:	f002 fb13 	bl	8003b7c <Initialize>

	SetSampleTime(&Current_PID_offset, 40); //100s = 10kHz
 8001556:	2128      	movs	r1, #40	; 0x28
 8001558:	4836      	ldr	r0, [pc, #216]	; (8001634 <BLDC_main+0x27c>)
 800155a:	f002 fa5d 	bl	8003a18 <SetSampleTime>
	SetTunings(&Current_PID_offset, storage->Current_offset_kp, storage->Current_offset_ki, storage->Current_offset_kd, 1);
 800155e:	4b2d      	ldr	r3, [pc, #180]	; (8001614 <BLDC_main+0x25c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001566:	4b2b      	ldr	r3, [pc, #172]	; (8001614 <BLDC_main+0x25c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800156e:	4b29      	ldr	r3, [pc, #164]	; (8001614 <BLDC_main+0x25c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 8001576:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800157a:	eeb0 1a66 	vmov.f32	s2, s13
 800157e:	eef0 0a47 	vmov.f32	s1, s14
 8001582:	eeb0 0a67 	vmov.f32	s0, s15
 8001586:	482b      	ldr	r0, [pc, #172]	; (8001634 <BLDC_main+0x27c>)
 8001588:	f002 f98c 	bl	80038a4 <SetTunings>
	SetOutputLimits(&Current_PID_offset, -1500, 1500);
 800158c:	eddf 0a24 	vldr	s1, [pc, #144]	; 8001620 <BLDC_main+0x268>
 8001590:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8001624 <BLDC_main+0x26c>
 8001594:	4827      	ldr	r0, [pc, #156]	; (8001634 <BLDC_main+0x27c>)
 8001596:	f002 fa73 	bl	8003a80 <SetOutputLimits>
	SetControllerDirection(&Current_PID_offset, DIRECT);
 800159a:	2100      	movs	r1, #0
 800159c:	4825      	ldr	r0, [pc, #148]	; (8001634 <BLDC_main+0x27c>)
 800159e:	f002 fb1f 	bl	8003be0 <SetControllerDirection>
	SetMode(&Current_PID_offset,  AUTOMATIC);
 80015a2:	2101      	movs	r1, #1
 80015a4:	4823      	ldr	r0, [pc, #140]	; (8001634 <BLDC_main+0x27c>)
 80015a6:	f002 fac7 	bl	8003b38 <SetMode>
	Initialize(&Current_PID_offset);
 80015aa:	4822      	ldr	r0, [pc, #136]	; (8001634 <BLDC_main+0x27c>)
 80015ac:	f002 fae6 	bl	8003b7c <Initialize>


	//setup encoder
	ORBIS_init((void*)&Encoders_IRQ);
 80015b0:	4821      	ldr	r0, [pc, #132]	; (8001638 <BLDC_main+0x280>)
 80015b2:	f001 fec3 	bl	800333c <ORBIS_init>

	//setup current
	current_init((void*)&Current_IRQ);
 80015b6:	4821      	ldr	r0, [pc, #132]	; (800163c <BLDC_main+0x284>)
 80015b8:	f002 fc10 	bl	8003ddc <current_init>

	//setup voltage and temperature readings
	voltage_temperature_init((void*)&Voltage_Temp_IRQ);
 80015bc:	4820      	ldr	r0, [pc, #128]	; (8001640 <BLDC_main+0x288>)
 80015be:	f002 fc33 	bl	8003e28 <voltage_temperature_init>
	//setup CAN
	//-----------------CAN----------------------
	FDCAN_addCallback(&hfdcan1, (CAN_STATUS_ID << 8) 		| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_Status_IRQ);
 80015c2:	4a20      	ldr	r2, [pc, #128]	; (8001644 <BLDC_main+0x28c>)
 80015c4:	2136      	movs	r1, #54	; 0x36
 80015c6:	4820      	ldr	r0, [pc, #128]	; (8001648 <BLDC_main+0x290>)
 80015c8:	f002 ff0c 	bl	80043e4 <FDCAN_addCallback>
//	FDCAN_addCallback(&hfdcan1, (CAN_LIMITS_ID << 8) 		| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_Limits_IRQ);
//	FDCAN_addCallback(&hfdcan1, (CAN_PID_CURRENT_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_PID_Current_IRQ);
//	FDCAN_addCallback(&hfdcan1, (CAN_PID_VELOCITY_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_PID_Velocity_IRQ);
//	FDCAN_addCallback(&hfdcan1, (CAN_PID_ANGLE_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (void*)&Can_RX_PID_Angle_IRQ);

	FDCAN_Start(&hfdcan1);
 80015cc:	481e      	ldr	r0, [pc, #120]	; (8001648 <BLDC_main+0x290>)
 80015ce:	f002 feed 	bl	80043ac <FDCAN_Start>

	//--------------setup PWM------------------


	electrical_offset = storage->electrical_offset;
 80015d2:	4b10      	ldr	r3, [pc, #64]	; (8001614 <BLDC_main+0x25c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80015d8:	4a1c      	ldr	r2, [pc, #112]	; (800164c <BLDC_main+0x294>)
 80015da:	6013      	str	r3, [r2, #0]
	PHASE_ORDER = storage->PHASE_ORDER;
 80015dc:	4b0d      	ldr	r3, [pc, #52]	; (8001614 <BLDC_main+0x25c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 80015e4:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <BLDC_main+0x298>)
 80015e6:	701a      	strb	r2, [r3, #0]
	uint16_t mech_offset = storage->mech_offset;//storage->mech_offset;
 80015e8:	4b0a      	ldr	r3, [pc, #40]	; (8001614 <BLDC_main+0x25c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f8b3 34a8 	ldrh.w	r3, [r3, #1192]	; 0x4a8
 80015f0:	f8a7 33de 	strh.w	r3, [r7, #990]	; 0x3de
	if(mech_offset > 400)mech_offset = 0;
 80015f4:	f8b7 33de 	ldrh.w	r3, [r7, #990]	; 0x3de
 80015f8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80015fc:	d902      	bls.n	8001604 <BLDC_main+0x24c>
 80015fe:	2300      	movs	r3, #0
 8001600:	f8a7 33de 	strh.w	r3, [r7, #990]	; 0x3de
	uint8_t flash_nan = 0;
 8001604:	2300      	movs	r3, #0
 8001606:	f887 33dd 	strb.w	r3, [r7, #989]	; 0x3dd
	for(int i = 0; i < sizeof(error_filt); i++){
 800160a:	2300      	movs	r3, #0
 800160c:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
 8001610:	e036      	b.n	8001680 <BLDC_main+0x2c8>
 8001612:	bf00      	nop
 8001614:	20000acc 	.word	0x20000acc
 8001618:	0800f590 	.word	0x0800f590
 800161c:	20000a0c 	.word	0x20000a0c
 8001620:	44bb8000 	.word	0x44bb8000
 8001624:	c4bb8000 	.word	0xc4bb8000
 8001628:	20000a4c 	.word	0x20000a4c
 800162c:	447a0000 	.word	0x447a0000
 8001630:	20000a8c 	.word	0x20000a8c
 8001634:	200009cc 	.word	0x200009cc
 8001638:	08001161 	.word	0x08001161
 800163c:	08001111 	.word	0x08001111
 8001640:	08001141 	.word	0x08001141
 8001644:	08001181 	.word	0x08001181
 8001648:	20001a38 	.word	0x20001a38
 800164c:	20000f18 	.word	0x20000f18
 8001650:	20000f14 	.word	0x20000f14
		if (isnan(storage->error_filt[i])) flash_nan = 1;
 8001654:	4b6b      	ldr	r3, [pc, #428]	; (8001804 <BLDC_main+0x44c>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 800165c:	331a      	adds	r3, #26
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	4413      	add	r3, r2
 8001662:	edd3 7a00 	vldr	s15, [r3]
 8001666:	eef4 7a67 	vcmp.f32	s15, s15
 800166a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800166e:	d702      	bvc.n	8001676 <BLDC_main+0x2be>
 8001670:	2301      	movs	r3, #1
 8001672:	f887 33dd 	strb.w	r3, [r7, #989]	; 0x3dd
	for(int i = 0; i < sizeof(error_filt); i++){
 8001676:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 800167a:	3301      	adds	r3, #1
 800167c:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
 8001680:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 8001684:	f5b3 6f88 	cmp.w	r3, #1088	; 0x440
 8001688:	d3e4      	bcc.n	8001654 <BLDC_main+0x29c>
	}
	if(!flash_nan)memcpy(error_filt, storage->error_filt,sizeof(error_filt));
 800168a:	f897 33dd 	ldrb.w	r3, [r7, #989]	; 0x3dd
 800168e:	2b00      	cmp	r3, #0
 8001690:	d108      	bne.n	80016a4 <BLDC_main+0x2ec>
 8001692:	4b5c      	ldr	r3, [pc, #368]	; (8001804 <BLDC_main+0x44c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	3368      	adds	r3, #104	; 0x68
 8001698:	f44f 6288 	mov.w	r2, #1088	; 0x440
 800169c:	4619      	mov	r1, r3
 800169e:	485a      	ldr	r0, [pc, #360]	; (8001808 <BLDC_main+0x450>)
 80016a0:	f009 fee1 	bl	800b466 <memcpy>

	Current IRQ_Current_BUFF = {0};
 80016a4:	f507 7361 	add.w	r3, r7, #900	; 0x384
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	60da      	str	r2, [r3, #12]
	Voltage_Temp IRQ_Voltage_Temp_BUFF = {0};
 80016b2:	f507 735e 	add.w	r3, r7, #888	; 0x378
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]
	Encoders IRQ_Encoders_BUFF = {0};
 80016be:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]
 80016c8:	609a      	str	r2, [r3, #8]
 80016ca:	60da      	str	r2, [r3, #12]
 80016cc:	611a      	str	r2, [r3, #16]
 80016ce:	615a      	str	r2, [r3, #20]
 80016d0:	619a      	str	r2, [r3, #24]
	CAN_Status  IRQ_STATUS_BUFF = {0};
 80016d2:	f507 7354 	add.w	r3, r7, #848	; 0x350
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
 80016dc:	609a      	str	r2, [r3, #8]

	BLDC_STATUS_Feedback Status = BLDC_STOPPED_WITH_BREAK;
 80016de:	2300      	movs	r3, #0
 80016e0:	f887 33d7 	strb.w	r3, [r7, #983]	; 0x3d7

	float velocity_temp[200] = {0};
 80016e4:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80016e8:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 80016ec:	4618      	mov	r0, r3
 80016ee:	f44f 7348 	mov.w	r3, #800	; 0x320
 80016f2:	461a      	mov	r2, r3
 80016f4:	2100      	movs	r1, #0
 80016f6:	f009 fe37 	bl	800b368 <memset>
	uint32_t last_pos = 0;
 80016fa:	2300      	movs	r3, #0
 80016fc:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
	uint8_t velocity_index = 0;
 8001700:	2300      	movs	r3, #0
 8001702:	f887 33cf 	strb.w	r3, [r7, #975]	; 0x3cf
	float velocity = 0;
 8001706:	f04f 0300 	mov.w	r3, #0
 800170a:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8

	int32_t position_overflow = 0;
 800170e:	2300      	movs	r3, #0
 8001710:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4

	uint32_t test = 1499;
 8001714:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8001718:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 800171c:	f240 52db 	movw	r2, #1499	; 0x5db
 8001720:	601a      	str	r2, [r3, #0]
	CTRL_init_PWM(&test);
 8001722:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001726:	4618      	mov	r0, r3
 8001728:	f000 fe0e 	bl	8002348 <CTRL_init_PWM>
	while(1){
		#ifdef RUNNING_LED_DEBUG2
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
		#endif
		//check if flag has been set indicating new current measurements
		while(!Current_Callback_flag);
 800172c:	bf00      	nop
 800172e:	4b37      	ldr	r3, [pc, #220]	; (800180c <BLDC_main+0x454>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d0fb      	beq.n	800172e <BLDC_main+0x376>

		Current_Callback_flag = 0;
 8001736:	4b35      	ldr	r3, [pc, #212]	; (800180c <BLDC_main+0x454>)
 8001738:	2200      	movs	r2, #0
 800173a:	701a      	strb	r2, [r3, #0]
		#ifdef RUNNING_LED_DEBUG
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
		//HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
		#endif

		memcpy(&IRQ_Current_BUFF, &IRQ_Current, sizeof(Current));
 800173c:	4b34      	ldr	r3, [pc, #208]	; (8001810 <BLDC_main+0x458>)
 800173e:	f507 7461 	add.w	r4, r7, #900	; 0x384
 8001742:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001744:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		memcpy(&IRQ_Voltage_Temp_BUFF, &IRQ_Voltage_Temp, sizeof(Voltage_Temp));
 8001748:	4a32      	ldr	r2, [pc, #200]	; (8001814 <BLDC_main+0x45c>)
 800174a:	f507 735e 	add.w	r3, r7, #888	; 0x378
 800174e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001750:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		#ifndef CALIBRATION
		memcpy(&IRQ_Encoders_BUFF, &IRQ_Encoders, sizeof(Encoders));
 8001754:	4b30      	ldr	r3, [pc, #192]	; (8001818 <BLDC_main+0x460>)
 8001756:	f507 7457 	add.w	r4, r7, #860	; 0x35c
 800175a:	461d      	mov	r5, r3
 800175c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800175e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001760:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001764:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		#endif
		memcpy(&IRQ_STATUS_BUFF, &IRQ_Status, sizeof(CAN_Status));
 8001768:	4a2c      	ldr	r2, [pc, #176]	; (800181c <BLDC_main+0x464>)
 800176a:	f507 7354 	add.w	r3, r7, #848	; 0x350
 800176e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001770:	e883 0007 	stmia.w	r3, {r0, r1, r2}
//		IRQ_Current_BUFF.Current_DC -= current_offset;

//		IRQ_Current_BUFF.Current_DC = calculate_vector_sum((float)IRQ_Current_BUFF.Current_M1, (float)IRQ_Current_BUFF.Current_M2, (float)IRQ_Current_BUFF.Current_M3); //

		//start calibration
		if(Status == BLDC_STOPPED_WITH_BREAK && IRQ_STATUS_BUFF.status == INPUT_CALIBRATE_ENCODER)Status = BLDC_CALIBRATING_ENCODER;
 8001774:	f897 33d7 	ldrb.w	r3, [r7, #983]	; 0x3d7
 8001778:	2b00      	cmp	r3, #0
 800177a:	d107      	bne.n	800178c <BLDC_main+0x3d4>
 800177c:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8001780:	2b04      	cmp	r3, #4
 8001782:	d103      	bne.n	800178c <BLDC_main+0x3d4>
 8001784:	2302      	movs	r3, #2
 8001786:	f887 33d7 	strb.w	r3, [r7, #983]	; 0x3d7
 800178a:	e05c      	b.n	8001846 <BLDC_main+0x48e>

		//reset errors
		else if(Status == BLDC_STOPPED_WITH_BREAK && IRQ_STATUS_BUFF.status == INPUT_RESET_ERRORS)error = 0;
 800178c:	f897 33d7 	ldrb.w	r3, [r7, #983]	; 0x3d7
 8001790:	2b00      	cmp	r3, #0
 8001792:	d107      	bne.n	80017a4 <BLDC_main+0x3ec>
 8001794:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8001798:	2b05      	cmp	r3, #5
 800179a:	d103      	bne.n	80017a4 <BLDC_main+0x3ec>
 800179c:	4b20      	ldr	r3, [pc, #128]	; (8001820 <BLDC_main+0x468>)
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	e050      	b.n	8001846 <BLDC_main+0x48e>

		//start motor when not running
		else if(Status == BLDC_STOPPED_WITH_BREAK && IRQ_STATUS_BUFF.status == INPUT_START){
 80017a4:	f897 33d7 	ldrb.w	r3, [r7, #983]	; 0x3d7
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d113      	bne.n	80017d4 <BLDC_main+0x41c>
 80017ac:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d10f      	bne.n	80017d4 <BLDC_main+0x41c>
			Status = BLDC_RUNNING;
 80017b4:	2303      	movs	r3, #3
 80017b6:	f887 33d7 	strb.w	r3, [r7, #983]	; 0x3d7
			SetMode(&Current_PID,  AUTOMATIC);
 80017ba:	2101      	movs	r1, #1
 80017bc:	4819      	ldr	r0, [pc, #100]	; (8001824 <BLDC_main+0x46c>)
 80017be:	f002 f9bb 	bl	8003b38 <SetMode>
			SetMode(&Velocity_PID,  AUTOMATIC);
 80017c2:	2101      	movs	r1, #1
 80017c4:	4818      	ldr	r0, [pc, #96]	; (8001828 <BLDC_main+0x470>)
 80017c6:	f002 f9b7 	bl	8003b38 <SetMode>
			SetMode(&Angle_PID,  AUTOMATIC);
 80017ca:	2101      	movs	r1, #1
 80017cc:	4817      	ldr	r0, [pc, #92]	; (800182c <BLDC_main+0x474>)
 80017ce:	f002 f9b3 	bl	8003b38 <SetMode>
 80017d2:	e038      	b.n	8001846 <BLDC_main+0x48e>
		}

		//stop motor when running
		else if(Status == BLDC_RUNNING && IRQ_STATUS_BUFF.status == INPUT_STOP_WITH_BREAK){
 80017d4:	f897 33d7 	ldrb.w	r3, [r7, #983]	; 0x3d7
 80017d8:	2b03      	cmp	r3, #3
 80017da:	d129      	bne.n	8001830 <BLDC_main+0x478>
 80017dc:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d125      	bne.n	8001830 <BLDC_main+0x478>
			Status = BLDC_STOPPED_WITH_BREAK;
 80017e4:	2300      	movs	r3, #0
 80017e6:	f887 33d7 	strb.w	r3, [r7, #983]	; 0x3d7
			SetMode(&Current_PID,  MANUAL);
 80017ea:	2100      	movs	r1, #0
 80017ec:	480d      	ldr	r0, [pc, #52]	; (8001824 <BLDC_main+0x46c>)
 80017ee:	f002 f9a3 	bl	8003b38 <SetMode>
			SetMode(&Velocity_PID,  MANUAL);
 80017f2:	2100      	movs	r1, #0
 80017f4:	480c      	ldr	r0, [pc, #48]	; (8001828 <BLDC_main+0x470>)
 80017f6:	f002 f99f 	bl	8003b38 <SetMode>
			SetMode(&Angle_PID,  MANUAL);
 80017fa:	2100      	movs	r1, #0
 80017fc:	480b      	ldr	r0, [pc, #44]	; (800182c <BLDC_main+0x474>)
 80017fe:	f002 f99b 	bl	8003b38 <SetMode>
 8001802:	e020      	b.n	8001846 <BLDC_main+0x48e>
 8001804:	20000acc 	.word	0x20000acc
 8001808:	20000ad4 	.word	0x20000ad4
 800180c:	20000774 	.word	0x20000774
 8001810:	20000784 	.word	0x20000784
 8001814:	20000794 	.word	0x20000794
 8001818:	200007a0 	.word	0x200007a0
 800181c:	20000980 	.word	0x20000980
 8001820:	20000780 	.word	0x20000780
 8001824:	20000a0c 	.word	0x20000a0c
 8001828:	20000a4c 	.word	0x20000a4c
 800182c:	20000a8c 	.word	0x20000a8c
		}
		else if(Status == BLDC_RUNNING && IRQ_STATUS_BUFF.status == INPUT_STOP_AND_SHUTDOWN)Status = BLDC_STOPPED_AND_SHUTDOWN;
 8001830:	f897 33d7 	ldrb.w	r3, [r7, #983]	; 0x3d7
 8001834:	2b03      	cmp	r3, #3
 8001836:	d106      	bne.n	8001846 <BLDC_main+0x48e>
 8001838:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800183c:	2b01      	cmp	r3, #1
 800183e:	d102      	bne.n	8001846 <BLDC_main+0x48e>
 8001840:	2301      	movs	r3, #1
 8001842:	f887 33d7 	strb.w	r3, [r7, #983]	; 0x3d7

		//time keepers
		timing_CAN_feedback++;
 8001846:	4bb8      	ldr	r3, [pc, #736]	; (8001b28 <BLDC_main+0x770>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	3301      	adds	r3, #1
 800184c:	4ab6      	ldr	r2, [pc, #728]	; (8001b28 <BLDC_main+0x770>)
 800184e:	6013      	str	r3, [r2, #0]
		running_LED_timing++;
 8001850:	4bb6      	ldr	r3, [pc, #728]	; (8001b2c <BLDC_main+0x774>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	3301      	adds	r3, #1
 8001856:	4ab5      	ldr	r2, [pc, #724]	; (8001b2c <BLDC_main+0x774>)
 8001858:	6013      	str	r3, [r2, #0]

		//reset warnings
		uint32_t warning = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0

//		Limit_callback = check_value(&LIMIT_Current, (float)IRQ_Current_BUFF.Current_DC);
//		warning |= (Limit_callback&1)      << 0; //warning
//		error   |= ((Limit_callback&2)>>1) << 0; //error

		Limit_callback = check_value(&LIMIT_Encoder_1, (float)IRQ_Encoders_BUFF.Encoder1_pos);
 8001860:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8001864:	ee07 3a90 	vmov	s15, r3
 8001868:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800186c:	eeb0 0a67 	vmov.f32	s0, s15
 8001870:	48af      	ldr	r0, [pc, #700]	; (8001b30 <BLDC_main+0x778>)
 8001872:	f7ff fc95 	bl	80011a0 <check_value>
 8001876:	4603      	mov	r3, r0
 8001878:	f887 33b7 	strb.w	r3, [r7, #951]	; 0x3b7
		warning |= (Limit_callback&1)      << 1; //warning
 800187c:	f897 33b7 	ldrb.w	r3, [r7, #951]	; 0x3b7
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 800188a:	4313      	orrs	r3, r2
 800188c:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
		error   |= ((Limit_callback&2)>>1) << 1; //error
 8001890:	f897 33b7 	ldrb.w	r3, [r7, #951]	; 0x3b7
 8001894:	f003 0202 	and.w	r2, r3, #2
 8001898:	4ba6      	ldr	r3, [pc, #664]	; (8001b34 <BLDC_main+0x77c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4313      	orrs	r3, r2
 800189e:	4aa5      	ldr	r2, [pc, #660]	; (8001b34 <BLDC_main+0x77c>)
 80018a0:	6013      	str	r3, [r2, #0]

		Limit_callback= check_value(&LIMIT_Encoder_2, (float)IRQ_Encoders_BUFF.Encoder2_pos);
 80018a2:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 80018a6:	ee07 3a90 	vmov	s15, r3
 80018aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018ae:	eeb0 0a67 	vmov.f32	s0, s15
 80018b2:	48a1      	ldr	r0, [pc, #644]	; (8001b38 <BLDC_main+0x780>)
 80018b4:	f7ff fc74 	bl	80011a0 <check_value>
 80018b8:	4603      	mov	r3, r0
 80018ba:	f887 33b7 	strb.w	r3, [r7, #951]	; 0x3b7
		warning |= (Limit_callback&1)      << 2; //warning
 80018be:	f897 33b7 	ldrb.w	r3, [r7, #951]	; 0x3b7
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	f003 0304 	and.w	r3, r3, #4
 80018c8:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 80018cc:	4313      	orrs	r3, r2
 80018ce:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
		error   |= ((Limit_callback&2)>>1) << 2; //error
 80018d2:	f897 33b7 	ldrb.w	r3, [r7, #951]	; 0x3b7
 80018d6:	105b      	asrs	r3, r3, #1
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	f003 0204 	and.w	r2, r3, #4
 80018de:	4b95      	ldr	r3, [pc, #596]	; (8001b34 <BLDC_main+0x77c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	4a93      	ldr	r2, [pc, #588]	; (8001b34 <BLDC_main+0x77c>)
 80018e6:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_Velocity, (float)IRQ_Encoders_BUFF.Velocity);
 80018e8:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 80018ec:	ee07 3a90 	vmov	s15, r3
 80018f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018f4:	eeb0 0a67 	vmov.f32	s0, s15
 80018f8:	4890      	ldr	r0, [pc, #576]	; (8001b3c <BLDC_main+0x784>)
 80018fa:	f7ff fc51 	bl	80011a0 <check_value>
 80018fe:	4603      	mov	r3, r0
 8001900:	f887 33b7 	strb.w	r3, [r7, #951]	; 0x3b7
		warning |= (Limit_callback&1)      << 3; //warning
 8001904:	f897 33b7 	ldrb.w	r3, [r7, #951]	; 0x3b7
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	f003 0308 	and.w	r3, r3, #8
 800190e:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 8001912:	4313      	orrs	r3, r2
 8001914:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
		error   |= ((Limit_callback&2)>>1) << 3; //error
 8001918:	f897 33b7 	ldrb.w	r3, [r7, #951]	; 0x3b7
 800191c:	105b      	asrs	r3, r3, #1
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	f003 0208 	and.w	r2, r3, #8
 8001924:	4b83      	ldr	r3, [pc, #524]	; (8001b34 <BLDC_main+0x77c>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4313      	orrs	r3, r2
 800192a:	4a82      	ldr	r2, [pc, #520]	; (8001b34 <BLDC_main+0x77c>)
 800192c:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_V_AUX, (float)IRQ_Voltage_Temp_BUFF.V_aux);
 800192e:	f8b7 337c 	ldrh.w	r3, [r7, #892]	; 0x37c
 8001932:	ee07 3a90 	vmov	s15, r3
 8001936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800193a:	eeb0 0a67 	vmov.f32	s0, s15
 800193e:	4880      	ldr	r0, [pc, #512]	; (8001b40 <BLDC_main+0x788>)
 8001940:	f7ff fc2e 	bl	80011a0 <check_value>
 8001944:	4603      	mov	r3, r0
 8001946:	f887 33b7 	strb.w	r3, [r7, #951]	; 0x3b7
		warning |= (Limit_callback&1)      << 4; //warning
 800194a:	f897 33b7 	ldrb.w	r3, [r7, #951]	; 0x3b7
 800194e:	011b      	lsls	r3, r3, #4
 8001950:	f003 0310 	and.w	r3, r3, #16
 8001954:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 8001958:	4313      	orrs	r3, r2
 800195a:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
		error   |= ((Limit_callback&2)>>1) << 4; //error
 800195e:	f897 33b7 	ldrb.w	r3, [r7, #951]	; 0x3b7
 8001962:	105b      	asrs	r3, r3, #1
 8001964:	011b      	lsls	r3, r3, #4
 8001966:	f003 0210 	and.w	r2, r3, #16
 800196a:	4b72      	ldr	r3, [pc, #456]	; (8001b34 <BLDC_main+0x77c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4313      	orrs	r3, r2
 8001970:	4a70      	ldr	r2, [pc, #448]	; (8001b34 <BLDC_main+0x77c>)
 8001972:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_V_BAT, (float)IRQ_Voltage_Temp_BUFF.V_Bat);
 8001974:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8001978:	ee07 3a90 	vmov	s15, r3
 800197c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001980:	eeb0 0a67 	vmov.f32	s0, s15
 8001984:	486f      	ldr	r0, [pc, #444]	; (8001b44 <BLDC_main+0x78c>)
 8001986:	f7ff fc0b 	bl	80011a0 <check_value>
 800198a:	4603      	mov	r3, r0
 800198c:	f887 33b7 	strb.w	r3, [r7, #951]	; 0x3b7
		warning |= (Limit_callback&1)      << 5; //warning
 8001990:	f897 33b7 	ldrb.w	r3, [r7, #951]	; 0x3b7
 8001994:	015b      	lsls	r3, r3, #5
 8001996:	f003 0320 	and.w	r3, r3, #32
 800199a:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 800199e:	4313      	orrs	r3, r2
 80019a0:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
		error   |= ((Limit_callback&2)>>1) << 5; //error
 80019a4:	f897 33b7 	ldrb.w	r3, [r7, #951]	; 0x3b7
 80019a8:	105b      	asrs	r3, r3, #1
 80019aa:	015b      	lsls	r3, r3, #5
 80019ac:	f003 0220 	and.w	r2, r3, #32
 80019b0:	4b60      	ldr	r3, [pc, #384]	; (8001b34 <BLDC_main+0x77c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	4a5f      	ldr	r2, [pc, #380]	; (8001b34 <BLDC_main+0x77c>)
 80019b8:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_temp, (float)IRQ_Voltage_Temp_BUFF.Temp_NTC1);
 80019ba:	f9b7 337e 	ldrsh.w	r3, [r7, #894]	; 0x37e
 80019be:	ee07 3a90 	vmov	s15, r3
 80019c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019c6:	eeb0 0a67 	vmov.f32	s0, s15
 80019ca:	485f      	ldr	r0, [pc, #380]	; (8001b48 <BLDC_main+0x790>)
 80019cc:	f7ff fbe8 	bl	80011a0 <check_value>
 80019d0:	4603      	mov	r3, r0
 80019d2:	f887 33b7 	strb.w	r3, [r7, #951]	; 0x3b7
		warning |= (Limit_callback&1)      << 6; //warning
 80019d6:	f897 33b7 	ldrb.w	r3, [r7, #951]	; 0x3b7
 80019da:	019b      	lsls	r3, r3, #6
 80019dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019e0:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 80019e4:	4313      	orrs	r3, r2
 80019e6:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
		error   |= ((Limit_callback&2)>>1) << 6; //error
 80019ea:	f897 33b7 	ldrb.w	r3, [r7, #951]	; 0x3b7
 80019ee:	105b      	asrs	r3, r3, #1
 80019f0:	019b      	lsls	r3, r3, #6
 80019f2:	f003 0240 	and.w	r2, r3, #64	; 0x40
 80019f6:	4b4f      	ldr	r3, [pc, #316]	; (8001b34 <BLDC_main+0x77c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	4a4d      	ldr	r2, [pc, #308]	; (8001b34 <BLDC_main+0x77c>)
 80019fe:	6013      	str	r3, [r2, #0]

		Limit_callback = check_value(&LIMIT_temp, (float)IRQ_Voltage_Temp_BUFF.Temp_NTC2);
 8001a00:	f9b7 3380 	ldrsh.w	r3, [r7, #896]	; 0x380
 8001a04:	ee07 3a90 	vmov	s15, r3
 8001a08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a0c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a10:	484d      	ldr	r0, [pc, #308]	; (8001b48 <BLDC_main+0x790>)
 8001a12:	f7ff fbc5 	bl	80011a0 <check_value>
 8001a16:	4603      	mov	r3, r0
 8001a18:	f887 33b7 	strb.w	r3, [r7, #951]	; 0x3b7
		warning |= (Limit_callback&1)      << 7; //warning
 8001a1c:	f897 33b7 	ldrb.w	r3, [r7, #951]	; 0x3b7
 8001a20:	01db      	lsls	r3, r3, #7
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
		error   |= ((Limit_callback&2)>>1) << 7; //error
 8001a2e:	f897 33b7 	ldrb.w	r3, [r7, #951]	; 0x3b7
 8001a32:	105b      	asrs	r3, r3, #1
 8001a34:	01db      	lsls	r3, r3, #7
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	4b3e      	ldr	r3, [pc, #248]	; (8001b34 <BLDC_main+0x77c>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	4a3d      	ldr	r2, [pc, #244]	; (8001b34 <BLDC_main+0x77c>)
 8001a40:	6013      	str	r3, [r2, #0]

		if (Angle_PID.Input < (IRQ_STATUS_BUFF.setpoint - 20000) || Angle_PID.Input > (IRQ_STATUS_BUFF.setpoint + 20000)) warning |= (1 << 8); //warning
 8001a42:	4b42      	ldr	r3, [pc, #264]	; (8001b4c <BLDC_main+0x794>)
 8001a44:	ed93 7a00 	vldr	s14, [r3]
 8001a48:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 8001a4c:	f5a3 439c 	sub.w	r3, r3, #19968	; 0x4e00
 8001a50:	3b20      	subs	r3, #32
 8001a52:	ee07 3a90 	vmov	s15, r3
 8001a56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a62:	d410      	bmi.n	8001a86 <BLDC_main+0x6ce>
 8001a64:	4b39      	ldr	r3, [pc, #228]	; (8001b4c <BLDC_main+0x794>)
 8001a66:	ed93 7a00 	vldr	s14, [r3]
 8001a6a:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 8001a6e:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8001a72:	3320      	adds	r3, #32
 8001a74:	ee07 3a90 	vmov	s15, r3
 8001a78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a84:	dd05      	ble.n	8001a92 <BLDC_main+0x6da>
 8001a86:	f8d7 33c0 	ldr.w	r3, [r7, #960]	; 0x3c0
 8001a8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a8e:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0

		//-------------------RUN FIR FILTER---------------------
//		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);

		//----------------------position-----------------
		if (last_pos > 270000 && IRQ_Encoders_BUFF.Encoder1_pos < 90000)position_overflow++;
 8001a92:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 8001a96:	4a2e      	ldr	r2, [pc, #184]	; (8001b50 <BLDC_main+0x798>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d90a      	bls.n	8001ab2 <BLDC_main+0x6fa>
 8001a9c:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8001aa0:	4a2c      	ldr	r2, [pc, #176]	; (8001b54 <BLDC_main+0x79c>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d805      	bhi.n	8001ab2 <BLDC_main+0x6fa>
 8001aa6:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8001aaa:	3301      	adds	r3, #1
 8001aac:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 8001ab0:	e00e      	b.n	8001ad0 <BLDC_main+0x718>
		else if (last_pos < 90000 && IRQ_Encoders_BUFF.Encoder1_pos > 270000)position_overflow--;
 8001ab2:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 8001ab6:	4a27      	ldr	r2, [pc, #156]	; (8001b54 <BLDC_main+0x79c>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d809      	bhi.n	8001ad0 <BLDC_main+0x718>
 8001abc:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8001ac0:	4a23      	ldr	r2, [pc, #140]	; (8001b50 <BLDC_main+0x798>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d904      	bls.n	8001ad0 <BLDC_main+0x718>
 8001ac6:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8001aca:	3b01      	subs	r3, #1
 8001acc:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4

		//-------------------calculate velocity------------------
		velocity_temp[velocity_index] = (IRQ_Encoders_BUFF.Encoder1_pos - last_pos);
 8001ad0:	f8d7 235c 	ldr.w	r2, [r7, #860]	; 0x35c
 8001ad4:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 8001ad8:	1ad2      	subs	r2, r2, r3
 8001ada:	f897 33cf 	ldrb.w	r3, [r7, #975]	; 0x3cf
 8001ade:	ee07 2a90 	vmov	s15, r2
 8001ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ae6:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8001aea:	f5a2 726c 	sub.w	r2, r2, #944	; 0x3b0
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	4413      	add	r3, r2
 8001af2:	edc3 7a00 	vstr	s15, [r3]
		last_pos = IRQ_Encoders_BUFF.Encoder1_pos;
 8001af6:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8001afa:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
		velocity_index++;
 8001afe:	f897 33cf 	ldrb.w	r3, [r7, #975]	; 0x3cf
 8001b02:	3301      	adds	r3, #1
 8001b04:	f887 33cf 	strb.w	r3, [r7, #975]	; 0x3cf
		velocity_index = velocity_index % 200;
 8001b08:	f897 33cf 	ldrb.w	r3, [r7, #975]	; 0x3cf
 8001b0c:	4a12      	ldr	r2, [pc, #72]	; (8001b58 <BLDC_main+0x7a0>)
 8001b0e:	fba2 1203 	umull	r1, r2, r2, r3
 8001b12:	0992      	lsrs	r2, r2, #6
 8001b14:	21c8      	movs	r1, #200	; 0xc8
 8001b16:	fb01 f202 	mul.w	r2, r1, r2
 8001b1a:	1a9b      	subs	r3, r3, r2
 8001b1c:	f887 33cf 	strb.w	r3, [r7, #975]	; 0x3cf
		for(int i = 0; i > 200; i++){
 8001b20:	2300      	movs	r3, #0
 8001b22:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
 8001b26:	e02e      	b.n	8001b86 <BLDC_main+0x7ce>
 8001b28:	20000778 	.word	0x20000778
 8001b2c:	2000077c 	.word	0x2000077c
 8001b30:	20000028 	.word	0x20000028
 8001b34:	20000780 	.word	0x20000780
 8001b38:	20000038 	.word	0x20000038
 8001b3c:	20000078 	.word	0x20000078
 8001b40:	20000058 	.word	0x20000058
 8001b44:	20000048 	.word	0x20000048
 8001b48:	20000068 	.word	0x20000068
 8001b4c:	20000a8c 	.word	0x20000a8c
 8001b50:	00041eb0 	.word	0x00041eb0
 8001b54:	00015f8f 	.word	0x00015f8f
 8001b58:	51eb851f 	.word	0x51eb851f
			velocity += velocity_temp[i];
 8001b5c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8001b60:	f5a3 726c 	sub.w	r2, r3, #944	; 0x3b0
 8001b64:	f8d7 33bc 	ldr.w	r3, [r7, #956]	; 0x3bc
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	4413      	add	r3, r2
 8001b6c:	edd3 7a00 	vldr	s15, [r3]
 8001b70:	ed97 7af2 	vldr	s14, [r7, #968]	; 0x3c8
 8001b74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b78:	edc7 7af2 	vstr	s15, [r7, #968]	; 0x3c8
		for(int i = 0; i > 200; i++){
 8001b7c:	f8d7 33bc 	ldr.w	r3, [r7, #956]	; 0x3bc
 8001b80:	3301      	adds	r3, #1
 8001b82:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
 8001b86:	f8d7 33bc 	ldr.w	r3, [r7, #956]	; 0x3bc
 8001b8a:	2bc8      	cmp	r3, #200	; 0xc8
 8001b8c:	dce6      	bgt.n	8001b5c <BLDC_main+0x7a4>
		#ifdef RUNNING_LED_DEBUG
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
		#endif

		int16_t index_error = (int16_t)(IRQ_Encoders_BUFF.Encoder1_pos/1000)%360;// - electrical_offset);
 8001b8e:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8001b92:	4acf      	ldr	r2, [pc, #828]	; (8001ed0 <BLDC_main+0xb18>)
 8001b94:	fba2 2303 	umull	r2, r3, r2, r3
 8001b98:	099b      	lsrs	r3, r3, #6
 8001b9a:	b21b      	sxth	r3, r3
 8001b9c:	4acd      	ldr	r2, [pc, #820]	; (8001ed4 <BLDC_main+0xb1c>)
 8001b9e:	fb82 1203 	smull	r1, r2, r2, r3
 8001ba2:	441a      	add	r2, r3
 8001ba4:	1211      	asrs	r1, r2, #8
 8001ba6:	17da      	asrs	r2, r3, #31
 8001ba8:	1a8a      	subs	r2, r1, r2
 8001baa:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001bae:	fb01 f202 	mul.w	r2, r1, r2
 8001bb2:	1a9b      	subs	r3, r3, r2
 8001bb4:	f8a7 33b4 	strh.w	r3, [r7, #948]	; 0x3b4
		uint16_t index_error2 = ((((index_error-mech_offset+360)%360)*(SIZE*NPP))/360)%(SIZE*NPP);
 8001bb8:	f9b7 23b4 	ldrsh.w	r2, [r7, #948]	; 0x3b4
 8001bbc:	f8b7 33de 	ldrh.w	r3, [r7, #990]	; 0x3de
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bc6:	4ac3      	ldr	r2, [pc, #780]	; (8001ed4 <BLDC_main+0xb1c>)
 8001bc8:	fb82 1203 	smull	r1, r2, r2, r3
 8001bcc:	441a      	add	r2, r3
 8001bce:	1211      	asrs	r1, r2, #8
 8001bd0:	17da      	asrs	r2, r3, #31
 8001bd2:	1a8a      	subs	r2, r1, r2
 8001bd4:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001bd8:	fb01 f202 	mul.w	r2, r1, r2
 8001bdc:	1a9a      	subs	r2, r3, r2
 8001bde:	4613      	mov	r3, r2
 8001be0:	011b      	lsls	r3, r3, #4
 8001be2:	4413      	add	r3, r2
 8001be4:	011b      	lsls	r3, r3, #4
 8001be6:	4abb      	ldr	r2, [pc, #748]	; (8001ed4 <BLDC_main+0xb1c>)
 8001be8:	fb82 1203 	smull	r1, r2, r2, r3
 8001bec:	441a      	add	r2, r3
 8001bee:	1212      	asrs	r2, r2, #8
 8001bf0:	17db      	asrs	r3, r3, #31
 8001bf2:	1ad2      	subs	r2, r2, r3
 8001bf4:	4bb8      	ldr	r3, [pc, #736]	; (8001ed8 <BLDC_main+0xb20>)
 8001bf6:	fb83 1302 	smull	r1, r3, r3, r2
 8001bfa:	11d9      	asrs	r1, r3, #7
 8001bfc:	17d3      	asrs	r3, r2, #31
 8001bfe:	1ac9      	subs	r1, r1, r3
 8001c00:	460b      	mov	r3, r1
 8001c02:	011b      	lsls	r3, r3, #4
 8001c04:	440b      	add	r3, r1
 8001c06:	011b      	lsls	r3, r3, #4
 8001c08:	1ad1      	subs	r1, r2, r3
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	f8a7 33b2 	strh.w	r3, [r7, #946]	; 0x3b2
		int32_t error_pos = ((int32_t)(error_filt[index_error2] - (int32_t)error_filt[0])*17);
 8001c10:	f8b7 33b2 	ldrh.w	r3, [r7, #946]	; 0x3b2
 8001c14:	4ab1      	ldr	r2, [pc, #708]	; (8001edc <BLDC_main+0xb24>)
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4413      	add	r3, r2
 8001c1a:	ed93 7a00 	vldr	s14, [r3]
 8001c1e:	4baf      	ldr	r3, [pc, #700]	; (8001edc <BLDC_main+0xb24>)
 8001c20:	edd3 7a00 	vldr	s15, [r3]
 8001c24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c34:	ee17 2a90 	vmov	r2, s15
 8001c38:	4613      	mov	r3, r2
 8001c3a:	011b      	lsls	r3, r3, #4
 8001c3c:	4413      	add	r3, r2
 8001c3e:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac

		float d;
		float q;
		int16_t angle = (mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, 0) + error_pos + (int32_t)electrical_offset + 2*360)%360;
 8001c42:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8001c46:	2100      	movs	r1, #0
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f000 faff 	bl	800224c <mech_to_el_deg>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	461a      	mov	r2, r3
 8001c52:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 8001c56:	4413      	add	r3, r2
 8001c58:	4aa1      	ldr	r2, [pc, #644]	; (8001ee0 <BLDC_main+0xb28>)
 8001c5a:	edd2 7a00 	vldr	s15, [r2]
 8001c5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c62:	ee17 2a90 	vmov	r2, s15
 8001c66:	4413      	add	r3, r2
 8001c68:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8001c6c:	4a99      	ldr	r2, [pc, #612]	; (8001ed4 <BLDC_main+0xb1c>)
 8001c6e:	fb82 1203 	smull	r1, r2, r2, r3
 8001c72:	441a      	add	r2, r3
 8001c74:	1211      	asrs	r1, r2, #8
 8001c76:	17da      	asrs	r2, r3, #31
 8001c78:	1a8a      	subs	r2, r1, r2
 8001c7a:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001c7e:	fb01 f202 	mul.w	r2, r1, r2
 8001c82:	1a9a      	subs	r2, r3, r2
 8001c84:	4613      	mov	r3, r2
 8001c86:	f8a7 33aa 	strh.w	r3, [r7, #938]	; 0x3aa
		dq0((float)angle*3.14159264f/180, (float)IRQ_Current_BUFF.Current_M2, (float)IRQ_Current_BUFF.Current_M3, (float)IRQ_Current_BUFF.Current_M1, &d, &q);
 8001c8a:	f9b7 33aa 	ldrsh.w	r3, [r7, #938]	; 0x3aa
 8001c8e:	ee07 3a90 	vmov	s15, r3
 8001c92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c96:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8001ee4 <BLDC_main+0xb2c>
 8001c9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c9e:	eddf 6a92 	vldr	s13, [pc, #584]	; 8001ee8 <BLDC_main+0xb30>
 8001ca2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001ca6:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 8001caa:	ee07 3a90 	vmov	s15, r3
 8001cae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cb2:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 8001cb6:	ee06 3a90 	vmov	s13, r3
 8001cba:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001cbe:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 8001cc2:	ee06 3a10 	vmov	s12, r3
 8001cc6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8001cca:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001cce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cd2:	4611      	mov	r1, r2
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	eef0 1a46 	vmov.f32	s3, s12
 8001cda:	eeb0 1a66 	vmov.f32	s2, s13
 8001cde:	eef0 0a67 	vmov.f32	s1, s15
 8001ce2:	eeb0 0a47 	vmov.f32	s0, s14
 8001ce6:	f002 fabb 	bl	8004260 <dq0>
//		IRQ_Current_BUFF.Current_DC = (int32_t)sqrt((d*d + q*q));
		float q_lpf = Update_FIR_filter(q);
 8001cea:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8001cee:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8001cf2:	edd3 7a00 	vldr	s15, [r3]
 8001cf6:	eeb0 0a67 	vmov.f32	s0, s15
 8001cfa:	f7ff f96b 	bl	8000fd4 <Update_FIR_filter>
 8001cfe:	ed87 0ae9 	vstr	s0, [r7, #932]	; 0x3a4
		float d_lpf = Update_FIR_filter2(d);
 8001d02:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8001d06:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 8001d0a:	edd3 7a00 	vldr	s15, [r3]
 8001d0e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d12:	f7ff f9a9 	bl	8001068 <Update_FIR_filter2>
 8001d16:	ed87 0ae8 	vstr	s0, [r7, #928]	; 0x3a0



		Angle_PID.Input = (float)IRQ_Encoders_BUFF.Encoder1_pos + position_overflow*360000.0f + storage->Encoder1_offset*1000.0f;
 8001d1a:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8001d1e:	ee07 3a90 	vmov	s15, r3
 8001d22:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d26:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8001d2a:	ee07 3a90 	vmov	s15, r3
 8001d2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d32:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8001eec <BLDC_main+0xb34>
 8001d36:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001d3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d3e:	4b6c      	ldr	r3, [pc, #432]	; (8001ef0 <BLDC_main+0xb38>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001d46:	eddf 6a6b 	vldr	s13, [pc, #428]	; 8001ef4 <BLDC_main+0xb3c>
 8001d4a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001d4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d52:	4b69      	ldr	r3, [pc, #420]	; (8001ef8 <BLDC_main+0xb40>)
 8001d54:	edc3 7a00 	vstr	s15, [r3]
		Velocity_PID.Input = (float)(IRQ_Encoders_BUFF.Velocity);
 8001d58:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 8001d5c:	ee07 3a90 	vmov	s15, r3
 8001d60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d64:	4b65      	ldr	r3, [pc, #404]	; (8001efc <BLDC_main+0xb44>)
 8001d66:	edc3 7a00 	vstr	s15, [r3]
		Current_PID.Input = q_lpf;
 8001d6a:	4a65      	ldr	r2, [pc, #404]	; (8001f00 <BLDC_main+0xb48>)
 8001d6c:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8001d70:	6013      	str	r3, [r2, #0]


//		Angle_PID.Setpoint = (float)IRQ_STATUS_BUFF.setpoint;
		Angle_PID.Setpoint = 360000;
 8001d72:	4b61      	ldr	r3, [pc, #388]	; (8001ef8 <BLDC_main+0xb40>)
 8001d74:	4a63      	ldr	r2, [pc, #396]	; (8001f04 <BLDC_main+0xb4c>)
 8001d76:	609a      	str	r2, [r3, #8]

		Compute(&Angle_PID);
 8001d78:	485f      	ldr	r0, [pc, #380]	; (8001ef8 <BLDC_main+0xb40>)
 8001d7a:	f001 fce1 	bl	8003740 <Compute>



		Velocity_PID.Setpoint = Angle_PID.Output;
 8001d7e:	4b5e      	ldr	r3, [pc, #376]	; (8001ef8 <BLDC_main+0xb40>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	4a5e      	ldr	r2, [pc, #376]	; (8001efc <BLDC_main+0xb44>)
 8001d84:	6093      	str	r3, [r2, #8]
//		Velocity_PID.Setpoint = -60000.0f;

		Compute(&Velocity_PID);
 8001d86:	485d      	ldr	r0, [pc, #372]	; (8001efc <BLDC_main+0xb44>)
 8001d88:	f001 fcda 	bl	8003740 <Compute>

		#ifndef ZERO_GRAVITY
		Current_PID.Setpoint = Velocity_PID.Output;
 8001d8c:	4b5b      	ldr	r3, [pc, #364]	; (8001efc <BLDC_main+0xb44>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	4a5b      	ldr	r2, [pc, #364]	; (8001f00 <BLDC_main+0xb48>)
 8001d92:	6093      	str	r3, [r2, #8]
//		Current_PID.Setpoint = weight*(fast_sin_2((abs)((float)IRQ_Encoders_BUFF.Encoder1_pos)/1000));
//		if(IRQ_Encoders_BUFF.Encoder1_pos > 180000) direction = -1;
//		else direction = 1;
		#endif

		Compute(&Current_PID);
 8001d94:	485a      	ldr	r0, [pc, #360]	; (8001f00 <BLDC_main+0xb48>)
 8001d96:	f001 fcd3 	bl	8003740 <Compute>


		Current_PID_offset.Setpoint = 0;
 8001d9a:	4b5b      	ldr	r3, [pc, #364]	; (8001f08 <BLDC_main+0xb50>)
 8001d9c:	f04f 0200 	mov.w	r2, #0
 8001da0:	609a      	str	r2, [r3, #8]
		Current_PID_offset.Input = d_lpf;
 8001da2:	4a59      	ldr	r2, [pc, #356]	; (8001f08 <BLDC_main+0xb50>)
 8001da4:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8001da8:	6013      	str	r3, [r2, #0]

		Compute(&Current_PID_offset);
 8001daa:	4857      	ldr	r0, [pc, #348]	; (8001f08 <BLDC_main+0xb50>)
 8001dac:	f001 fcc8 	bl	8003740 <Compute>
		}
		IRQ_Encoders_BUFF.Encoder2_pos = 0;
		#endif


		float V_d = Current_PID_offset.Output;
 8001db0:	4b55      	ldr	r3, [pc, #340]	; (8001f08 <BLDC_main+0xb50>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
		float V_q = Current_PID.Output;
 8001db8:	4b51      	ldr	r3, [pc, #324]	; (8001f00 <BLDC_main+0xb48>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
//		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
		float theta = atan2_approximation2(V_q, V_d)*180.0f/3.14159264f;
 8001dc0:	edd7 0ae7 	vldr	s1, [r7, #924]	; 0x39c
 8001dc4:	ed97 0ae6 	vldr	s0, [r7, #920]	; 0x398
 8001dc8:	f7ff fa5a 	bl	8001280 <atan2_approximation2>
 8001dcc:	eef0 7a40 	vmov.f32	s15, s0
 8001dd0:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8001ee8 <BLDC_main+0xb30>
 8001dd4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001dd8:	eddf 6a42 	vldr	s13, [pc, #264]	; 8001ee4 <BLDC_main+0xb2c>
 8001ddc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001de0:	edc7 7ae5 	vstr	s15, [r7, #916]	; 0x394
//		float theta = atan2(V_q, V_d)*180/3.14159264f;
//		uint32_t mag = (uint32_t)(sqrt(V_q*V_q+V_d*V_d));
		uint32_t mag = sqrtI((uint32_t)(V_q*V_q+V_d*V_d));
 8001de4:	edd7 7ae6 	vldr	s15, [r7, #920]	; 0x398
 8001de8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001dec:	edd7 7ae7 	vldr	s15, [r7, #924]	; 0x39c
 8001df0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001df4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001df8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dfc:	ee17 0a90 	vmov	r0, s15
 8001e00:	f7ff fa07 	bl	8001212 <sqrtI>
 8001e04:	f8c7 03b8 	str.w	r0, [r7, #952]	; 0x3b8
		mag *= 0.7;
 8001e08:	f8d7 03b8 	ldr.w	r0, [r7, #952]	; 0x3b8
 8001e0c:	f7fe fba2 	bl	8000554 <__aeabi_ui2d>
 8001e10:	a32d      	add	r3, pc, #180	; (adr r3, 8001ec8 <BLDC_main+0xb10>)
 8001e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e16:	f7fe fc17 	bl	8000648 <__aeabi_dmul>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	4610      	mov	r0, r2
 8001e20:	4619      	mov	r1, r3
 8001e22:	f7fe fee9 	bl	8000bf8 <__aeabi_d2uiz>
 8001e26:	4603      	mov	r3, r0
 8001e28:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
		if (mag > 1499)mag = 1499;
 8001e2c:	f8d7 33b8 	ldr.w	r3, [r7, #952]	; 0x3b8
 8001e30:	f240 52db 	movw	r2, #1499	; 0x5db
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d903      	bls.n	8001e40 <BLDC_main+0xa88>
 8001e38:	f240 53db 	movw	r3, #1499	; 0x5db
 8001e3c:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8

//		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
		if(error){
 8001e40:	4b32      	ldr	r3, [pc, #200]	; (8001f0c <BLDC_main+0xb54>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d005      	beq.n	8001e54 <BLDC_main+0xa9c>
			Status = BLDC_ERROR;
 8001e48:	2304      	movs	r3, #4
 8001e4a:	f887 33d7 	strb.w	r3, [r7, #983]	; 0x3d7
			shutoff();
 8001e4e:	f000 fc25 	bl	800269c <shutoff>
 8001e52:	e0d3      	b.n	8001ffc <BLDC_main+0xc44>
		}
		else if (Status == BLDC_STOPPED_AND_SHUTDOWN){
 8001e54:	f897 33d7 	ldrb.w	r3, [r7, #983]	; 0x3d7
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d104      	bne.n	8001e66 <BLDC_main+0xaae>
			shutoff();
 8001e5c:	f000 fc1e 	bl	800269c <shutoff>
			shutdown();
 8001e60:	f000 fc2e 	bl	80026c0 <shutdown>
 8001e64:	e0ca      	b.n	8001ffc <BLDC_main+0xc44>
		}
		else if (Status == BLDC_STOPPED_WITH_BREAK){
 8001e66:	f897 33d7 	ldrb.w	r3, [r7, #983]	; 0x3d7
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d152      	bne.n	8001f14 <BLDC_main+0xb5c>
//			shutoff();
			inverter(mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, 0)+error_pos + (int32_t)electrical_offset + (int32_t)theta + 360*2, mag, PHASE_ORDER);
 8001e6e:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8001e72:	2100      	movs	r1, #0
 8001e74:	4618      	mov	r0, r3
 8001e76:	f000 f9e9 	bl	800224c <mech_to_el_deg>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	4413      	add	r3, r2
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	4b15      	ldr	r3, [pc, #84]	; (8001ee0 <BLDC_main+0xb28>)
 8001e8a:	edd3 7a00 	vldr	s15, [r3]
 8001e8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e92:	ee17 3a90 	vmov	r3, s15
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	4413      	add	r3, r2
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	edd7 7ae5 	vldr	s15, [r7, #916]	; 0x394
 8001ea0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ea4:	ee17 3a90 	vmov	r3, s15
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	4413      	add	r3, r2
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	b21b      	sxth	r3, r3
 8001eb6:	f8d7 23b8 	ldr.w	r2, [r7, #952]	; 0x3b8
 8001eba:	b291      	uxth	r1, r2
 8001ebc:	4a14      	ldr	r2, [pc, #80]	; (8001f10 <BLDC_main+0xb58>)
 8001ebe:	7812      	ldrb	r2, [r2, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f000 fa97 	bl	80023f4 <inverter>
 8001ec6:	e099      	b.n	8001ffc <BLDC_main+0xc44>
 8001ec8:	66666666 	.word	0x66666666
 8001ecc:	3fe66666 	.word	0x3fe66666
 8001ed0:	10624dd3 	.word	0x10624dd3
 8001ed4:	b60b60b7 	.word	0xb60b60b7
 8001ed8:	78787879 	.word	0x78787879
 8001edc:	20000ad4 	.word	0x20000ad4
 8001ee0:	20000f18 	.word	0x20000f18
 8001ee4:	40490fdb 	.word	0x40490fdb
 8001ee8:	43340000 	.word	0x43340000
 8001eec:	48afc800 	.word	0x48afc800
 8001ef0:	20000acc 	.word	0x20000acc
 8001ef4:	447a0000 	.word	0x447a0000
 8001ef8:	20000a8c 	.word	0x20000a8c
 8001efc:	20000a4c 	.word	0x20000a4c
 8001f00:	20000a0c 	.word	0x20000a0c
 8001f04:	48afc800 	.word	0x48afc800
 8001f08:	200009cc 	.word	0x200009cc
 8001f0c:	20000780 	.word	0x20000780
 8001f10:	20000f14 	.word	0x20000f14
			}
		else if (Status == BLDC_RUNNING){
 8001f14:	f897 33d7 	ldrb.w	r3, [r7, #983]	; 0x3d7
 8001f18:	2b03      	cmp	r3, #3
 8001f1a:	d12c      	bne.n	8001f76 <BLDC_main+0xbbe>
			inverter(mech_to_el_deg(IRQ_Encoders_BUFF.Encoder1_pos, 0)+error_pos + (int32_t)electrical_offset + (int32_t)theta + 360*2, mag, PHASE_ORDER);
 8001f1c:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8001f20:	2100      	movs	r1, #0
 8001f22:	4618      	mov	r0, r3
 8001f24:	f000 f992 	bl	800224c <mech_to_el_deg>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	4413      	add	r3, r2
 8001f34:	b29a      	uxth	r2, r3
 8001f36:	4bb1      	ldr	r3, [pc, #708]	; (80021fc <BLDC_main+0xe44>)
 8001f38:	edd3 7a00 	vldr	s15, [r3]
 8001f3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f40:	ee17 3a90 	vmov	r3, s15
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	4413      	add	r3, r2
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	edd7 7ae5 	vldr	s15, [r7, #916]	; 0x394
 8001f4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f52:	ee17 3a90 	vmov	r3, s15
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	4413      	add	r3, r2
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	b21b      	sxth	r3, r3
 8001f64:	f8d7 23b8 	ldr.w	r2, [r7, #952]	; 0x3b8
 8001f68:	b291      	uxth	r1, r2
 8001f6a:	4aa5      	ldr	r2, [pc, #660]	; (8002200 <BLDC_main+0xe48>)
 8001f6c:	7812      	ldrb	r2, [r2, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f000 fa40 	bl	80023f4 <inverter>
 8001f74:	e042      	b.n	8001ffc <BLDC_main+0xc44>
		}
		else if (Status == BLDC_CALIBRATING_ENCODER){
 8001f76:	f897 33d7 	ldrb.w	r3, [r7, #983]	; 0x3d7
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d13e      	bne.n	8001ffc <BLDC_main+0xc44>
			HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
 8001f7e:	2201      	movs	r2, #1
 8001f80:	2140      	movs	r1, #64	; 0x40
 8001f82:	48a0      	ldr	r0, [pc, #640]	; (8002204 <BLDC_main+0xe4c>)
 8001f84:	f005 fba4 	bl	80076d0 <HAL_GPIO_WritePin>
			order_phases(&IRQ_Encoders, &IRQ_Current);
 8001f88:	499f      	ldr	r1, [pc, #636]	; (8002208 <BLDC_main+0xe50>)
 8001f8a:	48a0      	ldr	r0, [pc, #640]	; (800220c <BLDC_main+0xe54>)
 8001f8c:	f000 fbba 	bl	8002704 <order_phases>
			calibrate(&IRQ_Encoders, &IRQ_Current);
 8001f90:	499d      	ldr	r1, [pc, #628]	; (8002208 <BLDC_main+0xe50>)
 8001f92:	489e      	ldr	r0, [pc, #632]	; (800220c <BLDC_main+0xe54>)
 8001f94:	f000 fd2c 	bl	80029f0 <calibrate>


			//start calibration
			storage->mech_offset = (int16_t)(IRQ_Encoders.Encoder1_pos/1000)%360;
 8001f98:	4b9c      	ldr	r3, [pc, #624]	; (800220c <BLDC_main+0xe54>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a9c      	ldr	r2, [pc, #624]	; (8002210 <BLDC_main+0xe58>)
 8001f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa2:	099b      	lsrs	r3, r3, #6
 8001fa4:	b21b      	sxth	r3, r3
 8001fa6:	4a9b      	ldr	r2, [pc, #620]	; (8002214 <BLDC_main+0xe5c>)
 8001fa8:	fb82 1203 	smull	r1, r2, r2, r3
 8001fac:	441a      	add	r2, r3
 8001fae:	1211      	asrs	r1, r2, #8
 8001fb0:	17da      	asrs	r2, r3, #31
 8001fb2:	1a8a      	subs	r2, r1, r2
 8001fb4:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001fb8:	fb01 f202 	mul.w	r2, r1, r2
 8001fbc:	1a9b      	subs	r3, r3, r2
 8001fbe:	b21a      	sxth	r2, r3
 8001fc0:	4b95      	ldr	r3, [pc, #596]	; (8002218 <BLDC_main+0xe60>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	b292      	uxth	r2, r2
 8001fc6:	f8a3 24a8 	strh.w	r2, [r3, #1192]	; 0x4a8
			storage->electrical_offset = electrical_offset;
 8001fca:	4b93      	ldr	r3, [pc, #588]	; (8002218 <BLDC_main+0xe60>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a8b      	ldr	r2, [pc, #556]	; (80021fc <BLDC_main+0xe44>)
 8001fd0:	6812      	ldr	r2, [r2, #0]
 8001fd2:	665a      	str	r2, [r3, #100]	; 0x64
			storage->PHASE_ORDER = PHASE_ORDER;
 8001fd4:	4b90      	ldr	r3, [pc, #576]	; (8002218 <BLDC_main+0xe60>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a89      	ldr	r2, [pc, #548]	; (8002200 <BLDC_main+0xe48>)
 8001fda:	7812      	ldrb	r2, [r2, #0]
 8001fdc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			memcpy(storage->error_filt,error_filt,sizeof(error_filt));
 8001fe0:	4b8d      	ldr	r3, [pc, #564]	; (8002218 <BLDC_main+0xe60>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	3368      	adds	r3, #104	; 0x68
 8001fe6:	f44f 6288 	mov.w	r2, #1088	; 0x440
 8001fea:	498c      	ldr	r1, [pc, #560]	; (800221c <BLDC_main+0xe64>)
 8001fec:	4618      	mov	r0, r3
 8001fee:	f009 fa3a 	bl	800b466 <memcpy>
			Flash_save();
 8001ff2:	f001 fb8f 	bl	8003714 <Flash_save>
			Status = BLDC_STOPPED_WITH_BREAK;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	f887 33d7 	strb.w	r3, [r7, #983]	; 0x3d7
		#ifdef RUNNING_LED_DEBUG
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
		#endif

		if(timing_CAN_feedback >= LOOP_FREQ_KHZ*5){ //every 5ms
 8001ffc:	4b88      	ldr	r3, [pc, #544]	; (8002220 <BLDC_main+0xe68>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2b95      	cmp	r3, #149	; 0x95
 8002002:	f240 80b3 	bls.w	800216c <BLDC_main+0xdb4>
			timing_CAN_feedback = 0;
 8002006:	4b86      	ldr	r3, [pc, #536]	; (8002220 <BLDC_main+0xe68>)
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
			Feedback.Status_warning = warning;
 800200c:	4a85      	ldr	r2, [pc, #532]	; (8002224 <BLDC_main+0xe6c>)
 800200e:	f8d7 33c0 	ldr.w	r3, [r7, #960]	; 0x3c0
 8002012:	6053      	str	r3, [r2, #4]
			Feedback.Status_faults = error;
 8002014:	4b84      	ldr	r3, [pc, #528]	; (8002228 <BLDC_main+0xe70>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a82      	ldr	r2, [pc, #520]	; (8002224 <BLDC_main+0xe6c>)
 800201a:	6093      	str	r3, [r2, #8]
			Feedback.Status_setpoint = IRQ_STATUS_BUFF.setpoint;
 800201c:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 8002020:	4a80      	ldr	r2, [pc, #512]	; (8002224 <BLDC_main+0xe6c>)
 8002022:	60d3      	str	r3, [r2, #12]
			Feedback.Status_mode = Status;
 8002024:	f897 33d7 	ldrb.w	r3, [r7, #983]	; 0x3d7
 8002028:	4a7e      	ldr	r2, [pc, #504]	; (8002224 <BLDC_main+0xe6c>)
 800202a:	6013      	str	r3, [r2, #0]

			Feedback.Current_DC = IRQ_Current_BUFF.Current_DC;
 800202c:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8002030:	461a      	mov	r2, r3
 8002032:	4b7c      	ldr	r3, [pc, #496]	; (8002224 <BLDC_main+0xe6c>)
 8002034:	62da      	str	r2, [r3, #44]	; 0x2c
			Feedback.Current_M1 = IRQ_Current_BUFF.Current_M1;
 8002036:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 800203a:	4a7a      	ldr	r2, [pc, #488]	; (8002224 <BLDC_main+0xe6c>)
 800203c:	6213      	str	r3, [r2, #32]
			Feedback.Current_M2 = IRQ_Current_BUFF.Current_M2;
 800203e:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 8002042:	4a78      	ldr	r2, [pc, #480]	; (8002224 <BLDC_main+0xe6c>)
 8002044:	6253      	str	r3, [r2, #36]	; 0x24
			Feedback.Current_M3 = IRQ_Current_BUFF.Current_M3;
 8002046:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 800204a:	4a76      	ldr	r2, [pc, #472]	; (8002224 <BLDC_main+0xe6c>)
 800204c:	6293      	str	r3, [r2, #40]	; 0x28

			Feedback.Voltage_AUX = IRQ_Voltage_Temp_BUFF.V_aux;
 800204e:	f8b7 337c 	ldrh.w	r3, [r7, #892]	; 0x37c
 8002052:	461a      	mov	r2, r3
 8002054:	4b73      	ldr	r3, [pc, #460]	; (8002224 <BLDC_main+0xe6c>)
 8002056:	63da      	str	r2, [r3, #60]	; 0x3c
			Feedback.Voltage_BAT = IRQ_Voltage_Temp_BUFF.V_Bat;
 8002058:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 800205c:	4a71      	ldr	r2, [pc, #452]	; (8002224 <BLDC_main+0xe6c>)
 800205e:	6393      	str	r3, [r2, #56]	; 0x38
			Feedback.Temp_NTC1 = IRQ_Voltage_Temp_BUFF.Temp_NTC1;
 8002060:	f9b7 237e 	ldrsh.w	r2, [r7, #894]	; 0x37e
 8002064:	4b6f      	ldr	r3, [pc, #444]	; (8002224 <BLDC_main+0xe6c>)
 8002066:	861a      	strh	r2, [r3, #48]	; 0x30
			Feedback.Temp_NTC2 = IRQ_Voltage_Temp_BUFF.Temp_NTC2;
 8002068:	f9b7 2380 	ldrsh.w	r2, [r7, #896]	; 0x380
 800206c:	4b6d      	ldr	r3, [pc, #436]	; (8002224 <BLDC_main+0xe6c>)
 800206e:	865a      	strh	r2, [r3, #50]	; 0x32
			Feedback.Temp_ENCODER1 = IRQ_Encoders_BUFF.Encoder1_temp_x10;
 8002070:	f9b7 2374 	ldrsh.w	r2, [r7, #884]	; 0x374
 8002074:	4b6b      	ldr	r3, [pc, #428]	; (8002224 <BLDC_main+0xe6c>)
 8002076:	869a      	strh	r2, [r3, #52]	; 0x34
			Feedback.Temp_ENCODER2 = IRQ_Encoders_BUFF.Encoder2_temp_x10;
 8002078:	f9b7 2376 	ldrsh.w	r2, [r7, #886]	; 0x376
 800207c:	4b69      	ldr	r3, [pc, #420]	; (8002224 <BLDC_main+0xe6c>)
 800207e:	86da      	strh	r2, [r3, #54]	; 0x36

			Feedback.Position_Encoder1_pos = IRQ_Encoders_BUFF.Encoder1_pos;
 8002080:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8002084:	4a67      	ldr	r2, [pc, #412]	; (8002224 <BLDC_main+0xe6c>)
 8002086:	6113      	str	r3, [r2, #16]
			Feedback.Position_Encoder2_pos = IRQ_Encoders_BUFF.Encoder2_pos;
 8002088:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 800208c:	4a65      	ldr	r2, [pc, #404]	; (8002224 <BLDC_main+0xe6c>)
 800208e:	6153      	str	r3, [r2, #20]
//			Feedback.Position_Calculated_pos = IRQ_Encoders_BUFF.Calculated_pos;
			Feedback.Position_Calculated_pos = Angle_PID.Input;
 8002090:	4b66      	ldr	r3, [pc, #408]	; (800222c <BLDC_main+0xe74>)
 8002092:	edd3 7a00 	vldr	s15, [r3]
 8002096:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800209a:	ee17 2a90 	vmov	r2, s15
 800209e:	4b61      	ldr	r3, [pc, #388]	; (8002224 <BLDC_main+0xe6c>)
 80020a0:	619a      	str	r2, [r3, #24]
			Feedback.Position_Velocity = IRQ_Encoders_BUFF.Velocity;
 80020a2:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 80020a6:	4a5f      	ldr	r2, [pc, #380]	; (8002224 <BLDC_main+0xe6c>)
 80020a8:	61d3      	str	r3, [r2, #28]
//			Feedback.Position_Velocity = (int32_t)velocity;
			FDCAN_sendData(&hfdcan1, (CAN_FEEDBACK_ID << 8) 	| (CAN_DEVICE_ID << 4) | (CAN_BLDC_ID << 0), (uint8_t*)&Feedback);
 80020aa:	4a5e      	ldr	r2, [pc, #376]	; (8002224 <BLDC_main+0xe6c>)
 80020ac:	f240 4136 	movw	r1, #1078	; 0x436
 80020b0:	485f      	ldr	r0, [pc, #380]	; (8002230 <BLDC_main+0xe78>)
 80020b2:	f002 f9d3 	bl	800445c <FDCAN_sendData>

			//-----------------PRINTF DEBUGGING-------------------
			//will print same info as on CAN-BUS
			#ifdef PRINT_DEBUG
			PrintServerPrintf(
 80020b6:	4b5b      	ldr	r3, [pc, #364]	; (8002224 <BLDC_main+0xe6c>)
 80020b8:	6a1e      	ldr	r6, [r3, #32]
 80020ba:	4b5a      	ldr	r3, [pc, #360]	; (8002224 <BLDC_main+0xe6c>)
 80020bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020be:	61fb      	str	r3, [r7, #28]
 80020c0:	4b58      	ldr	r3, [pc, #352]	; (8002224 <BLDC_main+0xe6c>)
 80020c2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80020c4:	61b9      	str	r1, [r7, #24]
 80020c6:	4b57      	ldr	r3, [pc, #348]	; (8002224 <BLDC_main+0xe6c>)
 80020c8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
					#ifdef Position_debug
					"POSITION[EN1:%7d EN2:%7d CALC:%7i VELOCITY:%7i]"
					#endif
					"\r\n"
					#ifdef Current_debug
					, Feedback.Current_M1,  Feedback.Current_M2, Feedback.Current_M3, Feedback.Current_DC, (int32_t)Current_PID.Output, (int16_t)d_lpf, (int16_t)q_lpf, (int16_t)theta , (int16_t)Current_PID_offset.Output // test
 80020ca:	4b5a      	ldr	r3, [pc, #360]	; (8002234 <BLDC_main+0xe7c>)
 80020cc:	edd3 7a01 	vldr	s15, [r3, #4]
			PrintServerPrintf(
 80020d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020d4:	edc7 7a05 	vstr	s15, [r7, #20]
					, Feedback.Current_M1,  Feedback.Current_M2, Feedback.Current_M3, Feedback.Current_DC, (int32_t)Current_PID.Output, (int16_t)d_lpf, (int16_t)q_lpf, (int16_t)theta , (int16_t)Current_PID_offset.Output // test
 80020d8:	edd7 7ae8 	vldr	s15, [r7, #928]	; 0x3a0
 80020dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020e0:	ee17 3a90 	vmov	r3, s15
 80020e4:	b21b      	sxth	r3, r3
			PrintServerPrintf(
 80020e6:	613b      	str	r3, [r7, #16]
					, Feedback.Current_M1,  Feedback.Current_M2, Feedback.Current_M3, Feedback.Current_DC, (int32_t)Current_PID.Output, (int16_t)d_lpf, (int16_t)q_lpf, (int16_t)theta , (int16_t)Current_PID_offset.Output // test
 80020e8:	edd7 7ae9 	vldr	s15, [r7, #932]	; 0x3a4
 80020ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020f0:	ee17 3a90 	vmov	r3, s15
 80020f4:	b21b      	sxth	r3, r3
			PrintServerPrintf(
 80020f6:	60fb      	str	r3, [r7, #12]
					, Feedback.Current_M1,  Feedback.Current_M2, Feedback.Current_M3, Feedback.Current_DC, (int32_t)Current_PID.Output, (int16_t)d_lpf, (int16_t)q_lpf, (int16_t)theta , (int16_t)Current_PID_offset.Output // test
 80020f8:	edd7 7ae5 	vldr	s15, [r7, #916]	; 0x394
 80020fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002100:	ee17 3a90 	vmov	r3, s15
 8002104:	b21b      	sxth	r3, r3
			PrintServerPrintf(
 8002106:	60bb      	str	r3, [r7, #8]
					, Feedback.Current_M1,  Feedback.Current_M2, Feedback.Current_M3, Feedback.Current_DC, (int32_t)Current_PID.Output, (int16_t)d_lpf, (int16_t)q_lpf, (int16_t)theta , (int16_t)Current_PID_offset.Output // test
 8002108:	4b4b      	ldr	r3, [pc, #300]	; (8002238 <BLDC_main+0xe80>)
 800210a:	edd3 7a01 	vldr	s15, [r3, #4]
 800210e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002112:	ee17 3a90 	vmov	r3, s15
 8002116:	b21b      	sxth	r3, r3
			PrintServerPrintf(
 8002118:	607b      	str	r3, [r7, #4]
 800211a:	4b42      	ldr	r3, [pc, #264]	; (8002224 <BLDC_main+0xe6c>)
 800211c:	691c      	ldr	r4, [r3, #16]
					#endif
					#ifdef Status_debug
					, status_sting[Feedback.Status_mode], Feedback.Status_setpoint, Feedback.Status_warning, Feedback.Status_faults
						#endif
					#ifdef Position_debug
					, Feedback.Position_Encoder1_pos, (int32_t)Velocity_PID.Input, Feedback.Position_Calculated_pos, Feedback.Position_Velocity/1000
 800211e:	4b47      	ldr	r3, [pc, #284]	; (800223c <BLDC_main+0xe84>)
 8002120:	edd3 7a00 	vldr	s15, [r3]
			PrintServerPrintf(
 8002124:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002128:	edc7 7a00 	vstr	s15, [r7]
 800212c:	4b3d      	ldr	r3, [pc, #244]	; (8002224 <BLDC_main+0xe6c>)
 800212e:	699d      	ldr	r5, [r3, #24]
					, Feedback.Position_Encoder1_pos, (int32_t)Velocity_PID.Input, Feedback.Position_Calculated_pos, Feedback.Position_Velocity/1000
 8002130:	4b3c      	ldr	r3, [pc, #240]	; (8002224 <BLDC_main+0xe6c>)
 8002132:	69d9      	ldr	r1, [r3, #28]
			PrintServerPrintf(
 8002134:	4b36      	ldr	r3, [pc, #216]	; (8002210 <BLDC_main+0xe58>)
 8002136:	fb83 2301 	smull	r2, r3, r3, r1
 800213a:	119a      	asrs	r2, r3, #6
 800213c:	17cb      	asrs	r3, r1, #31
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	9309      	str	r3, [sp, #36]	; 0x24
 8002142:	9508      	str	r5, [sp, #32]
 8002144:	683d      	ldr	r5, [r7, #0]
 8002146:	9507      	str	r5, [sp, #28]
 8002148:	9406      	str	r4, [sp, #24]
 800214a:	687c      	ldr	r4, [r7, #4]
 800214c:	9405      	str	r4, [sp, #20]
 800214e:	68bc      	ldr	r4, [r7, #8]
 8002150:	9404      	str	r4, [sp, #16]
 8002152:	68fc      	ldr	r4, [r7, #12]
 8002154:	9403      	str	r4, [sp, #12]
 8002156:	693c      	ldr	r4, [r7, #16]
 8002158:	9402      	str	r4, [sp, #8]
 800215a:	697c      	ldr	r4, [r7, #20]
 800215c:	9401      	str	r4, [sp, #4]
 800215e:	9000      	str	r0, [sp, #0]
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	69fa      	ldr	r2, [r7, #28]
 8002164:	4631      	mov	r1, r6
 8002166:	4836      	ldr	r0, [pc, #216]	; (8002240 <BLDC_main+0xe88>)
 8002168:	f001 fd48 	bl	8003bfc <PrintServerPrintf>
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 1);
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
		#endif

		//----------------set status LEDs---------------------
		if(error)HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 1);
 800216c:	4b2e      	ldr	r3, [pc, #184]	; (8002228 <BLDC_main+0xe70>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d007      	beq.n	8002184 <BLDC_main+0xdcc>
 8002174:	2201      	movs	r2, #1
 8002176:	f44f 7100 	mov.w	r1, #512	; 0x200
 800217a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800217e:	f005 faa7 	bl	80076d0 <HAL_GPIO_WritePin>
 8002182:	e006      	b.n	8002192 <BLDC_main+0xdda>
		else HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 0);
 8002184:	2200      	movs	r2, #0
 8002186:	f44f 7100 	mov.w	r1, #512	; 0x200
 800218a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800218e:	f005 fa9f 	bl	80076d0 <HAL_GPIO_WritePin>
		if(warning)HAL_GPIO_WritePin(WARNING_LED_GPIO_Port, WARNING_LED_Pin, 1);
 8002192:	f8d7 33c0 	ldr.w	r3, [r7, #960]	; 0x3c0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d005      	beq.n	80021a6 <BLDC_main+0xdee>
 800219a:	2201      	movs	r2, #1
 800219c:	2180      	movs	r1, #128	; 0x80
 800219e:	4819      	ldr	r0, [pc, #100]	; (8002204 <BLDC_main+0xe4c>)
 80021a0:	f005 fa96 	bl	80076d0 <HAL_GPIO_WritePin>
 80021a4:	e004      	b.n	80021b0 <BLDC_main+0xdf8>
		else HAL_GPIO_WritePin(WARNING_LED_GPIO_Port, WARNING_LED_Pin, 0);
 80021a6:	2200      	movs	r2, #0
 80021a8:	2180      	movs	r1, #128	; 0x80
 80021aa:	4816      	ldr	r0, [pc, #88]	; (8002204 <BLDC_main+0xe4c>)
 80021ac:	f005 fa90 	bl	80076d0 <HAL_GPIO_WritePin>

		#ifndef RUNNING_LED_DEBUG
		#ifndef RUNNING_LED_DEBUG2
		if(running_LED_timing >= LOOP_FREQ_KHZ*100){
 80021b0:	4b24      	ldr	r3, [pc, #144]	; (8002244 <BLDC_main+0xe8c>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d906      	bls.n	80021ca <BLDC_main+0xe12>
			running_LED_timing = 0;
 80021bc:	4b21      	ldr	r3, [pc, #132]	; (8002244 <BLDC_main+0xe8c>)
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin);
 80021c2:	2140      	movs	r1, #64	; 0x40
 80021c4:	480f      	ldr	r0, [pc, #60]	; (8002204 <BLDC_main+0xe4c>)
 80021c6:	f005 fa88 	bl	80076da <HAL_GPIO_TogglePin>
		//-----------------update dac---------------------------
		#ifdef DAC_DEBUG
//		dac_value(Velocity_PID.Output);
//		dac_value(test/3);
//		dac_value((uint32_t)abs(IRQ_Encoders_BUFF.Velocity/1000)+1500);
		dac_value(q/10 +1500);
 80021ca:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80021ce:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 80021d2:	ed93 7a00 	vldr	s14, [r3]
 80021d6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80021da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021de:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002248 <BLDC_main+0xe90>
 80021e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80021e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021ea:	ee17 3a90 	vmov	r3, s15
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	4618      	mov	r0, r3
 80021f2:	f001 fd29 	bl	8003c48 <dac_value>
	while(1){
 80021f6:	f7ff ba99 	b.w	800172c <BLDC_main+0x374>
 80021fa:	bf00      	nop
 80021fc:	20000f18 	.word	0x20000f18
 8002200:	20000f14 	.word	0x20000f14
 8002204:	48000800 	.word	0x48000800
 8002208:	20000784 	.word	0x20000784
 800220c:	200007a0 	.word	0x200007a0
 8002210:	10624dd3 	.word	0x10624dd3
 8002214:	b60b60b7 	.word	0xb60b60b7
 8002218:	20000acc 	.word	0x20000acc
 800221c:	20000ad4 	.word	0x20000ad4
 8002220:	20000778 	.word	0x20000778
 8002224:	2000098c 	.word	0x2000098c
 8002228:	20000780 	.word	0x20000780
 800222c:	20000a8c 	.word	0x20000a8c
 8002230:	20001a38 	.word	0x20001a38
 8002234:	20000a0c 	.word	0x20000a0c
 8002238:	200009cc 	.word	0x200009cc
 800223c:	20000a4c 	.word	0x20000a4c
 8002240:	0800f5a0 	.word	0x0800f5a0
 8002244:	2000077c 	.word	0x2000077c
 8002248:	44bb8000 	.word	0x44bb8000

0800224c <mech_to_el_deg>:
		HAL_GPIO_WritePin(RUNNING_LED_GPIO_Port, RUNNING_LED_Pin, 0);
		#endif
	}
}

int16_t mech_to_el_deg(int32_t angle_deg, int32_t offset_deg){
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
	float temp = (float)(angle_deg-offset_deg+360000*2);
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
 8002260:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 8002264:	ee07 3a90 	vmov	s15, r3
 8002268:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800226c:	edc7 7a03 	vstr	s15, [r7, #12]
	while (temp > 360000) temp = temp-360000;
 8002270:	e007      	b.n	8002282 <mech_to_el_deg+0x36>
 8002272:	edd7 7a03 	vldr	s15, [r7, #12]
 8002276:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8002338 <mech_to_el_deg+0xec>
 800227a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800227e:	edc7 7a03 	vstr	s15, [r7, #12]
 8002282:	edd7 7a03 	vldr	s15, [r7, #12]
 8002286:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8002338 <mech_to_el_deg+0xec>
 800228a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800228e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002292:	dcee      	bgt.n	8002272 <mech_to_el_deg+0x26>
	while (temp > (360000/17)) temp = temp-deg_pr_pole;
 8002294:	e007      	b.n	80022a6 <mech_to_el_deg+0x5a>
 8002296:	edd7 7a03 	vldr	s15, [r7, #12]
 800229a:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800233c <mech_to_el_deg+0xf0>
 800229e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80022a2:	edc7 7a03 	vstr	s15, [r7, #12]
 80022a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80022aa:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800233c <mech_to_el_deg+0xf0>
 80022ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022b6:	dcee      	bgt.n	8002296 <mech_to_el_deg+0x4a>
	temp = temp*17/1000;
 80022b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80022bc:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 80022c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022c4:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8002340 <mech_to_el_deg+0xf4>
 80022c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022cc:	edc7 7a03 	vstr	s15, [r7, #12]
	while (temp > 360) temp -= 360;
 80022d0:	e007      	b.n	80022e2 <mech_to_el_deg+0x96>
 80022d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80022d6:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002344 <mech_to_el_deg+0xf8>
 80022da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80022de:	edc7 7a03 	vstr	s15, [r7, #12]
 80022e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80022e6:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002344 <mech_to_el_deg+0xf8>
 80022ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022f2:	dcee      	bgt.n	80022d2 <mech_to_el_deg+0x86>
	if(temp < 0) return 0;
 80022f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80022f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002300:	d501      	bpl.n	8002306 <mech_to_el_deg+0xba>
 8002302:	2300      	movs	r3, #0
 8002304:	e012      	b.n	800232c <mech_to_el_deg+0xe0>
	else if(temp > 360) return 360;
 8002306:	edd7 7a03 	vldr	s15, [r7, #12]
 800230a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002344 <mech_to_el_deg+0xf8>
 800230e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002316:	dd02      	ble.n	800231e <mech_to_el_deg+0xd2>
 8002318:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800231c:	e006      	b.n	800232c <mech_to_el_deg+0xe0>
	else return (int16_t)temp;
 800231e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002322:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002326:	ee17 3a90 	vmov	r3, s15
 800232a:	b21b      	sxth	r3, r3

//	return (int16_t)((((angle_deg)-offset_deg+360000*2)%deg_pr_pole)/(1000/17))%360;
}
 800232c:	4618      	mov	r0, r3
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	48afc800 	.word	0x48afc800
 800233c:	46a57000 	.word	0x46a57000
 8002340:	447a0000 	.word	0x447a0000
 8002344:	43b40000 	.word	0x43b40000

08002348 <CTRL_init_PWM>:
#define duty_max 1499
#define pi 3.1415926535

uint32_t *V_bat = 0;

void CTRL_init_PWM(uint32_t *V_bat_ptr){
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
	V_bat = V_bat_ptr;
 8002350:	4a24      	ldr	r2, [pc, #144]	; (80023e4 <CTRL_init_PWM+0x9c>)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6013      	str	r3, [r2, #0]
	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) Error_Handler(); //error
 8002356:	2100      	movs	r1, #0
 8002358:	4823      	ldr	r0, [pc, #140]	; (80023e8 <CTRL_init_PWM+0xa0>)
 800235a:	f007 f97d 	bl	8009658 <HAL_TIM_PWM_Start>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <CTRL_init_PWM+0x20>
 8002364:	f002 fd09 	bl	8004d7a <Error_Handler>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) Error_Handler(); //error
 8002368:	2100      	movs	r1, #0
 800236a:	481f      	ldr	r0, [pc, #124]	; (80023e8 <CTRL_init_PWM+0xa0>)
 800236c:	f007 faae 	bl	80098cc <HAL_TIMEx_PWMN_Start>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <CTRL_init_PWM+0x32>
 8002376:	f002 fd00 	bl	8004d7a <Error_Handler>

	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK) Error_Handler(); //error
 800237a:	2104      	movs	r1, #4
 800237c:	481a      	ldr	r0, [pc, #104]	; (80023e8 <CTRL_init_PWM+0xa0>)
 800237e:	f007 f96b 	bl	8009658 <HAL_TIM_PWM_Start>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <CTRL_init_PWM+0x44>
 8002388:	f002 fcf7 	bl	8004d7a <Error_Handler>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2) != HAL_OK) Error_Handler(); //error
 800238c:	2104      	movs	r1, #4
 800238e:	4816      	ldr	r0, [pc, #88]	; (80023e8 <CTRL_init_PWM+0xa0>)
 8002390:	f007 fa9c 	bl	80098cc <HAL_TIMEx_PWMN_Start>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <CTRL_init_PWM+0x56>
 800239a:	f002 fcee 	bl	8004d7a <Error_Handler>

	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3) != HAL_OK) Error_Handler(); //error
 800239e:	2108      	movs	r1, #8
 80023a0:	4811      	ldr	r0, [pc, #68]	; (80023e8 <CTRL_init_PWM+0xa0>)
 80023a2:	f007 f959 	bl	8009658 <HAL_TIM_PWM_Start>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <CTRL_init_PWM+0x68>
 80023ac:	f002 fce5 	bl	8004d7a <Error_Handler>
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3) != HAL_OK) Error_Handler(); //error
 80023b0:	2108      	movs	r1, #8
 80023b2:	480d      	ldr	r0, [pc, #52]	; (80023e8 <CTRL_init_PWM+0xa0>)
 80023b4:	f007 fa8a 	bl	80098cc <HAL_TIMEx_PWMN_Start>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <CTRL_init_PWM+0x7a>
 80023be:	f002 fcdc 	bl	8004d7a <Error_Handler>

	TIM1->CCR1 = 0;
 80023c2:	4b0a      	ldr	r3, [pc, #40]	; (80023ec <CTRL_init_PWM+0xa4>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 80023c8:	4b08      	ldr	r3, [pc, #32]	; (80023ec <CTRL_init_PWM+0xa4>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 80023ce:	4b07      	ldr	r3, [pc, #28]	; (80023ec <CTRL_init_PWM+0xa4>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	63da      	str	r2, [r3, #60]	; 0x3c

	HAL_TIM_Base_Start_IT(&htim3);
 80023d4:	4806      	ldr	r0, [pc, #24]	; (80023f0 <CTRL_init_PWM+0xa8>)
 80023d6:	f006 fd11 	bl	8008dfc <HAL_TIM_Base_Start_IT>
}
 80023da:	bf00      	nop
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	20000ad0 	.word	0x20000ad0
 80023e8:	20001d20 	.word	0x20001d20
 80023ec:	40012c00 	.word	0x40012c00
 80023f0:	20001d6c 	.word	0x20001d6c

080023f4 <inverter>:
//sin(θ◦) ≈ 4θ(180 − θ) 40500 − θ(180 − θ);
//float _sin(float deg){
//	return (4*deg*(180-deg)/(40500 - deg*(180-deg)));
//}

void inverter(int16_t angle, uint16_t voltage, uint8_t direction){
 80023f4:	b480      	push	{r7}
 80023f6:	b08b      	sub	sp, #44	; 0x2c
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	4603      	mov	r3, r0
 80023fc:	80fb      	strh	r3, [r7, #6]
 80023fe:	460b      	mov	r3, r1
 8002400:	80bb      	strh	r3, [r7, #4]
 8002402:	4613      	mov	r3, r2
 8002404:	70fb      	strb	r3, [r7, #3]
	angle = (angle+360*2)%360;
 8002406:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800240a:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800240e:	4a9d      	ldr	r2, [pc, #628]	; (8002684 <inverter+0x290>)
 8002410:	fb82 1203 	smull	r1, r2, r2, r3
 8002414:	441a      	add	r2, r3
 8002416:	1211      	asrs	r1, r2, #8
 8002418:	17da      	asrs	r2, r3, #31
 800241a:	1a8a      	subs	r2, r1, r2
 800241c:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8002420:	fb01 f202 	mul.w	r2, r1, r2
 8002424:	1a9a      	subs	r2, r3, r2
 8002426:	4613      	mov	r3, r2
 8002428:	80fb      	strh	r3, [r7, #6]

//	if(V_bat == NULL){
//		shutoff();
//		return;
//	}
	uint16_t duty = voltage; //(voltage * duty_max)/ (*V_bat);
 800242a:	88bb      	ldrh	r3, [r7, #4]
 800242c:	84fb      	strh	r3, [r7, #38]	; 0x26
	if(duty > duty_max)duty = duty_max;
 800242e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002430:	f240 52db 	movw	r2, #1499	; 0x5db
 8002434:	4293      	cmp	r3, r2
 8002436:	d902      	bls.n	800243e <inverter+0x4a>
 8002438:	f240 53db 	movw	r3, #1499	; 0x5db
 800243c:	84fb      	strh	r3, [r7, #38]	; 0x26

	uint32_t compare_M1 = 0;
 800243e:	2300      	movs	r3, #0
 8002440:	623b      	str	r3, [r7, #32]
	uint32_t compare_M2 = 0;
 8002442:	2300      	movs	r3, #0
 8002444:	61fb      	str	r3, [r7, #28]
	uint32_t compare_M3 = 0;
 8002446:	2300      	movs	r3, #0
 8002448:	61bb      	str	r3, [r7, #24]

	float deg = (float)(angle%60);
 800244a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800244e:	4b8e      	ldr	r3, [pc, #568]	; (8002688 <inverter+0x294>)
 8002450:	fb83 1302 	smull	r1, r3, r3, r2
 8002454:	4413      	add	r3, r2
 8002456:	1159      	asrs	r1, r3, #5
 8002458:	17d3      	asrs	r3, r2, #31
 800245a:	1ac9      	subs	r1, r1, r3
 800245c:	460b      	mov	r3, r1
 800245e:	011b      	lsls	r3, r3, #4
 8002460:	1a5b      	subs	r3, r3, r1
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	b21b      	sxth	r3, r3
 8002468:	ee07 3a90 	vmov	s15, r3
 800246c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002470:	edc7 7a05 	vstr	s15, [r7, #20]
	//uint32_t T1 = (uint32_t )(duty_max*duty*((240-4*deg)*(120-deg)/(40500 - (60-deg)*(120-deg))) ); //*pi/180
	uint16_t T1 = (uint16_t)(duty*(float)( 4*(60-deg)*(180-(60-deg))/(40500 - (60-deg)*(180-(60-deg))))); //*pi/180
 8002474:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002476:	ee07 3a90 	vmov	s15, r3
 800247a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800247e:	eddf 6a83 	vldr	s13, [pc, #524]	; 800268c <inverter+0x298>
 8002482:	edd7 7a05 	vldr	s15, [r7, #20]
 8002486:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800248a:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800248e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002492:	ed9f 6a7e 	vldr	s12, [pc, #504]	; 800268c <inverter+0x298>
 8002496:	edd7 7a05 	vldr	s15, [r7, #20]
 800249a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800249e:	ed9f 6a7c 	vldr	s12, [pc, #496]	; 8002690 <inverter+0x29c>
 80024a2:	ee76 7a67 	vsub.f32	s15, s12, s15
 80024a6:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80024aa:	eddf 6a78 	vldr	s13, [pc, #480]	; 800268c <inverter+0x298>
 80024ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80024b2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80024b6:	eddf 5a75 	vldr	s11, [pc, #468]	; 800268c <inverter+0x298>
 80024ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80024be:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80024c2:	eddf 5a73 	vldr	s11, [pc, #460]	; 8002690 <inverter+0x29c>
 80024c6:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80024ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024ce:	eddf 6a71 	vldr	s13, [pc, #452]	; 8002694 <inverter+0x2a0>
 80024d2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80024d6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80024da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024e2:	ee17 3a90 	vmov	r3, s15
 80024e6:	827b      	strh	r3, [r7, #18]
	uint16_t T2 = (uint16_t)(duty*(float)(4*deg*(180-deg)/(40500 - deg*(180-deg))));
 80024e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80024ea:	ee07 3a90 	vmov	s15, r3
 80024ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80024f6:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80024fa:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80024fe:	ed9f 6a64 	vldr	s12, [pc, #400]	; 8002690 <inverter+0x29c>
 8002502:	edd7 7a05 	vldr	s15, [r7, #20]
 8002506:	ee76 7a67 	vsub.f32	s15, s12, s15
 800250a:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800250e:	eddf 6a60 	vldr	s13, [pc, #384]	; 8002690 <inverter+0x29c>
 8002512:	edd7 7a05 	vldr	s15, [r7, #20]
 8002516:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800251a:	edd7 7a05 	vldr	s15, [r7, #20]
 800251e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002522:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8002694 <inverter+0x2a0>
 8002526:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800252a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800252e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002532:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002536:	ee17 3a90 	vmov	r3, s15
 800253a:	823b      	strh	r3, [r7, #16]
	uint16_t T0 = (duty_max-T1-T2)/2;
 800253c:	8a7b      	ldrh	r3, [r7, #18]
 800253e:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8002542:	3303      	adds	r3, #3
 8002544:	8a3a      	ldrh	r2, [r7, #16]
 8002546:	1a9b      	subs	r3, r3, r2
 8002548:	0fda      	lsrs	r2, r3, #31
 800254a:	4413      	add	r3, r2
 800254c:	105b      	asrs	r3, r3, #1
 800254e:	81fb      	strh	r3, [r7, #14]

	if(angle >= 0 && angle < 60){
 8002550:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002554:	2b00      	cmp	r3, #0
 8002556:	db10      	blt.n	800257a <inverter+0x186>
 8002558:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800255c:	2b3b      	cmp	r3, #59	; 0x3b
 800255e:	dc0c      	bgt.n	800257a <inverter+0x186>
		compare_M1 = T0;
 8002560:	89fb      	ldrh	r3, [r7, #14]
 8002562:	623b      	str	r3, [r7, #32]
		compare_M2 = T0+T2;
 8002564:	89fa      	ldrh	r2, [r7, #14]
 8002566:	8a3b      	ldrh	r3, [r7, #16]
 8002568:	4413      	add	r3, r2
 800256a:	61fb      	str	r3, [r7, #28]
		compare_M3 = T0+T1+T2;
 800256c:	89fa      	ldrh	r2, [r7, #14]
 800256e:	8a7b      	ldrh	r3, [r7, #18]
 8002570:	441a      	add	r2, r3
 8002572:	8a3b      	ldrh	r3, [r7, #16]
 8002574:	4413      	add	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
 8002578:	e06a      	b.n	8002650 <inverter+0x25c>
		}
	else if(angle >= 60 && angle < 120){
 800257a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800257e:	2b3b      	cmp	r3, #59	; 0x3b
 8002580:	dd10      	ble.n	80025a4 <inverter+0x1b0>
 8002582:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002586:	2b77      	cmp	r3, #119	; 0x77
 8002588:	dc0c      	bgt.n	80025a4 <inverter+0x1b0>
		compare_M1 = T0;
 800258a:	89fb      	ldrh	r3, [r7, #14]
 800258c:	623b      	str	r3, [r7, #32]
		compare_M2 = T0+T1+T2;
 800258e:	89fa      	ldrh	r2, [r7, #14]
 8002590:	8a7b      	ldrh	r3, [r7, #18]
 8002592:	441a      	add	r2, r3
 8002594:	8a3b      	ldrh	r3, [r7, #16]
 8002596:	4413      	add	r3, r2
 8002598:	61fb      	str	r3, [r7, #28]
		compare_M3 = T0+T1;
 800259a:	89fa      	ldrh	r2, [r7, #14]
 800259c:	8a7b      	ldrh	r3, [r7, #18]
 800259e:	4413      	add	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
 80025a2:	e055      	b.n	8002650 <inverter+0x25c>
		}
	else if(angle >= 120 && angle < 180){
 80025a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025a8:	2b77      	cmp	r3, #119	; 0x77
 80025aa:	dd10      	ble.n	80025ce <inverter+0x1da>
 80025ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025b0:	2bb3      	cmp	r3, #179	; 0xb3
 80025b2:	dc0c      	bgt.n	80025ce <inverter+0x1da>
		compare_M1 = T0+T2;
 80025b4:	89fa      	ldrh	r2, [r7, #14]
 80025b6:	8a3b      	ldrh	r3, [r7, #16]
 80025b8:	4413      	add	r3, r2
 80025ba:	623b      	str	r3, [r7, #32]
		compare_M2 = T0+T1+T2;
 80025bc:	89fa      	ldrh	r2, [r7, #14]
 80025be:	8a7b      	ldrh	r3, [r7, #18]
 80025c0:	441a      	add	r2, r3
 80025c2:	8a3b      	ldrh	r3, [r7, #16]
 80025c4:	4413      	add	r3, r2
 80025c6:	61fb      	str	r3, [r7, #28]
		compare_M3 = T0;
 80025c8:	89fb      	ldrh	r3, [r7, #14]
 80025ca:	61bb      	str	r3, [r7, #24]
 80025cc:	e040      	b.n	8002650 <inverter+0x25c>
		}
	else if(angle >= 180 && angle < 240){
 80025ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025d2:	2bb3      	cmp	r3, #179	; 0xb3
 80025d4:	dd10      	ble.n	80025f8 <inverter+0x204>
 80025d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025da:	2bef      	cmp	r3, #239	; 0xef
 80025dc:	dc0c      	bgt.n	80025f8 <inverter+0x204>
		compare_M1 = T0+T1+T2;
 80025de:	89fa      	ldrh	r2, [r7, #14]
 80025e0:	8a7b      	ldrh	r3, [r7, #18]
 80025e2:	441a      	add	r2, r3
 80025e4:	8a3b      	ldrh	r3, [r7, #16]
 80025e6:	4413      	add	r3, r2
 80025e8:	623b      	str	r3, [r7, #32]
		compare_M2 = T0+T1;
 80025ea:	89fa      	ldrh	r2, [r7, #14]
 80025ec:	8a7b      	ldrh	r3, [r7, #18]
 80025ee:	4413      	add	r3, r2
 80025f0:	61fb      	str	r3, [r7, #28]
		compare_M3 = T0;
 80025f2:	89fb      	ldrh	r3, [r7, #14]
 80025f4:	61bb      	str	r3, [r7, #24]
 80025f6:	e02b      	b.n	8002650 <inverter+0x25c>
		}
	else if(angle >= 240 && angle < 300){
 80025f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025fc:	2bef      	cmp	r3, #239	; 0xef
 80025fe:	dd11      	ble.n	8002624 <inverter+0x230>
 8002600:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002604:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002608:	da0c      	bge.n	8002624 <inverter+0x230>
		compare_M1 = T0+T1+T2;
 800260a:	89fa      	ldrh	r2, [r7, #14]
 800260c:	8a7b      	ldrh	r3, [r7, #18]
 800260e:	441a      	add	r2, r3
 8002610:	8a3b      	ldrh	r3, [r7, #16]
 8002612:	4413      	add	r3, r2
 8002614:	623b      	str	r3, [r7, #32]
		compare_M2 = T0;
 8002616:	89fb      	ldrh	r3, [r7, #14]
 8002618:	61fb      	str	r3, [r7, #28]
		compare_M3 = T0+T2;
 800261a:	89fa      	ldrh	r2, [r7, #14]
 800261c:	8a3b      	ldrh	r3, [r7, #16]
 800261e:	4413      	add	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
 8002622:	e015      	b.n	8002650 <inverter+0x25c>
		}
	else if(angle >= 300 && angle <= 360){
 8002624:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002628:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800262c:	db10      	blt.n	8002650 <inverter+0x25c>
 800262e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002632:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8002636:	dc0b      	bgt.n	8002650 <inverter+0x25c>
		compare_M1 = T0+T1;
 8002638:	89fa      	ldrh	r2, [r7, #14]
 800263a:	8a7b      	ldrh	r3, [r7, #18]
 800263c:	4413      	add	r3, r2
 800263e:	623b      	str	r3, [r7, #32]
		compare_M2 = T0;
 8002640:	89fb      	ldrh	r3, [r7, #14]
 8002642:	61fb      	str	r3, [r7, #28]
		compare_M3 = T0+T1+T2;
 8002644:	89fa      	ldrh	r2, [r7, #14]
 8002646:	8a7b      	ldrh	r3, [r7, #18]
 8002648:	441a      	add	r2, r3
 800264a:	8a3b      	ldrh	r3, [r7, #16]
 800264c:	4413      	add	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]
		}
//	PrintServerPrintf("OK %d %d %d %d\r\n", (uint32_t)(compare_M1), (uint32_t)(compare_M2), (uint32_t)(compare_M3), (int32_t)angle);
	TIM1->CCR1 = compare_M1;
 8002650:	4a11      	ldr	r2, [pc, #68]	; (8002698 <inverter+0x2a4>)
 8002652:	6a3b      	ldr	r3, [r7, #32]
 8002654:	6353      	str	r3, [r2, #52]	; 0x34
	if(direction){
 8002656:	78fb      	ldrb	r3, [r7, #3]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d006      	beq.n	800266a <inverter+0x276>
		TIM1->CCR2 = compare_M3;
 800265c:	4a0e      	ldr	r2, [pc, #56]	; (8002698 <inverter+0x2a4>)
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	6393      	str	r3, [r2, #56]	; 0x38
		TIM1->CCR3 = compare_M2;
 8002662:	4a0d      	ldr	r2, [pc, #52]	; (8002698 <inverter+0x2a4>)
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	63d3      	str	r3, [r2, #60]	; 0x3c
	}


//	dac_value(angle*8+200);

}
 8002668:	e005      	b.n	8002676 <inverter+0x282>
		TIM1->CCR2 = compare_M2;
 800266a:	4a0b      	ldr	r2, [pc, #44]	; (8002698 <inverter+0x2a4>)
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	6393      	str	r3, [r2, #56]	; 0x38
		TIM1->CCR3 = compare_M3;
 8002670:	4a09      	ldr	r2, [pc, #36]	; (8002698 <inverter+0x2a4>)
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8002676:	bf00      	nop
 8002678:	372c      	adds	r7, #44	; 0x2c
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	b60b60b7 	.word	0xb60b60b7
 8002688:	88888889 	.word	0x88888889
 800268c:	42700000 	.word	0x42700000
 8002690:	43340000 	.word	0x43340000
 8002694:	471e3400 	.word	0x471e3400
 8002698:	40012c00 	.word	0x40012c00

0800269c <shutoff>:
void shutoff(void){
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
	TIM1->CCR1 = 0;
 80026a0:	4b06      	ldr	r3, [pc, #24]	; (80026bc <shutoff+0x20>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 80026a6:	4b05      	ldr	r3, [pc, #20]	; (80026bc <shutoff+0x20>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 80026ac:	4b03      	ldr	r3, [pc, #12]	; (80026bc <shutoff+0x20>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80026b2:	bf00      	nop
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	40012c00 	.word	0x40012c00

080026c0 <shutdown>:
void shutdown(void){
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1); //error
 80026c4:	2100      	movs	r1, #0
 80026c6:	480e      	ldr	r0, [pc, #56]	; (8002700 <shutdown+0x40>)
 80026c8:	f007 f890 	bl	80097ec <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1); //error
 80026cc:	2100      	movs	r1, #0
 80026ce:	480c      	ldr	r0, [pc, #48]	; (8002700 <shutdown+0x40>)
 80026d0:	f007 f96a 	bl	80099a8 <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2); //error
 80026d4:	2104      	movs	r1, #4
 80026d6:	480a      	ldr	r0, [pc, #40]	; (8002700 <shutdown+0x40>)
 80026d8:	f007 f888 	bl	80097ec <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2); //error
 80026dc:	2104      	movs	r1, #4
 80026de:	4808      	ldr	r0, [pc, #32]	; (8002700 <shutdown+0x40>)
 80026e0:	f007 f962 	bl	80099a8 <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3); //error
 80026e4:	2108      	movs	r1, #8
 80026e6:	4806      	ldr	r0, [pc, #24]	; (8002700 <shutdown+0x40>)
 80026e8:	f007 f880 	bl	80097ec <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3); //error
 80026ec:	2108      	movs	r1, #8
 80026ee:	4804      	ldr	r0, [pc, #16]	; (8002700 <shutdown+0x40>)
 80026f0:	f007 f95a 	bl	80099a8 <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_Base_Stop(&htim1);
 80026f4:	4802      	ldr	r0, [pc, #8]	; (8002700 <shutdown+0x40>)
 80026f6:	f006 fb6d 	bl	8008dd4 <HAL_TIM_Base_Stop>
}
 80026fa:	bf00      	nop
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20001d20 	.word	0x20001d20

08002704 <order_phases>:
float electrical_offset = 0;
float pi = 3.14159265f;

uint32_t motor_lut[LUT_SIZE];

void order_phases(Encoders *ps, Current *cs){ //, GPIOStruct *gpio, ControllerStruct *controller, PreferenceWriter *prefs
 8002704:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002708:	b090      	sub	sp, #64	; 0x40
 800270a:	af04      	add	r7, sp, #16
 800270c:	6078      	str	r0, [r7, #4]
 800270e:	6039      	str	r1, [r7, #0]

    ///Checks phase order, to ensure that positive Q current produces
    ///torque in the positive direction wrt the position sensor.
	PrintServerPrintf("\n\r Checking phase ordering\n\r");
 8002710:	48a8      	ldr	r0, [pc, #672]	; (80029b4 <order_phases+0x2b0>)
 8002712:	f001 fa73 	bl	8003bfc <PrintServerPrintf>
    float theta_ref = 0;
 8002716:	f04f 0300 	mov.w	r3, #0
 800271a:	62fb      	str	r3, [r7, #44]	; 0x2c
    float theta_actual = 0;
 800271c:	f04f 0300 	mov.w	r3, #0
 8002720:	61fb      	str	r3, [r7, #28]
    int sample_counter = 0;
 8002722:	2300      	movs	r3, #0
 8002724:	62bb      	str	r3, [r7, #40]	; 0x28

    float d;
    float q;

    PHASE_ORDER = 0;
 8002726:	4ba4      	ldr	r3, [pc, #656]	; (80029b8 <order_phases+0x2b4>)
 8002728:	2200      	movs	r2, #0
 800272a:	701a      	strb	r2, [r3, #0]

    ///Set voltage angle to zero, wait for rotor position to settle
    inverter((int16_t)theta_ref, CAL_DUTY, PHASE_ORDER);
 800272c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002730:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002734:	ee17 3a90 	vmov	r3, s15
 8002738:	b21b      	sxth	r3, r3
 800273a:	4a9f      	ldr	r2, [pc, #636]	; (80029b8 <order_phases+0x2b4>)
 800273c:	7812      	ldrb	r2, [r2, #0]
 800273e:	2164      	movs	r1, #100	; 0x64
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff fe57 	bl	80023f4 <inverter>
    HAL_Delay(1000);
 8002746:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800274a:	f002 ff99 	bl	8005680 <HAL_Delay>
    //float theta_start = ps->GetMechPositionFixed();                                  //get initial rotor position
    float theta_start;

    //current d and q
    dq0(theta_ref*pi/180, (float)cs->Current_M1/1000, (float)cs->Current_M2/1000, (float)cs->Current_M3/1000, &d, &q);
 800274e:	4b9b      	ldr	r3, [pc, #620]	; (80029bc <order_phases+0x2b8>)
 8002750:	ed93 7a00 	vldr	s14, [r3]
 8002754:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002758:	ee67 7a27 	vmul.f32	s15, s14, s15
 800275c:	eddf 6a98 	vldr	s13, [pc, #608]	; 80029c0 <order_phases+0x2bc>
 8002760:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	ee07 3a90 	vmov	s15, r3
 800276c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002770:	ed9f 6a94 	vldr	s12, [pc, #592]	; 80029c4 <order_phases+0x2c0>
 8002774:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	ee07 3a90 	vmov	s15, r3
 8002780:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002784:	eddf 5a8f 	vldr	s11, [pc, #572]	; 80029c4 <order_phases+0x2c0>
 8002788:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	ee07 3a90 	vmov	s15, r3
 8002794:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002798:	ed9f 5a8a 	vldr	s10, [pc, #552]	; 80029c4 <order_phases+0x2c0>
 800279c:	eec7 5a85 	vdiv.f32	s11, s15, s10
 80027a0:	f107 020c 	add.w	r2, r7, #12
 80027a4:	f107 0310 	add.w	r3, r7, #16
 80027a8:	4611      	mov	r1, r2
 80027aa:	4618      	mov	r0, r3
 80027ac:	eef0 1a65 	vmov.f32	s3, s11
 80027b0:	eeb0 1a46 	vmov.f32	s2, s12
 80027b4:	eef0 0a66 	vmov.f32	s1, s13
 80027b8:	eeb0 0a47 	vmov.f32	s0, s14
 80027bc:	f001 fd50 	bl	8004260 <dq0>
//    controller->i_b = I_SCALE*(float)(controller->adc2_raw - controller->adc2_offset);    //Calculate phase currents from ADC readings
//    controller->i_c = I_SCALE*(float)(controller->adc1_raw - controller->adc1_offset);
//    controller->i_a = -controller->i_b - controller->i_c;
//    dq0(controller->theta_elec, controller->i_a, controller->i_b, controller->i_c, &controller->i_d, &controller->i_q);    //dq0 transform on currents
    float current = sqrt((d*d + q*q));
 80027c0:	ed97 7a04 	vldr	s14, [r7, #16]
 80027c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80027c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027cc:	edd7 6a03 	vldr	s13, [r7, #12]
 80027d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80027d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027dc:	ee17 0a90 	vmov	r0, s15
 80027e0:	f7fd feda 	bl	8000598 <__aeabi_f2d>
 80027e4:	4602      	mov	r2, r0
 80027e6:	460b      	mov	r3, r1
 80027e8:	ec43 2b10 	vmov	d0, r2, r3
 80027ec:	f00a fee4 	bl	800d5b8 <sqrt>
 80027f0:	ec53 2b10 	vmov	r2, r3, d0
 80027f4:	4610      	mov	r0, r2
 80027f6:	4619      	mov	r1, r3
 80027f8:	f7fe fa1e 	bl	8000c38 <__aeabi_d2f>
 80027fc:	4603      	mov	r3, r0
 80027fe:	61bb      	str	r3, [r7, #24]
    PrintServerPrintf("\n\rCurrent\n\r");
 8002800:	4871      	ldr	r0, [pc, #452]	; (80029c8 <order_phases+0x2c4>)
 8002802:	f001 f9fb 	bl	8003bfc <PrintServerPrintf>
    PrintServerPrintf("%f %f %f\n\r\n\r", d, q, current);
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	4618      	mov	r0, r3
 800280a:	f7fd fec5 	bl	8000598 <__aeabi_f2d>
 800280e:	4680      	mov	r8, r0
 8002810:	4689      	mov	r9, r1
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	4618      	mov	r0, r3
 8002816:	f7fd febf 	bl	8000598 <__aeabi_f2d>
 800281a:	4604      	mov	r4, r0
 800281c:	460d      	mov	r5, r1
 800281e:	69b8      	ldr	r0, [r7, #24]
 8002820:	f7fd feba 	bl	8000598 <__aeabi_f2d>
 8002824:	4602      	mov	r2, r0
 8002826:	460b      	mov	r3, r1
 8002828:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800282c:	e9cd 4500 	strd	r4, r5, [sp]
 8002830:	4642      	mov	r2, r8
 8002832:	464b      	mov	r3, r9
 8002834:	4865      	ldr	r0, [pc, #404]	; (80029cc <order_phases+0x2c8>)
 8002836:	f001 f9e1 	bl	8003bfc <PrintServerPrintf>
    /// Rotate voltage angle
    while(theta_ref < 360*2){       //rotate for 2 electrical cycles
 800283a:	e045      	b.n	80028c8 <order_phases+0x1c4>
    	inverter((int16_t)theta_ref, CAL_DUTY, PHASE_ORDER);
 800283c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002840:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002844:	ee17 3a90 	vmov	r3, s15
 8002848:	b21b      	sxth	r3, r3
 800284a:	4a5b      	ldr	r2, [pc, #364]	; (80029b8 <order_phases+0x2b4>)
 800284c:	7812      	ldrb	r2, [r2, #0]
 800284e:	2164      	movs	r1, #100	; 0x64
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff fdcf 	bl	80023f4 <inverter>
    	HAL_Delay(1);
 8002856:	2001      	movs	r0, #1
 8002858:	f002 ff12 	bl	8005680 <HAL_Delay>
       theta_actual = (float)ps->Encoder1_pos/1000; //sample position sensor
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	ee07 3a90 	vmov	s15, r3
 8002864:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002868:	eddf 6a56 	vldr	s13, [pc, #344]	; 80029c4 <order_phases+0x2c0>
 800286c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002870:	edc7 7a07 	vstr	s15, [r7, #28]
       if(theta_ref==0){theta_start = theta_actual;}
 8002874:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002878:	eef5 7a40 	vcmp.f32	s15, #0.0
 800287c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002880:	d101      	bne.n	8002886 <order_phases+0x182>
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	627b      	str	r3, [r7, #36]	; 0x24
       if(sample_counter >= 1){
 8002886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002888:	2b00      	cmp	r3, #0
 800288a:	dd12      	ble.n	80028b2 <order_phases+0x1ae>
           sample_counter = 0 ;
 800288c:	2300      	movs	r3, #0
 800288e:	62bb      	str	r3, [r7, #40]	; 0x28
           PrintServerPrintf("%.4f %.4f\n\r", (float)theta_ref, theta_actual);
 8002890:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002892:	f7fd fe81 	bl	8000598 <__aeabi_f2d>
 8002896:	4604      	mov	r4, r0
 8002898:	460d      	mov	r5, r1
 800289a:	69f8      	ldr	r0, [r7, #28]
 800289c:	f7fd fe7c 	bl	8000598 <__aeabi_f2d>
 80028a0:	4602      	mov	r2, r0
 80028a2:	460b      	mov	r3, r1
 80028a4:	e9cd 2300 	strd	r2, r3, [sp]
 80028a8:	4622      	mov	r2, r4
 80028aa:	462b      	mov	r3, r5
 80028ac:	4848      	ldr	r0, [pc, #288]	; (80029d0 <order_phases+0x2cc>)
 80028ae:	f001 f9a5 	bl	8003bfc <PrintServerPrintf>
        }
        sample_counter++;
 80028b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b4:	3301      	adds	r3, #1
 80028b6:	62bb      	str	r3, [r7, #40]	; 0x28
       theta_ref += 1;
 80028b8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80028bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80028c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028c4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    while(theta_ref < 360*2){       //rotate for 2 electrical cycles
 80028c8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80028cc:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80029d4 <order_phases+0x2d0>
 80028d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028d8:	d4b0      	bmi.n	800283c <order_phases+0x138>
        }
    float theta_end = (float)ps->Encoder1_pos/1000;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	ee07 3a90 	vmov	s15, r3
 80028e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028e6:	eddf 6a37 	vldr	s13, [pc, #220]	; 80029c4 <order_phases+0x2c0>
 80028ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028ee:	edc7 7a05 	vstr	s15, [r7, #20]
    int direction = (theta_end - theta_start)>0;
 80028f2:	ed97 7a05 	vldr	s14, [r7, #20]
 80028f6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80028fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002906:	bfcc      	ite	gt
 8002908:	2301      	movgt	r3, #1
 800290a:	2300      	movle	r3, #0
 800290c:	b2db      	uxtb	r3, r3
 800290e:	623b      	str	r3, [r7, #32]
    if ((theta_end - theta_start) > 180) direction = 0;
 8002910:	ed97 7a05 	vldr	s14, [r7, #20]
 8002914:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002918:	ee77 7a67 	vsub.f32	s15, s14, s15
 800291c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80029c0 <order_phases+0x2bc>
 8002920:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002928:	dd01      	ble.n	800292e <order_phases+0x22a>
 800292a:	2300      	movs	r3, #0
 800292c:	623b      	str	r3, [r7, #32]
    if ((theta_end - theta_start) < -180) direction = 1;
 800292e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002932:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002936:	ee77 7a67 	vsub.f32	s15, s14, s15
 800293a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80029d8 <order_phases+0x2d4>
 800293e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002946:	d501      	bpl.n	800294c <order_phases+0x248>
 8002948:	2301      	movs	r3, #1
 800294a:	623b      	str	r3, [r7, #32]
    PrintServerPrintf("Theta Start:   %f    Theta End:  %f\n\r", theta_start, theta_end);
 800294c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800294e:	f7fd fe23 	bl	8000598 <__aeabi_f2d>
 8002952:	4604      	mov	r4, r0
 8002954:	460d      	mov	r5, r1
 8002956:	6978      	ldr	r0, [r7, #20]
 8002958:	f7fd fe1e 	bl	8000598 <__aeabi_f2d>
 800295c:	4602      	mov	r2, r0
 800295e:	460b      	mov	r3, r1
 8002960:	e9cd 2300 	strd	r2, r3, [sp]
 8002964:	4622      	mov	r2, r4
 8002966:	462b      	mov	r3, r5
 8002968:	481c      	ldr	r0, [pc, #112]	; (80029dc <order_phases+0x2d8>)
 800296a:	f001 f947 	bl	8003bfc <PrintServerPrintf>
    PrintServerPrintf("Direction:  %d\n\r", direction);
 800296e:	6a39      	ldr	r1, [r7, #32]
 8002970:	481b      	ldr	r0, [pc, #108]	; (80029e0 <order_phases+0x2dc>)
 8002972:	f001 f943 	bl	8003bfc <PrintServerPrintf>
    if(direction){PrintServerPrintf("Phasing correct\n\r");}
 8002976:	6a3b      	ldr	r3, [r7, #32]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d003      	beq.n	8002984 <order_phases+0x280>
 800297c:	4819      	ldr	r0, [pc, #100]	; (80029e4 <order_phases+0x2e0>)
 800297e:	f001 f93d 	bl	8003bfc <PrintServerPrintf>
 8002982:	e005      	b.n	8002990 <order_phases+0x28c>
    else if(!direction){PrintServerPrintf("Phasing incorrect.  Swapping phases V and W\n\r");}
 8002984:	6a3b      	ldr	r3, [r7, #32]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d102      	bne.n	8002990 <order_phases+0x28c>
 800298a:	4817      	ldr	r0, [pc, #92]	; (80029e8 <order_phases+0x2e4>)
 800298c:	f001 f936 	bl	8003bfc <PrintServerPrintf>
    PHASE_ORDER = !direction;
 8002990:	6a3b      	ldr	r3, [r7, #32]
 8002992:	2b00      	cmp	r3, #0
 8002994:	bf0c      	ite	eq
 8002996:	2301      	moveq	r3, #1
 8002998:	2300      	movne	r3, #0
 800299a:	b2db      	uxtb	r3, r3
 800299c:	461a      	mov	r2, r3
 800299e:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <order_phases+0x2b4>)
 80029a0:	701a      	strb	r2, [r3, #0]
    HAL_Delay(10);
 80029a2:	200a      	movs	r0, #10
 80029a4:	f002 fe6c 	bl	8005680 <HAL_Delay>
    }
 80029a8:	bf00      	nop
 80029aa:	3730      	adds	r7, #48	; 0x30
 80029ac:	46bd      	mov	sp, r7
 80029ae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80029b2:	bf00      	nop
 80029b4:	0800f620 	.word	0x0800f620
 80029b8:	20000f14 	.word	0x20000f14
 80029bc:	20000088 	.word	0x20000088
 80029c0:	43340000 	.word	0x43340000
 80029c4:	447a0000 	.word	0x447a0000
 80029c8:	0800f640 	.word	0x0800f640
 80029cc:	0800f64c 	.word	0x0800f64c
 80029d0:	0800f65c 	.word	0x0800f65c
 80029d4:	44340000 	.word	0x44340000
 80029d8:	c3340000 	.word	0xc3340000
 80029dc:	0800f668 	.word	0x0800f668
 80029e0:	0800f690 	.word	0x0800f690
 80029e4:	0800f6a4 	.word	0x0800f6a4
 80029e8:	0800f6b8 	.word	0x0800f6b8
 80029ec:	00000000 	.word	0x00000000

080029f0 <calibrate>:


void calibrate(Encoders *ps, Current *cs){ //, PositionSensor *ps, GPIOStruct *gpio, ControllerStruct *controller, PreferenceWriter *prefs
 80029f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029f4:	b0cb      	sub	sp, #300	; 0x12c
 80029f6:	af04      	add	r7, sp, #16
 80029f8:	64f8      	str	r0, [r7, #76]	; 0x4c
 80029fa:	64b9      	str	r1, [r7, #72]	; 0x48
 80029fc:	466b      	mov	r3, sp
 80029fe:	461e      	mov	r6, r3
    /// Measures the electrical angle offset of the position sensor
    /// and (in the future) corrects nonlinearity due to position sensor eccentricity
	PrintServerPrintf("Starting calibration procedure\n\r");
 8002a00:	48eb      	ldr	r0, [pc, #940]	; (8002db0 <calibrate+0x3c0>)
 8002a02:	f001 f8fb 	bl	8003bfc <PrintServerPrintf>

   const int n = SIZE*NPP;                                                      // number of positions to be sampled per mechanical rotation.  Multiple of NPP for filtering reasons (see later)
 8002a06:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002a0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
   const int n2 = 40;                                                          // increments between saved samples (for smoothing motion)
 8002a0e:	2328      	movs	r3, #40	; 0x28
 8002a10:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
   float delta = 360.0f*NPP/(n*n2);                                              // change in angle between samples
 8002a14:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002a18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a1c:	fb02 f303 	mul.w	r3, r2, r3
 8002a20:	ee07 3a90 	vmov	s15, r3
 8002a24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a28:	eddf 6ae2 	vldr	s13, [pc, #904]	; 8002db4 <calibrate+0x3c4>
 8002a2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a30:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0
   const int  n_lut =  SIZE*NPP;
 8002a34:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002a38:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
   const int window = WINDOW_SIZE;
 8002a3c:	2310      	movs	r3, #16
 8002a3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
   float cogging_current[WINDOW_SIZE] = {0};
 8002a42:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8002a46:	2340      	movs	r3, #64	; 0x40
 8002a48:	461a      	mov	r2, r3
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	f008 fc8c 	bl	800b368 <memset>


   float theta_ref = 0;
 8002a50:	f04f 0300 	mov.w	r3, #0
 8002a54:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   float theta_actual = 0;
 8002a58:	f04f 0300 	mov.w	r3, #0
 8002a5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

   float d;
   float q;


    float error_f[n];
 8002a60:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002a64:	3b01      	subs	r3, #1
 8002a66:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a6a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002a6e:	2200      	movs	r2, #0
 8002a70:	461c      	mov	r4, r3
 8002a72:	4615      	mov	r5, r2
 8002a74:	f04f 0200 	mov.w	r2, #0
 8002a78:	f04f 0300 	mov.w	r3, #0
 8002a7c:	016b      	lsls	r3, r5, #5
 8002a7e:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8002a82:	0162      	lsls	r2, r4, #5
 8002a84:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002a88:	2200      	movs	r2, #0
 8002a8a:	4698      	mov	r8, r3
 8002a8c:	4691      	mov	r9, r2
 8002a8e:	f04f 0200 	mov.w	r2, #0
 8002a92:	f04f 0300 	mov.w	r3, #0
 8002a96:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8002a9a:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8002a9e:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8002aa2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	3307      	adds	r3, #7
 8002aaa:	08db      	lsrs	r3, r3, #3
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	ebad 0d03 	sub.w	sp, sp, r3
 8002ab2:	ab04      	add	r3, sp, #16
 8002ab4:	3303      	adds	r3, #3
 8002ab6:	089b      	lsrs	r3, r3, #2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    float error_b[n];
 8002abe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ac8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002acc:	2200      	movs	r2, #0
 8002ace:	469a      	mov	sl, r3
 8002ad0:	4693      	mov	fp, r2
 8002ad2:	f04f 0200 	mov.w	r2, #0
 8002ad6:	f04f 0300 	mov.w	r3, #0
 8002ada:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8002ade:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8002ae2:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8002ae6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002aea:	2200      	movs	r2, #0
 8002aec:	643b      	str	r3, [r7, #64]	; 0x40
 8002aee:	647a      	str	r2, [r7, #68]	; 0x44
 8002af0:	f04f 0200 	mov.w	r2, #0
 8002af4:	f04f 0300 	mov.w	r3, #0
 8002af8:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8002afc:	4629      	mov	r1, r5
 8002afe:	014b      	lsls	r3, r1, #5
 8002b00:	4621      	mov	r1, r4
 8002b02:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8002b06:	4621      	mov	r1, r4
 8002b08:	014a      	lsls	r2, r1, #5
 8002b0a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	3307      	adds	r3, #7
 8002b12:	08db      	lsrs	r3, r3, #3
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	ebad 0d03 	sub.w	sp, sp, r3
 8002b1a:	ab04      	add	r3, sp, #16
 8002b1c:	3303      	adds	r3, #3
 8002b1e:	089b      	lsrs	r3, r3, #2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    int lut[n];
 8002b26:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b30:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002b34:	2200      	movs	r2, #0
 8002b36:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b38:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b3a:	f04f 0200 	mov.w	r2, #0
 8002b3e:	f04f 0300 	mov.w	r3, #0
 8002b42:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8002b46:	4629      	mov	r1, r5
 8002b48:	014b      	lsls	r3, r1, #5
 8002b4a:	4621      	mov	r1, r4
 8002b4c:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8002b50:	4621      	mov	r1, r4
 8002b52:	014a      	lsls	r2, r1, #5
 8002b54:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002b58:	2200      	movs	r2, #0
 8002b5a:	633b      	str	r3, [r7, #48]	; 0x30
 8002b5c:	637a      	str	r2, [r7, #52]	; 0x34
 8002b5e:	f04f 0200 	mov.w	r2, #0
 8002b62:	f04f 0300 	mov.w	r3, #0
 8002b66:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b6a:	4629      	mov	r1, r5
 8002b6c:	014b      	lsls	r3, r1, #5
 8002b6e:	4621      	mov	r1, r4
 8002b70:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8002b74:	4621      	mov	r1, r4
 8002b76:	014a      	lsls	r2, r1, #5
 8002b78:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	3307      	adds	r3, #7
 8002b80:	08db      	lsrs	r3, r3, #3
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	ebad 0d03 	sub.w	sp, sp, r3
 8002b88:	ab04      	add	r3, sp, #16
 8002b8a:	3303      	adds	r3, #3
 8002b8c:	089b      	lsrs	r3, r3, #2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    int raw_f[n];
 8002b94:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b9e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ba6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ba8:	f04f 0200 	mov.w	r2, #0
 8002bac:	f04f 0300 	mov.w	r3, #0
 8002bb0:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8002bb4:	4629      	mov	r1, r5
 8002bb6:	014b      	lsls	r3, r1, #5
 8002bb8:	4621      	mov	r1, r4
 8002bba:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8002bbe:	4621      	mov	r1, r4
 8002bc0:	014a      	lsls	r2, r1, #5
 8002bc2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	623b      	str	r3, [r7, #32]
 8002bca:	627a      	str	r2, [r7, #36]	; 0x24
 8002bcc:	f04f 0200 	mov.w	r2, #0
 8002bd0:	f04f 0300 	mov.w	r3, #0
 8002bd4:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002bd8:	4629      	mov	r1, r5
 8002bda:	014b      	lsls	r3, r1, #5
 8002bdc:	4621      	mov	r1, r4
 8002bde:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8002be2:	4621      	mov	r1, r4
 8002be4:	014a      	lsls	r2, r1, #5
 8002be6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	3307      	adds	r3, #7
 8002bee:	08db      	lsrs	r3, r3, #3
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	ebad 0d03 	sub.w	sp, sp, r3
 8002bf6:	ab04      	add	r3, sp, #16
 8002bf8:	3303      	adds	r3, #3
 8002bfa:	089b      	lsrs	r3, r3, #2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    int raw_b[n];
 8002c02:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002c06:	3b01      	subs	r3, #1
 8002c08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c0c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002c10:	2200      	movs	r2, #0
 8002c12:	61bb      	str	r3, [r7, #24]
 8002c14:	61fa      	str	r2, [r7, #28]
 8002c16:	f04f 0200 	mov.w	r2, #0
 8002c1a:	f04f 0300 	mov.w	r3, #0
 8002c1e:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8002c22:	4629      	mov	r1, r5
 8002c24:	014b      	lsls	r3, r1, #5
 8002c26:	4621      	mov	r1, r4
 8002c28:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8002c2c:	4621      	mov	r1, r4
 8002c2e:	014a      	lsls	r2, r1, #5
 8002c30:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002c34:	2200      	movs	r2, #0
 8002c36:	613b      	str	r3, [r7, #16]
 8002c38:	617a      	str	r2, [r7, #20]
 8002c3a:	f04f 0200 	mov.w	r2, #0
 8002c3e:	f04f 0300 	mov.w	r3, #0
 8002c42:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002c46:	4629      	mov	r1, r5
 8002c48:	014b      	lsls	r3, r1, #5
 8002c4a:	4621      	mov	r1, r4
 8002c4c:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8002c50:	4621      	mov	r1, r4
 8002c52:	014a      	lsls	r2, r1, #5
 8002c54:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	3307      	adds	r3, #7
 8002c5c:	08db      	lsrs	r3, r3, #3
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	ebad 0d03 	sub.w	sp, sp, r3
 8002c64:	ab04      	add	r3, sp, #16
 8002c66:	3303      	adds	r3, #3
 8002c68:	089b      	lsrs	r3, r3, #2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    float error[n];
 8002c70:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002c74:	3b01      	subs	r3, #1
 8002c76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002c7a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002c7e:	2200      	movs	r2, #0
 8002c80:	60bb      	str	r3, [r7, #8]
 8002c82:	60fa      	str	r2, [r7, #12]
 8002c84:	f04f 0200 	mov.w	r2, #0
 8002c88:	f04f 0300 	mov.w	r3, #0
 8002c8c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c90:	4629      	mov	r1, r5
 8002c92:	014b      	lsls	r3, r1, #5
 8002c94:	4621      	mov	r1, r4
 8002c96:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8002c9a:	4621      	mov	r1, r4
 8002c9c:	014a      	lsls	r2, r1, #5
 8002c9e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	603b      	str	r3, [r7, #0]
 8002ca6:	607a      	str	r2, [r7, #4]
 8002ca8:	f04f 0200 	mov.w	r2, #0
 8002cac:	f04f 0300 	mov.w	r3, #0
 8002cb0:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cb4:	4629      	mov	r1, r5
 8002cb6:	014b      	lsls	r3, r1, #5
 8002cb8:	4621      	mov	r1, r4
 8002cba:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8002cbe:	4621      	mov	r1, r4
 8002cc0:	014a      	lsls	r2, r1, #5
 8002cc2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	3307      	adds	r3, #7
 8002cca:	08db      	lsrs	r3, r3, #3
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	ebad 0d03 	sub.w	sp, sp, r3
 8002cd2:	ab04      	add	r3, sp, #16
 8002cd4:	3303      	adds	r3, #3
 8002cd6:	089b      	lsrs	r3, r3, #2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4




    ///Set voltage angle to zero, wait for rotor position to settle
    inverter((int16_t)theta_ref, CAL_DUTY, PHASE_ORDER);
 8002cde:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 8002ce2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ce6:	ee17 3a90 	vmov	r3, s15
 8002cea:	b21b      	sxth	r3, r3
 8002cec:	4a32      	ldr	r2, [pc, #200]	; (8002db8 <calibrate+0x3c8>)
 8002cee:	7812      	ldrb	r2, [r2, #0]
 8002cf0:	2164      	movs	r1, #100	; 0x64
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff fb7e 	bl	80023f4 <inverter>
    HAL_Delay(1000);
 8002cf8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002cfc:	f002 fcc0 	bl	8005680 <HAL_Delay>

    dq0(theta_ref*pi/180, (float)cs->Current_M1/1000, (float)cs->Current_M2/1000, (float)cs->Current_M3/1000, &d, &q);
 8002d00:	4b2e      	ldr	r3, [pc, #184]	; (8002dbc <calibrate+0x3cc>)
 8002d02:	ed93 7a00 	vldr	s14, [r3]
 8002d06:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 8002d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d0e:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8002dc0 <calibrate+0x3d0>
 8002d12:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002d16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	ee07 3a90 	vmov	s15, r3
 8002d1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d22:	ed9f 6a28 	vldr	s12, [pc, #160]	; 8002dc4 <calibrate+0x3d4>
 8002d26:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8002d2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	ee07 3a90 	vmov	s15, r3
 8002d32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d36:	eddf 5a23 	vldr	s11, [pc, #140]	; 8002dc4 <calibrate+0x3d4>
 8002d3a:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8002d3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	ee07 3a90 	vmov	s15, r3
 8002d46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d4a:	ed9f 5a1e 	vldr	s10, [pc, #120]	; 8002dc4 <calibrate+0x3d4>
 8002d4e:	eec7 5a85 	vdiv.f32	s11, s15, s10
 8002d52:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002d56:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002d5a:	4611      	mov	r1, r2
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	eef0 1a65 	vmov.f32	s3, s11
 8002d62:	eeb0 1a46 	vmov.f32	s2, s12
 8002d66:	eef0 0a66 	vmov.f32	s1, s13
 8002d6a:	eeb0 0a47 	vmov.f32	s0, s14
 8002d6e:	f001 fa77 	bl	8004260 <dq0>
    float current = sqrt((d*d + q*q));
 8002d72:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002d76:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002d7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d7e:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8002d82:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002d86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d8e:	ee17 0a90 	vmov	r0, s15
 8002d92:	f7fd fc01 	bl	8000598 <__aeabi_f2d>
 8002d96:	4602      	mov	r2, r0
 8002d98:	460b      	mov	r3, r1
 8002d9a:	ec43 2b10 	vmov	d0, r2, r3
 8002d9e:	f00a fc0b 	bl	800d5b8 <sqrt>
 8002da2:	ec53 2b10 	vmov	r2, r3, d0
 8002da6:	4610      	mov	r0, r2
 8002da8:	4619      	mov	r1, r3
 8002daa:	f7fd ff45 	bl	8000c38 <__aeabi_d2f>
 8002dae:	e00b      	b.n	8002dc8 <calibrate+0x3d8>
 8002db0:	0800f6e8 	.word	0x0800f6e8
 8002db4:	45bf4000 	.word	0x45bf4000
 8002db8:	20000f14 	.word	0x20000f14
 8002dbc:	20000088 	.word	0x20000088
 8002dc0:	43340000 	.word	0x43340000
 8002dc4:	447a0000 	.word	0x447a0000
 8002dc8:	4603      	mov	r3, r0
 8002dca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    PrintServerPrintf("Current Angle : Rotor Angle : Raw Encoder \n\r\n\r");
 8002dce:	48d4      	ldr	r0, [pc, #848]	; (8003120 <calibrate+0x730>)
 8002dd0:	f000 ff14 	bl	8003bfc <PrintServerPrintf>
    for(int i = 0; i<n; i++){                                                   // rotate forwards
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8002dda:	e094      	b.n	8002f06 <calibrate+0x516>
       for(int j = 0; j<n2; j++){
 8002ddc:	2300      	movs	r3, #0
 8002dde:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002de2:	e084      	b.n	8002eee <calibrate+0x4fe>
        theta_ref += delta;
 8002de4:	ed97 7a45 	vldr	s14, [r7, #276]	; 0x114
 8002de8:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8002dec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002df0:	edc7 7a45 	vstr	s15, [r7, #276]	; 0x114
        inverter((int16_t)theta_ref, CAL_DUTY, PHASE_ORDER);
 8002df4:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 8002df8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dfc:	ee17 3a90 	vmov	r3, s15
 8002e00:	b21b      	sxth	r3, r3
 8002e02:	4ac8      	ldr	r2, [pc, #800]	; (8003124 <calibrate+0x734>)
 8002e04:	7812      	ldrb	r2, [r2, #0]
 8002e06:	2164      	movs	r1, #100	; 0x64
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff faf3 	bl	80023f4 <inverter>
        HAL_Delay(1);
 8002e0e:	2001      	movs	r0, #1
 8002e10:	f002 fc36 	bl	8005680 <HAL_Delay>
       theta_actual = (float)ps->Encoder1_pos/1000; //fixed position
 8002e14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	ee07 3a90 	vmov	s15, r3
 8002e1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e20:	eddf 6ac1 	vldr	s13, [pc, #772]	; 8003128 <calibrate+0x738>
 8002e24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e28:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4
       error_f[i] = theta_ref/NPP - theta_actual;
 8002e2c:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 8002e30:	eef3 6a01 	vmov.f32	s13, #49	; 0x41880000  17.0
 8002e34:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002e38:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8002e3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e40:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002e44:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4413      	add	r3, r2
 8002e4c:	edc3 7a00 	vstr	s15, [r3]
	   if(error_f[i] < 0)error_f [i] = error_f[i]+ 360.0f;
 8002e50:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002e54:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4413      	add	r3, r2
 8002e5c:	edd3 7a00 	vldr	s15, [r3]
 8002e60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e68:	d513      	bpl.n	8002e92 <calibrate+0x4a2>
 8002e6a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002e6e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4413      	add	r3, r2
 8002e76:	edd3 7a00 	vldr	s15, [r3]
 8002e7a:	ed9f 7aac 	vldr	s14, [pc, #688]	; 800312c <calibrate+0x73c>
 8002e7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e82:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002e86:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	4413      	add	r3, r2
 8002e8e:	edc3 7a00 	vstr	s15, [r3]
       raw_f[i] = ps->Encoder1_pos_raw; //raw position
 8002e92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	4619      	mov	r1, r3
 8002e98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002e9c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8002ea0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
       PrintServerPrintf("%.4f %.4f%d\n\r", theta_ref/(NPP), theta_actual, raw_f[i]);
 8002ea4:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 8002ea8:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8002eac:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002eb0:	ee16 0a90 	vmov	r0, s13
 8002eb4:	f7fd fb70 	bl	8000598 <__aeabi_f2d>
 8002eb8:	4604      	mov	r4, r0
 8002eba:	460d      	mov	r5, r1
 8002ebc:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8002ec0:	f7fd fb6a 	bl	8000598 <__aeabi_f2d>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8002ecc:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8002ed0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8002ed4:	9102      	str	r1, [sp, #8]
 8002ed6:	e9cd 2300 	strd	r2, r3, [sp]
 8002eda:	4622      	mov	r2, r4
 8002edc:	462b      	mov	r3, r5
 8002ede:	4894      	ldr	r0, [pc, #592]	; (8003130 <calibrate+0x740>)
 8002ee0:	f000 fe8c 	bl	8003bfc <PrintServerPrintf>
       for(int j = 0; j<n2; j++){
 8002ee4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ee8:	3301      	adds	r3, #1
 8002eea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002eee:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	f6ff af74 	blt.w	8002de4 <calibrate+0x3f4>
    for(int i = 0; i<n; i++){                                                   // rotate forwards
 8002efc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002f00:	3301      	adds	r3, #1
 8002f02:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8002f06:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8002f0a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	f6ff af64 	blt.w	8002ddc <calibrate+0x3ec>
        }
    }

    for(int i = 0; i<n; i++){                                                   // rotate backwards
 8002f14:	2300      	movs	r3, #0
 8002f16:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002f1a:	e094      	b.n	8003046 <calibrate+0x656>
       for(int j = 0; j<n2; j++){
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002f22:	e084      	b.n	800302e <calibrate+0x63e>
       theta_ref -= delta;
 8002f24:	ed97 7a45 	vldr	s14, [r7, #276]	; 0x114
 8002f28:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8002f2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f30:	edc7 7a45 	vstr	s15, [r7, #276]	; 0x114
       inverter((int16_t)theta_ref, CAL_DUTY, PHASE_ORDER);
 8002f34:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 8002f38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f3c:	ee17 3a90 	vmov	r3, s15
 8002f40:	b21b      	sxth	r3, r3
 8002f42:	4a78      	ldr	r2, [pc, #480]	; (8003124 <calibrate+0x734>)
 8002f44:	7812      	ldrb	r2, [r2, #0]
 8002f46:	2164      	movs	r1, #100	; 0x64
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7ff fa53 	bl	80023f4 <inverter>
       HAL_Delay(1);                                                         // sample position sensor
 8002f4e:	2001      	movs	r0, #1
 8002f50:	f002 fb96 	bl	8005680 <HAL_Delay>
       theta_actual = (float)ps->Encoder1_pos/1000;                                   // get mechanical position
 8002f54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	ee07 3a90 	vmov	s15, r3
 8002f5c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f60:	eddf 6a71 	vldr	s13, [pc, #452]	; 8003128 <calibrate+0x738>
 8002f64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f68:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4
       error_b[i] = theta_ref/NPP - theta_actual;
 8002f6c:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 8002f70:	eef3 6a01 	vmov.f32	s13, #49	; 0x41880000  17.0
 8002f74:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002f78:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8002f7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f80:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002f84:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	4413      	add	r3, r2
 8002f8c:	edc3 7a00 	vstr	s15, [r3]
       if(error_b[i] < 0)error_b[i] = error_b[i]+ 360.0f;
 8002f90:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002f94:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	edd3 7a00 	vldr	s15, [r3]
 8002fa0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fa8:	d513      	bpl.n	8002fd2 <calibrate+0x5e2>
 8002faa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002fae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4413      	add	r3, r2
 8002fb6:	edd3 7a00 	vldr	s15, [r3]
 8002fba:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 800312c <calibrate+0x73c>
 8002fbe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002fc2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002fc6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4413      	add	r3, r2
 8002fce:	edc3 7a00 	vstr	s15, [r3]
       raw_b[i] =  ps->Encoder1_pos_raw;
 8002fd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fdc:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8002fe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
       PrintServerPrintf("%.4f %.4f %d\n\r", theta_ref/(NPP), theta_actual, raw_b[i]);
 8002fe4:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 8002fe8:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8002fec:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002ff0:	ee16 0a90 	vmov	r0, s13
 8002ff4:	f7fd fad0 	bl	8000598 <__aeabi_f2d>
 8002ff8:	4604      	mov	r4, r0
 8002ffa:	460d      	mov	r5, r1
 8002ffc:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8003000:	f7fd faca 	bl	8000598 <__aeabi_f2d>
 8003004:	4602      	mov	r2, r0
 8003006:	460b      	mov	r3, r1
 8003008:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800300c:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8003010:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8003014:	9102      	str	r1, [sp, #8]
 8003016:	e9cd 2300 	strd	r2, r3, [sp]
 800301a:	4622      	mov	r2, r4
 800301c:	462b      	mov	r3, r5
 800301e:	4845      	ldr	r0, [pc, #276]	; (8003134 <calibrate+0x744>)
 8003020:	f000 fdec 	bl	8003bfc <PrintServerPrintf>
       for(int j = 0; j<n2; j++){
 8003024:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003028:	3301      	adds	r3, #1
 800302a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800302e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8003032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003036:	429a      	cmp	r2, r3
 8003038:	f6ff af74 	blt.w	8002f24 <calibrate+0x534>
    for(int i = 0; i<n; i++){                                                   // rotate backwards
 800303c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003040:	3301      	adds	r3, #1
 8003042:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003046:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800304a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800304e:	429a      	cmp	r2, r3
 8003050:	f6ff af64 	blt.w	8002f1c <calibrate+0x52c>
       //theta_ref -= delta;
        }
    }

        electrical_offset = 0;
 8003054:	4b38      	ldr	r3, [pc, #224]	; (8003138 <calibrate+0x748>)
 8003056:	f04f 0200 	mov.w	r2, #0
 800305a:	601a      	str	r2, [r3, #0]
        for(int i = 0; i<n; i++){
 800305c:	2300      	movs	r3, #0
 800305e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003062:	e02c      	b.n	80030be <calibrate+0x6ce>
        	electrical_offset += (error_f[i] + error_b[n-1-i])/(2.0f*n);                   // calclate average position sensor offset
 8003064:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8003068:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	4413      	add	r3, r2
 8003070:	ed93 7a00 	vldr	s14, [r3]
 8003074:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003078:	1e5a      	subs	r2, r3, #1
 800307a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4413      	add	r3, r2
 8003088:	edd3 7a00 	vldr	s15, [r3]
 800308c:	ee77 6a27 	vadd.f32	s13, s14, s15
 8003090:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003094:	ee07 3a90 	vmov	s15, r3
 8003098:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800309c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80030a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030a4:	4b24      	ldr	r3, [pc, #144]	; (8003138 <calibrate+0x748>)
 80030a6:	edd3 7a00 	vldr	s15, [r3]
 80030aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030ae:	4b22      	ldr	r3, [pc, #136]	; (8003138 <calibrate+0x748>)
 80030b0:	edc3 7a00 	vstr	s15, [r3]
        for(int i = 0; i<n; i++){
 80030b4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80030b8:	3301      	adds	r3, #1
 80030ba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80030be:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80030c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80030c6:	429a      	cmp	r2, r3
 80030c8:	dbcc      	blt.n	8003064 <calibrate+0x674>
            }
        electrical_offset = fmod(electrical_offset*NPP, 360);                                        // convert mechanical angle to electrical angle
 80030ca:	4b1b      	ldr	r3, [pc, #108]	; (8003138 <calibrate+0x748>)
 80030cc:	edd3 7a00 	vldr	s15, [r3]
 80030d0:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 80030d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030d8:	ee17 0a90 	vmov	r0, s15
 80030dc:	f7fd fa5c 	bl	8000598 <__aeabi_f2d>
 80030e0:	4602      	mov	r2, r0
 80030e2:	460b      	mov	r3, r1
 80030e4:	ed9f 1b0c 	vldr	d1, [pc, #48]	; 8003118 <calibrate+0x728>
 80030e8:	ec43 2b10 	vmov	d0, r2, r3
 80030ec:	f00a fa36 	bl	800d55c <fmod>
 80030f0:	ec53 2b10 	vmov	r2, r3, d0
 80030f4:	4610      	mov	r0, r2
 80030f6:	4619      	mov	r1, r3
 80030f8:	f7fd fd9e 	bl	8000c38 <__aeabi_d2f>
 80030fc:	4603      	mov	r3, r0
 80030fe:	4a0e      	ldr	r2, [pc, #56]	; (8003138 <calibrate+0x748>)
 8003100:	6013      	str	r3, [r2, #0]
        /// FIR n-sample average, where n = number of samples in one electrical cycle
        /// This filter has zero gain at electrical frequency and all integer multiples
        /// So cogging effects should be completely filtered out.


        float mean = 0;
 8003102:	f04f 0300 	mov.w	r3, #0
 8003106:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
        for (int i = 0; i<n; i++){                                              //Average the forward and back directions
 800310a:	2300      	movs	r3, #0
 800310c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003110:	e03b      	b.n	800318a <calibrate+0x79a>
 8003112:	bf00      	nop
 8003114:	f3af 8000 	nop.w
 8003118:	00000000 	.word	0x00000000
 800311c:	40768000 	.word	0x40768000
 8003120:	0800f70c 	.word	0x0800f70c
 8003124:	20000f14 	.word	0x20000f14
 8003128:	447a0000 	.word	0x447a0000
 800312c:	43b40000 	.word	0x43b40000
 8003130:	0800f73c 	.word	0x0800f73c
 8003134:	0800f74c 	.word	0x0800f74c
 8003138:	20000f18 	.word	0x20000f18
            error[i] = 0.5f*(error_f[i] + error_b[n-i-1]);
 800313c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8003140:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4413      	add	r3, r2
 8003148:	ed93 7a00 	vldr	s14, [r3]
 800314c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8003150:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	3b01      	subs	r3, #1
 8003158:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	edd3 7a00 	vldr	s15, [r3]
 8003164:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003168:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800316c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003170:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8003174:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	4413      	add	r3, r2
 800317c:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i<n; i++){                                              //Average the forward and back directions
 8003180:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003184:	3301      	adds	r3, #1
 8003186:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800318a:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800318e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003192:	429a      	cmp	r2, r3
 8003194:	dbd2      	blt.n	800313c <calibrate+0x74c>
            }
        for (int i = 0; i<n; i++){
 8003196:	2300      	movs	r3, #0
 8003198:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800319c:	e09f      	b.n	80032de <calibrate+0x8ee>
            for(int j = 0; j<window; j++){
 800319e:	2300      	movs	r3, #0
 80031a0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80031a4:	e04c      	b.n	8003240 <calibrate+0x850>
                int ind = -window/2 + j + i;                                    // Indexes from -window/2 to + window/2
 80031a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80031aa:	0fda      	lsrs	r2, r3, #31
 80031ac:	4413      	add	r3, r2
 80031ae:	105b      	asrs	r3, r3, #1
 80031b0:	425b      	negs	r3, r3
 80031b2:	461a      	mov	r2, r3
 80031b4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80031b8:	4413      	add	r3, r2
 80031ba:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80031be:	4413      	add	r3, r2
 80031c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                if(ind<0){
 80031c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	da07      	bge.n	80031dc <calibrate+0x7ec>
                    ind += n;}                                                  // Moving average wraps around
 80031cc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80031d0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80031d4:	4413      	add	r3, r2
 80031d6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80031da:	e00c      	b.n	80031f6 <calibrate+0x806>
                else if(ind > n-1) {
 80031dc:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80031e0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80031e4:	429a      	cmp	r2, r3
 80031e6:	dc06      	bgt.n	80031f6 <calibrate+0x806>
                    ind -= n;}
 80031e8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80031ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                if(error[ind] == NAN)while(1);
                error_filt[i] += error[ind]/(float)window;
 80031f6:	4a4e      	ldr	r2, [pc, #312]	; (8003330 <calibrate+0x940>)
 80031f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4413      	add	r3, r2
 8003200:	ed93 7a00 	vldr	s14, [r3]
 8003204:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8003208:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	4413      	add	r3, r2
 8003210:	ed93 6a00 	vldr	s12, [r3]
 8003214:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003218:	ee07 3a90 	vmov	s15, r3
 800321c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003220:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003224:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003228:	4a41      	ldr	r2, [pc, #260]	; (8003330 <calibrate+0x940>)
 800322a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4413      	add	r3, r2
 8003232:	edc3 7a00 	vstr	s15, [r3]
            for(int j = 0; j<window; j++){
 8003236:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800323a:	3301      	adds	r3, #1
 800323c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003240:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8003244:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003248:	429a      	cmp	r2, r3
 800324a:	dbac      	blt.n	80031a6 <calibrate+0x7b6>
                if(error_filt[i] == NAN)while(1);
                }
            if(i<window){
 800324c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8003250:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003254:	429a      	cmp	r2, r3
 8003256:	da28      	bge.n	80032aa <calibrate+0x8ba>
                cogging_current[i] = current*sinf((error[i] - error_filt[i])*NPP);
 8003258:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800325c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	4413      	add	r3, r2
 8003264:	ed93 7a00 	vldr	s14, [r3]
 8003268:	4a31      	ldr	r2, [pc, #196]	; (8003330 <calibrate+0x940>)
 800326a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	4413      	add	r3, r2
 8003272:	edd3 7a00 	vldr	s15, [r3]
 8003276:	ee77 7a67 	vsub.f32	s15, s14, s15
 800327a:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 800327e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003282:	eeb0 0a67 	vmov.f32	s0, s15
 8003286:	f00a fa6f 	bl	800d768 <sinf>
 800328a:	eeb0 7a40 	vmov.f32	s14, s0
 800328e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8003292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	33d0      	adds	r3, #208	; 0xd0
 800329e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80032a2:	4413      	add	r3, r2
 80032a4:	3bbc      	subs	r3, #188	; 0xbc
 80032a6:	edc3 7a00 	vstr	s15, [r3]
                }
//            PrintServerPrintf("%.4f   %4f    %.4f   %.4f\n\r", error[i], error_filt[i], error_f[i], error_b[i]);
//            HAL_Delay(10);
            mean += error_filt[i]/n;
 80032aa:	4a21      	ldr	r2, [pc, #132]	; (8003330 <calibrate+0x940>)
 80032ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4413      	add	r3, r2
 80032b4:	edd3 6a00 	vldr	s13, [r3]
 80032b8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80032bc:	ee07 3a90 	vmov	s15, r3
 80032c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032c8:	ed97 7a3f 	vldr	s14, [r7, #252]	; 0xfc
 80032cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032d0:	edc7 7a3f 	vstr	s15, [r7, #252]	; 0xfc
        for (int i = 0; i<n; i++){
 80032d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032d8:	3301      	adds	r3, #1
 80032da:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80032de:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80032e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80032e6:	429a      	cmp	r2, r3
 80032e8:	f6ff af59 	blt.w	800319e <calibrate+0x7ae>
            }
        int raw_offset = (raw_f[0] + raw_b[n-1])/2;                             //Insensitive to errors in this direction, so 2 points is plenty
 80032ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80032f6:	1e59      	subs	r1, r3, #1
 80032f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80032fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003300:	4413      	add	r3, r2
 8003302:	0fda      	lsrs	r2, r3, #31
 8003304:	4413      	add	r3, r2
 8003306:	105b      	asrs	r3, r3, #1
 8003308:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

//        ps->WriteLUT(lut);                                                      // write lookup table to position sensor object
        //memcpy(controller->cogging, cogging_current, sizeof(controller->cogging));  //compensation doesn't actually work yet....

//        memcpy(&ENCODER_LUT, lut, 128*4);                                 // copy the lookup table to the flash array
        PrintServerPrintf("\n\rEncoder Electrical Offset (deg) %f\n\r",  electrical_offset);
 800330c:	4b09      	ldr	r3, [pc, #36]	; (8003334 <calibrate+0x944>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4618      	mov	r0, r3
 8003312:	f7fd f941 	bl	8000598 <__aeabi_f2d>
 8003316:	4602      	mov	r2, r0
 8003318:	460b      	mov	r3, r1
 800331a:	4807      	ldr	r0, [pc, #28]	; (8003338 <calibrate+0x948>)
 800331c:	f000 fc6e 	bl	8003bfc <PrintServerPrintf>
 8003320:	46b5      	mov	sp, r6
//        for (int i = 0; i<LUT_SIZE; i++){
//        	float wanted_pos = i *360.0f / LUT_SIZE;
//        	motor_lut[i] = find_closest(error_test, SIZE*NPP, wanted_pos);
//        	PrintServerPrintf("%d\n\r", motor_lut[i]);
//        }
    }
 8003322:	bf00      	nop
 8003324:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8003328:	46bd      	mov	sp, r7
 800332a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800332e:	bf00      	nop
 8003330:	20000ad4 	.word	0x20000ad4
 8003334:	20000f18 	.word	0x20000f18
 8003338:	0800f75c 	.word	0x0800f75c

0800333c <ORBIS_init>:
 *
 *  can transmit the command while receiving position
 *
 *  max 4MHz
 */
void ORBIS_init(Encoders_Callback __IRQ_callback){
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 1);
 8003344:	2201      	movs	r2, #1
 8003346:	2140      	movs	r1, #64	; 0x40
 8003348:	4815      	ldr	r0, [pc, #84]	; (80033a0 <ORBIS_init+0x64>)
 800334a:	f004 f9c1 	bl	80076d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 1);
 800334e:	2201      	movs	r2, #1
 8003350:	2104      	movs	r1, #4
 8003352:	4814      	ldr	r0, [pc, #80]	; (80033a4 <ORBIS_init+0x68>)
 8003354:	f004 f9bc 	bl	80076d0 <HAL_GPIO_WritePin>
	//setup callback
	Encoders_IRQ_callback = __IRQ_callback;
 8003358:	4a13      	ldr	r2, [pc, #76]	; (80033a8 <ORBIS_init+0x6c>)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6013      	str	r3, [r2, #0]

	//setup DMA
	SPI1_tx_buff[0] = ORBIS_NORNAL_OPERATION;
 800335e:	4b13      	ldr	r3, [pc, #76]	; (80033ac <ORBIS_init+0x70>)
 8003360:	2274      	movs	r2, #116	; 0x74
 8003362:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 0);
 8003364:	2200      	movs	r2, #0
 8003366:	2140      	movs	r1, #64	; 0x40
 8003368:	480d      	ldr	r0, [pc, #52]	; (80033a0 <ORBIS_init+0x64>)
 800336a:	f004 f9b1 	bl	80076d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 0);
 800336e:	2200      	movs	r2, #0
 8003370:	2104      	movs	r1, #4
 8003372:	480c      	ldr	r0, [pc, #48]	; (80033a4 <ORBIS_init+0x68>)
 8003374:	f004 f9ac 	bl	80076d0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA(&hspi1, SPI1_tx_buff, SPI1_rx_buff, ORBIS_SPI_SIZE);
 8003378:	2305      	movs	r3, #5
 800337a:	4a0d      	ldr	r2, [pc, #52]	; (80033b0 <ORBIS_init+0x74>)
 800337c:	490b      	ldr	r1, [pc, #44]	; (80033ac <ORBIS_init+0x70>)
 800337e:	480d      	ldr	r0, [pc, #52]	; (80033b4 <ORBIS_init+0x78>)
 8003380:	f005 f9ac 	bl	80086dc <HAL_SPI_TransmitReceive_DMA>
	HAL_SPI_TransmitReceive_DMA(&hspi3, SPI3_tx_buff, SPI3_rx_buff, ORBIS_SPI_SIZE);
 8003384:	2305      	movs	r3, #5
 8003386:	4a0c      	ldr	r2, [pc, #48]	; (80033b8 <ORBIS_init+0x7c>)
 8003388:	490c      	ldr	r1, [pc, #48]	; (80033bc <ORBIS_init+0x80>)
 800338a:	480d      	ldr	r0, [pc, #52]	; (80033c0 <ORBIS_init+0x84>)
 800338c:	f005 f9a6 	bl	80086dc <HAL_SPI_TransmitReceive_DMA>

	//setup timer
	HAL_TIM_Base_Start_IT(&htim3);
 8003390:	480c      	ldr	r0, [pc, #48]	; (80033c4 <ORBIS_init+0x88>)
 8003392:	f005 fd33 	bl	8008dfc <HAL_TIM_Base_Start_IT>

}
 8003396:	bf00      	nop
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	48000400 	.word	0x48000400
 80033a4:	48000c00 	.word	0x48000c00
 80033a8:	20000f3c 	.word	0x20000f3c
 80033ac:	20000f1c 	.word	0x20000f1c
 80033b0:	20000f24 	.word	0x20000f24
 80033b4:	20001c54 	.word	0x20001c54
 80033b8:	20000f34 	.word	0x20000f34
 80033bc:	20000f2c 	.word	0x20000f2c
 80033c0:	20001cb8 	.word	0x20001cb8
 80033c4:	20001d6c 	.word	0x20001d6c

080033c8 <HAL_SPI_TxRxCpltCallback>:
uint8_t velocity_index = 0;
float velocity_array[velocity_lpf_size] = {0};


void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef * hspi)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) {
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a73      	ldr	r2, [pc, #460]	; (80035a0 <HAL_SPI_TxRxCpltCallback+0x1d8>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	f040 80bb 	bne.w	8003550 <HAL_SPI_TxRxCpltCallback+0x188>
		HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 1);
 80033da:	2201      	movs	r2, #1
 80033dc:	2140      	movs	r1, #64	; 0x40
 80033de:	4871      	ldr	r0, [pc, #452]	; (80035a4 <HAL_SPI_TxRxCpltCallback+0x1dc>)
 80033e0:	f004 f976 	bl	80076d0 <HAL_GPIO_WritePin>
		data_encoders.Calculated_pos = SPI1_rx_buff[0]; //(SPI1_rx_buff[3] << 8) | (SPI1_rx_buff[2]);
 80033e4:	4b70      	ldr	r3, [pc, #448]	; (80035a8 <HAL_SPI_TxRxCpltCallback+0x1e0>)
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	461a      	mov	r2, r3
 80033ea:	4b70      	ldr	r3, [pc, #448]	; (80035ac <HAL_SPI_TxRxCpltCallback+0x1e4>)
 80033ec:	611a      	str	r2, [r3, #16]
		data_encoders.Encoder1_pos = (uint32_t)(((uint32_t)(SPI1_rx_buff[0] << 6) | (SPI1_rx_buff[1] >> 2)) * 5625) >> 8;
 80033ee:	4b6e      	ldr	r3, [pc, #440]	; (80035a8 <HAL_SPI_TxRxCpltCallback+0x1e0>)
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	019b      	lsls	r3, r3, #6
 80033f4:	461a      	mov	r2, r3
 80033f6:	4b6c      	ldr	r3, [pc, #432]	; (80035a8 <HAL_SPI_TxRxCpltCallback+0x1e0>)
 80033f8:	785b      	ldrb	r3, [r3, #1]
 80033fa:	089b      	lsrs	r3, r3, #2
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	4313      	orrs	r3, r2
 8003400:	f241 52f9 	movw	r2, #5625	; 0x15f9
 8003404:	fb02 f303 	mul.w	r3, r2, r3
 8003408:	0a1b      	lsrs	r3, r3, #8
 800340a:	4a68      	ldr	r2, [pc, #416]	; (80035ac <HAL_SPI_TxRxCpltCallback+0x1e4>)
 800340c:	6013      	str	r3, [r2, #0]
		data_encoders.Encoder1_pos_raw = (uint32_t)(SPI1_rx_buff[0] << 6) | (SPI1_rx_buff[1] >> 2);
 800340e:	4b66      	ldr	r3, [pc, #408]	; (80035a8 <HAL_SPI_TxRxCpltCallback+0x1e0>)
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	019b      	lsls	r3, r3, #6
 8003414:	461a      	mov	r2, r3
 8003416:	4b64      	ldr	r3, [pc, #400]	; (80035a8 <HAL_SPI_TxRxCpltCallback+0x1e0>)
 8003418:	785b      	ldrb	r3, [r3, #1]
 800341a:	089b      	lsrs	r3, r3, #2
 800341c:	b2db      	uxtb	r3, r3
 800341e:	4313      	orrs	r3, r2
 8003420:	4a62      	ldr	r2, [pc, #392]	; (80035ac <HAL_SPI_TxRxCpltCallback+0x1e4>)
 8003422:	6093      	str	r3, [r2, #8]

		float velocity_temp;
		if(((int32_t)data_encoders.Encoder1_pos - last_pos) > 180000)velocity_temp = ((int32_t)data_encoders.Encoder1_pos-last_pos - 360000);
 8003424:	4b61      	ldr	r3, [pc, #388]	; (80035ac <HAL_SPI_TxRxCpltCallback+0x1e4>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	461a      	mov	r2, r3
 800342a:	4b61      	ldr	r3, [pc, #388]	; (80035b0 <HAL_SPI_TxRxCpltCallback+0x1e8>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	4a60      	ldr	r2, [pc, #384]	; (80035b4 <HAL_SPI_TxRxCpltCallback+0x1ec>)
 8003432:	4293      	cmp	r3, r2
 8003434:	dd10      	ble.n	8003458 <HAL_SPI_TxRxCpltCallback+0x90>
 8003436:	4b5d      	ldr	r3, [pc, #372]	; (80035ac <HAL_SPI_TxRxCpltCallback+0x1e4>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	461a      	mov	r2, r3
 800343c:	4b5c      	ldr	r3, [pc, #368]	; (80035b0 <HAL_SPI_TxRxCpltCallback+0x1e8>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	f5a3 23af 	sub.w	r3, r3, #358400	; 0x57800
 8003446:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 800344a:	ee07 3a90 	vmov	s15, r3
 800344e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003452:	edc7 7a03 	vstr	s15, [r7, #12]
 8003456:	e025      	b.n	80034a4 <HAL_SPI_TxRxCpltCallback+0xdc>
		else if(((int32_t)data_encoders.Encoder1_pos - last_pos) < -180000)velocity_temp = ((int32_t)data_encoders.Encoder1_pos-last_pos + 360000);
 8003458:	4b54      	ldr	r3, [pc, #336]	; (80035ac <HAL_SPI_TxRxCpltCallback+0x1e4>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	461a      	mov	r2, r3
 800345e:	4b54      	ldr	r3, [pc, #336]	; (80035b0 <HAL_SPI_TxRxCpltCallback+0x1e8>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	4a54      	ldr	r2, [pc, #336]	; (80035b8 <HAL_SPI_TxRxCpltCallback+0x1f0>)
 8003466:	4293      	cmp	r3, r2
 8003468:	da10      	bge.n	800348c <HAL_SPI_TxRxCpltCallback+0xc4>
 800346a:	4b50      	ldr	r3, [pc, #320]	; (80035ac <HAL_SPI_TxRxCpltCallback+0x1e4>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	461a      	mov	r2, r3
 8003470:	4b4f      	ldr	r3, [pc, #316]	; (80035b0 <HAL_SPI_TxRxCpltCallback+0x1e8>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	f503 23af 	add.w	r3, r3, #358400	; 0x57800
 800347a:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800347e:	ee07 3a90 	vmov	s15, r3
 8003482:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003486:	edc7 7a03 	vstr	s15, [r7, #12]
 800348a:	e00b      	b.n	80034a4 <HAL_SPI_TxRxCpltCallback+0xdc>
		else velocity_temp = ((int32_t)data_encoders.Encoder1_pos-last_pos);
 800348c:	4b47      	ldr	r3, [pc, #284]	; (80035ac <HAL_SPI_TxRxCpltCallback+0x1e4>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	461a      	mov	r2, r3
 8003492:	4b47      	ldr	r3, [pc, #284]	; (80035b0 <HAL_SPI_TxRxCpltCallback+0x1e8>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	ee07 3a90 	vmov	s15, r3
 800349c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034a0:	edc7 7a03 	vstr	s15, [r7, #12]
		last_pos = (int32_t)data_encoders.Encoder1_pos;
 80034a4:	4b41      	ldr	r3, [pc, #260]	; (80035ac <HAL_SPI_TxRxCpltCallback+0x1e4>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	461a      	mov	r2, r3
 80034aa:	4b41      	ldr	r3, [pc, #260]	; (80035b0 <HAL_SPI_TxRxCpltCallback+0x1e8>)
 80034ac:	601a      	str	r2, [r3, #0]

		velocity_accumulate += velocity_temp;
 80034ae:	4b43      	ldr	r3, [pc, #268]	; (80035bc <HAL_SPI_TxRxCpltCallback+0x1f4>)
 80034b0:	ed93 7a00 	vldr	s14, [r3]
 80034b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80034b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034bc:	4b3f      	ldr	r3, [pc, #252]	; (80035bc <HAL_SPI_TxRxCpltCallback+0x1f4>)
 80034be:	edc3 7a00 	vstr	s15, [r3]
		velocity_accumulate -= velocity_array[velocity_index];
 80034c2:	4b3e      	ldr	r3, [pc, #248]	; (80035bc <HAL_SPI_TxRxCpltCallback+0x1f4>)
 80034c4:	ed93 7a00 	vldr	s14, [r3]
 80034c8:	4b3d      	ldr	r3, [pc, #244]	; (80035c0 <HAL_SPI_TxRxCpltCallback+0x1f8>)
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	4a3d      	ldr	r2, [pc, #244]	; (80035c4 <HAL_SPI_TxRxCpltCallback+0x1fc>)
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	edd3 7a00 	vldr	s15, [r3]
 80034d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034da:	4b38      	ldr	r3, [pc, #224]	; (80035bc <HAL_SPI_TxRxCpltCallback+0x1f4>)
 80034dc:	edc3 7a00 	vstr	s15, [r3]
		velocity_array[velocity_index] = velocity_temp;
 80034e0:	4b37      	ldr	r3, [pc, #220]	; (80035c0 <HAL_SPI_TxRxCpltCallback+0x1f8>)
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	4a37      	ldr	r2, [pc, #220]	; (80035c4 <HAL_SPI_TxRxCpltCallback+0x1fc>)
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	4413      	add	r3, r2
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	601a      	str	r2, [r3, #0]
		velocity_index++;
 80034ee:	4b34      	ldr	r3, [pc, #208]	; (80035c0 <HAL_SPI_TxRxCpltCallback+0x1f8>)
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	3301      	adds	r3, #1
 80034f4:	b2da      	uxtb	r2, r3
 80034f6:	4b32      	ldr	r3, [pc, #200]	; (80035c0 <HAL_SPI_TxRxCpltCallback+0x1f8>)
 80034f8:	701a      	strb	r2, [r3, #0]
		if (velocity_index == velocity_lpf_size)velocity_index = 0;
 80034fa:	4b31      	ldr	r3, [pc, #196]	; (80035c0 <HAL_SPI_TxRxCpltCallback+0x1f8>)
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	2b64      	cmp	r3, #100	; 0x64
 8003500:	d102      	bne.n	8003508 <HAL_SPI_TxRxCpltCallback+0x140>
 8003502:	4b2f      	ldr	r3, [pc, #188]	; (80035c0 <HAL_SPI_TxRxCpltCallback+0x1f8>)
 8003504:	2200      	movs	r2, #0
 8003506:	701a      	strb	r2, [r3, #0]

		data_encoders.Velocity = (int32_t)((velocity_accumulate*10000.0f*60.0f)/360.0f/velocity_lpf_size);
 8003508:	4b2c      	ldr	r3, [pc, #176]	; (80035bc <HAL_SPI_TxRxCpltCallback+0x1f4>)
 800350a:	edd3 7a00 	vldr	s15, [r3]
 800350e:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80035c8 <HAL_SPI_TxRxCpltCallback+0x200>
 8003512:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003516:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80035cc <HAL_SPI_TxRxCpltCallback+0x204>
 800351a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800351e:	eddf 6a2c 	vldr	s13, [pc, #176]	; 80035d0 <HAL_SPI_TxRxCpltCallback+0x208>
 8003522:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003526:	eddf 6a2b 	vldr	s13, [pc, #172]	; 80035d4 <HAL_SPI_TxRxCpltCallback+0x20c>
 800352a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800352e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003532:	ee17 2a90 	vmov	r2, s15
 8003536:	4b1d      	ldr	r3, [pc, #116]	; (80035ac <HAL_SPI_TxRxCpltCallback+0x1e4>)
 8003538:	615a      	str	r2, [r3, #20]
		data_encoders.Encoder1_temp_x10 = (int16_t)(((uint16_t)(SPI1_rx_buff[2] << 8 | (SPI1_rx_buff[3]))));
 800353a:	4b1b      	ldr	r3, [pc, #108]	; (80035a8 <HAL_SPI_TxRxCpltCallback+0x1e0>)
 800353c:	789b      	ldrb	r3, [r3, #2]
 800353e:	021b      	lsls	r3, r3, #8
 8003540:	b21a      	sxth	r2, r3
 8003542:	4b19      	ldr	r3, [pc, #100]	; (80035a8 <HAL_SPI_TxRxCpltCallback+0x1e0>)
 8003544:	78db      	ldrb	r3, [r3, #3]
 8003546:	b21b      	sxth	r3, r3
 8003548:	4313      	orrs	r3, r2
 800354a:	b21a      	sxth	r2, r3
 800354c:	4b17      	ldr	r3, [pc, #92]	; (80035ac <HAL_SPI_TxRxCpltCallback+0x1e4>)
 800354e:	831a      	strh	r2, [r3, #24]
	}
	if (hspi == &hspi3) {
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a21      	ldr	r2, [pc, #132]	; (80035d8 <HAL_SPI_TxRxCpltCallback+0x210>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d11a      	bne.n	800358e <HAL_SPI_TxRxCpltCallback+0x1c6>
		HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 1);
 8003558:	2201      	movs	r2, #1
 800355a:	2104      	movs	r1, #4
 800355c:	481f      	ldr	r0, [pc, #124]	; (80035dc <HAL_SPI_TxRxCpltCallback+0x214>)
 800355e:	f004 f8b7 	bl	80076d0 <HAL_GPIO_WritePin>
		data_encoders.Encoder2_temp_x10 = (SPI3_rx_buff[3] << 8) | (SPI3_rx_buff[2]);
 8003562:	4b1f      	ldr	r3, [pc, #124]	; (80035e0 <HAL_SPI_TxRxCpltCallback+0x218>)
 8003564:	78db      	ldrb	r3, [r3, #3]
 8003566:	021b      	lsls	r3, r3, #8
 8003568:	b21a      	sxth	r2, r3
 800356a:	4b1d      	ldr	r3, [pc, #116]	; (80035e0 <HAL_SPI_TxRxCpltCallback+0x218>)
 800356c:	789b      	ldrb	r3, [r3, #2]
 800356e:	b21b      	sxth	r3, r3
 8003570:	4313      	orrs	r3, r2
 8003572:	b21a      	sxth	r2, r3
 8003574:	4b0d      	ldr	r3, [pc, #52]	; (80035ac <HAL_SPI_TxRxCpltCallback+0x1e4>)
 8003576:	835a      	strh	r2, [r3, #26]
		data_encoders.Encoder2_pos = (SPI3_rx_buff[0] << 6) | (SPI3_rx_buff[1] >> 2);
 8003578:	4b19      	ldr	r3, [pc, #100]	; (80035e0 <HAL_SPI_TxRxCpltCallback+0x218>)
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	019b      	lsls	r3, r3, #6
 800357e:	4a18      	ldr	r2, [pc, #96]	; (80035e0 <HAL_SPI_TxRxCpltCallback+0x218>)
 8003580:	7852      	ldrb	r2, [r2, #1]
 8003582:	0892      	lsrs	r2, r2, #2
 8003584:	b2d2      	uxtb	r2, r2
 8003586:	4313      	orrs	r3, r2
 8003588:	461a      	mov	r2, r3
 800358a:	4b08      	ldr	r3, [pc, #32]	; (80035ac <HAL_SPI_TxRxCpltCallback+0x1e4>)
 800358c:	605a      	str	r2, [r3, #4]

	}
	//data_encoders.Calculated_pos = 10;

	Encoders_IRQ_callback(&data_encoders);
 800358e:	4b15      	ldr	r3, [pc, #84]	; (80035e4 <HAL_SPI_TxRxCpltCallback+0x21c>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4806      	ldr	r0, [pc, #24]	; (80035ac <HAL_SPI_TxRxCpltCallback+0x1e4>)
 8003594:	4798      	blx	r3
}
 8003596:	bf00      	nop
 8003598:	3710      	adds	r7, #16
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	20001c54 	.word	0x20001c54
 80035a4:	48000400 	.word	0x48000400
 80035a8:	20000f24 	.word	0x20000f24
 80035ac:	20000f40 	.word	0x20000f40
 80035b0:	20000f60 	.word	0x20000f60
 80035b4:	0002bf20 	.word	0x0002bf20
 80035b8:	fffd40e0 	.word	0xfffd40e0
 80035bc:	20000f5c 	.word	0x20000f5c
 80035c0:	20000f64 	.word	0x20000f64
 80035c4:	20000f68 	.word	0x20000f68
 80035c8:	461c4000 	.word	0x461c4000
 80035cc:	42700000 	.word	0x42700000
 80035d0:	43b40000 	.word	0x43b40000
 80035d4:	42c80000 	.word	0x42c80000
 80035d8:	20001cb8 	.word	0x20001cb8
 80035dc:	48000c00 	.word	0x48000c00
 80035e0:	20000f34 	.word	0x20000f34
 80035e4:	20000f3c 	.word	0x20000f3c

080035e8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, 0);
 80035f0:	2200      	movs	r2, #0
 80035f2:	2140      	movs	r1, #64	; 0x40
 80035f4:	480b      	ldr	r0, [pc, #44]	; (8003624 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80035f6:	f004 f86b 	bl	80076d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, 0);
 80035fa:	2200      	movs	r2, #0
 80035fc:	2104      	movs	r1, #4
 80035fe:	480a      	ldr	r0, [pc, #40]	; (8003628 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003600:	f004 f866 	bl	80076d0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA(&hspi1, SPI1_tx_buff, SPI1_rx_buff, ORBIS_SPI_SIZE);
 8003604:	2305      	movs	r3, #5
 8003606:	4a09      	ldr	r2, [pc, #36]	; (800362c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8003608:	4909      	ldr	r1, [pc, #36]	; (8003630 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800360a:	480a      	ldr	r0, [pc, #40]	; (8003634 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800360c:	f005 f866 	bl	80086dc <HAL_SPI_TransmitReceive_DMA>
	HAL_SPI_TransmitReceive_DMA(&hspi3, SPI3_tx_buff, SPI3_rx_buff, ORBIS_SPI_SIZE);
 8003610:	2305      	movs	r3, #5
 8003612:	4a09      	ldr	r2, [pc, #36]	; (8003638 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8003614:	4909      	ldr	r1, [pc, #36]	; (800363c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8003616:	480a      	ldr	r0, [pc, #40]	; (8003640 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8003618:	f005 f860 	bl	80086dc <HAL_SPI_TransmitReceive_DMA>
}
 800361c:	bf00      	nop
 800361e:	3708      	adds	r7, #8
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	48000400 	.word	0x48000400
 8003628:	48000c00 	.word	0x48000c00
 800362c:	20000f24 	.word	0x20000f24
 8003630:	20000f1c 	.word	0x20000f1c
 8003634:	20001c54 	.word	0x20001c54
 8003638:	20000f34 	.word	0x20000f34
 800363c:	20000f2c 	.word	0x20000f2c
 8003640:	20001cb8 	.word	0x20001cb8

08003644 <flash_write>:

Flash* flash_read(uint32_t address){
    return (Flash*)address;
}

void flash_write(uint32_t page, uint64_t data[], uint32_t size){
 8003644:	b580      	push	{r7, lr}
 8003646:	b08c      	sub	sp, #48	; 0x30
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
	uint32_t PageError;
	FLASH_EraseInitTypeDef pEraseInit = {
 8003650:	2300      	movs	r3, #0
 8003652:	617b      	str	r3, [r7, #20]
 8003654:	2301      	movs	r3, #1
 8003656:	61bb      	str	r3, [r7, #24]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	61fb      	str	r3, [r7, #28]
 800365c:	2301      	movs	r3, #1
 800365e:	623b      	str	r3, [r7, #32]
			.NbPages = 1,
			.Page = page,
			.TypeErase = FLASH_TYPEERASE_PAGES
	};

	HAL_FLASH_Unlock();
 8003660:	f003 fd94 	bl	800718c <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 8003664:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003668:	f107 0314 	add.w	r3, r7, #20
 800366c:	4611      	mov	r1, r2
 800366e:	4618      	mov	r0, r3
 8003670:	f003 fe7e 	bl	8007370 <HAL_FLASHEx_Erase>

    for(int i = 0; i < size/sizeof(uint64_t); i++){
 8003674:	2300      	movs	r3, #0
 8003676:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003678:	e014      	b.n	80036a4 <flash_write+0x60>
    	uint32_t address = FLASH_BASE + PAGE_SIZE*page + i*sizeof(uint64_t);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003680:	021a      	lsls	r2, r3, #8
 8003682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003684:	4413      	add	r3, r2
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	62bb      	str	r3, [r7, #40]	; 0x28
    	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,address, data[i]);
 800368a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800368c:	00db      	lsls	r3, r3, #3
 800368e:	68ba      	ldr	r2, [r7, #8]
 8003690:	4413      	add	r3, r2
 8003692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003696:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003698:	2000      	movs	r0, #0
 800369a:	f003 fdc7 	bl	800722c <HAL_FLASH_Program>
    for(int i = 0; i < size/sizeof(uint64_t); i++){
 800369e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a0:	3301      	adds	r3, #1
 80036a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	08da      	lsrs	r2, r3, #3
 80036a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d8e5      	bhi.n	800367a <flash_write+0x36>
    }
    HAL_FLASH_Lock();
 80036ae:	f003 fd81 	bl	80071b4 <HAL_FLASH_Lock>
}
 80036b2:	bf00      	nop
 80036b4:	3730      	adds	r7, #48	; 0x30
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
	...

080036bc <Flash_init>:

void Flash_init(){
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
	if (memcmp(ptr, &RAM, RAM_COMPARE)){
 80036c0:	4b11      	ldr	r3, [pc, #68]	; (8003708 <Flash_init+0x4c>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	225e      	movs	r2, #94	; 0x5e
 80036c6:	4911      	ldr	r1, [pc, #68]	; (800370c <Flash_init+0x50>)
 80036c8:	4618      	mov	r0, r3
 80036ca:	f007 fe3d 	bl	800b348 <memcmp>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00f      	beq.n	80036f4 <Flash_init+0x38>
		memcpy(&Stored_in_RAM, ptr, sizeof(Flash));
 80036d4:	4b0c      	ldr	r3, [pc, #48]	; (8003708 <Flash_init+0x4c>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f44f 6297 	mov.w	r2, #1208	; 0x4b8
 80036dc:	4619      	mov	r1, r3
 80036de:	480c      	ldr	r0, [pc, #48]	; (8003710 <Flash_init+0x54>)
 80036e0:	f007 fec1 	bl	800b466 <memcpy>
		memcpy(&Stored_in_RAM, &RAM, RAM_COMPARE);
 80036e4:	225e      	movs	r2, #94	; 0x5e
 80036e6:	4909      	ldr	r1, [pc, #36]	; (800370c <Flash_init+0x50>)
 80036e8:	4809      	ldr	r0, [pc, #36]	; (8003710 <Flash_init+0x54>)
 80036ea:	f007 febc 	bl	800b466 <memcpy>
		Flash_save();
 80036ee:	f000 f811 	bl	8003714 <Flash_save>
	}
	else memcpy(&Stored_in_RAM, ptr, sizeof(Flash));
}
 80036f2:	e007      	b.n	8003704 <Flash_init+0x48>
	else memcpy(&Stored_in_RAM, ptr, sizeof(Flash));
 80036f4:	4b04      	ldr	r3, [pc, #16]	; (8003708 <Flash_init+0x4c>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f44f 6297 	mov.w	r2, #1208	; 0x4b8
 80036fc:	4619      	mov	r1, r3
 80036fe:	4804      	ldr	r0, [pc, #16]	; (8003710 <Flash_init+0x54>)
 8003700:	f007 feb1 	bl	800b466 <memcpy>
}
 8003704:	bf00      	nop
 8003706:	bd80      	pop	{r7, pc}
 8003708:	2000008c 	.word	0x2000008c
 800370c:	20000090 	.word	0x20000090
 8003710:	200010f8 	.word	0x200010f8

08003714 <Flash_save>:

void Flash_save(){
 8003714:	b580      	push	{r7, lr}
 8003716:	af00      	add	r7, sp, #0
	flash_write(PAGE_NUMBER, (uint64_t*)&Stored_in_RAM, sizeof(Flash));
 8003718:	f44f 6297 	mov.w	r2, #1208	; 0x4b8
 800371c:	4902      	ldr	r1, [pc, #8]	; (8003728 <Flash_save+0x14>)
 800371e:	203f      	movs	r0, #63	; 0x3f
 8003720:	f7ff ff90 	bl	8003644 <flash_write>
}
 8003724:	bf00      	nop
 8003726:	bd80      	pop	{r7, pc}
 8003728:	200010f8 	.word	0x200010f8

0800372c <Flash_get_values>:

Flash *Flash_get_values(){
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
	return &Stored_in_RAM; //*ptr;// = flash_read(FLASH_BASE + PAGE_SIZE*PAGE_NUMBER);
 8003730:	4b02      	ldr	r3, [pc, #8]	; (800373c <Flash_get_values+0x10>)
}
 8003732:	4618      	mov	r0, r3
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr
 800373c:	200010f8 	.word	0x200010f8

08003740 <Compute>:
#include "PID.h"

#include <stdio.h>

void Compute(PID_instance *val)
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
	if(!val->inAuto) return;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800374e:	2b00      	cmp	r3, #0
 8003750:	f000 80a2 	beq.w	8003898 <Compute+0x158>
	/*Compute all the working error variables*/
	float error = val->Setpoint - val->Input;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	ed93 7a02 	vldr	s14, [r3, #8]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	edd3 7a00 	vldr	s15, [r3]
 8003760:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003764:	edc7 7a03 	vstr	s15, [r7, #12]
	float dInput = (val->Input - val->lastInput);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	ed93 7a00 	vldr	s14, [r3]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	edd3 7a04 	vldr	s15, [r3, #16]
 8003774:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003778:	edc7 7a02 	vstr	s15, [r7, #8]
	val->outputSum+= (val->ki * error);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	ed93 7a03 	vldr	s14, [r3, #12]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	edd3 6a06 	vldr	s13, [r3, #24]
 8003788:	edd7 7a03 	vldr	s15, [r7, #12]
 800378c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003790:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	edc3 7a03 	vstr	s15, [r3, #12]

	/*Add Proportional on Measurement, if P_ON_M is specified*/
	if(val->pOnM) val->outputSum-= val->pOnMKp * dInput;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00e      	beq.n	80037c2 <Compute+0x82>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	ed93 7a03 	vldr	s14, [r3, #12]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 80037b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80037b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	edc3 7a03 	vstr	s15, [r3, #12]

	if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	ed93 7a03 	vldr	s14, [r3, #12]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80037ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037d6:	dd04      	ble.n	80037e2 <Compute+0xa2>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	60da      	str	r2, [r3, #12]
 80037e0:	e00e      	b.n	8003800 <Compute+0xc0>
	else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	ed93 7a03 	vldr	s14, [r3, #12]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	edd3 7a08 	vldr	s15, [r3, #32]
 80037ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037f6:	d503      	bpl.n	8003800 <Compute+0xc0>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a1a      	ldr	r2, [r3, #32]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	60da      	str	r2, [r3, #12]

	/*Add Proportional on Error, if P_ON_E is specified*/
	if(val->pOnE) val->Output = val->pOnEKp * error;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00a      	beq.n	8003820 <Compute+0xe0>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8003810:	edd7 7a03 	vldr	s15, [r7, #12]
 8003814:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	edc3 7a01 	vstr	s15, [r3, #4]
 800381e:	e003      	b.n	8003828 <Compute+0xe8>
	else val->Output = 0;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f04f 0200 	mov.w	r2, #0
 8003826:	605a      	str	r2, [r3, #4]

	/*Compute Rest of PID Output*/
	val->Output += val->outputSum - val->kd * dInput;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	ed93 7a01 	vldr	s14, [r3, #4]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	edd3 6a03 	vldr	s13, [r3, #12]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	ed93 6a07 	vldr	s12, [r3, #28]
 800383a:	edd7 7a02 	vldr	s15, [r7, #8]
 800383e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003842:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003846:	ee77 7a27 	vadd.f32	s15, s14, s15
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	edc3 7a01 	vstr	s15, [r3, #4]

	if(val->Output > val->outMax) val->Output = val->outMax;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	ed93 7a01 	vldr	s14, [r3, #4]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800385c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003864:	dd04      	ble.n	8003870 <Compute+0x130>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	605a      	str	r2, [r3, #4]
 800386e:	e00e      	b.n	800388e <Compute+0x14e>
	else if(val->Output < val->outMin) val->Output = val->outMin;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	ed93 7a01 	vldr	s14, [r3, #4]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	edd3 7a08 	vldr	s15, [r3, #32]
 800387c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003884:	d503      	bpl.n	800388e <Compute+0x14e>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a1a      	ldr	r2, [r3, #32]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	605a      	str	r2, [r3, #4]

	/*Remember some variables for next time*/
	val->lastInput = val->Input;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	611a      	str	r2, [r3, #16]
 8003896:	e000      	b.n	800389a <Compute+0x15a>
	if(!val->inAuto) return;
 8003898:	bf00      	nop
}
 800389a:	3714      	adds	r7, #20
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <SetTunings>:

void SetTunings(PID_instance *val, float Kp, float Ki, float Kd, float pOn)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b089      	sub	sp, #36	; 0x24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6178      	str	r0, [r7, #20]
 80038ac:	ed87 0a04 	vstr	s0, [r7, #16]
 80038b0:	edc7 0a03 	vstr	s1, [r7, #12]
 80038b4:	ed87 1a02 	vstr	s2, [r7, #8]
 80038b8:	edc7 1a01 	vstr	s3, [r7, #4]
   if (Kp<0 || Ki<0|| Kd<0 || pOn<0 || pOn>1) return;
 80038bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80038c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80038c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038c8:	f100 809b 	bmi.w	8003a02 <SetTunings+0x15e>
 80038cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80038d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80038d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038d8:	f100 8093 	bmi.w	8003a02 <SetTunings+0x15e>
 80038dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80038e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80038e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038e8:	f100 808b 	bmi.w	8003a02 <SetTunings+0x15e>
 80038ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80038f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80038f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038f8:	f100 8083 	bmi.w	8003a02 <SetTunings+0x15e>
 80038fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8003900:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003904:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800390c:	dc79      	bgt.n	8003a02 <SetTunings+0x15e>

   val->pOnE = pOn>0; //some p on error is desired;
 800390e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003912:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800391a:	bfcc      	ite	gt
 800391c:	2301      	movgt	r3, #1
 800391e:	2300      	movle	r3, #0
 8003920:	b2db      	uxtb	r3, r3
 8003922:	461a      	mov	r2, r3
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
   val->pOnM = pOn<1; //some p on measurement is desired;
 800392a:	edd7 7a01 	vldr	s15, [r7, #4]
 800392e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003932:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800393a:	bf4c      	ite	mi
 800393c:	2301      	movmi	r3, #1
 800393e:	2300      	movpl	r3, #0
 8003940:	b2db      	uxtb	r3, r3
 8003942:	461a      	mov	r2, r3
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

   float SampleTimeInSec = ((float)val->SampleTime)/1000000;
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394e:	ee07 3a90 	vmov	s15, r3
 8003952:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003956:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8003a10 <SetTunings+0x16c>
 800395a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800395e:	edc7 7a07 	vstr	s15, [r7, #28]
   val->kp = Kp;
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	615a      	str	r2, [r3, #20]
   val->ki = Ki * SampleTimeInSec;
 8003968:	ed97 7a03 	vldr	s14, [r7, #12]
 800396c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003970:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	edc3 7a06 	vstr	s15, [r3, #24]
   val->kd = Kd / SampleTimeInSec;
 800397a:	edd7 6a02 	vldr	s13, [r7, #8]
 800397e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003982:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	edc3 7a07 	vstr	s15, [r3, #28]

  if(val->controllerDirection ==REVERSE)
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003990:	2b01      	cmp	r3, #1
 8003992:	d11d      	bne.n	80039d0 <SetTunings+0x12c>
   {
	  val->kp = (0 - val->kp);
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	edd3 7a05 	vldr	s15, [r3, #20]
 800399a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8003a14 <SetTunings+0x170>
 800399e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	edc3 7a05 	vstr	s15, [r3, #20]
	  val->ki = (0 - val->ki);
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	edd3 7a06 	vldr	s15, [r3, #24]
 80039ae:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003a14 <SetTunings+0x170>
 80039b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	edc3 7a06 	vstr	s15, [r3, #24]
	  val->kd = (0 - val->kd);
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	edd3 7a07 	vldr	s15, [r3, #28]
 80039c2:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003a14 <SetTunings+0x170>
 80039c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	edc3 7a07 	vstr	s15, [r3, #28]
   }

  val->pOnEKp = pOn * val->kp;
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	ed93 7a05 	vldr	s14, [r3, #20]
 80039d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80039da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
  val->pOnMKp = (1 - pOn) * val->kp;
 80039e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80039ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	edd3 7a05 	vldr	s15, [r3, #20]
 80039f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 8003a00:	e000      	b.n	8003a04 <SetTunings+0x160>
   if (Kp<0 || Ki<0|| Kd<0 || pOn<0 || pOn>1) return;
 8003a02:	bf00      	nop
}
 8003a04:	3724      	adds	r7, #36	; 0x24
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	49742400 	.word	0x49742400
 8003a14:	00000000 	.word	0x00000000

08003a18 <SetSampleTime>:

void SetSampleTime(PID_instance *val, int NewSampleTime)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
   if (NewSampleTime > 0)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	dd25      	ble.n	8003a74 <SetSampleTime+0x5c>
   {
      float ratio  = (float)NewSampleTime
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	ee07 3a90 	vmov	s15, r3
 8003a2e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
                      / (float)val->SampleTime;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a36:	ee07 3a90 	vmov	s15, r3
 8003a3a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
      float ratio  = (float)NewSampleTime
 8003a3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a42:	edc7 7a03 	vstr	s15, [r7, #12]
      val->ki *= ratio;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	ed93 7a06 	vldr	s14, [r3, #24]
 8003a4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	edc3 7a06 	vstr	s15, [r3, #24]
      val->kd /= ratio;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	edd3 6a07 	vldr	s13, [r3, #28]
 8003a60:	ed97 7a03 	vldr	s14, [r7, #12]
 8003a64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	edc3 7a07 	vstr	s15, [r3, #28]
      val->SampleTime = (unsigned long)NewSampleTime;
 8003a6e:	683a      	ldr	r2, [r7, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	629a      	str	r2, [r3, #40]	; 0x28
   }
}
 8003a74:	bf00      	nop
 8003a76:	3714      	adds	r7, #20
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <SetOutputLimits>:

void SetOutputLimits(PID_instance *val, float Min, float Max)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	ed87 0a02 	vstr	s0, [r7, #8]
 8003a8c:	edc7 0a01 	vstr	s1, [r7, #4]
   if(Min > Max) return;
 8003a90:	ed97 7a02 	vldr	s14, [r7, #8]
 8003a94:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aa0:	dc44      	bgt.n	8003b2c <SetOutputLimits+0xac>
   val->outMin = Min;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	68ba      	ldr	r2, [r7, #8]
 8003aa6:	621a      	str	r2, [r3, #32]
   val->outMax = Max;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	625a      	str	r2, [r3, #36]	; 0x24

   if(val->Output > val->outMax) val->Output = val->outMax;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	ed93 7a01 	vldr	s14, [r3, #4]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003aba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ac2:	dd04      	ble.n	8003ace <SetOutputLimits+0x4e>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	605a      	str	r2, [r3, #4]
 8003acc:	e00e      	b.n	8003aec <SetOutputLimits+0x6c>
   else if(val->Output < val->outMin) val->Output = val->outMin;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	ed93 7a01 	vldr	s14, [r3, #4]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	edd3 7a08 	vldr	s15, [r3, #32]
 8003ada:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ae2:	d503      	bpl.n	8003aec <SetOutputLimits+0x6c>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6a1a      	ldr	r2, [r3, #32]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	605a      	str	r2, [r3, #4]

   if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	ed93 7a03 	vldr	s14, [r3, #12]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003af8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b00:	dd04      	ble.n	8003b0c <SetOutputLimits+0x8c>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	60da      	str	r2, [r3, #12]
 8003b0a:	e010      	b.n	8003b2e <SetOutputLimits+0xae>
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	ed93 7a03 	vldr	s14, [r3, #12]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	edd3 7a08 	vldr	s15, [r3, #32]
 8003b18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b20:	d505      	bpl.n	8003b2e <SetOutputLimits+0xae>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6a1a      	ldr	r2, [r3, #32]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	60da      	str	r2, [r3, #12]
 8003b2a:	e000      	b.n	8003b2e <SetOutputLimits+0xae>
   if(Min > Max) return;
 8003b2c:	bf00      	nop
}
 8003b2e:	3714      	adds	r7, #20
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <SetMode>:

void SetMode(PID_instance *val, int Mode)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
    uint8_t newAuto = (Mode == AUTOMATIC);
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	bf0c      	ite	eq
 8003b48:	2301      	moveq	r3, #1
 8003b4a:	2300      	movne	r3, #0
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	73fb      	strb	r3, [r7, #15]
    if(newAuto == !val->inAuto)
 8003b50:	7bfb      	ldrb	r3, [r7, #15]
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8003b58:	2a00      	cmp	r2, #0
 8003b5a:	bf0c      	ite	eq
 8003b5c:	2201      	moveq	r2, #1
 8003b5e:	2200      	movne	r2, #0
 8003b60:	b2d2      	uxtb	r2, r2
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d102      	bne.n	8003b6c <SetMode+0x34>
    {  /*we just went from manual to auto*/
        Initialize(val);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f808 	bl	8003b7c <Initialize>
    }
    val->inAuto = newAuto;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	7bfa      	ldrb	r2, [r7, #15]
 8003b70:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8003b74:	bf00      	nop
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <Initialize>:

void Initialize(PID_instance *val)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
	val->lastInput = val->Input;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	611a      	str	r2, [r3, #16]
	val->outputSum = val->Output;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685a      	ldr	r2, [r3, #4]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	60da      	str	r2, [r3, #12]
   if(val->outputSum > val->outMax) val->outputSum= val->outMax;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	ed93 7a03 	vldr	s14, [r3, #12]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003ba0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ba8:	dd04      	ble.n	8003bb4 <Initialize+0x38>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	60da      	str	r2, [r3, #12]
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
}
 8003bb2:	e00f      	b.n	8003bd4 <Initialize+0x58>
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	ed93 7a03 	vldr	s14, [r3, #12]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	edd3 7a08 	vldr	s15, [r3, #32]
 8003bc0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bc8:	d400      	bmi.n	8003bcc <Initialize+0x50>
}
 8003bca:	e003      	b.n	8003bd4 <Initialize+0x58>
   else if(val->outputSum < val->outMin) val->outputSum= val->outMin;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a1a      	ldr	r2, [r3, #32]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	60da      	str	r2, [r3, #12]
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <SetControllerDirection>:

void SetControllerDirection(PID_instance *val, int Direction)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
	val->controllerDirection = Direction;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	683a      	ldr	r2, [r7, #0]
 8003bee:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <PrintServerPrintf>:
/* For convenience, define a pointer to UART handle */
UART_HandleTypeDef *uart_handle_p = &huart1;

volatile uint8_t buff[PRINT_BUFFER_SIZE];
void PrintServerPrintf(const char *fmt, ...)
{
 8003bfc:	b40f      	push	{r0, r1, r2, r3}
 8003bfe:	b590      	push	{r4, r7, lr}
 8003c00:	b083      	sub	sp, #12
 8003c02:	af00      	add	r7, sp, #0
/* local variable to store the final text string to be sent to UART */

/* va_list is a type to hold information about variable arguments */
va_list args;
/* va_start must be called before accessing variable argument list */
va_start(args, fmt);
 8003c04:	f107 031c 	add.w	r3, r7, #28
 8003c08:	607b      	str	r3, [r7, #4]
*
* The vsnprintf() function converts each entry in the argument list
* according to the corresponding format specifier in format. The format has
* the same form and function as the format string for the printf()
* function. */
vsnprintf((char *)buff, PRINT_BUFFER_SIZE, fmt, args);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c12:	480b      	ldr	r0, [pc, #44]	; (8003c40 <PrintServerPrintf+0x44>)
 8003c14:	f007 fb8a 	bl	800b32c <vsniprintf>
/* va_end should be executed before the function returns whenever
* va_start has been previously used in that function */
va_end(args);
HAL_UART_Transmit_DMA(uart_handle_p, (uint8_t *)buff, strlen((char *)buff));
 8003c18:	4b0a      	ldr	r3, [pc, #40]	; (8003c44 <PrintServerPrintf+0x48>)
 8003c1a:	681c      	ldr	r4, [r3, #0]
 8003c1c:	4808      	ldr	r0, [pc, #32]	; (8003c40 <PrintServerPrintf+0x44>)
 8003c1e:	f7fc fb4f 	bl	80002c0 <strlen>
 8003c22:	4603      	mov	r3, r0
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	461a      	mov	r2, r3
 8003c28:	4905      	ldr	r1, [pc, #20]	; (8003c40 <PrintServerPrintf+0x44>)
 8003c2a:	4620      	mov	r0, r4
 8003c2c:	f005 ffee 	bl	8009c0c <HAL_UART_Transmit_DMA>
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003c3a:	b004      	add	sp, #16
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	200015b0 	.word	0x200015b0
 8003c44:	20000548 	.word	0x20000548

08003c48 <dac_value>:
#define Vref 3000

uint16_t calibrating = 0;
volatile uint32_t Voltage_offset_temp[3] = {0};

void dac_value(uint16_t V_dac){
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	4603      	mov	r3, r0
 8003c50:	80fb      	strh	r3, [r7, #6]
	uint16_t dac_value = ((V_dac*ADC_RES)/VDDA);
 8003c52:	88fa      	ldrh	r2, [r7, #6]
 8003c54:	4613      	mov	r3, r2
 8003c56:	031b      	lsls	r3, r3, #12
 8003c58:	1a9b      	subs	r3, r3, r2
 8003c5a:	4a08      	ldr	r2, [pc, #32]	; (8003c7c <dac_value+0x34>)
 8003c5c:	8812      	ldrh	r2, [r2, #0]
 8003c5e:	b212      	sxth	r2, r2
 8003c60:	fb93 f3f2 	sdiv	r3, r3, r2
 8003c64:	81fb      	strh	r3, [r7, #14]
	HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
 8003c66:	89fb      	ldrh	r3, [r7, #14]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	4804      	ldr	r0, [pc, #16]	; (8003c80 <dac_value+0x38>)
 8003c6e:	f002 fc27 	bl	80064c0 <HAL_DAC_SetValue>
}
 8003c72:	bf00      	nop
 8003c74:	3710      	adds	r7, #16
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	200017fc 	.word	0x200017fc
 8003c80:	20001a24 	.word	0x20001a24

08003c84 <ADC_CAL>:
    // Calculate the magnitude of the vector sum
    float magnitude = sqrt(sum.real * sum.real + sum.imag * sum.imag);
    return magnitude;
}

void ADC_CAL(){
 8003c84:	b480      	push	{r7}
 8003c86:	af00      	add	r7, sp, #0
	VDDA = (int16_t)3000*(*vrefint)/(adc_result_DMA[3]/number_of_oversample);
 8003c88:	4b4b      	ldr	r3, [pc, #300]	; (8003db8 <ADC_CAL+0x134>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	881b      	ldrh	r3, [r3, #0]
 8003c8e:	461a      	mov	r2, r3
 8003c90:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003c94:	fb02 f303 	mul.w	r3, r2, r3
 8003c98:	461a      	mov	r2, r3
 8003c9a:	4b48      	ldr	r3, [pc, #288]	; (8003dbc <ADC_CAL+0x138>)
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	091b      	lsrs	r3, r3, #4
 8003ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca4:	b21a      	sxth	r2, r3
 8003ca6:	4b46      	ldr	r3, [pc, #280]	; (8003dc0 <ADC_CAL+0x13c>)
 8003ca8:	801a      	strh	r2, [r3, #0]
	Voltage_offset_temp[0] += (int32_t)((adc_result_DMA[2]/number_of_oversample*VDDA)/4095)*153/100; //*153/100
 8003caa:	4b44      	ldr	r3, [pc, #272]	; (8003dbc <ADC_CAL+0x138>)
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	091b      	lsrs	r3, r3, #4
 8003cb0:	4a43      	ldr	r2, [pc, #268]	; (8003dc0 <ADC_CAL+0x13c>)
 8003cb2:	8812      	ldrh	r2, [r2, #0]
 8003cb4:	b212      	sxth	r2, r2
 8003cb6:	fb03 f202 	mul.w	r2, r3, r2
 8003cba:	4b42      	ldr	r3, [pc, #264]	; (8003dc4 <ADC_CAL+0x140>)
 8003cbc:	fba3 1302 	umull	r1, r3, r3, r2
 8003cc0:	1ad2      	subs	r2, r2, r3
 8003cc2:	0852      	lsrs	r2, r2, #1
 8003cc4:	4413      	add	r3, r2
 8003cc6:	0adb      	lsrs	r3, r3, #11
 8003cc8:	461a      	mov	r2, r3
 8003cca:	4613      	mov	r3, r2
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	4413      	add	r3, r2
 8003cd0:	011a      	lsls	r2, r3, #4
 8003cd2:	4413      	add	r3, r2
 8003cd4:	4a3c      	ldr	r2, [pc, #240]	; (8003dc8 <ADC_CAL+0x144>)
 8003cd6:	fb82 1203 	smull	r1, r2, r2, r3
 8003cda:	1152      	asrs	r2, r2, #5
 8003cdc:	17db      	asrs	r3, r3, #31
 8003cde:	1ad2      	subs	r2, r2, r3
 8003ce0:	4b3a      	ldr	r3, [pc, #232]	; (8003dcc <ADC_CAL+0x148>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	4a39      	ldr	r2, [pc, #228]	; (8003dcc <ADC_CAL+0x148>)
 8003ce8:	6013      	str	r3, [r2, #0]
	Voltage_offset_temp[1] += (int32_t)((adc_result_DMA[1]/number_of_oversample*VDDA)/4095)*153/100;
 8003cea:	4b34      	ldr	r3, [pc, #208]	; (8003dbc <ADC_CAL+0x138>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	091b      	lsrs	r3, r3, #4
 8003cf0:	4a33      	ldr	r2, [pc, #204]	; (8003dc0 <ADC_CAL+0x13c>)
 8003cf2:	8812      	ldrh	r2, [r2, #0]
 8003cf4:	b212      	sxth	r2, r2
 8003cf6:	fb03 f202 	mul.w	r2, r3, r2
 8003cfa:	4b32      	ldr	r3, [pc, #200]	; (8003dc4 <ADC_CAL+0x140>)
 8003cfc:	fba3 1302 	umull	r1, r3, r3, r2
 8003d00:	1ad2      	subs	r2, r2, r3
 8003d02:	0852      	lsrs	r2, r2, #1
 8003d04:	4413      	add	r3, r2
 8003d06:	0adb      	lsrs	r3, r3, #11
 8003d08:	461a      	mov	r2, r3
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	00db      	lsls	r3, r3, #3
 8003d0e:	4413      	add	r3, r2
 8003d10:	011a      	lsls	r2, r3, #4
 8003d12:	4413      	add	r3, r2
 8003d14:	4a2c      	ldr	r2, [pc, #176]	; (8003dc8 <ADC_CAL+0x144>)
 8003d16:	fb82 1203 	smull	r1, r2, r2, r3
 8003d1a:	1152      	asrs	r2, r2, #5
 8003d1c:	17db      	asrs	r3, r3, #31
 8003d1e:	1ad2      	subs	r2, r2, r3
 8003d20:	4b2a      	ldr	r3, [pc, #168]	; (8003dcc <ADC_CAL+0x148>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	4413      	add	r3, r2
 8003d26:	4a29      	ldr	r2, [pc, #164]	; (8003dcc <ADC_CAL+0x148>)
 8003d28:	6053      	str	r3, [r2, #4]
	Voltage_offset_temp[2] += (int32_t)((adc_result_DMA[0]/number_of_oversample*VDDA)/4095)*153/100;
 8003d2a:	4b24      	ldr	r3, [pc, #144]	; (8003dbc <ADC_CAL+0x138>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	091b      	lsrs	r3, r3, #4
 8003d30:	4a23      	ldr	r2, [pc, #140]	; (8003dc0 <ADC_CAL+0x13c>)
 8003d32:	8812      	ldrh	r2, [r2, #0]
 8003d34:	b212      	sxth	r2, r2
 8003d36:	fb03 f202 	mul.w	r2, r3, r2
 8003d3a:	4b22      	ldr	r3, [pc, #136]	; (8003dc4 <ADC_CAL+0x140>)
 8003d3c:	fba3 1302 	umull	r1, r3, r3, r2
 8003d40:	1ad2      	subs	r2, r2, r3
 8003d42:	0852      	lsrs	r2, r2, #1
 8003d44:	4413      	add	r3, r2
 8003d46:	0adb      	lsrs	r3, r3, #11
 8003d48:	461a      	mov	r2, r3
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	00db      	lsls	r3, r3, #3
 8003d4e:	4413      	add	r3, r2
 8003d50:	011a      	lsls	r2, r3, #4
 8003d52:	4413      	add	r3, r2
 8003d54:	4a1c      	ldr	r2, [pc, #112]	; (8003dc8 <ADC_CAL+0x144>)
 8003d56:	fb82 1203 	smull	r1, r2, r2, r3
 8003d5a:	1152      	asrs	r2, r2, #5
 8003d5c:	17db      	asrs	r3, r3, #31
 8003d5e:	1ad2      	subs	r2, r2, r3
 8003d60:	4b1a      	ldr	r3, [pc, #104]	; (8003dcc <ADC_CAL+0x148>)
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	4413      	add	r3, r2
 8003d66:	4a19      	ldr	r2, [pc, #100]	; (8003dcc <ADC_CAL+0x148>)
 8003d68:	6093      	str	r3, [r2, #8]
	calibrating--;
 8003d6a:	4b19      	ldr	r3, [pc, #100]	; (8003dd0 <ADC_CAL+0x14c>)
 8003d6c:	881b      	ldrh	r3, [r3, #0]
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	4b17      	ldr	r3, [pc, #92]	; (8003dd0 <ADC_CAL+0x14c>)
 8003d74:	801a      	strh	r2, [r3, #0]

	if(!calibrating){
 8003d76:	4b16      	ldr	r3, [pc, #88]	; (8003dd0 <ADC_CAL+0x14c>)
 8003d78:	881b      	ldrh	r3, [r3, #0]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d117      	bne.n	8003dae <ADC_CAL+0x12a>
		Voltage_offset[0] = Voltage_offset_temp[0]/number_of_calibration_points;
 8003d7e:	4b13      	ldr	r3, [pc, #76]	; (8003dcc <ADC_CAL+0x148>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a14      	ldr	r2, [pc, #80]	; (8003dd4 <ADC_CAL+0x150>)
 8003d84:	fba2 2303 	umull	r2, r3, r2, r3
 8003d88:	099b      	lsrs	r3, r3, #6
 8003d8a:	4a13      	ldr	r2, [pc, #76]	; (8003dd8 <ADC_CAL+0x154>)
 8003d8c:	6013      	str	r3, [r2, #0]
		Voltage_offset[1] = Voltage_offset_temp[1]/number_of_calibration_points;
 8003d8e:	4b0f      	ldr	r3, [pc, #60]	; (8003dcc <ADC_CAL+0x148>)
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	4a10      	ldr	r2, [pc, #64]	; (8003dd4 <ADC_CAL+0x150>)
 8003d94:	fba2 2303 	umull	r2, r3, r2, r3
 8003d98:	099b      	lsrs	r3, r3, #6
 8003d9a:	4a0f      	ldr	r2, [pc, #60]	; (8003dd8 <ADC_CAL+0x154>)
 8003d9c:	6053      	str	r3, [r2, #4]
		Voltage_offset[2] = Voltage_offset_temp[2]/number_of_calibration_points;
 8003d9e:	4b0b      	ldr	r3, [pc, #44]	; (8003dcc <ADC_CAL+0x148>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	4a0c      	ldr	r2, [pc, #48]	; (8003dd4 <ADC_CAL+0x150>)
 8003da4:	fba2 2303 	umull	r2, r3, r2, r3
 8003da8:	099b      	lsrs	r3, r3, #6
 8003daa:	4a0b      	ldr	r2, [pc, #44]	; (8003dd8 <ADC_CAL+0x154>)
 8003dac:	6093      	str	r3, [r2, #8]
	}
}
 8003dae:	bf00      	nop
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr
 8003db8:	2000054c 	.word	0x2000054c
 8003dbc:	200017b0 	.word	0x200017b0
 8003dc0:	200017fc 	.word	0x200017fc
 8003dc4:	00100101 	.word	0x00100101
 8003dc8:	51eb851f 	.word	0x51eb851f
 8003dcc:	20001828 	.word	0x20001828
 8003dd0:	20001824 	.word	0x20001824
 8003dd4:	10624dd3 	.word	0x10624dd3
 8003dd8:	200017f0 	.word	0x200017f0

08003ddc <current_init>:

void current_init(Current_Callback __IRQ_callback){
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
	//ADC_CAL_init(&hadc1);
	calibrating = number_of_calibration_points;
 8003de4:	4b0b      	ldr	r3, [pc, #44]	; (8003e14 <current_init+0x38>)
 8003de6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003dea:	801a      	strh	r2, [r3, #0]

	Curent_IRQ_callback = __IRQ_callback;
 8003dec:	4a0a      	ldr	r2, [pc, #40]	; (8003e18 <current_init+0x3c>)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6013      	str	r3, [r2, #0]

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_result_DMA, number_of_channels*2);
 8003df2:	2208      	movs	r2, #8
 8003df4:	4909      	ldr	r1, [pc, #36]	; (8003e1c <current_init+0x40>)
 8003df6:	480a      	ldr	r0, [pc, #40]	; (8003e20 <current_init+0x44>)
 8003df8:	f002 f9ba 	bl	8006170 <HAL_ADC_Start_DMA>


	HAL_DAC_Init(&hdac1);
 8003dfc:	4809      	ldr	r0, [pc, #36]	; (8003e24 <current_init+0x48>)
 8003dfe:	f002 fb19 	bl	8006434 <HAL_DAC_Init>
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 8003e02:	2100      	movs	r1, #0
 8003e04:	4807      	ldr	r0, [pc, #28]	; (8003e24 <current_init+0x48>)
 8003e06:	f002 fb27 	bl	8006458 <HAL_DAC_Start>
}
 8003e0a:	bf00      	nop
 8003e0c:	3708      	adds	r7, #8
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	20001824 	.word	0x20001824
 8003e18:	20001800 	.word	0x20001800
 8003e1c:	200017b0 	.word	0x200017b0
 8003e20:	2000188c 	.word	0x2000188c
 8003e24:	20001a24 	.word	0x20001a24

08003e28 <voltage_temperature_init>:
void voltage_temperature_init(VT_Callback __IRQ_callback){
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
	VT_IRQ_callback = __IRQ_callback;
 8003e30:	4a05      	ldr	r2, [pc, #20]	; (8003e48 <voltage_temperature_init+0x20>)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6013      	str	r3, [r2, #0]

	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)VT_adc_result_DMA, number_of_VT_channels*2);
 8003e36:	2208      	movs	r2, #8
 8003e38:	4904      	ldr	r1, [pc, #16]	; (8003e4c <voltage_temperature_init+0x24>)
 8003e3a:	4805      	ldr	r0, [pc, #20]	; (8003e50 <voltage_temperature_init+0x28>)
 8003e3c:	f002 f998 	bl	8006170 <HAL_ADC_Start_DMA>
}
 8003e40:	bf00      	nop
 8003e42:	3708      	adds	r7, #8
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	20001814 	.word	0x20001814
 8003e4c:	200017d0 	.word	0x200017d0
 8003e50:	200018f8 	.word	0x200018f8

08003e54 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1){
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a6e      	ldr	r2, [pc, #440]	; (8004018 <HAL_ADC_ConvHalfCpltCallback+0x1c4>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	f040 8091 	bne.w	8003f88 <HAL_ADC_ConvHalfCpltCallback+0x134>
		if(calibrating)ADC_CAL();
 8003e66:	4b6d      	ldr	r3, [pc, #436]	; (800401c <HAL_ADC_ConvHalfCpltCallback+0x1c8>)
 8003e68:	881b      	ldrh	r3, [r3, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d002      	beq.n	8003e74 <HAL_ADC_ConvHalfCpltCallback+0x20>
 8003e6e:	f7ff ff09 	bl	8003c84 <ADC_CAL>
 8003e72:	e089      	b.n	8003f88 <HAL_ADC_ConvHalfCpltCallback+0x134>
		else {
			VDDA = (int16_t)3000*(*vrefint)/(adc_result_DMA[3]/number_of_oversample);
 8003e74:	4b6a      	ldr	r3, [pc, #424]	; (8004020 <HAL_ADC_ConvHalfCpltCallback+0x1cc>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	881b      	ldrh	r3, [r3, #0]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003e80:	fb02 f303 	mul.w	r3, r2, r3
 8003e84:	461a      	mov	r2, r3
 8003e86:	4b67      	ldr	r3, [pc, #412]	; (8004024 <HAL_ADC_ConvHalfCpltCallback+0x1d0>)
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	091b      	lsrs	r3, r3, #4
 8003e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e90:	b21a      	sxth	r2, r3
 8003e92:	4b65      	ldr	r3, [pc, #404]	; (8004028 <HAL_ADC_ConvHalfCpltCallback+0x1d4>)
 8003e94:	801a      	strh	r2, [r3, #0]
			data.Current_M1 = -(int32_t)(((((int32_t)adc_result_DMA[2]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[0])*50;
 8003e96:	4b65      	ldr	r3, [pc, #404]	; (800402c <HAL_ADC_ConvHalfCpltCallback+0x1d8>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	4b61      	ldr	r3, [pc, #388]	; (8004024 <HAL_ADC_ConvHalfCpltCallback+0x1d0>)
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	da00      	bge.n	8003ea6 <HAL_ADC_ConvHalfCpltCallback+0x52>
 8003ea4:	330f      	adds	r3, #15
 8003ea6:	111b      	asrs	r3, r3, #4
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	4b5f      	ldr	r3, [pc, #380]	; (8004028 <HAL_ADC_ConvHalfCpltCallback+0x1d4>)
 8003eac:	881b      	ldrh	r3, [r3, #0]
 8003eae:	b21b      	sxth	r3, r3
 8003eb0:	fb02 f303 	mul.w	r3, r2, r3
 8003eb4:	4a5e      	ldr	r2, [pc, #376]	; (8004030 <HAL_ADC_ConvHalfCpltCallback+0x1dc>)
 8003eb6:	fb82 0203 	smull	r0, r2, r2, r3
 8003eba:	441a      	add	r2, r3
 8003ebc:	12d2      	asrs	r2, r2, #11
 8003ebe:	17db      	asrs	r3, r3, #31
 8003ec0:	1ad2      	subs	r2, r2, r3
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	00db      	lsls	r3, r3, #3
 8003ec6:	4413      	add	r3, r2
 8003ec8:	011a      	lsls	r2, r3, #4
 8003eca:	4413      	add	r3, r2
 8003ecc:	4a59      	ldr	r2, [pc, #356]	; (8004034 <HAL_ADC_ConvHalfCpltCallback+0x1e0>)
 8003ece:	fb82 0203 	smull	r0, r2, r2, r3
 8003ed2:	1152      	asrs	r2, r2, #5
 8003ed4:	17db      	asrs	r3, r3, #31
 8003ed6:	1a9b      	subs	r3, r3, r2
 8003ed8:	440b      	add	r3, r1
 8003eda:	2232      	movs	r2, #50	; 0x32
 8003edc:	fb02 f303 	mul.w	r3, r2, r3
 8003ee0:	4a55      	ldr	r2, [pc, #340]	; (8004038 <HAL_ADC_ConvHalfCpltCallback+0x1e4>)
 8003ee2:	6013      	str	r3, [r2, #0]
			data.Current_M2 = -(int32_t)(((((int32_t)adc_result_DMA[1]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[1])*50;
 8003ee4:	4b51      	ldr	r3, [pc, #324]	; (800402c <HAL_ADC_ConvHalfCpltCallback+0x1d8>)
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	4619      	mov	r1, r3
 8003eea:	4b4e      	ldr	r3, [pc, #312]	; (8004024 <HAL_ADC_ConvHalfCpltCallback+0x1d0>)
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	da00      	bge.n	8003ef4 <HAL_ADC_ConvHalfCpltCallback+0xa0>
 8003ef2:	330f      	adds	r3, #15
 8003ef4:	111b      	asrs	r3, r3, #4
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	4b4b      	ldr	r3, [pc, #300]	; (8004028 <HAL_ADC_ConvHalfCpltCallback+0x1d4>)
 8003efa:	881b      	ldrh	r3, [r3, #0]
 8003efc:	b21b      	sxth	r3, r3
 8003efe:	fb02 f303 	mul.w	r3, r2, r3
 8003f02:	4a4b      	ldr	r2, [pc, #300]	; (8004030 <HAL_ADC_ConvHalfCpltCallback+0x1dc>)
 8003f04:	fb82 0203 	smull	r0, r2, r2, r3
 8003f08:	441a      	add	r2, r3
 8003f0a:	12d2      	asrs	r2, r2, #11
 8003f0c:	17db      	asrs	r3, r3, #31
 8003f0e:	1ad2      	subs	r2, r2, r3
 8003f10:	4613      	mov	r3, r2
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	4413      	add	r3, r2
 8003f16:	011a      	lsls	r2, r3, #4
 8003f18:	4413      	add	r3, r2
 8003f1a:	4a46      	ldr	r2, [pc, #280]	; (8004034 <HAL_ADC_ConvHalfCpltCallback+0x1e0>)
 8003f1c:	fb82 0203 	smull	r0, r2, r2, r3
 8003f20:	1152      	asrs	r2, r2, #5
 8003f22:	17db      	asrs	r3, r3, #31
 8003f24:	1a9b      	subs	r3, r3, r2
 8003f26:	440b      	add	r3, r1
 8003f28:	2232      	movs	r2, #50	; 0x32
 8003f2a:	fb02 f303 	mul.w	r3, r2, r3
 8003f2e:	4a42      	ldr	r2, [pc, #264]	; (8004038 <HAL_ADC_ConvHalfCpltCallback+0x1e4>)
 8003f30:	6053      	str	r3, [r2, #4]
			data.Current_M3 = -(int32_t)(((((int32_t)adc_result_DMA[0]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[2])*50;
 8003f32:	4b3e      	ldr	r3, [pc, #248]	; (800402c <HAL_ADC_ConvHalfCpltCallback+0x1d8>)
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	4619      	mov	r1, r3
 8003f38:	4b3a      	ldr	r3, [pc, #232]	; (8004024 <HAL_ADC_ConvHalfCpltCallback+0x1d0>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	da00      	bge.n	8003f42 <HAL_ADC_ConvHalfCpltCallback+0xee>
 8003f40:	330f      	adds	r3, #15
 8003f42:	111b      	asrs	r3, r3, #4
 8003f44:	461a      	mov	r2, r3
 8003f46:	4b38      	ldr	r3, [pc, #224]	; (8004028 <HAL_ADC_ConvHalfCpltCallback+0x1d4>)
 8003f48:	881b      	ldrh	r3, [r3, #0]
 8003f4a:	b21b      	sxth	r3, r3
 8003f4c:	fb02 f303 	mul.w	r3, r2, r3
 8003f50:	4a37      	ldr	r2, [pc, #220]	; (8004030 <HAL_ADC_ConvHalfCpltCallback+0x1dc>)
 8003f52:	fb82 0203 	smull	r0, r2, r2, r3
 8003f56:	441a      	add	r2, r3
 8003f58:	12d2      	asrs	r2, r2, #11
 8003f5a:	17db      	asrs	r3, r3, #31
 8003f5c:	1ad2      	subs	r2, r2, r3
 8003f5e:	4613      	mov	r3, r2
 8003f60:	00db      	lsls	r3, r3, #3
 8003f62:	4413      	add	r3, r2
 8003f64:	011a      	lsls	r2, r3, #4
 8003f66:	4413      	add	r3, r2
 8003f68:	4a32      	ldr	r2, [pc, #200]	; (8004034 <HAL_ADC_ConvHalfCpltCallback+0x1e0>)
 8003f6a:	fb82 0203 	smull	r0, r2, r2, r3
 8003f6e:	1152      	asrs	r2, r2, #5
 8003f70:	17db      	asrs	r3, r3, #31
 8003f72:	1a9b      	subs	r3, r3, r2
 8003f74:	440b      	add	r3, r1
 8003f76:	2232      	movs	r2, #50	; 0x32
 8003f78:	fb02 f303 	mul.w	r3, r2, r3
 8003f7c:	4a2e      	ldr	r2, [pc, #184]	; (8004038 <HAL_ADC_ConvHalfCpltCallback+0x1e4>)
 8003f7e:	6093      	str	r3, [r2, #8]
//			data.Current_DC = sqrt(data.Current_M1*data.Current_M1 + data.Current_M2*data.Current_M2 + data.Current_M3*data.Current_M3);//(int32_t)((abs((int)data.Current_M1)+abs((int)data.Current_M2)+abs((int)data.Current_M3))/2);
			Curent_IRQ_callback(&data);
 8003f80:	4b2e      	ldr	r3, [pc, #184]	; (800403c <HAL_ADC_ConvHalfCpltCallback+0x1e8>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	482c      	ldr	r0, [pc, #176]	; (8004038 <HAL_ADC_ConvHalfCpltCallback+0x1e4>)
 8003f86:	4798      	blx	r3
		}
	}
	if (hadc == &hadc2){
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a2d      	ldr	r2, [pc, #180]	; (8004040 <HAL_ADC_ConvHalfCpltCallback+0x1ec>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d13f      	bne.n	8004010 <HAL_ADC_ConvHalfCpltCallback+0x1bc>
		//VT_data.Temp_NTC1 = (VT_adc_result_DMA[0]/number_of_VT_oversample*VDDA)/ADC_RES;
		VT_data.Temp_NTC2 = (VT_adc_result_DMA[1]/number_of_VT_oversample*VDDA)/ADC_RES;
 8003f90:	4b2c      	ldr	r3, [pc, #176]	; (8004044 <HAL_ADC_ConvHalfCpltCallback+0x1f0>)
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	091b      	lsrs	r3, r3, #4
 8003f96:	4a24      	ldr	r2, [pc, #144]	; (8004028 <HAL_ADC_ConvHalfCpltCallback+0x1d4>)
 8003f98:	8812      	ldrh	r2, [r2, #0]
 8003f9a:	b212      	sxth	r2, r2
 8003f9c:	fb03 f202 	mul.w	r2, r3, r2
 8003fa0:	4b29      	ldr	r3, [pc, #164]	; (8004048 <HAL_ADC_ConvHalfCpltCallback+0x1f4>)
 8003fa2:	fba3 1302 	umull	r1, r3, r3, r2
 8003fa6:	1ad2      	subs	r2, r2, r3
 8003fa8:	0852      	lsrs	r2, r2, #1
 8003faa:	4413      	add	r3, r2
 8003fac:	0adb      	lsrs	r3, r3, #11
 8003fae:	b21a      	sxth	r2, r3
 8003fb0:	4b26      	ldr	r3, [pc, #152]	; (800404c <HAL_ADC_ConvHalfCpltCallback+0x1f8>)
 8003fb2:	811a      	strh	r2, [r3, #8]
		VT_data.V_Bat = (VT_adc_result_DMA[2]/number_of_VT_oversample*VDDA*34)/ADC_RES;
 8003fb4:	4b23      	ldr	r3, [pc, #140]	; (8004044 <HAL_ADC_ConvHalfCpltCallback+0x1f0>)
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	091b      	lsrs	r3, r3, #4
 8003fba:	4a1b      	ldr	r2, [pc, #108]	; (8004028 <HAL_ADC_ConvHalfCpltCallback+0x1d4>)
 8003fbc:	8812      	ldrh	r2, [r2, #0]
 8003fbe:	b212      	sxth	r2, r2
 8003fc0:	fb03 f202 	mul.w	r2, r3, r2
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	011b      	lsls	r3, r3, #4
 8003fc8:	4413      	add	r3, r2
 8003fca:	005b      	lsls	r3, r3, #1
 8003fcc:	461a      	mov	r2, r3
 8003fce:	4b1e      	ldr	r3, [pc, #120]	; (8004048 <HAL_ADC_ConvHalfCpltCallback+0x1f4>)
 8003fd0:	fba3 1302 	umull	r1, r3, r3, r2
 8003fd4:	1ad2      	subs	r2, r2, r3
 8003fd6:	0852      	lsrs	r2, r2, #1
 8003fd8:	4413      	add	r3, r2
 8003fda:	0adb      	lsrs	r3, r3, #11
 8003fdc:	4a1b      	ldr	r2, [pc, #108]	; (800404c <HAL_ADC_ConvHalfCpltCallback+0x1f8>)
 8003fde:	6013      	str	r3, [r2, #0]
		VT_data.V_aux = (VT_adc_result_DMA[3]/number_of_VT_oversample*VDDA*57)/ADC_RES/10;
 8003fe0:	4b18      	ldr	r3, [pc, #96]	; (8004044 <HAL_ADC_ConvHalfCpltCallback+0x1f0>)
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	091b      	lsrs	r3, r3, #4
 8003fe6:	4a10      	ldr	r2, [pc, #64]	; (8004028 <HAL_ADC_ConvHalfCpltCallback+0x1d4>)
 8003fe8:	8812      	ldrh	r2, [r2, #0]
 8003fea:	b212      	sxth	r2, r2
 8003fec:	fb03 f202 	mul.w	r2, r3, r2
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	1a9b      	subs	r3, r3, r2
 8003ff6:	00db      	lsls	r3, r3, #3
 8003ff8:	4413      	add	r3, r2
 8003ffa:	4a15      	ldr	r2, [pc, #84]	; (8004050 <HAL_ADC_ConvHalfCpltCallback+0x1fc>)
 8003ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8004000:	0bdb      	lsrs	r3, r3, #15
 8004002:	b29a      	uxth	r2, r3
 8004004:	4b11      	ldr	r3, [pc, #68]	; (800404c <HAL_ADC_ConvHalfCpltCallback+0x1f8>)
 8004006:	809a      	strh	r2, [r3, #4]
		VT_IRQ_callback(&VT_data);
 8004008:	4b12      	ldr	r3, [pc, #72]	; (8004054 <HAL_ADC_ConvHalfCpltCallback+0x200>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	480f      	ldr	r0, [pc, #60]	; (800404c <HAL_ADC_ConvHalfCpltCallback+0x1f8>)
 800400e:	4798      	blx	r3
	}
}
 8004010:	bf00      	nop
 8004012:	3708      	adds	r7, #8
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	2000188c 	.word	0x2000188c
 800401c:	20001824 	.word	0x20001824
 8004020:	2000054c 	.word	0x2000054c
 8004024:	200017b0 	.word	0x200017b0
 8004028:	200017fc 	.word	0x200017fc
 800402c:	200017f0 	.word	0x200017f0
 8004030:	80080081 	.word	0x80080081
 8004034:	51eb851f 	.word	0x51eb851f
 8004038:	20001804 	.word	0x20001804
 800403c:	20001800 	.word	0x20001800
 8004040:	200018f8 	.word	0x200018f8
 8004044:	200017d0 	.word	0x200017d0
 8004048:	00100101 	.word	0x00100101
 800404c:	20001818 	.word	0x20001818
 8004050:	ccd99a67 	.word	0xccd99a67
 8004054:	20001814 	.word	0x20001814

08004058 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1 && !calibrating){
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a6f      	ldr	r2, [pc, #444]	; (8004220 <HAL_ADC_ConvCpltCallback+0x1c8>)
 8004064:	4293      	cmp	r3, r2
 8004066:	f040 808f 	bne.w	8004188 <HAL_ADC_ConvCpltCallback+0x130>
 800406a:	4b6e      	ldr	r3, [pc, #440]	; (8004224 <HAL_ADC_ConvCpltCallback+0x1cc>)
 800406c:	881b      	ldrh	r3, [r3, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	f040 808a 	bne.w	8004188 <HAL_ADC_ConvCpltCallback+0x130>
		VDDA = (int16_t)3000*(*vrefint)/(adc_result_DMA[7]/number_of_oversample);
 8004074:	4b6c      	ldr	r3, [pc, #432]	; (8004228 <HAL_ADC_ConvCpltCallback+0x1d0>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	881b      	ldrh	r3, [r3, #0]
 800407a:	461a      	mov	r2, r3
 800407c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004080:	fb02 f303 	mul.w	r3, r2, r3
 8004084:	461a      	mov	r2, r3
 8004086:	4b69      	ldr	r3, [pc, #420]	; (800422c <HAL_ADC_ConvCpltCallback+0x1d4>)
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	091b      	lsrs	r3, r3, #4
 800408c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004090:	b21a      	sxth	r2, r3
 8004092:	4b67      	ldr	r3, [pc, #412]	; (8004230 <HAL_ADC_ConvCpltCallback+0x1d8>)
 8004094:	801a      	strh	r2, [r3, #0]
		data.Current_M1 = -(int32_t)(((((int32_t)adc_result_DMA[6]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[0])*50;
 8004096:	4b67      	ldr	r3, [pc, #412]	; (8004234 <HAL_ADC_ConvCpltCallback+0x1dc>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4619      	mov	r1, r3
 800409c:	4b63      	ldr	r3, [pc, #396]	; (800422c <HAL_ADC_ConvCpltCallback+0x1d4>)
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	da00      	bge.n	80040a6 <HAL_ADC_ConvCpltCallback+0x4e>
 80040a4:	330f      	adds	r3, #15
 80040a6:	111b      	asrs	r3, r3, #4
 80040a8:	461a      	mov	r2, r3
 80040aa:	4b61      	ldr	r3, [pc, #388]	; (8004230 <HAL_ADC_ConvCpltCallback+0x1d8>)
 80040ac:	881b      	ldrh	r3, [r3, #0]
 80040ae:	b21b      	sxth	r3, r3
 80040b0:	fb02 f303 	mul.w	r3, r2, r3
 80040b4:	4a60      	ldr	r2, [pc, #384]	; (8004238 <HAL_ADC_ConvCpltCallback+0x1e0>)
 80040b6:	fb82 0203 	smull	r0, r2, r2, r3
 80040ba:	441a      	add	r2, r3
 80040bc:	12d2      	asrs	r2, r2, #11
 80040be:	17db      	asrs	r3, r3, #31
 80040c0:	1ad2      	subs	r2, r2, r3
 80040c2:	4613      	mov	r3, r2
 80040c4:	00db      	lsls	r3, r3, #3
 80040c6:	4413      	add	r3, r2
 80040c8:	011a      	lsls	r2, r3, #4
 80040ca:	4413      	add	r3, r2
 80040cc:	4a5b      	ldr	r2, [pc, #364]	; (800423c <HAL_ADC_ConvCpltCallback+0x1e4>)
 80040ce:	fb82 0203 	smull	r0, r2, r2, r3
 80040d2:	1152      	asrs	r2, r2, #5
 80040d4:	17db      	asrs	r3, r3, #31
 80040d6:	1a9b      	subs	r3, r3, r2
 80040d8:	440b      	add	r3, r1
 80040da:	2232      	movs	r2, #50	; 0x32
 80040dc:	fb02 f303 	mul.w	r3, r2, r3
 80040e0:	4a57      	ldr	r2, [pc, #348]	; (8004240 <HAL_ADC_ConvCpltCallback+0x1e8>)
 80040e2:	6013      	str	r3, [r2, #0]
		data.Current_M2 = -(int32_t)(((((int32_t)adc_result_DMA[5]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[1])*50;
 80040e4:	4b53      	ldr	r3, [pc, #332]	; (8004234 <HAL_ADC_ConvCpltCallback+0x1dc>)
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	4619      	mov	r1, r3
 80040ea:	4b50      	ldr	r3, [pc, #320]	; (800422c <HAL_ADC_ConvCpltCallback+0x1d4>)
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	da00      	bge.n	80040f4 <HAL_ADC_ConvCpltCallback+0x9c>
 80040f2:	330f      	adds	r3, #15
 80040f4:	111b      	asrs	r3, r3, #4
 80040f6:	461a      	mov	r2, r3
 80040f8:	4b4d      	ldr	r3, [pc, #308]	; (8004230 <HAL_ADC_ConvCpltCallback+0x1d8>)
 80040fa:	881b      	ldrh	r3, [r3, #0]
 80040fc:	b21b      	sxth	r3, r3
 80040fe:	fb02 f303 	mul.w	r3, r2, r3
 8004102:	4a4d      	ldr	r2, [pc, #308]	; (8004238 <HAL_ADC_ConvCpltCallback+0x1e0>)
 8004104:	fb82 0203 	smull	r0, r2, r2, r3
 8004108:	441a      	add	r2, r3
 800410a:	12d2      	asrs	r2, r2, #11
 800410c:	17db      	asrs	r3, r3, #31
 800410e:	1ad2      	subs	r2, r2, r3
 8004110:	4613      	mov	r3, r2
 8004112:	00db      	lsls	r3, r3, #3
 8004114:	4413      	add	r3, r2
 8004116:	011a      	lsls	r2, r3, #4
 8004118:	4413      	add	r3, r2
 800411a:	4a48      	ldr	r2, [pc, #288]	; (800423c <HAL_ADC_ConvCpltCallback+0x1e4>)
 800411c:	fb82 0203 	smull	r0, r2, r2, r3
 8004120:	1152      	asrs	r2, r2, #5
 8004122:	17db      	asrs	r3, r3, #31
 8004124:	1a9b      	subs	r3, r3, r2
 8004126:	440b      	add	r3, r1
 8004128:	2232      	movs	r2, #50	; 0x32
 800412a:	fb02 f303 	mul.w	r3, r2, r3
 800412e:	4a44      	ldr	r2, [pc, #272]	; (8004240 <HAL_ADC_ConvCpltCallback+0x1e8>)
 8004130:	6053      	str	r3, [r2, #4]
		data.Current_M3 = -(int32_t)(((((int32_t)adc_result_DMA[4]/number_of_oversample*VDDA)/ADC_RES)*153/100)-(int32_t)Voltage_offset[2])*50;
 8004132:	4b40      	ldr	r3, [pc, #256]	; (8004234 <HAL_ADC_ConvCpltCallback+0x1dc>)
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	4619      	mov	r1, r3
 8004138:	4b3c      	ldr	r3, [pc, #240]	; (800422c <HAL_ADC_ConvCpltCallback+0x1d4>)
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	2b00      	cmp	r3, #0
 800413e:	da00      	bge.n	8004142 <HAL_ADC_ConvCpltCallback+0xea>
 8004140:	330f      	adds	r3, #15
 8004142:	111b      	asrs	r3, r3, #4
 8004144:	461a      	mov	r2, r3
 8004146:	4b3a      	ldr	r3, [pc, #232]	; (8004230 <HAL_ADC_ConvCpltCallback+0x1d8>)
 8004148:	881b      	ldrh	r3, [r3, #0]
 800414a:	b21b      	sxth	r3, r3
 800414c:	fb02 f303 	mul.w	r3, r2, r3
 8004150:	4a39      	ldr	r2, [pc, #228]	; (8004238 <HAL_ADC_ConvCpltCallback+0x1e0>)
 8004152:	fb82 0203 	smull	r0, r2, r2, r3
 8004156:	441a      	add	r2, r3
 8004158:	12d2      	asrs	r2, r2, #11
 800415a:	17db      	asrs	r3, r3, #31
 800415c:	1ad2      	subs	r2, r2, r3
 800415e:	4613      	mov	r3, r2
 8004160:	00db      	lsls	r3, r3, #3
 8004162:	4413      	add	r3, r2
 8004164:	011a      	lsls	r2, r3, #4
 8004166:	4413      	add	r3, r2
 8004168:	4a34      	ldr	r2, [pc, #208]	; (800423c <HAL_ADC_ConvCpltCallback+0x1e4>)
 800416a:	fb82 0203 	smull	r0, r2, r2, r3
 800416e:	1152      	asrs	r2, r2, #5
 8004170:	17db      	asrs	r3, r3, #31
 8004172:	1a9b      	subs	r3, r3, r2
 8004174:	440b      	add	r3, r1
 8004176:	2232      	movs	r2, #50	; 0x32
 8004178:	fb02 f303 	mul.w	r3, r2, r3
 800417c:	4a30      	ldr	r2, [pc, #192]	; (8004240 <HAL_ADC_ConvCpltCallback+0x1e8>)
 800417e:	6093      	str	r3, [r2, #8]
//		data.Current_DC = ((abs((int)data.Current_M1)+abs((int)data.Current_M2)+abs((int)data.Current_M3))/2);
		Curent_IRQ_callback(&data);
 8004180:	4b30      	ldr	r3, [pc, #192]	; (8004244 <HAL_ADC_ConvCpltCallback+0x1ec>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	482e      	ldr	r0, [pc, #184]	; (8004240 <HAL_ADC_ConvCpltCallback+0x1e8>)
 8004186:	4798      	blx	r3
	}
	if (hadc == &hadc2){
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a2f      	ldr	r2, [pc, #188]	; (8004248 <HAL_ADC_ConvCpltCallback+0x1f0>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d142      	bne.n	8004216 <HAL_ADC_ConvCpltCallback+0x1be>
//		  T = (1.0f / (c1 + c2*logR2 + c3*logR2*logR2*logR2));
//		  T = T - 273.15f;
////		  T = (T * 9.0f)/ 5.0f + 32.0f;
//		VT_data.Temp_NTC1  = (int16_t)T;

		VT_data.Temp_NTC1 = 0; //(VT_adc_result_DMA[4]/number_of_VT_oversample*VDDA)/ADC_RES * ;
 8004190:	4b2e      	ldr	r3, [pc, #184]	; (800424c <HAL_ADC_ConvCpltCallback+0x1f4>)
 8004192:	2200      	movs	r2, #0
 8004194:	80da      	strh	r2, [r3, #6]
		VT_data.Temp_NTC2 = (VT_adc_result_DMA[5]/number_of_VT_oversample*VDDA)/ADC_RES;
 8004196:	4b2e      	ldr	r3, [pc, #184]	; (8004250 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	091b      	lsrs	r3, r3, #4
 800419c:	4a24      	ldr	r2, [pc, #144]	; (8004230 <HAL_ADC_ConvCpltCallback+0x1d8>)
 800419e:	8812      	ldrh	r2, [r2, #0]
 80041a0:	b212      	sxth	r2, r2
 80041a2:	fb03 f202 	mul.w	r2, r3, r2
 80041a6:	4b2b      	ldr	r3, [pc, #172]	; (8004254 <HAL_ADC_ConvCpltCallback+0x1fc>)
 80041a8:	fba3 1302 	umull	r1, r3, r3, r2
 80041ac:	1ad2      	subs	r2, r2, r3
 80041ae:	0852      	lsrs	r2, r2, #1
 80041b0:	4413      	add	r3, r2
 80041b2:	0adb      	lsrs	r3, r3, #11
 80041b4:	b21a      	sxth	r2, r3
 80041b6:	4b25      	ldr	r3, [pc, #148]	; (800424c <HAL_ADC_ConvCpltCallback+0x1f4>)
 80041b8:	811a      	strh	r2, [r3, #8]
		VT_data.V_Bat = (VT_adc_result_DMA[6]/number_of_VT_oversample*VDDA*34)/ADC_RES;
 80041ba:	4b25      	ldr	r3, [pc, #148]	; (8004250 <HAL_ADC_ConvCpltCallback+0x1f8>)
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	091b      	lsrs	r3, r3, #4
 80041c0:	4a1b      	ldr	r2, [pc, #108]	; (8004230 <HAL_ADC_ConvCpltCallback+0x1d8>)
 80041c2:	8812      	ldrh	r2, [r2, #0]
 80041c4:	b212      	sxth	r2, r2
 80041c6:	fb03 f202 	mul.w	r2, r3, r2
 80041ca:	4613      	mov	r3, r2
 80041cc:	011b      	lsls	r3, r3, #4
 80041ce:	4413      	add	r3, r2
 80041d0:	005b      	lsls	r3, r3, #1
 80041d2:	461a      	mov	r2, r3
 80041d4:	4b1f      	ldr	r3, [pc, #124]	; (8004254 <HAL_ADC_ConvCpltCallback+0x1fc>)
 80041d6:	fba3 1302 	umull	r1, r3, r3, r2
 80041da:	1ad2      	subs	r2, r2, r3
 80041dc:	0852      	lsrs	r2, r2, #1
 80041de:	4413      	add	r3, r2
 80041e0:	0adb      	lsrs	r3, r3, #11
 80041e2:	4a1a      	ldr	r2, [pc, #104]	; (800424c <HAL_ADC_ConvCpltCallback+0x1f4>)
 80041e4:	6013      	str	r3, [r2, #0]
		VT_data.V_aux = (VT_adc_result_DMA[7]/number_of_VT_oversample*VDDA*57)/ADC_RES/10;
 80041e6:	4b1a      	ldr	r3, [pc, #104]	; (8004250 <HAL_ADC_ConvCpltCallback+0x1f8>)
 80041e8:	69db      	ldr	r3, [r3, #28]
 80041ea:	091b      	lsrs	r3, r3, #4
 80041ec:	4a10      	ldr	r2, [pc, #64]	; (8004230 <HAL_ADC_ConvCpltCallback+0x1d8>)
 80041ee:	8812      	ldrh	r2, [r2, #0]
 80041f0:	b212      	sxth	r2, r2
 80041f2:	fb03 f202 	mul.w	r2, r3, r2
 80041f6:	4613      	mov	r3, r2
 80041f8:	00db      	lsls	r3, r3, #3
 80041fa:	1a9b      	subs	r3, r3, r2
 80041fc:	00db      	lsls	r3, r3, #3
 80041fe:	4413      	add	r3, r2
 8004200:	4a15      	ldr	r2, [pc, #84]	; (8004258 <HAL_ADC_ConvCpltCallback+0x200>)
 8004202:	fba2 2303 	umull	r2, r3, r2, r3
 8004206:	0bdb      	lsrs	r3, r3, #15
 8004208:	b29a      	uxth	r2, r3
 800420a:	4b10      	ldr	r3, [pc, #64]	; (800424c <HAL_ADC_ConvCpltCallback+0x1f4>)
 800420c:	809a      	strh	r2, [r3, #4]
		VT_IRQ_callback(&VT_data);
 800420e:	4b13      	ldr	r3, [pc, #76]	; (800425c <HAL_ADC_ConvCpltCallback+0x204>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	480e      	ldr	r0, [pc, #56]	; (800424c <HAL_ADC_ConvCpltCallback+0x1f4>)
 8004214:	4798      	blx	r3
	}
}
 8004216:	bf00      	nop
 8004218:	3708      	adds	r7, #8
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	2000188c 	.word	0x2000188c
 8004224:	20001824 	.word	0x20001824
 8004228:	2000054c 	.word	0x2000054c
 800422c:	200017b0 	.word	0x200017b0
 8004230:	200017fc 	.word	0x200017fc
 8004234:	200017f0 	.word	0x200017f0
 8004238:	80080081 	.word	0x80080081
 800423c:	51eb851f 	.word	0x51eb851f
 8004240:	20001804 	.word	0x20001804
 8004244:	20001800 	.word	0x20001800
 8004248:	200018f8 	.word	0x200018f8
 800424c:	20001818 	.word	0x20001818
 8004250:	200017d0 	.word	0x200017d0
 8004254:	00100101 	.word	0x00100101
 8004258:	ccd99a67 	.word	0xccd99a67
 800425c:	20001814 	.word	0x20001814

08004260 <dq0>:
//}
//sin(θ◦) ≈ 4θ(180 − θ) 40500 − θ(180 − θ);
float sin3(float deg){
	return (4*deg*(180-deg)/(40500 - deg*(180-deg)));
}
void dq0(float theta, float a, float b, float c, float *d, float *q){
 8004260:	b580      	push	{r7, lr}
 8004262:	b088      	sub	sp, #32
 8004264:	af00      	add	r7, sp, #0
 8004266:	ed87 0a05 	vstr	s0, [r7, #20]
 800426a:	edc7 0a04 	vstr	s1, [r7, #16]
 800426e:	ed87 1a03 	vstr	s2, [r7, #12]
 8004272:	edc7 1a02 	vstr	s3, [r7, #8]
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]

//	uint32_t temp = (int32_t)(90.0f-theta*180/3.14159264f+2*360)%360;
//    float cf = sin3((float)temp)*pi/180.0f;
//    float sf = sin3((theta)*180.0f/pi)*pi/180.0f;

	float cf = cos(theta);
 800427a:	6978      	ldr	r0, [r7, #20]
 800427c:	f7fc f98c 	bl	8000598 <__aeabi_f2d>
 8004280:	4602      	mov	r2, r0
 8004282:	460b      	mov	r3, r1
 8004284:	ec43 2b10 	vmov	d0, r2, r3
 8004288:	f009 f9c2 	bl	800d610 <cos>
 800428c:	ec53 2b10 	vmov	r2, r3, d0
 8004290:	4610      	mov	r0, r2
 8004292:	4619      	mov	r1, r3
 8004294:	f7fc fcd0 	bl	8000c38 <__aeabi_d2f>
 8004298:	4603      	mov	r3, r0
 800429a:	61fb      	str	r3, [r7, #28]
	float sf = sin(theta);
 800429c:	6978      	ldr	r0, [r7, #20]
 800429e:	f7fc f97b 	bl	8000598 <__aeabi_f2d>
 80042a2:	4602      	mov	r2, r0
 80042a4:	460b      	mov	r3, r1
 80042a6:	ec43 2b10 	vmov	d0, r2, r3
 80042aa:	f009 fa05 	bl	800d6b8 <sin>
 80042ae:	ec53 2b10 	vmov	r2, r3, d0
 80042b2:	4610      	mov	r0, r2
 80042b4:	4619      	mov	r1, r3
 80042b6:	f7fc fcbf 	bl	8000c38 <__aeabi_d2f>
 80042ba:	4603      	mov	r3, r0
 80042bc:	61bb      	str	r3, [r7, #24]


    *d = 0.6666667f*(cf*a + (0.86602540378f*sf-.5f*cf)*b + (-0.86602540378f*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 80042be:	ed97 7a07 	vldr	s14, [r7, #28]
 80042c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80042c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80042ca:	edd7 7a06 	vldr	s15, [r7, #24]
 80042ce:	eddf 6a34 	vldr	s13, [pc, #208]	; 80043a0 <dq0+0x140>
 80042d2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80042d6:	edd7 7a07 	vldr	s15, [r7, #28]
 80042da:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80042de:	ee67 7a86 	vmul.f32	s15, s15, s12
 80042e2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80042e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80042ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80042f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80042f6:	eddf 6a2b 	vldr	s13, [pc, #172]	; 80043a4 <dq0+0x144>
 80042fa:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80042fe:	edd7 7a07 	vldr	s15, [r7, #28]
 8004302:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8004306:	ee67 7a86 	vmul.f32	s15, s15, s12
 800430a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800430e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004312:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004316:	ee77 7a27 	vadd.f32	s15, s14, s15
 800431a:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80043a8 <dq0+0x148>
 800431e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	edc3 7a00 	vstr	s15, [r3]
    *q = 0.6666667f*(-sf*a - (-0.86602540378f*cf-.5f*sf)*b - (0.86602540378f*cf-.5f*sf)*c);
 8004328:	edd7 7a06 	vldr	s15, [r7, #24]
 800432c:	eeb1 7a67 	vneg.f32	s14, s15
 8004330:	edd7 7a04 	vldr	s15, [r7, #16]
 8004334:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004338:	edd7 7a07 	vldr	s15, [r7, #28]
 800433c:	eddf 6a19 	vldr	s13, [pc, #100]	; 80043a4 <dq0+0x144>
 8004340:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004344:	edd7 7a06 	vldr	s15, [r7, #24]
 8004348:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800434c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004350:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004354:	edd7 7a03 	vldr	s15, [r7, #12]
 8004358:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800435c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004360:	edd7 7a07 	vldr	s15, [r7, #28]
 8004364:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80043a0 <dq0+0x140>
 8004368:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800436c:	edd7 7a06 	vldr	s15, [r7, #24]
 8004370:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8004374:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004378:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800437c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004380:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004384:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004388:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80043a8 <dq0+0x148>
 800438c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	edc3 7a00 	vstr	s15, [r3]
    }
 8004396:	bf00      	nop
 8004398:	3720      	adds	r7, #32
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	3f5db3d7 	.word	0x3f5db3d7
 80043a4:	bf5db3d7 	.word	0xbf5db3d7
 80043a8:	3f2aaaab 	.word	0x3f2aaaab

080043ac <FDCAN_Start>:
/*****************************************************************************/
/** Public API                                                              **/
/*****************************************************************************/

STATUS FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  /* Start the FDCAN bus */
  if (HAL_FDCAN_Start(hfdcan) != HAL_OK)
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f002 fc75 	bl	8006ca4 <HAL_FDCAN_Start>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d001      	beq.n	80043c4 <FDCAN_Start+0x18>
  {
    return FDCAN_STATUS_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e00a      	b.n	80043da <FDCAN_Start+0x2e>
  }

  /* Activate the FIFO interrupt for respective fdcan controller */
  if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80043c4:	2200      	movs	r2, #0
 80043c6:	2101      	movs	r1, #1
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f002 fd6d 	bl	8006ea8 <HAL_FDCAN_ActivateNotification>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d001      	beq.n	80043d8 <FDCAN_Start+0x2c>
  {
    return FDCAN_STATUS_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e000      	b.n	80043da <FDCAN_Start+0x2e>
  }

  return FDCAN_STATUS_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3708      	adds	r7, #8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
	...

080043e4 <FDCAN_addCallback>:

STATUS FDCAN_addCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t identifier, FDCANCallback *processData)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b089      	sub	sp, #36	; 0x24
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]
  /* Check if we have space to add a new Callback */
  if (FDCAN_listCallbacksCount >= FDCAN_MAX_CALLBACKS) {
 80043f0:	4b18      	ldr	r3, [pc, #96]	; (8004454 <FDCAN_addCallback+0x70>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2b09      	cmp	r3, #9
 80043f6:	d901      	bls.n	80043fc <FDCAN_addCallback+0x18>
      return FDCAN_STATUS_MAX_LIMIT_REACHED;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e025      	b.n	8004448 <FDCAN_addCallback+0x64>
  }

  /* Check if identifier already exists */
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 80043fc:	2300      	movs	r3, #0
 80043fe:	61fb      	str	r3, [r7, #28]
 8004400:	e00c      	b.n	800441c <FDCAN_addCallback+0x38>
      if (FDCAN_listCallbacks[i].identifier == identifier) {
 8004402:	4a15      	ldr	r2, [pc, #84]	; (8004458 <FDCAN_addCallback+0x74>)
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	00db      	lsls	r3, r3, #3
 8004408:	4413      	add	r3, r2
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	68ba      	ldr	r2, [r7, #8]
 800440e:	429a      	cmp	r2, r3
 8004410:	d101      	bne.n	8004416 <FDCAN_addCallback+0x32>
          return FDCAN_STATUS_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e018      	b.n	8004448 <FDCAN_addCallback+0x64>
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	3301      	adds	r3, #1
 800441a:	61fb      	str	r3, [r7, #28]
 800441c:	4b0d      	ldr	r3, [pc, #52]	; (8004454 <FDCAN_addCallback+0x70>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	69fa      	ldr	r2, [r7, #28]
 8004422:	429a      	cmp	r2, r3
 8004424:	d3ed      	bcc.n	8004402 <FDCAN_addCallback+0x1e>
      }
  }

  /* Add the callback to the list and update the count */
  FDCAN_listCallbacks[FDCAN_listCallbacksCount] = (FDCANCallback_internal_t) {
 8004426:	4b0b      	ldr	r3, [pc, #44]	; (8004454 <FDCAN_addCallback+0x70>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	490a      	ldr	r1, [pc, #40]	; (8004458 <FDCAN_addCallback+0x74>)
 800442e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8004432:	4a09      	ldr	r2, [pc, #36]	; (8004458 <FDCAN_addCallback+0x74>)
 8004434:	00db      	lsls	r3, r3, #3
 8004436:	4413      	add	r3, r2
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	605a      	str	r2, [r3, #4]
      .fp = processData,
      .identifier = identifier
  };
  FDCAN_listCallbacksCount++;
 800443c:	4b05      	ldr	r3, [pc, #20]	; (8004454 <FDCAN_addCallback+0x70>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	3301      	adds	r3, #1
 8004442:	4a04      	ldr	r2, [pc, #16]	; (8004454 <FDCAN_addCallback+0x70>)
 8004444:	6013      	str	r3, [r2, #0]

  return FDCAN_STATUS_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	3724      	adds	r7, #36	; 0x24
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr
 8004454:	20001884 	.word	0x20001884
 8004458:	20001834 	.word	0x20001834

0800445c <FDCAN_sendData>:

STATUS FDCAN_sendData(FDCAN_HandleTypeDef *hfdcan, uint32_t identifier, uint8_t TxData[64])
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b08e      	sub	sp, #56	; 0x38
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	607a      	str	r2, [r7, #4]
  FDCAN_TxHeaderTypeDef TxHeader;

  /* Set the identifier to send */
  TxHeader.Identifier = identifier;
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	617b      	str	r3, [r7, #20]

  /* Set the data length to send */
  TxHeader.DataLength = FDCAN_DLC_BYTES_64;
 800446c:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 8004470:	623b      	str	r3, [r7, #32]

  /* Set the identifier type to send */
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8004472:	2300      	movs	r3, #0
 8004474:	61bb      	str	r3, [r7, #24]

  /* Set the frame type to send */
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8004476:	2300      	movs	r3, #0
 8004478:	61fb      	str	r3, [r7, #28]

  /* Set the error state indicator to send */
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800447a:	2300      	movs	r3, #0
 800447c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the bit rate switch to send */
  TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 800447e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004482:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set the FD format to send */
  TxHeader.FDFormat = FDCAN_FD_CAN;
 8004484:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004488:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set the Tx event FIFO control to send */
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800448a:	2300      	movs	r3, #0
 800448c:	633b      	str	r3, [r7, #48]	; 0x30

  /* Set the message marker to send */
  TxHeader.MessageMarker = 0;
 800448e:	2300      	movs	r3, #0
 8004490:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set the message to send */
  if (HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &TxHeader, TxData) != HAL_OK)
 8004492:	f107 0314 	add.w	r3, r7, #20
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	4619      	mov	r1, r3
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f002 fc1a 	bl	8006cd4 <HAL_FDCAN_AddMessageToTxFifoQ>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d001      	beq.n	80044aa <FDCAN_sendData+0x4e>
  {
    return FDCAN_STATUS_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e000      	b.n	80044ac <FDCAN_sendData+0x50>
  }

  return FDCAN_STATUS_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3738      	adds	r7, #56	; 0x38
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <HAL_FDCAN_RxFifo0Callback>:
/** Local function definitions                                              **/
/*****************************************************************************/

/* This function overwrites _weak function definition in STM32 HAL FDCAN driver when linking project*/
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b09e      	sub	sp, #120	; 0x78
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  FDCAN_RxHeaderTypeDef RxHeader;
  uint8_t RxData[64];

  /* Fetch the CAN message from the FIFO buffer*/
  if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80044be:	f107 030c 	add.w	r3, r7, #12
 80044c2:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80044c6:	2140      	movs	r1, #64	; 0x40
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f002 fc65 	bl	8006d98 <HAL_FDCAN_GetRxMessage>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d001      	beq.n	80044d8 <HAL_FDCAN_RxFifo0Callback+0x24>
  {
    Error_Handler();
 80044d4:	f000 fc51 	bl	8004d7a <Error_Handler>
  }

  /* check if we have a callback for the identifier */
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 80044d8:	2300      	movs	r3, #0
 80044da:	677b      	str	r3, [r7, #116]	; 0x74
 80044dc:	e012      	b.n	8004504 <HAL_FDCAN_RxFifo0Callback+0x50>
      if (FDCAN_listCallbacks[i].identifier == RxHeader.Identifier) {
 80044de:	4a0e      	ldr	r2, [pc, #56]	; (8004518 <HAL_FDCAN_RxFifo0Callback+0x64>)
 80044e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044e2:	00db      	lsls	r3, r3, #3
 80044e4:	4413      	add	r3, r2
 80044e6:	685a      	ldr	r2, [r3, #4]
 80044e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d107      	bne.n	80044fe <HAL_FDCAN_RxFifo0Callback+0x4a>
          FDCAN_listCallbacks[i].fp(RxData);
 80044ee:	4a0a      	ldr	r2, [pc, #40]	; (8004518 <HAL_FDCAN_RxFifo0Callback+0x64>)
 80044f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044f2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80044f6:	f107 020c 	add.w	r2, r7, #12
 80044fa:	4610      	mov	r0, r2
 80044fc:	4798      	blx	r3
  for (uint32_t i = 0; i < FDCAN_listCallbacksCount; i++) {
 80044fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004500:	3301      	adds	r3, #1
 8004502:	677b      	str	r3, [r7, #116]	; 0x74
 8004504:	4b05      	ldr	r3, [pc, #20]	; (800451c <HAL_FDCAN_RxFifo0Callback+0x68>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800450a:	429a      	cmp	r2, r3
 800450c:	d3e7      	bcc.n	80044de <HAL_FDCAN_RxFifo0Callback+0x2a>
      }
  }
}
 800450e:	bf00      	nop
 8004510:	bf00      	nop
 8004512:	3778      	adds	r7, #120	; 0x78
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	20001834 	.word	0x20001834
 800451c:	20001884 	.word	0x20001884

08004520 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8004520:	b510      	push	{r4, lr}
 8004522:	b08c      	sub	sp, #48	; 0x30

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8004524:	2400      	movs	r4, #0
 8004526:	9409      	str	r4, [sp, #36]	; 0x24
 8004528:	940a      	str	r4, [sp, #40]	; 0x28
 800452a:	940b      	str	r4, [sp, #44]	; 0x2c
  ADC_ChannelConfTypeDef sConfig = {0};
 800452c:	2220      	movs	r2, #32
 800452e:	4621      	mov	r1, r4
 8004530:	a801      	add	r0, sp, #4
 8004532:	f006 ff19 	bl	800b368 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8004536:	4837      	ldr	r0, [pc, #220]	; (8004614 <MX_ADC1_Init+0xf4>)
 8004538:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800453c:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800453e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8004542:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004544:	6084      	str	r4, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004546:	60c4      	str	r4, [r0, #12]
  hadc1.Init.GainCompensation = 0;
 8004548:	6104      	str	r4, [r0, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800454a:	2301      	movs	r3, #1
 800454c:	6143      	str	r3, [r0, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800454e:	2208      	movs	r2, #8
 8004550:	6182      	str	r2, [r0, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004552:	7704      	strb	r4, [r0, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004554:	7743      	strb	r3, [r0, #29]
  hadc1.Init.NbrOfConversion = 4;
 8004556:	2204      	movs	r2, #4
 8004558:	6202      	str	r2, [r0, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800455a:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800455e:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004560:	6304      	str	r4, [r0, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004562:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8004566:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800456a:	63c2      	str	r2, [r0, #60]	; 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 800456c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8004570:	220c      	movs	r2, #12
 8004572:	6442      	str	r2, [r0, #68]	; 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 8004574:	6484      	str	r4, [r0, #72]	; 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8004576:	64c4      	str	r4, [r0, #76]	; 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8004578:	6503      	str	r3, [r0, #80]	; 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800457a:	f001 f895 	bl	80056a8 <HAL_ADC_Init>
 800457e:	2800      	cmp	r0, #0
 8004580:	d135      	bne.n	80045ee <MX_ADC1_Init+0xce>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8004582:	2300      	movs	r3, #0
 8004584:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004586:	a909      	add	r1, sp, #36	; 0x24
 8004588:	4822      	ldr	r0, [pc, #136]	; (8004614 <MX_ADC1_Init+0xf4>)
 800458a:	f001 fe73 	bl	8006274 <HAL_ADCEx_MultiModeConfigChannel>
 800458e:	2800      	cmp	r0, #0
 8004590:	d130      	bne.n	80045f4 <MX_ADC1_Init+0xd4>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004592:	4b21      	ldr	r3, [pc, #132]	; (8004618 <MX_ADC1_Init+0xf8>)
 8004594:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004596:	2306      	movs	r3, #6
 8004598:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 800459a:	2303      	movs	r3, #3
 800459c:	9303      	str	r3, [sp, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800459e:	237f      	movs	r3, #127	; 0x7f
 80045a0:	9304      	str	r3, [sp, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80045a2:	2304      	movs	r3, #4
 80045a4:	9305      	str	r3, [sp, #20]
  sConfig.Offset = 0;
 80045a6:	2300      	movs	r3, #0
 80045a8:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80045aa:	a901      	add	r1, sp, #4
 80045ac:	4819      	ldr	r0, [pc, #100]	; (8004614 <MX_ADC1_Init+0xf4>)
 80045ae:	f001 fb2b 	bl	8005c08 <HAL_ADC_ConfigChannel>
 80045b2:	bb10      	cbnz	r0, 80045fa <MX_ADC1_Init+0xda>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80045b4:	4b19      	ldr	r3, [pc, #100]	; (800461c <MX_ADC1_Init+0xfc>)
 80045b6:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80045b8:	230c      	movs	r3, #12
 80045ba:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80045bc:	a901      	add	r1, sp, #4
 80045be:	4815      	ldr	r0, [pc, #84]	; (8004614 <MX_ADC1_Init+0xf4>)
 80045c0:	f001 fb22 	bl	8005c08 <HAL_ADC_ConfigChannel>
 80045c4:	b9e0      	cbnz	r0, 8004600 <MX_ADC1_Init+0xe0>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80045c6:	4b16      	ldr	r3, [pc, #88]	; (8004620 <MX_ADC1_Init+0x100>)
 80045c8:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80045ca:	2312      	movs	r3, #18
 80045cc:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80045ce:	a901      	add	r1, sp, #4
 80045d0:	4810      	ldr	r0, [pc, #64]	; (8004614 <MX_ADC1_Init+0xf4>)
 80045d2:	f001 fb19 	bl	8005c08 <HAL_ADC_ConfigChannel>
 80045d6:	b9b0      	cbnz	r0, 8004606 <MX_ADC1_Init+0xe6>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80045d8:	4b12      	ldr	r3, [pc, #72]	; (8004624 <MX_ADC1_Init+0x104>)
 80045da:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80045dc:	2318      	movs	r3, #24
 80045de:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80045e0:	a901      	add	r1, sp, #4
 80045e2:	480c      	ldr	r0, [pc, #48]	; (8004614 <MX_ADC1_Init+0xf4>)
 80045e4:	f001 fb10 	bl	8005c08 <HAL_ADC_ConfigChannel>
 80045e8:	b980      	cbnz	r0, 800460c <MX_ADC1_Init+0xec>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80045ea:	b00c      	add	sp, #48	; 0x30
 80045ec:	bd10      	pop	{r4, pc}
    Error_Handler();
 80045ee:	f000 fbc4 	bl	8004d7a <Error_Handler>
 80045f2:	e7c6      	b.n	8004582 <MX_ADC1_Init+0x62>
    Error_Handler();
 80045f4:	f000 fbc1 	bl	8004d7a <Error_Handler>
 80045f8:	e7cb      	b.n	8004592 <MX_ADC1_Init+0x72>
    Error_Handler();
 80045fa:	f000 fbbe 	bl	8004d7a <Error_Handler>
 80045fe:	e7d9      	b.n	80045b4 <MX_ADC1_Init+0x94>
    Error_Handler();
 8004600:	f000 fbbb 	bl	8004d7a <Error_Handler>
 8004604:	e7df      	b.n	80045c6 <MX_ADC1_Init+0xa6>
    Error_Handler();
 8004606:	f000 fbb8 	bl	8004d7a <Error_Handler>
 800460a:	e7e5      	b.n	80045d8 <MX_ADC1_Init+0xb8>
    Error_Handler();
 800460c:	f000 fbb5 	bl	8004d7a <Error_Handler>
}
 8004610:	e7eb      	b.n	80045ea <MX_ADC1_Init+0xca>
 8004612:	bf00      	nop
 8004614:	2000188c 	.word	0x2000188c
 8004618:	04300002 	.word	0x04300002
 800461c:	08600004 	.word	0x08600004
 8004620:	0c900008 	.word	0x0c900008
 8004624:	cb840000 	.word	0xcb840000

08004628 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8004628:	b500      	push	{lr}
 800462a:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800462c:	2220      	movs	r2, #32
 800462e:	2100      	movs	r1, #0
 8004630:	4668      	mov	r0, sp
 8004632:	f006 fe99 	bl	800b368 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8004636:	4832      	ldr	r0, [pc, #200]	; (8004700 <MX_ADC2_Init+0xd8>)
 8004638:	4b32      	ldr	r3, [pc, #200]	; (8004704 <MX_ADC2_Init+0xdc>)
 800463a:	6003      	str	r3, [r0, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800463c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8004640:	6043      	str	r3, [r0, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004642:	2300      	movs	r3, #0
 8004644:	6083      	str	r3, [r0, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004646:	60c3      	str	r3, [r0, #12]
  hadc2.Init.GainCompensation = 0;
 8004648:	6103      	str	r3, [r0, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800464a:	2201      	movs	r2, #1
 800464c:	6142      	str	r2, [r0, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800464e:	2104      	movs	r1, #4
 8004650:	6181      	str	r1, [r0, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8004652:	7703      	strb	r3, [r0, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8004654:	7742      	strb	r2, [r0, #29]
  hadc2.Init.NbrOfConversion = 4;
 8004656:	6201      	str	r1, [r0, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004658:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800465c:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800465e:	6303      	str	r3, [r0, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8004660:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8004664:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004668:	63c1      	str	r1, [r0, #60]	; 0x3c
  hadc2.Init.OversamplingMode = ENABLE;
 800466a:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  hadc2.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 800466e:	210c      	movs	r1, #12
 8004670:	6441      	str	r1, [r0, #68]	; 0x44
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 8004672:	6483      	str	r3, [r0, #72]	; 0x48
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8004674:	64c3      	str	r3, [r0, #76]	; 0x4c
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8004676:	6502      	str	r2, [r0, #80]	; 0x50
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004678:	f001 f816 	bl	80056a8 <HAL_ADC_Init>
 800467c:	2800      	cmp	r0, #0
 800467e:	d130      	bne.n	80046e2 <MX_ADC2_Init+0xba>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8004680:	4b21      	ldr	r3, [pc, #132]	; (8004708 <MX_ADC2_Init+0xe0>)
 8004682:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004684:	2306      	movs	r3, #6
 8004686:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8004688:	2307      	movs	r3, #7
 800468a:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800468c:	237f      	movs	r3, #127	; 0x7f
 800468e:	9303      	str	r3, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004690:	2304      	movs	r3, #4
 8004692:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 0;
 8004694:	2300      	movs	r3, #0
 8004696:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004698:	4669      	mov	r1, sp
 800469a:	4819      	ldr	r0, [pc, #100]	; (8004700 <MX_ADC2_Init+0xd8>)
 800469c:	f001 fab4 	bl	8005c08 <HAL_ADC_ConfigChannel>
 80046a0:	bb10      	cbnz	r0, 80046e8 <MX_ADC2_Init+0xc0>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80046a2:	4b1a      	ldr	r3, [pc, #104]	; (800470c <MX_ADC2_Init+0xe4>)
 80046a4:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80046a6:	230c      	movs	r3, #12
 80046a8:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80046aa:	2300      	movs	r3, #0
 80046ac:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80046ae:	4669      	mov	r1, sp
 80046b0:	4813      	ldr	r0, [pc, #76]	; (8004700 <MX_ADC2_Init+0xd8>)
 80046b2:	f001 faa9 	bl	8005c08 <HAL_ADC_ConfigChannel>
 80046b6:	b9d0      	cbnz	r0, 80046ee <MX_ADC2_Init+0xc6>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80046b8:	4b15      	ldr	r3, [pc, #84]	; (8004710 <MX_ADC2_Init+0xe8>)
 80046ba:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80046bc:	2312      	movs	r3, #18
 80046be:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80046c0:	4669      	mov	r1, sp
 80046c2:	480f      	ldr	r0, [pc, #60]	; (8004700 <MX_ADC2_Init+0xd8>)
 80046c4:	f001 faa0 	bl	8005c08 <HAL_ADC_ConfigChannel>
 80046c8:	b9a0      	cbnz	r0, 80046f4 <MX_ADC2_Init+0xcc>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80046ca:	4b12      	ldr	r3, [pc, #72]	; (8004714 <MX_ADC2_Init+0xec>)
 80046cc:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80046ce:	2318      	movs	r3, #24
 80046d0:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80046d2:	4669      	mov	r1, sp
 80046d4:	480a      	ldr	r0, [pc, #40]	; (8004700 <MX_ADC2_Init+0xd8>)
 80046d6:	f001 fa97 	bl	8005c08 <HAL_ADC_ConfigChannel>
 80046da:	b970      	cbnz	r0, 80046fa <MX_ADC2_Init+0xd2>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80046dc:	b009      	add	sp, #36	; 0x24
 80046de:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80046e2:	f000 fb4a 	bl	8004d7a <Error_Handler>
 80046e6:	e7cb      	b.n	8004680 <MX_ADC2_Init+0x58>
    Error_Handler();
 80046e8:	f000 fb47 	bl	8004d7a <Error_Handler>
 80046ec:	e7d9      	b.n	80046a2 <MX_ADC2_Init+0x7a>
    Error_Handler();
 80046ee:	f000 fb44 	bl	8004d7a <Error_Handler>
 80046f2:	e7e1      	b.n	80046b8 <MX_ADC2_Init+0x90>
    Error_Handler();
 80046f4:	f000 fb41 	bl	8004d7a <Error_Handler>
 80046f8:	e7e7      	b.n	80046ca <MX_ADC2_Init+0xa2>
    Error_Handler();
 80046fa:	f000 fb3e 	bl	8004d7a <Error_Handler>
}
 80046fe:	e7ed      	b.n	80046dc <MX_ADC2_Init+0xb4>
 8004700:	200018f8 	.word	0x200018f8
 8004704:	50000100 	.word	0x50000100
 8004708:	32601000 	.word	0x32601000
 800470c:	3ac04000 	.word	0x3ac04000
 8004710:	36902000 	.word	0x36902000
 8004714:	0c900008 	.word	0x0c900008

08004718 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004718:	b570      	push	{r4, r5, r6, lr}
 800471a:	b09c      	sub	sp, #112	; 0x70
 800471c:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800471e:	2100      	movs	r1, #0
 8004720:	9117      	str	r1, [sp, #92]	; 0x5c
 8004722:	9118      	str	r1, [sp, #96]	; 0x60
 8004724:	9119      	str	r1, [sp, #100]	; 0x64
 8004726:	911a      	str	r1, [sp, #104]	; 0x68
 8004728:	911b      	str	r1, [sp, #108]	; 0x6c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800472a:	2244      	movs	r2, #68	; 0x44
 800472c:	a806      	add	r0, sp, #24
 800472e:	f006 fe1b 	bl	800b368 <memset>
  if(adcHandle->Instance==ADC1)
 8004732:	6823      	ldr	r3, [r4, #0]
 8004734:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004738:	d004      	beq.n	8004744 <HAL_ADC_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC2)
 800473a:	4a63      	ldr	r2, [pc, #396]	; (80048c8 <HAL_ADC_MspInit+0x1b0>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d059      	beq.n	80047f4 <HAL_ADC_MspInit+0xdc>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8004740:	b01c      	add	sp, #112	; 0x70
 8004742:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004744:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004748:	9306      	str	r3, [sp, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800474a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800474e:	9315      	str	r3, [sp, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004750:	a806      	add	r0, sp, #24
 8004752:	f003 fc7d 	bl	8008050 <HAL_RCCEx_PeriphCLKConfig>
 8004756:	2800      	cmp	r0, #0
 8004758:	d13b      	bne.n	80047d2 <HAL_ADC_MspInit+0xba>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800475a:	4a5c      	ldr	r2, [pc, #368]	; (80048cc <HAL_ADC_MspInit+0x1b4>)
 800475c:	6813      	ldr	r3, [r2, #0]
 800475e:	3301      	adds	r3, #1
 8004760:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004762:	2b01      	cmp	r3, #1
 8004764:	d038      	beq.n	80047d8 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004766:	4b5a      	ldr	r3, [pc, #360]	; (80048d0 <HAL_ADC_MspInit+0x1b8>)
 8004768:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800476a:	f042 0201 	orr.w	r2, r2, #1
 800476e:	64da      	str	r2, [r3, #76]	; 0x4c
 8004770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	9302      	str	r3, [sp, #8]
 8004778:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = CURRENT_ADC_3_Pin|CURRENT_ADC_2_Pin|CURRENT_ADC_1_Pin;
 800477a:	2307      	movs	r3, #7
 800477c:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800477e:	2303      	movs	r3, #3
 8004780:	9318      	str	r3, [sp, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004782:	2500      	movs	r5, #0
 8004784:	9519      	str	r5, [sp, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004786:	a917      	add	r1, sp, #92	; 0x5c
 8004788:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800478c:	f002 febc 	bl	8007508 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8004790:	4850      	ldr	r0, [pc, #320]	; (80048d4 <HAL_ADC_MspInit+0x1bc>)
 8004792:	4b51      	ldr	r3, [pc, #324]	; (80048d8 <HAL_ADC_MspInit+0x1c0>)
 8004794:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004796:	2305      	movs	r3, #5
 8004798:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800479a:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800479c:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800479e:	2380      	movs	r3, #128	; 0x80
 80047a0:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80047a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047a6:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80047a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80047ac:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80047ae:	2320      	movs	r3, #32
 80047b0:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80047b2:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80047b4:	f001 ffd8 	bl	8006768 <HAL_DMA_Init>
 80047b8:	b9c8      	cbnz	r0, 80047ee <HAL_ADC_MspInit+0xd6>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80047ba:	4b46      	ldr	r3, [pc, #280]	; (80048d4 <HAL_ADC_MspInit+0x1bc>)
 80047bc:	6563      	str	r3, [r4, #84]	; 0x54
 80047be:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80047c0:	2200      	movs	r2, #0
 80047c2:	4611      	mov	r1, r2
 80047c4:	2012      	movs	r0, #18
 80047c6:	f001 fddd 	bl	8006384 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80047ca:	2012      	movs	r0, #18
 80047cc:	f001 fe10 	bl	80063f0 <HAL_NVIC_EnableIRQ>
 80047d0:	e7b6      	b.n	8004740 <HAL_ADC_MspInit+0x28>
      Error_Handler();
 80047d2:	f000 fad2 	bl	8004d7a <Error_Handler>
 80047d6:	e7c0      	b.n	800475a <HAL_ADC_MspInit+0x42>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80047d8:	4b3d      	ldr	r3, [pc, #244]	; (80048d0 <HAL_ADC_MspInit+0x1b8>)
 80047da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047e0:	64da      	str	r2, [r3, #76]	; 0x4c
 80047e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047e8:	9301      	str	r3, [sp, #4]
 80047ea:	9b01      	ldr	r3, [sp, #4]
 80047ec:	e7bb      	b.n	8004766 <HAL_ADC_MspInit+0x4e>
      Error_Handler();
 80047ee:	f000 fac4 	bl	8004d7a <Error_Handler>
 80047f2:	e7e2      	b.n	80047ba <HAL_ADC_MspInit+0xa2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80047f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047f8:	9306      	str	r3, [sp, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80047fa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80047fe:	9315      	str	r3, [sp, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004800:	a806      	add	r0, sp, #24
 8004802:	f003 fc25 	bl	8008050 <HAL_RCCEx_PeriphCLKConfig>
 8004806:	2800      	cmp	r0, #0
 8004808:	d14d      	bne.n	80048a6 <HAL_ADC_MspInit+0x18e>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800480a:	4a30      	ldr	r2, [pc, #192]	; (80048cc <HAL_ADC_MspInit+0x1b4>)
 800480c:	6813      	ldr	r3, [r2, #0]
 800480e:	3301      	adds	r3, #1
 8004810:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004812:	2b01      	cmp	r3, #1
 8004814:	d04a      	beq.n	80048ac <HAL_ADC_MspInit+0x194>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004816:	4b2e      	ldr	r3, [pc, #184]	; (80048d0 <HAL_ADC_MspInit+0x1b8>)
 8004818:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800481a:	f042 0201 	orr.w	r2, r2, #1
 800481e:	64da      	str	r2, [r3, #76]	; 0x4c
 8004820:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004822:	f002 0201 	and.w	r2, r2, #1
 8004826:	9204      	str	r2, [sp, #16]
 8004828:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800482a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800482c:	f042 0202 	orr.w	r2, r2, #2
 8004830:	64da      	str	r2, [r3, #76]	; 0x4c
 8004832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004834:	f003 0302 	and.w	r3, r3, #2
 8004838:	9305      	str	r3, [sp, #20]
 800483a:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = V_BAT_ADC_Pin|V_AUX_ADC_Pin;
 800483c:	2360      	movs	r3, #96	; 0x60
 800483e:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004840:	2603      	movs	r6, #3
 8004842:	9618      	str	r6, [sp, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004844:	2500      	movs	r5, #0
 8004846:	9519      	str	r5, [sp, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004848:	a917      	add	r1, sp, #92	; 0x5c
 800484a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800484e:	f002 fe5b 	bl	8007508 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC2_NTC1_Pin|ADC2_NTC2_Pin;
 8004852:	f640 0304 	movw	r3, #2052	; 0x804
 8004856:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004858:	9618      	str	r6, [sp, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800485a:	9519      	str	r5, [sp, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800485c:	a917      	add	r1, sp, #92	; 0x5c
 800485e:	481f      	ldr	r0, [pc, #124]	; (80048dc <HAL_ADC_MspInit+0x1c4>)
 8004860:	f002 fe52 	bl	8007508 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8004864:	481e      	ldr	r0, [pc, #120]	; (80048e0 <HAL_ADC_MspInit+0x1c8>)
 8004866:	4b1f      	ldr	r3, [pc, #124]	; (80048e4 <HAL_ADC_MspInit+0x1cc>)
 8004868:	6003      	str	r3, [r0, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800486a:	2324      	movs	r3, #36	; 0x24
 800486c:	6043      	str	r3, [r0, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800486e:	6085      	str	r5, [r0, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004870:	60c5      	str	r5, [r0, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004872:	2380      	movs	r3, #128	; 0x80
 8004874:	6103      	str	r3, [r0, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004876:	f44f 7300 	mov.w	r3, #512	; 0x200
 800487a:	6143      	str	r3, [r0, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800487c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004880:	6183      	str	r3, [r0, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8004882:	2320      	movs	r3, #32
 8004884:	61c3      	str	r3, [r0, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8004886:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004888:	f001 ff6e 	bl	8006768 <HAL_DMA_Init>
 800488c:	b9c8      	cbnz	r0, 80048c2 <HAL_ADC_MspInit+0x1aa>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800488e:	4b14      	ldr	r3, [pc, #80]	; (80048e0 <HAL_ADC_MspInit+0x1c8>)
 8004890:	6563      	str	r3, [r4, #84]	; 0x54
 8004892:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8004894:	2200      	movs	r2, #0
 8004896:	4611      	mov	r1, r2
 8004898:	2012      	movs	r0, #18
 800489a:	f001 fd73 	bl	8006384 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800489e:	2012      	movs	r0, #18
 80048a0:	f001 fda6 	bl	80063f0 <HAL_NVIC_EnableIRQ>
}
 80048a4:	e74c      	b.n	8004740 <HAL_ADC_MspInit+0x28>
      Error_Handler();
 80048a6:	f000 fa68 	bl	8004d7a <Error_Handler>
 80048aa:	e7ae      	b.n	800480a <HAL_ADC_MspInit+0xf2>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80048ac:	4b08      	ldr	r3, [pc, #32]	; (80048d0 <HAL_ADC_MspInit+0x1b8>)
 80048ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80048b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048b4:	64da      	str	r2, [r3, #76]	; 0x4c
 80048b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048bc:	9303      	str	r3, [sp, #12]
 80048be:	9b03      	ldr	r3, [sp, #12]
 80048c0:	e7a9      	b.n	8004816 <HAL_ADC_MspInit+0xfe>
      Error_Handler();
 80048c2:	f000 fa5a 	bl	8004d7a <Error_Handler>
 80048c6:	e7e2      	b.n	800488e <HAL_ADC_MspInit+0x176>
 80048c8:	50000100 	.word	0x50000100
 80048cc:	20001888 	.word	0x20001888
 80048d0:	40021000 	.word	0x40021000
 80048d4:	20001964 	.word	0x20001964
 80048d8:	40020008 	.word	0x40020008
 80048dc:	48000400 	.word	0x48000400
 80048e0:	200019c4 	.word	0x200019c4
 80048e4:	4002001c 	.word	0x4002001c

080048e8 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80048e8:	b500      	push	{lr}
 80048ea:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80048ec:	2230      	movs	r2, #48	; 0x30
 80048ee:	2100      	movs	r1, #0
 80048f0:	4668      	mov	r0, sp
 80048f2:	f006 fd39 	bl	800b368 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80048f6:	4810      	ldr	r0, [pc, #64]	; (8004938 <MX_DAC1_Init+0x50>)
 80048f8:	4b10      	ldr	r3, [pc, #64]	; (800493c <MX_DAC1_Init+0x54>)
 80048fa:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80048fc:	f001 fd9a 	bl	8006434 <HAL_DAC_Init>
 8004900:	b9a0      	cbnz	r0, 800492c <MX_DAC1_Init+0x44>
    Error_Handler();
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8004902:	2200      	movs	r2, #0
 8004904:	9200      	str	r2, [sp, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8004906:	f88d 2004 	strb.w	r2, [sp, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800490a:	f88d 2005 	strb.w	r2, [sp, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800490e:	9202      	str	r2, [sp, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8004910:	9203      	str	r2, [sp, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8004912:	9204      	str	r2, [sp, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8004914:	9205      	str	r2, [sp, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8004916:	2301      	movs	r3, #1
 8004918:	9306      	str	r3, [sp, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800491a:	9207      	str	r2, [sp, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800491c:	4669      	mov	r1, sp
 800491e:	4806      	ldr	r0, [pc, #24]	; (8004938 <MX_DAC1_Init+0x50>)
 8004920:	f001 fde6 	bl	80064f0 <HAL_DAC_ConfigChannel>
 8004924:	b928      	cbnz	r0, 8004932 <MX_DAC1_Init+0x4a>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8004926:	b00d      	add	sp, #52	; 0x34
 8004928:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800492c:	f000 fa25 	bl	8004d7a <Error_Handler>
 8004930:	e7e7      	b.n	8004902 <MX_DAC1_Init+0x1a>
    Error_Handler();
 8004932:	f000 fa22 	bl	8004d7a <Error_Handler>
}
 8004936:	e7f6      	b.n	8004926 <MX_DAC1_Init+0x3e>
 8004938:	20001a24 	.word	0x20001a24
 800493c:	50000800 	.word	0x50000800

08004940 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8004940:	b500      	push	{lr}
 8004942:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004944:	2300      	movs	r3, #0
 8004946:	9303      	str	r3, [sp, #12]
 8004948:	9304      	str	r3, [sp, #16]
 800494a:	9305      	str	r3, [sp, #20]
 800494c:	9306      	str	r3, [sp, #24]
 800494e:	9307      	str	r3, [sp, #28]
  if(dacHandle->Instance==DAC1)
 8004950:	6802      	ldr	r2, [r0, #0]
 8004952:	4b13      	ldr	r3, [pc, #76]	; (80049a0 <HAL_DAC_MspInit+0x60>)
 8004954:	429a      	cmp	r2, r3
 8004956:	d002      	beq.n	800495e <HAL_DAC_MspInit+0x1e>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8004958:	b009      	add	sp, #36	; 0x24
 800495a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_DAC1_CLK_ENABLE();
 800495e:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8004962:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004966:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004968:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800496c:	64da      	str	r2, [r3, #76]	; 0x4c
 800496e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004970:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8004974:	9201      	str	r2, [sp, #4]
 8004976:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004978:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800497a:	f042 0201 	orr.w	r2, r2, #1
 800497e:	64da      	str	r2, [r3, #76]	; 0x4c
 8004980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	9302      	str	r3, [sp, #8]
 8004988:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800498a:	2310      	movs	r3, #16
 800498c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800498e:	2303      	movs	r3, #3
 8004990:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004992:	a903      	add	r1, sp, #12
 8004994:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004998:	f002 fdb6 	bl	8007508 <HAL_GPIO_Init>
}
 800499c:	e7dc      	b.n	8004958 <HAL_DAC_MspInit+0x18>
 800499e:	bf00      	nop
 80049a0:	50000800 	.word	0x50000800

080049a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80049a4:	b500      	push	{lr}
 80049a6:	b085      	sub	sp, #20

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80049a8:	4b2b      	ldr	r3, [pc, #172]	; (8004a58 <MX_DMA_Init+0xb4>)
 80049aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049ac:	f042 0204 	orr.w	r2, r2, #4
 80049b0:	649a      	str	r2, [r3, #72]	; 0x48
 80049b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049b4:	f002 0204 	and.w	r2, r2, #4
 80049b8:	9201      	str	r2, [sp, #4]
 80049ba:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80049bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049be:	f042 0201 	orr.w	r2, r2, #1
 80049c2:	649a      	str	r2, [r3, #72]	; 0x48
 80049c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049c6:	f002 0201 	and.w	r2, r2, #1
 80049ca:	9202      	str	r2, [sp, #8]
 80049cc:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80049ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049d0:	f042 0202 	orr.w	r2, r2, #2
 80049d4:	649a      	str	r2, [r3, #72]	; 0x48
 80049d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049d8:	f003 0302 	and.w	r3, r3, #2
 80049dc:	9303      	str	r3, [sp, #12]
 80049de:	9b03      	ldr	r3, [sp, #12]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80049e0:	2200      	movs	r2, #0
 80049e2:	4611      	mov	r1, r2
 80049e4:	200b      	movs	r0, #11
 80049e6:	f001 fccd 	bl	8006384 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80049ea:	200b      	movs	r0, #11
 80049ec:	f001 fd00 	bl	80063f0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80049f0:	2200      	movs	r2, #0
 80049f2:	4611      	mov	r1, r2
 80049f4:	200c      	movs	r0, #12
 80049f6:	f001 fcc5 	bl	8006384 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80049fa:	200c      	movs	r0, #12
 80049fc:	f001 fcf8 	bl	80063f0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8004a00:	2200      	movs	r2, #0
 8004a02:	4611      	mov	r1, r2
 8004a04:	200d      	movs	r0, #13
 8004a06:	f001 fcbd 	bl	8006384 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8004a0a:	200d      	movs	r0, #13
 8004a0c:	f001 fcf0 	bl	80063f0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8004a10:	2200      	movs	r2, #0
 8004a12:	4611      	mov	r1, r2
 8004a14:	200e      	movs	r0, #14
 8004a16:	f001 fcb5 	bl	8006384 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8004a1a:	200e      	movs	r0, #14
 8004a1c:	f001 fce8 	bl	80063f0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8004a20:	2200      	movs	r2, #0
 8004a22:	4611      	mov	r1, r2
 8004a24:	2038      	movs	r0, #56	; 0x38
 8004a26:	f001 fcad 	bl	8006384 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8004a2a:	2038      	movs	r0, #56	; 0x38
 8004a2c:	f001 fce0 	bl	80063f0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8004a30:	2200      	movs	r2, #0
 8004a32:	4611      	mov	r1, r2
 8004a34:	2039      	movs	r0, #57	; 0x39
 8004a36:	f001 fca5 	bl	8006384 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8004a3a:	2039      	movs	r0, #57	; 0x39
 8004a3c:	f001 fcd8 	bl	80063f0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8004a40:	2200      	movs	r2, #0
 8004a42:	4611      	mov	r1, r2
 8004a44:	203a      	movs	r0, #58	; 0x3a
 8004a46:	f001 fc9d 	bl	8006384 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8004a4a:	203a      	movs	r0, #58	; 0x3a
 8004a4c:	f001 fcd0 	bl	80063f0 <HAL_NVIC_EnableIRQ>

}
 8004a50:	b005      	add	sp, #20
 8004a52:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a56:	bf00      	nop
 8004a58:	40021000 	.word	0x40021000

08004a5c <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8004a5c:	b510      	push	{r4, lr}
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8004a5e:	4811      	ldr	r0, [pc, #68]	; (8004aa4 <MX_FDCAN1_Init+0x48>)
 8004a60:	4b11      	ldr	r3, [pc, #68]	; (8004aa8 <MX_FDCAN1_Init+0x4c>)
 8004a62:	6003      	str	r3, [r0, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8004a64:	2300      	movs	r3, #0
 8004a66:	6043      	str	r3, [r0, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8004a68:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004a6c:	6082      	str	r2, [r0, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8004a6e:	60c3      	str	r3, [r0, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8004a70:	7403      	strb	r3, [r0, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8004a72:	7443      	strb	r3, [r0, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8004a74:	7483      	strb	r3, [r0, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8004a76:	2201      	movs	r2, #1
 8004a78:	6142      	str	r2, [r0, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 7;
 8004a7a:	2107      	movs	r1, #7
 8004a7c:	6181      	str	r1, [r0, #24]
  hfdcan1.Init.NominalTimeSeg1 = 42;
 8004a7e:	242a      	movs	r4, #42	; 0x2a
 8004a80:	61c4      	str	r4, [r0, #28]
  hfdcan1.Init.NominalTimeSeg2 = 7;
 8004a82:	6201      	str	r1, [r0, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8004a84:	6242      	str	r2, [r0, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 9;
 8004a86:	2209      	movs	r2, #9
 8004a88:	6282      	str	r2, [r0, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 8004a8a:	210a      	movs	r1, #10
 8004a8c:	62c1      	str	r1, [r0, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 9;
 8004a8e:	6302      	str	r2, [r0, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8004a90:	6343      	str	r3, [r0, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8004a92:	6383      	str	r3, [r0, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8004a94:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8004a96:	f001 ffff 	bl	8006a98 <HAL_FDCAN_Init>
 8004a9a:	b900      	cbnz	r0, 8004a9e <MX_FDCAN1_Init+0x42>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8004a9c:	bd10      	pop	{r4, pc}
    Error_Handler();
 8004a9e:	f000 f96c 	bl	8004d7a <Error_Handler>
}
 8004aa2:	e7fb      	b.n	8004a9c <MX_FDCAN1_Init+0x40>
 8004aa4:	20001a38 	.word	0x20001a38
 8004aa8:	40006400 	.word	0x40006400

08004aac <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8004aac:	b510      	push	{r4, lr}
 8004aae:	b098      	sub	sp, #96	; 0x60
 8004ab0:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ab2:	2100      	movs	r1, #0
 8004ab4:	9113      	str	r1, [sp, #76]	; 0x4c
 8004ab6:	9114      	str	r1, [sp, #80]	; 0x50
 8004ab8:	9115      	str	r1, [sp, #84]	; 0x54
 8004aba:	9116      	str	r1, [sp, #88]	; 0x58
 8004abc:	9117      	str	r1, [sp, #92]	; 0x5c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004abe:	2244      	movs	r2, #68	; 0x44
 8004ac0:	a802      	add	r0, sp, #8
 8004ac2:	f006 fc51 	bl	800b368 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8004ac6:	6822      	ldr	r2, [r4, #0]
 8004ac8:	4b1e      	ldr	r3, [pc, #120]	; (8004b44 <HAL_FDCAN_MspInit+0x98>)
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d001      	beq.n	8004ad2 <HAL_FDCAN_MspInit+0x26>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8004ace:	b018      	add	sp, #96	; 0x60
 8004ad0:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8004ad2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ad6:	9302      	str	r3, [sp, #8]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8004ad8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004adc:	930e      	str	r3, [sp, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004ade:	a802      	add	r0, sp, #8
 8004ae0:	f003 fab6 	bl	8008050 <HAL_RCCEx_PeriphCLKConfig>
 8004ae4:	bb50      	cbnz	r0, 8004b3c <HAL_FDCAN_MspInit+0x90>
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8004ae6:	4b18      	ldr	r3, [pc, #96]	; (8004b48 <HAL_FDCAN_MspInit+0x9c>)
 8004ae8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004aea:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004aee:	659a      	str	r2, [r3, #88]	; 0x58
 8004af0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004af2:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8004af6:	9200      	str	r2, [sp, #0]
 8004af8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004afa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004afc:	f042 0201 	orr.w	r2, r2, #1
 8004b00:	64da      	str	r2, [r3, #76]	; 0x4c
 8004b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b04:	f003 0301 	and.w	r3, r3, #1
 8004b08:	9301      	str	r3, [sp, #4]
 8004b0a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004b0c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004b10:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b12:	2302      	movs	r3, #2
 8004b14:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b16:	2400      	movs	r4, #0
 8004b18:	9415      	str	r4, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b1a:	9416      	str	r4, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8004b1c:	2309      	movs	r3, #9
 8004b1e:	9317      	str	r3, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b20:	a913      	add	r1, sp, #76	; 0x4c
 8004b22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b26:	f002 fcef 	bl	8007508 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8004b2a:	4622      	mov	r2, r4
 8004b2c:	4621      	mov	r1, r4
 8004b2e:	2015      	movs	r0, #21
 8004b30:	f001 fc28 	bl	8006384 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8004b34:	2015      	movs	r0, #21
 8004b36:	f001 fc5b 	bl	80063f0 <HAL_NVIC_EnableIRQ>
}
 8004b3a:	e7c8      	b.n	8004ace <HAL_FDCAN_MspInit+0x22>
      Error_Handler();
 8004b3c:	f000 f91d 	bl	8004d7a <Error_Handler>
 8004b40:	e7d1      	b.n	8004ae6 <HAL_FDCAN_MspInit+0x3a>
 8004b42:	bf00      	nop
 8004b44:	40006400 	.word	0x40006400
 8004b48:	40021000 	.word	0x40021000

08004b4c <MX_FMAC_Init>:

FMAC_HandleTypeDef hfmac;

/* FMAC init function */
void MX_FMAC_Init(void)
{
 8004b4c:	b508      	push	{r3, lr}
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 8004b4e:	4805      	ldr	r0, [pc, #20]	; (8004b64 <MX_FMAC_Init+0x18>)
 8004b50:	4b05      	ldr	r3, [pc, #20]	; (8004b68 <MX_FMAC_Init+0x1c>)
 8004b52:	6003      	str	r3, [r0, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 8004b54:	f002 fca8 	bl	80074a8 <HAL_FMAC_Init>
 8004b58:	b900      	cbnz	r0, 8004b5c <MX_FMAC_Init+0x10>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 8004b5a:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004b5c:	f000 f90d 	bl	8004d7a <Error_Handler>
}
 8004b60:	e7fb      	b.n	8004b5a <MX_FMAC_Init+0xe>
 8004b62:	bf00      	nop
 8004b64:	20001a9c 	.word	0x20001a9c
 8004b68:	40021400 	.word	0x40021400

08004b6c <HAL_FMAC_MspInit>:

void HAL_FMAC_MspInit(FMAC_HandleTypeDef* fmacHandle)
{

  if(fmacHandle->Instance==FMAC)
 8004b6c:	6802      	ldr	r2, [r0, #0]
 8004b6e:	4b09      	ldr	r3, [pc, #36]	; (8004b94 <HAL_FMAC_MspInit+0x28>)
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d000      	beq.n	8004b76 <HAL_FMAC_MspInit+0xa>
 8004b74:	4770      	bx	lr
{
 8004b76:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* FMAC clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 8004b78:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8004b7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b7e:	f042 0210 	orr.w	r2, r2, #16
 8004b82:	649a      	str	r2, [r3, #72]	; 0x48
 8004b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b86:	f003 0310 	and.w	r3, r3, #16
 8004b8a:	9301      	str	r3, [sp, #4]
 8004b8c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }
}
 8004b8e:	b002      	add	sp, #8
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	40021400 	.word	0x40021400

08004b98 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 8004b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b9c:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b9e:	2400      	movs	r4, #0
 8004ba0:	9405      	str	r4, [sp, #20]
 8004ba2:	9406      	str	r4, [sp, #24]
 8004ba4:	9407      	str	r4, [sp, #28]
 8004ba6:	9408      	str	r4, [sp, #32]
 8004ba8:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004baa:	4b3f      	ldr	r3, [pc, #252]	; (8004ca8 <MX_GPIO_Init+0x110>)
 8004bac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004bae:	f042 0220 	orr.w	r2, r2, #32
 8004bb2:	64da      	str	r2, [r3, #76]	; 0x4c
 8004bb4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004bb6:	f002 0220 	and.w	r2, r2, #32
 8004bba:	9200      	str	r2, [sp, #0]
 8004bbc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004bbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004bc0:	f042 0204 	orr.w	r2, r2, #4
 8004bc4:	64da      	str	r2, [r3, #76]	; 0x4c
 8004bc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004bc8:	f002 0204 	and.w	r2, r2, #4
 8004bcc:	9201      	str	r2, [sp, #4]
 8004bce:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bd0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004bd2:	f042 0201 	orr.w	r2, r2, #1
 8004bd6:	64da      	str	r2, [r3, #76]	; 0x4c
 8004bd8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004bda:	f002 0201 	and.w	r2, r2, #1
 8004bde:	9202      	str	r2, [sp, #8]
 8004be0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004be2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004be4:	f042 0202 	orr.w	r2, r2, #2
 8004be8:	64da      	str	r2, [r3, #76]	; 0x4c
 8004bea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004bec:	f002 0202 	and.w	r2, r2, #2
 8004bf0:	9203      	str	r2, [sp, #12]
 8004bf2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004bf4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004bf6:	f042 0208 	orr.w	r2, r2, #8
 8004bfa:	64da      	str	r2, [r3, #76]	; 0x4c
 8004bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bfe:	f003 0308 	and.w	r3, r3, #8
 8004c02:	9304      	str	r3, [sp, #16]
 8004c04:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RUNNING_LED_Pin|WARNING_LED_Pin, GPIO_PIN_RESET);
 8004c06:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8004cb4 <MX_GPIO_Init+0x11c>
 8004c0a:	4622      	mov	r2, r4
 8004c0c:	21c0      	movs	r1, #192	; 0xc0
 8004c0e:	4640      	mov	r0, r8
 8004c10:	f002 fd5e 	bl	80076d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, GPIO_PIN_RESET);
 8004c14:	4622      	mov	r2, r4
 8004c16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c1e:	f002 fd57 	bl	80076d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENCODER2_CS_GPIO_Port, ENCODER2_CS_Pin, GPIO_PIN_RESET);
 8004c22:	4f22      	ldr	r7, [pc, #136]	; (8004cac <MX_GPIO_Init+0x114>)
 8004c24:	4622      	mov	r2, r4
 8004c26:	2104      	movs	r1, #4
 8004c28:	4638      	mov	r0, r7
 8004c2a:	f002 fd51 	bl	80076d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENCODER1_CS_GPIO_Port, ENCODER1_CS_Pin, GPIO_PIN_RESET);
 8004c2e:	4e20      	ldr	r6, [pc, #128]	; (8004cb0 <MX_GPIO_Init+0x118>)
 8004c30:	4622      	mov	r2, r4
 8004c32:	2140      	movs	r1, #64	; 0x40
 8004c34:	4630      	mov	r0, r6
 8004c36:	f002 fd4b 	bl	80076d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RUNNING_LED_Pin|WARNING_LED_Pin;
 8004c3a:	23c0      	movs	r3, #192	; 0xc0
 8004c3c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c3e:	2501      	movs	r5, #1
 8004c40:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c42:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c44:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c46:	a905      	add	r1, sp, #20
 8004c48:	4640      	mov	r0, r8
 8004c4a:	f002 fc5d 	bl	8007508 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004c4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c52:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c54:	2302      	movs	r3, #2
 8004c56:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c58:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c5a:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004c5c:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c5e:	a905      	add	r1, sp, #20
 8004c60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c64:	f002 fc50 	bl	8007508 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ERROR_LED_Pin;
 8004c68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c6c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c6e:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c70:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c72:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(ERROR_LED_GPIO_Port, &GPIO_InitStruct);
 8004c74:	a905      	add	r1, sp, #20
 8004c76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c7a:	f002 fc45 	bl	8007508 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER2_CS_Pin;
 8004c7e:	2304      	movs	r3, #4
 8004c80:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c82:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c84:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c86:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(ENCODER2_CS_GPIO_Port, &GPIO_InitStruct);
 8004c88:	a905      	add	r1, sp, #20
 8004c8a:	4638      	mov	r0, r7
 8004c8c:	f002 fc3c 	bl	8007508 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER1_CS_Pin;
 8004c90:	2340      	movs	r3, #64	; 0x40
 8004c92:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c94:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c96:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c98:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(ENCODER1_CS_GPIO_Port, &GPIO_InitStruct);
 8004c9a:	a905      	add	r1, sp, #20
 8004c9c:	4630      	mov	r0, r6
 8004c9e:	f002 fc33 	bl	8007508 <HAL_GPIO_Init>

}
 8004ca2:	b00a      	add	sp, #40	; 0x28
 8004ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ca8:	40021000 	.word	0x40021000
 8004cac:	48000c00 	.word	0x48000c00
 8004cb0:	48000400 	.word	0x48000400
 8004cb4:	48000800 	.word	0x48000800

08004cb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004cb8:	b500      	push	{lr}
 8004cba:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004cbc:	2238      	movs	r2, #56	; 0x38
 8004cbe:	2100      	movs	r1, #0
 8004cc0:	a806      	add	r0, sp, #24
 8004cc2:	f006 fb51 	bl	800b368 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004cc6:	2000      	movs	r0, #0
 8004cc8:	9001      	str	r0, [sp, #4]
 8004cca:	9002      	str	r0, [sp, #8]
 8004ccc:	9003      	str	r0, [sp, #12]
 8004cce:	9004      	str	r0, [sp, #16]
 8004cd0:	9005      	str	r0, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8004cd2:	f002 fd0b 	bl	80076ec <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004cd6:	2302      	movs	r3, #2
 8004cd8:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004cda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004cde:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004ce0:	2240      	movs	r2, #64	; 0x40
 8004ce2:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004ce4:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004ce6:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8004ce8:	2204      	movs	r2, #4
 8004cea:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8004cec:	2250      	movs	r2, #80	; 0x50
 8004cee:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004cf0:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8004cf2:	2208      	movs	r2, #8
 8004cf4:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004cf6:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004cf8:	a806      	add	r0, sp, #24
 8004cfa:	f002 fd89 	bl	8007810 <HAL_RCC_OscConfig>
 8004cfe:	b9c0      	cbnz	r0, 8004d32 <SystemClock_Config+0x7a>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004d00:	230f      	movs	r3, #15
 8004d02:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004d04:	2303      	movs	r3, #3
 8004d06:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004d0c:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004d0e:	9305      	str	r3, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004d10:	2104      	movs	r1, #4
 8004d12:	eb0d 0001 	add.w	r0, sp, r1
 8004d16:	f003 f853 	bl	8007dc0 <HAL_RCC_ClockConfig>
 8004d1a:	b960      	cbnz	r0, 8004d36 <SystemClock_Config+0x7e>
  {
    Error_Handler();
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_16);
 8004d1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004d20:	f04f 7140 	mov.w	r1, #50331648	; 0x3000000
 8004d24:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004d28:	f002 ffe8 	bl	8007cfc <HAL_RCC_MCOConfig>
}
 8004d2c:	b015      	add	sp, #84	; 0x54
 8004d2e:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004d32:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004d34:	e7fe      	b.n	8004d34 <SystemClock_Config+0x7c>
 8004d36:	b672      	cpsid	i
 8004d38:	e7fe      	b.n	8004d38 <SystemClock_Config+0x80>

08004d3a <main>:
{
 8004d3a:	b508      	push	{r3, lr}
  HAL_Init();
 8004d3c:	f000 fc7e 	bl	800563c <HAL_Init>
  SystemClock_Config();
 8004d40:	f7ff ffba 	bl	8004cb8 <SystemClock_Config>
  MX_GPIO_Init();
 8004d44:	f7ff ff28 	bl	8004b98 <MX_GPIO_Init>
  MX_DMA_Init();
 8004d48:	f7ff fe2c 	bl	80049a4 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8004d4c:	f7ff fe86 	bl	8004a5c <MX_FDCAN1_Init>
  MX_SPI1_Init();
 8004d50:	f000 f816 	bl	8004d80 <MX_SPI1_Init>
  MX_SPI3_Init();
 8004d54:	f000 f83a 	bl	8004dcc <MX_SPI3_Init>
  MX_TIM1_Init();
 8004d58:	f000 faec 	bl	8005334 <MX_TIM1_Init>
  MX_ADC1_Init();
 8004d5c:	f7ff fbe0 	bl	8004520 <MX_ADC1_Init>
  MX_ADC2_Init();
 8004d60:	f7ff fc62 	bl	8004628 <MX_ADC2_Init>
  MX_DAC1_Init();
 8004d64:	f7ff fdc0 	bl	80048e8 <MX_DAC1_Init>
  MX_USART1_UART_Init();
 8004d68:	f000 fb7a 	bl	8005460 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8004d6c:	f000 fa2c 	bl	80051c8 <MX_TIM3_Init>
  MX_FMAC_Init();
 8004d70:	f7ff feec 	bl	8004b4c <MX_FMAC_Init>
	BLDC_main();
 8004d74:	f7fc fb20 	bl	80013b8 <BLDC_main>
  while (1)
 8004d78:	e7fc      	b.n	8004d74 <main+0x3a>

08004d7a <Error_Handler>:
 8004d7a:	b672      	cpsid	i
  while (1)
 8004d7c:	e7fe      	b.n	8004d7c <Error_Handler+0x2>
	...

08004d80 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi3_rx;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004d80:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004d82:	4810      	ldr	r0, [pc, #64]	; (8004dc4 <MX_SPI1_Init+0x44>)
 8004d84:	4b10      	ldr	r3, [pc, #64]	; (8004dc8 <MX_SPI1_Init+0x48>)
 8004d86:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004d88:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004d8c:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004d92:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004d96:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d98:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	6142      	str	r2, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004d9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004da2:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8004da4:	2228      	movs	r2, #40	; 0x28
 8004da6:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004da8:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004daa:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dac:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004dae:	2207      	movs	r2, #7
 8004db0:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004db2:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004db4:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004db6:	f003 fc1f 	bl	80085f8 <HAL_SPI_Init>
 8004dba:	b900      	cbnz	r0, 8004dbe <MX_SPI1_Init+0x3e>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004dbc:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004dbe:	f7ff ffdc 	bl	8004d7a <Error_Handler>
}
 8004dc2:	e7fb      	b.n	8004dbc <MX_SPI1_Init+0x3c>
 8004dc4:	20001c54 	.word	0x20001c54
 8004dc8:	40013000 	.word	0x40013000

08004dcc <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8004dcc:	b508      	push	{r3, lr}
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8004dce:	4810      	ldr	r0, [pc, #64]	; (8004e10 <MX_SPI3_Init+0x44>)
 8004dd0:	4b10      	ldr	r3, [pc, #64]	; (8004e14 <MX_SPI3_Init+0x48>)
 8004dd2:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004dd4:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004dd8:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004dde:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004de2:	60c2      	str	r2, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004de4:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004de6:	2201      	movs	r2, #1
 8004de8:	6142      	str	r2, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004dea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dee:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8004df0:	2228      	movs	r2, #40	; 0x28
 8004df2:	61c2      	str	r2, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004df4:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004df6:	6243      	str	r3, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004df8:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8004dfa:	2207      	movs	r2, #7
 8004dfc:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004dfe:	6303      	str	r3, [r0, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004e00:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004e02:	f003 fbf9 	bl	80085f8 <HAL_SPI_Init>
 8004e06:	b900      	cbnz	r0, 8004e0a <MX_SPI3_Init+0x3e>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8004e08:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004e0a:	f7ff ffb6 	bl	8004d7a <Error_Handler>
}
 8004e0e:	e7fb      	b.n	8004e08 <MX_SPI3_Init+0x3c>
 8004e10:	20001cb8 	.word	0x20001cb8
 8004e14:	40003c00 	.word	0x40003c00

08004e18 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004e18:	b510      	push	{r4, lr}
 8004e1a:	b08a      	sub	sp, #40	; 0x28
 8004e1c:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e1e:	2300      	movs	r3, #0
 8004e20:	9305      	str	r3, [sp, #20]
 8004e22:	9306      	str	r3, [sp, #24]
 8004e24:	9307      	str	r3, [sp, #28]
 8004e26:	9308      	str	r3, [sp, #32]
 8004e28:	9309      	str	r3, [sp, #36]	; 0x24
  if(spiHandle->Instance==SPI1)
 8004e2a:	6803      	ldr	r3, [r0, #0]
 8004e2c:	4a59      	ldr	r2, [pc, #356]	; (8004f94 <HAL_SPI_MspInit+0x17c>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d004      	beq.n	8004e3c <HAL_SPI_MspInit+0x24>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI3)
 8004e32:	4a59      	ldr	r2, [pc, #356]	; (8004f98 <HAL_SPI_MspInit+0x180>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d056      	beq.n	8004ee6 <HAL_SPI_MspInit+0xce>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8004e38:	b00a      	add	sp, #40	; 0x28
 8004e3a:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004e3c:	4b57      	ldr	r3, [pc, #348]	; (8004f9c <HAL_SPI_MspInit+0x184>)
 8004e3e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004e40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e44:	661a      	str	r2, [r3, #96]	; 0x60
 8004e46:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004e48:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004e4c:	9201      	str	r2, [sp, #4]
 8004e4e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e52:	f042 0202 	orr.w	r2, r2, #2
 8004e56:	64da      	str	r2, [r3, #76]	; 0x4c
 8004e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e5a:	f003 0302 	and.w	r3, r3, #2
 8004e5e:	9302      	str	r3, [sp, #8]
 8004e60:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8004e62:	2338      	movs	r3, #56	; 0x38
 8004e64:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e66:	2302      	movs	r3, #2
 8004e68:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004e6a:	2305      	movs	r3, #5
 8004e6c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e6e:	a905      	add	r1, sp, #20
 8004e70:	484b      	ldr	r0, [pc, #300]	; (8004fa0 <HAL_SPI_MspInit+0x188>)
 8004e72:	f002 fb49 	bl	8007508 <HAL_GPIO_Init>
    hdma_spi1_rx.Instance = DMA1_Channel3;
 8004e76:	484b      	ldr	r0, [pc, #300]	; (8004fa4 <HAL_SPI_MspInit+0x18c>)
 8004e78:	4b4b      	ldr	r3, [pc, #300]	; (8004fa8 <HAL_SPI_MspInit+0x190>)
 8004e7a:	6003      	str	r3, [r0, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8004e7c:	230a      	movs	r3, #10
 8004e7e:	6043      	str	r3, [r0, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004e80:	2300      	movs	r3, #0
 8004e82:	6083      	str	r3, [r0, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e84:	60c3      	str	r3, [r0, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004e86:	2280      	movs	r2, #128	; 0x80
 8004e88:	6102      	str	r2, [r0, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004e8a:	6143      	str	r3, [r0, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004e8c:	6183      	str	r3, [r0, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8004e8e:	61c3      	str	r3, [r0, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004e90:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8004e92:	f001 fc69 	bl	8006768 <HAL_DMA_Init>
 8004e96:	bb00      	cbnz	r0, 8004eda <HAL_SPI_MspInit+0xc2>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8004e98:	4b42      	ldr	r3, [pc, #264]	; (8004fa4 <HAL_SPI_MspInit+0x18c>)
 8004e9a:	65a3      	str	r3, [r4, #88]	; 0x58
 8004e9c:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_spi1_tx.Instance = DMA1_Channel4;
 8004e9e:	4843      	ldr	r0, [pc, #268]	; (8004fac <HAL_SPI_MspInit+0x194>)
 8004ea0:	4b43      	ldr	r3, [pc, #268]	; (8004fb0 <HAL_SPI_MspInit+0x198>)
 8004ea2:	6003      	str	r3, [r0, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8004ea4:	230b      	movs	r3, #11
 8004ea6:	6043      	str	r3, [r0, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004ea8:	2310      	movs	r3, #16
 8004eaa:	6083      	str	r3, [r0, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004eac:	2300      	movs	r3, #0
 8004eae:	60c3      	str	r3, [r0, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004eb0:	2280      	movs	r2, #128	; 0x80
 8004eb2:	6102      	str	r2, [r0, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004eb4:	6143      	str	r3, [r0, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004eb6:	6183      	str	r3, [r0, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8004eb8:	61c3      	str	r3, [r0, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004eba:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8004ebc:	f001 fc54 	bl	8006768 <HAL_DMA_Init>
 8004ec0:	b970      	cbnz	r0, 8004ee0 <HAL_SPI_MspInit+0xc8>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8004ec2:	4b3a      	ldr	r3, [pc, #232]	; (8004fac <HAL_SPI_MspInit+0x194>)
 8004ec4:	6563      	str	r3, [r4, #84]	; 0x54
 8004ec6:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8004ec8:	2200      	movs	r2, #0
 8004eca:	4611      	mov	r1, r2
 8004ecc:	2023      	movs	r0, #35	; 0x23
 8004ece:	f001 fa59 	bl	8006384 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004ed2:	2023      	movs	r0, #35	; 0x23
 8004ed4:	f001 fa8c 	bl	80063f0 <HAL_NVIC_EnableIRQ>
 8004ed8:	e7ae      	b.n	8004e38 <HAL_SPI_MspInit+0x20>
      Error_Handler();
 8004eda:	f7ff ff4e 	bl	8004d7a <Error_Handler>
 8004ede:	e7db      	b.n	8004e98 <HAL_SPI_MspInit+0x80>
      Error_Handler();
 8004ee0:	f7ff ff4b 	bl	8004d7a <Error_Handler>
 8004ee4:	e7ed      	b.n	8004ec2 <HAL_SPI_MspInit+0xaa>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004ee6:	4b2d      	ldr	r3, [pc, #180]	; (8004f9c <HAL_SPI_MspInit+0x184>)
 8004ee8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004eea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004eee:	659a      	str	r2, [r3, #88]	; 0x58
 8004ef0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004ef2:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8004ef6:	9203      	str	r2, [sp, #12]
 8004ef8:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004efa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004efc:	f042 0204 	orr.w	r2, r2, #4
 8004f00:	64da      	str	r2, [r3, #76]	; 0x4c
 8004f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f04:	f003 0304 	and.w	r3, r3, #4
 8004f08:	9304      	str	r3, [sp, #16]
 8004f0a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8004f0c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004f10:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f12:	2302      	movs	r3, #2
 8004f14:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004f16:	2306      	movs	r3, #6
 8004f18:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f1a:	a905      	add	r1, sp, #20
 8004f1c:	4825      	ldr	r0, [pc, #148]	; (8004fb4 <HAL_SPI_MspInit+0x19c>)
 8004f1e:	f002 faf3 	bl	8007508 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA2_Channel1;
 8004f22:	4825      	ldr	r0, [pc, #148]	; (8004fb8 <HAL_SPI_MspInit+0x1a0>)
 8004f24:	4b25      	ldr	r3, [pc, #148]	; (8004fbc <HAL_SPI_MspInit+0x1a4>)
 8004f26:	6003      	str	r3, [r0, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 8004f28:	230e      	movs	r3, #14
 8004f2a:	6043      	str	r3, [r0, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	6083      	str	r3, [r0, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f30:	60c3      	str	r3, [r0, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004f32:	2280      	movs	r2, #128	; 0x80
 8004f34:	6102      	str	r2, [r0, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004f36:	6143      	str	r3, [r0, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004f38:	6183      	str	r3, [r0, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8004f3a:	61c3      	str	r3, [r0, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004f3c:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8004f3e:	f001 fc13 	bl	8006768 <HAL_DMA_Init>
 8004f42:	bb00      	cbnz	r0, 8004f86 <HAL_SPI_MspInit+0x16e>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 8004f44:	4b1c      	ldr	r3, [pc, #112]	; (8004fb8 <HAL_SPI_MspInit+0x1a0>)
 8004f46:	65a3      	str	r3, [r4, #88]	; 0x58
 8004f48:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_spi3_tx.Instance = DMA2_Channel2;
 8004f4a:	481d      	ldr	r0, [pc, #116]	; (8004fc0 <HAL_SPI_MspInit+0x1a8>)
 8004f4c:	4b1d      	ldr	r3, [pc, #116]	; (8004fc4 <HAL_SPI_MspInit+0x1ac>)
 8004f4e:	6003      	str	r3, [r0, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 8004f50:	230f      	movs	r3, #15
 8004f52:	6043      	str	r3, [r0, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004f54:	2310      	movs	r3, #16
 8004f56:	6083      	str	r3, [r0, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	60c3      	str	r3, [r0, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004f5c:	2280      	movs	r2, #128	; 0x80
 8004f5e:	6102      	str	r2, [r0, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004f60:	6143      	str	r3, [r0, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004f62:	6183      	str	r3, [r0, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8004f64:	61c3      	str	r3, [r0, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004f66:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8004f68:	f001 fbfe 	bl	8006768 <HAL_DMA_Init>
 8004f6c:	b970      	cbnz	r0, 8004f8c <HAL_SPI_MspInit+0x174>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8004f6e:	4b14      	ldr	r3, [pc, #80]	; (8004fc0 <HAL_SPI_MspInit+0x1a8>)
 8004f70:	6563      	str	r3, [r4, #84]	; 0x54
 8004f72:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8004f74:	2200      	movs	r2, #0
 8004f76:	4611      	mov	r1, r2
 8004f78:	2033      	movs	r0, #51	; 0x33
 8004f7a:	f001 fa03 	bl	8006384 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8004f7e:	2033      	movs	r0, #51	; 0x33
 8004f80:	f001 fa36 	bl	80063f0 <HAL_NVIC_EnableIRQ>
}
 8004f84:	e758      	b.n	8004e38 <HAL_SPI_MspInit+0x20>
      Error_Handler();
 8004f86:	f7ff fef8 	bl	8004d7a <Error_Handler>
 8004f8a:	e7db      	b.n	8004f44 <HAL_SPI_MspInit+0x12c>
      Error_Handler();
 8004f8c:	f7ff fef5 	bl	8004d7a <Error_Handler>
 8004f90:	e7ed      	b.n	8004f6e <HAL_SPI_MspInit+0x156>
 8004f92:	bf00      	nop
 8004f94:	40013000 	.word	0x40013000
 8004f98:	40003c00 	.word	0x40003c00
 8004f9c:	40021000 	.word	0x40021000
 8004fa0:	48000400 	.word	0x48000400
 8004fa4:	20001ad4 	.word	0x20001ad4
 8004fa8:	40020030 	.word	0x40020030
 8004fac:	20001b34 	.word	0x20001b34
 8004fb0:	40020044 	.word	0x40020044
 8004fb4:	48000800 	.word	0x48000800
 8004fb8:	20001b94 	.word	0x20001b94
 8004fbc:	40020408 	.word	0x40020408
 8004fc0:	20001bf4 	.word	0x20001bf4
 8004fc4:	4002041c 	.word	0x4002041c

08004fc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004fc8:	b500      	push	{lr}
 8004fca:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fcc:	4b0b      	ldr	r3, [pc, #44]	; (8004ffc <HAL_MspInit+0x34>)
 8004fce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004fd0:	f042 0201 	orr.w	r2, r2, #1
 8004fd4:	661a      	str	r2, [r3, #96]	; 0x60
 8004fd6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004fd8:	f002 0201 	and.w	r2, r2, #1
 8004fdc:	9200      	str	r2, [sp, #0]
 8004fde:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004fe0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004fe2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004fe6:	659a      	str	r2, [r3, #88]	; 0x58
 8004fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fee:	9301      	str	r3, [sp, #4]
 8004ff0:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004ff2:	f002 fc05 	bl	8007800 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ff6:	b003      	add	sp, #12
 8004ff8:	f85d fb04 	ldr.w	pc, [sp], #4
 8004ffc:	40021000 	.word	0x40021000

08005000 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005000:	e7fe      	b.n	8005000 <NMI_Handler>
	...

08005004 <HardFault_Handler>:
  {



    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  TIM1->CCR1 = 0;
 8005004:	4a02      	ldr	r2, [pc, #8]	; (8005010 <HardFault_Handler+0xc>)
 8005006:	2300      	movs	r3, #0
 8005008:	6353      	str	r3, [r2, #52]	; 0x34
	  TIM1->CCR2 = 0;
 800500a:	6393      	str	r3, [r2, #56]	; 0x38
	  TIM1->CCR3 = 0;
 800500c:	63d3      	str	r3, [r2, #60]	; 0x3c
  while (1)
 800500e:	e7fb      	b.n	8005008 <HardFault_Handler+0x4>
 8005010:	40012c00 	.word	0x40012c00

08005014 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005014:	e7fe      	b.n	8005014 <MemManage_Handler>

08005016 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005016:	e7fe      	b.n	8005016 <BusFault_Handler>

08005018 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005018:	e7fe      	b.n	8005018 <UsageFault_Handler>

0800501a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800501a:	4770      	bx	lr

0800501c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800501c:	4770      	bx	lr

0800501e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800501e:	4770      	bx	lr

08005020 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005020:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005022:	f000 fb1b 	bl	800565c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005026:	bd08      	pop	{r3, pc}

08005028 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005028:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800502a:	4802      	ldr	r0, [pc, #8]	; (8005034 <DMA1_Channel1_IRQHandler+0xc>)
 800502c:	f001 fcd1 	bl	80069d2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005030:	bd08      	pop	{r3, pc}
 8005032:	bf00      	nop
 8005034:	20001964 	.word	0x20001964

08005038 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8005038:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800503a:	4802      	ldr	r0, [pc, #8]	; (8005044 <DMA1_Channel2_IRQHandler+0xc>)
 800503c:	f001 fcc9 	bl	80069d2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8005040:	bd08      	pop	{r3, pc}
 8005042:	bf00      	nop
 8005044:	200019c4 	.word	0x200019c4

08005048 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005048:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800504a:	4802      	ldr	r0, [pc, #8]	; (8005054 <DMA1_Channel3_IRQHandler+0xc>)
 800504c:	f001 fcc1 	bl	80069d2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8005050:	bd08      	pop	{r3, pc}
 8005052:	bf00      	nop
 8005054:	20001ad4 	.word	0x20001ad4

08005058 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8005058:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800505a:	4802      	ldr	r0, [pc, #8]	; (8005064 <DMA1_Channel4_IRQHandler+0xc>)
 800505c:	f001 fcb9 	bl	80069d2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8005060:	bd08      	pop	{r3, pc}
 8005062:	bf00      	nop
 8005064:	20001b34 	.word	0x20001b34

08005068 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8005068:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800506a:	4803      	ldr	r0, [pc, #12]	; (8005078 <ADC1_2_IRQHandler+0x10>)
 800506c:	f000 fc3a 	bl	80058e4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8005070:	4802      	ldr	r0, [pc, #8]	; (800507c <ADC1_2_IRQHandler+0x14>)
 8005072:	f000 fc37 	bl	80058e4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8005076:	bd08      	pop	{r3, pc}
 8005078:	2000188c 	.word	0x2000188c
 800507c:	200018f8 	.word	0x200018f8

08005080 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8005080:	b508      	push	{r3, lr}
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8005082:	4802      	ldr	r0, [pc, #8]	; (800508c <FDCAN1_IT0_IRQHandler+0xc>)
 8005084:	f001 ff9d 	bl	8006fc2 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8005088:	bd08      	pop	{r3, pc}
 800508a:	bf00      	nop
 800508c:	20001a38 	.word	0x20001a38

08005090 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005090:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005092:	4802      	ldr	r0, [pc, #8]	; (800509c <TIM3_IRQHandler+0xc>)
 8005094:	f003 fef9 	bl	8008e8a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005098:	bd08      	pop	{r3, pc}
 800509a:	bf00      	nop
 800509c:	20001d6c 	.word	0x20001d6c

080050a0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80050a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80050a2:	4802      	ldr	r0, [pc, #8]	; (80050ac <SPI1_IRQHandler+0xc>)
 80050a4:	f003 fcaa 	bl	80089fc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80050a8:	bd08      	pop	{r3, pc}
 80050aa:	bf00      	nop
 80050ac:	20001c54 	.word	0x20001c54

080050b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80050b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80050b2:	4802      	ldr	r0, [pc, #8]	; (80050bc <USART1_IRQHandler+0xc>)
 80050b4:	f004 fe6c 	bl	8009d90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80050b8:	bd08      	pop	{r3, pc}
 80050ba:	bf00      	nop
 80050bc:	20001e18 	.word	0x20001e18

080050c0 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80050c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80050c2:	4802      	ldr	r0, [pc, #8]	; (80050cc <SPI3_IRQHandler+0xc>)
 80050c4:	f003 fc9a 	bl	80089fc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80050c8:	bd08      	pop	{r3, pc}
 80050ca:	bf00      	nop
 80050cc:	20001cb8 	.word	0x20001cb8

080050d0 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 80050d0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 80050d2:	4802      	ldr	r0, [pc, #8]	; (80050dc <DMA2_Channel1_IRQHandler+0xc>)
 80050d4:	f001 fc7d 	bl	80069d2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 80050d8:	bd08      	pop	{r3, pc}
 80050da:	bf00      	nop
 80050dc:	20001b94 	.word	0x20001b94

080050e0 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 80050e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80050e2:	4802      	ldr	r0, [pc, #8]	; (80050ec <DMA2_Channel2_IRQHandler+0xc>)
 80050e4:	f001 fc75 	bl	80069d2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 80050e8:	bd08      	pop	{r3, pc}
 80050ea:	bf00      	nop
 80050ec:	20001bf4 	.word	0x20001bf4

080050f0 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 80050f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80050f2:	4802      	ldr	r0, [pc, #8]	; (80050fc <DMA2_Channel3_IRQHandler+0xc>)
 80050f4:	f001 fc6d 	bl	80069d2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 80050f8:	bd08      	pop	{r3, pc}
 80050fa:	bf00      	nop
 80050fc:	20001db8 	.word	0x20001db8

08005100 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8005100:	2001      	movs	r0, #1
 8005102:	4770      	bx	lr

08005104 <_kill>:

int _kill(int pid, int sig)
{
 8005104:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005106:	f006 f981 	bl	800b40c <__errno>
 800510a:	2316      	movs	r3, #22
 800510c:	6003      	str	r3, [r0, #0]
  return -1;
}
 800510e:	f04f 30ff 	mov.w	r0, #4294967295
 8005112:	bd08      	pop	{r3, pc}

08005114 <_exit>:

void _exit (int status)
{
 8005114:	b508      	push	{r3, lr}
  errno = EINVAL;
 8005116:	f006 f979 	bl	800b40c <__errno>
 800511a:	2316      	movs	r3, #22
 800511c:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 800511e:	e7fe      	b.n	800511e <_exit+0xa>

08005120 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005120:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005122:	1e16      	subs	r6, r2, #0
 8005124:	dd07      	ble.n	8005136 <_read+0x16>
 8005126:	460c      	mov	r4, r1
 8005128:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 800512a:	f3af 8000 	nop.w
 800512e:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005132:	42a5      	cmp	r5, r4
 8005134:	d1f9      	bne.n	800512a <_read+0xa>
  }

  return len;
}
 8005136:	4630      	mov	r0, r6
 8005138:	bd70      	pop	{r4, r5, r6, pc}

0800513a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800513a:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800513c:	1e16      	subs	r6, r2, #0
 800513e:	dd07      	ble.n	8005150 <_write+0x16>
 8005140:	460c      	mov	r4, r1
 8005142:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 8005144:	f814 0b01 	ldrb.w	r0, [r4], #1
 8005148:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800514c:	42a5      	cmp	r5, r4
 800514e:	d1f9      	bne.n	8005144 <_write+0xa>
  }
  return len;
}
 8005150:	4630      	mov	r0, r6
 8005152:	bd70      	pop	{r4, r5, r6, pc}

08005154 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8005154:	f04f 30ff 	mov.w	r0, #4294967295
 8005158:	4770      	bx	lr

0800515a <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800515a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800515e:	604b      	str	r3, [r1, #4]
  return 0;
}
 8005160:	2000      	movs	r0, #0
 8005162:	4770      	bx	lr

08005164 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8005164:	2001      	movs	r0, #1
 8005166:	4770      	bx	lr

08005168 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8005168:	2000      	movs	r0, #0
 800516a:	4770      	bx	lr

0800516c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800516c:	b508      	push	{r3, lr}
 800516e:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005170:	4a0c      	ldr	r2, [pc, #48]	; (80051a4 <_sbrk+0x38>)
 8005172:	6812      	ldr	r2, [r2, #0]
 8005174:	b152      	cbz	r2, 800518c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005176:	4a0b      	ldr	r2, [pc, #44]	; (80051a4 <_sbrk+0x38>)
 8005178:	6810      	ldr	r0, [r2, #0]
 800517a:	4403      	add	r3, r0
 800517c:	4a0a      	ldr	r2, [pc, #40]	; (80051a8 <_sbrk+0x3c>)
 800517e:	490b      	ldr	r1, [pc, #44]	; (80051ac <_sbrk+0x40>)
 8005180:	1a52      	subs	r2, r2, r1
 8005182:	4293      	cmp	r3, r2
 8005184:	d806      	bhi.n	8005194 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8005186:	4a07      	ldr	r2, [pc, #28]	; (80051a4 <_sbrk+0x38>)
 8005188:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800518a:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 800518c:	4a05      	ldr	r2, [pc, #20]	; (80051a4 <_sbrk+0x38>)
 800518e:	4908      	ldr	r1, [pc, #32]	; (80051b0 <_sbrk+0x44>)
 8005190:	6011      	str	r1, [r2, #0]
 8005192:	e7f0      	b.n	8005176 <_sbrk+0xa>
    errno = ENOMEM;
 8005194:	f006 f93a 	bl	800b40c <__errno>
 8005198:	230c      	movs	r3, #12
 800519a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800519c:	f04f 30ff 	mov.w	r0, #4294967295
 80051a0:	e7f3      	b.n	800518a <_sbrk+0x1e>
 80051a2:	bf00      	nop
 80051a4:	20001d1c 	.word	0x20001d1c
 80051a8:	20008000 	.word	0x20008000
 80051ac:	00000400 	.word	0x00000400
 80051b0:	20001ff8 	.word	0x20001ff8

080051b4 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80051b4:	4a03      	ldr	r2, [pc, #12]	; (80051c4 <SystemInit+0x10>)
 80051b6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80051ba:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80051be:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80051c2:	4770      	bx	lr
 80051c4:	e000ed00 	.word	0xe000ed00

080051c8 <MX_TIM3_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80051c8:	b500      	push	{lr}
 80051ca:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80051cc:	2300      	movs	r3, #0
 80051ce:	9304      	str	r3, [sp, #16]
 80051d0:	9305      	str	r3, [sp, #20]
 80051d2:	9306      	str	r3, [sp, #24]
 80051d4:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80051d6:	9301      	str	r3, [sp, #4]
 80051d8:	9302      	str	r3, [sp, #8]
 80051da:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80051dc:	4815      	ldr	r0, [pc, #84]	; (8005234 <MX_TIM3_Init+0x6c>)
 80051de:	4a16      	ldr	r2, [pc, #88]	; (8005238 <MX_TIM3_Init+0x70>)
 80051e0:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 3;
 80051e2:	2203      	movs	r2, #3
 80051e4:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80051e6:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 3999;
 80051e8:	f640 729f 	movw	r2, #3999	; 0xf9f
 80051ec:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80051ee:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80051f0:	2380      	movs	r3, #128	; 0x80
 80051f2:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80051f4:	f003 fff2 	bl	80091dc <HAL_TIM_Base_Init>
 80051f8:	b990      	cbnz	r0, 8005220 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80051fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051fe:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005200:	a904      	add	r1, sp, #16
 8005202:	480c      	ldr	r0, [pc, #48]	; (8005234 <MX_TIM3_Init+0x6c>)
 8005204:	f004 f93e 	bl	8009484 <HAL_TIM_ConfigClockSource>
 8005208:	b968      	cbnz	r0, 8005226 <MX_TIM3_Init+0x5e>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800520a:	2300      	movs	r3, #0
 800520c:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800520e:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005210:	a901      	add	r1, sp, #4
 8005212:	4808      	ldr	r0, [pc, #32]	; (8005234 <MX_TIM3_Init+0x6c>)
 8005214:	f004 fc02 	bl	8009a1c <HAL_TIMEx_MasterConfigSynchronization>
 8005218:	b940      	cbnz	r0, 800522c <MX_TIM3_Init+0x64>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800521a:	b009      	add	sp, #36	; 0x24
 800521c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8005220:	f7ff fdab 	bl	8004d7a <Error_Handler>
 8005224:	e7e9      	b.n	80051fa <MX_TIM3_Init+0x32>
    Error_Handler();
 8005226:	f7ff fda8 	bl	8004d7a <Error_Handler>
 800522a:	e7ee      	b.n	800520a <MX_TIM3_Init+0x42>
    Error_Handler();
 800522c:	f7ff fda5 	bl	8004d7a <Error_Handler>
}
 8005230:	e7f3      	b.n	800521a <MX_TIM3_Init+0x52>
 8005232:	bf00      	nop
 8005234:	20001d6c 	.word	0x20001d6c
 8005238:	40000400 	.word	0x40000400

0800523c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800523c:	b500      	push	{lr}
 800523e:	b083      	sub	sp, #12

  if(tim_baseHandle->Instance==TIM1)
 8005240:	6803      	ldr	r3, [r0, #0]
 8005242:	4a13      	ldr	r2, [pc, #76]	; (8005290 <HAL_TIM_Base_MspInit+0x54>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d005      	beq.n	8005254 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM3)
 8005248:	4a12      	ldr	r2, [pc, #72]	; (8005294 <HAL_TIM_Base_MspInit+0x58>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d00d      	beq.n	800526a <HAL_TIM_Base_MspInit+0x2e>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800524e:	b003      	add	sp, #12
 8005250:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005254:	4b10      	ldr	r3, [pc, #64]	; (8005298 <HAL_TIM_Base_MspInit+0x5c>)
 8005256:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005258:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800525c:	661a      	str	r2, [r3, #96]	; 0x60
 800525e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005260:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005264:	9300      	str	r3, [sp, #0]
 8005266:	9b00      	ldr	r3, [sp, #0]
 8005268:	e7f1      	b.n	800524e <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800526a:	4b0b      	ldr	r3, [pc, #44]	; (8005298 <HAL_TIM_Base_MspInit+0x5c>)
 800526c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800526e:	f042 0202 	orr.w	r2, r2, #2
 8005272:	659a      	str	r2, [r3, #88]	; 0x58
 8005274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005276:	f003 0302 	and.w	r3, r3, #2
 800527a:	9301      	str	r3, [sp, #4]
 800527c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800527e:	2200      	movs	r2, #0
 8005280:	4611      	mov	r1, r2
 8005282:	201d      	movs	r0, #29
 8005284:	f001 f87e 	bl	8006384 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005288:	201d      	movs	r0, #29
 800528a:	f001 f8b1 	bl	80063f0 <HAL_NVIC_EnableIRQ>
}
 800528e:	e7de      	b.n	800524e <HAL_TIM_Base_MspInit+0x12>
 8005290:	40012c00 	.word	0x40012c00
 8005294:	40000400 	.word	0x40000400
 8005298:	40021000 	.word	0x40021000

0800529c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800529c:	b570      	push	{r4, r5, r6, lr}
 800529e:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052a0:	2300      	movs	r3, #0
 80052a2:	9303      	str	r3, [sp, #12]
 80052a4:	9304      	str	r3, [sp, #16]
 80052a6:	9305      	str	r3, [sp, #20]
 80052a8:	9306      	str	r3, [sp, #24]
 80052aa:	9307      	str	r3, [sp, #28]
  if(timHandle->Instance==TIM1)
 80052ac:	6802      	ldr	r2, [r0, #0]
 80052ae:	4b1e      	ldr	r3, [pc, #120]	; (8005328 <HAL_TIM_MspPostInit+0x8c>)
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d001      	beq.n	80052b8 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80052b4:	b008      	add	sp, #32
 80052b6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80052b8:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80052bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80052be:	f042 0204 	orr.w	r2, r2, #4
 80052c2:	64da      	str	r2, [r3, #76]	; 0x4c
 80052c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80052c6:	f002 0204 	and.w	r2, r2, #4
 80052ca:	9201      	str	r2, [sp, #4]
 80052cc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80052d0:	f042 0202 	orr.w	r2, r2, #2
 80052d4:	64da      	str	r2, [r3, #76]	; 0x4c
 80052d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052d8:	f003 0302 	and.w	r3, r3, #2
 80052dc:	9302      	str	r3, [sp, #8]
 80052de:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80052e0:	2307      	movs	r3, #7
 80052e2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052e4:	2502      	movs	r5, #2
 80052e6:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80052e8:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80052ea:	a903      	add	r1, sp, #12
 80052ec:	480f      	ldr	r0, [pc, #60]	; (800532c <HAL_TIM_MspPostInit+0x90>)
 80052ee:	f002 f90b 	bl	8007508 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80052f2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80052f6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052f8:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052fa:	2400      	movs	r4, #0
 80052fc:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052fe:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8005300:	2306      	movs	r3, #6
 8005302:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005304:	4e0a      	ldr	r6, [pc, #40]	; (8005330 <HAL_TIM_MspPostInit+0x94>)
 8005306:	a903      	add	r1, sp, #12
 8005308:	4630      	mov	r0, r6
 800530a:	f002 f8fd 	bl	8007508 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800530e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005312:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005314:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005316:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005318:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800531a:	2304      	movs	r3, #4
 800531c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800531e:	a903      	add	r1, sp, #12
 8005320:	4630      	mov	r0, r6
 8005322:	f002 f8f1 	bl	8007508 <HAL_GPIO_Init>
}
 8005326:	e7c5      	b.n	80052b4 <HAL_TIM_MspPostInit+0x18>
 8005328:	40012c00 	.word	0x40012c00
 800532c:	48000800 	.word	0x48000800
 8005330:	48000400 	.word	0x48000400

08005334 <MX_TIM1_Init>:
{
 8005334:	b510      	push	{r4, lr}
 8005336:	b09c      	sub	sp, #112	; 0x70
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005338:	2400      	movs	r4, #0
 800533a:	9418      	str	r4, [sp, #96]	; 0x60
 800533c:	9419      	str	r4, [sp, #100]	; 0x64
 800533e:	941a      	str	r4, [sp, #104]	; 0x68
 8005340:	941b      	str	r4, [sp, #108]	; 0x6c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005342:	9415      	str	r4, [sp, #84]	; 0x54
 8005344:	9416      	str	r4, [sp, #88]	; 0x58
 8005346:	9417      	str	r4, [sp, #92]	; 0x5c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005348:	940e      	str	r4, [sp, #56]	; 0x38
 800534a:	940f      	str	r4, [sp, #60]	; 0x3c
 800534c:	9410      	str	r4, [sp, #64]	; 0x40
 800534e:	9411      	str	r4, [sp, #68]	; 0x44
 8005350:	9412      	str	r4, [sp, #72]	; 0x48
 8005352:	9413      	str	r4, [sp, #76]	; 0x4c
 8005354:	9414      	str	r4, [sp, #80]	; 0x50
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005356:	2234      	movs	r2, #52	; 0x34
 8005358:	4621      	mov	r1, r4
 800535a:	a801      	add	r0, sp, #4
 800535c:	f006 f804 	bl	800b368 <memset>
  htim1.Instance = TIM1;
 8005360:	483d      	ldr	r0, [pc, #244]	; (8005458 <MX_TIM1_Init+0x124>)
 8005362:	4b3e      	ldr	r3, [pc, #248]	; (800545c <MX_TIM1_Init+0x128>)
 8005364:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 8005366:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8005368:	2320      	movs	r3, #32
 800536a:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 1499;
 800536c:	f240 53db 	movw	r3, #1499	; 0x5db
 8005370:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005372:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8005374:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005376:	2380      	movs	r3, #128	; 0x80
 8005378:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800537a:	f003 ff2f 	bl	80091dc <HAL_TIM_Base_Init>
 800537e:	2800      	cmp	r0, #0
 8005380:	d151      	bne.n	8005426 <MX_TIM1_Init+0xf2>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005382:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005386:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005388:	a918      	add	r1, sp, #96	; 0x60
 800538a:	4833      	ldr	r0, [pc, #204]	; (8005458 <MX_TIM1_Init+0x124>)
 800538c:	f004 f87a 	bl	8009484 <HAL_TIM_ConfigClockSource>
 8005390:	2800      	cmp	r0, #0
 8005392:	d14b      	bne.n	800542c <MX_TIM1_Init+0xf8>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005394:	4830      	ldr	r0, [pc, #192]	; (8005458 <MX_TIM1_Init+0x124>)
 8005396:	f003 ff51 	bl	800923c <HAL_TIM_PWM_Init>
 800539a:	2800      	cmp	r0, #0
 800539c:	d149      	bne.n	8005432 <MX_TIM1_Init+0xfe>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800539e:	2300      	movs	r3, #0
 80053a0:	9315      	str	r3, [sp, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80053a2:	9316      	str	r3, [sp, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80053a4:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80053a6:	a915      	add	r1, sp, #84	; 0x54
 80053a8:	482b      	ldr	r0, [pc, #172]	; (8005458 <MX_TIM1_Init+0x124>)
 80053aa:	f004 fb37 	bl	8009a1c <HAL_TIMEx_MasterConfigSynchronization>
 80053ae:	2800      	cmp	r0, #0
 80053b0:	d142      	bne.n	8005438 <MX_TIM1_Init+0x104>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80053b2:	2360      	movs	r3, #96	; 0x60
 80053b4:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80053b6:	2200      	movs	r2, #0
 80053b8:	920f      	str	r2, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80053ba:	2302      	movs	r3, #2
 80053bc:	9310      	str	r3, [sp, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80053be:	2308      	movs	r3, #8
 80053c0:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80053c2:	9212      	str	r2, [sp, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80053c4:	9213      	str	r2, [sp, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80053c6:	9214      	str	r2, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80053c8:	a90e      	add	r1, sp, #56	; 0x38
 80053ca:	4823      	ldr	r0, [pc, #140]	; (8005458 <MX_TIM1_Init+0x124>)
 80053cc:	f003 ffb0 	bl	8009330 <HAL_TIM_PWM_ConfigChannel>
 80053d0:	2800      	cmp	r0, #0
 80053d2:	d134      	bne.n	800543e <MX_TIM1_Init+0x10a>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80053d4:	2204      	movs	r2, #4
 80053d6:	a90e      	add	r1, sp, #56	; 0x38
 80053d8:	481f      	ldr	r0, [pc, #124]	; (8005458 <MX_TIM1_Init+0x124>)
 80053da:	f003 ffa9 	bl	8009330 <HAL_TIM_PWM_ConfigChannel>
 80053de:	2800      	cmp	r0, #0
 80053e0:	d130      	bne.n	8005444 <MX_TIM1_Init+0x110>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80053e2:	2208      	movs	r2, #8
 80053e4:	a90e      	add	r1, sp, #56	; 0x38
 80053e6:	481c      	ldr	r0, [pc, #112]	; (8005458 <MX_TIM1_Init+0x124>)
 80053e8:	f003 ffa2 	bl	8009330 <HAL_TIM_PWM_ConfigChannel>
 80053ec:	bb68      	cbnz	r0, 800544a <MX_TIM1_Init+0x116>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80053ee:	2300      	movs	r3, #0
 80053f0:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80053f2:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80053f4:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80053f6:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80053f8:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80053fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80053fe:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005400:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8005402:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8005404:	9309      	str	r3, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8005406:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800540a:	920a      	str	r2, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800540c:	930b      	str	r3, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800540e:	930c      	str	r3, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005410:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005412:	a901      	add	r1, sp, #4
 8005414:	4810      	ldr	r0, [pc, #64]	; (8005458 <MX_TIM1_Init+0x124>)
 8005416:	f004 fb4b 	bl	8009ab0 <HAL_TIMEx_ConfigBreakDeadTime>
 800541a:	b9c8      	cbnz	r0, 8005450 <MX_TIM1_Init+0x11c>
  HAL_TIM_MspPostInit(&htim1);
 800541c:	480e      	ldr	r0, [pc, #56]	; (8005458 <MX_TIM1_Init+0x124>)
 800541e:	f7ff ff3d 	bl	800529c <HAL_TIM_MspPostInit>
}
 8005422:	b01c      	add	sp, #112	; 0x70
 8005424:	bd10      	pop	{r4, pc}
    Error_Handler();
 8005426:	f7ff fca8 	bl	8004d7a <Error_Handler>
 800542a:	e7aa      	b.n	8005382 <MX_TIM1_Init+0x4e>
    Error_Handler();
 800542c:	f7ff fca5 	bl	8004d7a <Error_Handler>
 8005430:	e7b0      	b.n	8005394 <MX_TIM1_Init+0x60>
    Error_Handler();
 8005432:	f7ff fca2 	bl	8004d7a <Error_Handler>
 8005436:	e7b2      	b.n	800539e <MX_TIM1_Init+0x6a>
    Error_Handler();
 8005438:	f7ff fc9f 	bl	8004d7a <Error_Handler>
 800543c:	e7b9      	b.n	80053b2 <MX_TIM1_Init+0x7e>
    Error_Handler();
 800543e:	f7ff fc9c 	bl	8004d7a <Error_Handler>
 8005442:	e7c7      	b.n	80053d4 <MX_TIM1_Init+0xa0>
    Error_Handler();
 8005444:	f7ff fc99 	bl	8004d7a <Error_Handler>
 8005448:	e7cb      	b.n	80053e2 <MX_TIM1_Init+0xae>
    Error_Handler();
 800544a:	f7ff fc96 	bl	8004d7a <Error_Handler>
 800544e:	e7ce      	b.n	80053ee <MX_TIM1_Init+0xba>
    Error_Handler();
 8005450:	f7ff fc93 	bl	8004d7a <Error_Handler>
 8005454:	e7e2      	b.n	800541c <MX_TIM1_Init+0xe8>
 8005456:	bf00      	nop
 8005458:	20001d20 	.word	0x20001d20
 800545c:	40012c00 	.word	0x40012c00

08005460 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005460:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005462:	4817      	ldr	r0, [pc, #92]	; (80054c0 <MX_USART1_UART_Init+0x60>)
 8005464:	4b17      	ldr	r3, [pc, #92]	; (80054c4 <MX_USART1_UART_Init+0x64>)
 8005466:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 921600;
 8005468:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
 800546c:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800546e:	2300      	movs	r3, #0
 8005470:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005472:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005474:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005476:	220c      	movs	r2, #12
 8005478:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800547a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800547c:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800547e:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005480:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005482:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005484:	f005 f8f6 	bl	800a674 <HAL_UART_Init>
 8005488:	b970      	cbnz	r0, 80054a8 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800548a:	2100      	movs	r1, #0
 800548c:	480c      	ldr	r0, [pc, #48]	; (80054c0 <MX_USART1_UART_Init+0x60>)
 800548e:	f005 f96d 	bl	800a76c <HAL_UARTEx_SetTxFifoThreshold>
 8005492:	b960      	cbnz	r0, 80054ae <MX_USART1_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005494:	2100      	movs	r1, #0
 8005496:	480a      	ldr	r0, [pc, #40]	; (80054c0 <MX_USART1_UART_Init+0x60>)
 8005498:	f005 f98d 	bl	800a7b6 <HAL_UARTEx_SetRxFifoThreshold>
 800549c:	b950      	cbnz	r0, 80054b4 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800549e:	4808      	ldr	r0, [pc, #32]	; (80054c0 <MX_USART1_UART_Init+0x60>)
 80054a0:	f005 f945 	bl	800a72e <HAL_UARTEx_DisableFifoMode>
 80054a4:	b948      	cbnz	r0, 80054ba <MX_USART1_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80054a6:	bd08      	pop	{r3, pc}
    Error_Handler();
 80054a8:	f7ff fc67 	bl	8004d7a <Error_Handler>
 80054ac:	e7ed      	b.n	800548a <MX_USART1_UART_Init+0x2a>
    Error_Handler();
 80054ae:	f7ff fc64 	bl	8004d7a <Error_Handler>
 80054b2:	e7ef      	b.n	8005494 <MX_USART1_UART_Init+0x34>
    Error_Handler();
 80054b4:	f7ff fc61 	bl	8004d7a <Error_Handler>
 80054b8:	e7f1      	b.n	800549e <MX_USART1_UART_Init+0x3e>
    Error_Handler();
 80054ba:	f7ff fc5e 	bl	8004d7a <Error_Handler>
}
 80054be:	e7f2      	b.n	80054a6 <MX_USART1_UART_Init+0x46>
 80054c0:	20001e18 	.word	0x20001e18
 80054c4:	40013800 	.word	0x40013800

080054c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80054c8:	b530      	push	{r4, r5, lr}
 80054ca:	b099      	sub	sp, #100	; 0x64
 80054cc:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054ce:	2100      	movs	r1, #0
 80054d0:	9113      	str	r1, [sp, #76]	; 0x4c
 80054d2:	9114      	str	r1, [sp, #80]	; 0x50
 80054d4:	9115      	str	r1, [sp, #84]	; 0x54
 80054d6:	9116      	str	r1, [sp, #88]	; 0x58
 80054d8:	9117      	str	r1, [sp, #92]	; 0x5c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80054da:	2244      	movs	r2, #68	; 0x44
 80054dc:	a802      	add	r0, sp, #8
 80054de:	f005 ff43 	bl	800b368 <memset>
  if(uartHandle->Instance==USART1)
 80054e2:	6822      	ldr	r2, [r4, #0]
 80054e4:	4b27      	ldr	r3, [pc, #156]	; (8005584 <HAL_UART_MspInit+0xbc>)
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d001      	beq.n	80054ee <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80054ea:	b019      	add	sp, #100	; 0x64
 80054ec:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80054ee:	2301      	movs	r3, #1
 80054f0:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80054f2:	a802      	add	r0, sp, #8
 80054f4:	f002 fdac 	bl	8008050 <HAL_RCCEx_PeriphCLKConfig>
 80054f8:	2800      	cmp	r0, #0
 80054fa:	d13c      	bne.n	8005576 <HAL_UART_MspInit+0xae>
    __HAL_RCC_USART1_CLK_ENABLE();
 80054fc:	4b22      	ldr	r3, [pc, #136]	; (8005588 <HAL_UART_MspInit+0xc0>)
 80054fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005500:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005504:	661a      	str	r2, [r3, #96]	; 0x60
 8005506:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005508:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800550c:	9200      	str	r2, [sp, #0]
 800550e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005510:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005512:	f042 0204 	orr.w	r2, r2, #4
 8005516:	64da      	str	r2, [r3, #76]	; 0x4c
 8005518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800551a:	f003 0304 	and.w	r3, r3, #4
 800551e:	9301      	str	r3, [sp, #4]
 8005520:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005522:	2330      	movs	r3, #48	; 0x30
 8005524:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005526:	2302      	movs	r3, #2
 8005528:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800552a:	2500      	movs	r5, #0
 800552c:	9515      	str	r5, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800552e:	9516      	str	r5, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005530:	2307      	movs	r3, #7
 8005532:	9317      	str	r3, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005534:	a913      	add	r1, sp, #76	; 0x4c
 8005536:	4815      	ldr	r0, [pc, #84]	; (800558c <HAL_UART_MspInit+0xc4>)
 8005538:	f001 ffe6 	bl	8007508 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Channel3;
 800553c:	4814      	ldr	r0, [pc, #80]	; (8005590 <HAL_UART_MspInit+0xc8>)
 800553e:	4b15      	ldr	r3, [pc, #84]	; (8005594 <HAL_UART_MspInit+0xcc>)
 8005540:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8005542:	2319      	movs	r3, #25
 8005544:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005546:	2310      	movs	r3, #16
 8005548:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800554a:	60c5      	str	r5, [r0, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800554c:	2380      	movs	r3, #128	; 0x80
 800554e:	6103      	str	r3, [r0, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005550:	6145      	str	r5, [r0, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005552:	6185      	str	r5, [r0, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8005554:	61c5      	str	r5, [r0, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005556:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005558:	f001 f906 	bl	8006768 <HAL_DMA_Init>
 800555c:	b970      	cbnz	r0, 800557c <HAL_UART_MspInit+0xb4>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800555e:	4b0c      	ldr	r3, [pc, #48]	; (8005590 <HAL_UART_MspInit+0xc8>)
 8005560:	67a3      	str	r3, [r4, #120]	; 0x78
 8005562:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005564:	2200      	movs	r2, #0
 8005566:	4611      	mov	r1, r2
 8005568:	2025      	movs	r0, #37	; 0x25
 800556a:	f000 ff0b 	bl	8006384 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800556e:	2025      	movs	r0, #37	; 0x25
 8005570:	f000 ff3e 	bl	80063f0 <HAL_NVIC_EnableIRQ>
}
 8005574:	e7b9      	b.n	80054ea <HAL_UART_MspInit+0x22>
      Error_Handler();
 8005576:	f7ff fc00 	bl	8004d7a <Error_Handler>
 800557a:	e7bf      	b.n	80054fc <HAL_UART_MspInit+0x34>
      Error_Handler();
 800557c:	f7ff fbfd 	bl	8004d7a <Error_Handler>
 8005580:	e7ed      	b.n	800555e <HAL_UART_MspInit+0x96>
 8005582:	bf00      	nop
 8005584:	40013800 	.word	0x40013800
 8005588:	40021000 	.word	0x40021000
 800558c:	48000800 	.word	0x48000800
 8005590:	20001db8 	.word	0x20001db8
 8005594:	40020430 	.word	0x40020430

08005598 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005598:	480d      	ldr	r0, [pc, #52]	; (80055d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800559a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800559c:	480d      	ldr	r0, [pc, #52]	; (80055d4 <LoopForever+0x6>)
  ldr r1, =_edata
 800559e:	490e      	ldr	r1, [pc, #56]	; (80055d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80055a0:	4a0e      	ldr	r2, [pc, #56]	; (80055dc <LoopForever+0xe>)
  movs r3, #0
 80055a2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80055a4:	e002      	b.n	80055ac <LoopCopyDataInit>

080055a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80055a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80055a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80055aa:	3304      	adds	r3, #4

080055ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80055ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80055ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80055b0:	d3f9      	bcc.n	80055a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80055b2:	4a0b      	ldr	r2, [pc, #44]	; (80055e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80055b4:	4c0b      	ldr	r4, [pc, #44]	; (80055e4 <LoopForever+0x16>)
  movs r3, #0
 80055b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80055b8:	e001      	b.n	80055be <LoopFillZerobss>

080055ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80055ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80055bc:	3204      	adds	r2, #4

080055be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80055be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80055c0:	d3fb      	bcc.n	80055ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80055c2:	f7ff fdf7 	bl	80051b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80055c6:	f005 ff27 	bl	800b418 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80055ca:	f7ff fbb6 	bl	8004d3a <main>

080055ce <LoopForever>:

LoopForever:
    b LoopForever
 80055ce:	e7fe      	b.n	80055ce <LoopForever>
  ldr   r0, =_estack
 80055d0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80055d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80055d8:	20000758 	.word	0x20000758
  ldr r2, =_sidata
 80055dc:	08010110 	.word	0x08010110
  ldr r2, =_sbss
 80055e0:	20000758 	.word	0x20000758
  ldr r4, =_ebss
 80055e4:	20001ff8 	.word	0x20001ff8

080055e8 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80055e8:	e7fe      	b.n	80055e8 <COMP1_2_3_IRQHandler>
	...

080055ec <HAL_InitTick>:
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 80055ec:	4b10      	ldr	r3, [pc, #64]	; (8005630 <HAL_InitTick+0x44>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	b90b      	cbnz	r3, 80055f6 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80055f2:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80055f4:	4770      	bx	lr
{
 80055f6:	b510      	push	{r4, lr}
 80055f8:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80055fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80055fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005602:	4a0c      	ldr	r2, [pc, #48]	; (8005634 <HAL_InitTick+0x48>)
 8005604:	6810      	ldr	r0, [r2, #0]
 8005606:	fbb0 f0f3 	udiv	r0, r0, r3
 800560a:	f000 feff 	bl	800640c <HAL_SYSTICK_Config>
 800560e:	b968      	cbnz	r0, 800562c <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005610:	2c0f      	cmp	r4, #15
 8005612:	d901      	bls.n	8005618 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8005614:	2001      	movs	r0, #1
 8005616:	e00a      	b.n	800562e <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005618:	2200      	movs	r2, #0
 800561a:	4621      	mov	r1, r4
 800561c:	f04f 30ff 	mov.w	r0, #4294967295
 8005620:	f000 feb0 	bl	8006384 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005624:	4b04      	ldr	r3, [pc, #16]	; (8005638 <HAL_InitTick+0x4c>)
 8005626:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8005628:	2000      	movs	r0, #0
 800562a:	e000      	b.n	800562e <HAL_InitTick+0x42>
      status = HAL_ERROR;
 800562c:	2001      	movs	r0, #1
}
 800562e:	bd10      	pop	{r4, pc}
 8005630:	20000554 	.word	0x20000554
 8005634:	20000550 	.word	0x20000550
 8005638:	20000558 	.word	0x20000558

0800563c <HAL_Init>:
{
 800563c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800563e:	2003      	movs	r0, #3
 8005640:	f000 fe8e 	bl	8006360 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005644:	200f      	movs	r0, #15
 8005646:	f7ff ffd1 	bl	80055ec <HAL_InitTick>
 800564a:	b110      	cbz	r0, 8005652 <HAL_Init+0x16>
    status = HAL_ERROR;
 800564c:	2401      	movs	r4, #1
}
 800564e:	4620      	mov	r0, r4
 8005650:	bd10      	pop	{r4, pc}
 8005652:	4604      	mov	r4, r0
    HAL_MspInit();
 8005654:	f7ff fcb8 	bl	8004fc8 <HAL_MspInit>
 8005658:	e7f9      	b.n	800564e <HAL_Init+0x12>
	...

0800565c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800565c:	4a03      	ldr	r2, [pc, #12]	; (800566c <HAL_IncTick+0x10>)
 800565e:	6813      	ldr	r3, [r2, #0]
 8005660:	4903      	ldr	r1, [pc, #12]	; (8005670 <HAL_IncTick+0x14>)
 8005662:	6809      	ldr	r1, [r1, #0]
 8005664:	440b      	add	r3, r1
 8005666:	6013      	str	r3, [r2, #0]
}
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	20001ea8 	.word	0x20001ea8
 8005670:	20000554 	.word	0x20000554

08005674 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8005674:	4b01      	ldr	r3, [pc, #4]	; (800567c <HAL_GetTick+0x8>)
 8005676:	6818      	ldr	r0, [r3, #0]
}
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	20001ea8 	.word	0x20001ea8

08005680 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005680:	b538      	push	{r3, r4, r5, lr}
 8005682:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005684:	f7ff fff6 	bl	8005674 <HAL_GetTick>
 8005688:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800568a:	f1b4 3fff 	cmp.w	r4, #4294967295
 800568e:	d002      	beq.n	8005696 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8005690:	4b04      	ldr	r3, [pc, #16]	; (80056a4 <HAL_Delay+0x24>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005696:	f7ff ffed 	bl	8005674 <HAL_GetTick>
 800569a:	1b40      	subs	r0, r0, r5
 800569c:	42a0      	cmp	r0, r4
 800569e:	d3fa      	bcc.n	8005696 <HAL_Delay+0x16>
  {
  }
}
 80056a0:	bd38      	pop	{r3, r4, r5, pc}
 80056a2:	bf00      	nop
 80056a4:	20000554 	.word	0x20000554

080056a8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80056a8:	b530      	push	{r4, r5, lr}
 80056aa:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80056ac:	2300      	movs	r3, #0
 80056ae:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80056b0:	2800      	cmp	r0, #0
 80056b2:	f000 8104 	beq.w	80058be <HAL_ADC_Init+0x216>
 80056b6:	4604      	mov	r4, r0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80056b8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	f000 80c0 	beq.w	8005840 <HAL_ADC_Init+0x198>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80056c0:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80056c2:	689a      	ldr	r2, [r3, #8]
 80056c4:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 80056c8:	d005      	beq.n	80056d6 <HAL_ADC_Init+0x2e>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80056ca:	689a      	ldr	r2, [r3, #8]
 80056cc:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
 80056d0:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80056d4:	609a      	str	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80056d6:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80056d8:	6893      	ldr	r3, [r2, #8]
 80056da:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80056de:	d119      	bne.n	8005714 <HAL_ADC_Init+0x6c>
  MODIFY_REG(ADCx->CR,
 80056e0:	6893      	ldr	r3, [r2, #8]
 80056e2:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80056e6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80056ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056ee:	6093      	str	r3, [r2, #8]
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80056f0:	4b74      	ldr	r3, [pc, #464]	; (80058c4 <HAL_ADC_Init+0x21c>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	099b      	lsrs	r3, r3, #6
 80056f6:	4a74      	ldr	r2, [pc, #464]	; (80058c8 <HAL_ADC_Init+0x220>)
 80056f8:	fba2 2303 	umull	r2, r3, r2, r3
 80056fc:	099b      	lsrs	r3, r3, #6
 80056fe:	3301      	adds	r3, #1
 8005700:	005b      	lsls	r3, r3, #1
 8005702:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8005704:	9b01      	ldr	r3, [sp, #4]
 8005706:	b12b      	cbz	r3, 8005714 <HAL_ADC_Init+0x6c>
    {
      wait_loop_index--;
 8005708:	9b01      	ldr	r3, [sp, #4]
 800570a:	3b01      	subs	r3, #1
 800570c:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800570e:	9b01      	ldr	r3, [sp, #4]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d1f9      	bne.n	8005708 <HAL_ADC_Init+0x60>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005714:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005716:	688b      	ldr	r3, [r1, #8]
 8005718:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800571c:	f040 8097 	bne.w	800584e <HAL_ADC_Init+0x1a6>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005720:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005722:	f043 0310 	orr.w	r3, r3, #16
 8005726:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005728:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800572a:	f043 0301 	orr.w	r3, r3, #1
 800572e:	6623      	str	r3, [r4, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005730:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005732:	688a      	ldr	r2, [r1, #8]
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005734:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005736:	f003 0310 	and.w	r3, r3, #16
 800573a:	f002 0204 	and.w	r2, r2, #4
 800573e:	4313      	orrs	r3, r2
 8005740:	f040 80b6 	bne.w	80058b0 <HAL_ADC_Init+0x208>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005744:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005746:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800574a:	f043 0302 	orr.w	r3, r3, #2
 800574e:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005750:	688b      	ldr	r3, [r1, #8]
 8005752:	f013 0f01 	tst.w	r3, #1
 8005756:	d110      	bne.n	800577a <HAL_ADC_Init+0xd2>
 8005758:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800575c:	689a      	ldr	r2, [r3, #8]
 800575e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005762:	689b      	ldr	r3, [r3, #8]
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005764:	4313      	orrs	r3, r2
 8005766:	f013 0f01 	tst.w	r3, #1
 800576a:	d106      	bne.n	800577a <HAL_ADC_Init+0xd2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800576c:	4a57      	ldr	r2, [pc, #348]	; (80058cc <HAL_ADC_Init+0x224>)
 800576e:	6893      	ldr	r3, [r2, #8]
 8005770:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8005774:	6861      	ldr	r1, [r4, #4]
 8005776:	430b      	orrs	r3, r1
 8005778:	6093      	str	r3, [r2, #8]
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800577a:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 800577e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005780:	68e1      	ldr	r1, [r4, #12]
 8005782:	430b      	orrs	r3, r1
 8005784:	68a1      	ldr	r1, [r4, #8]
 8005786:	430b      	orrs	r3, r1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005788:	7f61      	ldrb	r1, [r4, #29]
                hadc->Init.DataAlign                                                   |
 800578a:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800578e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005792:	2a01      	cmp	r2, #1
 8005794:	d05d      	beq.n	8005852 <HAL_ADC_Init+0x1aa>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005796:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005798:	b122      	cbz	r2, 80057a4 <HAL_ADC_Init+0xfc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800579a:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800579e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80057a0:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80057a2:	4313      	orrs	r3, r2
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80057a4:	6821      	ldr	r1, [r4, #0]
 80057a6:	68cd      	ldr	r5, [r1, #12]
 80057a8:	4a49      	ldr	r2, [pc, #292]	; (80058d0 <HAL_ADC_Init+0x228>)
 80057aa:	402a      	ands	r2, r5
 80057ac:	431a      	orrs	r2, r3
 80057ae:	60ca      	str	r2, [r1, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80057b0:	6822      	ldr	r2, [r4, #0]
 80057b2:	6913      	ldr	r3, [r2, #16]
 80057b4:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80057b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057ba:	430b      	orrs	r3, r1
 80057bc:	6113      	str	r3, [r2, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80057be:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80057c0:	688a      	ldr	r2, [r1, #8]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80057c2:	688b      	ldr	r3, [r1, #8]
 80057c4:	f003 0308 	and.w	r3, r3, #8
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80057c8:	f002 0204 	and.w	r2, r2, #4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80057cc:	4313      	orrs	r3, r2
 80057ce:	d128      	bne.n	8005822 <HAL_ADC_Init+0x17a>
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80057d0:	68ca      	ldr	r2, [r1, #12]
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80057d2:	7f25      	ldrb	r5, [r4, #28]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80057d4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80057d8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80057da:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80057de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80057e2:	f022 0202 	bic.w	r2, r2, #2
 80057e6:	4313      	orrs	r3, r2
 80057e8:	60cb      	str	r3, [r1, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80057ea:	6923      	ldr	r3, [r4, #16]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d035      	beq.n	800585c <HAL_ADC_Init+0x1b4>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80057f0:	6822      	ldr	r2, [r4, #0]
 80057f2:	6913      	ldr	r3, [r2, #16]
 80057f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057f8:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80057fa:	6822      	ldr	r2, [r4, #0]
 80057fc:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8005800:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005804:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005808:	6921      	ldr	r1, [r4, #16]
 800580a:	430b      	orrs	r3, r1
 800580c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005810:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8005814:	2b01      	cmp	r3, #1
 8005816:	d030      	beq.n	800587a <HAL_ADC_Init+0x1d2>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005818:	6822      	ldr	r2, [r4, #0]
 800581a:	6913      	ldr	r3, [r2, #16]
 800581c:	f023 0301 	bic.w	r3, r3, #1
 8005820:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005822:	6963      	ldr	r3, [r4, #20]
 8005824:	2b01      	cmp	r3, #1
 8005826:	d03a      	beq.n	800589e <HAL_ADC_Init+0x1f6>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005828:	6822      	ldr	r2, [r4, #0]
 800582a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800582c:	f023 030f 	bic.w	r3, r3, #15
 8005830:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005832:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005834:	f023 0303 	bic.w	r3, r3, #3
 8005838:	f043 0301 	orr.w	r3, r3, #1
 800583c:	65e3      	str	r3, [r4, #92]	; 0x5c
 800583e:	e03c      	b.n	80058ba <HAL_ADC_Init+0x212>
    HAL_ADC_MspInit(hadc);
 8005840:	f7fe ff6a 	bl	8004718 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8005844:	2300      	movs	r3, #0
 8005846:	6623      	str	r3, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 8005848:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 800584c:	e738      	b.n	80056c0 <HAL_ADC_Init+0x18>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800584e:	2000      	movs	r0, #0
 8005850:	e76f      	b.n	8005732 <HAL_ADC_Init+0x8a>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005852:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005854:	3a01      	subs	r2, #1
 8005856:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800585a:	e79c      	b.n	8005796 <HAL_ADC_Init+0xee>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800585c:	6822      	ldr	r2, [r4, #0]
 800585e:	6913      	ldr	r3, [r2, #16]
 8005860:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005864:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005866:	6822      	ldr	r2, [r4, #0]
 8005868:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 800586c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005870:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005874:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8005878:	e7ca      	b.n	8005810 <HAL_ADC_Init+0x168>
        MODIFY_REG(hadc->Instance->CFGR2,
 800587a:	6821      	ldr	r1, [r4, #0]
 800587c:	690a      	ldr	r2, [r1, #16]
 800587e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005880:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8005882:	432b      	orrs	r3, r5
 8005884:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8005888:	f022 0204 	bic.w	r2, r2, #4
 800588c:	4313      	orrs	r3, r2
 800588e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8005890:	4313      	orrs	r3, r2
 8005892:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005894:	4313      	orrs	r3, r2
 8005896:	f043 0301 	orr.w	r3, r3, #1
 800589a:	610b      	str	r3, [r1, #16]
 800589c:	e7c1      	b.n	8005822 <HAL_ADC_Init+0x17a>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800589e:	6821      	ldr	r1, [r4, #0]
 80058a0:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80058a2:	6a23      	ldr	r3, [r4, #32]
 80058a4:	3b01      	subs	r3, #1
 80058a6:	f022 020f 	bic.w	r2, r2, #15
 80058aa:	4313      	orrs	r3, r2
 80058ac:	630b      	str	r3, [r1, #48]	; 0x30
 80058ae:	e7c0      	b.n	8005832 <HAL_ADC_Init+0x18a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058b0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80058b2:	f043 0310 	orr.w	r3, r3, #16
 80058b6:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80058b8:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 80058ba:	b003      	add	sp, #12
 80058bc:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80058be:	2001      	movs	r0, #1
 80058c0:	e7fb      	b.n	80058ba <HAL_ADC_Init+0x212>
 80058c2:	bf00      	nop
 80058c4:	20000550 	.word	0x20000550
 80058c8:	053e2d63 	.word	0x053e2d63
 80058cc:	50000300 	.word	0x50000300
 80058d0:	fff04007 	.word	0xfff04007

080058d4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80058d4:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80058d6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80058d8:	f7fe fabc 	bl	8003e54 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80058dc:	bd08      	pop	{r3, pc}

080058de <HAL_ADC_LevelOutOfWindowCallback>:
}
 80058de:	4770      	bx	lr

080058e0 <HAL_ADC_ErrorCallback>:
}
 80058e0:	4770      	bx	lr
	...

080058e4 <HAL_ADC_IRQHandler>:
{
 80058e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058e6:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 80058e8:	6803      	ldr	r3, [r0, #0]
 80058ea:	681f      	ldr	r7, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 80058ec:	685d      	ldr	r5, [r3, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80058ee:	4b9b      	ldr	r3, [pc, #620]	; (8005b5c <HAL_ADC_IRQHandler+0x278>)
 80058f0:	689e      	ldr	r6, [r3, #8]
 80058f2:	f006 061f 	and.w	r6, r6, #31
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80058f6:	f017 0f02 	tst.w	r7, #2
 80058fa:	d010      	beq.n	800591e <HAL_ADC_IRQHandler+0x3a>
 80058fc:	f015 0f02 	tst.w	r5, #2
 8005900:	d00d      	beq.n	800591e <HAL_ADC_IRQHandler+0x3a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005902:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005904:	f013 0f10 	tst.w	r3, #16
 8005908:	d103      	bne.n	8005912 <HAL_ADC_IRQHandler+0x2e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800590a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800590c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005910:	65c3      	str	r3, [r0, #92]	; 0x5c
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005912:	4620      	mov	r0, r4
 8005914:	f000 fcac 	bl	8006270 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005918:	6823      	ldr	r3, [r4, #0]
 800591a:	2202      	movs	r2, #2
 800591c:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800591e:	f017 0f04 	tst.w	r7, #4
 8005922:	d002      	beq.n	800592a <HAL_ADC_IRQHandler+0x46>
 8005924:	f015 0f04 	tst.w	r5, #4
 8005928:	d105      	bne.n	8005936 <HAL_ADC_IRQHandler+0x52>
 800592a:	f017 0f08 	tst.w	r7, #8
 800592e:	d03e      	beq.n	80059ae <HAL_ADC_IRQHandler+0xca>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005930:	f015 0f08 	tst.w	r5, #8
 8005934:	d03b      	beq.n	80059ae <HAL_ADC_IRQHandler+0xca>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005936:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005938:	f013 0f10 	tst.w	r3, #16
 800593c:	d103      	bne.n	8005946 <HAL_ADC_IRQHandler+0x62>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800593e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005940:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005944:	65e3      	str	r3, [r4, #92]	; 0x5c
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005946:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005948:	68da      	ldr	r2, [r3, #12]
 800594a:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 800594e:	d128      	bne.n	80059a2 <HAL_ADC_IRQHandler+0xbe>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005950:	4a83      	ldr	r2, [pc, #524]	; (8005b60 <HAL_ADC_IRQHandler+0x27c>)
 8005952:	4293      	cmp	r3, r2
 8005954:	f000 80f6 	beq.w	8005b44 <HAL_ADC_IRQHandler+0x260>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005958:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800595a:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 800595e:	d120      	bne.n	80059a2 <HAL_ADC_IRQHandler+0xbe>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	f012 0f08 	tst.w	r2, #8
 8005966:	d01c      	beq.n	80059a2 <HAL_ADC_IRQHandler+0xbe>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005968:	689a      	ldr	r2, [r3, #8]
 800596a:	f012 0f04 	tst.w	r2, #4
 800596e:	d110      	bne.n	8005992 <HAL_ADC_IRQHandler+0xae>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005970:	685a      	ldr	r2, [r3, #4]
 8005972:	f022 020c 	bic.w	r2, r2, #12
 8005976:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005978:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800597a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800597e:	65e3      	str	r3, [r4, #92]	; 0x5c
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005980:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005982:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8005986:	d10c      	bne.n	80059a2 <HAL_ADC_IRQHandler+0xbe>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005988:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800598a:	f043 0301 	orr.w	r3, r3, #1
 800598e:	65e3      	str	r3, [r4, #92]	; 0x5c
 8005990:	e007      	b.n	80059a2 <HAL_ADC_IRQHandler+0xbe>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005992:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005994:	f043 0310 	orr.w	r3, r3, #16
 8005998:	65e3      	str	r3, [r4, #92]	; 0x5c
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800599a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800599c:	f043 0301 	orr.w	r3, r3, #1
 80059a0:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADC_ConvCpltCallback(hadc);
 80059a2:	4620      	mov	r0, r4
 80059a4:	f7fe fb58 	bl	8004058 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80059a8:	6823      	ldr	r3, [r4, #0]
 80059aa:	220c      	movs	r2, #12
 80059ac:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80059ae:	f017 0f20 	tst.w	r7, #32
 80059b2:	d002      	beq.n	80059ba <HAL_ADC_IRQHandler+0xd6>
 80059b4:	f015 0f20 	tst.w	r5, #32
 80059b8:	d105      	bne.n	80059c6 <HAL_ADC_IRQHandler+0xe2>
 80059ba:	f017 0f40 	tst.w	r7, #64	; 0x40
 80059be:	d048      	beq.n	8005a52 <HAL_ADC_IRQHandler+0x16e>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80059c0:	f015 0f40 	tst.w	r5, #64	; 0x40
 80059c4:	d045      	beq.n	8005a52 <HAL_ADC_IRQHandler+0x16e>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80059c6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80059c8:	f013 0f10 	tst.w	r3, #16
 80059cc:	d103      	bne.n	80059d6 <HAL_ADC_IRQHandler+0xf2>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80059ce:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80059d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80059d4:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80059d6:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80059d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80059da:	f402 72c0 	and.w	r2, r2, #384	; 0x180
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80059de:	68d8      	ldr	r0, [r3, #12]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80059e0:	495f      	ldr	r1, [pc, #380]	; (8005b60 <HAL_ADC_IRQHandler+0x27c>)
 80059e2:	428b      	cmp	r3, r1
 80059e4:	f000 80a4 	beq.w	8005b30 <HAL_ADC_IRQHandler+0x24c>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80059e8:	68d9      	ldr	r1, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80059ea:	bb62      	cbnz	r2, 8005a46 <HAL_ADC_IRQHandler+0x162>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80059ec:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
 80059f0:	d005      	beq.n	80059fe <HAL_ADC_IRQHandler+0x11a>
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80059f2:	f401 5200 	and.w	r2, r1, #8192	; 0x2000
 80059f6:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80059fa:	4302      	orrs	r2, r0
 80059fc:	d123      	bne.n	8005a46 <HAL_ADC_IRQHandler+0x162>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005a04:	d01f      	beq.n	8005a46 <HAL_ADC_IRQHandler+0x162>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005a06:	f411 1f00 	tst.w	r1, #2097152	; 0x200000
 8005a0a:	d11c      	bne.n	8005a46 <HAL_ADC_IRQHandler+0x162>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005a0c:	689a      	ldr	r2, [r3, #8]
 8005a0e:	f012 0f08 	tst.w	r2, #8
 8005a12:	d110      	bne.n	8005a36 <HAL_ADC_IRQHandler+0x152>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005a14:	685a      	ldr	r2, [r3, #4]
 8005a16:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005a1a:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005a1c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005a1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a22:	65e3      	str	r3, [r4, #92]	; 0x5c
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005a24:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005a26:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005a2a:	d10c      	bne.n	8005a46 <HAL_ADC_IRQHandler+0x162>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005a2c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005a2e:	f043 0301 	orr.w	r3, r3, #1
 8005a32:	65e3      	str	r3, [r4, #92]	; 0x5c
 8005a34:	e007      	b.n	8005a46 <HAL_ADC_IRQHandler+0x162>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a36:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005a38:	f043 0310 	orr.w	r3, r3, #16
 8005a3c:	65e3      	str	r3, [r4, #92]	; 0x5c
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a3e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005a40:	f043 0301 	orr.w	r3, r3, #1
 8005a44:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005a46:	4620      	mov	r0, r4
 8005a48:	f000 fc0e 	bl	8006268 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005a4c:	6823      	ldr	r3, [r4, #0]
 8005a4e:	2260      	movs	r2, #96	; 0x60
 8005a50:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005a52:	f017 0f80 	tst.w	r7, #128	; 0x80
 8005a56:	d002      	beq.n	8005a5e <HAL_ADC_IRQHandler+0x17a>
 8005a58:	f015 0f80 	tst.w	r5, #128	; 0x80
 8005a5c:	d12f      	bne.n	8005abe <HAL_ADC_IRQHandler+0x1da>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005a5e:	f417 7f80 	tst.w	r7, #256	; 0x100
 8005a62:	d002      	beq.n	8005a6a <HAL_ADC_IRQHandler+0x186>
 8005a64:	f415 7f80 	tst.w	r5, #256	; 0x100
 8005a68:	d134      	bne.n	8005ad4 <HAL_ADC_IRQHandler+0x1f0>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005a6a:	f417 7f00 	tst.w	r7, #512	; 0x200
 8005a6e:	d002      	beq.n	8005a76 <HAL_ADC_IRQHandler+0x192>
 8005a70:	f415 7f00 	tst.w	r5, #512	; 0x200
 8005a74:	d13a      	bne.n	8005aec <HAL_ADC_IRQHandler+0x208>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005a76:	f017 0f10 	tst.w	r7, #16
 8005a7a:	d019      	beq.n	8005ab0 <HAL_ADC_IRQHandler+0x1cc>
 8005a7c:	f015 0f10 	tst.w	r5, #16
 8005a80:	d016      	beq.n	8005ab0 <HAL_ADC_IRQHandler+0x1cc>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005a82:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005a84:	b133      	cbz	r3, 8005a94 <HAL_ADC_IRQHandler+0x1b0>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8005a86:	2e00      	cmp	r6, #0
 8005a88:	d03c      	beq.n	8005b04 <HAL_ADC_IRQHandler+0x220>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8005a8a:	4b34      	ldr	r3, [pc, #208]	; (8005b5c <HAL_ADC_IRQHandler+0x278>)
 8005a8c:	689b      	ldr	r3, [r3, #8]
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005a8e:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 8005a92:	d00a      	beq.n	8005aaa <HAL_ADC_IRQHandler+0x1c6>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005a94:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005a96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005a9a:	65e3      	str	r3, [r4, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005a9c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005a9e:	f043 0302 	orr.w	r3, r3, #2
 8005aa2:	6623      	str	r3, [r4, #96]	; 0x60
      HAL_ADC_ErrorCallback(hadc);
 8005aa4:	4620      	mov	r0, r4
 8005aa6:	f7ff ff1b 	bl	80058e0 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005aaa:	6823      	ldr	r3, [r4, #0]
 8005aac:	2210      	movs	r2, #16
 8005aae:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005ab0:	f417 6f80 	tst.w	r7, #1024	; 0x400
 8005ab4:	d002      	beq.n	8005abc <HAL_ADC_IRQHandler+0x1d8>
 8005ab6:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8005aba:	d129      	bne.n	8005b10 <HAL_ADC_IRQHandler+0x22c>
}
 8005abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005abe:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ac4:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005ac6:	4620      	mov	r0, r4
 8005ac8:	f7ff ff09 	bl	80058de <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005acc:	6823      	ldr	r3, [r4, #0]
 8005ace:	2280      	movs	r2, #128	; 0x80
 8005ad0:	601a      	str	r2, [r3, #0]
 8005ad2:	e7c4      	b.n	8005a5e <HAL_ADC_IRQHandler+0x17a>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005ad4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005ad6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ada:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005adc:	4620      	mov	r0, r4
 8005ade:	f000 fbc5 	bl	800626c <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005ae2:	6823      	ldr	r3, [r4, #0]
 8005ae4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ae8:	601a      	str	r2, [r3, #0]
 8005aea:	e7be      	b.n	8005a6a <HAL_ADC_IRQHandler+0x186>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005aec:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005aee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005af2:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005af4:	4620      	mov	r0, r4
 8005af6:	f000 fbba 	bl	800626e <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005afa:	6823      	ldr	r3, [r4, #0]
 8005afc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b00:	601a      	str	r2, [r3, #0]
 8005b02:	e7b8      	b.n	8005a76 <HAL_ADC_IRQHandler+0x192>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8005b04:	6823      	ldr	r3, [r4, #0]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	f013 0f01 	tst.w	r3, #1
 8005b0c:	d0cd      	beq.n	8005aaa <HAL_ADC_IRQHandler+0x1c6>
 8005b0e:	e7c1      	b.n	8005a94 <HAL_ADC_IRQHandler+0x1b0>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005b10:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005b12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b16:	65e3      	str	r3, [r4, #92]	; 0x5c
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005b18:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005b1a:	f043 0308 	orr.w	r3, r3, #8
 8005b1e:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005b20:	6823      	ldr	r3, [r4, #0]
 8005b22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b26:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005b28:	4620      	mov	r0, r4
 8005b2a:	f000 fb9e 	bl	800626a <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 8005b2e:	e7c5      	b.n	8005abc <HAL_ADC_IRQHandler+0x1d8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005b30:	21c1      	movs	r1, #193	; 0xc1
 8005b32:	40f1      	lsrs	r1, r6
 8005b34:	f011 0f01 	tst.w	r1, #1
 8005b38:	f47f af56 	bne.w	80059e8 <HAL_ADC_IRQHandler+0x104>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005b3c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8005b40:	68c9      	ldr	r1, [r1, #12]
 8005b42:	e752      	b.n	80059ea <HAL_ADC_IRQHandler+0x106>
 8005b44:	f240 2221 	movw	r2, #545	; 0x221
 8005b48:	40f2      	lsrs	r2, r6
 8005b4a:	f012 0f01 	tst.w	r2, #1
 8005b4e:	f47f af03 	bne.w	8005958 <HAL_ADC_IRQHandler+0x74>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005b52:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005b56:	68d2      	ldr	r2, [r2, #12]
 8005b58:	e6ff      	b.n	800595a <HAL_ADC_IRQHandler+0x76>
 8005b5a:	bf00      	nop
 8005b5c:	50000300 	.word	0x50000300
 8005b60:	50000100 	.word	0x50000100

08005b64 <ADC_DMAConvCplt>:
{
 8005b64:	b508      	push	{r3, lr}
 8005b66:	4603      	mov	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b68:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005b6a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8005b6c:	f012 0f50 	tst.w	r2, #80	; 0x50
 8005b70:	d130      	bne.n	8005bd4 <ADC_DMAConvCplt+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005b72:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005b74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b78:	65c3      	str	r3, [r0, #92]	; 0x5c
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005b7a:	6803      	ldr	r3, [r0, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	f012 0f08 	tst.w	r2, #8
 8005b82:	d014      	beq.n	8005bae <ADC_DMAConvCplt+0x4a>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005b84:	68da      	ldr	r2, [r3, #12]
 8005b86:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8005b8a:	d120      	bne.n	8005bce <ADC_DMAConvCplt+0x6a>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8005b92:	d11c      	bne.n	8005bce <ADC_DMAConvCplt+0x6a>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005b94:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005b96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b9a:	65c3      	str	r3, [r0, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005b9c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005b9e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8005ba2:	d114      	bne.n	8005bce <ADC_DMAConvCplt+0x6a>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005ba4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005ba6:	f043 0301 	orr.w	r3, r3, #1
 8005baa:	65c3      	str	r3, [r0, #92]	; 0x5c
 8005bac:	e00f      	b.n	8005bce <ADC_DMAConvCplt+0x6a>
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	f013 0f02 	tst.w	r3, #2
 8005bb4:	d10b      	bne.n	8005bce <ADC_DMAConvCplt+0x6a>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005bb6:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005bb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bbc:	65c3      	str	r3, [r0, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005bbe:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005bc0:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8005bc4:	d103      	bne.n	8005bce <ADC_DMAConvCplt+0x6a>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005bc6:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005bc8:	f043 0301 	orr.w	r3, r3, #1
 8005bcc:	65c3      	str	r3, [r0, #92]	; 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 8005bce:	f7fe fa43 	bl	8004058 <HAL_ADC_ConvCpltCallback>
}
 8005bd2:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005bd4:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8005bd6:	f012 0f10 	tst.w	r2, #16
 8005bda:	d104      	bne.n	8005be6 <ADC_DMAConvCplt+0x82>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005bdc:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8005bde:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005be0:	4618      	mov	r0, r3
 8005be2:	4790      	blx	r2
}
 8005be4:	e7f5      	b.n	8005bd2 <ADC_DMAConvCplt+0x6e>
      HAL_ADC_ErrorCallback(hadc);
 8005be6:	f7ff fe7b 	bl	80058e0 <HAL_ADC_ErrorCallback>
 8005bea:	e7f2      	b.n	8005bd2 <ADC_DMAConvCplt+0x6e>

08005bec <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005bec:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bee:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005bf0:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005bf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bf6:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005bf8:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8005bfa:	f043 0304 	orr.w	r3, r3, #4
 8005bfe:	6603      	str	r3, [r0, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005c00:	f7ff fe6e 	bl	80058e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005c04:	bd08      	pop	{r3, pc}
	...

08005c08 <HAL_ADC_ConfigChannel>:
{
 8005c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c0a:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8005c10:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 8005c14:	2a01      	cmp	r2, #1
 8005c16:	f000 8241 	beq.w	800609c <HAL_ADC_ConfigChannel+0x494>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005c22:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005c24:	6890      	ldr	r0, [r2, #8]
 8005c26:	f010 0f04 	tst.w	r0, #4
 8005c2a:	d009      	beq.n	8005c40 <HAL_ADC_ConfigChannel+0x38>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c2c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005c2e:	f042 0220 	orr.w	r2, r2, #32
 8005c32:	65da      	str	r2, [r3, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8005c34:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 8005c3c:	b003      	add	sp, #12
 8005c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005c40:	6848      	ldr	r0, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005c42:	ea4f 1e90 	mov.w	lr, r0, lsr #6
 8005c46:	f00e 0e0c 	and.w	lr, lr, #12
 8005c4a:	3230      	adds	r2, #48	; 0x30
  MODIFY_REG(*preg,
 8005c4c:	f852 400e 	ldr.w	r4, [r2, lr]
 8005c50:	f000 0c1f 	and.w	ip, r0, #31
 8005c54:	6808      	ldr	r0, [r1, #0]
 8005c56:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8005c5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8005c5e:	251f      	movs	r5, #31
 8005c60:	fa05 fc0c 	lsl.w	ip, r5, ip
 8005c64:	ea24 0c0c 	bic.w	ip, r4, ip
 8005c68:	ea40 000c 	orr.w	r0, r0, ip
 8005c6c:	f842 000e 	str.w	r0, [r2, lr]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005c70:	681c      	ldr	r4, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005c72:	68a0      	ldr	r0, [r4, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005c74:	68a2      	ldr	r2, [r4, #8]
 8005c76:	f002 0208 	and.w	r2, r2, #8
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005c7a:	f000 0004 	and.w	r0, r0, #4
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005c7e:	4302      	orrs	r2, r0
 8005c80:	d14f      	bne.n	8005d22 <HAL_ADC_ConfigChannel+0x11a>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005c82:	688a      	ldr	r2, [r1, #8]
 8005c84:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8005c88:	f000 808b 	beq.w	8005da2 <HAL_ADC_ConfigChannel+0x19a>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005c8c:	680d      	ldr	r5, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005c8e:	ea4f 5cd5 	mov.w	ip, r5, lsr #23
 8005c92:	f00c 0c04 	and.w	ip, ip, #4
 8005c96:	3414      	adds	r4, #20
  MODIFY_REG(*preg,
 8005c98:	f854 000c 	ldr.w	r0, [r4, ip]
 8005c9c:	f3c5 5504 	ubfx	r5, r5, #20, #5
 8005ca0:	2607      	movs	r6, #7
 8005ca2:	40ae      	lsls	r6, r5
 8005ca4:	ea20 0006 	bic.w	r0, r0, r6
 8005ca8:	40aa      	lsls	r2, r5
 8005caa:	4302      	orrs	r2, r0
 8005cac:	f844 200c 	str.w	r2, [r4, ip]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005cb0:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005cb2:	6942      	ldr	r2, [r0, #20]
 8005cb4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005cb8:	6142      	str	r2, [r0, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005cba:	694a      	ldr	r2, [r1, #20]
 8005cbc:	681c      	ldr	r4, [r3, #0]
 8005cbe:	68e0      	ldr	r0, [r4, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005cc0:	690d      	ldr	r5, [r1, #16]
 8005cc2:	2d04      	cmp	r5, #4
 8005cc4:	f000 8081 	beq.w	8005dca <HAL_ADC_ConfigChannel+0x1c2>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005cc8:	3460      	adds	r4, #96	; 0x60
  MODIFY_REG(*preg,
 8005cca:	f854 7025 	ldr.w	r7, [r4, r5, lsl #2]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005cce:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8005cd2:	0040      	lsls	r0, r0, #1
 8005cd4:	4082      	lsls	r2, r0
 8005cd6:	6808      	ldr	r0, [r1, #0]
 8005cd8:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005cdc:	4eaa      	ldr	r6, [pc, #680]	; (8005f88 <HAL_ADC_ConfigChannel+0x380>)
 8005cde:	403e      	ands	r6, r7
 8005ce0:	4330      	orrs	r0, r6
 8005ce2:	4302      	orrs	r2, r0
 8005ce4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005ce8:	f844 2025 	str.w	r2, [r4, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005cec:	690c      	ldr	r4, [r1, #16]
 8005cee:	6818      	ldr	r0, [r3, #0]
 8005cf0:	3060      	adds	r0, #96	; 0x60
  MODIFY_REG(*preg,
 8005cf2:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
 8005cf6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005cfa:	698d      	ldr	r5, [r1, #24]
 8005cfc:	432a      	orrs	r2, r5
 8005cfe:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005d02:	690d      	ldr	r5, [r1, #16]
 8005d04:	6818      	ldr	r0, [r3, #0]
 8005d06:	3060      	adds	r0, #96	; 0x60
  MODIFY_REG(*preg,
 8005d08:	f850 2025 	ldr.w	r2, [r0, r5, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005d0c:	7f0c      	ldrb	r4, [r1, #28]
 8005d0e:	2c01      	cmp	r4, #1
 8005d10:	bf14      	ite	ne
 8005d12:	2400      	movne	r4, #0
 8005d14:	2401      	moveq	r4, #1
 8005d16:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8005d1a:	ea42 6244 	orr.w	r2, r2, r4, lsl #25
 8005d1e:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005d22:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005d24:	6890      	ldr	r0, [r2, #8]
 8005d26:	f010 0f01 	tst.w	r0, #1
 8005d2a:	d112      	bne.n	8005d52 <HAL_ADC_ConfigChannel+0x14a>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005d2c:	6808      	ldr	r0, [r1, #0]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8005d2e:	68cd      	ldr	r5, [r1, #12]
 8005d30:	4c96      	ldr	r4, [pc, #600]	; (8005f8c <HAL_ADC_ConfigChannel+0x384>)
 8005d32:	42a5      	cmp	r5, r4
    SET_BIT(ADCx->DIFSEL,
 8005d34:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8005d38:	f3c0 0012 	ubfx	r0, r0, #0, #19
 8005d3c:	bf0c      	ite	eq
 8005d3e:	4320      	orreq	r0, r4
    CLEAR_BIT(ADCx->DIFSEL,
 8005d40:	ea24 0000 	bicne.w	r0, r4, r0
 8005d44:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005d48:	68c8      	ldr	r0, [r1, #12]
 8005d4a:	4a90      	ldr	r2, [pc, #576]	; (8005f8c <HAL_ADC_ConfigChannel+0x384>)
 8005d4c:	4290      	cmp	r0, r2
 8005d4e:	f000 80d3 	beq.w	8005ef8 <HAL_ADC_ConfigChannel+0x2f0>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005d52:	680a      	ldr	r2, [r1, #0]
 8005d54:	498e      	ldr	r1, [pc, #568]	; (8005f90 <HAL_ADC_ConfigChannel+0x388>)
 8005d56:	420a      	tst	r2, r1
 8005d58:	f000 8192 	beq.w	8006080 <HAL_ADC_ConfigChannel+0x478>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005d5c:	498d      	ldr	r1, [pc, #564]	; (8005f94 <HAL_ADC_ConfigChannel+0x38c>)
 8005d5e:	6889      	ldr	r1, [r1, #8]
 8005d60:	f001 74e0 	and.w	r4, r1, #29360128	; 0x1c00000
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005d64:	488c      	ldr	r0, [pc, #560]	; (8005f98 <HAL_ADC_ConfigChannel+0x390>)
 8005d66:	4282      	cmp	r2, r0
 8005d68:	f000 819a 	beq.w	80060a0 <HAL_ADC_ConfigChannel+0x498>
 8005d6c:	488b      	ldr	r0, [pc, #556]	; (8005f9c <HAL_ADC_ConfigChannel+0x394>)
 8005d6e:	4282      	cmp	r2, r0
 8005d70:	f000 8196 	beq.w	80060a0 <HAL_ADC_ConfigChannel+0x498>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005d74:	488a      	ldr	r0, [pc, #552]	; (8005fa0 <HAL_ADC_ConfigChannel+0x398>)
 8005d76:	4282      	cmp	r2, r0
 8005d78:	f040 816e 	bne.w	8006058 <HAL_ADC_ConfigChannel+0x450>
 8005d7c:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
 8005d80:	f040 8182 	bne.w	8006088 <HAL_ADC_ConfigChannel+0x480>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005d84:	6819      	ldr	r1, [r3, #0]
 8005d86:	4a87      	ldr	r2, [pc, #540]	; (8005fa4 <HAL_ADC_ConfigChannel+0x39c>)
 8005d88:	4291      	cmp	r1, r2
 8005d8a:	f000 817f 	beq.w	800608c <HAL_ADC_ConfigChannel+0x484>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005d8e:	4981      	ldr	r1, [pc, #516]	; (8005f94 <HAL_ADC_ConfigChannel+0x38c>)
 8005d90:	688a      	ldr	r2, [r1, #8]
 8005d92:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8005d96:	4322      	orrs	r2, r4
 8005d98:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8005d9c:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005d9e:	2000      	movs	r0, #0
}
 8005da0:	e749      	b.n	8005c36 <HAL_ADC_ConfigChannel+0x2e>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005da2:	6808      	ldr	r0, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005da4:	0dc2      	lsrs	r2, r0, #23
 8005da6:	f002 0204 	and.w	r2, r2, #4
 8005daa:	3414      	adds	r4, #20
  MODIFY_REG(*preg,
 8005dac:	58a5      	ldr	r5, [r4, r2]
 8005dae:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8005db2:	2607      	movs	r6, #7
 8005db4:	fa06 f000 	lsl.w	r0, r6, r0
 8005db8:	ea25 0000 	bic.w	r0, r5, r0
 8005dbc:	50a0      	str	r0, [r4, r2]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005dbe:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005dc0:	6942      	ldr	r2, [r0, #20]
 8005dc2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005dc6:	6142      	str	r2, [r0, #20]
}
 8005dc8:	e777      	b.n	8005cba <HAL_ADC_ConfigChannel+0xb2>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005dca:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005dcc:	6e20      	ldr	r0, [r4, #96]	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005dce:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005dd2:	680a      	ldr	r2, [r1, #0]
 8005dd4:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8005dd8:	bb5d      	cbnz	r5, 8005e32 <HAL_ADC_ConfigChannel+0x22a>
 8005dda:	f3c2 6584 	ubfx	r5, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005dde:	42a8      	cmp	r0, r5
 8005de0:	d057      	beq.n	8005e92 <HAL_ADC_ConfigChannel+0x28a>
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005de2:	f104 0564 	add.w	r5, r4, #100	; 0x64
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005de6:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8005de8:	6e60      	ldr	r0, [r4, #100]	; 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005dea:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005dee:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005df2:	4282      	cmp	r2, r0
 8005df4:	d05e      	beq.n	8005eb4 <HAL_ADC_ConfigChannel+0x2ac>
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	f102 0468 	add.w	r4, r2, #104	; 0x68
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005dfc:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8005dfe:	6e90      	ldr	r0, [r2, #104]	; 0x68
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005e00:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005e04:	680a      	ldr	r2, [r1, #0]
 8005e06:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005e0a:	4282      	cmp	r2, r0
 8005e0c:	d063      	beq.n	8005ed6 <HAL_ADC_ConfigChannel+0x2ce>
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	f102 046c 	add.w	r4, r2, #108	; 0x6c
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005e14:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8005e16:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005e18:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005e1c:	680a      	ldr	r2, [r1, #0]
 8005e1e:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005e22:	4282      	cmp	r2, r0
 8005e24:	f47f af7d 	bne.w	8005d22 <HAL_ADC_ConfigChannel+0x11a>
  MODIFY_REG(*preg,
 8005e28:	6822      	ldr	r2, [r4, #0]
 8005e2a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005e2e:	6022      	str	r2, [r4, #0]
}
 8005e30:	e777      	b.n	8005d22 <HAL_ADC_ConfigChannel+0x11a>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e32:	fa92 f5a2 	rbit	r5, r2
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005e36:	b11d      	cbz	r5, 8005e40 <HAL_ADC_ConfigChannel+0x238>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8005e38:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005e3c:	42a8      	cmp	r0, r5
 8005e3e:	d028      	beq.n	8005e92 <HAL_ADC_ConfigChannel+0x28a>
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005e40:	f104 0564 	add.w	r5, r4, #100	; 0x64
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005e44:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8005e46:	6e60      	ldr	r0, [r4, #100]	; 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005e48:	f3c0 6084 	ubfx	r0, r0, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e4c:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8005e50:	b11a      	cbz	r2, 8005e5a <HAL_ADC_ConfigChannel+0x252>
  return __builtin_clz(value);
 8005e52:	fab2 f282 	clz	r2, r2
 8005e56:	4282      	cmp	r2, r0
 8005e58:	d02c      	beq.n	8005eb4 <HAL_ADC_ConfigChannel+0x2ac>
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	f102 0468 	add.w	r4, r2, #104	; 0x68
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005e60:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8005e62:	6e90      	ldr	r0, [r2, #104]	; 0x68
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005e64:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005e68:	680a      	ldr	r2, [r1, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e6a:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8005e6e:	b11a      	cbz	r2, 8005e78 <HAL_ADC_ConfigChannel+0x270>
  return __builtin_clz(value);
 8005e70:	fab2 f282 	clz	r2, r2
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005e74:	4282      	cmp	r2, r0
 8005e76:	d02e      	beq.n	8005ed6 <HAL_ADC_ConfigChannel+0x2ce>
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	f102 046c 	add.w	r4, r2, #108	; 0x6c
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005e7e:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8005e80:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005e82:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005e86:	680a      	ldr	r2, [r1, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e88:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8005e8c:	fab2 f282 	clz	r2, r2
 8005e90:	e7c7      	b.n	8005e22 <HAL_ADC_ConfigChannel+0x21a>
  MODIFY_REG(*preg,
 8005e92:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005e94:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005e98:	6622      	str	r2, [r4, #96]	; 0x60
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	f102 0564 	add.w	r5, r2, #100	; 0x64
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005ea0:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8005ea2:	6e50      	ldr	r0, [r2, #100]	; 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005ea4:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005ea8:	680a      	ldr	r2, [r1, #0]
 8005eaa:	f3c2 0412 	ubfx	r4, r2, #0, #19
 8005eae:	2c00      	cmp	r4, #0
 8005eb0:	d1cc      	bne.n	8005e4c <HAL_ADC_ConfigChannel+0x244>
 8005eb2:	e79c      	b.n	8005dee <HAL_ADC_ConfigChannel+0x1e6>
  MODIFY_REG(*preg,
 8005eb4:	682a      	ldr	r2, [r5, #0]
 8005eb6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005eba:	602a      	str	r2, [r5, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	f102 0468 	add.w	r4, r2, #104	; 0x68
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005ec2:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8005ec4:	6e90      	ldr	r0, [r2, #104]	; 0x68
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005ec6:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005eca:	680a      	ldr	r2, [r1, #0]
 8005ecc:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8005ed0:	2d00      	cmp	r5, #0
 8005ed2:	d1ca      	bne.n	8005e6a <HAL_ADC_ConfigChannel+0x262>
 8005ed4:	e797      	b.n	8005e06 <HAL_ADC_ConfigChannel+0x1fe>
  MODIFY_REG(*preg,
 8005ed6:	6822      	ldr	r2, [r4, #0]
 8005ed8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005edc:	6022      	str	r2, [r4, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	f102 046c 	add.w	r4, r2, #108	; 0x6c
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005ee4:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8005ee6:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005ee8:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005eec:	680a      	ldr	r2, [r1, #0]
 8005eee:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8005ef2:	2d00      	cmp	r5, #0
 8005ef4:	d1c8      	bne.n	8005e88 <HAL_ADC_ConfigChannel+0x280>
 8005ef6:	e792      	b.n	8005e1e <HAL_ADC_ConfigChannel+0x216>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005ef8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005efa:	680a      	ldr	r2, [r1, #0]
 8005efc:	f3c2 0412 	ubfx	r4, r2, #0, #19
 8005f00:	b9bc      	cbnz	r4, 8005f32 <HAL_ADC_ConfigChannel+0x32a>
 8005f02:	0e94      	lsrs	r4, r2, #26
 8005f04:	3401      	adds	r4, #1
 8005f06:	f004 051f 	and.w	r5, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005f0a:	2d09      	cmp	r5, #9
 8005f0c:	d94c      	bls.n	8005fa8 <HAL_ADC_ConfigChannel+0x3a0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005f0e:	0e94      	lsrs	r4, r2, #26
 8005f10:	3401      	adds	r4, #1
 8005f12:	f004 021f 	and.w	r2, r4, #31
 8005f16:	06a4      	lsls	r4, r4, #26
 8005f18:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8005f1c:	2501      	movs	r5, #1
 8005f1e:	4095      	lsls	r5, r2
 8005f20:	432c      	orrs	r4, r5
 8005f22:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005f26:	3a1e      	subs	r2, #30
 8005f28:	0512      	lsls	r2, r2, #20
 8005f2a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005f2e:	4322      	orrs	r2, r4
 8005f30:	e044      	b.n	8005fbc <HAL_ADC_ConfigChannel+0x3b4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f32:	fa92 f4a2 	rbit	r4, r2
  if (value == 0U)
 8005f36:	2c00      	cmp	r4, #0
 8005f38:	d053      	beq.n	8005fe2 <HAL_ADC_ConfigChannel+0x3da>
  return __builtin_clz(value);
 8005f3a:	fab4 f484 	clz	r4, r4
 8005f3e:	3401      	adds	r4, #1
 8005f40:	f004 041f 	and.w	r4, r4, #31
 8005f44:	2c09      	cmp	r4, #9
 8005f46:	d94c      	bls.n	8005fe2 <HAL_ADC_ConfigChannel+0x3da>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f48:	fa92 f5a2 	rbit	r5, r2
  return __builtin_clz(value);
 8005f4c:	fab5 f585 	clz	r5, r5
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005f50:	3501      	adds	r5, #1
 8005f52:	06ad      	lsls	r5, r5, #26
 8005f54:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f58:	fa92 f6a2 	rbit	r6, r2
  return __builtin_clz(value);
 8005f5c:	fab6 f686 	clz	r6, r6
 8005f60:	3601      	adds	r6, #1
 8005f62:	f006 061f 	and.w	r6, r6, #31
 8005f66:	2401      	movs	r4, #1
 8005f68:	40b4      	lsls	r4, r6
 8005f6a:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f6c:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8005f70:	fab2 f282 	clz	r2, r2
 8005f74:	3201      	adds	r2, #1
 8005f76:	f002 021f 	and.w	r2, r2, #31
 8005f7a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005f7e:	3a1e      	subs	r2, #30
 8005f80:	0512      	lsls	r2, r2, #20
 8005f82:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8005f86:	e7d2      	b.n	8005f2e <HAL_ADC_ConfigChannel+0x326>
 8005f88:	03fff000 	.word	0x03fff000
 8005f8c:	407f0000 	.word	0x407f0000
 8005f90:	80080000 	.word	0x80080000
 8005f94:	50000300 	.word	0x50000300
 8005f98:	c3210000 	.word	0xc3210000
 8005f9c:	90c00010 	.word	0x90c00010
 8005fa0:	c7520000 	.word	0xc7520000
 8005fa4:	50000100 	.word	0x50000100
 8005fa8:	06a4      	lsls	r4, r4, #26
 8005faa:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8005fae:	2201      	movs	r2, #1
 8005fb0:	40aa      	lsls	r2, r5
 8005fb2:	4314      	orrs	r4, r2
 8005fb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005fb8:	052a      	lsls	r2, r5, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005fba:	4322      	orrs	r2, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005fbc:	0dd5      	lsrs	r5, r2, #23
 8005fbe:	f005 0504 	and.w	r5, r5, #4
 8005fc2:	3014      	adds	r0, #20
  MODIFY_REG(*preg,
 8005fc4:	5944      	ldr	r4, [r0, r5]
 8005fc6:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8005fca:	f04f 0c07 	mov.w	ip, #7
 8005fce:	fa0c fc02 	lsl.w	ip, ip, r2
 8005fd2:	ea24 040c 	bic.w	r4, r4, ip
 8005fd6:	688e      	ldr	r6, [r1, #8]
 8005fd8:	fa06 f202 	lsl.w	r2, r6, r2
 8005fdc:	4322      	orrs	r2, r4
 8005fde:	5142      	str	r2, [r0, r5]
}
 8005fe0:	e6b7      	b.n	8005d52 <HAL_ADC_ConfigChannel+0x14a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fe2:	fa92 f5a2 	rbit	r5, r2
  return __builtin_clz(value);
 8005fe6:	fab5 f585 	clz	r5, r5
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005fea:	3501      	adds	r5, #1
 8005fec:	06ad      	lsls	r5, r5, #26
 8005fee:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ff2:	fa92 f6a2 	rbit	r6, r2
  return __builtin_clz(value);
 8005ff6:	fab6 f686 	clz	r6, r6
 8005ffa:	3601      	adds	r6, #1
 8005ffc:	f006 061f 	and.w	r6, r6, #31
 8006000:	2401      	movs	r4, #1
 8006002:	40b4      	lsls	r4, r6
 8006004:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006006:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 800600a:	fab2 f282 	clz	r2, r2
 800600e:	3201      	adds	r2, #1
 8006010:	f002 021f 	and.w	r2, r2, #31
 8006014:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8006018:	0512      	lsls	r2, r2, #20
 800601a:	e7ce      	b.n	8005fba <HAL_ADC_ConfigChannel+0x3b2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800601c:	4926      	ldr	r1, [pc, #152]	; (80060b8 <HAL_ADC_ConfigChannel+0x4b0>)
 800601e:	688a      	ldr	r2, [r1, #8]
 8006020:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8006024:	4322      	orrs	r2, r4
 8006026:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800602a:	608a      	str	r2, [r1, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800602c:	4a23      	ldr	r2, [pc, #140]	; (80060bc <HAL_ADC_ConfigChannel+0x4b4>)
 800602e:	6812      	ldr	r2, [r2, #0]
 8006030:	0992      	lsrs	r2, r2, #6
 8006032:	4923      	ldr	r1, [pc, #140]	; (80060c0 <HAL_ADC_ConfigChannel+0x4b8>)
 8006034:	fba1 1202 	umull	r1, r2, r1, r2
 8006038:	0992      	lsrs	r2, r2, #6
 800603a:	3201      	adds	r2, #1
 800603c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8006040:	0092      	lsls	r2, r2, #2
 8006042:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8006044:	9a01      	ldr	r2, [sp, #4]
 8006046:	b1ea      	cbz	r2, 8006084 <HAL_ADC_ConfigChannel+0x47c>
            wait_loop_index--;
 8006048:	9a01      	ldr	r2, [sp, #4]
 800604a:	3a01      	subs	r2, #1
 800604c:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800604e:	9a01      	ldr	r2, [sp, #4]
 8006050:	2a00      	cmp	r2, #0
 8006052:	d1f9      	bne.n	8006048 <HAL_ADC_ConfigChannel+0x440>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006054:	2000      	movs	r0, #0
 8006056:	e5ee      	b.n	8005c36 <HAL_ADC_ConfigChannel+0x2e>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8006058:	481a      	ldr	r0, [pc, #104]	; (80060c4 <HAL_ADC_ConfigChannel+0x4bc>)
 800605a:	4282      	cmp	r2, r0
 800605c:	d118      	bne.n	8006090 <HAL_ADC_ConfigChannel+0x488>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800605e:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 8006062:	d117      	bne.n	8006094 <HAL_ADC_ConfigChannel+0x48c>
        if (ADC_VREFINT_INSTANCE(hadc))
 8006064:	6819      	ldr	r1, [r3, #0]
 8006066:	4a18      	ldr	r2, [pc, #96]	; (80060c8 <HAL_ADC_ConfigChannel+0x4c0>)
 8006068:	4291      	cmp	r1, r2
 800606a:	d015      	beq.n	8006098 <HAL_ADC_ConfigChannel+0x490>
 800606c:	4912      	ldr	r1, [pc, #72]	; (80060b8 <HAL_ADC_ConfigChannel+0x4b0>)
 800606e:	688a      	ldr	r2, [r1, #8]
 8006070:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8006074:	4322      	orrs	r2, r4
 8006076:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800607a:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800607c:	2000      	movs	r0, #0
}
 800607e:	e5da      	b.n	8005c36 <HAL_ADC_ConfigChannel+0x2e>
 8006080:	2000      	movs	r0, #0
 8006082:	e5d8      	b.n	8005c36 <HAL_ADC_ConfigChannel+0x2e>
 8006084:	2000      	movs	r0, #0
 8006086:	e5d6      	b.n	8005c36 <HAL_ADC_ConfigChannel+0x2e>
 8006088:	2000      	movs	r0, #0
 800608a:	e5d4      	b.n	8005c36 <HAL_ADC_ConfigChannel+0x2e>
 800608c:	2000      	movs	r0, #0
 800608e:	e5d2      	b.n	8005c36 <HAL_ADC_ConfigChannel+0x2e>
 8006090:	2000      	movs	r0, #0
 8006092:	e5d0      	b.n	8005c36 <HAL_ADC_ConfigChannel+0x2e>
 8006094:	2000      	movs	r0, #0
 8006096:	e5ce      	b.n	8005c36 <HAL_ADC_ConfigChannel+0x2e>
 8006098:	2000      	movs	r0, #0
 800609a:	e5cc      	b.n	8005c36 <HAL_ADC_ConfigChannel+0x2e>
  __HAL_LOCK(hadc);
 800609c:	2002      	movs	r0, #2
 800609e:	e5cd      	b.n	8005c3c <HAL_ADC_ConfigChannel+0x34>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80060a0:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
 80060a4:	d105      	bne.n	80060b2 <HAL_ADC_ConfigChannel+0x4aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80060ac:	d0b6      	beq.n	800601c <HAL_ADC_ConfigChannel+0x414>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80060ae:	2000      	movs	r0, #0
 80060b0:	e5c1      	b.n	8005c36 <HAL_ADC_ConfigChannel+0x2e>
 80060b2:	2000      	movs	r0, #0
 80060b4:	e5bf      	b.n	8005c36 <HAL_ADC_ConfigChannel+0x2e>
 80060b6:	bf00      	nop
 80060b8:	50000300 	.word	0x50000300
 80060bc:	20000550 	.word	0x20000550
 80060c0:	053e2d63 	.word	0x053e2d63
 80060c4:	cb840000 	.word	0xcb840000
 80060c8:	50000100 	.word	0x50000100

080060cc <ADC_Enable>:
{
 80060cc:	b538      	push	{r3, r4, r5, lr}
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80060ce:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80060d0:	689a      	ldr	r2, [r3, #8]
 80060d2:	f012 0f01 	tst.w	r2, #1
 80060d6:	d147      	bne.n	8006168 <ADC_Enable+0x9c>
 80060d8:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80060da:	6899      	ldr	r1, [r3, #8]
 80060dc:	4a23      	ldr	r2, [pc, #140]	; (800616c <ADC_Enable+0xa0>)
 80060de:	4211      	tst	r1, r2
 80060e0:	d009      	beq.n	80060f6 <ADC_Enable+0x2a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80060e2:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80060e4:	f043 0310 	orr.w	r3, r3, #16
 80060e8:	65c3      	str	r3, [r0, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80060ea:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80060ec:	f043 0301 	orr.w	r3, r3, #1
 80060f0:	6603      	str	r3, [r0, #96]	; 0x60
      return HAL_ERROR;
 80060f2:	2001      	movs	r0, #1
 80060f4:	e039      	b.n	800616a <ADC_Enable+0x9e>
  MODIFY_REG(ADCx->CR,
 80060f6:	689a      	ldr	r2, [r3, #8]
 80060f8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80060fc:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8006100:	f042 0201 	orr.w	r2, r2, #1
 8006104:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8006106:	f7ff fab5 	bl	8005674 <HAL_GetTick>
 800610a:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800610c:	6823      	ldr	r3, [r4, #0]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	f012 0f01 	tst.w	r2, #1
 8006114:	d006      	beq.n	8006124 <ADC_Enable+0x58>
  return HAL_OK;
 8006116:	2000      	movs	r0, #0
 8006118:	e027      	b.n	800616a <ADC_Enable+0x9e>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800611a:	6823      	ldr	r3, [r4, #0]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	f012 0f01 	tst.w	r2, #1
 8006122:	d11f      	bne.n	8006164 <ADC_Enable+0x98>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006124:	689a      	ldr	r2, [r3, #8]
 8006126:	f012 0f01 	tst.w	r2, #1
 800612a:	d107      	bne.n	800613c <ADC_Enable+0x70>
  MODIFY_REG(ADCx->CR,
 800612c:	689a      	ldr	r2, [r3, #8]
 800612e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006132:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8006136:	f042 0201 	orr.w	r2, r2, #1
 800613a:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800613c:	f7ff fa9a 	bl	8005674 <HAL_GetTick>
 8006140:	1b43      	subs	r3, r0, r5
 8006142:	2b02      	cmp	r3, #2
 8006144:	d9e9      	bls.n	800611a <ADC_Enable+0x4e>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006146:	6823      	ldr	r3, [r4, #0]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f013 0f01 	tst.w	r3, #1
 800614e:	d1e4      	bne.n	800611a <ADC_Enable+0x4e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006150:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006152:	f043 0310 	orr.w	r3, r3, #16
 8006156:	65e3      	str	r3, [r4, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006158:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800615a:	f043 0301 	orr.w	r3, r3, #1
 800615e:	6623      	str	r3, [r4, #96]	; 0x60
          return HAL_ERROR;
 8006160:	2001      	movs	r0, #1
 8006162:	e002      	b.n	800616a <ADC_Enable+0x9e>
  return HAL_OK;
 8006164:	2000      	movs	r0, #0
 8006166:	e000      	b.n	800616a <ADC_Enable+0x9e>
 8006168:	2000      	movs	r0, #0
}
 800616a:	bd38      	pop	{r3, r4, r5, pc}
 800616c:	8000003f 	.word	0x8000003f

08006170 <HAL_ADC_Start_DMA>:
{
 8006170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006172:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006174:	4837      	ldr	r0, [pc, #220]	; (8006254 <HAL_ADC_Start_DMA+0xe4>)
 8006176:	6887      	ldr	r7, [r0, #8]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006178:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800617a:	6880      	ldr	r0, [r0, #8]
 800617c:	f010 0f04 	tst.w	r0, #4
 8006180:	d161      	bne.n	8006246 <HAL_ADC_Start_DMA+0xd6>
 8006182:	460e      	mov	r6, r1
 8006184:	4615      	mov	r5, r2
    __HAL_LOCK(hadc);
 8006186:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 800618a:	2a01      	cmp	r2, #1
 800618c:	d05d      	beq.n	800624a <HAL_ADC_Start_DMA+0xda>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800618e:	f007 071f 	and.w	r7, r7, #31
 8006192:	2301      	movs	r3, #1
 8006194:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8006198:	f240 2321 	movw	r3, #545	; 0x221
 800619c:	40fb      	lsrs	r3, r7
 800619e:	f013 0f01 	tst.w	r3, #1
 80061a2:	d104      	bne.n	80061ae <HAL_ADC_Start_DMA+0x3e>
      __HAL_UNLOCK(hadc);
 80061a4:	2300      	movs	r3, #0
 80061a6:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
      tmp_hal_status = HAL_ERROR;
 80061aa:	2001      	movs	r0, #1
 80061ac:	e04c      	b.n	8006248 <HAL_ADC_Start_DMA+0xd8>
      tmp_hal_status = ADC_Enable(hadc);
 80061ae:	4620      	mov	r0, r4
 80061b0:	f7ff ff8c 	bl	80060cc <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 80061b4:	2800      	cmp	r0, #0
 80061b6:	d142      	bne.n	800623e <HAL_ADC_Start_DMA+0xce>
        ADC_STATE_CLR_SET(hadc->State,
 80061b8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80061ba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80061be:	f023 0301 	bic.w	r3, r3, #1
 80061c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061c6:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80061c8:	6822      	ldr	r2, [r4, #0]
 80061ca:	4b23      	ldr	r3, [pc, #140]	; (8006258 <HAL_ADC_Start_DMA+0xe8>)
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d03e      	beq.n	800624e <HAL_ADC_Start_DMA+0xde>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80061d0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80061d2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80061d6:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80061d8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80061da:	f413 5f80 	tst.w	r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80061de:	bf1a      	itte	ne
 80061e0:	6e23      	ldrne	r3, [r4, #96]	; 0x60
 80061e2:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 80061e6:	2300      	moveq	r3, #0
 80061e8:	6623      	str	r3, [r4, #96]	; 0x60
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80061ea:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80061ec:	4a1b      	ldr	r2, [pc, #108]	; (800625c <HAL_ADC_Start_DMA+0xec>)
 80061ee:	62da      	str	r2, [r3, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80061f0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80061f2:	4a1b      	ldr	r2, [pc, #108]	; (8006260 <HAL_ADC_Start_DMA+0xf0>)
 80061f4:	631a      	str	r2, [r3, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80061f6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80061f8:	4a1a      	ldr	r2, [pc, #104]	; (8006264 <HAL_ADC_Start_DMA+0xf4>)
 80061fa:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80061fc:	6823      	ldr	r3, [r4, #0]
 80061fe:	221c      	movs	r2, #28
 8006200:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hadc);
 8006202:	2300      	movs	r3, #0
 8006204:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006208:	6822      	ldr	r2, [r4, #0]
 800620a:	6853      	ldr	r3, [r2, #4]
 800620c:	f043 0310 	orr.w	r3, r3, #16
 8006210:	6053      	str	r3, [r2, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006212:	6822      	ldr	r2, [r4, #0]
 8006214:	68d3      	ldr	r3, [r2, #12]
 8006216:	f043 0301 	orr.w	r3, r3, #1
 800621a:	60d3      	str	r3, [r2, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800621c:	6821      	ldr	r1, [r4, #0]
 800621e:	462b      	mov	r3, r5
 8006220:	4632      	mov	r2, r6
 8006222:	3140      	adds	r1, #64	; 0x40
 8006224:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006226:	f000 fb15 	bl	8006854 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 800622a:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800622c:	6893      	ldr	r3, [r2, #8]
 800622e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006232:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006236:	f043 0304 	orr.w	r3, r3, #4
 800623a:	6093      	str	r3, [r2, #8]
}
 800623c:	e004      	b.n	8006248 <HAL_ADC_Start_DMA+0xd8>
        __HAL_UNLOCK(hadc);
 800623e:	2300      	movs	r3, #0
 8006240:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8006244:	e000      	b.n	8006248 <HAL_ADC_Start_DMA+0xd8>
    tmp_hal_status = HAL_BUSY;
 8006246:	2002      	movs	r0, #2
}
 8006248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 800624a:	2002      	movs	r0, #2
 800624c:	e7fc      	b.n	8006248 <HAL_ADC_Start_DMA+0xd8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800624e:	2f00      	cmp	r7, #0
 8006250:	d0be      	beq.n	80061d0 <HAL_ADC_Start_DMA+0x60>
 8006252:	e7c1      	b.n	80061d8 <HAL_ADC_Start_DMA+0x68>
 8006254:	50000300 	.word	0x50000300
 8006258:	50000100 	.word	0x50000100
 800625c:	08005b65 	.word	0x08005b65
 8006260:	080058d5 	.word	0x080058d5
 8006264:	08005bed 	.word	0x08005bed

08006268 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8006268:	4770      	bx	lr

0800626a <HAL_ADCEx_InjectedQueueOverflowCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800626a:	4770      	bx	lr

0800626c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800626c:	4770      	bx	lr

0800626e <HAL_ADCEx_LevelOutOfWindow3Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800626e:	4770      	bx	lr

08006270 <HAL_ADCEx_EndOfSamplingCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006270:	4770      	bx	lr
	...

08006274 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006274:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 8006278:	2a01      	cmp	r2, #1
 800627a:	d03d      	beq.n	80062f8 <HAL_ADCEx_MultiModeConfigChannel+0x84>
{
 800627c:	b410      	push	{r4}
 800627e:	b09d      	sub	sp, #116	; 0x74
 8006280:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8006282:	2201      	movs	r2, #1
 8006284:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8006288:	2200      	movs	r2, #0
 800628a:	9218      	str	r2, [sp, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800628c:	9219      	str	r2, [sp, #100]	; 0x64

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800628e:	6802      	ldr	r2, [r0, #0]
 8006290:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8006294:	d032      	beq.n	80062fc <HAL_ADCEx_MultiModeConfigChannel+0x88>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006296:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8006298:	f042 0220 	orr.w	r2, r2, #32
 800629c:	65c2      	str	r2, [r0, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800629e:	2200      	movs	r2, #0
 80062a0:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58

    return HAL_ERROR;
 80062a4:	2001      	movs	r0, #1
 80062a6:	e01f      	b.n	80062e8 <HAL_ADCEx_MultiModeConfigChannel+0x74>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80062a8:	492b      	ldr	r1, [pc, #172]	; (8006358 <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
 80062aa:	688a      	ldr	r2, [r1, #8]
 80062ac:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80062b0:	608a      	str	r2, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80062b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80062b6:	6891      	ldr	r1, [r2, #8]
 80062b8:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80062bc:	6892      	ldr	r2, [r2, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80062be:	430a      	orrs	r2, r1
 80062c0:	f012 0f01 	tst.w	r2, #1
 80062c4:	d116      	bne.n	80062f4 <HAL_ADCEx_MultiModeConfigChannel+0x80>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80062c6:	4924      	ldr	r1, [pc, #144]	; (8006358 <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
 80062c8:	688a      	ldr	r2, [r1, #8]
 80062ca:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 80062ce:	f022 020f 	bic.w	r2, r2, #15
 80062d2:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80062d4:	2000      	movs	r0, #0
 80062d6:	e004      	b.n	80062e2 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80062d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80062da:	f042 0220 	orr.w	r2, r2, #32
 80062de:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80062e0:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 80062e8:	b01d      	add	sp, #116	; 0x74
 80062ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062ee:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80062f0:	2000      	movs	r0, #0
 80062f2:	e7f6      	b.n	80062e2 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80062f4:	2000      	movs	r0, #0
 80062f6:	e7f4      	b.n	80062e2 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
  __HAL_LOCK(hadc);
 80062f8:	2002      	movs	r0, #2
}
 80062fa:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80062fc:	4a17      	ldr	r2, [pc, #92]	; (800635c <HAL_ADCEx_MultiModeConfigChannel+0xe8>)
 80062fe:	6890      	ldr	r0, [r2, #8]
 8006300:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006304:	6892      	ldr	r2, [r2, #8]
 8006306:	4302      	orrs	r2, r0
 8006308:	f012 0f04 	tst.w	r2, #4
 800630c:	d1e4      	bne.n	80062d8 <HAL_ADCEx_MultiModeConfigChannel+0x64>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800630e:	680a      	ldr	r2, [r1, #0]
 8006310:	2a00      	cmp	r2, #0
 8006312:	d0c9      	beq.n	80062a8 <HAL_ADCEx_MultiModeConfigChannel+0x34>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006314:	4810      	ldr	r0, [pc, #64]	; (8006358 <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
 8006316:	6882      	ldr	r2, [r0, #8]
 8006318:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800631c:	684c      	ldr	r4, [r1, #4]
 800631e:	4322      	orrs	r2, r4
 8006320:	f893 c038 	ldrb.w	ip, [r3, #56]	; 0x38
 8006324:	ea42 324c 	orr.w	r2, r2, ip, lsl #13
 8006328:	6082      	str	r2, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800632a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800632e:	6890      	ldr	r0, [r2, #8]
 8006330:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006334:	6892      	ldr	r2, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006336:	4302      	orrs	r2, r0
 8006338:	f012 0f01 	tst.w	r2, #1
 800633c:	d1d8      	bne.n	80062f0 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
        MODIFY_REG(tmpADC_Common->CCR,
 800633e:	4c06      	ldr	r4, [pc, #24]	; (8006358 <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
 8006340:	68a0      	ldr	r0, [r4, #8]
 8006342:	680a      	ldr	r2, [r1, #0]
 8006344:	6889      	ldr	r1, [r1, #8]
 8006346:	430a      	orrs	r2, r1
 8006348:	f420 6171 	bic.w	r1, r0, #3856	; 0xf10
 800634c:	f021 010f 	bic.w	r1, r1, #15
 8006350:	430a      	orrs	r2, r1
 8006352:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006354:	2000      	movs	r0, #0
 8006356:	e7c4      	b.n	80062e2 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8006358:	50000300 	.word	0x50000300
 800635c:	50000100 	.word	0x50000100

08006360 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006360:	4907      	ldr	r1, [pc, #28]	; (8006380 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8006362:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006364:	0203      	lsls	r3, r0, #8
 8006366:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800636a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800636e:	0412      	lsls	r2, r2, #16
 8006370:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006372:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006374:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006378:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800637c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800637e:	4770      	bx	lr
 8006380:	e000ed00 	.word	0xe000ed00

08006384 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006384:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006386:	4b18      	ldr	r3, [pc, #96]	; (80063e8 <HAL_NVIC_SetPriority+0x64>)
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800638e:	f1c3 0c07 	rsb	ip, r3, #7
 8006392:	f1bc 0f04 	cmp.w	ip, #4
 8006396:	bf28      	it	cs
 8006398:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800639c:	f103 0e04 	add.w	lr, r3, #4
 80063a0:	f1be 0f06 	cmp.w	lr, #6
 80063a4:	bf8c      	ite	hi
 80063a6:	3b03      	subhi	r3, #3
 80063a8:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063aa:	f04f 3eff 	mov.w	lr, #4294967295
 80063ae:	fa0e fc0c 	lsl.w	ip, lr, ip
 80063b2:	ea21 010c 	bic.w	r1, r1, ip
 80063b6:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80063b8:	fa0e fe03 	lsl.w	lr, lr, r3
 80063bc:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063c0:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 80063c2:	2800      	cmp	r0, #0
 80063c4:	db09      	blt.n	80063da <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063c6:	0109      	lsls	r1, r1, #4
 80063c8:	b2c9      	uxtb	r1, r1
 80063ca:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80063ce:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80063d2:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80063d6:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063da:	f000 000f 	and.w	r0, r0, #15
 80063de:	0109      	lsls	r1, r1, #4
 80063e0:	b2c9      	uxtb	r1, r1
 80063e2:	4b02      	ldr	r3, [pc, #8]	; (80063ec <HAL_NVIC_SetPriority+0x68>)
 80063e4:	5419      	strb	r1, [r3, r0]
 80063e6:	e7f6      	b.n	80063d6 <HAL_NVIC_SetPriority+0x52>
 80063e8:	e000ed00 	.word	0xe000ed00
 80063ec:	e000ed14 	.word	0xe000ed14

080063f0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80063f0:	2800      	cmp	r0, #0
 80063f2:	db07      	blt.n	8006404 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80063f4:	0941      	lsrs	r1, r0, #5
 80063f6:	f000 001f 	and.w	r0, r0, #31
 80063fa:	2301      	movs	r3, #1
 80063fc:	4083      	lsls	r3, r0
 80063fe:	4a02      	ldr	r2, [pc, #8]	; (8006408 <HAL_NVIC_EnableIRQ+0x18>)
 8006400:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006404:	4770      	bx	lr
 8006406:	bf00      	nop
 8006408:	e000e100 	.word	0xe000e100

0800640c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800640c:	3801      	subs	r0, #1
 800640e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8006412:	d20b      	bcs.n	800642c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006414:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006418:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800641a:	4a05      	ldr	r2, [pc, #20]	; (8006430 <HAL_SYSTICK_Config+0x24>)
 800641c:	21f0      	movs	r1, #240	; 0xf0
 800641e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006422:	2000      	movs	r0, #0
 8006424:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006426:	2207      	movs	r2, #7
 8006428:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800642a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800642c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800642e:	4770      	bx	lr
 8006430:	e000ed00 	.word	0xe000ed00

08006434 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8006434:	b170      	cbz	r0, 8006454 <HAL_DAC_Init+0x20>
{
 8006436:	b510      	push	{r4, lr}
 8006438:	4604      	mov	r4, r0
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800643a:	7903      	ldrb	r3, [r0, #4]
 800643c:	b133      	cbz	r3, 800644c <HAL_DAC_Init+0x18>
    HAL_DAC_MspInit(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800643e:	2302      	movs	r3, #2
 8006440:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006442:	2000      	movs	r0, #0
 8006444:	6120      	str	r0, [r4, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006446:	2301      	movs	r3, #1
 8006448:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
}
 800644a:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 800644c:	7143      	strb	r3, [r0, #5]
    HAL_DAC_MspInit(hdac);
 800644e:	f7fe fa77 	bl	8004940 <HAL_DAC_MspInit>
 8006452:	e7f4      	b.n	800643e <HAL_DAC_Init+0xa>
    return HAL_ERROR;
 8006454:	2001      	movs	r0, #1
}
 8006456:	4770      	bx	lr

08006458 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006458:	7943      	ldrb	r3, [r0, #5]
 800645a:	2b01      	cmp	r3, #1
 800645c:	d02e      	beq.n	80064bc <HAL_DAC_Start+0x64>
{
 800645e:	b570      	push	{r4, r5, r6, lr}
 8006460:	4604      	mov	r4, r0
 8006462:	460d      	mov	r5, r1
  __HAL_LOCK(hdac);
 8006464:	2001      	movs	r0, #1
 8006466:	7160      	strb	r0, [r4, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006468:	2302      	movs	r3, #2
 800646a:	7123      	strb	r3, [r4, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800646c:	6822      	ldr	r2, [r4, #0]
 800646e:	6811      	ldr	r1, [r2, #0]
 8006470:	f005 0610 	and.w	r6, r5, #16
 8006474:	fa00 f306 	lsl.w	r3, r0, r6
 8006478:	430b      	orrs	r3, r1
 800647a:	6013      	str	r3, [r2, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 800647c:	f7ff f900 	bl	8005680 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8006480:	b97d      	cbnz	r5, 80064a2 <HAL_DAC_Start+0x4a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8006482:	6822      	ldr	r2, [r4, #0]
 8006484:	6813      	ldr	r3, [r2, #0]
 8006486:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800648a:	2b02      	cmp	r3, #2
 800648c:	d004      	beq.n	8006498 <HAL_DAC_Start+0x40>
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800648e:	2301      	movs	r3, #1
 8006490:	7123      	strb	r3, [r4, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006492:	2000      	movs	r0, #0
 8006494:	7160      	strb	r0, [r4, #5]

  /* Return function status */
  return HAL_OK;
}
 8006496:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8006498:	6853      	ldr	r3, [r2, #4]
 800649a:	f043 0301 	orr.w	r3, r3, #1
 800649e:	6053      	str	r3, [r2, #4]
 80064a0:	e7f5      	b.n	800648e <HAL_DAC_Start+0x36>
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80064a2:	6821      	ldr	r1, [r4, #0]
 80064a4:	680a      	ldr	r2, [r1, #0]
 80064a6:	f402 1278 	and.w	r2, r2, #4063232	; 0x3e0000
 80064aa:	2302      	movs	r3, #2
 80064ac:	40b3      	lsls	r3, r6
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d1ed      	bne.n	800648e <HAL_DAC_Start+0x36>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80064b2:	684b      	ldr	r3, [r1, #4]
 80064b4:	f043 0302 	orr.w	r3, r3, #2
 80064b8:	604b      	str	r3, [r1, #4]
 80064ba:	e7e8      	b.n	800648e <HAL_DAC_Start+0x36>
  __HAL_LOCK(hdac);
 80064bc:	2002      	movs	r0, #2
}
 80064be:	4770      	bx	lr

080064c0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80064c0:	b410      	push	{r4}
 80064c2:	b083      	sub	sp, #12
  __IO uint32_t tmp = 0UL;
 80064c4:	2400      	movs	r4, #0
 80064c6:	9401      	str	r4, [sp, #4]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 80064c8:	6800      	ldr	r0, [r0, #0]
 80064ca:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 80064cc:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 80064ce:	b951      	cbnz	r1, 80064e6 <HAL_DAC_SetValue+0x26>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80064d0:	9901      	ldr	r1, [sp, #4]
 80064d2:	3108      	adds	r1, #8
 80064d4:	440a      	add	r2, r1
 80064d6:	9201      	str	r2, [sp, #4]
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80064d8:	9a01      	ldr	r2, [sp, #4]
 80064da:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
}
 80064dc:	2000      	movs	r0, #0
 80064de:	b003      	add	sp, #12
 80064e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064e4:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80064e6:	9901      	ldr	r1, [sp, #4]
 80064e8:	3114      	adds	r1, #20
 80064ea:	440a      	add	r2, r1
 80064ec:	9201      	str	r2, [sp, #4]
 80064ee:	e7f3      	b.n	80064d8 <HAL_DAC_SetValue+0x18>

080064f0 <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80064f0:	7943      	ldrb	r3, [r0, #5]
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	f000 80e8 	beq.w	80066c8 <HAL_DAC_ConfigChannel+0x1d8>
{
 80064f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064fc:	4604      	mov	r4, r0
 80064fe:	460e      	mov	r6, r1
 8006500:	4615      	mov	r5, r2
  __HAL_LOCK(hdac);
 8006502:	2301      	movs	r3, #1
 8006504:	7143      	strb	r3, [r0, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006506:	2302      	movs	r3, #2
 8006508:	7103      	strb	r3, [r0, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800650a:	688b      	ldr	r3, [r1, #8]
 800650c:	2b04      	cmp	r3, #4
 800650e:	d071      	beq.n	80065f4 <HAL_DAC_ConfigChannel+0x104>
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8006510:	69f3      	ldr	r3, [r6, #28]
 8006512:	2b01      	cmp	r3, #1
 8006514:	f000 80b8 	beq.w	8006688 <HAL_DAC_ConfigChannel+0x198>
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8006518:	6823      	ldr	r3, [r4, #0]
 800651a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800651c:	f005 0510 	and.w	r5, r5, #16
 8006520:	2207      	movs	r2, #7
 8006522:	40aa      	lsls	r2, r5
 8006524:	43d2      	mvns	r2, r2
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8006526:	69b1      	ldr	r1, [r6, #24]
 8006528:	2901      	cmp	r1, #1
 800652a:	f000 80ba 	beq.w	80066a2 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = 0x00000000UL;
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800652e:	2902      	cmp	r1, #2
 8006530:	f000 80b9 	beq.w	80066a6 <HAL_DAC_ConfigChannel+0x1b6>
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006534:	6971      	ldr	r1, [r6, #20]
 8006536:	fab1 f181 	clz	r1, r1
 800653a:	0949      	lsrs	r1, r1, #5
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800653c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006540:	40a8      	lsls	r0, r5
 8006542:	ea23 0300 	bic.w	r3, r3, r0
 8006546:	4013      	ands	r3, r2
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8006548:	f44f 7280 	mov.w	r2, #256	; 0x100
 800654c:	40aa      	lsls	r2, r5
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800654e:	ea23 0302 	bic.w	r3, r3, r2
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8006552:	7932      	ldrb	r2, [r6, #4]
 8006554:	2a01      	cmp	r2, #1
 8006556:	bf14      	ite	ne
 8006558:	2200      	movne	r2, #0
 800655a:	2201      	moveq	r2, #1
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800655c:	68b7      	ldr	r7, [r6, #8]
 800655e:	6970      	ldr	r0, [r6, #20]
 8006560:	4307      	orrs	r7, r0
 8006562:	ea47 2702 	orr.w	r7, r7, r2, lsl #8
 8006566:	7972      	ldrb	r2, [r6, #5]
 8006568:	2a01      	cmp	r2, #1
 800656a:	bf14      	ite	ne
 800656c:	2200      	movne	r2, #0
 800656e:	2201      	moveq	r2, #1
 8006570:	ea47 2742 	orr.w	r7, r7, r2, lsl #9
 8006574:	430f      	orrs	r7, r1
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8006576:	f423 4840 	bic.w	r8, r3, #49152	; 0xc000
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800657a:	6833      	ldr	r3, [r6, #0]
 800657c:	2b02      	cmp	r3, #2
 800657e:	f000 8094 	beq.w	80066aa <HAL_DAC_ConfigChannel+0x1ba>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8006582:	ea48 0803 	orr.w	r8, r8, r3
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006586:	40af      	lsls	r7, r5
 8006588:	ea47 0708 	orr.w	r7, r7, r8
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800658c:	6823      	ldr	r3, [r4, #0]
 800658e:	63df      	str	r7, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006590:	6821      	ldr	r1, [r4, #0]
 8006592:	680b      	ldr	r3, [r1, #0]
 8006594:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006598:	40aa      	lsls	r2, r5
 800659a:	ea23 0302 	bic.w	r3, r3, r2
 800659e:	600b      	str	r3, [r1, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80065a0:	6821      	ldr	r1, [r4, #0]
 80065a2:	680a      	ldr	r2, [r1, #0]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80065a4:	f640 73fe 	movw	r3, #4094	; 0xffe
 80065a8:	40ab      	lsls	r3, r5
 80065aa:	ea22 0203 	bic.w	r2, r2, r3
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80065ae:	68f3      	ldr	r3, [r6, #12]
 80065b0:	40ab      	lsls	r3, r5
 80065b2:	4313      	orrs	r3, r2
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80065b4:	600b      	str	r3, [r1, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80065b6:	6821      	ldr	r1, [r4, #0]
 80065b8:	680b      	ldr	r3, [r1, #0]
 80065ba:	22c0      	movs	r2, #192	; 0xc0
 80065bc:	40aa      	lsls	r2, r5
 80065be:	ea23 0302 	bic.w	r3, r3, r2
 80065c2:	600b      	str	r3, [r1, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80065c4:	68f3      	ldr	r3, [r6, #12]
 80065c6:	f3c3 0183 	ubfx	r1, r3, #2, #4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80065ca:	6820      	ldr	r0, [r4, #0]
 80065cc:	6e02      	ldr	r2, [r0, #96]	; 0x60
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80065ce:	6933      	ldr	r3, [r6, #16]
 80065d0:	019b      	lsls	r3, r3, #6
 80065d2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80065d6:	430b      	orrs	r3, r1
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80065d8:	40ab      	lsls	r3, r5
 80065da:	f640 710f 	movw	r1, #3855	; 0xf0f
 80065de:	40a9      	lsls	r1, r5
 80065e0:	ea22 0201 	bic.w	r2, r2, r1
 80065e4:	4313      	orrs	r3, r2
 80065e6:	6603      	str	r3, [r0, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80065e8:	2301      	movs	r3, #1
 80065ea:	7123      	strb	r3, [r4, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80065ec:	2000      	movs	r0, #0
 80065ee:	7160      	strb	r0, [r4, #5]

  /* Return function status */
  return HAL_OK;
}
 80065f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tickstart = HAL_GetTick();
 80065f4:	f7ff f83e 	bl	8005674 <HAL_GetTick>
 80065f8:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 80065fa:	b17d      	cbz	r5, 800661c <HAL_DAC_ConfigChannel+0x12c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80065fc:	6823      	ldr	r3, [r4, #0]
 80065fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006600:	2b00      	cmp	r3, #0
 8006602:	da3a      	bge.n	800667a <HAL_DAC_ConfigChannel+0x18a>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006604:	f7ff f836 	bl	8005674 <HAL_GetTick>
 8006608:	1bc0      	subs	r0, r0, r7
 800660a:	2801      	cmp	r0, #1
 800660c:	d9f6      	bls.n	80065fc <HAL_DAC_ConfigChannel+0x10c>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800660e:	6923      	ldr	r3, [r4, #16]
 8006610:	f043 0308 	orr.w	r3, r3, #8
 8006614:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006616:	2003      	movs	r0, #3
 8006618:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
 800661a:	e7e9      	b.n	80065f0 <HAL_DAC_ConfigChannel+0x100>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800661c:	6823      	ldr	r3, [r4, #0]
 800661e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006620:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8006624:	d00b      	beq.n	800663e <HAL_DAC_ConfigChannel+0x14e>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006626:	f7ff f825 	bl	8005674 <HAL_GetTick>
 800662a:	1bc0      	subs	r0, r0, r7
 800662c:	2801      	cmp	r0, #1
 800662e:	d9f5      	bls.n	800661c <HAL_DAC_ConfigChannel+0x12c>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006630:	6923      	ldr	r3, [r4, #16]
 8006632:	f043 0308 	orr.w	r3, r3, #8
 8006636:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006638:	2003      	movs	r0, #3
 800663a:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
 800663c:	e7d8      	b.n	80065f0 <HAL_DAC_ConfigChannel+0x100>
      HAL_Delay(1);
 800663e:	2001      	movs	r0, #1
 8006640:	f7ff f81e 	bl	8005680 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006644:	6823      	ldr	r3, [r4, #0]
 8006646:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8006648:	641a      	str	r2, [r3, #64]	; 0x40
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800664a:	6820      	ldr	r0, [r4, #0]
 800664c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800664e:	f005 0210 	and.w	r2, r5, #16
 8006652:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006656:	4091      	lsls	r1, r2
 8006658:	ea23 0301 	bic.w	r3, r3, r1
 800665c:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 800665e:	4091      	lsls	r1, r2
 8006660:	430b      	orrs	r3, r1
 8006662:	6483      	str	r3, [r0, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8006664:	6820      	ldr	r0, [r4, #0]
 8006666:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8006668:	21ff      	movs	r1, #255	; 0xff
 800666a:	4091      	lsls	r1, r2
 800666c:	ea23 0301 	bic.w	r3, r3, r1
 8006670:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8006672:	4091      	lsls	r1, r2
 8006674:	430b      	orrs	r3, r1
 8006676:	64c3      	str	r3, [r0, #76]	; 0x4c
 8006678:	e74a      	b.n	8006510 <HAL_DAC_ConfigChannel+0x20>
      HAL_Delay(1U);
 800667a:	2001      	movs	r0, #1
 800667c:	f7ff f800 	bl	8005680 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006680:	6823      	ldr	r3, [r4, #0]
 8006682:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8006684:	645a      	str	r2, [r3, #68]	; 0x44
 8006686:	e7e0      	b.n	800664a <HAL_DAC_ConfigChannel+0x15a>
    tmpreg1 = hdac->Instance->CCR;
 8006688:	6821      	ldr	r1, [r4, #0]
 800668a:	6b8a      	ldr	r2, [r1, #56]	; 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800668c:	f005 0010 	and.w	r0, r5, #16
 8006690:	231f      	movs	r3, #31
 8006692:	4083      	lsls	r3, r0
 8006694:	ea22 0203 	bic.w	r2, r2, r3
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006698:	6a33      	ldr	r3, [r6, #32]
 800669a:	4083      	lsls	r3, r0
 800669c:	4313      	orrs	r3, r2
    hdac->Instance->CCR = tmpreg1;
 800669e:	638b      	str	r3, [r1, #56]	; 0x38
 80066a0:	e73a      	b.n	8006518 <HAL_DAC_ConfigChannel+0x28>
    connectOnChip = 0x00000000UL;
 80066a2:	2100      	movs	r1, #0
 80066a4:	e74a      	b.n	800653c <HAL_DAC_ConfigChannel+0x4c>
    connectOnChip = DAC_MCR_MODE1_0;
 80066a6:	2101      	movs	r1, #1
 80066a8:	e748      	b.n	800653c <HAL_DAC_ConfigChannel+0x4c>
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80066aa:	f001 fca7 	bl	8007ffc <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80066ae:	4b07      	ldr	r3, [pc, #28]	; (80066cc <HAL_DAC_ConfigChannel+0x1dc>)
 80066b0:	4298      	cmp	r0, r3
 80066b2:	d902      	bls.n	80066ba <HAL_DAC_ConfigChannel+0x1ca>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80066b4:	f448 4800 	orr.w	r8, r8, #32768	; 0x8000
 80066b8:	e765      	b.n	8006586 <HAL_DAC_ConfigChannel+0x96>
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80066ba:	4b05      	ldr	r3, [pc, #20]	; (80066d0 <HAL_DAC_ConfigChannel+0x1e0>)
 80066bc:	4298      	cmp	r0, r3
 80066be:	f67f af62 	bls.w	8006586 <HAL_DAC_ConfigChannel+0x96>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80066c2:	f448 4880 	orr.w	r8, r8, #16384	; 0x4000
 80066c6:	e75e      	b.n	8006586 <HAL_DAC_ConfigChannel+0x96>
  __HAL_LOCK(hdac);
 80066c8:	2002      	movs	r0, #2
}
 80066ca:	4770      	bx	lr
 80066cc:	09896800 	.word	0x09896800
 80066d0:	04c4b400 	.word	0x04c4b400

080066d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80066d4:	b430      	push	{r4, r5}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80066d6:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 80066d8:	6d05      	ldr	r5, [r0, #80]	; 0x50
 80066da:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80066dc:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80066de:	b114      	cbz	r4, 80066e6 <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80066e0:	6d84      	ldr	r4, [r0, #88]	; 0x58
 80066e2:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 80066e4:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80066e6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80066e8:	f004 0c1f 	and.w	ip, r4, #31
 80066ec:	2401      	movs	r4, #1
 80066ee:	fa04 f40c 	lsl.w	r4, r4, ip
 80066f2:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80066f4:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80066f6:	6804      	ldr	r4, [r0, #0]
 80066f8:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80066fa:	6883      	ldr	r3, [r0, #8]
 80066fc:	2b10      	cmp	r3, #16
 80066fe:	d005      	beq.n	800670c <DMA_SetConfig+0x38>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8006700:	6803      	ldr	r3, [r0, #0]
 8006702:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8006704:	6803      	ldr	r3, [r0, #0]
 8006706:	60da      	str	r2, [r3, #12]
  }
}
 8006708:	bc30      	pop	{r4, r5}
 800670a:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 800670c:	6803      	ldr	r3, [r0, #0]
 800670e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8006710:	6803      	ldr	r3, [r0, #0]
 8006712:	60d9      	str	r1, [r3, #12]
 8006714:	e7f8      	b.n	8006708 <DMA_SetConfig+0x34>
	...

08006718 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006718:	b410      	push	{r4}
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800671a:	6803      	ldr	r3, [r0, #0]
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800671c:	4c0d      	ldr	r4, [pc, #52]	; (8006754 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>)
 800671e:	4a0e      	ldr	r2, [pc, #56]	; (8006758 <DMA_CalcDMAMUXChannelBaseAndMask+0x40>)
 8006720:	490e      	ldr	r1, [pc, #56]	; (800675c <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 8006722:	42a3      	cmp	r3, r4
 8006724:	bf88      	it	hi
 8006726:	460a      	movhi	r2, r1
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006728:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800672a:	f021 0103 	bic.w	r1, r1, #3
 800672e:	440a      	add	r2, r1
 8006730:	6482      	str	r2, [r0, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006732:	4a0b      	ldr	r2, [pc, #44]	; (8006760 <DMA_CalcDMAMUXChannelBaseAndMask+0x48>)
 8006734:	64c2      	str	r2, [r0, #76]	; 0x4c
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006736:	b2db      	uxtb	r3, r3
 8006738:	3b08      	subs	r3, #8
 800673a:	4a0a      	ldr	r2, [pc, #40]	; (8006764 <DMA_CalcDMAMUXChannelBaseAndMask+0x4c>)
 800673c:	fba2 2303 	umull	r2, r3, r2, r3
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006740:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8006744:	2201      	movs	r2, #1
 8006746:	fa02 f303 	lsl.w	r3, r2, r3
 800674a:	6503      	str	r3, [r0, #80]	; 0x50
}
 800674c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006750:	4770      	bx	lr
 8006752:	bf00      	nop
 8006754:	40020407 	.word	0x40020407
 8006758:	40020800 	.word	0x40020800
 800675c:	40020820 	.word	0x40020820
 8006760:	40020880 	.word	0x40020880
 8006764:	cccccccd 	.word	0xcccccccd

08006768 <HAL_DMA_Init>:
  if (hdma == NULL)
 8006768:	2800      	cmp	r0, #0
 800676a:	d060      	beq.n	800682e <HAL_DMA_Init+0xc6>
{
 800676c:	b510      	push	{r4, lr}
 800676e:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006770:	6802      	ldr	r2, [r0, #0]
 8006772:	4b30      	ldr	r3, [pc, #192]	; (8006834 <HAL_DMA_Init+0xcc>)
 8006774:	429a      	cmp	r2, r3
 8006776:	d83f      	bhi.n	80067f8 <HAL_DMA_Init+0x90>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006778:	4b2f      	ldr	r3, [pc, #188]	; (8006838 <HAL_DMA_Init+0xd0>)
 800677a:	4413      	add	r3, r2
 800677c:	492f      	ldr	r1, [pc, #188]	; (800683c <HAL_DMA_Init+0xd4>)
 800677e:	fba1 1303 	umull	r1, r3, r1, r3
 8006782:	091b      	lsrs	r3, r3, #4
 8006784:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA1;
 8006786:	492e      	ldr	r1, [pc, #184]	; (8006840 <HAL_DMA_Init+0xd8>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006788:	6463      	str	r3, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800678a:	6421      	str	r1, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 800678c:	2302      	movs	r3, #2
 800678e:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp = hdma->Instance->CCR;
 8006792:	6811      	ldr	r1, [r2, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006794:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8006798:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmp |=  hdma->Init.Direction        |
 800679c:	68a3      	ldr	r3, [r4, #8]
 800679e:	68e0      	ldr	r0, [r4, #12]
 80067a0:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80067a2:	6920      	ldr	r0, [r4, #16]
 80067a4:	4303      	orrs	r3, r0
 80067a6:	6960      	ldr	r0, [r4, #20]
 80067a8:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80067aa:	69a0      	ldr	r0, [r4, #24]
 80067ac:	4303      	orrs	r3, r0
 80067ae:	69e0      	ldr	r0, [r4, #28]
 80067b0:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80067b2:	6a20      	ldr	r0, [r4, #32]
 80067b4:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 80067b6:	430b      	orrs	r3, r1
  hdma->Instance->CCR = tmp;
 80067b8:	6013      	str	r3, [r2, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80067ba:	4620      	mov	r0, r4
 80067bc:	f7ff ffac 	bl	8006718 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80067c0:	68a3      	ldr	r3, [r4, #8]
 80067c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80067c6:	bf04      	itt	eq
 80067c8:	2300      	moveq	r3, #0
 80067ca:	6063      	streq	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80067cc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80067ce:	7922      	ldrb	r2, [r4, #4]
 80067d0:	601a      	str	r2, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80067d2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80067d4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80067d6:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80067d8:	6863      	ldr	r3, [r4, #4]
 80067da:	1e5a      	subs	r2, r3, #1
 80067dc:	2a03      	cmp	r2, #3
 80067de:	d914      	bls.n	800680a <HAL_DMA_Init+0xa2>
    hdma->DMAmuxRequestGen = 0U;
 80067e0:	2300      	movs	r3, #0
 80067e2:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80067e4:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80067e6:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80067e8:	2000      	movs	r0, #0
 80067ea:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 80067ec:	2301      	movs	r3, #1
 80067ee:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  hdma->Lock = HAL_UNLOCKED;
 80067f2:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 80067f6:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80067f8:	4b12      	ldr	r3, [pc, #72]	; (8006844 <HAL_DMA_Init+0xdc>)
 80067fa:	4413      	add	r3, r2
 80067fc:	490f      	ldr	r1, [pc, #60]	; (800683c <HAL_DMA_Init+0xd4>)
 80067fe:	fba1 1303 	umull	r1, r3, r1, r3
 8006802:	091b      	lsrs	r3, r3, #4
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	4910      	ldr	r1, [pc, #64]	; (8006848 <HAL_DMA_Init+0xe0>)
 8006808:	e7be      	b.n	8006788 <HAL_DMA_Init+0x20>
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800680a:	b2db      	uxtb	r3, r3

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800680c:	4a0f      	ldr	r2, [pc, #60]	; (800684c <HAL_DMA_Init+0xe4>)
 800680e:	441a      	add	r2, r3
 8006810:	0092      	lsls	r2, r2, #2
 8006812:	6562      	str	r2, [r4, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006814:	490e      	ldr	r1, [pc, #56]	; (8006850 <HAL_DMA_Init+0xe8>)
 8006816:	65a1      	str	r1, [r4, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006818:	3b01      	subs	r3, #1
 800681a:	2101      	movs	r1, #1
 800681c:	fa01 f303 	lsl.w	r3, r1, r3
 8006820:	65e3      	str	r3, [r4, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006822:	2300      	movs	r3, #0
 8006824:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006826:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006828:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800682a:	605a      	str	r2, [r3, #4]
 800682c:	e7dc      	b.n	80067e8 <HAL_DMA_Init+0x80>
    return HAL_ERROR;
 800682e:	2001      	movs	r0, #1
}
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	40020407 	.word	0x40020407
 8006838:	bffdfff8 	.word	0xbffdfff8
 800683c:	cccccccd 	.word	0xcccccccd
 8006840:	40020000 	.word	0x40020000
 8006844:	bffdfbf8 	.word	0xbffdfbf8
 8006848:	40020400 	.word	0x40020400
 800684c:	1000823f 	.word	0x1000823f
 8006850:	40020940 	.word	0x40020940

08006854 <HAL_DMA_Start_IT>:
{
 8006854:	b538      	push	{r3, r4, r5, lr}
 8006856:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8006858:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 800685c:	2801      	cmp	r0, #1
 800685e:	d041      	beq.n	80068e4 <HAL_DMA_Start_IT+0x90>
 8006860:	2001      	movs	r0, #1
 8006862:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 8006866:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 800686a:	b2c0      	uxtb	r0, r0
 800686c:	2801      	cmp	r0, #1
 800686e:	d004      	beq.n	800687a <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);
 8006870:	2300      	movs	r3, #0
 8006872:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_BUSY;
 8006876:	2002      	movs	r0, #2
}
 8006878:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800687a:	2002      	movs	r0, #2
 800687c:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006880:	2000      	movs	r0, #0
 8006882:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8006884:	6825      	ldr	r5, [r4, #0]
 8006886:	6828      	ldr	r0, [r5, #0]
 8006888:	f020 0001 	bic.w	r0, r0, #1
 800688c:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800688e:	4620      	mov	r0, r4
 8006890:	f7ff ff20 	bl	80066d4 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8006894:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006896:	b1d3      	cbz	r3, 80068ce <HAL_DMA_Start_IT+0x7a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006898:	6822      	ldr	r2, [r4, #0]
 800689a:	6813      	ldr	r3, [r2, #0]
 800689c:	f043 030e 	orr.w	r3, r3, #14
 80068a0:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80068a2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80068aa:	d003      	beq.n	80068b4 <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068b2:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80068b4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80068b6:	b11b      	cbz	r3, 80068c0 <HAL_DMA_Start_IT+0x6c>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068be:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 80068c0:	6822      	ldr	r2, [r4, #0]
 80068c2:	6813      	ldr	r3, [r2, #0]
 80068c4:	f043 0301 	orr.w	r3, r3, #1
 80068c8:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068ca:	2000      	movs	r0, #0
 80068cc:	e7d4      	b.n	8006878 <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80068ce:	6822      	ldr	r2, [r4, #0]
 80068d0:	6813      	ldr	r3, [r2, #0]
 80068d2:	f023 0304 	bic.w	r3, r3, #4
 80068d6:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80068d8:	6822      	ldr	r2, [r4, #0]
 80068da:	6813      	ldr	r3, [r2, #0]
 80068dc:	f043 030a 	orr.w	r3, r3, #10
 80068e0:	6013      	str	r3, [r2, #0]
 80068e2:	e7de      	b.n	80068a2 <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 80068e4:	2002      	movs	r0, #2
 80068e6:	e7c7      	b.n	8006878 <HAL_DMA_Start_IT+0x24>

080068e8 <HAL_DMA_Abort>:
{
 80068e8:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80068ea:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80068ee:	b2d2      	uxtb	r2, r2
 80068f0:	2a02      	cmp	r2, #2
 80068f2:	d009      	beq.n	8006908 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80068f4:	2204      	movs	r2, #4
 80068f6:	63c2      	str	r2, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 80068f8:	2001      	movs	r0, #1
  hdma->State = HAL_DMA_STATE_READY;
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8006900:	2200      	movs	r2, #0
 8006902:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8006906:	4770      	bx	lr
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006908:	6801      	ldr	r1, [r0, #0]
 800690a:	680a      	ldr	r2, [r1, #0]
 800690c:	f022 020e 	bic.w	r2, r2, #14
 8006910:	600a      	str	r2, [r1, #0]
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006912:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8006914:	680a      	ldr	r2, [r1, #0]
 8006916:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800691a:	600a      	str	r2, [r1, #0]
     __HAL_DMA_DISABLE(hdma);
 800691c:	6801      	ldr	r1, [r0, #0]
 800691e:	680a      	ldr	r2, [r1, #0]
 8006920:	f022 0201 	bic.w	r2, r2, #1
 8006924:	600a      	str	r2, [r1, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006926:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8006928:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800692a:	f002 011f 	and.w	r1, r2, #31
 800692e:	2201      	movs	r2, #1
 8006930:	408a      	lsls	r2, r1
 8006932:	6042      	str	r2, [r0, #4]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006934:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006936:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006938:	6051      	str	r1, [r2, #4]
     if (hdma->DMAmuxRequestGen != 0U)
 800693a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800693c:	b142      	cbz	r2, 8006950 <HAL_DMA_Abort+0x68>
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800693e:	6811      	ldr	r1, [r2, #0]
 8006940:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8006944:	6011      	str	r1, [r2, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006946:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006948:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800694a:	6051      	str	r1, [r2, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800694c:	2000      	movs	r0, #0
 800694e:	e7d4      	b.n	80068fa <HAL_DMA_Abort+0x12>
 8006950:	2000      	movs	r0, #0
 8006952:	e7d2      	b.n	80068fa <HAL_DMA_Abort+0x12>

08006954 <HAL_DMA_Abort_IT>:
{
 8006954:	b508      	push	{r3, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006956:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800695a:	b2db      	uxtb	r3, r3
 800695c:	2b02      	cmp	r3, #2
 800695e:	d009      	beq.n	8006974 <HAL_DMA_Abort_IT+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006960:	2304      	movs	r3, #4
 8006962:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8006964:	2301      	movs	r3, #1
 8006966:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800696a:	2200      	movs	r2, #0
 800696c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    status = HAL_ERROR;
 8006970:	4618      	mov	r0, r3
}
 8006972:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006974:	6802      	ldr	r2, [r0, #0]
 8006976:	6813      	ldr	r3, [r2, #0]
 8006978:	f023 030e 	bic.w	r3, r3, #14
 800697c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800697e:	6802      	ldr	r2, [r0, #0]
 8006980:	6813      	ldr	r3, [r2, #0]
 8006982:	f023 0301 	bic.w	r3, r3, #1
 8006986:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006988:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800698a:	6813      	ldr	r3, [r2, #0]
 800698c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006990:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006992:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8006994:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006996:	f003 021f 	and.w	r2, r3, #31
 800699a:	2301      	movs	r3, #1
 800699c:	4093      	lsls	r3, r2
 800699e:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80069a0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80069a2:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80069a4:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80069a6:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80069a8:	b133      	cbz	r3, 80069b8 <HAL_DMA_Abort_IT+0x64>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80069b0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80069b2:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80069b4:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80069b6:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80069b8:	2301      	movs	r3, #1
 80069ba:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80069be:	2300      	movs	r3, #0
 80069c0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 80069c4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80069c6:	b113      	cbz	r3, 80069ce <HAL_DMA_Abort_IT+0x7a>
      hdma->XferAbortCallback(hdma);
 80069c8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80069ca:	2000      	movs	r0, #0
 80069cc:	e7d1      	b.n	8006972 <HAL_DMA_Abort_IT+0x1e>
 80069ce:	2000      	movs	r0, #0
 80069d0:	e7cf      	b.n	8006972 <HAL_DMA_Abort_IT+0x1e>

080069d2 <HAL_DMA_IRQHandler>:
{
 80069d2:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80069d4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80069d6:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80069d8:	6804      	ldr	r4, [r0, #0]
 80069da:	6825      	ldr	r5, [r4, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80069dc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80069de:	f003 031f 	and.w	r3, r3, #31
 80069e2:	2204      	movs	r2, #4
 80069e4:	409a      	lsls	r2, r3
 80069e6:	420a      	tst	r2, r1
 80069e8:	d015      	beq.n	8006a16 <HAL_DMA_IRQHandler+0x44>
 80069ea:	f015 0f04 	tst.w	r5, #4
 80069ee:	d012      	beq.n	8006a16 <HAL_DMA_IRQHandler+0x44>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80069f0:	6823      	ldr	r3, [r4, #0]
 80069f2:	f013 0f20 	tst.w	r3, #32
 80069f6:	d103      	bne.n	8006a00 <HAL_DMA_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80069f8:	6823      	ldr	r3, [r4, #0]
 80069fa:	f023 0304 	bic.w	r3, r3, #4
 80069fe:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006a00:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8006a02:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006a04:	f003 021f 	and.w	r2, r3, #31
 8006a08:	2304      	movs	r3, #4
 8006a0a:	4093      	lsls	r3, r2
 8006a0c:	604b      	str	r3, [r1, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8006a0e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8006a10:	b103      	cbz	r3, 8006a14 <HAL_DMA_IRQHandler+0x42>
      hdma->XferHalfCpltCallback(hdma);
 8006a12:	4798      	blx	r3
}
 8006a14:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006a16:	2202      	movs	r2, #2
 8006a18:	409a      	lsls	r2, r3
 8006a1a:	420a      	tst	r2, r1
 8006a1c:	d01c      	beq.n	8006a58 <HAL_DMA_IRQHandler+0x86>
           && (0U != (source_it & DMA_IT_TC)))
 8006a1e:	f015 0f02 	tst.w	r5, #2
 8006a22:	d019      	beq.n	8006a58 <HAL_DMA_IRQHandler+0x86>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006a24:	6823      	ldr	r3, [r4, #0]
 8006a26:	f013 0f20 	tst.w	r3, #32
 8006a2a:	d106      	bne.n	8006a3a <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006a2c:	6823      	ldr	r3, [r4, #0]
 8006a2e:	f023 030a 	bic.w	r3, r3, #10
 8006a32:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8006a34:	2301      	movs	r3, #1
 8006a36:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006a3a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8006a3c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006a3e:	f003 021f 	and.w	r2, r3, #31
 8006a42:	2302      	movs	r3, #2
 8006a44:	4093      	lsls	r3, r2
 8006a46:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8006a48:	2300      	movs	r3, #0
 8006a4a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 8006a4e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d0df      	beq.n	8006a14 <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 8006a54:	4798      	blx	r3
 8006a56:	e7dd      	b.n	8006a14 <HAL_DMA_IRQHandler+0x42>
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006a58:	2208      	movs	r2, #8
 8006a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a5e:	420b      	tst	r3, r1
 8006a60:	d0d8      	beq.n	8006a14 <HAL_DMA_IRQHandler+0x42>
           && (0U != (source_it & DMA_IT_TE)))
 8006a62:	f015 0f08 	tst.w	r5, #8
 8006a66:	d0d5      	beq.n	8006a14 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a68:	6823      	ldr	r3, [r4, #0]
 8006a6a:	f023 030e 	bic.w	r3, r3, #14
 8006a6e:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006a70:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8006a72:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006a74:	f003 031f 	and.w	r3, r3, #31
 8006a78:	2201      	movs	r2, #1
 8006a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a7e:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006a80:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8006a82:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8006a86:	2300      	movs	r3, #0
 8006a88:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8006a8c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d0c0      	beq.n	8006a14 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8006a92:	4798      	blx	r3
  return;
 8006a94:	e7be      	b.n	8006a14 <HAL_DMA_IRQHandler+0x42>
	...

08006a98 <HAL_FDCAN_Init>:
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006a98:	2800      	cmp	r0, #0
 8006a9a:	f000 80f9 	beq.w	8006c90 <HAL_FDCAN_Init+0x1f8>
{
 8006a9e:	b538      	push	{r3, r4, r5, lr}
 8006aa0:	4604      	mov	r4, r0

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006aa2:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8006aa6:	b1d3      	cbz	r3, 8006ade <HAL_FDCAN_Init+0x46>
    HAL_FDCAN_MspInit(hfdcan);
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006aa8:	6822      	ldr	r2, [r4, #0]
 8006aaa:	6993      	ldr	r3, [r2, #24]
 8006aac:	f023 0310 	bic.w	r3, r3, #16
 8006ab0:	6193      	str	r3, [r2, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006ab2:	f7fe fddf 	bl	8005674 <HAL_GetTick>
 8006ab6:	4605      	mov	r5, r0

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006ab8:	6823      	ldr	r3, [r4, #0]
 8006aba:	699a      	ldr	r2, [r3, #24]
 8006abc:	f012 0f08 	tst.w	r2, #8
 8006ac0:	d012      	beq.n	8006ae8 <HAL_FDCAN_Init+0x50>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006ac2:	f7fe fdd7 	bl	8005674 <HAL_GetTick>
 8006ac6:	1b40      	subs	r0, r0, r5
 8006ac8:	280a      	cmp	r0, #10
 8006aca:	d9f5      	bls.n	8006ab8 <HAL_FDCAN_Init+0x20>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006acc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006ace:	f043 0301 	orr.w	r3, r3, #1
 8006ad2:	6623      	str	r3, [r4, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006ad4:	2303      	movs	r3, #3
 8006ad6:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c

      return HAL_ERROR;
 8006ada:	2001      	movs	r0, #1
  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8006adc:	bd38      	pop	{r3, r4, r5, pc}
    hfdcan->Lock = HAL_UNLOCKED;
 8006ade:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    HAL_FDCAN_MspInit(hfdcan);
 8006ae2:	f7fd ffe3 	bl	8004aac <HAL_FDCAN_MspInit>
 8006ae6:	e7df      	b.n	8006aa8 <HAL_FDCAN_Init+0x10>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006ae8:	699a      	ldr	r2, [r3, #24]
 8006aea:	f042 0201 	orr.w	r2, r2, #1
 8006aee:	619a      	str	r2, [r3, #24]
  tickstart = HAL_GetTick();
 8006af0:	f7fe fdc0 	bl	8005674 <HAL_GetTick>
 8006af4:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006af6:	6823      	ldr	r3, [r4, #0]
 8006af8:	699a      	ldr	r2, [r3, #24]
 8006afa:	f012 0f01 	tst.w	r2, #1
 8006afe:	d10d      	bne.n	8006b1c <HAL_FDCAN_Init+0x84>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006b00:	f7fe fdb8 	bl	8005674 <HAL_GetTick>
 8006b04:	1b40      	subs	r0, r0, r5
 8006b06:	280a      	cmp	r0, #10
 8006b08:	d9f5      	bls.n	8006af6 <HAL_FDCAN_Init+0x5e>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006b0a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006b0c:	f043 0301 	orr.w	r3, r3, #1
 8006b10:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006b12:	2303      	movs	r3, #3
 8006b14:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8006b18:	2001      	movs	r0, #1
 8006b1a:	e7df      	b.n	8006adc <HAL_FDCAN_Init+0x44>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006b1c:	699a      	ldr	r2, [r3, #24]
 8006b1e:	f042 0202 	orr.w	r2, r2, #2
 8006b22:	619a      	str	r2, [r3, #24]
  if (hfdcan->Instance == FDCAN1)
 8006b24:	6822      	ldr	r2, [r4, #0]
 8006b26:	4b5b      	ldr	r3, [pc, #364]	; (8006c94 <HAL_FDCAN_Init+0x1fc>)
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d047      	beq.n	8006bbc <HAL_FDCAN_Init+0x124>
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006b2c:	7c23      	ldrb	r3, [r4, #16]
 8006b2e:	2b01      	cmp	r3, #1
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006b30:	6822      	ldr	r2, [r4, #0]
 8006b32:	6993      	ldr	r3, [r2, #24]
 8006b34:	bf0c      	ite	eq
 8006b36:	f023 0340 	biceq.w	r3, r3, #64	; 0x40
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006b3a:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8006b3e:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006b40:	7c63      	ldrb	r3, [r4, #17]
 8006b42:	2b01      	cmp	r3, #1
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006b44:	6822      	ldr	r2, [r4, #0]
 8006b46:	6993      	ldr	r3, [r2, #24]
 8006b48:	bf0c      	ite	eq
 8006b4a:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006b4e:	f423 4380 	bicne.w	r3, r3, #16384	; 0x4000
 8006b52:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006b54:	7ca3      	ldrb	r3, [r4, #18]
 8006b56:	2b01      	cmp	r3, #1
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006b58:	6822      	ldr	r2, [r4, #0]
 8006b5a:	6993      	ldr	r3, [r2, #24]
 8006b5c:	bf0c      	ite	eq
 8006b5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006b62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006b66:	6193      	str	r3, [r2, #24]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006b68:	6822      	ldr	r2, [r4, #0]
 8006b6a:	6993      	ldr	r3, [r2, #24]
 8006b6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b70:	68a1      	ldr	r1, [r4, #8]
 8006b72:	430b      	orrs	r3, r1
 8006b74:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006b76:	6822      	ldr	r2, [r4, #0]
 8006b78:	6993      	ldr	r3, [r2, #24]
 8006b7a:	f023 03a4 	bic.w	r3, r3, #164	; 0xa4
 8006b7e:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006b80:	6822      	ldr	r2, [r4, #0]
 8006b82:	6913      	ldr	r3, [r2, #16]
 8006b84:	f023 0310 	bic.w	r3, r3, #16
 8006b88:	6113      	str	r3, [r2, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006b8a:	68e3      	ldr	r3, [r4, #12]
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d01b      	beq.n	8006bc8 <HAL_FDCAN_Init+0x130>
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006b90:	b1fb      	cbz	r3, 8006bd2 <HAL_FDCAN_Init+0x13a>
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006b92:	2b02      	cmp	r3, #2
 8006b94:	d065      	beq.n	8006c62 <HAL_FDCAN_Init+0x1ca>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006b96:	6822      	ldr	r2, [r4, #0]
 8006b98:	6993      	ldr	r3, [r2, #24]
 8006b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b9e:	6193      	str	r3, [r2, #24]
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006ba0:	6822      	ldr	r2, [r4, #0]
 8006ba2:	6913      	ldr	r3, [r2, #16]
 8006ba4:	f043 0310 	orr.w	r3, r3, #16
 8006ba8:	6113      	str	r3, [r2, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006baa:	68e3      	ldr	r3, [r4, #12]
 8006bac:	2b03      	cmp	r3, #3
 8006bae:	d110      	bne.n	8006bd2 <HAL_FDCAN_Init+0x13a>
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006bb0:	6822      	ldr	r2, [r4, #0]
 8006bb2:	6993      	ldr	r3, [r2, #24]
 8006bb4:	f043 0320 	orr.w	r3, r3, #32
 8006bb8:	6193      	str	r3, [r2, #24]
 8006bba:	e00a      	b.n	8006bd2 <HAL_FDCAN_Init+0x13a>
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8006bbc:	6862      	ldr	r2, [r4, #4]
 8006bbe:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8006bc2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 8006bc6:	e7b1      	b.n	8006b2c <HAL_FDCAN_Init+0x94>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006bc8:	6822      	ldr	r2, [r4, #0]
 8006bca:	6993      	ldr	r3, [r2, #24]
 8006bcc:	f043 0304 	orr.w	r3, r3, #4
 8006bd0:	6193      	str	r3, [r2, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006bd2:	6822      	ldr	r2, [r4, #0]
 8006bd4:	69a3      	ldr	r3, [r4, #24]
 8006bd6:	1e59      	subs	r1, r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006bd8:	69e3      	ldr	r3, [r4, #28]
 8006bda:	3b01      	subs	r3, #1
 8006bdc:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006bde:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006be2:	6a21      	ldr	r1, [r4, #32]
 8006be4:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006be6:	430b      	orrs	r3, r1
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006be8:	6961      	ldr	r1, [r4, #20]
 8006bea:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006bec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006bf0:	61d3      	str	r3, [r2, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006bf2:	68a3      	ldr	r3, [r4, #8]
 8006bf4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bf8:	d039      	beq.n	8006c6e <HAL_FDCAN_Init+0x1d6>
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006bfa:	6822      	ldr	r2, [r4, #0]
 8006bfc:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8006c00:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006c02:	430b      	orrs	r3, r1
 8006c04:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8006c08:	4b23      	ldr	r3, [pc, #140]	; (8006c98 <HAL_FDCAN_Init+0x200>)
 8006c0a:	6423      	str	r3, [r4, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8006c0c:	6821      	ldr	r1, [r4, #0]
 8006c0e:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
 8006c12:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8006c14:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8006c18:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8006c1c:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8006c20:	4a1e      	ldr	r2, [pc, #120]	; (8006c9c <HAL_FDCAN_Init+0x204>)
 8006c22:	6462      	str	r2, [r4, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8006c24:	6821      	ldr	r1, [r4, #0]
 8006c26:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
 8006c2a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006c2c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006c30:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8006c34:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8006c38:	4a19      	ldr	r2, [pc, #100]	; (8006ca0 <HAL_FDCAN_Init+0x208>)
 8006c3a:	64a2      	str	r2, [r4, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8006c3c:	32d8      	adds	r2, #216	; 0xd8
 8006c3e:	64e2      	str	r2, [r4, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8006c40:	32d8      	adds	r2, #216	; 0xd8
 8006c42:	6522      	str	r2, [r4, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8006c44:	3218      	adds	r2, #24
 8006c46:	6562      	str	r2, [r4, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006c48:	2100      	movs	r1, #0
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006c4a:	32d8      	adds	r2, #216	; 0xd8
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006c4c:	f843 1b04 	str.w	r1, [r3], #4
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d1fb      	bne.n	8006c4c <HAL_FDCAN_Init+0x1b4>
  hfdcan->LatestTxFifoQRequest = 0U;
 8006c54:	2000      	movs	r0, #0
 8006c56:	65a0      	str	r0, [r4, #88]	; 0x58
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006c58:	6620      	str	r0, [r4, #96]	; 0x60
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return HAL_OK;
 8006c60:	e73c      	b.n	8006adc <HAL_FDCAN_Init+0x44>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006c62:	6822      	ldr	r2, [r4, #0]
 8006c64:	6993      	ldr	r3, [r2, #24]
 8006c66:	f043 0320 	orr.w	r3, r3, #32
 8006c6a:	6193      	str	r3, [r2, #24]
 8006c6c:	e7b1      	b.n	8006bd2 <HAL_FDCAN_Init+0x13a>
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006c6e:	6822      	ldr	r2, [r4, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006c70:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006c72:	1e59      	subs	r1, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006c74:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006c76:	3b01      	subs	r3, #1
 8006c78:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006c7a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006c7e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006c80:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006c82:	430b      	orrs	r3, r1
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006c84:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006c86:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006c88:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006c8c:	60d3      	str	r3, [r2, #12]
 8006c8e:	e7b4      	b.n	8006bfa <HAL_FDCAN_Init+0x162>
    return HAL_ERROR;
 8006c90:	2001      	movs	r0, #1
}
 8006c92:	4770      	bx	lr
 8006c94:	40006400 	.word	0x40006400
 8006c98:	4000a400 	.word	0x4000a400
 8006c9c:	4000a470 	.word	0x4000a470
 8006ca0:	4000a4b0 	.word	0x4000a4b0

08006ca4 <HAL_FDCAN_Start>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006ca4:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d005      	beq.n	8006cba <HAL_FDCAN_Start+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006cae:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006cb0:	f043 0304 	orr.w	r3, r3, #4
 8006cb4:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8006cb6:	2001      	movs	r0, #1
}
 8006cb8:	4770      	bx	lr
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8006cba:	2302      	movs	r3, #2
 8006cbc:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006cc0:	6802      	ldr	r2, [r0, #0]
 8006cc2:	6993      	ldr	r3, [r2, #24]
 8006cc4:	f023 0301 	bic.w	r3, r3, #1
 8006cc8:	6193      	str	r3, [r2, #24]
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_OK;
 8006cce:	4618      	mov	r0, r3
 8006cd0:	4770      	bx	lr
	...

08006cd4 <HAL_FDCAN_AddMessageToTxFifoQ>:
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8006cd4:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	2b02      	cmp	r3, #2
 8006cdc:	d154      	bne.n	8006d88 <HAL_FDCAN_AddMessageToTxFifoQ+0xb4>
{
 8006cde:	b5f0      	push	{r4, r5, r6, r7, lr}
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8006ce0:	6804      	ldr	r4, [r0, #0]
 8006ce2:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 8006ce6:	f413 1c00 	ands.w	ip, r3, #2097152	; 0x200000
 8006cea:	d005      	beq.n	8006cf8 <HAL_FDCAN_AddMessageToTxFifoQ+0x24>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8006cec:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006cee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006cf2:	6603      	str	r3, [r0, #96]	; 0x60
      return HAL_ERROR;
 8006cf4:	2001      	movs	r0, #1
}
 8006cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8006cf8:	f8d4 50c4 	ldr.w	r5, [r4, #196]	; 0xc4
 8006cfc:	f3c5 4501 	ubfx	r5, r5, #16, #2
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8006d00:	684b      	ldr	r3, [r1, #4]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d138      	bne.n	8006d78 <HAL_FDCAN_AddMessageToTxFifoQ+0xa4>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
                   FDCAN_STANDARD_ID |
 8006d06:	690c      	ldr	r4, [r1, #16]
 8006d08:	688b      	ldr	r3, [r1, #8]
 8006d0a:	431c      	orrs	r4, r3
                   pTxHeader->TxFrameType |
                   (pTxHeader->Identifier << 18U));
 8006d0c:	680b      	ldr	r3, [r1, #0]
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006d0e:	ea44 4483 	orr.w	r4, r4, r3, lsl #18
                   pTxHeader->TxFrameType |
                   pTxHeader->Identifier);
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006d12:	69cb      	ldr	r3, [r1, #28]
 8006d14:	698e      	ldr	r6, [r1, #24]
 8006d16:	4333      	orrs	r3, r6
 8006d18:	694e      	ldr	r6, [r1, #20]
 8006d1a:	4333      	orrs	r3, r6
 8006d1c:	68ce      	ldr	r6, [r1, #12]
 8006d1e:	4333      	orrs	r3, r6
 8006d20:	6a0e      	ldr	r6, [r1, #32]
 8006d22:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
                 pTxHeader->FDFormat |
                 pTxHeader->BitRateSwitch |
                 pTxHeader->DataLength);

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8006d26:	eb05 06c5 	add.w	r6, r5, r5, lsl #3
 8006d2a:	6d47      	ldr	r7, [r0, #84]	; 0x54
 8006d2c:	eb07 0ec6 	add.w	lr, r7, r6, lsl #3

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8006d30:	f847 4036 	str.w	r4, [r7, r6, lsl #3]
  TxAddress++;
  *TxAddress = TxElementW2;
 8006d34:	f8ce 3004 	str.w	r3, [lr, #4]
  TxAddress++;

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8006d38:	89cb      	ldrh	r3, [r1, #14]
 8006d3a:	4c16      	ldr	r4, [pc, #88]	; (8006d94 <HAL_FDCAN_AddMessageToTxFifoQ+0xc0>)
 8006d3c:	5ce3      	ldrb	r3, [r4, r3]
 8006d3e:	b19b      	cbz	r3, 8006d68 <HAL_FDCAN_AddMessageToTxFifoQ+0x94>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006d40:	eb0e 060c 	add.w	r6, lr, ip
 8006d44:	78d7      	ldrb	r7, [r2, #3]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006d46:	7893      	ldrb	r3, [r2, #2]
 8006d48:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006d4a:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
                  (uint32_t)pTxData[ByteCounter]);
 8006d4e:	7817      	ldrb	r7, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006d50:	433b      	orrs	r3, r7
 8006d52:	7857      	ldrb	r7, [r2, #1]
 8006d54:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006d58:	60b3      	str	r3, [r6, #8]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8006d5a:	f10c 0c04 	add.w	ip, ip, #4
 8006d5e:	3204      	adds	r2, #4
 8006d60:	89cb      	ldrh	r3, [r1, #14]
 8006d62:	5ce3      	ldrb	r3, [r4, r3]
 8006d64:	459c      	cmp	ip, r3
 8006d66:	d3eb      	bcc.n	8006d40 <HAL_FDCAN_AddMessageToTxFifoQ+0x6c>
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8006d68:	6802      	ldr	r2, [r0, #0]
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	40ab      	lsls	r3, r5
 8006d6e:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8006d72:	6583      	str	r3, [r0, #88]	; 0x58
    return HAL_OK;
 8006d74:	2000      	movs	r0, #0
 8006d76:	e7be      	b.n	8006cf6 <HAL_FDCAN_AddMessageToTxFifoQ+0x22>
                   pTxHeader->TxFrameType |
 8006d78:	690b      	ldr	r3, [r1, #16]
 8006d7a:	680c      	ldr	r4, [r1, #0]
 8006d7c:	431c      	orrs	r4, r3
 8006d7e:	688b      	ldr	r3, [r1, #8]
 8006d80:	431c      	orrs	r4, r3
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006d82:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
 8006d86:	e7c4      	b.n	8006d12 <HAL_FDCAN_AddMessageToTxFifoQ+0x3e>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006d88:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006d8a:	f043 0308 	orr.w	r3, r3, #8
 8006d8e:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8006d90:	2001      	movs	r0, #1
}
 8006d92:	4770      	bx	lr
 8006d94:	0800f79c 	.word	0x0800f79c

08006d98 <HAL_FDCAN_GetRxMessage>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006d98:	f890 c05c 	ldrb.w	ip, [r0, #92]	; 0x5c
 8006d9c:	fa5f fc8c 	uxtb.w	ip, ip
  if (state == HAL_FDCAN_STATE_BUSY)
 8006da0:	f1bc 0f02 	cmp.w	ip, #2
 8006da4:	d177      	bne.n	8006e96 <HAL_FDCAN_GetRxMessage+0xfe>
{
 8006da6:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006da8:	2940      	cmp	r1, #64	; 0x40
 8006daa:	d00b      	beq.n	8006dc4 <HAL_FDCAN_GetRxMessage+0x2c>
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8006dac:	6804      	ldr	r4, [r0, #0]
 8006dae:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
 8006db2:	f015 0f0f 	tst.w	r5, #15
 8006db6:	d11b      	bne.n	8006df0 <HAL_FDCAN_GetRxMessage+0x58>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006db8:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006dba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dbe:	6603      	str	r3, [r0, #96]	; 0x60
        return HAL_ERROR;
 8006dc0:	2001      	movs	r0, #1
 8006dc2:	e063      	b.n	8006e8c <HAL_FDCAN_GetRxMessage+0xf4>
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006dc4:	6804      	ldr	r4, [r0, #0]
 8006dc6:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 8006dca:	f015 0f0f 	tst.w	r5, #15
 8006dce:	d105      	bne.n	8006ddc <HAL_FDCAN_GetRxMessage+0x44>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006dd0:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006dd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dd6:	6603      	str	r3, [r0, #96]	; 0x60
        return HAL_ERROR;
 8006dd8:	2001      	movs	r0, #1
 8006dda:	e057      	b.n	8006e8c <HAL_FDCAN_GetRxMessage+0xf4>
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8006ddc:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
 8006de0:	f3c7 2701 	ubfx	r7, r7, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8006de4:	eb07 04c7 	add.w	r4, r7, r7, lsl #3
 8006de8:	6c86      	ldr	r6, [r0, #72]	; 0x48
 8006dea:	eb06 06c4 	add.w	r6, r6, r4, lsl #3
 8006dee:	e008      	b.n	8006e02 <HAL_FDCAN_GetRxMessage+0x6a>
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8006df0:	f8d4 7098 	ldr.w	r7, [r4, #152]	; 0x98
 8006df4:	f3c7 2701 	ubfx	r7, r7, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8006df8:	eb07 04c7 	add.w	r4, r7, r7, lsl #3
 8006dfc:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
 8006dfe:	eb06 06c4 	add.w	r6, r6, r4, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8006e02:	6834      	ldr	r4, [r6, #0]
 8006e04:	f004 4480 	and.w	r4, r4, #1073741824	; 0x40000000
 8006e08:	6054      	str	r4, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8006e0a:	2c00      	cmp	r4, #0
 8006e0c:	d13f      	bne.n	8006e8e <HAL_FDCAN_GetRxMessage+0xf6>
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8006e0e:	6834      	ldr	r4, [r6, #0]
 8006e10:	f3c4 448a 	ubfx	r4, r4, #18, #11
 8006e14:	6014      	str	r4, [r2, #0]
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8006e16:	6834      	ldr	r4, [r6, #0]
 8006e18:	f004 5400 	and.w	r4, r4, #536870912	; 0x20000000
 8006e1c:	6094      	str	r4, [r2, #8]
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8006e1e:	6834      	ldr	r4, [r6, #0]
 8006e20:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
 8006e24:	6114      	str	r4, [r2, #16]
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8006e26:	88b4      	ldrh	r4, [r6, #4]
 8006e28:	61d4      	str	r4, [r2, #28]
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8006e2a:	6874      	ldr	r4, [r6, #4]
 8006e2c:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 8006e30:	60d4      	str	r4, [r2, #12]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8006e32:	6875      	ldr	r5, [r6, #4]
 8006e34:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
 8006e38:	6155      	str	r5, [r2, #20]
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8006e3a:	6875      	ldr	r5, [r6, #4]
 8006e3c:	f405 1500 	and.w	r5, r5, #2097152	; 0x200000
 8006e40:	6195      	str	r5, [r2, #24]
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8006e42:	79f5      	ldrb	r5, [r6, #7]
 8006e44:	f005 057f 	and.w	r5, r5, #127	; 0x7f
 8006e48:	6215      	str	r5, [r2, #32]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8006e4a:	6875      	ldr	r5, [r6, #4]
 8006e4c:	0fed      	lsrs	r5, r5, #31
 8006e4e:	6255      	str	r5, [r2, #36]	; 0x24
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8006e50:	0c24      	lsrs	r4, r4, #16
 8006e52:	4d14      	ldr	r5, [pc, #80]	; (8006ea4 <HAL_FDCAN_GetRxMessage+0x10c>)
 8006e54:	5d2c      	ldrb	r4, [r5, r4]
 8006e56:	b18c      	cbz	r4, 8006e7c <HAL_FDCAN_GetRxMessage+0xe4>
 8006e58:	1df5      	adds	r5, r6, #7
 8006e5a:	3b01      	subs	r3, #1
 8006e5c:	4c11      	ldr	r4, [pc, #68]	; (8006ea4 <HAL_FDCAN_GetRxMessage+0x10c>)
      pRxData[ByteCounter] = pData[ByteCounter];
 8006e5e:	46ac      	mov	ip, r5
 8006e60:	f815 ef01 	ldrb.w	lr, [r5, #1]!
 8006e64:	f803 ef01 	strb.w	lr, [r3, #1]!
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8006e68:	f8b2 e00e 	ldrh.w	lr, [r2, #14]
 8006e6c:	f814 e00e 	ldrb.w	lr, [r4, lr]
 8006e70:	f1ac 0c06 	sub.w	ip, ip, #6
 8006e74:	ebac 0c06 	sub.w	ip, ip, r6
 8006e78:	45e6      	cmp	lr, ip
 8006e7a:	d8f0      	bhi.n	8006e5e <HAL_FDCAN_GetRxMessage+0xc6>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006e7c:	2940      	cmp	r1, #64	; 0x40
      hfdcan->Instance->RXF0A = GetIndex;
 8006e7e:	6803      	ldr	r3, [r0, #0]
 8006e80:	bf0c      	ite	eq
 8006e82:	f8c3 7094 	streq.w	r7, [r3, #148]	; 0x94
      hfdcan->Instance->RXF1A = GetIndex;
 8006e86:	f8c3 709c 	strne.w	r7, [r3, #156]	; 0x9c
    return HAL_OK;
 8006e8a:	2000      	movs	r0, #0
}
 8006e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8006e8e:	6834      	ldr	r4, [r6, #0]
 8006e90:	f024 4460 	bic.w	r4, r4, #3758096384	; 0xe0000000
 8006e94:	e7be      	b.n	8006e14 <HAL_FDCAN_GetRxMessage+0x7c>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006e96:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006e98:	f043 0308 	orr.w	r3, r3, #8
 8006e9c:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8006e9e:	2001      	movs	r0, #1
}
 8006ea0:	4770      	bx	lr
 8006ea2:	bf00      	nop
 8006ea4:	0800f79c 	.word	0x0800f79c

08006ea8 <HAL_FDCAN_ActivateNotification>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006ea8:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006eac:	3b01      	subs	r3, #1
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d905      	bls.n	8006ec0 <HAL_FDCAN_ActivateNotification+0x18>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006eb4:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006eb6:	f043 0302 	orr.w	r3, r3, #2
 8006eba:	6603      	str	r3, [r0, #96]	; 0x60
    return HAL_ERROR;
 8006ebc:	2001      	movs	r0, #1
}
 8006ebe:	4770      	bx	lr
{
 8006ec0:	b470      	push	{r4, r5, r6}
    ITs_lines_selection = hfdcan->Instance->ILS;
 8006ec2:	6804      	ldr	r4, [r0, #0]
 8006ec4:	6da3      	ldr	r3, [r4, #88]	; 0x58
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8006ec6:	f011 0607 	ands.w	r6, r1, #7
 8006eca:	d002      	beq.n	8006ed2 <HAL_FDCAN_ActivateNotification+0x2a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8006ecc:	f013 0f01 	tst.w	r3, #1
 8006ed0:	d023      	beq.n	8006f1a <HAL_FDCAN_ActivateNotification+0x72>
 8006ed2:	f011 0f38 	tst.w	r1, #56	; 0x38
 8006ed6:	d002      	beq.n	8006ede <HAL_FDCAN_ActivateNotification+0x36>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8006ed8:	f013 0f02 	tst.w	r3, #2
 8006edc:	d01d      	beq.n	8006f1a <HAL_FDCAN_ActivateNotification+0x72>
 8006ede:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 8006ee2:	d002      	beq.n	8006eea <HAL_FDCAN_ActivateNotification+0x42>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8006ee4:	f013 0f04 	tst.w	r3, #4
 8006ee8:	d017      	beq.n	8006f1a <HAL_FDCAN_ActivateNotification+0x72>
 8006eea:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 8006eee:	d002      	beq.n	8006ef6 <HAL_FDCAN_ActivateNotification+0x4e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8006ef0:	f013 0f08 	tst.w	r3, #8
 8006ef4:	d011      	beq.n	8006f1a <HAL_FDCAN_ActivateNotification+0x72>
 8006ef6:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 8006efa:	d002      	beq.n	8006f02 <HAL_FDCAN_ActivateNotification+0x5a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8006efc:	f013 0f10 	tst.w	r3, #16
 8006f00:	d00b      	beq.n	8006f1a <HAL_FDCAN_ActivateNotification+0x72>
 8006f02:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 8006f06:	d002      	beq.n	8006f0e <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8006f08:	f013 0f20 	tst.w	r3, #32
 8006f0c:	d005      	beq.n	8006f1a <HAL_FDCAN_ActivateNotification+0x72>
 8006f0e:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 8006f12:	d006      	beq.n	8006f22 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8006f14:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006f18:	d103      	bne.n	8006f22 <HAL_FDCAN_ActivateNotification+0x7a>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8006f1a:	6de5      	ldr	r5, [r4, #92]	; 0x5c
 8006f1c:	f045 0501 	orr.w	r5, r5, #1
 8006f20:	65e5      	str	r5, [r4, #92]	; 0x5c
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8006f22:	b116      	cbz	r6, 8006f2a <HAL_FDCAN_ActivateNotification+0x82>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8006f24:	f013 0f01 	tst.w	r3, #1
 8006f28:	d123      	bne.n	8006f72 <HAL_FDCAN_ActivateNotification+0xca>
 8006f2a:	f011 0f38 	tst.w	r1, #56	; 0x38
 8006f2e:	d002      	beq.n	8006f36 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8006f30:	f013 0f02 	tst.w	r3, #2
 8006f34:	d11d      	bne.n	8006f72 <HAL_FDCAN_ActivateNotification+0xca>
 8006f36:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 8006f3a:	d002      	beq.n	8006f42 <HAL_FDCAN_ActivateNotification+0x9a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8006f3c:	f013 0f04 	tst.w	r3, #4
 8006f40:	d117      	bne.n	8006f72 <HAL_FDCAN_ActivateNotification+0xca>
 8006f42:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 8006f46:	d002      	beq.n	8006f4e <HAL_FDCAN_ActivateNotification+0xa6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8006f48:	f013 0f08 	tst.w	r3, #8
 8006f4c:	d111      	bne.n	8006f72 <HAL_FDCAN_ActivateNotification+0xca>
 8006f4e:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 8006f52:	d002      	beq.n	8006f5a <HAL_FDCAN_ActivateNotification+0xb2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8006f54:	f013 0f10 	tst.w	r3, #16
 8006f58:	d10b      	bne.n	8006f72 <HAL_FDCAN_ActivateNotification+0xca>
 8006f5a:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 8006f5e:	d002      	beq.n	8006f66 <HAL_FDCAN_ActivateNotification+0xbe>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8006f60:	f013 0f20 	tst.w	r3, #32
 8006f64:	d105      	bne.n	8006f72 <HAL_FDCAN_ActivateNotification+0xca>
 8006f66:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 8006f6a:	d007      	beq.n	8006f7c <HAL_FDCAN_ActivateNotification+0xd4>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8006f6c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006f70:	d004      	beq.n	8006f7c <HAL_FDCAN_ActivateNotification+0xd4>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8006f72:	6804      	ldr	r4, [r0, #0]
 8006f74:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006f76:	f043 0302 	orr.w	r3, r3, #2
 8006f7a:	65e3      	str	r3, [r4, #92]	; 0x5c
    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8006f7c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006f80:	d005      	beq.n	8006f8e <HAL_FDCAN_ActivateNotification+0xe6>
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8006f82:	6804      	ldr	r4, [r0, #0]
 8006f84:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8006f8e:	f411 7f80 	tst.w	r1, #256	; 0x100
 8006f92:	d005      	beq.n	8006fa0 <HAL_FDCAN_ActivateNotification+0xf8>
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8006f94:	6804      	ldr	r4, [r0, #0]
 8006f96:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8006fa0:	6802      	ldr	r2, [r0, #0]
 8006fa2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006fa4:	430b      	orrs	r3, r1
 8006fa6:	6553      	str	r3, [r2, #84]	; 0x54
    return HAL_OK;
 8006fa8:	2000      	movs	r0, #0
}
 8006faa:	bc70      	pop	{r4, r5, r6}
 8006fac:	4770      	bx	lr

08006fae <HAL_FDCAN_TxEventFifoCallback>:
}
 8006fae:	4770      	bx	lr

08006fb0 <HAL_FDCAN_RxFifo1Callback>:
}
 8006fb0:	4770      	bx	lr

08006fb2 <HAL_FDCAN_TxFifoEmptyCallback>:
}
 8006fb2:	4770      	bx	lr

08006fb4 <HAL_FDCAN_TxBufferCompleteCallback>:
}
 8006fb4:	4770      	bx	lr

08006fb6 <HAL_FDCAN_TxBufferAbortCallback>:
}
 8006fb6:	4770      	bx	lr

08006fb8 <HAL_FDCAN_TimestampWraparoundCallback>:
}
 8006fb8:	4770      	bx	lr

08006fba <HAL_FDCAN_TimeoutOccurredCallback>:
}
 8006fba:	4770      	bx	lr

08006fbc <HAL_FDCAN_HighPriorityMessageCallback>:
}
 8006fbc:	4770      	bx	lr

08006fbe <HAL_FDCAN_ErrorCallback>:
}
 8006fbe:	4770      	bx	lr

08006fc0 <HAL_FDCAN_ErrorStatusCallback>:
}
 8006fc0:	4770      	bx	lr

08006fc2 <HAL_FDCAN_IRQHandler>:
{
 8006fc2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fc6:	4604      	mov	r4, r0
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8006fc8:	6803      	ldr	r3, [r0, #0]
 8006fca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006fcc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006fce:	ea02 0901 	and.w	r9, r2, r1
 8006fd2:	f409 59e0 	and.w	r9, r9, #7168	; 0x1c00
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8006fd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006fd8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006fda:	ea02 0801 	and.w	r8, r2, r1
 8006fde:	f008 0807 	and.w	r8, r8, #7
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8006fe2:	6d1f      	ldr	r7, [r3, #80]	; 0x50
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006fe4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006fe6:	4017      	ands	r7, r2
 8006fe8:	f007 0738 	and.w	r7, r7, #56	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8006fec:	6d1d      	ldr	r5, [r3, #80]	; 0x50
  Errors &= hfdcan->Instance->IE;
 8006fee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ff0:	4015      	ands	r5, r2
 8006ff2:	f405 0571 	and.w	r5, r5, #15794176	; 0xf10000
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8006ff6:	6d1e      	ldr	r6, [r3, #80]	; 0x50
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006ff8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ffa:	4016      	ands	r6, r2
 8006ffc:	f406 2660 	and.w	r6, r6, #917504	; 0xe0000
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8007000:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007002:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007006:	d003      	beq.n	8007010 <HAL_FDCAN_IRQHandler+0x4e>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8007008:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800700a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800700e:	d151      	bne.n	80070b4 <HAL_FDCAN_IRQHandler+0xf2>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8007010:	6823      	ldr	r3, [r4, #0]
 8007012:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007014:	f412 7f80 	tst.w	r2, #256	; 0x100
 8007018:	d003      	beq.n	8007022 <HAL_FDCAN_IRQHandler+0x60>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800701a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800701c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8007020:	d14d      	bne.n	80070be <HAL_FDCAN_IRQHandler+0xfc>
  if (TxEventFifoITs != 0U)
 8007022:	f1b9 0f00 	cmp.w	r9, #0
 8007026:	d156      	bne.n	80070d6 <HAL_FDCAN_IRQHandler+0x114>
  if (RxFifo0ITs != 0U)
 8007028:	f1b8 0f00 	cmp.w	r8, #0
 800702c:	d15b      	bne.n	80070e6 <HAL_FDCAN_IRQHandler+0x124>
  if (RxFifo1ITs != 0U)
 800702e:	2f00      	cmp	r7, #0
 8007030:	d161      	bne.n	80070f6 <HAL_FDCAN_IRQHandler+0x134>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8007032:	6823      	ldr	r3, [r4, #0]
 8007034:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007036:	f412 7f00 	tst.w	r2, #512	; 0x200
 800703a:	d003      	beq.n	8007044 <HAL_FDCAN_IRQHandler+0x82>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 800703c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800703e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8007042:	d15f      	bne.n	8007104 <HAL_FDCAN_IRQHandler+0x142>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8007044:	6823      	ldr	r3, [r4, #0]
 8007046:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007048:	f012 0f80 	tst.w	r2, #128	; 0x80
 800704c:	d003      	beq.n	8007056 <HAL_FDCAN_IRQHandler+0x94>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 800704e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007050:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007054:	d15d      	bne.n	8007112 <HAL_FDCAN_IRQHandler+0x150>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8007056:	6823      	ldr	r3, [r4, #0]
 8007058:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800705a:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 800705e:	d003      	beq.n	8007068 <HAL_FDCAN_IRQHandler+0xa6>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8007060:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007062:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8007066:	d15f      	bne.n	8007128 <HAL_FDCAN_IRQHandler+0x166>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8007068:	6823      	ldr	r3, [r4, #0]
 800706a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800706c:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8007070:	d003      	beq.n	800707a <HAL_FDCAN_IRQHandler+0xb8>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8007072:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007074:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8007078:	d15d      	bne.n	8007136 <HAL_FDCAN_IRQHandler+0x174>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 800707a:	6823      	ldr	r3, [r4, #0]
 800707c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800707e:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8007082:	d00a      	beq.n	800709a <HAL_FDCAN_IRQHandler+0xd8>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8007084:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007086:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800708a:	d006      	beq.n	800709a <HAL_FDCAN_IRQHandler+0xd8>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800708c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007090:	651a      	str	r2, [r3, #80]	; 0x50
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8007092:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8007094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007098:	6623      	str	r3, [r4, #96]	; 0x60
  if (ErrorStatusITs != 0U)
 800709a:	2e00      	cmp	r6, #0
 800709c:	d152      	bne.n	8007144 <HAL_FDCAN_IRQHandler+0x182>
  if (Errors != 0U)
 800709e:	b125      	cbz	r5, 80070aa <HAL_FDCAN_IRQHandler+0xe8>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80070a0:	6823      	ldr	r3, [r4, #0]
 80070a2:	651d      	str	r5, [r3, #80]	; 0x50
    hfdcan->ErrorCode |= Errors;
 80070a4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80070a6:	432b      	orrs	r3, r5
 80070a8:	6623      	str	r3, [r4, #96]	; 0x60
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80070aa:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d150      	bne.n	8007152 <HAL_FDCAN_IRQHandler+0x190>
}
 80070b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80070b4:	2240      	movs	r2, #64	; 0x40
 80070b6:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80070b8:	f7ff ff80 	bl	8006fbc <HAL_FDCAN_HighPriorityMessageCallback>
 80070bc:	e7a8      	b.n	8007010 <HAL_FDCAN_IRQHandler+0x4e>
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80070be:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80070c2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80070c6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80070ca:	6518      	str	r0, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80070cc:	4011      	ands	r1, r2
 80070ce:	4620      	mov	r0, r4
 80070d0:	f7ff ff71 	bl	8006fb6 <HAL_FDCAN_TxBufferAbortCallback>
 80070d4:	e7a5      	b.n	8007022 <HAL_FDCAN_IRQHandler+0x60>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80070d6:	6823      	ldr	r3, [r4, #0]
 80070d8:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80070dc:	4649      	mov	r1, r9
 80070de:	4620      	mov	r0, r4
 80070e0:	f7ff ff65 	bl	8006fae <HAL_FDCAN_TxEventFifoCallback>
 80070e4:	e7a0      	b.n	8007028 <HAL_FDCAN_IRQHandler+0x66>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80070e6:	6823      	ldr	r3, [r4, #0]
 80070e8:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80070ec:	4641      	mov	r1, r8
 80070ee:	4620      	mov	r0, r4
 80070f0:	f7fd f9e0 	bl	80044b4 <HAL_FDCAN_RxFifo0Callback>
 80070f4:	e79b      	b.n	800702e <HAL_FDCAN_IRQHandler+0x6c>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80070f6:	6823      	ldr	r3, [r4, #0]
 80070f8:	651f      	str	r7, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80070fa:	4639      	mov	r1, r7
 80070fc:	4620      	mov	r0, r4
 80070fe:	f7ff ff57 	bl	8006fb0 <HAL_FDCAN_RxFifo1Callback>
 8007102:	e796      	b.n	8007032 <HAL_FDCAN_IRQHandler+0x70>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8007104:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007108:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800710a:	4620      	mov	r0, r4
 800710c:	f7ff ff51 	bl	8006fb2 <HAL_FDCAN_TxFifoEmptyCallback>
 8007110:	e798      	b.n	8007044 <HAL_FDCAN_IRQHandler+0x82>
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8007112:	f8d3 10d4 	ldr.w	r1, [r3, #212]	; 0xd4
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8007116:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800711a:	2080      	movs	r0, #128	; 0x80
 800711c:	6518      	str	r0, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800711e:	4011      	ands	r1, r2
 8007120:	4620      	mov	r0, r4
 8007122:	f7ff ff47 	bl	8006fb4 <HAL_FDCAN_TxBufferCompleteCallback>
 8007126:	e796      	b.n	8007056 <HAL_FDCAN_IRQHandler+0x94>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8007128:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800712c:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800712e:	4620      	mov	r0, r4
 8007130:	f7ff ff42 	bl	8006fb8 <HAL_FDCAN_TimestampWraparoundCallback>
 8007134:	e798      	b.n	8007068 <HAL_FDCAN_IRQHandler+0xa6>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8007136:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800713a:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800713c:	4620      	mov	r0, r4
 800713e:	f7ff ff3c 	bl	8006fba <HAL_FDCAN_TimeoutOccurredCallback>
 8007142:	e79a      	b.n	800707a <HAL_FDCAN_IRQHandler+0xb8>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8007144:	6823      	ldr	r3, [r4, #0]
 8007146:	651e      	str	r6, [r3, #80]	; 0x50
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8007148:	4631      	mov	r1, r6
 800714a:	4620      	mov	r0, r4
 800714c:	f7ff ff38 	bl	8006fc0 <HAL_FDCAN_ErrorStatusCallback>
 8007150:	e7a5      	b.n	800709e <HAL_FDCAN_IRQHandler+0xdc>
    HAL_FDCAN_ErrorCallback(hfdcan);
 8007152:	4620      	mov	r0, r4
 8007154:	f7ff ff33 	bl	8006fbe <HAL_FDCAN_ErrorCallback>
}
 8007158:	e7aa      	b.n	80070b0 <HAL_FDCAN_IRQHandler+0xee>
	...

0800715c <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 800715c:	b510      	push	{r4, lr}
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
  uint32_t *dest_addr = (uint32_t *)Address;
  uint32_t *src_addr = (uint32_t *)DataAddress;
 800715e:	460b      	mov	r3, r1

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8007160:	4c09      	ldr	r4, [pc, #36]	; (8007188 <FLASH_Program_Fast+0x2c>)
 8007162:	6962      	ldr	r2, [r4, #20]
 8007164:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007168:	6162      	str	r2, [r4, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800716a:	f3ef 8e10 	mrs	lr, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800716e:	b672      	cpsid	i
 8007170:	f501 7c80 	add.w	ip, r1, #256	; 0x100
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8007174:	1a41      	subs	r1, r0, r1
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	505a      	str	r2, [r3, r1]
    dest_addr++;
    src_addr++;
 800717a:	3304      	adds	r3, #4
    row_index--;
  }
  while (row_index != 0U);
 800717c:	4563      	cmp	r3, ip
 800717e:	d1fa      	bne.n	8007176 <FLASH_Program_Fast+0x1a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007180:	f38e 8810 	msr	PRIMASK, lr

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8007184:	bd10      	pop	{r4, pc}
 8007186:	bf00      	nop
 8007188:	40022000 	.word	0x40022000

0800718c <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800718c:	4b07      	ldr	r3, [pc, #28]	; (80071ac <HAL_FLASH_Unlock+0x20>)
 800718e:	695b      	ldr	r3, [r3, #20]
 8007190:	2b00      	cmp	r3, #0
 8007192:	db01      	blt.n	8007198 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8007194:	2000      	movs	r0, #0
}
 8007196:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007198:	4b04      	ldr	r3, [pc, #16]	; (80071ac <HAL_FLASH_Unlock+0x20>)
 800719a:	4a05      	ldr	r2, [pc, #20]	; (80071b0 <HAL_FLASH_Unlock+0x24>)
 800719c:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800719e:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 80071a2:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80071a4:	6958      	ldr	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 80071a6:	0fc0      	lsrs	r0, r0, #31
 80071a8:	4770      	bx	lr
 80071aa:	bf00      	nop
 80071ac:	40022000 	.word	0x40022000
 80071b0:	45670123 	.word	0x45670123

080071b4 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80071b4:	4b04      	ldr	r3, [pc, #16]	; (80071c8 <HAL_FLASH_Lock+0x14>)
 80071b6:	695a      	ldr	r2, [r3, #20]
 80071b8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80071bc:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80071be:	6958      	ldr	r0, [r3, #20]
}
 80071c0:	43c0      	mvns	r0, r0
 80071c2:	0fc0      	lsrs	r0, r0, #31
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	40022000 	.word	0x40022000

080071cc <FLASH_WaitForLastOperation>:
{
 80071cc:	b570      	push	{r4, r5, r6, lr}
 80071ce:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 80071d0:	f7fe fa50 	bl	8005674 <HAL_GetTick>
 80071d4:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80071d6:	4e13      	ldr	r6, [pc, #76]	; (8007224 <FLASH_WaitForLastOperation+0x58>)
 80071d8:	6933      	ldr	r3, [r6, #16]
 80071da:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80071de:	d006      	beq.n	80071ee <FLASH_WaitForLastOperation+0x22>
    if ((HAL_GetTick() - tickstart) > Timeout)
 80071e0:	f7fe fa48 	bl	8005674 <HAL_GetTick>
 80071e4:	1b00      	subs	r0, r0, r4
 80071e6:	42a8      	cmp	r0, r5
 80071e8:	d9f6      	bls.n	80071d8 <FLASH_WaitForLastOperation+0xc>
      return HAL_TIMEOUT;
 80071ea:	2003      	movs	r0, #3
}
 80071ec:	bd70      	pop	{r4, r5, r6, pc}
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80071ee:	4b0d      	ldr	r3, [pc, #52]	; (8007224 <FLASH_WaitForLastOperation+0x58>)
 80071f0:	691b      	ldr	r3, [r3, #16]
 80071f2:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  if (error != 0u)
 80071f6:	4013      	ands	r3, r2
 80071f8:	d109      	bne.n	800720e <FLASH_WaitForLastOperation+0x42>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80071fa:	4b0a      	ldr	r3, [pc, #40]	; (8007224 <FLASH_WaitForLastOperation+0x58>)
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	f013 0f01 	tst.w	r3, #1
 8007202:	d00c      	beq.n	800721e <FLASH_WaitForLastOperation+0x52>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007204:	4b07      	ldr	r3, [pc, #28]	; (8007224 <FLASH_WaitForLastOperation+0x58>)
 8007206:	2201      	movs	r2, #1
 8007208:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 800720a:	2000      	movs	r0, #0
 800720c:	e7ee      	b.n	80071ec <FLASH_WaitForLastOperation+0x20>
    pFlash.ErrorCode |= error;
 800720e:	4906      	ldr	r1, [pc, #24]	; (8007228 <FLASH_WaitForLastOperation+0x5c>)
 8007210:	684a      	ldr	r2, [r1, #4]
 8007212:	431a      	orrs	r2, r3
 8007214:	604a      	str	r2, [r1, #4]
    __HAL_FLASH_CLEAR_FLAG(error);
 8007216:	4a03      	ldr	r2, [pc, #12]	; (8007224 <FLASH_WaitForLastOperation+0x58>)
 8007218:	6113      	str	r3, [r2, #16]
    return HAL_ERROR;
 800721a:	2001      	movs	r0, #1
 800721c:	e7e6      	b.n	80071ec <FLASH_WaitForLastOperation+0x20>
  return HAL_OK;
 800721e:	2000      	movs	r0, #0
 8007220:	e7e4      	b.n	80071ec <FLASH_WaitForLastOperation+0x20>
 8007222:	bf00      	nop
 8007224:	40022000 	.word	0x40022000
 8007228:	2000055c 	.word	0x2000055c

0800722c <HAL_FLASH_Program>:
{
 800722c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800722e:	4616      	mov	r6, r2
  __HAL_LOCK(&pFlash);
 8007230:	4a21      	ldr	r2, [pc, #132]	; (80072b8 <HAL_FLASH_Program+0x8c>)
 8007232:	7812      	ldrb	r2, [r2, #0]
 8007234:	2a01      	cmp	r2, #1
 8007236:	d03c      	beq.n	80072b2 <HAL_FLASH_Program+0x86>
 8007238:	4604      	mov	r4, r0
 800723a:	460d      	mov	r5, r1
 800723c:	461f      	mov	r7, r3
 800723e:	4b1e      	ldr	r3, [pc, #120]	; (80072b8 <HAL_FLASH_Program+0x8c>)
 8007240:	2201      	movs	r2, #1
 8007242:	701a      	strb	r2, [r3, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007244:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007248:	f7ff ffc0 	bl	80071cc <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 800724c:	b9e8      	cbnz	r0, 800728a <HAL_FLASH_Program+0x5e>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800724e:	4b1a      	ldr	r3, [pc, #104]	; (80072b8 <HAL_FLASH_Program+0x8c>)
 8007250:	6058      	str	r0, [r3, #4]
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8007252:	b13c      	cbz	r4, 8007264 <HAL_FLASH_Program+0x38>
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8007254:	1e63      	subs	r3, r4, #1
 8007256:	2b01      	cmp	r3, #1
 8007258:	d91b      	bls.n	8007292 <HAL_FLASH_Program+0x66>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800725a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800725e:	f7ff ffb5 	bl	80071cc <FLASH_WaitForLastOperation>
    if (prog_bit != 0U)
 8007262:	e012      	b.n	800728a <HAL_FLASH_Program+0x5e>
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8007264:	4a15      	ldr	r2, [pc, #84]	; (80072bc <HAL_FLASH_Program+0x90>)
 8007266:	6953      	ldr	r3, [r2, #20]
 8007268:	f043 0301 	orr.w	r3, r3, #1
 800726c:	6153      	str	r3, [r2, #20]
  *(uint32_t *)Address = (uint32_t)Data;
 800726e:	602e      	str	r6, [r5, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8007270:	f3bf 8f6f 	isb	sy
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8007274:	606f      	str	r7, [r5, #4]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007276:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800727a:	f7ff ffa7 	bl	80071cc <FLASH_WaitForLastOperation>
      prog_bit = FLASH_CR_PG;
 800727e:	2401      	movs	r4, #1
      CLEAR_BIT(FLASH->CR, prog_bit);
 8007280:	4a0e      	ldr	r2, [pc, #56]	; (80072bc <HAL_FLASH_Program+0x90>)
 8007282:	6953      	ldr	r3, [r2, #20]
 8007284:	ea23 0304 	bic.w	r3, r3, r4
 8007288:	6153      	str	r3, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 800728a:	4b0b      	ldr	r3, [pc, #44]	; (80072b8 <HAL_FLASH_Program+0x8c>)
 800728c:	2200      	movs	r2, #0
 800728e:	701a      	strb	r2, [r3, #0]
}
 8007290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8007292:	4631      	mov	r1, r6
 8007294:	4628      	mov	r0, r5
 8007296:	f7ff ff61 	bl	800715c <FLASH_Program_Fast>
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800729a:	2c02      	cmp	r4, #2
 800729c:	bf14      	ite	ne
 800729e:	2400      	movne	r4, #0
 80072a0:	2401      	moveq	r4, #1
 80072a2:	04a4      	lsls	r4, r4, #18
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80072a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80072a8:	f7ff ff90 	bl	80071cc <FLASH_WaitForLastOperation>
    if (prog_bit != 0U)
 80072ac:	2c00      	cmp	r4, #0
 80072ae:	d1e7      	bne.n	8007280 <HAL_FLASH_Program+0x54>
 80072b0:	e7eb      	b.n	800728a <HAL_FLASH_Program+0x5e>
  __HAL_LOCK(&pFlash);
 80072b2:	2002      	movs	r0, #2
 80072b4:	e7ec      	b.n	8007290 <HAL_FLASH_Program+0x64>
 80072b6:	bf00      	nop
 80072b8:	2000055c 	.word	0x2000055c
 80072bc:	40022000 	.word	0x40022000

080072c0 <FLASH_MassErase>:
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 80072c0:	f010 0f01 	tst.w	r0, #1
 80072c4:	d004      	beq.n	80072d0 <FLASH_MassErase+0x10>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80072c6:	4a05      	ldr	r2, [pc, #20]	; (80072dc <FLASH_MassErase+0x1c>)
 80072c8:	6953      	ldr	r3, [r2, #20]
 80072ca:	f043 0304 	orr.w	r3, r3, #4
 80072ce:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80072d0:	4a02      	ldr	r2, [pc, #8]	; (80072dc <FLASH_MassErase+0x1c>)
 80072d2:	6953      	ldr	r3, [r2, #20]
 80072d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072d8:	6153      	str	r3, [r2, #20]
}
 80072da:	4770      	bx	lr
 80072dc:	40022000 	.word	0x40022000

080072e0 <FLASH_PageErase>:
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80072e0:	4b08      	ldr	r3, [pc, #32]	; (8007304 <FLASH_PageErase+0x24>)
 80072e2:	695a      	ldr	r2, [r3, #20]
 80072e4:	00c0      	lsls	r0, r0, #3
 80072e6:	f400 60ff 	and.w	r0, r0, #2040	; 0x7f8
 80072ea:	f422 72fc 	bic.w	r2, r2, #504	; 0x1f8
 80072ee:	4310      	orrs	r0, r2
 80072f0:	6158      	str	r0, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80072f2:	695a      	ldr	r2, [r3, #20]
 80072f4:	f042 0202 	orr.w	r2, r2, #2
 80072f8:	615a      	str	r2, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80072fa:	695a      	ldr	r2, [r3, #20]
 80072fc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007300:	615a      	str	r2, [r3, #20]
}
 8007302:	4770      	bx	lr
 8007304:	40022000 	.word	0x40022000

08007308 <FLASH_FlushCaches>:
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8007308:	4b17      	ldr	r3, [pc, #92]	; (8007368 <FLASH_FlushCaches+0x60>)
 800730a:	7f1a      	ldrb	r2, [r3, #28]
 800730c:	b2d3      	uxtb	r3, r2

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800730e:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 8007312:	2a01      	cmp	r2, #1
 8007314:	d007      	beq.n	8007326 <FLASH_FlushCaches+0x1e>
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8007316:	3b02      	subs	r3, #2
 8007318:	b2db      	uxtb	r3, r3
 800731a:	2b01      	cmp	r3, #1
 800731c:	d915      	bls.n	800734a <FLASH_FlushCaches+0x42>
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800731e:	4b12      	ldr	r3, [pc, #72]	; (8007368 <FLASH_FlushCaches+0x60>)
 8007320:	2200      	movs	r2, #0
 8007322:	771a      	strb	r2, [r3, #28]
}
 8007324:	4770      	bx	lr
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8007326:	4a11      	ldr	r2, [pc, #68]	; (800736c <FLASH_FlushCaches+0x64>)
 8007328:	6811      	ldr	r1, [r2, #0]
 800732a:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 800732e:	6011      	str	r1, [r2, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8007330:	6811      	ldr	r1, [r2, #0]
 8007332:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8007336:	6011      	str	r1, [r2, #0]
 8007338:	6811      	ldr	r1, [r2, #0]
 800733a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 800733e:	6011      	str	r1, [r2, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007340:	6811      	ldr	r1, [r2, #0]
 8007342:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8007346:	6011      	str	r1, [r2, #0]
 8007348:	e7e5      	b.n	8007316 <FLASH_FlushCaches+0xe>
    __HAL_FLASH_DATA_CACHE_RESET();
 800734a:	4b08      	ldr	r3, [pc, #32]	; (800736c <FLASH_FlushCaches+0x64>)
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007352:	601a      	str	r2, [r3, #0]
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800735a:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007362:	601a      	str	r2, [r3, #0]
 8007364:	e7db      	b.n	800731e <FLASH_FlushCaches+0x16>
 8007366:	bf00      	nop
 8007368:	2000055c 	.word	0x2000055c
 800736c:	40022000 	.word	0x40022000

08007370 <HAL_FLASHEx_Erase>:
{
 8007370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 8007374:	4b3b      	ldr	r3, [pc, #236]	; (8007464 <HAL_FLASHEx_Erase+0xf4>)
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	2b01      	cmp	r3, #1
 800737a:	d06f      	beq.n	800745c <HAL_FLASHEx_Erase+0xec>
 800737c:	4604      	mov	r4, r0
 800737e:	460f      	mov	r7, r1
 8007380:	4b38      	ldr	r3, [pc, #224]	; (8007464 <HAL_FLASHEx_Erase+0xf4>)
 8007382:	2201      	movs	r2, #1
 8007384:	701a      	strb	r2, [r3, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007386:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800738a:	f7ff ff1f 	bl	80071cc <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 800738e:	4681      	mov	r9, r0
 8007390:	2800      	cmp	r0, #0
 8007392:	d15d      	bne.n	8007450 <HAL_FLASHEx_Erase+0xe0>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007394:	4b33      	ldr	r3, [pc, #204]	; (8007464 <HAL_FLASHEx_Erase+0xf4>)
 8007396:	2200      	movs	r2, #0
 8007398:	605a      	str	r2, [r3, #4]
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800739a:	4b33      	ldr	r3, [pc, #204]	; (8007468 <HAL_FLASHEx_Erase+0xf8>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f413 7f00 	tst.w	r3, #512	; 0x200
 80073a2:	d032      	beq.n	800740a <HAL_FLASHEx_Erase+0x9a>
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80073a4:	4b30      	ldr	r3, [pc, #192]	; (8007468 <HAL_FLASHEx_Erase+0xf8>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80073ac:	d029      	beq.n	8007402 <HAL_FLASHEx_Erase+0x92>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80073ae:	4a2e      	ldr	r2, [pc, #184]	; (8007468 <HAL_FLASHEx_Erase+0xf8>)
 80073b0:	6813      	ldr	r3, [r2, #0]
 80073b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80073b6:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80073b8:	4b2a      	ldr	r3, [pc, #168]	; (8007464 <HAL_FLASHEx_Erase+0xf4>)
 80073ba:	2203      	movs	r2, #3
 80073bc:	771a      	strb	r2, [r3, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80073be:	6823      	ldr	r3, [r4, #0]
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d034      	beq.n	800742e <HAL_FLASHEx_Erase+0xbe>
      *PageError = 0xFFFFFFFFU;
 80073c4:	f04f 33ff 	mov.w	r3, #4294967295
 80073c8:	603b      	str	r3, [r7, #0]
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80073ca:	68a5      	ldr	r5, [r4, #8]
 80073cc:	68e3      	ldr	r3, [r4, #12]
 80073ce:	442b      	add	r3, r5
 80073d0:	429d      	cmp	r5, r3
 80073d2:	d23b      	bcs.n	800744c <HAL_FLASHEx_Erase+0xdc>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80073d4:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80073d8:	4e23      	ldr	r6, [pc, #140]	; (8007468 <HAL_FLASHEx_Erase+0xf8>)
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80073da:	6861      	ldr	r1, [r4, #4]
 80073dc:	4628      	mov	r0, r5
 80073de:	f7ff ff7f 	bl	80072e0 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80073e2:	4640      	mov	r0, r8
 80073e4:	f7ff fef2 	bl	80071cc <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80073e8:	6973      	ldr	r3, [r6, #20]
 80073ea:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 80073ee:	6173      	str	r3, [r6, #20]
        if (status != HAL_OK)
 80073f0:	4681      	mov	r9, r0
 80073f2:	bb50      	cbnz	r0, 800744a <HAL_FLASHEx_Erase+0xda>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80073f4:	3501      	adds	r5, #1
 80073f6:	68a3      	ldr	r3, [r4, #8]
 80073f8:	68e2      	ldr	r2, [r4, #12]
 80073fa:	4413      	add	r3, r2
 80073fc:	42ab      	cmp	r3, r5
 80073fe:	d8ec      	bhi.n	80073da <HAL_FLASHEx_Erase+0x6a>
 8007400:	e024      	b.n	800744c <HAL_FLASHEx_Erase+0xdc>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8007402:	4b18      	ldr	r3, [pc, #96]	; (8007464 <HAL_FLASHEx_Erase+0xf4>)
 8007404:	2201      	movs	r2, #1
 8007406:	771a      	strb	r2, [r3, #28]
 8007408:	e7d9      	b.n	80073be <HAL_FLASHEx_Erase+0x4e>
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800740a:	4b17      	ldr	r3, [pc, #92]	; (8007468 <HAL_FLASHEx_Erase+0xf8>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8007412:	d008      	beq.n	8007426 <HAL_FLASHEx_Erase+0xb6>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8007414:	4a14      	ldr	r2, [pc, #80]	; (8007468 <HAL_FLASHEx_Erase+0xf8>)
 8007416:	6813      	ldr	r3, [r2, #0]
 8007418:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800741c:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800741e:	4b11      	ldr	r3, [pc, #68]	; (8007464 <HAL_FLASHEx_Erase+0xf4>)
 8007420:	2202      	movs	r2, #2
 8007422:	771a      	strb	r2, [r3, #28]
 8007424:	e7cb      	b.n	80073be <HAL_FLASHEx_Erase+0x4e>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8007426:	4b0f      	ldr	r3, [pc, #60]	; (8007464 <HAL_FLASHEx_Erase+0xf4>)
 8007428:	2200      	movs	r2, #0
 800742a:	771a      	strb	r2, [r3, #28]
 800742c:	e7c7      	b.n	80073be <HAL_FLASHEx_Erase+0x4e>
      FLASH_MassErase(pEraseInit->Banks);
 800742e:	6860      	ldr	r0, [r4, #4]
 8007430:	f7ff ff46 	bl	80072c0 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007434:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007438:	f7ff fec8 	bl	80071cc <FLASH_WaitForLastOperation>
 800743c:	4681      	mov	r9, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 800743e:	4a0a      	ldr	r2, [pc, #40]	; (8007468 <HAL_FLASHEx_Erase+0xf8>)
 8007440:	6953      	ldr	r3, [r2, #20]
 8007442:	f023 0304 	bic.w	r3, r3, #4
 8007446:	6153      	str	r3, [r2, #20]
 8007448:	e000      	b.n	800744c <HAL_FLASHEx_Erase+0xdc>
          *PageError = page_index;
 800744a:	603d      	str	r5, [r7, #0]
    FLASH_FlushCaches();
 800744c:	f7ff ff5c 	bl	8007308 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8007450:	4b04      	ldr	r3, [pc, #16]	; (8007464 <HAL_FLASHEx_Erase+0xf4>)
 8007452:	2200      	movs	r2, #0
 8007454:	701a      	strb	r2, [r3, #0]
}
 8007456:	4648      	mov	r0, r9
 8007458:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(&pFlash);
 800745c:	f04f 0902 	mov.w	r9, #2
 8007460:	e7f9      	b.n	8007456 <HAL_FLASHEx_Erase+0xe6>
 8007462:	bf00      	nop
 8007464:	2000055c 	.word	0x2000055c
 8007468:	40022000 	.word	0x40022000

0800746c <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 800746c:	b538      	push	{r3, r4, r5, lr}
 800746e:	4604      	mov	r4, r0
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007470:	f7fe f900 	bl	8005674 <HAL_GetTick>
 8007474:	4605      	mov	r5, r0

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8007476:	6822      	ldr	r2, [r4, #0]
 8007478:	6913      	ldr	r3, [r2, #16]
 800747a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800747e:	6113      	str	r3, [r2, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8007480:	6823      	ldr	r3, [r4, #0]
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8007488:	d00b      	beq.n	80074a2 <FMAC_Reset+0x36>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 800748a:	f7fe f8f3 	bl	8005674 <HAL_GetTick>
 800748e:	1b40      	subs	r0, r0, r5
 8007490:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8007494:	d9f4      	bls.n	8007480 <FMAC_Reset+0x14>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8007496:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800749c:	6363      	str	r3, [r4, #52]	; 0x34
      return HAL_ERROR;
 800749e:	2001      	movs	r0, #1
 80074a0:	e001      	b.n	80074a6 <FMAC_Reset+0x3a>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 80074a2:	2000      	movs	r0, #0
 80074a4:	6360      	str	r0, [r4, #52]	; 0x34
  return HAL_OK;
}
 80074a6:	bd38      	pop	{r3, r4, r5, pc}

080074a8 <HAL_FMAC_Init>:
  if (hfmac == NULL)
 80074a8:	b360      	cbz	r0, 8007504 <HAL_FMAC_Init+0x5c>
{
 80074aa:	b510      	push	{r4, lr}
 80074ac:	4604      	mov	r4, r0
  if (hfmac->State == HAL_FMAC_STATE_RESET)
 80074ae:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 80074b2:	b1d3      	cbz	r3, 80074ea <HAL_FMAC_Init+0x42>
  hfmac->FilterParam = 0U;
 80074b4:	2300      	movs	r3, #0
 80074b6:	6063      	str	r3, [r4, #4]
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
  hfmac->pInput = NULL;
 80074b8:	60e3      	str	r3, [r4, #12]
  hfmac->pInputSize = NULL;
 80074ba:	6163      	str	r3, [r4, #20]
  hfmac->InputCurrentSize = 0U;
 80074bc:	8223      	strh	r3, [r4, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 80074be:	2220      	movs	r2, #32
 80074c0:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
  hfmac->pOutput = NULL;
 80074c4:	61a3      	str	r3, [r4, #24]
  hfmac->pOutputSize = NULL;
 80074c6:	6223      	str	r3, [r4, #32]
  hfmac->OutputCurrentSize = 0U;
 80074c8:	83a3      	strh	r3, [r4, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 80074ca:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 80074ce:	4620      	mov	r0, r4
 80074d0:	f7ff ffcc 	bl	800746c <FMAC_Reset>
 80074d4:	2801      	cmp	r0, #1
 80074d6:	d00d      	beq.n	80074f4 <HAL_FMAC_Init+0x4c>
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 80074d8:	2000      	movs	r0, #0
 80074da:	6360      	str	r0, [r4, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 80074dc:	2320      	movs	r3, #32
 80074de:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  __HAL_UNLOCK(hfmac);
 80074e2:	2300      	movs	r3, #0
 80074e4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 80074e8:	bd10      	pop	{r4, pc}
    hfmac->Lock = HAL_UNLOCKED;
 80074ea:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    HAL_FMAC_MspInit(hfmac);
 80074ee:	f7fd fb3d 	bl	8004b6c <HAL_FMAC_MspInit>
 80074f2:	e7df      	b.n	80074b4 <HAL_FMAC_Init+0xc>
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 80074f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80074f6:	f043 0310 	orr.w	r3, r3, #16
 80074fa:	6363      	str	r3, [r4, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 80074fc:	23a0      	movs	r3, #160	; 0xa0
 80074fe:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    status = HAL_ERROR;
 8007502:	e7ee      	b.n	80074e2 <HAL_FMAC_Init+0x3a>
    return HAL_ERROR;
 8007504:	2001      	movs	r0, #1
}
 8007506:	4770      	bx	lr

08007508 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007508:	680b      	ldr	r3, [r1, #0]
 800750a:	2b00      	cmp	r3, #0
 800750c:	f000 80d6 	beq.w	80076bc <HAL_GPIO_Init+0x1b4>
{
 8007510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007514:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007516:	f04f 0c00 	mov.w	ip, #0
  uint32_t position = 0x00U;
 800751a:	4662      	mov	r2, ip
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800751c:	2501      	movs	r5, #1
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800751e:	f04f 0e03 	mov.w	lr, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007522:	4c67      	ldr	r4, [pc, #412]	; (80076c0 <HAL_GPIO_Init+0x1b8>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007524:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80076cc <HAL_GPIO_Init+0x1c4>
 8007528:	e047      	b.n	80075ba <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 800752a:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800752c:	fa0e fa0c 	lsl.w	sl, lr, ip
 8007530:	ea23 0a0a 	bic.w	sl, r3, sl
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007534:	68cb      	ldr	r3, [r1, #12]
 8007536:	fa03 f30c 	lsl.w	r3, r3, ip
 800753a:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->OSPEEDR = temp;
 800753e:	6083      	str	r3, [r0, #8]
        temp = GPIOx->OTYPER;
 8007540:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007542:	ea23 0707 	bic.w	r7, r3, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007546:	684b      	ldr	r3, [r1, #4]
 8007548:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800754c:	4093      	lsls	r3, r2
 800754e:	433b      	orrs	r3, r7
        GPIOx->OTYPER = temp;
 8007550:	6043      	str	r3, [r0, #4]
 8007552:	e03d      	b.n	80075d0 <HAL_GPIO_Init+0xc8>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007554:	2700      	movs	r7, #0
 8007556:	fa07 f70b 	lsl.w	r7, r7, fp
 800755a:	ea47 070a 	orr.w	r7, r7, sl
        SYSCFG->EXTICR[position >> 2U] = temp;
 800755e:	609f      	str	r7, [r3, #8]
        temp = EXTI->RTSR1;
 8007560:	68a3      	ldr	r3, [r4, #8]
        temp &= ~(iocurrent);
 8007562:	ea6f 0709 	mvn.w	r7, r9
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007566:	684e      	ldr	r6, [r1, #4]
 8007568:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~(iocurrent);
 800756c:	bf0c      	ite	eq
 800756e:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 8007570:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->RTSR1 = temp;
 8007574:	60a3      	str	r3, [r4, #8]

        temp = EXTI->FTSR1;
 8007576:	68e3      	ldr	r3, [r4, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007578:	684e      	ldr	r6, [r1, #4]
 800757a:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        temp &= ~(iocurrent);
 800757e:	bf0c      	ite	eq
 8007580:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 8007582:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->FTSR1 = temp;
 8007586:	60e3      	str	r3, [r4, #12]

        temp = EXTI->EMR1;
 8007588:	6863      	ldr	r3, [r4, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800758a:	684e      	ldr	r6, [r1, #4]
 800758c:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        temp &= ~(iocurrent);
 8007590:	bf0c      	ite	eq
 8007592:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 8007594:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->EMR1 = temp;
 8007598:	6063      	str	r3, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800759a:	6823      	ldr	r3, [r4, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800759c:	684e      	ldr	r6, [r1, #4]
 800759e:	f416 3f80 	tst.w	r6, #65536	; 0x10000
        temp &= ~(iocurrent);
 80075a2:	bf0c      	ite	eq
 80075a4:	401f      	andeq	r7, r3
        {
          temp |= iocurrent;
 80075a6:	ea49 0703 	orrne.w	r7, r9, r3
        }
        EXTI->IMR1 = temp;
 80075aa:	6027      	str	r7, [r4, #0]
      }
    }

    position++;
 80075ac:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 80075ae:	680b      	ldr	r3, [r1, #0]
 80075b0:	f10c 0c02 	add.w	ip, ip, #2
 80075b4:	fa33 f702 	lsrs.w	r7, r3, r2
 80075b8:	d07d      	beq.n	80076b6 <HAL_GPIO_Init+0x1ae>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80075ba:	fa05 f702 	lsl.w	r7, r5, r2
    if (iocurrent != 0x00u)
 80075be:	ea17 0903 	ands.w	r9, r7, r3
 80075c2:	d0f3      	beq.n	80075ac <HAL_GPIO_Init+0xa4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80075c4:	684b      	ldr	r3, [r1, #4]
 80075c6:	f003 0303 	and.w	r3, r3, #3
 80075ca:	3b01      	subs	r3, #1
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d9ac      	bls.n	800752a <HAL_GPIO_Init+0x22>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80075d0:	684b      	ldr	r3, [r1, #4]
 80075d2:	f003 0303 	and.w	r3, r3, #3
 80075d6:	2b03      	cmp	r3, #3
 80075d8:	d022      	beq.n	8007620 <HAL_GPIO_Init+0x118>
        temp = GPIOx->PUPDR;
 80075da:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80075dc:	fa0e f30c 	lsl.w	r3, lr, ip
 80075e0:	ea27 0703 	bic.w	r7, r7, r3
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80075e4:	688b      	ldr	r3, [r1, #8]
 80075e6:	fa03 f30c 	lsl.w	r3, r3, ip
 80075ea:	433b      	orrs	r3, r7
        GPIOx->PUPDR = temp;
 80075ec:	60c3      	str	r3, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80075ee:	684b      	ldr	r3, [r1, #4]
 80075f0:	f003 0303 	and.w	r3, r3, #3
 80075f4:	2b02      	cmp	r3, #2
 80075f6:	d113      	bne.n	8007620 <HAL_GPIO_Init+0x118>
        temp = GPIOx->AFR[position >> 3U];
 80075f8:	08d7      	lsrs	r7, r2, #3
 80075fa:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 80075fe:	f8d7 a020 	ldr.w	sl, [r7, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007602:	f002 0b07 	and.w	fp, r2, #7
 8007606:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800760a:	230f      	movs	r3, #15
 800760c:	fa03 f30b 	lsl.w	r3, r3, fp
 8007610:	ea2a 0a03 	bic.w	sl, sl, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007614:	690b      	ldr	r3, [r1, #16]
 8007616:	fa03 f30b 	lsl.w	r3, r3, fp
 800761a:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3U] = temp;
 800761e:	623b      	str	r3, [r7, #32]
      temp = GPIOx->MODER;
 8007620:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007622:	fa0e f30c 	lsl.w	r3, lr, ip
 8007626:	ea27 0703 	bic.w	r7, r7, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800762a:	684b      	ldr	r3, [r1, #4]
 800762c:	f003 0303 	and.w	r3, r3, #3
 8007630:	fa03 f30c 	lsl.w	r3, r3, ip
 8007634:	433b      	orrs	r3, r7
      GPIOx->MODER = temp;
 8007636:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007638:	684b      	ldr	r3, [r1, #4]
 800763a:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 800763e:	d0b5      	beq.n	80075ac <HAL_GPIO_Init+0xa4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007640:	4e20      	ldr	r6, [pc, #128]	; (80076c4 <HAL_GPIO_Init+0x1bc>)
 8007642:	6e33      	ldr	r3, [r6, #96]	; 0x60
 8007644:	f043 0301 	orr.w	r3, r3, #1
 8007648:	6633      	str	r3, [r6, #96]	; 0x60
 800764a:	6e33      	ldr	r3, [r6, #96]	; 0x60
 800764c:	f003 0301 	and.w	r3, r3, #1
 8007650:	9301      	str	r3, [sp, #4]
 8007652:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8007654:	f022 0303 	bic.w	r3, r2, #3
 8007658:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800765c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8007660:	f8d3 a008 	ldr.w	sl, [r3, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007664:	f002 0b03 	and.w	fp, r2, #3
 8007668:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800766c:	270f      	movs	r7, #15
 800766e:	fa07 f70b 	lsl.w	r7, r7, fp
 8007672:	ea2a 0a07 	bic.w	sl, sl, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007676:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 800767a:	f43f af6b 	beq.w	8007554 <HAL_GPIO_Init+0x4c>
 800767e:	4540      	cmp	r0, r8
 8007680:	d011      	beq.n	80076a6 <HAL_GPIO_Init+0x19e>
 8007682:	4e11      	ldr	r6, [pc, #68]	; (80076c8 <HAL_GPIO_Init+0x1c0>)
 8007684:	42b0      	cmp	r0, r6
 8007686:	d010      	beq.n	80076aa <HAL_GPIO_Init+0x1a2>
 8007688:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800768c:	42b0      	cmp	r0, r6
 800768e:	d00e      	beq.n	80076ae <HAL_GPIO_Init+0x1a6>
 8007690:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007694:	42b0      	cmp	r0, r6
 8007696:	d00c      	beq.n	80076b2 <HAL_GPIO_Init+0x1aa>
 8007698:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800769c:	42b0      	cmp	r0, r6
 800769e:	bf0c      	ite	eq
 80076a0:	2705      	moveq	r7, #5
 80076a2:	2706      	movne	r7, #6
 80076a4:	e757      	b.n	8007556 <HAL_GPIO_Init+0x4e>
 80076a6:	462f      	mov	r7, r5
 80076a8:	e755      	b.n	8007556 <HAL_GPIO_Init+0x4e>
 80076aa:	2702      	movs	r7, #2
 80076ac:	e753      	b.n	8007556 <HAL_GPIO_Init+0x4e>
 80076ae:	4677      	mov	r7, lr
 80076b0:	e751      	b.n	8007556 <HAL_GPIO_Init+0x4e>
 80076b2:	2704      	movs	r7, #4
 80076b4:	e74f      	b.n	8007556 <HAL_GPIO_Init+0x4e>
  }
}
 80076b6:	b003      	add	sp, #12
 80076b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076bc:	4770      	bx	lr
 80076be:	bf00      	nop
 80076c0:	40010400 	.word	0x40010400
 80076c4:	40021000 	.word	0x40021000
 80076c8:	48000800 	.word	0x48000800
 80076cc:	48000400 	.word	0x48000400

080076d0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80076d0:	b10a      	cbz	r2, 80076d6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80076d2:	6181      	str	r1, [r0, #24]
 80076d4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80076d6:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80076d8:	4770      	bx	lr

080076da <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80076da:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80076dc:	ea01 0203 	and.w	r2, r1, r3
 80076e0:	ea21 0103 	bic.w	r1, r1, r3
 80076e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80076e8:	6181      	str	r1, [r0, #24]
}
 80076ea:	4770      	bx	lr

080076ec <HAL_PWREx_ControlVoltageScaling>:
{
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80076ec:	2800      	cmp	r0, #0
 80076ee:	d13a      	bne.n	8007766 <HAL_PWREx_ControlVoltageScaling+0x7a>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80076f0:	4b40      	ldr	r3, [pc, #256]	; (80077f4 <HAL_PWREx_ControlVoltageScaling+0x108>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80076f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076fc:	d008      	beq.n	8007710 <HAL_PWREx_ControlVoltageScaling+0x24>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80076fe:	4a3d      	ldr	r2, [pc, #244]	; (80077f4 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8007700:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8007704:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007708:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800770c:	2000      	movs	r0, #0
 800770e:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007710:	4a38      	ldr	r2, [pc, #224]	; (80077f4 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8007712:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8007716:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800771a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800771e:	6813      	ldr	r3, [r2, #0]
 8007720:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007724:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007728:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800772a:	4b33      	ldr	r3, [pc, #204]	; (80077f8 <HAL_PWREx_ControlVoltageScaling+0x10c>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	2132      	movs	r1, #50	; 0x32
 8007730:	fb01 f303 	mul.w	r3, r1, r3
 8007734:	4931      	ldr	r1, [pc, #196]	; (80077fc <HAL_PWREx_ControlVoltageScaling+0x110>)
 8007736:	fba1 1303 	umull	r1, r3, r1, r3
 800773a:	0c9b      	lsrs	r3, r3, #18
 800773c:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800773e:	6952      	ldr	r2, [r2, #20]
 8007740:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8007744:	d007      	beq.n	8007756 <HAL_PWREx_ControlVoltageScaling+0x6a>
 8007746:	492b      	ldr	r1, [pc, #172]	; (80077f4 <HAL_PWREx_ControlVoltageScaling+0x108>)
        wait_loop_index--;
 8007748:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800774a:	694a      	ldr	r2, [r1, #20]
 800774c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8007750:	d001      	beq.n	8007756 <HAL_PWREx_ControlVoltageScaling+0x6a>
 8007752:	2b00      	cmp	r3, #0
 8007754:	d1f8      	bne.n	8007748 <HAL_PWREx_ControlVoltageScaling+0x5c>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007756:	4b27      	ldr	r3, [pc, #156]	; (80077f4 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8007758:	695b      	ldr	r3, [r3, #20]
        return HAL_TIMEOUT;
 800775a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800775e:	bf0c      	ite	eq
 8007760:	2000      	moveq	r0, #0
 8007762:	2003      	movne	r0, #3
 8007764:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007766:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800776a:	d008      	beq.n	800777e <HAL_PWREx_ControlVoltageScaling+0x92>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800776c:	4a21      	ldr	r2, [pc, #132]	; (80077f4 <HAL_PWREx_ControlVoltageScaling+0x108>)
 800776e:	6813      	ldr	r3, [r2, #0]
 8007770:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007774:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007778:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800777a:	2000      	movs	r0, #0
}
 800777c:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800777e:	4b1d      	ldr	r3, [pc, #116]	; (80077f4 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800778a:	d008      	beq.n	800779e <HAL_PWREx_ControlVoltageScaling+0xb2>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800778c:	4a19      	ldr	r2, [pc, #100]	; (80077f4 <HAL_PWREx_ControlVoltageScaling+0x108>)
 800778e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8007792:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007796:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  return HAL_OK;
 800779a:	2000      	movs	r0, #0
 800779c:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800779e:	4a15      	ldr	r2, [pc, #84]	; (80077f4 <HAL_PWREx_ControlVoltageScaling+0x108>)
 80077a0:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80077a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80077ac:	6813      	ldr	r3, [r2, #0]
 80077ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80077b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80077b6:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80077b8:	4b0f      	ldr	r3, [pc, #60]	; (80077f8 <HAL_PWREx_ControlVoltageScaling+0x10c>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	2132      	movs	r1, #50	; 0x32
 80077be:	fb01 f303 	mul.w	r3, r1, r3
 80077c2:	490e      	ldr	r1, [pc, #56]	; (80077fc <HAL_PWREx_ControlVoltageScaling+0x110>)
 80077c4:	fba1 1303 	umull	r1, r3, r1, r3
 80077c8:	0c9b      	lsrs	r3, r3, #18
 80077ca:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80077cc:	6952      	ldr	r2, [r2, #20]
 80077ce:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80077d2:	d007      	beq.n	80077e4 <HAL_PWREx_ControlVoltageScaling+0xf8>
 80077d4:	4907      	ldr	r1, [pc, #28]	; (80077f4 <HAL_PWREx_ControlVoltageScaling+0x108>)
        wait_loop_index--;
 80077d6:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80077d8:	694a      	ldr	r2, [r1, #20]
 80077da:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80077de:	d001      	beq.n	80077e4 <HAL_PWREx_ControlVoltageScaling+0xf8>
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d1f8      	bne.n	80077d6 <HAL_PWREx_ControlVoltageScaling+0xea>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80077e4:	4b03      	ldr	r3, [pc, #12]	; (80077f4 <HAL_PWREx_ControlVoltageScaling+0x108>)
 80077e6:	695b      	ldr	r3, [r3, #20]
        return HAL_TIMEOUT;
 80077e8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80077ec:	bf0c      	ite	eq
 80077ee:	2000      	moveq	r0, #0
 80077f0:	2003      	movne	r0, #3
 80077f2:	4770      	bx	lr
 80077f4:	40007000 	.word	0x40007000
 80077f8:	20000550 	.word	0x20000550
 80077fc:	431bde83 	.word	0x431bde83

08007800 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007800:	4a02      	ldr	r2, [pc, #8]	; (800780c <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8007802:	6893      	ldr	r3, [r2, #8]
 8007804:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007808:	6093      	str	r3, [r2, #8]
}
 800780a:	4770      	bx	lr
 800780c:	40007000 	.word	0x40007000

08007810 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007810:	2800      	cmp	r0, #0
 8007812:	f000 8257 	beq.w	8007cc4 <HAL_RCC_OscConfig+0x4b4>
{
 8007816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800781e:	6803      	ldr	r3, [r0, #0]
 8007820:	f013 0f01 	tst.w	r3, #1
 8007824:	d037      	beq.n	8007896 <HAL_RCC_OscConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007826:	4aa5      	ldr	r2, [pc, #660]	; (8007abc <HAL_RCC_OscConfig+0x2ac>)
 8007828:	6893      	ldr	r3, [r2, #8]
 800782a:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800782e:	68d2      	ldr	r2, [r2, #12]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007830:	2b0c      	cmp	r3, #12
 8007832:	d023      	beq.n	800787c <HAL_RCC_OscConfig+0x6c>
 8007834:	2b08      	cmp	r3, #8
 8007836:	d025      	beq.n	8007884 <HAL_RCC_OscConfig+0x74>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007838:	6863      	ldr	r3, [r4, #4]
 800783a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800783e:	d04e      	beq.n	80078de <HAL_RCC_OscConfig+0xce>
 8007840:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007844:	d051      	beq.n	80078ea <HAL_RCC_OscConfig+0xda>
 8007846:	4b9d      	ldr	r3, [pc, #628]	; (8007abc <HAL_RCC_OscConfig+0x2ac>)
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800784e:	601a      	str	r2, [r3, #0]
 8007850:	681a      	ldr	r2, [r3, #0]
 8007852:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007856:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007858:	6863      	ldr	r3, [r4, #4]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d052      	beq.n	8007904 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800785e:	f7fd ff09 	bl	8005674 <HAL_GetTick>
 8007862:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007864:	4e95      	ldr	r6, [pc, #596]	; (8007abc <HAL_RCC_OscConfig+0x2ac>)
 8007866:	6833      	ldr	r3, [r6, #0]
 8007868:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800786c:	d113      	bne.n	8007896 <HAL_RCC_OscConfig+0x86>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800786e:	f7fd ff01 	bl	8005674 <HAL_GetTick>
 8007872:	1b40      	subs	r0, r0, r5
 8007874:	2864      	cmp	r0, #100	; 0x64
 8007876:	d9f6      	bls.n	8007866 <HAL_RCC_OscConfig+0x56>
          {
            return HAL_TIMEOUT;
 8007878:	2003      	movs	r0, #3
 800787a:	e22c      	b.n	8007cd6 <HAL_RCC_OscConfig+0x4c6>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800787c:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007880:	2a03      	cmp	r2, #3
 8007882:	d1d9      	bne.n	8007838 <HAL_RCC_OscConfig+0x28>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007884:	4b8d      	ldr	r3, [pc, #564]	; (8007abc <HAL_RCC_OscConfig+0x2ac>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800788c:	d003      	beq.n	8007896 <HAL_RCC_OscConfig+0x86>
 800788e:	6863      	ldr	r3, [r4, #4]
 8007890:	2b00      	cmp	r3, #0
 8007892:	f000 8219 	beq.w	8007cc8 <HAL_RCC_OscConfig+0x4b8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007896:	6823      	ldr	r3, [r4, #0]
 8007898:	f013 0f02 	tst.w	r3, #2
 800789c:	d05d      	beq.n	800795a <HAL_RCC_OscConfig+0x14a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800789e:	4a87      	ldr	r2, [pc, #540]	; (8007abc <HAL_RCC_OscConfig+0x2ac>)
 80078a0:	6893      	ldr	r3, [r2, #8]
 80078a2:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80078a6:	68d2      	ldr	r2, [r2, #12]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80078a8:	2b0c      	cmp	r3, #12
 80078aa:	d03a      	beq.n	8007922 <HAL_RCC_OscConfig+0x112>
 80078ac:	2b04      	cmp	r3, #4
 80078ae:	d03c      	beq.n	800792a <HAL_RCC_OscConfig+0x11a>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80078b0:	68e3      	ldr	r3, [r4, #12]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d077      	beq.n	80079a6 <HAL_RCC_OscConfig+0x196>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80078b6:	4a81      	ldr	r2, [pc, #516]	; (8007abc <HAL_RCC_OscConfig+0x2ac>)
 80078b8:	6813      	ldr	r3, [r2, #0]
 80078ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078c0:	f7fd fed8 	bl	8005674 <HAL_GetTick>
 80078c4:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80078c6:	4e7d      	ldr	r6, [pc, #500]	; (8007abc <HAL_RCC_OscConfig+0x2ac>)
 80078c8:	6833      	ldr	r3, [r6, #0]
 80078ca:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80078ce:	d161      	bne.n	8007994 <HAL_RCC_OscConfig+0x184>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80078d0:	f7fd fed0 	bl	8005674 <HAL_GetTick>
 80078d4:	1b40      	subs	r0, r0, r5
 80078d6:	2802      	cmp	r0, #2
 80078d8:	d9f6      	bls.n	80078c8 <HAL_RCC_OscConfig+0xb8>
          {
            return HAL_TIMEOUT;
 80078da:	2003      	movs	r0, #3
 80078dc:	e1fb      	b.n	8007cd6 <HAL_RCC_OscConfig+0x4c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80078de:	4a77      	ldr	r2, [pc, #476]	; (8007abc <HAL_RCC_OscConfig+0x2ac>)
 80078e0:	6813      	ldr	r3, [r2, #0]
 80078e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078e6:	6013      	str	r3, [r2, #0]
 80078e8:	e7b6      	b.n	8007858 <HAL_RCC_OscConfig+0x48>
 80078ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80078ee:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80078f8:	601a      	str	r2, [r3, #0]
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007900:	601a      	str	r2, [r3, #0]
 8007902:	e7a9      	b.n	8007858 <HAL_RCC_OscConfig+0x48>
        tickstart = HAL_GetTick();
 8007904:	f7fd feb6 	bl	8005674 <HAL_GetTick>
 8007908:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800790a:	4e6c      	ldr	r6, [pc, #432]	; (8007abc <HAL_RCC_OscConfig+0x2ac>)
 800790c:	6833      	ldr	r3, [r6, #0]
 800790e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007912:	d0c0      	beq.n	8007896 <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007914:	f7fd feae 	bl	8005674 <HAL_GetTick>
 8007918:	1b40      	subs	r0, r0, r5
 800791a:	2864      	cmp	r0, #100	; 0x64
 800791c:	d9f6      	bls.n	800790c <HAL_RCC_OscConfig+0xfc>
            return HAL_TIMEOUT;
 800791e:	2003      	movs	r0, #3
 8007920:	e1d9      	b.n	8007cd6 <HAL_RCC_OscConfig+0x4c6>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007922:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007926:	2a02      	cmp	r2, #2
 8007928:	d1c2      	bne.n	80078b0 <HAL_RCC_OscConfig+0xa0>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800792a:	4b64      	ldr	r3, [pc, #400]	; (8007abc <HAL_RCC_OscConfig+0x2ac>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8007932:	d003      	beq.n	800793c <HAL_RCC_OscConfig+0x12c>
 8007934:	68e3      	ldr	r3, [r4, #12]
 8007936:	2b00      	cmp	r3, #0
 8007938:	f000 81c8 	beq.w	8007ccc <HAL_RCC_OscConfig+0x4bc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800793c:	4a5f      	ldr	r2, [pc, #380]	; (8007abc <HAL_RCC_OscConfig+0x2ac>)
 800793e:	6853      	ldr	r3, [r2, #4]
 8007940:	6921      	ldr	r1, [r4, #16]
 8007942:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007946:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800794a:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800794c:	4b5c      	ldr	r3, [pc, #368]	; (8007ac0 <HAL_RCC_OscConfig+0x2b0>)
 800794e:	6818      	ldr	r0, [r3, #0]
 8007950:	f7fd fe4c 	bl	80055ec <HAL_InitTick>
 8007954:	2800      	cmp	r0, #0
 8007956:	f040 81bb 	bne.w	8007cd0 <HAL_RCC_OscConfig+0x4c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800795a:	6823      	ldr	r3, [r4, #0]
 800795c:	f013 0f08 	tst.w	r3, #8
 8007960:	d04c      	beq.n	80079fc <HAL_RCC_OscConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007962:	6963      	ldr	r3, [r4, #20]
 8007964:	b39b      	cbz	r3, 80079ce <HAL_RCC_OscConfig+0x1be>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007966:	4a55      	ldr	r2, [pc, #340]	; (8007abc <HAL_RCC_OscConfig+0x2ac>)
 8007968:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800796c:	f043 0301 	orr.w	r3, r3, #1
 8007970:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007974:	f7fd fe7e 	bl	8005674 <HAL_GetTick>
 8007978:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800797a:	4e50      	ldr	r6, [pc, #320]	; (8007abc <HAL_RCC_OscConfig+0x2ac>)
 800797c:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8007980:	f013 0f02 	tst.w	r3, #2
 8007984:	d13a      	bne.n	80079fc <HAL_RCC_OscConfig+0x1ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007986:	f7fd fe75 	bl	8005674 <HAL_GetTick>
 800798a:	1b40      	subs	r0, r0, r5
 800798c:	2802      	cmp	r0, #2
 800798e:	d9f5      	bls.n	800797c <HAL_RCC_OscConfig+0x16c>
        {
          return HAL_TIMEOUT;
 8007990:	2003      	movs	r0, #3
 8007992:	e1a0      	b.n	8007cd6 <HAL_RCC_OscConfig+0x4c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007994:	4a49      	ldr	r2, [pc, #292]	; (8007abc <HAL_RCC_OscConfig+0x2ac>)
 8007996:	6853      	ldr	r3, [r2, #4]
 8007998:	6921      	ldr	r1, [r4, #16]
 800799a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800799e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80079a2:	6053      	str	r3, [r2, #4]
 80079a4:	e7d9      	b.n	800795a <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_HSI_DISABLE();
 80079a6:	4a45      	ldr	r2, [pc, #276]	; (8007abc <HAL_RCC_OscConfig+0x2ac>)
 80079a8:	6813      	ldr	r3, [r2, #0]
 80079aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079ae:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80079b0:	f7fd fe60 	bl	8005674 <HAL_GetTick>
 80079b4:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80079b6:	4e41      	ldr	r6, [pc, #260]	; (8007abc <HAL_RCC_OscConfig+0x2ac>)
 80079b8:	6833      	ldr	r3, [r6, #0]
 80079ba:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80079be:	d0cc      	beq.n	800795a <HAL_RCC_OscConfig+0x14a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80079c0:	f7fd fe58 	bl	8005674 <HAL_GetTick>
 80079c4:	1b40      	subs	r0, r0, r5
 80079c6:	2802      	cmp	r0, #2
 80079c8:	d9f6      	bls.n	80079b8 <HAL_RCC_OscConfig+0x1a8>
            return HAL_TIMEOUT;
 80079ca:	2003      	movs	r0, #3
 80079cc:	e183      	b.n	8007cd6 <HAL_RCC_OscConfig+0x4c6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80079ce:	4a3b      	ldr	r2, [pc, #236]	; (8007abc <HAL_RCC_OscConfig+0x2ac>)
 80079d0:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80079d4:	f023 0301 	bic.w	r3, r3, #1
 80079d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079dc:	f7fd fe4a 	bl	8005674 <HAL_GetTick>
 80079e0:	4605      	mov	r5, r0

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80079e2:	4e36      	ldr	r6, [pc, #216]	; (8007abc <HAL_RCC_OscConfig+0x2ac>)
 80079e4:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 80079e8:	f013 0f02 	tst.w	r3, #2
 80079ec:	d006      	beq.n	80079fc <HAL_RCC_OscConfig+0x1ec>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80079ee:	f7fd fe41 	bl	8005674 <HAL_GetTick>
 80079f2:	1b40      	subs	r0, r0, r5
 80079f4:	2802      	cmp	r0, #2
 80079f6:	d9f5      	bls.n	80079e4 <HAL_RCC_OscConfig+0x1d4>
        {
          return HAL_TIMEOUT;
 80079f8:	2003      	movs	r0, #3
 80079fa:	e16c      	b.n	8007cd6 <HAL_RCC_OscConfig+0x4c6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80079fc:	6823      	ldr	r3, [r4, #0]
 80079fe:	f013 0f04 	tst.w	r3, #4
 8007a02:	f000 8082 	beq.w	8007b0a <HAL_RCC_OscConfig+0x2fa>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007a06:	4b2d      	ldr	r3, [pc, #180]	; (8007abc <HAL_RCC_OscConfig+0x2ac>)
 8007a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a0a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8007a0e:	d136      	bne.n	8007a7e <HAL_RCC_OscConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a10:	4b2a      	ldr	r3, [pc, #168]	; (8007abc <HAL_RCC_OscConfig+0x2ac>)
 8007a12:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007a14:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007a18:	659a      	str	r2, [r3, #88]	; 0x58
 8007a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a20:	9301      	str	r3, [sp, #4]
 8007a22:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8007a24:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007a26:	4b27      	ldr	r3, [pc, #156]	; (8007ac4 <HAL_RCC_OscConfig+0x2b4>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007a2e:	d028      	beq.n	8007a82 <HAL_RCC_OscConfig+0x272>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a30:	68a3      	ldr	r3, [r4, #8]
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d039      	beq.n	8007aaa <HAL_RCC_OscConfig+0x29a>
 8007a36:	2b05      	cmp	r3, #5
 8007a38:	d046      	beq.n	8007ac8 <HAL_RCC_OscConfig+0x2b8>
 8007a3a:	4b20      	ldr	r3, [pc, #128]	; (8007abc <HAL_RCC_OscConfig+0x2ac>)
 8007a3c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007a40:	f022 0201 	bic.w	r2, r2, #1
 8007a44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8007a48:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007a4c:	f022 0204 	bic.w	r2, r2, #4
 8007a50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007a54:	68a3      	ldr	r3, [r4, #8]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d044      	beq.n	8007ae4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a5a:	f7fd fe0b 	bl	8005674 <HAL_GetTick>
 8007a5e:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a60:	4f16      	ldr	r7, [pc, #88]	; (8007abc <HAL_RCC_OscConfig+0x2ac>)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a62:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a66:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007a6a:	f013 0f02 	tst.w	r3, #2
 8007a6e:	d14b      	bne.n	8007b08 <HAL_RCC_OscConfig+0x2f8>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a70:	f7fd fe00 	bl	8005674 <HAL_GetTick>
 8007a74:	1b80      	subs	r0, r0, r6
 8007a76:	4540      	cmp	r0, r8
 8007a78:	d9f5      	bls.n	8007a66 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_TIMEOUT;
 8007a7a:	2003      	movs	r0, #3
 8007a7c:	e12b      	b.n	8007cd6 <HAL_RCC_OscConfig+0x4c6>
    FlagStatus       pwrclkchanged = RESET;
 8007a7e:	2500      	movs	r5, #0
 8007a80:	e7d1      	b.n	8007a26 <HAL_RCC_OscConfig+0x216>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a82:	4a10      	ldr	r2, [pc, #64]	; (8007ac4 <HAL_RCC_OscConfig+0x2b4>)
 8007a84:	6813      	ldr	r3, [r2, #0]
 8007a86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a8a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8007a8c:	f7fd fdf2 	bl	8005674 <HAL_GetTick>
 8007a90:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007a92:	4f0c      	ldr	r7, [pc, #48]	; (8007ac4 <HAL_RCC_OscConfig+0x2b4>)
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007a9a:	d1c9      	bne.n	8007a30 <HAL_RCC_OscConfig+0x220>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a9c:	f7fd fdea 	bl	8005674 <HAL_GetTick>
 8007aa0:	1b80      	subs	r0, r0, r6
 8007aa2:	2802      	cmp	r0, #2
 8007aa4:	d9f6      	bls.n	8007a94 <HAL_RCC_OscConfig+0x284>
          return HAL_TIMEOUT;
 8007aa6:	2003      	movs	r0, #3
 8007aa8:	e115      	b.n	8007cd6 <HAL_RCC_OscConfig+0x4c6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007aaa:	4a04      	ldr	r2, [pc, #16]	; (8007abc <HAL_RCC_OscConfig+0x2ac>)
 8007aac:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007ab0:	f043 0301 	orr.w	r3, r3, #1
 8007ab4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007ab8:	e7cc      	b.n	8007a54 <HAL_RCC_OscConfig+0x244>
 8007aba:	bf00      	nop
 8007abc:	40021000 	.word	0x40021000
 8007ac0:	20000558 	.word	0x20000558
 8007ac4:	40007000 	.word	0x40007000
 8007ac8:	4b8a      	ldr	r3, [pc, #552]	; (8007cf4 <HAL_RCC_OscConfig+0x4e4>)
 8007aca:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007ace:	f042 0204 	orr.w	r2, r2, #4
 8007ad2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8007ad6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007ada:	f042 0201 	orr.w	r2, r2, #1
 8007ade:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8007ae2:	e7b7      	b.n	8007a54 <HAL_RCC_OscConfig+0x244>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ae4:	f7fd fdc6 	bl	8005674 <HAL_GetTick>
 8007ae8:	4606      	mov	r6, r0

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007aea:	4f82      	ldr	r7, [pc, #520]	; (8007cf4 <HAL_RCC_OscConfig+0x4e4>)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007aec:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007af0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007af4:	f013 0f02 	tst.w	r3, #2
 8007af8:	d006      	beq.n	8007b08 <HAL_RCC_OscConfig+0x2f8>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007afa:	f7fd fdbb 	bl	8005674 <HAL_GetTick>
 8007afe:	1b80      	subs	r0, r0, r6
 8007b00:	4540      	cmp	r0, r8
 8007b02:	d9f5      	bls.n	8007af0 <HAL_RCC_OscConfig+0x2e0>
        {
          return HAL_TIMEOUT;
 8007b04:	2003      	movs	r0, #3
 8007b06:	e0e6      	b.n	8007cd6 <HAL_RCC_OscConfig+0x4c6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007b08:	b9e5      	cbnz	r5, 8007b44 <HAL_RCC_OscConfig+0x334>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007b0a:	6823      	ldr	r3, [r4, #0]
 8007b0c:	f013 0f20 	tst.w	r3, #32
 8007b10:	d035      	beq.n	8007b7e <HAL_RCC_OscConfig+0x36e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007b12:	69a3      	ldr	r3, [r4, #24]
 8007b14:	b1e3      	cbz	r3, 8007b50 <HAL_RCC_OscConfig+0x340>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007b16:	4a77      	ldr	r2, [pc, #476]	; (8007cf4 <HAL_RCC_OscConfig+0x4e4>)
 8007b18:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8007b1c:	f043 0301 	orr.w	r3, r3, #1
 8007b20:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b24:	f7fd fda6 	bl	8005674 <HAL_GetTick>
 8007b28:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007b2a:	4e72      	ldr	r6, [pc, #456]	; (8007cf4 <HAL_RCC_OscConfig+0x4e4>)
 8007b2c:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 8007b30:	f013 0f02 	tst.w	r3, #2
 8007b34:	d123      	bne.n	8007b7e <HAL_RCC_OscConfig+0x36e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007b36:	f7fd fd9d 	bl	8005674 <HAL_GetTick>
 8007b3a:	1b40      	subs	r0, r0, r5
 8007b3c:	2802      	cmp	r0, #2
 8007b3e:	d9f5      	bls.n	8007b2c <HAL_RCC_OscConfig+0x31c>
        {
          return HAL_TIMEOUT;
 8007b40:	2003      	movs	r0, #3
 8007b42:	e0c8      	b.n	8007cd6 <HAL_RCC_OscConfig+0x4c6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b44:	4a6b      	ldr	r2, [pc, #428]	; (8007cf4 <HAL_RCC_OscConfig+0x4e4>)
 8007b46:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007b48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b4c:	6593      	str	r3, [r2, #88]	; 0x58
 8007b4e:	e7dc      	b.n	8007b0a <HAL_RCC_OscConfig+0x2fa>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007b50:	4a68      	ldr	r2, [pc, #416]	; (8007cf4 <HAL_RCC_OscConfig+0x4e4>)
 8007b52:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8007b56:	f023 0301 	bic.w	r3, r3, #1
 8007b5a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b5e:	f7fd fd89 	bl	8005674 <HAL_GetTick>
 8007b62:	4605      	mov	r5, r0

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007b64:	4e63      	ldr	r6, [pc, #396]	; (8007cf4 <HAL_RCC_OscConfig+0x4e4>)
 8007b66:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 8007b6a:	f013 0f02 	tst.w	r3, #2
 8007b6e:	d006      	beq.n	8007b7e <HAL_RCC_OscConfig+0x36e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007b70:	f7fd fd80 	bl	8005674 <HAL_GetTick>
 8007b74:	1b40      	subs	r0, r0, r5
 8007b76:	2802      	cmp	r0, #2
 8007b78:	d9f5      	bls.n	8007b66 <HAL_RCC_OscConfig+0x356>
        {
          return HAL_TIMEOUT;
 8007b7a:	2003      	movs	r0, #3
 8007b7c:	e0ab      	b.n	8007cd6 <HAL_RCC_OscConfig+0x4c6>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007b7e:	69e3      	ldr	r3, [r4, #28]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	f000 80a7 	beq.w	8007cd4 <HAL_RCC_OscConfig+0x4c4>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007b86:	4a5b      	ldr	r2, [pc, #364]	; (8007cf4 <HAL_RCC_OscConfig+0x4e4>)
 8007b88:	6892      	ldr	r2, [r2, #8]
 8007b8a:	f002 020c 	and.w	r2, r2, #12
 8007b8e:	2a0c      	cmp	r2, #12
 8007b90:	d069      	beq.n	8007c66 <HAL_RCC_OscConfig+0x456>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007b92:	2b02      	cmp	r3, #2
 8007b94:	d01d      	beq.n	8007bd2 <HAL_RCC_OscConfig+0x3c2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b96:	4b57      	ldr	r3, [pc, #348]	; (8007cf4 <HAL_RCC_OscConfig+0x4e4>)
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007b9e:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007ba0:	68da      	ldr	r2, [r3, #12]
 8007ba2:	f022 0203 	bic.w	r2, r2, #3
 8007ba6:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007ba8:	68da      	ldr	r2, [r3, #12]
 8007baa:	f022 7288 	bic.w	r2, r2, #17825792	; 0x1100000
 8007bae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007bb2:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bb4:	f7fd fd5e 	bl	8005674 <HAL_GetTick>
 8007bb8:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007bba:	4d4e      	ldr	r5, [pc, #312]	; (8007cf4 <HAL_RCC_OscConfig+0x4e4>)
 8007bbc:	682b      	ldr	r3, [r5, #0]
 8007bbe:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8007bc2:	d04e      	beq.n	8007c62 <HAL_RCC_OscConfig+0x452>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007bc4:	f7fd fd56 	bl	8005674 <HAL_GetTick>
 8007bc8:	1b00      	subs	r0, r0, r4
 8007bca:	2802      	cmp	r0, #2
 8007bcc:	d9f6      	bls.n	8007bbc <HAL_RCC_OscConfig+0x3ac>
          {
            return HAL_TIMEOUT;
 8007bce:	2003      	movs	r0, #3
 8007bd0:	e081      	b.n	8007cd6 <HAL_RCC_OscConfig+0x4c6>
        __HAL_RCC_PLL_DISABLE();
 8007bd2:	4a48      	ldr	r2, [pc, #288]	; (8007cf4 <HAL_RCC_OscConfig+0x4e4>)
 8007bd4:	6813      	ldr	r3, [r2, #0]
 8007bd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007bda:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007bdc:	f7fd fd4a 	bl	8005674 <HAL_GetTick>
 8007be0:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007be2:	4e44      	ldr	r6, [pc, #272]	; (8007cf4 <HAL_RCC_OscConfig+0x4e4>)
 8007be4:	6833      	ldr	r3, [r6, #0]
 8007be6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8007bea:	d006      	beq.n	8007bfa <HAL_RCC_OscConfig+0x3ea>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007bec:	f7fd fd42 	bl	8005674 <HAL_GetTick>
 8007bf0:	1b40      	subs	r0, r0, r5
 8007bf2:	2802      	cmp	r0, #2
 8007bf4:	d9f6      	bls.n	8007be4 <HAL_RCC_OscConfig+0x3d4>
            return HAL_TIMEOUT;
 8007bf6:	2003      	movs	r0, #3
 8007bf8:	e06d      	b.n	8007cd6 <HAL_RCC_OscConfig+0x4c6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007bfa:	4a3e      	ldr	r2, [pc, #248]	; (8007cf4 <HAL_RCC_OscConfig+0x4e4>)
 8007bfc:	68d1      	ldr	r1, [r2, #12]
 8007bfe:	4b3e      	ldr	r3, [pc, #248]	; (8007cf8 <HAL_RCC_OscConfig+0x4e8>)
 8007c00:	400b      	ands	r3, r1
 8007c02:	6a21      	ldr	r1, [r4, #32]
 8007c04:	430b      	orrs	r3, r1
 8007c06:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007c08:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007c0c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007c0e:	ea43 63c1 	orr.w	r3, r3, r1, lsl #27
 8007c12:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007c14:	3901      	subs	r1, #1
 8007c16:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8007c1a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007c1c:	0849      	lsrs	r1, r1, #1
 8007c1e:	3901      	subs	r1, #1
 8007c20:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8007c24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c26:	0849      	lsrs	r1, r1, #1
 8007c28:	3901      	subs	r1, #1
 8007c2a:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8007c2e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 8007c30:	6813      	ldr	r3, [r2, #0]
 8007c32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c36:	6013      	str	r3, [r2, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007c38:	68d3      	ldr	r3, [r2, #12]
 8007c3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c3e:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8007c40:	f7fd fd18 	bl	8005674 <HAL_GetTick>
 8007c44:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c46:	4d2b      	ldr	r5, [pc, #172]	; (8007cf4 <HAL_RCC_OscConfig+0x4e4>)
 8007c48:	682b      	ldr	r3, [r5, #0]
 8007c4a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8007c4e:	d106      	bne.n	8007c5e <HAL_RCC_OscConfig+0x44e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c50:	f7fd fd10 	bl	8005674 <HAL_GetTick>
 8007c54:	1b00      	subs	r0, r0, r4
 8007c56:	2802      	cmp	r0, #2
 8007c58:	d9f6      	bls.n	8007c48 <HAL_RCC_OscConfig+0x438>
            return HAL_TIMEOUT;
 8007c5a:	2003      	movs	r0, #3
 8007c5c:	e03b      	b.n	8007cd6 <HAL_RCC_OscConfig+0x4c6>
      }
    }
  }
  }

  return HAL_OK;
 8007c5e:	2000      	movs	r0, #0
 8007c60:	e039      	b.n	8007cd6 <HAL_RCC_OscConfig+0x4c6>
 8007c62:	2000      	movs	r0, #0
 8007c64:	e037      	b.n	8007cd6 <HAL_RCC_OscConfig+0x4c6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d038      	beq.n	8007cdc <HAL_RCC_OscConfig+0x4cc>
      temp_pllckcfg = RCC->PLLCFGR;
 8007c6a:	4b22      	ldr	r3, [pc, #136]	; (8007cf4 <HAL_RCC_OscConfig+0x4e4>)
 8007c6c:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c6e:	f003 0103 	and.w	r1, r3, #3
 8007c72:	6a22      	ldr	r2, [r4, #32]
 8007c74:	4291      	cmp	r1, r2
 8007c76:	d133      	bne.n	8007ce0 <HAL_RCC_OscConfig+0x4d0>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007c78:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007c7c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007c7e:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c80:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8007c84:	d12e      	bne.n	8007ce4 <HAL_RCC_OscConfig+0x4d4>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007c86:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007c8a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007c8c:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8007c90:	d12a      	bne.n	8007ce8 <HAL_RCC_OscConfig+0x4d8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007c92:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007c96:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007c98:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8007c9c:	d126      	bne.n	8007cec <HAL_RCC_OscConfig+0x4dc>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007c9e:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8007ca2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007ca4:	0852      	lsrs	r2, r2, #1
 8007ca6:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007ca8:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8007cac:	d120      	bne.n	8007cf0 <HAL_RCC_OscConfig+0x4e0>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007cae:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8007cb0:	0852      	lsrs	r2, r2, #1
 8007cb2:	3a01      	subs	r2, #1
 8007cb4:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007cb8:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
    return HAL_ERROR;
 8007cbc:	bf14      	ite	ne
 8007cbe:	2001      	movne	r0, #1
 8007cc0:	2000      	moveq	r0, #0
 8007cc2:	e008      	b.n	8007cd6 <HAL_RCC_OscConfig+0x4c6>
 8007cc4:	2001      	movs	r0, #1
}
 8007cc6:	4770      	bx	lr
        return HAL_ERROR;
 8007cc8:	2001      	movs	r0, #1
 8007cca:	e004      	b.n	8007cd6 <HAL_RCC_OscConfig+0x4c6>
        return HAL_ERROR;
 8007ccc:	2001      	movs	r0, #1
 8007cce:	e002      	b.n	8007cd6 <HAL_RCC_OscConfig+0x4c6>
          return HAL_ERROR;
 8007cd0:	2001      	movs	r0, #1
 8007cd2:	e000      	b.n	8007cd6 <HAL_RCC_OscConfig+0x4c6>
  return HAL_OK;
 8007cd4:	2000      	movs	r0, #0
}
 8007cd6:	b002      	add	sp, #8
 8007cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8007cdc:	2001      	movs	r0, #1
 8007cde:	e7fa      	b.n	8007cd6 <HAL_RCC_OscConfig+0x4c6>
        return HAL_ERROR;
 8007ce0:	2001      	movs	r0, #1
 8007ce2:	e7f8      	b.n	8007cd6 <HAL_RCC_OscConfig+0x4c6>
 8007ce4:	2001      	movs	r0, #1
 8007ce6:	e7f6      	b.n	8007cd6 <HAL_RCC_OscConfig+0x4c6>
 8007ce8:	2001      	movs	r0, #1
 8007cea:	e7f4      	b.n	8007cd6 <HAL_RCC_OscConfig+0x4c6>
 8007cec:	2001      	movs	r0, #1
 8007cee:	e7f2      	b.n	8007cd6 <HAL_RCC_OscConfig+0x4c6>
 8007cf0:	2001      	movs	r0, #1
 8007cf2:	e7f0      	b.n	8007cd6 <HAL_RCC_OscConfig+0x4c6>
 8007cf4:	40021000 	.word	0x40021000
 8007cf8:	019f800c 	.word	0x019f800c

08007cfc <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8007cfc:	b570      	push	{r4, r5, r6, lr}
 8007cfe:	b086      	sub	sp, #24
 8007d00:	4604      	mov	r4, r0
 8007d02:	460d      	mov	r5, r1
 8007d04:	4616      	mov	r6, r2

  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  /* Common GPIO init parameters */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 8007d06:	2302      	movs	r3, #2
 8007d08:	9302      	str	r3, [sp, #8]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d0a:	2303      	movs	r3, #3
 8007d0c:	9304      	str	r3, [sp, #16]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	9303      	str	r3, [sp, #12]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8007d12:	f3c0 4003 	ubfx	r0, r0, #16, #4

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 8007d16:	4a0f      	ldr	r2, [pc, #60]	; (8007d54 <HAL_RCC_MCOConfig+0x58>)
 8007d18:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	4083      	lsls	r3, r0
 8007d1e:	430b      	orrs	r3, r1
 8007d20:	64d3      	str	r3, [r2, #76]	; 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 8007d22:	b2a3      	uxth	r3, r4
 8007d24:	9301      	str	r3, [sp, #4]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 8007d26:	f3c4 5307 	ubfx	r3, r4, #20, #8
 8007d2a:	9305      	str	r3, [sp, #20]
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8007d2c:	f500 1090 	add.w	r0, r0, #1179648	; 0x120000
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 8007d30:	a901      	add	r1, sp, #4
 8007d32:	0280      	lsls	r0, r0, #10
 8007d34:	f7ff fbe8 	bl	8007508 <HAL_GPIO_Init>

   if (mcoindex == RCC_MCO1_INDEX)
 8007d38:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8007d3c:	d107      	bne.n	8007d4e <HAL_RCC_MCOConfig+0x52>
  {
    assert_param(IS_RCC_MCODIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
    /* Mask MCOSEL[] and MCOPRE[] bits then set MCO clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 8007d3e:	4b05      	ldr	r3, [pc, #20]	; (8007d54 <HAL_RCC_MCOConfig+0x58>)
 8007d40:	6899      	ldr	r1, [r3, #8]
 8007d42:	f021 41fe 	bic.w	r1, r1, #2130706432	; 0x7f000000
 8007d46:	ea41 0206 	orr.w	r2, r1, r6
 8007d4a:	432a      	orrs	r2, r5
 8007d4c:	609a      	str	r2, [r3, #8]
  }
}
 8007d4e:	b006      	add	sp, #24
 8007d50:	bd70      	pop	{r4, r5, r6, pc}
 8007d52:	bf00      	nop
 8007d54:	40021000 	.word	0x40021000

08007d58 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007d58:	4b17      	ldr	r3, [pc, #92]	; (8007db8 <HAL_RCC_GetSysClockFreq+0x60>)
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	f003 030c 	and.w	r3, r3, #12
 8007d60:	2b04      	cmp	r3, #4
 8007d62:	d025      	beq.n	8007db0 <HAL_RCC_GetSysClockFreq+0x58>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007d64:	4b14      	ldr	r3, [pc, #80]	; (8007db8 <HAL_RCC_GetSysClockFreq+0x60>)
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	f003 030c 	and.w	r3, r3, #12
 8007d6c:	2b08      	cmp	r3, #8
 8007d6e:	d021      	beq.n	8007db4 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007d70:	4b11      	ldr	r3, [pc, #68]	; (8007db8 <HAL_RCC_GetSysClockFreq+0x60>)
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	f003 030c 	and.w	r3, r3, #12
 8007d78:	2b0c      	cmp	r3, #12
 8007d7a:	d001      	beq.n	8007d80 <HAL_RCC_GetSysClockFreq+0x28>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8007d7c:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 8007d7e:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007d80:	4b0d      	ldr	r3, [pc, #52]	; (8007db8 <HAL_RCC_GetSysClockFreq+0x60>)
 8007d82:	68da      	ldr	r2, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007d84:	68db      	ldr	r3, [r3, #12]
 8007d86:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007d8a:	3301      	adds	r3, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007d8c:	4a0a      	ldr	r2, [pc, #40]	; (8007db8 <HAL_RCC_GetSysClockFreq+0x60>)
 8007d8e:	68d0      	ldr	r0, [r2, #12]
 8007d90:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8007d94:	4a09      	ldr	r2, [pc, #36]	; (8007dbc <HAL_RCC_GetSysClockFreq+0x64>)
 8007d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d9a:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007d9e:	4b06      	ldr	r3, [pc, #24]	; (8007db8 <HAL_RCC_GetSysClockFreq+0x60>)
 8007da0:	68db      	ldr	r3, [r3, #12]
 8007da2:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8007da6:	3301      	adds	r3, #1
 8007da8:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8007daa:	fbb0 f0f3 	udiv	r0, r0, r3
 8007dae:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8007db0:	4802      	ldr	r0, [pc, #8]	; (8007dbc <HAL_RCC_GetSysClockFreq+0x64>)
 8007db2:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8007db4:	4801      	ldr	r0, [pc, #4]	; (8007dbc <HAL_RCC_GetSysClockFreq+0x64>)
 8007db6:	4770      	bx	lr
 8007db8:	40021000 	.word	0x40021000
 8007dbc:	00f42400 	.word	0x00f42400

08007dc0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8007dc0:	2800      	cmp	r0, #0
 8007dc2:	f000 80b9 	beq.w	8007f38 <HAL_RCC_ClockConfig+0x178>
{
 8007dc6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dca:	460c      	mov	r4, r1
 8007dcc:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007dce:	4b84      	ldr	r3, [pc, #528]	; (8007fe0 <HAL_RCC_ClockConfig+0x220>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f003 030f 	and.w	r3, r3, #15
 8007dd6:	428b      	cmp	r3, r1
 8007dd8:	d20b      	bcs.n	8007df2 <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007dda:	4a81      	ldr	r2, [pc, #516]	; (8007fe0 <HAL_RCC_ClockConfig+0x220>)
 8007ddc:	6813      	ldr	r3, [r2, #0]
 8007dde:	f023 030f 	bic.w	r3, r3, #15
 8007de2:	430b      	orrs	r3, r1
 8007de4:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007de6:	6813      	ldr	r3, [r2, #0]
 8007de8:	f003 030f 	and.w	r3, r3, #15
 8007dec:	428b      	cmp	r3, r1
 8007dee:	f040 80a5 	bne.w	8007f3c <HAL_RCC_ClockConfig+0x17c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007df2:	682b      	ldr	r3, [r5, #0]
 8007df4:	f013 0f01 	tst.w	r3, #1
 8007df8:	f000 80a4 	beq.w	8007f44 <HAL_RCC_ClockConfig+0x184>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007dfc:	686a      	ldr	r2, [r5, #4]
 8007dfe:	2a03      	cmp	r2, #3
 8007e00:	d030      	beq.n	8007e64 <HAL_RCC_ClockConfig+0xa4>
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e02:	2a02      	cmp	r2, #2
 8007e04:	d063      	beq.n	8007ece <HAL_RCC_ClockConfig+0x10e>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007e06:	4b77      	ldr	r3, [pc, #476]	; (8007fe4 <HAL_RCC_ClockConfig+0x224>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8007e0e:	f000 8097 	beq.w	8007f40 <HAL_RCC_ClockConfig+0x180>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007e12:	f7ff ffa1 	bl	8007d58 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8007e16:	4b74      	ldr	r3, [pc, #464]	; (8007fe8 <HAL_RCC_ClockConfig+0x228>)
 8007e18:	4298      	cmp	r0, r3
 8007e1a:	d965      	bls.n	8007ee8 <HAL_RCC_ClockConfig+0x128>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007e1c:	4a71      	ldr	r2, [pc, #452]	; (8007fe4 <HAL_RCC_ClockConfig+0x224>)
 8007e1e:	6893      	ldr	r3, [r2, #8]
 8007e20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e28:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007e2a:	f04f 0980 	mov.w	r9, #128	; 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007e2e:	4a6d      	ldr	r2, [pc, #436]	; (8007fe4 <HAL_RCC_ClockConfig+0x224>)
 8007e30:	6893      	ldr	r3, [r2, #8]
 8007e32:	f023 0303 	bic.w	r3, r3, #3
 8007e36:	6869      	ldr	r1, [r5, #4]
 8007e38:	430b      	orrs	r3, r1
 8007e3a:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8007e3c:	f7fd fc1a 	bl	8005674 <HAL_GetTick>
 8007e40:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e42:	4f68      	ldr	r7, [pc, #416]	; (8007fe4 <HAL_RCC_ClockConfig+0x224>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e44:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	f003 030c 	and.w	r3, r3, #12
 8007e4e:	686a      	ldr	r2, [r5, #4]
 8007e50:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8007e54:	d04b      	beq.n	8007eee <HAL_RCC_ClockConfig+0x12e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e56:	f7fd fc0d 	bl	8005674 <HAL_GetTick>
 8007e5a:	1b80      	subs	r0, r0, r6
 8007e5c:	4540      	cmp	r0, r8
 8007e5e:	d9f3      	bls.n	8007e48 <HAL_RCC_ClockConfig+0x88>
        return HAL_TIMEOUT;
 8007e60:	2003      	movs	r0, #3
 8007e62:	e0ba      	b.n	8007fda <HAL_RCC_ClockConfig+0x21a>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007e64:	4a5f      	ldr	r2, [pc, #380]	; (8007fe4 <HAL_RCC_ClockConfig+0x224>)
 8007e66:	6812      	ldr	r2, [r2, #0]
 8007e68:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8007e6c:	d101      	bne.n	8007e72 <HAL_RCC_ClockConfig+0xb2>
        return HAL_ERROR;
 8007e6e:	2001      	movs	r0, #1
 8007e70:	e0b3      	b.n	8007fda <HAL_RCC_ClockConfig+0x21a>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007e72:	495c      	ldr	r1, [pc, #368]	; (8007fe4 <HAL_RCC_ClockConfig+0x224>)
 8007e74:	68ca      	ldr	r2, [r1, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007e76:	68c9      	ldr	r1, [r1, #12]
 8007e78:	f3c1 1103 	ubfx	r1, r1, #4, #4
 8007e7c:	3101      	adds	r1, #1
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007e7e:	4a59      	ldr	r2, [pc, #356]	; (8007fe4 <HAL_RCC_ClockConfig+0x224>)
 8007e80:	68d2      	ldr	r2, [r2, #12]
 8007e82:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8007e86:	4859      	ldr	r0, [pc, #356]	; (8007fec <HAL_RCC_ClockConfig+0x22c>)
 8007e88:	fbb0 f1f1 	udiv	r1, r0, r1
 8007e8c:	fb01 f202 	mul.w	r2, r1, r2
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007e90:	4954      	ldr	r1, [pc, #336]	; (8007fe4 <HAL_RCC_ClockConfig+0x224>)
 8007e92:	68c9      	ldr	r1, [r1, #12]
 8007e94:	f3c1 6141 	ubfx	r1, r1, #25, #2
 8007e98:	3101      	adds	r1, #1
 8007e9a:	0049      	lsls	r1, r1, #1
  sysclockfreq = pllvco/pllr;
 8007e9c:	fbb2 f2f1 	udiv	r2, r2, r1
      if(pllfreq > 80000000U)
 8007ea0:	4951      	ldr	r1, [pc, #324]	; (8007fe8 <HAL_RCC_ClockConfig+0x228>)
 8007ea2:	428a      	cmp	r2, r1
 8007ea4:	d91a      	bls.n	8007edc <HAL_RCC_ClockConfig+0x11c>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007ea6:	4a4f      	ldr	r2, [pc, #316]	; (8007fe4 <HAL_RCC_ClockConfig+0x224>)
 8007ea8:	6892      	ldr	r2, [r2, #8]
 8007eaa:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 8007eae:	d004      	beq.n	8007eba <HAL_RCC_ClockConfig+0xfa>
 8007eb0:	f013 0902 	ands.w	r9, r3, #2
 8007eb4:	d0bb      	beq.n	8007e2e <HAL_RCC_ClockConfig+0x6e>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007eb6:	68ab      	ldr	r3, [r5, #8]
 8007eb8:	b99b      	cbnz	r3, 8007ee2 <HAL_RCC_ClockConfig+0x122>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007eba:	4a4a      	ldr	r2, [pc, #296]	; (8007fe4 <HAL_RCC_ClockConfig+0x224>)
 8007ebc:	6893      	ldr	r3, [r2, #8]
 8007ebe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ec6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007ec8:	f04f 0980 	mov.w	r9, #128	; 0x80
 8007ecc:	e7af      	b.n	8007e2e <HAL_RCC_ClockConfig+0x6e>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007ece:	4b45      	ldr	r3, [pc, #276]	; (8007fe4 <HAL_RCC_ClockConfig+0x224>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007ed6:	d19c      	bne.n	8007e12 <HAL_RCC_ClockConfig+0x52>
          return HAL_ERROR;
 8007ed8:	2001      	movs	r0, #1
 8007eda:	e07e      	b.n	8007fda <HAL_RCC_ClockConfig+0x21a>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007edc:	f04f 0900 	mov.w	r9, #0
 8007ee0:	e7a5      	b.n	8007e2e <HAL_RCC_ClockConfig+0x6e>
 8007ee2:	f04f 0900 	mov.w	r9, #0
 8007ee6:	e7a2      	b.n	8007e2e <HAL_RCC_ClockConfig+0x6e>
 8007ee8:	f04f 0900 	mov.w	r9, #0
 8007eec:	e79f      	b.n	8007e2e <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007eee:	682b      	ldr	r3, [r5, #0]
 8007ef0:	f013 0f02 	tst.w	r3, #2
 8007ef4:	d129      	bne.n	8007f4a <HAL_RCC_ClockConfig+0x18a>
    if(hpre == RCC_SYSCLK_DIV2)
 8007ef6:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 8007efa:	d140      	bne.n	8007f7e <HAL_RCC_ClockConfig+0x1be>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007efc:	4a39      	ldr	r2, [pc, #228]	; (8007fe4 <HAL_RCC_ClockConfig+0x224>)
 8007efe:	6893      	ldr	r3, [r2, #8]
 8007f00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f04:	6093      	str	r3, [r2, #8]
 8007f06:	e03a      	b.n	8007f7e <HAL_RCC_ClockConfig+0x1be>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f08:	4a35      	ldr	r2, [pc, #212]	; (8007fe0 <HAL_RCC_ClockConfig+0x220>)
 8007f0a:	6813      	ldr	r3, [r2, #0]
 8007f0c:	f023 030f 	bic.w	r3, r3, #15
 8007f10:	4323      	orrs	r3, r4
 8007f12:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8007f14:	f7fd fbae 	bl	8005674 <HAL_GetTick>
 8007f18:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f1a:	4f31      	ldr	r7, [pc, #196]	; (8007fe0 <HAL_RCC_ClockConfig+0x220>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f1c:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	f003 030f 	and.w	r3, r3, #15
 8007f26:	42a3      	cmp	r3, r4
 8007f28:	d02f      	beq.n	8007f8a <HAL_RCC_ClockConfig+0x1ca>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f2a:	f7fd fba3 	bl	8005674 <HAL_GetTick>
 8007f2e:	1b80      	subs	r0, r0, r6
 8007f30:	4540      	cmp	r0, r8
 8007f32:	d9f5      	bls.n	8007f20 <HAL_RCC_ClockConfig+0x160>
        return HAL_TIMEOUT;
 8007f34:	2003      	movs	r0, #3
 8007f36:	e050      	b.n	8007fda <HAL_RCC_ClockConfig+0x21a>
    return HAL_ERROR;
 8007f38:	2001      	movs	r0, #1
}
 8007f3a:	4770      	bx	lr
      return HAL_ERROR;
 8007f3c:	2001      	movs	r0, #1
 8007f3e:	e04c      	b.n	8007fda <HAL_RCC_ClockConfig+0x21a>
          return HAL_ERROR;
 8007f40:	2001      	movs	r0, #1
 8007f42:	e04a      	b.n	8007fda <HAL_RCC_ClockConfig+0x21a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f44:	f013 0f02 	tst.w	r3, #2
 8007f48:	d019      	beq.n	8007f7e <HAL_RCC_ClockConfig+0x1be>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f4a:	f013 0f04 	tst.w	r3, #4
 8007f4e:	d004      	beq.n	8007f5a <HAL_RCC_ClockConfig+0x19a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007f50:	4a24      	ldr	r2, [pc, #144]	; (8007fe4 <HAL_RCC_ClockConfig+0x224>)
 8007f52:	6893      	ldr	r3, [r2, #8]
 8007f54:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007f58:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f5a:	682b      	ldr	r3, [r5, #0]
 8007f5c:	f013 0f08 	tst.w	r3, #8
 8007f60:	d006      	beq.n	8007f70 <HAL_RCC_ClockConfig+0x1b0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007f62:	4a20      	ldr	r2, [pc, #128]	; (8007fe4 <HAL_RCC_ClockConfig+0x224>)
 8007f64:	6893      	ldr	r3, [r2, #8]
 8007f66:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007f6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007f6e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f70:	4a1c      	ldr	r2, [pc, #112]	; (8007fe4 <HAL_RCC_ClockConfig+0x224>)
 8007f72:	6893      	ldr	r3, [r2, #8]
 8007f74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f78:	68a9      	ldr	r1, [r5, #8]
 8007f7a:	430b      	orrs	r3, r1
 8007f7c:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007f7e:	4b18      	ldr	r3, [pc, #96]	; (8007fe0 <HAL_RCC_ClockConfig+0x220>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f003 030f 	and.w	r3, r3, #15
 8007f86:	42a3      	cmp	r3, r4
 8007f88:	d8be      	bhi.n	8007f08 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f8a:	682b      	ldr	r3, [r5, #0]
 8007f8c:	f013 0f04 	tst.w	r3, #4
 8007f90:	d006      	beq.n	8007fa0 <HAL_RCC_ClockConfig+0x1e0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007f92:	4a14      	ldr	r2, [pc, #80]	; (8007fe4 <HAL_RCC_ClockConfig+0x224>)
 8007f94:	6893      	ldr	r3, [r2, #8]
 8007f96:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007f9a:	68e9      	ldr	r1, [r5, #12]
 8007f9c:	430b      	orrs	r3, r1
 8007f9e:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007fa0:	682b      	ldr	r3, [r5, #0]
 8007fa2:	f013 0f08 	tst.w	r3, #8
 8007fa6:	d007      	beq.n	8007fb8 <HAL_RCC_ClockConfig+0x1f8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007fa8:	4a0e      	ldr	r2, [pc, #56]	; (8007fe4 <HAL_RCC_ClockConfig+0x224>)
 8007faa:	6893      	ldr	r3, [r2, #8]
 8007fac:	6929      	ldr	r1, [r5, #16]
 8007fae:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8007fb2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8007fb6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007fb8:	f7ff fece 	bl	8007d58 <HAL_RCC_GetSysClockFreq>
 8007fbc:	4b09      	ldr	r3, [pc, #36]	; (8007fe4 <HAL_RCC_ClockConfig+0x224>)
 8007fbe:	689b      	ldr	r3, [r3, #8]
 8007fc0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007fc4:	4a0a      	ldr	r2, [pc, #40]	; (8007ff0 <HAL_RCC_ClockConfig+0x230>)
 8007fc6:	5cd3      	ldrb	r3, [r2, r3]
 8007fc8:	f003 031f 	and.w	r3, r3, #31
 8007fcc:	40d8      	lsrs	r0, r3
 8007fce:	4b09      	ldr	r3, [pc, #36]	; (8007ff4 <HAL_RCC_ClockConfig+0x234>)
 8007fd0:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8007fd2:	4b09      	ldr	r3, [pc, #36]	; (8007ff8 <HAL_RCC_ClockConfig+0x238>)
 8007fd4:	6818      	ldr	r0, [r3, #0]
 8007fd6:	f7fd fb09 	bl	80055ec <HAL_InitTick>
}
 8007fda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fde:	bf00      	nop
 8007fe0:	40022000 	.word	0x40022000
 8007fe4:	40021000 	.word	0x40021000
 8007fe8:	04c4b400 	.word	0x04c4b400
 8007fec:	00f42400 	.word	0x00f42400
 8007ff0:	0800f784 	.word	0x0800f784
 8007ff4:	20000550 	.word	0x20000550
 8007ff8:	20000558 	.word	0x20000558

08007ffc <HAL_RCC_GetHCLKFreq>:
}
 8007ffc:	4b01      	ldr	r3, [pc, #4]	; (8008004 <HAL_RCC_GetHCLKFreq+0x8>)
 8007ffe:	6818      	ldr	r0, [r3, #0]
 8008000:	4770      	bx	lr
 8008002:	bf00      	nop
 8008004:	20000550 	.word	0x20000550

08008008 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008008:	4b05      	ldr	r3, [pc, #20]	; (8008020 <HAL_RCC_GetPCLK1Freq+0x18>)
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8008010:	4a04      	ldr	r2, [pc, #16]	; (8008024 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8008012:	5cd3      	ldrb	r3, [r2, r3]
 8008014:	f003 031f 	and.w	r3, r3, #31
 8008018:	4a03      	ldr	r2, [pc, #12]	; (8008028 <HAL_RCC_GetPCLK1Freq+0x20>)
 800801a:	6810      	ldr	r0, [r2, #0]
}
 800801c:	40d8      	lsrs	r0, r3
 800801e:	4770      	bx	lr
 8008020:	40021000 	.word	0x40021000
 8008024:	0800f794 	.word	0x0800f794
 8008028:	20000550 	.word	0x20000550

0800802c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800802c:	4b05      	ldr	r3, [pc, #20]	; (8008044 <HAL_RCC_GetPCLK2Freq+0x18>)
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8008034:	4a04      	ldr	r2, [pc, #16]	; (8008048 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8008036:	5cd3      	ldrb	r3, [r2, r3]
 8008038:	f003 031f 	and.w	r3, r3, #31
 800803c:	4a03      	ldr	r2, [pc, #12]	; (800804c <HAL_RCC_GetPCLK2Freq+0x20>)
 800803e:	6810      	ldr	r0, [r2, #0]
}
 8008040:	40d8      	lsrs	r0, r3
 8008042:	4770      	bx	lr
 8008044:	40021000 	.word	0x40021000
 8008048:	0800f794 	.word	0x0800f794
 800804c:	20000550 	.word	0x20000550

08008050 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008054:	b082      	sub	sp, #8
 8008056:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008058:	6803      	ldr	r3, [r0, #0]
 800805a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800805e:	d059      	beq.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008060:	4bab      	ldr	r3, [pc, #684]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8008062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008064:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8008068:	d125      	bne.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800806a:	4ba9      	ldr	r3, [pc, #676]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800806c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800806e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008072:	659a      	str	r2, [r3, #88]	; 0x58
 8008074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800807a:	9301      	str	r3, [sp, #4]
 800807c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800807e:	2701      	movs	r7, #1
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008080:	4aa4      	ldr	r2, [pc, #656]	; (8008314 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008082:	6813      	ldr	r3, [r2, #0]
 8008084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008088:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800808a:	f7fd faf3 	bl	8005674 <HAL_GetTick>
 800808e:	4605      	mov	r5, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008090:	4ea0      	ldr	r6, [pc, #640]	; (8008314 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008092:	6833      	ldr	r3, [r6, #0]
 8008094:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008098:	f040 813e 	bne.w	8008318 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800809c:	f7fd faea 	bl	8005674 <HAL_GetTick>
 80080a0:	1b40      	subs	r0, r0, r5
 80080a2:	2802      	cmp	r0, #2
 80080a4:	d9f5      	bls.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        ret = HAL_TIMEOUT;
 80080a6:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80080a8:	b3af      	cbz	r7, 8008116 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80080aa:	4a99      	ldr	r2, [pc, #612]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80080ac:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80080ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80080b2:	6593      	str	r3, [r2, #88]	; 0x58
 80080b4:	e02f      	b.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    FlagStatus       pwrclkchanged = RESET;
 80080b6:	2700      	movs	r7, #0
 80080b8:	e7e2      	b.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0x30>
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80080ba:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80080bc:	429a      	cmp	r2, r3
 80080be:	d012      	beq.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x96>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80080c0:	4a93      	ldr	r2, [pc, #588]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80080c2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80080c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80080ca:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 80080ce:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80080d2:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80080d6:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 80080da:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80080de:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80080e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80080e6:	f013 0f01 	tst.w	r3, #1
 80080ea:	f000 811c 	beq.w	8008326 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
        tickstart = HAL_GetTick();
 80080ee:	f7fd fac1 	bl	8005674 <HAL_GetTick>
 80080f2:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80080f4:	4e86      	ldr	r6, [pc, #536]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080f6:	f241 3888 	movw	r8, #5000	; 0x1388
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80080fa:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80080fe:	f013 0f02 	tst.w	r3, #2
 8008102:	f040 8110 	bne.w	8008326 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008106:	f7fd fab5 	bl	8005674 <HAL_GetTick>
 800810a:	1b40      	subs	r0, r0, r5
 800810c:	4540      	cmp	r0, r8
 800810e:	d9f4      	bls.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0xaa>
            ret = HAL_TIMEOUT;
 8008110:	2003      	movs	r0, #3
 8008112:	e7c9      	b.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x58>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008114:	2000      	movs	r0, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008116:	6823      	ldr	r3, [r4, #0]
 8008118:	f013 0f01 	tst.w	r3, #1
 800811c:	d008      	beq.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800811e:	4a7c      	ldr	r2, [pc, #496]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8008120:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008124:	f023 0303 	bic.w	r3, r3, #3
 8008128:	6861      	ldr	r1, [r4, #4]
 800812a:	430b      	orrs	r3, r1
 800812c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008130:	6823      	ldr	r3, [r4, #0]
 8008132:	f013 0f02 	tst.w	r3, #2
 8008136:	d008      	beq.n	800814a <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008138:	4a75      	ldr	r2, [pc, #468]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800813a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800813e:	f023 030c 	bic.w	r3, r3, #12
 8008142:	68a1      	ldr	r1, [r4, #8]
 8008144:	430b      	orrs	r3, r1
 8008146:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800814a:	6823      	ldr	r3, [r4, #0]
 800814c:	f013 0f04 	tst.w	r3, #4
 8008150:	d008      	beq.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008152:	4a6f      	ldr	r2, [pc, #444]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8008154:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008158:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800815c:	68e1      	ldr	r1, [r4, #12]
 800815e:	430b      	orrs	r3, r1
 8008160:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008164:	6823      	ldr	r3, [r4, #0]
 8008166:	f013 0f08 	tst.w	r3, #8
 800816a:	d008      	beq.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800816c:	4a68      	ldr	r2, [pc, #416]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800816e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008172:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008176:	6921      	ldr	r1, [r4, #16]
 8008178:	430b      	orrs	r3, r1
 800817a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800817e:	6823      	ldr	r3, [r4, #0]
 8008180:	f013 0f20 	tst.w	r3, #32
 8008184:	d008      	beq.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008186:	4a62      	ldr	r2, [pc, #392]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8008188:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800818c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008190:	6961      	ldr	r1, [r4, #20]
 8008192:	430b      	orrs	r3, r1
 8008194:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008198:	6823      	ldr	r3, [r4, #0]
 800819a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800819e:	d008      	beq.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80081a0:	4a5b      	ldr	r2, [pc, #364]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80081a2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80081a6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80081aa:	69a1      	ldr	r1, [r4, #24]
 80081ac:	430b      	orrs	r3, r1
 80081ae:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80081b2:	6823      	ldr	r3, [r4, #0]
 80081b4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80081b8:	d008      	beq.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80081ba:	4a55      	ldr	r2, [pc, #340]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80081bc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80081c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80081c4:	69e1      	ldr	r1, [r4, #28]
 80081c6:	430b      	orrs	r3, r1
 80081c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80081cc:	6823      	ldr	r3, [r4, #0]
 80081ce:	f413 7f80 	tst.w	r3, #256	; 0x100
 80081d2:	d008      	beq.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80081d4:	4a4e      	ldr	r2, [pc, #312]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80081d6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80081da:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80081de:	6a21      	ldr	r1, [r4, #32]
 80081e0:	430b      	orrs	r3, r1
 80081e2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80081e6:	6823      	ldr	r3, [r4, #0]
 80081e8:	f413 7f00 	tst.w	r3, #512	; 0x200
 80081ec:	d008      	beq.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80081ee:	4a48      	ldr	r2, [pc, #288]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80081f0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80081f4:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80081f8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80081fa:	430b      	orrs	r3, r1
 80081fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008200:	6823      	ldr	r3, [r4, #0]
 8008202:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8008206:	d00c      	beq.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008208:	4a41      	ldr	r2, [pc, #260]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800820a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800820e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008212:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8008214:	430b      	orrs	r3, r1
 8008216:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800821a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800821c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008220:	d057      	beq.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0x282>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008222:	6823      	ldr	r3, [r4, #0]
 8008224:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8008228:	d00c      	beq.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800822a:	4a39      	ldr	r2, [pc, #228]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800822c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008230:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8008234:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008236:	430b      	orrs	r3, r1
 8008238:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800823c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800823e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008242:	d04b      	beq.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x28c>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008244:	6823      	ldr	r3, [r4, #0]
 8008246:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800824a:	d00c      	beq.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800824c:	4a30      	ldr	r2, [pc, #192]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800824e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008252:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8008256:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008258:	430b      	orrs	r3, r1
 800825a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800825e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008260:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008264:	d03f      	beq.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x296>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008266:	6823      	ldr	r3, [r4, #0]
 8008268:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800826c:	d00c      	beq.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800826e:	4a28      	ldr	r2, [pc, #160]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8008270:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008274:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8008278:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800827a:	430b      	orrs	r3, r1
 800827c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008280:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008282:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008286:	d033      	beq.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008288:	6823      	ldr	r3, [r4, #0]
 800828a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800828e:	d00c      	beq.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008290:	4a1f      	ldr	r2, [pc, #124]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8008292:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008296:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800829a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800829c:	430b      	orrs	r3, r1
 800829e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80082a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80082a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80082a8:	d027      	beq.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x2aa>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80082aa:	6823      	ldr	r3, [r4, #0]
 80082ac:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80082b0:	d00c      	beq.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80082b2:	4a17      	ldr	r2, [pc, #92]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80082b4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80082b8:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80082bc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80082be:	430b      	orrs	r3, r1
 80082c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80082c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80082c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082ca:	d01b      	beq.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  }

#endif /* QUADSPI */

  return status;
}
 80082cc:	b002      	add	sp, #8
 80082ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80082d2:	68d3      	ldr	r3, [r2, #12]
 80082d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80082d8:	60d3      	str	r3, [r2, #12]
 80082da:	e7a2      	b.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80082dc:	68d3      	ldr	r3, [r2, #12]
 80082de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80082e2:	60d3      	str	r3, [r2, #12]
 80082e4:	e7ae      	b.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80082e6:	68d3      	ldr	r3, [r2, #12]
 80082e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80082ec:	60d3      	str	r3, [r2, #12]
 80082ee:	e7ba      	b.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x216>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80082f0:	68d3      	ldr	r3, [r2, #12]
 80082f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80082f6:	60d3      	str	r3, [r2, #12]
 80082f8:	e7c6      	b.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x238>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80082fa:	68d3      	ldr	r3, [r2, #12]
 80082fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008300:	60d3      	str	r3, [r2, #12]
 8008302:	e7d2      	b.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0x25a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008304:	68d3      	ldr	r3, [r2, #12]
 8008306:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800830a:	60d3      	str	r3, [r2, #12]
  return status;
 800830c:	e7de      	b.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800830e:	bf00      	nop
 8008310:	40021000 	.word	0x40021000
 8008314:	40007000 	.word	0x40007000
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008318:	4b08      	ldr	r3, [pc, #32]	; (800833c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800831a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800831e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8008322:	f47f aeca 	bne.w	80080ba <HAL_RCCEx_PeriphCLKConfig+0x6a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008326:	4a05      	ldr	r2, [pc, #20]	; (800833c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8008328:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800832c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008330:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008332:	430b      	orrs	r3, r1
 8008334:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008338:	2000      	movs	r0, #0
 800833a:	e6b5      	b.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x58>
 800833c:	40021000 	.word	0x40021000

08008340 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008344:	b082      	sub	sp, #8
 8008346:	4681      	mov	r9, r0
 8008348:	460f      	mov	r7, r1
 800834a:	4616      	mov	r6, r2
 800834c:	461d      	mov	r5, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800834e:	f7fd f991 	bl	8005674 <HAL_GetTick>
 8008352:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008354:	442b      	add	r3, r5
 8008356:	eba3 0800 	sub.w	r8, r3, r0
  tmp_tickstart = HAL_GetTick();
 800835a:	f7fd f98b 	bl	8005674 <HAL_GetTick>
 800835e:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008360:	4b2c      	ldr	r3, [pc, #176]	; (8008414 <SPI_WaitFlagStateUntilTimeout+0xd4>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8008368:	fb08 f303 	mul.w	r3, r8, r3
 800836c:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800836e:	f8d9 2000 	ldr.w	r2, [r9]
 8008372:	6894      	ldr	r4, [r2, #8]
 8008374:	ea37 0404 	bics.w	r4, r7, r4
 8008378:	bf0c      	ite	eq
 800837a:	2301      	moveq	r3, #1
 800837c:	2300      	movne	r3, #0
 800837e:	42b3      	cmp	r3, r6
 8008380:	d044      	beq.n	800840c <SPI_WaitFlagStateUntilTimeout+0xcc>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008382:	f1b5 3fff 	cmp.w	r5, #4294967295
 8008386:	d0f4      	beq.n	8008372 <SPI_WaitFlagStateUntilTimeout+0x32>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008388:	f7fd f974 	bl	8005674 <HAL_GetTick>
 800838c:	eba0 000a 	sub.w	r0, r0, sl
 8008390:	4540      	cmp	r0, r8
 8008392:	d207      	bcs.n	80083a4 <SPI_WaitFlagStateUntilTimeout+0x64>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008394:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 8008396:	2b00      	cmp	r3, #0
 8008398:	bf08      	it	eq
 800839a:	4698      	moveq	r8, r3
      }
      count--;
 800839c:	9b01      	ldr	r3, [sp, #4]
 800839e:	3b01      	subs	r3, #1
 80083a0:	9301      	str	r3, [sp, #4]
 80083a2:	e7e4      	b.n	800836e <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80083a4:	f8d9 2000 	ldr.w	r2, [r9]
 80083a8:	6853      	ldr	r3, [r2, #4]
 80083aa:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80083ae:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80083b0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80083b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80083b8:	d00c      	beq.n	80083d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80083ba:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 80083be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083c2:	d016      	beq.n	80083f2 <SPI_WaitFlagStateUntilTimeout+0xb2>
        hspi->State = HAL_SPI_STATE_READY;
 80083c4:	2301      	movs	r3, #1
 80083c6:	f889 305d 	strb.w	r3, [r9, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 80083ca:	2300      	movs	r3, #0
 80083cc:	f889 305c 	strb.w	r3, [r9, #92]	; 0x5c
        return HAL_TIMEOUT;
 80083d0:	2003      	movs	r0, #3
 80083d2:	e01c      	b.n	800840e <SPI_WaitFlagStateUntilTimeout+0xce>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80083d4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80083d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083dc:	d002      	beq.n	80083e4 <SPI_WaitFlagStateUntilTimeout+0xa4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80083de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083e2:	d1ea      	bne.n	80083ba <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 80083e4:	f8d9 2000 	ldr.w	r2, [r9]
 80083e8:	6813      	ldr	r3, [r2, #0]
 80083ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083ee:	6013      	str	r3, [r2, #0]
 80083f0:	e7e3      	b.n	80083ba <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 80083f2:	f8d9 2000 	ldr.w	r2, [r9]
 80083f6:	6813      	ldr	r3, [r2, #0]
 80083f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80083fc:	6013      	str	r3, [r2, #0]
 80083fe:	f8d9 2000 	ldr.w	r2, [r9]
 8008402:	6813      	ldr	r3, [r2, #0]
 8008404:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008408:	6013      	str	r3, [r2, #0]
 800840a:	e7db      	b.n	80083c4 <SPI_WaitFlagStateUntilTimeout+0x84>
    }
  }

  return HAL_OK;
 800840c:	2000      	movs	r0, #0
}
 800840e:	b002      	add	sp, #8
 8008410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008414:	20000550 	.word	0x20000550

08008418 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800841c:	b082      	sub	sp, #8
 800841e:	4680      	mov	r8, r0
 8008420:	460c      	mov	r4, r1
 8008422:	4615      	mov	r5, r2
 8008424:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008426:	2300      	movs	r3, #0
 8008428:	f88d 3003 	strb.w	r3, [sp, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800842c:	f7fd f922 	bl	8005674 <HAL_GetTick>
 8008430:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8008432:	4437      	add	r7, r6
 8008434:	1a3f      	subs	r7, r7, r0
  tmp_tickstart = HAL_GetTick();
 8008436:	f7fd f91d 	bl	8005674 <HAL_GetTick>
 800843a:	4681      	mov	r9, r0

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800843c:	f8d8 a000 	ldr.w	sl, [r8]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008440:	4b33      	ldr	r3, [pc, #204]	; (8008510 <SPI_WaitFifoStateUntilTimeout+0xf8>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008448:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800844c:	0d1b      	lsrs	r3, r3, #20
 800844e:	fb07 f303 	mul.w	r3, r7, r3
 8008452:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8008454:	f8d8 2000 	ldr.w	r2, [r8]
 8008458:	e002      	b.n	8008460 <SPI_WaitFifoStateUntilTimeout+0x48>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 800845a:	f1b6 3fff 	cmp.w	r6, #4294967295
 800845e:	d111      	bne.n	8008484 <SPI_WaitFifoStateUntilTimeout+0x6c>
  while ((hspi->Instance->SR & Fifo) != State)
 8008460:	6893      	ldr	r3, [r2, #8]
 8008462:	ea03 0c04 	and.w	ip, r3, r4
 8008466:	45ac      	cmp	ip, r5
 8008468:	d04e      	beq.n	8008508 <SPI_WaitFifoStateUntilTimeout+0xf0>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800846a:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 800846e:	d1f4      	bne.n	800845a <SPI_WaitFifoStateUntilTimeout+0x42>
 8008470:	2d00      	cmp	r5, #0
 8008472:	d1f2      	bne.n	800845a <SPI_WaitFifoStateUntilTimeout+0x42>
      tmpreg8 = *ptmpreg8;
 8008474:	f89a 300c 	ldrb.w	r3, [sl, #12]
 8008478:	b2db      	uxtb	r3, r3
 800847a:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 800847e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008482:	e7ea      	b.n	800845a <SPI_WaitFifoStateUntilTimeout+0x42>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008484:	f7fd f8f6 	bl	8005674 <HAL_GetTick>
 8008488:	eba0 0009 	sub.w	r0, r0, r9
 800848c:	42b8      	cmp	r0, r7
 800848e:	d207      	bcs.n	80084a0 <SPI_WaitFifoStateUntilTimeout+0x88>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008490:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 8008492:	2b00      	cmp	r3, #0
 8008494:	bf08      	it	eq
 8008496:	461f      	moveq	r7, r3
      }
      count--;
 8008498:	9b01      	ldr	r3, [sp, #4]
 800849a:	3b01      	subs	r3, #1
 800849c:	9301      	str	r3, [sp, #4]
 800849e:	e7d9      	b.n	8008454 <SPI_WaitFifoStateUntilTimeout+0x3c>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80084a0:	f8d8 2000 	ldr.w	r2, [r8]
 80084a4:	6853      	ldr	r3, [r2, #4]
 80084a6:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80084aa:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80084ac:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80084b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80084b4:	d00c      	beq.n	80084d0 <SPI_WaitFifoStateUntilTimeout+0xb8>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80084b6:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 80084ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084be:	d016      	beq.n	80084ee <SPI_WaitFifoStateUntilTimeout+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 80084c0:	2301      	movs	r3, #1
 80084c2:	f888 305d 	strb.w	r3, [r8, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 80084c6:	2300      	movs	r3, #0
 80084c8:	f888 305c 	strb.w	r3, [r8, #92]	; 0x5c
        return HAL_TIMEOUT;
 80084cc:	2003      	movs	r0, #3
 80084ce:	e01c      	b.n	800850a <SPI_WaitFifoStateUntilTimeout+0xf2>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80084d0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80084d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084d8:	d002      	beq.n	80084e0 <SPI_WaitFifoStateUntilTimeout+0xc8>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80084da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084de:	d1ea      	bne.n	80084b6 <SPI_WaitFifoStateUntilTimeout+0x9e>
          __HAL_SPI_DISABLE(hspi);
 80084e0:	f8d8 2000 	ldr.w	r2, [r8]
 80084e4:	6813      	ldr	r3, [r2, #0]
 80084e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084ea:	6013      	str	r3, [r2, #0]
 80084ec:	e7e3      	b.n	80084b6 <SPI_WaitFifoStateUntilTimeout+0x9e>
          SPI_RESET_CRC(hspi);
 80084ee:	f8d8 2000 	ldr.w	r2, [r8]
 80084f2:	6813      	ldr	r3, [r2, #0]
 80084f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80084f8:	6013      	str	r3, [r2, #0]
 80084fa:	f8d8 2000 	ldr.w	r2, [r8]
 80084fe:	6813      	ldr	r3, [r2, #0]
 8008500:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008504:	6013      	str	r3, [r2, #0]
 8008506:	e7db      	b.n	80084c0 <SPI_WaitFifoStateUntilTimeout+0xa8>
    }
  }

  return HAL_OK;
 8008508:	2000      	movs	r0, #0
}
 800850a:	b002      	add	sp, #8
 800850c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008510:	20000550 	.word	0x20000550

08008514 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008514:	b570      	push	{r4, r5, r6, lr}
 8008516:	b082      	sub	sp, #8
 8008518:	4604      	mov	r4, r0
 800851a:	460d      	mov	r5, r1
 800851c:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800851e:	9200      	str	r2, [sp, #0]
 8008520:	460b      	mov	r3, r1
 8008522:	2200      	movs	r2, #0
 8008524:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008528:	f7ff ff76 	bl	8008418 <SPI_WaitFifoStateUntilTimeout>
 800852c:	b9b0      	cbnz	r0, 800855c <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800852e:	9600      	str	r6, [sp, #0]
 8008530:	462b      	mov	r3, r5
 8008532:	2200      	movs	r2, #0
 8008534:	2180      	movs	r1, #128	; 0x80
 8008536:	4620      	mov	r0, r4
 8008538:	f7ff ff02 	bl	8008340 <SPI_WaitFlagStateUntilTimeout>
 800853c:	b9a8      	cbnz	r0, 800856a <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800853e:	9600      	str	r6, [sp, #0]
 8008540:	462b      	mov	r3, r5
 8008542:	2200      	movs	r2, #0
 8008544:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008548:	4620      	mov	r0, r4
 800854a:	f7ff ff65 	bl	8008418 <SPI_WaitFifoStateUntilTimeout>
 800854e:	b150      	cbz	r0, 8008566 <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008550:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008552:	f043 0320 	orr.w	r3, r3, #32
 8008556:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8008558:	2003      	movs	r0, #3
 800855a:	e004      	b.n	8008566 <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800855c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800855e:	f043 0320 	orr.w	r3, r3, #32
 8008562:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8008564:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 8008566:	b002      	add	sp, #8
 8008568:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800856a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800856c:	f043 0320 	orr.w	r3, r3, #32
 8008570:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8008572:	2003      	movs	r0, #3
 8008574:	e7f7      	b.n	8008566 <SPI_EndRxTxTransaction+0x52>

08008576 <SPI_EndRxTransaction>:
{
 8008576:	b570      	push	{r4, r5, r6, lr}
 8008578:	b082      	sub	sp, #8
 800857a:	4604      	mov	r4, r0
 800857c:	460d      	mov	r5, r1
 800857e:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008580:	6843      	ldr	r3, [r0, #4]
 8008582:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008586:	d00d      	beq.n	80085a4 <SPI_EndRxTransaction+0x2e>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008588:	9600      	str	r6, [sp, #0]
 800858a:	462b      	mov	r3, r5
 800858c:	2200      	movs	r2, #0
 800858e:	2180      	movs	r1, #128	; 0x80
 8008590:	4620      	mov	r0, r4
 8008592:	f7ff fed5 	bl	8008340 <SPI_WaitFlagStateUntilTimeout>
 8008596:	b990      	cbnz	r0, 80085be <SPI_EndRxTransaction+0x48>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008598:	6863      	ldr	r3, [r4, #4]
 800859a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800859e:	d014      	beq.n	80085ca <SPI_EndRxTransaction+0x54>
}
 80085a0:	b002      	add	sp, #8
 80085a2:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085a4:	6883      	ldr	r3, [r0, #8]
 80085a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085aa:	d002      	beq.n	80085b2 <SPI_EndRxTransaction+0x3c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80085ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085b0:	d1ea      	bne.n	8008588 <SPI_EndRxTransaction+0x12>
    __HAL_SPI_DISABLE(hspi);
 80085b2:	6822      	ldr	r2, [r4, #0]
 80085b4:	6813      	ldr	r3, [r2, #0]
 80085b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085ba:	6013      	str	r3, [r2, #0]
 80085bc:	e7e4      	b.n	8008588 <SPI_EndRxTransaction+0x12>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085be:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80085c0:	f043 0320 	orr.w	r3, r3, #32
 80085c4:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80085c6:	2003      	movs	r0, #3
 80085c8:	e7ea      	b.n	80085a0 <SPI_EndRxTransaction+0x2a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085ca:	68a3      	ldr	r3, [r4, #8]
 80085cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085d0:	d002      	beq.n	80085d8 <SPI_EndRxTransaction+0x62>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80085d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085d6:	d1e3      	bne.n	80085a0 <SPI_EndRxTransaction+0x2a>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80085d8:	9600      	str	r6, [sp, #0]
 80085da:	462b      	mov	r3, r5
 80085dc:	2200      	movs	r2, #0
 80085de:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80085e2:	4620      	mov	r0, r4
 80085e4:	f7ff ff18 	bl	8008418 <SPI_WaitFifoStateUntilTimeout>
 80085e8:	2800      	cmp	r0, #0
 80085ea:	d0d9      	beq.n	80085a0 <SPI_EndRxTransaction+0x2a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085ec:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80085ee:	f043 0320 	orr.w	r3, r3, #32
 80085f2:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 80085f4:	2003      	movs	r0, #3
 80085f6:	e7d3      	b.n	80085a0 <SPI_EndRxTransaction+0x2a>

080085f8 <HAL_SPI_Init>:
  if (hspi == NULL)
 80085f8:	2800      	cmp	r0, #0
 80085fa:	d06d      	beq.n	80086d8 <HAL_SPI_Init+0xe0>
{
 80085fc:	b510      	push	{r4, lr}
 80085fe:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008600:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008602:	b933      	cbnz	r3, 8008612 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008604:	6843      	ldr	r3, [r0, #4]
 8008606:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800860a:	d005      	beq.n	8008618 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800860c:	2300      	movs	r3, #0
 800860e:	61c3      	str	r3, [r0, #28]
 8008610:	e002      	b.n	8008618 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008612:	2300      	movs	r3, #0
 8008614:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008616:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008618:	2300      	movs	r3, #0
 800861a:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800861c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8008620:	2b00      	cmp	r3, #0
 8008622:	d053      	beq.n	80086cc <HAL_SPI_Init+0xd4>
  hspi->State = HAL_SPI_STATE_BUSY;
 8008624:	2302      	movs	r3, #2
 8008626:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800862a:	6822      	ldr	r2, [r4, #0]
 800862c:	6813      	ldr	r3, [r2, #0]
 800862e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008632:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008634:	68e3      	ldr	r3, [r4, #12]
 8008636:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800863a:	bf8c      	ite	hi
 800863c:	2100      	movhi	r1, #0
 800863e:	2101      	movls	r1, #1
 8008640:	0309      	lsls	r1, r1, #12
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008642:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008646:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800864a:	bf1c      	itt	ne
 800864c:	2300      	movne	r3, #0
 800864e:	62a3      	strne	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008650:	6822      	ldr	r2, [r4, #0]
 8008652:	6863      	ldr	r3, [r4, #4]
 8008654:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8008658:	68a0      	ldr	r0, [r4, #8]
 800865a:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 800865e:	4303      	orrs	r3, r0
 8008660:	6920      	ldr	r0, [r4, #16]
 8008662:	f000 0002 	and.w	r0, r0, #2
 8008666:	4303      	orrs	r3, r0
 8008668:	6960      	ldr	r0, [r4, #20]
 800866a:	f000 0001 	and.w	r0, r0, #1
 800866e:	4303      	orrs	r3, r0
 8008670:	69a0      	ldr	r0, [r4, #24]
 8008672:	f400 7000 	and.w	r0, r0, #512	; 0x200
 8008676:	4303      	orrs	r3, r0
 8008678:	69e0      	ldr	r0, [r4, #28]
 800867a:	f000 0038 	and.w	r0, r0, #56	; 0x38
 800867e:	4303      	orrs	r3, r0
 8008680:	6a20      	ldr	r0, [r4, #32]
 8008682:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8008686:	4303      	orrs	r3, r0
 8008688:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800868a:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 800868e:	4303      	orrs	r3, r0
 8008690:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008692:	6822      	ldr	r2, [r4, #0]
 8008694:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008696:	f003 0310 	and.w	r3, r3, #16
 800869a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800869c:	f000 0008 	and.w	r0, r0, #8
 80086a0:	4303      	orrs	r3, r0
 80086a2:	68e0      	ldr	r0, [r4, #12]
 80086a4:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
 80086a8:	4303      	orrs	r3, r0
 80086aa:	8b60      	ldrh	r0, [r4, #26]
 80086ac:	f000 0004 	and.w	r0, r0, #4
 80086b0:	4303      	orrs	r3, r0
 80086b2:	430b      	orrs	r3, r1
 80086b4:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80086b6:	6822      	ldr	r2, [r4, #0]
 80086b8:	69d3      	ldr	r3, [r2, #28]
 80086ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80086be:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80086c0:	2000      	movs	r0, #0
 80086c2:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80086c4:	2301      	movs	r3, #1
 80086c6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 80086ca:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80086cc:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 80086d0:	4620      	mov	r0, r4
 80086d2:	f7fc fba1 	bl	8004e18 <HAL_SPI_MspInit>
 80086d6:	e7a5      	b.n	8008624 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 80086d8:	2001      	movs	r0, #1
}
 80086da:	4770      	bx	lr

080086dc <HAL_SPI_TransmitReceive_DMA>:
{
 80086dc:	b538      	push	{r3, r4, r5, lr}
 80086de:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 80086e0:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 80086e4:	2801      	cmp	r0, #1
 80086e6:	f000 80f7 	beq.w	80088d8 <HAL_SPI_TransmitReceive_DMA+0x1fc>
 80086ea:	2001      	movs	r0, #1
 80086ec:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
  tmp_state           = hspi->State;
 80086f0:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 80086f4:	b2c0      	uxtb	r0, r0
  tmp_mode            = hspi->Init.Mode;
 80086f6:	6865      	ldr	r5, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80086f8:	2801      	cmp	r0, #1
 80086fa:	d00a      	beq.n	8008712 <HAL_SPI_TransmitReceive_DMA+0x36>
 80086fc:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
 8008700:	f040 80db 	bne.w	80088ba <HAL_SPI_TransmitReceive_DMA+0x1de>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008704:	68a5      	ldr	r5, [r4, #8]
 8008706:	2d00      	cmp	r5, #0
 8008708:	f040 80dc 	bne.w	80088c4 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 800870c:	2804      	cmp	r0, #4
 800870e:	f040 80db 	bne.w	80088c8 <HAL_SPI_TransmitReceive_DMA+0x1ec>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008712:	2900      	cmp	r1, #0
 8008714:	f000 80da 	beq.w	80088cc <HAL_SPI_TransmitReceive_DMA+0x1f0>
 8008718:	2a00      	cmp	r2, #0
 800871a:	f000 80d9 	beq.w	80088d0 <HAL_SPI_TransmitReceive_DMA+0x1f4>
 800871e:	2b00      	cmp	r3, #0
 8008720:	f000 80d8 	beq.w	80088d4 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008724:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8008728:	b2c0      	uxtb	r0, r0
 800872a:	2804      	cmp	r0, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800872c:	bf1c      	itt	ne
 800872e:	2005      	movne	r0, #5
 8008730:	f884 005d 	strbne.w	r0, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008734:	2000      	movs	r0, #0
 8008736:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008738:	63a1      	str	r1, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800873a:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800873c:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800873e:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8008740:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 8008744:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->RxISR       = NULL;
 8008748:	64e0      	str	r0, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800874a:	6520      	str	r0, [r4, #80]	; 0x50
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800874c:	6822      	ldr	r2, [r4, #0]
 800874e:	6853      	ldr	r3, [r2, #4]
 8008750:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8008754:	6053      	str	r3, [r2, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008756:	68e3      	ldr	r3, [r4, #12]
 8008758:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800875c:	d928      	bls.n	80087b0 <HAL_SPI_TransmitReceive_DMA+0xd4>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800875e:	6822      	ldr	r2, [r4, #0]
 8008760:	6853      	ldr	r3, [r2, #4]
 8008762:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008766:	6053      	str	r3, [r2, #4]
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8008768:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800876c:	b2db      	uxtb	r3, r3
 800876e:	2b04      	cmp	r3, #4
 8008770:	d069      	beq.n	8008846 <HAL_SPI_TransmitReceive_DMA+0x16a>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8008772:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008774:	4a59      	ldr	r2, [pc, #356]	; (80088dc <HAL_SPI_TransmitReceive_DMA+0x200>)
 8008776:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8008778:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800877a:	4a59      	ldr	r2, [pc, #356]	; (80088e0 <HAL_SPI_TransmitReceive_DMA+0x204>)
 800877c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800877e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008780:	4a58      	ldr	r2, [pc, #352]	; (80088e4 <HAL_SPI_TransmitReceive_DMA+0x208>)
 8008782:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmarx->XferAbortCallback = NULL;
 8008784:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008786:	2200      	movs	r2, #0
 8008788:	639a      	str	r2, [r3, #56]	; 0x38
                                 hspi->RxXferCount))
 800878a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800878e:	6821      	ldr	r1, [r4, #0]
 8008790:	b29b      	uxth	r3, r3
 8008792:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008794:	310c      	adds	r1, #12
 8008796:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008798:	f7fe f85c 	bl	8006854 <HAL_DMA_Start_IT>
 800879c:	2800      	cmp	r0, #0
 800879e:	d059      	beq.n	8008854 <HAL_SPI_TransmitReceive_DMA+0x178>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80087a0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80087a2:	f043 0310 	orr.w	r3, r3, #16
 80087a6:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 80087a8:	2001      	movs	r0, #1
 80087aa:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
    goto error;
 80087ae:	e085      	b.n	80088bc <HAL_SPI_TransmitReceive_DMA+0x1e0>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80087b0:	6822      	ldr	r2, [r4, #0]
 80087b2:	6853      	ldr	r3, [r2, #4]
 80087b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80087b8:	6053      	str	r3, [r2, #4]
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80087ba:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80087bc:	699b      	ldr	r3, [r3, #24]
 80087be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087c2:	d01a      	beq.n	80087fa <HAL_SPI_TransmitReceive_DMA+0x11e>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80087c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80087c6:	699b      	ldr	r3, [r3, #24]
 80087c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087cc:	d1cc      	bne.n	8008768 <HAL_SPI_TransmitReceive_DMA+0x8c>
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80087ce:	6822      	ldr	r2, [r4, #0]
 80087d0:	6853      	ldr	r3, [r2, #4]
 80087d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087d6:	6053      	str	r3, [r2, #4]
      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80087d8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80087dc:	f013 0f01 	tst.w	r3, #1
 80087e0:	d124      	bne.n	800882c <HAL_SPI_TransmitReceive_DMA+0x150>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80087e2:	6822      	ldr	r2, [r4, #0]
 80087e4:	6853      	ldr	r3, [r2, #4]
 80087e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80087ea:	6053      	str	r3, [r2, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80087ec:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80087f0:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80087f4:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 80087f8:	e7b6      	b.n	8008768 <HAL_SPI_TransmitReceive_DMA+0x8c>
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80087fa:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 80087fc:	f013 0f01 	tst.w	r3, #1
 8008800:	d109      	bne.n	8008816 <HAL_SPI_TransmitReceive_DMA+0x13a>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008802:	6822      	ldr	r2, [r4, #0]
 8008804:	6853      	ldr	r3, [r2, #4]
 8008806:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800880a:	6053      	str	r3, [r2, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800880c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800880e:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8008812:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8008814:	e7d6      	b.n	80087c4 <HAL_SPI_TransmitReceive_DMA+0xe8>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008816:	6822      	ldr	r2, [r4, #0]
 8008818:	6853      	ldr	r3, [r2, #4]
 800881a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800881e:	6053      	str	r3, [r2, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8008820:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008822:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8008826:	3301      	adds	r3, #1
 8008828:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800882a:	e7cb      	b.n	80087c4 <HAL_SPI_TransmitReceive_DMA+0xe8>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800882c:	6822      	ldr	r2, [r4, #0]
 800882e:	6853      	ldr	r3, [r2, #4]
 8008830:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008834:	6053      	str	r3, [r2, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8008836:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800883a:	f3c3 034e 	ubfx	r3, r3, #1, #15
 800883e:	3301      	adds	r3, #1
 8008840:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8008844:	e790      	b.n	8008768 <HAL_SPI_TransmitReceive_DMA+0x8c>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8008846:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008848:	4a27      	ldr	r2, [pc, #156]	; (80088e8 <HAL_SPI_TransmitReceive_DMA+0x20c>)
 800884a:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800884c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800884e:	4a27      	ldr	r2, [pc, #156]	; (80088ec <HAL_SPI_TransmitReceive_DMA+0x210>)
 8008850:	62da      	str	r2, [r3, #44]	; 0x2c
 8008852:	e794      	b.n	800877e <HAL_SPI_TransmitReceive_DMA+0xa2>
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008854:	6822      	ldr	r2, [r4, #0]
 8008856:	6853      	ldr	r3, [r2, #4]
 8008858:	f043 0301 	orr.w	r3, r3, #1
 800885c:	6053      	str	r3, [r2, #4]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800885e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8008860:	2300      	movs	r3, #0
 8008862:	6313      	str	r3, [r2, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8008864:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8008866:	62d3      	str	r3, [r2, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8008868:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800886a:	6353      	str	r3, [r2, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800886c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800886e:	6393      	str	r3, [r2, #56]	; 0x38
                                 hspi->TxXferCount))
 8008870:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008872:	6822      	ldr	r2, [r4, #0]
 8008874:	b29b      	uxth	r3, r3
 8008876:	320c      	adds	r2, #12
 8008878:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800887a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800887c:	f7fd ffea 	bl	8006854 <HAL_DMA_Start_IT>
 8008880:	b998      	cbnz	r0, 80088aa <HAL_SPI_TransmitReceive_DMA+0x1ce>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008882:	6823      	ldr	r3, [r4, #0]
 8008884:	681a      	ldr	r2, [r3, #0]
 8008886:	f012 0f40 	tst.w	r2, #64	; 0x40
 800888a:	d103      	bne.n	8008894 <HAL_SPI_TransmitReceive_DMA+0x1b8>
    __HAL_SPI_ENABLE(hspi);
 800888c:	681a      	ldr	r2, [r3, #0]
 800888e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008892:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008894:	6822      	ldr	r2, [r4, #0]
 8008896:	6853      	ldr	r3, [r2, #4]
 8008898:	f043 0320 	orr.w	r3, r3, #32
 800889c:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800889e:	6822      	ldr	r2, [r4, #0]
 80088a0:	6853      	ldr	r3, [r2, #4]
 80088a2:	f043 0302 	orr.w	r3, r3, #2
 80088a6:	6053      	str	r3, [r2, #4]
 80088a8:	e008      	b.n	80088bc <HAL_SPI_TransmitReceive_DMA+0x1e0>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80088aa:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80088ac:	f043 0310 	orr.w	r3, r3, #16
 80088b0:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 80088b2:	2001      	movs	r0, #1
 80088b4:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
    goto error;
 80088b8:	e000      	b.n	80088bc <HAL_SPI_TransmitReceive_DMA+0x1e0>
    errorcode = HAL_BUSY;
 80088ba:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 80088bc:	2300      	movs	r3, #0
 80088be:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80088c2:	bd38      	pop	{r3, r4, r5, pc}
    errorcode = HAL_BUSY;
 80088c4:	2002      	movs	r0, #2
 80088c6:	e7f9      	b.n	80088bc <HAL_SPI_TransmitReceive_DMA+0x1e0>
 80088c8:	2002      	movs	r0, #2
 80088ca:	e7f7      	b.n	80088bc <HAL_SPI_TransmitReceive_DMA+0x1e0>
    errorcode = HAL_ERROR;
 80088cc:	2001      	movs	r0, #1
 80088ce:	e7f5      	b.n	80088bc <HAL_SPI_TransmitReceive_DMA+0x1e0>
 80088d0:	2001      	movs	r0, #1
 80088d2:	e7f3      	b.n	80088bc <HAL_SPI_TransmitReceive_DMA+0x1e0>
 80088d4:	2001      	movs	r0, #1
 80088d6:	e7f1      	b.n	80088bc <HAL_SPI_TransmitReceive_DMA+0x1e0>
  __HAL_LOCK(hspi);
 80088d8:	2002      	movs	r0, #2
 80088da:	e7f2      	b.n	80088c2 <HAL_SPI_TransmitReceive_DMA+0x1e6>
 80088dc:	08008901 	.word	0x08008901
 80088e0:	0800899f 	.word	0x0800899f
 80088e4:	0800890d 	.word	0x0800890d
 80088e8:	080088f5 	.word	0x080088f5
 80088ec:	0800892f 	.word	0x0800892f

080088f0 <HAL_SPI_RxCpltCallback>:
}
 80088f0:	4770      	bx	lr

080088f2 <HAL_SPI_RxHalfCpltCallback>:
}
 80088f2:	4770      	bx	lr

080088f4 <SPI_DMAHalfReceiveCplt>:
{
 80088f4:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 80088f6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80088f8:	f7ff fffb 	bl	80088f2 <HAL_SPI_RxHalfCpltCallback>
}
 80088fc:	bd08      	pop	{r3, pc}

080088fe <HAL_SPI_TxRxHalfCpltCallback>:
}
 80088fe:	4770      	bx	lr

08008900 <SPI_DMAHalfTransmitReceiveCplt>:
{
 8008900:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8008902:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8008904:	f7ff fffb 	bl	80088fe <HAL_SPI_TxRxHalfCpltCallback>
}
 8008908:	bd08      	pop	{r3, pc}

0800890a <HAL_SPI_ErrorCallback>:
}
 800890a:	4770      	bx	lr

0800890c <SPI_DMAError>:
{
 800890c:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800890e:	6a80      	ldr	r0, [r0, #40]	; 0x28
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008910:	6802      	ldr	r2, [r0, #0]
 8008912:	6853      	ldr	r3, [r2, #4]
 8008914:	f023 0303 	bic.w	r3, r3, #3
 8008918:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800891a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800891c:	f043 0310 	orr.w	r3, r3, #16
 8008920:	6603      	str	r3, [r0, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8008922:	2301      	movs	r3, #1
 8008924:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  HAL_SPI_ErrorCallback(hspi);
 8008928:	f7ff ffef 	bl	800890a <HAL_SPI_ErrorCallback>
}
 800892c:	bd08      	pop	{r3, pc}

0800892e <SPI_DMAReceiveCplt>:
{
 800892e:	b538      	push	{r3, r4, r5, lr}
 8008930:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008932:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 8008934:	f7fc fe9e 	bl	8005674 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8008938:	682b      	ldr	r3, [r5, #0]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f013 0f20 	tst.w	r3, #32
 8008940:	d11f      	bne.n	8008982 <SPI_DMAReceiveCplt+0x54>
 8008942:	4602      	mov	r2, r0
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008944:	6821      	ldr	r1, [r4, #0]
 8008946:	684b      	ldr	r3, [r1, #4]
 8008948:	f023 0320 	bic.w	r3, r3, #32
 800894c:	604b      	str	r3, [r1, #4]
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800894e:	68a3      	ldr	r3, [r4, #8]
 8008950:	b91b      	cbnz	r3, 800895a <SPI_DMAReceiveCplt+0x2c>
 8008952:	6863      	ldr	r3, [r4, #4]
 8008954:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008958:	d017      	beq.n	800898a <SPI_DMAReceiveCplt+0x5c>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800895a:	6821      	ldr	r1, [r4, #0]
 800895c:	684b      	ldr	r3, [r1, #4]
 800895e:	f023 0301 	bic.w	r3, r3, #1
 8008962:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008964:	2164      	movs	r1, #100	; 0x64
 8008966:	4620      	mov	r0, r4
 8008968:	f7ff fe05 	bl	8008576 <SPI_EndRxTransaction>
 800896c:	b108      	cbz	r0, 8008972 <SPI_DMAReceiveCplt+0x44>
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800896e:	2320      	movs	r3, #32
 8008970:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->RxXferCount = 0U;
 8008972:	2300      	movs	r3, #0
 8008974:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8008978:	2301      	movs	r3, #1
 800897a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800897e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008980:	b94b      	cbnz	r3, 8008996 <SPI_DMAReceiveCplt+0x68>
  HAL_SPI_RxCpltCallback(hspi);
 8008982:	4620      	mov	r0, r4
 8008984:	f7ff ffb4 	bl	80088f0 <HAL_SPI_RxCpltCallback>
}
 8008988:	bd38      	pop	{r3, r4, r5, pc}
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800898a:	6821      	ldr	r1, [r4, #0]
 800898c:	684b      	ldr	r3, [r1, #4]
 800898e:	f023 0303 	bic.w	r3, r3, #3
 8008992:	604b      	str	r3, [r1, #4]
 8008994:	e7e6      	b.n	8008964 <SPI_DMAReceiveCplt+0x36>
      HAL_SPI_ErrorCallback(hspi);
 8008996:	4620      	mov	r0, r4
 8008998:	f7ff ffb7 	bl	800890a <HAL_SPI_ErrorCallback>
      return;
 800899c:	e7f4      	b.n	8008988 <SPI_DMAReceiveCplt+0x5a>

0800899e <SPI_DMATransmitReceiveCplt>:
{
 800899e:	b538      	push	{r3, r4, r5, lr}
 80089a0:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80089a2:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 80089a4:	f7fc fe66 	bl	8005674 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80089a8:	682b      	ldr	r3, [r5, #0]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f013 0f20 	tst.w	r3, #32
 80089b0:	d11c      	bne.n	80089ec <SPI_DMATransmitReceiveCplt+0x4e>
 80089b2:	4602      	mov	r2, r0
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80089b4:	6821      	ldr	r1, [r4, #0]
 80089b6:	684b      	ldr	r3, [r1, #4]
 80089b8:	f023 0320 	bic.w	r3, r3, #32
 80089bc:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80089be:	2164      	movs	r1, #100	; 0x64
 80089c0:	4620      	mov	r0, r4
 80089c2:	f7ff fda7 	bl	8008514 <SPI_EndRxTxTransaction>
 80089c6:	b118      	cbz	r0, 80089d0 <SPI_DMATransmitReceiveCplt+0x32>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80089c8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80089ca:	f043 0320 	orr.w	r3, r3, #32
 80089ce:	6623      	str	r3, [r4, #96]	; 0x60
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80089d0:	6822      	ldr	r2, [r4, #0]
 80089d2:	6853      	ldr	r3, [r2, #4]
 80089d4:	f023 0303 	bic.w	r3, r3, #3
 80089d8:	6053      	str	r3, [r2, #4]
    hspi->TxXferCount = 0U;
 80089da:	2300      	movs	r3, #0
 80089dc:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 80089de:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80089e2:	2301      	movs	r3, #1
 80089e4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80089e8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80089ea:	b91b      	cbnz	r3, 80089f4 <SPI_DMATransmitReceiveCplt+0x56>
  HAL_SPI_TxRxCpltCallback(hspi);
 80089ec:	4620      	mov	r0, r4
 80089ee:	f7fa fceb 	bl	80033c8 <HAL_SPI_TxRxCpltCallback>
}
 80089f2:	bd38      	pop	{r3, r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 80089f4:	4620      	mov	r0, r4
 80089f6:	f7ff ff88 	bl	800890a <HAL_SPI_ErrorCallback>
      return;
 80089fa:	e7fa      	b.n	80089f2 <SPI_DMATransmitReceiveCplt+0x54>

080089fc <HAL_SPI_IRQHandler>:
{
 80089fc:	b510      	push	{r4, lr}
 80089fe:	b084      	sub	sp, #16
 8008a00:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8008a02:	6802      	ldr	r2, [r0, #0]
 8008a04:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8008a06:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008a08:	f003 0041 	and.w	r0, r3, #65	; 0x41
 8008a0c:	2801      	cmp	r0, #1
 8008a0e:	d067      	beq.n	8008ae0 <HAL_SPI_IRQHandler+0xe4>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008a10:	f013 0f02 	tst.w	r3, #2
 8008a14:	d002      	beq.n	8008a1c <HAL_SPI_IRQHandler+0x20>
 8008a16:	f011 0f80 	tst.w	r1, #128	; 0x80
 8008a1a:	d168      	bne.n	8008aee <HAL_SPI_IRQHandler+0xf2>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008a1c:	f413 7fb0 	tst.w	r3, #352	; 0x160
 8008a20:	d068      	beq.n	8008af4 <HAL_SPI_IRQHandler+0xf8>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008a22:	f011 0f20 	tst.w	r1, #32
 8008a26:	d065      	beq.n	8008af4 <HAL_SPI_IRQHandler+0xf8>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008a28:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008a2c:	d00f      	beq.n	8008a4e <HAL_SPI_IRQHandler+0x52>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008a2e:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8008a32:	b2c0      	uxtb	r0, r0
 8008a34:	2803      	cmp	r0, #3
 8008a36:	d05f      	beq.n	8008af8 <HAL_SPI_IRQHandler+0xfc>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008a38:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8008a3a:	f040 0004 	orr.w	r0, r0, #4
 8008a3e:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008a40:	2000      	movs	r0, #0
 8008a42:	9000      	str	r0, [sp, #0]
 8008a44:	68d0      	ldr	r0, [r2, #12]
 8008a46:	9000      	str	r0, [sp, #0]
 8008a48:	6890      	ldr	r0, [r2, #8]
 8008a4a:	9000      	str	r0, [sp, #0]
 8008a4c:	9800      	ldr	r0, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008a4e:	f013 0f20 	tst.w	r3, #32
 8008a52:	d00c      	beq.n	8008a6e <HAL_SPI_IRQHandler+0x72>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008a54:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8008a56:	f040 0001 	orr.w	r0, r0, #1
 8008a5a:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008a5c:	2000      	movs	r0, #0
 8008a5e:	9002      	str	r0, [sp, #8]
 8008a60:	6890      	ldr	r0, [r2, #8]
 8008a62:	9002      	str	r0, [sp, #8]
 8008a64:	6810      	ldr	r0, [r2, #0]
 8008a66:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8008a6a:	6010      	str	r0, [r2, #0]
 8008a6c:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008a6e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008a72:	d009      	beq.n	8008a88 <HAL_SPI_IRQHandler+0x8c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008a74:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008a76:	f043 0308 	orr.w	r3, r3, #8
 8008a7a:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	9303      	str	r3, [sp, #12]
 8008a80:	6823      	ldr	r3, [r4, #0]
 8008a82:	689b      	ldr	r3, [r3, #8]
 8008a84:	9303      	str	r3, [sp, #12]
 8008a86:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008a88:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d032      	beq.n	8008af4 <HAL_SPI_IRQHandler+0xf8>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008a8e:	6822      	ldr	r2, [r4, #0]
 8008a90:	6853      	ldr	r3, [r2, #4]
 8008a92:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8008a96:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008a9e:	f011 0f03 	tst.w	r1, #3
 8008aa2:	d031      	beq.n	8008b08 <HAL_SPI_IRQHandler+0x10c>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008aa4:	6822      	ldr	r2, [r4, #0]
 8008aa6:	6853      	ldr	r3, [r2, #4]
 8008aa8:	f023 0303 	bic.w	r3, r3, #3
 8008aac:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 8008aae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008ab0:	b14b      	cbz	r3, 8008ac6 <HAL_SPI_IRQHandler+0xca>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008ab2:	4a17      	ldr	r2, [pc, #92]	; (8008b10 <HAL_SPI_IRQHandler+0x114>)
 8008ab4:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008ab6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ab8:	f7fd ff4c 	bl	8006954 <HAL_DMA_Abort_IT>
 8008abc:	b118      	cbz	r0, 8008ac6 <HAL_SPI_IRQHandler+0xca>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008abe:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008ac0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ac4:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8008ac6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008ac8:	b1a3      	cbz	r3, 8008af4 <HAL_SPI_IRQHandler+0xf8>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008aca:	4a11      	ldr	r2, [pc, #68]	; (8008b10 <HAL_SPI_IRQHandler+0x114>)
 8008acc:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008ace:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ad0:	f7fd ff40 	bl	8006954 <HAL_DMA_Abort_IT>
 8008ad4:	b170      	cbz	r0, 8008af4 <HAL_SPI_IRQHandler+0xf8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008ad6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008ad8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008adc:	6623      	str	r3, [r4, #96]	; 0x60
 8008ade:	e009      	b.n	8008af4 <HAL_SPI_IRQHandler+0xf8>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008ae0:	f011 0f40 	tst.w	r1, #64	; 0x40
 8008ae4:	d094      	beq.n	8008a10 <HAL_SPI_IRQHandler+0x14>
    hspi->RxISR(hspi);
 8008ae6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008ae8:	4620      	mov	r0, r4
 8008aea:	4798      	blx	r3
    return;
 8008aec:	e002      	b.n	8008af4 <HAL_SPI_IRQHandler+0xf8>
    hspi->TxISR(hspi);
 8008aee:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008af0:	4620      	mov	r0, r4
 8008af2:	4798      	blx	r3
}
 8008af4:	b004      	add	sp, #16
 8008af6:	bd10      	pop	{r4, pc}
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008af8:	2300      	movs	r3, #0
 8008afa:	9301      	str	r3, [sp, #4]
 8008afc:	68d3      	ldr	r3, [r2, #12]
 8008afe:	9301      	str	r3, [sp, #4]
 8008b00:	6893      	ldr	r3, [r2, #8]
 8008b02:	9301      	str	r3, [sp, #4]
 8008b04:	9b01      	ldr	r3, [sp, #4]
        return;
 8008b06:	e7f5      	b.n	8008af4 <HAL_SPI_IRQHandler+0xf8>
        HAL_SPI_ErrorCallback(hspi);
 8008b08:	4620      	mov	r0, r4
 8008b0a:	f7ff fefe 	bl	800890a <HAL_SPI_ErrorCallback>
 8008b0e:	e7f1      	b.n	8008af4 <HAL_SPI_IRQHandler+0xf8>
 8008b10:	08008b15 	.word	0x08008b15

08008b14 <SPI_DMAAbortOnError>:
{
 8008b14:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008b16:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8008b1e:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 8008b20:	f7ff fef3 	bl	800890a <HAL_SPI_ErrorCallback>
}
 8008b24:	bd08      	pop	{r3, pc}
	...

08008b28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b28:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b2a:	6a03      	ldr	r3, [r0, #32]
 8008b2c:	f023 0301 	bic.w	r3, r3, #1
 8008b30:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b32:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b34:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b36:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008b38:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008b3c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b40:	680c      	ldr	r4, [r1, #0]
 8008b42:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008b44:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008b48:	688c      	ldr	r4, [r1, #8]
 8008b4a:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008b4c:	4c21      	ldr	r4, [pc, #132]	; (8008bd4 <TIM_OC1_SetConfig+0xac>)
 8008b4e:	42a0      	cmp	r0, r4
 8008b50:	d02a      	beq.n	8008ba8 <TIM_OC1_SetConfig+0x80>
 8008b52:	4d21      	ldr	r5, [pc, #132]	; (8008bd8 <TIM_OC1_SetConfig+0xb0>)
 8008b54:	42a8      	cmp	r0, r5
 8008b56:	d019      	beq.n	8008b8c <TIM_OC1_SetConfig+0x64>
 8008b58:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
 8008b5c:	42a0      	cmp	r0, r4
 8008b5e:	d01c      	beq.n	8008b9a <TIM_OC1_SetConfig+0x72>
 8008b60:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008b64:	42a0      	cmp	r0, r4
 8008b66:	d00a      	beq.n	8008b7e <TIM_OC1_SetConfig+0x56>
 8008b68:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008b6c:	42a0      	cmp	r0, r4
 8008b6e:	d129      	bne.n	8008bc4 <TIM_OC1_SetConfig+0x9c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008b70:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008b74:	68cc      	ldr	r4, [r1, #12]
 8008b76:	4323      	orrs	r3, r4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008b78:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b7c:	e01a      	b.n	8008bb4 <TIM_OC1_SetConfig+0x8c>
    tmpccer &= ~TIM_CCER_CC1NP;
 8008b7e:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8008b82:	68cc      	ldr	r4, [r1, #12]
 8008b84:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 8008b86:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b8a:	e013      	b.n	8008bb4 <TIM_OC1_SetConfig+0x8c>
    tmpccer &= ~TIM_CCER_CC1NP;
 8008b8c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8008b90:	68cc      	ldr	r4, [r1, #12]
 8008b92:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 8008b94:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b98:	e00c      	b.n	8008bb4 <TIM_OC1_SetConfig+0x8c>
    tmpccer &= ~TIM_CCER_CC1NP;
 8008b9a:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8008b9e:	68cc      	ldr	r4, [r1, #12]
 8008ba0:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 8008ba2:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ba6:	e005      	b.n	8008bb4 <TIM_OC1_SetConfig+0x8c>
    tmpccer &= ~TIM_CCER_CC1NP;
 8008ba8:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8008bac:	68cc      	ldr	r4, [r1, #12]
 8008bae:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 8008bb0:	f023 0304 	bic.w	r3, r3, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008bb4:	f426 7440 	bic.w	r4, r6, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008bb8:	694d      	ldr	r5, [r1, #20]
 8008bba:	698e      	ldr	r6, [r1, #24]
 8008bbc:	ea45 0c06 	orr.w	ip, r5, r6
 8008bc0:	ea4c 0604 	orr.w	r6, ip, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bc4:	6046      	str	r6, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008bc6:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008bc8:	684a      	ldr	r2, [r1, #4]
 8008bca:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bcc:	6203      	str	r3, [r0, #32]
}
 8008bce:	bc70      	pop	{r4, r5, r6}
 8008bd0:	4770      	bx	lr
 8008bd2:	bf00      	nop
 8008bd4:	40012c00 	.word	0x40012c00
 8008bd8:	40013400 	.word	0x40013400

08008bdc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008bdc:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008bde:	6a03      	ldr	r3, [r0, #32]
 8008be0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008be4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008be6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008be8:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008bea:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008bec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008bf0:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008bf4:	680c      	ldr	r4, [r1, #0]
 8008bf6:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008bf8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008bfc:	688c      	ldr	r4, [r1, #8]
 8008bfe:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008c02:	4c18      	ldr	r4, [pc, #96]	; (8008c64 <TIM_OC3_SetConfig+0x88>)
 8008c04:	42a0      	cmp	r0, r4
 8008c06:	d017      	beq.n	8008c38 <TIM_OC3_SetConfig+0x5c>
 8008c08:	4d17      	ldr	r5, [pc, #92]	; (8008c68 <TIM_OC3_SetConfig+0x8c>)
 8008c0a:	42a8      	cmp	r0, r5
 8008c0c:	d00c      	beq.n	8008c28 <TIM_OC3_SetConfig+0x4c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c0e:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
 8008c12:	42a0      	cmp	r0, r4
 8008c14:	d017      	beq.n	8008c46 <TIM_OC3_SetConfig+0x6a>
 8008c16:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008c1a:	42a0      	cmp	r0, r4
 8008c1c:	d013      	beq.n	8008c46 <TIM_OC3_SetConfig+0x6a>
 8008c1e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008c22:	42a0      	cmp	r0, r4
 8008c24:	d117      	bne.n	8008c56 <TIM_OC3_SetConfig+0x7a>
 8008c26:	e00e      	b.n	8008c46 <TIM_OC3_SetConfig+0x6a>
    tmpccer &= ~TIM_CCER_CC3NP;
 8008c28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008c2c:	68cc      	ldr	r4, [r1, #12]
 8008c2e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8008c32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c36:	e006      	b.n	8008c46 <TIM_OC3_SetConfig+0x6a>
    tmpccer &= ~TIM_CCER_CC3NP;
 8008c38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008c3c:	68cc      	ldr	r4, [r1, #12]
 8008c3e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8008c42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008c46:	f426 5440 	bic.w	r4, r6, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008c4a:	694d      	ldr	r5, [r1, #20]
 8008c4c:	698e      	ldr	r6, [r1, #24]
 8008c4e:	ea45 0c06 	orr.w	ip, r5, r6
 8008c52:	ea44 160c 	orr.w	r6, r4, ip, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c56:	6046      	str	r6, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c58:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008c5a:	684a      	ldr	r2, [r1, #4]
 8008c5c:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c5e:	6203      	str	r3, [r0, #32]
}
 8008c60:	bc70      	pop	{r4, r5, r6}
 8008c62:	4770      	bx	lr
 8008c64:	40012c00 	.word	0x40012c00
 8008c68:	40013400 	.word	0x40013400

08008c6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c6c:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008c6e:	6a03      	ldr	r3, [r0, #32]
 8008c70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c74:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c76:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c78:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c7a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008c7c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008c80:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c84:	680c      	ldr	r4, [r1, #0]
 8008c86:	ea42 2204 	orr.w	r2, r2, r4, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008c8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008c8e:	688c      	ldr	r4, [r1, #8]
 8008c90:	ea43 3304 	orr.w	r3, r3, r4, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008c94:	4c18      	ldr	r4, [pc, #96]	; (8008cf8 <TIM_OC4_SetConfig+0x8c>)
 8008c96:	42a0      	cmp	r0, r4
 8008c98:	d017      	beq.n	8008cca <TIM_OC4_SetConfig+0x5e>
 8008c9a:	4d18      	ldr	r5, [pc, #96]	; (8008cfc <TIM_OC4_SetConfig+0x90>)
 8008c9c:	42a8      	cmp	r0, r5
 8008c9e:	d00c      	beq.n	8008cba <TIM_OC4_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ca0:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
 8008ca4:	42a0      	cmp	r0, r4
 8008ca6:	d017      	beq.n	8008cd8 <TIM_OC4_SetConfig+0x6c>
 8008ca8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008cac:	42a0      	cmp	r0, r4
 8008cae:	d013      	beq.n	8008cd8 <TIM_OC4_SetConfig+0x6c>
 8008cb0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008cb4:	42a0      	cmp	r0, r4
 8008cb6:	d117      	bne.n	8008ce8 <TIM_OC4_SetConfig+0x7c>
 8008cb8:	e00e      	b.n	8008cd8 <TIM_OC4_SetConfig+0x6c>
    tmpccer &= ~TIM_CCER_CC4NP;
 8008cba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008cbe:	68cc      	ldr	r4, [r1, #12]
 8008cc0:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8008cc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cc8:	e006      	b.n	8008cd8 <TIM_OC4_SetConfig+0x6c>
    tmpccer &= ~TIM_CCER_CC4NP;
 8008cca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008cce:	68cc      	ldr	r4, [r1, #12]
 8008cd0:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8008cd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008cd8:	f426 4440 	bic.w	r4, r6, #49152	; 0xc000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008cdc:	694d      	ldr	r5, [r1, #20]
 8008cde:	698e      	ldr	r6, [r1, #24]
 8008ce0:	ea45 0c06 	orr.w	ip, r5, r6
 8008ce4:	ea44 168c 	orr.w	r6, r4, ip, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ce8:	6046      	str	r6, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008cea:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008cec:	684a      	ldr	r2, [r1, #4]
 8008cee:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cf0:	6203      	str	r3, [r0, #32]
}
 8008cf2:	bc70      	pop	{r4, r5, r6}
 8008cf4:	4770      	bx	lr
 8008cf6:	bf00      	nop
 8008cf8:	40012c00 	.word	0x40012c00
 8008cfc:	40013400 	.word	0x40013400

08008d00 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008d00:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008d02:	6a03      	ldr	r3, [r0, #32]
 8008d04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d08:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d0a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d0c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008d0e:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008d10:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008d14:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d18:	680d      	ldr	r5, [r1, #0]
 8008d1a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008d1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008d20:	688d      	ldr	r5, [r1, #8]
 8008d22:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d26:	4d0f      	ldr	r5, [pc, #60]	; (8008d64 <TIM_OC5_SetConfig+0x64>)
 8008d28:	42a8      	cmp	r0, r5
 8008d2a:	d00f      	beq.n	8008d4c <TIM_OC5_SetConfig+0x4c>
 8008d2c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008d30:	42a8      	cmp	r0, r5
 8008d32:	d00b      	beq.n	8008d4c <TIM_OC5_SetConfig+0x4c>
 8008d34:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8008d38:	42a8      	cmp	r0, r5
 8008d3a:	d007      	beq.n	8008d4c <TIM_OC5_SetConfig+0x4c>
 8008d3c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008d40:	42a8      	cmp	r0, r5
 8008d42:	d003      	beq.n	8008d4c <TIM_OC5_SetConfig+0x4c>
 8008d44:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008d48:	42a8      	cmp	r0, r5
 8008d4a:	d104      	bne.n	8008d56 <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008d4c:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008d50:	694d      	ldr	r5, [r1, #20]
 8008d52:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d56:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008d58:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008d5a:	684a      	ldr	r2, [r1, #4]
 8008d5c:	6482      	str	r2, [r0, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d5e:	6203      	str	r3, [r0, #32]
}
 8008d60:	bc30      	pop	{r4, r5}
 8008d62:	4770      	bx	lr
 8008d64:	40012c00 	.word	0x40012c00

08008d68 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008d68:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008d6a:	6a03      	ldr	r3, [r0, #32]
 8008d6c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008d70:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d72:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d74:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008d76:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008d78:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008d7c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d80:	680d      	ldr	r5, [r1, #0]
 8008d82:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008d86:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008d8a:	688d      	ldr	r5, [r1, #8]
 8008d8c:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d90:	4d0f      	ldr	r5, [pc, #60]	; (8008dd0 <TIM_OC6_SetConfig+0x68>)
 8008d92:	42a8      	cmp	r0, r5
 8008d94:	d00f      	beq.n	8008db6 <TIM_OC6_SetConfig+0x4e>
 8008d96:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008d9a:	42a8      	cmp	r0, r5
 8008d9c:	d00b      	beq.n	8008db6 <TIM_OC6_SetConfig+0x4e>
 8008d9e:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8008da2:	42a8      	cmp	r0, r5
 8008da4:	d007      	beq.n	8008db6 <TIM_OC6_SetConfig+0x4e>
 8008da6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008daa:	42a8      	cmp	r0, r5
 8008dac:	d003      	beq.n	8008db6 <TIM_OC6_SetConfig+0x4e>
 8008dae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008db2:	42a8      	cmp	r0, r5
 8008db4:	d104      	bne.n	8008dc0 <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008db6:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008dba:	694d      	ldr	r5, [r1, #20]
 8008dbc:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008dc0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008dc2:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008dc4:	684a      	ldr	r2, [r1, #4]
 8008dc6:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dc8:	6203      	str	r3, [r0, #32]
}
 8008dca:	bc30      	pop	{r4, r5}
 8008dcc:	4770      	bx	lr
 8008dce:	bf00      	nop
 8008dd0:	40012c00 	.word	0x40012c00

08008dd4 <HAL_TIM_Base_Stop>:
  __HAL_TIM_DISABLE(htim);
 8008dd4:	6803      	ldr	r3, [r0, #0]
 8008dd6:	6a19      	ldr	r1, [r3, #32]
 8008dd8:	f241 1211 	movw	r2, #4369	; 0x1111
 8008ddc:	4211      	tst	r1, r2
 8008dde:	d108      	bne.n	8008df2 <HAL_TIM_Base_Stop+0x1e>
 8008de0:	6a19      	ldr	r1, [r3, #32]
 8008de2:	f244 4244 	movw	r2, #17476	; 0x4444
 8008de6:	4211      	tst	r1, r2
 8008de8:	d103      	bne.n	8008df2 <HAL_TIM_Base_Stop+0x1e>
 8008dea:	681a      	ldr	r2, [r3, #0]
 8008dec:	f022 0201 	bic.w	r2, r2, #1
 8008df0:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8008df2:	2301      	movs	r3, #1
 8008df4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8008df8:	2000      	movs	r0, #0
 8008dfa:	4770      	bx	lr

08008dfc <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8008dfc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008e00:	b2db      	uxtb	r3, r3
 8008e02:	2b01      	cmp	r3, #1
 8008e04:	d132      	bne.n	8008e6c <HAL_TIM_Base_Start_IT+0x70>
  htim->State = HAL_TIM_STATE_BUSY;
 8008e06:	2302      	movs	r3, #2
 8008e08:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008e0c:	6802      	ldr	r2, [r0, #0]
 8008e0e:	68d3      	ldr	r3, [r2, #12]
 8008e10:	f043 0301 	orr.w	r3, r3, #1
 8008e14:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e16:	6803      	ldr	r3, [r0, #0]
 8008e18:	4a17      	ldr	r2, [pc, #92]	; (8008e78 <HAL_TIM_Base_Start_IT+0x7c>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d018      	beq.n	8008e50 <HAL_TIM_Base_Start_IT+0x54>
 8008e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e22:	d015      	beq.n	8008e50 <HAL_TIM_Base_Start_IT+0x54>
 8008e24:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d011      	beq.n	8008e50 <HAL_TIM_Base_Start_IT+0x54>
 8008e2c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d00d      	beq.n	8008e50 <HAL_TIM_Base_Start_IT+0x54>
 8008e34:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d009      	beq.n	8008e50 <HAL_TIM_Base_Start_IT+0x54>
 8008e3c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d005      	beq.n	8008e50 <HAL_TIM_Base_Start_IT+0x54>
    __HAL_TIM_ENABLE(htim);
 8008e44:	681a      	ldr	r2, [r3, #0]
 8008e46:	f042 0201 	orr.w	r2, r2, #1
 8008e4a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8008e4c:	2000      	movs	r0, #0
 8008e4e:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e50:	6899      	ldr	r1, [r3, #8]
 8008e52:	4a0a      	ldr	r2, [pc, #40]	; (8008e7c <HAL_TIM_Base_Start_IT+0x80>)
 8008e54:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e56:	2a06      	cmp	r2, #6
 8008e58:	d00a      	beq.n	8008e70 <HAL_TIM_Base_Start_IT+0x74>
 8008e5a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8008e5e:	d009      	beq.n	8008e74 <HAL_TIM_Base_Start_IT+0x78>
      __HAL_TIM_ENABLE(htim);
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	f042 0201 	orr.w	r2, r2, #1
 8008e66:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8008e68:	2000      	movs	r0, #0
 8008e6a:	4770      	bx	lr
    return HAL_ERROR;
 8008e6c:	2001      	movs	r0, #1
 8008e6e:	4770      	bx	lr
  return HAL_OK;
 8008e70:	2000      	movs	r0, #0
 8008e72:	4770      	bx	lr
 8008e74:	2000      	movs	r0, #0
}
 8008e76:	4770      	bx	lr
 8008e78:	40012c00 	.word	0x40012c00
 8008e7c:	00010007 	.word	0x00010007

08008e80 <HAL_TIM_PWM_MspInit>:
}
 8008e80:	4770      	bx	lr

08008e82 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8008e82:	4770      	bx	lr

08008e84 <HAL_TIM_IC_CaptureCallback>:
}
 8008e84:	4770      	bx	lr

08008e86 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8008e86:	4770      	bx	lr

08008e88 <HAL_TIM_TriggerCallback>:
}
 8008e88:	4770      	bx	lr

08008e8a <HAL_TIM_IRQHandler>:
{
 8008e8a:	b510      	push	{r4, lr}
 8008e8c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008e8e:	6803      	ldr	r3, [r0, #0]
 8008e90:	691a      	ldr	r2, [r3, #16]
 8008e92:	f012 0f02 	tst.w	r2, #2
 8008e96:	d012      	beq.n	8008ebe <HAL_TIM_IRQHandler+0x34>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008e98:	68da      	ldr	r2, [r3, #12]
 8008e9a:	f012 0f02 	tst.w	r2, #2
 8008e9e:	d00e      	beq.n	8008ebe <HAL_TIM_IRQHandler+0x34>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008ea0:	f06f 0202 	mvn.w	r2, #2
 8008ea4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008eaa:	6803      	ldr	r3, [r0, #0]
 8008eac:	699b      	ldr	r3, [r3, #24]
 8008eae:	f013 0f03 	tst.w	r3, #3
 8008eb2:	f000 809f 	beq.w	8008ff4 <HAL_TIM_IRQHandler+0x16a>
          HAL_TIM_IC_CaptureCallback(htim);
 8008eb6:	f7ff ffe5 	bl	8008e84 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008ebe:	6823      	ldr	r3, [r4, #0]
 8008ec0:	691a      	ldr	r2, [r3, #16]
 8008ec2:	f012 0f04 	tst.w	r2, #4
 8008ec6:	d013      	beq.n	8008ef0 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008ec8:	68da      	ldr	r2, [r3, #12]
 8008eca:	f012 0f04 	tst.w	r2, #4
 8008ece:	d00f      	beq.n	8008ef0 <HAL_TIM_IRQHandler+0x66>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008ed0:	f06f 0204 	mvn.w	r2, #4
 8008ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008ed6:	2302      	movs	r3, #2
 8008ed8:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008eda:	6823      	ldr	r3, [r4, #0]
 8008edc:	699b      	ldr	r3, [r3, #24]
 8008ede:	f413 7f40 	tst.w	r3, #768	; 0x300
 8008ee2:	f000 808d 	beq.w	8009000 <HAL_TIM_IRQHandler+0x176>
        HAL_TIM_IC_CaptureCallback(htim);
 8008ee6:	4620      	mov	r0, r4
 8008ee8:	f7ff ffcc 	bl	8008e84 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008eec:	2300      	movs	r3, #0
 8008eee:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008ef0:	6823      	ldr	r3, [r4, #0]
 8008ef2:	691a      	ldr	r2, [r3, #16]
 8008ef4:	f012 0f08 	tst.w	r2, #8
 8008ef8:	d012      	beq.n	8008f20 <HAL_TIM_IRQHandler+0x96>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008efa:	68da      	ldr	r2, [r3, #12]
 8008efc:	f012 0f08 	tst.w	r2, #8
 8008f00:	d00e      	beq.n	8008f20 <HAL_TIM_IRQHandler+0x96>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008f02:	f06f 0208 	mvn.w	r2, #8
 8008f06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008f08:	2304      	movs	r3, #4
 8008f0a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008f0c:	6823      	ldr	r3, [r4, #0]
 8008f0e:	69db      	ldr	r3, [r3, #28]
 8008f10:	f013 0f03 	tst.w	r3, #3
 8008f14:	d07b      	beq.n	800900e <HAL_TIM_IRQHandler+0x184>
        HAL_TIM_IC_CaptureCallback(htim);
 8008f16:	4620      	mov	r0, r4
 8008f18:	f7ff ffb4 	bl	8008e84 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008f20:	6823      	ldr	r3, [r4, #0]
 8008f22:	691a      	ldr	r2, [r3, #16]
 8008f24:	f012 0f10 	tst.w	r2, #16
 8008f28:	d012      	beq.n	8008f50 <HAL_TIM_IRQHandler+0xc6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008f2a:	68da      	ldr	r2, [r3, #12]
 8008f2c:	f012 0f10 	tst.w	r2, #16
 8008f30:	d00e      	beq.n	8008f50 <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008f32:	f06f 0210 	mvn.w	r2, #16
 8008f36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f38:	2308      	movs	r3, #8
 8008f3a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f3c:	6823      	ldr	r3, [r4, #0]
 8008f3e:	69db      	ldr	r3, [r3, #28]
 8008f40:	f413 7f40 	tst.w	r3, #768	; 0x300
 8008f44:	d06a      	beq.n	800901c <HAL_TIM_IRQHandler+0x192>
        HAL_TIM_IC_CaptureCallback(htim);
 8008f46:	4620      	mov	r0, r4
 8008f48:	f7ff ff9c 	bl	8008e84 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008f50:	6823      	ldr	r3, [r4, #0]
 8008f52:	691a      	ldr	r2, [r3, #16]
 8008f54:	f012 0f01 	tst.w	r2, #1
 8008f58:	d003      	beq.n	8008f62 <HAL_TIM_IRQHandler+0xd8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008f5a:	68da      	ldr	r2, [r3, #12]
 8008f5c:	f012 0f01 	tst.w	r2, #1
 8008f60:	d163      	bne.n	800902a <HAL_TIM_IRQHandler+0x1a0>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008f62:	6823      	ldr	r3, [r4, #0]
 8008f64:	691a      	ldr	r2, [r3, #16]
 8008f66:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008f6a:	d003      	beq.n	8008f74 <HAL_TIM_IRQHandler+0xea>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008f6c:	68da      	ldr	r2, [r3, #12]
 8008f6e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008f72:	d161      	bne.n	8009038 <HAL_TIM_IRQHandler+0x1ae>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008f74:	6823      	ldr	r3, [r4, #0]
 8008f76:	691a      	ldr	r2, [r3, #16]
 8008f78:	f412 7f80 	tst.w	r2, #256	; 0x100
 8008f7c:	d003      	beq.n	8008f86 <HAL_TIM_IRQHandler+0xfc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008f7e:	68da      	ldr	r2, [r3, #12]
 8008f80:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008f84:	d15f      	bne.n	8009046 <HAL_TIM_IRQHandler+0x1bc>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008f86:	6823      	ldr	r3, [r4, #0]
 8008f88:	691a      	ldr	r2, [r3, #16]
 8008f8a:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008f8e:	d003      	beq.n	8008f98 <HAL_TIM_IRQHandler+0x10e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008f90:	68da      	ldr	r2, [r3, #12]
 8008f92:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008f96:	d15d      	bne.n	8009054 <HAL_TIM_IRQHandler+0x1ca>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008f98:	6823      	ldr	r3, [r4, #0]
 8008f9a:	691a      	ldr	r2, [r3, #16]
 8008f9c:	f012 0f20 	tst.w	r2, #32
 8008fa0:	d003      	beq.n	8008faa <HAL_TIM_IRQHandler+0x120>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008fa2:	68da      	ldr	r2, [r3, #12]
 8008fa4:	f012 0f20 	tst.w	r2, #32
 8008fa8:	d15b      	bne.n	8009062 <HAL_TIM_IRQHandler+0x1d8>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8008faa:	6823      	ldr	r3, [r4, #0]
 8008fac:	691a      	ldr	r2, [r3, #16]
 8008fae:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 8008fb2:	d003      	beq.n	8008fbc <HAL_TIM_IRQHandler+0x132>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8008fb4:	68da      	ldr	r2, [r3, #12]
 8008fb6:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 8008fba:	d159      	bne.n	8009070 <HAL_TIM_IRQHandler+0x1e6>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8008fbc:	6823      	ldr	r3, [r4, #0]
 8008fbe:	691a      	ldr	r2, [r3, #16]
 8008fc0:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 8008fc4:	d003      	beq.n	8008fce <HAL_TIM_IRQHandler+0x144>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8008fc6:	68da      	ldr	r2, [r3, #12]
 8008fc8:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 8008fcc:	d157      	bne.n	800907e <HAL_TIM_IRQHandler+0x1f4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8008fce:	6823      	ldr	r3, [r4, #0]
 8008fd0:	691a      	ldr	r2, [r3, #16]
 8008fd2:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8008fd6:	d003      	beq.n	8008fe0 <HAL_TIM_IRQHandler+0x156>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8008fd8:	68da      	ldr	r2, [r3, #12]
 8008fda:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8008fde:	d155      	bne.n	800908c <HAL_TIM_IRQHandler+0x202>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8008fe0:	6823      	ldr	r3, [r4, #0]
 8008fe2:	691a      	ldr	r2, [r3, #16]
 8008fe4:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
 8008fe8:	d003      	beq.n	8008ff2 <HAL_TIM_IRQHandler+0x168>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8008fea:	68da      	ldr	r2, [r3, #12]
 8008fec:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
 8008ff0:	d153      	bne.n	800909a <HAL_TIM_IRQHandler+0x210>
}
 8008ff2:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ff4:	f7ff ff45 	bl	8008e82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ff8:	4620      	mov	r0, r4
 8008ffa:	f7ff ff44 	bl	8008e86 <HAL_TIM_PWM_PulseFinishedCallback>
 8008ffe:	e75c      	b.n	8008eba <HAL_TIM_IRQHandler+0x30>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009000:	4620      	mov	r0, r4
 8009002:	f7ff ff3e 	bl	8008e82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009006:	4620      	mov	r0, r4
 8009008:	f7ff ff3d 	bl	8008e86 <HAL_TIM_PWM_PulseFinishedCallback>
 800900c:	e76e      	b.n	8008eec <HAL_TIM_IRQHandler+0x62>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800900e:	4620      	mov	r0, r4
 8009010:	f7ff ff37 	bl	8008e82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009014:	4620      	mov	r0, r4
 8009016:	f7ff ff36 	bl	8008e86 <HAL_TIM_PWM_PulseFinishedCallback>
 800901a:	e77f      	b.n	8008f1c <HAL_TIM_IRQHandler+0x92>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800901c:	4620      	mov	r0, r4
 800901e:	f7ff ff30 	bl	8008e82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009022:	4620      	mov	r0, r4
 8009024:	f7ff ff2f 	bl	8008e86 <HAL_TIM_PWM_PulseFinishedCallback>
 8009028:	e790      	b.n	8008f4c <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800902a:	f06f 0201 	mvn.w	r2, #1
 800902e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8009030:	4620      	mov	r0, r4
 8009032:	f7fa fad9 	bl	80035e8 <HAL_TIM_PeriodElapsedCallback>
 8009036:	e794      	b.n	8008f62 <HAL_TIM_IRQHandler+0xd8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009038:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800903c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800903e:	4620      	mov	r0, r4
 8009040:	f000 fd99 	bl	8009b76 <HAL_TIMEx_BreakCallback>
 8009044:	e796      	b.n	8008f74 <HAL_TIM_IRQHandler+0xea>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009046:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800904a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800904c:	4620      	mov	r0, r4
 800904e:	f000 fd93 	bl	8009b78 <HAL_TIMEx_Break2Callback>
 8009052:	e798      	b.n	8008f86 <HAL_TIM_IRQHandler+0xfc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009054:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009058:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800905a:	4620      	mov	r0, r4
 800905c:	f7ff ff14 	bl	8008e88 <HAL_TIM_TriggerCallback>
 8009060:	e79a      	b.n	8008f98 <HAL_TIM_IRQHandler+0x10e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009062:	f06f 0220 	mvn.w	r2, #32
 8009066:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8009068:	4620      	mov	r0, r4
 800906a:	f000 fd83 	bl	8009b74 <HAL_TIMEx_CommutCallback>
 800906e:	e79c      	b.n	8008faa <HAL_TIM_IRQHandler+0x120>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8009070:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8009074:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009076:	4620      	mov	r0, r4
 8009078:	f000 fd7f 	bl	8009b7a <HAL_TIMEx_EncoderIndexCallback>
 800907c:	e79e      	b.n	8008fbc <HAL_TIM_IRQHandler+0x132>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800907e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8009082:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009084:	4620      	mov	r0, r4
 8009086:	f000 fd79 	bl	8009b7c <HAL_TIMEx_DirectionChangeCallback>
 800908a:	e7a0      	b.n	8008fce <HAL_TIM_IRQHandler+0x144>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800908c:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8009090:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_IndexErrorCallback(htim);
 8009092:	4620      	mov	r0, r4
 8009094:	f000 fd73 	bl	8009b7e <HAL_TIMEx_IndexErrorCallback>
 8009098:	e7a2      	b.n	8008fe0 <HAL_TIM_IRQHandler+0x156>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800909a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800909e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_TransitionErrorCallback(htim);
 80090a0:	4620      	mov	r0, r4
 80090a2:	f000 fd6d 	bl	8009b80 <HAL_TIMEx_TransitionErrorCallback>
}
 80090a6:	e7a4      	b.n	8008ff2 <HAL_TIM_IRQHandler+0x168>

080090a8 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80090a8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80090aa:	4a4b      	ldr	r2, [pc, #300]	; (80091d8 <TIM_Base_SetConfig+0x130>)
 80090ac:	4290      	cmp	r0, r2
 80090ae:	d04f      	beq.n	8009150 <TIM_Base_SetConfig+0xa8>
 80090b0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80090b4:	d074      	beq.n	80091a0 <TIM_Base_SetConfig+0xf8>
 80090b6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80090ba:	4290      	cmp	r0, r2
 80090bc:	f000 8087 	beq.w	80091ce <TIM_Base_SetConfig+0x126>
 80090c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80090c4:	4290      	cmp	r0, r2
 80090c6:	d07d      	beq.n	80091c4 <TIM_Base_SetConfig+0x11c>
 80090c8:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80090cc:	4290      	cmp	r0, r2
 80090ce:	d055      	beq.n	800917c <TIM_Base_SetConfig+0xd4>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80090d0:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80090d4:	4290      	cmp	r0, r2
 80090d6:	d011      	beq.n	80090fc <TIM_Base_SetConfig+0x54>
 80090d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80090dc:	4290      	cmp	r0, r2
 80090de:	d01b      	beq.n	8009118 <TIM_Base_SetConfig+0x70>
 80090e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80090e4:	4290      	cmp	r0, r2
 80090e6:	d025      	beq.n	8009134 <TIM_Base_SetConfig+0x8c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80090e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80090ec:	694a      	ldr	r2, [r1, #20]
 80090ee:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80090f0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80090f2:	688b      	ldr	r3, [r1, #8]
 80090f4:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80090f6:	680b      	ldr	r3, [r1, #0]
 80090f8:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80090fa:	e03c      	b.n	8009176 <TIM_Base_SetConfig+0xce>
    tmpcr1 &= ~TIM_CR1_CKD;
 80090fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009100:	68ca      	ldr	r2, [r1, #12]
 8009102:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009104:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009108:	694a      	ldr	r2, [r1, #20]
 800910a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800910c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800910e:	688b      	ldr	r3, [r1, #8]
 8009110:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009112:	680b      	ldr	r3, [r1, #0]
 8009114:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009116:	e02c      	b.n	8009172 <TIM_Base_SetConfig+0xca>
    tmpcr1 &= ~TIM_CR1_CKD;
 8009118:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800911c:	68ca      	ldr	r2, [r1, #12]
 800911e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009120:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009124:	694a      	ldr	r2, [r1, #20]
 8009126:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8009128:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800912a:	688b      	ldr	r3, [r1, #8]
 800912c:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800912e:	680b      	ldr	r3, [r1, #0]
 8009130:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009132:	e01e      	b.n	8009172 <TIM_Base_SetConfig+0xca>
    tmpcr1 &= ~TIM_CR1_CKD;
 8009134:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009138:	68ca      	ldr	r2, [r1, #12]
 800913a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800913c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009140:	694a      	ldr	r2, [r1, #20]
 8009142:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8009144:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009146:	688b      	ldr	r3, [r1, #8]
 8009148:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800914a:	680b      	ldr	r3, [r1, #0]
 800914c:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800914e:	e010      	b.n	8009172 <TIM_Base_SetConfig+0xca>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009150:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009154:	684a      	ldr	r2, [r1, #4]
 8009156:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8009158:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800915c:	68ca      	ldr	r2, [r1, #12]
 800915e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009160:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009164:	694a      	ldr	r2, [r1, #20]
 8009166:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8009168:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800916a:	688b      	ldr	r3, [r1, #8]
 800916c:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800916e:	680b      	ldr	r3, [r1, #0]
 8009170:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8009172:	690b      	ldr	r3, [r1, #16]
 8009174:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8009176:	2301      	movs	r3, #1
 8009178:	6143      	str	r3, [r0, #20]
}
 800917a:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800917c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009180:	684a      	ldr	r2, [r1, #4]
 8009182:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8009184:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009188:	68ca      	ldr	r2, [r1, #12]
 800918a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800918c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009190:	694a      	ldr	r2, [r1, #20]
 8009192:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8009194:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009196:	688b      	ldr	r3, [r1, #8]
 8009198:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800919a:	680b      	ldr	r3, [r1, #0]
 800919c:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800919e:	e7e8      	b.n	8009172 <TIM_Base_SetConfig+0xca>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80091a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80091a4:	684a      	ldr	r2, [r1, #4]
 80091a6:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80091a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80091ac:	68ca      	ldr	r2, [r1, #12]
 80091ae:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80091b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091b4:	694a      	ldr	r2, [r1, #20]
 80091b6:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80091b8:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80091ba:	688b      	ldr	r3, [r1, #8]
 80091bc:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80091be:	680b      	ldr	r3, [r1, #0]
 80091c0:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80091c2:	e7d8      	b.n	8009176 <TIM_Base_SetConfig+0xce>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80091c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80091c8:	684a      	ldr	r2, [r1, #4]
 80091ca:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80091cc:	e7ec      	b.n	80091a8 <TIM_Base_SetConfig+0x100>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80091ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80091d2:	684a      	ldr	r2, [r1, #4]
 80091d4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80091d6:	e7e7      	b.n	80091a8 <TIM_Base_SetConfig+0x100>
 80091d8:	40012c00 	.word	0x40012c00

080091dc <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80091dc:	b360      	cbz	r0, 8009238 <HAL_TIM_Base_Init+0x5c>
{
 80091de:	b510      	push	{r4, lr}
 80091e0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80091e2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80091e6:	b313      	cbz	r3, 800922e <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 80091e8:	2302      	movs	r3, #2
 80091ea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091ee:	4621      	mov	r1, r4
 80091f0:	f851 0b04 	ldr.w	r0, [r1], #4
 80091f4:	f7ff ff58 	bl	80090a8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80091f8:	2301      	movs	r3, #1
 80091fa:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091fe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8009202:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8009206:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800920a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800920e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009212:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009216:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800921a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800921e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8009222:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8009226:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800922a:	2000      	movs	r0, #0
}
 800922c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800922e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8009232:	f7fc f803 	bl	800523c <HAL_TIM_Base_MspInit>
 8009236:	e7d7      	b.n	80091e8 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8009238:	2001      	movs	r0, #1
}
 800923a:	4770      	bx	lr

0800923c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800923c:	b360      	cbz	r0, 8009298 <HAL_TIM_PWM_Init+0x5c>
{
 800923e:	b510      	push	{r4, lr}
 8009240:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8009242:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009246:	b313      	cbz	r3, 800928e <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8009248:	2302      	movs	r3, #2
 800924a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800924e:	4621      	mov	r1, r4
 8009250:	f851 0b04 	ldr.w	r0, [r1], #4
 8009254:	f7ff ff28 	bl	80090a8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009258:	2301      	movs	r3, #1
 800925a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800925e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8009262:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8009266:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800926a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800926e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009272:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009276:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800927a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800927e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8009282:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8009286:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800928a:	2000      	movs	r0, #0
}
 800928c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800928e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8009292:	f7ff fdf5 	bl	8008e80 <HAL_TIM_PWM_MspInit>
 8009296:	e7d7      	b.n	8009248 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8009298:	2001      	movs	r0, #1
}
 800929a:	4770      	bx	lr

0800929c <TIM_OC2_SetConfig>:
{
 800929c:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800929e:	6a03      	ldr	r3, [r0, #32]
 80092a0:	f023 0310 	bic.w	r3, r3, #16
 80092a4:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80092a6:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80092a8:	6846      	ldr	r6, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80092aa:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80092ac:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80092b0:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80092b4:	680c      	ldr	r4, [r1, #0]
 80092b6:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80092ba:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80092be:	688c      	ldr	r4, [r1, #8]
 80092c0:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80092c4:	4c18      	ldr	r4, [pc, #96]	; (8009328 <TIM_OC2_SetConfig+0x8c>)
 80092c6:	42a0      	cmp	r0, r4
 80092c8:	d017      	beq.n	80092fa <TIM_OC2_SetConfig+0x5e>
 80092ca:	4d18      	ldr	r5, [pc, #96]	; (800932c <TIM_OC2_SetConfig+0x90>)
 80092cc:	42a8      	cmp	r0, r5
 80092ce:	d00c      	beq.n	80092ea <TIM_OC2_SetConfig+0x4e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092d0:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
 80092d4:	42a0      	cmp	r0, r4
 80092d6:	d017      	beq.n	8009308 <TIM_OC2_SetConfig+0x6c>
 80092d8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80092dc:	42a0      	cmp	r0, r4
 80092de:	d013      	beq.n	8009308 <TIM_OC2_SetConfig+0x6c>
 80092e0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80092e4:	42a0      	cmp	r0, r4
 80092e6:	d117      	bne.n	8009318 <TIM_OC2_SetConfig+0x7c>
 80092e8:	e00e      	b.n	8009308 <TIM_OC2_SetConfig+0x6c>
    tmpccer &= ~TIM_CCER_CC2NP;
 80092ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80092ee:	68cc      	ldr	r4, [r1, #12]
 80092f0:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80092f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092f8:	e006      	b.n	8009308 <TIM_OC2_SetConfig+0x6c>
    tmpccer &= ~TIM_CCER_CC2NP;
 80092fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80092fe:	68cc      	ldr	r4, [r1, #12]
 8009300:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8009304:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009308:	f426 6440 	bic.w	r4, r6, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800930c:	694d      	ldr	r5, [r1, #20]
 800930e:	698e      	ldr	r6, [r1, #24]
 8009310:	ea45 0c06 	orr.w	ip, r5, r6
 8009314:	ea44 068c 	orr.w	r6, r4, ip, lsl #2
  TIMx->CR2 = tmpcr2;
 8009318:	6046      	str	r6, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800931a:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800931c:	684a      	ldr	r2, [r1, #4]
 800931e:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8009320:	6203      	str	r3, [r0, #32]
}
 8009322:	bc70      	pop	{r4, r5, r6}
 8009324:	4770      	bx	lr
 8009326:	bf00      	nop
 8009328:	40012c00 	.word	0x40012c00
 800932c:	40013400 	.word	0x40013400

08009330 <HAL_TIM_PWM_ConfigChannel>:
{
 8009330:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8009332:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8009336:	2b01      	cmp	r3, #1
 8009338:	f000 8095 	beq.w	8009466 <HAL_TIM_PWM_ConfigChannel+0x136>
 800933c:	4604      	mov	r4, r0
 800933e:	460d      	mov	r5, r1
 8009340:	2301      	movs	r3, #1
 8009342:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8009346:	2a14      	cmp	r2, #20
 8009348:	f200 8088 	bhi.w	800945c <HAL_TIM_PWM_ConfigChannel+0x12c>
 800934c:	e8df f002 	tbb	[pc, r2]
 8009350:	8686860b 	.word	0x8686860b
 8009354:	8686861f 	.word	0x8686861f
 8009358:	86868634 	.word	0x86868634
 800935c:	86868648 	.word	0x86868648
 8009360:	8686865d 	.word	0x8686865d
 8009364:	71          	.byte	0x71
 8009365:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009366:	6800      	ldr	r0, [r0, #0]
 8009368:	f7ff fbde 	bl	8008b28 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800936c:	6822      	ldr	r2, [r4, #0]
 800936e:	6993      	ldr	r3, [r2, #24]
 8009370:	f043 0308 	orr.w	r3, r3, #8
 8009374:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009376:	6822      	ldr	r2, [r4, #0]
 8009378:	6993      	ldr	r3, [r2, #24]
 800937a:	f023 0304 	bic.w	r3, r3, #4
 800937e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009380:	6822      	ldr	r2, [r4, #0]
 8009382:	6993      	ldr	r3, [r2, #24]
 8009384:	6929      	ldr	r1, [r5, #16]
 8009386:	430b      	orrs	r3, r1
 8009388:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800938a:	2000      	movs	r0, #0
      break;
 800938c:	e067      	b.n	800945e <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800938e:	6800      	ldr	r0, [r0, #0]
 8009390:	f7ff ff84 	bl	800929c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009394:	6822      	ldr	r2, [r4, #0]
 8009396:	6993      	ldr	r3, [r2, #24]
 8009398:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800939c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800939e:	6822      	ldr	r2, [r4, #0]
 80093a0:	6993      	ldr	r3, [r2, #24]
 80093a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80093a6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80093a8:	6822      	ldr	r2, [r4, #0]
 80093aa:	6993      	ldr	r3, [r2, #24]
 80093ac:	6929      	ldr	r1, [r5, #16]
 80093ae:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80093b2:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80093b4:	2000      	movs	r0, #0
      break;
 80093b6:	e052      	b.n	800945e <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80093b8:	6800      	ldr	r0, [r0, #0]
 80093ba:	f7ff fc0f 	bl	8008bdc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80093be:	6822      	ldr	r2, [r4, #0]
 80093c0:	69d3      	ldr	r3, [r2, #28]
 80093c2:	f043 0308 	orr.w	r3, r3, #8
 80093c6:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80093c8:	6822      	ldr	r2, [r4, #0]
 80093ca:	69d3      	ldr	r3, [r2, #28]
 80093cc:	f023 0304 	bic.w	r3, r3, #4
 80093d0:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80093d2:	6822      	ldr	r2, [r4, #0]
 80093d4:	69d3      	ldr	r3, [r2, #28]
 80093d6:	6929      	ldr	r1, [r5, #16]
 80093d8:	430b      	orrs	r3, r1
 80093da:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80093dc:	2000      	movs	r0, #0
      break;
 80093de:	e03e      	b.n	800945e <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80093e0:	6800      	ldr	r0, [r0, #0]
 80093e2:	f7ff fc43 	bl	8008c6c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80093e6:	6822      	ldr	r2, [r4, #0]
 80093e8:	69d3      	ldr	r3, [r2, #28]
 80093ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80093ee:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80093f0:	6822      	ldr	r2, [r4, #0]
 80093f2:	69d3      	ldr	r3, [r2, #28]
 80093f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80093f8:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80093fa:	6822      	ldr	r2, [r4, #0]
 80093fc:	69d3      	ldr	r3, [r2, #28]
 80093fe:	6929      	ldr	r1, [r5, #16]
 8009400:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009404:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8009406:	2000      	movs	r0, #0
      break;
 8009408:	e029      	b.n	800945e <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800940a:	6800      	ldr	r0, [r0, #0]
 800940c:	f7ff fc78 	bl	8008d00 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009410:	6822      	ldr	r2, [r4, #0]
 8009412:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009414:	f043 0308 	orr.w	r3, r3, #8
 8009418:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800941a:	6822      	ldr	r2, [r4, #0]
 800941c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800941e:	f023 0304 	bic.w	r3, r3, #4
 8009422:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009424:	6822      	ldr	r2, [r4, #0]
 8009426:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009428:	6929      	ldr	r1, [r5, #16]
 800942a:	430b      	orrs	r3, r1
 800942c:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 800942e:	2000      	movs	r0, #0
      break;
 8009430:	e015      	b.n	800945e <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009432:	6800      	ldr	r0, [r0, #0]
 8009434:	f7ff fc98 	bl	8008d68 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009438:	6822      	ldr	r2, [r4, #0]
 800943a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800943c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009440:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009442:	6822      	ldr	r2, [r4, #0]
 8009444:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009446:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800944a:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800944c:	6822      	ldr	r2, [r4, #0]
 800944e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009450:	6929      	ldr	r1, [r5, #16]
 8009452:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009456:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 8009458:	2000      	movs	r0, #0
      break;
 800945a:	e000      	b.n	800945e <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 800945c:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800945e:	2300      	movs	r3, #0
 8009460:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8009464:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8009466:	2002      	movs	r0, #2
 8009468:	e7fc      	b.n	8009464 <HAL_TIM_PWM_ConfigChannel+0x134>

0800946a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800946a:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800946c:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800946e:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009472:	430a      	orrs	r2, r1
 8009474:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8009478:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800947c:	6082      	str	r2, [r0, #8]
}
 800947e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009482:	4770      	bx	lr

08009484 <HAL_TIM_ConfigClockSource>:
{
 8009484:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8009486:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800948a:	2b01      	cmp	r3, #1
 800948c:	f000 80cc 	beq.w	8009628 <HAL_TIM_ConfigClockSource+0x1a4>
 8009490:	4604      	mov	r4, r0
 8009492:	2301      	movs	r3, #1
 8009494:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8009498:	2302      	movs	r3, #2
 800949a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800949e:	6802      	ldr	r2, [r0, #0]
 80094a0:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80094a2:	4b62      	ldr	r3, [pc, #392]	; (800962c <HAL_TIM_ConfigClockSource+0x1a8>)
 80094a4:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 80094a6:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80094a8:	6808      	ldr	r0, [r1, #0]
 80094aa:	2870      	cmp	r0, #112	; 0x70
 80094ac:	f000 8083 	beq.w	80095b6 <HAL_TIM_ConfigClockSource+0x132>
 80094b0:	d851      	bhi.n	8009556 <HAL_TIM_ConfigClockSource+0xd2>
 80094b2:	2850      	cmp	r0, #80	; 0x50
 80094b4:	f000 8099 	beq.w	80095ea <HAL_TIM_ConfigClockSource+0x166>
 80094b8:	d91f      	bls.n	80094fa <HAL_TIM_ConfigClockSource+0x76>
 80094ba:	2860      	cmp	r0, #96	; 0x60
 80094bc:	d149      	bne.n	8009552 <HAL_TIM_ConfigClockSource+0xce>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80094be:	6823      	ldr	r3, [r4, #0]
 80094c0:	6848      	ldr	r0, [r1, #4]
 80094c2:	68cd      	ldr	r5, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80094c4:	6a1a      	ldr	r2, [r3, #32]
 80094c6:	f022 0210 	bic.w	r2, r2, #16
 80094ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80094cc:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80094ce:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80094d0:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80094d4:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80094d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80094dc:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 80094e0:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80094e2:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80094e4:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80094e6:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80094e8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80094ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80094f0:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 80094f4:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80094f6:	2000      	movs	r0, #0
}
 80094f8:	e042      	b.n	8009580 <HAL_TIM_ConfigClockSource+0xfc>
  switch (sClockSourceConfig->ClockSource)
 80094fa:	2840      	cmp	r0, #64	; 0x40
 80094fc:	d11c      	bne.n	8009538 <HAL_TIM_ConfigClockSource+0xb4>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80094fe:	6823      	ldr	r3, [r4, #0]
 8009500:	6848      	ldr	r0, [r1, #4]
 8009502:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8009504:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009506:	6a1a      	ldr	r2, [r3, #32]
 8009508:	f022 0201 	bic.w	r2, r2, #1
 800950c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800950e:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009510:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009514:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009518:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800951c:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 800951e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009520:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009522:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8009524:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8009526:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800952a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800952e:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8009532:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009534:	2000      	movs	r0, #0
}
 8009536:	e023      	b.n	8009580 <HAL_TIM_ConfigClockSource+0xfc>
  switch (sClockSourceConfig->ClockSource)
 8009538:	d874      	bhi.n	8009624 <HAL_TIM_ConfigClockSource+0x1a0>
 800953a:	2820      	cmp	r0, #32
 800953c:	d02f      	beq.n	800959e <HAL_TIM_ConfigClockSource+0x11a>
 800953e:	d903      	bls.n	8009548 <HAL_TIM_ConfigClockSource+0xc4>
 8009540:	2830      	cmp	r0, #48	; 0x30
 8009542:	d02c      	beq.n	800959e <HAL_TIM_ConfigClockSource+0x11a>
 8009544:	2001      	movs	r0, #1
 8009546:	e01b      	b.n	8009580 <HAL_TIM_ConfigClockSource+0xfc>
 8009548:	f030 0310 	bics.w	r3, r0, #16
 800954c:	d027      	beq.n	800959e <HAL_TIM_ConfigClockSource+0x11a>
 800954e:	2001      	movs	r0, #1
 8009550:	e016      	b.n	8009580 <HAL_TIM_ConfigClockSource+0xfc>
 8009552:	2001      	movs	r0, #1
 8009554:	e014      	b.n	8009580 <HAL_TIM_ConfigClockSource+0xfc>
 8009556:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800955a:	d039      	beq.n	80095d0 <HAL_TIM_ConfigClockSource+0x14c>
 800955c:	d90c      	bls.n	8009578 <HAL_TIM_ConfigClockSource+0xf4>
 800955e:	4a34      	ldr	r2, [pc, #208]	; (8009630 <HAL_TIM_ConfigClockSource+0x1ac>)
 8009560:	4290      	cmp	r0, r2
 8009562:	d01c      	beq.n	800959e <HAL_TIM_ConfigClockSource+0x11a>
 8009564:	d913      	bls.n	800958e <HAL_TIM_ConfigClockSource+0x10a>
 8009566:	4a33      	ldr	r2, [pc, #204]	; (8009634 <HAL_TIM_ConfigClockSource+0x1b0>)
 8009568:	4290      	cmp	r0, r2
 800956a:	d018      	beq.n	800959e <HAL_TIM_ConfigClockSource+0x11a>
 800956c:	3230      	adds	r2, #48	; 0x30
 800956e:	4290      	cmp	r0, r2
 8009570:	bf18      	it	ne
 8009572:	2001      	movne	r0, #1
 8009574:	d013      	beq.n	800959e <HAL_TIM_ConfigClockSource+0x11a>
 8009576:	e003      	b.n	8009580 <HAL_TIM_ConfigClockSource+0xfc>
  HAL_StatusTypeDef status = HAL_OK;
 8009578:	f5b0 5080 	subs.w	r0, r0, #4096	; 0x1000
 800957c:	bf18      	it	ne
 800957e:	2001      	movne	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8009580:	2301      	movs	r3, #1
 8009582:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8009586:	2300      	movs	r3, #0
 8009588:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800958c:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 800958e:	f1b0 1f10 	cmp.w	r0, #1048592	; 0x100010
 8009592:	d004      	beq.n	800959e <HAL_TIM_ConfigClockSource+0x11a>
 8009594:	3a10      	subs	r2, #16
 8009596:	4290      	cmp	r0, r2
 8009598:	bf18      	it	ne
 800959a:	2001      	movne	r0, #1
 800959c:	d1f0      	bne.n	8009580 <HAL_TIM_ConfigClockSource+0xfc>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800959e:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80095a0:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80095a2:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80095a6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80095aa:	4302      	orrs	r2, r0
 80095ac:	f042 0207 	orr.w	r2, r2, #7
  TIMx->SMCR = tmpsmcr;
 80095b0:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80095b2:	2000      	movs	r0, #0
}
 80095b4:	e7e4      	b.n	8009580 <HAL_TIM_ConfigClockSource+0xfc>
      TIM_ETR_SetConfig(htim->Instance,
 80095b6:	68cb      	ldr	r3, [r1, #12]
 80095b8:	684a      	ldr	r2, [r1, #4]
 80095ba:	6889      	ldr	r1, [r1, #8]
 80095bc:	6820      	ldr	r0, [r4, #0]
 80095be:	f7ff ff54 	bl	800946a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80095c2:	6822      	ldr	r2, [r4, #0]
 80095c4:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80095c6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80095ca:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80095cc:	2000      	movs	r0, #0
      break;
 80095ce:	e7d7      	b.n	8009580 <HAL_TIM_ConfigClockSource+0xfc>
      TIM_ETR_SetConfig(htim->Instance,
 80095d0:	68cb      	ldr	r3, [r1, #12]
 80095d2:	684a      	ldr	r2, [r1, #4]
 80095d4:	6889      	ldr	r1, [r1, #8]
 80095d6:	6820      	ldr	r0, [r4, #0]
 80095d8:	f7ff ff47 	bl	800946a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80095dc:	6822      	ldr	r2, [r4, #0]
 80095de:	6893      	ldr	r3, [r2, #8]
 80095e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80095e4:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80095e6:	2000      	movs	r0, #0
      break;
 80095e8:	e7ca      	b.n	8009580 <HAL_TIM_ConfigClockSource+0xfc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80095ea:	6823      	ldr	r3, [r4, #0]
 80095ec:	6848      	ldr	r0, [r1, #4]
 80095ee:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80095f0:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80095f2:	6a1a      	ldr	r2, [r3, #32]
 80095f4:	f022 0201 	bic.w	r2, r2, #1
 80095f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80095fa:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80095fc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009600:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009604:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8009608:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 800960a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800960c:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800960e:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8009610:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8009612:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800961a:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800961e:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009620:	2000      	movs	r0, #0
}
 8009622:	e7ad      	b.n	8009580 <HAL_TIM_ConfigClockSource+0xfc>
  switch (sClockSourceConfig->ClockSource)
 8009624:	2001      	movs	r0, #1
 8009626:	e7ab      	b.n	8009580 <HAL_TIM_ConfigClockSource+0xfc>
  __HAL_LOCK(htim);
 8009628:	2002      	movs	r0, #2
 800962a:	e7af      	b.n	800958c <HAL_TIM_ConfigClockSource+0x108>
 800962c:	ffce0088 	.word	0xffce0088
 8009630:	00100030 	.word	0x00100030
 8009634:	00100040 	.word	0x00100040

08009638 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009638:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800963c:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800963e:	f04f 0c01 	mov.w	ip, #1
 8009642:	fa0c fc01 	lsl.w	ip, ip, r1
  TIMx->CCER &= ~tmp;
 8009646:	ea23 030c 	bic.w	r3, r3, ip
 800964a:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800964c:	6a03      	ldr	r3, [r0, #32]
 800964e:	408a      	lsls	r2, r1
 8009650:	431a      	orrs	r2, r3
 8009652:	6202      	str	r2, [r0, #32]
}
 8009654:	4770      	bx	lr
	...

08009658 <HAL_TIM_PWM_Start>:
{
 8009658:	b510      	push	{r4, lr}
 800965a:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800965c:	2910      	cmp	r1, #16
 800965e:	d86b      	bhi.n	8009738 <HAL_TIM_PWM_Start+0xe0>
 8009660:	e8df f001 	tbb	[pc, r1]
 8009664:	6a6a6a09 	.word	0x6a6a6a09
 8009668:	6a6a6a4a 	.word	0x6a6a6a4a
 800966c:	6a6a6a53 	.word	0x6a6a6a53
 8009670:	6a6a6a5a 	.word	0x6a6a6a5a
 8009674:	63          	.byte	0x63
 8009675:	00          	.byte	0x00
 8009676:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800967a:	b2db      	uxtb	r3, r3
 800967c:	2b01      	cmp	r3, #1
 800967e:	f040 80a5 	bne.w	80097cc <HAL_TIM_PWM_Start+0x174>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009682:	2302      	movs	r3, #2
 8009684:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009688:	2201      	movs	r2, #1
 800968a:	6820      	ldr	r0, [r4, #0]
 800968c:	f7ff ffd4 	bl	8009638 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009690:	6823      	ldr	r3, [r4, #0]
 8009692:	4a53      	ldr	r2, [pc, #332]	; (80097e0 <HAL_TIM_PWM_Start+0x188>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d00f      	beq.n	80096b8 <HAL_TIM_PWM_Start+0x60>
 8009698:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800969c:	4293      	cmp	r3, r2
 800969e:	d00b      	beq.n	80096b8 <HAL_TIM_PWM_Start+0x60>
 80096a0:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d007      	beq.n	80096b8 <HAL_TIM_PWM_Start+0x60>
 80096a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d003      	beq.n	80096b8 <HAL_TIM_PWM_Start+0x60>
 80096b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d107      	bne.n	80096c8 <HAL_TIM_PWM_Start+0x70>
    __HAL_TIM_MOE_ENABLE(htim);
 80096b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80096ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80096be:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096c0:	6823      	ldr	r3, [r4, #0]
 80096c2:	4a47      	ldr	r2, [pc, #284]	; (80097e0 <HAL_TIM_PWM_Start+0x188>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d073      	beq.n	80097b0 <HAL_TIM_PWM_Start+0x158>
 80096c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096cc:	d070      	beq.n	80097b0 <HAL_TIM_PWM_Start+0x158>
 80096ce:	4a45      	ldr	r2, [pc, #276]	; (80097e4 <HAL_TIM_PWM_Start+0x18c>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d06d      	beq.n	80097b0 <HAL_TIM_PWM_Start+0x158>
 80096d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80096d8:	4293      	cmp	r3, r2
 80096da:	d069      	beq.n	80097b0 <HAL_TIM_PWM_Start+0x158>
 80096dc:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d065      	beq.n	80097b0 <HAL_TIM_PWM_Start+0x158>
 80096e4:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d061      	beq.n	80097b0 <HAL_TIM_PWM_Start+0x158>
    __HAL_TIM_ENABLE(htim);
 80096ec:	681a      	ldr	r2, [r3, #0]
 80096ee:	f042 0201 	orr.w	r2, r2, #1
 80096f2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80096f4:	2000      	movs	r0, #0
 80096f6:	e068      	b.n	80097ca <HAL_TIM_PWM_Start+0x172>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80096f8:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 80096fc:	b2db      	uxtb	r3, r3
 80096fe:	2b01      	cmp	r3, #1
 8009700:	d166      	bne.n	80097d0 <HAL_TIM_PWM_Start+0x178>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009702:	2302      	movs	r3, #2
 8009704:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8009708:	e7be      	b.n	8009688 <HAL_TIM_PWM_Start+0x30>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800970a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800970e:	b2db      	uxtb	r3, r3
 8009710:	2b01      	cmp	r3, #1
 8009712:	d03d      	beq.n	8009790 <HAL_TIM_PWM_Start+0x138>
    return HAL_ERROR;
 8009714:	2001      	movs	r0, #1
 8009716:	e058      	b.n	80097ca <HAL_TIM_PWM_Start+0x172>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009718:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800971c:	b2db      	uxtb	r3, r3
 800971e:	3b01      	subs	r3, #1
 8009720:	bf18      	it	ne
 8009722:	2301      	movne	r3, #1
 8009724:	b16b      	cbz	r3, 8009742 <HAL_TIM_PWM_Start+0xea>
    return HAL_ERROR;
 8009726:	2001      	movs	r0, #1
 8009728:	e04f      	b.n	80097ca <HAL_TIM_PWM_Start+0x172>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800972a:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800972e:	b2db      	uxtb	r3, r3
 8009730:	3b01      	subs	r3, #1
 8009732:	bf18      	it	ne
 8009734:	2301      	movne	r3, #1
 8009736:	e7f5      	b.n	8009724 <HAL_TIM_PWM_Start+0xcc>
 8009738:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800973c:	b2db      	uxtb	r3, r3
 800973e:	2b01      	cmp	r3, #1
 8009740:	d148      	bne.n	80097d4 <HAL_TIM_PWM_Start+0x17c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009742:	2910      	cmp	r1, #16
 8009744:	d830      	bhi.n	80097a8 <HAL_TIM_PWM_Start+0x150>
 8009746:	a301      	add	r3, pc, #4	; (adr r3, 800974c <HAL_TIM_PWM_Start+0xf4>)
 8009748:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 800974c:	08009683 	.word	0x08009683
 8009750:	080097a9 	.word	0x080097a9
 8009754:	080097a9 	.word	0x080097a9
 8009758:	080097a9 	.word	0x080097a9
 800975c:	08009703 	.word	0x08009703
 8009760:	080097a9 	.word	0x080097a9
 8009764:	080097a9 	.word	0x080097a9
 8009768:	080097a9 	.word	0x080097a9
 800976c:	08009791 	.word	0x08009791
 8009770:	080097a9 	.word	0x080097a9
 8009774:	080097a9 	.word	0x080097a9
 8009778:	080097a9 	.word	0x080097a9
 800977c:	08009799 	.word	0x08009799
 8009780:	080097a9 	.word	0x080097a9
 8009784:	080097a9 	.word	0x080097a9
 8009788:	080097a9 	.word	0x080097a9
 800978c:	080097a1 	.word	0x080097a1
 8009790:	2302      	movs	r3, #2
 8009792:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8009796:	e777      	b.n	8009688 <HAL_TIM_PWM_Start+0x30>
 8009798:	2302      	movs	r3, #2
 800979a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800979e:	e773      	b.n	8009688 <HAL_TIM_PWM_Start+0x30>
 80097a0:	2302      	movs	r3, #2
 80097a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80097a6:	e76f      	b.n	8009688 <HAL_TIM_PWM_Start+0x30>
 80097a8:	2302      	movs	r3, #2
 80097aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097ae:	e76b      	b.n	8009688 <HAL_TIM_PWM_Start+0x30>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80097b0:	6899      	ldr	r1, [r3, #8]
 80097b2:	4a0d      	ldr	r2, [pc, #52]	; (80097e8 <HAL_TIM_PWM_Start+0x190>)
 80097b4:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097b6:	2a06      	cmp	r2, #6
 80097b8:	d00e      	beq.n	80097d8 <HAL_TIM_PWM_Start+0x180>
 80097ba:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80097be:	d00d      	beq.n	80097dc <HAL_TIM_PWM_Start+0x184>
      __HAL_TIM_ENABLE(htim);
 80097c0:	681a      	ldr	r2, [r3, #0]
 80097c2:	f042 0201 	orr.w	r2, r2, #1
 80097c6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80097c8:	2000      	movs	r0, #0
}
 80097ca:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80097cc:	2001      	movs	r0, #1
 80097ce:	e7fc      	b.n	80097ca <HAL_TIM_PWM_Start+0x172>
 80097d0:	2001      	movs	r0, #1
 80097d2:	e7fa      	b.n	80097ca <HAL_TIM_PWM_Start+0x172>
 80097d4:	2001      	movs	r0, #1
 80097d6:	e7f8      	b.n	80097ca <HAL_TIM_PWM_Start+0x172>
  return HAL_OK;
 80097d8:	2000      	movs	r0, #0
 80097da:	e7f6      	b.n	80097ca <HAL_TIM_PWM_Start+0x172>
 80097dc:	2000      	movs	r0, #0
 80097de:	e7f4      	b.n	80097ca <HAL_TIM_PWM_Start+0x172>
 80097e0:	40012c00 	.word	0x40012c00
 80097e4:	40000400 	.word	0x40000400
 80097e8:	00010007 	.word	0x00010007

080097ec <HAL_TIM_PWM_Stop>:
{
 80097ec:	b538      	push	{r3, r4, r5, lr}
 80097ee:	4604      	mov	r4, r0
 80097f0:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80097f2:	2200      	movs	r2, #0
 80097f4:	6800      	ldr	r0, [r0, #0]
 80097f6:	f7ff ff1f 	bl	8009638 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80097fa:	6823      	ldr	r3, [r4, #0]
 80097fc:	4a2a      	ldr	r2, [pc, #168]	; (80098a8 <HAL_TIM_PWM_Stop+0xbc>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d00f      	beq.n	8009822 <HAL_TIM_PWM_Stop+0x36>
 8009802:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009806:	4293      	cmp	r3, r2
 8009808:	d00b      	beq.n	8009822 <HAL_TIM_PWM_Stop+0x36>
 800980a:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800980e:	4293      	cmp	r3, r2
 8009810:	d007      	beq.n	8009822 <HAL_TIM_PWM_Stop+0x36>
 8009812:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009816:	4293      	cmp	r3, r2
 8009818:	d003      	beq.n	8009822 <HAL_TIM_PWM_Stop+0x36>
 800981a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800981e:	4293      	cmp	r3, r2
 8009820:	d10d      	bne.n	800983e <HAL_TIM_PWM_Stop+0x52>
    __HAL_TIM_MOE_DISABLE(htim);
 8009822:	6a19      	ldr	r1, [r3, #32]
 8009824:	f241 1211 	movw	r2, #4369	; 0x1111
 8009828:	4211      	tst	r1, r2
 800982a:	d108      	bne.n	800983e <HAL_TIM_PWM_Stop+0x52>
 800982c:	6a19      	ldr	r1, [r3, #32]
 800982e:	f244 4244 	movw	r2, #17476	; 0x4444
 8009832:	4211      	tst	r1, r2
 8009834:	d103      	bne.n	800983e <HAL_TIM_PWM_Stop+0x52>
 8009836:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009838:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800983c:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800983e:	6823      	ldr	r3, [r4, #0]
 8009840:	6a19      	ldr	r1, [r3, #32]
 8009842:	f241 1211 	movw	r2, #4369	; 0x1111
 8009846:	4211      	tst	r1, r2
 8009848:	d108      	bne.n	800985c <HAL_TIM_PWM_Stop+0x70>
 800984a:	6a19      	ldr	r1, [r3, #32]
 800984c:	f244 4244 	movw	r2, #17476	; 0x4444
 8009850:	4211      	tst	r1, r2
 8009852:	d103      	bne.n	800985c <HAL_TIM_PWM_Stop+0x70>
 8009854:	681a      	ldr	r2, [r3, #0]
 8009856:	f022 0201 	bic.w	r2, r2, #1
 800985a:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800985c:	b925      	cbnz	r5, 8009868 <HAL_TIM_PWM_Stop+0x7c>
 800985e:	2301      	movs	r3, #1
 8009860:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8009864:	2000      	movs	r0, #0
 8009866:	bd38      	pop	{r3, r4, r5, pc}
 8009868:	3d04      	subs	r5, #4
 800986a:	2d0c      	cmp	r5, #12
 800986c:	d818      	bhi.n	80098a0 <HAL_TIM_PWM_Stop+0xb4>
 800986e:	e8df f005 	tbb	[pc, r5]
 8009872:	1707      	.short	0x1707
 8009874:	170b1717 	.word	0x170b1717
 8009878:	170f1717 	.word	0x170f1717
 800987c:	1717      	.short	0x1717
 800987e:	13          	.byte	0x13
 800987f:	00          	.byte	0x00
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009880:	2301      	movs	r3, #1
 8009882:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8009886:	e7ed      	b.n	8009864 <HAL_TIM_PWM_Stop+0x78>
 8009888:	2301      	movs	r3, #1
 800988a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800988e:	e7e9      	b.n	8009864 <HAL_TIM_PWM_Stop+0x78>
 8009890:	2301      	movs	r3, #1
 8009892:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8009896:	e7e5      	b.n	8009864 <HAL_TIM_PWM_Stop+0x78>
 8009898:	2301      	movs	r3, #1
 800989a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800989e:	e7e1      	b.n	8009864 <HAL_TIM_PWM_Stop+0x78>
 80098a0:	2301      	movs	r3, #1
 80098a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098a6:	e7dd      	b.n	8009864 <HAL_TIM_PWM_Stop+0x78>
 80098a8:	40012c00 	.word	0x40012c00

080098ac <TIM_CCxNChannelCmd>:
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80098ac:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80098b0:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80098b2:	f04f 0c04 	mov.w	ip, #4
 80098b6:	fa0c fc01 	lsl.w	ip, ip, r1
  TIMx->CCER &=  ~tmp;
 80098ba:	ea23 030c 	bic.w	r3, r3, ip
 80098be:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80098c0:	6a03      	ldr	r3, [r0, #32]
 80098c2:	408a      	lsls	r2, r1
 80098c4:	431a      	orrs	r2, r3
 80098c6:	6202      	str	r2, [r0, #32]
}
 80098c8:	4770      	bx	lr
	...

080098cc <HAL_TIMEx_PWMN_Start>:
{
 80098cc:	b510      	push	{r4, lr}
 80098ce:	4604      	mov	r4, r0
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80098d0:	460b      	mov	r3, r1
 80098d2:	bb71      	cbnz	r1, 8009932 <HAL_TIMEx_PWMN_Start+0x66>
 80098d4:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
 80098d8:	b2d2      	uxtb	r2, r2
 80098da:	2a01      	cmp	r2, #1
 80098dc:	d156      	bne.n	800998c <HAL_TIMEx_PWMN_Start+0xc0>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80098de:	2202      	movs	r2, #2
 80098e0:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80098e4:	2204      	movs	r2, #4
 80098e6:	4619      	mov	r1, r3
 80098e8:	6820      	ldr	r0, [r4, #0]
 80098ea:	f7ff ffdf 	bl	80098ac <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 80098ee:	6822      	ldr	r2, [r4, #0]
 80098f0:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80098f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098f6:	6453      	str	r3, [r2, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098f8:	6823      	ldr	r3, [r4, #0]
 80098fa:	4a29      	ldr	r2, [pc, #164]	; (80099a0 <HAL_TIMEx_PWMN_Start+0xd4>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d037      	beq.n	8009970 <HAL_TIMEx_PWMN_Start+0xa4>
 8009900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009904:	d034      	beq.n	8009970 <HAL_TIMEx_PWMN_Start+0xa4>
 8009906:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800990a:	4293      	cmp	r3, r2
 800990c:	d030      	beq.n	8009970 <HAL_TIMEx_PWMN_Start+0xa4>
 800990e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009912:	4293      	cmp	r3, r2
 8009914:	d02c      	beq.n	8009970 <HAL_TIMEx_PWMN_Start+0xa4>
 8009916:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800991a:	4293      	cmp	r3, r2
 800991c:	d028      	beq.n	8009970 <HAL_TIMEx_PWMN_Start+0xa4>
 800991e:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8009922:	4293      	cmp	r3, r2
 8009924:	d024      	beq.n	8009970 <HAL_TIMEx_PWMN_Start+0xa4>
    __HAL_TIM_ENABLE(htim);
 8009926:	681a      	ldr	r2, [r3, #0]
 8009928:	f042 0201 	orr.w	r2, r2, #1
 800992c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800992e:	2000      	movs	r0, #0
 8009930:	e02b      	b.n	800998a <HAL_TIMEx_PWMN_Start+0xbe>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009932:	2904      	cmp	r1, #4
 8009934:	d013      	beq.n	800995e <HAL_TIMEx_PWMN_Start+0x92>
 8009936:	2908      	cmp	r1, #8
 8009938:	bf0c      	ite	eq
 800993a:	f890 2046 	ldrbeq.w	r2, [r0, #70]	; 0x46
 800993e:	f890 2047 	ldrbne.w	r2, [r0, #71]	; 0x47
 8009942:	b2d2      	uxtb	r2, r2
 8009944:	3a01      	subs	r2, #1
 8009946:	bf18      	it	ne
 8009948:	2201      	movne	r2, #1
 800994a:	bb3a      	cbnz	r2, 800999c <HAL_TIMEx_PWMN_Start+0xd0>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800994c:	2b08      	cmp	r3, #8
 800994e:	f04f 0202 	mov.w	r2, #2
 8009952:	bf0c      	ite	eq
 8009954:	f884 2046 	strbeq.w	r2, [r4, #70]	; 0x46
 8009958:	f884 2047 	strbne.w	r2, [r4, #71]	; 0x47
 800995c:	e7c2      	b.n	80098e4 <HAL_TIMEx_PWMN_Start+0x18>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800995e:	f890 2045 	ldrb.w	r2, [r0, #69]	; 0x45
 8009962:	b2d2      	uxtb	r2, r2
 8009964:	2a01      	cmp	r2, #1
 8009966:	d113      	bne.n	8009990 <HAL_TIMEx_PWMN_Start+0xc4>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009968:	2202      	movs	r2, #2
 800996a:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
 800996e:	e7b9      	b.n	80098e4 <HAL_TIMEx_PWMN_Start+0x18>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009970:	6899      	ldr	r1, [r3, #8]
 8009972:	4a0c      	ldr	r2, [pc, #48]	; (80099a4 <HAL_TIMEx_PWMN_Start+0xd8>)
 8009974:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009976:	2a06      	cmp	r2, #6
 8009978:	d00c      	beq.n	8009994 <HAL_TIMEx_PWMN_Start+0xc8>
 800997a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800997e:	d00b      	beq.n	8009998 <HAL_TIMEx_PWMN_Start+0xcc>
      __HAL_TIM_ENABLE(htim);
 8009980:	681a      	ldr	r2, [r3, #0]
 8009982:	f042 0201 	orr.w	r2, r2, #1
 8009986:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8009988:	2000      	movs	r0, #0
}
 800998a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800998c:	2001      	movs	r0, #1
 800998e:	e7fc      	b.n	800998a <HAL_TIMEx_PWMN_Start+0xbe>
 8009990:	2001      	movs	r0, #1
 8009992:	e7fa      	b.n	800998a <HAL_TIMEx_PWMN_Start+0xbe>
  return HAL_OK;
 8009994:	2000      	movs	r0, #0
 8009996:	e7f8      	b.n	800998a <HAL_TIMEx_PWMN_Start+0xbe>
 8009998:	2000      	movs	r0, #0
 800999a:	e7f6      	b.n	800998a <HAL_TIMEx_PWMN_Start+0xbe>
    return HAL_ERROR;
 800999c:	2001      	movs	r0, #1
 800999e:	e7f4      	b.n	800998a <HAL_TIMEx_PWMN_Start+0xbe>
 80099a0:	40012c00 	.word	0x40012c00
 80099a4:	00010007 	.word	0x00010007

080099a8 <HAL_TIMEx_PWMN_Stop>:
{
 80099a8:	b538      	push	{r3, r4, r5, lr}
 80099aa:	4604      	mov	r4, r0
 80099ac:	460d      	mov	r5, r1
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80099ae:	2200      	movs	r2, #0
 80099b0:	6800      	ldr	r0, [r0, #0]
 80099b2:	f7ff ff7b 	bl	80098ac <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_DISABLE(htim);
 80099b6:	6823      	ldr	r3, [r4, #0]
 80099b8:	6a19      	ldr	r1, [r3, #32]
 80099ba:	f241 1211 	movw	r2, #4369	; 0x1111
 80099be:	4211      	tst	r1, r2
 80099c0:	d108      	bne.n	80099d4 <HAL_TIMEx_PWMN_Stop+0x2c>
 80099c2:	6a19      	ldr	r1, [r3, #32]
 80099c4:	f244 4244 	movw	r2, #17476	; 0x4444
 80099c8:	4211      	tst	r1, r2
 80099ca:	d103      	bne.n	80099d4 <HAL_TIMEx_PWMN_Stop+0x2c>
 80099cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80099ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80099d2:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 80099d4:	6823      	ldr	r3, [r4, #0]
 80099d6:	6a19      	ldr	r1, [r3, #32]
 80099d8:	f241 1211 	movw	r2, #4369	; 0x1111
 80099dc:	4211      	tst	r1, r2
 80099de:	d108      	bne.n	80099f2 <HAL_TIMEx_PWMN_Stop+0x4a>
 80099e0:	6a19      	ldr	r1, [r3, #32]
 80099e2:	f244 4244 	movw	r2, #17476	; 0x4444
 80099e6:	4211      	tst	r1, r2
 80099e8:	d103      	bne.n	80099f2 <HAL_TIMEx_PWMN_Stop+0x4a>
 80099ea:	681a      	ldr	r2, [r3, #0]
 80099ec:	f022 0201 	bic.w	r2, r2, #1
 80099f0:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80099f2:	b925      	cbnz	r5, 80099fe <HAL_TIMEx_PWMN_Stop+0x56>
 80099f4:	2301      	movs	r3, #1
 80099f6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 80099fa:	2000      	movs	r0, #0
 80099fc:	bd38      	pop	{r3, r4, r5, pc}
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80099fe:	2d04      	cmp	r5, #4
 8009a00:	d008      	beq.n	8009a14 <HAL_TIMEx_PWMN_Stop+0x6c>
 8009a02:	2d08      	cmp	r5, #8
 8009a04:	f04f 0301 	mov.w	r3, #1
 8009a08:	bf0c      	ite	eq
 8009a0a:	f884 3046 	strbeq.w	r3, [r4, #70]	; 0x46
 8009a0e:	f884 3047 	strbne.w	r3, [r4, #71]	; 0x47
 8009a12:	e7f2      	b.n	80099fa <HAL_TIMEx_PWMN_Stop+0x52>
 8009a14:	2301      	movs	r3, #1
 8009a16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009a1a:	e7ee      	b.n	80099fa <HAL_TIMEx_PWMN_Stop+0x52>

08009a1c <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8009a1c:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8009a20:	2a01      	cmp	r2, #1
 8009a22:	d040      	beq.n	8009aa6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
{
 8009a24:	b430      	push	{r4, r5}
 8009a26:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8009a28:	2201      	movs	r2, #1
 8009a2a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8009a2e:	2202      	movs	r2, #2
 8009a30:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8009a34:	6800      	ldr	r0, [r0, #0]
 8009a36:	6842      	ldr	r2, [r0, #4]
  tmpsmcr = htim->Instance->SMCR;
 8009a38:	6884      	ldr	r4, [r0, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009a3a:	4d1c      	ldr	r5, [pc, #112]	; (8009aac <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 8009a3c:	42a8      	cmp	r0, r5
 8009a3e:	d003      	beq.n	8009a48 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
 8009a40:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009a44:	42a8      	cmp	r0, r5
 8009a46:	d103      	bne.n	8009a50 <HAL_TIMEx_MasterConfigSynchronization+0x34>
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009a48:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009a4c:	684d      	ldr	r5, [r1, #4]
 8009a4e:	432a      	orrs	r2, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8009a50:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8009a54:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009a58:	680d      	ldr	r5, [r1, #0]
 8009a5a:	432a      	orrs	r2, r5
  htim->Instance->CR2 = tmpcr2;
 8009a5c:	6042      	str	r2, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a5e:	681a      	ldr	r2, [r3, #0]
 8009a60:	4812      	ldr	r0, [pc, #72]	; (8009aac <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 8009a62:	4282      	cmp	r2, r0
 8009a64:	d012      	beq.n	8009a8c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8009a66:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8009a6a:	d00f      	beq.n	8009a8c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8009a6c:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 8009a70:	4282      	cmp	r2, r0
 8009a72:	d00b      	beq.n	8009a8c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8009a74:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8009a78:	4282      	cmp	r2, r0
 8009a7a:	d007      	beq.n	8009a8c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8009a7c:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 8009a80:	4282      	cmp	r2, r0
 8009a82:	d003      	beq.n	8009a8c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8009a84:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 8009a88:	4282      	cmp	r2, r0
 8009a8a:	d104      	bne.n	8009a96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009a8c:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009a90:	6889      	ldr	r1, [r1, #8]
 8009a92:	430c      	orrs	r4, r1
    htim->Instance->SMCR = tmpsmcr;
 8009a94:	6094      	str	r4, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8009a96:	2201      	movs	r2, #1
 8009a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8009a9c:	2000      	movs	r0, #0
 8009a9e:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
}
 8009aa2:	bc30      	pop	{r4, r5}
 8009aa4:	4770      	bx	lr
  __HAL_LOCK(htim);
 8009aa6:	2002      	movs	r0, #2
}
 8009aa8:	4770      	bx	lr
 8009aaa:	bf00      	nop
 8009aac:	40012c00 	.word	0x40012c00

08009ab0 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 8009ab0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	d031      	beq.n	8009b1c <HAL_TIMEx_ConfigBreakDeadTime+0x6c>
{
 8009ab8:	b410      	push	{r4}
 8009aba:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8009abc:	2301      	movs	r3, #1
 8009abe:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009ac2:	68cb      	ldr	r3, [r1, #12]
 8009ac4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ac8:	6888      	ldr	r0, [r1, #8]
 8009aca:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009acc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009ad0:	6848      	ldr	r0, [r1, #4]
 8009ad2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009ad4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009ad8:	6808      	ldr	r0, [r1, #0]
 8009ada:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009adc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ae0:	6908      	ldr	r0, [r1, #16]
 8009ae2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009ae4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009ae8:	6948      	ldr	r0, [r1, #20]
 8009aea:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009aec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009af0:	6b08      	ldr	r0, [r1, #48]	; 0x30
 8009af2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009af4:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8009af8:	6988      	ldr	r0, [r1, #24]
 8009afa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009afe:	6810      	ldr	r0, [r2, #0]
 8009b00:	4c1b      	ldr	r4, [pc, #108]	; (8009b70 <HAL_TIMEx_ConfigBreakDeadTime+0xc0>)
 8009b02:	42a0      	cmp	r0, r4
 8009b04:	d00c      	beq.n	8009b20 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
 8009b06:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8009b0a:	42a0      	cmp	r0, r4
 8009b0c:	d01e      	beq.n	8009b4c <HAL_TIMEx_ConfigBreakDeadTime+0x9c>
  htim->Instance->BDTR = tmpbdtr;
 8009b0e:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8009b10:	2000      	movs	r0, #0
 8009b12:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
}
 8009b16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b1a:	4770      	bx	lr
  __HAL_LOCK(htim);
 8009b1c:	2002      	movs	r0, #2
}
 8009b1e:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009b20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b24:	69cc      	ldr	r4, [r1, #28]
 8009b26:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009b28:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009b2c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8009b2e:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009b32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009b36:	6a0c      	ldr	r4, [r1, #32]
 8009b38:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009b3a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009b3e:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8009b40:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009b42:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009b46:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8009b48:	430b      	orrs	r3, r1
 8009b4a:	e7e0      	b.n	8009b0e <HAL_TIMEx_ConfigBreakDeadTime+0x5e>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009b4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b50:	69cc      	ldr	r4, [r1, #28]
 8009b52:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009b54:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009b58:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8009b5a:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009b5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009b62:	6a0c      	ldr	r4, [r1, #32]
 8009b64:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009b66:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009b6a:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8009b6c:	4323      	orrs	r3, r4
    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009b6e:	e7e8      	b.n	8009b42 <HAL_TIMEx_ConfigBreakDeadTime+0x92>
 8009b70:	40012c00 	.word	0x40012c00

08009b74 <HAL_TIMEx_CommutCallback>:
}
 8009b74:	4770      	bx	lr

08009b76 <HAL_TIMEx_BreakCallback>:
}
 8009b76:	4770      	bx	lr

08009b78 <HAL_TIMEx_Break2Callback>:
}
 8009b78:	4770      	bx	lr

08009b7a <HAL_TIMEx_EncoderIndexCallback>:
}
 8009b7a:	4770      	bx	lr

08009b7c <HAL_TIMEx_DirectionChangeCallback>:
}
 8009b7c:	4770      	bx	lr

08009b7e <HAL_TIMEx_IndexErrorCallback>:
}
 8009b7e:	4770      	bx	lr

08009b80 <HAL_TIMEx_TransitionErrorCallback>:
}
 8009b80:	4770      	bx	lr

08009b82 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009b82:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b84:	e852 3f00 	ldrex	r3, [r2]
 8009b88:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b8c:	e842 3100 	strex	r1, r3, [r2]
 8009b90:	2900      	cmp	r1, #0
 8009b92:	d1f6      	bne.n	8009b82 <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009b94:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b96:	f102 0308 	add.w	r3, r2, #8
 8009b9a:	e853 3f00 	ldrex	r3, [r3]
 8009b9e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba2:	3208      	adds	r2, #8
 8009ba4:	e842 3100 	strex	r1, r3, [r2]
 8009ba8:	2900      	cmp	r1, #0
 8009baa:	d1f3      	bne.n	8009b94 <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009bac:	2320      	movs	r3, #32
 8009bae:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
}
 8009bb2:	4770      	bx	lr

08009bb4 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009bb4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bb6:	e852 3f00 	ldrex	r3, [r2]
 8009bba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bbe:	e842 3100 	strex	r1, r3, [r2]
 8009bc2:	2900      	cmp	r1, #0
 8009bc4:	d1f6      	bne.n	8009bb4 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009bc6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bc8:	f102 0308 	add.w	r3, r2, #8
 8009bcc:	e853 3f00 	ldrex	r3, [r3]
 8009bd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009bd4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bd8:	3208      	adds	r2, #8
 8009bda:	e842 3100 	strex	r1, r3, [r2]
 8009bde:	2900      	cmp	r1, #0
 8009be0:	d1f1      	bne.n	8009bc6 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009be2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8009be4:	2b01      	cmp	r3, #1
 8009be6:	d006      	beq.n	8009bf6 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009be8:	2320      	movs	r3, #32
 8009bea:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009bf2:	6703      	str	r3, [r0, #112]	; 0x70
}
 8009bf4:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bf6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bf8:	e852 3f00 	ldrex	r3, [r2]
 8009bfc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c00:	e842 3100 	strex	r1, r3, [r2]
 8009c04:	2900      	cmp	r1, #0
 8009c06:	d1f6      	bne.n	8009bf6 <UART_EndRxTransfer+0x42>
 8009c08:	e7ee      	b.n	8009be8 <UART_EndRxTransfer+0x34>
	...

08009c0c <HAL_UART_Transmit_DMA>:
{
 8009c0c:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8009c0e:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8009c12:	2a20      	cmp	r2, #32
 8009c14:	d14a      	bne.n	8009cac <HAL_UART_Transmit_DMA+0xa0>
{
 8009c16:	b510      	push	{r4, lr}
 8009c18:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8009c1a:	2900      	cmp	r1, #0
 8009c1c:	d048      	beq.n	8009cb0 <HAL_UART_Transmit_DMA+0xa4>
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d048      	beq.n	8009cb4 <HAL_UART_Transmit_DMA+0xa8>
    __HAL_LOCK(huart);
 8009c22:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8009c26:	2a01      	cmp	r2, #1
 8009c28:	d046      	beq.n	8009cb8 <HAL_UART_Transmit_DMA+0xac>
 8009c2a:	2201      	movs	r2, #1
 8009c2c:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
    huart->pTxBuffPtr  = pData;
 8009c30:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 8009c32:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 8009c36:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009c40:	2221      	movs	r2, #33	; 0x21
 8009c42:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    if (huart->hdmatx != NULL)
 8009c46:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8009c48:	b1e2      	cbz	r2, 8009c84 <HAL_UART_Transmit_DMA+0x78>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009c4a:	491c      	ldr	r1, [pc, #112]	; (8009cbc <HAL_UART_Transmit_DMA+0xb0>)
 8009c4c:	62d1      	str	r1, [r2, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009c4e:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8009c50:	491b      	ldr	r1, [pc, #108]	; (8009cc0 <HAL_UART_Transmit_DMA+0xb4>)
 8009c52:	6311      	str	r1, [r2, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009c54:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8009c56:	491b      	ldr	r1, [pc, #108]	; (8009cc4 <HAL_UART_Transmit_DMA+0xb8>)
 8009c58:	6351      	str	r1, [r2, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 8009c5a:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8009c5c:	2100      	movs	r1, #0
 8009c5e:	6391      	str	r1, [r2, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009c60:	6802      	ldr	r2, [r0, #0]
 8009c62:	3228      	adds	r2, #40	; 0x28
 8009c64:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8009c66:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8009c68:	f7fc fdf4 	bl	8006854 <HAL_DMA_Start_IT>
 8009c6c:	b150      	cbz	r0, 8009c84 <HAL_UART_Transmit_DMA+0x78>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009c6e:	2310      	movs	r3, #16
 8009c70:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 8009c74:	2300      	movs	r3, #0
 8009c76:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 8009c7a:	2320      	movs	r3, #32
 8009c7c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        return HAL_ERROR;
 8009c80:	2001      	movs	r0, #1
 8009c82:	e012      	b.n	8009caa <HAL_UART_Transmit_DMA+0x9e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009c84:	6823      	ldr	r3, [r4, #0]
 8009c86:	2240      	movs	r2, #64	; 0x40
 8009c88:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009c90:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c92:	f102 0308 	add.w	r3, r2, #8
 8009c96:	e853 3f00 	ldrex	r3, [r3]
 8009c9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c9e:	3208      	adds	r2, #8
 8009ca0:	e842 3100 	strex	r1, r3, [r2]
 8009ca4:	2900      	cmp	r1, #0
 8009ca6:	d1f3      	bne.n	8009c90 <HAL_UART_Transmit_DMA+0x84>
    return HAL_OK;
 8009ca8:	2000      	movs	r0, #0
}
 8009caa:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8009cac:	2002      	movs	r0, #2
}
 8009cae:	4770      	bx	lr
      return HAL_ERROR;
 8009cb0:	2001      	movs	r0, #1
 8009cb2:	e7fa      	b.n	8009caa <HAL_UART_Transmit_DMA+0x9e>
 8009cb4:	2001      	movs	r0, #1
 8009cb6:	e7f8      	b.n	8009caa <HAL_UART_Transmit_DMA+0x9e>
    __HAL_LOCK(huart);
 8009cb8:	2002      	movs	r0, #2
 8009cba:	e7f6      	b.n	8009caa <HAL_UART_Transmit_DMA+0x9e>
 8009cbc:	08009ccb 	.word	0x08009ccb
 8009cc0:	08009d15 	.word	0x08009d15
 8009cc4:	08009d21 	.word	0x08009d21

08009cc8 <HAL_UART_TxCpltCallback>:
}
 8009cc8:	4770      	bx	lr

08009cca <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009cca:	b508      	push	{r3, lr}
 8009ccc:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009cce:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f013 0f20 	tst.w	r3, #32
 8009cd8:	d118      	bne.n	8009d0c <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009ce0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce2:	f102 0308 	add.w	r3, r2, #8
 8009ce6:	e853 3f00 	ldrex	r3, [r3]
 8009cea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cee:	3208      	adds	r2, #8
 8009cf0:	e842 3100 	strex	r1, r3, [r2]
 8009cf4:	2900      	cmp	r1, #0
 8009cf6:	d1f3      	bne.n	8009ce0 <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009cf8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cfa:	e852 3f00 	ldrex	r3, [r2]
 8009cfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d02:	e842 3100 	strex	r1, r3, [r2]
 8009d06:	2900      	cmp	r1, #0
 8009d08:	d1f6      	bne.n	8009cf8 <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009d0a:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8009d0c:	f7ff ffdc 	bl	8009cc8 <HAL_UART_TxCpltCallback>
}
 8009d10:	e7fb      	b.n	8009d0a <UART_DMATransmitCplt+0x40>

08009d12 <HAL_UART_TxHalfCpltCallback>:
}
 8009d12:	4770      	bx	lr

08009d14 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009d14:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009d16:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8009d18:	f7ff fffb 	bl	8009d12 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d1c:	bd08      	pop	{r3, pc}

08009d1e <HAL_UART_ErrorCallback>:
}
 8009d1e:	4770      	bx	lr

08009d20 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009d20:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009d22:	6a84      	ldr	r4, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009d24:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009d28:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009d2c:	6823      	ldr	r3, [r4, #0]
 8009d2e:	689b      	ldr	r3, [r3, #8]
 8009d30:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009d34:	d001      	beq.n	8009d3a <UART_DMAError+0x1a>
 8009d36:	2a21      	cmp	r2, #33	; 0x21
 8009d38:	d010      	beq.n	8009d5c <UART_DMAError+0x3c>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009d3a:	6823      	ldr	r3, [r4, #0]
 8009d3c:	689b      	ldr	r3, [r3, #8]
 8009d3e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009d42:	d001      	beq.n	8009d48 <UART_DMAError+0x28>
 8009d44:	2d22      	cmp	r5, #34	; 0x22
 8009d46:	d010      	beq.n	8009d6a <UART_DMAError+0x4a>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009d48:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009d4c:	f043 0310 	orr.w	r3, r3, #16
 8009d50:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009d54:	4620      	mov	r0, r4
 8009d56:	f7ff ffe2 	bl	8009d1e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d5a:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8009d62:	4620      	mov	r0, r4
 8009d64:	f7ff ff0d 	bl	8009b82 <UART_EndTxTransfer>
 8009d68:	e7e7      	b.n	8009d3a <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8009d70:	4620      	mov	r0, r4
 8009d72:	f7ff ff1f 	bl	8009bb4 <UART_EndRxTransfer>
 8009d76:	e7e7      	b.n	8009d48 <UART_DMAError+0x28>

08009d78 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009d78:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009d7a:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009d82:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009d86:	f7ff ffca 	bl	8009d1e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d8a:	bd08      	pop	{r3, pc}

08009d8c <HAL_UARTEx_RxEventCallback>:
}
 8009d8c:	4770      	bx	lr
	...

08009d90 <HAL_UART_IRQHandler>:
{
 8009d90:	b570      	push	{r4, r5, r6, lr}
 8009d92:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009d94:	6802      	ldr	r2, [r0, #0]
 8009d96:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009d98:	6811      	ldr	r1, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009d9a:	6890      	ldr	r0, [r2, #8]
  if (errorflags == 0U)
 8009d9c:	f640 0c0f 	movw	ip, #2063	; 0x80f
 8009da0:	ea13 0f0c 	tst.w	r3, ip
 8009da4:	d10e      	bne.n	8009dc4 <HAL_UART_IRQHandler+0x34>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009da6:	f013 0f20 	tst.w	r3, #32
 8009daa:	d014      	beq.n	8009dd6 <HAL_UART_IRQHandler+0x46>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009dac:	f001 0c20 	and.w	ip, r1, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009db0:	f000 5580 	and.w	r5, r0, #268435456	; 0x10000000
 8009db4:	ea5c 0c05 	orrs.w	ip, ip, r5
 8009db8:	d00d      	beq.n	8009dd6 <HAL_UART_IRQHandler+0x46>
      if (huart->RxISR != NULL)
 8009dba:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8009dbc:	b3a3      	cbz	r3, 8009e28 <HAL_UART_IRQHandler+0x98>
        huart->RxISR(huart);
 8009dbe:	4620      	mov	r0, r4
 8009dc0:	4798      	blx	r3
 8009dc2:	e031      	b.n	8009e28 <HAL_UART_IRQHandler+0x98>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009dc4:	4db5      	ldr	r5, [pc, #724]	; (800a09c <HAL_UART_IRQHandler+0x30c>)
 8009dc6:	4005      	ands	r5, r0
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009dc8:	f8df c2d8 	ldr.w	ip, [pc, #728]	; 800a0a4 <HAL_UART_IRQHandler+0x314>
 8009dcc:	ea01 0c0c 	and.w	ip, r1, ip
 8009dd0:	ea5c 0c05 	orrs.w	ip, ip, r5
 8009dd4:	d129      	bne.n	8009e2a <HAL_UART_IRQHandler+0x9a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009dd6:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8009dd8:	2d01      	cmp	r5, #1
 8009dda:	f000 80c0 	beq.w	8009f5e <HAL_UART_IRQHandler+0x1ce>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009dde:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8009de2:	d003      	beq.n	8009dec <HAL_UART_IRQHandler+0x5c>
 8009de4:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8009de8:	f040 8151 	bne.w	800a08e <HAL_UART_IRQHandler+0x2fe>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009dec:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009df0:	d006      	beq.n	8009e00 <HAL_UART_IRQHandler+0x70>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009df2:	f001 0280 	and.w	r2, r1, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009df6:	f400 0000 	and.w	r0, r0, #8388608	; 0x800000
 8009dfa:	4302      	orrs	r2, r0
 8009dfc:	f040 8154 	bne.w	800a0a8 <HAL_UART_IRQHandler+0x318>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009e00:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009e04:	d003      	beq.n	8009e0e <HAL_UART_IRQHandler+0x7e>
 8009e06:	f011 0f40 	tst.w	r1, #64	; 0x40
 8009e0a:	f040 8154 	bne.w	800a0b6 <HAL_UART_IRQHandler+0x326>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009e0e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8009e12:	d003      	beq.n	8009e1c <HAL_UART_IRQHandler+0x8c>
 8009e14:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8009e18:	f040 815f 	bne.w	800a0da <HAL_UART_IRQHandler+0x34a>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009e1c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8009e20:	d002      	beq.n	8009e28 <HAL_UART_IRQHandler+0x98>
 8009e22:	2900      	cmp	r1, #0
 8009e24:	f2c0 815d 	blt.w	800a0e2 <HAL_UART_IRQHandler+0x352>
}
 8009e28:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009e2a:	f013 0f01 	tst.w	r3, #1
 8009e2e:	d009      	beq.n	8009e44 <HAL_UART_IRQHandler+0xb4>
 8009e30:	f411 7f80 	tst.w	r1, #256	; 0x100
 8009e34:	d006      	beq.n	8009e44 <HAL_UART_IRQHandler+0xb4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009e36:	2601      	movs	r6, #1
 8009e38:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009e3a:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8009e3e:	4332      	orrs	r2, r6
 8009e40:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e44:	f013 0f02 	tst.w	r3, #2
 8009e48:	d00f      	beq.n	8009e6a <HAL_UART_IRQHandler+0xda>
 8009e4a:	f010 0f01 	tst.w	r0, #1
 8009e4e:	d01b      	beq.n	8009e88 <HAL_UART_IRQHandler+0xf8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009e50:	6822      	ldr	r2, [r4, #0]
 8009e52:	2602      	movs	r6, #2
 8009e54:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009e56:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8009e5a:	f042 0204 	orr.w	r2, r2, #4
 8009e5e:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e62:	f013 0f04 	tst.w	r3, #4
 8009e66:	d106      	bne.n	8009e76 <HAL_UART_IRQHandler+0xe6>
 8009e68:	e00e      	b.n	8009e88 <HAL_UART_IRQHandler+0xf8>
 8009e6a:	f013 0f04 	tst.w	r3, #4
 8009e6e:	d00b      	beq.n	8009e88 <HAL_UART_IRQHandler+0xf8>
 8009e70:	f010 0f01 	tst.w	r0, #1
 8009e74:	d008      	beq.n	8009e88 <HAL_UART_IRQHandler+0xf8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009e76:	6822      	ldr	r2, [r4, #0]
 8009e78:	2604      	movs	r6, #4
 8009e7a:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009e7c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8009e80:	f042 0202 	orr.w	r2, r2, #2
 8009e84:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009e88:	f013 0f08 	tst.w	r3, #8
 8009e8c:	d00b      	beq.n	8009ea6 <HAL_UART_IRQHandler+0x116>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009e8e:	f001 0220 	and.w	r2, r1, #32
 8009e92:	432a      	orrs	r2, r5
 8009e94:	d007      	beq.n	8009ea6 <HAL_UART_IRQHandler+0x116>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009e96:	6822      	ldr	r2, [r4, #0]
 8009e98:	2508      	movs	r5, #8
 8009e9a:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009e9c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8009ea0:	432a      	orrs	r2, r5
 8009ea2:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009ea6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8009eaa:	d00c      	beq.n	8009ec6 <HAL_UART_IRQHandler+0x136>
 8009eac:	f011 6f80 	tst.w	r1, #67108864	; 0x4000000
 8009eb0:	d009      	beq.n	8009ec6 <HAL_UART_IRQHandler+0x136>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009eb2:	6822      	ldr	r2, [r4, #0]
 8009eb4:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8009eb8:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009eba:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8009ebe:	f042 0220 	orr.w	r2, r2, #32
 8009ec2:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009ec6:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8009eca:	2a00      	cmp	r2, #0
 8009ecc:	d0ac      	beq.n	8009e28 <HAL_UART_IRQHandler+0x98>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009ece:	f013 0f20 	tst.w	r3, #32
 8009ed2:	d009      	beq.n	8009ee8 <HAL_UART_IRQHandler+0x158>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009ed4:	f001 0120 	and.w	r1, r1, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009ed8:	f000 5080 	and.w	r0, r0, #268435456	; 0x10000000
 8009edc:	4301      	orrs	r1, r0
 8009ede:	d003      	beq.n	8009ee8 <HAL_UART_IRQHandler+0x158>
        if (huart->RxISR != NULL)
 8009ee0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8009ee2:	b10b      	cbz	r3, 8009ee8 <HAL_UART_IRQHandler+0x158>
          huart->RxISR(huart);
 8009ee4:	4620      	mov	r0, r4
 8009ee6:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8009ee8:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009eec:	6823      	ldr	r3, [r4, #0]
 8009eee:	689b      	ldr	r3, [r3, #8]
 8009ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009ef4:	f002 0228 	and.w	r2, r2, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	d029      	beq.n	8009f50 <HAL_UART_IRQHandler+0x1c0>
        UART_EndRxTransfer(huart);
 8009efc:	4620      	mov	r0, r4
 8009efe:	f7ff fe59 	bl	8009bb4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f02:	6823      	ldr	r3, [r4, #0]
 8009f04:	689b      	ldr	r3, [r3, #8]
 8009f06:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009f0a:	d01d      	beq.n	8009f48 <HAL_UART_IRQHandler+0x1b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f0c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f0e:	f102 0308 	add.w	r3, r2, #8
 8009f12:	e853 3f00 	ldrex	r3, [r3]
 8009f16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f1a:	3208      	adds	r2, #8
 8009f1c:	e842 3100 	strex	r1, r3, [r2]
 8009f20:	2900      	cmp	r1, #0
 8009f22:	d1f3      	bne.n	8009f0c <HAL_UART_IRQHandler+0x17c>
          if (huart->hdmarx != NULL)
 8009f24:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8009f26:	b15b      	cbz	r3, 8009f40 <HAL_UART_IRQHandler+0x1b0>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009f28:	4a5d      	ldr	r2, [pc, #372]	; (800a0a0 <HAL_UART_IRQHandler+0x310>)
 8009f2a:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009f2c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8009f2e:	f7fc fd11 	bl	8006954 <HAL_DMA_Abort_IT>
 8009f32:	2800      	cmp	r0, #0
 8009f34:	f43f af78 	beq.w	8009e28 <HAL_UART_IRQHandler+0x98>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009f38:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8009f3a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009f3c:	4798      	blx	r3
 8009f3e:	e773      	b.n	8009e28 <HAL_UART_IRQHandler+0x98>
            HAL_UART_ErrorCallback(huart);
 8009f40:	4620      	mov	r0, r4
 8009f42:	f7ff feec 	bl	8009d1e <HAL_UART_ErrorCallback>
 8009f46:	e76f      	b.n	8009e28 <HAL_UART_IRQHandler+0x98>
          HAL_UART_ErrorCallback(huart);
 8009f48:	4620      	mov	r0, r4
 8009f4a:	f7ff fee8 	bl	8009d1e <HAL_UART_ErrorCallback>
 8009f4e:	e76b      	b.n	8009e28 <HAL_UART_IRQHandler+0x98>
        HAL_UART_ErrorCallback(huart);
 8009f50:	4620      	mov	r0, r4
 8009f52:	f7ff fee4 	bl	8009d1e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f56:	2300      	movs	r3, #0
 8009f58:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8009f5c:	e764      	b.n	8009e28 <HAL_UART_IRQHandler+0x98>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009f5e:	f013 0f10 	tst.w	r3, #16
 8009f62:	f43f af3c 	beq.w	8009dde <HAL_UART_IRQHandler+0x4e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009f66:	f011 0f10 	tst.w	r1, #16
 8009f6a:	f43f af38 	beq.w	8009dde <HAL_UART_IRQHandler+0x4e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009f6e:	2310      	movs	r3, #16
 8009f70:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f72:	6823      	ldr	r3, [r4, #0]
 8009f74:	689b      	ldr	r3, [r3, #8]
 8009f76:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009f7a:	d04e      	beq.n	800a01a <HAL_UART_IRQHandler+0x28a>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009f7c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8009f7e:	6813      	ldr	r3, [r2, #0]
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	f43f af4f 	beq.w	8009e28 <HAL_UART_IRQHandler+0x98>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009f8a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8009f8e:	4299      	cmp	r1, r3
 8009f90:	f67f af4a 	bls.w	8009e28 <HAL_UART_IRQHandler+0x98>
        huart->RxXferCount = nb_remaining_rx_data;
 8009f94:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009f98:	6813      	ldr	r3, [r2, #0]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f013 0f20 	tst.w	r3, #32
 8009fa0:	d131      	bne.n	800a006 <HAL_UART_IRQHandler+0x276>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009fa2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fa4:	e852 3f00 	ldrex	r3, [r2]
 8009fa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fac:	e842 3100 	strex	r1, r3, [r2]
 8009fb0:	2900      	cmp	r1, #0
 8009fb2:	d1f6      	bne.n	8009fa2 <HAL_UART_IRQHandler+0x212>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fb4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fb6:	f102 0308 	add.w	r3, r2, #8
 8009fba:	e853 3f00 	ldrex	r3, [r3]
 8009fbe:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fc2:	3208      	adds	r2, #8
 8009fc4:	e842 3100 	strex	r1, r3, [r2]
 8009fc8:	2900      	cmp	r1, #0
 8009fca:	d1f3      	bne.n	8009fb4 <HAL_UART_IRQHandler+0x224>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009fcc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fce:	f102 0308 	add.w	r3, r2, #8
 8009fd2:	e853 3f00 	ldrex	r3, [r3]
 8009fd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fda:	3208      	adds	r2, #8
 8009fdc:	e842 3100 	strex	r1, r3, [r2]
 8009fe0:	2900      	cmp	r1, #0
 8009fe2:	d1f3      	bne.n	8009fcc <HAL_UART_IRQHandler+0x23c>
          huart->RxState = HAL_UART_STATE_READY;
 8009fe4:	2320      	movs	r3, #32
 8009fe6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fea:	2300      	movs	r3, #0
 8009fec:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fee:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ff0:	e852 3f00 	ldrex	r3, [r2]
 8009ff4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ff8:	e842 3100 	strex	r1, r3, [r2]
 8009ffc:	2900      	cmp	r1, #0
 8009ffe:	d1f6      	bne.n	8009fee <HAL_UART_IRQHandler+0x25e>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a000:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800a002:	f7fc fc71 	bl	80068e8 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a006:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800a00a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800a00e:	1ac9      	subs	r1, r1, r3
 800a010:	b289      	uxth	r1, r1
 800a012:	4620      	mov	r0, r4
 800a014:	f7ff feba 	bl	8009d8c <HAL_UARTEx_RxEventCallback>
 800a018:	e706      	b.n	8009e28 <HAL_UART_IRQHandler+0x98>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a01a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800a01e:	b29a      	uxth	r2, r3
      if ((huart->RxXferCount > 0U)
 800a020:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800a024:	b29b      	uxth	r3, r3
 800a026:	2b00      	cmp	r3, #0
 800a028:	f43f aefe 	beq.w	8009e28 <HAL_UART_IRQHandler+0x98>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a02c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800a030:	1a89      	subs	r1, r1, r2
 800a032:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800a034:	2900      	cmp	r1, #0
 800a036:	f43f aef7 	beq.w	8009e28 <HAL_UART_IRQHandler+0x98>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a03a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a03c:	e852 3f00 	ldrex	r3, [r2]
 800a040:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a044:	e842 3000 	strex	r0, r3, [r2]
 800a048:	2800      	cmp	r0, #0
 800a04a:	d1f6      	bne.n	800a03a <HAL_UART_IRQHandler+0x2aa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a04c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a04e:	f102 0308 	add.w	r3, r2, #8
 800a052:	e853 3f00 	ldrex	r3, [r3]
 800a056:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a05a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a05e:	3208      	adds	r2, #8
 800a060:	e842 3000 	strex	r0, r3, [r2]
 800a064:	2800      	cmp	r0, #0
 800a066:	d1f1      	bne.n	800a04c <HAL_UART_IRQHandler+0x2bc>
        huart->RxState = HAL_UART_STATE_READY;
 800a068:	2320      	movs	r3, #32
 800a06a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a06e:	2300      	movs	r3, #0
 800a070:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 800a072:	6723      	str	r3, [r4, #112]	; 0x70
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a074:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a076:	e852 3f00 	ldrex	r3, [r2]
 800a07a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a07e:	e842 3000 	strex	r0, r3, [r2]
 800a082:	2800      	cmp	r0, #0
 800a084:	d1f6      	bne.n	800a074 <HAL_UART_IRQHandler+0x2e4>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a086:	4620      	mov	r0, r4
 800a088:	f7ff fe80 	bl	8009d8c <HAL_UARTEx_RxEventCallback>
 800a08c:	e6cc      	b.n	8009e28 <HAL_UART_IRQHandler+0x98>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a08e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a092:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800a094:	4620      	mov	r0, r4
 800a096:	f000 fb47 	bl	800a728 <HAL_UARTEx_WakeupCallback>
    return;
 800a09a:	e6c5      	b.n	8009e28 <HAL_UART_IRQHandler+0x98>
 800a09c:	10000001 	.word	0x10000001
 800a0a0:	08009d79 	.word	0x08009d79
 800a0a4:	04000120 	.word	0x04000120
    if (huart->TxISR != NULL)
 800a0a8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	f43f aebc 	beq.w	8009e28 <HAL_UART_IRQHandler+0x98>
      huart->TxISR(huart);
 800a0b0:	4620      	mov	r0, r4
 800a0b2:	4798      	blx	r3
 800a0b4:	e6b8      	b.n	8009e28 <HAL_UART_IRQHandler+0x98>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a0b6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0b8:	e852 3f00 	ldrex	r3, [r2]
 800a0bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0c0:	e842 3100 	strex	r1, r3, [r2]
 800a0c4:	2900      	cmp	r1, #0
 800a0c6:	d1f6      	bne.n	800a0b6 <HAL_UART_IRQHandler+0x326>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a0c8:	2320      	movs	r3, #32
 800a0ca:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	6763      	str	r3, [r4, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a0d2:	4620      	mov	r0, r4
 800a0d4:	f7ff fdf8 	bl	8009cc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a0d8:	e6a6      	b.n	8009e28 <HAL_UART_IRQHandler+0x98>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a0da:	4620      	mov	r0, r4
 800a0dc:	f000 fb26 	bl	800a72c <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 800a0e0:	e6a2      	b.n	8009e28 <HAL_UART_IRQHandler+0x98>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a0e2:	4620      	mov	r0, r4
 800a0e4:	f000 fb21 	bl	800a72a <HAL_UARTEx_RxFifoFullCallback>
    return;
 800a0e8:	e69e      	b.n	8009e28 <HAL_UART_IRQHandler+0x98>
 800a0ea:	bf00      	nop

0800a0ec <UART_SetConfig>:
{
 800a0ec:	b570      	push	{r4, r5, r6, lr}
 800a0ee:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800a0f0:	6801      	ldr	r1, [r0, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a0f2:	6808      	ldr	r0, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a0f4:	68a3      	ldr	r3, [r4, #8]
 800a0f6:	6922      	ldr	r2, [r4, #16]
 800a0f8:	4313      	orrs	r3, r2
 800a0fa:	6962      	ldr	r2, [r4, #20]
 800a0fc:	4313      	orrs	r3, r2
 800a0fe:	69e2      	ldr	r2, [r4, #28]
 800a100:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a102:	4aa4      	ldr	r2, [pc, #656]	; (800a394 <UART_SetConfig+0x2a8>)
 800a104:	4002      	ands	r2, r0
 800a106:	4313      	orrs	r3, r2
 800a108:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a10a:	6822      	ldr	r2, [r4, #0]
 800a10c:	6853      	ldr	r3, [r2, #4]
 800a10e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800a112:	68e1      	ldr	r1, [r4, #12]
 800a114:	430b      	orrs	r3, r1
 800a116:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a118:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a11a:	6822      	ldr	r2, [r4, #0]
 800a11c:	4b9e      	ldr	r3, [pc, #632]	; (800a398 <UART_SetConfig+0x2ac>)
 800a11e:	429a      	cmp	r2, r3
    tmpreg |= huart->Init.OneBitSampling;
 800a120:	bf1c      	itt	ne
 800a122:	6a23      	ldrne	r3, [r4, #32]
 800a124:	4319      	orrne	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a126:	6893      	ldr	r3, [r2, #8]
 800a128:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800a12c:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800a130:	430b      	orrs	r3, r1
 800a132:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a134:	6822      	ldr	r2, [r4, #0]
 800a136:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800a138:	f023 030f 	bic.w	r3, r3, #15
 800a13c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a13e:	430b      	orrs	r3, r1
 800a140:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a142:	6823      	ldr	r3, [r4, #0]
 800a144:	4a95      	ldr	r2, [pc, #596]	; (800a39c <UART_SetConfig+0x2b0>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d01f      	beq.n	800a18a <UART_SetConfig+0x9e>
 800a14a:	4a95      	ldr	r2, [pc, #596]	; (800a3a0 <UART_SetConfig+0x2b4>)
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d02e      	beq.n	800a1ae <UART_SetConfig+0xc2>
 800a150:	4a94      	ldr	r2, [pc, #592]	; (800a3a4 <UART_SetConfig+0x2b8>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d048      	beq.n	800a1e8 <UART_SetConfig+0xfc>
 800a156:	4a94      	ldr	r2, [pc, #592]	; (800a3a8 <UART_SetConfig+0x2bc>)
 800a158:	4293      	cmp	r3, r2
 800a15a:	d05b      	beq.n	800a214 <UART_SetConfig+0x128>
 800a15c:	4a8e      	ldr	r2, [pc, #568]	; (800a398 <UART_SetConfig+0x2ac>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d06d      	beq.n	800a23e <UART_SetConfig+0x152>
 800a162:	2210      	movs	r2, #16
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a164:	69e0      	ldr	r0, [r4, #28]
 800a166:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800a16a:	f000 80de 	beq.w	800a32a <UART_SetConfig+0x23e>
    switch (clocksource)
 800a16e:	2a08      	cmp	r2, #8
 800a170:	f200 815e 	bhi.w	800a430 <UART_SetConfig+0x344>
 800a174:	e8df f012 	tbh	[pc, r2, lsl #1]
 800a178:	01440122 	.word	0x01440122
 800a17c:	015c014a 	.word	0x015c014a
 800a180:	015c0147 	.word	0x015c0147
 800a184:	015c015c 	.word	0x015c015c
 800a188:	010a      	.short	0x010a
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a18a:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 800a18e:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800a192:	f002 0203 	and.w	r2, r2, #3
 800a196:	2a03      	cmp	r2, #3
 800a198:	d807      	bhi.n	800a1aa <UART_SetConfig+0xbe>
 800a19a:	e8df f012 	tbh	[pc, r2, lsl #1]
 800a19e:	006b      	.short	0x006b
 800a1a0:	014f0004 	.word	0x014f0004
 800a1a4:	0151      	.short	0x0151
 800a1a6:	2204      	movs	r2, #4
 800a1a8:	e7dc      	b.n	800a164 <UART_SetConfig+0x78>
 800a1aa:	2210      	movs	r2, #16
 800a1ac:	e7da      	b.n	800a164 <UART_SetConfig+0x78>
 800a1ae:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 800a1b2:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800a1b6:	f002 020c 	and.w	r2, r2, #12
 800a1ba:	2a0c      	cmp	r2, #12
 800a1bc:	d812      	bhi.n	800a1e4 <UART_SetConfig+0xf8>
 800a1be:	e8df f012 	tbh	[pc, r2, lsl #1]
 800a1c2:	0077      	.short	0x0077
 800a1c4:	00110011 	.word	0x00110011
 800a1c8:	000d0011 	.word	0x000d0011
 800a1cc:	00110011 	.word	0x00110011
 800a1d0:	01410011 	.word	0x01410011
 800a1d4:	00110011 	.word	0x00110011
 800a1d8:	000f0011 	.word	0x000f0011
 800a1dc:	2204      	movs	r2, #4
 800a1de:	e7c1      	b.n	800a164 <UART_SetConfig+0x78>
 800a1e0:	2208      	movs	r2, #8
 800a1e2:	e7bf      	b.n	800a164 <UART_SetConfig+0x78>
 800a1e4:	2210      	movs	r2, #16
 800a1e6:	e7bd      	b.n	800a164 <UART_SetConfig+0x78>
 800a1e8:	4b70      	ldr	r3, [pc, #448]	; (800a3ac <UART_SetConfig+0x2c0>)
 800a1ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1ee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a1f2:	2b20      	cmp	r3, #32
 800a1f4:	f000 8128 	beq.w	800a448 <UART_SetConfig+0x35c>
 800a1f8:	d807      	bhi.n	800a20a <UART_SetConfig+0x11e>
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	f000 8091 	beq.w	800a322 <UART_SetConfig+0x236>
 800a200:	2b10      	cmp	r3, #16
 800a202:	bf14      	ite	ne
 800a204:	2210      	movne	r2, #16
 800a206:	2204      	moveq	r2, #4
 800a208:	e7ac      	b.n	800a164 <UART_SetConfig+0x78>
 800a20a:	2b30      	cmp	r3, #48	; 0x30
 800a20c:	bf14      	ite	ne
 800a20e:	2210      	movne	r2, #16
 800a210:	2208      	moveq	r2, #8
 800a212:	e7a7      	b.n	800a164 <UART_SetConfig+0x78>
 800a214:	4b65      	ldr	r3, [pc, #404]	; (800a3ac <UART_SetConfig+0x2c0>)
 800a216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a21a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a21e:	2b80      	cmp	r3, #128	; 0x80
 800a220:	f000 8114 	beq.w	800a44c <UART_SetConfig+0x360>
 800a224:	d806      	bhi.n	800a234 <UART_SetConfig+0x148>
 800a226:	2b00      	cmp	r3, #0
 800a228:	d07d      	beq.n	800a326 <UART_SetConfig+0x23a>
 800a22a:	2b40      	cmp	r3, #64	; 0x40
 800a22c:	bf14      	ite	ne
 800a22e:	2210      	movne	r2, #16
 800a230:	2204      	moveq	r2, #4
 800a232:	e797      	b.n	800a164 <UART_SetConfig+0x78>
 800a234:	2bc0      	cmp	r3, #192	; 0xc0
 800a236:	bf14      	ite	ne
 800a238:	2210      	movne	r2, #16
 800a23a:	2208      	moveq	r2, #8
 800a23c:	e792      	b.n	800a164 <UART_SetConfig+0x78>
 800a23e:	4b5b      	ldr	r3, [pc, #364]	; (800a3ac <UART_SetConfig+0x2c0>)
 800a240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a244:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a248:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a24c:	d064      	beq.n	800a318 <UART_SetConfig+0x22c>
 800a24e:	d809      	bhi.n	800a264 <UART_SetConfig+0x178>
 800a250:	b393      	cbz	r3, 800a2b8 <UART_SetConfig+0x1cc>
 800a252:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a256:	bf18      	it	ne
 800a258:	2001      	movne	r0, #1
 800a25a:	f040 80c8 	bne.w	800a3ee <UART_SetConfig+0x302>
        pclk = HAL_RCC_GetSysClockFreq();
 800a25e:	f7fd fd7b 	bl	8007d58 <HAL_RCC_GetSysClockFreq>
        break;
 800a262:	e02b      	b.n	800a2bc <UART_SetConfig+0x1d0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a264:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a268:	d102      	bne.n	800a270 <UART_SetConfig+0x184>
        pclk = (uint32_t) LSE_VALUE;
 800a26a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800a26e:	e028      	b.n	800a2c2 <UART_SetConfig+0x1d6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a270:	2001      	movs	r0, #1
 800a272:	e0bc      	b.n	800a3ee <UART_SetConfig+0x302>
 800a274:	2201      	movs	r2, #1
  if (UART_INSTANCE_LOWPOWER(huart))
 800a276:	4948      	ldr	r1, [pc, #288]	; (800a398 <UART_SetConfig+0x2ac>)
 800a278:	428b      	cmp	r3, r1
 800a27a:	f47f af73 	bne.w	800a164 <UART_SetConfig+0x78>
    switch (clocksource)
 800a27e:	2a08      	cmp	r2, #8
 800a280:	f200 80c6 	bhi.w	800a410 <UART_SetConfig+0x324>
 800a284:	a301      	add	r3, pc, #4	; (adr r3, 800a28c <UART_SetConfig+0x1a0>)
 800a286:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800a28a:	bf00      	nop
 800a28c:	0800a2b9 	.word	0x0800a2b9
 800a290:	0800a411 	.word	0x0800a411
 800a294:	0800a2b5 	.word	0x0800a2b5
 800a298:	0800a411 	.word	0x0800a411
 800a29c:	0800a25f 	.word	0x0800a25f
 800a2a0:	0800a411 	.word	0x0800a411
 800a2a4:	0800a411 	.word	0x0800a411
 800a2a8:	0800a411 	.word	0x0800a411
 800a2ac:	0800a31d 	.word	0x0800a31d
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	e7e0      	b.n	800a276 <UART_SetConfig+0x18a>
    switch (clocksource)
 800a2b4:	483e      	ldr	r0, [pc, #248]	; (800a3b0 <UART_SetConfig+0x2c4>)
 800a2b6:	e004      	b.n	800a2c2 <UART_SetConfig+0x1d6>
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2b8:	f7fd fea6 	bl	8008008 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800a2bc:	2800      	cmp	r0, #0
 800a2be:	f000 80a9 	beq.w	800a414 <UART_SetConfig+0x328>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a2c2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a2c4:	4b3b      	ldr	r3, [pc, #236]	; (800a3b4 <UART_SetConfig+0x2c8>)
 800a2c6:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800a2ca:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a2ce:	6865      	ldr	r5, [r4, #4]
 800a2d0:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800a2d4:	4299      	cmp	r1, r3
 800a2d6:	f200 809f 	bhi.w	800a418 <UART_SetConfig+0x32c>
 800a2da:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800a2de:	f200 809d 	bhi.w	800a41c <UART_SetConfig+0x330>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2e2:	2600      	movs	r6, #0
 800a2e4:	4633      	mov	r3, r6
 800a2e6:	4631      	mov	r1, r6
 800a2e8:	f7f6 fcf6 	bl	8000cd8 <__aeabi_uldivmod>
 800a2ec:	0209      	lsls	r1, r1, #8
 800a2ee:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800a2f2:	0200      	lsls	r0, r0, #8
 800a2f4:	086b      	lsrs	r3, r5, #1
 800a2f6:	18c0      	adds	r0, r0, r3
 800a2f8:	462a      	mov	r2, r5
 800a2fa:	4633      	mov	r3, r6
 800a2fc:	f141 0100 	adc.w	r1, r1, #0
 800a300:	f7f6 fcea 	bl	8000cd8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a304:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 800a308:	4b2b      	ldr	r3, [pc, #172]	; (800a3b8 <UART_SetConfig+0x2cc>)
 800a30a:	429a      	cmp	r2, r3
 800a30c:	f200 8088 	bhi.w	800a420 <UART_SetConfig+0x334>
          huart->Instance->BRR = usartdiv;
 800a310:	6823      	ldr	r3, [r4, #0]
 800a312:	60d8      	str	r0, [r3, #12]
 800a314:	4630      	mov	r0, r6
 800a316:	e06a      	b.n	800a3ee <UART_SetConfig+0x302>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a318:	4825      	ldr	r0, [pc, #148]	; (800a3b0 <UART_SetConfig+0x2c4>)
 800a31a:	e7d2      	b.n	800a2c2 <UART_SetConfig+0x1d6>
        pclk = (uint32_t) LSE_VALUE;
 800a31c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800a320:	e7cf      	b.n	800a2c2 <UART_SetConfig+0x1d6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a322:	2200      	movs	r2, #0
 800a324:	e71e      	b.n	800a164 <UART_SetConfig+0x78>
 800a326:	2200      	movs	r2, #0
 800a328:	e71c      	b.n	800a164 <UART_SetConfig+0x78>
    switch (clocksource)
 800a32a:	2a08      	cmp	r2, #8
 800a32c:	d87a      	bhi.n	800a424 <UART_SetConfig+0x338>
 800a32e:	e8df f002 	tbb	[pc, r2]
 800a332:	2505      	.short	0x2505
 800a334:	7928792b 	.word	0x7928792b
 800a338:	7979      	.short	0x7979
 800a33a:	09          	.byte	0x09
 800a33b:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 800a33c:	f7fd fe64 	bl	8008008 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800a340:	2800      	cmp	r0, #0
 800a342:	d071      	beq.n	800a428 <UART_SetConfig+0x33c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a344:	6862      	ldr	r2, [r4, #4]
 800a346:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a348:	4b1a      	ldr	r3, [pc, #104]	; (800a3b4 <UART_SetConfig+0x2c8>)
 800a34a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800a34e:	fbb0 f0f3 	udiv	r0, r0, r3
 800a352:	0853      	lsrs	r3, r2, #1
 800a354:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800a358:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a35c:	f1a3 0110 	sub.w	r1, r3, #16
 800a360:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800a364:	4291      	cmp	r1, r2
 800a366:	d861      	bhi.n	800a42c <UART_SetConfig+0x340>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a368:	f023 020f 	bic.w	r2, r3, #15
 800a36c:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 800a36e:	6821      	ldr	r1, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a370:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800a374:	4313      	orrs	r3, r2
 800a376:	60cb      	str	r3, [r1, #12]
 800a378:	2000      	movs	r0, #0
 800a37a:	e038      	b.n	800a3ee <UART_SetConfig+0x302>
        pclk = HAL_RCC_GetPCLK2Freq();
 800a37c:	f7fd fe56 	bl	800802c <HAL_RCC_GetPCLK2Freq>
        break;
 800a380:	e7de      	b.n	800a340 <UART_SetConfig+0x254>
        pclk = HAL_RCC_GetSysClockFreq();
 800a382:	f7fd fce9 	bl	8007d58 <HAL_RCC_GetSysClockFreq>
        break;
 800a386:	e7db      	b.n	800a340 <UART_SetConfig+0x254>
        pclk = (uint32_t) HSI_VALUE;
 800a388:	4809      	ldr	r0, [pc, #36]	; (800a3b0 <UART_SetConfig+0x2c4>)
 800a38a:	e7db      	b.n	800a344 <UART_SetConfig+0x258>
    switch (clocksource)
 800a38c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800a390:	e018      	b.n	800a3c4 <UART_SetConfig+0x2d8>
 800a392:	bf00      	nop
 800a394:	cfff69f3 	.word	0xcfff69f3
 800a398:	40008000 	.word	0x40008000
 800a39c:	40013800 	.word	0x40013800
 800a3a0:	40004400 	.word	0x40004400
 800a3a4:	40004800 	.word	0x40004800
 800a3a8:	40004c00 	.word	0x40004c00
 800a3ac:	40021000 	.word	0x40021000
 800a3b0:	00f42400 	.word	0x00f42400
 800a3b4:	0800f7ac 	.word	0x0800f7ac
 800a3b8:	000ffcff 	.word	0x000ffcff
        pclk = HAL_RCC_GetPCLK1Freq();
 800a3bc:	f7fd fe24 	bl	8008008 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800a3c0:	2800      	cmp	r0, #0
 800a3c2:	d037      	beq.n	800a434 <UART_SetConfig+0x348>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3c4:	6863      	ldr	r3, [r4, #4]
 800a3c6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a3c8:	4a21      	ldr	r2, [pc, #132]	; (800a450 <UART_SetConfig+0x364>)
 800a3ca:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800a3ce:	fbb0 f0f2 	udiv	r0, r0, r2
 800a3d2:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800a3d6:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a3da:	f1a0 0210 	sub.w	r2, r0, #16
 800a3de:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d828      	bhi.n	800a438 <UART_SetConfig+0x34c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a3e6:	6823      	ldr	r3, [r4, #0]
 800a3e8:	b280      	uxth	r0, r0
 800a3ea:	60d8      	str	r0, [r3, #12]
 800a3ec:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a3f4:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 800a3fc:	6763      	str	r3, [r4, #116]	; 0x74
}
 800a3fe:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 800a400:	f7fd fe14 	bl	800802c <HAL_RCC_GetPCLK2Freq>
        break;
 800a404:	e7dc      	b.n	800a3c0 <UART_SetConfig+0x2d4>
        pclk = HAL_RCC_GetSysClockFreq();
 800a406:	f7fd fca7 	bl	8007d58 <HAL_RCC_GetSysClockFreq>
        break;
 800a40a:	e7d9      	b.n	800a3c0 <UART_SetConfig+0x2d4>
        pclk = (uint32_t) HSI_VALUE;
 800a40c:	4811      	ldr	r0, [pc, #68]	; (800a454 <UART_SetConfig+0x368>)
 800a40e:	e7d9      	b.n	800a3c4 <UART_SetConfig+0x2d8>
    switch (clocksource)
 800a410:	2001      	movs	r0, #1
 800a412:	e7ec      	b.n	800a3ee <UART_SetConfig+0x302>
 800a414:	2000      	movs	r0, #0
 800a416:	e7ea      	b.n	800a3ee <UART_SetConfig+0x302>
        ret = HAL_ERROR;
 800a418:	2001      	movs	r0, #1
 800a41a:	e7e8      	b.n	800a3ee <UART_SetConfig+0x302>
 800a41c:	2001      	movs	r0, #1
 800a41e:	e7e6      	b.n	800a3ee <UART_SetConfig+0x302>
          ret = HAL_ERROR;
 800a420:	2001      	movs	r0, #1
 800a422:	e7e4      	b.n	800a3ee <UART_SetConfig+0x302>
    switch (clocksource)
 800a424:	2001      	movs	r0, #1
 800a426:	e7e2      	b.n	800a3ee <UART_SetConfig+0x302>
 800a428:	2000      	movs	r0, #0
 800a42a:	e7e0      	b.n	800a3ee <UART_SetConfig+0x302>
        ret = HAL_ERROR;
 800a42c:	2001      	movs	r0, #1
 800a42e:	e7de      	b.n	800a3ee <UART_SetConfig+0x302>
    switch (clocksource)
 800a430:	2001      	movs	r0, #1
 800a432:	e7dc      	b.n	800a3ee <UART_SetConfig+0x302>
 800a434:	2000      	movs	r0, #0
 800a436:	e7da      	b.n	800a3ee <UART_SetConfig+0x302>
        ret = HAL_ERROR;
 800a438:	2001      	movs	r0, #1
 800a43a:	e7d8      	b.n	800a3ee <UART_SetConfig+0x302>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a43c:	2202      	movs	r2, #2
 800a43e:	e691      	b.n	800a164 <UART_SetConfig+0x78>
 800a440:	2208      	movs	r2, #8
 800a442:	e68f      	b.n	800a164 <UART_SetConfig+0x78>
 800a444:	2202      	movs	r2, #2
 800a446:	e68d      	b.n	800a164 <UART_SetConfig+0x78>
 800a448:	2202      	movs	r2, #2
 800a44a:	e68b      	b.n	800a164 <UART_SetConfig+0x78>
 800a44c:	2202      	movs	r2, #2
 800a44e:	e689      	b.n	800a164 <UART_SetConfig+0x78>
 800a450:	0800f7ac 	.word	0x0800f7ac
 800a454:	00f42400 	.word	0x00f42400

0800a458 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a458:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a45a:	f013 0f01 	tst.w	r3, #1
 800a45e:	d006      	beq.n	800a46e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a460:	6802      	ldr	r2, [r0, #0]
 800a462:	6853      	ldr	r3, [r2, #4]
 800a464:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a468:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800a46a:	430b      	orrs	r3, r1
 800a46c:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a46e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a470:	f013 0f02 	tst.w	r3, #2
 800a474:	d006      	beq.n	800a484 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a476:	6802      	ldr	r2, [r0, #0]
 800a478:	6853      	ldr	r3, [r2, #4]
 800a47a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a47e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800a480:	430b      	orrs	r3, r1
 800a482:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a484:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a486:	f013 0f04 	tst.w	r3, #4
 800a48a:	d006      	beq.n	800a49a <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a48c:	6802      	ldr	r2, [r0, #0]
 800a48e:	6853      	ldr	r3, [r2, #4]
 800a490:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a494:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800a496:	430b      	orrs	r3, r1
 800a498:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a49a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a49c:	f013 0f08 	tst.w	r3, #8
 800a4a0:	d006      	beq.n	800a4b0 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a4a2:	6802      	ldr	r2, [r0, #0]
 800a4a4:	6853      	ldr	r3, [r2, #4]
 800a4a6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a4aa:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800a4ac:	430b      	orrs	r3, r1
 800a4ae:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a4b0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a4b2:	f013 0f10 	tst.w	r3, #16
 800a4b6:	d006      	beq.n	800a4c6 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a4b8:	6802      	ldr	r2, [r0, #0]
 800a4ba:	6893      	ldr	r3, [r2, #8]
 800a4bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a4c0:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800a4c2:	430b      	orrs	r3, r1
 800a4c4:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a4c6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a4c8:	f013 0f20 	tst.w	r3, #32
 800a4cc:	d006      	beq.n	800a4dc <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a4ce:	6802      	ldr	r2, [r0, #0]
 800a4d0:	6893      	ldr	r3, [r2, #8]
 800a4d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a4d6:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800a4d8:	430b      	orrs	r3, r1
 800a4da:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a4dc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a4de:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a4e2:	d00a      	beq.n	800a4fa <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a4e4:	6802      	ldr	r2, [r0, #0]
 800a4e6:	6853      	ldr	r3, [r2, #4]
 800a4e8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a4ec:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800a4ee:	430b      	orrs	r3, r1
 800a4f0:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a4f2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800a4f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a4f8:	d00b      	beq.n	800a512 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a4fa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a4fc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a500:	d006      	beq.n	800a510 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a502:	6802      	ldr	r2, [r0, #0]
 800a504:	6853      	ldr	r3, [r2, #4]
 800a506:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800a50a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800a50c:	430b      	orrs	r3, r1
 800a50e:	6053      	str	r3, [r2, #4]
}
 800a510:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a512:	6802      	ldr	r2, [r0, #0]
 800a514:	6853      	ldr	r3, [r2, #4]
 800a516:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800a51a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800a51c:	430b      	orrs	r3, r1
 800a51e:	6053      	str	r3, [r2, #4]
 800a520:	e7eb      	b.n	800a4fa <UART_AdvFeatureConfig+0xa2>

0800a522 <UART_WaitOnFlagUntilTimeout>:
{
 800a522:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a526:	4680      	mov	r8, r0
 800a528:	460e      	mov	r6, r1
 800a52a:	4615      	mov	r5, r2
 800a52c:	4699      	mov	r9, r3
 800a52e:	9f08      	ldr	r7, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a530:	f8d8 3000 	ldr.w	r3, [r8]
 800a534:	69dc      	ldr	r4, [r3, #28]
 800a536:	ea36 0404 	bics.w	r4, r6, r4
 800a53a:	bf0c      	ite	eq
 800a53c:	2401      	moveq	r4, #1
 800a53e:	2400      	movne	r4, #0
 800a540:	42ac      	cmp	r4, r5
 800a542:	d15a      	bne.n	800a5fa <UART_WaitOnFlagUntilTimeout+0xd8>
    if (Timeout != HAL_MAX_DELAY)
 800a544:	f1b7 3fff 	cmp.w	r7, #4294967295
 800a548:	d0f4      	beq.n	800a534 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a54a:	f7fb f893 	bl	8005674 <HAL_GetTick>
 800a54e:	eba0 0009 	sub.w	r0, r0, r9
 800a552:	42b8      	cmp	r0, r7
 800a554:	d830      	bhi.n	800a5b8 <UART_WaitOnFlagUntilTimeout+0x96>
 800a556:	b37f      	cbz	r7, 800a5b8 <UART_WaitOnFlagUntilTimeout+0x96>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a558:	f8d8 3000 	ldr.w	r3, [r8]
 800a55c:	681a      	ldr	r2, [r3, #0]
 800a55e:	f012 0f04 	tst.w	r2, #4
 800a562:	d0e5      	beq.n	800a530 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a564:	69da      	ldr	r2, [r3, #28]
 800a566:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800a56a:	d0e1      	beq.n	800a530 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a56c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a570:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a572:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a576:	e852 3f00 	ldrex	r3, [r2]
 800a57a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a57e:	e842 3100 	strex	r1, r3, [r2]
 800a582:	2900      	cmp	r1, #0
 800a584:	d1f5      	bne.n	800a572 <UART_WaitOnFlagUntilTimeout+0x50>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a586:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a58a:	f102 0308 	add.w	r3, r2, #8
 800a58e:	e853 3f00 	ldrex	r3, [r3]
 800a592:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a596:	3208      	adds	r2, #8
 800a598:	e842 3100 	strex	r1, r3, [r2]
 800a59c:	2900      	cmp	r1, #0
 800a59e:	d1f2      	bne.n	800a586 <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 800a5a0:	2320      	movs	r3, #32
 800a5a2:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a5a6:	f8c8 3088 	str.w	r3, [r8, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a5aa:	f8c8 308c 	str.w	r3, [r8, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	f888 3080 	strb.w	r3, [r8, #128]	; 0x80
          return HAL_TIMEOUT;
 800a5b4:	2003      	movs	r0, #3
 800a5b6:	e021      	b.n	800a5fc <UART_WaitOnFlagUntilTimeout+0xda>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a5b8:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5bc:	e852 3f00 	ldrex	r3, [r2]
 800a5c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5c4:	e842 3100 	strex	r1, r3, [r2]
 800a5c8:	2900      	cmp	r1, #0
 800a5ca:	d1f5      	bne.n	800a5b8 <UART_WaitOnFlagUntilTimeout+0x96>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5cc:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5d0:	f102 0308 	add.w	r3, r2, #8
 800a5d4:	e853 3f00 	ldrex	r3, [r3]
 800a5d8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5dc:	3208      	adds	r2, #8
 800a5de:	e842 3100 	strex	r1, r3, [r2]
 800a5e2:	2900      	cmp	r1, #0
 800a5e4:	d1f2      	bne.n	800a5cc <UART_WaitOnFlagUntilTimeout+0xaa>
        huart->gState = HAL_UART_STATE_READY;
 800a5e6:	2320      	movs	r3, #32
 800a5e8:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a5ec:	f8c8 3088 	str.w	r3, [r8, #136]	; 0x88
        __HAL_UNLOCK(huart);
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	f888 3080 	strb.w	r3, [r8, #128]	; 0x80
        return HAL_TIMEOUT;
 800a5f6:	2003      	movs	r0, #3
 800a5f8:	e000      	b.n	800a5fc <UART_WaitOnFlagUntilTimeout+0xda>
  return HAL_OK;
 800a5fa:	2000      	movs	r0, #0
}
 800a5fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800a600 <UART_CheckIdleState>:
{
 800a600:	b530      	push	{r4, r5, lr}
 800a602:	b083      	sub	sp, #12
 800a604:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a606:	2300      	movs	r3, #0
 800a608:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 800a60c:	f7fb f832 	bl	8005674 <HAL_GetTick>
 800a610:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a612:	6822      	ldr	r2, [r4, #0]
 800a614:	6812      	ldr	r2, [r2, #0]
 800a616:	f012 0f08 	tst.w	r2, #8
 800a61a:	d10f      	bne.n	800a63c <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a61c:	6823      	ldr	r3, [r4, #0]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f013 0f04 	tst.w	r3, #4
 800a624:	d118      	bne.n	800a658 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 800a626:	2320      	movs	r3, #32
 800a628:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a62c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a630:	2000      	movs	r0, #0
 800a632:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 800a634:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800a638:	b003      	add	sp, #12
 800a63a:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a63c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a640:	9300      	str	r3, [sp, #0]
 800a642:	4603      	mov	r3, r0
 800a644:	2200      	movs	r2, #0
 800a646:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a64a:	4620      	mov	r0, r4
 800a64c:	f7ff ff69 	bl	800a522 <UART_WaitOnFlagUntilTimeout>
 800a650:	2800      	cmp	r0, #0
 800a652:	d0e3      	beq.n	800a61c <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 800a654:	2003      	movs	r0, #3
 800a656:	e7ef      	b.n	800a638 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a658:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a65c:	9300      	str	r3, [sp, #0]
 800a65e:	462b      	mov	r3, r5
 800a660:	2200      	movs	r2, #0
 800a662:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a666:	4620      	mov	r0, r4
 800a668:	f7ff ff5b 	bl	800a522 <UART_WaitOnFlagUntilTimeout>
 800a66c:	2800      	cmp	r0, #0
 800a66e:	d0da      	beq.n	800a626 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 800a670:	2003      	movs	r0, #3
 800a672:	e7e1      	b.n	800a638 <UART_CheckIdleState+0x38>

0800a674 <HAL_UART_Init>:
  if (huart == NULL)
 800a674:	b378      	cbz	r0, 800a6d6 <HAL_UART_Init+0x62>
{
 800a676:	b510      	push	{r4, lr}
 800a678:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800a67a:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800a67e:	b30b      	cbz	r3, 800a6c4 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800a680:	2324      	movs	r3, #36	; 0x24
 800a682:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 800a686:	6822      	ldr	r2, [r4, #0]
 800a688:	6813      	ldr	r3, [r2, #0]
 800a68a:	f023 0301 	bic.w	r3, r3, #1
 800a68e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a690:	4620      	mov	r0, r4
 800a692:	f7ff fd2b 	bl	800a0ec <UART_SetConfig>
 800a696:	2801      	cmp	r0, #1
 800a698:	d013      	beq.n	800a6c2 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a69a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a69c:	b9bb      	cbnz	r3, 800a6ce <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a69e:	6822      	ldr	r2, [r4, #0]
 800a6a0:	6853      	ldr	r3, [r2, #4]
 800a6a2:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800a6a6:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a6a8:	6822      	ldr	r2, [r4, #0]
 800a6aa:	6893      	ldr	r3, [r2, #8]
 800a6ac:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800a6b0:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800a6b2:	6822      	ldr	r2, [r4, #0]
 800a6b4:	6813      	ldr	r3, [r2, #0]
 800a6b6:	f043 0301 	orr.w	r3, r3, #1
 800a6ba:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800a6bc:	4620      	mov	r0, r4
 800a6be:	f7ff ff9f 	bl	800a600 <UART_CheckIdleState>
}
 800a6c2:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800a6c4:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 800a6c8:	f7fa fefe 	bl	80054c8 <HAL_UART_MspInit>
 800a6cc:	e7d8      	b.n	800a680 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 800a6ce:	4620      	mov	r0, r4
 800a6d0:	f7ff fec2 	bl	800a458 <UART_AdvFeatureConfig>
 800a6d4:	e7e3      	b.n	800a69e <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 800a6d6:	2001      	movs	r0, #1
}
 800a6d8:	4770      	bx	lr
	...

0800a6dc <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a6dc:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800a6de:	b92b      	cbnz	r3, 800a6ec <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a6e6:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 800a6ea:	4770      	bx	lr
{
 800a6ec:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a6ee:	6803      	ldr	r3, [r0, #0]
 800a6f0:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a6f2:	6899      	ldr	r1, [r3, #8]
 800a6f4:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a6f6:	4d0a      	ldr	r5, [pc, #40]	; (800a720 <UARTEx_SetNbDataToProcess+0x44>)
 800a6f8:	5c6b      	ldrb	r3, [r5, r1]
 800a6fa:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a6fc:	4c09      	ldr	r4, [pc, #36]	; (800a724 <UARTEx_SetNbDataToProcess+0x48>)
 800a6fe:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a700:	fb93 f3f1 	sdiv	r3, r3, r1
 800a704:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a708:	f3c2 6242 	ubfx	r2, r2, #25, #3
 800a70c:	5cab      	ldrb	r3, [r5, r2]
 800a70e:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a710:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a712:	fb93 f3f2 	sdiv	r3, r3, r2
    huart->NbRxDataToProcess = 1U;
 800a716:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 800a71a:	bc30      	pop	{r4, r5}
 800a71c:	4770      	bx	lr
 800a71e:	bf00      	nop
 800a720:	0800f7cc 	.word	0x0800f7cc
 800a724:	0800f7c4 	.word	0x0800f7c4

0800a728 <HAL_UARTEx_WakeupCallback>:
}
 800a728:	4770      	bx	lr

0800a72a <HAL_UARTEx_RxFifoFullCallback>:
}
 800a72a:	4770      	bx	lr

0800a72c <HAL_UARTEx_TxFifoEmptyCallback>:
}
 800a72c:	4770      	bx	lr

0800a72e <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 800a72e:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800a732:	2b01      	cmp	r3, #1
 800a734:	d018      	beq.n	800a768 <HAL_UARTEx_DisableFifoMode+0x3a>
 800a736:	2301      	movs	r3, #1
 800a738:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800a73c:	2324      	movs	r3, #36	; 0x24
 800a73e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a742:	6803      	ldr	r3, [r0, #0]
 800a744:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800a746:	6819      	ldr	r1, [r3, #0]
 800a748:	f021 0101 	bic.w	r1, r1, #1
 800a74c:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a74e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a752:	2300      	movs	r3, #0
 800a754:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a756:	6801      	ldr	r1, [r0, #0]
 800a758:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 800a75a:	2220      	movs	r2, #32
 800a75c:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800a760:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 800a764:	4618      	mov	r0, r3
 800a766:	4770      	bx	lr
  __HAL_LOCK(huart);
 800a768:	2002      	movs	r0, #2
}
 800a76a:	4770      	bx	lr

0800a76c <HAL_UARTEx_SetTxFifoThreshold>:
{
 800a76c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800a76e:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800a772:	2b01      	cmp	r3, #1
 800a774:	d01d      	beq.n	800a7b2 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 800a776:	4604      	mov	r4, r0
 800a778:	2301      	movs	r3, #1
 800a77a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800a77e:	2324      	movs	r3, #36	; 0x24
 800a780:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a784:	6803      	ldr	r3, [r0, #0]
 800a786:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800a788:	681a      	ldr	r2, [r3, #0]
 800a78a:	f022 0201 	bic.w	r2, r2, #1
 800a78e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a790:	6802      	ldr	r2, [r0, #0]
 800a792:	6893      	ldr	r3, [r2, #8]
 800a794:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800a798:	4319      	orrs	r1, r3
 800a79a:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800a79c:	f7ff ff9e 	bl	800a6dc <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a7a0:	6823      	ldr	r3, [r4, #0]
 800a7a2:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800a7a4:	2320      	movs	r3, #32
 800a7a6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800a7aa:	2000      	movs	r0, #0
 800a7ac:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800a7b0:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800a7b2:	2002      	movs	r0, #2
 800a7b4:	e7fc      	b.n	800a7b0 <HAL_UARTEx_SetTxFifoThreshold+0x44>

0800a7b6 <HAL_UARTEx_SetRxFifoThreshold>:
{
 800a7b6:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800a7b8:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	d01d      	beq.n	800a7fc <HAL_UARTEx_SetRxFifoThreshold+0x46>
 800a7c0:	4604      	mov	r4, r0
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800a7c8:	2324      	movs	r3, #36	; 0x24
 800a7ca:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a7ce:	6803      	ldr	r3, [r0, #0]
 800a7d0:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800a7d2:	681a      	ldr	r2, [r3, #0]
 800a7d4:	f022 0201 	bic.w	r2, r2, #1
 800a7d8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a7da:	6802      	ldr	r2, [r0, #0]
 800a7dc:	6893      	ldr	r3, [r2, #8]
 800a7de:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 800a7e2:	4319      	orrs	r1, r3
 800a7e4:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800a7e6:	f7ff ff79 	bl	800a6dc <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a7ea:	6823      	ldr	r3, [r4, #0]
 800a7ec:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800a7ee:	2320      	movs	r3, #32
 800a7f0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800a7f4:	2000      	movs	r0, #0
 800a7f6:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800a7fa:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800a7fc:	2002      	movs	r0, #2
 800a7fe:	e7fc      	b.n	800a7fa <HAL_UARTEx_SetRxFifoThreshold+0x44>

0800a800 <__cvt>:
 800a800:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a804:	ec55 4b10 	vmov	r4, r5, d0
 800a808:	2d00      	cmp	r5, #0
 800a80a:	460e      	mov	r6, r1
 800a80c:	4619      	mov	r1, r3
 800a80e:	462b      	mov	r3, r5
 800a810:	bfbb      	ittet	lt
 800a812:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a816:	461d      	movlt	r5, r3
 800a818:	2300      	movge	r3, #0
 800a81a:	232d      	movlt	r3, #45	; 0x2d
 800a81c:	700b      	strb	r3, [r1, #0]
 800a81e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a820:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a824:	4691      	mov	r9, r2
 800a826:	f023 0820 	bic.w	r8, r3, #32
 800a82a:	bfbc      	itt	lt
 800a82c:	4622      	movlt	r2, r4
 800a82e:	4614      	movlt	r4, r2
 800a830:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a834:	d005      	beq.n	800a842 <__cvt+0x42>
 800a836:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a83a:	d100      	bne.n	800a83e <__cvt+0x3e>
 800a83c:	3601      	adds	r6, #1
 800a83e:	2102      	movs	r1, #2
 800a840:	e000      	b.n	800a844 <__cvt+0x44>
 800a842:	2103      	movs	r1, #3
 800a844:	ab03      	add	r3, sp, #12
 800a846:	9301      	str	r3, [sp, #4]
 800a848:	ab02      	add	r3, sp, #8
 800a84a:	9300      	str	r3, [sp, #0]
 800a84c:	ec45 4b10 	vmov	d0, r4, r5
 800a850:	4653      	mov	r3, sl
 800a852:	4632      	mov	r2, r6
 800a854:	f000 fea0 	bl	800b598 <_dtoa_r>
 800a858:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a85c:	4607      	mov	r7, r0
 800a85e:	d102      	bne.n	800a866 <__cvt+0x66>
 800a860:	f019 0f01 	tst.w	r9, #1
 800a864:	d022      	beq.n	800a8ac <__cvt+0xac>
 800a866:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a86a:	eb07 0906 	add.w	r9, r7, r6
 800a86e:	d110      	bne.n	800a892 <__cvt+0x92>
 800a870:	783b      	ldrb	r3, [r7, #0]
 800a872:	2b30      	cmp	r3, #48	; 0x30
 800a874:	d10a      	bne.n	800a88c <__cvt+0x8c>
 800a876:	2200      	movs	r2, #0
 800a878:	2300      	movs	r3, #0
 800a87a:	4620      	mov	r0, r4
 800a87c:	4629      	mov	r1, r5
 800a87e:	f7f6 f94b 	bl	8000b18 <__aeabi_dcmpeq>
 800a882:	b918      	cbnz	r0, 800a88c <__cvt+0x8c>
 800a884:	f1c6 0601 	rsb	r6, r6, #1
 800a888:	f8ca 6000 	str.w	r6, [sl]
 800a88c:	f8da 3000 	ldr.w	r3, [sl]
 800a890:	4499      	add	r9, r3
 800a892:	2200      	movs	r2, #0
 800a894:	2300      	movs	r3, #0
 800a896:	4620      	mov	r0, r4
 800a898:	4629      	mov	r1, r5
 800a89a:	f7f6 f93d 	bl	8000b18 <__aeabi_dcmpeq>
 800a89e:	b108      	cbz	r0, 800a8a4 <__cvt+0xa4>
 800a8a0:	f8cd 900c 	str.w	r9, [sp, #12]
 800a8a4:	2230      	movs	r2, #48	; 0x30
 800a8a6:	9b03      	ldr	r3, [sp, #12]
 800a8a8:	454b      	cmp	r3, r9
 800a8aa:	d307      	bcc.n	800a8bc <__cvt+0xbc>
 800a8ac:	9b03      	ldr	r3, [sp, #12]
 800a8ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a8b0:	1bdb      	subs	r3, r3, r7
 800a8b2:	4638      	mov	r0, r7
 800a8b4:	6013      	str	r3, [r2, #0]
 800a8b6:	b004      	add	sp, #16
 800a8b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8bc:	1c59      	adds	r1, r3, #1
 800a8be:	9103      	str	r1, [sp, #12]
 800a8c0:	701a      	strb	r2, [r3, #0]
 800a8c2:	e7f0      	b.n	800a8a6 <__cvt+0xa6>

0800a8c4 <__exponent>:
 800a8c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	2900      	cmp	r1, #0
 800a8ca:	bfb8      	it	lt
 800a8cc:	4249      	neglt	r1, r1
 800a8ce:	f803 2b02 	strb.w	r2, [r3], #2
 800a8d2:	bfb4      	ite	lt
 800a8d4:	222d      	movlt	r2, #45	; 0x2d
 800a8d6:	222b      	movge	r2, #43	; 0x2b
 800a8d8:	2909      	cmp	r1, #9
 800a8da:	7042      	strb	r2, [r0, #1]
 800a8dc:	dd2a      	ble.n	800a934 <__exponent+0x70>
 800a8de:	f10d 0207 	add.w	r2, sp, #7
 800a8e2:	4617      	mov	r7, r2
 800a8e4:	260a      	movs	r6, #10
 800a8e6:	4694      	mov	ip, r2
 800a8e8:	fb91 f5f6 	sdiv	r5, r1, r6
 800a8ec:	fb06 1415 	mls	r4, r6, r5, r1
 800a8f0:	3430      	adds	r4, #48	; 0x30
 800a8f2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a8f6:	460c      	mov	r4, r1
 800a8f8:	2c63      	cmp	r4, #99	; 0x63
 800a8fa:	f102 32ff 	add.w	r2, r2, #4294967295
 800a8fe:	4629      	mov	r1, r5
 800a900:	dcf1      	bgt.n	800a8e6 <__exponent+0x22>
 800a902:	3130      	adds	r1, #48	; 0x30
 800a904:	f1ac 0402 	sub.w	r4, ip, #2
 800a908:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a90c:	1c41      	adds	r1, r0, #1
 800a90e:	4622      	mov	r2, r4
 800a910:	42ba      	cmp	r2, r7
 800a912:	d30a      	bcc.n	800a92a <__exponent+0x66>
 800a914:	f10d 0209 	add.w	r2, sp, #9
 800a918:	eba2 020c 	sub.w	r2, r2, ip
 800a91c:	42bc      	cmp	r4, r7
 800a91e:	bf88      	it	hi
 800a920:	2200      	movhi	r2, #0
 800a922:	4413      	add	r3, r2
 800a924:	1a18      	subs	r0, r3, r0
 800a926:	b003      	add	sp, #12
 800a928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a92a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a92e:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a932:	e7ed      	b.n	800a910 <__exponent+0x4c>
 800a934:	2330      	movs	r3, #48	; 0x30
 800a936:	3130      	adds	r1, #48	; 0x30
 800a938:	7083      	strb	r3, [r0, #2]
 800a93a:	70c1      	strb	r1, [r0, #3]
 800a93c:	1d03      	adds	r3, r0, #4
 800a93e:	e7f1      	b.n	800a924 <__exponent+0x60>

0800a940 <_printf_float>:
 800a940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a944:	ed2d 8b02 	vpush	{d8}
 800a948:	b08d      	sub	sp, #52	; 0x34
 800a94a:	460c      	mov	r4, r1
 800a94c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a950:	4616      	mov	r6, r2
 800a952:	461f      	mov	r7, r3
 800a954:	4605      	mov	r5, r0
 800a956:	f000 fd0f 	bl	800b378 <_localeconv_r>
 800a95a:	f8d0 a000 	ldr.w	sl, [r0]
 800a95e:	4650      	mov	r0, sl
 800a960:	f7f5 fcae 	bl	80002c0 <strlen>
 800a964:	2300      	movs	r3, #0
 800a966:	930a      	str	r3, [sp, #40]	; 0x28
 800a968:	6823      	ldr	r3, [r4, #0]
 800a96a:	9305      	str	r3, [sp, #20]
 800a96c:	f8d8 3000 	ldr.w	r3, [r8]
 800a970:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a974:	3307      	adds	r3, #7
 800a976:	f023 0307 	bic.w	r3, r3, #7
 800a97a:	f103 0208 	add.w	r2, r3, #8
 800a97e:	f8c8 2000 	str.w	r2, [r8]
 800a982:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a986:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a98a:	9307      	str	r3, [sp, #28]
 800a98c:	f8cd 8018 	str.w	r8, [sp, #24]
 800a990:	ee08 0a10 	vmov	s16, r0
 800a994:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a998:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a99c:	4b9e      	ldr	r3, [pc, #632]	; (800ac18 <_printf_float+0x2d8>)
 800a99e:	f04f 32ff 	mov.w	r2, #4294967295
 800a9a2:	f7f6 f8eb 	bl	8000b7c <__aeabi_dcmpun>
 800a9a6:	bb88      	cbnz	r0, 800aa0c <_printf_float+0xcc>
 800a9a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a9ac:	4b9a      	ldr	r3, [pc, #616]	; (800ac18 <_printf_float+0x2d8>)
 800a9ae:	f04f 32ff 	mov.w	r2, #4294967295
 800a9b2:	f7f6 f8c5 	bl	8000b40 <__aeabi_dcmple>
 800a9b6:	bb48      	cbnz	r0, 800aa0c <_printf_float+0xcc>
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	4640      	mov	r0, r8
 800a9be:	4649      	mov	r1, r9
 800a9c0:	f7f6 f8b4 	bl	8000b2c <__aeabi_dcmplt>
 800a9c4:	b110      	cbz	r0, 800a9cc <_printf_float+0x8c>
 800a9c6:	232d      	movs	r3, #45	; 0x2d
 800a9c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9cc:	4a93      	ldr	r2, [pc, #588]	; (800ac1c <_printf_float+0x2dc>)
 800a9ce:	4b94      	ldr	r3, [pc, #592]	; (800ac20 <_printf_float+0x2e0>)
 800a9d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a9d4:	bf94      	ite	ls
 800a9d6:	4690      	movls	r8, r2
 800a9d8:	4698      	movhi	r8, r3
 800a9da:	2303      	movs	r3, #3
 800a9dc:	6123      	str	r3, [r4, #16]
 800a9de:	9b05      	ldr	r3, [sp, #20]
 800a9e0:	f023 0304 	bic.w	r3, r3, #4
 800a9e4:	6023      	str	r3, [r4, #0]
 800a9e6:	f04f 0900 	mov.w	r9, #0
 800a9ea:	9700      	str	r7, [sp, #0]
 800a9ec:	4633      	mov	r3, r6
 800a9ee:	aa0b      	add	r2, sp, #44	; 0x2c
 800a9f0:	4621      	mov	r1, r4
 800a9f2:	4628      	mov	r0, r5
 800a9f4:	f000 f9da 	bl	800adac <_printf_common>
 800a9f8:	3001      	adds	r0, #1
 800a9fa:	f040 8090 	bne.w	800ab1e <_printf_float+0x1de>
 800a9fe:	f04f 30ff 	mov.w	r0, #4294967295
 800aa02:	b00d      	add	sp, #52	; 0x34
 800aa04:	ecbd 8b02 	vpop	{d8}
 800aa08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa0c:	4642      	mov	r2, r8
 800aa0e:	464b      	mov	r3, r9
 800aa10:	4640      	mov	r0, r8
 800aa12:	4649      	mov	r1, r9
 800aa14:	f7f6 f8b2 	bl	8000b7c <__aeabi_dcmpun>
 800aa18:	b140      	cbz	r0, 800aa2c <_printf_float+0xec>
 800aa1a:	464b      	mov	r3, r9
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	bfbc      	itt	lt
 800aa20:	232d      	movlt	r3, #45	; 0x2d
 800aa22:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800aa26:	4a7f      	ldr	r2, [pc, #508]	; (800ac24 <_printf_float+0x2e4>)
 800aa28:	4b7f      	ldr	r3, [pc, #508]	; (800ac28 <_printf_float+0x2e8>)
 800aa2a:	e7d1      	b.n	800a9d0 <_printf_float+0x90>
 800aa2c:	6863      	ldr	r3, [r4, #4]
 800aa2e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800aa32:	9206      	str	r2, [sp, #24]
 800aa34:	1c5a      	adds	r2, r3, #1
 800aa36:	d13f      	bne.n	800aab8 <_printf_float+0x178>
 800aa38:	2306      	movs	r3, #6
 800aa3a:	6063      	str	r3, [r4, #4]
 800aa3c:	9b05      	ldr	r3, [sp, #20]
 800aa3e:	6861      	ldr	r1, [r4, #4]
 800aa40:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800aa44:	2300      	movs	r3, #0
 800aa46:	9303      	str	r3, [sp, #12]
 800aa48:	ab0a      	add	r3, sp, #40	; 0x28
 800aa4a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800aa4e:	ab09      	add	r3, sp, #36	; 0x24
 800aa50:	ec49 8b10 	vmov	d0, r8, r9
 800aa54:	9300      	str	r3, [sp, #0]
 800aa56:	6022      	str	r2, [r4, #0]
 800aa58:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800aa5c:	4628      	mov	r0, r5
 800aa5e:	f7ff fecf 	bl	800a800 <__cvt>
 800aa62:	9b06      	ldr	r3, [sp, #24]
 800aa64:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa66:	2b47      	cmp	r3, #71	; 0x47
 800aa68:	4680      	mov	r8, r0
 800aa6a:	d108      	bne.n	800aa7e <_printf_float+0x13e>
 800aa6c:	1cc8      	adds	r0, r1, #3
 800aa6e:	db02      	blt.n	800aa76 <_printf_float+0x136>
 800aa70:	6863      	ldr	r3, [r4, #4]
 800aa72:	4299      	cmp	r1, r3
 800aa74:	dd41      	ble.n	800aafa <_printf_float+0x1ba>
 800aa76:	f1ab 0302 	sub.w	r3, fp, #2
 800aa7a:	fa5f fb83 	uxtb.w	fp, r3
 800aa7e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800aa82:	d820      	bhi.n	800aac6 <_printf_float+0x186>
 800aa84:	3901      	subs	r1, #1
 800aa86:	465a      	mov	r2, fp
 800aa88:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800aa8c:	9109      	str	r1, [sp, #36]	; 0x24
 800aa8e:	f7ff ff19 	bl	800a8c4 <__exponent>
 800aa92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa94:	1813      	adds	r3, r2, r0
 800aa96:	2a01      	cmp	r2, #1
 800aa98:	4681      	mov	r9, r0
 800aa9a:	6123      	str	r3, [r4, #16]
 800aa9c:	dc02      	bgt.n	800aaa4 <_printf_float+0x164>
 800aa9e:	6822      	ldr	r2, [r4, #0]
 800aaa0:	07d2      	lsls	r2, r2, #31
 800aaa2:	d501      	bpl.n	800aaa8 <_printf_float+0x168>
 800aaa4:	3301      	adds	r3, #1
 800aaa6:	6123      	str	r3, [r4, #16]
 800aaa8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d09c      	beq.n	800a9ea <_printf_float+0xaa>
 800aab0:	232d      	movs	r3, #45	; 0x2d
 800aab2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aab6:	e798      	b.n	800a9ea <_printf_float+0xaa>
 800aab8:	9a06      	ldr	r2, [sp, #24]
 800aaba:	2a47      	cmp	r2, #71	; 0x47
 800aabc:	d1be      	bne.n	800aa3c <_printf_float+0xfc>
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d1bc      	bne.n	800aa3c <_printf_float+0xfc>
 800aac2:	2301      	movs	r3, #1
 800aac4:	e7b9      	b.n	800aa3a <_printf_float+0xfa>
 800aac6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800aaca:	d118      	bne.n	800aafe <_printf_float+0x1be>
 800aacc:	2900      	cmp	r1, #0
 800aace:	6863      	ldr	r3, [r4, #4]
 800aad0:	dd0b      	ble.n	800aaea <_printf_float+0x1aa>
 800aad2:	6121      	str	r1, [r4, #16]
 800aad4:	b913      	cbnz	r3, 800aadc <_printf_float+0x19c>
 800aad6:	6822      	ldr	r2, [r4, #0]
 800aad8:	07d0      	lsls	r0, r2, #31
 800aada:	d502      	bpl.n	800aae2 <_printf_float+0x1a2>
 800aadc:	3301      	adds	r3, #1
 800aade:	440b      	add	r3, r1
 800aae0:	6123      	str	r3, [r4, #16]
 800aae2:	65a1      	str	r1, [r4, #88]	; 0x58
 800aae4:	f04f 0900 	mov.w	r9, #0
 800aae8:	e7de      	b.n	800aaa8 <_printf_float+0x168>
 800aaea:	b913      	cbnz	r3, 800aaf2 <_printf_float+0x1b2>
 800aaec:	6822      	ldr	r2, [r4, #0]
 800aaee:	07d2      	lsls	r2, r2, #31
 800aaf0:	d501      	bpl.n	800aaf6 <_printf_float+0x1b6>
 800aaf2:	3302      	adds	r3, #2
 800aaf4:	e7f4      	b.n	800aae0 <_printf_float+0x1a0>
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	e7f2      	b.n	800aae0 <_printf_float+0x1a0>
 800aafa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800aafe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab00:	4299      	cmp	r1, r3
 800ab02:	db05      	blt.n	800ab10 <_printf_float+0x1d0>
 800ab04:	6823      	ldr	r3, [r4, #0]
 800ab06:	6121      	str	r1, [r4, #16]
 800ab08:	07d8      	lsls	r0, r3, #31
 800ab0a:	d5ea      	bpl.n	800aae2 <_printf_float+0x1a2>
 800ab0c:	1c4b      	adds	r3, r1, #1
 800ab0e:	e7e7      	b.n	800aae0 <_printf_float+0x1a0>
 800ab10:	2900      	cmp	r1, #0
 800ab12:	bfd4      	ite	le
 800ab14:	f1c1 0202 	rsble	r2, r1, #2
 800ab18:	2201      	movgt	r2, #1
 800ab1a:	4413      	add	r3, r2
 800ab1c:	e7e0      	b.n	800aae0 <_printf_float+0x1a0>
 800ab1e:	6823      	ldr	r3, [r4, #0]
 800ab20:	055a      	lsls	r2, r3, #21
 800ab22:	d407      	bmi.n	800ab34 <_printf_float+0x1f4>
 800ab24:	6923      	ldr	r3, [r4, #16]
 800ab26:	4642      	mov	r2, r8
 800ab28:	4631      	mov	r1, r6
 800ab2a:	4628      	mov	r0, r5
 800ab2c:	47b8      	blx	r7
 800ab2e:	3001      	adds	r0, #1
 800ab30:	d12c      	bne.n	800ab8c <_printf_float+0x24c>
 800ab32:	e764      	b.n	800a9fe <_printf_float+0xbe>
 800ab34:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ab38:	f240 80e0 	bls.w	800acfc <_printf_float+0x3bc>
 800ab3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ab40:	2200      	movs	r2, #0
 800ab42:	2300      	movs	r3, #0
 800ab44:	f7f5 ffe8 	bl	8000b18 <__aeabi_dcmpeq>
 800ab48:	2800      	cmp	r0, #0
 800ab4a:	d034      	beq.n	800abb6 <_printf_float+0x276>
 800ab4c:	4a37      	ldr	r2, [pc, #220]	; (800ac2c <_printf_float+0x2ec>)
 800ab4e:	2301      	movs	r3, #1
 800ab50:	4631      	mov	r1, r6
 800ab52:	4628      	mov	r0, r5
 800ab54:	47b8      	blx	r7
 800ab56:	3001      	adds	r0, #1
 800ab58:	f43f af51 	beq.w	800a9fe <_printf_float+0xbe>
 800ab5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ab60:	429a      	cmp	r2, r3
 800ab62:	db02      	blt.n	800ab6a <_printf_float+0x22a>
 800ab64:	6823      	ldr	r3, [r4, #0]
 800ab66:	07d8      	lsls	r0, r3, #31
 800ab68:	d510      	bpl.n	800ab8c <_printf_float+0x24c>
 800ab6a:	ee18 3a10 	vmov	r3, s16
 800ab6e:	4652      	mov	r2, sl
 800ab70:	4631      	mov	r1, r6
 800ab72:	4628      	mov	r0, r5
 800ab74:	47b8      	blx	r7
 800ab76:	3001      	adds	r0, #1
 800ab78:	f43f af41 	beq.w	800a9fe <_printf_float+0xbe>
 800ab7c:	f04f 0800 	mov.w	r8, #0
 800ab80:	f104 091a 	add.w	r9, r4, #26
 800ab84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab86:	3b01      	subs	r3, #1
 800ab88:	4543      	cmp	r3, r8
 800ab8a:	dc09      	bgt.n	800aba0 <_printf_float+0x260>
 800ab8c:	6823      	ldr	r3, [r4, #0]
 800ab8e:	079b      	lsls	r3, r3, #30
 800ab90:	f100 8107 	bmi.w	800ada2 <_printf_float+0x462>
 800ab94:	68e0      	ldr	r0, [r4, #12]
 800ab96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab98:	4298      	cmp	r0, r3
 800ab9a:	bfb8      	it	lt
 800ab9c:	4618      	movlt	r0, r3
 800ab9e:	e730      	b.n	800aa02 <_printf_float+0xc2>
 800aba0:	2301      	movs	r3, #1
 800aba2:	464a      	mov	r2, r9
 800aba4:	4631      	mov	r1, r6
 800aba6:	4628      	mov	r0, r5
 800aba8:	47b8      	blx	r7
 800abaa:	3001      	adds	r0, #1
 800abac:	f43f af27 	beq.w	800a9fe <_printf_float+0xbe>
 800abb0:	f108 0801 	add.w	r8, r8, #1
 800abb4:	e7e6      	b.n	800ab84 <_printf_float+0x244>
 800abb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abb8:	2b00      	cmp	r3, #0
 800abba:	dc39      	bgt.n	800ac30 <_printf_float+0x2f0>
 800abbc:	4a1b      	ldr	r2, [pc, #108]	; (800ac2c <_printf_float+0x2ec>)
 800abbe:	2301      	movs	r3, #1
 800abc0:	4631      	mov	r1, r6
 800abc2:	4628      	mov	r0, r5
 800abc4:	47b8      	blx	r7
 800abc6:	3001      	adds	r0, #1
 800abc8:	f43f af19 	beq.w	800a9fe <_printf_float+0xbe>
 800abcc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800abd0:	4313      	orrs	r3, r2
 800abd2:	d102      	bne.n	800abda <_printf_float+0x29a>
 800abd4:	6823      	ldr	r3, [r4, #0]
 800abd6:	07d9      	lsls	r1, r3, #31
 800abd8:	d5d8      	bpl.n	800ab8c <_printf_float+0x24c>
 800abda:	ee18 3a10 	vmov	r3, s16
 800abde:	4652      	mov	r2, sl
 800abe0:	4631      	mov	r1, r6
 800abe2:	4628      	mov	r0, r5
 800abe4:	47b8      	blx	r7
 800abe6:	3001      	adds	r0, #1
 800abe8:	f43f af09 	beq.w	800a9fe <_printf_float+0xbe>
 800abec:	f04f 0900 	mov.w	r9, #0
 800abf0:	f104 0a1a 	add.w	sl, r4, #26
 800abf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abf6:	425b      	negs	r3, r3
 800abf8:	454b      	cmp	r3, r9
 800abfa:	dc01      	bgt.n	800ac00 <_printf_float+0x2c0>
 800abfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abfe:	e792      	b.n	800ab26 <_printf_float+0x1e6>
 800ac00:	2301      	movs	r3, #1
 800ac02:	4652      	mov	r2, sl
 800ac04:	4631      	mov	r1, r6
 800ac06:	4628      	mov	r0, r5
 800ac08:	47b8      	blx	r7
 800ac0a:	3001      	adds	r0, #1
 800ac0c:	f43f aef7 	beq.w	800a9fe <_printf_float+0xbe>
 800ac10:	f109 0901 	add.w	r9, r9, #1
 800ac14:	e7ee      	b.n	800abf4 <_printf_float+0x2b4>
 800ac16:	bf00      	nop
 800ac18:	7fefffff 	.word	0x7fefffff
 800ac1c:	0800f7d4 	.word	0x0800f7d4
 800ac20:	0800f7d8 	.word	0x0800f7d8
 800ac24:	0800f7dc 	.word	0x0800f7dc
 800ac28:	0800f7e0 	.word	0x0800f7e0
 800ac2c:	0800f7e4 	.word	0x0800f7e4
 800ac30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ac34:	429a      	cmp	r2, r3
 800ac36:	bfa8      	it	ge
 800ac38:	461a      	movge	r2, r3
 800ac3a:	2a00      	cmp	r2, #0
 800ac3c:	4691      	mov	r9, r2
 800ac3e:	dc37      	bgt.n	800acb0 <_printf_float+0x370>
 800ac40:	f04f 0b00 	mov.w	fp, #0
 800ac44:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ac48:	f104 021a 	add.w	r2, r4, #26
 800ac4c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ac4e:	9305      	str	r3, [sp, #20]
 800ac50:	eba3 0309 	sub.w	r3, r3, r9
 800ac54:	455b      	cmp	r3, fp
 800ac56:	dc33      	bgt.n	800acc0 <_printf_float+0x380>
 800ac58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac5c:	429a      	cmp	r2, r3
 800ac5e:	db3b      	blt.n	800acd8 <_printf_float+0x398>
 800ac60:	6823      	ldr	r3, [r4, #0]
 800ac62:	07da      	lsls	r2, r3, #31
 800ac64:	d438      	bmi.n	800acd8 <_printf_float+0x398>
 800ac66:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ac6a:	eba2 0903 	sub.w	r9, r2, r3
 800ac6e:	9b05      	ldr	r3, [sp, #20]
 800ac70:	1ad2      	subs	r2, r2, r3
 800ac72:	4591      	cmp	r9, r2
 800ac74:	bfa8      	it	ge
 800ac76:	4691      	movge	r9, r2
 800ac78:	f1b9 0f00 	cmp.w	r9, #0
 800ac7c:	dc35      	bgt.n	800acea <_printf_float+0x3aa>
 800ac7e:	f04f 0800 	mov.w	r8, #0
 800ac82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ac86:	f104 0a1a 	add.w	sl, r4, #26
 800ac8a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac8e:	1a9b      	subs	r3, r3, r2
 800ac90:	eba3 0309 	sub.w	r3, r3, r9
 800ac94:	4543      	cmp	r3, r8
 800ac96:	f77f af79 	ble.w	800ab8c <_printf_float+0x24c>
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	4652      	mov	r2, sl
 800ac9e:	4631      	mov	r1, r6
 800aca0:	4628      	mov	r0, r5
 800aca2:	47b8      	blx	r7
 800aca4:	3001      	adds	r0, #1
 800aca6:	f43f aeaa 	beq.w	800a9fe <_printf_float+0xbe>
 800acaa:	f108 0801 	add.w	r8, r8, #1
 800acae:	e7ec      	b.n	800ac8a <_printf_float+0x34a>
 800acb0:	4613      	mov	r3, r2
 800acb2:	4631      	mov	r1, r6
 800acb4:	4642      	mov	r2, r8
 800acb6:	4628      	mov	r0, r5
 800acb8:	47b8      	blx	r7
 800acba:	3001      	adds	r0, #1
 800acbc:	d1c0      	bne.n	800ac40 <_printf_float+0x300>
 800acbe:	e69e      	b.n	800a9fe <_printf_float+0xbe>
 800acc0:	2301      	movs	r3, #1
 800acc2:	4631      	mov	r1, r6
 800acc4:	4628      	mov	r0, r5
 800acc6:	9205      	str	r2, [sp, #20]
 800acc8:	47b8      	blx	r7
 800acca:	3001      	adds	r0, #1
 800accc:	f43f ae97 	beq.w	800a9fe <_printf_float+0xbe>
 800acd0:	9a05      	ldr	r2, [sp, #20]
 800acd2:	f10b 0b01 	add.w	fp, fp, #1
 800acd6:	e7b9      	b.n	800ac4c <_printf_float+0x30c>
 800acd8:	ee18 3a10 	vmov	r3, s16
 800acdc:	4652      	mov	r2, sl
 800acde:	4631      	mov	r1, r6
 800ace0:	4628      	mov	r0, r5
 800ace2:	47b8      	blx	r7
 800ace4:	3001      	adds	r0, #1
 800ace6:	d1be      	bne.n	800ac66 <_printf_float+0x326>
 800ace8:	e689      	b.n	800a9fe <_printf_float+0xbe>
 800acea:	9a05      	ldr	r2, [sp, #20]
 800acec:	464b      	mov	r3, r9
 800acee:	4442      	add	r2, r8
 800acf0:	4631      	mov	r1, r6
 800acf2:	4628      	mov	r0, r5
 800acf4:	47b8      	blx	r7
 800acf6:	3001      	adds	r0, #1
 800acf8:	d1c1      	bne.n	800ac7e <_printf_float+0x33e>
 800acfa:	e680      	b.n	800a9fe <_printf_float+0xbe>
 800acfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800acfe:	2a01      	cmp	r2, #1
 800ad00:	dc01      	bgt.n	800ad06 <_printf_float+0x3c6>
 800ad02:	07db      	lsls	r3, r3, #31
 800ad04:	d53a      	bpl.n	800ad7c <_printf_float+0x43c>
 800ad06:	2301      	movs	r3, #1
 800ad08:	4642      	mov	r2, r8
 800ad0a:	4631      	mov	r1, r6
 800ad0c:	4628      	mov	r0, r5
 800ad0e:	47b8      	blx	r7
 800ad10:	3001      	adds	r0, #1
 800ad12:	f43f ae74 	beq.w	800a9fe <_printf_float+0xbe>
 800ad16:	ee18 3a10 	vmov	r3, s16
 800ad1a:	4652      	mov	r2, sl
 800ad1c:	4631      	mov	r1, r6
 800ad1e:	4628      	mov	r0, r5
 800ad20:	47b8      	blx	r7
 800ad22:	3001      	adds	r0, #1
 800ad24:	f43f ae6b 	beq.w	800a9fe <_printf_float+0xbe>
 800ad28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	2300      	movs	r3, #0
 800ad30:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800ad34:	f7f5 fef0 	bl	8000b18 <__aeabi_dcmpeq>
 800ad38:	b9d8      	cbnz	r0, 800ad72 <_printf_float+0x432>
 800ad3a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ad3e:	f108 0201 	add.w	r2, r8, #1
 800ad42:	4631      	mov	r1, r6
 800ad44:	4628      	mov	r0, r5
 800ad46:	47b8      	blx	r7
 800ad48:	3001      	adds	r0, #1
 800ad4a:	d10e      	bne.n	800ad6a <_printf_float+0x42a>
 800ad4c:	e657      	b.n	800a9fe <_printf_float+0xbe>
 800ad4e:	2301      	movs	r3, #1
 800ad50:	4652      	mov	r2, sl
 800ad52:	4631      	mov	r1, r6
 800ad54:	4628      	mov	r0, r5
 800ad56:	47b8      	blx	r7
 800ad58:	3001      	adds	r0, #1
 800ad5a:	f43f ae50 	beq.w	800a9fe <_printf_float+0xbe>
 800ad5e:	f108 0801 	add.w	r8, r8, #1
 800ad62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad64:	3b01      	subs	r3, #1
 800ad66:	4543      	cmp	r3, r8
 800ad68:	dcf1      	bgt.n	800ad4e <_printf_float+0x40e>
 800ad6a:	464b      	mov	r3, r9
 800ad6c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ad70:	e6da      	b.n	800ab28 <_printf_float+0x1e8>
 800ad72:	f04f 0800 	mov.w	r8, #0
 800ad76:	f104 0a1a 	add.w	sl, r4, #26
 800ad7a:	e7f2      	b.n	800ad62 <_printf_float+0x422>
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	4642      	mov	r2, r8
 800ad80:	e7df      	b.n	800ad42 <_printf_float+0x402>
 800ad82:	2301      	movs	r3, #1
 800ad84:	464a      	mov	r2, r9
 800ad86:	4631      	mov	r1, r6
 800ad88:	4628      	mov	r0, r5
 800ad8a:	47b8      	blx	r7
 800ad8c:	3001      	adds	r0, #1
 800ad8e:	f43f ae36 	beq.w	800a9fe <_printf_float+0xbe>
 800ad92:	f108 0801 	add.w	r8, r8, #1
 800ad96:	68e3      	ldr	r3, [r4, #12]
 800ad98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ad9a:	1a5b      	subs	r3, r3, r1
 800ad9c:	4543      	cmp	r3, r8
 800ad9e:	dcf0      	bgt.n	800ad82 <_printf_float+0x442>
 800ada0:	e6f8      	b.n	800ab94 <_printf_float+0x254>
 800ada2:	f04f 0800 	mov.w	r8, #0
 800ada6:	f104 0919 	add.w	r9, r4, #25
 800adaa:	e7f4      	b.n	800ad96 <_printf_float+0x456>

0800adac <_printf_common>:
 800adac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adb0:	4616      	mov	r6, r2
 800adb2:	4699      	mov	r9, r3
 800adb4:	688a      	ldr	r2, [r1, #8]
 800adb6:	690b      	ldr	r3, [r1, #16]
 800adb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800adbc:	4293      	cmp	r3, r2
 800adbe:	bfb8      	it	lt
 800adc0:	4613      	movlt	r3, r2
 800adc2:	6033      	str	r3, [r6, #0]
 800adc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800adc8:	4607      	mov	r7, r0
 800adca:	460c      	mov	r4, r1
 800adcc:	b10a      	cbz	r2, 800add2 <_printf_common+0x26>
 800adce:	3301      	adds	r3, #1
 800add0:	6033      	str	r3, [r6, #0]
 800add2:	6823      	ldr	r3, [r4, #0]
 800add4:	0699      	lsls	r1, r3, #26
 800add6:	bf42      	ittt	mi
 800add8:	6833      	ldrmi	r3, [r6, #0]
 800adda:	3302      	addmi	r3, #2
 800addc:	6033      	strmi	r3, [r6, #0]
 800adde:	6825      	ldr	r5, [r4, #0]
 800ade0:	f015 0506 	ands.w	r5, r5, #6
 800ade4:	d106      	bne.n	800adf4 <_printf_common+0x48>
 800ade6:	f104 0a19 	add.w	sl, r4, #25
 800adea:	68e3      	ldr	r3, [r4, #12]
 800adec:	6832      	ldr	r2, [r6, #0]
 800adee:	1a9b      	subs	r3, r3, r2
 800adf0:	42ab      	cmp	r3, r5
 800adf2:	dc26      	bgt.n	800ae42 <_printf_common+0x96>
 800adf4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800adf8:	1e13      	subs	r3, r2, #0
 800adfa:	6822      	ldr	r2, [r4, #0]
 800adfc:	bf18      	it	ne
 800adfe:	2301      	movne	r3, #1
 800ae00:	0692      	lsls	r2, r2, #26
 800ae02:	d42b      	bmi.n	800ae5c <_printf_common+0xb0>
 800ae04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ae08:	4649      	mov	r1, r9
 800ae0a:	4638      	mov	r0, r7
 800ae0c:	47c0      	blx	r8
 800ae0e:	3001      	adds	r0, #1
 800ae10:	d01e      	beq.n	800ae50 <_printf_common+0xa4>
 800ae12:	6823      	ldr	r3, [r4, #0]
 800ae14:	6922      	ldr	r2, [r4, #16]
 800ae16:	f003 0306 	and.w	r3, r3, #6
 800ae1a:	2b04      	cmp	r3, #4
 800ae1c:	bf02      	ittt	eq
 800ae1e:	68e5      	ldreq	r5, [r4, #12]
 800ae20:	6833      	ldreq	r3, [r6, #0]
 800ae22:	1aed      	subeq	r5, r5, r3
 800ae24:	68a3      	ldr	r3, [r4, #8]
 800ae26:	bf0c      	ite	eq
 800ae28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ae2c:	2500      	movne	r5, #0
 800ae2e:	4293      	cmp	r3, r2
 800ae30:	bfc4      	itt	gt
 800ae32:	1a9b      	subgt	r3, r3, r2
 800ae34:	18ed      	addgt	r5, r5, r3
 800ae36:	2600      	movs	r6, #0
 800ae38:	341a      	adds	r4, #26
 800ae3a:	42b5      	cmp	r5, r6
 800ae3c:	d11a      	bne.n	800ae74 <_printf_common+0xc8>
 800ae3e:	2000      	movs	r0, #0
 800ae40:	e008      	b.n	800ae54 <_printf_common+0xa8>
 800ae42:	2301      	movs	r3, #1
 800ae44:	4652      	mov	r2, sl
 800ae46:	4649      	mov	r1, r9
 800ae48:	4638      	mov	r0, r7
 800ae4a:	47c0      	blx	r8
 800ae4c:	3001      	adds	r0, #1
 800ae4e:	d103      	bne.n	800ae58 <_printf_common+0xac>
 800ae50:	f04f 30ff 	mov.w	r0, #4294967295
 800ae54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae58:	3501      	adds	r5, #1
 800ae5a:	e7c6      	b.n	800adea <_printf_common+0x3e>
 800ae5c:	18e1      	adds	r1, r4, r3
 800ae5e:	1c5a      	adds	r2, r3, #1
 800ae60:	2030      	movs	r0, #48	; 0x30
 800ae62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ae66:	4422      	add	r2, r4
 800ae68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ae6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ae70:	3302      	adds	r3, #2
 800ae72:	e7c7      	b.n	800ae04 <_printf_common+0x58>
 800ae74:	2301      	movs	r3, #1
 800ae76:	4622      	mov	r2, r4
 800ae78:	4649      	mov	r1, r9
 800ae7a:	4638      	mov	r0, r7
 800ae7c:	47c0      	blx	r8
 800ae7e:	3001      	adds	r0, #1
 800ae80:	d0e6      	beq.n	800ae50 <_printf_common+0xa4>
 800ae82:	3601      	adds	r6, #1
 800ae84:	e7d9      	b.n	800ae3a <_printf_common+0x8e>
	...

0800ae88 <_printf_i>:
 800ae88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae8c:	7e0f      	ldrb	r7, [r1, #24]
 800ae8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ae90:	2f78      	cmp	r7, #120	; 0x78
 800ae92:	4691      	mov	r9, r2
 800ae94:	4680      	mov	r8, r0
 800ae96:	460c      	mov	r4, r1
 800ae98:	469a      	mov	sl, r3
 800ae9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ae9e:	d807      	bhi.n	800aeb0 <_printf_i+0x28>
 800aea0:	2f62      	cmp	r7, #98	; 0x62
 800aea2:	d80a      	bhi.n	800aeba <_printf_i+0x32>
 800aea4:	2f00      	cmp	r7, #0
 800aea6:	f000 80d4 	beq.w	800b052 <_printf_i+0x1ca>
 800aeaa:	2f58      	cmp	r7, #88	; 0x58
 800aeac:	f000 80c0 	beq.w	800b030 <_printf_i+0x1a8>
 800aeb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aeb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aeb8:	e03a      	b.n	800af30 <_printf_i+0xa8>
 800aeba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aebe:	2b15      	cmp	r3, #21
 800aec0:	d8f6      	bhi.n	800aeb0 <_printf_i+0x28>
 800aec2:	a101      	add	r1, pc, #4	; (adr r1, 800aec8 <_printf_i+0x40>)
 800aec4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aec8:	0800af21 	.word	0x0800af21
 800aecc:	0800af35 	.word	0x0800af35
 800aed0:	0800aeb1 	.word	0x0800aeb1
 800aed4:	0800aeb1 	.word	0x0800aeb1
 800aed8:	0800aeb1 	.word	0x0800aeb1
 800aedc:	0800aeb1 	.word	0x0800aeb1
 800aee0:	0800af35 	.word	0x0800af35
 800aee4:	0800aeb1 	.word	0x0800aeb1
 800aee8:	0800aeb1 	.word	0x0800aeb1
 800aeec:	0800aeb1 	.word	0x0800aeb1
 800aef0:	0800aeb1 	.word	0x0800aeb1
 800aef4:	0800b039 	.word	0x0800b039
 800aef8:	0800af61 	.word	0x0800af61
 800aefc:	0800aff3 	.word	0x0800aff3
 800af00:	0800aeb1 	.word	0x0800aeb1
 800af04:	0800aeb1 	.word	0x0800aeb1
 800af08:	0800b05b 	.word	0x0800b05b
 800af0c:	0800aeb1 	.word	0x0800aeb1
 800af10:	0800af61 	.word	0x0800af61
 800af14:	0800aeb1 	.word	0x0800aeb1
 800af18:	0800aeb1 	.word	0x0800aeb1
 800af1c:	0800affb 	.word	0x0800affb
 800af20:	682b      	ldr	r3, [r5, #0]
 800af22:	1d1a      	adds	r2, r3, #4
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	602a      	str	r2, [r5, #0]
 800af28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800af30:	2301      	movs	r3, #1
 800af32:	e09f      	b.n	800b074 <_printf_i+0x1ec>
 800af34:	6820      	ldr	r0, [r4, #0]
 800af36:	682b      	ldr	r3, [r5, #0]
 800af38:	0607      	lsls	r7, r0, #24
 800af3a:	f103 0104 	add.w	r1, r3, #4
 800af3e:	6029      	str	r1, [r5, #0]
 800af40:	d501      	bpl.n	800af46 <_printf_i+0xbe>
 800af42:	681e      	ldr	r6, [r3, #0]
 800af44:	e003      	b.n	800af4e <_printf_i+0xc6>
 800af46:	0646      	lsls	r6, r0, #25
 800af48:	d5fb      	bpl.n	800af42 <_printf_i+0xba>
 800af4a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800af4e:	2e00      	cmp	r6, #0
 800af50:	da03      	bge.n	800af5a <_printf_i+0xd2>
 800af52:	232d      	movs	r3, #45	; 0x2d
 800af54:	4276      	negs	r6, r6
 800af56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af5a:	485a      	ldr	r0, [pc, #360]	; (800b0c4 <_printf_i+0x23c>)
 800af5c:	230a      	movs	r3, #10
 800af5e:	e012      	b.n	800af86 <_printf_i+0xfe>
 800af60:	682b      	ldr	r3, [r5, #0]
 800af62:	6820      	ldr	r0, [r4, #0]
 800af64:	1d19      	adds	r1, r3, #4
 800af66:	6029      	str	r1, [r5, #0]
 800af68:	0605      	lsls	r5, r0, #24
 800af6a:	d501      	bpl.n	800af70 <_printf_i+0xe8>
 800af6c:	681e      	ldr	r6, [r3, #0]
 800af6e:	e002      	b.n	800af76 <_printf_i+0xee>
 800af70:	0641      	lsls	r1, r0, #25
 800af72:	d5fb      	bpl.n	800af6c <_printf_i+0xe4>
 800af74:	881e      	ldrh	r6, [r3, #0]
 800af76:	4853      	ldr	r0, [pc, #332]	; (800b0c4 <_printf_i+0x23c>)
 800af78:	2f6f      	cmp	r7, #111	; 0x6f
 800af7a:	bf0c      	ite	eq
 800af7c:	2308      	moveq	r3, #8
 800af7e:	230a      	movne	r3, #10
 800af80:	2100      	movs	r1, #0
 800af82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800af86:	6865      	ldr	r5, [r4, #4]
 800af88:	60a5      	str	r5, [r4, #8]
 800af8a:	2d00      	cmp	r5, #0
 800af8c:	bfa2      	ittt	ge
 800af8e:	6821      	ldrge	r1, [r4, #0]
 800af90:	f021 0104 	bicge.w	r1, r1, #4
 800af94:	6021      	strge	r1, [r4, #0]
 800af96:	b90e      	cbnz	r6, 800af9c <_printf_i+0x114>
 800af98:	2d00      	cmp	r5, #0
 800af9a:	d04b      	beq.n	800b034 <_printf_i+0x1ac>
 800af9c:	4615      	mov	r5, r2
 800af9e:	fbb6 f1f3 	udiv	r1, r6, r3
 800afa2:	fb03 6711 	mls	r7, r3, r1, r6
 800afa6:	5dc7      	ldrb	r7, [r0, r7]
 800afa8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800afac:	4637      	mov	r7, r6
 800afae:	42bb      	cmp	r3, r7
 800afb0:	460e      	mov	r6, r1
 800afb2:	d9f4      	bls.n	800af9e <_printf_i+0x116>
 800afb4:	2b08      	cmp	r3, #8
 800afb6:	d10b      	bne.n	800afd0 <_printf_i+0x148>
 800afb8:	6823      	ldr	r3, [r4, #0]
 800afba:	07de      	lsls	r6, r3, #31
 800afbc:	d508      	bpl.n	800afd0 <_printf_i+0x148>
 800afbe:	6923      	ldr	r3, [r4, #16]
 800afc0:	6861      	ldr	r1, [r4, #4]
 800afc2:	4299      	cmp	r1, r3
 800afc4:	bfde      	ittt	le
 800afc6:	2330      	movle	r3, #48	; 0x30
 800afc8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800afcc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800afd0:	1b52      	subs	r2, r2, r5
 800afd2:	6122      	str	r2, [r4, #16]
 800afd4:	f8cd a000 	str.w	sl, [sp]
 800afd8:	464b      	mov	r3, r9
 800afda:	aa03      	add	r2, sp, #12
 800afdc:	4621      	mov	r1, r4
 800afde:	4640      	mov	r0, r8
 800afe0:	f7ff fee4 	bl	800adac <_printf_common>
 800afe4:	3001      	adds	r0, #1
 800afe6:	d14a      	bne.n	800b07e <_printf_i+0x1f6>
 800afe8:	f04f 30ff 	mov.w	r0, #4294967295
 800afec:	b004      	add	sp, #16
 800afee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aff2:	6823      	ldr	r3, [r4, #0]
 800aff4:	f043 0320 	orr.w	r3, r3, #32
 800aff8:	6023      	str	r3, [r4, #0]
 800affa:	4833      	ldr	r0, [pc, #204]	; (800b0c8 <_printf_i+0x240>)
 800affc:	2778      	movs	r7, #120	; 0x78
 800affe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b002:	6823      	ldr	r3, [r4, #0]
 800b004:	6829      	ldr	r1, [r5, #0]
 800b006:	061f      	lsls	r7, r3, #24
 800b008:	f851 6b04 	ldr.w	r6, [r1], #4
 800b00c:	d402      	bmi.n	800b014 <_printf_i+0x18c>
 800b00e:	065f      	lsls	r7, r3, #25
 800b010:	bf48      	it	mi
 800b012:	b2b6      	uxthmi	r6, r6
 800b014:	07df      	lsls	r7, r3, #31
 800b016:	bf48      	it	mi
 800b018:	f043 0320 	orrmi.w	r3, r3, #32
 800b01c:	6029      	str	r1, [r5, #0]
 800b01e:	bf48      	it	mi
 800b020:	6023      	strmi	r3, [r4, #0]
 800b022:	b91e      	cbnz	r6, 800b02c <_printf_i+0x1a4>
 800b024:	6823      	ldr	r3, [r4, #0]
 800b026:	f023 0320 	bic.w	r3, r3, #32
 800b02a:	6023      	str	r3, [r4, #0]
 800b02c:	2310      	movs	r3, #16
 800b02e:	e7a7      	b.n	800af80 <_printf_i+0xf8>
 800b030:	4824      	ldr	r0, [pc, #144]	; (800b0c4 <_printf_i+0x23c>)
 800b032:	e7e4      	b.n	800affe <_printf_i+0x176>
 800b034:	4615      	mov	r5, r2
 800b036:	e7bd      	b.n	800afb4 <_printf_i+0x12c>
 800b038:	682b      	ldr	r3, [r5, #0]
 800b03a:	6826      	ldr	r6, [r4, #0]
 800b03c:	6961      	ldr	r1, [r4, #20]
 800b03e:	1d18      	adds	r0, r3, #4
 800b040:	6028      	str	r0, [r5, #0]
 800b042:	0635      	lsls	r5, r6, #24
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	d501      	bpl.n	800b04c <_printf_i+0x1c4>
 800b048:	6019      	str	r1, [r3, #0]
 800b04a:	e002      	b.n	800b052 <_printf_i+0x1ca>
 800b04c:	0670      	lsls	r0, r6, #25
 800b04e:	d5fb      	bpl.n	800b048 <_printf_i+0x1c0>
 800b050:	8019      	strh	r1, [r3, #0]
 800b052:	2300      	movs	r3, #0
 800b054:	6123      	str	r3, [r4, #16]
 800b056:	4615      	mov	r5, r2
 800b058:	e7bc      	b.n	800afd4 <_printf_i+0x14c>
 800b05a:	682b      	ldr	r3, [r5, #0]
 800b05c:	1d1a      	adds	r2, r3, #4
 800b05e:	602a      	str	r2, [r5, #0]
 800b060:	681d      	ldr	r5, [r3, #0]
 800b062:	6862      	ldr	r2, [r4, #4]
 800b064:	2100      	movs	r1, #0
 800b066:	4628      	mov	r0, r5
 800b068:	f7f5 f8da 	bl	8000220 <memchr>
 800b06c:	b108      	cbz	r0, 800b072 <_printf_i+0x1ea>
 800b06e:	1b40      	subs	r0, r0, r5
 800b070:	6060      	str	r0, [r4, #4]
 800b072:	6863      	ldr	r3, [r4, #4]
 800b074:	6123      	str	r3, [r4, #16]
 800b076:	2300      	movs	r3, #0
 800b078:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b07c:	e7aa      	b.n	800afd4 <_printf_i+0x14c>
 800b07e:	6923      	ldr	r3, [r4, #16]
 800b080:	462a      	mov	r2, r5
 800b082:	4649      	mov	r1, r9
 800b084:	4640      	mov	r0, r8
 800b086:	47d0      	blx	sl
 800b088:	3001      	adds	r0, #1
 800b08a:	d0ad      	beq.n	800afe8 <_printf_i+0x160>
 800b08c:	6823      	ldr	r3, [r4, #0]
 800b08e:	079b      	lsls	r3, r3, #30
 800b090:	d413      	bmi.n	800b0ba <_printf_i+0x232>
 800b092:	68e0      	ldr	r0, [r4, #12]
 800b094:	9b03      	ldr	r3, [sp, #12]
 800b096:	4298      	cmp	r0, r3
 800b098:	bfb8      	it	lt
 800b09a:	4618      	movlt	r0, r3
 800b09c:	e7a6      	b.n	800afec <_printf_i+0x164>
 800b09e:	2301      	movs	r3, #1
 800b0a0:	4632      	mov	r2, r6
 800b0a2:	4649      	mov	r1, r9
 800b0a4:	4640      	mov	r0, r8
 800b0a6:	47d0      	blx	sl
 800b0a8:	3001      	adds	r0, #1
 800b0aa:	d09d      	beq.n	800afe8 <_printf_i+0x160>
 800b0ac:	3501      	adds	r5, #1
 800b0ae:	68e3      	ldr	r3, [r4, #12]
 800b0b0:	9903      	ldr	r1, [sp, #12]
 800b0b2:	1a5b      	subs	r3, r3, r1
 800b0b4:	42ab      	cmp	r3, r5
 800b0b6:	dcf2      	bgt.n	800b09e <_printf_i+0x216>
 800b0b8:	e7eb      	b.n	800b092 <_printf_i+0x20a>
 800b0ba:	2500      	movs	r5, #0
 800b0bc:	f104 0619 	add.w	r6, r4, #25
 800b0c0:	e7f5      	b.n	800b0ae <_printf_i+0x226>
 800b0c2:	bf00      	nop
 800b0c4:	0800f7e6 	.word	0x0800f7e6
 800b0c8:	0800f7f7 	.word	0x0800f7f7

0800b0cc <std>:
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	b510      	push	{r4, lr}
 800b0d0:	4604      	mov	r4, r0
 800b0d2:	e9c0 3300 	strd	r3, r3, [r0]
 800b0d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b0da:	6083      	str	r3, [r0, #8]
 800b0dc:	8181      	strh	r1, [r0, #12]
 800b0de:	6643      	str	r3, [r0, #100]	; 0x64
 800b0e0:	81c2      	strh	r2, [r0, #14]
 800b0e2:	6183      	str	r3, [r0, #24]
 800b0e4:	4619      	mov	r1, r3
 800b0e6:	2208      	movs	r2, #8
 800b0e8:	305c      	adds	r0, #92	; 0x5c
 800b0ea:	f000 f93d 	bl	800b368 <memset>
 800b0ee:	4b0d      	ldr	r3, [pc, #52]	; (800b124 <std+0x58>)
 800b0f0:	6263      	str	r3, [r4, #36]	; 0x24
 800b0f2:	4b0d      	ldr	r3, [pc, #52]	; (800b128 <std+0x5c>)
 800b0f4:	62a3      	str	r3, [r4, #40]	; 0x28
 800b0f6:	4b0d      	ldr	r3, [pc, #52]	; (800b12c <std+0x60>)
 800b0f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b0fa:	4b0d      	ldr	r3, [pc, #52]	; (800b130 <std+0x64>)
 800b0fc:	6323      	str	r3, [r4, #48]	; 0x30
 800b0fe:	4b0d      	ldr	r3, [pc, #52]	; (800b134 <std+0x68>)
 800b100:	6224      	str	r4, [r4, #32]
 800b102:	429c      	cmp	r4, r3
 800b104:	d006      	beq.n	800b114 <std+0x48>
 800b106:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b10a:	4294      	cmp	r4, r2
 800b10c:	d002      	beq.n	800b114 <std+0x48>
 800b10e:	33d0      	adds	r3, #208	; 0xd0
 800b110:	429c      	cmp	r4, r3
 800b112:	d105      	bne.n	800b120 <std+0x54>
 800b114:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b11c:	f000 b9a0 	b.w	800b460 <__retarget_lock_init_recursive>
 800b120:	bd10      	pop	{r4, pc}
 800b122:	bf00      	nop
 800b124:	0800b251 	.word	0x0800b251
 800b128:	0800b273 	.word	0x0800b273
 800b12c:	0800b2ab 	.word	0x0800b2ab
 800b130:	0800b2cf 	.word	0x0800b2cf
 800b134:	20001eac 	.word	0x20001eac

0800b138 <stdio_exit_handler>:
 800b138:	4a02      	ldr	r2, [pc, #8]	; (800b144 <stdio_exit_handler+0xc>)
 800b13a:	4903      	ldr	r1, [pc, #12]	; (800b148 <stdio_exit_handler+0x10>)
 800b13c:	4803      	ldr	r0, [pc, #12]	; (800b14c <stdio_exit_handler+0x14>)
 800b13e:	f000 b869 	b.w	800b214 <_fwalk_sglue>
 800b142:	bf00      	nop
 800b144:	2000057c 	.word	0x2000057c
 800b148:	0800ce31 	.word	0x0800ce31
 800b14c:	20000588 	.word	0x20000588

0800b150 <cleanup_stdio>:
 800b150:	6841      	ldr	r1, [r0, #4]
 800b152:	4b0c      	ldr	r3, [pc, #48]	; (800b184 <cleanup_stdio+0x34>)
 800b154:	4299      	cmp	r1, r3
 800b156:	b510      	push	{r4, lr}
 800b158:	4604      	mov	r4, r0
 800b15a:	d001      	beq.n	800b160 <cleanup_stdio+0x10>
 800b15c:	f001 fe68 	bl	800ce30 <_fflush_r>
 800b160:	68a1      	ldr	r1, [r4, #8]
 800b162:	4b09      	ldr	r3, [pc, #36]	; (800b188 <cleanup_stdio+0x38>)
 800b164:	4299      	cmp	r1, r3
 800b166:	d002      	beq.n	800b16e <cleanup_stdio+0x1e>
 800b168:	4620      	mov	r0, r4
 800b16a:	f001 fe61 	bl	800ce30 <_fflush_r>
 800b16e:	68e1      	ldr	r1, [r4, #12]
 800b170:	4b06      	ldr	r3, [pc, #24]	; (800b18c <cleanup_stdio+0x3c>)
 800b172:	4299      	cmp	r1, r3
 800b174:	d004      	beq.n	800b180 <cleanup_stdio+0x30>
 800b176:	4620      	mov	r0, r4
 800b178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b17c:	f001 be58 	b.w	800ce30 <_fflush_r>
 800b180:	bd10      	pop	{r4, pc}
 800b182:	bf00      	nop
 800b184:	20001eac 	.word	0x20001eac
 800b188:	20001f14 	.word	0x20001f14
 800b18c:	20001f7c 	.word	0x20001f7c

0800b190 <global_stdio_init.part.0>:
 800b190:	b510      	push	{r4, lr}
 800b192:	4b0b      	ldr	r3, [pc, #44]	; (800b1c0 <global_stdio_init.part.0+0x30>)
 800b194:	4c0b      	ldr	r4, [pc, #44]	; (800b1c4 <global_stdio_init.part.0+0x34>)
 800b196:	4a0c      	ldr	r2, [pc, #48]	; (800b1c8 <global_stdio_init.part.0+0x38>)
 800b198:	601a      	str	r2, [r3, #0]
 800b19a:	4620      	mov	r0, r4
 800b19c:	2200      	movs	r2, #0
 800b19e:	2104      	movs	r1, #4
 800b1a0:	f7ff ff94 	bl	800b0cc <std>
 800b1a4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b1a8:	2201      	movs	r2, #1
 800b1aa:	2109      	movs	r1, #9
 800b1ac:	f7ff ff8e 	bl	800b0cc <std>
 800b1b0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b1b4:	2202      	movs	r2, #2
 800b1b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1ba:	2112      	movs	r1, #18
 800b1bc:	f7ff bf86 	b.w	800b0cc <std>
 800b1c0:	20001fe4 	.word	0x20001fe4
 800b1c4:	20001eac 	.word	0x20001eac
 800b1c8:	0800b139 	.word	0x0800b139

0800b1cc <__sfp_lock_acquire>:
 800b1cc:	4801      	ldr	r0, [pc, #4]	; (800b1d4 <__sfp_lock_acquire+0x8>)
 800b1ce:	f000 b948 	b.w	800b462 <__retarget_lock_acquire_recursive>
 800b1d2:	bf00      	nop
 800b1d4:	20001fed 	.word	0x20001fed

0800b1d8 <__sfp_lock_release>:
 800b1d8:	4801      	ldr	r0, [pc, #4]	; (800b1e0 <__sfp_lock_release+0x8>)
 800b1da:	f000 b943 	b.w	800b464 <__retarget_lock_release_recursive>
 800b1de:	bf00      	nop
 800b1e0:	20001fed 	.word	0x20001fed

0800b1e4 <__sinit>:
 800b1e4:	b510      	push	{r4, lr}
 800b1e6:	4604      	mov	r4, r0
 800b1e8:	f7ff fff0 	bl	800b1cc <__sfp_lock_acquire>
 800b1ec:	6a23      	ldr	r3, [r4, #32]
 800b1ee:	b11b      	cbz	r3, 800b1f8 <__sinit+0x14>
 800b1f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1f4:	f7ff bff0 	b.w	800b1d8 <__sfp_lock_release>
 800b1f8:	4b04      	ldr	r3, [pc, #16]	; (800b20c <__sinit+0x28>)
 800b1fa:	6223      	str	r3, [r4, #32]
 800b1fc:	4b04      	ldr	r3, [pc, #16]	; (800b210 <__sinit+0x2c>)
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d1f5      	bne.n	800b1f0 <__sinit+0xc>
 800b204:	f7ff ffc4 	bl	800b190 <global_stdio_init.part.0>
 800b208:	e7f2      	b.n	800b1f0 <__sinit+0xc>
 800b20a:	bf00      	nop
 800b20c:	0800b151 	.word	0x0800b151
 800b210:	20001fe4 	.word	0x20001fe4

0800b214 <_fwalk_sglue>:
 800b214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b218:	4607      	mov	r7, r0
 800b21a:	4688      	mov	r8, r1
 800b21c:	4614      	mov	r4, r2
 800b21e:	2600      	movs	r6, #0
 800b220:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b224:	f1b9 0901 	subs.w	r9, r9, #1
 800b228:	d505      	bpl.n	800b236 <_fwalk_sglue+0x22>
 800b22a:	6824      	ldr	r4, [r4, #0]
 800b22c:	2c00      	cmp	r4, #0
 800b22e:	d1f7      	bne.n	800b220 <_fwalk_sglue+0xc>
 800b230:	4630      	mov	r0, r6
 800b232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b236:	89ab      	ldrh	r3, [r5, #12]
 800b238:	2b01      	cmp	r3, #1
 800b23a:	d907      	bls.n	800b24c <_fwalk_sglue+0x38>
 800b23c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b240:	3301      	adds	r3, #1
 800b242:	d003      	beq.n	800b24c <_fwalk_sglue+0x38>
 800b244:	4629      	mov	r1, r5
 800b246:	4638      	mov	r0, r7
 800b248:	47c0      	blx	r8
 800b24a:	4306      	orrs	r6, r0
 800b24c:	3568      	adds	r5, #104	; 0x68
 800b24e:	e7e9      	b.n	800b224 <_fwalk_sglue+0x10>

0800b250 <__sread>:
 800b250:	b510      	push	{r4, lr}
 800b252:	460c      	mov	r4, r1
 800b254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b258:	f000 f8b4 	bl	800b3c4 <_read_r>
 800b25c:	2800      	cmp	r0, #0
 800b25e:	bfab      	itete	ge
 800b260:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b262:	89a3      	ldrhlt	r3, [r4, #12]
 800b264:	181b      	addge	r3, r3, r0
 800b266:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b26a:	bfac      	ite	ge
 800b26c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b26e:	81a3      	strhlt	r3, [r4, #12]
 800b270:	bd10      	pop	{r4, pc}

0800b272 <__swrite>:
 800b272:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b276:	461f      	mov	r7, r3
 800b278:	898b      	ldrh	r3, [r1, #12]
 800b27a:	05db      	lsls	r3, r3, #23
 800b27c:	4605      	mov	r5, r0
 800b27e:	460c      	mov	r4, r1
 800b280:	4616      	mov	r6, r2
 800b282:	d505      	bpl.n	800b290 <__swrite+0x1e>
 800b284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b288:	2302      	movs	r3, #2
 800b28a:	2200      	movs	r2, #0
 800b28c:	f000 f888 	bl	800b3a0 <_lseek_r>
 800b290:	89a3      	ldrh	r3, [r4, #12]
 800b292:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b296:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b29a:	81a3      	strh	r3, [r4, #12]
 800b29c:	4632      	mov	r2, r6
 800b29e:	463b      	mov	r3, r7
 800b2a0:	4628      	mov	r0, r5
 800b2a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2a6:	f000 b89f 	b.w	800b3e8 <_write_r>

0800b2aa <__sseek>:
 800b2aa:	b510      	push	{r4, lr}
 800b2ac:	460c      	mov	r4, r1
 800b2ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2b2:	f000 f875 	bl	800b3a0 <_lseek_r>
 800b2b6:	1c43      	adds	r3, r0, #1
 800b2b8:	89a3      	ldrh	r3, [r4, #12]
 800b2ba:	bf15      	itete	ne
 800b2bc:	6560      	strne	r0, [r4, #84]	; 0x54
 800b2be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b2c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b2c6:	81a3      	strheq	r3, [r4, #12]
 800b2c8:	bf18      	it	ne
 800b2ca:	81a3      	strhne	r3, [r4, #12]
 800b2cc:	bd10      	pop	{r4, pc}

0800b2ce <__sclose>:
 800b2ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2d2:	f000 b855 	b.w	800b380 <_close_r>

0800b2d6 <_vsniprintf_r>:
 800b2d6:	b530      	push	{r4, r5, lr}
 800b2d8:	4614      	mov	r4, r2
 800b2da:	2c00      	cmp	r4, #0
 800b2dc:	b09b      	sub	sp, #108	; 0x6c
 800b2de:	4605      	mov	r5, r0
 800b2e0:	461a      	mov	r2, r3
 800b2e2:	da05      	bge.n	800b2f0 <_vsniprintf_r+0x1a>
 800b2e4:	238b      	movs	r3, #139	; 0x8b
 800b2e6:	6003      	str	r3, [r0, #0]
 800b2e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b2ec:	b01b      	add	sp, #108	; 0x6c
 800b2ee:	bd30      	pop	{r4, r5, pc}
 800b2f0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b2f4:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b2f8:	bf14      	ite	ne
 800b2fa:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b2fe:	4623      	moveq	r3, r4
 800b300:	9302      	str	r3, [sp, #8]
 800b302:	9305      	str	r3, [sp, #20]
 800b304:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b308:	9100      	str	r1, [sp, #0]
 800b30a:	9104      	str	r1, [sp, #16]
 800b30c:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b310:	4669      	mov	r1, sp
 800b312:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b314:	f001 fc08 	bl	800cb28 <_svfiprintf_r>
 800b318:	1c43      	adds	r3, r0, #1
 800b31a:	bfbc      	itt	lt
 800b31c:	238b      	movlt	r3, #139	; 0x8b
 800b31e:	602b      	strlt	r3, [r5, #0]
 800b320:	2c00      	cmp	r4, #0
 800b322:	d0e3      	beq.n	800b2ec <_vsniprintf_r+0x16>
 800b324:	9b00      	ldr	r3, [sp, #0]
 800b326:	2200      	movs	r2, #0
 800b328:	701a      	strb	r2, [r3, #0]
 800b32a:	e7df      	b.n	800b2ec <_vsniprintf_r+0x16>

0800b32c <vsniprintf>:
 800b32c:	b507      	push	{r0, r1, r2, lr}
 800b32e:	9300      	str	r3, [sp, #0]
 800b330:	4613      	mov	r3, r2
 800b332:	460a      	mov	r2, r1
 800b334:	4601      	mov	r1, r0
 800b336:	4803      	ldr	r0, [pc, #12]	; (800b344 <vsniprintf+0x18>)
 800b338:	6800      	ldr	r0, [r0, #0]
 800b33a:	f7ff ffcc 	bl	800b2d6 <_vsniprintf_r>
 800b33e:	b003      	add	sp, #12
 800b340:	f85d fb04 	ldr.w	pc, [sp], #4
 800b344:	200005d4 	.word	0x200005d4

0800b348 <memcmp>:
 800b348:	b510      	push	{r4, lr}
 800b34a:	3901      	subs	r1, #1
 800b34c:	4402      	add	r2, r0
 800b34e:	4290      	cmp	r0, r2
 800b350:	d101      	bne.n	800b356 <memcmp+0xe>
 800b352:	2000      	movs	r0, #0
 800b354:	e005      	b.n	800b362 <memcmp+0x1a>
 800b356:	7803      	ldrb	r3, [r0, #0]
 800b358:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b35c:	42a3      	cmp	r3, r4
 800b35e:	d001      	beq.n	800b364 <memcmp+0x1c>
 800b360:	1b18      	subs	r0, r3, r4
 800b362:	bd10      	pop	{r4, pc}
 800b364:	3001      	adds	r0, #1
 800b366:	e7f2      	b.n	800b34e <memcmp+0x6>

0800b368 <memset>:
 800b368:	4402      	add	r2, r0
 800b36a:	4603      	mov	r3, r0
 800b36c:	4293      	cmp	r3, r2
 800b36e:	d100      	bne.n	800b372 <memset+0xa>
 800b370:	4770      	bx	lr
 800b372:	f803 1b01 	strb.w	r1, [r3], #1
 800b376:	e7f9      	b.n	800b36c <memset+0x4>

0800b378 <_localeconv_r>:
 800b378:	4800      	ldr	r0, [pc, #0]	; (800b37c <_localeconv_r+0x4>)
 800b37a:	4770      	bx	lr
 800b37c:	200006c8 	.word	0x200006c8

0800b380 <_close_r>:
 800b380:	b538      	push	{r3, r4, r5, lr}
 800b382:	4d06      	ldr	r5, [pc, #24]	; (800b39c <_close_r+0x1c>)
 800b384:	2300      	movs	r3, #0
 800b386:	4604      	mov	r4, r0
 800b388:	4608      	mov	r0, r1
 800b38a:	602b      	str	r3, [r5, #0]
 800b38c:	f7f9 fee2 	bl	8005154 <_close>
 800b390:	1c43      	adds	r3, r0, #1
 800b392:	d102      	bne.n	800b39a <_close_r+0x1a>
 800b394:	682b      	ldr	r3, [r5, #0]
 800b396:	b103      	cbz	r3, 800b39a <_close_r+0x1a>
 800b398:	6023      	str	r3, [r4, #0]
 800b39a:	bd38      	pop	{r3, r4, r5, pc}
 800b39c:	20001fe8 	.word	0x20001fe8

0800b3a0 <_lseek_r>:
 800b3a0:	b538      	push	{r3, r4, r5, lr}
 800b3a2:	4d07      	ldr	r5, [pc, #28]	; (800b3c0 <_lseek_r+0x20>)
 800b3a4:	4604      	mov	r4, r0
 800b3a6:	4608      	mov	r0, r1
 800b3a8:	4611      	mov	r1, r2
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	602a      	str	r2, [r5, #0]
 800b3ae:	461a      	mov	r2, r3
 800b3b0:	f7f9 feda 	bl	8005168 <_lseek>
 800b3b4:	1c43      	adds	r3, r0, #1
 800b3b6:	d102      	bne.n	800b3be <_lseek_r+0x1e>
 800b3b8:	682b      	ldr	r3, [r5, #0]
 800b3ba:	b103      	cbz	r3, 800b3be <_lseek_r+0x1e>
 800b3bc:	6023      	str	r3, [r4, #0]
 800b3be:	bd38      	pop	{r3, r4, r5, pc}
 800b3c0:	20001fe8 	.word	0x20001fe8

0800b3c4 <_read_r>:
 800b3c4:	b538      	push	{r3, r4, r5, lr}
 800b3c6:	4d07      	ldr	r5, [pc, #28]	; (800b3e4 <_read_r+0x20>)
 800b3c8:	4604      	mov	r4, r0
 800b3ca:	4608      	mov	r0, r1
 800b3cc:	4611      	mov	r1, r2
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	602a      	str	r2, [r5, #0]
 800b3d2:	461a      	mov	r2, r3
 800b3d4:	f7f9 fea4 	bl	8005120 <_read>
 800b3d8:	1c43      	adds	r3, r0, #1
 800b3da:	d102      	bne.n	800b3e2 <_read_r+0x1e>
 800b3dc:	682b      	ldr	r3, [r5, #0]
 800b3de:	b103      	cbz	r3, 800b3e2 <_read_r+0x1e>
 800b3e0:	6023      	str	r3, [r4, #0]
 800b3e2:	bd38      	pop	{r3, r4, r5, pc}
 800b3e4:	20001fe8 	.word	0x20001fe8

0800b3e8 <_write_r>:
 800b3e8:	b538      	push	{r3, r4, r5, lr}
 800b3ea:	4d07      	ldr	r5, [pc, #28]	; (800b408 <_write_r+0x20>)
 800b3ec:	4604      	mov	r4, r0
 800b3ee:	4608      	mov	r0, r1
 800b3f0:	4611      	mov	r1, r2
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	602a      	str	r2, [r5, #0]
 800b3f6:	461a      	mov	r2, r3
 800b3f8:	f7f9 fe9f 	bl	800513a <_write>
 800b3fc:	1c43      	adds	r3, r0, #1
 800b3fe:	d102      	bne.n	800b406 <_write_r+0x1e>
 800b400:	682b      	ldr	r3, [r5, #0]
 800b402:	b103      	cbz	r3, 800b406 <_write_r+0x1e>
 800b404:	6023      	str	r3, [r4, #0]
 800b406:	bd38      	pop	{r3, r4, r5, pc}
 800b408:	20001fe8 	.word	0x20001fe8

0800b40c <__errno>:
 800b40c:	4b01      	ldr	r3, [pc, #4]	; (800b414 <__errno+0x8>)
 800b40e:	6818      	ldr	r0, [r3, #0]
 800b410:	4770      	bx	lr
 800b412:	bf00      	nop
 800b414:	200005d4 	.word	0x200005d4

0800b418 <__libc_init_array>:
 800b418:	b570      	push	{r4, r5, r6, lr}
 800b41a:	4d0d      	ldr	r5, [pc, #52]	; (800b450 <__libc_init_array+0x38>)
 800b41c:	4c0d      	ldr	r4, [pc, #52]	; (800b454 <__libc_init_array+0x3c>)
 800b41e:	1b64      	subs	r4, r4, r5
 800b420:	10a4      	asrs	r4, r4, #2
 800b422:	2600      	movs	r6, #0
 800b424:	42a6      	cmp	r6, r4
 800b426:	d109      	bne.n	800b43c <__libc_init_array+0x24>
 800b428:	4d0b      	ldr	r5, [pc, #44]	; (800b458 <__libc_init_array+0x40>)
 800b42a:	4c0c      	ldr	r4, [pc, #48]	; (800b45c <__libc_init_array+0x44>)
 800b42c:	f004 f8a2 	bl	800f574 <_init>
 800b430:	1b64      	subs	r4, r4, r5
 800b432:	10a4      	asrs	r4, r4, #2
 800b434:	2600      	movs	r6, #0
 800b436:	42a6      	cmp	r6, r4
 800b438:	d105      	bne.n	800b446 <__libc_init_array+0x2e>
 800b43a:	bd70      	pop	{r4, r5, r6, pc}
 800b43c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b440:	4798      	blx	r3
 800b442:	3601      	adds	r6, #1
 800b444:	e7ee      	b.n	800b424 <__libc_init_array+0xc>
 800b446:	f855 3b04 	ldr.w	r3, [r5], #4
 800b44a:	4798      	blx	r3
 800b44c:	3601      	adds	r6, #1
 800b44e:	e7f2      	b.n	800b436 <__libc_init_array+0x1e>
 800b450:	08010108 	.word	0x08010108
 800b454:	08010108 	.word	0x08010108
 800b458:	08010108 	.word	0x08010108
 800b45c:	0801010c 	.word	0x0801010c

0800b460 <__retarget_lock_init_recursive>:
 800b460:	4770      	bx	lr

0800b462 <__retarget_lock_acquire_recursive>:
 800b462:	4770      	bx	lr

0800b464 <__retarget_lock_release_recursive>:
 800b464:	4770      	bx	lr

0800b466 <memcpy>:
 800b466:	440a      	add	r2, r1
 800b468:	4291      	cmp	r1, r2
 800b46a:	f100 33ff 	add.w	r3, r0, #4294967295
 800b46e:	d100      	bne.n	800b472 <memcpy+0xc>
 800b470:	4770      	bx	lr
 800b472:	b510      	push	{r4, lr}
 800b474:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b478:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b47c:	4291      	cmp	r1, r2
 800b47e:	d1f9      	bne.n	800b474 <memcpy+0xe>
 800b480:	bd10      	pop	{r4, pc}

0800b482 <quorem>:
 800b482:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b486:	6903      	ldr	r3, [r0, #16]
 800b488:	690c      	ldr	r4, [r1, #16]
 800b48a:	42a3      	cmp	r3, r4
 800b48c:	4607      	mov	r7, r0
 800b48e:	db7e      	blt.n	800b58e <quorem+0x10c>
 800b490:	3c01      	subs	r4, #1
 800b492:	f101 0814 	add.w	r8, r1, #20
 800b496:	f100 0514 	add.w	r5, r0, #20
 800b49a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b49e:	9301      	str	r3, [sp, #4]
 800b4a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b4a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b4a8:	3301      	adds	r3, #1
 800b4aa:	429a      	cmp	r2, r3
 800b4ac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b4b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b4b4:	fbb2 f6f3 	udiv	r6, r2, r3
 800b4b8:	d331      	bcc.n	800b51e <quorem+0x9c>
 800b4ba:	f04f 0e00 	mov.w	lr, #0
 800b4be:	4640      	mov	r0, r8
 800b4c0:	46ac      	mov	ip, r5
 800b4c2:	46f2      	mov	sl, lr
 800b4c4:	f850 2b04 	ldr.w	r2, [r0], #4
 800b4c8:	b293      	uxth	r3, r2
 800b4ca:	fb06 e303 	mla	r3, r6, r3, lr
 800b4ce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b4d2:	0c1a      	lsrs	r2, r3, #16
 800b4d4:	b29b      	uxth	r3, r3
 800b4d6:	ebaa 0303 	sub.w	r3, sl, r3
 800b4da:	f8dc a000 	ldr.w	sl, [ip]
 800b4de:	fa13 f38a 	uxtah	r3, r3, sl
 800b4e2:	fb06 220e 	mla	r2, r6, lr, r2
 800b4e6:	9300      	str	r3, [sp, #0]
 800b4e8:	9b00      	ldr	r3, [sp, #0]
 800b4ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b4ee:	b292      	uxth	r2, r2
 800b4f0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b4f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b4f8:	f8bd 3000 	ldrh.w	r3, [sp]
 800b4fc:	4581      	cmp	r9, r0
 800b4fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b502:	f84c 3b04 	str.w	r3, [ip], #4
 800b506:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b50a:	d2db      	bcs.n	800b4c4 <quorem+0x42>
 800b50c:	f855 300b 	ldr.w	r3, [r5, fp]
 800b510:	b92b      	cbnz	r3, 800b51e <quorem+0x9c>
 800b512:	9b01      	ldr	r3, [sp, #4]
 800b514:	3b04      	subs	r3, #4
 800b516:	429d      	cmp	r5, r3
 800b518:	461a      	mov	r2, r3
 800b51a:	d32c      	bcc.n	800b576 <quorem+0xf4>
 800b51c:	613c      	str	r4, [r7, #16]
 800b51e:	4638      	mov	r0, r7
 800b520:	f001 f9a8 	bl	800c874 <__mcmp>
 800b524:	2800      	cmp	r0, #0
 800b526:	db22      	blt.n	800b56e <quorem+0xec>
 800b528:	3601      	adds	r6, #1
 800b52a:	4629      	mov	r1, r5
 800b52c:	2000      	movs	r0, #0
 800b52e:	f858 2b04 	ldr.w	r2, [r8], #4
 800b532:	f8d1 c000 	ldr.w	ip, [r1]
 800b536:	b293      	uxth	r3, r2
 800b538:	1ac3      	subs	r3, r0, r3
 800b53a:	0c12      	lsrs	r2, r2, #16
 800b53c:	fa13 f38c 	uxtah	r3, r3, ip
 800b540:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b544:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b548:	b29b      	uxth	r3, r3
 800b54a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b54e:	45c1      	cmp	r9, r8
 800b550:	f841 3b04 	str.w	r3, [r1], #4
 800b554:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b558:	d2e9      	bcs.n	800b52e <quorem+0xac>
 800b55a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b55e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b562:	b922      	cbnz	r2, 800b56e <quorem+0xec>
 800b564:	3b04      	subs	r3, #4
 800b566:	429d      	cmp	r5, r3
 800b568:	461a      	mov	r2, r3
 800b56a:	d30a      	bcc.n	800b582 <quorem+0x100>
 800b56c:	613c      	str	r4, [r7, #16]
 800b56e:	4630      	mov	r0, r6
 800b570:	b003      	add	sp, #12
 800b572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b576:	6812      	ldr	r2, [r2, #0]
 800b578:	3b04      	subs	r3, #4
 800b57a:	2a00      	cmp	r2, #0
 800b57c:	d1ce      	bne.n	800b51c <quorem+0x9a>
 800b57e:	3c01      	subs	r4, #1
 800b580:	e7c9      	b.n	800b516 <quorem+0x94>
 800b582:	6812      	ldr	r2, [r2, #0]
 800b584:	3b04      	subs	r3, #4
 800b586:	2a00      	cmp	r2, #0
 800b588:	d1f0      	bne.n	800b56c <quorem+0xea>
 800b58a:	3c01      	subs	r4, #1
 800b58c:	e7eb      	b.n	800b566 <quorem+0xe4>
 800b58e:	2000      	movs	r0, #0
 800b590:	e7ee      	b.n	800b570 <quorem+0xee>
 800b592:	0000      	movs	r0, r0
 800b594:	0000      	movs	r0, r0
	...

0800b598 <_dtoa_r>:
 800b598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b59c:	ed2d 8b04 	vpush	{d8-d9}
 800b5a0:	69c5      	ldr	r5, [r0, #28]
 800b5a2:	b093      	sub	sp, #76	; 0x4c
 800b5a4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b5a8:	ec57 6b10 	vmov	r6, r7, d0
 800b5ac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b5b0:	9107      	str	r1, [sp, #28]
 800b5b2:	4604      	mov	r4, r0
 800b5b4:	920a      	str	r2, [sp, #40]	; 0x28
 800b5b6:	930d      	str	r3, [sp, #52]	; 0x34
 800b5b8:	b975      	cbnz	r5, 800b5d8 <_dtoa_r+0x40>
 800b5ba:	2010      	movs	r0, #16
 800b5bc:	f000 fe2a 	bl	800c214 <malloc>
 800b5c0:	4602      	mov	r2, r0
 800b5c2:	61e0      	str	r0, [r4, #28]
 800b5c4:	b920      	cbnz	r0, 800b5d0 <_dtoa_r+0x38>
 800b5c6:	4bae      	ldr	r3, [pc, #696]	; (800b880 <_dtoa_r+0x2e8>)
 800b5c8:	21ef      	movs	r1, #239	; 0xef
 800b5ca:	48ae      	ldr	r0, [pc, #696]	; (800b884 <_dtoa_r+0x2ec>)
 800b5cc:	f001 fc82 	bl	800ced4 <__assert_func>
 800b5d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b5d4:	6005      	str	r5, [r0, #0]
 800b5d6:	60c5      	str	r5, [r0, #12]
 800b5d8:	69e3      	ldr	r3, [r4, #28]
 800b5da:	6819      	ldr	r1, [r3, #0]
 800b5dc:	b151      	cbz	r1, 800b5f4 <_dtoa_r+0x5c>
 800b5de:	685a      	ldr	r2, [r3, #4]
 800b5e0:	604a      	str	r2, [r1, #4]
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	4093      	lsls	r3, r2
 800b5e6:	608b      	str	r3, [r1, #8]
 800b5e8:	4620      	mov	r0, r4
 800b5ea:	f000 ff07 	bl	800c3fc <_Bfree>
 800b5ee:	69e3      	ldr	r3, [r4, #28]
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	601a      	str	r2, [r3, #0]
 800b5f4:	1e3b      	subs	r3, r7, #0
 800b5f6:	bfbb      	ittet	lt
 800b5f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b5fc:	9303      	strlt	r3, [sp, #12]
 800b5fe:	2300      	movge	r3, #0
 800b600:	2201      	movlt	r2, #1
 800b602:	bfac      	ite	ge
 800b604:	f8c8 3000 	strge.w	r3, [r8]
 800b608:	f8c8 2000 	strlt.w	r2, [r8]
 800b60c:	4b9e      	ldr	r3, [pc, #632]	; (800b888 <_dtoa_r+0x2f0>)
 800b60e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b612:	ea33 0308 	bics.w	r3, r3, r8
 800b616:	d11b      	bne.n	800b650 <_dtoa_r+0xb8>
 800b618:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b61a:	f242 730f 	movw	r3, #9999	; 0x270f
 800b61e:	6013      	str	r3, [r2, #0]
 800b620:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b624:	4333      	orrs	r3, r6
 800b626:	f000 8593 	beq.w	800c150 <_dtoa_r+0xbb8>
 800b62a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b62c:	b963      	cbnz	r3, 800b648 <_dtoa_r+0xb0>
 800b62e:	4b97      	ldr	r3, [pc, #604]	; (800b88c <_dtoa_r+0x2f4>)
 800b630:	e027      	b.n	800b682 <_dtoa_r+0xea>
 800b632:	4b97      	ldr	r3, [pc, #604]	; (800b890 <_dtoa_r+0x2f8>)
 800b634:	9300      	str	r3, [sp, #0]
 800b636:	3308      	adds	r3, #8
 800b638:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b63a:	6013      	str	r3, [r2, #0]
 800b63c:	9800      	ldr	r0, [sp, #0]
 800b63e:	b013      	add	sp, #76	; 0x4c
 800b640:	ecbd 8b04 	vpop	{d8-d9}
 800b644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b648:	4b90      	ldr	r3, [pc, #576]	; (800b88c <_dtoa_r+0x2f4>)
 800b64a:	9300      	str	r3, [sp, #0]
 800b64c:	3303      	adds	r3, #3
 800b64e:	e7f3      	b.n	800b638 <_dtoa_r+0xa0>
 800b650:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b654:	2200      	movs	r2, #0
 800b656:	ec51 0b17 	vmov	r0, r1, d7
 800b65a:	eeb0 8a47 	vmov.f32	s16, s14
 800b65e:	eef0 8a67 	vmov.f32	s17, s15
 800b662:	2300      	movs	r3, #0
 800b664:	f7f5 fa58 	bl	8000b18 <__aeabi_dcmpeq>
 800b668:	4681      	mov	r9, r0
 800b66a:	b160      	cbz	r0, 800b686 <_dtoa_r+0xee>
 800b66c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b66e:	2301      	movs	r3, #1
 800b670:	6013      	str	r3, [r2, #0]
 800b672:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b674:	2b00      	cmp	r3, #0
 800b676:	f000 8568 	beq.w	800c14a <_dtoa_r+0xbb2>
 800b67a:	4b86      	ldr	r3, [pc, #536]	; (800b894 <_dtoa_r+0x2fc>)
 800b67c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b67e:	6013      	str	r3, [r2, #0]
 800b680:	3b01      	subs	r3, #1
 800b682:	9300      	str	r3, [sp, #0]
 800b684:	e7da      	b.n	800b63c <_dtoa_r+0xa4>
 800b686:	aa10      	add	r2, sp, #64	; 0x40
 800b688:	a911      	add	r1, sp, #68	; 0x44
 800b68a:	4620      	mov	r0, r4
 800b68c:	eeb0 0a48 	vmov.f32	s0, s16
 800b690:	eef0 0a68 	vmov.f32	s1, s17
 800b694:	f001 f994 	bl	800c9c0 <__d2b>
 800b698:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b69c:	4682      	mov	sl, r0
 800b69e:	2d00      	cmp	r5, #0
 800b6a0:	d07f      	beq.n	800b7a2 <_dtoa_r+0x20a>
 800b6a2:	ee18 3a90 	vmov	r3, s17
 800b6a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b6aa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b6ae:	ec51 0b18 	vmov	r0, r1, d8
 800b6b2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b6b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b6ba:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b6be:	4619      	mov	r1, r3
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	4b75      	ldr	r3, [pc, #468]	; (800b898 <_dtoa_r+0x300>)
 800b6c4:	f7f4 fe08 	bl	80002d8 <__aeabi_dsub>
 800b6c8:	a367      	add	r3, pc, #412	; (adr r3, 800b868 <_dtoa_r+0x2d0>)
 800b6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ce:	f7f4 ffbb 	bl	8000648 <__aeabi_dmul>
 800b6d2:	a367      	add	r3, pc, #412	; (adr r3, 800b870 <_dtoa_r+0x2d8>)
 800b6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d8:	f7f4 fe00 	bl	80002dc <__adddf3>
 800b6dc:	4606      	mov	r6, r0
 800b6de:	4628      	mov	r0, r5
 800b6e0:	460f      	mov	r7, r1
 800b6e2:	f7f4 ff47 	bl	8000574 <__aeabi_i2d>
 800b6e6:	a364      	add	r3, pc, #400	; (adr r3, 800b878 <_dtoa_r+0x2e0>)
 800b6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ec:	f7f4 ffac 	bl	8000648 <__aeabi_dmul>
 800b6f0:	4602      	mov	r2, r0
 800b6f2:	460b      	mov	r3, r1
 800b6f4:	4630      	mov	r0, r6
 800b6f6:	4639      	mov	r1, r7
 800b6f8:	f7f4 fdf0 	bl	80002dc <__adddf3>
 800b6fc:	4606      	mov	r6, r0
 800b6fe:	460f      	mov	r7, r1
 800b700:	f7f5 fa52 	bl	8000ba8 <__aeabi_d2iz>
 800b704:	2200      	movs	r2, #0
 800b706:	4683      	mov	fp, r0
 800b708:	2300      	movs	r3, #0
 800b70a:	4630      	mov	r0, r6
 800b70c:	4639      	mov	r1, r7
 800b70e:	f7f5 fa0d 	bl	8000b2c <__aeabi_dcmplt>
 800b712:	b148      	cbz	r0, 800b728 <_dtoa_r+0x190>
 800b714:	4658      	mov	r0, fp
 800b716:	f7f4 ff2d 	bl	8000574 <__aeabi_i2d>
 800b71a:	4632      	mov	r2, r6
 800b71c:	463b      	mov	r3, r7
 800b71e:	f7f5 f9fb 	bl	8000b18 <__aeabi_dcmpeq>
 800b722:	b908      	cbnz	r0, 800b728 <_dtoa_r+0x190>
 800b724:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b728:	f1bb 0f16 	cmp.w	fp, #22
 800b72c:	d857      	bhi.n	800b7de <_dtoa_r+0x246>
 800b72e:	4b5b      	ldr	r3, [pc, #364]	; (800b89c <_dtoa_r+0x304>)
 800b730:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b738:	ec51 0b18 	vmov	r0, r1, d8
 800b73c:	f7f5 f9f6 	bl	8000b2c <__aeabi_dcmplt>
 800b740:	2800      	cmp	r0, #0
 800b742:	d04e      	beq.n	800b7e2 <_dtoa_r+0x24a>
 800b744:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b748:	2300      	movs	r3, #0
 800b74a:	930c      	str	r3, [sp, #48]	; 0x30
 800b74c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b74e:	1b5b      	subs	r3, r3, r5
 800b750:	1e5a      	subs	r2, r3, #1
 800b752:	bf45      	ittet	mi
 800b754:	f1c3 0301 	rsbmi	r3, r3, #1
 800b758:	9305      	strmi	r3, [sp, #20]
 800b75a:	2300      	movpl	r3, #0
 800b75c:	2300      	movmi	r3, #0
 800b75e:	9206      	str	r2, [sp, #24]
 800b760:	bf54      	ite	pl
 800b762:	9305      	strpl	r3, [sp, #20]
 800b764:	9306      	strmi	r3, [sp, #24]
 800b766:	f1bb 0f00 	cmp.w	fp, #0
 800b76a:	db3c      	blt.n	800b7e6 <_dtoa_r+0x24e>
 800b76c:	9b06      	ldr	r3, [sp, #24]
 800b76e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b772:	445b      	add	r3, fp
 800b774:	9306      	str	r3, [sp, #24]
 800b776:	2300      	movs	r3, #0
 800b778:	9308      	str	r3, [sp, #32]
 800b77a:	9b07      	ldr	r3, [sp, #28]
 800b77c:	2b09      	cmp	r3, #9
 800b77e:	d868      	bhi.n	800b852 <_dtoa_r+0x2ba>
 800b780:	2b05      	cmp	r3, #5
 800b782:	bfc4      	itt	gt
 800b784:	3b04      	subgt	r3, #4
 800b786:	9307      	strgt	r3, [sp, #28]
 800b788:	9b07      	ldr	r3, [sp, #28]
 800b78a:	f1a3 0302 	sub.w	r3, r3, #2
 800b78e:	bfcc      	ite	gt
 800b790:	2500      	movgt	r5, #0
 800b792:	2501      	movle	r5, #1
 800b794:	2b03      	cmp	r3, #3
 800b796:	f200 8085 	bhi.w	800b8a4 <_dtoa_r+0x30c>
 800b79a:	e8df f003 	tbb	[pc, r3]
 800b79e:	3b2e      	.short	0x3b2e
 800b7a0:	5839      	.short	0x5839
 800b7a2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b7a6:	441d      	add	r5, r3
 800b7a8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b7ac:	2b20      	cmp	r3, #32
 800b7ae:	bfc1      	itttt	gt
 800b7b0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b7b4:	fa08 f803 	lslgt.w	r8, r8, r3
 800b7b8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800b7bc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800b7c0:	bfd6      	itet	le
 800b7c2:	f1c3 0320 	rsble	r3, r3, #32
 800b7c6:	ea48 0003 	orrgt.w	r0, r8, r3
 800b7ca:	fa06 f003 	lslle.w	r0, r6, r3
 800b7ce:	f7f4 fec1 	bl	8000554 <__aeabi_ui2d>
 800b7d2:	2201      	movs	r2, #1
 800b7d4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b7d8:	3d01      	subs	r5, #1
 800b7da:	920e      	str	r2, [sp, #56]	; 0x38
 800b7dc:	e76f      	b.n	800b6be <_dtoa_r+0x126>
 800b7de:	2301      	movs	r3, #1
 800b7e0:	e7b3      	b.n	800b74a <_dtoa_r+0x1b2>
 800b7e2:	900c      	str	r0, [sp, #48]	; 0x30
 800b7e4:	e7b2      	b.n	800b74c <_dtoa_r+0x1b4>
 800b7e6:	9b05      	ldr	r3, [sp, #20]
 800b7e8:	eba3 030b 	sub.w	r3, r3, fp
 800b7ec:	9305      	str	r3, [sp, #20]
 800b7ee:	f1cb 0300 	rsb	r3, fp, #0
 800b7f2:	9308      	str	r3, [sp, #32]
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b7f8:	e7bf      	b.n	800b77a <_dtoa_r+0x1e2>
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	9309      	str	r3, [sp, #36]	; 0x24
 800b7fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b800:	2b00      	cmp	r3, #0
 800b802:	dc52      	bgt.n	800b8aa <_dtoa_r+0x312>
 800b804:	2301      	movs	r3, #1
 800b806:	9301      	str	r3, [sp, #4]
 800b808:	9304      	str	r3, [sp, #16]
 800b80a:	461a      	mov	r2, r3
 800b80c:	920a      	str	r2, [sp, #40]	; 0x28
 800b80e:	e00b      	b.n	800b828 <_dtoa_r+0x290>
 800b810:	2301      	movs	r3, #1
 800b812:	e7f3      	b.n	800b7fc <_dtoa_r+0x264>
 800b814:	2300      	movs	r3, #0
 800b816:	9309      	str	r3, [sp, #36]	; 0x24
 800b818:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b81a:	445b      	add	r3, fp
 800b81c:	9301      	str	r3, [sp, #4]
 800b81e:	3301      	adds	r3, #1
 800b820:	2b01      	cmp	r3, #1
 800b822:	9304      	str	r3, [sp, #16]
 800b824:	bfb8      	it	lt
 800b826:	2301      	movlt	r3, #1
 800b828:	69e0      	ldr	r0, [r4, #28]
 800b82a:	2100      	movs	r1, #0
 800b82c:	2204      	movs	r2, #4
 800b82e:	f102 0614 	add.w	r6, r2, #20
 800b832:	429e      	cmp	r6, r3
 800b834:	d93d      	bls.n	800b8b2 <_dtoa_r+0x31a>
 800b836:	6041      	str	r1, [r0, #4]
 800b838:	4620      	mov	r0, r4
 800b83a:	f000 fd9f 	bl	800c37c <_Balloc>
 800b83e:	9000      	str	r0, [sp, #0]
 800b840:	2800      	cmp	r0, #0
 800b842:	d139      	bne.n	800b8b8 <_dtoa_r+0x320>
 800b844:	4b16      	ldr	r3, [pc, #88]	; (800b8a0 <_dtoa_r+0x308>)
 800b846:	4602      	mov	r2, r0
 800b848:	f240 11af 	movw	r1, #431	; 0x1af
 800b84c:	e6bd      	b.n	800b5ca <_dtoa_r+0x32>
 800b84e:	2301      	movs	r3, #1
 800b850:	e7e1      	b.n	800b816 <_dtoa_r+0x27e>
 800b852:	2501      	movs	r5, #1
 800b854:	2300      	movs	r3, #0
 800b856:	9307      	str	r3, [sp, #28]
 800b858:	9509      	str	r5, [sp, #36]	; 0x24
 800b85a:	f04f 33ff 	mov.w	r3, #4294967295
 800b85e:	9301      	str	r3, [sp, #4]
 800b860:	9304      	str	r3, [sp, #16]
 800b862:	2200      	movs	r2, #0
 800b864:	2312      	movs	r3, #18
 800b866:	e7d1      	b.n	800b80c <_dtoa_r+0x274>
 800b868:	636f4361 	.word	0x636f4361
 800b86c:	3fd287a7 	.word	0x3fd287a7
 800b870:	8b60c8b3 	.word	0x8b60c8b3
 800b874:	3fc68a28 	.word	0x3fc68a28
 800b878:	509f79fb 	.word	0x509f79fb
 800b87c:	3fd34413 	.word	0x3fd34413
 800b880:	0800f815 	.word	0x0800f815
 800b884:	0800f82c 	.word	0x0800f82c
 800b888:	7ff00000 	.word	0x7ff00000
 800b88c:	0800f811 	.word	0x0800f811
 800b890:	0800f808 	.word	0x0800f808
 800b894:	0800f7e5 	.word	0x0800f7e5
 800b898:	3ff80000 	.word	0x3ff80000
 800b89c:	0800f918 	.word	0x0800f918
 800b8a0:	0800f884 	.word	0x0800f884
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	9309      	str	r3, [sp, #36]	; 0x24
 800b8a8:	e7d7      	b.n	800b85a <_dtoa_r+0x2c2>
 800b8aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8ac:	9301      	str	r3, [sp, #4]
 800b8ae:	9304      	str	r3, [sp, #16]
 800b8b0:	e7ba      	b.n	800b828 <_dtoa_r+0x290>
 800b8b2:	3101      	adds	r1, #1
 800b8b4:	0052      	lsls	r2, r2, #1
 800b8b6:	e7ba      	b.n	800b82e <_dtoa_r+0x296>
 800b8b8:	69e3      	ldr	r3, [r4, #28]
 800b8ba:	9a00      	ldr	r2, [sp, #0]
 800b8bc:	601a      	str	r2, [r3, #0]
 800b8be:	9b04      	ldr	r3, [sp, #16]
 800b8c0:	2b0e      	cmp	r3, #14
 800b8c2:	f200 80a8 	bhi.w	800ba16 <_dtoa_r+0x47e>
 800b8c6:	2d00      	cmp	r5, #0
 800b8c8:	f000 80a5 	beq.w	800ba16 <_dtoa_r+0x47e>
 800b8cc:	f1bb 0f00 	cmp.w	fp, #0
 800b8d0:	dd38      	ble.n	800b944 <_dtoa_r+0x3ac>
 800b8d2:	4bc0      	ldr	r3, [pc, #768]	; (800bbd4 <_dtoa_r+0x63c>)
 800b8d4:	f00b 020f 	and.w	r2, fp, #15
 800b8d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b8dc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b8e0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b8e4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800b8e8:	d019      	beq.n	800b91e <_dtoa_r+0x386>
 800b8ea:	4bbb      	ldr	r3, [pc, #748]	; (800bbd8 <_dtoa_r+0x640>)
 800b8ec:	ec51 0b18 	vmov	r0, r1, d8
 800b8f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b8f4:	f7f4 ffd2 	bl	800089c <__aeabi_ddiv>
 800b8f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8fc:	f008 080f 	and.w	r8, r8, #15
 800b900:	2503      	movs	r5, #3
 800b902:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800bbd8 <_dtoa_r+0x640>
 800b906:	f1b8 0f00 	cmp.w	r8, #0
 800b90a:	d10a      	bne.n	800b922 <_dtoa_r+0x38a>
 800b90c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b910:	4632      	mov	r2, r6
 800b912:	463b      	mov	r3, r7
 800b914:	f7f4 ffc2 	bl	800089c <__aeabi_ddiv>
 800b918:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b91c:	e02b      	b.n	800b976 <_dtoa_r+0x3de>
 800b91e:	2502      	movs	r5, #2
 800b920:	e7ef      	b.n	800b902 <_dtoa_r+0x36a>
 800b922:	f018 0f01 	tst.w	r8, #1
 800b926:	d008      	beq.n	800b93a <_dtoa_r+0x3a2>
 800b928:	4630      	mov	r0, r6
 800b92a:	4639      	mov	r1, r7
 800b92c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b930:	f7f4 fe8a 	bl	8000648 <__aeabi_dmul>
 800b934:	3501      	adds	r5, #1
 800b936:	4606      	mov	r6, r0
 800b938:	460f      	mov	r7, r1
 800b93a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b93e:	f109 0908 	add.w	r9, r9, #8
 800b942:	e7e0      	b.n	800b906 <_dtoa_r+0x36e>
 800b944:	f000 809f 	beq.w	800ba86 <_dtoa_r+0x4ee>
 800b948:	f1cb 0600 	rsb	r6, fp, #0
 800b94c:	4ba1      	ldr	r3, [pc, #644]	; (800bbd4 <_dtoa_r+0x63c>)
 800b94e:	4fa2      	ldr	r7, [pc, #648]	; (800bbd8 <_dtoa_r+0x640>)
 800b950:	f006 020f 	and.w	r2, r6, #15
 800b954:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b95c:	ec51 0b18 	vmov	r0, r1, d8
 800b960:	f7f4 fe72 	bl	8000648 <__aeabi_dmul>
 800b964:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b968:	1136      	asrs	r6, r6, #4
 800b96a:	2300      	movs	r3, #0
 800b96c:	2502      	movs	r5, #2
 800b96e:	2e00      	cmp	r6, #0
 800b970:	d17e      	bne.n	800ba70 <_dtoa_r+0x4d8>
 800b972:	2b00      	cmp	r3, #0
 800b974:	d1d0      	bne.n	800b918 <_dtoa_r+0x380>
 800b976:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b978:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	f000 8084 	beq.w	800ba8a <_dtoa_r+0x4f2>
 800b982:	4b96      	ldr	r3, [pc, #600]	; (800bbdc <_dtoa_r+0x644>)
 800b984:	2200      	movs	r2, #0
 800b986:	4640      	mov	r0, r8
 800b988:	4649      	mov	r1, r9
 800b98a:	f7f5 f8cf 	bl	8000b2c <__aeabi_dcmplt>
 800b98e:	2800      	cmp	r0, #0
 800b990:	d07b      	beq.n	800ba8a <_dtoa_r+0x4f2>
 800b992:	9b04      	ldr	r3, [sp, #16]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d078      	beq.n	800ba8a <_dtoa_r+0x4f2>
 800b998:	9b01      	ldr	r3, [sp, #4]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	dd39      	ble.n	800ba12 <_dtoa_r+0x47a>
 800b99e:	4b90      	ldr	r3, [pc, #576]	; (800bbe0 <_dtoa_r+0x648>)
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	4640      	mov	r0, r8
 800b9a4:	4649      	mov	r1, r9
 800b9a6:	f7f4 fe4f 	bl	8000648 <__aeabi_dmul>
 800b9aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b9ae:	9e01      	ldr	r6, [sp, #4]
 800b9b0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b9b4:	3501      	adds	r5, #1
 800b9b6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b9ba:	4628      	mov	r0, r5
 800b9bc:	f7f4 fdda 	bl	8000574 <__aeabi_i2d>
 800b9c0:	4642      	mov	r2, r8
 800b9c2:	464b      	mov	r3, r9
 800b9c4:	f7f4 fe40 	bl	8000648 <__aeabi_dmul>
 800b9c8:	4b86      	ldr	r3, [pc, #536]	; (800bbe4 <_dtoa_r+0x64c>)
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	f7f4 fc86 	bl	80002dc <__adddf3>
 800b9d0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b9d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b9d8:	9303      	str	r3, [sp, #12]
 800b9da:	2e00      	cmp	r6, #0
 800b9dc:	d158      	bne.n	800ba90 <_dtoa_r+0x4f8>
 800b9de:	4b82      	ldr	r3, [pc, #520]	; (800bbe8 <_dtoa_r+0x650>)
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	4640      	mov	r0, r8
 800b9e4:	4649      	mov	r1, r9
 800b9e6:	f7f4 fc77 	bl	80002d8 <__aeabi_dsub>
 800b9ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b9ee:	4680      	mov	r8, r0
 800b9f0:	4689      	mov	r9, r1
 800b9f2:	f7f5 f8b9 	bl	8000b68 <__aeabi_dcmpgt>
 800b9f6:	2800      	cmp	r0, #0
 800b9f8:	f040 8296 	bne.w	800bf28 <_dtoa_r+0x990>
 800b9fc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ba00:	4640      	mov	r0, r8
 800ba02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba06:	4649      	mov	r1, r9
 800ba08:	f7f5 f890 	bl	8000b2c <__aeabi_dcmplt>
 800ba0c:	2800      	cmp	r0, #0
 800ba0e:	f040 8289 	bne.w	800bf24 <_dtoa_r+0x98c>
 800ba12:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ba16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	f2c0 814e 	blt.w	800bcba <_dtoa_r+0x722>
 800ba1e:	f1bb 0f0e 	cmp.w	fp, #14
 800ba22:	f300 814a 	bgt.w	800bcba <_dtoa_r+0x722>
 800ba26:	4b6b      	ldr	r3, [pc, #428]	; (800bbd4 <_dtoa_r+0x63c>)
 800ba28:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ba2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ba30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	f280 80dc 	bge.w	800bbf0 <_dtoa_r+0x658>
 800ba38:	9b04      	ldr	r3, [sp, #16]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	f300 80d8 	bgt.w	800bbf0 <_dtoa_r+0x658>
 800ba40:	f040 826f 	bne.w	800bf22 <_dtoa_r+0x98a>
 800ba44:	4b68      	ldr	r3, [pc, #416]	; (800bbe8 <_dtoa_r+0x650>)
 800ba46:	2200      	movs	r2, #0
 800ba48:	4640      	mov	r0, r8
 800ba4a:	4649      	mov	r1, r9
 800ba4c:	f7f4 fdfc 	bl	8000648 <__aeabi_dmul>
 800ba50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ba54:	f7f5 f87e 	bl	8000b54 <__aeabi_dcmpge>
 800ba58:	9e04      	ldr	r6, [sp, #16]
 800ba5a:	4637      	mov	r7, r6
 800ba5c:	2800      	cmp	r0, #0
 800ba5e:	f040 8245 	bne.w	800beec <_dtoa_r+0x954>
 800ba62:	9d00      	ldr	r5, [sp, #0]
 800ba64:	2331      	movs	r3, #49	; 0x31
 800ba66:	f805 3b01 	strb.w	r3, [r5], #1
 800ba6a:	f10b 0b01 	add.w	fp, fp, #1
 800ba6e:	e241      	b.n	800bef4 <_dtoa_r+0x95c>
 800ba70:	07f2      	lsls	r2, r6, #31
 800ba72:	d505      	bpl.n	800ba80 <_dtoa_r+0x4e8>
 800ba74:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba78:	f7f4 fde6 	bl	8000648 <__aeabi_dmul>
 800ba7c:	3501      	adds	r5, #1
 800ba7e:	2301      	movs	r3, #1
 800ba80:	1076      	asrs	r6, r6, #1
 800ba82:	3708      	adds	r7, #8
 800ba84:	e773      	b.n	800b96e <_dtoa_r+0x3d6>
 800ba86:	2502      	movs	r5, #2
 800ba88:	e775      	b.n	800b976 <_dtoa_r+0x3de>
 800ba8a:	9e04      	ldr	r6, [sp, #16]
 800ba8c:	465f      	mov	r7, fp
 800ba8e:	e792      	b.n	800b9b6 <_dtoa_r+0x41e>
 800ba90:	9900      	ldr	r1, [sp, #0]
 800ba92:	4b50      	ldr	r3, [pc, #320]	; (800bbd4 <_dtoa_r+0x63c>)
 800ba94:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ba98:	4431      	add	r1, r6
 800ba9a:	9102      	str	r1, [sp, #8]
 800ba9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ba9e:	eeb0 9a47 	vmov.f32	s18, s14
 800baa2:	eef0 9a67 	vmov.f32	s19, s15
 800baa6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800baaa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800baae:	2900      	cmp	r1, #0
 800bab0:	d044      	beq.n	800bb3c <_dtoa_r+0x5a4>
 800bab2:	494e      	ldr	r1, [pc, #312]	; (800bbec <_dtoa_r+0x654>)
 800bab4:	2000      	movs	r0, #0
 800bab6:	f7f4 fef1 	bl	800089c <__aeabi_ddiv>
 800baba:	ec53 2b19 	vmov	r2, r3, d9
 800babe:	f7f4 fc0b 	bl	80002d8 <__aeabi_dsub>
 800bac2:	9d00      	ldr	r5, [sp, #0]
 800bac4:	ec41 0b19 	vmov	d9, r0, r1
 800bac8:	4649      	mov	r1, r9
 800baca:	4640      	mov	r0, r8
 800bacc:	f7f5 f86c 	bl	8000ba8 <__aeabi_d2iz>
 800bad0:	4606      	mov	r6, r0
 800bad2:	f7f4 fd4f 	bl	8000574 <__aeabi_i2d>
 800bad6:	4602      	mov	r2, r0
 800bad8:	460b      	mov	r3, r1
 800bada:	4640      	mov	r0, r8
 800badc:	4649      	mov	r1, r9
 800bade:	f7f4 fbfb 	bl	80002d8 <__aeabi_dsub>
 800bae2:	3630      	adds	r6, #48	; 0x30
 800bae4:	f805 6b01 	strb.w	r6, [r5], #1
 800bae8:	ec53 2b19 	vmov	r2, r3, d9
 800baec:	4680      	mov	r8, r0
 800baee:	4689      	mov	r9, r1
 800baf0:	f7f5 f81c 	bl	8000b2c <__aeabi_dcmplt>
 800baf4:	2800      	cmp	r0, #0
 800baf6:	d164      	bne.n	800bbc2 <_dtoa_r+0x62a>
 800baf8:	4642      	mov	r2, r8
 800bafa:	464b      	mov	r3, r9
 800bafc:	4937      	ldr	r1, [pc, #220]	; (800bbdc <_dtoa_r+0x644>)
 800bafe:	2000      	movs	r0, #0
 800bb00:	f7f4 fbea 	bl	80002d8 <__aeabi_dsub>
 800bb04:	ec53 2b19 	vmov	r2, r3, d9
 800bb08:	f7f5 f810 	bl	8000b2c <__aeabi_dcmplt>
 800bb0c:	2800      	cmp	r0, #0
 800bb0e:	f040 80b6 	bne.w	800bc7e <_dtoa_r+0x6e6>
 800bb12:	9b02      	ldr	r3, [sp, #8]
 800bb14:	429d      	cmp	r5, r3
 800bb16:	f43f af7c 	beq.w	800ba12 <_dtoa_r+0x47a>
 800bb1a:	4b31      	ldr	r3, [pc, #196]	; (800bbe0 <_dtoa_r+0x648>)
 800bb1c:	ec51 0b19 	vmov	r0, r1, d9
 800bb20:	2200      	movs	r2, #0
 800bb22:	f7f4 fd91 	bl	8000648 <__aeabi_dmul>
 800bb26:	4b2e      	ldr	r3, [pc, #184]	; (800bbe0 <_dtoa_r+0x648>)
 800bb28:	ec41 0b19 	vmov	d9, r0, r1
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	4640      	mov	r0, r8
 800bb30:	4649      	mov	r1, r9
 800bb32:	f7f4 fd89 	bl	8000648 <__aeabi_dmul>
 800bb36:	4680      	mov	r8, r0
 800bb38:	4689      	mov	r9, r1
 800bb3a:	e7c5      	b.n	800bac8 <_dtoa_r+0x530>
 800bb3c:	ec51 0b17 	vmov	r0, r1, d7
 800bb40:	f7f4 fd82 	bl	8000648 <__aeabi_dmul>
 800bb44:	9b02      	ldr	r3, [sp, #8]
 800bb46:	9d00      	ldr	r5, [sp, #0]
 800bb48:	930f      	str	r3, [sp, #60]	; 0x3c
 800bb4a:	ec41 0b19 	vmov	d9, r0, r1
 800bb4e:	4649      	mov	r1, r9
 800bb50:	4640      	mov	r0, r8
 800bb52:	f7f5 f829 	bl	8000ba8 <__aeabi_d2iz>
 800bb56:	4606      	mov	r6, r0
 800bb58:	f7f4 fd0c 	bl	8000574 <__aeabi_i2d>
 800bb5c:	3630      	adds	r6, #48	; 0x30
 800bb5e:	4602      	mov	r2, r0
 800bb60:	460b      	mov	r3, r1
 800bb62:	4640      	mov	r0, r8
 800bb64:	4649      	mov	r1, r9
 800bb66:	f7f4 fbb7 	bl	80002d8 <__aeabi_dsub>
 800bb6a:	f805 6b01 	strb.w	r6, [r5], #1
 800bb6e:	9b02      	ldr	r3, [sp, #8]
 800bb70:	429d      	cmp	r5, r3
 800bb72:	4680      	mov	r8, r0
 800bb74:	4689      	mov	r9, r1
 800bb76:	f04f 0200 	mov.w	r2, #0
 800bb7a:	d124      	bne.n	800bbc6 <_dtoa_r+0x62e>
 800bb7c:	4b1b      	ldr	r3, [pc, #108]	; (800bbec <_dtoa_r+0x654>)
 800bb7e:	ec51 0b19 	vmov	r0, r1, d9
 800bb82:	f7f4 fbab 	bl	80002dc <__adddf3>
 800bb86:	4602      	mov	r2, r0
 800bb88:	460b      	mov	r3, r1
 800bb8a:	4640      	mov	r0, r8
 800bb8c:	4649      	mov	r1, r9
 800bb8e:	f7f4 ffeb 	bl	8000b68 <__aeabi_dcmpgt>
 800bb92:	2800      	cmp	r0, #0
 800bb94:	d173      	bne.n	800bc7e <_dtoa_r+0x6e6>
 800bb96:	ec53 2b19 	vmov	r2, r3, d9
 800bb9a:	4914      	ldr	r1, [pc, #80]	; (800bbec <_dtoa_r+0x654>)
 800bb9c:	2000      	movs	r0, #0
 800bb9e:	f7f4 fb9b 	bl	80002d8 <__aeabi_dsub>
 800bba2:	4602      	mov	r2, r0
 800bba4:	460b      	mov	r3, r1
 800bba6:	4640      	mov	r0, r8
 800bba8:	4649      	mov	r1, r9
 800bbaa:	f7f4 ffbf 	bl	8000b2c <__aeabi_dcmplt>
 800bbae:	2800      	cmp	r0, #0
 800bbb0:	f43f af2f 	beq.w	800ba12 <_dtoa_r+0x47a>
 800bbb4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bbb6:	1e6b      	subs	r3, r5, #1
 800bbb8:	930f      	str	r3, [sp, #60]	; 0x3c
 800bbba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bbbe:	2b30      	cmp	r3, #48	; 0x30
 800bbc0:	d0f8      	beq.n	800bbb4 <_dtoa_r+0x61c>
 800bbc2:	46bb      	mov	fp, r7
 800bbc4:	e04a      	b.n	800bc5c <_dtoa_r+0x6c4>
 800bbc6:	4b06      	ldr	r3, [pc, #24]	; (800bbe0 <_dtoa_r+0x648>)
 800bbc8:	f7f4 fd3e 	bl	8000648 <__aeabi_dmul>
 800bbcc:	4680      	mov	r8, r0
 800bbce:	4689      	mov	r9, r1
 800bbd0:	e7bd      	b.n	800bb4e <_dtoa_r+0x5b6>
 800bbd2:	bf00      	nop
 800bbd4:	0800f918 	.word	0x0800f918
 800bbd8:	0800f8f0 	.word	0x0800f8f0
 800bbdc:	3ff00000 	.word	0x3ff00000
 800bbe0:	40240000 	.word	0x40240000
 800bbe4:	401c0000 	.word	0x401c0000
 800bbe8:	40140000 	.word	0x40140000
 800bbec:	3fe00000 	.word	0x3fe00000
 800bbf0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bbf4:	9d00      	ldr	r5, [sp, #0]
 800bbf6:	4642      	mov	r2, r8
 800bbf8:	464b      	mov	r3, r9
 800bbfa:	4630      	mov	r0, r6
 800bbfc:	4639      	mov	r1, r7
 800bbfe:	f7f4 fe4d 	bl	800089c <__aeabi_ddiv>
 800bc02:	f7f4 ffd1 	bl	8000ba8 <__aeabi_d2iz>
 800bc06:	9001      	str	r0, [sp, #4]
 800bc08:	f7f4 fcb4 	bl	8000574 <__aeabi_i2d>
 800bc0c:	4642      	mov	r2, r8
 800bc0e:	464b      	mov	r3, r9
 800bc10:	f7f4 fd1a 	bl	8000648 <__aeabi_dmul>
 800bc14:	4602      	mov	r2, r0
 800bc16:	460b      	mov	r3, r1
 800bc18:	4630      	mov	r0, r6
 800bc1a:	4639      	mov	r1, r7
 800bc1c:	f7f4 fb5c 	bl	80002d8 <__aeabi_dsub>
 800bc20:	9e01      	ldr	r6, [sp, #4]
 800bc22:	9f04      	ldr	r7, [sp, #16]
 800bc24:	3630      	adds	r6, #48	; 0x30
 800bc26:	f805 6b01 	strb.w	r6, [r5], #1
 800bc2a:	9e00      	ldr	r6, [sp, #0]
 800bc2c:	1bae      	subs	r6, r5, r6
 800bc2e:	42b7      	cmp	r7, r6
 800bc30:	4602      	mov	r2, r0
 800bc32:	460b      	mov	r3, r1
 800bc34:	d134      	bne.n	800bca0 <_dtoa_r+0x708>
 800bc36:	f7f4 fb51 	bl	80002dc <__adddf3>
 800bc3a:	4642      	mov	r2, r8
 800bc3c:	464b      	mov	r3, r9
 800bc3e:	4606      	mov	r6, r0
 800bc40:	460f      	mov	r7, r1
 800bc42:	f7f4 ff91 	bl	8000b68 <__aeabi_dcmpgt>
 800bc46:	b9c8      	cbnz	r0, 800bc7c <_dtoa_r+0x6e4>
 800bc48:	4642      	mov	r2, r8
 800bc4a:	464b      	mov	r3, r9
 800bc4c:	4630      	mov	r0, r6
 800bc4e:	4639      	mov	r1, r7
 800bc50:	f7f4 ff62 	bl	8000b18 <__aeabi_dcmpeq>
 800bc54:	b110      	cbz	r0, 800bc5c <_dtoa_r+0x6c4>
 800bc56:	9b01      	ldr	r3, [sp, #4]
 800bc58:	07db      	lsls	r3, r3, #31
 800bc5a:	d40f      	bmi.n	800bc7c <_dtoa_r+0x6e4>
 800bc5c:	4651      	mov	r1, sl
 800bc5e:	4620      	mov	r0, r4
 800bc60:	f000 fbcc 	bl	800c3fc <_Bfree>
 800bc64:	2300      	movs	r3, #0
 800bc66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bc68:	702b      	strb	r3, [r5, #0]
 800bc6a:	f10b 0301 	add.w	r3, fp, #1
 800bc6e:	6013      	str	r3, [r2, #0]
 800bc70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	f43f ace2 	beq.w	800b63c <_dtoa_r+0xa4>
 800bc78:	601d      	str	r5, [r3, #0]
 800bc7a:	e4df      	b.n	800b63c <_dtoa_r+0xa4>
 800bc7c:	465f      	mov	r7, fp
 800bc7e:	462b      	mov	r3, r5
 800bc80:	461d      	mov	r5, r3
 800bc82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc86:	2a39      	cmp	r2, #57	; 0x39
 800bc88:	d106      	bne.n	800bc98 <_dtoa_r+0x700>
 800bc8a:	9a00      	ldr	r2, [sp, #0]
 800bc8c:	429a      	cmp	r2, r3
 800bc8e:	d1f7      	bne.n	800bc80 <_dtoa_r+0x6e8>
 800bc90:	9900      	ldr	r1, [sp, #0]
 800bc92:	2230      	movs	r2, #48	; 0x30
 800bc94:	3701      	adds	r7, #1
 800bc96:	700a      	strb	r2, [r1, #0]
 800bc98:	781a      	ldrb	r2, [r3, #0]
 800bc9a:	3201      	adds	r2, #1
 800bc9c:	701a      	strb	r2, [r3, #0]
 800bc9e:	e790      	b.n	800bbc2 <_dtoa_r+0x62a>
 800bca0:	4ba3      	ldr	r3, [pc, #652]	; (800bf30 <_dtoa_r+0x998>)
 800bca2:	2200      	movs	r2, #0
 800bca4:	f7f4 fcd0 	bl	8000648 <__aeabi_dmul>
 800bca8:	2200      	movs	r2, #0
 800bcaa:	2300      	movs	r3, #0
 800bcac:	4606      	mov	r6, r0
 800bcae:	460f      	mov	r7, r1
 800bcb0:	f7f4 ff32 	bl	8000b18 <__aeabi_dcmpeq>
 800bcb4:	2800      	cmp	r0, #0
 800bcb6:	d09e      	beq.n	800bbf6 <_dtoa_r+0x65e>
 800bcb8:	e7d0      	b.n	800bc5c <_dtoa_r+0x6c4>
 800bcba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bcbc:	2a00      	cmp	r2, #0
 800bcbe:	f000 80ca 	beq.w	800be56 <_dtoa_r+0x8be>
 800bcc2:	9a07      	ldr	r2, [sp, #28]
 800bcc4:	2a01      	cmp	r2, #1
 800bcc6:	f300 80ad 	bgt.w	800be24 <_dtoa_r+0x88c>
 800bcca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bccc:	2a00      	cmp	r2, #0
 800bcce:	f000 80a5 	beq.w	800be1c <_dtoa_r+0x884>
 800bcd2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bcd6:	9e08      	ldr	r6, [sp, #32]
 800bcd8:	9d05      	ldr	r5, [sp, #20]
 800bcda:	9a05      	ldr	r2, [sp, #20]
 800bcdc:	441a      	add	r2, r3
 800bcde:	9205      	str	r2, [sp, #20]
 800bce0:	9a06      	ldr	r2, [sp, #24]
 800bce2:	2101      	movs	r1, #1
 800bce4:	441a      	add	r2, r3
 800bce6:	4620      	mov	r0, r4
 800bce8:	9206      	str	r2, [sp, #24]
 800bcea:	f000 fc3d 	bl	800c568 <__i2b>
 800bcee:	4607      	mov	r7, r0
 800bcf0:	b165      	cbz	r5, 800bd0c <_dtoa_r+0x774>
 800bcf2:	9b06      	ldr	r3, [sp, #24]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	dd09      	ble.n	800bd0c <_dtoa_r+0x774>
 800bcf8:	42ab      	cmp	r3, r5
 800bcfa:	9a05      	ldr	r2, [sp, #20]
 800bcfc:	bfa8      	it	ge
 800bcfe:	462b      	movge	r3, r5
 800bd00:	1ad2      	subs	r2, r2, r3
 800bd02:	9205      	str	r2, [sp, #20]
 800bd04:	9a06      	ldr	r2, [sp, #24]
 800bd06:	1aed      	subs	r5, r5, r3
 800bd08:	1ad3      	subs	r3, r2, r3
 800bd0a:	9306      	str	r3, [sp, #24]
 800bd0c:	9b08      	ldr	r3, [sp, #32]
 800bd0e:	b1f3      	cbz	r3, 800bd4e <_dtoa_r+0x7b6>
 800bd10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	f000 80a3 	beq.w	800be5e <_dtoa_r+0x8c6>
 800bd18:	2e00      	cmp	r6, #0
 800bd1a:	dd10      	ble.n	800bd3e <_dtoa_r+0x7a6>
 800bd1c:	4639      	mov	r1, r7
 800bd1e:	4632      	mov	r2, r6
 800bd20:	4620      	mov	r0, r4
 800bd22:	f000 fce1 	bl	800c6e8 <__pow5mult>
 800bd26:	4652      	mov	r2, sl
 800bd28:	4601      	mov	r1, r0
 800bd2a:	4607      	mov	r7, r0
 800bd2c:	4620      	mov	r0, r4
 800bd2e:	f000 fc31 	bl	800c594 <__multiply>
 800bd32:	4651      	mov	r1, sl
 800bd34:	4680      	mov	r8, r0
 800bd36:	4620      	mov	r0, r4
 800bd38:	f000 fb60 	bl	800c3fc <_Bfree>
 800bd3c:	46c2      	mov	sl, r8
 800bd3e:	9b08      	ldr	r3, [sp, #32]
 800bd40:	1b9a      	subs	r2, r3, r6
 800bd42:	d004      	beq.n	800bd4e <_dtoa_r+0x7b6>
 800bd44:	4651      	mov	r1, sl
 800bd46:	4620      	mov	r0, r4
 800bd48:	f000 fcce 	bl	800c6e8 <__pow5mult>
 800bd4c:	4682      	mov	sl, r0
 800bd4e:	2101      	movs	r1, #1
 800bd50:	4620      	mov	r0, r4
 800bd52:	f000 fc09 	bl	800c568 <__i2b>
 800bd56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	4606      	mov	r6, r0
 800bd5c:	f340 8081 	ble.w	800be62 <_dtoa_r+0x8ca>
 800bd60:	461a      	mov	r2, r3
 800bd62:	4601      	mov	r1, r0
 800bd64:	4620      	mov	r0, r4
 800bd66:	f000 fcbf 	bl	800c6e8 <__pow5mult>
 800bd6a:	9b07      	ldr	r3, [sp, #28]
 800bd6c:	2b01      	cmp	r3, #1
 800bd6e:	4606      	mov	r6, r0
 800bd70:	dd7a      	ble.n	800be68 <_dtoa_r+0x8d0>
 800bd72:	f04f 0800 	mov.w	r8, #0
 800bd76:	6933      	ldr	r3, [r6, #16]
 800bd78:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bd7c:	6918      	ldr	r0, [r3, #16]
 800bd7e:	f000 fba5 	bl	800c4cc <__hi0bits>
 800bd82:	f1c0 0020 	rsb	r0, r0, #32
 800bd86:	9b06      	ldr	r3, [sp, #24]
 800bd88:	4418      	add	r0, r3
 800bd8a:	f010 001f 	ands.w	r0, r0, #31
 800bd8e:	f000 8094 	beq.w	800beba <_dtoa_r+0x922>
 800bd92:	f1c0 0320 	rsb	r3, r0, #32
 800bd96:	2b04      	cmp	r3, #4
 800bd98:	f340 8085 	ble.w	800bea6 <_dtoa_r+0x90e>
 800bd9c:	9b05      	ldr	r3, [sp, #20]
 800bd9e:	f1c0 001c 	rsb	r0, r0, #28
 800bda2:	4403      	add	r3, r0
 800bda4:	9305      	str	r3, [sp, #20]
 800bda6:	9b06      	ldr	r3, [sp, #24]
 800bda8:	4403      	add	r3, r0
 800bdaa:	4405      	add	r5, r0
 800bdac:	9306      	str	r3, [sp, #24]
 800bdae:	9b05      	ldr	r3, [sp, #20]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	dd05      	ble.n	800bdc0 <_dtoa_r+0x828>
 800bdb4:	4651      	mov	r1, sl
 800bdb6:	461a      	mov	r2, r3
 800bdb8:	4620      	mov	r0, r4
 800bdba:	f000 fcef 	bl	800c79c <__lshift>
 800bdbe:	4682      	mov	sl, r0
 800bdc0:	9b06      	ldr	r3, [sp, #24]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	dd05      	ble.n	800bdd2 <_dtoa_r+0x83a>
 800bdc6:	4631      	mov	r1, r6
 800bdc8:	461a      	mov	r2, r3
 800bdca:	4620      	mov	r0, r4
 800bdcc:	f000 fce6 	bl	800c79c <__lshift>
 800bdd0:	4606      	mov	r6, r0
 800bdd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d072      	beq.n	800bebe <_dtoa_r+0x926>
 800bdd8:	4631      	mov	r1, r6
 800bdda:	4650      	mov	r0, sl
 800bddc:	f000 fd4a 	bl	800c874 <__mcmp>
 800bde0:	2800      	cmp	r0, #0
 800bde2:	da6c      	bge.n	800bebe <_dtoa_r+0x926>
 800bde4:	2300      	movs	r3, #0
 800bde6:	4651      	mov	r1, sl
 800bde8:	220a      	movs	r2, #10
 800bdea:	4620      	mov	r0, r4
 800bdec:	f000 fb28 	bl	800c440 <__multadd>
 800bdf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdf2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bdf6:	4682      	mov	sl, r0
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	f000 81b0 	beq.w	800c15e <_dtoa_r+0xbc6>
 800bdfe:	2300      	movs	r3, #0
 800be00:	4639      	mov	r1, r7
 800be02:	220a      	movs	r2, #10
 800be04:	4620      	mov	r0, r4
 800be06:	f000 fb1b 	bl	800c440 <__multadd>
 800be0a:	9b01      	ldr	r3, [sp, #4]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	4607      	mov	r7, r0
 800be10:	f300 8096 	bgt.w	800bf40 <_dtoa_r+0x9a8>
 800be14:	9b07      	ldr	r3, [sp, #28]
 800be16:	2b02      	cmp	r3, #2
 800be18:	dc59      	bgt.n	800bece <_dtoa_r+0x936>
 800be1a:	e091      	b.n	800bf40 <_dtoa_r+0x9a8>
 800be1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800be1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800be22:	e758      	b.n	800bcd6 <_dtoa_r+0x73e>
 800be24:	9b04      	ldr	r3, [sp, #16]
 800be26:	1e5e      	subs	r6, r3, #1
 800be28:	9b08      	ldr	r3, [sp, #32]
 800be2a:	42b3      	cmp	r3, r6
 800be2c:	bfbf      	itttt	lt
 800be2e:	9b08      	ldrlt	r3, [sp, #32]
 800be30:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800be32:	9608      	strlt	r6, [sp, #32]
 800be34:	1af3      	sublt	r3, r6, r3
 800be36:	bfb4      	ite	lt
 800be38:	18d2      	addlt	r2, r2, r3
 800be3a:	1b9e      	subge	r6, r3, r6
 800be3c:	9b04      	ldr	r3, [sp, #16]
 800be3e:	bfbc      	itt	lt
 800be40:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800be42:	2600      	movlt	r6, #0
 800be44:	2b00      	cmp	r3, #0
 800be46:	bfb7      	itett	lt
 800be48:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800be4c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800be50:	1a9d      	sublt	r5, r3, r2
 800be52:	2300      	movlt	r3, #0
 800be54:	e741      	b.n	800bcda <_dtoa_r+0x742>
 800be56:	9e08      	ldr	r6, [sp, #32]
 800be58:	9d05      	ldr	r5, [sp, #20]
 800be5a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800be5c:	e748      	b.n	800bcf0 <_dtoa_r+0x758>
 800be5e:	9a08      	ldr	r2, [sp, #32]
 800be60:	e770      	b.n	800bd44 <_dtoa_r+0x7ac>
 800be62:	9b07      	ldr	r3, [sp, #28]
 800be64:	2b01      	cmp	r3, #1
 800be66:	dc19      	bgt.n	800be9c <_dtoa_r+0x904>
 800be68:	9b02      	ldr	r3, [sp, #8]
 800be6a:	b9bb      	cbnz	r3, 800be9c <_dtoa_r+0x904>
 800be6c:	9b03      	ldr	r3, [sp, #12]
 800be6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be72:	b99b      	cbnz	r3, 800be9c <_dtoa_r+0x904>
 800be74:	9b03      	ldr	r3, [sp, #12]
 800be76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800be7a:	0d1b      	lsrs	r3, r3, #20
 800be7c:	051b      	lsls	r3, r3, #20
 800be7e:	b183      	cbz	r3, 800bea2 <_dtoa_r+0x90a>
 800be80:	9b05      	ldr	r3, [sp, #20]
 800be82:	3301      	adds	r3, #1
 800be84:	9305      	str	r3, [sp, #20]
 800be86:	9b06      	ldr	r3, [sp, #24]
 800be88:	3301      	adds	r3, #1
 800be8a:	9306      	str	r3, [sp, #24]
 800be8c:	f04f 0801 	mov.w	r8, #1
 800be90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be92:	2b00      	cmp	r3, #0
 800be94:	f47f af6f 	bne.w	800bd76 <_dtoa_r+0x7de>
 800be98:	2001      	movs	r0, #1
 800be9a:	e774      	b.n	800bd86 <_dtoa_r+0x7ee>
 800be9c:	f04f 0800 	mov.w	r8, #0
 800bea0:	e7f6      	b.n	800be90 <_dtoa_r+0x8f8>
 800bea2:	4698      	mov	r8, r3
 800bea4:	e7f4      	b.n	800be90 <_dtoa_r+0x8f8>
 800bea6:	d082      	beq.n	800bdae <_dtoa_r+0x816>
 800bea8:	9a05      	ldr	r2, [sp, #20]
 800beaa:	331c      	adds	r3, #28
 800beac:	441a      	add	r2, r3
 800beae:	9205      	str	r2, [sp, #20]
 800beb0:	9a06      	ldr	r2, [sp, #24]
 800beb2:	441a      	add	r2, r3
 800beb4:	441d      	add	r5, r3
 800beb6:	9206      	str	r2, [sp, #24]
 800beb8:	e779      	b.n	800bdae <_dtoa_r+0x816>
 800beba:	4603      	mov	r3, r0
 800bebc:	e7f4      	b.n	800bea8 <_dtoa_r+0x910>
 800bebe:	9b04      	ldr	r3, [sp, #16]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	dc37      	bgt.n	800bf34 <_dtoa_r+0x99c>
 800bec4:	9b07      	ldr	r3, [sp, #28]
 800bec6:	2b02      	cmp	r3, #2
 800bec8:	dd34      	ble.n	800bf34 <_dtoa_r+0x99c>
 800beca:	9b04      	ldr	r3, [sp, #16]
 800becc:	9301      	str	r3, [sp, #4]
 800bece:	9b01      	ldr	r3, [sp, #4]
 800bed0:	b963      	cbnz	r3, 800beec <_dtoa_r+0x954>
 800bed2:	4631      	mov	r1, r6
 800bed4:	2205      	movs	r2, #5
 800bed6:	4620      	mov	r0, r4
 800bed8:	f000 fab2 	bl	800c440 <__multadd>
 800bedc:	4601      	mov	r1, r0
 800bede:	4606      	mov	r6, r0
 800bee0:	4650      	mov	r0, sl
 800bee2:	f000 fcc7 	bl	800c874 <__mcmp>
 800bee6:	2800      	cmp	r0, #0
 800bee8:	f73f adbb 	bgt.w	800ba62 <_dtoa_r+0x4ca>
 800beec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800beee:	9d00      	ldr	r5, [sp, #0]
 800bef0:	ea6f 0b03 	mvn.w	fp, r3
 800bef4:	f04f 0800 	mov.w	r8, #0
 800bef8:	4631      	mov	r1, r6
 800befa:	4620      	mov	r0, r4
 800befc:	f000 fa7e 	bl	800c3fc <_Bfree>
 800bf00:	2f00      	cmp	r7, #0
 800bf02:	f43f aeab 	beq.w	800bc5c <_dtoa_r+0x6c4>
 800bf06:	f1b8 0f00 	cmp.w	r8, #0
 800bf0a:	d005      	beq.n	800bf18 <_dtoa_r+0x980>
 800bf0c:	45b8      	cmp	r8, r7
 800bf0e:	d003      	beq.n	800bf18 <_dtoa_r+0x980>
 800bf10:	4641      	mov	r1, r8
 800bf12:	4620      	mov	r0, r4
 800bf14:	f000 fa72 	bl	800c3fc <_Bfree>
 800bf18:	4639      	mov	r1, r7
 800bf1a:	4620      	mov	r0, r4
 800bf1c:	f000 fa6e 	bl	800c3fc <_Bfree>
 800bf20:	e69c      	b.n	800bc5c <_dtoa_r+0x6c4>
 800bf22:	2600      	movs	r6, #0
 800bf24:	4637      	mov	r7, r6
 800bf26:	e7e1      	b.n	800beec <_dtoa_r+0x954>
 800bf28:	46bb      	mov	fp, r7
 800bf2a:	4637      	mov	r7, r6
 800bf2c:	e599      	b.n	800ba62 <_dtoa_r+0x4ca>
 800bf2e:	bf00      	nop
 800bf30:	40240000 	.word	0x40240000
 800bf34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	f000 80c8 	beq.w	800c0cc <_dtoa_r+0xb34>
 800bf3c:	9b04      	ldr	r3, [sp, #16]
 800bf3e:	9301      	str	r3, [sp, #4]
 800bf40:	2d00      	cmp	r5, #0
 800bf42:	dd05      	ble.n	800bf50 <_dtoa_r+0x9b8>
 800bf44:	4639      	mov	r1, r7
 800bf46:	462a      	mov	r2, r5
 800bf48:	4620      	mov	r0, r4
 800bf4a:	f000 fc27 	bl	800c79c <__lshift>
 800bf4e:	4607      	mov	r7, r0
 800bf50:	f1b8 0f00 	cmp.w	r8, #0
 800bf54:	d05b      	beq.n	800c00e <_dtoa_r+0xa76>
 800bf56:	6879      	ldr	r1, [r7, #4]
 800bf58:	4620      	mov	r0, r4
 800bf5a:	f000 fa0f 	bl	800c37c <_Balloc>
 800bf5e:	4605      	mov	r5, r0
 800bf60:	b928      	cbnz	r0, 800bf6e <_dtoa_r+0x9d6>
 800bf62:	4b83      	ldr	r3, [pc, #524]	; (800c170 <_dtoa_r+0xbd8>)
 800bf64:	4602      	mov	r2, r0
 800bf66:	f240 21ef 	movw	r1, #751	; 0x2ef
 800bf6a:	f7ff bb2e 	b.w	800b5ca <_dtoa_r+0x32>
 800bf6e:	693a      	ldr	r2, [r7, #16]
 800bf70:	3202      	adds	r2, #2
 800bf72:	0092      	lsls	r2, r2, #2
 800bf74:	f107 010c 	add.w	r1, r7, #12
 800bf78:	300c      	adds	r0, #12
 800bf7a:	f7ff fa74 	bl	800b466 <memcpy>
 800bf7e:	2201      	movs	r2, #1
 800bf80:	4629      	mov	r1, r5
 800bf82:	4620      	mov	r0, r4
 800bf84:	f000 fc0a 	bl	800c79c <__lshift>
 800bf88:	9b00      	ldr	r3, [sp, #0]
 800bf8a:	3301      	adds	r3, #1
 800bf8c:	9304      	str	r3, [sp, #16]
 800bf8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf92:	4413      	add	r3, r2
 800bf94:	9308      	str	r3, [sp, #32]
 800bf96:	9b02      	ldr	r3, [sp, #8]
 800bf98:	f003 0301 	and.w	r3, r3, #1
 800bf9c:	46b8      	mov	r8, r7
 800bf9e:	9306      	str	r3, [sp, #24]
 800bfa0:	4607      	mov	r7, r0
 800bfa2:	9b04      	ldr	r3, [sp, #16]
 800bfa4:	4631      	mov	r1, r6
 800bfa6:	3b01      	subs	r3, #1
 800bfa8:	4650      	mov	r0, sl
 800bfaa:	9301      	str	r3, [sp, #4]
 800bfac:	f7ff fa69 	bl	800b482 <quorem>
 800bfb0:	4641      	mov	r1, r8
 800bfb2:	9002      	str	r0, [sp, #8]
 800bfb4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800bfb8:	4650      	mov	r0, sl
 800bfba:	f000 fc5b 	bl	800c874 <__mcmp>
 800bfbe:	463a      	mov	r2, r7
 800bfc0:	9005      	str	r0, [sp, #20]
 800bfc2:	4631      	mov	r1, r6
 800bfc4:	4620      	mov	r0, r4
 800bfc6:	f000 fc71 	bl	800c8ac <__mdiff>
 800bfca:	68c2      	ldr	r2, [r0, #12]
 800bfcc:	4605      	mov	r5, r0
 800bfce:	bb02      	cbnz	r2, 800c012 <_dtoa_r+0xa7a>
 800bfd0:	4601      	mov	r1, r0
 800bfd2:	4650      	mov	r0, sl
 800bfd4:	f000 fc4e 	bl	800c874 <__mcmp>
 800bfd8:	4602      	mov	r2, r0
 800bfda:	4629      	mov	r1, r5
 800bfdc:	4620      	mov	r0, r4
 800bfde:	9209      	str	r2, [sp, #36]	; 0x24
 800bfe0:	f000 fa0c 	bl	800c3fc <_Bfree>
 800bfe4:	9b07      	ldr	r3, [sp, #28]
 800bfe6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bfe8:	9d04      	ldr	r5, [sp, #16]
 800bfea:	ea43 0102 	orr.w	r1, r3, r2
 800bfee:	9b06      	ldr	r3, [sp, #24]
 800bff0:	4319      	orrs	r1, r3
 800bff2:	d110      	bne.n	800c016 <_dtoa_r+0xa7e>
 800bff4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bff8:	d029      	beq.n	800c04e <_dtoa_r+0xab6>
 800bffa:	9b05      	ldr	r3, [sp, #20]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	dd02      	ble.n	800c006 <_dtoa_r+0xa6e>
 800c000:	9b02      	ldr	r3, [sp, #8]
 800c002:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c006:	9b01      	ldr	r3, [sp, #4]
 800c008:	f883 9000 	strb.w	r9, [r3]
 800c00c:	e774      	b.n	800bef8 <_dtoa_r+0x960>
 800c00e:	4638      	mov	r0, r7
 800c010:	e7ba      	b.n	800bf88 <_dtoa_r+0x9f0>
 800c012:	2201      	movs	r2, #1
 800c014:	e7e1      	b.n	800bfda <_dtoa_r+0xa42>
 800c016:	9b05      	ldr	r3, [sp, #20]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	db04      	blt.n	800c026 <_dtoa_r+0xa8e>
 800c01c:	9907      	ldr	r1, [sp, #28]
 800c01e:	430b      	orrs	r3, r1
 800c020:	9906      	ldr	r1, [sp, #24]
 800c022:	430b      	orrs	r3, r1
 800c024:	d120      	bne.n	800c068 <_dtoa_r+0xad0>
 800c026:	2a00      	cmp	r2, #0
 800c028:	dded      	ble.n	800c006 <_dtoa_r+0xa6e>
 800c02a:	4651      	mov	r1, sl
 800c02c:	2201      	movs	r2, #1
 800c02e:	4620      	mov	r0, r4
 800c030:	f000 fbb4 	bl	800c79c <__lshift>
 800c034:	4631      	mov	r1, r6
 800c036:	4682      	mov	sl, r0
 800c038:	f000 fc1c 	bl	800c874 <__mcmp>
 800c03c:	2800      	cmp	r0, #0
 800c03e:	dc03      	bgt.n	800c048 <_dtoa_r+0xab0>
 800c040:	d1e1      	bne.n	800c006 <_dtoa_r+0xa6e>
 800c042:	f019 0f01 	tst.w	r9, #1
 800c046:	d0de      	beq.n	800c006 <_dtoa_r+0xa6e>
 800c048:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c04c:	d1d8      	bne.n	800c000 <_dtoa_r+0xa68>
 800c04e:	9a01      	ldr	r2, [sp, #4]
 800c050:	2339      	movs	r3, #57	; 0x39
 800c052:	7013      	strb	r3, [r2, #0]
 800c054:	462b      	mov	r3, r5
 800c056:	461d      	mov	r5, r3
 800c058:	3b01      	subs	r3, #1
 800c05a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c05e:	2a39      	cmp	r2, #57	; 0x39
 800c060:	d06c      	beq.n	800c13c <_dtoa_r+0xba4>
 800c062:	3201      	adds	r2, #1
 800c064:	701a      	strb	r2, [r3, #0]
 800c066:	e747      	b.n	800bef8 <_dtoa_r+0x960>
 800c068:	2a00      	cmp	r2, #0
 800c06a:	dd07      	ble.n	800c07c <_dtoa_r+0xae4>
 800c06c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c070:	d0ed      	beq.n	800c04e <_dtoa_r+0xab6>
 800c072:	9a01      	ldr	r2, [sp, #4]
 800c074:	f109 0301 	add.w	r3, r9, #1
 800c078:	7013      	strb	r3, [r2, #0]
 800c07a:	e73d      	b.n	800bef8 <_dtoa_r+0x960>
 800c07c:	9b04      	ldr	r3, [sp, #16]
 800c07e:	9a08      	ldr	r2, [sp, #32]
 800c080:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c084:	4293      	cmp	r3, r2
 800c086:	d043      	beq.n	800c110 <_dtoa_r+0xb78>
 800c088:	4651      	mov	r1, sl
 800c08a:	2300      	movs	r3, #0
 800c08c:	220a      	movs	r2, #10
 800c08e:	4620      	mov	r0, r4
 800c090:	f000 f9d6 	bl	800c440 <__multadd>
 800c094:	45b8      	cmp	r8, r7
 800c096:	4682      	mov	sl, r0
 800c098:	f04f 0300 	mov.w	r3, #0
 800c09c:	f04f 020a 	mov.w	r2, #10
 800c0a0:	4641      	mov	r1, r8
 800c0a2:	4620      	mov	r0, r4
 800c0a4:	d107      	bne.n	800c0b6 <_dtoa_r+0xb1e>
 800c0a6:	f000 f9cb 	bl	800c440 <__multadd>
 800c0aa:	4680      	mov	r8, r0
 800c0ac:	4607      	mov	r7, r0
 800c0ae:	9b04      	ldr	r3, [sp, #16]
 800c0b0:	3301      	adds	r3, #1
 800c0b2:	9304      	str	r3, [sp, #16]
 800c0b4:	e775      	b.n	800bfa2 <_dtoa_r+0xa0a>
 800c0b6:	f000 f9c3 	bl	800c440 <__multadd>
 800c0ba:	4639      	mov	r1, r7
 800c0bc:	4680      	mov	r8, r0
 800c0be:	2300      	movs	r3, #0
 800c0c0:	220a      	movs	r2, #10
 800c0c2:	4620      	mov	r0, r4
 800c0c4:	f000 f9bc 	bl	800c440 <__multadd>
 800c0c8:	4607      	mov	r7, r0
 800c0ca:	e7f0      	b.n	800c0ae <_dtoa_r+0xb16>
 800c0cc:	9b04      	ldr	r3, [sp, #16]
 800c0ce:	9301      	str	r3, [sp, #4]
 800c0d0:	9d00      	ldr	r5, [sp, #0]
 800c0d2:	4631      	mov	r1, r6
 800c0d4:	4650      	mov	r0, sl
 800c0d6:	f7ff f9d4 	bl	800b482 <quorem>
 800c0da:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c0de:	9b00      	ldr	r3, [sp, #0]
 800c0e0:	f805 9b01 	strb.w	r9, [r5], #1
 800c0e4:	1aea      	subs	r2, r5, r3
 800c0e6:	9b01      	ldr	r3, [sp, #4]
 800c0e8:	4293      	cmp	r3, r2
 800c0ea:	dd07      	ble.n	800c0fc <_dtoa_r+0xb64>
 800c0ec:	4651      	mov	r1, sl
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	220a      	movs	r2, #10
 800c0f2:	4620      	mov	r0, r4
 800c0f4:	f000 f9a4 	bl	800c440 <__multadd>
 800c0f8:	4682      	mov	sl, r0
 800c0fa:	e7ea      	b.n	800c0d2 <_dtoa_r+0xb3a>
 800c0fc:	9b01      	ldr	r3, [sp, #4]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	bfc8      	it	gt
 800c102:	461d      	movgt	r5, r3
 800c104:	9b00      	ldr	r3, [sp, #0]
 800c106:	bfd8      	it	le
 800c108:	2501      	movle	r5, #1
 800c10a:	441d      	add	r5, r3
 800c10c:	f04f 0800 	mov.w	r8, #0
 800c110:	4651      	mov	r1, sl
 800c112:	2201      	movs	r2, #1
 800c114:	4620      	mov	r0, r4
 800c116:	f000 fb41 	bl	800c79c <__lshift>
 800c11a:	4631      	mov	r1, r6
 800c11c:	4682      	mov	sl, r0
 800c11e:	f000 fba9 	bl	800c874 <__mcmp>
 800c122:	2800      	cmp	r0, #0
 800c124:	dc96      	bgt.n	800c054 <_dtoa_r+0xabc>
 800c126:	d102      	bne.n	800c12e <_dtoa_r+0xb96>
 800c128:	f019 0f01 	tst.w	r9, #1
 800c12c:	d192      	bne.n	800c054 <_dtoa_r+0xabc>
 800c12e:	462b      	mov	r3, r5
 800c130:	461d      	mov	r5, r3
 800c132:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c136:	2a30      	cmp	r2, #48	; 0x30
 800c138:	d0fa      	beq.n	800c130 <_dtoa_r+0xb98>
 800c13a:	e6dd      	b.n	800bef8 <_dtoa_r+0x960>
 800c13c:	9a00      	ldr	r2, [sp, #0]
 800c13e:	429a      	cmp	r2, r3
 800c140:	d189      	bne.n	800c056 <_dtoa_r+0xabe>
 800c142:	f10b 0b01 	add.w	fp, fp, #1
 800c146:	2331      	movs	r3, #49	; 0x31
 800c148:	e796      	b.n	800c078 <_dtoa_r+0xae0>
 800c14a:	4b0a      	ldr	r3, [pc, #40]	; (800c174 <_dtoa_r+0xbdc>)
 800c14c:	f7ff ba99 	b.w	800b682 <_dtoa_r+0xea>
 800c150:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c152:	2b00      	cmp	r3, #0
 800c154:	f47f aa6d 	bne.w	800b632 <_dtoa_r+0x9a>
 800c158:	4b07      	ldr	r3, [pc, #28]	; (800c178 <_dtoa_r+0xbe0>)
 800c15a:	f7ff ba92 	b.w	800b682 <_dtoa_r+0xea>
 800c15e:	9b01      	ldr	r3, [sp, #4]
 800c160:	2b00      	cmp	r3, #0
 800c162:	dcb5      	bgt.n	800c0d0 <_dtoa_r+0xb38>
 800c164:	9b07      	ldr	r3, [sp, #28]
 800c166:	2b02      	cmp	r3, #2
 800c168:	f73f aeb1 	bgt.w	800bece <_dtoa_r+0x936>
 800c16c:	e7b0      	b.n	800c0d0 <_dtoa_r+0xb38>
 800c16e:	bf00      	nop
 800c170:	0800f884 	.word	0x0800f884
 800c174:	0800f7e4 	.word	0x0800f7e4
 800c178:	0800f808 	.word	0x0800f808

0800c17c <_free_r>:
 800c17c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c17e:	2900      	cmp	r1, #0
 800c180:	d044      	beq.n	800c20c <_free_r+0x90>
 800c182:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c186:	9001      	str	r0, [sp, #4]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	f1a1 0404 	sub.w	r4, r1, #4
 800c18e:	bfb8      	it	lt
 800c190:	18e4      	addlt	r4, r4, r3
 800c192:	f000 f8e7 	bl	800c364 <__malloc_lock>
 800c196:	4a1e      	ldr	r2, [pc, #120]	; (800c210 <_free_r+0x94>)
 800c198:	9801      	ldr	r0, [sp, #4]
 800c19a:	6813      	ldr	r3, [r2, #0]
 800c19c:	b933      	cbnz	r3, 800c1ac <_free_r+0x30>
 800c19e:	6063      	str	r3, [r4, #4]
 800c1a0:	6014      	str	r4, [r2, #0]
 800c1a2:	b003      	add	sp, #12
 800c1a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c1a8:	f000 b8e2 	b.w	800c370 <__malloc_unlock>
 800c1ac:	42a3      	cmp	r3, r4
 800c1ae:	d908      	bls.n	800c1c2 <_free_r+0x46>
 800c1b0:	6825      	ldr	r5, [r4, #0]
 800c1b2:	1961      	adds	r1, r4, r5
 800c1b4:	428b      	cmp	r3, r1
 800c1b6:	bf01      	itttt	eq
 800c1b8:	6819      	ldreq	r1, [r3, #0]
 800c1ba:	685b      	ldreq	r3, [r3, #4]
 800c1bc:	1949      	addeq	r1, r1, r5
 800c1be:	6021      	streq	r1, [r4, #0]
 800c1c0:	e7ed      	b.n	800c19e <_free_r+0x22>
 800c1c2:	461a      	mov	r2, r3
 800c1c4:	685b      	ldr	r3, [r3, #4]
 800c1c6:	b10b      	cbz	r3, 800c1cc <_free_r+0x50>
 800c1c8:	42a3      	cmp	r3, r4
 800c1ca:	d9fa      	bls.n	800c1c2 <_free_r+0x46>
 800c1cc:	6811      	ldr	r1, [r2, #0]
 800c1ce:	1855      	adds	r5, r2, r1
 800c1d0:	42a5      	cmp	r5, r4
 800c1d2:	d10b      	bne.n	800c1ec <_free_r+0x70>
 800c1d4:	6824      	ldr	r4, [r4, #0]
 800c1d6:	4421      	add	r1, r4
 800c1d8:	1854      	adds	r4, r2, r1
 800c1da:	42a3      	cmp	r3, r4
 800c1dc:	6011      	str	r1, [r2, #0]
 800c1de:	d1e0      	bne.n	800c1a2 <_free_r+0x26>
 800c1e0:	681c      	ldr	r4, [r3, #0]
 800c1e2:	685b      	ldr	r3, [r3, #4]
 800c1e4:	6053      	str	r3, [r2, #4]
 800c1e6:	440c      	add	r4, r1
 800c1e8:	6014      	str	r4, [r2, #0]
 800c1ea:	e7da      	b.n	800c1a2 <_free_r+0x26>
 800c1ec:	d902      	bls.n	800c1f4 <_free_r+0x78>
 800c1ee:	230c      	movs	r3, #12
 800c1f0:	6003      	str	r3, [r0, #0]
 800c1f2:	e7d6      	b.n	800c1a2 <_free_r+0x26>
 800c1f4:	6825      	ldr	r5, [r4, #0]
 800c1f6:	1961      	adds	r1, r4, r5
 800c1f8:	428b      	cmp	r3, r1
 800c1fa:	bf04      	itt	eq
 800c1fc:	6819      	ldreq	r1, [r3, #0]
 800c1fe:	685b      	ldreq	r3, [r3, #4]
 800c200:	6063      	str	r3, [r4, #4]
 800c202:	bf04      	itt	eq
 800c204:	1949      	addeq	r1, r1, r5
 800c206:	6021      	streq	r1, [r4, #0]
 800c208:	6054      	str	r4, [r2, #4]
 800c20a:	e7ca      	b.n	800c1a2 <_free_r+0x26>
 800c20c:	b003      	add	sp, #12
 800c20e:	bd30      	pop	{r4, r5, pc}
 800c210:	20001ff0 	.word	0x20001ff0

0800c214 <malloc>:
 800c214:	4b02      	ldr	r3, [pc, #8]	; (800c220 <malloc+0xc>)
 800c216:	4601      	mov	r1, r0
 800c218:	6818      	ldr	r0, [r3, #0]
 800c21a:	f000 b823 	b.w	800c264 <_malloc_r>
 800c21e:	bf00      	nop
 800c220:	200005d4 	.word	0x200005d4

0800c224 <sbrk_aligned>:
 800c224:	b570      	push	{r4, r5, r6, lr}
 800c226:	4e0e      	ldr	r6, [pc, #56]	; (800c260 <sbrk_aligned+0x3c>)
 800c228:	460c      	mov	r4, r1
 800c22a:	6831      	ldr	r1, [r6, #0]
 800c22c:	4605      	mov	r5, r0
 800c22e:	b911      	cbnz	r1, 800c236 <sbrk_aligned+0x12>
 800c230:	f000 fe40 	bl	800ceb4 <_sbrk_r>
 800c234:	6030      	str	r0, [r6, #0]
 800c236:	4621      	mov	r1, r4
 800c238:	4628      	mov	r0, r5
 800c23a:	f000 fe3b 	bl	800ceb4 <_sbrk_r>
 800c23e:	1c43      	adds	r3, r0, #1
 800c240:	d00a      	beq.n	800c258 <sbrk_aligned+0x34>
 800c242:	1cc4      	adds	r4, r0, #3
 800c244:	f024 0403 	bic.w	r4, r4, #3
 800c248:	42a0      	cmp	r0, r4
 800c24a:	d007      	beq.n	800c25c <sbrk_aligned+0x38>
 800c24c:	1a21      	subs	r1, r4, r0
 800c24e:	4628      	mov	r0, r5
 800c250:	f000 fe30 	bl	800ceb4 <_sbrk_r>
 800c254:	3001      	adds	r0, #1
 800c256:	d101      	bne.n	800c25c <sbrk_aligned+0x38>
 800c258:	f04f 34ff 	mov.w	r4, #4294967295
 800c25c:	4620      	mov	r0, r4
 800c25e:	bd70      	pop	{r4, r5, r6, pc}
 800c260:	20001ff4 	.word	0x20001ff4

0800c264 <_malloc_r>:
 800c264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c268:	1ccd      	adds	r5, r1, #3
 800c26a:	f025 0503 	bic.w	r5, r5, #3
 800c26e:	3508      	adds	r5, #8
 800c270:	2d0c      	cmp	r5, #12
 800c272:	bf38      	it	cc
 800c274:	250c      	movcc	r5, #12
 800c276:	2d00      	cmp	r5, #0
 800c278:	4607      	mov	r7, r0
 800c27a:	db01      	blt.n	800c280 <_malloc_r+0x1c>
 800c27c:	42a9      	cmp	r1, r5
 800c27e:	d905      	bls.n	800c28c <_malloc_r+0x28>
 800c280:	230c      	movs	r3, #12
 800c282:	603b      	str	r3, [r7, #0]
 800c284:	2600      	movs	r6, #0
 800c286:	4630      	mov	r0, r6
 800c288:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c28c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c360 <_malloc_r+0xfc>
 800c290:	f000 f868 	bl	800c364 <__malloc_lock>
 800c294:	f8d8 3000 	ldr.w	r3, [r8]
 800c298:	461c      	mov	r4, r3
 800c29a:	bb5c      	cbnz	r4, 800c2f4 <_malloc_r+0x90>
 800c29c:	4629      	mov	r1, r5
 800c29e:	4638      	mov	r0, r7
 800c2a0:	f7ff ffc0 	bl	800c224 <sbrk_aligned>
 800c2a4:	1c43      	adds	r3, r0, #1
 800c2a6:	4604      	mov	r4, r0
 800c2a8:	d155      	bne.n	800c356 <_malloc_r+0xf2>
 800c2aa:	f8d8 4000 	ldr.w	r4, [r8]
 800c2ae:	4626      	mov	r6, r4
 800c2b0:	2e00      	cmp	r6, #0
 800c2b2:	d145      	bne.n	800c340 <_malloc_r+0xdc>
 800c2b4:	2c00      	cmp	r4, #0
 800c2b6:	d048      	beq.n	800c34a <_malloc_r+0xe6>
 800c2b8:	6823      	ldr	r3, [r4, #0]
 800c2ba:	4631      	mov	r1, r6
 800c2bc:	4638      	mov	r0, r7
 800c2be:	eb04 0903 	add.w	r9, r4, r3
 800c2c2:	f000 fdf7 	bl	800ceb4 <_sbrk_r>
 800c2c6:	4581      	cmp	r9, r0
 800c2c8:	d13f      	bne.n	800c34a <_malloc_r+0xe6>
 800c2ca:	6821      	ldr	r1, [r4, #0]
 800c2cc:	1a6d      	subs	r5, r5, r1
 800c2ce:	4629      	mov	r1, r5
 800c2d0:	4638      	mov	r0, r7
 800c2d2:	f7ff ffa7 	bl	800c224 <sbrk_aligned>
 800c2d6:	3001      	adds	r0, #1
 800c2d8:	d037      	beq.n	800c34a <_malloc_r+0xe6>
 800c2da:	6823      	ldr	r3, [r4, #0]
 800c2dc:	442b      	add	r3, r5
 800c2de:	6023      	str	r3, [r4, #0]
 800c2e0:	f8d8 3000 	ldr.w	r3, [r8]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d038      	beq.n	800c35a <_malloc_r+0xf6>
 800c2e8:	685a      	ldr	r2, [r3, #4]
 800c2ea:	42a2      	cmp	r2, r4
 800c2ec:	d12b      	bne.n	800c346 <_malloc_r+0xe2>
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	605a      	str	r2, [r3, #4]
 800c2f2:	e00f      	b.n	800c314 <_malloc_r+0xb0>
 800c2f4:	6822      	ldr	r2, [r4, #0]
 800c2f6:	1b52      	subs	r2, r2, r5
 800c2f8:	d41f      	bmi.n	800c33a <_malloc_r+0xd6>
 800c2fa:	2a0b      	cmp	r2, #11
 800c2fc:	d917      	bls.n	800c32e <_malloc_r+0xca>
 800c2fe:	1961      	adds	r1, r4, r5
 800c300:	42a3      	cmp	r3, r4
 800c302:	6025      	str	r5, [r4, #0]
 800c304:	bf18      	it	ne
 800c306:	6059      	strne	r1, [r3, #4]
 800c308:	6863      	ldr	r3, [r4, #4]
 800c30a:	bf08      	it	eq
 800c30c:	f8c8 1000 	streq.w	r1, [r8]
 800c310:	5162      	str	r2, [r4, r5]
 800c312:	604b      	str	r3, [r1, #4]
 800c314:	4638      	mov	r0, r7
 800c316:	f104 060b 	add.w	r6, r4, #11
 800c31a:	f000 f829 	bl	800c370 <__malloc_unlock>
 800c31e:	f026 0607 	bic.w	r6, r6, #7
 800c322:	1d23      	adds	r3, r4, #4
 800c324:	1af2      	subs	r2, r6, r3
 800c326:	d0ae      	beq.n	800c286 <_malloc_r+0x22>
 800c328:	1b9b      	subs	r3, r3, r6
 800c32a:	50a3      	str	r3, [r4, r2]
 800c32c:	e7ab      	b.n	800c286 <_malloc_r+0x22>
 800c32e:	42a3      	cmp	r3, r4
 800c330:	6862      	ldr	r2, [r4, #4]
 800c332:	d1dd      	bne.n	800c2f0 <_malloc_r+0x8c>
 800c334:	f8c8 2000 	str.w	r2, [r8]
 800c338:	e7ec      	b.n	800c314 <_malloc_r+0xb0>
 800c33a:	4623      	mov	r3, r4
 800c33c:	6864      	ldr	r4, [r4, #4]
 800c33e:	e7ac      	b.n	800c29a <_malloc_r+0x36>
 800c340:	4634      	mov	r4, r6
 800c342:	6876      	ldr	r6, [r6, #4]
 800c344:	e7b4      	b.n	800c2b0 <_malloc_r+0x4c>
 800c346:	4613      	mov	r3, r2
 800c348:	e7cc      	b.n	800c2e4 <_malloc_r+0x80>
 800c34a:	230c      	movs	r3, #12
 800c34c:	603b      	str	r3, [r7, #0]
 800c34e:	4638      	mov	r0, r7
 800c350:	f000 f80e 	bl	800c370 <__malloc_unlock>
 800c354:	e797      	b.n	800c286 <_malloc_r+0x22>
 800c356:	6025      	str	r5, [r4, #0]
 800c358:	e7dc      	b.n	800c314 <_malloc_r+0xb0>
 800c35a:	605b      	str	r3, [r3, #4]
 800c35c:	deff      	udf	#255	; 0xff
 800c35e:	bf00      	nop
 800c360:	20001ff0 	.word	0x20001ff0

0800c364 <__malloc_lock>:
 800c364:	4801      	ldr	r0, [pc, #4]	; (800c36c <__malloc_lock+0x8>)
 800c366:	f7ff b87c 	b.w	800b462 <__retarget_lock_acquire_recursive>
 800c36a:	bf00      	nop
 800c36c:	20001fec 	.word	0x20001fec

0800c370 <__malloc_unlock>:
 800c370:	4801      	ldr	r0, [pc, #4]	; (800c378 <__malloc_unlock+0x8>)
 800c372:	f7ff b877 	b.w	800b464 <__retarget_lock_release_recursive>
 800c376:	bf00      	nop
 800c378:	20001fec 	.word	0x20001fec

0800c37c <_Balloc>:
 800c37c:	b570      	push	{r4, r5, r6, lr}
 800c37e:	69c6      	ldr	r6, [r0, #28]
 800c380:	4604      	mov	r4, r0
 800c382:	460d      	mov	r5, r1
 800c384:	b976      	cbnz	r6, 800c3a4 <_Balloc+0x28>
 800c386:	2010      	movs	r0, #16
 800c388:	f7ff ff44 	bl	800c214 <malloc>
 800c38c:	4602      	mov	r2, r0
 800c38e:	61e0      	str	r0, [r4, #28]
 800c390:	b920      	cbnz	r0, 800c39c <_Balloc+0x20>
 800c392:	4b18      	ldr	r3, [pc, #96]	; (800c3f4 <_Balloc+0x78>)
 800c394:	4818      	ldr	r0, [pc, #96]	; (800c3f8 <_Balloc+0x7c>)
 800c396:	216b      	movs	r1, #107	; 0x6b
 800c398:	f000 fd9c 	bl	800ced4 <__assert_func>
 800c39c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c3a0:	6006      	str	r6, [r0, #0]
 800c3a2:	60c6      	str	r6, [r0, #12]
 800c3a4:	69e6      	ldr	r6, [r4, #28]
 800c3a6:	68f3      	ldr	r3, [r6, #12]
 800c3a8:	b183      	cbz	r3, 800c3cc <_Balloc+0x50>
 800c3aa:	69e3      	ldr	r3, [r4, #28]
 800c3ac:	68db      	ldr	r3, [r3, #12]
 800c3ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c3b2:	b9b8      	cbnz	r0, 800c3e4 <_Balloc+0x68>
 800c3b4:	2101      	movs	r1, #1
 800c3b6:	fa01 f605 	lsl.w	r6, r1, r5
 800c3ba:	1d72      	adds	r2, r6, #5
 800c3bc:	0092      	lsls	r2, r2, #2
 800c3be:	4620      	mov	r0, r4
 800c3c0:	f000 fda6 	bl	800cf10 <_calloc_r>
 800c3c4:	b160      	cbz	r0, 800c3e0 <_Balloc+0x64>
 800c3c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c3ca:	e00e      	b.n	800c3ea <_Balloc+0x6e>
 800c3cc:	2221      	movs	r2, #33	; 0x21
 800c3ce:	2104      	movs	r1, #4
 800c3d0:	4620      	mov	r0, r4
 800c3d2:	f000 fd9d 	bl	800cf10 <_calloc_r>
 800c3d6:	69e3      	ldr	r3, [r4, #28]
 800c3d8:	60f0      	str	r0, [r6, #12]
 800c3da:	68db      	ldr	r3, [r3, #12]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d1e4      	bne.n	800c3aa <_Balloc+0x2e>
 800c3e0:	2000      	movs	r0, #0
 800c3e2:	bd70      	pop	{r4, r5, r6, pc}
 800c3e4:	6802      	ldr	r2, [r0, #0]
 800c3e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c3f0:	e7f7      	b.n	800c3e2 <_Balloc+0x66>
 800c3f2:	bf00      	nop
 800c3f4:	0800f815 	.word	0x0800f815
 800c3f8:	0800f895 	.word	0x0800f895

0800c3fc <_Bfree>:
 800c3fc:	b570      	push	{r4, r5, r6, lr}
 800c3fe:	69c6      	ldr	r6, [r0, #28]
 800c400:	4605      	mov	r5, r0
 800c402:	460c      	mov	r4, r1
 800c404:	b976      	cbnz	r6, 800c424 <_Bfree+0x28>
 800c406:	2010      	movs	r0, #16
 800c408:	f7ff ff04 	bl	800c214 <malloc>
 800c40c:	4602      	mov	r2, r0
 800c40e:	61e8      	str	r0, [r5, #28]
 800c410:	b920      	cbnz	r0, 800c41c <_Bfree+0x20>
 800c412:	4b09      	ldr	r3, [pc, #36]	; (800c438 <_Bfree+0x3c>)
 800c414:	4809      	ldr	r0, [pc, #36]	; (800c43c <_Bfree+0x40>)
 800c416:	218f      	movs	r1, #143	; 0x8f
 800c418:	f000 fd5c 	bl	800ced4 <__assert_func>
 800c41c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c420:	6006      	str	r6, [r0, #0]
 800c422:	60c6      	str	r6, [r0, #12]
 800c424:	b13c      	cbz	r4, 800c436 <_Bfree+0x3a>
 800c426:	69eb      	ldr	r3, [r5, #28]
 800c428:	6862      	ldr	r2, [r4, #4]
 800c42a:	68db      	ldr	r3, [r3, #12]
 800c42c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c430:	6021      	str	r1, [r4, #0]
 800c432:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c436:	bd70      	pop	{r4, r5, r6, pc}
 800c438:	0800f815 	.word	0x0800f815
 800c43c:	0800f895 	.word	0x0800f895

0800c440 <__multadd>:
 800c440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c444:	690d      	ldr	r5, [r1, #16]
 800c446:	4607      	mov	r7, r0
 800c448:	460c      	mov	r4, r1
 800c44a:	461e      	mov	r6, r3
 800c44c:	f101 0c14 	add.w	ip, r1, #20
 800c450:	2000      	movs	r0, #0
 800c452:	f8dc 3000 	ldr.w	r3, [ip]
 800c456:	b299      	uxth	r1, r3
 800c458:	fb02 6101 	mla	r1, r2, r1, r6
 800c45c:	0c1e      	lsrs	r6, r3, #16
 800c45e:	0c0b      	lsrs	r3, r1, #16
 800c460:	fb02 3306 	mla	r3, r2, r6, r3
 800c464:	b289      	uxth	r1, r1
 800c466:	3001      	adds	r0, #1
 800c468:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c46c:	4285      	cmp	r5, r0
 800c46e:	f84c 1b04 	str.w	r1, [ip], #4
 800c472:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c476:	dcec      	bgt.n	800c452 <__multadd+0x12>
 800c478:	b30e      	cbz	r6, 800c4be <__multadd+0x7e>
 800c47a:	68a3      	ldr	r3, [r4, #8]
 800c47c:	42ab      	cmp	r3, r5
 800c47e:	dc19      	bgt.n	800c4b4 <__multadd+0x74>
 800c480:	6861      	ldr	r1, [r4, #4]
 800c482:	4638      	mov	r0, r7
 800c484:	3101      	adds	r1, #1
 800c486:	f7ff ff79 	bl	800c37c <_Balloc>
 800c48a:	4680      	mov	r8, r0
 800c48c:	b928      	cbnz	r0, 800c49a <__multadd+0x5a>
 800c48e:	4602      	mov	r2, r0
 800c490:	4b0c      	ldr	r3, [pc, #48]	; (800c4c4 <__multadd+0x84>)
 800c492:	480d      	ldr	r0, [pc, #52]	; (800c4c8 <__multadd+0x88>)
 800c494:	21ba      	movs	r1, #186	; 0xba
 800c496:	f000 fd1d 	bl	800ced4 <__assert_func>
 800c49a:	6922      	ldr	r2, [r4, #16]
 800c49c:	3202      	adds	r2, #2
 800c49e:	f104 010c 	add.w	r1, r4, #12
 800c4a2:	0092      	lsls	r2, r2, #2
 800c4a4:	300c      	adds	r0, #12
 800c4a6:	f7fe ffde 	bl	800b466 <memcpy>
 800c4aa:	4621      	mov	r1, r4
 800c4ac:	4638      	mov	r0, r7
 800c4ae:	f7ff ffa5 	bl	800c3fc <_Bfree>
 800c4b2:	4644      	mov	r4, r8
 800c4b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c4b8:	3501      	adds	r5, #1
 800c4ba:	615e      	str	r6, [r3, #20]
 800c4bc:	6125      	str	r5, [r4, #16]
 800c4be:	4620      	mov	r0, r4
 800c4c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4c4:	0800f884 	.word	0x0800f884
 800c4c8:	0800f895 	.word	0x0800f895

0800c4cc <__hi0bits>:
 800c4cc:	0c03      	lsrs	r3, r0, #16
 800c4ce:	041b      	lsls	r3, r3, #16
 800c4d0:	b9d3      	cbnz	r3, 800c508 <__hi0bits+0x3c>
 800c4d2:	0400      	lsls	r0, r0, #16
 800c4d4:	2310      	movs	r3, #16
 800c4d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c4da:	bf04      	itt	eq
 800c4dc:	0200      	lsleq	r0, r0, #8
 800c4de:	3308      	addeq	r3, #8
 800c4e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c4e4:	bf04      	itt	eq
 800c4e6:	0100      	lsleq	r0, r0, #4
 800c4e8:	3304      	addeq	r3, #4
 800c4ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c4ee:	bf04      	itt	eq
 800c4f0:	0080      	lsleq	r0, r0, #2
 800c4f2:	3302      	addeq	r3, #2
 800c4f4:	2800      	cmp	r0, #0
 800c4f6:	db05      	blt.n	800c504 <__hi0bits+0x38>
 800c4f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c4fc:	f103 0301 	add.w	r3, r3, #1
 800c500:	bf08      	it	eq
 800c502:	2320      	moveq	r3, #32
 800c504:	4618      	mov	r0, r3
 800c506:	4770      	bx	lr
 800c508:	2300      	movs	r3, #0
 800c50a:	e7e4      	b.n	800c4d6 <__hi0bits+0xa>

0800c50c <__lo0bits>:
 800c50c:	6803      	ldr	r3, [r0, #0]
 800c50e:	f013 0207 	ands.w	r2, r3, #7
 800c512:	d00c      	beq.n	800c52e <__lo0bits+0x22>
 800c514:	07d9      	lsls	r1, r3, #31
 800c516:	d422      	bmi.n	800c55e <__lo0bits+0x52>
 800c518:	079a      	lsls	r2, r3, #30
 800c51a:	bf49      	itett	mi
 800c51c:	085b      	lsrmi	r3, r3, #1
 800c51e:	089b      	lsrpl	r3, r3, #2
 800c520:	6003      	strmi	r3, [r0, #0]
 800c522:	2201      	movmi	r2, #1
 800c524:	bf5c      	itt	pl
 800c526:	6003      	strpl	r3, [r0, #0]
 800c528:	2202      	movpl	r2, #2
 800c52a:	4610      	mov	r0, r2
 800c52c:	4770      	bx	lr
 800c52e:	b299      	uxth	r1, r3
 800c530:	b909      	cbnz	r1, 800c536 <__lo0bits+0x2a>
 800c532:	0c1b      	lsrs	r3, r3, #16
 800c534:	2210      	movs	r2, #16
 800c536:	b2d9      	uxtb	r1, r3
 800c538:	b909      	cbnz	r1, 800c53e <__lo0bits+0x32>
 800c53a:	3208      	adds	r2, #8
 800c53c:	0a1b      	lsrs	r3, r3, #8
 800c53e:	0719      	lsls	r1, r3, #28
 800c540:	bf04      	itt	eq
 800c542:	091b      	lsreq	r3, r3, #4
 800c544:	3204      	addeq	r2, #4
 800c546:	0799      	lsls	r1, r3, #30
 800c548:	bf04      	itt	eq
 800c54a:	089b      	lsreq	r3, r3, #2
 800c54c:	3202      	addeq	r2, #2
 800c54e:	07d9      	lsls	r1, r3, #31
 800c550:	d403      	bmi.n	800c55a <__lo0bits+0x4e>
 800c552:	085b      	lsrs	r3, r3, #1
 800c554:	f102 0201 	add.w	r2, r2, #1
 800c558:	d003      	beq.n	800c562 <__lo0bits+0x56>
 800c55a:	6003      	str	r3, [r0, #0]
 800c55c:	e7e5      	b.n	800c52a <__lo0bits+0x1e>
 800c55e:	2200      	movs	r2, #0
 800c560:	e7e3      	b.n	800c52a <__lo0bits+0x1e>
 800c562:	2220      	movs	r2, #32
 800c564:	e7e1      	b.n	800c52a <__lo0bits+0x1e>
	...

0800c568 <__i2b>:
 800c568:	b510      	push	{r4, lr}
 800c56a:	460c      	mov	r4, r1
 800c56c:	2101      	movs	r1, #1
 800c56e:	f7ff ff05 	bl	800c37c <_Balloc>
 800c572:	4602      	mov	r2, r0
 800c574:	b928      	cbnz	r0, 800c582 <__i2b+0x1a>
 800c576:	4b05      	ldr	r3, [pc, #20]	; (800c58c <__i2b+0x24>)
 800c578:	4805      	ldr	r0, [pc, #20]	; (800c590 <__i2b+0x28>)
 800c57a:	f240 1145 	movw	r1, #325	; 0x145
 800c57e:	f000 fca9 	bl	800ced4 <__assert_func>
 800c582:	2301      	movs	r3, #1
 800c584:	6144      	str	r4, [r0, #20]
 800c586:	6103      	str	r3, [r0, #16]
 800c588:	bd10      	pop	{r4, pc}
 800c58a:	bf00      	nop
 800c58c:	0800f884 	.word	0x0800f884
 800c590:	0800f895 	.word	0x0800f895

0800c594 <__multiply>:
 800c594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c598:	4691      	mov	r9, r2
 800c59a:	690a      	ldr	r2, [r1, #16]
 800c59c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c5a0:	429a      	cmp	r2, r3
 800c5a2:	bfb8      	it	lt
 800c5a4:	460b      	movlt	r3, r1
 800c5a6:	460c      	mov	r4, r1
 800c5a8:	bfbc      	itt	lt
 800c5aa:	464c      	movlt	r4, r9
 800c5ac:	4699      	movlt	r9, r3
 800c5ae:	6927      	ldr	r7, [r4, #16]
 800c5b0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c5b4:	68a3      	ldr	r3, [r4, #8]
 800c5b6:	6861      	ldr	r1, [r4, #4]
 800c5b8:	eb07 060a 	add.w	r6, r7, sl
 800c5bc:	42b3      	cmp	r3, r6
 800c5be:	b085      	sub	sp, #20
 800c5c0:	bfb8      	it	lt
 800c5c2:	3101      	addlt	r1, #1
 800c5c4:	f7ff feda 	bl	800c37c <_Balloc>
 800c5c8:	b930      	cbnz	r0, 800c5d8 <__multiply+0x44>
 800c5ca:	4602      	mov	r2, r0
 800c5cc:	4b44      	ldr	r3, [pc, #272]	; (800c6e0 <__multiply+0x14c>)
 800c5ce:	4845      	ldr	r0, [pc, #276]	; (800c6e4 <__multiply+0x150>)
 800c5d0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c5d4:	f000 fc7e 	bl	800ced4 <__assert_func>
 800c5d8:	f100 0514 	add.w	r5, r0, #20
 800c5dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c5e0:	462b      	mov	r3, r5
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	4543      	cmp	r3, r8
 800c5e6:	d321      	bcc.n	800c62c <__multiply+0x98>
 800c5e8:	f104 0314 	add.w	r3, r4, #20
 800c5ec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c5f0:	f109 0314 	add.w	r3, r9, #20
 800c5f4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c5f8:	9202      	str	r2, [sp, #8]
 800c5fa:	1b3a      	subs	r2, r7, r4
 800c5fc:	3a15      	subs	r2, #21
 800c5fe:	f022 0203 	bic.w	r2, r2, #3
 800c602:	3204      	adds	r2, #4
 800c604:	f104 0115 	add.w	r1, r4, #21
 800c608:	428f      	cmp	r7, r1
 800c60a:	bf38      	it	cc
 800c60c:	2204      	movcc	r2, #4
 800c60e:	9201      	str	r2, [sp, #4]
 800c610:	9a02      	ldr	r2, [sp, #8]
 800c612:	9303      	str	r3, [sp, #12]
 800c614:	429a      	cmp	r2, r3
 800c616:	d80c      	bhi.n	800c632 <__multiply+0x9e>
 800c618:	2e00      	cmp	r6, #0
 800c61a:	dd03      	ble.n	800c624 <__multiply+0x90>
 800c61c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c620:	2b00      	cmp	r3, #0
 800c622:	d05b      	beq.n	800c6dc <__multiply+0x148>
 800c624:	6106      	str	r6, [r0, #16]
 800c626:	b005      	add	sp, #20
 800c628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c62c:	f843 2b04 	str.w	r2, [r3], #4
 800c630:	e7d8      	b.n	800c5e4 <__multiply+0x50>
 800c632:	f8b3 a000 	ldrh.w	sl, [r3]
 800c636:	f1ba 0f00 	cmp.w	sl, #0
 800c63a:	d024      	beq.n	800c686 <__multiply+0xf2>
 800c63c:	f104 0e14 	add.w	lr, r4, #20
 800c640:	46a9      	mov	r9, r5
 800c642:	f04f 0c00 	mov.w	ip, #0
 800c646:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c64a:	f8d9 1000 	ldr.w	r1, [r9]
 800c64e:	fa1f fb82 	uxth.w	fp, r2
 800c652:	b289      	uxth	r1, r1
 800c654:	fb0a 110b 	mla	r1, sl, fp, r1
 800c658:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c65c:	f8d9 2000 	ldr.w	r2, [r9]
 800c660:	4461      	add	r1, ip
 800c662:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c666:	fb0a c20b 	mla	r2, sl, fp, ip
 800c66a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c66e:	b289      	uxth	r1, r1
 800c670:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c674:	4577      	cmp	r7, lr
 800c676:	f849 1b04 	str.w	r1, [r9], #4
 800c67a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c67e:	d8e2      	bhi.n	800c646 <__multiply+0xb2>
 800c680:	9a01      	ldr	r2, [sp, #4]
 800c682:	f845 c002 	str.w	ip, [r5, r2]
 800c686:	9a03      	ldr	r2, [sp, #12]
 800c688:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c68c:	3304      	adds	r3, #4
 800c68e:	f1b9 0f00 	cmp.w	r9, #0
 800c692:	d021      	beq.n	800c6d8 <__multiply+0x144>
 800c694:	6829      	ldr	r1, [r5, #0]
 800c696:	f104 0c14 	add.w	ip, r4, #20
 800c69a:	46ae      	mov	lr, r5
 800c69c:	f04f 0a00 	mov.w	sl, #0
 800c6a0:	f8bc b000 	ldrh.w	fp, [ip]
 800c6a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c6a8:	fb09 220b 	mla	r2, r9, fp, r2
 800c6ac:	4452      	add	r2, sl
 800c6ae:	b289      	uxth	r1, r1
 800c6b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c6b4:	f84e 1b04 	str.w	r1, [lr], #4
 800c6b8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c6bc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c6c0:	f8be 1000 	ldrh.w	r1, [lr]
 800c6c4:	fb09 110a 	mla	r1, r9, sl, r1
 800c6c8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c6cc:	4567      	cmp	r7, ip
 800c6ce:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c6d2:	d8e5      	bhi.n	800c6a0 <__multiply+0x10c>
 800c6d4:	9a01      	ldr	r2, [sp, #4]
 800c6d6:	50a9      	str	r1, [r5, r2]
 800c6d8:	3504      	adds	r5, #4
 800c6da:	e799      	b.n	800c610 <__multiply+0x7c>
 800c6dc:	3e01      	subs	r6, #1
 800c6de:	e79b      	b.n	800c618 <__multiply+0x84>
 800c6e0:	0800f884 	.word	0x0800f884
 800c6e4:	0800f895 	.word	0x0800f895

0800c6e8 <__pow5mult>:
 800c6e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6ec:	4615      	mov	r5, r2
 800c6ee:	f012 0203 	ands.w	r2, r2, #3
 800c6f2:	4606      	mov	r6, r0
 800c6f4:	460f      	mov	r7, r1
 800c6f6:	d007      	beq.n	800c708 <__pow5mult+0x20>
 800c6f8:	4c25      	ldr	r4, [pc, #148]	; (800c790 <__pow5mult+0xa8>)
 800c6fa:	3a01      	subs	r2, #1
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c702:	f7ff fe9d 	bl	800c440 <__multadd>
 800c706:	4607      	mov	r7, r0
 800c708:	10ad      	asrs	r5, r5, #2
 800c70a:	d03d      	beq.n	800c788 <__pow5mult+0xa0>
 800c70c:	69f4      	ldr	r4, [r6, #28]
 800c70e:	b97c      	cbnz	r4, 800c730 <__pow5mult+0x48>
 800c710:	2010      	movs	r0, #16
 800c712:	f7ff fd7f 	bl	800c214 <malloc>
 800c716:	4602      	mov	r2, r0
 800c718:	61f0      	str	r0, [r6, #28]
 800c71a:	b928      	cbnz	r0, 800c728 <__pow5mult+0x40>
 800c71c:	4b1d      	ldr	r3, [pc, #116]	; (800c794 <__pow5mult+0xac>)
 800c71e:	481e      	ldr	r0, [pc, #120]	; (800c798 <__pow5mult+0xb0>)
 800c720:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c724:	f000 fbd6 	bl	800ced4 <__assert_func>
 800c728:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c72c:	6004      	str	r4, [r0, #0]
 800c72e:	60c4      	str	r4, [r0, #12]
 800c730:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c734:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c738:	b94c      	cbnz	r4, 800c74e <__pow5mult+0x66>
 800c73a:	f240 2171 	movw	r1, #625	; 0x271
 800c73e:	4630      	mov	r0, r6
 800c740:	f7ff ff12 	bl	800c568 <__i2b>
 800c744:	2300      	movs	r3, #0
 800c746:	f8c8 0008 	str.w	r0, [r8, #8]
 800c74a:	4604      	mov	r4, r0
 800c74c:	6003      	str	r3, [r0, #0]
 800c74e:	f04f 0900 	mov.w	r9, #0
 800c752:	07eb      	lsls	r3, r5, #31
 800c754:	d50a      	bpl.n	800c76c <__pow5mult+0x84>
 800c756:	4639      	mov	r1, r7
 800c758:	4622      	mov	r2, r4
 800c75a:	4630      	mov	r0, r6
 800c75c:	f7ff ff1a 	bl	800c594 <__multiply>
 800c760:	4639      	mov	r1, r7
 800c762:	4680      	mov	r8, r0
 800c764:	4630      	mov	r0, r6
 800c766:	f7ff fe49 	bl	800c3fc <_Bfree>
 800c76a:	4647      	mov	r7, r8
 800c76c:	106d      	asrs	r5, r5, #1
 800c76e:	d00b      	beq.n	800c788 <__pow5mult+0xa0>
 800c770:	6820      	ldr	r0, [r4, #0]
 800c772:	b938      	cbnz	r0, 800c784 <__pow5mult+0x9c>
 800c774:	4622      	mov	r2, r4
 800c776:	4621      	mov	r1, r4
 800c778:	4630      	mov	r0, r6
 800c77a:	f7ff ff0b 	bl	800c594 <__multiply>
 800c77e:	6020      	str	r0, [r4, #0]
 800c780:	f8c0 9000 	str.w	r9, [r0]
 800c784:	4604      	mov	r4, r0
 800c786:	e7e4      	b.n	800c752 <__pow5mult+0x6a>
 800c788:	4638      	mov	r0, r7
 800c78a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c78e:	bf00      	nop
 800c790:	0800f9e0 	.word	0x0800f9e0
 800c794:	0800f815 	.word	0x0800f815
 800c798:	0800f895 	.word	0x0800f895

0800c79c <__lshift>:
 800c79c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7a0:	460c      	mov	r4, r1
 800c7a2:	6849      	ldr	r1, [r1, #4]
 800c7a4:	6923      	ldr	r3, [r4, #16]
 800c7a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c7aa:	68a3      	ldr	r3, [r4, #8]
 800c7ac:	4607      	mov	r7, r0
 800c7ae:	4691      	mov	r9, r2
 800c7b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c7b4:	f108 0601 	add.w	r6, r8, #1
 800c7b8:	42b3      	cmp	r3, r6
 800c7ba:	db0b      	blt.n	800c7d4 <__lshift+0x38>
 800c7bc:	4638      	mov	r0, r7
 800c7be:	f7ff fddd 	bl	800c37c <_Balloc>
 800c7c2:	4605      	mov	r5, r0
 800c7c4:	b948      	cbnz	r0, 800c7da <__lshift+0x3e>
 800c7c6:	4602      	mov	r2, r0
 800c7c8:	4b28      	ldr	r3, [pc, #160]	; (800c86c <__lshift+0xd0>)
 800c7ca:	4829      	ldr	r0, [pc, #164]	; (800c870 <__lshift+0xd4>)
 800c7cc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c7d0:	f000 fb80 	bl	800ced4 <__assert_func>
 800c7d4:	3101      	adds	r1, #1
 800c7d6:	005b      	lsls	r3, r3, #1
 800c7d8:	e7ee      	b.n	800c7b8 <__lshift+0x1c>
 800c7da:	2300      	movs	r3, #0
 800c7dc:	f100 0114 	add.w	r1, r0, #20
 800c7e0:	f100 0210 	add.w	r2, r0, #16
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	4553      	cmp	r3, sl
 800c7e8:	db33      	blt.n	800c852 <__lshift+0xb6>
 800c7ea:	6920      	ldr	r0, [r4, #16]
 800c7ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c7f0:	f104 0314 	add.w	r3, r4, #20
 800c7f4:	f019 091f 	ands.w	r9, r9, #31
 800c7f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c7fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c800:	d02b      	beq.n	800c85a <__lshift+0xbe>
 800c802:	f1c9 0e20 	rsb	lr, r9, #32
 800c806:	468a      	mov	sl, r1
 800c808:	2200      	movs	r2, #0
 800c80a:	6818      	ldr	r0, [r3, #0]
 800c80c:	fa00 f009 	lsl.w	r0, r0, r9
 800c810:	4310      	orrs	r0, r2
 800c812:	f84a 0b04 	str.w	r0, [sl], #4
 800c816:	f853 2b04 	ldr.w	r2, [r3], #4
 800c81a:	459c      	cmp	ip, r3
 800c81c:	fa22 f20e 	lsr.w	r2, r2, lr
 800c820:	d8f3      	bhi.n	800c80a <__lshift+0x6e>
 800c822:	ebac 0304 	sub.w	r3, ip, r4
 800c826:	3b15      	subs	r3, #21
 800c828:	f023 0303 	bic.w	r3, r3, #3
 800c82c:	3304      	adds	r3, #4
 800c82e:	f104 0015 	add.w	r0, r4, #21
 800c832:	4584      	cmp	ip, r0
 800c834:	bf38      	it	cc
 800c836:	2304      	movcc	r3, #4
 800c838:	50ca      	str	r2, [r1, r3]
 800c83a:	b10a      	cbz	r2, 800c840 <__lshift+0xa4>
 800c83c:	f108 0602 	add.w	r6, r8, #2
 800c840:	3e01      	subs	r6, #1
 800c842:	4638      	mov	r0, r7
 800c844:	612e      	str	r6, [r5, #16]
 800c846:	4621      	mov	r1, r4
 800c848:	f7ff fdd8 	bl	800c3fc <_Bfree>
 800c84c:	4628      	mov	r0, r5
 800c84e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c852:	f842 0f04 	str.w	r0, [r2, #4]!
 800c856:	3301      	adds	r3, #1
 800c858:	e7c5      	b.n	800c7e6 <__lshift+0x4a>
 800c85a:	3904      	subs	r1, #4
 800c85c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c860:	f841 2f04 	str.w	r2, [r1, #4]!
 800c864:	459c      	cmp	ip, r3
 800c866:	d8f9      	bhi.n	800c85c <__lshift+0xc0>
 800c868:	e7ea      	b.n	800c840 <__lshift+0xa4>
 800c86a:	bf00      	nop
 800c86c:	0800f884 	.word	0x0800f884
 800c870:	0800f895 	.word	0x0800f895

0800c874 <__mcmp>:
 800c874:	b530      	push	{r4, r5, lr}
 800c876:	6902      	ldr	r2, [r0, #16]
 800c878:	690c      	ldr	r4, [r1, #16]
 800c87a:	1b12      	subs	r2, r2, r4
 800c87c:	d10e      	bne.n	800c89c <__mcmp+0x28>
 800c87e:	f100 0314 	add.w	r3, r0, #20
 800c882:	3114      	adds	r1, #20
 800c884:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c888:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c88c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c890:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c894:	42a5      	cmp	r5, r4
 800c896:	d003      	beq.n	800c8a0 <__mcmp+0x2c>
 800c898:	d305      	bcc.n	800c8a6 <__mcmp+0x32>
 800c89a:	2201      	movs	r2, #1
 800c89c:	4610      	mov	r0, r2
 800c89e:	bd30      	pop	{r4, r5, pc}
 800c8a0:	4283      	cmp	r3, r0
 800c8a2:	d3f3      	bcc.n	800c88c <__mcmp+0x18>
 800c8a4:	e7fa      	b.n	800c89c <__mcmp+0x28>
 800c8a6:	f04f 32ff 	mov.w	r2, #4294967295
 800c8aa:	e7f7      	b.n	800c89c <__mcmp+0x28>

0800c8ac <__mdiff>:
 800c8ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8b0:	460c      	mov	r4, r1
 800c8b2:	4606      	mov	r6, r0
 800c8b4:	4611      	mov	r1, r2
 800c8b6:	4620      	mov	r0, r4
 800c8b8:	4690      	mov	r8, r2
 800c8ba:	f7ff ffdb 	bl	800c874 <__mcmp>
 800c8be:	1e05      	subs	r5, r0, #0
 800c8c0:	d110      	bne.n	800c8e4 <__mdiff+0x38>
 800c8c2:	4629      	mov	r1, r5
 800c8c4:	4630      	mov	r0, r6
 800c8c6:	f7ff fd59 	bl	800c37c <_Balloc>
 800c8ca:	b930      	cbnz	r0, 800c8da <__mdiff+0x2e>
 800c8cc:	4b3a      	ldr	r3, [pc, #232]	; (800c9b8 <__mdiff+0x10c>)
 800c8ce:	4602      	mov	r2, r0
 800c8d0:	f240 2137 	movw	r1, #567	; 0x237
 800c8d4:	4839      	ldr	r0, [pc, #228]	; (800c9bc <__mdiff+0x110>)
 800c8d6:	f000 fafd 	bl	800ced4 <__assert_func>
 800c8da:	2301      	movs	r3, #1
 800c8dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c8e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8e4:	bfa4      	itt	ge
 800c8e6:	4643      	movge	r3, r8
 800c8e8:	46a0      	movge	r8, r4
 800c8ea:	4630      	mov	r0, r6
 800c8ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c8f0:	bfa6      	itte	ge
 800c8f2:	461c      	movge	r4, r3
 800c8f4:	2500      	movge	r5, #0
 800c8f6:	2501      	movlt	r5, #1
 800c8f8:	f7ff fd40 	bl	800c37c <_Balloc>
 800c8fc:	b920      	cbnz	r0, 800c908 <__mdiff+0x5c>
 800c8fe:	4b2e      	ldr	r3, [pc, #184]	; (800c9b8 <__mdiff+0x10c>)
 800c900:	4602      	mov	r2, r0
 800c902:	f240 2145 	movw	r1, #581	; 0x245
 800c906:	e7e5      	b.n	800c8d4 <__mdiff+0x28>
 800c908:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c90c:	6926      	ldr	r6, [r4, #16]
 800c90e:	60c5      	str	r5, [r0, #12]
 800c910:	f104 0914 	add.w	r9, r4, #20
 800c914:	f108 0514 	add.w	r5, r8, #20
 800c918:	f100 0e14 	add.w	lr, r0, #20
 800c91c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c920:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c924:	f108 0210 	add.w	r2, r8, #16
 800c928:	46f2      	mov	sl, lr
 800c92a:	2100      	movs	r1, #0
 800c92c:	f859 3b04 	ldr.w	r3, [r9], #4
 800c930:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c934:	fa11 f88b 	uxtah	r8, r1, fp
 800c938:	b299      	uxth	r1, r3
 800c93a:	0c1b      	lsrs	r3, r3, #16
 800c93c:	eba8 0801 	sub.w	r8, r8, r1
 800c940:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c944:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c948:	fa1f f888 	uxth.w	r8, r8
 800c94c:	1419      	asrs	r1, r3, #16
 800c94e:	454e      	cmp	r6, r9
 800c950:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c954:	f84a 3b04 	str.w	r3, [sl], #4
 800c958:	d8e8      	bhi.n	800c92c <__mdiff+0x80>
 800c95a:	1b33      	subs	r3, r6, r4
 800c95c:	3b15      	subs	r3, #21
 800c95e:	f023 0303 	bic.w	r3, r3, #3
 800c962:	3304      	adds	r3, #4
 800c964:	3415      	adds	r4, #21
 800c966:	42a6      	cmp	r6, r4
 800c968:	bf38      	it	cc
 800c96a:	2304      	movcc	r3, #4
 800c96c:	441d      	add	r5, r3
 800c96e:	4473      	add	r3, lr
 800c970:	469e      	mov	lr, r3
 800c972:	462e      	mov	r6, r5
 800c974:	4566      	cmp	r6, ip
 800c976:	d30e      	bcc.n	800c996 <__mdiff+0xea>
 800c978:	f10c 0203 	add.w	r2, ip, #3
 800c97c:	1b52      	subs	r2, r2, r5
 800c97e:	f022 0203 	bic.w	r2, r2, #3
 800c982:	3d03      	subs	r5, #3
 800c984:	45ac      	cmp	ip, r5
 800c986:	bf38      	it	cc
 800c988:	2200      	movcc	r2, #0
 800c98a:	4413      	add	r3, r2
 800c98c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c990:	b17a      	cbz	r2, 800c9b2 <__mdiff+0x106>
 800c992:	6107      	str	r7, [r0, #16]
 800c994:	e7a4      	b.n	800c8e0 <__mdiff+0x34>
 800c996:	f856 8b04 	ldr.w	r8, [r6], #4
 800c99a:	fa11 f288 	uxtah	r2, r1, r8
 800c99e:	1414      	asrs	r4, r2, #16
 800c9a0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c9a4:	b292      	uxth	r2, r2
 800c9a6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c9aa:	f84e 2b04 	str.w	r2, [lr], #4
 800c9ae:	1421      	asrs	r1, r4, #16
 800c9b0:	e7e0      	b.n	800c974 <__mdiff+0xc8>
 800c9b2:	3f01      	subs	r7, #1
 800c9b4:	e7ea      	b.n	800c98c <__mdiff+0xe0>
 800c9b6:	bf00      	nop
 800c9b8:	0800f884 	.word	0x0800f884
 800c9bc:	0800f895 	.word	0x0800f895

0800c9c0 <__d2b>:
 800c9c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c9c4:	460f      	mov	r7, r1
 800c9c6:	2101      	movs	r1, #1
 800c9c8:	ec59 8b10 	vmov	r8, r9, d0
 800c9cc:	4616      	mov	r6, r2
 800c9ce:	f7ff fcd5 	bl	800c37c <_Balloc>
 800c9d2:	4604      	mov	r4, r0
 800c9d4:	b930      	cbnz	r0, 800c9e4 <__d2b+0x24>
 800c9d6:	4602      	mov	r2, r0
 800c9d8:	4b24      	ldr	r3, [pc, #144]	; (800ca6c <__d2b+0xac>)
 800c9da:	4825      	ldr	r0, [pc, #148]	; (800ca70 <__d2b+0xb0>)
 800c9dc:	f240 310f 	movw	r1, #783	; 0x30f
 800c9e0:	f000 fa78 	bl	800ced4 <__assert_func>
 800c9e4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c9e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c9ec:	bb2d      	cbnz	r5, 800ca3a <__d2b+0x7a>
 800c9ee:	9301      	str	r3, [sp, #4]
 800c9f0:	f1b8 0300 	subs.w	r3, r8, #0
 800c9f4:	d026      	beq.n	800ca44 <__d2b+0x84>
 800c9f6:	4668      	mov	r0, sp
 800c9f8:	9300      	str	r3, [sp, #0]
 800c9fa:	f7ff fd87 	bl	800c50c <__lo0bits>
 800c9fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ca02:	b1e8      	cbz	r0, 800ca40 <__d2b+0x80>
 800ca04:	f1c0 0320 	rsb	r3, r0, #32
 800ca08:	fa02 f303 	lsl.w	r3, r2, r3
 800ca0c:	430b      	orrs	r3, r1
 800ca0e:	40c2      	lsrs	r2, r0
 800ca10:	6163      	str	r3, [r4, #20]
 800ca12:	9201      	str	r2, [sp, #4]
 800ca14:	9b01      	ldr	r3, [sp, #4]
 800ca16:	61a3      	str	r3, [r4, #24]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	bf14      	ite	ne
 800ca1c:	2202      	movne	r2, #2
 800ca1e:	2201      	moveq	r2, #1
 800ca20:	6122      	str	r2, [r4, #16]
 800ca22:	b1bd      	cbz	r5, 800ca54 <__d2b+0x94>
 800ca24:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ca28:	4405      	add	r5, r0
 800ca2a:	603d      	str	r5, [r7, #0]
 800ca2c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ca30:	6030      	str	r0, [r6, #0]
 800ca32:	4620      	mov	r0, r4
 800ca34:	b003      	add	sp, #12
 800ca36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ca3e:	e7d6      	b.n	800c9ee <__d2b+0x2e>
 800ca40:	6161      	str	r1, [r4, #20]
 800ca42:	e7e7      	b.n	800ca14 <__d2b+0x54>
 800ca44:	a801      	add	r0, sp, #4
 800ca46:	f7ff fd61 	bl	800c50c <__lo0bits>
 800ca4a:	9b01      	ldr	r3, [sp, #4]
 800ca4c:	6163      	str	r3, [r4, #20]
 800ca4e:	3020      	adds	r0, #32
 800ca50:	2201      	movs	r2, #1
 800ca52:	e7e5      	b.n	800ca20 <__d2b+0x60>
 800ca54:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ca58:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ca5c:	6038      	str	r0, [r7, #0]
 800ca5e:	6918      	ldr	r0, [r3, #16]
 800ca60:	f7ff fd34 	bl	800c4cc <__hi0bits>
 800ca64:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ca68:	e7e2      	b.n	800ca30 <__d2b+0x70>
 800ca6a:	bf00      	nop
 800ca6c:	0800f884 	.word	0x0800f884
 800ca70:	0800f895 	.word	0x0800f895

0800ca74 <__ssputs_r>:
 800ca74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca78:	688e      	ldr	r6, [r1, #8]
 800ca7a:	461f      	mov	r7, r3
 800ca7c:	42be      	cmp	r6, r7
 800ca7e:	680b      	ldr	r3, [r1, #0]
 800ca80:	4682      	mov	sl, r0
 800ca82:	460c      	mov	r4, r1
 800ca84:	4690      	mov	r8, r2
 800ca86:	d82c      	bhi.n	800cae2 <__ssputs_r+0x6e>
 800ca88:	898a      	ldrh	r2, [r1, #12]
 800ca8a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ca8e:	d026      	beq.n	800cade <__ssputs_r+0x6a>
 800ca90:	6965      	ldr	r5, [r4, #20]
 800ca92:	6909      	ldr	r1, [r1, #16]
 800ca94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ca98:	eba3 0901 	sub.w	r9, r3, r1
 800ca9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800caa0:	1c7b      	adds	r3, r7, #1
 800caa2:	444b      	add	r3, r9
 800caa4:	106d      	asrs	r5, r5, #1
 800caa6:	429d      	cmp	r5, r3
 800caa8:	bf38      	it	cc
 800caaa:	461d      	movcc	r5, r3
 800caac:	0553      	lsls	r3, r2, #21
 800caae:	d527      	bpl.n	800cb00 <__ssputs_r+0x8c>
 800cab0:	4629      	mov	r1, r5
 800cab2:	f7ff fbd7 	bl	800c264 <_malloc_r>
 800cab6:	4606      	mov	r6, r0
 800cab8:	b360      	cbz	r0, 800cb14 <__ssputs_r+0xa0>
 800caba:	6921      	ldr	r1, [r4, #16]
 800cabc:	464a      	mov	r2, r9
 800cabe:	f7fe fcd2 	bl	800b466 <memcpy>
 800cac2:	89a3      	ldrh	r3, [r4, #12]
 800cac4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cacc:	81a3      	strh	r3, [r4, #12]
 800cace:	6126      	str	r6, [r4, #16]
 800cad0:	6165      	str	r5, [r4, #20]
 800cad2:	444e      	add	r6, r9
 800cad4:	eba5 0509 	sub.w	r5, r5, r9
 800cad8:	6026      	str	r6, [r4, #0]
 800cada:	60a5      	str	r5, [r4, #8]
 800cadc:	463e      	mov	r6, r7
 800cade:	42be      	cmp	r6, r7
 800cae0:	d900      	bls.n	800cae4 <__ssputs_r+0x70>
 800cae2:	463e      	mov	r6, r7
 800cae4:	6820      	ldr	r0, [r4, #0]
 800cae6:	4632      	mov	r2, r6
 800cae8:	4641      	mov	r1, r8
 800caea:	f000 f9c9 	bl	800ce80 <memmove>
 800caee:	68a3      	ldr	r3, [r4, #8]
 800caf0:	1b9b      	subs	r3, r3, r6
 800caf2:	60a3      	str	r3, [r4, #8]
 800caf4:	6823      	ldr	r3, [r4, #0]
 800caf6:	4433      	add	r3, r6
 800caf8:	6023      	str	r3, [r4, #0]
 800cafa:	2000      	movs	r0, #0
 800cafc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb00:	462a      	mov	r2, r5
 800cb02:	f000 fa2d 	bl	800cf60 <_realloc_r>
 800cb06:	4606      	mov	r6, r0
 800cb08:	2800      	cmp	r0, #0
 800cb0a:	d1e0      	bne.n	800cace <__ssputs_r+0x5a>
 800cb0c:	6921      	ldr	r1, [r4, #16]
 800cb0e:	4650      	mov	r0, sl
 800cb10:	f7ff fb34 	bl	800c17c <_free_r>
 800cb14:	230c      	movs	r3, #12
 800cb16:	f8ca 3000 	str.w	r3, [sl]
 800cb1a:	89a3      	ldrh	r3, [r4, #12]
 800cb1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb20:	81a3      	strh	r3, [r4, #12]
 800cb22:	f04f 30ff 	mov.w	r0, #4294967295
 800cb26:	e7e9      	b.n	800cafc <__ssputs_r+0x88>

0800cb28 <_svfiprintf_r>:
 800cb28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb2c:	4698      	mov	r8, r3
 800cb2e:	898b      	ldrh	r3, [r1, #12]
 800cb30:	061b      	lsls	r3, r3, #24
 800cb32:	b09d      	sub	sp, #116	; 0x74
 800cb34:	4607      	mov	r7, r0
 800cb36:	460d      	mov	r5, r1
 800cb38:	4614      	mov	r4, r2
 800cb3a:	d50e      	bpl.n	800cb5a <_svfiprintf_r+0x32>
 800cb3c:	690b      	ldr	r3, [r1, #16]
 800cb3e:	b963      	cbnz	r3, 800cb5a <_svfiprintf_r+0x32>
 800cb40:	2140      	movs	r1, #64	; 0x40
 800cb42:	f7ff fb8f 	bl	800c264 <_malloc_r>
 800cb46:	6028      	str	r0, [r5, #0]
 800cb48:	6128      	str	r0, [r5, #16]
 800cb4a:	b920      	cbnz	r0, 800cb56 <_svfiprintf_r+0x2e>
 800cb4c:	230c      	movs	r3, #12
 800cb4e:	603b      	str	r3, [r7, #0]
 800cb50:	f04f 30ff 	mov.w	r0, #4294967295
 800cb54:	e0d0      	b.n	800ccf8 <_svfiprintf_r+0x1d0>
 800cb56:	2340      	movs	r3, #64	; 0x40
 800cb58:	616b      	str	r3, [r5, #20]
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	9309      	str	r3, [sp, #36]	; 0x24
 800cb5e:	2320      	movs	r3, #32
 800cb60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb64:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb68:	2330      	movs	r3, #48	; 0x30
 800cb6a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cd10 <_svfiprintf_r+0x1e8>
 800cb6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cb72:	f04f 0901 	mov.w	r9, #1
 800cb76:	4623      	mov	r3, r4
 800cb78:	469a      	mov	sl, r3
 800cb7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb7e:	b10a      	cbz	r2, 800cb84 <_svfiprintf_r+0x5c>
 800cb80:	2a25      	cmp	r2, #37	; 0x25
 800cb82:	d1f9      	bne.n	800cb78 <_svfiprintf_r+0x50>
 800cb84:	ebba 0b04 	subs.w	fp, sl, r4
 800cb88:	d00b      	beq.n	800cba2 <_svfiprintf_r+0x7a>
 800cb8a:	465b      	mov	r3, fp
 800cb8c:	4622      	mov	r2, r4
 800cb8e:	4629      	mov	r1, r5
 800cb90:	4638      	mov	r0, r7
 800cb92:	f7ff ff6f 	bl	800ca74 <__ssputs_r>
 800cb96:	3001      	adds	r0, #1
 800cb98:	f000 80a9 	beq.w	800ccee <_svfiprintf_r+0x1c6>
 800cb9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb9e:	445a      	add	r2, fp
 800cba0:	9209      	str	r2, [sp, #36]	; 0x24
 800cba2:	f89a 3000 	ldrb.w	r3, [sl]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	f000 80a1 	beq.w	800ccee <_svfiprintf_r+0x1c6>
 800cbac:	2300      	movs	r3, #0
 800cbae:	f04f 32ff 	mov.w	r2, #4294967295
 800cbb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cbb6:	f10a 0a01 	add.w	sl, sl, #1
 800cbba:	9304      	str	r3, [sp, #16]
 800cbbc:	9307      	str	r3, [sp, #28]
 800cbbe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cbc2:	931a      	str	r3, [sp, #104]	; 0x68
 800cbc4:	4654      	mov	r4, sl
 800cbc6:	2205      	movs	r2, #5
 800cbc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbcc:	4850      	ldr	r0, [pc, #320]	; (800cd10 <_svfiprintf_r+0x1e8>)
 800cbce:	f7f3 fb27 	bl	8000220 <memchr>
 800cbd2:	9a04      	ldr	r2, [sp, #16]
 800cbd4:	b9d8      	cbnz	r0, 800cc0e <_svfiprintf_r+0xe6>
 800cbd6:	06d0      	lsls	r0, r2, #27
 800cbd8:	bf44      	itt	mi
 800cbda:	2320      	movmi	r3, #32
 800cbdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbe0:	0711      	lsls	r1, r2, #28
 800cbe2:	bf44      	itt	mi
 800cbe4:	232b      	movmi	r3, #43	; 0x2b
 800cbe6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbea:	f89a 3000 	ldrb.w	r3, [sl]
 800cbee:	2b2a      	cmp	r3, #42	; 0x2a
 800cbf0:	d015      	beq.n	800cc1e <_svfiprintf_r+0xf6>
 800cbf2:	9a07      	ldr	r2, [sp, #28]
 800cbf4:	4654      	mov	r4, sl
 800cbf6:	2000      	movs	r0, #0
 800cbf8:	f04f 0c0a 	mov.w	ip, #10
 800cbfc:	4621      	mov	r1, r4
 800cbfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc02:	3b30      	subs	r3, #48	; 0x30
 800cc04:	2b09      	cmp	r3, #9
 800cc06:	d94d      	bls.n	800cca4 <_svfiprintf_r+0x17c>
 800cc08:	b1b0      	cbz	r0, 800cc38 <_svfiprintf_r+0x110>
 800cc0a:	9207      	str	r2, [sp, #28]
 800cc0c:	e014      	b.n	800cc38 <_svfiprintf_r+0x110>
 800cc0e:	eba0 0308 	sub.w	r3, r0, r8
 800cc12:	fa09 f303 	lsl.w	r3, r9, r3
 800cc16:	4313      	orrs	r3, r2
 800cc18:	9304      	str	r3, [sp, #16]
 800cc1a:	46a2      	mov	sl, r4
 800cc1c:	e7d2      	b.n	800cbc4 <_svfiprintf_r+0x9c>
 800cc1e:	9b03      	ldr	r3, [sp, #12]
 800cc20:	1d19      	adds	r1, r3, #4
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	9103      	str	r1, [sp, #12]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	bfbb      	ittet	lt
 800cc2a:	425b      	neglt	r3, r3
 800cc2c:	f042 0202 	orrlt.w	r2, r2, #2
 800cc30:	9307      	strge	r3, [sp, #28]
 800cc32:	9307      	strlt	r3, [sp, #28]
 800cc34:	bfb8      	it	lt
 800cc36:	9204      	strlt	r2, [sp, #16]
 800cc38:	7823      	ldrb	r3, [r4, #0]
 800cc3a:	2b2e      	cmp	r3, #46	; 0x2e
 800cc3c:	d10c      	bne.n	800cc58 <_svfiprintf_r+0x130>
 800cc3e:	7863      	ldrb	r3, [r4, #1]
 800cc40:	2b2a      	cmp	r3, #42	; 0x2a
 800cc42:	d134      	bne.n	800ccae <_svfiprintf_r+0x186>
 800cc44:	9b03      	ldr	r3, [sp, #12]
 800cc46:	1d1a      	adds	r2, r3, #4
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	9203      	str	r2, [sp, #12]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	bfb8      	it	lt
 800cc50:	f04f 33ff 	movlt.w	r3, #4294967295
 800cc54:	3402      	adds	r4, #2
 800cc56:	9305      	str	r3, [sp, #20]
 800cc58:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800cd20 <_svfiprintf_r+0x1f8>
 800cc5c:	7821      	ldrb	r1, [r4, #0]
 800cc5e:	2203      	movs	r2, #3
 800cc60:	4650      	mov	r0, sl
 800cc62:	f7f3 fadd 	bl	8000220 <memchr>
 800cc66:	b138      	cbz	r0, 800cc78 <_svfiprintf_r+0x150>
 800cc68:	9b04      	ldr	r3, [sp, #16]
 800cc6a:	eba0 000a 	sub.w	r0, r0, sl
 800cc6e:	2240      	movs	r2, #64	; 0x40
 800cc70:	4082      	lsls	r2, r0
 800cc72:	4313      	orrs	r3, r2
 800cc74:	3401      	adds	r4, #1
 800cc76:	9304      	str	r3, [sp, #16]
 800cc78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc7c:	4825      	ldr	r0, [pc, #148]	; (800cd14 <_svfiprintf_r+0x1ec>)
 800cc7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cc82:	2206      	movs	r2, #6
 800cc84:	f7f3 facc 	bl	8000220 <memchr>
 800cc88:	2800      	cmp	r0, #0
 800cc8a:	d038      	beq.n	800ccfe <_svfiprintf_r+0x1d6>
 800cc8c:	4b22      	ldr	r3, [pc, #136]	; (800cd18 <_svfiprintf_r+0x1f0>)
 800cc8e:	bb1b      	cbnz	r3, 800ccd8 <_svfiprintf_r+0x1b0>
 800cc90:	9b03      	ldr	r3, [sp, #12]
 800cc92:	3307      	adds	r3, #7
 800cc94:	f023 0307 	bic.w	r3, r3, #7
 800cc98:	3308      	adds	r3, #8
 800cc9a:	9303      	str	r3, [sp, #12]
 800cc9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc9e:	4433      	add	r3, r6
 800cca0:	9309      	str	r3, [sp, #36]	; 0x24
 800cca2:	e768      	b.n	800cb76 <_svfiprintf_r+0x4e>
 800cca4:	fb0c 3202 	mla	r2, ip, r2, r3
 800cca8:	460c      	mov	r4, r1
 800ccaa:	2001      	movs	r0, #1
 800ccac:	e7a6      	b.n	800cbfc <_svfiprintf_r+0xd4>
 800ccae:	2300      	movs	r3, #0
 800ccb0:	3401      	adds	r4, #1
 800ccb2:	9305      	str	r3, [sp, #20]
 800ccb4:	4619      	mov	r1, r3
 800ccb6:	f04f 0c0a 	mov.w	ip, #10
 800ccba:	4620      	mov	r0, r4
 800ccbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ccc0:	3a30      	subs	r2, #48	; 0x30
 800ccc2:	2a09      	cmp	r2, #9
 800ccc4:	d903      	bls.n	800ccce <_svfiprintf_r+0x1a6>
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d0c6      	beq.n	800cc58 <_svfiprintf_r+0x130>
 800ccca:	9105      	str	r1, [sp, #20]
 800cccc:	e7c4      	b.n	800cc58 <_svfiprintf_r+0x130>
 800ccce:	fb0c 2101 	mla	r1, ip, r1, r2
 800ccd2:	4604      	mov	r4, r0
 800ccd4:	2301      	movs	r3, #1
 800ccd6:	e7f0      	b.n	800ccba <_svfiprintf_r+0x192>
 800ccd8:	ab03      	add	r3, sp, #12
 800ccda:	9300      	str	r3, [sp, #0]
 800ccdc:	462a      	mov	r2, r5
 800ccde:	4b0f      	ldr	r3, [pc, #60]	; (800cd1c <_svfiprintf_r+0x1f4>)
 800cce0:	a904      	add	r1, sp, #16
 800cce2:	4638      	mov	r0, r7
 800cce4:	f7fd fe2c 	bl	800a940 <_printf_float>
 800cce8:	1c42      	adds	r2, r0, #1
 800ccea:	4606      	mov	r6, r0
 800ccec:	d1d6      	bne.n	800cc9c <_svfiprintf_r+0x174>
 800ccee:	89ab      	ldrh	r3, [r5, #12]
 800ccf0:	065b      	lsls	r3, r3, #25
 800ccf2:	f53f af2d 	bmi.w	800cb50 <_svfiprintf_r+0x28>
 800ccf6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ccf8:	b01d      	add	sp, #116	; 0x74
 800ccfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccfe:	ab03      	add	r3, sp, #12
 800cd00:	9300      	str	r3, [sp, #0]
 800cd02:	462a      	mov	r2, r5
 800cd04:	4b05      	ldr	r3, [pc, #20]	; (800cd1c <_svfiprintf_r+0x1f4>)
 800cd06:	a904      	add	r1, sp, #16
 800cd08:	4638      	mov	r0, r7
 800cd0a:	f7fe f8bd 	bl	800ae88 <_printf_i>
 800cd0e:	e7eb      	b.n	800cce8 <_svfiprintf_r+0x1c0>
 800cd10:	0800f9ec 	.word	0x0800f9ec
 800cd14:	0800f9f6 	.word	0x0800f9f6
 800cd18:	0800a941 	.word	0x0800a941
 800cd1c:	0800ca75 	.word	0x0800ca75
 800cd20:	0800f9f2 	.word	0x0800f9f2

0800cd24 <__sflush_r>:
 800cd24:	898a      	ldrh	r2, [r1, #12]
 800cd26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd2a:	4605      	mov	r5, r0
 800cd2c:	0710      	lsls	r0, r2, #28
 800cd2e:	460c      	mov	r4, r1
 800cd30:	d458      	bmi.n	800cde4 <__sflush_r+0xc0>
 800cd32:	684b      	ldr	r3, [r1, #4]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	dc05      	bgt.n	800cd44 <__sflush_r+0x20>
 800cd38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	dc02      	bgt.n	800cd44 <__sflush_r+0x20>
 800cd3e:	2000      	movs	r0, #0
 800cd40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cd46:	2e00      	cmp	r6, #0
 800cd48:	d0f9      	beq.n	800cd3e <__sflush_r+0x1a>
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cd50:	682f      	ldr	r7, [r5, #0]
 800cd52:	6a21      	ldr	r1, [r4, #32]
 800cd54:	602b      	str	r3, [r5, #0]
 800cd56:	d032      	beq.n	800cdbe <__sflush_r+0x9a>
 800cd58:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cd5a:	89a3      	ldrh	r3, [r4, #12]
 800cd5c:	075a      	lsls	r2, r3, #29
 800cd5e:	d505      	bpl.n	800cd6c <__sflush_r+0x48>
 800cd60:	6863      	ldr	r3, [r4, #4]
 800cd62:	1ac0      	subs	r0, r0, r3
 800cd64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cd66:	b10b      	cbz	r3, 800cd6c <__sflush_r+0x48>
 800cd68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cd6a:	1ac0      	subs	r0, r0, r3
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	4602      	mov	r2, r0
 800cd70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cd72:	6a21      	ldr	r1, [r4, #32]
 800cd74:	4628      	mov	r0, r5
 800cd76:	47b0      	blx	r6
 800cd78:	1c43      	adds	r3, r0, #1
 800cd7a:	89a3      	ldrh	r3, [r4, #12]
 800cd7c:	d106      	bne.n	800cd8c <__sflush_r+0x68>
 800cd7e:	6829      	ldr	r1, [r5, #0]
 800cd80:	291d      	cmp	r1, #29
 800cd82:	d82b      	bhi.n	800cddc <__sflush_r+0xb8>
 800cd84:	4a29      	ldr	r2, [pc, #164]	; (800ce2c <__sflush_r+0x108>)
 800cd86:	410a      	asrs	r2, r1
 800cd88:	07d6      	lsls	r6, r2, #31
 800cd8a:	d427      	bmi.n	800cddc <__sflush_r+0xb8>
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	6062      	str	r2, [r4, #4]
 800cd90:	04d9      	lsls	r1, r3, #19
 800cd92:	6922      	ldr	r2, [r4, #16]
 800cd94:	6022      	str	r2, [r4, #0]
 800cd96:	d504      	bpl.n	800cda2 <__sflush_r+0x7e>
 800cd98:	1c42      	adds	r2, r0, #1
 800cd9a:	d101      	bne.n	800cda0 <__sflush_r+0x7c>
 800cd9c:	682b      	ldr	r3, [r5, #0]
 800cd9e:	b903      	cbnz	r3, 800cda2 <__sflush_r+0x7e>
 800cda0:	6560      	str	r0, [r4, #84]	; 0x54
 800cda2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cda4:	602f      	str	r7, [r5, #0]
 800cda6:	2900      	cmp	r1, #0
 800cda8:	d0c9      	beq.n	800cd3e <__sflush_r+0x1a>
 800cdaa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cdae:	4299      	cmp	r1, r3
 800cdb0:	d002      	beq.n	800cdb8 <__sflush_r+0x94>
 800cdb2:	4628      	mov	r0, r5
 800cdb4:	f7ff f9e2 	bl	800c17c <_free_r>
 800cdb8:	2000      	movs	r0, #0
 800cdba:	6360      	str	r0, [r4, #52]	; 0x34
 800cdbc:	e7c0      	b.n	800cd40 <__sflush_r+0x1c>
 800cdbe:	2301      	movs	r3, #1
 800cdc0:	4628      	mov	r0, r5
 800cdc2:	47b0      	blx	r6
 800cdc4:	1c41      	adds	r1, r0, #1
 800cdc6:	d1c8      	bne.n	800cd5a <__sflush_r+0x36>
 800cdc8:	682b      	ldr	r3, [r5, #0]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d0c5      	beq.n	800cd5a <__sflush_r+0x36>
 800cdce:	2b1d      	cmp	r3, #29
 800cdd0:	d001      	beq.n	800cdd6 <__sflush_r+0xb2>
 800cdd2:	2b16      	cmp	r3, #22
 800cdd4:	d101      	bne.n	800cdda <__sflush_r+0xb6>
 800cdd6:	602f      	str	r7, [r5, #0]
 800cdd8:	e7b1      	b.n	800cd3e <__sflush_r+0x1a>
 800cdda:	89a3      	ldrh	r3, [r4, #12]
 800cddc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cde0:	81a3      	strh	r3, [r4, #12]
 800cde2:	e7ad      	b.n	800cd40 <__sflush_r+0x1c>
 800cde4:	690f      	ldr	r7, [r1, #16]
 800cde6:	2f00      	cmp	r7, #0
 800cde8:	d0a9      	beq.n	800cd3e <__sflush_r+0x1a>
 800cdea:	0793      	lsls	r3, r2, #30
 800cdec:	680e      	ldr	r6, [r1, #0]
 800cdee:	bf08      	it	eq
 800cdf0:	694b      	ldreq	r3, [r1, #20]
 800cdf2:	600f      	str	r7, [r1, #0]
 800cdf4:	bf18      	it	ne
 800cdf6:	2300      	movne	r3, #0
 800cdf8:	eba6 0807 	sub.w	r8, r6, r7
 800cdfc:	608b      	str	r3, [r1, #8]
 800cdfe:	f1b8 0f00 	cmp.w	r8, #0
 800ce02:	dd9c      	ble.n	800cd3e <__sflush_r+0x1a>
 800ce04:	6a21      	ldr	r1, [r4, #32]
 800ce06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ce08:	4643      	mov	r3, r8
 800ce0a:	463a      	mov	r2, r7
 800ce0c:	4628      	mov	r0, r5
 800ce0e:	47b0      	blx	r6
 800ce10:	2800      	cmp	r0, #0
 800ce12:	dc06      	bgt.n	800ce22 <__sflush_r+0xfe>
 800ce14:	89a3      	ldrh	r3, [r4, #12]
 800ce16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce1a:	81a3      	strh	r3, [r4, #12]
 800ce1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ce20:	e78e      	b.n	800cd40 <__sflush_r+0x1c>
 800ce22:	4407      	add	r7, r0
 800ce24:	eba8 0800 	sub.w	r8, r8, r0
 800ce28:	e7e9      	b.n	800cdfe <__sflush_r+0xda>
 800ce2a:	bf00      	nop
 800ce2c:	dfbffffe 	.word	0xdfbffffe

0800ce30 <_fflush_r>:
 800ce30:	b538      	push	{r3, r4, r5, lr}
 800ce32:	690b      	ldr	r3, [r1, #16]
 800ce34:	4605      	mov	r5, r0
 800ce36:	460c      	mov	r4, r1
 800ce38:	b913      	cbnz	r3, 800ce40 <_fflush_r+0x10>
 800ce3a:	2500      	movs	r5, #0
 800ce3c:	4628      	mov	r0, r5
 800ce3e:	bd38      	pop	{r3, r4, r5, pc}
 800ce40:	b118      	cbz	r0, 800ce4a <_fflush_r+0x1a>
 800ce42:	6a03      	ldr	r3, [r0, #32]
 800ce44:	b90b      	cbnz	r3, 800ce4a <_fflush_r+0x1a>
 800ce46:	f7fe f9cd 	bl	800b1e4 <__sinit>
 800ce4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d0f3      	beq.n	800ce3a <_fflush_r+0xa>
 800ce52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ce54:	07d0      	lsls	r0, r2, #31
 800ce56:	d404      	bmi.n	800ce62 <_fflush_r+0x32>
 800ce58:	0599      	lsls	r1, r3, #22
 800ce5a:	d402      	bmi.n	800ce62 <_fflush_r+0x32>
 800ce5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce5e:	f7fe fb00 	bl	800b462 <__retarget_lock_acquire_recursive>
 800ce62:	4628      	mov	r0, r5
 800ce64:	4621      	mov	r1, r4
 800ce66:	f7ff ff5d 	bl	800cd24 <__sflush_r>
 800ce6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ce6c:	07da      	lsls	r2, r3, #31
 800ce6e:	4605      	mov	r5, r0
 800ce70:	d4e4      	bmi.n	800ce3c <_fflush_r+0xc>
 800ce72:	89a3      	ldrh	r3, [r4, #12]
 800ce74:	059b      	lsls	r3, r3, #22
 800ce76:	d4e1      	bmi.n	800ce3c <_fflush_r+0xc>
 800ce78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce7a:	f7fe faf3 	bl	800b464 <__retarget_lock_release_recursive>
 800ce7e:	e7dd      	b.n	800ce3c <_fflush_r+0xc>

0800ce80 <memmove>:
 800ce80:	4288      	cmp	r0, r1
 800ce82:	b510      	push	{r4, lr}
 800ce84:	eb01 0402 	add.w	r4, r1, r2
 800ce88:	d902      	bls.n	800ce90 <memmove+0x10>
 800ce8a:	4284      	cmp	r4, r0
 800ce8c:	4623      	mov	r3, r4
 800ce8e:	d807      	bhi.n	800cea0 <memmove+0x20>
 800ce90:	1e43      	subs	r3, r0, #1
 800ce92:	42a1      	cmp	r1, r4
 800ce94:	d008      	beq.n	800cea8 <memmove+0x28>
 800ce96:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ce9e:	e7f8      	b.n	800ce92 <memmove+0x12>
 800cea0:	4402      	add	r2, r0
 800cea2:	4601      	mov	r1, r0
 800cea4:	428a      	cmp	r2, r1
 800cea6:	d100      	bne.n	800ceaa <memmove+0x2a>
 800cea8:	bd10      	pop	{r4, pc}
 800ceaa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ceae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ceb2:	e7f7      	b.n	800cea4 <memmove+0x24>

0800ceb4 <_sbrk_r>:
 800ceb4:	b538      	push	{r3, r4, r5, lr}
 800ceb6:	4d06      	ldr	r5, [pc, #24]	; (800ced0 <_sbrk_r+0x1c>)
 800ceb8:	2300      	movs	r3, #0
 800ceba:	4604      	mov	r4, r0
 800cebc:	4608      	mov	r0, r1
 800cebe:	602b      	str	r3, [r5, #0]
 800cec0:	f7f8 f954 	bl	800516c <_sbrk>
 800cec4:	1c43      	adds	r3, r0, #1
 800cec6:	d102      	bne.n	800cece <_sbrk_r+0x1a>
 800cec8:	682b      	ldr	r3, [r5, #0]
 800ceca:	b103      	cbz	r3, 800cece <_sbrk_r+0x1a>
 800cecc:	6023      	str	r3, [r4, #0]
 800cece:	bd38      	pop	{r3, r4, r5, pc}
 800ced0:	20001fe8 	.word	0x20001fe8

0800ced4 <__assert_func>:
 800ced4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ced6:	4614      	mov	r4, r2
 800ced8:	461a      	mov	r2, r3
 800ceda:	4b09      	ldr	r3, [pc, #36]	; (800cf00 <__assert_func+0x2c>)
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	4605      	mov	r5, r0
 800cee0:	68d8      	ldr	r0, [r3, #12]
 800cee2:	b14c      	cbz	r4, 800cef8 <__assert_func+0x24>
 800cee4:	4b07      	ldr	r3, [pc, #28]	; (800cf04 <__assert_func+0x30>)
 800cee6:	9100      	str	r1, [sp, #0]
 800cee8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ceec:	4906      	ldr	r1, [pc, #24]	; (800cf08 <__assert_func+0x34>)
 800ceee:	462b      	mov	r3, r5
 800cef0:	f000 f872 	bl	800cfd8 <fiprintf>
 800cef4:	f000 f882 	bl	800cffc <abort>
 800cef8:	4b04      	ldr	r3, [pc, #16]	; (800cf0c <__assert_func+0x38>)
 800cefa:	461c      	mov	r4, r3
 800cefc:	e7f3      	b.n	800cee6 <__assert_func+0x12>
 800cefe:	bf00      	nop
 800cf00:	200005d4 	.word	0x200005d4
 800cf04:	0800fa07 	.word	0x0800fa07
 800cf08:	0800fa14 	.word	0x0800fa14
 800cf0c:	0800fa42 	.word	0x0800fa42

0800cf10 <_calloc_r>:
 800cf10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cf12:	fba1 2402 	umull	r2, r4, r1, r2
 800cf16:	b94c      	cbnz	r4, 800cf2c <_calloc_r+0x1c>
 800cf18:	4611      	mov	r1, r2
 800cf1a:	9201      	str	r2, [sp, #4]
 800cf1c:	f7ff f9a2 	bl	800c264 <_malloc_r>
 800cf20:	9a01      	ldr	r2, [sp, #4]
 800cf22:	4605      	mov	r5, r0
 800cf24:	b930      	cbnz	r0, 800cf34 <_calloc_r+0x24>
 800cf26:	4628      	mov	r0, r5
 800cf28:	b003      	add	sp, #12
 800cf2a:	bd30      	pop	{r4, r5, pc}
 800cf2c:	220c      	movs	r2, #12
 800cf2e:	6002      	str	r2, [r0, #0]
 800cf30:	2500      	movs	r5, #0
 800cf32:	e7f8      	b.n	800cf26 <_calloc_r+0x16>
 800cf34:	4621      	mov	r1, r4
 800cf36:	f7fe fa17 	bl	800b368 <memset>
 800cf3a:	e7f4      	b.n	800cf26 <_calloc_r+0x16>

0800cf3c <__ascii_mbtowc>:
 800cf3c:	b082      	sub	sp, #8
 800cf3e:	b901      	cbnz	r1, 800cf42 <__ascii_mbtowc+0x6>
 800cf40:	a901      	add	r1, sp, #4
 800cf42:	b142      	cbz	r2, 800cf56 <__ascii_mbtowc+0x1a>
 800cf44:	b14b      	cbz	r3, 800cf5a <__ascii_mbtowc+0x1e>
 800cf46:	7813      	ldrb	r3, [r2, #0]
 800cf48:	600b      	str	r3, [r1, #0]
 800cf4a:	7812      	ldrb	r2, [r2, #0]
 800cf4c:	1e10      	subs	r0, r2, #0
 800cf4e:	bf18      	it	ne
 800cf50:	2001      	movne	r0, #1
 800cf52:	b002      	add	sp, #8
 800cf54:	4770      	bx	lr
 800cf56:	4610      	mov	r0, r2
 800cf58:	e7fb      	b.n	800cf52 <__ascii_mbtowc+0x16>
 800cf5a:	f06f 0001 	mvn.w	r0, #1
 800cf5e:	e7f8      	b.n	800cf52 <__ascii_mbtowc+0x16>

0800cf60 <_realloc_r>:
 800cf60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf64:	4680      	mov	r8, r0
 800cf66:	4614      	mov	r4, r2
 800cf68:	460e      	mov	r6, r1
 800cf6a:	b921      	cbnz	r1, 800cf76 <_realloc_r+0x16>
 800cf6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf70:	4611      	mov	r1, r2
 800cf72:	f7ff b977 	b.w	800c264 <_malloc_r>
 800cf76:	b92a      	cbnz	r2, 800cf84 <_realloc_r+0x24>
 800cf78:	f7ff f900 	bl	800c17c <_free_r>
 800cf7c:	4625      	mov	r5, r4
 800cf7e:	4628      	mov	r0, r5
 800cf80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf84:	f000 f841 	bl	800d00a <_malloc_usable_size_r>
 800cf88:	4284      	cmp	r4, r0
 800cf8a:	4607      	mov	r7, r0
 800cf8c:	d802      	bhi.n	800cf94 <_realloc_r+0x34>
 800cf8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cf92:	d812      	bhi.n	800cfba <_realloc_r+0x5a>
 800cf94:	4621      	mov	r1, r4
 800cf96:	4640      	mov	r0, r8
 800cf98:	f7ff f964 	bl	800c264 <_malloc_r>
 800cf9c:	4605      	mov	r5, r0
 800cf9e:	2800      	cmp	r0, #0
 800cfa0:	d0ed      	beq.n	800cf7e <_realloc_r+0x1e>
 800cfa2:	42bc      	cmp	r4, r7
 800cfa4:	4622      	mov	r2, r4
 800cfa6:	4631      	mov	r1, r6
 800cfa8:	bf28      	it	cs
 800cfaa:	463a      	movcs	r2, r7
 800cfac:	f7fe fa5b 	bl	800b466 <memcpy>
 800cfb0:	4631      	mov	r1, r6
 800cfb2:	4640      	mov	r0, r8
 800cfb4:	f7ff f8e2 	bl	800c17c <_free_r>
 800cfb8:	e7e1      	b.n	800cf7e <_realloc_r+0x1e>
 800cfba:	4635      	mov	r5, r6
 800cfbc:	e7df      	b.n	800cf7e <_realloc_r+0x1e>

0800cfbe <__ascii_wctomb>:
 800cfbe:	b149      	cbz	r1, 800cfd4 <__ascii_wctomb+0x16>
 800cfc0:	2aff      	cmp	r2, #255	; 0xff
 800cfc2:	bf85      	ittet	hi
 800cfc4:	238a      	movhi	r3, #138	; 0x8a
 800cfc6:	6003      	strhi	r3, [r0, #0]
 800cfc8:	700a      	strbls	r2, [r1, #0]
 800cfca:	f04f 30ff 	movhi.w	r0, #4294967295
 800cfce:	bf98      	it	ls
 800cfd0:	2001      	movls	r0, #1
 800cfd2:	4770      	bx	lr
 800cfd4:	4608      	mov	r0, r1
 800cfd6:	4770      	bx	lr

0800cfd8 <fiprintf>:
 800cfd8:	b40e      	push	{r1, r2, r3}
 800cfda:	b503      	push	{r0, r1, lr}
 800cfdc:	4601      	mov	r1, r0
 800cfde:	ab03      	add	r3, sp, #12
 800cfe0:	4805      	ldr	r0, [pc, #20]	; (800cff8 <fiprintf+0x20>)
 800cfe2:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfe6:	6800      	ldr	r0, [r0, #0]
 800cfe8:	9301      	str	r3, [sp, #4]
 800cfea:	f000 f83f 	bl	800d06c <_vfiprintf_r>
 800cfee:	b002      	add	sp, #8
 800cff0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cff4:	b003      	add	sp, #12
 800cff6:	4770      	bx	lr
 800cff8:	200005d4 	.word	0x200005d4

0800cffc <abort>:
 800cffc:	b508      	push	{r3, lr}
 800cffe:	2006      	movs	r0, #6
 800d000:	f000 fa0c 	bl	800d41c <raise>
 800d004:	2001      	movs	r0, #1
 800d006:	f7f8 f885 	bl	8005114 <_exit>

0800d00a <_malloc_usable_size_r>:
 800d00a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d00e:	1f18      	subs	r0, r3, #4
 800d010:	2b00      	cmp	r3, #0
 800d012:	bfbc      	itt	lt
 800d014:	580b      	ldrlt	r3, [r1, r0]
 800d016:	18c0      	addlt	r0, r0, r3
 800d018:	4770      	bx	lr

0800d01a <__sfputc_r>:
 800d01a:	6893      	ldr	r3, [r2, #8]
 800d01c:	3b01      	subs	r3, #1
 800d01e:	2b00      	cmp	r3, #0
 800d020:	b410      	push	{r4}
 800d022:	6093      	str	r3, [r2, #8]
 800d024:	da08      	bge.n	800d038 <__sfputc_r+0x1e>
 800d026:	6994      	ldr	r4, [r2, #24]
 800d028:	42a3      	cmp	r3, r4
 800d02a:	db01      	blt.n	800d030 <__sfputc_r+0x16>
 800d02c:	290a      	cmp	r1, #10
 800d02e:	d103      	bne.n	800d038 <__sfputc_r+0x1e>
 800d030:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d034:	f000 b934 	b.w	800d2a0 <__swbuf_r>
 800d038:	6813      	ldr	r3, [r2, #0]
 800d03a:	1c58      	adds	r0, r3, #1
 800d03c:	6010      	str	r0, [r2, #0]
 800d03e:	7019      	strb	r1, [r3, #0]
 800d040:	4608      	mov	r0, r1
 800d042:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d046:	4770      	bx	lr

0800d048 <__sfputs_r>:
 800d048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d04a:	4606      	mov	r6, r0
 800d04c:	460f      	mov	r7, r1
 800d04e:	4614      	mov	r4, r2
 800d050:	18d5      	adds	r5, r2, r3
 800d052:	42ac      	cmp	r4, r5
 800d054:	d101      	bne.n	800d05a <__sfputs_r+0x12>
 800d056:	2000      	movs	r0, #0
 800d058:	e007      	b.n	800d06a <__sfputs_r+0x22>
 800d05a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d05e:	463a      	mov	r2, r7
 800d060:	4630      	mov	r0, r6
 800d062:	f7ff ffda 	bl	800d01a <__sfputc_r>
 800d066:	1c43      	adds	r3, r0, #1
 800d068:	d1f3      	bne.n	800d052 <__sfputs_r+0xa>
 800d06a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d06c <_vfiprintf_r>:
 800d06c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d070:	460d      	mov	r5, r1
 800d072:	b09d      	sub	sp, #116	; 0x74
 800d074:	4614      	mov	r4, r2
 800d076:	4698      	mov	r8, r3
 800d078:	4606      	mov	r6, r0
 800d07a:	b118      	cbz	r0, 800d084 <_vfiprintf_r+0x18>
 800d07c:	6a03      	ldr	r3, [r0, #32]
 800d07e:	b90b      	cbnz	r3, 800d084 <_vfiprintf_r+0x18>
 800d080:	f7fe f8b0 	bl	800b1e4 <__sinit>
 800d084:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d086:	07d9      	lsls	r1, r3, #31
 800d088:	d405      	bmi.n	800d096 <_vfiprintf_r+0x2a>
 800d08a:	89ab      	ldrh	r3, [r5, #12]
 800d08c:	059a      	lsls	r2, r3, #22
 800d08e:	d402      	bmi.n	800d096 <_vfiprintf_r+0x2a>
 800d090:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d092:	f7fe f9e6 	bl	800b462 <__retarget_lock_acquire_recursive>
 800d096:	89ab      	ldrh	r3, [r5, #12]
 800d098:	071b      	lsls	r3, r3, #28
 800d09a:	d501      	bpl.n	800d0a0 <_vfiprintf_r+0x34>
 800d09c:	692b      	ldr	r3, [r5, #16]
 800d09e:	b99b      	cbnz	r3, 800d0c8 <_vfiprintf_r+0x5c>
 800d0a0:	4629      	mov	r1, r5
 800d0a2:	4630      	mov	r0, r6
 800d0a4:	f000 f93a 	bl	800d31c <__swsetup_r>
 800d0a8:	b170      	cbz	r0, 800d0c8 <_vfiprintf_r+0x5c>
 800d0aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d0ac:	07dc      	lsls	r4, r3, #31
 800d0ae:	d504      	bpl.n	800d0ba <_vfiprintf_r+0x4e>
 800d0b0:	f04f 30ff 	mov.w	r0, #4294967295
 800d0b4:	b01d      	add	sp, #116	; 0x74
 800d0b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0ba:	89ab      	ldrh	r3, [r5, #12]
 800d0bc:	0598      	lsls	r0, r3, #22
 800d0be:	d4f7      	bmi.n	800d0b0 <_vfiprintf_r+0x44>
 800d0c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d0c2:	f7fe f9cf 	bl	800b464 <__retarget_lock_release_recursive>
 800d0c6:	e7f3      	b.n	800d0b0 <_vfiprintf_r+0x44>
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	9309      	str	r3, [sp, #36]	; 0x24
 800d0cc:	2320      	movs	r3, #32
 800d0ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d0d2:	f8cd 800c 	str.w	r8, [sp, #12]
 800d0d6:	2330      	movs	r3, #48	; 0x30
 800d0d8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d28c <_vfiprintf_r+0x220>
 800d0dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d0e0:	f04f 0901 	mov.w	r9, #1
 800d0e4:	4623      	mov	r3, r4
 800d0e6:	469a      	mov	sl, r3
 800d0e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d0ec:	b10a      	cbz	r2, 800d0f2 <_vfiprintf_r+0x86>
 800d0ee:	2a25      	cmp	r2, #37	; 0x25
 800d0f0:	d1f9      	bne.n	800d0e6 <_vfiprintf_r+0x7a>
 800d0f2:	ebba 0b04 	subs.w	fp, sl, r4
 800d0f6:	d00b      	beq.n	800d110 <_vfiprintf_r+0xa4>
 800d0f8:	465b      	mov	r3, fp
 800d0fa:	4622      	mov	r2, r4
 800d0fc:	4629      	mov	r1, r5
 800d0fe:	4630      	mov	r0, r6
 800d100:	f7ff ffa2 	bl	800d048 <__sfputs_r>
 800d104:	3001      	adds	r0, #1
 800d106:	f000 80a9 	beq.w	800d25c <_vfiprintf_r+0x1f0>
 800d10a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d10c:	445a      	add	r2, fp
 800d10e:	9209      	str	r2, [sp, #36]	; 0x24
 800d110:	f89a 3000 	ldrb.w	r3, [sl]
 800d114:	2b00      	cmp	r3, #0
 800d116:	f000 80a1 	beq.w	800d25c <_vfiprintf_r+0x1f0>
 800d11a:	2300      	movs	r3, #0
 800d11c:	f04f 32ff 	mov.w	r2, #4294967295
 800d120:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d124:	f10a 0a01 	add.w	sl, sl, #1
 800d128:	9304      	str	r3, [sp, #16]
 800d12a:	9307      	str	r3, [sp, #28]
 800d12c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d130:	931a      	str	r3, [sp, #104]	; 0x68
 800d132:	4654      	mov	r4, sl
 800d134:	2205      	movs	r2, #5
 800d136:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d13a:	4854      	ldr	r0, [pc, #336]	; (800d28c <_vfiprintf_r+0x220>)
 800d13c:	f7f3 f870 	bl	8000220 <memchr>
 800d140:	9a04      	ldr	r2, [sp, #16]
 800d142:	b9d8      	cbnz	r0, 800d17c <_vfiprintf_r+0x110>
 800d144:	06d1      	lsls	r1, r2, #27
 800d146:	bf44      	itt	mi
 800d148:	2320      	movmi	r3, #32
 800d14a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d14e:	0713      	lsls	r3, r2, #28
 800d150:	bf44      	itt	mi
 800d152:	232b      	movmi	r3, #43	; 0x2b
 800d154:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d158:	f89a 3000 	ldrb.w	r3, [sl]
 800d15c:	2b2a      	cmp	r3, #42	; 0x2a
 800d15e:	d015      	beq.n	800d18c <_vfiprintf_r+0x120>
 800d160:	9a07      	ldr	r2, [sp, #28]
 800d162:	4654      	mov	r4, sl
 800d164:	2000      	movs	r0, #0
 800d166:	f04f 0c0a 	mov.w	ip, #10
 800d16a:	4621      	mov	r1, r4
 800d16c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d170:	3b30      	subs	r3, #48	; 0x30
 800d172:	2b09      	cmp	r3, #9
 800d174:	d94d      	bls.n	800d212 <_vfiprintf_r+0x1a6>
 800d176:	b1b0      	cbz	r0, 800d1a6 <_vfiprintf_r+0x13a>
 800d178:	9207      	str	r2, [sp, #28]
 800d17a:	e014      	b.n	800d1a6 <_vfiprintf_r+0x13a>
 800d17c:	eba0 0308 	sub.w	r3, r0, r8
 800d180:	fa09 f303 	lsl.w	r3, r9, r3
 800d184:	4313      	orrs	r3, r2
 800d186:	9304      	str	r3, [sp, #16]
 800d188:	46a2      	mov	sl, r4
 800d18a:	e7d2      	b.n	800d132 <_vfiprintf_r+0xc6>
 800d18c:	9b03      	ldr	r3, [sp, #12]
 800d18e:	1d19      	adds	r1, r3, #4
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	9103      	str	r1, [sp, #12]
 800d194:	2b00      	cmp	r3, #0
 800d196:	bfbb      	ittet	lt
 800d198:	425b      	neglt	r3, r3
 800d19a:	f042 0202 	orrlt.w	r2, r2, #2
 800d19e:	9307      	strge	r3, [sp, #28]
 800d1a0:	9307      	strlt	r3, [sp, #28]
 800d1a2:	bfb8      	it	lt
 800d1a4:	9204      	strlt	r2, [sp, #16]
 800d1a6:	7823      	ldrb	r3, [r4, #0]
 800d1a8:	2b2e      	cmp	r3, #46	; 0x2e
 800d1aa:	d10c      	bne.n	800d1c6 <_vfiprintf_r+0x15a>
 800d1ac:	7863      	ldrb	r3, [r4, #1]
 800d1ae:	2b2a      	cmp	r3, #42	; 0x2a
 800d1b0:	d134      	bne.n	800d21c <_vfiprintf_r+0x1b0>
 800d1b2:	9b03      	ldr	r3, [sp, #12]
 800d1b4:	1d1a      	adds	r2, r3, #4
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	9203      	str	r2, [sp, #12]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	bfb8      	it	lt
 800d1be:	f04f 33ff 	movlt.w	r3, #4294967295
 800d1c2:	3402      	adds	r4, #2
 800d1c4:	9305      	str	r3, [sp, #20]
 800d1c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d29c <_vfiprintf_r+0x230>
 800d1ca:	7821      	ldrb	r1, [r4, #0]
 800d1cc:	2203      	movs	r2, #3
 800d1ce:	4650      	mov	r0, sl
 800d1d0:	f7f3 f826 	bl	8000220 <memchr>
 800d1d4:	b138      	cbz	r0, 800d1e6 <_vfiprintf_r+0x17a>
 800d1d6:	9b04      	ldr	r3, [sp, #16]
 800d1d8:	eba0 000a 	sub.w	r0, r0, sl
 800d1dc:	2240      	movs	r2, #64	; 0x40
 800d1de:	4082      	lsls	r2, r0
 800d1e0:	4313      	orrs	r3, r2
 800d1e2:	3401      	adds	r4, #1
 800d1e4:	9304      	str	r3, [sp, #16]
 800d1e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1ea:	4829      	ldr	r0, [pc, #164]	; (800d290 <_vfiprintf_r+0x224>)
 800d1ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d1f0:	2206      	movs	r2, #6
 800d1f2:	f7f3 f815 	bl	8000220 <memchr>
 800d1f6:	2800      	cmp	r0, #0
 800d1f8:	d03f      	beq.n	800d27a <_vfiprintf_r+0x20e>
 800d1fa:	4b26      	ldr	r3, [pc, #152]	; (800d294 <_vfiprintf_r+0x228>)
 800d1fc:	bb1b      	cbnz	r3, 800d246 <_vfiprintf_r+0x1da>
 800d1fe:	9b03      	ldr	r3, [sp, #12]
 800d200:	3307      	adds	r3, #7
 800d202:	f023 0307 	bic.w	r3, r3, #7
 800d206:	3308      	adds	r3, #8
 800d208:	9303      	str	r3, [sp, #12]
 800d20a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d20c:	443b      	add	r3, r7
 800d20e:	9309      	str	r3, [sp, #36]	; 0x24
 800d210:	e768      	b.n	800d0e4 <_vfiprintf_r+0x78>
 800d212:	fb0c 3202 	mla	r2, ip, r2, r3
 800d216:	460c      	mov	r4, r1
 800d218:	2001      	movs	r0, #1
 800d21a:	e7a6      	b.n	800d16a <_vfiprintf_r+0xfe>
 800d21c:	2300      	movs	r3, #0
 800d21e:	3401      	adds	r4, #1
 800d220:	9305      	str	r3, [sp, #20]
 800d222:	4619      	mov	r1, r3
 800d224:	f04f 0c0a 	mov.w	ip, #10
 800d228:	4620      	mov	r0, r4
 800d22a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d22e:	3a30      	subs	r2, #48	; 0x30
 800d230:	2a09      	cmp	r2, #9
 800d232:	d903      	bls.n	800d23c <_vfiprintf_r+0x1d0>
 800d234:	2b00      	cmp	r3, #0
 800d236:	d0c6      	beq.n	800d1c6 <_vfiprintf_r+0x15a>
 800d238:	9105      	str	r1, [sp, #20]
 800d23a:	e7c4      	b.n	800d1c6 <_vfiprintf_r+0x15a>
 800d23c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d240:	4604      	mov	r4, r0
 800d242:	2301      	movs	r3, #1
 800d244:	e7f0      	b.n	800d228 <_vfiprintf_r+0x1bc>
 800d246:	ab03      	add	r3, sp, #12
 800d248:	9300      	str	r3, [sp, #0]
 800d24a:	462a      	mov	r2, r5
 800d24c:	4b12      	ldr	r3, [pc, #72]	; (800d298 <_vfiprintf_r+0x22c>)
 800d24e:	a904      	add	r1, sp, #16
 800d250:	4630      	mov	r0, r6
 800d252:	f7fd fb75 	bl	800a940 <_printf_float>
 800d256:	4607      	mov	r7, r0
 800d258:	1c78      	adds	r0, r7, #1
 800d25a:	d1d6      	bne.n	800d20a <_vfiprintf_r+0x19e>
 800d25c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d25e:	07d9      	lsls	r1, r3, #31
 800d260:	d405      	bmi.n	800d26e <_vfiprintf_r+0x202>
 800d262:	89ab      	ldrh	r3, [r5, #12]
 800d264:	059a      	lsls	r2, r3, #22
 800d266:	d402      	bmi.n	800d26e <_vfiprintf_r+0x202>
 800d268:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d26a:	f7fe f8fb 	bl	800b464 <__retarget_lock_release_recursive>
 800d26e:	89ab      	ldrh	r3, [r5, #12]
 800d270:	065b      	lsls	r3, r3, #25
 800d272:	f53f af1d 	bmi.w	800d0b0 <_vfiprintf_r+0x44>
 800d276:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d278:	e71c      	b.n	800d0b4 <_vfiprintf_r+0x48>
 800d27a:	ab03      	add	r3, sp, #12
 800d27c:	9300      	str	r3, [sp, #0]
 800d27e:	462a      	mov	r2, r5
 800d280:	4b05      	ldr	r3, [pc, #20]	; (800d298 <_vfiprintf_r+0x22c>)
 800d282:	a904      	add	r1, sp, #16
 800d284:	4630      	mov	r0, r6
 800d286:	f7fd fdff 	bl	800ae88 <_printf_i>
 800d28a:	e7e4      	b.n	800d256 <_vfiprintf_r+0x1ea>
 800d28c:	0800f9ec 	.word	0x0800f9ec
 800d290:	0800f9f6 	.word	0x0800f9f6
 800d294:	0800a941 	.word	0x0800a941
 800d298:	0800d049 	.word	0x0800d049
 800d29c:	0800f9f2 	.word	0x0800f9f2

0800d2a0 <__swbuf_r>:
 800d2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2a2:	460e      	mov	r6, r1
 800d2a4:	4614      	mov	r4, r2
 800d2a6:	4605      	mov	r5, r0
 800d2a8:	b118      	cbz	r0, 800d2b2 <__swbuf_r+0x12>
 800d2aa:	6a03      	ldr	r3, [r0, #32]
 800d2ac:	b90b      	cbnz	r3, 800d2b2 <__swbuf_r+0x12>
 800d2ae:	f7fd ff99 	bl	800b1e4 <__sinit>
 800d2b2:	69a3      	ldr	r3, [r4, #24]
 800d2b4:	60a3      	str	r3, [r4, #8]
 800d2b6:	89a3      	ldrh	r3, [r4, #12]
 800d2b8:	071a      	lsls	r2, r3, #28
 800d2ba:	d525      	bpl.n	800d308 <__swbuf_r+0x68>
 800d2bc:	6923      	ldr	r3, [r4, #16]
 800d2be:	b31b      	cbz	r3, 800d308 <__swbuf_r+0x68>
 800d2c0:	6823      	ldr	r3, [r4, #0]
 800d2c2:	6922      	ldr	r2, [r4, #16]
 800d2c4:	1a98      	subs	r0, r3, r2
 800d2c6:	6963      	ldr	r3, [r4, #20]
 800d2c8:	b2f6      	uxtb	r6, r6
 800d2ca:	4283      	cmp	r3, r0
 800d2cc:	4637      	mov	r7, r6
 800d2ce:	dc04      	bgt.n	800d2da <__swbuf_r+0x3a>
 800d2d0:	4621      	mov	r1, r4
 800d2d2:	4628      	mov	r0, r5
 800d2d4:	f7ff fdac 	bl	800ce30 <_fflush_r>
 800d2d8:	b9e0      	cbnz	r0, 800d314 <__swbuf_r+0x74>
 800d2da:	68a3      	ldr	r3, [r4, #8]
 800d2dc:	3b01      	subs	r3, #1
 800d2de:	60a3      	str	r3, [r4, #8]
 800d2e0:	6823      	ldr	r3, [r4, #0]
 800d2e2:	1c5a      	adds	r2, r3, #1
 800d2e4:	6022      	str	r2, [r4, #0]
 800d2e6:	701e      	strb	r6, [r3, #0]
 800d2e8:	6962      	ldr	r2, [r4, #20]
 800d2ea:	1c43      	adds	r3, r0, #1
 800d2ec:	429a      	cmp	r2, r3
 800d2ee:	d004      	beq.n	800d2fa <__swbuf_r+0x5a>
 800d2f0:	89a3      	ldrh	r3, [r4, #12]
 800d2f2:	07db      	lsls	r3, r3, #31
 800d2f4:	d506      	bpl.n	800d304 <__swbuf_r+0x64>
 800d2f6:	2e0a      	cmp	r6, #10
 800d2f8:	d104      	bne.n	800d304 <__swbuf_r+0x64>
 800d2fa:	4621      	mov	r1, r4
 800d2fc:	4628      	mov	r0, r5
 800d2fe:	f7ff fd97 	bl	800ce30 <_fflush_r>
 800d302:	b938      	cbnz	r0, 800d314 <__swbuf_r+0x74>
 800d304:	4638      	mov	r0, r7
 800d306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d308:	4621      	mov	r1, r4
 800d30a:	4628      	mov	r0, r5
 800d30c:	f000 f806 	bl	800d31c <__swsetup_r>
 800d310:	2800      	cmp	r0, #0
 800d312:	d0d5      	beq.n	800d2c0 <__swbuf_r+0x20>
 800d314:	f04f 37ff 	mov.w	r7, #4294967295
 800d318:	e7f4      	b.n	800d304 <__swbuf_r+0x64>
	...

0800d31c <__swsetup_r>:
 800d31c:	b538      	push	{r3, r4, r5, lr}
 800d31e:	4b2a      	ldr	r3, [pc, #168]	; (800d3c8 <__swsetup_r+0xac>)
 800d320:	4605      	mov	r5, r0
 800d322:	6818      	ldr	r0, [r3, #0]
 800d324:	460c      	mov	r4, r1
 800d326:	b118      	cbz	r0, 800d330 <__swsetup_r+0x14>
 800d328:	6a03      	ldr	r3, [r0, #32]
 800d32a:	b90b      	cbnz	r3, 800d330 <__swsetup_r+0x14>
 800d32c:	f7fd ff5a 	bl	800b1e4 <__sinit>
 800d330:	89a3      	ldrh	r3, [r4, #12]
 800d332:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d336:	0718      	lsls	r0, r3, #28
 800d338:	d422      	bmi.n	800d380 <__swsetup_r+0x64>
 800d33a:	06d9      	lsls	r1, r3, #27
 800d33c:	d407      	bmi.n	800d34e <__swsetup_r+0x32>
 800d33e:	2309      	movs	r3, #9
 800d340:	602b      	str	r3, [r5, #0]
 800d342:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d346:	81a3      	strh	r3, [r4, #12]
 800d348:	f04f 30ff 	mov.w	r0, #4294967295
 800d34c:	e034      	b.n	800d3b8 <__swsetup_r+0x9c>
 800d34e:	0758      	lsls	r0, r3, #29
 800d350:	d512      	bpl.n	800d378 <__swsetup_r+0x5c>
 800d352:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d354:	b141      	cbz	r1, 800d368 <__swsetup_r+0x4c>
 800d356:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d35a:	4299      	cmp	r1, r3
 800d35c:	d002      	beq.n	800d364 <__swsetup_r+0x48>
 800d35e:	4628      	mov	r0, r5
 800d360:	f7fe ff0c 	bl	800c17c <_free_r>
 800d364:	2300      	movs	r3, #0
 800d366:	6363      	str	r3, [r4, #52]	; 0x34
 800d368:	89a3      	ldrh	r3, [r4, #12]
 800d36a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d36e:	81a3      	strh	r3, [r4, #12]
 800d370:	2300      	movs	r3, #0
 800d372:	6063      	str	r3, [r4, #4]
 800d374:	6923      	ldr	r3, [r4, #16]
 800d376:	6023      	str	r3, [r4, #0]
 800d378:	89a3      	ldrh	r3, [r4, #12]
 800d37a:	f043 0308 	orr.w	r3, r3, #8
 800d37e:	81a3      	strh	r3, [r4, #12]
 800d380:	6923      	ldr	r3, [r4, #16]
 800d382:	b94b      	cbnz	r3, 800d398 <__swsetup_r+0x7c>
 800d384:	89a3      	ldrh	r3, [r4, #12]
 800d386:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d38a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d38e:	d003      	beq.n	800d398 <__swsetup_r+0x7c>
 800d390:	4621      	mov	r1, r4
 800d392:	4628      	mov	r0, r5
 800d394:	f000 f884 	bl	800d4a0 <__smakebuf_r>
 800d398:	89a0      	ldrh	r0, [r4, #12]
 800d39a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d39e:	f010 0301 	ands.w	r3, r0, #1
 800d3a2:	d00a      	beq.n	800d3ba <__swsetup_r+0x9e>
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	60a3      	str	r3, [r4, #8]
 800d3a8:	6963      	ldr	r3, [r4, #20]
 800d3aa:	425b      	negs	r3, r3
 800d3ac:	61a3      	str	r3, [r4, #24]
 800d3ae:	6923      	ldr	r3, [r4, #16]
 800d3b0:	b943      	cbnz	r3, 800d3c4 <__swsetup_r+0xa8>
 800d3b2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d3b6:	d1c4      	bne.n	800d342 <__swsetup_r+0x26>
 800d3b8:	bd38      	pop	{r3, r4, r5, pc}
 800d3ba:	0781      	lsls	r1, r0, #30
 800d3bc:	bf58      	it	pl
 800d3be:	6963      	ldrpl	r3, [r4, #20]
 800d3c0:	60a3      	str	r3, [r4, #8]
 800d3c2:	e7f4      	b.n	800d3ae <__swsetup_r+0x92>
 800d3c4:	2000      	movs	r0, #0
 800d3c6:	e7f7      	b.n	800d3b8 <__swsetup_r+0x9c>
 800d3c8:	200005d4 	.word	0x200005d4

0800d3cc <_raise_r>:
 800d3cc:	291f      	cmp	r1, #31
 800d3ce:	b538      	push	{r3, r4, r5, lr}
 800d3d0:	4604      	mov	r4, r0
 800d3d2:	460d      	mov	r5, r1
 800d3d4:	d904      	bls.n	800d3e0 <_raise_r+0x14>
 800d3d6:	2316      	movs	r3, #22
 800d3d8:	6003      	str	r3, [r0, #0]
 800d3da:	f04f 30ff 	mov.w	r0, #4294967295
 800d3de:	bd38      	pop	{r3, r4, r5, pc}
 800d3e0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d3e2:	b112      	cbz	r2, 800d3ea <_raise_r+0x1e>
 800d3e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d3e8:	b94b      	cbnz	r3, 800d3fe <_raise_r+0x32>
 800d3ea:	4620      	mov	r0, r4
 800d3ec:	f000 f830 	bl	800d450 <_getpid_r>
 800d3f0:	462a      	mov	r2, r5
 800d3f2:	4601      	mov	r1, r0
 800d3f4:	4620      	mov	r0, r4
 800d3f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d3fa:	f000 b817 	b.w	800d42c <_kill_r>
 800d3fe:	2b01      	cmp	r3, #1
 800d400:	d00a      	beq.n	800d418 <_raise_r+0x4c>
 800d402:	1c59      	adds	r1, r3, #1
 800d404:	d103      	bne.n	800d40e <_raise_r+0x42>
 800d406:	2316      	movs	r3, #22
 800d408:	6003      	str	r3, [r0, #0]
 800d40a:	2001      	movs	r0, #1
 800d40c:	e7e7      	b.n	800d3de <_raise_r+0x12>
 800d40e:	2400      	movs	r4, #0
 800d410:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d414:	4628      	mov	r0, r5
 800d416:	4798      	blx	r3
 800d418:	2000      	movs	r0, #0
 800d41a:	e7e0      	b.n	800d3de <_raise_r+0x12>

0800d41c <raise>:
 800d41c:	4b02      	ldr	r3, [pc, #8]	; (800d428 <raise+0xc>)
 800d41e:	4601      	mov	r1, r0
 800d420:	6818      	ldr	r0, [r3, #0]
 800d422:	f7ff bfd3 	b.w	800d3cc <_raise_r>
 800d426:	bf00      	nop
 800d428:	200005d4 	.word	0x200005d4

0800d42c <_kill_r>:
 800d42c:	b538      	push	{r3, r4, r5, lr}
 800d42e:	4d07      	ldr	r5, [pc, #28]	; (800d44c <_kill_r+0x20>)
 800d430:	2300      	movs	r3, #0
 800d432:	4604      	mov	r4, r0
 800d434:	4608      	mov	r0, r1
 800d436:	4611      	mov	r1, r2
 800d438:	602b      	str	r3, [r5, #0]
 800d43a:	f7f7 fe63 	bl	8005104 <_kill>
 800d43e:	1c43      	adds	r3, r0, #1
 800d440:	d102      	bne.n	800d448 <_kill_r+0x1c>
 800d442:	682b      	ldr	r3, [r5, #0]
 800d444:	b103      	cbz	r3, 800d448 <_kill_r+0x1c>
 800d446:	6023      	str	r3, [r4, #0]
 800d448:	bd38      	pop	{r3, r4, r5, pc}
 800d44a:	bf00      	nop
 800d44c:	20001fe8 	.word	0x20001fe8

0800d450 <_getpid_r>:
 800d450:	f7f7 be56 	b.w	8005100 <_getpid>

0800d454 <__swhatbuf_r>:
 800d454:	b570      	push	{r4, r5, r6, lr}
 800d456:	460c      	mov	r4, r1
 800d458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d45c:	2900      	cmp	r1, #0
 800d45e:	b096      	sub	sp, #88	; 0x58
 800d460:	4615      	mov	r5, r2
 800d462:	461e      	mov	r6, r3
 800d464:	da0d      	bge.n	800d482 <__swhatbuf_r+0x2e>
 800d466:	89a3      	ldrh	r3, [r4, #12]
 800d468:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d46c:	f04f 0100 	mov.w	r1, #0
 800d470:	bf0c      	ite	eq
 800d472:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d476:	2340      	movne	r3, #64	; 0x40
 800d478:	2000      	movs	r0, #0
 800d47a:	6031      	str	r1, [r6, #0]
 800d47c:	602b      	str	r3, [r5, #0]
 800d47e:	b016      	add	sp, #88	; 0x58
 800d480:	bd70      	pop	{r4, r5, r6, pc}
 800d482:	466a      	mov	r2, sp
 800d484:	f000 f848 	bl	800d518 <_fstat_r>
 800d488:	2800      	cmp	r0, #0
 800d48a:	dbec      	blt.n	800d466 <__swhatbuf_r+0x12>
 800d48c:	9901      	ldr	r1, [sp, #4]
 800d48e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d492:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d496:	4259      	negs	r1, r3
 800d498:	4159      	adcs	r1, r3
 800d49a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d49e:	e7eb      	b.n	800d478 <__swhatbuf_r+0x24>

0800d4a0 <__smakebuf_r>:
 800d4a0:	898b      	ldrh	r3, [r1, #12]
 800d4a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d4a4:	079d      	lsls	r5, r3, #30
 800d4a6:	4606      	mov	r6, r0
 800d4a8:	460c      	mov	r4, r1
 800d4aa:	d507      	bpl.n	800d4bc <__smakebuf_r+0x1c>
 800d4ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d4b0:	6023      	str	r3, [r4, #0]
 800d4b2:	6123      	str	r3, [r4, #16]
 800d4b4:	2301      	movs	r3, #1
 800d4b6:	6163      	str	r3, [r4, #20]
 800d4b8:	b002      	add	sp, #8
 800d4ba:	bd70      	pop	{r4, r5, r6, pc}
 800d4bc:	ab01      	add	r3, sp, #4
 800d4be:	466a      	mov	r2, sp
 800d4c0:	f7ff ffc8 	bl	800d454 <__swhatbuf_r>
 800d4c4:	9900      	ldr	r1, [sp, #0]
 800d4c6:	4605      	mov	r5, r0
 800d4c8:	4630      	mov	r0, r6
 800d4ca:	f7fe fecb 	bl	800c264 <_malloc_r>
 800d4ce:	b948      	cbnz	r0, 800d4e4 <__smakebuf_r+0x44>
 800d4d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4d4:	059a      	lsls	r2, r3, #22
 800d4d6:	d4ef      	bmi.n	800d4b8 <__smakebuf_r+0x18>
 800d4d8:	f023 0303 	bic.w	r3, r3, #3
 800d4dc:	f043 0302 	orr.w	r3, r3, #2
 800d4e0:	81a3      	strh	r3, [r4, #12]
 800d4e2:	e7e3      	b.n	800d4ac <__smakebuf_r+0xc>
 800d4e4:	89a3      	ldrh	r3, [r4, #12]
 800d4e6:	6020      	str	r0, [r4, #0]
 800d4e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d4ec:	81a3      	strh	r3, [r4, #12]
 800d4ee:	9b00      	ldr	r3, [sp, #0]
 800d4f0:	6163      	str	r3, [r4, #20]
 800d4f2:	9b01      	ldr	r3, [sp, #4]
 800d4f4:	6120      	str	r0, [r4, #16]
 800d4f6:	b15b      	cbz	r3, 800d510 <__smakebuf_r+0x70>
 800d4f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d4fc:	4630      	mov	r0, r6
 800d4fe:	f000 f81d 	bl	800d53c <_isatty_r>
 800d502:	b128      	cbz	r0, 800d510 <__smakebuf_r+0x70>
 800d504:	89a3      	ldrh	r3, [r4, #12]
 800d506:	f023 0303 	bic.w	r3, r3, #3
 800d50a:	f043 0301 	orr.w	r3, r3, #1
 800d50e:	81a3      	strh	r3, [r4, #12]
 800d510:	89a3      	ldrh	r3, [r4, #12]
 800d512:	431d      	orrs	r5, r3
 800d514:	81a5      	strh	r5, [r4, #12]
 800d516:	e7cf      	b.n	800d4b8 <__smakebuf_r+0x18>

0800d518 <_fstat_r>:
 800d518:	b538      	push	{r3, r4, r5, lr}
 800d51a:	4d07      	ldr	r5, [pc, #28]	; (800d538 <_fstat_r+0x20>)
 800d51c:	2300      	movs	r3, #0
 800d51e:	4604      	mov	r4, r0
 800d520:	4608      	mov	r0, r1
 800d522:	4611      	mov	r1, r2
 800d524:	602b      	str	r3, [r5, #0]
 800d526:	f7f7 fe18 	bl	800515a <_fstat>
 800d52a:	1c43      	adds	r3, r0, #1
 800d52c:	d102      	bne.n	800d534 <_fstat_r+0x1c>
 800d52e:	682b      	ldr	r3, [r5, #0]
 800d530:	b103      	cbz	r3, 800d534 <_fstat_r+0x1c>
 800d532:	6023      	str	r3, [r4, #0]
 800d534:	bd38      	pop	{r3, r4, r5, pc}
 800d536:	bf00      	nop
 800d538:	20001fe8 	.word	0x20001fe8

0800d53c <_isatty_r>:
 800d53c:	b538      	push	{r3, r4, r5, lr}
 800d53e:	4d06      	ldr	r5, [pc, #24]	; (800d558 <_isatty_r+0x1c>)
 800d540:	2300      	movs	r3, #0
 800d542:	4604      	mov	r4, r0
 800d544:	4608      	mov	r0, r1
 800d546:	602b      	str	r3, [r5, #0]
 800d548:	f7f7 fe0c 	bl	8005164 <_isatty>
 800d54c:	1c43      	adds	r3, r0, #1
 800d54e:	d102      	bne.n	800d556 <_isatty_r+0x1a>
 800d550:	682b      	ldr	r3, [r5, #0]
 800d552:	b103      	cbz	r3, 800d556 <_isatty_r+0x1a>
 800d554:	6023      	str	r3, [r4, #0]
 800d556:	bd38      	pop	{r3, r4, r5, pc}
 800d558:	20001fe8 	.word	0x20001fe8

0800d55c <fmod>:
 800d55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d55e:	ed2d 8b02 	vpush	{d8}
 800d562:	ec57 6b10 	vmov	r6, r7, d0
 800d566:	ec55 4b11 	vmov	r4, r5, d1
 800d56a:	f000 fba3 	bl	800dcb4 <__ieee754_fmod>
 800d56e:	4622      	mov	r2, r4
 800d570:	462b      	mov	r3, r5
 800d572:	4630      	mov	r0, r6
 800d574:	4639      	mov	r1, r7
 800d576:	eeb0 8a40 	vmov.f32	s16, s0
 800d57a:	eef0 8a60 	vmov.f32	s17, s1
 800d57e:	f7f3 fafd 	bl	8000b7c <__aeabi_dcmpun>
 800d582:	b990      	cbnz	r0, 800d5aa <fmod+0x4e>
 800d584:	2200      	movs	r2, #0
 800d586:	2300      	movs	r3, #0
 800d588:	4620      	mov	r0, r4
 800d58a:	4629      	mov	r1, r5
 800d58c:	f7f3 fac4 	bl	8000b18 <__aeabi_dcmpeq>
 800d590:	b158      	cbz	r0, 800d5aa <fmod+0x4e>
 800d592:	f7fd ff3b 	bl	800b40c <__errno>
 800d596:	2321      	movs	r3, #33	; 0x21
 800d598:	6003      	str	r3, [r0, #0]
 800d59a:	2200      	movs	r2, #0
 800d59c:	2300      	movs	r3, #0
 800d59e:	4610      	mov	r0, r2
 800d5a0:	4619      	mov	r1, r3
 800d5a2:	f7f3 f97b 	bl	800089c <__aeabi_ddiv>
 800d5a6:	ec41 0b18 	vmov	d8, r0, r1
 800d5aa:	eeb0 0a48 	vmov.f32	s0, s16
 800d5ae:	eef0 0a68 	vmov.f32	s1, s17
 800d5b2:	ecbd 8b02 	vpop	{d8}
 800d5b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d5b8 <sqrt>:
 800d5b8:	b538      	push	{r3, r4, r5, lr}
 800d5ba:	ed2d 8b02 	vpush	{d8}
 800d5be:	ec55 4b10 	vmov	r4, r5, d0
 800d5c2:	f000 f917 	bl	800d7f4 <__ieee754_sqrt>
 800d5c6:	4622      	mov	r2, r4
 800d5c8:	462b      	mov	r3, r5
 800d5ca:	4620      	mov	r0, r4
 800d5cc:	4629      	mov	r1, r5
 800d5ce:	eeb0 8a40 	vmov.f32	s16, s0
 800d5d2:	eef0 8a60 	vmov.f32	s17, s1
 800d5d6:	f7f3 fad1 	bl	8000b7c <__aeabi_dcmpun>
 800d5da:	b990      	cbnz	r0, 800d602 <sqrt+0x4a>
 800d5dc:	2200      	movs	r2, #0
 800d5de:	2300      	movs	r3, #0
 800d5e0:	4620      	mov	r0, r4
 800d5e2:	4629      	mov	r1, r5
 800d5e4:	f7f3 faa2 	bl	8000b2c <__aeabi_dcmplt>
 800d5e8:	b158      	cbz	r0, 800d602 <sqrt+0x4a>
 800d5ea:	f7fd ff0f 	bl	800b40c <__errno>
 800d5ee:	2321      	movs	r3, #33	; 0x21
 800d5f0:	6003      	str	r3, [r0, #0]
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	4610      	mov	r0, r2
 800d5f8:	4619      	mov	r1, r3
 800d5fa:	f7f3 f94f 	bl	800089c <__aeabi_ddiv>
 800d5fe:	ec41 0b18 	vmov	d8, r0, r1
 800d602:	eeb0 0a48 	vmov.f32	s0, s16
 800d606:	eef0 0a68 	vmov.f32	s1, s17
 800d60a:	ecbd 8b02 	vpop	{d8}
 800d60e:	bd38      	pop	{r3, r4, r5, pc}

0800d610 <cos>:
 800d610:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d612:	ec53 2b10 	vmov	r2, r3, d0
 800d616:	4826      	ldr	r0, [pc, #152]	; (800d6b0 <cos+0xa0>)
 800d618:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d61c:	4281      	cmp	r1, r0
 800d61e:	dc06      	bgt.n	800d62e <cos+0x1e>
 800d620:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800d6a8 <cos+0x98>
 800d624:	b005      	add	sp, #20
 800d626:	f85d eb04 	ldr.w	lr, [sp], #4
 800d62a:	f000 b9bd 	b.w	800d9a8 <__kernel_cos>
 800d62e:	4821      	ldr	r0, [pc, #132]	; (800d6b4 <cos+0xa4>)
 800d630:	4281      	cmp	r1, r0
 800d632:	dd09      	ble.n	800d648 <cos+0x38>
 800d634:	ee10 0a10 	vmov	r0, s0
 800d638:	4619      	mov	r1, r3
 800d63a:	f7f2 fe4d 	bl	80002d8 <__aeabi_dsub>
 800d63e:	ec41 0b10 	vmov	d0, r0, r1
 800d642:	b005      	add	sp, #20
 800d644:	f85d fb04 	ldr.w	pc, [sp], #4
 800d648:	4668      	mov	r0, sp
 800d64a:	f000 fc41 	bl	800ded0 <__ieee754_rem_pio2>
 800d64e:	f000 0003 	and.w	r0, r0, #3
 800d652:	2801      	cmp	r0, #1
 800d654:	d00b      	beq.n	800d66e <cos+0x5e>
 800d656:	2802      	cmp	r0, #2
 800d658:	d016      	beq.n	800d688 <cos+0x78>
 800d65a:	b9e0      	cbnz	r0, 800d696 <cos+0x86>
 800d65c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d660:	ed9d 0b00 	vldr	d0, [sp]
 800d664:	f000 f9a0 	bl	800d9a8 <__kernel_cos>
 800d668:	ec51 0b10 	vmov	r0, r1, d0
 800d66c:	e7e7      	b.n	800d63e <cos+0x2e>
 800d66e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d672:	ed9d 0b00 	vldr	d0, [sp]
 800d676:	f000 fa5f 	bl	800db38 <__kernel_sin>
 800d67a:	ec53 2b10 	vmov	r2, r3, d0
 800d67e:	ee10 0a10 	vmov	r0, s0
 800d682:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d686:	e7da      	b.n	800d63e <cos+0x2e>
 800d688:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d68c:	ed9d 0b00 	vldr	d0, [sp]
 800d690:	f000 f98a 	bl	800d9a8 <__kernel_cos>
 800d694:	e7f1      	b.n	800d67a <cos+0x6a>
 800d696:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d69a:	ed9d 0b00 	vldr	d0, [sp]
 800d69e:	2001      	movs	r0, #1
 800d6a0:	f000 fa4a 	bl	800db38 <__kernel_sin>
 800d6a4:	e7e0      	b.n	800d668 <cos+0x58>
 800d6a6:	bf00      	nop
	...
 800d6b0:	3fe921fb 	.word	0x3fe921fb
 800d6b4:	7fefffff 	.word	0x7fefffff

0800d6b8 <sin>:
 800d6b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d6ba:	ec53 2b10 	vmov	r2, r3, d0
 800d6be:	4828      	ldr	r0, [pc, #160]	; (800d760 <sin+0xa8>)
 800d6c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d6c4:	4281      	cmp	r1, r0
 800d6c6:	dc07      	bgt.n	800d6d8 <sin+0x20>
 800d6c8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800d758 <sin+0xa0>
 800d6cc:	2000      	movs	r0, #0
 800d6ce:	b005      	add	sp, #20
 800d6d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d6d4:	f000 ba30 	b.w	800db38 <__kernel_sin>
 800d6d8:	4822      	ldr	r0, [pc, #136]	; (800d764 <sin+0xac>)
 800d6da:	4281      	cmp	r1, r0
 800d6dc:	dd09      	ble.n	800d6f2 <sin+0x3a>
 800d6de:	ee10 0a10 	vmov	r0, s0
 800d6e2:	4619      	mov	r1, r3
 800d6e4:	f7f2 fdf8 	bl	80002d8 <__aeabi_dsub>
 800d6e8:	ec41 0b10 	vmov	d0, r0, r1
 800d6ec:	b005      	add	sp, #20
 800d6ee:	f85d fb04 	ldr.w	pc, [sp], #4
 800d6f2:	4668      	mov	r0, sp
 800d6f4:	f000 fbec 	bl	800ded0 <__ieee754_rem_pio2>
 800d6f8:	f000 0003 	and.w	r0, r0, #3
 800d6fc:	2801      	cmp	r0, #1
 800d6fe:	d00c      	beq.n	800d71a <sin+0x62>
 800d700:	2802      	cmp	r0, #2
 800d702:	d011      	beq.n	800d728 <sin+0x70>
 800d704:	b9f0      	cbnz	r0, 800d744 <sin+0x8c>
 800d706:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d70a:	ed9d 0b00 	vldr	d0, [sp]
 800d70e:	2001      	movs	r0, #1
 800d710:	f000 fa12 	bl	800db38 <__kernel_sin>
 800d714:	ec51 0b10 	vmov	r0, r1, d0
 800d718:	e7e6      	b.n	800d6e8 <sin+0x30>
 800d71a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d71e:	ed9d 0b00 	vldr	d0, [sp]
 800d722:	f000 f941 	bl	800d9a8 <__kernel_cos>
 800d726:	e7f5      	b.n	800d714 <sin+0x5c>
 800d728:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d72c:	ed9d 0b00 	vldr	d0, [sp]
 800d730:	2001      	movs	r0, #1
 800d732:	f000 fa01 	bl	800db38 <__kernel_sin>
 800d736:	ec53 2b10 	vmov	r2, r3, d0
 800d73a:	ee10 0a10 	vmov	r0, s0
 800d73e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d742:	e7d1      	b.n	800d6e8 <sin+0x30>
 800d744:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d748:	ed9d 0b00 	vldr	d0, [sp]
 800d74c:	f000 f92c 	bl	800d9a8 <__kernel_cos>
 800d750:	e7f1      	b.n	800d736 <sin+0x7e>
 800d752:	bf00      	nop
 800d754:	f3af 8000 	nop.w
	...
 800d760:	3fe921fb 	.word	0x3fe921fb
 800d764:	7fefffff 	.word	0x7fefffff

0800d768 <sinf>:
 800d768:	ee10 3a10 	vmov	r3, s0
 800d76c:	b507      	push	{r0, r1, r2, lr}
 800d76e:	4a1f      	ldr	r2, [pc, #124]	; (800d7ec <sinf+0x84>)
 800d770:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d774:	4293      	cmp	r3, r2
 800d776:	dc07      	bgt.n	800d788 <sinf+0x20>
 800d778:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800d7f0 <sinf+0x88>
 800d77c:	2000      	movs	r0, #0
 800d77e:	b003      	add	sp, #12
 800d780:	f85d eb04 	ldr.w	lr, [sp], #4
 800d784:	f000 be12 	b.w	800e3ac <__kernel_sinf>
 800d788:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d78c:	db04      	blt.n	800d798 <sinf+0x30>
 800d78e:	ee30 0a40 	vsub.f32	s0, s0, s0
 800d792:	b003      	add	sp, #12
 800d794:	f85d fb04 	ldr.w	pc, [sp], #4
 800d798:	4668      	mov	r0, sp
 800d79a:	f000 fe4f 	bl	800e43c <__ieee754_rem_pio2f>
 800d79e:	f000 0003 	and.w	r0, r0, #3
 800d7a2:	2801      	cmp	r0, #1
 800d7a4:	d00a      	beq.n	800d7bc <sinf+0x54>
 800d7a6:	2802      	cmp	r0, #2
 800d7a8:	d00f      	beq.n	800d7ca <sinf+0x62>
 800d7aa:	b9c0      	cbnz	r0, 800d7de <sinf+0x76>
 800d7ac:	eddd 0a01 	vldr	s1, [sp, #4]
 800d7b0:	ed9d 0a00 	vldr	s0, [sp]
 800d7b4:	2001      	movs	r0, #1
 800d7b6:	f000 fdf9 	bl	800e3ac <__kernel_sinf>
 800d7ba:	e7ea      	b.n	800d792 <sinf+0x2a>
 800d7bc:	eddd 0a01 	vldr	s1, [sp, #4]
 800d7c0:	ed9d 0a00 	vldr	s0, [sp]
 800d7c4:	f000 fd94 	bl	800e2f0 <__kernel_cosf>
 800d7c8:	e7e3      	b.n	800d792 <sinf+0x2a>
 800d7ca:	eddd 0a01 	vldr	s1, [sp, #4]
 800d7ce:	ed9d 0a00 	vldr	s0, [sp]
 800d7d2:	2001      	movs	r0, #1
 800d7d4:	f000 fdea 	bl	800e3ac <__kernel_sinf>
 800d7d8:	eeb1 0a40 	vneg.f32	s0, s0
 800d7dc:	e7d9      	b.n	800d792 <sinf+0x2a>
 800d7de:	eddd 0a01 	vldr	s1, [sp, #4]
 800d7e2:	ed9d 0a00 	vldr	s0, [sp]
 800d7e6:	f000 fd83 	bl	800e2f0 <__kernel_cosf>
 800d7ea:	e7f5      	b.n	800d7d8 <sinf+0x70>
 800d7ec:	3f490fd8 	.word	0x3f490fd8
 800d7f0:	00000000 	.word	0x00000000

0800d7f4 <__ieee754_sqrt>:
 800d7f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7f8:	ec55 4b10 	vmov	r4, r5, d0
 800d7fc:	4e67      	ldr	r6, [pc, #412]	; (800d99c <__ieee754_sqrt+0x1a8>)
 800d7fe:	43ae      	bics	r6, r5
 800d800:	ee10 0a10 	vmov	r0, s0
 800d804:	ee10 2a10 	vmov	r2, s0
 800d808:	4629      	mov	r1, r5
 800d80a:	462b      	mov	r3, r5
 800d80c:	d10d      	bne.n	800d82a <__ieee754_sqrt+0x36>
 800d80e:	f7f2 ff1b 	bl	8000648 <__aeabi_dmul>
 800d812:	4602      	mov	r2, r0
 800d814:	460b      	mov	r3, r1
 800d816:	4620      	mov	r0, r4
 800d818:	4629      	mov	r1, r5
 800d81a:	f7f2 fd5f 	bl	80002dc <__adddf3>
 800d81e:	4604      	mov	r4, r0
 800d820:	460d      	mov	r5, r1
 800d822:	ec45 4b10 	vmov	d0, r4, r5
 800d826:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d82a:	2d00      	cmp	r5, #0
 800d82c:	dc0b      	bgt.n	800d846 <__ieee754_sqrt+0x52>
 800d82e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d832:	4326      	orrs	r6, r4
 800d834:	d0f5      	beq.n	800d822 <__ieee754_sqrt+0x2e>
 800d836:	b135      	cbz	r5, 800d846 <__ieee754_sqrt+0x52>
 800d838:	f7f2 fd4e 	bl	80002d8 <__aeabi_dsub>
 800d83c:	4602      	mov	r2, r0
 800d83e:	460b      	mov	r3, r1
 800d840:	f7f3 f82c 	bl	800089c <__aeabi_ddiv>
 800d844:	e7eb      	b.n	800d81e <__ieee754_sqrt+0x2a>
 800d846:	1509      	asrs	r1, r1, #20
 800d848:	f000 808d 	beq.w	800d966 <__ieee754_sqrt+0x172>
 800d84c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d850:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800d854:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d858:	07c9      	lsls	r1, r1, #31
 800d85a:	bf5c      	itt	pl
 800d85c:	005b      	lslpl	r3, r3, #1
 800d85e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800d862:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d866:	bf58      	it	pl
 800d868:	0052      	lslpl	r2, r2, #1
 800d86a:	2500      	movs	r5, #0
 800d86c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d870:	1076      	asrs	r6, r6, #1
 800d872:	0052      	lsls	r2, r2, #1
 800d874:	f04f 0e16 	mov.w	lr, #22
 800d878:	46ac      	mov	ip, r5
 800d87a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d87e:	eb0c 0001 	add.w	r0, ip, r1
 800d882:	4298      	cmp	r0, r3
 800d884:	bfde      	ittt	le
 800d886:	1a1b      	suble	r3, r3, r0
 800d888:	eb00 0c01 	addle.w	ip, r0, r1
 800d88c:	186d      	addle	r5, r5, r1
 800d88e:	005b      	lsls	r3, r3, #1
 800d890:	f1be 0e01 	subs.w	lr, lr, #1
 800d894:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d898:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d89c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d8a0:	d1ed      	bne.n	800d87e <__ieee754_sqrt+0x8a>
 800d8a2:	4674      	mov	r4, lr
 800d8a4:	2720      	movs	r7, #32
 800d8a6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800d8aa:	4563      	cmp	r3, ip
 800d8ac:	eb01 000e 	add.w	r0, r1, lr
 800d8b0:	dc02      	bgt.n	800d8b8 <__ieee754_sqrt+0xc4>
 800d8b2:	d113      	bne.n	800d8dc <__ieee754_sqrt+0xe8>
 800d8b4:	4290      	cmp	r0, r2
 800d8b6:	d811      	bhi.n	800d8dc <__ieee754_sqrt+0xe8>
 800d8b8:	2800      	cmp	r0, #0
 800d8ba:	eb00 0e01 	add.w	lr, r0, r1
 800d8be:	da57      	bge.n	800d970 <__ieee754_sqrt+0x17c>
 800d8c0:	f1be 0f00 	cmp.w	lr, #0
 800d8c4:	db54      	blt.n	800d970 <__ieee754_sqrt+0x17c>
 800d8c6:	f10c 0801 	add.w	r8, ip, #1
 800d8ca:	eba3 030c 	sub.w	r3, r3, ip
 800d8ce:	4290      	cmp	r0, r2
 800d8d0:	bf88      	it	hi
 800d8d2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d8d6:	1a12      	subs	r2, r2, r0
 800d8d8:	440c      	add	r4, r1
 800d8da:	46c4      	mov	ip, r8
 800d8dc:	005b      	lsls	r3, r3, #1
 800d8de:	3f01      	subs	r7, #1
 800d8e0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d8e4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d8e8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d8ec:	d1dd      	bne.n	800d8aa <__ieee754_sqrt+0xb6>
 800d8ee:	4313      	orrs	r3, r2
 800d8f0:	d01b      	beq.n	800d92a <__ieee754_sqrt+0x136>
 800d8f2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800d9a0 <__ieee754_sqrt+0x1ac>
 800d8f6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800d9a4 <__ieee754_sqrt+0x1b0>
 800d8fa:	e9da 0100 	ldrd	r0, r1, [sl]
 800d8fe:	e9db 2300 	ldrd	r2, r3, [fp]
 800d902:	f7f2 fce9 	bl	80002d8 <__aeabi_dsub>
 800d906:	e9da 8900 	ldrd	r8, r9, [sl]
 800d90a:	4602      	mov	r2, r0
 800d90c:	460b      	mov	r3, r1
 800d90e:	4640      	mov	r0, r8
 800d910:	4649      	mov	r1, r9
 800d912:	f7f3 f915 	bl	8000b40 <__aeabi_dcmple>
 800d916:	b140      	cbz	r0, 800d92a <__ieee754_sqrt+0x136>
 800d918:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d91c:	e9da 0100 	ldrd	r0, r1, [sl]
 800d920:	e9db 2300 	ldrd	r2, r3, [fp]
 800d924:	d126      	bne.n	800d974 <__ieee754_sqrt+0x180>
 800d926:	3501      	adds	r5, #1
 800d928:	463c      	mov	r4, r7
 800d92a:	106a      	asrs	r2, r5, #1
 800d92c:	0863      	lsrs	r3, r4, #1
 800d92e:	07e9      	lsls	r1, r5, #31
 800d930:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800d934:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800d938:	bf48      	it	mi
 800d93a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800d93e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800d942:	461c      	mov	r4, r3
 800d944:	e76d      	b.n	800d822 <__ieee754_sqrt+0x2e>
 800d946:	0ad3      	lsrs	r3, r2, #11
 800d948:	3815      	subs	r0, #21
 800d94a:	0552      	lsls	r2, r2, #21
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d0fa      	beq.n	800d946 <__ieee754_sqrt+0x152>
 800d950:	02dc      	lsls	r4, r3, #11
 800d952:	d50a      	bpl.n	800d96a <__ieee754_sqrt+0x176>
 800d954:	f1c1 0420 	rsb	r4, r1, #32
 800d958:	fa22 f404 	lsr.w	r4, r2, r4
 800d95c:	1e4d      	subs	r5, r1, #1
 800d95e:	408a      	lsls	r2, r1
 800d960:	4323      	orrs	r3, r4
 800d962:	1b41      	subs	r1, r0, r5
 800d964:	e772      	b.n	800d84c <__ieee754_sqrt+0x58>
 800d966:	4608      	mov	r0, r1
 800d968:	e7f0      	b.n	800d94c <__ieee754_sqrt+0x158>
 800d96a:	005b      	lsls	r3, r3, #1
 800d96c:	3101      	adds	r1, #1
 800d96e:	e7ef      	b.n	800d950 <__ieee754_sqrt+0x15c>
 800d970:	46e0      	mov	r8, ip
 800d972:	e7aa      	b.n	800d8ca <__ieee754_sqrt+0xd6>
 800d974:	f7f2 fcb2 	bl	80002dc <__adddf3>
 800d978:	e9da 8900 	ldrd	r8, r9, [sl]
 800d97c:	4602      	mov	r2, r0
 800d97e:	460b      	mov	r3, r1
 800d980:	4640      	mov	r0, r8
 800d982:	4649      	mov	r1, r9
 800d984:	f7f3 f8d2 	bl	8000b2c <__aeabi_dcmplt>
 800d988:	b120      	cbz	r0, 800d994 <__ieee754_sqrt+0x1a0>
 800d98a:	1ca0      	adds	r0, r4, #2
 800d98c:	bf08      	it	eq
 800d98e:	3501      	addeq	r5, #1
 800d990:	3402      	adds	r4, #2
 800d992:	e7ca      	b.n	800d92a <__ieee754_sqrt+0x136>
 800d994:	3401      	adds	r4, #1
 800d996:	f024 0401 	bic.w	r4, r4, #1
 800d99a:	e7c6      	b.n	800d92a <__ieee754_sqrt+0x136>
 800d99c:	7ff00000 	.word	0x7ff00000
 800d9a0:	20000748 	.word	0x20000748
 800d9a4:	20000750 	.word	0x20000750

0800d9a8 <__kernel_cos>:
 800d9a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9ac:	ec57 6b10 	vmov	r6, r7, d0
 800d9b0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800d9b4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800d9b8:	ed8d 1b00 	vstr	d1, [sp]
 800d9bc:	da07      	bge.n	800d9ce <__kernel_cos+0x26>
 800d9be:	ee10 0a10 	vmov	r0, s0
 800d9c2:	4639      	mov	r1, r7
 800d9c4:	f7f3 f8f0 	bl	8000ba8 <__aeabi_d2iz>
 800d9c8:	2800      	cmp	r0, #0
 800d9ca:	f000 8088 	beq.w	800dade <__kernel_cos+0x136>
 800d9ce:	4632      	mov	r2, r6
 800d9d0:	463b      	mov	r3, r7
 800d9d2:	4630      	mov	r0, r6
 800d9d4:	4639      	mov	r1, r7
 800d9d6:	f7f2 fe37 	bl	8000648 <__aeabi_dmul>
 800d9da:	4b51      	ldr	r3, [pc, #324]	; (800db20 <__kernel_cos+0x178>)
 800d9dc:	2200      	movs	r2, #0
 800d9de:	4604      	mov	r4, r0
 800d9e0:	460d      	mov	r5, r1
 800d9e2:	f7f2 fe31 	bl	8000648 <__aeabi_dmul>
 800d9e6:	a340      	add	r3, pc, #256	; (adr r3, 800dae8 <__kernel_cos+0x140>)
 800d9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ec:	4682      	mov	sl, r0
 800d9ee:	468b      	mov	fp, r1
 800d9f0:	4620      	mov	r0, r4
 800d9f2:	4629      	mov	r1, r5
 800d9f4:	f7f2 fe28 	bl	8000648 <__aeabi_dmul>
 800d9f8:	a33d      	add	r3, pc, #244	; (adr r3, 800daf0 <__kernel_cos+0x148>)
 800d9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9fe:	f7f2 fc6d 	bl	80002dc <__adddf3>
 800da02:	4622      	mov	r2, r4
 800da04:	462b      	mov	r3, r5
 800da06:	f7f2 fe1f 	bl	8000648 <__aeabi_dmul>
 800da0a:	a33b      	add	r3, pc, #236	; (adr r3, 800daf8 <__kernel_cos+0x150>)
 800da0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da10:	f7f2 fc62 	bl	80002d8 <__aeabi_dsub>
 800da14:	4622      	mov	r2, r4
 800da16:	462b      	mov	r3, r5
 800da18:	f7f2 fe16 	bl	8000648 <__aeabi_dmul>
 800da1c:	a338      	add	r3, pc, #224	; (adr r3, 800db00 <__kernel_cos+0x158>)
 800da1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da22:	f7f2 fc5b 	bl	80002dc <__adddf3>
 800da26:	4622      	mov	r2, r4
 800da28:	462b      	mov	r3, r5
 800da2a:	f7f2 fe0d 	bl	8000648 <__aeabi_dmul>
 800da2e:	a336      	add	r3, pc, #216	; (adr r3, 800db08 <__kernel_cos+0x160>)
 800da30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da34:	f7f2 fc50 	bl	80002d8 <__aeabi_dsub>
 800da38:	4622      	mov	r2, r4
 800da3a:	462b      	mov	r3, r5
 800da3c:	f7f2 fe04 	bl	8000648 <__aeabi_dmul>
 800da40:	a333      	add	r3, pc, #204	; (adr r3, 800db10 <__kernel_cos+0x168>)
 800da42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da46:	f7f2 fc49 	bl	80002dc <__adddf3>
 800da4a:	4622      	mov	r2, r4
 800da4c:	462b      	mov	r3, r5
 800da4e:	f7f2 fdfb 	bl	8000648 <__aeabi_dmul>
 800da52:	4622      	mov	r2, r4
 800da54:	462b      	mov	r3, r5
 800da56:	f7f2 fdf7 	bl	8000648 <__aeabi_dmul>
 800da5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800da5e:	4604      	mov	r4, r0
 800da60:	460d      	mov	r5, r1
 800da62:	4630      	mov	r0, r6
 800da64:	4639      	mov	r1, r7
 800da66:	f7f2 fdef 	bl	8000648 <__aeabi_dmul>
 800da6a:	460b      	mov	r3, r1
 800da6c:	4602      	mov	r2, r0
 800da6e:	4629      	mov	r1, r5
 800da70:	4620      	mov	r0, r4
 800da72:	f7f2 fc31 	bl	80002d8 <__aeabi_dsub>
 800da76:	4b2b      	ldr	r3, [pc, #172]	; (800db24 <__kernel_cos+0x17c>)
 800da78:	4598      	cmp	r8, r3
 800da7a:	4606      	mov	r6, r0
 800da7c:	460f      	mov	r7, r1
 800da7e:	dc10      	bgt.n	800daa2 <__kernel_cos+0xfa>
 800da80:	4602      	mov	r2, r0
 800da82:	460b      	mov	r3, r1
 800da84:	4650      	mov	r0, sl
 800da86:	4659      	mov	r1, fp
 800da88:	f7f2 fc26 	bl	80002d8 <__aeabi_dsub>
 800da8c:	460b      	mov	r3, r1
 800da8e:	4926      	ldr	r1, [pc, #152]	; (800db28 <__kernel_cos+0x180>)
 800da90:	4602      	mov	r2, r0
 800da92:	2000      	movs	r0, #0
 800da94:	f7f2 fc20 	bl	80002d8 <__aeabi_dsub>
 800da98:	ec41 0b10 	vmov	d0, r0, r1
 800da9c:	b003      	add	sp, #12
 800da9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daa2:	4b22      	ldr	r3, [pc, #136]	; (800db2c <__kernel_cos+0x184>)
 800daa4:	4920      	ldr	r1, [pc, #128]	; (800db28 <__kernel_cos+0x180>)
 800daa6:	4598      	cmp	r8, r3
 800daa8:	bfcc      	ite	gt
 800daaa:	4d21      	ldrgt	r5, [pc, #132]	; (800db30 <__kernel_cos+0x188>)
 800daac:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800dab0:	2400      	movs	r4, #0
 800dab2:	4622      	mov	r2, r4
 800dab4:	462b      	mov	r3, r5
 800dab6:	2000      	movs	r0, #0
 800dab8:	f7f2 fc0e 	bl	80002d8 <__aeabi_dsub>
 800dabc:	4622      	mov	r2, r4
 800dabe:	4680      	mov	r8, r0
 800dac0:	4689      	mov	r9, r1
 800dac2:	462b      	mov	r3, r5
 800dac4:	4650      	mov	r0, sl
 800dac6:	4659      	mov	r1, fp
 800dac8:	f7f2 fc06 	bl	80002d8 <__aeabi_dsub>
 800dacc:	4632      	mov	r2, r6
 800dace:	463b      	mov	r3, r7
 800dad0:	f7f2 fc02 	bl	80002d8 <__aeabi_dsub>
 800dad4:	4602      	mov	r2, r0
 800dad6:	460b      	mov	r3, r1
 800dad8:	4640      	mov	r0, r8
 800dada:	4649      	mov	r1, r9
 800dadc:	e7da      	b.n	800da94 <__kernel_cos+0xec>
 800dade:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800db18 <__kernel_cos+0x170>
 800dae2:	e7db      	b.n	800da9c <__kernel_cos+0xf4>
 800dae4:	f3af 8000 	nop.w
 800dae8:	be8838d4 	.word	0xbe8838d4
 800daec:	bda8fae9 	.word	0xbda8fae9
 800daf0:	bdb4b1c4 	.word	0xbdb4b1c4
 800daf4:	3e21ee9e 	.word	0x3e21ee9e
 800daf8:	809c52ad 	.word	0x809c52ad
 800dafc:	3e927e4f 	.word	0x3e927e4f
 800db00:	19cb1590 	.word	0x19cb1590
 800db04:	3efa01a0 	.word	0x3efa01a0
 800db08:	16c15177 	.word	0x16c15177
 800db0c:	3f56c16c 	.word	0x3f56c16c
 800db10:	5555554c 	.word	0x5555554c
 800db14:	3fa55555 	.word	0x3fa55555
 800db18:	00000000 	.word	0x00000000
 800db1c:	3ff00000 	.word	0x3ff00000
 800db20:	3fe00000 	.word	0x3fe00000
 800db24:	3fd33332 	.word	0x3fd33332
 800db28:	3ff00000 	.word	0x3ff00000
 800db2c:	3fe90000 	.word	0x3fe90000
 800db30:	3fd20000 	.word	0x3fd20000
 800db34:	00000000 	.word	0x00000000

0800db38 <__kernel_sin>:
 800db38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db3c:	ed2d 8b04 	vpush	{d8-d9}
 800db40:	eeb0 8a41 	vmov.f32	s16, s2
 800db44:	eef0 8a61 	vmov.f32	s17, s3
 800db48:	ec55 4b10 	vmov	r4, r5, d0
 800db4c:	b083      	sub	sp, #12
 800db4e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800db52:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800db56:	9001      	str	r0, [sp, #4]
 800db58:	da06      	bge.n	800db68 <__kernel_sin+0x30>
 800db5a:	ee10 0a10 	vmov	r0, s0
 800db5e:	4629      	mov	r1, r5
 800db60:	f7f3 f822 	bl	8000ba8 <__aeabi_d2iz>
 800db64:	2800      	cmp	r0, #0
 800db66:	d051      	beq.n	800dc0c <__kernel_sin+0xd4>
 800db68:	4622      	mov	r2, r4
 800db6a:	462b      	mov	r3, r5
 800db6c:	4620      	mov	r0, r4
 800db6e:	4629      	mov	r1, r5
 800db70:	f7f2 fd6a 	bl	8000648 <__aeabi_dmul>
 800db74:	4682      	mov	sl, r0
 800db76:	468b      	mov	fp, r1
 800db78:	4602      	mov	r2, r0
 800db7a:	460b      	mov	r3, r1
 800db7c:	4620      	mov	r0, r4
 800db7e:	4629      	mov	r1, r5
 800db80:	f7f2 fd62 	bl	8000648 <__aeabi_dmul>
 800db84:	a341      	add	r3, pc, #260	; (adr r3, 800dc8c <__kernel_sin+0x154>)
 800db86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db8a:	4680      	mov	r8, r0
 800db8c:	4689      	mov	r9, r1
 800db8e:	4650      	mov	r0, sl
 800db90:	4659      	mov	r1, fp
 800db92:	f7f2 fd59 	bl	8000648 <__aeabi_dmul>
 800db96:	a33f      	add	r3, pc, #252	; (adr r3, 800dc94 <__kernel_sin+0x15c>)
 800db98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db9c:	f7f2 fb9c 	bl	80002d8 <__aeabi_dsub>
 800dba0:	4652      	mov	r2, sl
 800dba2:	465b      	mov	r3, fp
 800dba4:	f7f2 fd50 	bl	8000648 <__aeabi_dmul>
 800dba8:	a33c      	add	r3, pc, #240	; (adr r3, 800dc9c <__kernel_sin+0x164>)
 800dbaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbae:	f7f2 fb95 	bl	80002dc <__adddf3>
 800dbb2:	4652      	mov	r2, sl
 800dbb4:	465b      	mov	r3, fp
 800dbb6:	f7f2 fd47 	bl	8000648 <__aeabi_dmul>
 800dbba:	a33a      	add	r3, pc, #232	; (adr r3, 800dca4 <__kernel_sin+0x16c>)
 800dbbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbc0:	f7f2 fb8a 	bl	80002d8 <__aeabi_dsub>
 800dbc4:	4652      	mov	r2, sl
 800dbc6:	465b      	mov	r3, fp
 800dbc8:	f7f2 fd3e 	bl	8000648 <__aeabi_dmul>
 800dbcc:	a337      	add	r3, pc, #220	; (adr r3, 800dcac <__kernel_sin+0x174>)
 800dbce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbd2:	f7f2 fb83 	bl	80002dc <__adddf3>
 800dbd6:	9b01      	ldr	r3, [sp, #4]
 800dbd8:	4606      	mov	r6, r0
 800dbda:	460f      	mov	r7, r1
 800dbdc:	b9eb      	cbnz	r3, 800dc1a <__kernel_sin+0xe2>
 800dbde:	4602      	mov	r2, r0
 800dbe0:	460b      	mov	r3, r1
 800dbe2:	4650      	mov	r0, sl
 800dbe4:	4659      	mov	r1, fp
 800dbe6:	f7f2 fd2f 	bl	8000648 <__aeabi_dmul>
 800dbea:	a325      	add	r3, pc, #148	; (adr r3, 800dc80 <__kernel_sin+0x148>)
 800dbec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbf0:	f7f2 fb72 	bl	80002d8 <__aeabi_dsub>
 800dbf4:	4642      	mov	r2, r8
 800dbf6:	464b      	mov	r3, r9
 800dbf8:	f7f2 fd26 	bl	8000648 <__aeabi_dmul>
 800dbfc:	4602      	mov	r2, r0
 800dbfe:	460b      	mov	r3, r1
 800dc00:	4620      	mov	r0, r4
 800dc02:	4629      	mov	r1, r5
 800dc04:	f7f2 fb6a 	bl	80002dc <__adddf3>
 800dc08:	4604      	mov	r4, r0
 800dc0a:	460d      	mov	r5, r1
 800dc0c:	ec45 4b10 	vmov	d0, r4, r5
 800dc10:	b003      	add	sp, #12
 800dc12:	ecbd 8b04 	vpop	{d8-d9}
 800dc16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc1a:	4b1b      	ldr	r3, [pc, #108]	; (800dc88 <__kernel_sin+0x150>)
 800dc1c:	ec51 0b18 	vmov	r0, r1, d8
 800dc20:	2200      	movs	r2, #0
 800dc22:	f7f2 fd11 	bl	8000648 <__aeabi_dmul>
 800dc26:	4632      	mov	r2, r6
 800dc28:	ec41 0b19 	vmov	d9, r0, r1
 800dc2c:	463b      	mov	r3, r7
 800dc2e:	4640      	mov	r0, r8
 800dc30:	4649      	mov	r1, r9
 800dc32:	f7f2 fd09 	bl	8000648 <__aeabi_dmul>
 800dc36:	4602      	mov	r2, r0
 800dc38:	460b      	mov	r3, r1
 800dc3a:	ec51 0b19 	vmov	r0, r1, d9
 800dc3e:	f7f2 fb4b 	bl	80002d8 <__aeabi_dsub>
 800dc42:	4652      	mov	r2, sl
 800dc44:	465b      	mov	r3, fp
 800dc46:	f7f2 fcff 	bl	8000648 <__aeabi_dmul>
 800dc4a:	ec53 2b18 	vmov	r2, r3, d8
 800dc4e:	f7f2 fb43 	bl	80002d8 <__aeabi_dsub>
 800dc52:	a30b      	add	r3, pc, #44	; (adr r3, 800dc80 <__kernel_sin+0x148>)
 800dc54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc58:	4606      	mov	r6, r0
 800dc5a:	460f      	mov	r7, r1
 800dc5c:	4640      	mov	r0, r8
 800dc5e:	4649      	mov	r1, r9
 800dc60:	f7f2 fcf2 	bl	8000648 <__aeabi_dmul>
 800dc64:	4602      	mov	r2, r0
 800dc66:	460b      	mov	r3, r1
 800dc68:	4630      	mov	r0, r6
 800dc6a:	4639      	mov	r1, r7
 800dc6c:	f7f2 fb36 	bl	80002dc <__adddf3>
 800dc70:	4602      	mov	r2, r0
 800dc72:	460b      	mov	r3, r1
 800dc74:	4620      	mov	r0, r4
 800dc76:	4629      	mov	r1, r5
 800dc78:	f7f2 fb2e 	bl	80002d8 <__aeabi_dsub>
 800dc7c:	e7c4      	b.n	800dc08 <__kernel_sin+0xd0>
 800dc7e:	bf00      	nop
 800dc80:	55555549 	.word	0x55555549
 800dc84:	3fc55555 	.word	0x3fc55555
 800dc88:	3fe00000 	.word	0x3fe00000
 800dc8c:	5acfd57c 	.word	0x5acfd57c
 800dc90:	3de5d93a 	.word	0x3de5d93a
 800dc94:	8a2b9ceb 	.word	0x8a2b9ceb
 800dc98:	3e5ae5e6 	.word	0x3e5ae5e6
 800dc9c:	57b1fe7d 	.word	0x57b1fe7d
 800dca0:	3ec71de3 	.word	0x3ec71de3
 800dca4:	19c161d5 	.word	0x19c161d5
 800dca8:	3f2a01a0 	.word	0x3f2a01a0
 800dcac:	1110f8a6 	.word	0x1110f8a6
 800dcb0:	3f811111 	.word	0x3f811111

0800dcb4 <__ieee754_fmod>:
 800dcb4:	ec53 2b11 	vmov	r2, r3, d1
 800dcb8:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 800dcbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dcc0:	ea5c 0402 	orrs.w	r4, ip, r2
 800dcc4:	ec51 0b10 	vmov	r0, r1, d0
 800dcc8:	ee11 7a10 	vmov	r7, s2
 800dccc:	ee11 ea10 	vmov	lr, s2
 800dcd0:	461e      	mov	r6, r3
 800dcd2:	d00c      	beq.n	800dcee <__ieee754_fmod+0x3a>
 800dcd4:	4c78      	ldr	r4, [pc, #480]	; (800deb8 <__ieee754_fmod+0x204>)
 800dcd6:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800dcda:	45a0      	cmp	r8, r4
 800dcdc:	4689      	mov	r9, r1
 800dcde:	dc06      	bgt.n	800dcee <__ieee754_fmod+0x3a>
 800dce0:	4254      	negs	r4, r2
 800dce2:	4d76      	ldr	r5, [pc, #472]	; (800debc <__ieee754_fmod+0x208>)
 800dce4:	4314      	orrs	r4, r2
 800dce6:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 800dcea:	42ac      	cmp	r4, r5
 800dcec:	d909      	bls.n	800dd02 <__ieee754_fmod+0x4e>
 800dcee:	f7f2 fcab 	bl	8000648 <__aeabi_dmul>
 800dcf2:	4602      	mov	r2, r0
 800dcf4:	460b      	mov	r3, r1
 800dcf6:	f7f2 fdd1 	bl	800089c <__aeabi_ddiv>
 800dcfa:	ec41 0b10 	vmov	d0, r0, r1
 800dcfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd02:	45e0      	cmp	r8, ip
 800dd04:	ee10 aa10 	vmov	sl, s0
 800dd08:	ee10 4a10 	vmov	r4, s0
 800dd0c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800dd10:	dc09      	bgt.n	800dd26 <__ieee754_fmod+0x72>
 800dd12:	dbf2      	blt.n	800dcfa <__ieee754_fmod+0x46>
 800dd14:	4290      	cmp	r0, r2
 800dd16:	d3f0      	bcc.n	800dcfa <__ieee754_fmod+0x46>
 800dd18:	d105      	bne.n	800dd26 <__ieee754_fmod+0x72>
 800dd1a:	4b69      	ldr	r3, [pc, #420]	; (800dec0 <__ieee754_fmod+0x20c>)
 800dd1c:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 800dd20:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dd24:	e7e9      	b.n	800dcfa <__ieee754_fmod+0x46>
 800dd26:	4a65      	ldr	r2, [pc, #404]	; (800debc <__ieee754_fmod+0x208>)
 800dd28:	ea19 0f02 	tst.w	r9, r2
 800dd2c:	d148      	bne.n	800ddc0 <__ieee754_fmod+0x10c>
 800dd2e:	f1b8 0f00 	cmp.w	r8, #0
 800dd32:	d13d      	bne.n	800ddb0 <__ieee754_fmod+0xfc>
 800dd34:	4963      	ldr	r1, [pc, #396]	; (800dec4 <__ieee754_fmod+0x210>)
 800dd36:	4653      	mov	r3, sl
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	dc36      	bgt.n	800ddaa <__ieee754_fmod+0xf6>
 800dd3c:	4216      	tst	r6, r2
 800dd3e:	d14f      	bne.n	800dde0 <__ieee754_fmod+0x12c>
 800dd40:	f1bc 0f00 	cmp.w	ip, #0
 800dd44:	d144      	bne.n	800ddd0 <__ieee754_fmod+0x11c>
 800dd46:	4a5f      	ldr	r2, [pc, #380]	; (800dec4 <__ieee754_fmod+0x210>)
 800dd48:	463b      	mov	r3, r7
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	dc3d      	bgt.n	800ddca <__ieee754_fmod+0x116>
 800dd4e:	485e      	ldr	r0, [pc, #376]	; (800dec8 <__ieee754_fmod+0x214>)
 800dd50:	4281      	cmp	r1, r0
 800dd52:	db4a      	blt.n	800ddea <__ieee754_fmod+0x136>
 800dd54:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dd58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dd5c:	485a      	ldr	r0, [pc, #360]	; (800dec8 <__ieee754_fmod+0x214>)
 800dd5e:	4282      	cmp	r2, r0
 800dd60:	db57      	blt.n	800de12 <__ieee754_fmod+0x15e>
 800dd62:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800dd66:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800dd6a:	1a89      	subs	r1, r1, r2
 800dd6c:	1b98      	subs	r0, r3, r6
 800dd6e:	eba4 070e 	sub.w	r7, r4, lr
 800dd72:	2900      	cmp	r1, #0
 800dd74:	d162      	bne.n	800de3c <__ieee754_fmod+0x188>
 800dd76:	4574      	cmp	r4, lr
 800dd78:	bf38      	it	cc
 800dd7a:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800dd7e:	2800      	cmp	r0, #0
 800dd80:	bfa4      	itt	ge
 800dd82:	463c      	movge	r4, r7
 800dd84:	4603      	movge	r3, r0
 800dd86:	ea53 0104 	orrs.w	r1, r3, r4
 800dd8a:	d0c6      	beq.n	800dd1a <__ieee754_fmod+0x66>
 800dd8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dd90:	db69      	blt.n	800de66 <__ieee754_fmod+0x1b2>
 800dd92:	494d      	ldr	r1, [pc, #308]	; (800dec8 <__ieee754_fmod+0x214>)
 800dd94:	428a      	cmp	r2, r1
 800dd96:	db6c      	blt.n	800de72 <__ieee754_fmod+0x1be>
 800dd98:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800dd9c:	432b      	orrs	r3, r5
 800dd9e:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800dda2:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800dda6:	4620      	mov	r0, r4
 800dda8:	e7a7      	b.n	800dcfa <__ieee754_fmod+0x46>
 800ddaa:	3901      	subs	r1, #1
 800ddac:	005b      	lsls	r3, r3, #1
 800ddae:	e7c3      	b.n	800dd38 <__ieee754_fmod+0x84>
 800ddb0:	4945      	ldr	r1, [pc, #276]	; (800dec8 <__ieee754_fmod+0x214>)
 800ddb2:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	ddc0      	ble.n	800dd3c <__ieee754_fmod+0x88>
 800ddba:	3901      	subs	r1, #1
 800ddbc:	005b      	lsls	r3, r3, #1
 800ddbe:	e7fa      	b.n	800ddb6 <__ieee754_fmod+0x102>
 800ddc0:	ea4f 5128 	mov.w	r1, r8, asr #20
 800ddc4:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800ddc8:	e7b8      	b.n	800dd3c <__ieee754_fmod+0x88>
 800ddca:	3a01      	subs	r2, #1
 800ddcc:	005b      	lsls	r3, r3, #1
 800ddce:	e7bc      	b.n	800dd4a <__ieee754_fmod+0x96>
 800ddd0:	4a3d      	ldr	r2, [pc, #244]	; (800dec8 <__ieee754_fmod+0x214>)
 800ddd2:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	ddb9      	ble.n	800dd4e <__ieee754_fmod+0x9a>
 800ddda:	3a01      	subs	r2, #1
 800dddc:	005b      	lsls	r3, r3, #1
 800ddde:	e7fa      	b.n	800ddd6 <__ieee754_fmod+0x122>
 800dde0:	ea4f 522c 	mov.w	r2, ip, asr #20
 800dde4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800dde8:	e7b1      	b.n	800dd4e <__ieee754_fmod+0x9a>
 800ddea:	1a40      	subs	r0, r0, r1
 800ddec:	281f      	cmp	r0, #31
 800ddee:	dc0a      	bgt.n	800de06 <__ieee754_fmod+0x152>
 800ddf0:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 800ddf4:	fa08 f800 	lsl.w	r8, r8, r0
 800ddf8:	fa2a f303 	lsr.w	r3, sl, r3
 800ddfc:	ea43 0308 	orr.w	r3, r3, r8
 800de00:	fa0a f400 	lsl.w	r4, sl, r0
 800de04:	e7aa      	b.n	800dd5c <__ieee754_fmod+0xa8>
 800de06:	4b31      	ldr	r3, [pc, #196]	; (800decc <__ieee754_fmod+0x218>)
 800de08:	1a5b      	subs	r3, r3, r1
 800de0a:	fa0a f303 	lsl.w	r3, sl, r3
 800de0e:	2400      	movs	r4, #0
 800de10:	e7a4      	b.n	800dd5c <__ieee754_fmod+0xa8>
 800de12:	1a80      	subs	r0, r0, r2
 800de14:	281f      	cmp	r0, #31
 800de16:	dc0a      	bgt.n	800de2e <__ieee754_fmod+0x17a>
 800de18:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 800de1c:	fa0c fc00 	lsl.w	ip, ip, r0
 800de20:	fa27 f606 	lsr.w	r6, r7, r6
 800de24:	ea46 060c 	orr.w	r6, r6, ip
 800de28:	fa07 fe00 	lsl.w	lr, r7, r0
 800de2c:	e79d      	b.n	800dd6a <__ieee754_fmod+0xb6>
 800de2e:	4e27      	ldr	r6, [pc, #156]	; (800decc <__ieee754_fmod+0x218>)
 800de30:	1ab6      	subs	r6, r6, r2
 800de32:	fa07 f606 	lsl.w	r6, r7, r6
 800de36:	f04f 0e00 	mov.w	lr, #0
 800de3a:	e796      	b.n	800dd6a <__ieee754_fmod+0xb6>
 800de3c:	4574      	cmp	r4, lr
 800de3e:	bf38      	it	cc
 800de40:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800de44:	2800      	cmp	r0, #0
 800de46:	da05      	bge.n	800de54 <__ieee754_fmod+0x1a0>
 800de48:	0fe0      	lsrs	r0, r4, #31
 800de4a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800de4e:	0064      	lsls	r4, r4, #1
 800de50:	3901      	subs	r1, #1
 800de52:	e78b      	b.n	800dd6c <__ieee754_fmod+0xb8>
 800de54:	ea50 0307 	orrs.w	r3, r0, r7
 800de58:	f43f af5f 	beq.w	800dd1a <__ieee754_fmod+0x66>
 800de5c:	0ffb      	lsrs	r3, r7, #31
 800de5e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800de62:	007c      	lsls	r4, r7, #1
 800de64:	e7f4      	b.n	800de50 <__ieee754_fmod+0x19c>
 800de66:	0fe1      	lsrs	r1, r4, #31
 800de68:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800de6c:	0064      	lsls	r4, r4, #1
 800de6e:	3a01      	subs	r2, #1
 800de70:	e78c      	b.n	800dd8c <__ieee754_fmod+0xd8>
 800de72:	1a89      	subs	r1, r1, r2
 800de74:	2914      	cmp	r1, #20
 800de76:	dc0a      	bgt.n	800de8e <__ieee754_fmod+0x1da>
 800de78:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800de7c:	fa03 f202 	lsl.w	r2, r3, r2
 800de80:	40cc      	lsrs	r4, r1
 800de82:	4322      	orrs	r2, r4
 800de84:	410b      	asrs	r3, r1
 800de86:	ea43 0105 	orr.w	r1, r3, r5
 800de8a:	4610      	mov	r0, r2
 800de8c:	e735      	b.n	800dcfa <__ieee754_fmod+0x46>
 800de8e:	291f      	cmp	r1, #31
 800de90:	dc07      	bgt.n	800dea2 <__ieee754_fmod+0x1ee>
 800de92:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800de96:	40cc      	lsrs	r4, r1
 800de98:	fa03 f202 	lsl.w	r2, r3, r2
 800de9c:	4322      	orrs	r2, r4
 800de9e:	462b      	mov	r3, r5
 800dea0:	e7f1      	b.n	800de86 <__ieee754_fmod+0x1d2>
 800dea2:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800dea6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800deaa:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800deae:	32e2      	adds	r2, #226	; 0xe2
 800deb0:	fa43 f202 	asr.w	r2, r3, r2
 800deb4:	e7f3      	b.n	800de9e <__ieee754_fmod+0x1ea>
 800deb6:	bf00      	nop
 800deb8:	7fefffff 	.word	0x7fefffff
 800debc:	7ff00000 	.word	0x7ff00000
 800dec0:	0800fb48 	.word	0x0800fb48
 800dec4:	fffffbed 	.word	0xfffffbed
 800dec8:	fffffc02 	.word	0xfffffc02
 800decc:	fffffbe2 	.word	0xfffffbe2

0800ded0 <__ieee754_rem_pio2>:
 800ded0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ded4:	ed2d 8b02 	vpush	{d8}
 800ded8:	ec55 4b10 	vmov	r4, r5, d0
 800dedc:	4bca      	ldr	r3, [pc, #808]	; (800e208 <__ieee754_rem_pio2+0x338>)
 800dede:	b08b      	sub	sp, #44	; 0x2c
 800dee0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800dee4:	4598      	cmp	r8, r3
 800dee6:	4682      	mov	sl, r0
 800dee8:	9502      	str	r5, [sp, #8]
 800deea:	dc08      	bgt.n	800defe <__ieee754_rem_pio2+0x2e>
 800deec:	2200      	movs	r2, #0
 800deee:	2300      	movs	r3, #0
 800def0:	ed80 0b00 	vstr	d0, [r0]
 800def4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800def8:	f04f 0b00 	mov.w	fp, #0
 800defc:	e028      	b.n	800df50 <__ieee754_rem_pio2+0x80>
 800defe:	4bc3      	ldr	r3, [pc, #780]	; (800e20c <__ieee754_rem_pio2+0x33c>)
 800df00:	4598      	cmp	r8, r3
 800df02:	dc78      	bgt.n	800dff6 <__ieee754_rem_pio2+0x126>
 800df04:	9b02      	ldr	r3, [sp, #8]
 800df06:	4ec2      	ldr	r6, [pc, #776]	; (800e210 <__ieee754_rem_pio2+0x340>)
 800df08:	2b00      	cmp	r3, #0
 800df0a:	ee10 0a10 	vmov	r0, s0
 800df0e:	a3b0      	add	r3, pc, #704	; (adr r3, 800e1d0 <__ieee754_rem_pio2+0x300>)
 800df10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df14:	4629      	mov	r1, r5
 800df16:	dd39      	ble.n	800df8c <__ieee754_rem_pio2+0xbc>
 800df18:	f7f2 f9de 	bl	80002d8 <__aeabi_dsub>
 800df1c:	45b0      	cmp	r8, r6
 800df1e:	4604      	mov	r4, r0
 800df20:	460d      	mov	r5, r1
 800df22:	d01b      	beq.n	800df5c <__ieee754_rem_pio2+0x8c>
 800df24:	a3ac      	add	r3, pc, #688	; (adr r3, 800e1d8 <__ieee754_rem_pio2+0x308>)
 800df26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df2a:	f7f2 f9d5 	bl	80002d8 <__aeabi_dsub>
 800df2e:	4602      	mov	r2, r0
 800df30:	460b      	mov	r3, r1
 800df32:	e9ca 2300 	strd	r2, r3, [sl]
 800df36:	4620      	mov	r0, r4
 800df38:	4629      	mov	r1, r5
 800df3a:	f7f2 f9cd 	bl	80002d8 <__aeabi_dsub>
 800df3e:	a3a6      	add	r3, pc, #664	; (adr r3, 800e1d8 <__ieee754_rem_pio2+0x308>)
 800df40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df44:	f7f2 f9c8 	bl	80002d8 <__aeabi_dsub>
 800df48:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800df4c:	f04f 0b01 	mov.w	fp, #1
 800df50:	4658      	mov	r0, fp
 800df52:	b00b      	add	sp, #44	; 0x2c
 800df54:	ecbd 8b02 	vpop	{d8}
 800df58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df5c:	a3a0      	add	r3, pc, #640	; (adr r3, 800e1e0 <__ieee754_rem_pio2+0x310>)
 800df5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df62:	f7f2 f9b9 	bl	80002d8 <__aeabi_dsub>
 800df66:	a3a0      	add	r3, pc, #640	; (adr r3, 800e1e8 <__ieee754_rem_pio2+0x318>)
 800df68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df6c:	4604      	mov	r4, r0
 800df6e:	460d      	mov	r5, r1
 800df70:	f7f2 f9b2 	bl	80002d8 <__aeabi_dsub>
 800df74:	4602      	mov	r2, r0
 800df76:	460b      	mov	r3, r1
 800df78:	e9ca 2300 	strd	r2, r3, [sl]
 800df7c:	4620      	mov	r0, r4
 800df7e:	4629      	mov	r1, r5
 800df80:	f7f2 f9aa 	bl	80002d8 <__aeabi_dsub>
 800df84:	a398      	add	r3, pc, #608	; (adr r3, 800e1e8 <__ieee754_rem_pio2+0x318>)
 800df86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df8a:	e7db      	b.n	800df44 <__ieee754_rem_pio2+0x74>
 800df8c:	f7f2 f9a6 	bl	80002dc <__adddf3>
 800df90:	45b0      	cmp	r8, r6
 800df92:	4604      	mov	r4, r0
 800df94:	460d      	mov	r5, r1
 800df96:	d016      	beq.n	800dfc6 <__ieee754_rem_pio2+0xf6>
 800df98:	a38f      	add	r3, pc, #572	; (adr r3, 800e1d8 <__ieee754_rem_pio2+0x308>)
 800df9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df9e:	f7f2 f99d 	bl	80002dc <__adddf3>
 800dfa2:	4602      	mov	r2, r0
 800dfa4:	460b      	mov	r3, r1
 800dfa6:	e9ca 2300 	strd	r2, r3, [sl]
 800dfaa:	4620      	mov	r0, r4
 800dfac:	4629      	mov	r1, r5
 800dfae:	f7f2 f993 	bl	80002d8 <__aeabi_dsub>
 800dfb2:	a389      	add	r3, pc, #548	; (adr r3, 800e1d8 <__ieee754_rem_pio2+0x308>)
 800dfb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfb8:	f7f2 f990 	bl	80002dc <__adddf3>
 800dfbc:	f04f 3bff 	mov.w	fp, #4294967295
 800dfc0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dfc4:	e7c4      	b.n	800df50 <__ieee754_rem_pio2+0x80>
 800dfc6:	a386      	add	r3, pc, #536	; (adr r3, 800e1e0 <__ieee754_rem_pio2+0x310>)
 800dfc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfcc:	f7f2 f986 	bl	80002dc <__adddf3>
 800dfd0:	a385      	add	r3, pc, #532	; (adr r3, 800e1e8 <__ieee754_rem_pio2+0x318>)
 800dfd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfd6:	4604      	mov	r4, r0
 800dfd8:	460d      	mov	r5, r1
 800dfda:	f7f2 f97f 	bl	80002dc <__adddf3>
 800dfde:	4602      	mov	r2, r0
 800dfe0:	460b      	mov	r3, r1
 800dfe2:	e9ca 2300 	strd	r2, r3, [sl]
 800dfe6:	4620      	mov	r0, r4
 800dfe8:	4629      	mov	r1, r5
 800dfea:	f7f2 f975 	bl	80002d8 <__aeabi_dsub>
 800dfee:	a37e      	add	r3, pc, #504	; (adr r3, 800e1e8 <__ieee754_rem_pio2+0x318>)
 800dff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dff4:	e7e0      	b.n	800dfb8 <__ieee754_rem_pio2+0xe8>
 800dff6:	4b87      	ldr	r3, [pc, #540]	; (800e214 <__ieee754_rem_pio2+0x344>)
 800dff8:	4598      	cmp	r8, r3
 800dffa:	f300 80d8 	bgt.w	800e1ae <__ieee754_rem_pio2+0x2de>
 800dffe:	f000 f96d 	bl	800e2dc <fabs>
 800e002:	ec55 4b10 	vmov	r4, r5, d0
 800e006:	ee10 0a10 	vmov	r0, s0
 800e00a:	a379      	add	r3, pc, #484	; (adr r3, 800e1f0 <__ieee754_rem_pio2+0x320>)
 800e00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e010:	4629      	mov	r1, r5
 800e012:	f7f2 fb19 	bl	8000648 <__aeabi_dmul>
 800e016:	4b80      	ldr	r3, [pc, #512]	; (800e218 <__ieee754_rem_pio2+0x348>)
 800e018:	2200      	movs	r2, #0
 800e01a:	f7f2 f95f 	bl	80002dc <__adddf3>
 800e01e:	f7f2 fdc3 	bl	8000ba8 <__aeabi_d2iz>
 800e022:	4683      	mov	fp, r0
 800e024:	f7f2 faa6 	bl	8000574 <__aeabi_i2d>
 800e028:	4602      	mov	r2, r0
 800e02a:	460b      	mov	r3, r1
 800e02c:	ec43 2b18 	vmov	d8, r2, r3
 800e030:	a367      	add	r3, pc, #412	; (adr r3, 800e1d0 <__ieee754_rem_pio2+0x300>)
 800e032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e036:	f7f2 fb07 	bl	8000648 <__aeabi_dmul>
 800e03a:	4602      	mov	r2, r0
 800e03c:	460b      	mov	r3, r1
 800e03e:	4620      	mov	r0, r4
 800e040:	4629      	mov	r1, r5
 800e042:	f7f2 f949 	bl	80002d8 <__aeabi_dsub>
 800e046:	a364      	add	r3, pc, #400	; (adr r3, 800e1d8 <__ieee754_rem_pio2+0x308>)
 800e048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e04c:	4606      	mov	r6, r0
 800e04e:	460f      	mov	r7, r1
 800e050:	ec51 0b18 	vmov	r0, r1, d8
 800e054:	f7f2 faf8 	bl	8000648 <__aeabi_dmul>
 800e058:	f1bb 0f1f 	cmp.w	fp, #31
 800e05c:	4604      	mov	r4, r0
 800e05e:	460d      	mov	r5, r1
 800e060:	dc0d      	bgt.n	800e07e <__ieee754_rem_pio2+0x1ae>
 800e062:	4b6e      	ldr	r3, [pc, #440]	; (800e21c <__ieee754_rem_pio2+0x34c>)
 800e064:	f10b 32ff 	add.w	r2, fp, #4294967295
 800e068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e06c:	4543      	cmp	r3, r8
 800e06e:	d006      	beq.n	800e07e <__ieee754_rem_pio2+0x1ae>
 800e070:	4622      	mov	r2, r4
 800e072:	462b      	mov	r3, r5
 800e074:	4630      	mov	r0, r6
 800e076:	4639      	mov	r1, r7
 800e078:	f7f2 f92e 	bl	80002d8 <__aeabi_dsub>
 800e07c:	e00e      	b.n	800e09c <__ieee754_rem_pio2+0x1cc>
 800e07e:	462b      	mov	r3, r5
 800e080:	4622      	mov	r2, r4
 800e082:	4630      	mov	r0, r6
 800e084:	4639      	mov	r1, r7
 800e086:	f7f2 f927 	bl	80002d8 <__aeabi_dsub>
 800e08a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e08e:	9303      	str	r3, [sp, #12]
 800e090:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e094:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800e098:	2b10      	cmp	r3, #16
 800e09a:	dc02      	bgt.n	800e0a2 <__ieee754_rem_pio2+0x1d2>
 800e09c:	e9ca 0100 	strd	r0, r1, [sl]
 800e0a0:	e039      	b.n	800e116 <__ieee754_rem_pio2+0x246>
 800e0a2:	a34f      	add	r3, pc, #316	; (adr r3, 800e1e0 <__ieee754_rem_pio2+0x310>)
 800e0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0a8:	ec51 0b18 	vmov	r0, r1, d8
 800e0ac:	f7f2 facc 	bl	8000648 <__aeabi_dmul>
 800e0b0:	4604      	mov	r4, r0
 800e0b2:	460d      	mov	r5, r1
 800e0b4:	4602      	mov	r2, r0
 800e0b6:	460b      	mov	r3, r1
 800e0b8:	4630      	mov	r0, r6
 800e0ba:	4639      	mov	r1, r7
 800e0bc:	f7f2 f90c 	bl	80002d8 <__aeabi_dsub>
 800e0c0:	4602      	mov	r2, r0
 800e0c2:	460b      	mov	r3, r1
 800e0c4:	4680      	mov	r8, r0
 800e0c6:	4689      	mov	r9, r1
 800e0c8:	4630      	mov	r0, r6
 800e0ca:	4639      	mov	r1, r7
 800e0cc:	f7f2 f904 	bl	80002d8 <__aeabi_dsub>
 800e0d0:	4622      	mov	r2, r4
 800e0d2:	462b      	mov	r3, r5
 800e0d4:	f7f2 f900 	bl	80002d8 <__aeabi_dsub>
 800e0d8:	a343      	add	r3, pc, #268	; (adr r3, 800e1e8 <__ieee754_rem_pio2+0x318>)
 800e0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0de:	4604      	mov	r4, r0
 800e0e0:	460d      	mov	r5, r1
 800e0e2:	ec51 0b18 	vmov	r0, r1, d8
 800e0e6:	f7f2 faaf 	bl	8000648 <__aeabi_dmul>
 800e0ea:	4622      	mov	r2, r4
 800e0ec:	462b      	mov	r3, r5
 800e0ee:	f7f2 f8f3 	bl	80002d8 <__aeabi_dsub>
 800e0f2:	4602      	mov	r2, r0
 800e0f4:	460b      	mov	r3, r1
 800e0f6:	4604      	mov	r4, r0
 800e0f8:	460d      	mov	r5, r1
 800e0fa:	4640      	mov	r0, r8
 800e0fc:	4649      	mov	r1, r9
 800e0fe:	f7f2 f8eb 	bl	80002d8 <__aeabi_dsub>
 800e102:	9a03      	ldr	r2, [sp, #12]
 800e104:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e108:	1ad3      	subs	r3, r2, r3
 800e10a:	2b31      	cmp	r3, #49	; 0x31
 800e10c:	dc24      	bgt.n	800e158 <__ieee754_rem_pio2+0x288>
 800e10e:	e9ca 0100 	strd	r0, r1, [sl]
 800e112:	4646      	mov	r6, r8
 800e114:	464f      	mov	r7, r9
 800e116:	e9da 8900 	ldrd	r8, r9, [sl]
 800e11a:	4630      	mov	r0, r6
 800e11c:	4642      	mov	r2, r8
 800e11e:	464b      	mov	r3, r9
 800e120:	4639      	mov	r1, r7
 800e122:	f7f2 f8d9 	bl	80002d8 <__aeabi_dsub>
 800e126:	462b      	mov	r3, r5
 800e128:	4622      	mov	r2, r4
 800e12a:	f7f2 f8d5 	bl	80002d8 <__aeabi_dsub>
 800e12e:	9b02      	ldr	r3, [sp, #8]
 800e130:	2b00      	cmp	r3, #0
 800e132:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e136:	f6bf af0b 	bge.w	800df50 <__ieee754_rem_pio2+0x80>
 800e13a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e13e:	f8ca 3004 	str.w	r3, [sl, #4]
 800e142:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e146:	f8ca 8000 	str.w	r8, [sl]
 800e14a:	f8ca 0008 	str.w	r0, [sl, #8]
 800e14e:	f8ca 300c 	str.w	r3, [sl, #12]
 800e152:	f1cb 0b00 	rsb	fp, fp, #0
 800e156:	e6fb      	b.n	800df50 <__ieee754_rem_pio2+0x80>
 800e158:	a327      	add	r3, pc, #156	; (adr r3, 800e1f8 <__ieee754_rem_pio2+0x328>)
 800e15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e15e:	ec51 0b18 	vmov	r0, r1, d8
 800e162:	f7f2 fa71 	bl	8000648 <__aeabi_dmul>
 800e166:	4604      	mov	r4, r0
 800e168:	460d      	mov	r5, r1
 800e16a:	4602      	mov	r2, r0
 800e16c:	460b      	mov	r3, r1
 800e16e:	4640      	mov	r0, r8
 800e170:	4649      	mov	r1, r9
 800e172:	f7f2 f8b1 	bl	80002d8 <__aeabi_dsub>
 800e176:	4602      	mov	r2, r0
 800e178:	460b      	mov	r3, r1
 800e17a:	4606      	mov	r6, r0
 800e17c:	460f      	mov	r7, r1
 800e17e:	4640      	mov	r0, r8
 800e180:	4649      	mov	r1, r9
 800e182:	f7f2 f8a9 	bl	80002d8 <__aeabi_dsub>
 800e186:	4622      	mov	r2, r4
 800e188:	462b      	mov	r3, r5
 800e18a:	f7f2 f8a5 	bl	80002d8 <__aeabi_dsub>
 800e18e:	a31c      	add	r3, pc, #112	; (adr r3, 800e200 <__ieee754_rem_pio2+0x330>)
 800e190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e194:	4604      	mov	r4, r0
 800e196:	460d      	mov	r5, r1
 800e198:	ec51 0b18 	vmov	r0, r1, d8
 800e19c:	f7f2 fa54 	bl	8000648 <__aeabi_dmul>
 800e1a0:	4622      	mov	r2, r4
 800e1a2:	462b      	mov	r3, r5
 800e1a4:	f7f2 f898 	bl	80002d8 <__aeabi_dsub>
 800e1a8:	4604      	mov	r4, r0
 800e1aa:	460d      	mov	r5, r1
 800e1ac:	e760      	b.n	800e070 <__ieee754_rem_pio2+0x1a0>
 800e1ae:	4b1c      	ldr	r3, [pc, #112]	; (800e220 <__ieee754_rem_pio2+0x350>)
 800e1b0:	4598      	cmp	r8, r3
 800e1b2:	dd37      	ble.n	800e224 <__ieee754_rem_pio2+0x354>
 800e1b4:	ee10 2a10 	vmov	r2, s0
 800e1b8:	462b      	mov	r3, r5
 800e1ba:	4620      	mov	r0, r4
 800e1bc:	4629      	mov	r1, r5
 800e1be:	f7f2 f88b 	bl	80002d8 <__aeabi_dsub>
 800e1c2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e1c6:	e9ca 0100 	strd	r0, r1, [sl]
 800e1ca:	e695      	b.n	800def8 <__ieee754_rem_pio2+0x28>
 800e1cc:	f3af 8000 	nop.w
 800e1d0:	54400000 	.word	0x54400000
 800e1d4:	3ff921fb 	.word	0x3ff921fb
 800e1d8:	1a626331 	.word	0x1a626331
 800e1dc:	3dd0b461 	.word	0x3dd0b461
 800e1e0:	1a600000 	.word	0x1a600000
 800e1e4:	3dd0b461 	.word	0x3dd0b461
 800e1e8:	2e037073 	.word	0x2e037073
 800e1ec:	3ba3198a 	.word	0x3ba3198a
 800e1f0:	6dc9c883 	.word	0x6dc9c883
 800e1f4:	3fe45f30 	.word	0x3fe45f30
 800e1f8:	2e000000 	.word	0x2e000000
 800e1fc:	3ba3198a 	.word	0x3ba3198a
 800e200:	252049c1 	.word	0x252049c1
 800e204:	397b839a 	.word	0x397b839a
 800e208:	3fe921fb 	.word	0x3fe921fb
 800e20c:	4002d97b 	.word	0x4002d97b
 800e210:	3ff921fb 	.word	0x3ff921fb
 800e214:	413921fb 	.word	0x413921fb
 800e218:	3fe00000 	.word	0x3fe00000
 800e21c:	0800fb58 	.word	0x0800fb58
 800e220:	7fefffff 	.word	0x7fefffff
 800e224:	ea4f 5628 	mov.w	r6, r8, asr #20
 800e228:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800e22c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800e230:	4620      	mov	r0, r4
 800e232:	460d      	mov	r5, r1
 800e234:	f7f2 fcb8 	bl	8000ba8 <__aeabi_d2iz>
 800e238:	f7f2 f99c 	bl	8000574 <__aeabi_i2d>
 800e23c:	4602      	mov	r2, r0
 800e23e:	460b      	mov	r3, r1
 800e240:	4620      	mov	r0, r4
 800e242:	4629      	mov	r1, r5
 800e244:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e248:	f7f2 f846 	bl	80002d8 <__aeabi_dsub>
 800e24c:	4b21      	ldr	r3, [pc, #132]	; (800e2d4 <__ieee754_rem_pio2+0x404>)
 800e24e:	2200      	movs	r2, #0
 800e250:	f7f2 f9fa 	bl	8000648 <__aeabi_dmul>
 800e254:	460d      	mov	r5, r1
 800e256:	4604      	mov	r4, r0
 800e258:	f7f2 fca6 	bl	8000ba8 <__aeabi_d2iz>
 800e25c:	f7f2 f98a 	bl	8000574 <__aeabi_i2d>
 800e260:	4602      	mov	r2, r0
 800e262:	460b      	mov	r3, r1
 800e264:	4620      	mov	r0, r4
 800e266:	4629      	mov	r1, r5
 800e268:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e26c:	f7f2 f834 	bl	80002d8 <__aeabi_dsub>
 800e270:	4b18      	ldr	r3, [pc, #96]	; (800e2d4 <__ieee754_rem_pio2+0x404>)
 800e272:	2200      	movs	r2, #0
 800e274:	f7f2 f9e8 	bl	8000648 <__aeabi_dmul>
 800e278:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e27c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800e280:	2703      	movs	r7, #3
 800e282:	2400      	movs	r4, #0
 800e284:	2500      	movs	r5, #0
 800e286:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800e28a:	4622      	mov	r2, r4
 800e28c:	462b      	mov	r3, r5
 800e28e:	46b9      	mov	r9, r7
 800e290:	3f01      	subs	r7, #1
 800e292:	f7f2 fc41 	bl	8000b18 <__aeabi_dcmpeq>
 800e296:	2800      	cmp	r0, #0
 800e298:	d1f5      	bne.n	800e286 <__ieee754_rem_pio2+0x3b6>
 800e29a:	4b0f      	ldr	r3, [pc, #60]	; (800e2d8 <__ieee754_rem_pio2+0x408>)
 800e29c:	9301      	str	r3, [sp, #4]
 800e29e:	2302      	movs	r3, #2
 800e2a0:	9300      	str	r3, [sp, #0]
 800e2a2:	4632      	mov	r2, r6
 800e2a4:	464b      	mov	r3, r9
 800e2a6:	4651      	mov	r1, sl
 800e2a8:	a804      	add	r0, sp, #16
 800e2aa:	f000 f9fd 	bl	800e6a8 <__kernel_rem_pio2>
 800e2ae:	9b02      	ldr	r3, [sp, #8]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	4683      	mov	fp, r0
 800e2b4:	f6bf ae4c 	bge.w	800df50 <__ieee754_rem_pio2+0x80>
 800e2b8:	e9da 2100 	ldrd	r2, r1, [sl]
 800e2bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e2c0:	e9ca 2300 	strd	r2, r3, [sl]
 800e2c4:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800e2c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e2cc:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800e2d0:	e73f      	b.n	800e152 <__ieee754_rem_pio2+0x282>
 800e2d2:	bf00      	nop
 800e2d4:	41700000 	.word	0x41700000
 800e2d8:	0800fbd8 	.word	0x0800fbd8

0800e2dc <fabs>:
 800e2dc:	ec51 0b10 	vmov	r0, r1, d0
 800e2e0:	ee10 2a10 	vmov	r2, s0
 800e2e4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e2e8:	ec43 2b10 	vmov	d0, r2, r3
 800e2ec:	4770      	bx	lr
	...

0800e2f0 <__kernel_cosf>:
 800e2f0:	ee10 3a10 	vmov	r3, s0
 800e2f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e2f8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800e2fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e300:	da05      	bge.n	800e30e <__kernel_cosf+0x1e>
 800e302:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800e306:	ee17 2a90 	vmov	r2, s15
 800e30a:	2a00      	cmp	r2, #0
 800e30c:	d03b      	beq.n	800e386 <__kernel_cosf+0x96>
 800e30e:	ee20 7a00 	vmul.f32	s14, s0, s0
 800e312:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800e38c <__kernel_cosf+0x9c>
 800e316:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 800e390 <__kernel_cosf+0xa0>
 800e31a:	4a1e      	ldr	r2, [pc, #120]	; (800e394 <__kernel_cosf+0xa4>)
 800e31c:	eea7 6a27 	vfma.f32	s12, s14, s15
 800e320:	4293      	cmp	r3, r2
 800e322:	eddf 7a1d 	vldr	s15, [pc, #116]	; 800e398 <__kernel_cosf+0xa8>
 800e326:	eee6 7a07 	vfma.f32	s15, s12, s14
 800e32a:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 800e39c <__kernel_cosf+0xac>
 800e32e:	eea7 6a87 	vfma.f32	s12, s15, s14
 800e332:	eddf 7a1b 	vldr	s15, [pc, #108]	; 800e3a0 <__kernel_cosf+0xb0>
 800e336:	eee6 7a07 	vfma.f32	s15, s12, s14
 800e33a:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 800e3a4 <__kernel_cosf+0xb4>
 800e33e:	eea7 6a87 	vfma.f32	s12, s15, s14
 800e342:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800e346:	ee26 6a07 	vmul.f32	s12, s12, s14
 800e34a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e34e:	eee7 0a06 	vfma.f32	s1, s14, s12
 800e352:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e356:	dc04      	bgt.n	800e362 <__kernel_cosf+0x72>
 800e358:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800e35c:	ee36 0ae7 	vsub.f32	s0, s13, s15
 800e360:	4770      	bx	lr
 800e362:	4a11      	ldr	r2, [pc, #68]	; (800e3a8 <__kernel_cosf+0xb8>)
 800e364:	4293      	cmp	r3, r2
 800e366:	bfda      	itte	le
 800e368:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800e36c:	ee07 3a10 	vmovle	s14, r3
 800e370:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 800e374:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e378:	ee36 0ac7 	vsub.f32	s0, s13, s14
 800e37c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800e380:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e384:	4770      	bx	lr
 800e386:	eeb0 0a66 	vmov.f32	s0, s13
 800e38a:	4770      	bx	lr
 800e38c:	ad47d74e 	.word	0xad47d74e
 800e390:	310f74f6 	.word	0x310f74f6
 800e394:	3e999999 	.word	0x3e999999
 800e398:	b493f27c 	.word	0xb493f27c
 800e39c:	37d00d01 	.word	0x37d00d01
 800e3a0:	bab60b61 	.word	0xbab60b61
 800e3a4:	3d2aaaab 	.word	0x3d2aaaab
 800e3a8:	3f480000 	.word	0x3f480000

0800e3ac <__kernel_sinf>:
 800e3ac:	ee10 3a10 	vmov	r3, s0
 800e3b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e3b4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800e3b8:	da04      	bge.n	800e3c4 <__kernel_sinf+0x18>
 800e3ba:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800e3be:	ee17 3a90 	vmov	r3, s15
 800e3c2:	b35b      	cbz	r3, 800e41c <__kernel_sinf+0x70>
 800e3c4:	ee20 7a00 	vmul.f32	s14, s0, s0
 800e3c8:	eddf 7a15 	vldr	s15, [pc, #84]	; 800e420 <__kernel_sinf+0x74>
 800e3cc:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800e424 <__kernel_sinf+0x78>
 800e3d0:	eea7 6a27 	vfma.f32	s12, s14, s15
 800e3d4:	eddf 7a14 	vldr	s15, [pc, #80]	; 800e428 <__kernel_sinf+0x7c>
 800e3d8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800e3dc:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800e42c <__kernel_sinf+0x80>
 800e3e0:	eea7 6a87 	vfma.f32	s12, s15, s14
 800e3e4:	eddf 7a12 	vldr	s15, [pc, #72]	; 800e430 <__kernel_sinf+0x84>
 800e3e8:	ee60 6a07 	vmul.f32	s13, s0, s14
 800e3ec:	eee6 7a07 	vfma.f32	s15, s12, s14
 800e3f0:	b930      	cbnz	r0, 800e400 <__kernel_sinf+0x54>
 800e3f2:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800e434 <__kernel_sinf+0x88>
 800e3f6:	eea7 6a27 	vfma.f32	s12, s14, s15
 800e3fa:	eea6 0a26 	vfma.f32	s0, s12, s13
 800e3fe:	4770      	bx	lr
 800e400:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800e404:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800e408:	eee0 7a86 	vfma.f32	s15, s1, s12
 800e40c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800e410:	eddf 7a09 	vldr	s15, [pc, #36]	; 800e438 <__kernel_sinf+0x8c>
 800e414:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800e418:	ee30 0a60 	vsub.f32	s0, s0, s1
 800e41c:	4770      	bx	lr
 800e41e:	bf00      	nop
 800e420:	2f2ec9d3 	.word	0x2f2ec9d3
 800e424:	b2d72f34 	.word	0xb2d72f34
 800e428:	3638ef1b 	.word	0x3638ef1b
 800e42c:	b9500d01 	.word	0xb9500d01
 800e430:	3c088889 	.word	0x3c088889
 800e434:	be2aaaab 	.word	0xbe2aaaab
 800e438:	3e2aaaab 	.word	0x3e2aaaab

0800e43c <__ieee754_rem_pio2f>:
 800e43c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e43e:	ee10 6a10 	vmov	r6, s0
 800e442:	4b86      	ldr	r3, [pc, #536]	; (800e65c <__ieee754_rem_pio2f+0x220>)
 800e444:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800e448:	429d      	cmp	r5, r3
 800e44a:	b087      	sub	sp, #28
 800e44c:	4604      	mov	r4, r0
 800e44e:	dc05      	bgt.n	800e45c <__ieee754_rem_pio2f+0x20>
 800e450:	2300      	movs	r3, #0
 800e452:	ed80 0a00 	vstr	s0, [r0]
 800e456:	6043      	str	r3, [r0, #4]
 800e458:	2000      	movs	r0, #0
 800e45a:	e020      	b.n	800e49e <__ieee754_rem_pio2f+0x62>
 800e45c:	4b80      	ldr	r3, [pc, #512]	; (800e660 <__ieee754_rem_pio2f+0x224>)
 800e45e:	429d      	cmp	r5, r3
 800e460:	dc38      	bgt.n	800e4d4 <__ieee754_rem_pio2f+0x98>
 800e462:	2e00      	cmp	r6, #0
 800e464:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 800e664 <__ieee754_rem_pio2f+0x228>
 800e468:	4b7f      	ldr	r3, [pc, #508]	; (800e668 <__ieee754_rem_pio2f+0x22c>)
 800e46a:	f025 050f 	bic.w	r5, r5, #15
 800e46e:	dd18      	ble.n	800e4a2 <__ieee754_rem_pio2f+0x66>
 800e470:	429d      	cmp	r5, r3
 800e472:	ee70 7a47 	vsub.f32	s15, s0, s14
 800e476:	bf09      	itett	eq
 800e478:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800e66c <__ieee754_rem_pio2f+0x230>
 800e47c:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800e670 <__ieee754_rem_pio2f+0x234>
 800e480:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800e484:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800e674 <__ieee754_rem_pio2f+0x238>
 800e488:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800e48c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e490:	edc0 6a00 	vstr	s13, [r0]
 800e494:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e498:	edc0 7a01 	vstr	s15, [r0, #4]
 800e49c:	2001      	movs	r0, #1
 800e49e:	b007      	add	sp, #28
 800e4a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e4a2:	429d      	cmp	r5, r3
 800e4a4:	ee70 7a07 	vadd.f32	s15, s0, s14
 800e4a8:	bf09      	itett	eq
 800e4aa:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800e66c <__ieee754_rem_pio2f+0x230>
 800e4ae:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800e670 <__ieee754_rem_pio2f+0x234>
 800e4b2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800e4b6:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800e674 <__ieee754_rem_pio2f+0x238>
 800e4ba:	ee77 6a87 	vadd.f32	s13, s15, s14
 800e4be:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e4c2:	edc0 6a00 	vstr	s13, [r0]
 800e4c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e4ca:	edc0 7a01 	vstr	s15, [r0, #4]
 800e4ce:	f04f 30ff 	mov.w	r0, #4294967295
 800e4d2:	e7e4      	b.n	800e49e <__ieee754_rem_pio2f+0x62>
 800e4d4:	4b68      	ldr	r3, [pc, #416]	; (800e678 <__ieee754_rem_pio2f+0x23c>)
 800e4d6:	429d      	cmp	r5, r3
 800e4d8:	dc71      	bgt.n	800e5be <__ieee754_rem_pio2f+0x182>
 800e4da:	f000 f8db 	bl	800e694 <fabsf>
 800e4de:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800e67c <__ieee754_rem_pio2f+0x240>
 800e4e2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e4e6:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e4ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e4ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e4f2:	ee17 0a90 	vmov	r0, s15
 800e4f6:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800e664 <__ieee754_rem_pio2f+0x228>
 800e4fa:	eea7 0a67 	vfms.f32	s0, s14, s15
 800e4fe:	281f      	cmp	r0, #31
 800e500:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800e670 <__ieee754_rem_pio2f+0x234>
 800e504:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e508:	eeb1 6a47 	vneg.f32	s12, s14
 800e50c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800e510:	ee16 2a90 	vmov	r2, s13
 800e514:	dc1c      	bgt.n	800e550 <__ieee754_rem_pio2f+0x114>
 800e516:	495a      	ldr	r1, [pc, #360]	; (800e680 <__ieee754_rem_pio2f+0x244>)
 800e518:	1e47      	subs	r7, r0, #1
 800e51a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800e51e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800e522:	428b      	cmp	r3, r1
 800e524:	d014      	beq.n	800e550 <__ieee754_rem_pio2f+0x114>
 800e526:	6022      	str	r2, [r4, #0]
 800e528:	ed94 7a00 	vldr	s14, [r4]
 800e52c:	ee30 0a47 	vsub.f32	s0, s0, s14
 800e530:	2e00      	cmp	r6, #0
 800e532:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e536:	ed84 0a01 	vstr	s0, [r4, #4]
 800e53a:	dab0      	bge.n	800e49e <__ieee754_rem_pio2f+0x62>
 800e53c:	eeb1 7a47 	vneg.f32	s14, s14
 800e540:	eeb1 0a40 	vneg.f32	s0, s0
 800e544:	ed84 7a00 	vstr	s14, [r4]
 800e548:	ed84 0a01 	vstr	s0, [r4, #4]
 800e54c:	4240      	negs	r0, r0
 800e54e:	e7a6      	b.n	800e49e <__ieee754_rem_pio2f+0x62>
 800e550:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800e554:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 800e558:	2908      	cmp	r1, #8
 800e55a:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800e55e:	dde2      	ble.n	800e526 <__ieee754_rem_pio2f+0xea>
 800e560:	eddf 5a42 	vldr	s11, [pc, #264]	; 800e66c <__ieee754_rem_pio2f+0x230>
 800e564:	eef0 6a40 	vmov.f32	s13, s0
 800e568:	eee6 6a25 	vfma.f32	s13, s12, s11
 800e56c:	ee70 7a66 	vsub.f32	s15, s0, s13
 800e570:	eee6 7a25 	vfma.f32	s15, s12, s11
 800e574:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800e674 <__ieee754_rem_pio2f+0x238>
 800e578:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800e57c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800e580:	ee15 2a90 	vmov	r2, s11
 800e584:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800e588:	1a5b      	subs	r3, r3, r1
 800e58a:	2b19      	cmp	r3, #25
 800e58c:	dc04      	bgt.n	800e598 <__ieee754_rem_pio2f+0x15c>
 800e58e:	edc4 5a00 	vstr	s11, [r4]
 800e592:	eeb0 0a66 	vmov.f32	s0, s13
 800e596:	e7c7      	b.n	800e528 <__ieee754_rem_pio2f+0xec>
 800e598:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800e684 <__ieee754_rem_pio2f+0x248>
 800e59c:	eeb0 0a66 	vmov.f32	s0, s13
 800e5a0:	eea6 0a25 	vfma.f32	s0, s12, s11
 800e5a4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800e5a8:	eddf 6a37 	vldr	s13, [pc, #220]	; 800e688 <__ieee754_rem_pio2f+0x24c>
 800e5ac:	eee6 7a25 	vfma.f32	s15, s12, s11
 800e5b0:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800e5b4:	ee30 7a67 	vsub.f32	s14, s0, s15
 800e5b8:	ed84 7a00 	vstr	s14, [r4]
 800e5bc:	e7b4      	b.n	800e528 <__ieee754_rem_pio2f+0xec>
 800e5be:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800e5c2:	db06      	blt.n	800e5d2 <__ieee754_rem_pio2f+0x196>
 800e5c4:	ee70 7a40 	vsub.f32	s15, s0, s0
 800e5c8:	edc0 7a01 	vstr	s15, [r0, #4]
 800e5cc:	edc0 7a00 	vstr	s15, [r0]
 800e5d0:	e742      	b.n	800e458 <__ieee754_rem_pio2f+0x1c>
 800e5d2:	15ea      	asrs	r2, r5, #23
 800e5d4:	3a86      	subs	r2, #134	; 0x86
 800e5d6:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800e5da:	ee07 3a90 	vmov	s15, r3
 800e5de:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800e5e2:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800e68c <__ieee754_rem_pio2f+0x250>
 800e5e6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e5ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e5ee:	ed8d 7a03 	vstr	s14, [sp, #12]
 800e5f2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e5f6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800e5fa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e5fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e602:	ed8d 7a04 	vstr	s14, [sp, #16]
 800e606:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e60a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e60e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e612:	edcd 7a05 	vstr	s15, [sp, #20]
 800e616:	d11e      	bne.n	800e656 <__ieee754_rem_pio2f+0x21a>
 800e618:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800e61c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e620:	bf14      	ite	ne
 800e622:	2302      	movne	r3, #2
 800e624:	2301      	moveq	r3, #1
 800e626:	491a      	ldr	r1, [pc, #104]	; (800e690 <__ieee754_rem_pio2f+0x254>)
 800e628:	9101      	str	r1, [sp, #4]
 800e62a:	2102      	movs	r1, #2
 800e62c:	9100      	str	r1, [sp, #0]
 800e62e:	a803      	add	r0, sp, #12
 800e630:	4621      	mov	r1, r4
 800e632:	f000 fb87 	bl	800ed44 <__kernel_rem_pio2f>
 800e636:	2e00      	cmp	r6, #0
 800e638:	f6bf af31 	bge.w	800e49e <__ieee754_rem_pio2f+0x62>
 800e63c:	edd4 7a00 	vldr	s15, [r4]
 800e640:	eef1 7a67 	vneg.f32	s15, s15
 800e644:	edc4 7a00 	vstr	s15, [r4]
 800e648:	edd4 7a01 	vldr	s15, [r4, #4]
 800e64c:	eef1 7a67 	vneg.f32	s15, s15
 800e650:	edc4 7a01 	vstr	s15, [r4, #4]
 800e654:	e77a      	b.n	800e54c <__ieee754_rem_pio2f+0x110>
 800e656:	2303      	movs	r3, #3
 800e658:	e7e5      	b.n	800e626 <__ieee754_rem_pio2f+0x1ea>
 800e65a:	bf00      	nop
 800e65c:	3f490fd8 	.word	0x3f490fd8
 800e660:	4016cbe3 	.word	0x4016cbe3
 800e664:	3fc90f80 	.word	0x3fc90f80
 800e668:	3fc90fd0 	.word	0x3fc90fd0
 800e66c:	37354400 	.word	0x37354400
 800e670:	37354443 	.word	0x37354443
 800e674:	2e85a308 	.word	0x2e85a308
 800e678:	43490f80 	.word	0x43490f80
 800e67c:	3f22f984 	.word	0x3f22f984
 800e680:	0800fce0 	.word	0x0800fce0
 800e684:	2e85a300 	.word	0x2e85a300
 800e688:	248d3132 	.word	0x248d3132
 800e68c:	43800000 	.word	0x43800000
 800e690:	0800fd60 	.word	0x0800fd60

0800e694 <fabsf>:
 800e694:	ee10 3a10 	vmov	r3, s0
 800e698:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e69c:	ee00 3a10 	vmov	s0, r3
 800e6a0:	4770      	bx	lr
 800e6a2:	0000      	movs	r0, r0
 800e6a4:	0000      	movs	r0, r0
	...

0800e6a8 <__kernel_rem_pio2>:
 800e6a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6ac:	ed2d 8b02 	vpush	{d8}
 800e6b0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800e6b4:	f112 0f14 	cmn.w	r2, #20
 800e6b8:	9306      	str	r3, [sp, #24]
 800e6ba:	9104      	str	r1, [sp, #16]
 800e6bc:	4bc2      	ldr	r3, [pc, #776]	; (800e9c8 <__kernel_rem_pio2+0x320>)
 800e6be:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800e6c0:	9009      	str	r0, [sp, #36]	; 0x24
 800e6c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e6c6:	9300      	str	r3, [sp, #0]
 800e6c8:	9b06      	ldr	r3, [sp, #24]
 800e6ca:	f103 33ff 	add.w	r3, r3, #4294967295
 800e6ce:	bfa8      	it	ge
 800e6d0:	1ed4      	subge	r4, r2, #3
 800e6d2:	9305      	str	r3, [sp, #20]
 800e6d4:	bfb2      	itee	lt
 800e6d6:	2400      	movlt	r4, #0
 800e6d8:	2318      	movge	r3, #24
 800e6da:	fb94 f4f3 	sdivge	r4, r4, r3
 800e6de:	f06f 0317 	mvn.w	r3, #23
 800e6e2:	fb04 3303 	mla	r3, r4, r3, r3
 800e6e6:	eb03 0a02 	add.w	sl, r3, r2
 800e6ea:	9b00      	ldr	r3, [sp, #0]
 800e6ec:	9a05      	ldr	r2, [sp, #20]
 800e6ee:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800e9b8 <__kernel_rem_pio2+0x310>
 800e6f2:	eb03 0802 	add.w	r8, r3, r2
 800e6f6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e6f8:	1aa7      	subs	r7, r4, r2
 800e6fa:	ae20      	add	r6, sp, #128	; 0x80
 800e6fc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e700:	2500      	movs	r5, #0
 800e702:	4545      	cmp	r5, r8
 800e704:	dd13      	ble.n	800e72e <__kernel_rem_pio2+0x86>
 800e706:	9b06      	ldr	r3, [sp, #24]
 800e708:	aa20      	add	r2, sp, #128	; 0x80
 800e70a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e70e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800e712:	f04f 0800 	mov.w	r8, #0
 800e716:	9b00      	ldr	r3, [sp, #0]
 800e718:	4598      	cmp	r8, r3
 800e71a:	dc31      	bgt.n	800e780 <__kernel_rem_pio2+0xd8>
 800e71c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800e9b8 <__kernel_rem_pio2+0x310>
 800e720:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800e724:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e728:	462f      	mov	r7, r5
 800e72a:	2600      	movs	r6, #0
 800e72c:	e01b      	b.n	800e766 <__kernel_rem_pio2+0xbe>
 800e72e:	42ef      	cmn	r7, r5
 800e730:	d407      	bmi.n	800e742 <__kernel_rem_pio2+0x9a>
 800e732:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e736:	f7f1 ff1d 	bl	8000574 <__aeabi_i2d>
 800e73a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e73e:	3501      	adds	r5, #1
 800e740:	e7df      	b.n	800e702 <__kernel_rem_pio2+0x5a>
 800e742:	ec51 0b18 	vmov	r0, r1, d8
 800e746:	e7f8      	b.n	800e73a <__kernel_rem_pio2+0x92>
 800e748:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e74c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e750:	f7f1 ff7a 	bl	8000648 <__aeabi_dmul>
 800e754:	4602      	mov	r2, r0
 800e756:	460b      	mov	r3, r1
 800e758:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e75c:	f7f1 fdbe 	bl	80002dc <__adddf3>
 800e760:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e764:	3601      	adds	r6, #1
 800e766:	9b05      	ldr	r3, [sp, #20]
 800e768:	429e      	cmp	r6, r3
 800e76a:	f1a7 0708 	sub.w	r7, r7, #8
 800e76e:	ddeb      	ble.n	800e748 <__kernel_rem_pio2+0xa0>
 800e770:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e774:	f108 0801 	add.w	r8, r8, #1
 800e778:	ecab 7b02 	vstmia	fp!, {d7}
 800e77c:	3508      	adds	r5, #8
 800e77e:	e7ca      	b.n	800e716 <__kernel_rem_pio2+0x6e>
 800e780:	9b00      	ldr	r3, [sp, #0]
 800e782:	aa0c      	add	r2, sp, #48	; 0x30
 800e784:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e788:	930b      	str	r3, [sp, #44]	; 0x2c
 800e78a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e78c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e790:	9c00      	ldr	r4, [sp, #0]
 800e792:	930a      	str	r3, [sp, #40]	; 0x28
 800e794:	00e3      	lsls	r3, r4, #3
 800e796:	9308      	str	r3, [sp, #32]
 800e798:	ab98      	add	r3, sp, #608	; 0x260
 800e79a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e79e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800e7a2:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800e7a6:	ab70      	add	r3, sp, #448	; 0x1c0
 800e7a8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800e7ac:	46c3      	mov	fp, r8
 800e7ae:	46a1      	mov	r9, r4
 800e7b0:	f1b9 0f00 	cmp.w	r9, #0
 800e7b4:	f1a5 0508 	sub.w	r5, r5, #8
 800e7b8:	dc77      	bgt.n	800e8aa <__kernel_rem_pio2+0x202>
 800e7ba:	ec47 6b10 	vmov	d0, r6, r7
 800e7be:	4650      	mov	r0, sl
 800e7c0:	f000 fd32 	bl	800f228 <scalbn>
 800e7c4:	ec57 6b10 	vmov	r6, r7, d0
 800e7c8:	2200      	movs	r2, #0
 800e7ca:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e7ce:	ee10 0a10 	vmov	r0, s0
 800e7d2:	4639      	mov	r1, r7
 800e7d4:	f7f1 ff38 	bl	8000648 <__aeabi_dmul>
 800e7d8:	ec41 0b10 	vmov	d0, r0, r1
 800e7dc:	f000 fe08 	bl	800f3f0 <floor>
 800e7e0:	4b7a      	ldr	r3, [pc, #488]	; (800e9cc <__kernel_rem_pio2+0x324>)
 800e7e2:	ec51 0b10 	vmov	r0, r1, d0
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	f7f1 ff2e 	bl	8000648 <__aeabi_dmul>
 800e7ec:	4602      	mov	r2, r0
 800e7ee:	460b      	mov	r3, r1
 800e7f0:	4630      	mov	r0, r6
 800e7f2:	4639      	mov	r1, r7
 800e7f4:	f7f1 fd70 	bl	80002d8 <__aeabi_dsub>
 800e7f8:	460f      	mov	r7, r1
 800e7fa:	4606      	mov	r6, r0
 800e7fc:	f7f2 f9d4 	bl	8000ba8 <__aeabi_d2iz>
 800e800:	9002      	str	r0, [sp, #8]
 800e802:	f7f1 feb7 	bl	8000574 <__aeabi_i2d>
 800e806:	4602      	mov	r2, r0
 800e808:	460b      	mov	r3, r1
 800e80a:	4630      	mov	r0, r6
 800e80c:	4639      	mov	r1, r7
 800e80e:	f7f1 fd63 	bl	80002d8 <__aeabi_dsub>
 800e812:	f1ba 0f00 	cmp.w	sl, #0
 800e816:	4606      	mov	r6, r0
 800e818:	460f      	mov	r7, r1
 800e81a:	dd6d      	ble.n	800e8f8 <__kernel_rem_pio2+0x250>
 800e81c:	1e61      	subs	r1, r4, #1
 800e81e:	ab0c      	add	r3, sp, #48	; 0x30
 800e820:	9d02      	ldr	r5, [sp, #8]
 800e822:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e826:	f1ca 0018 	rsb	r0, sl, #24
 800e82a:	fa43 f200 	asr.w	r2, r3, r0
 800e82e:	4415      	add	r5, r2
 800e830:	4082      	lsls	r2, r0
 800e832:	1a9b      	subs	r3, r3, r2
 800e834:	aa0c      	add	r2, sp, #48	; 0x30
 800e836:	9502      	str	r5, [sp, #8]
 800e838:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800e83c:	f1ca 0217 	rsb	r2, sl, #23
 800e840:	fa43 fb02 	asr.w	fp, r3, r2
 800e844:	f1bb 0f00 	cmp.w	fp, #0
 800e848:	dd65      	ble.n	800e916 <__kernel_rem_pio2+0x26e>
 800e84a:	9b02      	ldr	r3, [sp, #8]
 800e84c:	2200      	movs	r2, #0
 800e84e:	3301      	adds	r3, #1
 800e850:	9302      	str	r3, [sp, #8]
 800e852:	4615      	mov	r5, r2
 800e854:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e858:	4294      	cmp	r4, r2
 800e85a:	f300 809f 	bgt.w	800e99c <__kernel_rem_pio2+0x2f4>
 800e85e:	f1ba 0f00 	cmp.w	sl, #0
 800e862:	dd07      	ble.n	800e874 <__kernel_rem_pio2+0x1cc>
 800e864:	f1ba 0f01 	cmp.w	sl, #1
 800e868:	f000 80c1 	beq.w	800e9ee <__kernel_rem_pio2+0x346>
 800e86c:	f1ba 0f02 	cmp.w	sl, #2
 800e870:	f000 80c7 	beq.w	800ea02 <__kernel_rem_pio2+0x35a>
 800e874:	f1bb 0f02 	cmp.w	fp, #2
 800e878:	d14d      	bne.n	800e916 <__kernel_rem_pio2+0x26e>
 800e87a:	4632      	mov	r2, r6
 800e87c:	463b      	mov	r3, r7
 800e87e:	4954      	ldr	r1, [pc, #336]	; (800e9d0 <__kernel_rem_pio2+0x328>)
 800e880:	2000      	movs	r0, #0
 800e882:	f7f1 fd29 	bl	80002d8 <__aeabi_dsub>
 800e886:	4606      	mov	r6, r0
 800e888:	460f      	mov	r7, r1
 800e88a:	2d00      	cmp	r5, #0
 800e88c:	d043      	beq.n	800e916 <__kernel_rem_pio2+0x26e>
 800e88e:	4650      	mov	r0, sl
 800e890:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800e9c0 <__kernel_rem_pio2+0x318>
 800e894:	f000 fcc8 	bl	800f228 <scalbn>
 800e898:	4630      	mov	r0, r6
 800e89a:	4639      	mov	r1, r7
 800e89c:	ec53 2b10 	vmov	r2, r3, d0
 800e8a0:	f7f1 fd1a 	bl	80002d8 <__aeabi_dsub>
 800e8a4:	4606      	mov	r6, r0
 800e8a6:	460f      	mov	r7, r1
 800e8a8:	e035      	b.n	800e916 <__kernel_rem_pio2+0x26e>
 800e8aa:	4b4a      	ldr	r3, [pc, #296]	; (800e9d4 <__kernel_rem_pio2+0x32c>)
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	4630      	mov	r0, r6
 800e8b0:	4639      	mov	r1, r7
 800e8b2:	f7f1 fec9 	bl	8000648 <__aeabi_dmul>
 800e8b6:	f7f2 f977 	bl	8000ba8 <__aeabi_d2iz>
 800e8ba:	f7f1 fe5b 	bl	8000574 <__aeabi_i2d>
 800e8be:	4602      	mov	r2, r0
 800e8c0:	460b      	mov	r3, r1
 800e8c2:	ec43 2b18 	vmov	d8, r2, r3
 800e8c6:	4b44      	ldr	r3, [pc, #272]	; (800e9d8 <__kernel_rem_pio2+0x330>)
 800e8c8:	2200      	movs	r2, #0
 800e8ca:	f7f1 febd 	bl	8000648 <__aeabi_dmul>
 800e8ce:	4602      	mov	r2, r0
 800e8d0:	460b      	mov	r3, r1
 800e8d2:	4630      	mov	r0, r6
 800e8d4:	4639      	mov	r1, r7
 800e8d6:	f7f1 fcff 	bl	80002d8 <__aeabi_dsub>
 800e8da:	f7f2 f965 	bl	8000ba8 <__aeabi_d2iz>
 800e8de:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e8e2:	f84b 0b04 	str.w	r0, [fp], #4
 800e8e6:	ec51 0b18 	vmov	r0, r1, d8
 800e8ea:	f7f1 fcf7 	bl	80002dc <__adddf3>
 800e8ee:	f109 39ff 	add.w	r9, r9, #4294967295
 800e8f2:	4606      	mov	r6, r0
 800e8f4:	460f      	mov	r7, r1
 800e8f6:	e75b      	b.n	800e7b0 <__kernel_rem_pio2+0x108>
 800e8f8:	d106      	bne.n	800e908 <__kernel_rem_pio2+0x260>
 800e8fa:	1e63      	subs	r3, r4, #1
 800e8fc:	aa0c      	add	r2, sp, #48	; 0x30
 800e8fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e902:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800e906:	e79d      	b.n	800e844 <__kernel_rem_pio2+0x19c>
 800e908:	4b34      	ldr	r3, [pc, #208]	; (800e9dc <__kernel_rem_pio2+0x334>)
 800e90a:	2200      	movs	r2, #0
 800e90c:	f7f2 f922 	bl	8000b54 <__aeabi_dcmpge>
 800e910:	2800      	cmp	r0, #0
 800e912:	d140      	bne.n	800e996 <__kernel_rem_pio2+0x2ee>
 800e914:	4683      	mov	fp, r0
 800e916:	2200      	movs	r2, #0
 800e918:	2300      	movs	r3, #0
 800e91a:	4630      	mov	r0, r6
 800e91c:	4639      	mov	r1, r7
 800e91e:	f7f2 f8fb 	bl	8000b18 <__aeabi_dcmpeq>
 800e922:	2800      	cmp	r0, #0
 800e924:	f000 80c1 	beq.w	800eaaa <__kernel_rem_pio2+0x402>
 800e928:	1e65      	subs	r5, r4, #1
 800e92a:	462b      	mov	r3, r5
 800e92c:	2200      	movs	r2, #0
 800e92e:	9900      	ldr	r1, [sp, #0]
 800e930:	428b      	cmp	r3, r1
 800e932:	da6d      	bge.n	800ea10 <__kernel_rem_pio2+0x368>
 800e934:	2a00      	cmp	r2, #0
 800e936:	f000 808a 	beq.w	800ea4e <__kernel_rem_pio2+0x3a6>
 800e93a:	ab0c      	add	r3, sp, #48	; 0x30
 800e93c:	f1aa 0a18 	sub.w	sl, sl, #24
 800e940:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e944:	2b00      	cmp	r3, #0
 800e946:	f000 80ae 	beq.w	800eaa6 <__kernel_rem_pio2+0x3fe>
 800e94a:	4650      	mov	r0, sl
 800e94c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800e9c0 <__kernel_rem_pio2+0x318>
 800e950:	f000 fc6a 	bl	800f228 <scalbn>
 800e954:	1c6b      	adds	r3, r5, #1
 800e956:	00da      	lsls	r2, r3, #3
 800e958:	9205      	str	r2, [sp, #20]
 800e95a:	ec57 6b10 	vmov	r6, r7, d0
 800e95e:	aa70      	add	r2, sp, #448	; 0x1c0
 800e960:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800e9d4 <__kernel_rem_pio2+0x32c>
 800e964:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800e968:	462c      	mov	r4, r5
 800e96a:	f04f 0800 	mov.w	r8, #0
 800e96e:	2c00      	cmp	r4, #0
 800e970:	f280 80d4 	bge.w	800eb1c <__kernel_rem_pio2+0x474>
 800e974:	462c      	mov	r4, r5
 800e976:	2c00      	cmp	r4, #0
 800e978:	f2c0 8102 	blt.w	800eb80 <__kernel_rem_pio2+0x4d8>
 800e97c:	4b18      	ldr	r3, [pc, #96]	; (800e9e0 <__kernel_rem_pio2+0x338>)
 800e97e:	461e      	mov	r6, r3
 800e980:	ab70      	add	r3, sp, #448	; 0x1c0
 800e982:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800e986:	1b2b      	subs	r3, r5, r4
 800e988:	f04f 0900 	mov.w	r9, #0
 800e98c:	f04f 0a00 	mov.w	sl, #0
 800e990:	2700      	movs	r7, #0
 800e992:	9306      	str	r3, [sp, #24]
 800e994:	e0e6      	b.n	800eb64 <__kernel_rem_pio2+0x4bc>
 800e996:	f04f 0b02 	mov.w	fp, #2
 800e99a:	e756      	b.n	800e84a <__kernel_rem_pio2+0x1a2>
 800e99c:	f8d8 3000 	ldr.w	r3, [r8]
 800e9a0:	bb05      	cbnz	r5, 800e9e4 <__kernel_rem_pio2+0x33c>
 800e9a2:	b123      	cbz	r3, 800e9ae <__kernel_rem_pio2+0x306>
 800e9a4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800e9a8:	f8c8 3000 	str.w	r3, [r8]
 800e9ac:	2301      	movs	r3, #1
 800e9ae:	3201      	adds	r2, #1
 800e9b0:	f108 0804 	add.w	r8, r8, #4
 800e9b4:	461d      	mov	r5, r3
 800e9b6:	e74f      	b.n	800e858 <__kernel_rem_pio2+0x1b0>
	...
 800e9c4:	3ff00000 	.word	0x3ff00000
 800e9c8:	080100b8 	.word	0x080100b8
 800e9cc:	40200000 	.word	0x40200000
 800e9d0:	3ff00000 	.word	0x3ff00000
 800e9d4:	3e700000 	.word	0x3e700000
 800e9d8:	41700000 	.word	0x41700000
 800e9dc:	3fe00000 	.word	0x3fe00000
 800e9e0:	08010078 	.word	0x08010078
 800e9e4:	1acb      	subs	r3, r1, r3
 800e9e6:	f8c8 3000 	str.w	r3, [r8]
 800e9ea:	462b      	mov	r3, r5
 800e9ec:	e7df      	b.n	800e9ae <__kernel_rem_pio2+0x306>
 800e9ee:	1e62      	subs	r2, r4, #1
 800e9f0:	ab0c      	add	r3, sp, #48	; 0x30
 800e9f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9f6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e9fa:	a90c      	add	r1, sp, #48	; 0x30
 800e9fc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ea00:	e738      	b.n	800e874 <__kernel_rem_pio2+0x1cc>
 800ea02:	1e62      	subs	r2, r4, #1
 800ea04:	ab0c      	add	r3, sp, #48	; 0x30
 800ea06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea0a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ea0e:	e7f4      	b.n	800e9fa <__kernel_rem_pio2+0x352>
 800ea10:	a90c      	add	r1, sp, #48	; 0x30
 800ea12:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ea16:	3b01      	subs	r3, #1
 800ea18:	430a      	orrs	r2, r1
 800ea1a:	e788      	b.n	800e92e <__kernel_rem_pio2+0x286>
 800ea1c:	3301      	adds	r3, #1
 800ea1e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800ea22:	2900      	cmp	r1, #0
 800ea24:	d0fa      	beq.n	800ea1c <__kernel_rem_pio2+0x374>
 800ea26:	9a08      	ldr	r2, [sp, #32]
 800ea28:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800ea2c:	446a      	add	r2, sp
 800ea2e:	3a98      	subs	r2, #152	; 0x98
 800ea30:	9208      	str	r2, [sp, #32]
 800ea32:	9a06      	ldr	r2, [sp, #24]
 800ea34:	a920      	add	r1, sp, #128	; 0x80
 800ea36:	18a2      	adds	r2, r4, r2
 800ea38:	18e3      	adds	r3, r4, r3
 800ea3a:	f104 0801 	add.w	r8, r4, #1
 800ea3e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800ea42:	9302      	str	r3, [sp, #8]
 800ea44:	9b02      	ldr	r3, [sp, #8]
 800ea46:	4543      	cmp	r3, r8
 800ea48:	da04      	bge.n	800ea54 <__kernel_rem_pio2+0x3ac>
 800ea4a:	461c      	mov	r4, r3
 800ea4c:	e6a2      	b.n	800e794 <__kernel_rem_pio2+0xec>
 800ea4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ea50:	2301      	movs	r3, #1
 800ea52:	e7e4      	b.n	800ea1e <__kernel_rem_pio2+0x376>
 800ea54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea56:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800ea5a:	f7f1 fd8b 	bl	8000574 <__aeabi_i2d>
 800ea5e:	e8e5 0102 	strd	r0, r1, [r5], #8
 800ea62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea64:	46ab      	mov	fp, r5
 800ea66:	461c      	mov	r4, r3
 800ea68:	f04f 0900 	mov.w	r9, #0
 800ea6c:	2600      	movs	r6, #0
 800ea6e:	2700      	movs	r7, #0
 800ea70:	9b05      	ldr	r3, [sp, #20]
 800ea72:	4599      	cmp	r9, r3
 800ea74:	dd06      	ble.n	800ea84 <__kernel_rem_pio2+0x3dc>
 800ea76:	9b08      	ldr	r3, [sp, #32]
 800ea78:	e8e3 6702 	strd	r6, r7, [r3], #8
 800ea7c:	f108 0801 	add.w	r8, r8, #1
 800ea80:	9308      	str	r3, [sp, #32]
 800ea82:	e7df      	b.n	800ea44 <__kernel_rem_pio2+0x39c>
 800ea84:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800ea88:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800ea8c:	f7f1 fddc 	bl	8000648 <__aeabi_dmul>
 800ea90:	4602      	mov	r2, r0
 800ea92:	460b      	mov	r3, r1
 800ea94:	4630      	mov	r0, r6
 800ea96:	4639      	mov	r1, r7
 800ea98:	f7f1 fc20 	bl	80002dc <__adddf3>
 800ea9c:	f109 0901 	add.w	r9, r9, #1
 800eaa0:	4606      	mov	r6, r0
 800eaa2:	460f      	mov	r7, r1
 800eaa4:	e7e4      	b.n	800ea70 <__kernel_rem_pio2+0x3c8>
 800eaa6:	3d01      	subs	r5, #1
 800eaa8:	e747      	b.n	800e93a <__kernel_rem_pio2+0x292>
 800eaaa:	ec47 6b10 	vmov	d0, r6, r7
 800eaae:	f1ca 0000 	rsb	r0, sl, #0
 800eab2:	f000 fbb9 	bl	800f228 <scalbn>
 800eab6:	ec57 6b10 	vmov	r6, r7, d0
 800eaba:	4ba0      	ldr	r3, [pc, #640]	; (800ed3c <__kernel_rem_pio2+0x694>)
 800eabc:	ee10 0a10 	vmov	r0, s0
 800eac0:	2200      	movs	r2, #0
 800eac2:	4639      	mov	r1, r7
 800eac4:	f7f2 f846 	bl	8000b54 <__aeabi_dcmpge>
 800eac8:	b1f8      	cbz	r0, 800eb0a <__kernel_rem_pio2+0x462>
 800eaca:	4b9d      	ldr	r3, [pc, #628]	; (800ed40 <__kernel_rem_pio2+0x698>)
 800eacc:	2200      	movs	r2, #0
 800eace:	4630      	mov	r0, r6
 800ead0:	4639      	mov	r1, r7
 800ead2:	f7f1 fdb9 	bl	8000648 <__aeabi_dmul>
 800ead6:	f7f2 f867 	bl	8000ba8 <__aeabi_d2iz>
 800eada:	4680      	mov	r8, r0
 800eadc:	f7f1 fd4a 	bl	8000574 <__aeabi_i2d>
 800eae0:	4b96      	ldr	r3, [pc, #600]	; (800ed3c <__kernel_rem_pio2+0x694>)
 800eae2:	2200      	movs	r2, #0
 800eae4:	f7f1 fdb0 	bl	8000648 <__aeabi_dmul>
 800eae8:	460b      	mov	r3, r1
 800eaea:	4602      	mov	r2, r0
 800eaec:	4639      	mov	r1, r7
 800eaee:	4630      	mov	r0, r6
 800eaf0:	f7f1 fbf2 	bl	80002d8 <__aeabi_dsub>
 800eaf4:	f7f2 f858 	bl	8000ba8 <__aeabi_d2iz>
 800eaf8:	1c65      	adds	r5, r4, #1
 800eafa:	ab0c      	add	r3, sp, #48	; 0x30
 800eafc:	f10a 0a18 	add.w	sl, sl, #24
 800eb00:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800eb04:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800eb08:	e71f      	b.n	800e94a <__kernel_rem_pio2+0x2a2>
 800eb0a:	4630      	mov	r0, r6
 800eb0c:	4639      	mov	r1, r7
 800eb0e:	f7f2 f84b 	bl	8000ba8 <__aeabi_d2iz>
 800eb12:	ab0c      	add	r3, sp, #48	; 0x30
 800eb14:	4625      	mov	r5, r4
 800eb16:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800eb1a:	e716      	b.n	800e94a <__kernel_rem_pio2+0x2a2>
 800eb1c:	ab0c      	add	r3, sp, #48	; 0x30
 800eb1e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800eb22:	f7f1 fd27 	bl	8000574 <__aeabi_i2d>
 800eb26:	4632      	mov	r2, r6
 800eb28:	463b      	mov	r3, r7
 800eb2a:	f7f1 fd8d 	bl	8000648 <__aeabi_dmul>
 800eb2e:	4642      	mov	r2, r8
 800eb30:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800eb34:	464b      	mov	r3, r9
 800eb36:	4630      	mov	r0, r6
 800eb38:	4639      	mov	r1, r7
 800eb3a:	f7f1 fd85 	bl	8000648 <__aeabi_dmul>
 800eb3e:	3c01      	subs	r4, #1
 800eb40:	4606      	mov	r6, r0
 800eb42:	460f      	mov	r7, r1
 800eb44:	e713      	b.n	800e96e <__kernel_rem_pio2+0x2c6>
 800eb46:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800eb4a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800eb4e:	f7f1 fd7b 	bl	8000648 <__aeabi_dmul>
 800eb52:	4602      	mov	r2, r0
 800eb54:	460b      	mov	r3, r1
 800eb56:	4648      	mov	r0, r9
 800eb58:	4651      	mov	r1, sl
 800eb5a:	f7f1 fbbf 	bl	80002dc <__adddf3>
 800eb5e:	3701      	adds	r7, #1
 800eb60:	4681      	mov	r9, r0
 800eb62:	468a      	mov	sl, r1
 800eb64:	9b00      	ldr	r3, [sp, #0]
 800eb66:	429f      	cmp	r7, r3
 800eb68:	dc02      	bgt.n	800eb70 <__kernel_rem_pio2+0x4c8>
 800eb6a:	9b06      	ldr	r3, [sp, #24]
 800eb6c:	429f      	cmp	r7, r3
 800eb6e:	ddea      	ble.n	800eb46 <__kernel_rem_pio2+0x49e>
 800eb70:	9a06      	ldr	r2, [sp, #24]
 800eb72:	ab48      	add	r3, sp, #288	; 0x120
 800eb74:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800eb78:	e9c6 9a00 	strd	r9, sl, [r6]
 800eb7c:	3c01      	subs	r4, #1
 800eb7e:	e6fa      	b.n	800e976 <__kernel_rem_pio2+0x2ce>
 800eb80:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800eb82:	2b02      	cmp	r3, #2
 800eb84:	dc0b      	bgt.n	800eb9e <__kernel_rem_pio2+0x4f6>
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	dc39      	bgt.n	800ebfe <__kernel_rem_pio2+0x556>
 800eb8a:	d05d      	beq.n	800ec48 <__kernel_rem_pio2+0x5a0>
 800eb8c:	9b02      	ldr	r3, [sp, #8]
 800eb8e:	f003 0007 	and.w	r0, r3, #7
 800eb92:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800eb96:	ecbd 8b02 	vpop	{d8}
 800eb9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb9e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800eba0:	2b03      	cmp	r3, #3
 800eba2:	d1f3      	bne.n	800eb8c <__kernel_rem_pio2+0x4e4>
 800eba4:	9b05      	ldr	r3, [sp, #20]
 800eba6:	9500      	str	r5, [sp, #0]
 800eba8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800ebac:	eb0d 0403 	add.w	r4, sp, r3
 800ebb0:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800ebb4:	46a2      	mov	sl, r4
 800ebb6:	9b00      	ldr	r3, [sp, #0]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	f1aa 0a08 	sub.w	sl, sl, #8
 800ebbe:	dc69      	bgt.n	800ec94 <__kernel_rem_pio2+0x5ec>
 800ebc0:	46aa      	mov	sl, r5
 800ebc2:	f1ba 0f01 	cmp.w	sl, #1
 800ebc6:	f1a4 0408 	sub.w	r4, r4, #8
 800ebca:	f300 8083 	bgt.w	800ecd4 <__kernel_rem_pio2+0x62c>
 800ebce:	9c05      	ldr	r4, [sp, #20]
 800ebd0:	ab48      	add	r3, sp, #288	; 0x120
 800ebd2:	441c      	add	r4, r3
 800ebd4:	2000      	movs	r0, #0
 800ebd6:	2100      	movs	r1, #0
 800ebd8:	2d01      	cmp	r5, #1
 800ebda:	f300 809a 	bgt.w	800ed12 <__kernel_rem_pio2+0x66a>
 800ebde:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800ebe2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800ebe6:	f1bb 0f00 	cmp.w	fp, #0
 800ebea:	f040 8098 	bne.w	800ed1e <__kernel_rem_pio2+0x676>
 800ebee:	9b04      	ldr	r3, [sp, #16]
 800ebf0:	e9c3 7800 	strd	r7, r8, [r3]
 800ebf4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800ebf8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ebfc:	e7c6      	b.n	800eb8c <__kernel_rem_pio2+0x4e4>
 800ebfe:	9e05      	ldr	r6, [sp, #20]
 800ec00:	ab48      	add	r3, sp, #288	; 0x120
 800ec02:	441e      	add	r6, r3
 800ec04:	462c      	mov	r4, r5
 800ec06:	2000      	movs	r0, #0
 800ec08:	2100      	movs	r1, #0
 800ec0a:	2c00      	cmp	r4, #0
 800ec0c:	da33      	bge.n	800ec76 <__kernel_rem_pio2+0x5ce>
 800ec0e:	f1bb 0f00 	cmp.w	fp, #0
 800ec12:	d036      	beq.n	800ec82 <__kernel_rem_pio2+0x5da>
 800ec14:	4602      	mov	r2, r0
 800ec16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ec1a:	9c04      	ldr	r4, [sp, #16]
 800ec1c:	e9c4 2300 	strd	r2, r3, [r4]
 800ec20:	4602      	mov	r2, r0
 800ec22:	460b      	mov	r3, r1
 800ec24:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800ec28:	f7f1 fb56 	bl	80002d8 <__aeabi_dsub>
 800ec2c:	ae4a      	add	r6, sp, #296	; 0x128
 800ec2e:	2401      	movs	r4, #1
 800ec30:	42a5      	cmp	r5, r4
 800ec32:	da29      	bge.n	800ec88 <__kernel_rem_pio2+0x5e0>
 800ec34:	f1bb 0f00 	cmp.w	fp, #0
 800ec38:	d002      	beq.n	800ec40 <__kernel_rem_pio2+0x598>
 800ec3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ec3e:	4619      	mov	r1, r3
 800ec40:	9b04      	ldr	r3, [sp, #16]
 800ec42:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ec46:	e7a1      	b.n	800eb8c <__kernel_rem_pio2+0x4e4>
 800ec48:	9c05      	ldr	r4, [sp, #20]
 800ec4a:	ab48      	add	r3, sp, #288	; 0x120
 800ec4c:	441c      	add	r4, r3
 800ec4e:	2000      	movs	r0, #0
 800ec50:	2100      	movs	r1, #0
 800ec52:	2d00      	cmp	r5, #0
 800ec54:	da09      	bge.n	800ec6a <__kernel_rem_pio2+0x5c2>
 800ec56:	f1bb 0f00 	cmp.w	fp, #0
 800ec5a:	d002      	beq.n	800ec62 <__kernel_rem_pio2+0x5ba>
 800ec5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ec60:	4619      	mov	r1, r3
 800ec62:	9b04      	ldr	r3, [sp, #16]
 800ec64:	e9c3 0100 	strd	r0, r1, [r3]
 800ec68:	e790      	b.n	800eb8c <__kernel_rem_pio2+0x4e4>
 800ec6a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ec6e:	f7f1 fb35 	bl	80002dc <__adddf3>
 800ec72:	3d01      	subs	r5, #1
 800ec74:	e7ed      	b.n	800ec52 <__kernel_rem_pio2+0x5aa>
 800ec76:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800ec7a:	f7f1 fb2f 	bl	80002dc <__adddf3>
 800ec7e:	3c01      	subs	r4, #1
 800ec80:	e7c3      	b.n	800ec0a <__kernel_rem_pio2+0x562>
 800ec82:	4602      	mov	r2, r0
 800ec84:	460b      	mov	r3, r1
 800ec86:	e7c8      	b.n	800ec1a <__kernel_rem_pio2+0x572>
 800ec88:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800ec8c:	f7f1 fb26 	bl	80002dc <__adddf3>
 800ec90:	3401      	adds	r4, #1
 800ec92:	e7cd      	b.n	800ec30 <__kernel_rem_pio2+0x588>
 800ec94:	e9da 8900 	ldrd	r8, r9, [sl]
 800ec98:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800ec9c:	9b00      	ldr	r3, [sp, #0]
 800ec9e:	3b01      	subs	r3, #1
 800eca0:	9300      	str	r3, [sp, #0]
 800eca2:	4632      	mov	r2, r6
 800eca4:	463b      	mov	r3, r7
 800eca6:	4640      	mov	r0, r8
 800eca8:	4649      	mov	r1, r9
 800ecaa:	f7f1 fb17 	bl	80002dc <__adddf3>
 800ecae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ecb2:	4602      	mov	r2, r0
 800ecb4:	460b      	mov	r3, r1
 800ecb6:	4640      	mov	r0, r8
 800ecb8:	4649      	mov	r1, r9
 800ecba:	f7f1 fb0d 	bl	80002d8 <__aeabi_dsub>
 800ecbe:	4632      	mov	r2, r6
 800ecc0:	463b      	mov	r3, r7
 800ecc2:	f7f1 fb0b 	bl	80002dc <__adddf3>
 800ecc6:	ed9d 7b06 	vldr	d7, [sp, #24]
 800ecca:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ecce:	ed8a 7b00 	vstr	d7, [sl]
 800ecd2:	e770      	b.n	800ebb6 <__kernel_rem_pio2+0x50e>
 800ecd4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ecd8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800ecdc:	4640      	mov	r0, r8
 800ecde:	4632      	mov	r2, r6
 800ece0:	463b      	mov	r3, r7
 800ece2:	4649      	mov	r1, r9
 800ece4:	f7f1 fafa 	bl	80002dc <__adddf3>
 800ece8:	e9cd 0100 	strd	r0, r1, [sp]
 800ecec:	4602      	mov	r2, r0
 800ecee:	460b      	mov	r3, r1
 800ecf0:	4640      	mov	r0, r8
 800ecf2:	4649      	mov	r1, r9
 800ecf4:	f7f1 faf0 	bl	80002d8 <__aeabi_dsub>
 800ecf8:	4632      	mov	r2, r6
 800ecfa:	463b      	mov	r3, r7
 800ecfc:	f7f1 faee 	bl	80002dc <__adddf3>
 800ed00:	ed9d 7b00 	vldr	d7, [sp]
 800ed04:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ed08:	ed84 7b00 	vstr	d7, [r4]
 800ed0c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ed10:	e757      	b.n	800ebc2 <__kernel_rem_pio2+0x51a>
 800ed12:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ed16:	f7f1 fae1 	bl	80002dc <__adddf3>
 800ed1a:	3d01      	subs	r5, #1
 800ed1c:	e75c      	b.n	800ebd8 <__kernel_rem_pio2+0x530>
 800ed1e:	9b04      	ldr	r3, [sp, #16]
 800ed20:	9a04      	ldr	r2, [sp, #16]
 800ed22:	601f      	str	r7, [r3, #0]
 800ed24:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800ed28:	605c      	str	r4, [r3, #4]
 800ed2a:	609d      	str	r5, [r3, #8]
 800ed2c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ed30:	60d3      	str	r3, [r2, #12]
 800ed32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ed36:	6110      	str	r0, [r2, #16]
 800ed38:	6153      	str	r3, [r2, #20]
 800ed3a:	e727      	b.n	800eb8c <__kernel_rem_pio2+0x4e4>
 800ed3c:	41700000 	.word	0x41700000
 800ed40:	3e700000 	.word	0x3e700000

0800ed44 <__kernel_rem_pio2f>:
 800ed44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed48:	ed2d 8b04 	vpush	{d8-d9}
 800ed4c:	b0d9      	sub	sp, #356	; 0x164
 800ed4e:	4688      	mov	r8, r1
 800ed50:	9002      	str	r0, [sp, #8]
 800ed52:	49b8      	ldr	r1, [pc, #736]	; (800f034 <__kernel_rem_pio2f+0x2f0>)
 800ed54:	9866      	ldr	r0, [sp, #408]	; 0x198
 800ed56:	9301      	str	r3, [sp, #4]
 800ed58:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800ed5c:	9901      	ldr	r1, [sp, #4]
 800ed5e:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 800ed60:	f101 3bff 	add.w	fp, r1, #4294967295
 800ed64:	1d11      	adds	r1, r2, #4
 800ed66:	db25      	blt.n	800edb4 <__kernel_rem_pio2f+0x70>
 800ed68:	1ed0      	subs	r0, r2, #3
 800ed6a:	bf48      	it	mi
 800ed6c:	1d10      	addmi	r0, r2, #4
 800ed6e:	10c0      	asrs	r0, r0, #3
 800ed70:	1c45      	adds	r5, r0, #1
 800ed72:	00e9      	lsls	r1, r5, #3
 800ed74:	eba0 070b 	sub.w	r7, r0, fp
 800ed78:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 800f044 <__kernel_rem_pio2f+0x300>
 800ed7c:	9103      	str	r1, [sp, #12]
 800ed7e:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800ed82:	eb0a 0c0b 	add.w	ip, sl, fp
 800ed86:	ae1c      	add	r6, sp, #112	; 0x70
 800ed88:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 800ed8c:	2400      	movs	r4, #0
 800ed8e:	4564      	cmp	r4, ip
 800ed90:	dd12      	ble.n	800edb8 <__kernel_rem_pio2f+0x74>
 800ed92:	9901      	ldr	r1, [sp, #4]
 800ed94:	ac1c      	add	r4, sp, #112	; 0x70
 800ed96:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800ed9a:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800ed9e:	f04f 0c00 	mov.w	ip, #0
 800eda2:	45d4      	cmp	ip, sl
 800eda4:	dc27      	bgt.n	800edf6 <__kernel_rem_pio2f+0xb2>
 800eda6:	f8dd e008 	ldr.w	lr, [sp, #8]
 800edaa:	eddf 7aa6 	vldr	s15, [pc, #664]	; 800f044 <__kernel_rem_pio2f+0x300>
 800edae:	4627      	mov	r7, r4
 800edb0:	2600      	movs	r6, #0
 800edb2:	e016      	b.n	800ede2 <__kernel_rem_pio2f+0x9e>
 800edb4:	2000      	movs	r0, #0
 800edb6:	e7db      	b.n	800ed70 <__kernel_rem_pio2f+0x2c>
 800edb8:	42e7      	cmn	r7, r4
 800edba:	bf5d      	ittte	pl
 800edbc:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 800edc0:	ee07 1a90 	vmovpl	s15, r1
 800edc4:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800edc8:	eef0 7a47 	vmovmi.f32	s15, s14
 800edcc:	ece6 7a01 	vstmia	r6!, {s15}
 800edd0:	3401      	adds	r4, #1
 800edd2:	e7dc      	b.n	800ed8e <__kernel_rem_pio2f+0x4a>
 800edd4:	ecfe 6a01 	vldmia	lr!, {s13}
 800edd8:	ed97 7a00 	vldr	s14, [r7]
 800eddc:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ede0:	3601      	adds	r6, #1
 800ede2:	455e      	cmp	r6, fp
 800ede4:	f1a7 0704 	sub.w	r7, r7, #4
 800ede8:	ddf4      	ble.n	800edd4 <__kernel_rem_pio2f+0x90>
 800edea:	ece9 7a01 	vstmia	r9!, {s15}
 800edee:	f10c 0c01 	add.w	ip, ip, #1
 800edf2:	3404      	adds	r4, #4
 800edf4:	e7d5      	b.n	800eda2 <__kernel_rem_pio2f+0x5e>
 800edf6:	a908      	add	r1, sp, #32
 800edf8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800edfc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800ee00:	eddf 8a8f 	vldr	s17, [pc, #572]	; 800f040 <__kernel_rem_pio2f+0x2fc>
 800ee04:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 800f03c <__kernel_rem_pio2f+0x2f8>
 800ee08:	9105      	str	r1, [sp, #20]
 800ee0a:	9304      	str	r3, [sp, #16]
 800ee0c:	4656      	mov	r6, sl
 800ee0e:	00b3      	lsls	r3, r6, #2
 800ee10:	9306      	str	r3, [sp, #24]
 800ee12:	ab58      	add	r3, sp, #352	; 0x160
 800ee14:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800ee18:	ac08      	add	r4, sp, #32
 800ee1a:	ab44      	add	r3, sp, #272	; 0x110
 800ee1c:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800ee20:	46a4      	mov	ip, r4
 800ee22:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800ee26:	4637      	mov	r7, r6
 800ee28:	2f00      	cmp	r7, #0
 800ee2a:	f1a0 0004 	sub.w	r0, r0, #4
 800ee2e:	dc4a      	bgt.n	800eec6 <__kernel_rem_pio2f+0x182>
 800ee30:	4628      	mov	r0, r5
 800ee32:	9207      	str	r2, [sp, #28]
 800ee34:	f000 fa76 	bl	800f324 <scalbnf>
 800ee38:	eeb0 8a40 	vmov.f32	s16, s0
 800ee3c:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800ee40:	ee28 0a00 	vmul.f32	s0, s16, s0
 800ee44:	f000 fb54 	bl	800f4f0 <floorf>
 800ee48:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800ee4c:	eea0 8a67 	vfms.f32	s16, s0, s15
 800ee50:	2d00      	cmp	r5, #0
 800ee52:	9a07      	ldr	r2, [sp, #28]
 800ee54:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800ee58:	ee17 9a90 	vmov	r9, s15
 800ee5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ee60:	ee38 8a67 	vsub.f32	s16, s16, s15
 800ee64:	dd41      	ble.n	800eeea <__kernel_rem_pio2f+0x1a6>
 800ee66:	f106 3cff 	add.w	ip, r6, #4294967295
 800ee6a:	ab08      	add	r3, sp, #32
 800ee6c:	f1c5 0e08 	rsb	lr, r5, #8
 800ee70:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800ee74:	fa47 f00e 	asr.w	r0, r7, lr
 800ee78:	4481      	add	r9, r0
 800ee7a:	fa00 f00e 	lsl.w	r0, r0, lr
 800ee7e:	1a3f      	subs	r7, r7, r0
 800ee80:	f1c5 0007 	rsb	r0, r5, #7
 800ee84:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800ee88:	4107      	asrs	r7, r0
 800ee8a:	2f00      	cmp	r7, #0
 800ee8c:	dd3c      	ble.n	800ef08 <__kernel_rem_pio2f+0x1c4>
 800ee8e:	f04f 0e00 	mov.w	lr, #0
 800ee92:	f109 0901 	add.w	r9, r9, #1
 800ee96:	4671      	mov	r1, lr
 800ee98:	4576      	cmp	r6, lr
 800ee9a:	dc67      	bgt.n	800ef6c <__kernel_rem_pio2f+0x228>
 800ee9c:	2d00      	cmp	r5, #0
 800ee9e:	dd03      	ble.n	800eea8 <__kernel_rem_pio2f+0x164>
 800eea0:	2d01      	cmp	r5, #1
 800eea2:	d074      	beq.n	800ef8e <__kernel_rem_pio2f+0x24a>
 800eea4:	2d02      	cmp	r5, #2
 800eea6:	d07b      	beq.n	800efa0 <__kernel_rem_pio2f+0x25c>
 800eea8:	2f02      	cmp	r7, #2
 800eeaa:	d12d      	bne.n	800ef08 <__kernel_rem_pio2f+0x1c4>
 800eeac:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800eeb0:	ee30 8a48 	vsub.f32	s16, s0, s16
 800eeb4:	b341      	cbz	r1, 800ef08 <__kernel_rem_pio2f+0x1c4>
 800eeb6:	4628      	mov	r0, r5
 800eeb8:	9207      	str	r2, [sp, #28]
 800eeba:	f000 fa33 	bl	800f324 <scalbnf>
 800eebe:	9a07      	ldr	r2, [sp, #28]
 800eec0:	ee38 8a40 	vsub.f32	s16, s16, s0
 800eec4:	e020      	b.n	800ef08 <__kernel_rem_pio2f+0x1c4>
 800eec6:	ee60 7a28 	vmul.f32	s15, s0, s17
 800eeca:	3f01      	subs	r7, #1
 800eecc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800eed0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eed4:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800eed8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800eedc:	ecac 0a01 	vstmia	ip!, {s0}
 800eee0:	ed90 0a00 	vldr	s0, [r0]
 800eee4:	ee37 0a80 	vadd.f32	s0, s15, s0
 800eee8:	e79e      	b.n	800ee28 <__kernel_rem_pio2f+0xe4>
 800eeea:	d105      	bne.n	800eef8 <__kernel_rem_pio2f+0x1b4>
 800eeec:	1e70      	subs	r0, r6, #1
 800eeee:	ab08      	add	r3, sp, #32
 800eef0:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800eef4:	11ff      	asrs	r7, r7, #7
 800eef6:	e7c8      	b.n	800ee8a <__kernel_rem_pio2f+0x146>
 800eef8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800eefc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800ef00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef04:	da30      	bge.n	800ef68 <__kernel_rem_pio2f+0x224>
 800ef06:	2700      	movs	r7, #0
 800ef08:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ef0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef10:	f040 809a 	bne.w	800f048 <__kernel_rem_pio2f+0x304>
 800ef14:	1e74      	subs	r4, r6, #1
 800ef16:	46a4      	mov	ip, r4
 800ef18:	2100      	movs	r1, #0
 800ef1a:	45d4      	cmp	ip, sl
 800ef1c:	da47      	bge.n	800efae <__kernel_rem_pio2f+0x26a>
 800ef1e:	2900      	cmp	r1, #0
 800ef20:	d063      	beq.n	800efea <__kernel_rem_pio2f+0x2a6>
 800ef22:	ab08      	add	r3, sp, #32
 800ef24:	3d08      	subs	r5, #8
 800ef26:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d07f      	beq.n	800f02e <__kernel_rem_pio2f+0x2ea>
 800ef2e:	4628      	mov	r0, r5
 800ef30:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ef34:	f000 f9f6 	bl	800f324 <scalbnf>
 800ef38:	1c63      	adds	r3, r4, #1
 800ef3a:	aa44      	add	r2, sp, #272	; 0x110
 800ef3c:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800f040 <__kernel_rem_pio2f+0x2fc>
 800ef40:	0099      	lsls	r1, r3, #2
 800ef42:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ef46:	4623      	mov	r3, r4
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	f280 80ad 	bge.w	800f0a8 <__kernel_rem_pio2f+0x364>
 800ef4e:	4623      	mov	r3, r4
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	f2c0 80cb 	blt.w	800f0ec <__kernel_rem_pio2f+0x3a8>
 800ef56:	aa44      	add	r2, sp, #272	; 0x110
 800ef58:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800ef5c:	4e36      	ldr	r6, [pc, #216]	; (800f038 <__kernel_rem_pio2f+0x2f4>)
 800ef5e:	eddf 7a39 	vldr	s15, [pc, #228]	; 800f044 <__kernel_rem_pio2f+0x300>
 800ef62:	2000      	movs	r0, #0
 800ef64:	1ae2      	subs	r2, r4, r3
 800ef66:	e0b6      	b.n	800f0d6 <__kernel_rem_pio2f+0x392>
 800ef68:	2702      	movs	r7, #2
 800ef6a:	e790      	b.n	800ee8e <__kernel_rem_pio2f+0x14a>
 800ef6c:	6820      	ldr	r0, [r4, #0]
 800ef6e:	b949      	cbnz	r1, 800ef84 <__kernel_rem_pio2f+0x240>
 800ef70:	b118      	cbz	r0, 800ef7a <__kernel_rem_pio2f+0x236>
 800ef72:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800ef76:	6020      	str	r0, [r4, #0]
 800ef78:	2001      	movs	r0, #1
 800ef7a:	f10e 0e01 	add.w	lr, lr, #1
 800ef7e:	3404      	adds	r4, #4
 800ef80:	4601      	mov	r1, r0
 800ef82:	e789      	b.n	800ee98 <__kernel_rem_pio2f+0x154>
 800ef84:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800ef88:	6020      	str	r0, [r4, #0]
 800ef8a:	4608      	mov	r0, r1
 800ef8c:	e7f5      	b.n	800ef7a <__kernel_rem_pio2f+0x236>
 800ef8e:	1e74      	subs	r4, r6, #1
 800ef90:	ab08      	add	r3, sp, #32
 800ef92:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800ef96:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800ef9a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ef9e:	e783      	b.n	800eea8 <__kernel_rem_pio2f+0x164>
 800efa0:	1e74      	subs	r4, r6, #1
 800efa2:	ab08      	add	r3, sp, #32
 800efa4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800efa8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800efac:	e7f5      	b.n	800ef9a <__kernel_rem_pio2f+0x256>
 800efae:	ab08      	add	r3, sp, #32
 800efb0:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 800efb4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800efb8:	4301      	orrs	r1, r0
 800efba:	e7ae      	b.n	800ef1a <__kernel_rem_pio2f+0x1d6>
 800efbc:	3001      	adds	r0, #1
 800efbe:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 800efc2:	2f00      	cmp	r7, #0
 800efc4:	d0fa      	beq.n	800efbc <__kernel_rem_pio2f+0x278>
 800efc6:	9b06      	ldr	r3, [sp, #24]
 800efc8:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800efcc:	eb0d 0403 	add.w	r4, sp, r3
 800efd0:	9b01      	ldr	r3, [sp, #4]
 800efd2:	18f7      	adds	r7, r6, r3
 800efd4:	ab1c      	add	r3, sp, #112	; 0x70
 800efd6:	f106 0c01 	add.w	ip, r6, #1
 800efda:	3c4c      	subs	r4, #76	; 0x4c
 800efdc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800efe0:	4430      	add	r0, r6
 800efe2:	4560      	cmp	r0, ip
 800efe4:	da04      	bge.n	800eff0 <__kernel_rem_pio2f+0x2ac>
 800efe6:	4606      	mov	r6, r0
 800efe8:	e711      	b.n	800ee0e <__kernel_rem_pio2f+0xca>
 800efea:	9c05      	ldr	r4, [sp, #20]
 800efec:	2001      	movs	r0, #1
 800efee:	e7e6      	b.n	800efbe <__kernel_rem_pio2f+0x27a>
 800eff0:	9b04      	ldr	r3, [sp, #16]
 800eff2:	f8dd e008 	ldr.w	lr, [sp, #8]
 800eff6:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800effa:	9306      	str	r3, [sp, #24]
 800effc:	ee07 3a90 	vmov	s15, r3
 800f000:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f004:	2600      	movs	r6, #0
 800f006:	ece7 7a01 	vstmia	r7!, {s15}
 800f00a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800f044 <__kernel_rem_pio2f+0x300>
 800f00e:	46b9      	mov	r9, r7
 800f010:	455e      	cmp	r6, fp
 800f012:	dd04      	ble.n	800f01e <__kernel_rem_pio2f+0x2da>
 800f014:	ece4 7a01 	vstmia	r4!, {s15}
 800f018:	f10c 0c01 	add.w	ip, ip, #1
 800f01c:	e7e1      	b.n	800efe2 <__kernel_rem_pio2f+0x29e>
 800f01e:	ecfe 6a01 	vldmia	lr!, {s13}
 800f022:	ed39 7a01 	vldmdb	r9!, {s14}
 800f026:	3601      	adds	r6, #1
 800f028:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f02c:	e7f0      	b.n	800f010 <__kernel_rem_pio2f+0x2cc>
 800f02e:	3c01      	subs	r4, #1
 800f030:	e777      	b.n	800ef22 <__kernel_rem_pio2f+0x1de>
 800f032:	bf00      	nop
 800f034:	080100f4 	.word	0x080100f4
 800f038:	080100c8 	.word	0x080100c8
 800f03c:	43800000 	.word	0x43800000
 800f040:	3b800000 	.word	0x3b800000
 800f044:	00000000 	.word	0x00000000
 800f048:	9b03      	ldr	r3, [sp, #12]
 800f04a:	eeb0 0a48 	vmov.f32	s0, s16
 800f04e:	1a98      	subs	r0, r3, r2
 800f050:	f000 f968 	bl	800f324 <scalbnf>
 800f054:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800f03c <__kernel_rem_pio2f+0x2f8>
 800f058:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800f05c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f060:	db19      	blt.n	800f096 <__kernel_rem_pio2f+0x352>
 800f062:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800f040 <__kernel_rem_pio2f+0x2fc>
 800f066:	ee60 7a27 	vmul.f32	s15, s0, s15
 800f06a:	aa08      	add	r2, sp, #32
 800f06c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f070:	1c74      	adds	r4, r6, #1
 800f072:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f076:	3508      	adds	r5, #8
 800f078:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800f07c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f080:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800f084:	ee10 3a10 	vmov	r3, s0
 800f088:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800f08c:	ee17 3a90 	vmov	r3, s15
 800f090:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800f094:	e74b      	b.n	800ef2e <__kernel_rem_pio2f+0x1ea>
 800f096:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800f09a:	aa08      	add	r2, sp, #32
 800f09c:	ee10 3a10 	vmov	r3, s0
 800f0a0:	4634      	mov	r4, r6
 800f0a2:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800f0a6:	e742      	b.n	800ef2e <__kernel_rem_pio2f+0x1ea>
 800f0a8:	a808      	add	r0, sp, #32
 800f0aa:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800f0ae:	9001      	str	r0, [sp, #4]
 800f0b0:	ee07 0a90 	vmov	s15, r0
 800f0b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f0b8:	3b01      	subs	r3, #1
 800f0ba:	ee67 7a80 	vmul.f32	s15, s15, s0
 800f0be:	ee20 0a07 	vmul.f32	s0, s0, s14
 800f0c2:	ed62 7a01 	vstmdb	r2!, {s15}
 800f0c6:	e73f      	b.n	800ef48 <__kernel_rem_pio2f+0x204>
 800f0c8:	ecf6 6a01 	vldmia	r6!, {s13}
 800f0cc:	ecb5 7a01 	vldmia	r5!, {s14}
 800f0d0:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f0d4:	3001      	adds	r0, #1
 800f0d6:	4550      	cmp	r0, sl
 800f0d8:	dc01      	bgt.n	800f0de <__kernel_rem_pio2f+0x39a>
 800f0da:	4290      	cmp	r0, r2
 800f0dc:	ddf4      	ble.n	800f0c8 <__kernel_rem_pio2f+0x384>
 800f0de:	a858      	add	r0, sp, #352	; 0x160
 800f0e0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800f0e4:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 800f0e8:	3b01      	subs	r3, #1
 800f0ea:	e731      	b.n	800ef50 <__kernel_rem_pio2f+0x20c>
 800f0ec:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800f0ee:	2b02      	cmp	r3, #2
 800f0f0:	dc09      	bgt.n	800f106 <__kernel_rem_pio2f+0x3c2>
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	dc2b      	bgt.n	800f14e <__kernel_rem_pio2f+0x40a>
 800f0f6:	d044      	beq.n	800f182 <__kernel_rem_pio2f+0x43e>
 800f0f8:	f009 0007 	and.w	r0, r9, #7
 800f0fc:	b059      	add	sp, #356	; 0x164
 800f0fe:	ecbd 8b04 	vpop	{d8-d9}
 800f102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f106:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800f108:	2b03      	cmp	r3, #3
 800f10a:	d1f5      	bne.n	800f0f8 <__kernel_rem_pio2f+0x3b4>
 800f10c:	aa30      	add	r2, sp, #192	; 0xc0
 800f10e:	1f0b      	subs	r3, r1, #4
 800f110:	4413      	add	r3, r2
 800f112:	461a      	mov	r2, r3
 800f114:	4620      	mov	r0, r4
 800f116:	2800      	cmp	r0, #0
 800f118:	f1a2 0204 	sub.w	r2, r2, #4
 800f11c:	dc52      	bgt.n	800f1c4 <__kernel_rem_pio2f+0x480>
 800f11e:	4622      	mov	r2, r4
 800f120:	2a01      	cmp	r2, #1
 800f122:	f1a3 0304 	sub.w	r3, r3, #4
 800f126:	dc5d      	bgt.n	800f1e4 <__kernel_rem_pio2f+0x4a0>
 800f128:	ab30      	add	r3, sp, #192	; 0xc0
 800f12a:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800f044 <__kernel_rem_pio2f+0x300>
 800f12e:	440b      	add	r3, r1
 800f130:	2c01      	cmp	r4, #1
 800f132:	dc67      	bgt.n	800f204 <__kernel_rem_pio2f+0x4c0>
 800f134:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800f138:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800f13c:	2f00      	cmp	r7, #0
 800f13e:	d167      	bne.n	800f210 <__kernel_rem_pio2f+0x4cc>
 800f140:	edc8 6a00 	vstr	s13, [r8]
 800f144:	ed88 7a01 	vstr	s14, [r8, #4]
 800f148:	edc8 7a02 	vstr	s15, [r8, #8]
 800f14c:	e7d4      	b.n	800f0f8 <__kernel_rem_pio2f+0x3b4>
 800f14e:	ab30      	add	r3, sp, #192	; 0xc0
 800f150:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 800f044 <__kernel_rem_pio2f+0x300>
 800f154:	440b      	add	r3, r1
 800f156:	4622      	mov	r2, r4
 800f158:	2a00      	cmp	r2, #0
 800f15a:	da24      	bge.n	800f1a6 <__kernel_rem_pio2f+0x462>
 800f15c:	b34f      	cbz	r7, 800f1b2 <__kernel_rem_pio2f+0x46e>
 800f15e:	eef1 7a47 	vneg.f32	s15, s14
 800f162:	edc8 7a00 	vstr	s15, [r8]
 800f166:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800f16a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f16e:	aa31      	add	r2, sp, #196	; 0xc4
 800f170:	2301      	movs	r3, #1
 800f172:	429c      	cmp	r4, r3
 800f174:	da20      	bge.n	800f1b8 <__kernel_rem_pio2f+0x474>
 800f176:	b10f      	cbz	r7, 800f17c <__kernel_rem_pio2f+0x438>
 800f178:	eef1 7a67 	vneg.f32	s15, s15
 800f17c:	edc8 7a01 	vstr	s15, [r8, #4]
 800f180:	e7ba      	b.n	800f0f8 <__kernel_rem_pio2f+0x3b4>
 800f182:	ab30      	add	r3, sp, #192	; 0xc0
 800f184:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 800f044 <__kernel_rem_pio2f+0x300>
 800f188:	440b      	add	r3, r1
 800f18a:	2c00      	cmp	r4, #0
 800f18c:	da05      	bge.n	800f19a <__kernel_rem_pio2f+0x456>
 800f18e:	b10f      	cbz	r7, 800f194 <__kernel_rem_pio2f+0x450>
 800f190:	eef1 7a67 	vneg.f32	s15, s15
 800f194:	edc8 7a00 	vstr	s15, [r8]
 800f198:	e7ae      	b.n	800f0f8 <__kernel_rem_pio2f+0x3b4>
 800f19a:	ed33 7a01 	vldmdb	r3!, {s14}
 800f19e:	3c01      	subs	r4, #1
 800f1a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f1a4:	e7f1      	b.n	800f18a <__kernel_rem_pio2f+0x446>
 800f1a6:	ed73 7a01 	vldmdb	r3!, {s15}
 800f1aa:	3a01      	subs	r2, #1
 800f1ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f1b0:	e7d2      	b.n	800f158 <__kernel_rem_pio2f+0x414>
 800f1b2:	eef0 7a47 	vmov.f32	s15, s14
 800f1b6:	e7d4      	b.n	800f162 <__kernel_rem_pio2f+0x41e>
 800f1b8:	ecb2 7a01 	vldmia	r2!, {s14}
 800f1bc:	3301      	adds	r3, #1
 800f1be:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f1c2:	e7d6      	b.n	800f172 <__kernel_rem_pio2f+0x42e>
 800f1c4:	edd2 7a00 	vldr	s15, [r2]
 800f1c8:	edd2 6a01 	vldr	s13, [r2, #4]
 800f1cc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800f1d0:	3801      	subs	r0, #1
 800f1d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f1d6:	ed82 7a00 	vstr	s14, [r2]
 800f1da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f1de:	edc2 7a01 	vstr	s15, [r2, #4]
 800f1e2:	e798      	b.n	800f116 <__kernel_rem_pio2f+0x3d2>
 800f1e4:	edd3 7a00 	vldr	s15, [r3]
 800f1e8:	edd3 6a01 	vldr	s13, [r3, #4]
 800f1ec:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800f1f0:	3a01      	subs	r2, #1
 800f1f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f1f6:	ed83 7a00 	vstr	s14, [r3]
 800f1fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f1fe:	edc3 7a01 	vstr	s15, [r3, #4]
 800f202:	e78d      	b.n	800f120 <__kernel_rem_pio2f+0x3dc>
 800f204:	ed33 7a01 	vldmdb	r3!, {s14}
 800f208:	3c01      	subs	r4, #1
 800f20a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f20e:	e78f      	b.n	800f130 <__kernel_rem_pio2f+0x3ec>
 800f210:	eef1 6a66 	vneg.f32	s13, s13
 800f214:	eeb1 7a47 	vneg.f32	s14, s14
 800f218:	edc8 6a00 	vstr	s13, [r8]
 800f21c:	ed88 7a01 	vstr	s14, [r8, #4]
 800f220:	eef1 7a67 	vneg.f32	s15, s15
 800f224:	e790      	b.n	800f148 <__kernel_rem_pio2f+0x404>
 800f226:	bf00      	nop

0800f228 <scalbn>:
 800f228:	b570      	push	{r4, r5, r6, lr}
 800f22a:	ec55 4b10 	vmov	r4, r5, d0
 800f22e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800f232:	4606      	mov	r6, r0
 800f234:	462b      	mov	r3, r5
 800f236:	b999      	cbnz	r1, 800f260 <scalbn+0x38>
 800f238:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f23c:	4323      	orrs	r3, r4
 800f23e:	d03f      	beq.n	800f2c0 <scalbn+0x98>
 800f240:	4b35      	ldr	r3, [pc, #212]	; (800f318 <scalbn+0xf0>)
 800f242:	4629      	mov	r1, r5
 800f244:	ee10 0a10 	vmov	r0, s0
 800f248:	2200      	movs	r2, #0
 800f24a:	f7f1 f9fd 	bl	8000648 <__aeabi_dmul>
 800f24e:	4b33      	ldr	r3, [pc, #204]	; (800f31c <scalbn+0xf4>)
 800f250:	429e      	cmp	r6, r3
 800f252:	4604      	mov	r4, r0
 800f254:	460d      	mov	r5, r1
 800f256:	da10      	bge.n	800f27a <scalbn+0x52>
 800f258:	a327      	add	r3, pc, #156	; (adr r3, 800f2f8 <scalbn+0xd0>)
 800f25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f25e:	e01f      	b.n	800f2a0 <scalbn+0x78>
 800f260:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800f264:	4291      	cmp	r1, r2
 800f266:	d10c      	bne.n	800f282 <scalbn+0x5a>
 800f268:	ee10 2a10 	vmov	r2, s0
 800f26c:	4620      	mov	r0, r4
 800f26e:	4629      	mov	r1, r5
 800f270:	f7f1 f834 	bl	80002dc <__adddf3>
 800f274:	4604      	mov	r4, r0
 800f276:	460d      	mov	r5, r1
 800f278:	e022      	b.n	800f2c0 <scalbn+0x98>
 800f27a:	460b      	mov	r3, r1
 800f27c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f280:	3936      	subs	r1, #54	; 0x36
 800f282:	f24c 3250 	movw	r2, #50000	; 0xc350
 800f286:	4296      	cmp	r6, r2
 800f288:	dd0d      	ble.n	800f2a6 <scalbn+0x7e>
 800f28a:	2d00      	cmp	r5, #0
 800f28c:	a11c      	add	r1, pc, #112	; (adr r1, 800f300 <scalbn+0xd8>)
 800f28e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f292:	da02      	bge.n	800f29a <scalbn+0x72>
 800f294:	a11c      	add	r1, pc, #112	; (adr r1, 800f308 <scalbn+0xe0>)
 800f296:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f29a:	a319      	add	r3, pc, #100	; (adr r3, 800f300 <scalbn+0xd8>)
 800f29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2a0:	f7f1 f9d2 	bl	8000648 <__aeabi_dmul>
 800f2a4:	e7e6      	b.n	800f274 <scalbn+0x4c>
 800f2a6:	1872      	adds	r2, r6, r1
 800f2a8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f2ac:	428a      	cmp	r2, r1
 800f2ae:	dcec      	bgt.n	800f28a <scalbn+0x62>
 800f2b0:	2a00      	cmp	r2, #0
 800f2b2:	dd08      	ble.n	800f2c6 <scalbn+0x9e>
 800f2b4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f2b8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f2bc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f2c0:	ec45 4b10 	vmov	d0, r4, r5
 800f2c4:	bd70      	pop	{r4, r5, r6, pc}
 800f2c6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f2ca:	da08      	bge.n	800f2de <scalbn+0xb6>
 800f2cc:	2d00      	cmp	r5, #0
 800f2ce:	a10a      	add	r1, pc, #40	; (adr r1, 800f2f8 <scalbn+0xd0>)
 800f2d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f2d4:	dac0      	bge.n	800f258 <scalbn+0x30>
 800f2d6:	a10e      	add	r1, pc, #56	; (adr r1, 800f310 <scalbn+0xe8>)
 800f2d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f2dc:	e7bc      	b.n	800f258 <scalbn+0x30>
 800f2de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f2e2:	3236      	adds	r2, #54	; 0x36
 800f2e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f2e8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f2ec:	4620      	mov	r0, r4
 800f2ee:	4b0c      	ldr	r3, [pc, #48]	; (800f320 <scalbn+0xf8>)
 800f2f0:	2200      	movs	r2, #0
 800f2f2:	e7d5      	b.n	800f2a0 <scalbn+0x78>
 800f2f4:	f3af 8000 	nop.w
 800f2f8:	c2f8f359 	.word	0xc2f8f359
 800f2fc:	01a56e1f 	.word	0x01a56e1f
 800f300:	8800759c 	.word	0x8800759c
 800f304:	7e37e43c 	.word	0x7e37e43c
 800f308:	8800759c 	.word	0x8800759c
 800f30c:	fe37e43c 	.word	0xfe37e43c
 800f310:	c2f8f359 	.word	0xc2f8f359
 800f314:	81a56e1f 	.word	0x81a56e1f
 800f318:	43500000 	.word	0x43500000
 800f31c:	ffff3cb0 	.word	0xffff3cb0
 800f320:	3c900000 	.word	0x3c900000

0800f324 <scalbnf>:
 800f324:	ee10 3a10 	vmov	r3, s0
 800f328:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800f32c:	d02b      	beq.n	800f386 <scalbnf+0x62>
 800f32e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800f332:	d302      	bcc.n	800f33a <scalbnf+0x16>
 800f334:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f338:	4770      	bx	lr
 800f33a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800f33e:	d123      	bne.n	800f388 <scalbnf+0x64>
 800f340:	4b24      	ldr	r3, [pc, #144]	; (800f3d4 <scalbnf+0xb0>)
 800f342:	eddf 7a25 	vldr	s15, [pc, #148]	; 800f3d8 <scalbnf+0xb4>
 800f346:	4298      	cmp	r0, r3
 800f348:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f34c:	db17      	blt.n	800f37e <scalbnf+0x5a>
 800f34e:	ee10 3a10 	vmov	r3, s0
 800f352:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800f356:	3a19      	subs	r2, #25
 800f358:	f24c 3150 	movw	r1, #50000	; 0xc350
 800f35c:	4288      	cmp	r0, r1
 800f35e:	dd15      	ble.n	800f38c <scalbnf+0x68>
 800f360:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800f3dc <scalbnf+0xb8>
 800f364:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800f3e0 <scalbnf+0xbc>
 800f368:	ee10 3a10 	vmov	r3, s0
 800f36c:	eeb0 7a67 	vmov.f32	s14, s15
 800f370:	2b00      	cmp	r3, #0
 800f372:	bfb8      	it	lt
 800f374:	eef0 7a66 	vmovlt.f32	s15, s13
 800f378:	ee27 0a87 	vmul.f32	s0, s15, s14
 800f37c:	4770      	bx	lr
 800f37e:	eddf 7a19 	vldr	s15, [pc, #100]	; 800f3e4 <scalbnf+0xc0>
 800f382:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f386:	4770      	bx	lr
 800f388:	0dd2      	lsrs	r2, r2, #23
 800f38a:	e7e5      	b.n	800f358 <scalbnf+0x34>
 800f38c:	4410      	add	r0, r2
 800f38e:	28fe      	cmp	r0, #254	; 0xfe
 800f390:	dce6      	bgt.n	800f360 <scalbnf+0x3c>
 800f392:	2800      	cmp	r0, #0
 800f394:	dd06      	ble.n	800f3a4 <scalbnf+0x80>
 800f396:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f39a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800f39e:	ee00 3a10 	vmov	s0, r3
 800f3a2:	4770      	bx	lr
 800f3a4:	f110 0f16 	cmn.w	r0, #22
 800f3a8:	da09      	bge.n	800f3be <scalbnf+0x9a>
 800f3aa:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800f3e4 <scalbnf+0xc0>
 800f3ae:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800f3e8 <scalbnf+0xc4>
 800f3b2:	ee10 3a10 	vmov	r3, s0
 800f3b6:	eeb0 7a67 	vmov.f32	s14, s15
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	e7d9      	b.n	800f372 <scalbnf+0x4e>
 800f3be:	3019      	adds	r0, #25
 800f3c0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f3c4:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800f3c8:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800f3ec <scalbnf+0xc8>
 800f3cc:	ee07 3a90 	vmov	s15, r3
 800f3d0:	e7d7      	b.n	800f382 <scalbnf+0x5e>
 800f3d2:	bf00      	nop
 800f3d4:	ffff3cb0 	.word	0xffff3cb0
 800f3d8:	4c000000 	.word	0x4c000000
 800f3dc:	7149f2ca 	.word	0x7149f2ca
 800f3e0:	f149f2ca 	.word	0xf149f2ca
 800f3e4:	0da24260 	.word	0x0da24260
 800f3e8:	8da24260 	.word	0x8da24260
 800f3ec:	33000000 	.word	0x33000000

0800f3f0 <floor>:
 800f3f0:	ec51 0b10 	vmov	r0, r1, d0
 800f3f4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f3f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3fc:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800f400:	2e13      	cmp	r6, #19
 800f402:	ee10 5a10 	vmov	r5, s0
 800f406:	ee10 8a10 	vmov	r8, s0
 800f40a:	460c      	mov	r4, r1
 800f40c:	dc31      	bgt.n	800f472 <floor+0x82>
 800f40e:	2e00      	cmp	r6, #0
 800f410:	da14      	bge.n	800f43c <floor+0x4c>
 800f412:	a333      	add	r3, pc, #204	; (adr r3, 800f4e0 <floor+0xf0>)
 800f414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f418:	f7f0 ff60 	bl	80002dc <__adddf3>
 800f41c:	2200      	movs	r2, #0
 800f41e:	2300      	movs	r3, #0
 800f420:	f7f1 fba2 	bl	8000b68 <__aeabi_dcmpgt>
 800f424:	b138      	cbz	r0, 800f436 <floor+0x46>
 800f426:	2c00      	cmp	r4, #0
 800f428:	da53      	bge.n	800f4d2 <floor+0xe2>
 800f42a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800f42e:	4325      	orrs	r5, r4
 800f430:	d052      	beq.n	800f4d8 <floor+0xe8>
 800f432:	4c2d      	ldr	r4, [pc, #180]	; (800f4e8 <floor+0xf8>)
 800f434:	2500      	movs	r5, #0
 800f436:	4621      	mov	r1, r4
 800f438:	4628      	mov	r0, r5
 800f43a:	e024      	b.n	800f486 <floor+0x96>
 800f43c:	4f2b      	ldr	r7, [pc, #172]	; (800f4ec <floor+0xfc>)
 800f43e:	4137      	asrs	r7, r6
 800f440:	ea01 0307 	and.w	r3, r1, r7
 800f444:	4303      	orrs	r3, r0
 800f446:	d01e      	beq.n	800f486 <floor+0x96>
 800f448:	a325      	add	r3, pc, #148	; (adr r3, 800f4e0 <floor+0xf0>)
 800f44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f44e:	f7f0 ff45 	bl	80002dc <__adddf3>
 800f452:	2200      	movs	r2, #0
 800f454:	2300      	movs	r3, #0
 800f456:	f7f1 fb87 	bl	8000b68 <__aeabi_dcmpgt>
 800f45a:	2800      	cmp	r0, #0
 800f45c:	d0eb      	beq.n	800f436 <floor+0x46>
 800f45e:	2c00      	cmp	r4, #0
 800f460:	bfbe      	ittt	lt
 800f462:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f466:	4133      	asrlt	r3, r6
 800f468:	18e4      	addlt	r4, r4, r3
 800f46a:	ea24 0407 	bic.w	r4, r4, r7
 800f46e:	2500      	movs	r5, #0
 800f470:	e7e1      	b.n	800f436 <floor+0x46>
 800f472:	2e33      	cmp	r6, #51	; 0x33
 800f474:	dd0b      	ble.n	800f48e <floor+0x9e>
 800f476:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f47a:	d104      	bne.n	800f486 <floor+0x96>
 800f47c:	ee10 2a10 	vmov	r2, s0
 800f480:	460b      	mov	r3, r1
 800f482:	f7f0 ff2b 	bl	80002dc <__adddf3>
 800f486:	ec41 0b10 	vmov	d0, r0, r1
 800f48a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f48e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800f492:	f04f 37ff 	mov.w	r7, #4294967295
 800f496:	40df      	lsrs	r7, r3
 800f498:	4238      	tst	r0, r7
 800f49a:	d0f4      	beq.n	800f486 <floor+0x96>
 800f49c:	a310      	add	r3, pc, #64	; (adr r3, 800f4e0 <floor+0xf0>)
 800f49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4a2:	f7f0 ff1b 	bl	80002dc <__adddf3>
 800f4a6:	2200      	movs	r2, #0
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	f7f1 fb5d 	bl	8000b68 <__aeabi_dcmpgt>
 800f4ae:	2800      	cmp	r0, #0
 800f4b0:	d0c1      	beq.n	800f436 <floor+0x46>
 800f4b2:	2c00      	cmp	r4, #0
 800f4b4:	da0a      	bge.n	800f4cc <floor+0xdc>
 800f4b6:	2e14      	cmp	r6, #20
 800f4b8:	d101      	bne.n	800f4be <floor+0xce>
 800f4ba:	3401      	adds	r4, #1
 800f4bc:	e006      	b.n	800f4cc <floor+0xdc>
 800f4be:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f4c2:	2301      	movs	r3, #1
 800f4c4:	40b3      	lsls	r3, r6
 800f4c6:	441d      	add	r5, r3
 800f4c8:	45a8      	cmp	r8, r5
 800f4ca:	d8f6      	bhi.n	800f4ba <floor+0xca>
 800f4cc:	ea25 0507 	bic.w	r5, r5, r7
 800f4d0:	e7b1      	b.n	800f436 <floor+0x46>
 800f4d2:	2500      	movs	r5, #0
 800f4d4:	462c      	mov	r4, r5
 800f4d6:	e7ae      	b.n	800f436 <floor+0x46>
 800f4d8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800f4dc:	e7ab      	b.n	800f436 <floor+0x46>
 800f4de:	bf00      	nop
 800f4e0:	8800759c 	.word	0x8800759c
 800f4e4:	7e37e43c 	.word	0x7e37e43c
 800f4e8:	bff00000 	.word	0xbff00000
 800f4ec:	000fffff 	.word	0x000fffff

0800f4f0 <floorf>:
 800f4f0:	ee10 3a10 	vmov	r3, s0
 800f4f4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800f4f8:	3a7f      	subs	r2, #127	; 0x7f
 800f4fa:	2a16      	cmp	r2, #22
 800f4fc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f500:	dc2a      	bgt.n	800f558 <floorf+0x68>
 800f502:	2a00      	cmp	r2, #0
 800f504:	da11      	bge.n	800f52a <floorf+0x3a>
 800f506:	eddf 7a18 	vldr	s15, [pc, #96]	; 800f568 <floorf+0x78>
 800f50a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f50e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f516:	dd05      	ble.n	800f524 <floorf+0x34>
 800f518:	2b00      	cmp	r3, #0
 800f51a:	da23      	bge.n	800f564 <floorf+0x74>
 800f51c:	4a13      	ldr	r2, [pc, #76]	; (800f56c <floorf+0x7c>)
 800f51e:	2900      	cmp	r1, #0
 800f520:	bf18      	it	ne
 800f522:	4613      	movne	r3, r2
 800f524:	ee00 3a10 	vmov	s0, r3
 800f528:	4770      	bx	lr
 800f52a:	4911      	ldr	r1, [pc, #68]	; (800f570 <floorf+0x80>)
 800f52c:	4111      	asrs	r1, r2
 800f52e:	420b      	tst	r3, r1
 800f530:	d0fa      	beq.n	800f528 <floorf+0x38>
 800f532:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800f568 <floorf+0x78>
 800f536:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f53a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f53e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f542:	ddef      	ble.n	800f524 <floorf+0x34>
 800f544:	2b00      	cmp	r3, #0
 800f546:	bfbe      	ittt	lt
 800f548:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800f54c:	fa40 f202 	asrlt.w	r2, r0, r2
 800f550:	189b      	addlt	r3, r3, r2
 800f552:	ea23 0301 	bic.w	r3, r3, r1
 800f556:	e7e5      	b.n	800f524 <floorf+0x34>
 800f558:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800f55c:	d3e4      	bcc.n	800f528 <floorf+0x38>
 800f55e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f562:	4770      	bx	lr
 800f564:	2300      	movs	r3, #0
 800f566:	e7dd      	b.n	800f524 <floorf+0x34>
 800f568:	7149f2ca 	.word	0x7149f2ca
 800f56c:	bf800000 	.word	0xbf800000
 800f570:	007fffff 	.word	0x007fffff

0800f574 <_init>:
 800f574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f576:	bf00      	nop
 800f578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f57a:	bc08      	pop	{r3}
 800f57c:	469e      	mov	lr, r3
 800f57e:	4770      	bx	lr

0800f580 <_fini>:
 800f580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f582:	bf00      	nop
 800f584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f586:	bc08      	pop	{r3}
 800f588:	469e      	mov	lr, r3
 800f58a:	4770      	bx	lr
